

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Aug 25 12:09:56 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1,inline
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	text96,global,reloc=2,class=CODE,delta=1
   119                           	psect	text97,global,reloc=2,class=CODE,delta=1
   120                           	psect	text98,global,reloc=2,class=CODE,delta=1
   121                           	psect	text99,global,reloc=2,class=CODE,delta=1
   122                           	psect	text100,global,reloc=2,class=CODE,delta=1
   123                           	psect	text101,global,reloc=2,class=CODE,delta=1
   124                           	psect	text102,global,reloc=2,class=CODE,delta=1
   125                           	psect	text103,global,reloc=2,class=CODE,delta=1
   126                           	psect	text104,global,reloc=2,class=CODE,delta=1
   127                           	psect	text105,global,reloc=2,class=CODE,delta=1,inline
   128                           	psect	text106,global,reloc=2,class=CODE,delta=1
   129                           	psect	text107,global,reloc=2,class=CODE,delta=1,group=1
   130                           	psect	text108,global,reloc=2,class=CODE,delta=1,group=1
   131                           	psect	text109,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   133                           	psect	text111,global,reloc=2,class=CODE,delta=1,group=1
   134                           	psect	text112,global,reloc=2,class=CODE,delta=1,group=1
   135                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   136                           	psect	text114,global,reloc=2,class=CODE,delta=1
   137                           	psect	text115,global,reloc=2,class=CODE,delta=1,group=1
   138                           	psect	text116,global,reloc=2,class=CODE,delta=1
   139                           	psect	text117,global,reloc=2,class=CODE,delta=1
   140                           	psect	text118,global,reloc=2,class=CODE,delta=1
   141                           	psect	text119,global,reloc=2,class=CODE,delta=1
   142                           	psect	text120,global,reloc=2,class=CODE,delta=1
   143                           	psect	text121,global,reloc=2,class=CODE,delta=1,inline
   144                           	psect	text122,global,reloc=2,class=CODE,delta=1
   145                           	psect	text123,global,reloc=2,class=CODE,delta=1
   146                           	psect	text124,global,reloc=2,class=CODE,delta=1
   147                           	psect	text125,global,reloc=2,class=CODE,delta=1
   148                           	psect	text126,global,reloc=2,class=CODE,delta=1
   149                           	psect	text127,global,reloc=2,class=CODE,delta=1
   150                           	psect	text128,global,reloc=2,class=CODE,delta=1
   151                           	psect	text129,global,reloc=2,class=CODE,delta=1
   152                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   153                           	psect	text131,global,reloc=2,class=CODE,delta=1,group=1
   154                           	psect	text132,global,reloc=2,class=CODE,delta=1,group=1
   155                           	psect	text133,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text134,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   158                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   159                           	psect	text137,global,reloc=2,class=CODE,delta=1,group=1
   160                           	psect	text138,global,reloc=2,class=CODE,delta=1,group=1
   161                           	psect	text139,global,reloc=2,class=CODE,delta=1,group=1
   162                           	psect	text140,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	text142,global,reloc=2,class=CODE,delta=1
   165                           	psect	text143,global,reloc=2,class=CODE,delta=1
   166                           	psect	text144,global,reloc=2,class=CODE,delta=1
   167                           	psect	text145,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	text147,global,reloc=2,class=CODE,delta=1
   170                           	psect	text148,global,reloc=2,class=CODE,delta=1
   171                           	psect	text149,global,reloc=2,class=CODE,delta=1
   172                           	psect	text150,global,reloc=2,class=CODE,delta=1
   173                           	psect	text151,global,reloc=2,class=CODE,delta=1
   174                           	psect	text152,global,reloc=2,class=CODE,delta=1
   175                           	psect	text153,global,reloc=2,class=CODE,delta=1
   176                           	psect	text154,global,reloc=2,class=CODE,delta=1,group=1
   177                           	psect	text155,global,reloc=2,class=CODE,delta=1
   178                           	psect	text156,global,reloc=2,class=CODE,delta=1
   179                           	psect	text157,global,reloc=2,class=CODE,delta=1
   180                           	psect	text158,global,reloc=2,class=CODE,delta=1
   181                           	psect	text159,global,reloc=2,class=CODE,delta=1,inline
   182                           	psect	text160,global,reloc=2,class=CODE,delta=1
   183                           	psect	text161,global,reloc=2,class=CODE,delta=1
   184                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   185                           	psect	text163,global,reloc=2,class=CODE,delta=1
   186                           	psect	text164,global,reloc=2,class=CODE,delta=1
   187                           	psect	text165,global,reloc=2,class=CODE,delta=1
   188                           	psect	text166,global,reloc=2,class=CODE,delta=1
   189                           	psect	text167,global,reloc=2,class=CODE,delta=1
   190                           	psect	text168,global,reloc=2,class=CODE,delta=1
   191                           	psect	text169,global,reloc=2,class=CODE,delta=1
   192                           	psect	text170,global,reloc=2,class=CODE,delta=1,inline
   193                           	psect	text171,global,reloc=2,class=CODE,delta=1
   194                           	psect	text172,global,reloc=2,class=CODE,delta=1
   195                           	psect	text173,global,reloc=2,class=CODE,delta=1
   196                           	psect	text174,global,reloc=2,class=CODE,delta=1
   197                           	psect	text175,global,reloc=2,class=CODE,delta=1
   198                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   199                           	psect	text176,global,reloc=2,class=CODE,delta=1
   200                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   201                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   202  0000                     
   203                           ; Version 1.43
   204                           ; Generated 25/07/2017 GMT
   205                           ; 
   206                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   207                           ; All rights reserved.
   208                           ; 
   209                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   210                           ; 
   211                           ; Redistribution and use in source and binary forms, with or without modification, are
   212                           ; permitted provided that the following conditions are met:
   213                           ; 
   214                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   215                           ;        conditions and the following disclaimer.
   216                           ; 
   217                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   218                           ;        of conditions and the following disclaimer in the documentation and/or other
   219                           ;        materials provided with the distribution.
   220                           ; 
   221                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   222                           ;        software without specific prior written permission.
   223                           ; 
   224                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   225                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   226                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   227                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   228                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   229                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   230                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   231                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   232                           ; 
   233                           ; 
   234                           ; Code-generator required, PIC18F67J50 Definitions
   235                           ; 
   236                           ; SFR Addresses
   237  0000                     
   238                           	psect	idataCOMRAM
   239  018032                     __pidataCOMRAM:
   240                           	opt stack 0
   241                           
   242                           ;initializer for _gCursor
   243  018032  0006               	dw	6
   244  018034  0006               	dw	6
   245                           
   246                           ;initializer for _Bus_State
   247  018036  01                 	db	1
   248                           
   249                           ;initializer for _A
   250  018037  41                 	db	65
   251                           
   252                           ;initializer for _a
   253  018038  61                 	db	97
   254                           
   255                           ;initializer for _zero
   256  018039  30                 	db	48
   257                           
   258                           ;initializer for _l
   259  01803A  80                 	db	128
   260                           
   261                           ;initializer for _w
   262  01803B  80                 	db	128
   263                           
   264                           	psect	idataBANK0
   265  01808E                     __pidataBANK0:
   266                           	opt stack 0
   267                           
   268                           ;initializer for _gForecolour
   269  01808E  FFFF               	dw	65535
   270                           
   271                           ;initializer for _change
   272  018090  01                 	db	1
   273                           
   274                           	psect	idataBANK1
   275  017FC6                     __pidataBANK1:
   276                           	opt stack 0
   277                           
   278                           ;initializer for Console_Render@F6956
   279  017FC6  0006               	dw	6
   280  017FC8  0006               	dw	6
   281                           
   282                           ;initializer for _gLineSize
   283  017FCA  0080               	dw	128
   284  017FCC  0007               	dw	7
   285                           
   286                           ;initializer for _gCharSize
   287  017FCE  0005               	dw	5
   288  017FD0  0007               	dw	7
   289                           
   290                           ;initializer for _currentPos
   291  017FD2  00C8               	dw	200
   292                           
   293                           ;initializer for _direction
   294  017FD4  00C8               	dw	200
   295                           
   296                           	psect	mediumconst
   297  00FB5C                     __pmediumconst:
   298                           	opt stack 0
   299  00FB5C  00                 	db	0
   300  00FB5D                     _InitList:
   301                           	opt stack 0
   302  00FB5D  1100               	dw	4352
   303  00FB5F  0080               	dw	128
   304  00FB61  012C               	dw	300
   305  00FB63  B100               	dw	45312
   306  00FB65  0002               	dw	2
   307  00FB67  0035               	dw	53
   308  00FB69  0036               	dw	54
   309  00FB6B  B200               	dw	45568
   310  00FB6D  0002               	dw	2
   311  00FB6F  0035               	dw	53
   312  00FB71  0036               	dw	54
   313  00FB73  B300               	dw	45824
   314  00FB75  0002               	dw	2
   315  00FB77  0035               	dw	53
   316  00FB79  0036               	dw	54
   317  00FB7B  0002               	dw	2
   318  00FB7D  0035               	dw	53
   319  00FB7F  0036               	dw	54
   320  00FB81  B400               	dw	46080
   321  00FB83  0000               	dw	0
   322  00FB85  C000               	dw	49152
   323  00FB87  00A2               	dw	162
   324  00FB89  0002               	dw	2
   325  00FB8B  0084               	dw	132
   326  00FB8D  C100               	dw	49408
   327  00FB8F  00C5               	dw	197
   328  00FB91  C200               	dw	49664
   329  00FB93  000D               	dw	13
   330  00FB95  0000               	dw	0
   331  00FB97  C300               	dw	49920
   332  00FB99  008D               	dw	141
   333  00FB9B  002A               	dw	42
   334  00FB9D  C400               	dw	50176
   335  00FB9F  008D               	dw	141
   336  00FBA1  00EE               	dw	238
   337  00FBA3  C500               	dw	50432
   338  00FBA5  000A               	dw	10
   339  00FBA7  3600               	dw	13824
   340  00FBA9  00C8               	dw	200
   341  00FBAB  E000               	dw	57344
   342  00FBAD  0012               	dw	18
   343  00FBAF  001C               	dw	28
   344  00FBB1  0010               	dw	16
   345  00FBB3  0018               	dw	24
   346  00FBB5  0033               	dw	51
   347  00FBB7  002C               	dw	44
   348  00FBB9  0025               	dw	37
   349  00FBBB  0028               	dw	40
   350  00FBBD  0028               	dw	40
   351  00FBBF  0027               	dw	39
   352  00FBC1  002F               	dw	47
   353  00FBC3  003C               	dw	60
   354  00FBC5  0000               	dw	0
   355  00FBC7  0003               	dw	3
   356  00FBC9  0003               	dw	3
   357  00FBCB  0010               	dw	16
   358  00FBCD  0080               	dw	128
   359  00FBCF  0078               	dw	120
   360  00FBD1  E100               	dw	57600
   361  00FBD3  0012               	dw	18
   362  00FBD5  001C               	dw	28
   363  00FBD7  0010               	dw	16
   364  00FBD9  0018               	dw	24
   365  00FBDB  002D               	dw	45
   366  00FBDD  0028               	dw	40
   367  00FBDF  0023               	dw	35
   368  00FBE1  0028               	dw	40
   369  00FBE3  0028               	dw	40
   370  00FBE5  0026               	dw	38
   371  00FBE7  002F               	dw	47
   372  00FBE9  003B               	dw	59
   373  00FBEB  0000               	dw	0
   374  00FBED  0003               	dw	3
   375  00FBEF  0003               	dw	3
   376  00FBF1  0010               	dw	16
   377  00FBF3  3A00               	dw	14848
   378  00FBF5  0005               	dw	5
   379  00FBF7  2A00               	dw	10752
   380  00FBF9  0000               	dw	0
   381  00FBFB  0002               	dw	2
   382  00FBFD  0000               	dw	0
   383  00FBFF  0081               	dw	129
   384  00FC01  2B00               	dw	11008
   385  00FC03  0000               	dw	0
   386  00FC05  0003               	dw	3
   387  00FC07  0000               	dw	0
   388  00FC09  00A2               	dw	162
   389  00FC0B  2900               	dw	10496
   390  00FC0D  2C00               	dw	11264
   391  00FC0F                     __end_of_InitList:
   392                           	opt stack 0
   393  00FC0F                     __powers_:
   394                           	opt stack 0
   395  00FC0F  0000               	dw	0
   396  00FC11  3F80               	dw	16256
   397  00FC13  0000               	dw	0
   398  00FC15  4120               	dw	16672
   399  00FC17  0000               	dw	0
   400  00FC19  42C8               	dw	17096
   401  00FC1B  0000               	dw	0
   402  00FC1D  447A               	dw	17530
   403  00FC1F  4000               	dw	16384
   404  00FC21  461C               	dw	17948
   405  00FC23  5000               	dw	20480
   406  00FC25  47C3               	dw	18371
   407  00FC27  2400               	dw	9216
   408  00FC29  4974               	dw	18804
   409  00FC2B  9680               	dw	38528
   410  00FC2D  4B18               	dw	19224
   411  00FC2F  BC20               	dw	48160
   412  00FC31  4CBE               	dw	19646
   413  00FC33  6B28               	dw	27432
   414  00FC35  4E6E               	dw	20078
   415  00FC37  02F9               	dw	761
   416  00FC39  5015               	dw	20501
   417  00FC3B  78EC               	dw	30956
   418  00FC3D  60AD               	dw	24749
   419  00FC3F  F2CA               	dw	62154
   420  00FC41  7149               	dw	29001
   421  00FC43                     __end_of__powers_:
   422                           	opt stack 0
   423  00FC43                     __npowers_:
   424                           	opt stack 0
   425  00FC43  0000               	dw	0
   426  00FC45  3F80               	dw	16256
   427  00FC47  CCCD               	dw	52429
   428  00FC49  3DCC               	dw	15820
   429  00FC4B  D70A               	dw	55050
   430  00FC4D  3C23               	dw	15395
   431  00FC4F  126F               	dw	4719
   432  00FC51  3A83               	dw	14979
   433  00FC53  B717               	dw	46871
   434  00FC55  38D1               	dw	14545
   435  00FC57  C5AC               	dw	50604
   436  00FC59  3727               	dw	14119
   437  00FC5B  37BD               	dw	14269
   438  00FC5D  3586               	dw	13702
   439  00FC5F  BF95               	dw	49045
   440  00FC61  33D6               	dw	13270
   441  00FC63  CC77               	dw	52343
   442  00FC65  322B               	dw	12843
   443  00FC67  705F               	dw	28767
   444  00FC69  3089               	dw	12425
   445  00FC6B  E6FF               	dw	59135
   446  00FC6D  2EDB               	dw	11995
   447  00FC6F  E508               	dw	58632
   448  00FC71  1E3C               	dw	7740
   449  00FC73  4260               	dw	16992
   450  00FC75  0DA2               	dw	3490
   451  00FC77                     __end_of__npowers_:
   452                           	opt stack 0
   453  00FC77                     _dpowers:
   454                           	opt stack 0
   455  00FC77  0001               	dw	1
   456  00FC79  0000               	dw	0
   457  00FC7B  000A               	dw	10
   458  00FC7D  0000               	dw	0
   459  00FC7F  0064               	dw	100
   460  00FC81  0000               	dw	0
   461  00FC83  03E8               	dw	1000
   462  00FC85  0000               	dw	0
   463  00FC87  2710               	dw	10000
   464  00FC89  0000               	dw	0
   465  00FC8B  86A0               	dw	34464
   466  00FC8D  0001               	dw	1
   467  00FC8F  4240               	dw	16960
   468  00FC91  000F               	dw	15
   469  00FC93  9680               	dw	38528
   470  00FC95  0098               	dw	152
   471  00FC97  E100               	dw	57600
   472  00FC99  05F5               	dw	1525
   473  00FC9B  CA00               	dw	51712
   474  00FC9D  3B9A               	dw	15258
   475  00FC9F                     __end_of_dpowers:
   476                           	opt stack 0
   477  00FC9F                     Timer0_Init@PRESCALE:
   478                           	opt stack 0
   479  00FC9F  0002               	dw	2
   480  00FCA1  0004               	dw	4
   481  00FCA3  0008               	dw	8
   482  00FCA5  0010               	dw	16
   483  00FCA7  0020               	dw	32
   484  00FCA9  0040               	dw	64
   485  00FCAB  0080               	dw	128
   486  00FCAD  0100               	dw	256
   487  00FCAF                     __end_ofTimer0_Init@PRESCALE:
   488                           	opt stack 0
   489  00FCAF                     PortProperty_Valid@F6830:
   490                           	opt stack 0
   491  00FCAF  00                 	db	0
   492  00FCB0  01                 	db	1
   493  00FCB1  02                 	db	2
   494  00FCB2  00                 	db	0
   495  00FCB3  01                 	db	1
   496  00FCB4  00                 	db	0
   497  00FCB5  01                 	db	1
   498  00FCB6  00                 	db	0
   499  00FCB7  02                 	db	2
   500  00FCB8  02                 	db	2
   501  00FCB9  00                 	db	0
   502  00FCBA  00                 	db	0
   503  00FCBB  03                 	db	3
   504  00FCBC  03                 	db	3
   505  00FCBD  03                 	db	3
   506  00FCBE  00                 	db	0
   507  00FCBF                     __end_ofPortProperty_Valid@F6830:
   508                           	opt stack 0
   509  00FCBF                     _MASKS:
   510                           	opt stack 0
   511  00FCBF  00                 	db	0
   512  00FCC0  01                 	db	1
   513  00FCC1  03                 	db	3
   514  00FCC2  07                 	db	7
   515  00FCC3  0F                 	db	15
   516  00FCC4  1F                 	db	31
   517  00FCC5  3F                 	db	63
   518  00FCC6  7F                 	db	127
   519  00FCC7  FF                 	db	255
   520  00FCC8                     __end_of_MASKS:
   521                           	opt stack 0
   522  00FCC8                     HMI_SetButton@F7213:
   523                           	opt stack 0
   524  00FCC8  00                 	db	0
   525  00FCC9  02                 	db	2
   526  00FCCA  01                 	db	1
   527  00FCCB  03                 	db	3
   528  00FCCC                     __end_ofHMI_SetButton@F7213:
   529                           	opt stack 0
   530  00FCCC                     Timer2_Init@PRESCALE:
   531                           	opt stack 0
   532  00FCCC  01                 	db	1
   533  00FCCD  04                 	db	4
   534  00FCCE  10                 	db	16
   535  00FCCF                     __end_ofTimer2_Init@PRESCALE:
   536                           	opt stack 0
   537  00FCCF                     _Font5x7:
   538                           	opt stack 0
   539  00FCCF  00                 	db	0
   540  00FCD0  00                 	db	0
   541  00FCD1  00                 	db	0
   542  00FCD2  00                 	db	0
   543  00FCD3  00                 	db	0
   544  00FCD4  00                 	db	0
   545  00FCD5  00                 	db	0
   546  00FCD6  5F                 	db	95
   547  00FCD7  00                 	db	0
   548  00FCD8  00                 	db	0
   549  00FCD9  00                 	db	0
   550  00FCDA  07                 	db	7
   551  00FCDB  00                 	db	0
   552  00FCDC  07                 	db	7
   553  00FCDD  00                 	db	0
   554  00FCDE  14                 	db	20
   555  00FCDF  7F                 	db	127
   556  00FCE0  14                 	db	20
   557  00FCE1  7F                 	db	127
   558  00FCE2  14                 	db	20
   559  00FCE3  24                 	db	36
   560  00FCE4  2A                 	db	42
   561  00FCE5  7F                 	db	127
   562  00FCE6  2A                 	db	42
   563  00FCE7  12                 	db	18
   564  00FCE8  23                 	db	35
   565  00FCE9  13                 	db	19
   566  00FCEA  08                 	db	8
   567  00FCEB  64                 	db	100
   568  00FCEC  62                 	db	98
   569  00FCED  36                 	db	54
   570  00FCEE  49                 	db	73
   571  00FCEF  55                 	db	85
   572  00FCF0  22                 	db	34
   573  00FCF1  50                 	db	80
   574  00FCF2  00                 	db	0
   575  00FCF3  05                 	db	5
   576  00FCF4  03                 	db	3
   577  00FCF5  00                 	db	0
   578  00FCF6  00                 	db	0
   579  00FCF7  00                 	db	0
   580  00FCF8  1C                 	db	28
   581  00FCF9  22                 	db	34
   582  00FCFA  41                 	db	65
   583  00FCFB  00                 	db	0
   584  00FCFC  00                 	db	0
   585  00FCFD  41                 	db	65
   586  00FCFE  22                 	db	34
   587  00FCFF  1C                 	db	28
   588  00FD00  00                 	db	0
   589  00FD01  08                 	db	8
   590  00FD02  2A                 	db	42
   591  00FD03  1C                 	db	28
   592  00FD04  2A                 	db	42
   593  00FD05  08                 	db	8
   594  00FD06  08                 	db	8
   595  00FD07  08                 	db	8
   596  00FD08  3E                 	db	62
   597  00FD09  08                 	db	8
   598  00FD0A  08                 	db	8
   599  00FD0B  00                 	db	0
   600  00FD0C  50                 	db	80
   601  00FD0D  30                 	db	48
   602  00FD0E  00                 	db	0
   603  00FD0F  00                 	db	0
   604  00FD10  08                 	db	8
   605  00FD11  08                 	db	8
   606  00FD12  08                 	db	8
   607  00FD13  08                 	db	8
   608  00FD14  08                 	db	8
   609  00FD15  00                 	db	0
   610  00FD16  60                 	db	96
   611  00FD17  60                 	db	96
   612  00FD18  00                 	db	0
   613  00FD19  00                 	db	0
   614  00FD1A  20                 	db	32
   615  00FD1B  10                 	db	16
   616  00FD1C  08                 	db	8
   617  00FD1D  04                 	db	4
   618  00FD1E  02                 	db	2
   619  00FD1F  3E                 	db	62
   620  00FD20  51                 	db	81
   621  00FD21  49                 	db	73
   622  00FD22  45                 	db	69
   623  00FD23  3E                 	db	62
   624  00FD24  00                 	db	0
   625  00FD25  42                 	db	66
   626  00FD26  7F                 	db	127
   627  00FD27  40                 	db	64
   628  00FD28  00                 	db	0
   629  00FD29  42                 	db	66
   630  00FD2A  61                 	db	97
   631  00FD2B  51                 	db	81
   632  00FD2C  49                 	db	73
   633  00FD2D  46                 	db	70
   634  00FD2E  21                 	db	33
   635  00FD2F  41                 	db	65
   636  00FD30  45                 	db	69
   637  00FD31  4B                 	db	75
   638  00FD32  31                 	db	49
   639  00FD33  18                 	db	24
   640  00FD34  14                 	db	20
   641  00FD35  12                 	db	18
   642  00FD36  7F                 	db	127
   643  00FD37  10                 	db	16
   644  00FD38  27                 	db	39
   645  00FD39  45                 	db	69
   646  00FD3A  45                 	db	69
   647  00FD3B  45                 	db	69
   648  00FD3C  39                 	db	57
   649  00FD3D  3C                 	db	60
   650  00FD3E  4A                 	db	74
   651  00FD3F  49                 	db	73
   652  00FD40  49                 	db	73
   653  00FD41  30                 	db	48
   654  00FD42  01                 	db	1
   655  00FD43  71                 	db	113
   656  00FD44  09                 	db	9
   657  00FD45  05                 	db	5
   658  00FD46  03                 	db	3
   659  00FD47  36                 	db	54
   660  00FD48  49                 	db	73
   661  00FD49  49                 	db	73
   662  00FD4A  49                 	db	73
   663  00FD4B  36                 	db	54
   664  00FD4C  06                 	db	6
   665  00FD4D  49                 	db	73
   666  00FD4E  49                 	db	73
   667  00FD4F  29                 	db	41
   668  00FD50  1E                 	db	30
   669  00FD51  00                 	db	0
   670  00FD52  36                 	db	54
   671  00FD53  36                 	db	54
   672  00FD54  00                 	db	0
   673  00FD55  00                 	db	0
   674  00FD56  00                 	db	0
   675  00FD57  56                 	db	86
   676  00FD58  36                 	db	54
   677  00FD59  00                 	db	0
   678  00FD5A  00                 	db	0
   679  00FD5B  00                 	db	0
   680  00FD5C  08                 	db	8
   681  00FD5D  14                 	db	20
   682  00FD5E  22                 	db	34
   683  00FD5F  41                 	db	65
   684  00FD60  14                 	db	20
   685  00FD61  14                 	db	20
   686  00FD62  14                 	db	20
   687  00FD63  14                 	db	20
   688  00FD64  14                 	db	20
   689  00FD65  41                 	db	65
   690  00FD66  22                 	db	34
   691  00FD67  14                 	db	20
   692  00FD68  08                 	db	8
   693  00FD69  00                 	db	0
   694  00FD6A  02                 	db	2
   695  00FD6B  01                 	db	1
   696  00FD6C  51                 	db	81
   697  00FD6D  09                 	db	9
   698  00FD6E  06                 	db	6
   699  00FD6F  32                 	db	50
   700  00FD70  49                 	db	73
   701  00FD71  79                 	db	121
   702  00FD72  41                 	db	65
   703  00FD73  3E                 	db	62
   704  00FD74  7E                 	db	126
   705  00FD75  11                 	db	17
   706  00FD76  11                 	db	17
   707  00FD77  11                 	db	17
   708  00FD78  7E                 	db	126
   709  00FD79  7F                 	db	127
   710  00FD7A  49                 	db	73
   711  00FD7B  49                 	db	73
   712  00FD7C  49                 	db	73
   713  00FD7D  36                 	db	54
   714  00FD7E  3E                 	db	62
   715  00FD7F  41                 	db	65
   716  00FD80  41                 	db	65
   717  00FD81  41                 	db	65
   718  00FD82  22                 	db	34
   719  00FD83  7F                 	db	127
   720  00FD84  41                 	db	65
   721  00FD85  41                 	db	65
   722  00FD86  22                 	db	34
   723  00FD87  1C                 	db	28
   724  00FD88  7F                 	db	127
   725  00FD89  49                 	db	73
   726  00FD8A  49                 	db	73
   727  00FD8B  49                 	db	73
   728  00FD8C  41                 	db	65
   729  00FD8D  7F                 	db	127
   730  00FD8E  09                 	db	9
   731  00FD8F  09                 	db	9
   732  00FD90  01                 	db	1
   733  00FD91  01                 	db	1
   734  00FD92  3E                 	db	62
   735  00FD93  41                 	db	65
   736  00FD94  41                 	db	65
   737  00FD95  51                 	db	81
   738  00FD96  32                 	db	50
   739  00FD97  7F                 	db	127
   740  00FD98  08                 	db	8
   741  00FD99  08                 	db	8
   742  00FD9A  08                 	db	8
   743  00FD9B  7F                 	db	127
   744  00FD9C  00                 	db	0
   745  00FD9D  41                 	db	65
   746  00FD9E  7F                 	db	127
   747  00FD9F  41                 	db	65
   748  00FDA0  00                 	db	0
   749  00FDA1  20                 	db	32
   750  00FDA2  40                 	db	64
   751  00FDA3  41                 	db	65
   752  00FDA4  3F                 	db	63
   753  00FDA5  01                 	db	1
   754  00FDA6  7F                 	db	127
   755  00FDA7  08                 	db	8
   756  00FDA8  14                 	db	20
   757  00FDA9  22                 	db	34
   758  00FDAA  41                 	db	65
   759  00FDAB  7F                 	db	127
   760  00FDAC  40                 	db	64
   761  00FDAD  40                 	db	64
   762  00FDAE  40                 	db	64
   763  00FDAF  40                 	db	64
   764  00FDB0  7F                 	db	127
   765  00FDB1  02                 	db	2
   766  00FDB2  04                 	db	4
   767  00FDB3  02                 	db	2
   768  00FDB4  7F                 	db	127
   769  00FDB5  7F                 	db	127
   770  00FDB6  04                 	db	4
   771  00FDB7  08                 	db	8
   772  00FDB8  10                 	db	16
   773  00FDB9  7F                 	db	127
   774  00FDBA  3E                 	db	62
   775  00FDBB  41                 	db	65
   776  00FDBC  41                 	db	65
   777  00FDBD  41                 	db	65
   778  00FDBE  3E                 	db	62
   779  00FDBF  7F                 	db	127
   780  00FDC0  09                 	db	9
   781  00FDC1  09                 	db	9
   782  00FDC2  09                 	db	9
   783  00FDC3  06                 	db	6
   784  00FDC4  3E                 	db	62
   785  00FDC5  41                 	db	65
   786  00FDC6  51                 	db	81
   787  00FDC7  21                 	db	33
   788  00FDC8  5E                 	db	94
   789  00FDC9  7F                 	db	127
   790  00FDCA  09                 	db	9
   791  00FDCB  19                 	db	25
   792  00FDCC  29                 	db	41
   793  00FDCD  46                 	db	70
   794  00FDCE  46                 	db	70
   795  00FDCF  49                 	db	73
   796  00FDD0  49                 	db	73
   797  00FDD1  49                 	db	73
   798  00FDD2  31                 	db	49
   799  00FDD3  01                 	db	1
   800  00FDD4  01                 	db	1
   801  00FDD5  7F                 	db	127
   802  00FDD6  01                 	db	1
   803  00FDD7  01                 	db	1
   804  00FDD8  3F                 	db	63
   805  00FDD9  40                 	db	64
   806  00FDDA  40                 	db	64
   807  00FDDB  40                 	db	64
   808  00FDDC  3F                 	db	63
   809  00FDDD  1F                 	db	31
   810  00FDDE  20                 	db	32
   811  00FDDF  40                 	db	64
   812  00FDE0  20                 	db	32
   813  00FDE1  1F                 	db	31
   814  00FDE2  7F                 	db	127
   815  00FDE3  20                 	db	32
   816  00FDE4  18                 	db	24
   817  00FDE5  20                 	db	32
   818  00FDE6  7F                 	db	127
   819  00FDE7  63                 	db	99
   820  00FDE8  14                 	db	20
   821  00FDE9  08                 	db	8
   822  00FDEA  14                 	db	20
   823  00FDEB  63                 	db	99
   824  00FDEC  03                 	db	3
   825  00FDED  04                 	db	4
   826  00FDEE  78                 	db	120
   827  00FDEF  04                 	db	4
   828  00FDF0  03                 	db	3
   829  00FDF1  61                 	db	97
   830  00FDF2  51                 	db	81
   831  00FDF3  49                 	db	73
   832  00FDF4  45                 	db	69
   833  00FDF5  43                 	db	67
   834  00FDF6  00                 	db	0
   835  00FDF7  00                 	db	0
   836  00FDF8  7F                 	db	127
   837  00FDF9  41                 	db	65
   838  00FDFA  41                 	db	65
   839  00FDFB  02                 	db	2
   840  00FDFC  04                 	db	4
   841  00FDFD  08                 	db	8
   842  00FDFE  10                 	db	16
   843  00FDFF  20                 	db	32
   844  00FE00  41                 	db	65
   845  00FE01  41                 	db	65
   846  00FE02  7F                 	db	127
   847  00FE03  00                 	db	0
   848  00FE04  00                 	db	0
   849  00FE05  04                 	db	4
   850  00FE06  02                 	db	2
   851  00FE07  01                 	db	1
   852  00FE08  02                 	db	2
   853  00FE09  04                 	db	4
   854  00FE0A  40                 	db	64
   855  00FE0B  40                 	db	64
   856  00FE0C  40                 	db	64
   857  00FE0D  40                 	db	64
   858  00FE0E  40                 	db	64
   859  00FE0F  00                 	db	0
   860  00FE10  01                 	db	1
   861  00FE11  02                 	db	2
   862  00FE12  04                 	db	4
   863  00FE13  00                 	db	0
   864  00FE14  20                 	db	32
   865  00FE15  54                 	db	84
   866  00FE16  54                 	db	84
   867  00FE17  54                 	db	84
   868  00FE18  78                 	db	120
   869  00FE19  7F                 	db	127
   870  00FE1A  48                 	db	72
   871  00FE1B  44                 	db	68
   872  00FE1C  44                 	db	68
   873  00FE1D  38                 	db	56
   874  00FE1E  38                 	db	56
   875  00FE1F  44                 	db	68
   876  00FE20  44                 	db	68
   877  00FE21  44                 	db	68
   878  00FE22  20                 	db	32
   879  00FE23  38                 	db	56
   880  00FE24  44                 	db	68
   881  00FE25  44                 	db	68
   882  00FE26  48                 	db	72
   883  00FE27  7F                 	db	127
   884  00FE28  38                 	db	56
   885  00FE29  54                 	db	84
   886  00FE2A  54                 	db	84
   887  00FE2B  54                 	db	84
   888  00FE2C  18                 	db	24
   889  00FE2D  08                 	db	8
   890  00FE2E  7E                 	db	126
   891  00FE2F  09                 	db	9
   892  00FE30  01                 	db	1
   893  00FE31  02                 	db	2
   894  00FE32  08                 	db	8
   895  00FE33  14                 	db	20
   896  00FE34  54                 	db	84
   897  00FE35  54                 	db	84
   898  00FE36  3C                 	db	60
   899  00FE37  7F                 	db	127
   900  00FE38  08                 	db	8
   901  00FE39  04                 	db	4
   902  00FE3A  04                 	db	4
   903  00FE3B  78                 	db	120
   904  00FE3C  00                 	db	0
   905  00FE3D  44                 	db	68
   906  00FE3E  7D                 	db	125
   907  00FE3F  40                 	db	64
   908  00FE40  00                 	db	0
   909  00FE41  20                 	db	32
   910  00FE42  40                 	db	64
   911  00FE43  44                 	db	68
   912  00FE44  3D                 	db	61
   913  00FE45  00                 	db	0
   914  00FE46  00                 	db	0
   915  00FE47  7F                 	db	127
   916  00FE48  10                 	db	16
   917  00FE49  28                 	db	40
   918  00FE4A  44                 	db	68
   919  00FE4B  00                 	db	0
   920  00FE4C  41                 	db	65
   921  00FE4D  7F                 	db	127
   922  00FE4E  40                 	db	64
   923  00FE4F  00                 	db	0
   924  00FE50  7C                 	db	124
   925  00FE51  04                 	db	4
   926  00FE52  18                 	db	24
   927  00FE53  04                 	db	4
   928  00FE54  78                 	db	120
   929  00FE55  7C                 	db	124
   930  00FE56  08                 	db	8
   931  00FE57  04                 	db	4
   932  00FE58  04                 	db	4
   933  00FE59  78                 	db	120
   934  00FE5A  38                 	db	56
   935  00FE5B  44                 	db	68
   936  00FE5C  44                 	db	68
   937  00FE5D  44                 	db	68
   938  00FE5E  38                 	db	56
   939  00FE5F  7C                 	db	124
   940  00FE60  14                 	db	20
   941  00FE61  14                 	db	20
   942  00FE62  14                 	db	20
   943  00FE63  08                 	db	8
   944  00FE64  08                 	db	8
   945  00FE65  14                 	db	20
   946  00FE66  14                 	db	20
   947  00FE67  18                 	db	24
   948  00FE68  7C                 	db	124
   949  00FE69  7C                 	db	124
   950  00FE6A  08                 	db	8
   951  00FE6B  04                 	db	4
   952  00FE6C  04                 	db	4
   953  00FE6D  08                 	db	8
   954  00FE6E  48                 	db	72
   955  00FE6F  54                 	db	84
   956  00FE70  54                 	db	84
   957  00FE71  54                 	db	84
   958  00FE72  20                 	db	32
   959  00FE73  04                 	db	4
   960  00FE74  3F                 	db	63
   961  00FE75  44                 	db	68
   962  00FE76  40                 	db	64
   963  00FE77  20                 	db	32
   964  00FE78  3C                 	db	60
   965  00FE79  40                 	db	64
   966  00FE7A  40                 	db	64
   967  00FE7B  20                 	db	32
   968  00FE7C  7C                 	db	124
   969  00FE7D  1C                 	db	28
   970  00FE7E  20                 	db	32
   971  00FE7F  40                 	db	64
   972  00FE80  20                 	db	32
   973  00FE81  1C                 	db	28
   974  00FE82  3C                 	db	60
   975  00FE83  40                 	db	64
   976  00FE84  30                 	db	48
   977  00FE85  40                 	db	64
   978  00FE86  3C                 	db	60
   979  00FE87  44                 	db	68
   980  00FE88  28                 	db	40
   981  00FE89  10                 	db	16
   982  00FE8A  28                 	db	40
   983  00FE8B  44                 	db	68
   984  00FE8C  0C                 	db	12
   985  00FE8D  50                 	db	80
   986  00FE8E  50                 	db	80
   987  00FE8F  50                 	db	80
   988  00FE90  3C                 	db	60
   989  00FE91  44                 	db	68
   990  00FE92  64                 	db	100
   991  00FE93  54                 	db	84
   992  00FE94  4C                 	db	76
   993  00FE95  44                 	db	68
   994  00FE96  00                 	db	0
   995  00FE97  08                 	db	8
   996  00FE98  36                 	db	54
   997  00FE99  41                 	db	65
   998  00FE9A  00                 	db	0
   999  00FE9B  00                 	db	0
  1000  00FE9C  00                 	db	0
  1001  00FE9D  7F                 	db	127
  1002  00FE9E  00                 	db	0
  1003  00FE9F  00                 	db	0
  1004  00FEA0  00                 	db	0
  1005  00FEA1  41                 	db	65
  1006  00FEA2  36                 	db	54
  1007  00FEA3  08                 	db	8
  1008  00FEA4  00                 	db	0
  1009  00FEA5  08                 	db	8
  1010  00FEA6  08                 	db	8
  1011  00FEA7  2A                 	db	42
  1012  00FEA8  1C                 	db	28
  1013  00FEA9  08                 	db	8
  1014  00FEAA  08                 	db	8
  1015  00FEAB  1C                 	db	28
  1016  00FEAC  2A                 	db	42
  1017  00FEAD  08                 	db	8
  1018  00FEAE  08                 	db	8
  1019  00FEAF                     __end_of_Font5x7:
  1020                           	opt stack 0
  1021  00FEAF                     exp@coeff:
  1022                           	opt stack 0
  1023  00FEAF  0000               	dw	0
  1024  00FEB1  3F80               	dw	16256
  1025  00FEB3  7218               	dw	29208
  1026  00FEB5  3F31               	dw	16177
  1027  00FEB7  FDF0               	dw	65008
  1028  00FEB9  3E75               	dw	15989
  1029  00FEBB  5847               	dw	22599
  1030  00FEBD  3D63               	dw	15715
  1031  00FEBF  9558               	dw	38232
  1032  00FEC1  3C1D               	dw	15389
  1033  00FEC3  C482               	dw	50306
  1034  00FEC5  3AAE               	dw	15022
  1035  00FEC7  78A8               	dw	30888
  1036  00FEC9  3921               	dw	14625
  1037  00FECB  93EF               	dw	37871
  1038  00FECD  3780               	dw	14208
  1039  00FECF  92A0               	dw	37536
  1040  00FED1  35A7               	dw	13735
  1041  00FED3  5646               	dw	22086
  1042  00FED5  3415               	dw	13333
  1043  00FED7                     __end_ofexp@coeff:
  1044                           	opt stack 0
  1045  00FED7                     log@coeff:
  1046                           	opt stack 0
  1047  00FED7  0000               	dw	0
  1048  00FED9  0000               	dw	0
  1049  00FEDB  FFC4               	dw	65476
  1050  00FEDD  3F7F               	dw	16255
  1051  00FEDF  EF80               	dw	61312
  1052  00FEE1  BEFF               	dw	48895
  1053  00FEE3  E190               	dw	57744
  1054  00FEE5  3EA9               	dw	16041
  1055  00FEE7  82EC               	dw	33516
  1056  00FEE9  BE76               	dw	48758
  1057  00FEEB  AD82               	dw	44418
  1058  00FEED  3E2B               	dw	15915
  1059  00FEEF  3C0E               	dw	15374
  1060  00FEF1  BDC3               	dw	48579
  1061  00FEF3  D187               	dw	53639
  1062  00FEF5  3D13               	dw	15635
  1063  00FEF7  7841               	dw	30785
  1064  00FEF9  BBD3               	dw	48083
  1065  00FEFB                     __end_oflog@coeff:
  1066                           	opt stack 0
  1067  00FEFB                     _PortG_Property:
  1068                           	opt stack 0
  1069  00FEFB  FC00               	dw	64512
  1070  00FEFD                     __end_of_PortG_Property:
  1071                           	opt stack 0
  1072  00FEFD                     _PortF_Property:
  1073                           	opt stack 0
  1074  00FEFD  0FFF               	dw	4095
  1075  00FEFF                     __end_of_PortF_Property:
  1076                           	opt stack 0
  1077  00FEFF                     _PortE_Property:
  1078                           	opt stack 0
  1079  00FEFF  0000               	dw	0
  1080  00FF01                     __end_of_PortE_Property:
  1081                           	opt stack 0
  1082  00FF01                     _PortD_Property:
  1083                           	opt stack 0
  1084  00FF01  FFFF               	dw	65535
  1085  00FF03                     __end_of_PortD_Property:
  1086                           	opt stack 0
  1087  00FF03                     _PortC_Property:
  1088                           	opt stack 0
  1089  00FF03  FFF0               	dw	65520
  1090  00FF05                     __end_of_PortC_Property:
  1091                           	opt stack 0
  1092  00FF05                     _PortB_Property:
  1093                           	opt stack 0
  1094  00FF05  FF00               	dw	65280
  1095  00FF07                     __end_of_PortB_Property:
  1096                           	opt stack 0
  1097  00FF07                     _PortA_Property:
  1098                           	opt stack 0
  1099  00FF07  00FF               	dw	255
  1100  00FF09                     __end_of_PortA_Property:
  1101                           	opt stack 0
  1102  0000                     _TMR0	set	4054
  1103  0000                     _PR2	set	4043
  1104  0000                     _T2CONbits	set	4042
  1105  0000                     _T0CONbits	set	4053
  1106  0000                     _RCONbits	set	4048
  1107  0000                     _OSCTUNEbits	set	3995
  1108  0000                     _PIR3	set	4004
  1109  0000                     _PIR2	set	4001
  1110  0000                     _PIR1	set	3998
  1111  0000                     _INTCONbits	set	4082
  1112  0000                     _SSP2CON2bits	set	3947
  1113  0000                     _SSP1CON2bits	set	4037
  1114  0000                     _SSP1ADD	set	4040
  1115  0000                     _ANCON0	set	4033
  1116  0000                     _ADRESL	set	4035
  1117  0000                     _ADRESH	set	4036
  1118  0000                     _ADCON1bits	set	4033
  1119  0000                     _ADCON0bits	set	4034
  1120  0000                     _SSP2CON1bits	set	3948
  1121  0000                     _SSP1CON1bits	set	4038
  1122  0000                     _SSP2STATbits	set	3949
  1123  0000                     _SSP1STATbits	set	4039
  1124  0000                     _PIE3bits	set	4003
  1125  0000                     _PIE1bits	set	3997
  1126  0000                     _PIR3bits	set	4004
  1127  0000                     _PIR1bits	set	3998
  1128  0000                     _IPR3bits	set	4005
  1129  0000                     _IPR1bits	set	3999
  1130  0000                     _PORTFbits	set	3973
  1131  0000                     _SSP2CON2	set	3947
  1132  0000                     _SSP1CON2	set	4037
  1133  0000                     _SSP2BUF	set	3951
  1134  0000                     _SSP2CON1	set	3948
  1135  0000                     _SSP2STAT	set	3949
  1136  0000                     _SSP1BUF	set	4041
  1137  0000                     _SSP1CON1	set	4038
  1138  0000                     _SSP1STAT	set	4039
  1139  0000                     _LATG	set	3983
  1140  0000                     _LATF	set	3982
  1141  0000                     _LATE	set	3981
  1142  0000                     _LATD	set	3980
  1143  0000                     _LATC	set	3979
  1144  0000                     _LATB	set	3978
  1145  0000                     _LATA	set	3977
  1146  0000                     _TRISG	set	3992
  1147  0000                     _TRISF	set	3991
  1148  0000                     _TRISE	set	3990
  1149  0000                     _TRISD	set	3989
  1150  0000                     _TRISC	set	3988
  1151  0000                     _TRISB	set	3987
  1152  0000                     _TRISA	set	3986
  1153  0000                     _PORTG	set	3974
  1154  0000                     _PORTF	set	3973
  1155  0000                     _PORTE	set	3972
  1156  0000                     _PORTD	set	3971
  1157  0000                     _PORTC	set	3970
  1158  0000                     _PORTB	set	3969
  1159  0000                     _PORTA	set	3968
  1160  00FF09                     STR_2:
  1161  00FF09  43                 	db	67	;'C'
  1162  00FF0A  75                 	db	117	;'u'
  1163  00FF0B  72                 	db	114	;'r'
  1164  00FF0C  72                 	db	114	;'r'
  1165  00FF0D  65                 	db	101	;'e'
  1166  00FF0E  6E                 	db	110	;'n'
  1167  00FF0F  74                 	db	116	;'t'
  1168  00FF10  20                 	db	32
  1169  00FF11  4D                 	db	77	;'M'
  1170  00FF12  6F                 	db	111	;'o'
  1171  00FF13  64                 	db	100	;'d'
  1172  00FF14  65                 	db	101	;'e'
  1173  00FF15  3A                 	db	58	;':'
  1174  00FF16  0A                 	db	10
  1175  00FF17  20                 	db	32
  1176  00FF18  43                 	db	67	;'C'
  1177  00FF19  6F                 	db	111	;'o'
  1178  00FF1A  6E                 	db	110	;'n'
  1179  00FF1B  74                 	db	116	;'t'
  1180  00FF1C  69                 	db	105	;'i'
  1181  00FF1D  6E                 	db	110	;'n'
  1182  00FF1E  75                 	db	117	;'u'
  1183  00FF1F  6F                 	db	111	;'o'
  1184  00FF20  75                 	db	117	;'u'
  1185  00FF21  73                 	db	115	;'s'
  1186  00FF22  20                 	db	32
  1187  00FF23  4D                 	db	77	;'M'
  1188  00FF24  6F                 	db	111	;'o'
  1189  00FF25  64                 	db	100	;'d'
  1190  00FF26  65                 	db	101	;'e'
  1191  00FF27  0A                 	db	10
  1192  00FF28  00                 	db	0
  1193  00FF29                     STR_10:
  1194  00FF29  43                 	db	67	;'C'
  1195  00FF2A  75                 	db	117	;'u'
  1196  00FF2B  72                 	db	114	;'r'
  1197  00FF2C  72                 	db	114	;'r'
  1198  00FF2D  65                 	db	101	;'e'
  1199  00FF2E  6E                 	db	110	;'n'
  1200  00FF2F  74                 	db	116	;'t'
  1201  00FF30  20                 	db	32
  1202  00FF31  4D                 	db	77	;'M'
  1203  00FF32  6F                 	db	111	;'o'
  1204  00FF33  64                 	db	100	;'d'
  1205  00FF34  65                 	db	101	;'e'
  1206  00FF35  3A                 	db	58	;':'
  1207  00FF36  0A                 	db	10
  1208  00FF37  20                 	db	32
  1209  00FF38  50                 	db	80	;'P'
  1210  00FF39  6F                 	db	111	;'o'
  1211  00FF3A  73                 	db	115	;'s'
  1212  00FF3B  69                 	db	105	;'i'
  1213  00FF3C  74                 	db	116	;'t'
  1214  00FF3D  69                 	db	105	;'i'
  1215  00FF3E  6F                 	db	111	;'o'
  1216  00FF3F  6E                 	db	110	;'n'
  1217  00FF40  20                 	db	32
  1218  00FF41  4D                 	db	77	;'M'
  1219  00FF42  6F                 	db	111	;'o'
  1220  00FF43  64                 	db	100	;'d'
  1221  00FF44  65                 	db	101	;'e'
  1222  00FF45  0A                 	db	10
  1223  00FF46  0A                 	db	10
  1224  00FF47  00                 	db	0
  1225  00FF48                     STR_12:
  1226  00FF48  43                 	db	67	;'C'
  1227  00FF49  75                 	db	117	;'u'
  1228  00FF4A  72                 	db	114	;'r'
  1229  00FF4B  72                 	db	114	;'r'
  1230  00FF4C  65                 	db	101	;'e'
  1231  00FF4D  6E                 	db	110	;'n'
  1232  00FF4E  74                 	db	116	;'t'
  1233  00FF4F  20                 	db	32
  1234  00FF50  4D                 	db	77	;'M'
  1235  00FF51  6F                 	db	111	;'o'
  1236  00FF52  64                 	db	100	;'d'
  1237  00FF53  65                 	db	101	;'e'
  1238  00FF54  3A                 	db	58	;':'
  1239  00FF55  0A                 	db	10
  1240  00FF56  20                 	db	32
  1241  00FF57  55                 	db	85	;'U'
  1242  00FF58  6E                 	db	110	;'n'
  1243  00FF59  64                 	db	100	;'d'
  1244  00FF5A  65                 	db	101	;'e'
  1245  00FF5B  66                 	db	102	;'f'
  1246  00FF5C  69                 	db	105	;'i'
  1247  00FF5D  6E                 	db	110	;'n'
  1248  00FF5E  65                 	db	101	;'e'
  1249  00FF5F  64                 	db	100	;'d'
  1250  00FF60  0A                 	db	10
  1251  00FF61  00                 	db	0
  1252  00FF62                     STR_7:
  1253  00FF62  43                 	db	67	;'C'
  1254  00FF63  75                 	db	117	;'u'
  1255  00FF64  72                 	db	114	;'r'
  1256  00FF65  72                 	db	114	;'r'
  1257  00FF66  65                 	db	101	;'e'
  1258  00FF67  6E                 	db	110	;'n'
  1259  00FF68  74                 	db	116	;'t'
  1260  00FF69  20                 	db	32
  1261  00FF6A  4D                 	db	77	;'M'
  1262  00FF6B  6F                 	db	111	;'o'
  1263  00FF6C  64                 	db	100	;'d'
  1264  00FF6D  65                 	db	101	;'e'
  1265  00FF6E  3A                 	db	58	;':'
  1266  00FF6F  0A                 	db	10
  1267  00FF70  20                 	db	32
  1268  00FF71  53                 	db	83	;'S'
  1269  00FF72  74                 	db	116	;'t'
  1270  00FF73  65                 	db	101	;'e'
  1271  00FF74  70                 	db	112	;'p'
  1272  00FF75  20                 	db	32
  1273  00FF76  4D                 	db	77	;'M'
  1274  00FF77  6F                 	db	111	;'o'
  1275  00FF78  64                 	db	100	;'d'
  1276  00FF79  65                 	db	101	;'e'
  1277  00FF7A  0A                 	db	10
  1278  00FF7B  00                 	db	0
  1279  00FF7C                     STR_13:
  1280  00FF7C  20                 	db	32
  1281  00FF7D  20                 	db	32
  1282  00FF7E  20                 	db	32
  1283  00FF7F  20                 	db	32
  1284  00FF80  20                 	db	32
  1285  00FF81  20                 	db	32
  1286  00FF82  20                 	db	32
  1287  00FF83  20                 	db	32
  1288  00FF84  20                 	db	32
  1289  00FF85  20                 	db	32
  1290  00FF86  20                 	db	32
  1291  00FF87  20                 	db	32
  1292  00FF88  20                 	db	32
  1293  00FF89  20                 	db	32
  1294  00FF8A  20                 	db	32
  1295  00FF8B  20                 	db	32
  1296  00FF8C  20                 	db	32
  1297  00FF8D  20                 	db	32
  1298  00FF8E  20                 	db	32
  1299  00FF8F  20                 	db	32
  1300  00FF90  20                 	db	32
  1301  00FF91  20                 	db	32
  1302  00FF92  0A                 	db	10
  1303  00FF93  00                 	db	0
  1304  00FF94                     STR_1:
  1305  00FF94  4A                 	db	74	;'J'
  1306  00FF95  61                 	db	97	;'a'
  1307  00FF96  6D                 	db	109	;'m'
  1308  00FF97  69                 	db	105	;'i'
  1309  00FF98  6E                 	db	110	;'n'
  1310  00FF99  20                 	db	32
  1311  00FF9A  45                 	db	69	;'E'
  1312  00FF9B  61                 	db	97	;'a'
  1313  00FF9C  72                 	db	114	;'r'
  1314  00FF9D  6C                 	db	108	;'l'
  1315  00FF9E  79                 	db	121	;'y'
  1316  00FF9F  20                 	db	32
  1317  00FFA0  39                 	db	57	;'9'
  1318  00FFA1  39                 	db	57	;'9'
  1319  00FFA2  31                 	db	49	;'1'
  1320  00FFA3  33                 	db	51	;'3'
  1321  00FFA4  33                 	db	51	;'3'
  1322  00FFA5  33                 	db	51	;'3'
  1323  00FFA6  39                 	db	57	;'9'
  1324  00FFA7  31                 	db	49	;'1'
  1325  00FFA8  0A                 	db	10
  1326  00FFA9  0A                 	db	10
  1327  00FFAA  00                 	db	0
  1328  00FFAB                     STR_9:
  1329  00FFAB  52                 	db	82	;'R'
  1330  00FFAC  65                 	db	101	;'e'
  1331  00FFAD  6D                 	db	109	;'m'
  1332  00FFAE  61                 	db	97	;'a'
  1333  00FFAF  69                 	db	105	;'i'
  1334  00FFB0  6E                 	db	110	;'n'
  1335  00FFB1  69                 	db	105	;'i'
  1336  00FFB2  6E                 	db	110	;'n'
  1337  00FFB3  67                 	db	103	;'g'
  1338  00FFB4  20                 	db	32
  1339  00FFB5  53                 	db	83	;'S'
  1340  00FFB6  74                 	db	116	;'t'
  1341  00FFB7  65                 	db	101	;'e'
  1342  00FFB8  70                 	db	112	;'p'
  1343  00FFB9  73                 	db	115	;'s'
  1344  00FFBA  3A                 	db	58	;':'
  1345  00FFBB  20                 	db	32
  1346  00FFBC  25                 	db	37
  1347  00FFBD  64                 	db	100	;'d'
  1348  00FFBE  0A                 	db	10
  1349  00FFBF  0A                 	db	10
  1350  00FFC0  00                 	db	0
  1351  00FFC1                     STR_11:
  1352  00FFC1  54                 	db	84	;'T'
  1353  00FFC2  61                 	db	97	;'a'
  1354  00FFC3  72                 	db	114	;'r'
  1355  00FFC4  67                 	db	103	;'g'
  1356  00FFC5  65                 	db	101	;'e'
  1357  00FFC6  74                 	db	116	;'t'
  1358  00FFC7  20                 	db	32
  1359  00FFC8  41                 	db	65	;'A'
  1360  00FFC9  6E                 	db	110	;'n'
  1361  00FFCA  67                 	db	103	;'g'
  1362  00FFCB  6C                 	db	108	;'l'
  1363  00FFCC  65                 	db	101	;'e'
  1364  00FFCD  3A                 	db	58	;':'
  1365  00FFCE  0A                 	db	10
  1366  00FFCF  20                 	db	32
  1367  00FFD0  25                 	db	37
  1368  00FFD1  66                 	db	102	;'f'
  1369  00FFD2  20                 	db	32
  1370  00FFD3  0A                 	db	10
  1371  00FFD4  00                 	db	0
  1372  00FFD5                     STR_3:
  1373  00FFD5  44                 	db	68	;'D'
  1374  00FFD6  69                 	db	105	;'i'
  1375  00FFD7  72                 	db	114	;'r'
  1376  00FFD8  65                 	db	101	;'e'
  1377  00FFD9  63                 	db	99	;'c'
  1378  00FFDA  74                 	db	116	;'t'
  1379  00FFDB  69                 	db	105	;'i'
  1380  00FFDC  6F                 	db	111	;'o'
  1381  00FFDD  6E                 	db	110	;'n'
  1382  00FFDE  3A                 	db	58	;':'
  1383  00FFDF  20                 	db	32
  1384  00FFE0  00                 	db	0
  1385  00FFE1                     STR_6:
  1386  00FFE1  53                 	db	83	;'S'
  1387  00FFE2  70                 	db	112	;'p'
  1388  00FFE3  65                 	db	101	;'e'
  1389  00FFE4  65                 	db	101	;'e'
  1390  00FFE5  64                 	db	100	;'d'
  1391  00FFE6  3A                 	db	58	;':'
  1392  00FFE7  20                 	db	32
  1393  00FFE8  25                 	db	37
  1394  00FFE9  64                 	db	100	;'d'
  1395  00FFEA  0A                 	db	10
  1396  00FFEB  00                 	db	0
  1397  00FFEC                     STR_8:
  1398  00FFEC  53                 	db	83	;'S'
  1399  00FFED  74                 	db	116	;'t'
  1400  00FFEE  65                 	db	101	;'e'
  1401  00FFEF  70                 	db	112	;'p'
  1402  00FFF0  73                 	db	115	;'s'
  1403  00FFF1  3A                 	db	58	;':'
  1404  00FFF2  20                 	db	32
  1405  00FFF3  25                 	db	37
  1406  00FFF4  64                 	db	100	;'d'
  1407  00FFF5  0A                 	db	10
  1408  00FFF6  00                 	db	0
  1409  00FFF7                     STR_5:
  1410  00FFF7  43                 	db	67	;'C'
  1411  00FFF8  43                 	db	67	;'C'
  1412  00FFF9  57                 	db	87	;'W'
  1413  00FFFA  0A                 	db	10
  1414  00FFFB  00                 	db	0
  1415  00FFFC                     STR_16:
  1416  00FFFC  25                 	db	37
  1417  00FFFD  63                 	db	99	;'c'
  1418  00FFFE  00                 	db	0
  1419  0000                     
  1420                           ; #config settings
  1421  00FFFF  00                 	db	0	; dummy byte at the end
  1422  0000                     
  1423                           	psect	cinit
  1424  015EF6                     __pcinit:
  1425                           	opt stack 0
  1426  015EF6                     start_initialization:
  1427                           	opt stack 0
  1428  015EF6                     __initialization:
  1429                           	opt stack 0
  1430                           
  1431                           ; Initialize objects allocated to BANK1 (16 bytes)
  1432                           ; load TBLPTR registers with __pidataBANK1
  1433  015EF6  0EC6               	movlw	low __pidataBANK1
  1434  015EF8  6EF6               	movwf	tblptrl,c
  1435  015EFA  0E7F               	movlw	high __pidataBANK1
  1436  015EFC  6EF7               	movwf	tblptrh,c
  1437  015EFE  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1438  015F00  6EF8               	movwf	tblptru,c
  1439  015F02  EE01  F0EA         	lfsr	0,__pdataBANK1
  1440  015F06  EE10 F010          	lfsr	1,16
  1441  015F0A                     copy_data0:
  1442  015F0A  0009               	tblrd		*+
  1443  015F0C  CFF5 FFEE          	movff	tablat,postinc0
  1444  015F10  50E5               	movf	postdec1,w,c
  1445  015F12  50E1               	movf	fsr1l,w,c
  1446  015F14  E1FA               	bnz	copy_data0
  1447                           
  1448                           ; Initialize objects allocated to BANK0 (3 bytes)
  1449                           ; load TBLPTR registers with __pidataBANK0
  1450  015F16  0E8E               	movlw	low __pidataBANK0
  1451  015F18  6EF6               	movwf	tblptrl,c
  1452  015F1A  0E80               	movlw	high __pidataBANK0
  1453  015F1C  6EF7               	movwf	tblptrh,c
  1454  015F1E  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1455  015F20  6EF8               	movwf	tblptru,c
  1456  015F22  0009               	tblrd		*+	;fetch initializer
  1457  015F24  CFF5 F0FC          	movff	tablat,__pdataBANK0
  1458  015F28  0009               	tblrd		*+	;fetch initializer
  1459  015F2A  CFF5 F0FD          	movff	tablat,__pdataBANK0+1
  1460  015F2E  0009               	tblrd		*+	;fetch initializer
  1461  015F30  CFF5 F0FE          	movff	tablat,__pdataBANK0+2
  1462                           
  1463                           ; Initialize objects allocated to COMRAM (10 bytes)
  1464                           ; load TBLPTR registers with __pidataCOMRAM
  1465  015F34  0E32               	movlw	low __pidataCOMRAM
  1466  015F36  6EF6               	movwf	tblptrl,c
  1467  015F38  0E80               	movlw	high __pidataCOMRAM
  1468  015F3A  6EF7               	movwf	tblptrh,c
  1469  015F3C  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1470  015F3E  6EF8               	movwf	tblptru,c
  1471  015F40  EE00  F047         	lfsr	0,__pdataCOMRAM
  1472  015F44  EE10 F00A          	lfsr	1,10
  1473  015F48                     copy_data1:
  1474  015F48  0009               	tblrd		*+
  1475  015F4A  CFF5 FFEE          	movff	tablat,postinc0
  1476  015F4E  50E5               	movf	postdec1,w,c
  1477  015F50  50E1               	movf	fsr1l,w,c
  1478  015F52  E1FA               	bnz	copy_data1
  1479                           
  1480                           ; Clear objects allocated to BIGRAM (300 bytes)
  1481  015F54  EE02  F07B         	lfsr	0,__pbssBIGRAM
  1482  015F58  EE11 F02C          	lfsr	1,300
  1483  015F5C                     clear_0:
  1484  015F5C  6AEE               	clrf	postinc0,c
  1485  015F5E  50E5               	movf	postdec1,w,c
  1486  015F60  50E1               	movf	fsr1l,w,c
  1487  015F62  E1FC               	bnz	clear_0
  1488  015F64  50E2               	movf	fsr1h,w,c
  1489  015F66  E1FA               	bnz	clear_0
  1490                           
  1491                           ; Clear objects allocated to BANK2 (110 bytes)
  1492  015F68  EE02  F000         	lfsr	0,__pbssBANK2
  1493  015F6C  0E6E               	movlw	110
  1494  015F6E                     clear_1:
  1495  015F6E  6AEE               	clrf	postinc0,c
  1496  015F70  06E8               	decf	wreg,f,c
  1497  015F72  E1FD               	bnz	clear_1
  1498                           
  1499                           ; Clear objects allocated to BANK1 (234 bytes)
  1500  015F74  EE01  F000         	lfsr	0,__pbssBANK1
  1501  015F78  0EEA               	movlw	234
  1502  015F7A                     clear_2:
  1503  015F7A  6AEE               	clrf	postinc0,c
  1504  015F7C  06E8               	decf	wreg,f,c
  1505  015F7E  E1FD               	bnz	clear_2
  1506                           
  1507                           ; Clear objects allocated to BANK0 (33 bytes)
  1508  015F80  EE00  F0DB         	lfsr	0,__pbssBANK0
  1509  015F84  0E21               	movlw	33
  1510  015F86                     clear_3:
  1511  015F86  6AEE               	clrf	postinc0,c
  1512  015F88  06E8               	decf	wreg,f,c
  1513  015F8A  E1FD               	bnz	clear_3
  1514                           
  1515                           ; Clear objects allocated to COMRAM (30 bytes)
  1516  015F8C  EE00  F029         	lfsr	0,__pbssCOMRAM
  1517  015F90  0E1E               	movlw	30
  1518  015F92                     clear_4:
  1519  015F92  6AEE               	clrf	postinc0,c
  1520  015F94  06E8               	decf	wreg,f,c
  1521  015F96  E1FD               	bnz	clear_4
  1522  015F98                     end_of_initialization:
  1523                           	opt stack 0
  1524  015F98                     __end_of__initialization:
  1525                           	opt stack 0
  1526  015F98  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1527  015F9A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1528  015F9C  0100               	movlb	0
  1529  015F9E  EF13  F0A6         	goto	_main	;jump to C main() function
  1530                           tblptru	equ	0xFF8
  1531                           tblptrh	equ	0xFF7
  1532                           tblptrl	equ	0xFF6
  1533                           tablat	equ	0xFF5
  1534                           postinc0	equ	0xFEE
  1535                           wreg	equ	0xFE8
  1536                           postdec1	equ	0xFE5
  1537                           fsr1h	equ	0xFE2
  1538                           fsr1l	equ	0xFE1
  1539                           
  1540                           	psect	bssCOMRAM
  1541  000029                     __pbssCOMRAM:
  1542                           	opt stack 0
  1543  000029                     _lStepFunction:
  1544                           	opt stack 0
  1545  000029                     	ds	3
  1546  00002C                     _mode:
  1547                           	opt stack 0
  1548  00002C                     	ds	2
  1549  00002E                     _COUNTER:
  1550                           	opt stack 0
  1551  00002E                     	ds	2
  1552  000030                     HMI_GRender@a:
  1553                           	opt stack 0
  1554  000030                     	ds	2
  1555  000032                     _u:
  1556                           	opt stack 0
  1557  000032                     	ds	1
  1558  000033                     _j:
  1559                           	opt stack 0
  1560  000033                     	ds	1
  1561  000034                     _i:
  1562                           	opt stack 0
  1563  000034                     	ds	1
  1564  000035                     rand@screw:
  1565                           	opt stack 0
  1566  000035                     	ds	1
  1567  000036                     _ADC_Initialised:
  1568                           	opt stack 0
  1569  000036                     	ds	1
  1570  000037                     OutSeg@a:
  1571                           	opt stack 0
  1572  000037                     	ds	1
  1573  000038                     OutSeg@segset:
  1574                           	opt stack 0
  1575  000038                     	ds	1
  1576  000039                     OutSeg@cur:
  1577                           	opt stack 0
  1578  000039                     	ds	1
  1579  00003A                     _I2C1T:
  1580                           	opt stack 0
  1581  00003A                     	ds	7
  1582  000041                     _Stepper:
  1583                           	opt stack 0
  1584  000041                     	ds	6
  1585                           tblptru	equ	0xFF8
  1586                           tblptrh	equ	0xFF7
  1587                           tblptrl	equ	0xFF6
  1588                           tablat	equ	0xFF5
  1589                           postinc0	equ	0xFEE
  1590                           wreg	equ	0xFE8
  1591                           postdec1	equ	0xFE5
  1592                           fsr1h	equ	0xFE2
  1593                           fsr1l	equ	0xFE1
  1594                           
  1595                           	psect	dataCOMRAM
  1596  000047                     __pdataCOMRAM:
  1597                           	opt stack 0
  1598  000047                     _gCursor:
  1599                           	opt stack 0
  1600  000047                     	ds	4
  1601  00004B                     _Bus_State:
  1602                           	opt stack 0
  1603  00004B                     	ds	1
  1604  00004C                     	ds	1
  1605  00004D                     	ds	1
  1606  00004E                     	ds	1
  1607  00004F                     _l:
  1608                           	opt stack 0
  1609  00004F                     	ds	1
  1610  000050                     _w:
  1611                           	opt stack 0
  1612  000050                     	ds	1
  1613                           tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           postinc0	equ	0xFEE
  1618                           wreg	equ	0xFE8
  1619                           postdec1	equ	0xFE5
  1620                           fsr1h	equ	0xFE2
  1621                           fsr1l	equ	0xFE1
  1622                           
  1623                           	psect	bssBANK0
  1624  0000DB                     __pbssBANK0:
  1625                           	opt stack 0
  1626  0000DB                     _lQueue:
  1627                           	opt stack 0
  1628  0000DB                     	ds	3
  1629  0000DE                     _angle:
  1630                           	opt stack 0
  1631  0000DE                     	ds	2
  1632  0000E0                     _steps:
  1633                           	opt stack 0
  1634  0000E0                     	ds	2
  1635  0000E2                     _speed:
  1636                           	opt stack 0
  1637  0000E2                     	ds	2
  1638  0000E4                     _diff:
  1639                           	opt stack 0
  1640  0000E4                     	ds	2
  1641  0000E6                     _pShiftVal:
  1642                           	opt stack 0
  1643  0000E6                     	ds	2
  1644  0000E8                     _val:
  1645                           	opt stack 0
  1646  0000E8                     	ds	2
  1647  0000EA                     _lMotor:
  1648                           	opt stack 0
  1649  0000EA                     	ds	2
  1650  0000EC                     _lCurrent:
  1651                           	opt stack 0
  1652  0000EC                     	ds	2
  1653  0000EE                     _gBackcolour:
  1654                           	opt stack 0
  1655  0000EE                     	ds	2
  1656  0000F0                     _rightState:
  1657                           	opt stack 0
  1658  0000F0                     	ds	1
  1659  0000F1                     _leftState:
  1660                           	opt stack 0
  1661  0000F1                     	ds	1
  1662  0000F2                     _downState:
  1663                           	opt stack 0
  1664  0000F2                     	ds	1
  1665  0000F3                     _upState:
  1666                           	opt stack 0
  1667  0000F3                     	ds	1
  1668  0000F4                     Event_TestButton@j:
  1669                           	opt stack 0
  1670  0000F4                     	ds	1
  1671  0000F5                     Timer2_Init@PRE:
  1672                           	opt stack 0
  1673  0000F5                     	ds	1
  1674  0000F6                     Timer2_Init@INDEX:
  1675                           	opt stack 0
  1676  0000F6                     	ds	1
  1677  0000F7                     Timer0_Init@PRE:
  1678                           	opt stack 0
  1679  0000F7                     	ds	1
  1680  0000F8                     _INDEX:
  1681                           	opt stack 0
  1682  0000F8                     	ds	1
  1683  0000F9                     _lBufferY:
  1684                           	opt stack 0
  1685  0000F9                     	ds	1
  1686  0000FA                     _lBufferX:
  1687                           	opt stack 0
  1688  0000FA                     	ds	1
  1689  0000FB                     _clearall:
  1690                           	opt stack 0
  1691  0000FB                     	ds	1
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           postinc0	equ	0xFEE
  1697                           wreg	equ	0xFE8
  1698                           postdec1	equ	0xFE5
  1699                           fsr1h	equ	0xFE2
  1700                           fsr1l	equ	0xFE1
  1701                           
  1702                           	psect	dataBANK0
  1703  0000FC                     __pdataBANK0:
  1704                           	opt stack 0
  1705  0000FC                     _gForecolour:
  1706                           	opt stack 0
  1707  0000FC                     	ds	2
  1708  0000FE                     _change:
  1709                           	opt stack 0
  1710  0000FE                     	ds	1
  1711                           tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           postdec1	equ	0xFE5
  1718                           fsr1h	equ	0xFE2
  1719                           fsr1l	equ	0xFE1
  1720                           
  1721                           	psect	bssBANK1
  1722  000100                     __pbssBANK1:
  1723                           	opt stack 0
  1724  000100                     _ADCVoltage:
  1725                           	opt stack 0
  1726  000100                     	ds	4
  1727  000104                     Timer2_Init@DIV:
  1728                           	opt stack 0
  1729  000104                     	ds	4
  1730  000108                     Timer0_Init@DIV:
  1731                           	opt stack 0
  1732  000108                     	ds	4
  1733  00010C                     _gISR:
  1734                           	opt stack 0
  1735  00010C                     	ds	3
  1736  00010F                     _I2C2_More:
  1737                           	opt stack 0
  1738  00010F                     	ds	3
  1739  000112                     _I2C1_More:
  1740                           	opt stack 0
  1741  000112                     	ds	3
  1742  000115                     _I2C2_Done:
  1743                           	opt stack 0
  1744  000115                     	ds	3
  1745  000118                     _I2C1_Done:
  1746                           	opt stack 0
  1747  000118                     	ds	3
  1748  00011B                     _errno:
  1749                           	opt stack 0
  1750  00011B                     	ds	2
  1751  00011D                     _locked:
  1752                           	opt stack 0
  1753  00011D                     	ds	2
  1754  00011F                     _remainingSteps:
  1755                           	opt stack 0
  1756  00011F                     	ds	2
  1757  000121                     _IRDistance:
  1758                           	opt stack 0
  1759  000121                     	ds	2
  1760  000123                     _dip:
  1761                           	opt stack 0
  1762  000123                     	ds	2
  1763  000125                     SPI_Send9@dat:
  1764                           	opt stack 0
  1765  000125                     	ds	2
  1766  000127                     _HMIBoard:
  1767                           	opt stack 0
  1768  000127                     	ds	58
  1769  000161                     _SPI1:
  1770                           	opt stack 0
  1771  000161                     	ds	11
  1772  00016C                     _SPI2:
  1773                           	opt stack 0
  1774  00016C                     	ds	11
  1775  000177                     _DIPSwitch:
  1776                           	opt stack 0
  1777  000177                     	ds	10
  1778  000181                     _TestButton:
  1779                           	opt stack 0
  1780  000181                     	ds	10
  1781  00018B                     _PortG:
  1782                           	opt stack 0
  1783  00018B                     	ds	10
  1784  000195                     _PortE:
  1785                           	opt stack 0
  1786  000195                     	ds	10
  1787  00019F                     _PortD:
  1788                           	opt stack 0
  1789  00019F                     	ds	10
  1790  0001A9                     _PortB:
  1791                           	opt stack 0
  1792  0001A9                     	ds	10
  1793  0001B3                     _PortC:
  1794                           	opt stack 0
  1795  0001B3                     	ds	10
  1796  0001BD                     _PortF:
  1797                           	opt stack 0
  1798  0001BD                     	ds	10
  1799  0001C7                     _I2C2T:
  1800                           	opt stack 0
  1801  0001C7                     	ds	7
  1802  0001CE                     _ADC_AN3:
  1803                           	opt stack 0
  1804  0001CE                     	ds	5
  1805  0001D3                     _ADC_AN2:
  1806                           	opt stack 0
  1807  0001D3                     	ds	5
  1808  0001D8                     _ADC_AN1:
  1809                           	opt stack 0
  1810  0001D8                     	ds	5
  1811  0001DD                     _ADC_AN0:
  1812                           	opt stack 0
  1813  0001DD                     	ds	5
  1814  0001E2                     LCD_DrawRectangle@p4:
  1815                           	opt stack 0
  1816  0001E2                     	ds	4
  1817  0001E6                     LCD_DrawRectangle@p2:
  1818                           	opt stack 0
  1819  0001E6                     	ds	4
  1820                           tblptru	equ	0xFF8
  1821                           tblptrh	equ	0xFF7
  1822                           tblptrl	equ	0xFF6
  1823                           tablat	equ	0xFF5
  1824                           postinc0	equ	0xFEE
  1825                           wreg	equ	0xFE8
  1826                           postdec1	equ	0xFE5
  1827                           fsr1h	equ	0xFE2
  1828                           fsr1l	equ	0xFE1
  1829                           
  1830                           	psect	dataBANK1
  1831  0001EA                     __pdataBANK1:
  1832                           	opt stack 0
  1833  0001EA                     Console_Render@F6956:
  1834                           	opt stack 0
  1835  0001EA                     	ds	4
  1836  0001EE                     _gLineSize:
  1837                           	opt stack 0
  1838  0001EE                     	ds	4
  1839  0001F2                     _gCharSize:
  1840                           	opt stack 0
  1841  0001F2                     	ds	4
  1842  0001F6                     _currentPos:
  1843                           	opt stack 0
  1844  0001F6                     	ds	2
  1845  0001F8                     _direction:
  1846                           	opt stack 0
  1847  0001F8                     	ds	2
  1848                           tblptru	equ	0xFF8
  1849                           tblptrh	equ	0xFF7
  1850                           tblptrl	equ	0xFF6
  1851                           tablat	equ	0xFF5
  1852                           postinc0	equ	0xFEE
  1853                           wreg	equ	0xFE8
  1854                           postdec1	equ	0xFE5
  1855                           fsr1h	equ	0xFE2
  1856                           fsr1l	equ	0xFE1
  1857                           
  1858                           	psect	bssBANK2
  1859  000200                     __pbssBANK2:
  1860                           	opt stack 0
  1861  000200                     _lCBuffer:
  1862                           	opt stack 0
  1863  000200                     	ds	30
  1864  00021E                     Console_MakeField@Fill:
  1865                           	opt stack 0
  1866  00021E                     	ds	70
  1867  000264                     _PortA:
  1868                           	opt stack 0
  1869  000264                     	ds	10
  1870                           tblptru	equ	0xFF8
  1871                           tblptrh	equ	0xFF7
  1872                           tblptrl	equ	0xFF6
  1873                           tablat	equ	0xFF5
  1874                           postinc0	equ	0xFEE
  1875                           wreg	equ	0xFE8
  1876                           postdec1	equ	0xFE5
  1877                           fsr1h	equ	0xFE2
  1878                           fsr1l	equ	0xFE1
  1879                           
  1880                           	psect	bssBIGRAM
  1881  00027B                     __pbssBIGRAM:
  1882                           	opt stack 0
  1883  00027B                     _lBuffer:
  1884                           	opt stack 0
  1885  00027B                     	ds	300
  1886                           tblptru	equ	0xFF8
  1887                           tblptrh	equ	0xFF7
  1888                           tblptrl	equ	0xFF6
  1889                           tablat	equ	0xFF5
  1890                           postinc0	equ	0xFEE
  1891                           wreg	equ	0xFE8
  1892                           postdec1	equ	0xFE5
  1893                           fsr1h	equ	0xFE2
  1894                           fsr1l	equ	0xFE1
  1895                           
  1896                           	psect	cstackBANK2
  1897  00026E                     __pcstackBANK2:
  1898                           	opt stack 0
  1899  00026E                     _pow$15268:
  1900                           	opt stack 0
  1901                           
  1902                           ; 4 bytes @ 0x0
  1903  00026E                     	ds	4
  1904  000272                     _pow$15269:
  1905                           	opt stack 0
  1906                           
  1907                           ; 4 bytes @ 0x4
  1908  000272                     	ds	4
  1909  000276                     pow@sign:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x8
  1913  000276                     	ds	1
  1914  000277                     pow@yi:
  1915                           	opt stack 0
  1916                           
  1917                           ; 4 bytes @ 0x9
  1918  000277                     	ds	4
  1919                           tblptru	equ	0xFF8
  1920                           tblptrh	equ	0xFF7
  1921                           tblptrl	equ	0xFF6
  1922                           tablat	equ	0xFF5
  1923                           postinc0	equ	0xFEE
  1924                           wreg	equ	0xFE8
  1925                           postdec1	equ	0xFE5
  1926                           fsr1h	equ	0xFE2
  1927                           fsr1l	equ	0xFE1
  1928                           
  1929                           	psect	cstackBANK1
  1930  0001FA                     __pcstackBANK1:
  1931                           	opt stack 0
  1932  0001FA                     ??_main:
  1933                           
  1934                           ; 1 bytes @ 0x0
  1935  0001FA                     	ds	2
  1936                           tblptru	equ	0xFF8
  1937                           tblptrh	equ	0xFF7
  1938                           tblptrl	equ	0xFF6
  1939                           tablat	equ	0xFF5
  1940                           postinc0	equ	0xFEE
  1941                           wreg	equ	0xFE8
  1942                           postdec1	equ	0xFE5
  1943                           fsr1h	equ	0xFE2
  1944                           fsr1l	equ	0xFE1
  1945                           
  1946                           	psect	cstackBANK0
  1947  000060                     __pcstackBANK0:
  1948                           	opt stack 0
  1949  000060                     ??_Console_ClearCursor:
  1950  000060                     ??_ADC_SetChannel:
  1951  000060                     ??_ADC_ConversionTime:
  1952  000060                     ??_ADC_SetupIO:
  1953  000060                     ??_Console_Init:
  1954  000060                     ??_Console_NewLine:
  1955  000060                     ??_Console_FormFeed:
  1956  000060                     ??_HMI_SetButton:
  1957  000060                     ??_getMode:
  1958  000060                     ?_GetPortProperties:
  1959                           	opt stack 0
  1960  000060                     ?_GetPortPORT:
  1961                           	opt stack 0
  1962  000060                     ?_GetPortTRIS:
  1963                           	opt stack 0
  1964  000060                     ?___wmul:
  1965                           	opt stack 0
  1966  000060                     ?___awmod:
  1967                           	opt stack 0
  1968  000060                     ?___lwdiv:
  1969                           	opt stack 0
  1970  000060                     ?___lwmod:
  1971                           	opt stack 0
  1972  000060                     ?__tdiv_to_l_:
  1973                           	opt stack 0
  1974  000060                     ?__div_to_l_:
  1975                           	opt stack 0
  1976  000060                     ?___fldiv:
  1977                           	opt stack 0
  1978  000060                     ?_frexp:
  1979                           	opt stack 0
  1980  000060                     ?___flneg:
  1981                           	opt stack 0
  1982  000060                     ?___lldiv:
  1983                           	opt stack 0
  1984  000060                     ?___xxtofl:
  1985                           	opt stack 0
  1986  000060                     Mode_Set@pMode:
  1987                           	opt stack 0
  1988  000060                     ToSegment@pCHR:
  1989                           	opt stack 0
  1990  000060                     HMI_SetBar@pValue:
  1991                           	opt stack 0
  1992  000060                     ADC_ClockDivision@pDivide:
  1993                           	opt stack 0
  1994  000060                     Port_GetPin@pInput:
  1995                           	opt stack 0
  1996  000060                     Port_GetQuad@pInput:
  1997                           	opt stack 0
  1998  000060                     SPI_DisableISR@pInput:
  1999                           	opt stack 0
  2000  000060                     SPI_DCS@pInput:
  2001                           	opt stack 0
  2002  000060                     SPI_Send@pInput:
  2003                           	opt stack 0
  2004  000060                     Byte_SetBit@pInput:
  2005                           	opt stack 0
  2006  000060                     Byte_GetBit@pInput:
  2007                           	opt stack 0
  2008  000060                     Byte_SetZone@pInput:
  2009                           	opt stack 0
  2010  000060                     Byte_GetZone@pInput:
  2011                           	opt stack 0
  2012  000060                     Byte_SetByte@pInput:
  2013                           	opt stack 0
  2014  000060                     delay_ms@ms:
  2015                           	opt stack 0
  2016  000060                     delay_us@us:
  2017                           	opt stack 0
  2018  000060                     reverse@input:
  2019                           	opt stack 0
  2020  000060                     Console_SetForecolour@pColour:
  2021                           	opt stack 0
  2022  000060                     ADC_Sequence@pItemA:
  2023                           	opt stack 0
  2024  000060                     ___wmul@multiplier:
  2025                           	opt stack 0
  2026  000060                     ___awmod@dividend:
  2027                           	opt stack 0
  2028  000060                     ___lwdiv@dividend:
  2029                           	opt stack 0
  2030  000060                     ___lwmod@dividend:
  2031                           	opt stack 0
  2032  000060                     MXK_Queue@pCallback:
  2033                           	opt stack 0
  2034  000060                     Timer0_Start@pFunction:
  2035                           	opt stack 0
  2036  000060                     __div_to_l_@f1:
  2037                           	opt stack 0
  2038  000060                     ___flge@ff1:
  2039                           	opt stack 0
  2040  000060                     ___flneg@f1:
  2041                           	opt stack 0
  2042  000060                     __tdiv_to_l_@f1:
  2043                           	opt stack 0
  2044  000060                     ___lldiv@dividend:
  2045                           	opt stack 0
  2046  000060                     ___fldiv@b:
  2047                           	opt stack 0
  2048  000060                     ___xxtofl@val:
  2049                           	opt stack 0
  2050  000060                     frexp@value:
  2051                           	opt stack 0
  2052                           
  2053                           ; 4 bytes @ 0x0
  2054  000060                     	ds	1
  2055  000061                     ADC_SetChannel@pChannel:
  2056                           	opt stack 0
  2057  000061                     ADC_ClockDivision@reg:
  2058                           	opt stack 0
  2059  000061                     ADC_ConversionTime@pCount:
  2060                           	opt stack 0
  2061  000061                     HMI_SetSegments@pString:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x1
  2065  000061                     	ds	1
  2066  000062                     GetPortProperties@pInput:
  2067                           	opt stack 0
  2068  000062                     GetPortPORT@pInput:
  2069                           	opt stack 0
  2070  000062                     GetPortTRIS@pInput:
  2071                           	opt stack 0
  2072  000062                     Port_GetPin@pPin:
  2073                           	opt stack 0
  2074  000062                     Port_GetQuad@pQuad:
  2075                           	opt stack 0
  2076  000062                     SPI_Send@pData:
  2077                           	opt stack 0
  2078  000062                     Byte_SetBit@pBit:
  2079                           	opt stack 0
  2080  000062                     Byte_GetBit@pBit:
  2081                           	opt stack 0
  2082  000062                     Byte_SetZone@pMax:
  2083                           	opt stack 0
  2084  000062                     Byte_GetZone@pMax:
  2085                           	opt stack 0
  2086  000062                     Byte_SetByte@pValue:
  2087                           	opt stack 0
  2088  000062                     Console_Init@x:
  2089                           	opt stack 0
  2090  000062                     Console_FormFeed@x:
  2091                           	opt stack 0
  2092  000062                     ADC_SetupIO@pChannel:
  2093                           	opt stack 0
  2094  000062                     ADC_ClockDivision@unfound:
  2095                           	opt stack 0
  2096  000062                     reverse@length:
  2097                           	opt stack 0
  2098  000062                     ADC_Sequence@pItemB:
  2099                           	opt stack 0
  2100  000062                     ADC_Start@pInput:
  2101                           	opt stack 0
  2102  000062                     ___wmul@multiplicand:
  2103                           	opt stack 0
  2104  000062                     ___awmod@divisor:
  2105                           	opt stack 0
  2106  000062                     ___lwdiv@divisor:
  2107                           	opt stack 0
  2108  000062                     ___lwmod@divisor:
  2109                           	opt stack 0
  2110  000062                     delay_ms@u:
  2111                           	opt stack 0
  2112  000062                     delay_us@u:
  2113                           	opt stack 0
  2114  000062                     HMI_SetButton@reindex:
  2115                           	opt stack 0
  2116                           
  2117                           ; 4 bytes @ 0x2
  2118  000062                     	ds	1
  2119  000063                     ??_Port_GetPin:
  2120  000063                     ??_Port_GetQuad:
  2121  000063                     ??_Byte_GetBit:
  2122  000063                     LCD_Write@mode:
  2123                           	opt stack 0
  2124  000063                     Byte_SetBit@pValue:
  2125                           	opt stack 0
  2126  000063                     Byte_SetZone@pChunk:
  2127                           	opt stack 0
  2128  000063                     Byte_GetZone@pChunk:
  2129                           	opt stack 0
  2130  000063                     Console_Init@y:
  2131                           	opt stack 0
  2132  000063                     Console_FormFeed@y:
  2133                           	opt stack 0
  2134  000063                     OutSeg@pSegment:
  2135                           	opt stack 0
  2136  000063                     ADC_SetupIO@MASK:
  2137                           	opt stack 0
  2138  000063                     Motor_Move@pMotor:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x3
  2142  000063                     	ds	1
  2143  000064                     ??_Byte_SetBit:
  2144  000064                     ??_Console_IncrementCursor:
  2145  000064                     ??_OutSeg:
  2146  000064                     ??_ADC_Start:
  2147  000064                     ??___xxtofl:
  2148  000064                     LCD_Write@value:
  2149                           	opt stack 0
  2150  000064                     Byte_GetBit@Output:
  2151                           	opt stack 0
  2152  000064                     Byte_SetZone@pChunkSize:
  2153                           	opt stack 0
  2154  000064                     Byte_GetZone@pChunkSize:
  2155                           	opt stack 0
  2156  000064                     reverse@tempVar:
  2157                           	opt stack 0
  2158  000064                     ___awmod@counter:
  2159                           	opt stack 0
  2160  000064                     ___lwdiv@counter:
  2161                           	opt stack 0
  2162  000064                     ___lwmod@counter:
  2163                           	opt stack 0
  2164  000064                     HMI_SetSegments@in:
  2165                           	opt stack 0
  2166  000064                     ADC_Init@pInput:
  2167                           	opt stack 0
  2168  000064                     ___wmul@product:
  2169                           	opt stack 0
  2170  000064                     frexp@eptr:
  2171                           	opt stack 0
  2172  000064                     __div_to_l_@f2:
  2173                           	opt stack 0
  2174  000064                     ___flge@ff2:
  2175                           	opt stack 0
  2176  000064                     __tdiv_to_l_@f2:
  2177                           	opt stack 0
  2178  000064                     ___lldiv@divisor:
  2179                           	opt stack 0
  2180  000064                     ___fldiv@a:
  2181                           	opt stack 0
  2182                           
  2183                           ; 4 bytes @ 0x4
  2184  000064                     	ds	1
  2185  000065                     ??_Byte_GetZone:
  2186  000065                     ?_Console_MakeField:
  2187                           	opt stack 0
  2188  000065                     Set_Addr_Window@ys:
  2189                           	opt stack 0
  2190  000065                     Set_Rotation@m:
  2191                           	opt stack 0
  2192  000065                     Port_GetPin@Output:
  2193                           	opt stack 0
  2194  000065                     Port_GetQuad@Output:
  2195                           	opt stack 0
  2196  000065                     Byte_SetZone@pValue:
  2197                           	opt stack 0
  2198  000065                     ___awmod@sign:
  2199                           	opt stack 0
  2200  000065                     LCD_Word_Write@value:
  2201                           	opt stack 0
  2202  000065                     reverse@iterator:
  2203                           	opt stack 0
  2204  000065                     Motor_Move@pDelta:
  2205                           	opt stack 0
  2206  000065                     ___lwdiv@quotient:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x5
  2210  000065                     	ds	1
  2211  000066                     ??_frexp:
  2212  000066                     ??_Byte_SetZone:
  2213  000066                     ?___awdiv:
  2214                           	opt stack 0
  2215  000066                     Set_Addr_Window@xe:
  2216                           	opt stack 0
  2217  000066                     Set_Rotation@rotation:
  2218                           	opt stack 0
  2219  000066                     Byte_GetZone@MASK:
  2220                           	opt stack 0
  2221  000066                     OutSeg@pInput:
  2222                           	opt stack 0
  2223  000066                     HMI_SetButton@pValue:
  2224                           	opt stack 0
  2225  000066                     ADC_Init@pChannel:
  2226                           	opt stack 0
  2227  000066                     MXK_BlockSwitchTo@CUR:
  2228                           	opt stack 0
  2229  000066                     MXK_SwitchTo@CUR:
  2230                           	opt stack 0
  2231  000066                     ___awdiv@dividend:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x6
  2235  000066                     	ds	1
  2236  000067                     ??_Console_MakeField:
  2237  000067                     Set_Addr_Window@ye:
  2238                           	opt stack 0
  2239  000067                     Byte_GetZone@Offset:
  2240                           	opt stack 0
  2241  000067                     OutSeg@out:
  2242                           	opt stack 0
  2243  000067                     HMI_SetButton@v:
  2244                           	opt stack 0
  2245  000067                     MXK_BlockSwitchTo@pModule:
  2246                           	opt stack 0
  2247  000067                     MXK_SwitchTo@pModule:
  2248                           	opt stack 0
  2249  000067                     itos@input:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x7
  2253  000067                     	ds	1
  2254  000068                     ??__tdiv_to_l_:
  2255  000068                     ??___fldiv:
  2256  000068                     ??___flge:
  2257  000068                     Set_Addr_Window@xs:
  2258                           	opt stack 0
  2259  000068                     Byte_GetZone@Output:
  2260                           	opt stack 0
  2261  000068                     ___xxtofl@sign:
  2262                           	opt stack 0
  2263  000068                     HMI_Render@a:
  2264                           	opt stack 0
  2265  000068                     ___awdiv@divisor:
  2266                           	opt stack 0
  2267  000068                     __div_to_l_@quot:
  2268                           	opt stack 0
  2269  000068                     ___lldiv@quotient:
  2270                           	opt stack 0
  2271                           
  2272                           ; 4 bytes @ 0x8
  2273  000068                     	ds	1
  2274  000069                     Byte_SetZone@Offset:
  2275                           	opt stack 0
  2276  000069                     ___xxtofl@exp:
  2277                           	opt stack 0
  2278  000069                     LCD_Fill@pColour:
  2279                           	opt stack 0
  2280  000069                     LCD_FillRectangle@pColour:
  2281                           	opt stack 0
  2282  000069                     Byte_GetPair@pInput:
  2283                           	opt stack 0
  2284  000069                     itos@destination:
  2285                           	opt stack 0
  2286  000069                     Console_MakeField@Index:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x9
  2290  000069                     	ds	1
  2291  00006A                     Byte_SetZone@MASK:
  2292                           	opt stack 0
  2293  00006A                     ___awdiv@counter:
  2294                           	opt stack 0
  2295  00006A                     ___xxtofl@arg:
  2296                           	opt stack 0
  2297                           
  2298                           ; 4 bytes @ 0xA
  2299  00006A                     	ds	1
  2300  00006B                     LCD_Fill@i:
  2301                           	opt stack 0
  2302  00006B                     Byte_GetPair@pPair:
  2303                           	opt stack 0
  2304  00006B                     Console_MakeField@pInput:
  2305                           	opt stack 0
  2306  00006B                     ___awdiv@sign:
  2307                           	opt stack 0
  2308  00006B                     Byte_SetPair@pInput:
  2309                           	opt stack 0
  2310  00006B                     Byte_SetQuad@pInput:
  2311                           	opt stack 0
  2312  00006B                     itos@Data:
  2313                           	opt stack 0
  2314  00006B                     LCD_FillRectangle@pPoint:
  2315                           	opt stack 0
  2316  00006B                     __tdiv_to_l_@quot:
  2317                           	opt stack 0
  2318                           
  2319                           ; 4 bytes @ 0xB
  2320  00006B                     	ds	1
  2321  00006C                     LCD_Fill@j:
  2322                           	opt stack 0
  2323  00006C                     __div_to_l_@cntr:
  2324                           	opt stack 0
  2325  00006C                     ___lldiv@counter:
  2326                           	opt stack 0
  2327  00006C                     ___fldiv@sign:
  2328                           	opt stack 0
  2329  00006C                     Word_GetPair@pInput:
  2330                           	opt stack 0
  2331  00006C                     Console_MakeField@Column:
  2332                           	opt stack 0
  2333  00006C                     ___awdiv@quotient:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0xC
  2337  00006C                     	ds	1
  2338  00006D                     ?___llmod:
  2339                           	opt stack 0
  2340  00006D                     Byte_SetPair@pPair:
  2341                           	opt stack 0
  2342  00006D                     Byte_SetQuad@pQuad:
  2343                           	opt stack 0
  2344  00006D                     __div_to_l_@exp1:
  2345                           	opt stack 0
  2346  00006D                     itos@Length:
  2347                           	opt stack 0
  2348  00006D                     Timer0_Init@pFrequency:
  2349                           	opt stack 0
  2350  00006D                     Timer2_Init@pFrequency:
  2351                           	opt stack 0
  2352  00006D                     ___llmod@dividend:
  2353                           	opt stack 0
  2354  00006D                     ___fldiv@rem:
  2355                           	opt stack 0
  2356                           
  2357                           ; 4 bytes @ 0xD
  2358  00006D                     	ds	1
  2359  00006E                     ??_Console_Tab:
  2360  00006E                     ?___flmul:
  2361                           	opt stack 0
  2362  00006E                     Byte_SetPair@pValue:
  2363                           	opt stack 0
  2364  00006E                     Byte_SetQuad@pValue:
  2365                           	opt stack 0
  2366  00006E                     Word_GetPair@pPair:
  2367                           	opt stack 0
  2368  00006E                     _Console_MakeField$10974:
  2369                           	opt stack 0
  2370  00006E                     ___flmul@b:
  2371                           	opt stack 0
  2372                           
  2373                           ; 4 bytes @ 0xE
  2374  00006E                     	ds	1
  2375  00006F                     __tdiv_to_l_@cntr:
  2376                           	opt stack 0
  2377  00006F                     Port_SetPin@pInput:
  2378                           	opt stack 0
  2379  00006F                     Port_Set@pInput:
  2380                           	opt stack 0
  2381  00006F                     SPI_MinSpeed@pInput:
  2382                           	opt stack 0
  2383  00006F                     SPI_MaxSpeed@pInput:
  2384                           	opt stack 0
  2385  00006F                     Word_SetPair@pInput:
  2386                           	opt stack 0
  2387  00006F                     PortProperty_Valid@pInput:
  2388                           	opt stack 0
  2389  00006F                     itos@Out:
  2390                           	opt stack 0
  2391  00006F                     LCD_FillRectangle@pSize:
  2392                           	opt stack 0
  2393                           
  2394                           ; 4 bytes @ 0xF
  2395  00006F                     	ds	1
  2396  000070                     Console_MakeField@x:
  2397                           	opt stack 0
  2398  000070                     __tdiv_to_l_@exp1:
  2399                           	opt stack 0
  2400                           
  2401                           ; 1 bytes @ 0x10
  2402  000070                     	ds	1
  2403  000071                     ??_Timer2_Init:
  2404  000071                     ??_Timer0_Init:
  2405  000071                     Port_SetPin@pPin:
  2406                           	opt stack 0
  2407  000071                     Port_Set@pValue:
  2408                           	opt stack 0
  2409  000071                     Word_SetPair@pPair:
  2410                           	opt stack 0
  2411  000071                     PortProperty_Valid@pPinDrive:
  2412                           	opt stack 0
  2413  000071                     Console_MakeField@y:
  2414                           	opt stack 0
  2415  000071                     HMI_SetNumber@pInput:
  2416                           	opt stack 0
  2417  000071                     ___fldiv@new_exp:
  2418                           	opt stack 0
  2419  000071                     ___llmod@divisor:
  2420                           	opt stack 0
  2421                           
  2422                           ; 4 bytes @ 0x11
  2423  000071                     	ds	1
  2424  000072                     ??_Port_Set:
  2425  000072                     Port_SetPin@pValue:
  2426                           	opt stack 0
  2427  000072                     Word_SetPair@pValue:
  2428                           	opt stack 0
  2429  000072                     PortProperty_Valid@pPin:
  2430                           	opt stack 0
  2431  000072                     LCD_DrawField@pField:
  2432                           	opt stack 0
  2433  000072                     Timer2_Init@RDIV:
  2434                           	opt stack 0
  2435  000072                     ___flmul@a:
  2436                           	opt stack 0
  2437                           
  2438                           ; 4 bytes @ 0x12
  2439  000072                     	ds	1
  2440  000073                     ??_PortProperty_Valid:
  2441  000073                     ??_LCD_FillRectangle:
  2442  000073                     Port_SetPin@Type:
  2443                           	opt stack 0
  2444  000073                     Console_Tab@t:
  2445                           	opt stack 0
  2446  000073                     Timer0_Init@pCPUClock:
  2447                           	opt stack 0
  2448  000073                     ___fldiv@grs:
  2449                           	opt stack 0
  2450                           
  2451                           ; 4 bytes @ 0x13
  2452  000073                     	ds	1
  2453  000074                     LED_Set@pValue:
  2454                           	opt stack 0
  2455  000074                     Console_Tab@i:
  2456                           	opt stack 0
  2457  000074                     Port_TogglePin@pInput:
  2458                           	opt stack 0
  2459  000074                     LCD_DrawField@pPoint:
  2460                           	opt stack 0
  2461                           
  2462                           ; 4 bytes @ 0x14
  2463  000074                     	ds	1
  2464  000075                     LCD_FillRectangle@i:
  2465                           	opt stack 0
  2466  000075                     LED_Set@pLED:
  2467                           	opt stack 0
  2468  000075                     Console_Tab@c:
  2469                           	opt stack 0
  2470  000075                     ___llmod@counter:
  2471                           	opt stack 0
  2472  000075                     PortProperty_Valid@Errors:
  2473                           	opt stack 0
  2474                           
  2475                           ; 16 bytes @ 0x15
  2476  000075                     	ds	1
  2477  000076                     ??___flmul:
  2478  000076                     ??_Console_PrintChar:
  2479  000076                     LCD_FillRectangle@j:
  2480                           	opt stack 0
  2481  000076                     Port_TogglePin@pPin:
  2482                           	opt stack 0
  2483  000076                     Timer2_Init@pCPUClock:
  2484                           	opt stack 0
  2485                           
  2486                           ; 4 bytes @ 0x16
  2487  000076                     	ds	1
  2488  000077                     Port_TogglePin@Value:
  2489                           	opt stack 0
  2490  000077                     ___fldiv@bexp:
  2491                           	opt stack 0
  2492  000077                     Timer0_Init@DIVIDE:
  2493                           	opt stack 0
  2494                           
  2495                           ; 4 bytes @ 0x17
  2496  000077                     	ds	1
  2497  000078                     LED_Toggle@pLED:
  2498                           	opt stack 0
  2499  000078                     ___fldiv@aexp:
  2500                           	opt stack 0
  2501  000078                     LCD_DrawField@pSize:
  2502                           	opt stack 0
  2503                           
  2504                           ; 4 bytes @ 0x18
  2505  000078                     	ds	1
  2506  000079                     Console_PrintChar@pInput:
  2507                           	opt stack 0
  2508  000079                     Event_DIPSwitch@pState:
  2509                           	opt stack 0
  2510  000079                     Event_TestButton@pState:
  2511                           	opt stack 0
  2512                           
  2513                           ; 1 bytes @ 0x19
  2514  000079                     	ds	1
  2515  00007A                     putch@c:
  2516                           	opt stack 0
  2517  00007A                     Event_DIPSwitch@Bar:
  2518                           	opt stack 0
  2519  00007A                     ___flmul@sign:
  2520                           	opt stack 0
  2521  00007A                     Timer2_Init@DIVIDE:
  2522                           	opt stack 0
  2523                           
  2524                           ; 4 bytes @ 0x1A
  2525  00007A                     	ds	1
  2526  00007B                     ___flmul@aexp:
  2527                           	opt stack 0
  2528  00007B                     Button_Poll@pButton:
  2529                           	opt stack 0
  2530  00007B                     Motor_Speed@pMotor:
  2531                           	opt stack 0
  2532                           
  2533                           ; 2 bytes @ 0x1B
  2534  00007B                     	ds	1
  2535  00007C                     ??_LCD_DrawField:
  2536  00007C                     ___flmul@grs:
  2537                           	opt stack 0
  2538                           
  2539                           ; 4 bytes @ 0x1C
  2540  00007C                     	ds	1
  2541  00007D                     Button_Poll@pIncrement:
  2542                           	opt stack 0
  2543  00007D                     Motor_Speed@pFrequency:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x1D
  2547  00007D                     	ds	1
  2548  00007E                     ??_Button_Poll:
  2549  00007E                     LCD_DrawField@count:
  2550                           	opt stack 0
  2551                           
  2552                           ; 2 bytes @ 0x1E
  2553  00007E                     	ds	1
  2554  00007F                     ??_positionMode:
  2555                           
  2556                           ; 1 bytes @ 0x1F
  2557  00007F                     	ds	1
  2558  000080                     LCD_DrawField@xmax:
  2559                           	opt stack 0
  2560  000080                     ___flmul@bexp:
  2561                           	opt stack 0
  2562                           
  2563                           ; 1 bytes @ 0x20
  2564  000080                     	ds	1
  2565  000081                     LCD_DrawField@ymax:
  2566                           	opt stack 0
  2567  000081                     ___flmul@prod:
  2568                           	opt stack 0
  2569                           
  2570                           ; 4 bytes @ 0x21
  2571  000081                     	ds	1
  2572  000082                     LCD_DrawField@i:
  2573                           	opt stack 0
  2574  000082                     Port_Set@TypeRequired:
  2575                           	opt stack 0
  2576                           
  2577                           ; 2 bytes @ 0x22
  2578  000082                     	ds	1
  2579  000083                     ??_Console_Render:
  2580  000083                     Button_Poll@Pin:
  2581                           	opt stack 0
  2582                           
  2583                           ; 1 bytes @ 0x23
  2584  000083                     	ds	1
  2585  000084                     ??_inputVar:
  2586  000084                     Port_Set@TypeActual:
  2587                           	opt stack 0
  2588                           
  2589                           ; 2 bytes @ 0x24
  2590  000084                     	ds	1
  2591  000085                     PortProperty_Valid@Pair:
  2592                           	opt stack 0
  2593  000085                     Console_Render@temp:
  2594                           	opt stack 0
  2595  000085                     ___flmul@temp:
  2596                           	opt stack 0
  2597                           
  2598                           ; 2 bytes @ 0x25
  2599  000085                     	ds	1
  2600  000086                     Port_Set@Type:
  2601                           	opt stack 0
  2602  000086                     Port_CheckPairType@pInput:
  2603                           	opt stack 0
  2604  000086                     Port_SetPinType@pInput:
  2605                           	opt stack 0
  2606  000086                     Console_Render@lCursor:
  2607                           	opt stack 0
  2608                           
  2609                           ; 4 bytes @ 0x26
  2610  000086                     	ds	1
  2611  000087                     ?_ADC_Voltage:
  2612                           	opt stack 0
  2613  000087                     ?_fround:
  2614                           	opt stack 0
  2615  000087                     ?_scale:
  2616                           	opt stack 0
  2617  000087                     ?___fltol:
  2618                           	opt stack 0
  2619  000087                     ADC_Voltage@pInput:
  2620                           	opt stack 0
  2621  000087                     ___fltol@f1:
  2622                           	opt stack 0
  2623                           
  2624                           ; 4 bytes @ 0x27
  2625  000087                     	ds	1
  2626  000088                     Port_CheckPairType@pPair:
  2627                           	opt stack 0
  2628  000088                     Port_SetPinType@pPin:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x28
  2632  000088                     	ds	1
  2633  000089                     Port_CheckPairType@pDrive:
  2634                           	opt stack 0
  2635  000089                     Port_SetPinType@pType:
  2636                           	opt stack 0
  2637                           
  2638                           ; 1 bytes @ 0x29
  2639  000089                     	ds	1
  2640  00008A                     Port_CheckPairType@Pin1:
  2641                           	opt stack 0
  2642  00008A                     Port_SetPinType@Output:
  2643                           	opt stack 0
  2644  00008A                     Console_Render@x:
  2645                           	opt stack 0
  2646                           
  2647                           ; 1 bytes @ 0x2A
  2648  00008A                     	ds	1
  2649  00008B                     ??_ADC_Voltage:
  2650  00008B                     ??___fltol:
  2651  00008B                     Port_CheckPairType@Pin2:
  2652                           	opt stack 0
  2653  00008B                     Console_Render@y:
  2654                           	opt stack 0
  2655  00008B                     Port_SetPinType@Props:
  2656                           	opt stack 0
  2657  00008B                     _fround$15265:
  2658                           	opt stack 0
  2659  00008B                     _scale$15266:
  2660                           	opt stack 0
  2661                           
  2662                           ; 4 bytes @ 0x2B
  2663  00008B                     	ds	1
  2664  00008C                     Port_CheckPairType@Output:
  2665                           	opt stack 0
  2666                           
  2667                           ; 1 bytes @ 0x2C
  2668  00008C                     	ds	1
  2669  00008D                     LED_Init@pLED:
  2670                           	opt stack 0
  2671  00008D                     Port_CheckPairType@Props:
  2672                           	opt stack 0
  2673  00008D                     Motor_Init@pMotor:
  2674                           	opt stack 0
  2675  00008D                     SPI_Init@pClock:
  2676                           	opt stack 0
  2677  00008D                     ADC_Voltage@max:
  2678                           	opt stack 0
  2679                           
  2680                           ; 4 bytes @ 0x2D
  2681  00008D                     	ds	2
  2682  00008F                     scale@scl:
  2683                           	opt stack 0
  2684  00008F                     ___fltol@sign1:
  2685                           	opt stack 0
  2686  00008F                     Port_CheckQuadType@pInput:
  2687                           	opt stack 0
  2688  00008F                     Motor_Init@pAddress:
  2689                           	opt stack 0
  2690  00008F                     _fround$15264:
  2691                           	opt stack 0
  2692                           
  2693                           ; 4 bytes @ 0x2F
  2694  00008F                     	ds	1
  2695  000090                     ___fltol@exp1:
  2696                           	opt stack 0
  2697                           
  2698                           ; 1 bytes @ 0x30
  2699  000090                     	ds	1
  2700  000091                     Port_CheckQuadType@pQuad:
  2701                           	opt stack 0
  2702  000091                     SPI_Init@pChannel:
  2703                           	opt stack 0
  2704  000091                     ADC_Voltage@ref:
  2705                           	opt stack 0
  2706                           
  2707                           ; 4 bytes @ 0x31
  2708  000091                     	ds	1
  2709  000092                     Port_CheckQuadType@pDrive:
  2710                           	opt stack 0
  2711  000092                     SPI_Init@pMode:
  2712                           	opt stack 0
  2713                           
  2714                           ; 1 bytes @ 0x32
  2715  000092                     	ds	1
  2716  000093                     Port_CheckQuadType@Pair1:
  2717                           	opt stack 0
  2718  000093                     fround@prec:
  2719                           	opt stack 0
  2720  000093                     SPI_Init@pInput:
  2721                           	opt stack 0
  2722                           
  2723                           ; 2 bytes @ 0x33
  2724  000093                     	ds	1
  2725  000094                     ?___fladd:
  2726                           	opt stack 0
  2727  000094                     Port_CheckQuadType@Pair2:
  2728                           	opt stack 0
  2729  000094                     ___fladd@b:
  2730                           	opt stack 0
  2731                           
  2732                           ; 4 bytes @ 0x34
  2733  000094                     	ds	1
  2734  000095                     ??_LCD_Init:
  2735  000095                     Port_CheckQuadType@Output:
  2736                           	opt stack 0
  2737  000095                     ADC_Voltage@output:
  2738                           	opt stack 0
  2739                           
  2740                           ; 4 bytes @ 0x35
  2741  000095                     	ds	1
  2742  000096                     Port_CheckPortType@pInput:
  2743                           	opt stack 0
  2744  000096                     Port_SetQuadType@pInput:
  2745                           	opt stack 0
  2746                           
  2747                           ; 2 bytes @ 0x36
  2748  000096                     	ds	1
  2749  000097                     LCD_Init@i:
  2750                           	opt stack 0
  2751                           
  2752                           ; 2 bytes @ 0x37
  2753  000097                     	ds	1
  2754  000098                     Port_CheckPortType@pDrive:
  2755                           	opt stack 0
  2756  000098                     Port_SetQuadType@pQuad:
  2757                           	opt stack 0
  2758  000098                     ___fladd@a:
  2759                           	opt stack 0
  2760                           
  2761                           ; 4 bytes @ 0x38
  2762  000098                     	ds	1
  2763  000099                     Port_CheckPortType@Output:
  2764                           	opt stack 0
  2765  000099                     Port_SetQuadType@pType:
  2766                           	opt stack 0
  2767                           
  2768                           ; 1 bytes @ 0x39
  2769  000099                     	ds	1
  2770  00009A                     Port_SetQuadType@Output:
  2771                           	opt stack 0
  2772  00009A                     Port_SetType@pInput:
  2773                           	opt stack 0
  2774                           
  2775                           ; 2 bytes @ 0x3A
  2776  00009A                     	ds	1
  2777  00009B                     Button_Init@pInput:
  2778                           	opt stack 0
  2779                           
  2780                           ; 2 bytes @ 0x3B
  2781  00009B                     	ds	1
  2782  00009C                     ??___fladd:
  2783  00009C                     Port_SetType@pType:
  2784                           	opt stack 0
  2785                           
  2786                           ; 1 bytes @ 0x3C
  2787  00009C                     	ds	1
  2788  00009D                     ??_Port_SetType:
  2789  00009D                     Button_Init@pThreshold:
  2790                           	opt stack 0
  2791                           
  2792                           ; 2 bytes @ 0x3D
  2793  00009D                     	ds	2
  2794  00009F                     Port_SetType@Output:
  2795                           	opt stack 0
  2796  00009F                     Button_Init@pInitIO:
  2797                           	opt stack 0
  2798                           
  2799                           ; 3 bytes @ 0x3F
  2800  00009F                     	ds	1
  2801  0000A0                     Port_Init@pInput:
  2802                           	opt stack 0
  2803                           
  2804                           ; 2 bytes @ 0x40
  2805  0000A0                     	ds	2
  2806  0000A2                     Port_Init@pPort:
  2807                           	opt stack 0
  2808  0000A2                     Button_Init@pGetState:
  2809                           	opt stack 0
  2810                           
  2811                           ; 3 bytes @ 0x42
  2812  0000A2                     	ds	1
  2813  0000A3                     ??_Port_Init:
  2814                           
  2815                           ; 1 bytes @ 0x43
  2816  0000A3                     	ds	1
  2817  0000A4                     ___fladd@signs:
  2818                           	opt stack 0
  2819                           
  2820                           ; 1 bytes @ 0x44
  2821  0000A4                     	ds	1
  2822  0000A5                     Port_Init@i:
  2823                           	opt stack 0
  2824  0000A5                     ___fladd@aexp:
  2825                           	opt stack 0
  2826  0000A5                     Button_Init@pFunction:
  2827                           	opt stack 0
  2828                           
  2829                           ; 3 bytes @ 0x45
  2830  0000A5                     	ds	1
  2831  0000A6                     ___fladd@bexp:
  2832                           	opt stack 0
  2833                           
  2834                           ; 1 bytes @ 0x46
  2835  0000A6                     	ds	1
  2836  0000A7                     ___fladd@grs:
  2837                           	opt stack 0
  2838                           
  2839                           ; 1 bytes @ 0x47
  2840  0000A7                     	ds	1
  2841  0000A8                     ?___flsub:
  2842                           	opt stack 0
  2843  0000A8                     ?_floor:
  2844                           	opt stack 0
  2845  0000A8                     ?_eval_poly:
  2846                           	opt stack 0
  2847  0000A8                     HMI_Init@in:
  2848                           	opt stack 0
  2849  0000A8                     ___flsub@b:
  2850                           	opt stack 0
  2851  0000A8                     floor@x:
  2852                           	opt stack 0
  2853  0000A8                     eval_poly@x:
  2854                           	opt stack 0
  2855                           
  2856                           ; 4 bytes @ 0x48
  2857  0000A8                     	ds	2
  2858  0000AA                     
  2859                           ; 1 bytes @ 0x4A
  2860  0000AA                     	ds	2
  2861  0000AC                     eval_poly@d:
  2862                           	opt stack 0
  2863  0000AC                     ___flsub@a:
  2864                           	opt stack 0
  2865  0000AC                     floor@i:
  2866                           	opt stack 0
  2867                           
  2868                           ; 4 bytes @ 0x4C
  2869  0000AC                     	ds	2
  2870  0000AE                     eval_poly@n:
  2871                           	opt stack 0
  2872                           
  2873                           ; 2 bytes @ 0x4E
  2874  0000AE                     	ds	2
  2875  0000B0                     ??_eval_poly:
  2876  0000B0                     ?_printf:
  2877                           	opt stack 0
  2878  0000B0                     printf@f:
  2879                           	opt stack 0
  2880  0000B0                     floor@expon:
  2881                           	opt stack 0
  2882                           
  2883                           ; 2 bytes @ 0x50
  2884  0000B0                     	ds	4
  2885  0000B4                     eval_poly@res:
  2886                           	opt stack 0
  2887                           
  2888                           ; 4 bytes @ 0x54
  2889  0000B4                     	ds	2
  2890  0000B6                     ??_printf:
  2891                           
  2892                           ; 1 bytes @ 0x56
  2893  0000B6                     	ds	2
  2894  0000B8                     ?_log:
  2895                           	opt stack 0
  2896  0000B8                     ?_ldexp:
  2897                           	opt stack 0
  2898  0000B8                     ldexp@value:
  2899                           	opt stack 0
  2900  0000B8                     log@x:
  2901                           	opt stack 0
  2902  0000B8                     _printf$15267:
  2903                           	opt stack 0
  2904                           
  2905                           ; 4 bytes @ 0x58
  2906  0000B8                     	ds	4
  2907  0000BC                     printf@ap:
  2908                           	opt stack 0
  2909  0000BC                     ldexp@newexp:
  2910                           	opt stack 0
  2911  0000BC                     log@exponent:
  2912                           	opt stack 0
  2913                           
  2914                           ; 2 bytes @ 0x5C
  2915  0000BC                     	ds	2
  2916  0000BE                     ??_ldexp:
  2917  0000BE                     printf@flag:
  2918                           	opt stack 0
  2919                           
  2920                           ; 2 bytes @ 0x5E
  2921  0000BE                     	ds	2
  2922  0000C0                     ?_exp:
  2923                           	opt stack 0
  2924  0000C0                     printf@prec:
  2925                           	opt stack 0
  2926  0000C0                     exp@x:
  2927                           	opt stack 0
  2928                           
  2929                           ; 4 bytes @ 0x60
  2930  0000C0                     	ds	2
  2931  0000C2                     printf@val:
  2932                           	opt stack 0
  2933                           
  2934                           ; 4 bytes @ 0x62
  2935  0000C2                     	ds	2
  2936  0000C4                     _exp$15270:
  2937                           	opt stack 0
  2938                           
  2939                           ; 4 bytes @ 0x64
  2940  0000C4                     	ds	2
  2941  0000C6                     printf@exp:
  2942                           	opt stack 0
  2943                           
  2944                           ; 2 bytes @ 0x66
  2945  0000C6                     	ds	2
  2946  0000C8                     exp@exponent:
  2947                           	opt stack 0
  2948  0000C8                     printf@tmpval:
  2949                           	opt stack 0
  2950                           
  2951                           ; 4 bytes @ 0x68
  2952  0000C8                     	ds	2
  2953  0000CA                     exp@sign:
  2954                           	opt stack 0
  2955                           
  2956                           ; 1 bytes @ 0x6A
  2957  0000CA                     	ds	1
  2958  0000CB                     ?_pow:
  2959                           	opt stack 0
  2960  0000CB                     pow@x:
  2961                           	opt stack 0
  2962                           
  2963                           ; 4 bytes @ 0x6B
  2964  0000CB                     	ds	1
  2965  0000CC                     printf@fval:
  2966                           	opt stack 0
  2967                           
  2968                           ; 4 bytes @ 0x6C
  2969  0000CC                     	ds	3
  2970  0000CF                     pow@y:
  2971                           	opt stack 0
  2972                           
  2973                           ; 4 bytes @ 0x6F
  2974  0000CF                     	ds	1
  2975  0000D0                     printf@c:
  2976                           	opt stack 0
  2977                           
  2978                           ; 1 bytes @ 0x70
  2979  0000D0                     	ds	1
  2980  0000D1                     
  2981                           ; 1 bytes @ 0x71
  2982  0000D1                     	ds	2
  2983  0000D3                     displayPositionMode@angleDegrees:
  2984                           	opt stack 0
  2985                           
  2986                           ; 4 bytes @ 0x73
  2987  0000D3                     	ds	4
  2988  0000D7                     _displayPositionMode$15263:
  2989                           	opt stack 0
  2990                           
  2991                           ; 4 bytes @ 0x77
  2992  0000D7                     	ds	4
  2993                           tblptru	equ	0xFF8
  2994                           tblptrh	equ	0xFF7
  2995                           tblptrl	equ	0xFF6
  2996                           tablat	equ	0xFF5
  2997                           postinc0	equ	0xFEE
  2998                           wreg	equ	0xFE8
  2999                           postdec1	equ	0xFE5
  3000                           fsr1h	equ	0xFE2
  3001                           fsr1l	equ	0xFE1
  3002                           
  3003                           	psect	cstackCOMRAM
  3004  000001                     __pcstackCOMRAM:
  3005                           	opt stack 0
  3006  000001                     i2Byte_SetBit@pInput:
  3007                           	opt stack 0
  3008  000001                     i2Byte_GetZone@pInput:
  3009                           	opt stack 0
  3010  000001                     i2delay_us@us:
  3011                           	opt stack 0
  3012  000001                     i2MXK_Queue@pCallback:
  3013                           	opt stack 0
  3014                           
  3015                           ; 3 bytes @ 0x0
  3016  000001                     	ds	2
  3017  000003                     i2Byte_SetBit@pBit:
  3018                           	opt stack 0
  3019  000003                     i2Byte_GetZone@pMax:
  3020                           	opt stack 0
  3021  000003                     i2delay_us@u:
  3022                           	opt stack 0
  3023                           
  3024                           ; 4 bytes @ 0x2
  3025  000003                     	ds	1
  3026  000004                     i2Byte_SetBit@pValue:
  3027                           	opt stack 0
  3028  000004                     i2Byte_GetZone@pChunk:
  3029                           	opt stack 0
  3030                           
  3031                           ; 1 bytes @ 0x3
  3032  000004                     	ds	1
  3033  000005                     ??i2_Byte_SetBit:
  3034  000005                     i2Byte_GetZone@pChunkSize:
  3035                           	opt stack 0
  3036                           
  3037                           ; 1 bytes @ 0x4
  3038  000005                     	ds	1
  3039  000006                     ??i2_Byte_GetZone:
  3040                           
  3041                           ; 1 bytes @ 0x5
  3042  000006                     	ds	1
  3043  000007                     i2Byte_GetZone@MASK:
  3044                           	opt stack 0
  3045  000007                     i2MXK_SwitchTo@CUR:
  3046                           	opt stack 0
  3047                           
  3048                           ; 1 bytes @ 0x6
  3049  000007                     	ds	1
  3050  000008                     i2Byte_GetZone@Offset:
  3051                           	opt stack 0
  3052  000008                     i2MXK_SwitchTo@pModule:
  3053                           	opt stack 0
  3054                           
  3055                           ; 1 bytes @ 0x7
  3056  000008                     	ds	1
  3057  000009                     i2Byte_GetZone@Output:
  3058                           	opt stack 0
  3059                           
  3060                           ; 1 bytes @ 0x8
  3061  000009                     	ds	1
  3062  00000A                     i2Byte_GetPair@pInput:
  3063                           	opt stack 0
  3064                           
  3065                           ; 2 bytes @ 0x9
  3066  00000A                     	ds	2
  3067  00000C                     i2Byte_GetPair@pPair:
  3068                           	opt stack 0
  3069                           
  3070                           ; 1 bytes @ 0xB
  3071  00000C                     	ds	1
  3072  00000D                     i2Word_GetPair@pInput:
  3073                           	opt stack 0
  3074                           
  3075                           ; 2 bytes @ 0xC
  3076  00000D                     	ds	2
  3077  00000F                     i2Word_GetPair@pPair:
  3078                           	opt stack 0
  3079                           
  3080                           ; 1 bytes @ 0xE
  3081  00000F                     	ds	1
  3082  000010                     i2Port_SetPin@pInput:
  3083                           	opt stack 0
  3084                           
  3085                           ; 2 bytes @ 0xF
  3086  000010                     	ds	2
  3087  000012                     i2Port_SetPin@pPin:
  3088                           	opt stack 0
  3089                           
  3090                           ; 1 bytes @ 0x11
  3091  000012                     	ds	1
  3092  000013                     i2Port_SetPin@pValue:
  3093                           	opt stack 0
  3094                           
  3095                           ; 1 bytes @ 0x12
  3096  000013                     	ds	1
  3097  000014                     i2Port_SetPin@Type:
  3098                           	opt stack 0
  3099                           
  3100                           ; 1 bytes @ 0x13
  3101  000014                     	ds	1
  3102  000015                     
  3103                           ; 1 bytes @ 0x14
  3104  000015                     	ds	2
  3105  000017                     ??_ISR_Function:
  3106                           
  3107                           ; 1 bytes @ 0x16
  3108  000017                     	ds	18
  3109                           tblptru	equ	0xFF8
  3110                           tblptrh	equ	0xFF7
  3111                           tblptrl	equ	0xFF6
  3112                           tablat	equ	0xFF5
  3113                           postinc0	equ	0xFEE
  3114                           wreg	equ	0xFE8
  3115                           postdec1	equ	0xFE5
  3116                           fsr1h	equ	0xFE2
  3117                           fsr1l	equ	0xFE1
  3118                           
  3119 ;;
  3120 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  3121 ;;
  3122 ;; *************** function _main *****************
  3123 ;; Defined at:
  3124 ;;		line 264 in file "main.c"
  3125 ;; Parameters:    Size  Location     Type
  3126 ;;		None
  3127 ;; Auto vars:     Size  Location     Type
  3128 ;;		None
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:        2 bytes
  3143 ;; Hardware stack levels required when called:   18
  3144 ;; This function calls:
  3145 ;;		_Console_Render
  3146 ;;		_Console_SetForecolour
  3147 ;;		_HMI_Render
  3148 ;;		_HMI_SetNumber
  3149 ;;		_MXK_BlockSwitchTo
  3150 ;;		_MXK_Dequeue
  3151 ;;		_MXK_Release
  3152 ;;		_continuousMode
  3153 ;;		_displayContinuousMode
  3154 ;;		_displayNullMode
  3155 ;;		_displayPositionMode
  3156 ;;		_displaySID
  3157 ;;		_displayStepMode
  3158 ;;		_getMode
  3159 ;;		_initialise
  3160 ;;		_inputVar
  3161 ;;		_nullMode
  3162 ;;		_positionMode
  3163 ;;		_printf
  3164 ;;		_stepMode
  3165 ;; This function is called by:
  3166 ;;		Startup code after reset
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text0
  3171  014C26                     __ptext0:
  3172                           	opt stack 0
  3173  014C26                     _main:
  3174                           	opt stack 13
  3175                           
  3176                           ;main.c: 265: initialise();
  3177                           
  3178                           ;incstack = 0
  3179  014C26  EC69  F0B8         	call	_initialise	;wreg free
  3180  014C2A                     
  3181                           ;main.c: 268: inputVar();
  3182  014C2A  ECCA  F0AE         	call	_inputVar	;wreg free
  3183                           
  3184                           ;main.c: 270: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3185  014C2E  0E01               	movlw	1
  3186  014C30  ECA1  F0BC         	call	_MXK_BlockSwitchTo
  3187  014C34  0900               	iorlw	0
  3188  014C36  B4D8               	btfsc	status,2,c
  3189  014C38  D056               	goto	l2115
  3190                           
  3191                           ;main.c: 271: getMode();
  3192  014C3A  EC19  F0BA         	call	_getMode	;wreg free
  3193                           
  3194                           ;main.c: 272: printf("%c", (char)35);
  3195  014C3E  0EFC               	movlw	low STR_16
  3196  014C40  0100               	movlb	0	; () banked
  3197  014C42  6FB0               	movwf	printf@f& (0+255),b
  3198  014C44  0EFF               	movlw	high STR_16
  3199  014C46  0100               	movlb	0	; () banked
  3200  014C48  6FB1               	movwf	(printf@f+1)& (0+255),b
  3201  014C4A  0E00               	movlw	0
  3202  014C4C  0100               	movlb	0	; () banked
  3203  014C4E  6FB3               	movwf	(?_printf+3)& (0+255),b
  3204  014C50  0E23               	movlw	35
  3205  014C52  6FB2               	movwf	(?_printf+2)& (0+255),b
  3206  014C54  EC00  F080         	call	_printf	;wreg free
  3207                           
  3208                           ;main.c: 273: printf("%d\n", angle);
  3209  014C58  0EE8               	movlw	low (STR_6+7)
  3210  014C5A  0100               	movlb	0	; () banked
  3211  014C5C  6FB0               	movwf	printf@f& (0+255),b
  3212  014C5E  0EFF               	movlw	high (STR_6+7)
  3213  014C60  0100               	movlb	0	; () banked
  3214  014C62  6FB1               	movwf	(printf@f+1)& (0+255),b
  3215  014C64  C0DE  F0B2         	movff	_angle,?_printf+2
  3216  014C68  C0DF  F0B3         	movff	_angle+1,?_printf+3
  3217  014C6C  EC00  F080         	call	_printf	;wreg free
  3218                           
  3219                           ;main.c: 274: displaySID();
  3220  014C70  ECD1  F0BE         	call	_displaySID	;wreg free
  3221                           
  3222                           ;main.c: 275: Console_SetForecolour(0xF800);
  3223  014C74  0EF8               	movlw	248
  3224  014C76  0100               	movlb	0	; () banked
  3225  014C78  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3226  014C7A  0E00               	movlw	0
  3227  014C7C  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
  3228  014C7E  EC28  F0C0         	call	_Console_SetForecolour	;wreg free
  3229                           
  3230                           ;main.c: 276: switch (mode) {
  3231  014C82  D00C               	goto	l2109
  3232  014C84                     
  3233                           ;main.c: 278: displayContinuousMode();
  3234  014C84  EC6D  F0AB         	call	_displayContinuousMode	;wreg free
  3235                           
  3236                           ;main.c: 279: break;
  3237  014C88  D01E               	goto	l2111
  3238  014C8A                     
  3239                           ;main.c: 281: displayStepMode();
  3240  014C8A  ECB9  F0B4         	call	_displayStepMode	;wreg free
  3241                           
  3242                           ;main.c: 282: break;
  3243  014C8E  D01B               	goto	l2111
  3244  014C90                     
  3245                           ;main.c: 284: displayPositionMode();
  3246  014C90  ECA6  F09F         	call	_displayPositionMode	;wreg free
  3247                           
  3248                           ;main.c: 285: break;
  3249  014C94  D018               	goto	l2111
  3250  014C96                     
  3251                           ;main.c: 287: displayNullMode();
  3252  014C96  EC21  F0BC         	call	_displayNullMode	;wreg free
  3253                           
  3254                           ;main.c: 289: }
  3255                           
  3256                           ;main.c: 288: break;
  3257  014C9A  D015               	goto	l2111
  3258  014C9C                     l2109:
  3259  014C9C  C02C  F1FA         	movff	_mode,??_main
  3260  014CA0  C02D  F1FB         	movff	_mode+1,??_main+1
  3261                           
  3262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3263                           ; Switch size 1, requested type "space"
  3264                           ; Number of cases is 1, Range of values is 0 to 0
  3265                           ; switch strategies available:
  3266                           ; Name         Instructions Cycles
  3267                           ; simple_byte            4     3 (average)
  3268                           ;	Chosen strategy is simple_byte
  3269  014CA4  0101               	movlb	1	; () banked
  3270  014CA6  51FB               	movf	(??_main+1)& (0+255),w,b
  3271  014CA8  0A00               	xorlw	0	; case 0
  3272  014CAA  A4D8               	btfss	status,2,c
  3273  014CAC  D7F4               	goto	l2114
  3274                           
  3275                           ; BSR set to: 1
  3276                           ; Switch size 1, requested type "space"
  3277                           ; Number of cases is 3, Range of values is 1 to 3
  3278                           ; switch strategies available:
  3279                           ; Name         Instructions Cycles
  3280                           ; simple_byte           10     6 (average)
  3281                           ;	Chosen strategy is simple_byte
  3282  014CAE  0101               	movlb	1	; () banked
  3283  014CB0  51FA               	movf	??_main& (0+255),w,b
  3284  014CB2  0A01               	xorlw	1	; case 1
  3285  014CB4  B4D8               	btfsc	status,2,c
  3286  014CB6  D7E6               	goto	l2110
  3287  014CB8  0A03               	xorlw	3	; case 2
  3288  014CBA  B4D8               	btfsc	status,2,c
  3289  014CBC  D7E6               	goto	l2112
  3290  014CBE  0A01               	xorlw	1	; case 3
  3291  014CC0  B4D8               	btfsc	status,2,c
  3292  014CC2  D7E6               	goto	l2113
  3293  014CC4  D7E8               	goto	l2114
  3294  014CC6                     l2111:
  3295                           
  3296                           ;main.c: 290: Console_Render();
  3297                           
  3298                           ; BSR set to: 1
  3299  014CC6  ECAB  F097         	call	_Console_Render	;wreg free
  3300                           
  3301                           ;main.c: 291: HMI_SetNumber(IRDistance);
  3302  014CCA  C121  F071         	movff	_IRDistance,HMI_SetNumber@pInput
  3303  014CCE  C122  F072         	movff	_IRDistance+1,HMI_SetNumber@pInput+1
  3304  014CD2  EC4D  F0BE         	call	_HMI_SetNumber	;wreg free
  3305                           
  3306                           ;main.c: 292: HMI_Render();
  3307  014CD6  ECDF  F0BC         	call	_HMI_Render	;wreg free
  3308                           
  3309                           ;main.c: 293: if (MXK_Release())
  3310  014CDA  EC4A  F0BF         	call	_MXK_Release	;wreg free
  3311  014CDE  0900               	iorlw	0
  3312  014CE0  A4D8               	btfss	status,2,c
  3313                           
  3314                           ;main.c: 294: MXK_Dequeue();
  3315  014CE2  EC82  F0BC         	call	_MXK_Dequeue	;wreg free
  3316  014CE6                     l2115:
  3317                           
  3318                           ;main.c: 295: }
  3319                           ;main.c: 298: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  3320  014CE6  0E08               	movlw	8
  3321  014CE8  ECA1  F0BC         	call	_MXK_BlockSwitchTo
  3322  014CEC  0900               	iorlw	0
  3323  014CEE  A4D8               	btfss	status,2,c
  3324  014CF0  D00D               	goto	l2117
  3325  014CF2  D79B               	goto	l2107
  3326  014CF4                     
  3327                           ;main.c: 301: nullMode();
  3328  014CF4  EC02  F00A         	call	_nullMode	;wreg free
  3329                           
  3330                           ;main.c: 302: break;
  3331  014CF8  D020               	goto	l2119
  3332  014CFA                     
  3333                           ;main.c: 304: continuousMode();
  3334  014CFA  ECBE  F0BD         	call	_continuousMode	;wreg free
  3335                           
  3336                           ;main.c: 305: break;
  3337  014CFE  D01D               	goto	l2119
  3338  014D00                     
  3339                           ;main.c: 307: stepMode();
  3340  014D00  EC64  F0B9         	call	_stepMode	;wreg free
  3341                           
  3342                           ;main.c: 308: break;
  3343  014D04  D01A               	goto	l2119
  3344  014D06                     
  3345                           ;main.c: 310: positionMode();
  3346  014D06  ECD3  F0AB         	call	_positionMode	;wreg free
  3347                           
  3348                           ;main.c: 312: }
  3349                           
  3350                           ;main.c: 311: break;
  3351  014D0A  D017               	goto	l2119
  3352  014D0C                     l2117:
  3353  014D0C  C02C  F1FA         	movff	_mode,??_main
  3354  014D10  C02D  F1FB         	movff	_mode+1,??_main+1
  3355                           
  3356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3357                           ; Switch size 1, requested type "space"
  3358                           ; Number of cases is 1, Range of values is 0 to 0
  3359                           ; switch strategies available:
  3360                           ; Name         Instructions Cycles
  3361                           ; simple_byte            4     3 (average)
  3362                           ;	Chosen strategy is simple_byte
  3363  014D14  0101               	movlb	1	; () banked
  3364  014D16  51FB               	movf	(??_main+1)& (0+255),w,b
  3365  014D18  0A00               	xorlw	0	; case 0
  3366  014D1A  A4D8               	btfss	status,2,c
  3367  014D1C  D00E               	goto	l2119
  3368                           
  3369                           ; BSR set to: 1
  3370                           ; Switch size 1, requested type "space"
  3371                           ; Number of cases is 4, Range of values is 0 to 3
  3372                           ; switch strategies available:
  3373                           ; Name         Instructions Cycles
  3374                           ; simple_byte           13     7 (average)
  3375                           ;	Chosen strategy is simple_byte
  3376  014D1E  0101               	movlb	1	; () banked
  3377  014D20  51FA               	movf	??_main& (0+255),w,b
  3378  014D22  0A00               	xorlw	0	; case 0
  3379  014D24  B4D8               	btfsc	status,2,c
  3380  014D26  D7E6               	goto	l2118
  3381  014D28  0A01               	xorlw	1	; case 1
  3382  014D2A  B4D8               	btfsc	status,2,c
  3383  014D2C  D7E6               	goto	l2120
  3384  014D2E  0A03               	xorlw	3	; case 2
  3385  014D30  B4D8               	btfsc	status,2,c
  3386  014D32  D7E6               	goto	l2121
  3387  014D34  0A01               	xorlw	1	; case 3
  3388  014D36  B4D8               	btfsc	status,2,c
  3389  014D38  D7E6               	goto	l2122
  3390  014D3A                     l2119:
  3391                           
  3392                           ;main.c: 313: if (MXK_Release())
  3393                           
  3394                           ; BSR set to: 1
  3395  014D3A  EC4A  F0BF         	call	_MXK_Release	;wreg free
  3396  014D3E  0900               	iorlw	0
  3397  014D40  B4D8               	btfsc	status,2,c
  3398  014D42  D773               	goto	l2107
  3399                           
  3400                           ;main.c: 314: MXK_Dequeue();
  3401  014D44  EC82  F0BC         	call	_MXK_Dequeue	;wreg free
  3402                           
  3403                           ;main.c: 315: }
  3404                           ;main.c: 316: }
  3405  014D48  D770               	goto	l2107
  3406  014D4A                     __end_of_main:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           postinc0	equ	0xFEE
  3413                           wreg	equ	0xFE8
  3414                           postdec1	equ	0xFE5
  3415                           fsr1h	equ	0xFE2
  3416                           fsr1l	equ	0xFE1
  3417                           status	equ	0xFD8
  3418                           
  3419 ;; *************** function _stepMode *****************
  3420 ;; Defined at:
  3421 ;;		line 233 in file "main.c"
  3422 ;; Parameters:    Size  Location     Type
  3423 ;;		None
  3424 ;; Auto vars:     Size  Location     Type
  3425 ;;		None
  3426 ;; Return value:  Size  Location     Type
  3427 ;;                  1    wreg      void 
  3428 ;; Registers used:
  3429 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3430 ;; Tracked objects:
  3431 ;;		On entry : 0/0
  3432 ;;		On exit  : 0/0
  3433 ;;		Unchanged: 0/0
  3434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;Total ram usage:        0 bytes
  3440 ;; Hardware stack levels used:    1
  3441 ;; Hardware stack levels required when called:   10
  3442 ;; This function calls:
  3443 ;;		_Motor_Move
  3444 ;;		_Motor_Speed
  3445 ;; This function is called by:
  3446 ;;		_main
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text1
  3451  0172C8                     __ptext1:
  3452                           	opt stack 0
  3453  0172C8                     _stepMode:
  3454                           	opt stack 20
  3455                           
  3456                           ;main.c: 238: if (downState && Stepper.mDelta == 0) {
  3457                           
  3458                           ;incstack = 0
  3459  0172C8  0100               	movlb	0	; () banked
  3460  0172CA  51F2               	movf	_downState& (0+255),w,b
  3461  0172CC  B4D8               	btfsc	status,2,c
  3462  0172CE  D021               	goto	l2095
  3463                           
  3464                           ; BSR set to: 0
  3465  0172D0  5041               	movf	_Stepper,w,c
  3466  0172D2  1042               	iorwf	_Stepper+1,w,c
  3467  0172D4  A4D8               	btfss	status,2,c
  3468  0172D6  D01D               	goto	l2095
  3469                           
  3470                           ; BSR set to: 0
  3471                           ;main.c: 239: Motor_Speed(&Stepper, (1*1000L));
  3472  0172D8  0E41               	movlw	low _Stepper
  3473  0172DA  0100               	movlb	0	; () banked
  3474  0172DC  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3475  0172DE  0E00               	movlw	high _Stepper
  3476  0172E0  0100               	movlb	0	; () banked
  3477  0172E2  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3478  0172E4  0E03               	movlw	3
  3479  0172E6  0100               	movlb	0	; () banked
  3480  0172E8  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3481  0172EA  0EE8               	movlw	232
  3482  0172EC  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3483  0172EE  EC62  F0BE         	call	_Motor_Speed	;wreg free
  3484                           
  3485                           ;main.c: 240: Motor_Move(&Stepper, steps);
  3486  0172F2  0E41               	movlw	low _Stepper
  3487  0172F4  0100               	movlb	0	; () banked
  3488  0172F6  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3489  0172F8  0E00               	movlw	high _Stepper
  3490  0172FA  0100               	movlb	0	; () banked
  3491  0172FC  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3492  0172FE  C0E0  F065         	movff	_steps,Motor_Move@pDelta
  3493  017302  C0E1  F066         	movff	_steps+1,Motor_Move@pDelta+1
  3494  017306  EC1C  F0BD         	call	_Motor_Move	;wreg free
  3495                           
  3496                           ;main.c: 241: remainingSteps = steps;
  3497  01730A  C0E0  F11F         	movff	_steps,_remainingSteps
  3498  01730E  C0E1  F120         	movff	_steps+1,_remainingSteps+1
  3499  017312                     l2095:
  3500                           
  3501                           ;main.c: 242: }
  3502                           ;main.c: 243: if (Stepper.mDelta != 0) {
  3503  017312  5041               	movf	_Stepper,w,c
  3504  017314  1042               	iorwf	_Stepper+1,w,c
  3505  017316  B4D8               	btfsc	status,2,c
  3506  017318  0012               	return	
  3507                           
  3508                           ;main.c: 244: remainingSteps--;
  3509  01731A  0101               	movlb	1	; () banked
  3510  01731C  071F               	decf	_remainingSteps& (0+255),f,b
  3511  01731E  A0D8               	btfss	status,0,c
  3512  017320  0720               	decf	(_remainingSteps+1)& (0+255),f,b
  3513  017322  0012               	return	
  3514  017324                     __end_of_stepMode:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           tblptrh	equ	0xFF7
  3518                           tblptrl	equ	0xFF6
  3519                           tablat	equ	0xFF5
  3520                           postinc0	equ	0xFEE
  3521                           wreg	equ	0xFE8
  3522                           postdec1	equ	0xFE5
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           status	equ	0xFD8
  3526                           
  3527 ;; *************** function _positionMode *****************
  3528 ;; Defined at:
  3529 ;;		line 250 in file "main.c"
  3530 ;; Parameters:    Size  Location     Type
  3531 ;;		None
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  1    wreg      void 
  3536 ;; Registers used:
  3537 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;Total ram usage:        2 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:   10
  3550 ;; This function calls:
  3551 ;;		_Motor_Move
  3552 ;;		_Motor_Speed
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           	psect	text2
  3559  0157A6                     __ptext2:
  3560                           	opt stack 0
  3561  0157A6                     _positionMode:
  3562                           	opt stack 20
  3563                           
  3564                           ;main.c: 251: diff = angle - currentPos;
  3565                           
  3566                           ;incstack = 0
  3567  0157A6  C1F6  F07F         	movff	_currentPos,??_positionMode
  3568  0157AA  C1F7  F080         	movff	_currentPos+1,??_positionMode+1
  3569  0157AE  0100               	movlb	0	; () banked
  3570  0157B0  1F7F               	comf	??_positionMode& (0+255),f,b
  3571  0157B2  1F80               	comf	(??_positionMode+1)& (0+255),f,b
  3572  0157B4  4B7F               	infsnz	??_positionMode& (0+255),f,b
  3573  0157B6  2B80               	incf	(??_positionMode+1)& (0+255),f,b
  3574  0157B8  0100               	movlb	0	; () banked
  3575  0157BA  51DE               	movf	_angle& (0+255),w,b
  3576  0157BC  0100               	movlb	0	; () banked
  3577  0157BE  257F               	addwf	??_positionMode& (0+255),w,b
  3578  0157C0  0100               	movlb	0	; () banked
  3579  0157C2  6FE4               	movwf	_diff& (0+255),b
  3580  0157C4  0100               	movlb	0	; () banked
  3581  0157C6  51DF               	movf	(_angle+1)& (0+255),w,b
  3582  0157C8  0100               	movlb	0	; () banked
  3583  0157CA  2180               	addwfc	(??_positionMode+1)& (0+255),w,b
  3584  0157CC  0100               	movlb	0	; () banked
  3585  0157CE  6FE5               	movwf	(_diff+1)& (0+255),b
  3586                           
  3587                           ;main.c: 252: if (Stepper.mDelta == 0 && diff > 0) {
  3588  0157D0  5041               	movf	_Stepper,w,c
  3589  0157D2  1042               	iorwf	_Stepper+1,w,c
  3590  0157D4  A4D8               	btfss	status,2,c
  3591  0157D6  D027               	goto	l2100
  3592                           
  3593                           ; BSR set to: 0
  3594  0157D8  0100               	movlb	0	; () banked
  3595  0157DA  BFE5               	btfsc	(_diff+1)& (0+255),7,b
  3596  0157DC  D024               	goto	l2100
  3597  0157DE  0100               	movlb	0	; () banked
  3598  0157E0  51E5               	movf	(_diff+1)& (0+255),w,b
  3599  0157E2  E104               	bnz	u14320
  3600  0157E4  0100               	movlb	0	; () banked
  3601  0157E6  05E4               	decf	_diff& (0+255),w,b
  3602  0157E8  A0D8               	btfss	status,0,c
  3603  0157EA  D01D               	goto	l2100
  3604  0157EC                     u14320:
  3605                           
  3606                           ; BSR set to: 0
  3607                           ;main.c: 253: Motor_Speed(&Stepper, (1*1000L));
  3608  0157EC  0E41               	movlw	low _Stepper
  3609  0157EE  0100               	movlb	0	; () banked
  3610  0157F0  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3611  0157F2  0E00               	movlw	high _Stepper
  3612  0157F4  0100               	movlb	0	; () banked
  3613  0157F6  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3614  0157F8  0E03               	movlw	3
  3615  0157FA  0100               	movlb	0	; () banked
  3616  0157FC  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3617  0157FE  0EE8               	movlw	232
  3618  015800  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3619  015802  EC62  F0BE         	call	_Motor_Speed	;wreg free
  3620                           
  3621                           ;main.c: 254: Motor_Move(&Stepper, diff);
  3622  015806  0E41               	movlw	low _Stepper
  3623  015808  0100               	movlb	0	; () banked
  3624  01580A  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3625  01580C  0E00               	movlw	high _Stepper
  3626  01580E  0100               	movlb	0	; () banked
  3627  015810  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3628  015812  C0E4  F065         	movff	_diff,Motor_Move@pDelta
  3629  015816  C0E5  F066         	movff	_diff+1,Motor_Move@pDelta+1
  3630  01581A  EC1C  F0BD         	call	_Motor_Move	;wreg free
  3631                           
  3632                           ;main.c: 255: currentPos--;
  3633  01581E  0101               	movlb	1	; () banked
  3634  015820  07F6               	decf	_currentPos& (0+255),f,b
  3635  015822  A0D8               	btfss	status,0,c
  3636  015824  07F7               	decf	(_currentPos+1)& (0+255),f,b
  3637  015826                     l2100:
  3638                           
  3639                           ;main.c: 256: }
  3640                           ;main.c: 257: if (Stepper.mDelta == 0 && diff < 0) {
  3641                           
  3642                           ; BSR set to: 1
  3643  015826  5041               	movf	_Stepper,w,c
  3644  015828  1042               	iorwf	_Stepper+1,w,c
  3645  01582A  A4D8               	btfss	status,2,c
  3646  01582C  0012               	return	
  3647  01582E  0100               	movlb	0	; () banked
  3648  015830  AFE5               	btfss	(_diff+1)& (0+255),7,b
  3649  015832  0012               	return	
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;main.c: 258: Motor_Speed(&Stepper, (1*1000L));
  3653  015834  0E41               	movlw	low _Stepper
  3654  015836  0100               	movlb	0	; () banked
  3655  015838  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3656  01583A  0E00               	movlw	high _Stepper
  3657  01583C  0100               	movlb	0	; () banked
  3658  01583E  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3659  015840  0E03               	movlw	3
  3660  015842  0100               	movlb	0	; () banked
  3661  015844  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3662  015846  0EE8               	movlw	232
  3663  015848  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3664  01584A  EC62  F0BE         	call	_Motor_Speed	;wreg free
  3665                           
  3666                           ;main.c: 259: Motor_Move(&Stepper, diff);
  3667  01584E  0E41               	movlw	low _Stepper
  3668  015850  0100               	movlb	0	; () banked
  3669  015852  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3670  015854  0E00               	movlw	high _Stepper
  3671  015856  0100               	movlb	0	; () banked
  3672  015858  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3673  01585A  C0E4  F065         	movff	_diff,Motor_Move@pDelta
  3674  01585E  C0E5  F066         	movff	_diff+1,Motor_Move@pDelta+1
  3675  015862  EC1C  F0BD         	call	_Motor_Move	;wreg free
  3676                           
  3677                           ;main.c: 260: currentPos++;
  3678  015866  0101               	movlb	1	; () banked
  3679  015868  4BF6               	infsnz	_currentPos& (0+255),f,b
  3680  01586A  2BF7               	incf	(_currentPos+1)& (0+255),f,b
  3681  01586C  0012               	return	
  3682  01586E                     __end_of_positionMode:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           postinc0	equ	0xFEE
  3689                           wreg	equ	0xFE8
  3690                           postdec1	equ	0xFE5
  3691                           fsr1h	equ	0xFE2
  3692                           fsr1l	equ	0xFE1
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function _nullMode *****************
  3696 ;; Defined at:
  3697 ;;		line 220 in file "main.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;		None
  3700 ;; Auto vars:     Size  Location     Type
  3701 ;;		None
  3702 ;; Return value:  Size  Location     Type
  3703 ;;                  1    wreg      void 
  3704 ;; Registers used:
  3705 ;;		None
  3706 ;; Tracked objects:
  3707 ;;		On entry : 0/0
  3708 ;;		On exit  : 0/0
  3709 ;;		Unchanged: 0/0
  3710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;Total ram usage:        0 bytes
  3716 ;; Hardware stack levels used:    1
  3717 ;; Hardware stack levels required when called:    7
  3718 ;; This function calls:
  3719 ;;		Nothing
  3720 ;; This function is called by:
  3721 ;;		_main
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	text3
  3726  001404                     __ptext3:
  3727                           	opt stack 0
  3728  001404                     _nullMode:
  3729                           	opt stack 23
  3730                           
  3731                           ;incstack = 0
  3732  001404  0012               	return		;funcret
  3733  001406                     __end_of_nullMode:
  3734                           	opt stack 0
  3735                           tblptru	equ	0xFF8
  3736                           tblptrh	equ	0xFF7
  3737                           tblptrl	equ	0xFF6
  3738                           tablat	equ	0xFF5
  3739                           postinc0	equ	0xFEE
  3740                           wreg	equ	0xFE8
  3741                           postdec1	equ	0xFE5
  3742                           fsr1h	equ	0xFE2
  3743                           fsr1l	equ	0xFE1
  3744                           status	equ	0xFD8
  3745                           
  3746 ;; *************** function _inputVar *****************
  3747 ;; Defined at:
  3748 ;;		line 94 in file "main.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;Total ram usage:        1 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:   16
  3769 ;; This function calls:
  3770 ;;		_FunctADC
  3771 ;;		_HMI_DIPSwitch
  3772 ;;		_HMI_DownSwitch
  3773 ;;		_HMI_LeftSwitch
  3774 ;;		_HMI_Poll
  3775 ;;		_HMI_RightSwitch
  3776 ;;		_HMI_UpSwitch
  3777 ;;		_MXK_DIPSwitch
  3778 ;;		_MXK_TestButton
  3779 ;; This function is called by:
  3780 ;;		_main
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text4
  3785  015D94                     __ptext4:
  3786                           	opt stack 0
  3787  015D94                     _inputVar:
  3788                           	opt stack 14
  3789                           
  3790                           ;main.c: 95: FunctADC();
  3791                           
  3792                           ;incstack = 0
  3793  015D94  ECD1  F0BF         	call	_FunctADC	;wreg free
  3794                           
  3795                           ;main.c: 96: HMI_Poll();
  3796  015D98  EC73  F0B6         	call	_HMI_Poll	;wreg free
  3797                           
  3798                           ;main.c: 99: dip = DIPSwitch.mGetState();
  3799  015D9C  EE21  F07E         	lfsr	2,_DIPSwitch+7
  3800  015DA0  D801               	call	u14118
  3801  015DA2  D00A               	goto	u14119
  3802  015DA4                     u14118:
  3803  015DA4  0005               	push	
  3804  015DA6  6EFA               	movwf	pclath,c
  3805  015DA8  50DE               	movf	postinc2,w,c
  3806  015DAA  6EFD               	movwf	tosl,c
  3807  015DAC  50DE               	movf	postinc2,w,c
  3808  015DAE  6EFE               	movwf	tosh,c
  3809  015DB0  50DE               	movf	postinc2,w,c
  3810  015DB2  6EFF               	movwf	tosu,c
  3811  015DB4  50FA               	movf	pclath,w,c
  3812  015DB6  0012               	return		;indir
  3813  015DB8                     u14119:
  3814  015DB8  0100               	movlb	0	; () banked
  3815  015DBA  6F84               	movwf	??_inputVar& (0+255),b
  3816  015DBC  0100               	movlb	0	; () banked
  3817  015DBE  5184               	movf	??_inputVar& (0+255),w,b
  3818  015DC0  0101               	movlb	1	; () banked
  3819  015DC2  6F23               	movwf	_dip& (0+255),b
  3820  015DC4  6B24               	clrf	(_dip+1)& (0+255),b
  3821                           
  3822                           ; BSR set to: 1
  3823                           ;main.c: 102: upState = HMIBoard.mUp.mGetState();
  3824  015DC6  EE21  F04A         	lfsr	2,_HMIBoard+35
  3825  015DCA  D801               	call	u14128
  3826  015DCC  D00A               	goto	u14129
  3827  015DCE                     u14128:
  3828  015DCE  0005               	push	
  3829  015DD0  6EFA               	movwf	pclath,c
  3830  015DD2  50DE               	movf	postinc2,w,c
  3831  015DD4  6EFD               	movwf	tosl,c
  3832  015DD6  50DE               	movf	postinc2,w,c
  3833  015DD8  6EFE               	movwf	tosh,c
  3834  015DDA  50DE               	movf	postinc2,w,c
  3835  015DDC  6EFF               	movwf	tosu,c
  3836  015DDE  50FA               	movf	pclath,w,c
  3837  015DE0  0012               	return		;indir
  3838  015DE2                     u14129:
  3839  015DE2  0100               	movlb	0	; () banked
  3840  015DE4  6FF3               	movwf	_upState& (0+255),b
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;main.c: 103: downState = HMIBoard.mDown.mGetState();
  3844  015DE6  EE21  F054         	lfsr	2,_HMIBoard+45
  3845  015DEA  D801               	call	u14138
  3846  015DEC  D00A               	goto	u14139
  3847  015DEE                     u14138:
  3848  015DEE  0005               	push	
  3849  015DF0  6EFA               	movwf	pclath,c
  3850  015DF2  50DE               	movf	postinc2,w,c
  3851  015DF4  6EFD               	movwf	tosl,c
  3852  015DF6  50DE               	movf	postinc2,w,c
  3853  015DF8  6EFE               	movwf	tosh,c
  3854  015DFA  50DE               	movf	postinc2,w,c
  3855  015DFC  6EFF               	movwf	tosu,c
  3856  015DFE  50FA               	movf	pclath,w,c
  3857  015E00  0012               	return		;indir
  3858  015E02                     u14139:
  3859  015E02  0100               	movlb	0	; () banked
  3860  015E04  6FF2               	movwf	_downState& (0+255),b
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;main.c: 104: leftState = HMIBoard.mLeft.mGetState();
  3864  015E06  EE21  F040         	lfsr	2,_HMIBoard+25
  3865  015E0A  D801               	call	u14148
  3866  015E0C  D00A               	goto	u14149
  3867  015E0E                     u14148:
  3868  015E0E  0005               	push	
  3869  015E10  6EFA               	movwf	pclath,c
  3870  015E12  50DE               	movf	postinc2,w,c
  3871  015E14  6EFD               	movwf	tosl,c
  3872  015E16  50DE               	movf	postinc2,w,c
  3873  015E18  6EFE               	movwf	tosh,c
  3874  015E1A  50DE               	movf	postinc2,w,c
  3875  015E1C  6EFF               	movwf	tosu,c
  3876  015E1E  50FA               	movf	pclath,w,c
  3877  015E20  0012               	return		;indir
  3878  015E22                     u14149:
  3879  015E22  0100               	movlb	0	; () banked
  3880  015E24  6FF1               	movwf	_leftState& (0+255),b
  3881                           
  3882                           ; BSR set to: 0
  3883                           ;main.c: 105: rightState = HMIBoard.mRight.mGetState();
  3884  015E26  EE21  F036         	lfsr	2,_HMIBoard+15
  3885  015E2A  D801               	call	u14158
  3886  015E2C  D00A               	goto	u14159
  3887  015E2E                     u14158:
  3888  015E2E  0005               	push	
  3889  015E30  6EFA               	movwf	pclath,c
  3890  015E32  50DE               	movf	postinc2,w,c
  3891  015E34  6EFD               	movwf	tosl,c
  3892  015E36  50DE               	movf	postinc2,w,c
  3893  015E38  6EFE               	movwf	tosh,c
  3894  015E3A  50DE               	movf	postinc2,w,c
  3895  015E3C  6EFF               	movwf	tosu,c
  3896  015E3E  50FA               	movf	pclath,w,c
  3897  015E40  0012               	return		;indir
  3898  015E42                     u14159:
  3899  015E42  0100               	movlb	0	; () banked
  3900  015E44  6FF0               	movwf	_rightState& (0+255),b
  3901                           
  3902                           ; BSR set to: 0
  3903  015E46  0012               	return		;funcret
  3904  015E48                     __end_of_inputVar:
  3905                           	opt stack 0
  3906                           tosu	equ	0xFFF
  3907                           tosh	equ	0xFFE
  3908                           tosl	equ	0xFFD
  3909                           pclath	equ	0xFFA
  3910                           tblptru	equ	0xFF8
  3911                           tblptrh	equ	0xFF7
  3912                           tblptrl	equ	0xFF6
  3913                           tablat	equ	0xFF5
  3914                           postinc0	equ	0xFEE
  3915                           wreg	equ	0xFE8
  3916                           postdec1	equ	0xFE5
  3917                           fsr1h	equ	0xFE2
  3918                           fsr1l	equ	0xFE1
  3919                           postinc2	equ	0xFDE
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _HMI_Poll *****************
  3923 ;; Defined at:
  3924 ;;		line 252 in file "HMI.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      void 
  3931 ;; Registers used:
  3932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;Total ram usage:        0 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:   15
  3945 ;; This function calls:
  3946 ;;		_Button_Poll
  3947 ;; This function is called by:
  3948 ;;		_inputVar
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text5
  3953  016CE6                     __ptext5:
  3954                           	opt stack 0
  3955  016CE6                     _HMI_Poll:
  3956                           	opt stack 14
  3957                           
  3958                           ;HMI.c: 254: TRISE = 0xFC;
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;incstack = 0
  3962  016CE6  0EFC               	movlw	252
  3963  016CE8  6E96               	movwf	3990,c	;volatile
  3964                           
  3965                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  3966  016CEA  0E57               	movlw	low (_HMIBoard+48)
  3967  016CEC  0100               	movlb	0	; () banked
  3968  016CEE  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  3969  016CF0  0E01               	movlw	high (_HMIBoard+48)
  3970  016CF2  0100               	movlb	0	; () banked
  3971  016CF4  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  3972  016CF6  0E01               	movlw	1
  3973  016CF8  0100               	movlb	0	; () banked
  3974  016CFA  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  3975  016CFC  EC6D  F0A3         	call	_Button_Poll	;wreg free
  3976                           
  3977                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  3978  016D00  0E39               	movlw	low (_HMIBoard+18)
  3979  016D02  0100               	movlb	0	; () banked
  3980  016D04  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  3981  016D06  0E01               	movlw	high (_HMIBoard+18)
  3982  016D08  0100               	movlb	0	; () banked
  3983  016D0A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  3984  016D0C  0E01               	movlw	1
  3985  016D0E  0100               	movlb	0	; () banked
  3986  016D10  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  3987  016D12  EC6D  F0A3         	call	_Button_Poll	;wreg free
  3988                           
  3989                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  3990  016D16  0E2F               	movlw	low (_HMIBoard+8)
  3991  016D18  0100               	movlb	0	; () banked
  3992  016D1A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  3993  016D1C  0E01               	movlw	high (_HMIBoard+8)
  3994  016D1E  0100               	movlb	0	; () banked
  3995  016D20  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  3996  016D22  0E01               	movlw	1
  3997  016D24  0100               	movlb	0	; () banked
  3998  016D26  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  3999  016D28  EC6D  F0A3         	call	_Button_Poll	;wreg free
  4000                           
  4001                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  4002  016D2C  0E43               	movlw	low (_HMIBoard+28)
  4003  016D2E  0100               	movlb	0	; () banked
  4004  016D30  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  4005  016D32  0E01               	movlw	high (_HMIBoard+28)
  4006  016D34  0100               	movlb	0	; () banked
  4007  016D36  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  4008  016D38  0E01               	movlw	1
  4009  016D3A  0100               	movlb	0	; () banked
  4010  016D3C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  4011  016D3E  EC6D  F0A3         	call	_Button_Poll	;wreg free
  4012                           
  4013                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  4014  016D42  0E4D               	movlw	low (_HMIBoard+38)
  4015  016D44  0100               	movlb	0	; () banked
  4016  016D46  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  4017  016D48  0E01               	movlw	high (_HMIBoard+38)
  4018  016D4A  0100               	movlb	0	; () banked
  4019  016D4C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  4020  016D4E  0E01               	movlw	1
  4021  016D50  0100               	movlb	0	; () banked
  4022  016D52  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  4023  016D54  EC6D  F0A3         	call	_Button_Poll	;wreg free
  4024  016D58  0012               	return		;funcret
  4025  016D5A                     __end_of_HMI_Poll:
  4026                           	opt stack 0
  4027                           tosu	equ	0xFFF
  4028                           tosh	equ	0xFFE
  4029                           tosl	equ	0xFFD
  4030                           pclath	equ	0xFFA
  4031                           tblptru	equ	0xFF8
  4032                           tblptrh	equ	0xFF7
  4033                           tblptrl	equ	0xFF6
  4034                           tablat	equ	0xFF5
  4035                           postinc0	equ	0xFEE
  4036                           wreg	equ	0xFE8
  4037                           postdec1	equ	0xFE5
  4038                           fsr1h	equ	0xFE2
  4039                           fsr1l	equ	0xFE1
  4040                           postinc2	equ	0xFDE
  4041                           status	equ	0xFD8
  4042                           
  4043 ;; *************** function _Button_Poll *****************
  4044 ;; Defined at:
  4045 ;;		line 57 in file "Library/Button.c"
  4046 ;; Parameters:    Size  Location     Type
  4047 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  4048 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  4049 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  4050 ;; Auto vars:     Size  Location     Type
  4051 ;;  Pin             1   35[BANK0 ] unsigned char 
  4052 ;; Return value:  Size  Location     Type
  4053 ;;                  1    wreg      unsigned char 
  4054 ;; Registers used:
  4055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4056 ;; Tracked objects:
  4057 ;;		On entry : 0/0
  4058 ;;		On exit  : 0/0
  4059 ;;		Unchanged: 0/0
  4060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4061 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4062 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;Total ram usage:        9 bytes
  4066 ;; Hardware stack levels used:    1
  4067 ;; Hardware stack levels required when called:   14
  4068 ;; This function calls:
  4069 ;;		_Event_DIPSwitch
  4070 ;;		_Event_NULL
  4071 ;;		_Event_TestButton
  4072 ;;		_HMI_DIPSwitch
  4073 ;;		_HMI_DownSwitch
  4074 ;;		_HMI_LeftSwitch
  4075 ;;		_HMI_RightSwitch
  4076 ;;		_HMI_UpSwitch
  4077 ;;		_MXK_DIPSwitch
  4078 ;;		_MXK_TestButton
  4079 ;; This function is called by:
  4080 ;;		_HMI_Poll
  4081 ;;		_MXK_Poll
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text6
  4086  0146DA                     __ptext6:
  4087                           	opt stack 0
  4088  0146DA                     _Button_Poll:
  4089                           	opt stack 14
  4090                           
  4091                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  4092                           
  4093                           ;incstack = 0
  4094  0146DA  0100               	movlb	0	; () banked
  4095  0146DC  EE20 F007          	lfsr	2,7
  4096  0146E0  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4097  0146E2  26D9               	addwf	fsr2l,f,c
  4098  0146E4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4099  0146E6  22DA               	addwfc	fsr2h,f,c
  4100  0146E8  D801               	call	u12438
  4101  0146EA  D00A               	goto	u12439
  4102  0146EC                     u12438:
  4103  0146EC  0005               	push	
  4104  0146EE  6EFA               	movwf	pclath,c
  4105  0146F0  50DE               	movf	postinc2,w,c
  4106  0146F2  6EFD               	movwf	tosl,c
  4107  0146F4  50DE               	movf	postinc2,w,c
  4108  0146F6  6EFE               	movwf	tosh,c
  4109  0146F8  50DE               	movf	postinc2,w,c
  4110  0146FA  6EFF               	movwf	tosu,c
  4111  0146FC  50FA               	movf	pclath,w,c
  4112  0146FE  0012               	return		;indir
  4113  014700                     u12439:
  4114  014700  0100               	movlb	0	; () banked
  4115  014702  6F83               	movwf	Button_Poll@Pin& (0+255),b
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;Button.c: 61: if (pButton->mState == Pin)
  4119  014704  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  4120  014708  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  4121  01470C  0100               	movlb	0	; () banked
  4122  01470E  5183               	movf	Button_Poll@Pin& (0+255),w,b
  4123  014710  18DE               	xorwf	postinc2,w,c
  4124  014712  A4D8               	btfss	status,2,c
  4125  014714  D021               	goto	l11
  4126                           
  4127                           ; BSR set to: 0
  4128                           ;Button.c: 62: {
  4129                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  4130  014716  0100               	movlb	0	; () banked
  4131  014718  EE20 F001          	lfsr	2,1
  4132  01471C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4133  01471E  26D9               	addwf	fsr2l,f,c
  4134  014720  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4135  014722  22DA               	addwfc	fsr2h,f,c
  4136  014724  0100               	movlb	0	; () banked
  4137  014726  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  4138  014728  5CDE               	subwf	postinc2,w,c
  4139  01472A  B0D8               	btfsc	status,0,c
  4140  01472C  D00A               	goto	l12
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;Button.c: 66: pButton->mCount = 0;
  4144  01472E  0100               	movlb	0	; () banked
  4145  014730  EE20 F001          	lfsr	2,1
  4146  014734  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4147  014736  26D9               	addwf	fsr2l,f,c
  4148  014738  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4149  01473A  22DA               	addwfc	fsr2h,f,c
  4150  01473C  0E00               	movlw	0
  4151  01473E  6EDF               	movwf	indf2,c
  4152  014740  0012               	return	
  4153  014742                     l12:
  4154                           
  4155                           ; BSR set to: 0
  4156                           ;Button.c: 67: else
  4157                           ;Button.c: 68: pButton->mCount -= pIncrement;
  4158                           
  4159                           ; BSR set to: 0
  4160  014742  0100               	movlb	0	; () banked
  4161  014744  EE20 F001          	lfsr	2,1
  4162  014748  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4163  01474A  26D9               	addwf	fsr2l,f,c
  4164  01474C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4165  01474E  22DA               	addwfc	fsr2h,f,c
  4166  014750  0100               	movlb	0	; () banked
  4167  014752  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  4168  014754  5EDF               	subwf	indf2,f,c
  4169                           
  4170                           ; BSR set to: 0
  4171                           ;Button.c: 69: }
  4172  014756  0012               	return	
  4173  014758                     l11:
  4174                           
  4175                           ; BSR set to: 0
  4176                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  4177                           
  4178                           ; BSR set to: 0
  4179  014758  0100               	movlb	0	; () banked
  4180  01475A  EE20 F001          	lfsr	2,1
  4181  01475E  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4182  014760  26D9               	addwf	fsr2l,f,c
  4183  014762  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4184  014764  22DA               	addwfc	fsr2h,f,c
  4185  014766  50DF               	movf	indf2,w,c
  4186  014768  0100               	movlb	0	; () banked
  4187  01476A  6F7E               	movwf	??_Button_Poll& (0+255),b
  4188  01476C  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
  4189  01476E  0100               	movlb	0	; () banked
  4190  014770  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  4191  014772  0100               	movlb	0	; () banked
  4192  014774  277E               	addwf	??_Button_Poll& (0+255),f,b
  4193  014776  0E00               	movlw	0
  4194  014778  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  4195  01477A  0100               	movlb	0	; () banked
  4196  01477C  EE20 F001          	lfsr	2,1
  4197  014780  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4198  014782  26D9               	addwf	fsr2l,f,c
  4199  014784  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4200  014786  22DA               	addwfc	fsr2h,f,c
  4201  014788  50DF               	movf	indf2,w,c
  4202  01478A  0100               	movlb	0	; () banked
  4203  01478C  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  4204  01478E  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  4205  014790  0100               	movlb	0	; () banked
  4206  014792  517E               	movf	??_Button_Poll& (0+255),w,b
  4207  014794  0100               	movlb	0	; () banked
  4208  014796  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  4209  014798  0100               	movlb	0	; () banked
  4210  01479A  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
  4211  01479C  0A80               	xorlw	128
  4212  01479E  0100               	movlb	0	; () banked
  4213  0147A0  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
  4214  0147A2  0100               	movlb	0	; () banked
  4215  0147A4  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
  4216  0147A6  0A80               	xorlw	128
  4217  0147A8  0100               	movlb	0	; () banked
  4218  0147AA  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  4219  0147AC  B0D8               	btfsc	status,0,c
  4220  0147AE  0012               	return	
  4221                           
  4222                           ; BSR set to: 0
  4223                           ;Button.c: 73: {
  4224                           ;Button.c: 75: pButton->mCount += pIncrement;
  4225  0147B0  0100               	movlb	0	; () banked
  4226  0147B2  EE20 F001          	lfsr	2,1
  4227  0147B6  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4228  0147B8  26D9               	addwf	fsr2l,f,c
  4229  0147BA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4230  0147BC  22DA               	addwfc	fsr2h,f,c
  4231  0147BE  0100               	movlb	0	; () banked
  4232  0147C0  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  4233  0147C2  26DF               	addwf	indf2,f,c
  4234                           
  4235                           ; BSR set to: 0
  4236                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  4237  0147C4  0100               	movlb	0	; () banked
  4238  0147C6  EE20 F002          	lfsr	2,2
  4239  0147CA  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4240  0147CC  26D9               	addwf	fsr2l,f,c
  4241  0147CE  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4242  0147D0  22DA               	addwfc	fsr2h,f,c
  4243  0147D2  0100               	movlb	0	; () banked
  4244  0147D4  EE10 F001          	lfsr	1,1
  4245  0147D8  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4246  0147DA  26E1               	addwf	fsr1l,f,c
  4247  0147DC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4248  0147DE  22E2               	addwfc	fsr1h,f,c
  4249  0147E0  50E7               	movf	indf1,w,c
  4250  0147E2  0100               	movlb	0	; () banked
  4251  0147E4  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  4252  0147E6  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  4253  0147E8  50DE               	movf	postinc2,w,c
  4254  0147EA  0100               	movlb	0	; () banked
  4255  0147EC  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  4256  0147EE  50DE               	movf	postinc2,w,c
  4257  0147F0  0100               	movlb	0	; () banked
  4258  0147F2  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  4259  0147F4  A0D8               	btfss	status,0,c
  4260  0147F6  0012               	return	
  4261                           
  4262                           ; BSR set to: 0
  4263                           ;Button.c: 77: {
  4264                           ;Button.c: 79: pButton->mState = Pin;
  4265  0147F8  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  4266  0147FC  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  4267  014800  C083  FFDF         	movff	Button_Poll@Pin,indf2
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;Button.c: 80: pButton->mCount = 0;
  4271  014804  0100               	movlb	0	; () banked
  4272  014806  EE20 F001          	lfsr	2,1
  4273  01480A  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4274  01480C  26D9               	addwf	fsr2l,f,c
  4275  01480E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4276  014810  22DA               	addwfc	fsr2h,f,c
  4277  014812  0E00               	movlw	0
  4278  014814  6EDF               	movwf	indf2,c
  4279                           
  4280                           ; BSR set to: 0
  4281                           ;Button.c: 83: pButton->mFunction(Pin);
  4282  014816  0100               	movlb	0	; () banked
  4283  014818  EE20 F004          	lfsr	2,4
  4284  01481C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  4285  01481E  26D9               	addwf	fsr2l,f,c
  4286  014820  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  4287  014822  22DA               	addwfc	fsr2h,f,c
  4288  014824  D801               	call	u12488
  4289  014826  0012               	return	
  4290  014828                     u12488:
  4291  014828  0005               	push	
  4292  01482A  6EFA               	movwf	pclath,c
  4293  01482C  50DE               	movf	postinc2,w,c
  4294  01482E  6EFD               	movwf	tosl,c
  4295  014830  50DE               	movf	postinc2,w,c
  4296  014832  6EFE               	movwf	tosh,c
  4297  014834  50DE               	movf	postinc2,w,c
  4298  014836  6EFF               	movwf	tosu,c
  4299  014838  50FA               	movf	pclath,w,c
  4300  01483A  0100               	movlb	0	; () banked
  4301  01483C  5183               	movf	Button_Poll@Pin& (0+255),w,b
  4302  01483E  0012               	return		;indir
  4303  014840                     __end_of_Button_Poll:
  4304                           	opt stack 0
  4305                           tosu	equ	0xFFF
  4306                           tosh	equ	0xFFE
  4307                           tosl	equ	0xFFD
  4308                           pclath	equ	0xFFA
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           postinc0	equ	0xFEE
  4314                           wreg	equ	0xFE8
  4315                           indf1	equ	0xFE7
  4316                           postdec1	equ	0xFE5
  4317                           fsr1h	equ	0xFE2
  4318                           fsr1l	equ	0xFE1
  4319                           indf2	equ	0xFDF
  4320                           postinc2	equ	0xFDE
  4321                           fsr2h	equ	0xFDA
  4322                           fsr2l	equ	0xFD9
  4323                           status	equ	0xFD8
  4324                           
  4325 ;; *************** function _MXK_DIPSwitch *****************
  4326 ;; Defined at:
  4327 ;;		line 24 in file "Library/MXK.c"
  4328 ;; Parameters:    Size  Location     Type
  4329 ;;		None
  4330 ;; Auto vars:     Size  Location     Type
  4331 ;;		None
  4332 ;; Return value:  Size  Location     Type
  4333 ;;                  1    wreg      unsigned char 
  4334 ;; Registers used:
  4335 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4336 ;; Tracked objects:
  4337 ;;		On entry : 0/0
  4338 ;;		On exit  : 0/0
  4339 ;;		Unchanged: 0/0
  4340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4341 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4342 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4343 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4344 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4345 ;;Total ram usage:        0 bytes
  4346 ;; Hardware stack levels used:    1
  4347 ;; Hardware stack levels required when called:    8
  4348 ;; This function calls:
  4349 ;;		_Port_GetQuad
  4350 ;; This function is called by:
  4351 ;;		_FunctInitButton
  4352 ;;		_Button_Poll
  4353 ;;		_inputVar
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text7
  4358  017EE6                     __ptext7:
  4359                           	opt stack 0
  4360  017EE6                     _MXK_DIPSwitch:
  4361                           	opt stack 21
  4362                           
  4363                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  4364                           
  4365                           ;incstack = 0
  4366  017EE6  0E9F               	movlw	low _PortD
  4367  017EE8  0100               	movlb	0	; () banked
  4368  017EEA  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  4369  017EEC  0E01               	movlw	high _PortD
  4370  017EEE  0100               	movlb	0	; () banked
  4371  017EF0  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  4372  017EF2  0E00               	movlw	0
  4373  017EF4  0100               	movlb	0	; () banked
  4374  017EF6  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  4375  017EF8  ECE2  F0BA         	call	_Port_GetQuad
  4376  017EFC  0012               	return	
  4377  017EFE                     __end_of_MXK_DIPSwitch:
  4378                           	opt stack 0
  4379                           tosu	equ	0xFFF
  4380                           tosh	equ	0xFFE
  4381                           tosl	equ	0xFFD
  4382                           pclath	equ	0xFFA
  4383                           tblptru	equ	0xFF8
  4384                           tblptrh	equ	0xFF7
  4385                           tblptrl	equ	0xFF6
  4386                           tablat	equ	0xFF5
  4387                           postinc0	equ	0xFEE
  4388                           wreg	equ	0xFE8
  4389                           indf1	equ	0xFE7
  4390                           postdec1	equ	0xFE5
  4391                           fsr1h	equ	0xFE2
  4392                           fsr1l	equ	0xFE1
  4393                           indf2	equ	0xFDF
  4394                           postinc2	equ	0xFDE
  4395                           fsr2h	equ	0xFDA
  4396                           fsr2l	equ	0xFD9
  4397                           status	equ	0xFD8
  4398                           
  4399 ;; *************** function _HMI_DIPSwitch *****************
  4400 ;; Defined at:
  4401 ;;		line 47 in file "HMI.c"
  4402 ;; Parameters:    Size  Location     Type
  4403 ;;		None
  4404 ;; Auto vars:     Size  Location     Type
  4405 ;;		None
  4406 ;; Return value:  Size  Location     Type
  4407 ;;                  1    wreg      unsigned char 
  4408 ;; Registers used:
  4409 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4410 ;; Tracked objects:
  4411 ;;		On entry : 0/0
  4412 ;;		On exit  : 0/0
  4413 ;;		Unchanged: 0/0
  4414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4415 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4419 ;;Total ram usage:        0 bytes
  4420 ;; Hardware stack levels used:    1
  4421 ;; Hardware stack levels required when called:    8
  4422 ;; This function calls:
  4423 ;;		_Port_GetQuad
  4424 ;; This function is called by:
  4425 ;;		_HMI_Init
  4426 ;;		_Button_Poll
  4427 ;;		_inputVar
  4428 ;; This function uses a non-reentrant model
  4429 ;;
  4430                           
  4431                           	psect	text8
  4432  017EFE                     __ptext8:
  4433                           	opt stack 0
  4434  017EFE                     _HMI_DIPSwitch:
  4435                           	opt stack 19
  4436                           
  4437                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  4438                           
  4439                           ;incstack = 0
  4440  017EFE  0E95               	movlw	low _PortE
  4441  017F00  0100               	movlb	0	; () banked
  4442  017F02  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  4443  017F04  0E01               	movlw	high _PortE
  4444  017F06  0100               	movlb	0	; () banked
  4445  017F08  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  4446  017F0A  0E00               	movlw	0
  4447  017F0C  0100               	movlb	0	; () banked
  4448  017F0E  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  4449  017F10  ECE2  F0BA         	call	_Port_GetQuad	;wreg free
  4450  017F14  0012               	return	
  4451  017F16                     __end_of_HMI_DIPSwitch:
  4452                           	opt stack 0
  4453                           tosu	equ	0xFFF
  4454                           tosh	equ	0xFFE
  4455                           tosl	equ	0xFFD
  4456                           pclath	equ	0xFFA
  4457                           tblptru	equ	0xFF8
  4458                           tblptrh	equ	0xFF7
  4459                           tblptrl	equ	0xFF6
  4460                           tablat	equ	0xFF5
  4461                           postinc0	equ	0xFEE
  4462                           wreg	equ	0xFE8
  4463                           indf1	equ	0xFE7
  4464                           postdec1	equ	0xFE5
  4465                           fsr1h	equ	0xFE2
  4466                           fsr1l	equ	0xFE1
  4467                           indf2	equ	0xFDF
  4468                           postinc2	equ	0xFDE
  4469                           fsr2h	equ	0xFDA
  4470                           fsr2l	equ	0xFD9
  4471                           status	equ	0xFD8
  4472                           
  4473 ;; *************** function _HMI_DownSwitch *****************
  4474 ;; Defined at:
  4475 ;;		line 42 in file "HMI.c"
  4476 ;; Parameters:    Size  Location     Type
  4477 ;;		None
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;		None
  4480 ;; Return value:  Size  Location     Type
  4481 ;;                  1    wreg      unsigned char 
  4482 ;; Registers used:
  4483 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;Total ram usage:        0 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    8
  4496 ;; This function calls:
  4497 ;;		_Port_GetPin
  4498 ;; This function is called by:
  4499 ;;		_HMI_Init
  4500 ;;		_Button_Poll
  4501 ;;		_inputVar
  4502 ;; This function uses a non-reentrant model
  4503 ;;
  4504                           
  4505                           	psect	text9
  4506  017F16                     __ptext9:
  4507                           	opt stack 0
  4508  017F16                     _HMI_DownSwitch:
  4509                           	opt stack 19
  4510                           
  4511                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  4512                           
  4513                           ;incstack = 0
  4514  017F16  0E95               	movlw	low _PortE
  4515  017F18  0100               	movlb	0	; () banked
  4516  017F1A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  4517  017F1C  0E01               	movlw	high _PortE
  4518  017F1E  0100               	movlb	0	; () banked
  4519  017F20  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  4520  017F22  0E06               	movlw	6
  4521  017F24  0100               	movlb	0	; () banked
  4522  017F26  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  4523  017F28  EC97  F0BB         	call	_Port_GetPin	;wreg free
  4524  017F2C  0012               	return	
  4525  017F2E                     __end_of_HMI_DownSwitch:
  4526                           	opt stack 0
  4527                           tosu	equ	0xFFF
  4528                           tosh	equ	0xFFE
  4529                           tosl	equ	0xFFD
  4530                           pclath	equ	0xFFA
  4531                           tblptru	equ	0xFF8
  4532                           tblptrh	equ	0xFF7
  4533                           tblptrl	equ	0xFF6
  4534                           tablat	equ	0xFF5
  4535                           postinc0	equ	0xFEE
  4536                           wreg	equ	0xFE8
  4537                           indf1	equ	0xFE7
  4538                           postdec1	equ	0xFE5
  4539                           fsr1h	equ	0xFE2
  4540                           fsr1l	equ	0xFE1
  4541                           indf2	equ	0xFDF
  4542                           postinc2	equ	0xFDE
  4543                           fsr2h	equ	0xFDA
  4544                           fsr2l	equ	0xFD9
  4545                           status	equ	0xFD8
  4546                           
  4547 ;; *************** function _HMI_UpSwitch *****************
  4548 ;; Defined at:
  4549 ;;		line 37 in file "HMI.c"
  4550 ;; Parameters:    Size  Location     Type
  4551 ;;		None
  4552 ;; Auto vars:     Size  Location     Type
  4553 ;;		None
  4554 ;; Return value:  Size  Location     Type
  4555 ;;                  1    wreg      unsigned char 
  4556 ;; Registers used:
  4557 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4558 ;; Tracked objects:
  4559 ;;		On entry : 0/0
  4560 ;;		On exit  : 0/0
  4561 ;;		Unchanged: 0/0
  4562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4567 ;;Total ram usage:        0 bytes
  4568 ;; Hardware stack levels used:    1
  4569 ;; Hardware stack levels required when called:    8
  4570 ;; This function calls:
  4571 ;;		_Port_GetPin
  4572 ;; This function is called by:
  4573 ;;		_HMI_Init
  4574 ;;		_Button_Poll
  4575 ;;		_inputVar
  4576 ;; This function uses a non-reentrant model
  4577 ;;
  4578                           
  4579                           	psect	text10
  4580  017F2E                     __ptext10:
  4581                           	opt stack 0
  4582  017F2E                     _HMI_UpSwitch:
  4583                           	opt stack 21
  4584                           
  4585                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  4586                           
  4587                           ;incstack = 0
  4588  017F2E  0E95               	movlw	low _PortE
  4589  017F30  0100               	movlb	0	; () banked
  4590  017F32  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  4591  017F34  0E01               	movlw	high _PortE
  4592  017F36  0100               	movlb	0	; () banked
  4593  017F38  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  4594  017F3A  0E07               	movlw	7
  4595  017F3C  0100               	movlb	0	; () banked
  4596  017F3E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  4597  017F40  EC97  F0BB         	call	_Port_GetPin	;wreg free
  4598  017F44  0012               	return	
  4599  017F46                     __end_of_HMI_UpSwitch:
  4600                           	opt stack 0
  4601                           tosu	equ	0xFFF
  4602                           tosh	equ	0xFFE
  4603                           tosl	equ	0xFFD
  4604                           pclath	equ	0xFFA
  4605                           tblptru	equ	0xFF8
  4606                           tblptrh	equ	0xFF7
  4607                           tblptrl	equ	0xFF6
  4608                           tablat	equ	0xFF5
  4609                           postinc0	equ	0xFEE
  4610                           wreg	equ	0xFE8
  4611                           indf1	equ	0xFE7
  4612                           postdec1	equ	0xFE5
  4613                           fsr1h	equ	0xFE2
  4614                           fsr1l	equ	0xFE1
  4615                           indf2	equ	0xFDF
  4616                           postinc2	equ	0xFDE
  4617                           fsr2h	equ	0xFDA
  4618                           fsr2l	equ	0xFD9
  4619                           status	equ	0xFD8
  4620                           
  4621 ;; *************** function _HMI_RightSwitch *****************
  4622 ;; Defined at:
  4623 ;;		line 32 in file "HMI.c"
  4624 ;; Parameters:    Size  Location     Type
  4625 ;;		None
  4626 ;; Auto vars:     Size  Location     Type
  4627 ;;		None
  4628 ;; Return value:  Size  Location     Type
  4629 ;;                  1    wreg      unsigned char 
  4630 ;; Registers used:
  4631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4632 ;; Tracked objects:
  4633 ;;		On entry : 0/0
  4634 ;;		On exit  : 0/0
  4635 ;;		Unchanged: 0/0
  4636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4641 ;;Total ram usage:        0 bytes
  4642 ;; Hardware stack levels used:    1
  4643 ;; Hardware stack levels required when called:    8
  4644 ;; This function calls:
  4645 ;;		_Port_GetPin
  4646 ;; This function is called by:
  4647 ;;		_HMI_Init
  4648 ;;		_Button_Poll
  4649 ;;		_inputVar
  4650 ;; This function uses a non-reentrant model
  4651 ;;
  4652                           
  4653                           	psect	text11
  4654  017F46                     __ptext11:
  4655                           	opt stack 0
  4656  017F46                     _HMI_RightSwitch:
  4657                           	opt stack 21
  4658                           
  4659                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  4660                           
  4661                           ;incstack = 0
  4662  017F46  0E95               	movlw	low _PortE
  4663  017F48  0100               	movlb	0	; () banked
  4664  017F4A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  4665  017F4C  0E01               	movlw	high _PortE
  4666  017F4E  0100               	movlb	0	; () banked
  4667  017F50  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  4668  017F52  0E04               	movlw	4
  4669  017F54  0100               	movlb	0	; () banked
  4670  017F56  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  4671  017F58  EC97  F0BB         	call	_Port_GetPin	;wreg free
  4672  017F5C  0012               	return	
  4673  017F5E                     __end_of_HMI_RightSwitch:
  4674                           	opt stack 0
  4675                           tosu	equ	0xFFF
  4676                           tosh	equ	0xFFE
  4677                           tosl	equ	0xFFD
  4678                           pclath	equ	0xFFA
  4679                           tblptru	equ	0xFF8
  4680                           tblptrh	equ	0xFF7
  4681                           tblptrl	equ	0xFF6
  4682                           tablat	equ	0xFF5
  4683                           postinc0	equ	0xFEE
  4684                           wreg	equ	0xFE8
  4685                           indf1	equ	0xFE7
  4686                           postdec1	equ	0xFE5
  4687                           fsr1h	equ	0xFE2
  4688                           fsr1l	equ	0xFE1
  4689                           indf2	equ	0xFDF
  4690                           postinc2	equ	0xFDE
  4691                           fsr2h	equ	0xFDA
  4692                           fsr2l	equ	0xFD9
  4693                           status	equ	0xFD8
  4694                           
  4695 ;; *************** function _HMI_LeftSwitch *****************
  4696 ;; Defined at:
  4697 ;;		line 27 in file "HMI.c"
  4698 ;; Parameters:    Size  Location     Type
  4699 ;;		None
  4700 ;; Auto vars:     Size  Location     Type
  4701 ;;		None
  4702 ;; Return value:  Size  Location     Type
  4703 ;;                  1    wreg      unsigned char 
  4704 ;; Registers used:
  4705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4706 ;; Tracked objects:
  4707 ;;		On entry : 0/0
  4708 ;;		On exit  : 0/0
  4709 ;;		Unchanged: 0/0
  4710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;Total ram usage:        0 bytes
  4716 ;; Hardware stack levels used:    1
  4717 ;; Hardware stack levels required when called:    8
  4718 ;; This function calls:
  4719 ;;		_Port_GetPin
  4720 ;; This function is called by:
  4721 ;;		_HMI_Init
  4722 ;;		_Button_Poll
  4723 ;;		_inputVar
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text12
  4728  017F5E                     __ptext12:
  4729                           	opt stack 0
  4730  017F5E                     _HMI_LeftSwitch:
  4731                           	opt stack 19
  4732                           
  4733                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  4734                           
  4735                           ;incstack = 0
  4736  017F5E  0E95               	movlw	low _PortE
  4737  017F60  0100               	movlb	0	; () banked
  4738  017F62  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  4739  017F64  0E01               	movlw	high _PortE
  4740  017F66  0100               	movlb	0	; () banked
  4741  017F68  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  4742  017F6A  0E05               	movlw	5
  4743  017F6C  0100               	movlb	0	; () banked
  4744  017F6E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  4745  017F70  EC97  F0BB         	call	_Port_GetPin	;wreg free
  4746  017F74  0012               	return	
  4747  017F76                     __end_of_HMI_LeftSwitch:
  4748                           	opt stack 0
  4749                           tosu	equ	0xFFF
  4750                           tosh	equ	0xFFE
  4751                           tosl	equ	0xFFD
  4752                           pclath	equ	0xFFA
  4753                           tblptru	equ	0xFF8
  4754                           tblptrh	equ	0xFF7
  4755                           tblptrl	equ	0xFF6
  4756                           tablat	equ	0xFF5
  4757                           postinc0	equ	0xFEE
  4758                           wreg	equ	0xFE8
  4759                           indf1	equ	0xFE7
  4760                           postdec1	equ	0xFE5
  4761                           fsr1h	equ	0xFE2
  4762                           fsr1l	equ	0xFE1
  4763                           indf2	equ	0xFDF
  4764                           postinc2	equ	0xFDE
  4765                           fsr2h	equ	0xFDA
  4766                           fsr2l	equ	0xFD9
  4767                           status	equ	0xFD8
  4768                           
  4769 ;; *************** function _MXK_TestButton *****************
  4770 ;; Defined at:
  4771 ;;		line 14 in file "Library/MXK.c"
  4772 ;; Parameters:    Size  Location     Type
  4773 ;;		None
  4774 ;; Auto vars:     Size  Location     Type
  4775 ;;		None
  4776 ;; Return value:  Size  Location     Type
  4777 ;;                  1    wreg      unsigned char 
  4778 ;; Registers used:
  4779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4780 ;; Tracked objects:
  4781 ;;		On entry : 0/0
  4782 ;;		On exit  : 0/0
  4783 ;;		Unchanged: 0/0
  4784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4789 ;;Total ram usage:        0 bytes
  4790 ;; Hardware stack levels used:    1
  4791 ;; Hardware stack levels required when called:    8
  4792 ;; This function calls:
  4793 ;;		_Port_GetPin
  4794 ;; This function is called by:
  4795 ;;		_FunctInitButton
  4796 ;;		_Button_Poll
  4797 ;;		_inputVar
  4798 ;; This function uses a non-reentrant model
  4799 ;;
  4800                           
  4801                           	psect	text13
  4802  017F76                     __ptext13:
  4803                           	opt stack 0
  4804  017F76                     _MXK_TestButton:
  4805                           	opt stack 21
  4806                           
  4807                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  4808                           
  4809                           ;incstack = 0
  4810  017F76  0EA9               	movlw	low _PortB
  4811  017F78  0100               	movlb	0	; () banked
  4812  017F7A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  4813  017F7C  0E01               	movlw	high _PortB
  4814  017F7E  0100               	movlb	0	; () banked
  4815  017F80  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  4816  017F82  0E04               	movlw	4
  4817  017F84  0100               	movlb	0	; () banked
  4818  017F86  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  4819  017F88  EC97  F0BB         	call	_Port_GetPin	;wreg free
  4820  017F8C  0012               	return	
  4821  017F8E                     __end_of_MXK_TestButton:
  4822                           	opt stack 0
  4823                           tosu	equ	0xFFF
  4824                           tosh	equ	0xFFE
  4825                           tosl	equ	0xFFD
  4826                           pclath	equ	0xFFA
  4827                           tblptru	equ	0xFF8
  4828                           tblptrh	equ	0xFF7
  4829                           tblptrl	equ	0xFF6
  4830                           tablat	equ	0xFF5
  4831                           postinc0	equ	0xFEE
  4832                           wreg	equ	0xFE8
  4833                           indf1	equ	0xFE7
  4834                           postdec1	equ	0xFE5
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function _Port_GetQuad *****************
  4844 ;; Defined at:
  4845 ;;		line 498 in file "Library/Port.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  4848 ;;		 -> PortE(10), PortD(10), 
  4849 ;;  pQuad           1    2[BANK0 ] enum E6776
  4850 ;; Auto vars:     Size  Location     Type
  4851 ;;  Output          1    5[BANK0 ] unsigned char 
  4852 ;; Return value:  Size  Location     Type
  4853 ;;                  1    wreg      unsigned char 
  4854 ;; Registers used:
  4855 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4856 ;; Tracked objects:
  4857 ;;		On entry : 0/0
  4858 ;;		On exit  : 0/0
  4859 ;;		Unchanged: 0/0
  4860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4861 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4865 ;;Total ram usage:        6 bytes
  4866 ;; Hardware stack levels used:    1
  4867 ;; Hardware stack levels required when called:    7
  4868 ;; This function calls:
  4869 ;;		Nothing
  4870 ;; This function is called by:
  4871 ;;		_HMI_DIPSwitch
  4872 ;;		_MXK_DIPSwitch
  4873 ;;		_Port_ToggleQuad
  4874 ;; This function uses a non-reentrant model
  4875 ;;
  4876                           
  4877                           	psect	text14
  4878  0175C4                     __ptext14:
  4879                           	opt stack 0
  4880  0175C4                     _Port_GetQuad:
  4881                           	opt stack 21
  4882                           
  4883                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  4884                           
  4885                           ;incstack = 0
  4886  0175C4  0100               	movlb	0	; () banked
  4887  0175C6  EE20 F006          	lfsr	2,6
  4888  0175CA  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
  4889  0175CC  26D9               	addwf	fsr2l,f,c
  4890  0175CE  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  4891  0175D0  22DA               	addwfc	fsr2h,f,c
  4892  0175D2  CFDE F063          	movff	postinc2,??_Port_GetQuad
  4893  0175D6  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
  4894  0175DA  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
  4895  0175DE  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  4896  0175E2  50DF               	movf	indf2,w,c
  4897  0175E4  0100               	movlb	0	; () banked
  4898  0175E6  6F65               	movwf	Port_GetQuad@Output& (0+255),b
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  4902  0175E8  0100               	movlb	0	; () banked
  4903  0175EA  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
  4904  0175EC  0D04               	mullw	4
  4905  0175EE  28F3               	incf	prodl,w,c
  4906  0175F0  0100               	movlb	0	; () banked
  4907  0175F2  6F63               	movwf	??_Port_GetQuad& (0+255),b
  4908  0175F4  D003               	goto	u10770
  4909  0175F6                     u10775:
  4910  0175F6  0100               	movlb	0	; () banked
  4911  0175F8  90D8               	bcf	status,0,c
  4912  0175FA  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
  4913  0175FC                     u10770:
  4914  0175FC  0100               	movlb	0	; () banked
  4915  0175FE  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
  4916  017600  D7FA               	goto	u10775
  4917                           
  4918                           ;Port.c: 502: Output &= 0xF;
  4919  017602  0E0F               	movlw	15
  4920  017604  0100               	movlb	0	; () banked
  4921  017606  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
  4922                           
  4923                           ; BSR set to: 0
  4924                           ;Port.c: 503: return Output;
  4925  017608  0100               	movlb	0	; () banked
  4926  01760A  5165               	movf	Port_GetQuad@Output& (0+255),w,b
  4927  01760C  0012               	return	
  4928  01760E                     __end_of_Port_GetQuad:
  4929                           	opt stack 0
  4930                           tosu	equ	0xFFF
  4931                           tosh	equ	0xFFE
  4932                           tosl	equ	0xFFD
  4933                           pclath	equ	0xFFA
  4934                           tblptru	equ	0xFF8
  4935                           tblptrh	equ	0xFF7
  4936                           tblptrl	equ	0xFF6
  4937                           tablat	equ	0xFF5
  4938                           prodl	equ	0xFF3
  4939                           postinc0	equ	0xFEE
  4940                           wreg	equ	0xFE8
  4941                           indf1	equ	0xFE7
  4942                           postdec1	equ	0xFE5
  4943                           fsr1h	equ	0xFE2
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           fsr2h	equ	0xFDA
  4949                           fsr2l	equ	0xFD9
  4950                           status	equ	0xFD8
  4951                           
  4952 ;; *************** function _Event_DIPSwitch *****************
  4953 ;; Defined at:
  4954 ;;		line 22 in file "Events.c"
  4955 ;; Parameters:    Size  Location     Type
  4956 ;;  pState          1    wreg     unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  pState          1   25[BANK0 ] unsigned char 
  4959 ;;  Bar             1   26[BANK0 ] unsigned char 
  4960 ;; Return value:  Size  Location     Type
  4961 ;;                  1    wreg      void 
  4962 ;; Registers used:
  4963 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4964 ;; Tracked objects:
  4965 ;;		On entry : 0/0
  4966 ;;		On exit  : 0/0
  4967 ;;		Unchanged: 0/0
  4968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;Total ram usage:        2 bytes
  4974 ;; Hardware stack levels used:    1
  4975 ;; Hardware stack levels required when called:   13
  4976 ;; This function calls:
  4977 ;;		_HMI_GetBar
  4978 ;;		_HMI_SetBar
  4979 ;;		_LED_Toggle
  4980 ;; This function is called by:
  4981 ;;		_FunctInitButton
  4982 ;;		_Button_Poll
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           	psect	text15
  4987  017C3E                     __ptext15:
  4988                           	opt stack 0
  4989  017C3E                     _Event_DIPSwitch:
  4990                           	opt stack 14
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;incstack = 0
  4994                           ;Event_DIPSwitch@pState stored from wreg
  4995  017C3E  0100               	movlb	0	; () banked
  4996  017C40  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
  4997                           
  4998                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  4999  017C42  EC35  F0C0         	call	_HMI_GetBar	;wreg free
  5000  017C46  0100               	movlb	0	; () banked
  5001  017C48  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;Events.c: 25: Bar &= 0x0F;
  5005  017C4A  0E0F               	movlw	15
  5006  017C4C  0100               	movlb	0	; () banked
  5007  017C4E  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;Events.c: 26: pState <<= 4;
  5011  017C50  0100               	movlb	0	; () banked
  5012  017C52  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  5013  017C54  0EF0               	movlw	240
  5014  017C56  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  5015                           
  5016                           ; BSR set to: 0
  5017                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  5018  017C58  0100               	movlb	0	; () banked
  5019  017C5A  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
  5020  017C5C  0100               	movlb	0	; () banked
  5021  017C5E  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  5022  017C60  EC1E  F0C0         	call	_HMI_SetBar
  5023                           
  5024                           ;Events.c: 32: LED_Toggle(eLED1);
  5025  017C64  0E00               	movlw	0
  5026  017C66  EC2B  F0BB         	call	_LED_Toggle
  5027  017C6A  0012               	return		;funcret
  5028  017C6C                     __end_of_Event_DIPSwitch:
  5029                           	opt stack 0
  5030                           tosu	equ	0xFFF
  5031                           tosh	equ	0xFFE
  5032                           tosl	equ	0xFFD
  5033                           pclath	equ	0xFFA
  5034                           tblptru	equ	0xFF8
  5035                           tblptrh	equ	0xFF7
  5036                           tblptrl	equ	0xFF6
  5037                           tablat	equ	0xFF5
  5038                           prodl	equ	0xFF3
  5039                           postinc0	equ	0xFEE
  5040                           wreg	equ	0xFE8
  5041                           indf1	equ	0xFE7
  5042                           postdec1	equ	0xFE5
  5043                           fsr1h	equ	0xFE2
  5044                           fsr1l	equ	0xFE1
  5045                           indf2	equ	0xFDF
  5046                           postinc2	equ	0xFDE
  5047                           postdec2	equ	0xFDD
  5048                           fsr2h	equ	0xFDA
  5049                           fsr2l	equ	0xFD9
  5050                           status	equ	0xFD8
  5051                           
  5052 ;; *************** function _Event_NULL *****************
  5053 ;; Defined at:
  5054 ;;		line 9 in file "Events.c"
  5055 ;; Parameters:    Size  Location     Type
  5056 ;;  pState          1    wreg     unsigned char 
  5057 ;; Auto vars:     Size  Location     Type
  5058 ;;  pState          1    0[COMRAM] unsigned char 
  5059 ;; Return value:  Size  Location     Type
  5060 ;;                  1    wreg      void 
  5061 ;; Registers used:
  5062 ;;		wreg
  5063 ;; Tracked objects:
  5064 ;;		On entry : 0/0
  5065 ;;		On exit  : 0/0
  5066 ;;		Unchanged: 0/0
  5067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5069 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5071 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5072 ;;Total ram usage:        0 bytes
  5073 ;; Hardware stack levels used:    1
  5074 ;; Hardware stack levels required when called:    7
  5075 ;; This function calls:
  5076 ;;		Nothing
  5077 ;; This function is called by:
  5078 ;;		_HMI_Init
  5079 ;;		_Button_Poll
  5080 ;; This function uses a non-reentrant model
  5081 ;;
  5082                           
  5083                           	psect	text16
  5084  018092                     __ptext16:
  5085                           	opt stack 0
  5086  018092                     _Event_NULL:
  5087                           	opt stack 20
  5088                           
  5089                           ;incstack = 0
  5090  018092  0012               	return		;funcret
  5091  018094                     __end_of_Event_NULL:
  5092                           	opt stack 0
  5093                           tosu	equ	0xFFF
  5094                           tosh	equ	0xFFE
  5095                           tosl	equ	0xFFD
  5096                           pclath	equ	0xFFA
  5097                           tblptru	equ	0xFF8
  5098                           tblptrh	equ	0xFF7
  5099                           tblptrl	equ	0xFF6
  5100                           tablat	equ	0xFF5
  5101                           prodl	equ	0xFF3
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf1	equ	0xFE7
  5105                           postdec1	equ	0xFE5
  5106                           fsr1h	equ	0xFE2
  5107                           fsr1l	equ	0xFE1
  5108                           indf2	equ	0xFDF
  5109                           postinc2	equ	0xFDE
  5110                           postdec2	equ	0xFDD
  5111                           fsr2h	equ	0xFDA
  5112                           fsr2l	equ	0xFD9
  5113                           status	equ	0xFD8
  5114                           
  5115 ;; *************** function _Event_TestButton *****************
  5116 ;; Defined at:
  5117 ;;		line 52 in file "Events.c"
  5118 ;; Parameters:    Size  Location     Type
  5119 ;;  pState          1    wreg     unsigned char 
  5120 ;; Auto vars:     Size  Location     Type
  5121 ;;  pState          1   25[BANK0 ] unsigned char 
  5122 ;; Return value:  Size  Location     Type
  5123 ;;                  1    wreg      void 
  5124 ;; Registers used:
  5125 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5126 ;; Tracked objects:
  5127 ;;		On entry : 0/0
  5128 ;;		On exit  : 0/0
  5129 ;;		Unchanged: 0/0
  5130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5134 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5135 ;;Total ram usage:        1 bytes
  5136 ;; Hardware stack levels used:    1
  5137 ;; Hardware stack levels required when called:   13
  5138 ;; This function calls:
  5139 ;;		_HMI_SetButton
  5140 ;;		_HMI_SetNumber
  5141 ;;		_LED_Toggle
  5142 ;; This function is called by:
  5143 ;;		_FunctInitButton
  5144 ;;		_Button_Poll
  5145 ;; This function uses a non-reentrant model
  5146 ;;
  5147                           
  5148                           	psect	text17
  5149  0179FC                     __ptext17:
  5150                           	opt stack 0
  5151  0179FC                     _Event_TestButton:
  5152                           	opt stack 14
  5153                           
  5154                           ;incstack = 0
  5155                           ;Event_TestButton@pState stored from wreg
  5156  0179FC  0100               	movlb	0	; () banked
  5157  0179FE  6F79               	movwf	Event_TestButton@pState& (0+255),b
  5158                           
  5159                           ;Events.c: 56: static UINT8 j = 0;
  5160                           ;Events.c: 60: if (pState == 0)
  5161  017A00  0100               	movlb	0	; () banked
  5162  017A02  5179               	movf	Event_TestButton@pState& (0+255),w,b
  5163  017A04  0100               	movlb	0	; () banked
  5164  017A06  A4D8               	btfss	status,2,c
  5165  017A08  D013               	goto	l1873
  5166                           
  5167                           ; BSR set to: 0
  5168                           ;Events.c: 61: {
  5169                           ;Events.c: 62: j++;
  5170  017A0A  0100               	movlb	0	; () banked
  5171  017A0C  2BF4               	incf	Event_TestButton@j& (0+255),f,b
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;Events.c: 63: val += j;
  5175  017A0E  0100               	movlb	0	; () banked
  5176  017A10  51F4               	movf	Event_TestButton@j& (0+255),w,b
  5177  017A12  0100               	movlb	0	; () banked
  5178  017A14  27E8               	addwf	_val& (0+255),f,b
  5179  017A16  0E00               	movlw	0
  5180  017A18  23E9               	addwfc	(_val+1)& (0+255),f,b
  5181                           
  5182                           ; BSR set to: 0
  5183                           ;Events.c: 64: HMI_SetNumber( val );
  5184  017A1A  C0E8  F071         	movff	_val,HMI_SetNumber@pInput
  5185  017A1E  C0E9  F072         	movff	_val+1,HMI_SetNumber@pInput+1
  5186  017A22  EC4D  F0BE         	call	_HMI_SetNumber	;wreg free
  5187                           
  5188                           ;Events.c: 67: HMI_SetButton( j & 3 );
  5189  017A26  0100               	movlb	0	; () banked
  5190  017A28  51F4               	movf	Event_TestButton@j& (0+255),w,b
  5191  017A2A  0B03               	andlw	3
  5192  017A2C  ECA0  F0B3         	call	_HMI_SetButton
  5193  017A30                     l1873:
  5194                           
  5195                           ;Events.c: 68: }
  5196                           ;Events.c: 72: LED_Toggle(eLED1);
  5197  017A30  0E00               	movlw	0
  5198  017A32  EC2B  F0BB         	call	_LED_Toggle
  5199  017A36  0012               	return		;funcret
  5200  017A38                     __end_of_Event_TestButton:
  5201                           	opt stack 0
  5202                           tosu	equ	0xFFF
  5203                           tosh	equ	0xFFE
  5204                           tosl	equ	0xFFD
  5205                           pclath	equ	0xFFA
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodl	equ	0xFF3
  5211                           postinc0	equ	0xFEE
  5212                           wreg	equ	0xFE8
  5213                           indf1	equ	0xFE7
  5214                           postdec1	equ	0xFE5
  5215                           fsr1h	equ	0xFE2
  5216                           fsr1l	equ	0xFE1
  5217                           indf2	equ	0xFDF
  5218                           postinc2	equ	0xFDE
  5219                           postdec2	equ	0xFDD
  5220                           fsr2h	equ	0xFDA
  5221                           fsr2l	equ	0xFD9
  5222                           status	equ	0xFD8
  5223                           
  5224 ;; *************** function _HMI_SetNumber *****************
  5225 ;; Defined at:
  5226 ;;		line 221 in file "HMI.c"
  5227 ;; Parameters:    Size  Location     Type
  5228 ;;  pInput          2   17[BANK0 ] int 
  5229 ;; Auto vars:     Size  Location     Type
  5230 ;;		None
  5231 ;; Return value:  Size  Location     Type
  5232 ;;                  1    wreg      void 
  5233 ;; Registers used:
  5234 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5235 ;; Tracked objects:
  5236 ;;		On entry : 0/0
  5237 ;;		On exit  : 0/0
  5238 ;;		Unchanged: 0/0
  5239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5240 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5244 ;;Total ram usage:        2 bytes
  5245 ;; Hardware stack levels used:    1
  5246 ;; Hardware stack levels required when called:    9
  5247 ;; This function calls:
  5248 ;;		_HMI_SetSegments
  5249 ;;		_itos
  5250 ;; This function is called by:
  5251 ;;		_Event_TestButton
  5252 ;;		_main
  5253 ;;		_Event_HMI_UpButton
  5254 ;;		_Event_HMI_DownButton
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257                           
  5258                           	psect	text18
  5259  017C9A                     __ptext18:
  5260                           	opt stack 0
  5261  017C9A                     _HMI_SetNumber:
  5262                           	opt stack 17
  5263                           
  5264                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  5265                           
  5266                           ;incstack = 0
  5267  017C9A  C071  F067         	movff	HMI_SetNumber@pInput,itos@input
  5268  017C9E  C072  F068         	movff	HMI_SetNumber@pInput+1,itos@input+1
  5269  017CA2  0E27               	movlw	low _HMIBoard
  5270  017CA4  0100               	movlb	0	; () banked
  5271  017CA6  6F69               	movwf	itos@destination& (0+255),b
  5272  017CA8  0E01               	movlw	high _HMIBoard
  5273  017CAA  0100               	movlb	0	; () banked
  5274  017CAC  6F6A               	movwf	(itos@destination+1)& (0+255),b
  5275  017CAE  EC5B  F0A9         	call	_itos	;wreg free
  5276                           
  5277                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  5278  017CB2  0E27               	movlw	low _HMIBoard
  5279  017CB4  0100               	movlb	0	; () banked
  5280  017CB6  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
  5281  017CB8  0E01               	movlw	high _HMIBoard
  5282  017CBA  0100               	movlb	0	; () banked
  5283  017CBC  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  5284  017CBE  ECB7  F0AD         	call	_HMI_SetSegments	;wreg free
  5285  017CC2  0012               	return		;funcret
  5286  017CC4                     __end_of_HMI_SetNumber:
  5287                           	opt stack 0
  5288                           tosu	equ	0xFFF
  5289                           tosh	equ	0xFFE
  5290                           tosl	equ	0xFFD
  5291                           pclath	equ	0xFFA
  5292                           tblptru	equ	0xFF8
  5293                           tblptrh	equ	0xFF7
  5294                           tblptrl	equ	0xFF6
  5295                           tablat	equ	0xFF5
  5296                           prodl	equ	0xFF3
  5297                           postinc0	equ	0xFEE
  5298                           wreg	equ	0xFE8
  5299                           indf1	equ	0xFE7
  5300                           postdec1	equ	0xFE5
  5301                           fsr1h	equ	0xFE2
  5302                           fsr1l	equ	0xFE1
  5303                           indf2	equ	0xFDF
  5304                           postinc2	equ	0xFDE
  5305                           postdec2	equ	0xFDD
  5306                           fsr2h	equ	0xFDA
  5307                           fsr2l	equ	0xFD9
  5308                           status	equ	0xFD8
  5309                           
  5310 ;; *************** function _itos *****************
  5311 ;; Defined at:
  5312 ;;		line 369 in file "Library/Types.c"
  5313 ;; Parameters:    Size  Location     Type
  5314 ;;  input           2    7[BANK0 ] unsigned short 
  5315 ;;  destination     2    9[BANK0 ] PTR unsigned char 
  5316 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  5317 ;; Auto vars:     Size  Location     Type
  5318 ;;  Out             2   15[BANK0 ] unsigned short 
  5319 ;;  Length          2   13[BANK0 ] unsigned short 
  5320 ;;  Data            2   11[BANK0 ] PTR unsigned char 
  5321 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      void 
  5324 ;; Registers used:
  5325 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5331 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;Total ram usage:       10 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:    8
  5338 ;; This function calls:
  5339 ;;		___lwdiv
  5340 ;;		___lwmod
  5341 ;;		_reverse
  5342 ;; This function is called by:
  5343 ;;		_HMI_SetNumber
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           	psect	text19
  5348  0152B6                     __ptext19:
  5349                           	opt stack 0
  5350  0152B6                     _itos:
  5351                           	opt stack 17
  5352                           
  5353                           ;Types.c: 371: UINT16 Out = input;
  5354                           
  5355                           ;incstack = 0
  5356  0152B6  C067  F06F         	movff	itos@input,itos@Out
  5357  0152BA  C068  F070         	movff	itos@input+1,itos@Out+1
  5358                           
  5359                           ;Types.c: 372: UINT16 Length = 0;
  5360  0152BE  0E00               	movlw	0
  5361  0152C0  0100               	movlb	0	; () banked
  5362  0152C2  6F6E               	movwf	(itos@Length+1)& (0+255),b
  5363  0152C4  0E00               	movlw	0
  5364  0152C6  6F6D               	movwf	itos@Length& (0+255),b
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;Types.c: 373: char *Data = destination;
  5368  0152C8  C069  F06B         	movff	itos@destination,itos@Data
  5369  0152CC  C06A  F06C         	movff	itos@destination+1,itos@Data+1
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;Types.c: 374: if(Out == 0)
  5373  0152D0  0100               	movlb	0	; () banked
  5374  0152D2  516F               	movf	itos@Out& (0+255),w,b
  5375  0152D4  0100               	movlb	0	; () banked
  5376  0152D6  1170               	iorwf	(itos@Out+1)& (0+255),w,b
  5377  0152D8  A4D8               	btfss	status,2,c
  5378  0152DA  D034               	goto	l929
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;Types.c: 375: {
  5382                           ;Types.c: 376: Data[0] = (UINT16)'0';
  5383  0152DC  C06B  FFD9         	movff	itos@Data,fsr2l
  5384  0152E0  C06C  FFDA         	movff	itos@Data+1,fsr2h
  5385  0152E4  0E30               	movlw	48
  5386  0152E6  6EDF               	movwf	indf2,c
  5387                           
  5388                           ; BSR set to: 0
  5389                           ;Types.c: 377: Length = 1;
  5390  0152E8  0E00               	movlw	0
  5391  0152EA  0100               	movlb	0	; () banked
  5392  0152EC  6F6E               	movwf	(itos@Length+1)& (0+255),b
  5393  0152EE  0E01               	movlw	1
  5394  0152F0  6F6D               	movwf	itos@Length& (0+255),b
  5395                           
  5396                           ;Types.c: 378: }
  5397  0152F2  D040               	goto	l928
  5398  0152F4                     
  5399                           ; BSR set to: 0
  5400                           ;Types.c: 382: {
  5401                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  5402                           
  5403                           ; BSR set to: 0
  5404  0152F4  C06F  F060         	movff	itos@Out,___lwmod@dividend
  5405  0152F8  C070  F061         	movff	itos@Out+1,___lwmod@dividend+1
  5406  0152FC  0E00               	movlw	0
  5407  0152FE  0100               	movlb	0	; () banked
  5408  015300  6F63               	movwf	(___lwmod@divisor+1)& (0+255),b
  5409  015302  0E0A               	movlw	10
  5410  015304  6F62               	movwf	___lwmod@divisor& (0+255),b
  5411  015306  EC02  F0B9         	call	___lwmod	;wreg free
  5412  01530A  0100               	movlb	0	; () banked
  5413  01530C  5160               	movf	?___lwmod& (0+255),w,b
  5414  01530E  0F30               	addlw	48
  5415  015310  C06B  FFD9         	movff	itos@Data,fsr2l
  5416  015314  C06C  FFDA         	movff	itos@Data+1,fsr2h
  5417  015318  6EDF               	movwf	indf2,c
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;Types.c: 384: Out /= 10;
  5421  01531A  C06F  F060         	movff	itos@Out,___lwdiv@dividend
  5422  01531E  C070  F061         	movff	itos@Out+1,___lwdiv@dividend+1
  5423  015322  0E00               	movlw	0
  5424  015324  0100               	movlb	0	; () banked
  5425  015326  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  5426  015328  0E0A               	movlw	10
  5427  01532A  6F62               	movwf	___lwdiv@divisor& (0+255),b
  5428  01532C  ECFC  F0B5         	call	___lwdiv	;wreg free
  5429  015330  C060  F06F         	movff	?___lwdiv,itos@Out
  5430  015334  C061  F070         	movff	?___lwdiv+1,itos@Out+1
  5431                           
  5432                           ;Types.c: 385: Length ++;
  5433  015338  0100               	movlb	0	; () banked
  5434  01533A  4B6D               	infsnz	itos@Length& (0+255),f,b
  5435  01533C  2B6E               	incf	(itos@Length+1)& (0+255),f,b
  5436                           
  5437                           ; BSR set to: 0
  5438                           ;Types.c: 386: Data++;
  5439  01533E  0100               	movlb	0	; () banked
  5440  015340  4B6B               	infsnz	itos@Data& (0+255),f,b
  5441  015342  2B6C               	incf	(itos@Data+1)& (0+255),f,b
  5442  015344                     l929:
  5443                           
  5444                           ; BSR set to: 0
  5445                           
  5446                           ; BSR set to: 0
  5447  015344  0100               	movlb	0	; () banked
  5448  015346  516F               	movf	itos@Out& (0+255),w,b
  5449  015348  0100               	movlb	0	; () banked
  5450  01534A  1170               	iorwf	(itos@Out+1)& (0+255),w,b
  5451  01534C  B4D8               	btfsc	status,2,c
  5452  01534E  D008               	goto	u10510
  5453                           
  5454                           ; BSR set to: 0
  5455  015350  0100               	movlb	0	; () banked
  5456  015352  516E               	movf	(itos@Length+1)& (0+255),w,b
  5457  015354  E105               	bnz	l13067
  5458  015356  0E06               	movlw	6
  5459  015358  0100               	movlb	0	; () banked
  5460  01535A  5D6D               	subwf	itos@Length& (0+255),w,b
  5461  01535C  A0D8               	btfss	status,0,c
  5462  01535E  D7CA               	goto	l930
  5463  015360                     u10510:
  5464  015360                     l13067:
  5465                           
  5466                           ; BSR set to: 0
  5467                           ;Types.c: 387: }
  5468                           ;Types.c: 388: reverse(destination, Length);
  5469  015360  C069  F060         	movff	itos@destination,reverse@input
  5470  015364  C06A  F061         	movff	itos@destination+1,reverse@input+1
  5471  015368  C06D  F062         	movff	itos@Length,reverse@length
  5472  01536C  C06E  F063         	movff	itos@Length+1,reverse@length+1
  5473  015370  EC93  F0B7         	call	_reverse	;wreg free
  5474  015374                     l928:
  5475                           
  5476                           ;Types.c: 389: }
  5477                           ;Types.c: 390: destination[Length] = '\0';
  5478  015374  0100               	movlb	0	; () banked
  5479  015376  516D               	movf	itos@Length& (0+255),w,b
  5480  015378  0100               	movlb	0	; () banked
  5481  01537A  2569               	addwf	itos@destination& (0+255),w,b
  5482  01537C  6ED9               	movwf	fsr2l,c
  5483  01537E  0100               	movlb	0	; () banked
  5484  015380  516E               	movf	(itos@Length+1)& (0+255),w,b
  5485  015382  0100               	movlb	0	; () banked
  5486  015384  216A               	addwfc	(itos@destination+1)& (0+255),w,b
  5487  015386  6EDA               	movwf	fsr2h,c
  5488  015388  0E00               	movlw	0
  5489  01538A  6EDF               	movwf	indf2,c
  5490                           
  5491                           ; BSR set to: 0
  5492  01538C  0012               	return		;funcret
  5493  01538E                     __end_of_itos:
  5494                           	opt stack 0
  5495                           tosu	equ	0xFFF
  5496                           tosh	equ	0xFFE
  5497                           tosl	equ	0xFFD
  5498                           pclath	equ	0xFFA
  5499                           tblptru	equ	0xFF8
  5500                           tblptrh	equ	0xFF7
  5501                           tblptrl	equ	0xFF6
  5502                           tablat	equ	0xFF5
  5503                           prodl	equ	0xFF3
  5504                           postinc0	equ	0xFEE
  5505                           wreg	equ	0xFE8
  5506                           indf1	equ	0xFE7
  5507                           postdec1	equ	0xFE5
  5508                           fsr1h	equ	0xFE2
  5509                           fsr1l	equ	0xFE1
  5510                           indf2	equ	0xFDF
  5511                           postinc2	equ	0xFDE
  5512                           postdec2	equ	0xFDD
  5513                           fsr2h	equ	0xFDA
  5514                           fsr2l	equ	0xFD9
  5515                           status	equ	0xFD8
  5516                           
  5517 ;; *************** function _reverse *****************
  5518 ;; Defined at:
  5519 ;;		line 357 in file "Library/Types.c"
  5520 ;; Parameters:    Size  Location     Type
  5521 ;;  input           2    0[BANK0 ] PTR unsigned char 
  5522 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  5523 ;;  length          2    2[BANK0 ] unsigned short 
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  5526 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  5527 ;;  tempVar         1    4[BANK0 ] unsigned char 
  5528 ;; Return value:  Size  Location     Type
  5529 ;;                  1    wreg      void 
  5530 ;; Registers used:
  5531 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  5532 ;; Tracked objects:
  5533 ;;		On entry : 0/0
  5534 ;;		On exit  : 0/0
  5535 ;;		Unchanged: 0/0
  5536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5537 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5540 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;Total ram usage:        7 bytes
  5542 ;; Hardware stack levels used:    1
  5543 ;; Hardware stack levels required when called:    7
  5544 ;; This function calls:
  5545 ;;		Nothing
  5546 ;; This function is called by:
  5547 ;;		_itos
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           	psect	text20
  5552  016F26                     __ptext20:
  5553                           	opt stack 0
  5554  016F26                     _reverse:
  5555                           	opt stack 17
  5556                           
  5557                           ;Types.c: 359: char tempVar,
  5558                           ;Types.c: 360: *iterator = input + length;
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;incstack = 0
  5562  016F26  0100               	movlb	0	; () banked
  5563  016F28  5162               	movf	reverse@length& (0+255),w,b
  5564  016F2A  0100               	movlb	0	; () banked
  5565  016F2C  2560               	addwf	reverse@input& (0+255),w,b
  5566  016F2E  0100               	movlb	0	; () banked
  5567  016F30  6F65               	movwf	reverse@iterator& (0+255),b
  5568  016F32  0100               	movlb	0	; () banked
  5569  016F34  5163               	movf	(reverse@length+1)& (0+255),w,b
  5570  016F36  0100               	movlb	0	; () banked
  5571  016F38  2161               	addwfc	(reverse@input+1)& (0+255),w,b
  5572  016F3A  0100               	movlb	0	; () banked
  5573  016F3C  6F66               	movwf	(reverse@iterator+1)& (0+255),b
  5574                           
  5575                           ;Types.c: 362: while ( --iterator > input )
  5576  016F3E  D01A               	goto	l921
  5577  016F40                     
  5578                           ; BSR set to: 0
  5579                           ;Types.c: 363: {
  5580                           ;Types.c: 364: tempVar = *input;
  5581                           
  5582                           ; BSR set to: 0
  5583  016F40  C060  FFD9         	movff	reverse@input,fsr2l
  5584  016F44  C061  FFDA         	movff	reverse@input+1,fsr2h
  5585  016F48  50DF               	movf	indf2,w,c
  5586  016F4A  0100               	movlb	0	; () banked
  5587  016F4C  6F64               	movwf	reverse@tempVar& (0+255),b
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;Types.c: 365: *input++=*iterator;
  5591  016F4E  C065  FFD9         	movff	reverse@iterator,fsr2l
  5592  016F52  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  5593  016F56  C060  FFE1         	movff	reverse@input,fsr1l
  5594  016F5A  C061  FFE2         	movff	reverse@input+1,fsr1h
  5595  016F5E  CFDF FFE7          	movff	indf2,indf1
  5596                           
  5597                           ; BSR set to: 0
  5598  016F62  0100               	movlb	0	; () banked
  5599  016F64  4B60               	infsnz	reverse@input& (0+255),f,b
  5600  016F66  2B61               	incf	(reverse@input+1)& (0+255),f,b
  5601                           
  5602                           ; BSR set to: 0
  5603                           ;Types.c: 366: *iterator=tempVar;
  5604  016F68  C065  FFD9         	movff	reverse@iterator,fsr2l
  5605  016F6C  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  5606  016F70  C064  FFDF         	movff	reverse@tempVar,indf2
  5607  016F74                     l921:
  5608                           
  5609                           ; BSR set to: 0
  5610                           
  5611                           ; BSR set to: 0
  5612  016F74  0100               	movlb	0	; () banked
  5613  016F76  0765               	decf	reverse@iterator& (0+255),f,b
  5614  016F78  A0D8               	btfss	status,0,c
  5615  016F7A  0766               	decf	(reverse@iterator+1)& (0+255),f,b
  5616  016F7C  0100               	movlb	0	; () banked
  5617  016F7E  5165               	movf	reverse@iterator& (0+255),w,b
  5618  016F80  0100               	movlb	0	; () banked
  5619  016F82  5D60               	subwf	reverse@input& (0+255),w,b
  5620  016F84  0100               	movlb	0	; () banked
  5621  016F86  5166               	movf	(reverse@iterator+1)& (0+255),w,b
  5622  016F88  0100               	movlb	0	; () banked
  5623  016F8A  5961               	subwfb	(reverse@input+1)& (0+255),w,b
  5624  016F8C  B0D8               	btfsc	status,0,c
  5625  016F8E  0012               	return	
  5626  016F90  D7D7               	goto	l922
  5627  016F92                     __end_of_reverse:
  5628                           	opt stack 0
  5629                           tosu	equ	0xFFF
  5630                           tosh	equ	0xFFE
  5631                           tosl	equ	0xFFD
  5632                           pclath	equ	0xFFA
  5633                           tblptru	equ	0xFF8
  5634                           tblptrh	equ	0xFF7
  5635                           tblptrl	equ	0xFF6
  5636                           tablat	equ	0xFF5
  5637                           prodl	equ	0xFF3
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           indf1	equ	0xFE7
  5641                           postdec1	equ	0xFE5
  5642                           fsr1h	equ	0xFE2
  5643                           fsr1l	equ	0xFE1
  5644                           indf2	equ	0xFDF
  5645                           postinc2	equ	0xFDE
  5646                           postdec2	equ	0xFDD
  5647                           fsr2h	equ	0xFDA
  5648                           fsr2l	equ	0xFD9
  5649                           status	equ	0xFD8
  5650                           
  5651 ;; *************** function ___lwmod *****************
  5652 ;; Defined at:
  5653 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  5654 ;; Parameters:    Size  Location     Type
  5655 ;;  dividend        2    0[BANK0 ] unsigned int 
  5656 ;;  divisor         2    2[BANK0 ] unsigned int 
  5657 ;; Auto vars:     Size  Location     Type
  5658 ;;  counter         1    4[BANK0 ] unsigned char 
  5659 ;; Return value:  Size  Location     Type
  5660 ;;                  2    0[BANK0 ] unsigned int 
  5661 ;; Registers used:
  5662 ;;		wreg, status,2, status,0
  5663 ;; Tracked objects:
  5664 ;;		On entry : 0/0
  5665 ;;		On exit  : 0/0
  5666 ;;		Unchanged: 0/0
  5667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;Total ram usage:        5 bytes
  5673 ;; Hardware stack levels used:    1
  5674 ;; Hardware stack levels required when called:    7
  5675 ;; This function calls:
  5676 ;;		Nothing
  5677 ;; This function is called by:
  5678 ;;		_itos
  5679 ;; This function uses a non-reentrant model
  5680 ;;
  5681                           
  5682                           	psect	text21
  5683  017204                     __ptext21:
  5684                           	opt stack 0
  5685  017204                     ___lwmod:
  5686                           	opt stack 17
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;incstack = 0
  5690  017204  0100               	movlb	0	; () banked
  5691  017206  5162               	movf	___lwmod@divisor& (0+255),w,b
  5692  017208  0100               	movlb	0	; () banked
  5693  01720A  1163               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5694  01720C  B4D8               	btfsc	status,2,c
  5695  01720E  D026               	goto	l2671
  5696                           
  5697                           ; BSR set to: 0
  5698  017210  0E01               	movlw	1
  5699  017212  0100               	movlb	0	; () banked
  5700  017214  6F64               	movwf	___lwmod@counter& (0+255),b
  5701  017216  D006               	goto	l2666
  5702  017218                     
  5703                           ; BSR set to: 0
  5704                           
  5705                           ; BSR set to: 0
  5706  017218  0100               	movlb	0	; () banked
  5707  01721A  90D8               	bcf	status,0,c
  5708  01721C  3762               	rlcf	___lwmod@divisor& (0+255),f,b
  5709  01721E  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5710  017220  0100               	movlb	0	; () banked
  5711  017222  2B64               	incf	___lwmod@counter& (0+255),f,b
  5712  017224                     l2666:
  5713                           
  5714                           ; BSR set to: 0
  5715                           
  5716                           ; BSR set to: 0
  5717  017224  0100               	movlb	0	; () banked
  5718  017226  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5719  017228  D7F7               	goto	l2667
  5720  01722A                     u10420:
  5721                           
  5722                           ; BSR set to: 0
  5723                           
  5724                           ; BSR set to: 0
  5725                           
  5726                           ; BSR set to: 0
  5727  01722A  0100               	movlb	0	; () banked
  5728  01722C  5162               	movf	___lwmod@divisor& (0+255),w,b
  5729  01722E  0100               	movlb	0	; () banked
  5730  017230  5D60               	subwf	___lwmod@dividend& (0+255),w,b
  5731  017232  0100               	movlb	0	; () banked
  5732  017234  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5733  017236  0100               	movlb	0	; () banked
  5734  017238  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5735  01723A  A0D8               	btfss	status,0,c
  5736  01723C  D008               	goto	l2670
  5737                           
  5738                           ; BSR set to: 0
  5739  01723E  0100               	movlb	0	; () banked
  5740  017240  5162               	movf	___lwmod@divisor& (0+255),w,b
  5741  017242  0100               	movlb	0	; () banked
  5742  017244  5F60               	subwf	___lwmod@dividend& (0+255),f,b
  5743  017246  0100               	movlb	0	; () banked
  5744  017248  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5745  01724A  0100               	movlb	0	; () banked
  5746  01724C  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5747  01724E                     l2670:
  5748                           
  5749                           ; BSR set to: 0
  5750                           
  5751                           ; BSR set to: 0
  5752  01724E  0100               	movlb	0	; () banked
  5753  017250  90D8               	bcf	status,0,c
  5754  017252  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5755  017254  3362               	rrcf	___lwmod@divisor& (0+255),f,b
  5756                           
  5757                           ; BSR set to: 0
  5758  017256  0100               	movlb	0	; () banked
  5759  017258  2F64               	decfsz	___lwmod@counter& (0+255),f,b
  5760  01725A  D7E7               	goto	u10420
  5761  01725C                     l2671:
  5762                           
  5763                           ; BSR set to: 0
  5764                           
  5765                           ; BSR set to: 0
  5766  01725C  C060  F060         	movff	___lwmod@dividend,?___lwmod
  5767  017260  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
  5768                           
  5769                           ; BSR set to: 0
  5770  017264  0012               	return		;funcret
  5771  017266                     __end_of___lwmod:
  5772                           	opt stack 0
  5773                           tosu	equ	0xFFF
  5774                           tosh	equ	0xFFE
  5775                           tosl	equ	0xFFD
  5776                           pclath	equ	0xFFA
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodl	equ	0xFF3
  5782                           postinc0	equ	0xFEE
  5783                           wreg	equ	0xFE8
  5784                           indf1	equ	0xFE7
  5785                           postdec1	equ	0xFE5
  5786                           fsr1h	equ	0xFE2
  5787                           fsr1l	equ	0xFE1
  5788                           indf2	equ	0xFDF
  5789                           postinc2	equ	0xFDE
  5790                           postdec2	equ	0xFDD
  5791                           fsr2h	equ	0xFDA
  5792                           fsr2l	equ	0xFD9
  5793                           status	equ	0xFD8
  5794                           
  5795 ;; *************** function ___lwdiv *****************
  5796 ;; Defined at:
  5797 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  5798 ;; Parameters:    Size  Location     Type
  5799 ;;  dividend        2    0[BANK0 ] unsigned int 
  5800 ;;  divisor         2    2[BANK0 ] unsigned int 
  5801 ;; Auto vars:     Size  Location     Type
  5802 ;;  quotient        2    5[BANK0 ] unsigned int 
  5803 ;;  counter         1    4[BANK0 ] unsigned char 
  5804 ;; Return value:  Size  Location     Type
  5805 ;;                  2    0[BANK0 ] unsigned int 
  5806 ;; Registers used:
  5807 ;;		wreg, status,2, status,0
  5808 ;; Tracked objects:
  5809 ;;		On entry : 0/0
  5810 ;;		On exit  : 0/0
  5811 ;;		Unchanged: 0/0
  5812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5813 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;Total ram usage:        7 bytes
  5818 ;; Hardware stack levels used:    1
  5819 ;; Hardware stack levels required when called:    7
  5820 ;; This function calls:
  5821 ;;		Nothing
  5822 ;; This function is called by:
  5823 ;;		_itos
  5824 ;; This function uses a non-reentrant model
  5825 ;;
  5826                           
  5827                           	psect	text22
  5828  016BF8                     __ptext22:
  5829                           	opt stack 0
  5830  016BF8                     ___lwdiv:
  5831                           	opt stack 17
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;incstack = 0
  5835  016BF8  0E00               	movlw	0
  5836  016BFA  0100               	movlb	0	; () banked
  5837  016BFC  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5838  016BFE  0E00               	movlw	0
  5839  016C00  6F65               	movwf	___lwdiv@quotient& (0+255),b
  5840                           
  5841                           ; BSR set to: 0
  5842  016C02  0100               	movlb	0	; () banked
  5843  016C04  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5844  016C06  0100               	movlb	0	; () banked
  5845  016C08  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5846  016C0A  B4D8               	btfsc	status,2,c
  5847  016C0C  D02C               	goto	l2661
  5848                           
  5849                           ; BSR set to: 0
  5850  016C0E  0E01               	movlw	1
  5851  016C10  0100               	movlb	0	; () banked
  5852  016C12  6F64               	movwf	___lwdiv@counter& (0+255),b
  5853  016C14  D006               	goto	l2656
  5854  016C16                     
  5855                           ; BSR set to: 0
  5856                           
  5857                           ; BSR set to: 0
  5858  016C16  0100               	movlb	0	; () banked
  5859  016C18  90D8               	bcf	status,0,c
  5860  016C1A  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
  5861  016C1C  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  5862  016C1E  0100               	movlb	0	; () banked
  5863  016C20  2B64               	incf	___lwdiv@counter& (0+255),f,b
  5864  016C22                     l2656:
  5865                           
  5866                           ; BSR set to: 0
  5867                           
  5868                           ; BSR set to: 0
  5869  016C22  0100               	movlb	0	; () banked
  5870  016C24  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  5871  016C26  D7F7               	goto	l2657
  5872  016C28                     u10390:
  5873                           
  5874                           ; BSR set to: 0
  5875                           
  5876                           ; BSR set to: 0
  5877                           
  5878                           ; BSR set to: 0
  5879  016C28  0100               	movlb	0	; () banked
  5880  016C2A  90D8               	bcf	status,0,c
  5881  016C2C  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
  5882  016C2E  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  5883                           
  5884                           ; BSR set to: 0
  5885  016C30  0100               	movlb	0	; () banked
  5886  016C32  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5887  016C34  0100               	movlb	0	; () banked
  5888  016C36  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
  5889  016C38  0100               	movlb	0	; () banked
  5890  016C3A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5891  016C3C  0100               	movlb	0	; () banked
  5892  016C3E  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  5893  016C40  A0D8               	btfss	status,0,c
  5894  016C42  D00A               	goto	l2660
  5895                           
  5896                           ; BSR set to: 0
  5897  016C44  0100               	movlb	0	; () banked
  5898  016C46  5162               	movf	___lwdiv@divisor& (0+255),w,b
  5899  016C48  0100               	movlb	0	; () banked
  5900  016C4A  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
  5901  016C4C  0100               	movlb	0	; () banked
  5902  016C4E  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  5903  016C50  0100               	movlb	0	; () banked
  5904  016C52  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  5905                           
  5906                           ; BSR set to: 0
  5907  016C54  0100               	movlb	0	; () banked
  5908  016C56  8165               	bsf	___lwdiv@quotient& (0+255),0,b
  5909  016C58                     l2660:
  5910                           
  5911                           ; BSR set to: 0
  5912                           
  5913                           ; BSR set to: 0
  5914  016C58  0100               	movlb	0	; () banked
  5915  016C5A  90D8               	bcf	status,0,c
  5916  016C5C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  5917  016C5E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
  5918                           
  5919                           ; BSR set to: 0
  5920  016C60  0100               	movlb	0	; () banked
  5921  016C62  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
  5922  016C64  D7E1               	goto	u10390
  5923  016C66                     l2661:
  5924                           
  5925                           ; BSR set to: 0
  5926                           
  5927                           ; BSR set to: 0
  5928  016C66  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
  5929  016C6A  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5930                           
  5931                           ; BSR set to: 0
  5932  016C6E  0012               	return		;funcret
  5933  016C70                     __end_of___lwdiv:
  5934                           	opt stack 0
  5935                           tosu	equ	0xFFF
  5936                           tosh	equ	0xFFE
  5937                           tosl	equ	0xFFD
  5938                           pclath	equ	0xFFA
  5939                           tblptru	equ	0xFF8
  5940                           tblptrh	equ	0xFF7
  5941                           tblptrl	equ	0xFF6
  5942                           tablat	equ	0xFF5
  5943                           prodl	equ	0xFF3
  5944                           postinc0	equ	0xFEE
  5945                           wreg	equ	0xFE8
  5946                           indf1	equ	0xFE7
  5947                           postdec1	equ	0xFE5
  5948                           fsr1h	equ	0xFE2
  5949                           fsr1l	equ	0xFE1
  5950                           indf2	equ	0xFDF
  5951                           postinc2	equ	0xFDE
  5952                           postdec2	equ	0xFDD
  5953                           fsr2h	equ	0xFDA
  5954                           fsr2l	equ	0xFD9
  5955                           status	equ	0xFD8
  5956                           
  5957 ;; *************** function _HMI_SetSegments *****************
  5958 ;; Defined at:
  5959 ;;		line 226 in file "HMI.c"
  5960 ;; Parameters:    Size  Location     Type
  5961 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  5962 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;  in              2    4[BANK0 ] unsigned short 
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  1    wreg      void 
  5967 ;; Registers used:
  5968 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5974 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;Total ram usage:        5 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; Hardware stack levels required when called:    8
  5981 ;; This function calls:
  5982 ;;		_ToSegment
  5983 ;; This function is called by:
  5984 ;;		_HMI_SetNumber
  5985 ;; This function uses a non-reentrant model
  5986 ;;
  5987                           
  5988                           	psect	text23
  5989  015B6E                     __ptext23:
  5990                           	opt stack 0
  5991  015B6E                     _HMI_SetSegments:
  5992                           	opt stack 17
  5993                           
  5994                           ;HMI.c: 228: UINT16 in=0;
  5995                           
  5996                           ; BSR set to: 0
  5997                           ;incstack = 0
  5998  015B6E  0E00               	movlw	0
  5999  015B70  0100               	movlb	0	; () banked
  6000  015B72  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  6001  015B74  0E00               	movlw	0
  6002  015B76  6F64               	movwf	HMI_SetSegments@in& (0+255),b
  6003                           
  6004                           ;HMI.c: 229: while(*pString)
  6005  015B78  D038               	goto	l1202
  6006  015B7A                     
  6007                           ; BSR set to: 0
  6008                           ;HMI.c: 230: {
  6009                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  6010                           
  6011                           ; BSR set to: 0
  6012  015B7A  0E27               	movlw	low _HMIBoard
  6013  015B7C  0100               	movlb	0	; () banked
  6014  015B7E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  6015  015B80  6ED9               	movwf	fsr2l,c
  6016  015B82  0E01               	movlw	high _HMIBoard
  6017  015B84  0100               	movlb	0	; () banked
  6018  015B86  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  6019  015B88  6EDA               	movwf	fsr2h,c
  6020  015B8A  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  6021  015B8E  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  6022  015B92  50E7               	movf	indf1,w,c
  6023  015B94  EC29  F094         	call	_ToSegment
  6024  015B98  6EDF               	movwf	indf2,c
  6025                           
  6026                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  6027  015B9A  0E27               	movlw	low _HMIBoard
  6028  015B9C  0100               	movlb	0	; () banked
  6029  015B9E  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  6030  015BA0  6ED9               	movwf	fsr2l,c
  6031  015BA2  0E01               	movlw	high _HMIBoard
  6032  015BA4  0100               	movlb	0	; () banked
  6033  015BA6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  6034  015BA8  6EDA               	movwf	fsr2h,c
  6035  015BAA  0E80               	movlw	128
  6036  015BAC  18DE               	xorwf	postinc2,w,c
  6037  015BAE  A4D8               	btfss	status,2,c
  6038  015BB0  D00E               	goto	l1201
  6039                           
  6040                           ; BSR set to: 0
  6041                           ;HMI.c: 234: {
  6042                           ;HMI.c: 235: in--;
  6043  015BB2  0100               	movlb	0	; () banked
  6044  015BB4  0764               	decf	HMI_SetSegments@in& (0+255),f,b
  6045  015BB6  A0D8               	btfss	status,0,c
  6046  015BB8  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  6047                           
  6048                           ; BSR set to: 0
  6049                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  6050  015BBA  0E27               	movlw	low _HMIBoard
  6051  015BBC  0100               	movlb	0	; () banked
  6052  015BBE  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  6053  015BC0  6ED9               	movwf	fsr2l,c
  6054  015BC2  0E01               	movlw	high _HMIBoard
  6055  015BC4  0100               	movlb	0	; () banked
  6056  015BC6  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  6057  015BC8  6EDA               	movwf	fsr2h,c
  6058  015BCA  0E00               	movlw	0
  6059  015BCC  8EDB               	bsf	plusw2,7,c
  6060  015BCE                     l1201:
  6061                           
  6062                           ; BSR set to: 0
  6063                           ;HMI.c: 237: }
  6064                           ;HMI.c: 239: pString++;
  6065                           
  6066                           ; BSR set to: 0
  6067  015BCE  0100               	movlb	0	; () banked
  6068  015BD0  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  6069  015BD2  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  6070                           
  6071                           ; BSR set to: 0
  6072                           ;HMI.c: 240: in++;
  6073  015BD4  0100               	movlb	0	; () banked
  6074  015BD6  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  6075  015BD8  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  6076                           
  6077                           ; BSR set to: 0
  6078                           ;HMI.c: 241: if (in>=6)
  6079  015BDA  0100               	movlb	0	; () banked
  6080  015BDC  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  6081  015BDE  E11A               	bnz	l13119
  6082  015BE0  0E06               	movlw	6
  6083  015BE2  0100               	movlb	0	; () banked
  6084  015BE4  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  6085  015BE6  B0D8               	btfsc	status,0,c
  6086  015BE8  D015               	goto	l1204
  6087  015BEA                     l1202:
  6088                           
  6089                           ; BSR set to: 0
  6090                           
  6091                           ; BSR set to: 0
  6092                           
  6093                           ; BSR set to: 0
  6094  015BEA  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  6095  015BEE  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  6096  015BF2  50DF               	movf	indf2,w,c
  6097  015BF4  B4D8               	btfsc	status,2,c
  6098  015BF6  D00E               	goto	l1204
  6099  015BF8  D7C0               	goto	l1200
  6100  015BFA                     
  6101                           ; BSR set to: 0
  6102                           ;HMI.c: 245: {
  6103                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  6104                           
  6105                           ; BSR set to: 0
  6106  015BFA  0E27               	movlw	low _HMIBoard
  6107  015BFC  0100               	movlb	0	; () banked
  6108  015BFE  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  6109  015C00  6ED9               	movwf	fsr2l,c
  6110  015C02  0E01               	movlw	high _HMIBoard
  6111  015C04  0100               	movlb	0	; () banked
  6112  015C06  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  6113  015C08  6EDA               	movwf	fsr2h,c
  6114  015C0A  0E00               	movlw	0
  6115  015C0C  6EDF               	movwf	indf2,c
  6116                           
  6117                           ; BSR set to: 0
  6118                           ;HMI.c: 247: in++;
  6119  015C0E  0100               	movlb	0	; () banked
  6120  015C10  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  6121  015C12  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  6122  015C14                     l1204:
  6123  015C14                     l13119:
  6124                           
  6125                           ; BSR set to: 0
  6126  015C14  0100               	movlb	0	; () banked
  6127  015C16  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  6128  015C18  E106               	bnz	l1207
  6129  015C1A  0E06               	movlw	6
  6130  015C1C  0100               	movlb	0	; () banked
  6131  015C1E  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  6132  015C20  B0D8               	btfsc	status,0,c
  6133  015C22  0012               	return	
  6134  015C24  D7EA               	goto	l1205
  6135  015C26                     l1207:
  6136                           
  6137                           ; BSR set to: 0
  6138  015C26  0012               	return		;funcret
  6139  015C28                     __end_of_HMI_SetSegments:
  6140                           	opt stack 0
  6141                           tosu	equ	0xFFF
  6142                           tosh	equ	0xFFE
  6143                           tosl	equ	0xFFD
  6144                           pclath	equ	0xFFA
  6145                           tblptru	equ	0xFF8
  6146                           tblptrh	equ	0xFF7
  6147                           tblptrl	equ	0xFF6
  6148                           tablat	equ	0xFF5
  6149                           prodl	equ	0xFF3
  6150                           postinc0	equ	0xFEE
  6151                           wreg	equ	0xFE8
  6152                           indf1	equ	0xFE7
  6153                           postdec1	equ	0xFE5
  6154                           fsr1h	equ	0xFE2
  6155                           fsr1l	equ	0xFE1
  6156                           indf2	equ	0xFDF
  6157                           postinc2	equ	0xFDE
  6158                           postdec2	equ	0xFDD
  6159                           plusw2	equ	0xFDB
  6160                           fsr2h	equ	0xFDA
  6161                           fsr2l	equ	0xFD9
  6162                           status	equ	0xFD8
  6163                           
  6164 ;; *************** function _ToSegment *****************
  6165 ;; Defined at:
  6166 ;;		line 284 in file "Library/Types.c"
  6167 ;; Parameters:    Size  Location     Type
  6168 ;;  pCHR            1    wreg     unsigned char 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  pCHR            1    0[BANK0 ] unsigned char 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;                  1    wreg      unsigned char 
  6173 ;; Registers used:
  6174 ;;		wreg, status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : 0/0
  6177 ;;		On exit  : 0/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6183 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6184 ;;Total ram usage:        1 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:    7
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_HMI_SetSegments
  6191 ;; This function uses a non-reentrant model
  6192 ;;
  6193                           
  6194                           	psect	text24
  6195  012852                     __ptext24:
  6196                           	opt stack 0
  6197  012852                     _ToSegment:
  6198                           	opt stack 17
  6199                           
  6200                           ; BSR set to: 0
  6201                           ;incstack = 0
  6202                           ;ToSegment@pCHR stored from wreg
  6203  012852  0100               	movlb	0	; () banked
  6204  012854  6F60               	movwf	ToSegment@pCHR& (0+255),b
  6205                           
  6206                           ;Types.c: 286: switch(pCHR)
  6207  012856  D07E               	goto	l853
  6208  012858  0E3F               	movlw	63
  6209  01285A  0012               	return	
  6210  01285C  0E06               	movlw	6
  6211  01285E  0012               	return	
  6212  012860  0E5B               	movlw	91
  6213  012862  0012               	return	
  6214  012864  0E4F               	movlw	79
  6215  012866  0012               	return	
  6216  012868  0E66               	movlw	102
  6217  01286A  0012               	return	
  6218  01286C  0E6D               	movlw	109
  6219  01286E  0012               	return	
  6220  012870  0E7D               	movlw	125
  6221  012872  0012               	return	
  6222  012874  0E07               	movlw	7
  6223  012876  0012               	return	
  6224  012878  0E7F               	movlw	127
  6225  01287A  0012               	return	
  6226  01287C  0E6F               	movlw	111
  6227  01287E  0012               	return	
  6228  012880  0E5F               	movlw	95
  6229  012882  0012               	return	
  6230  012884  0E7C               	movlw	124
  6231  012886  0012               	return	
  6232  012888  0E58               	movlw	88
  6233  01288A  0012               	return	
  6234  01288C  0E5E               	movlw	94
  6235  01288E  0012               	return	
  6236  012890  0E7B               	movlw	123
  6237  012892  0012               	return	
  6238  012894  0E71               	movlw	113
  6239  012896  0012               	return	
  6240  012898  0E6F               	movlw	111
  6241  01289A  0012               	return	
  6242  01289C  0E74               	movlw	116
  6243  01289E  0012               	return	
  6244  0128A0  0E04               	movlw	4
  6245  0128A2  0012               	return	
  6246  0128A4  0E0E               	movlw	14
  6247  0128A6  0012               	return	
  6248  0128A8  0E7A               	movlw	122
  6249  0128AA  0012               	return	
  6250  0128AC  0E06               	movlw	6
  6251  0128AE  0012               	return	
  6252  0128B0  0E14               	movlw	20
  6253  0128B2  0012               	return	
  6254  0128B4  0E54               	movlw	84
  6255  0128B6  0012               	return	
  6256  0128B8  0E5C               	movlw	92
  6257  0128BA  0012               	return	
  6258  0128BC  0E73               	movlw	115
  6259  0128BE  0012               	return	
  6260  0128C0  0E67               	movlw	103
  6261  0128C2  0012               	return	
  6262  0128C4  0E50               	movlw	80
  6263  0128C6  0012               	return	
  6264  0128C8  0E6D               	movlw	109
  6265  0128CA  0012               	return	
  6266  0128CC  0E78               	movlw	120
  6267  0128CE  0012               	return	
  6268  0128D0  0E1C               	movlw	28
  6269  0128D2  0012               	return	
  6270  0128D4  0E62               	movlw	98
  6271  0128D6  0012               	return	
  6272  0128D8  0E2A               	movlw	42
  6273  0128DA  0012               	return	
  6274  0128DC  0E64               	movlw	100
  6275  0128DE  0012               	return	
  6276  0128E0  0E6E               	movlw	110
  6277  0128E2  0012               	return	
  6278  0128E4  0E5B               	movlw	91
  6279  0128E6  0012               	return	
  6280  0128E8  0E77               	movlw	119
  6281  0128EA  0012               	return	
  6282  0128EC  0E7F               	movlw	127
  6283  0128EE  0012               	return	
  6284  0128F0  0E39               	movlw	57
  6285  0128F2  0012               	return	
  6286  0128F4  0E3F               	movlw	63
  6287  0128F6  0012               	return	
  6288  0128F8  0E79               	movlw	121
  6289  0128FA  0012               	return	
  6290  0128FC  0E71               	movlw	113
  6291  0128FE  0012               	return	
  6292  012900  0E3D               	movlw	61
  6293  012902  0012               	return	
  6294  012904  0E76               	movlw	118
  6295  012906  0012               	return	
  6296  012908  0E06               	movlw	6
  6297  01290A  0012               	return	
  6298  01290C  0E1E               	movlw	30
  6299  01290E  0012               	return	
  6300  012910  0E57               	movlw	87
  6301  012912  0012               	return	
  6302  012914  0E38               	movlw	56
  6303  012916  0012               	return	
  6304  012918  0E76               	movlw	118
  6305  01291A  0012               	return	
  6306  01291C  0E76               	movlw	118
  6307  01291E  0012               	return	
  6308  012920  0E3F               	movlw	63
  6309  012922  0012               	return	
  6310  012924  0E73               	movlw	115
  6311  012926  0012               	return	
  6312  012928  0E3F               	movlw	63
  6313  01292A  0012               	return	
  6314  01292C  0E77               	movlw	119
  6315  01292E  0012               	return	
  6316  012930  0E6D               	movlw	109
  6317  012932  0012               	return	
  6318  012934  0E31               	movlw	49
  6319  012936  0012               	return	
  6320  012938  0E3E               	movlw	62
  6321  01293A  0012               	return	
  6322  01293C  0E3E               	movlw	62
  6323  01293E  0012               	return	
  6324  012940  0E7E               	movlw	126
  6325  012942  0012               	return	
  6326  012944  0E76               	movlw	118
  6327  012946  0012               	return	
  6328  012948  0E66               	movlw	102
  6329  01294A  0012               	return	
  6330  01294C  0E5B               	movlw	91
  6331  01294E  0012               	return	
  6332  012950  0E80               	movlw	128
  6333  012952  0012               	return	
  6334  012954                     l853:
  6335  012954  0100               	movlb	0	; () banked
  6336  012956  5160               	movf	ToSegment@pCHR& (0+255),w,b
  6337                           
  6338                           ; Switch size 1, requested type "space"
  6339                           ; Number of cases is 63, Range of values is 46 to 122
  6340                           ; switch strategies available:
  6341                           ; Name         Instructions Cycles
  6342                           ; simple_byte          190    96 (average)
  6343                           ;	Chosen strategy is simple_byte
  6344  012958  0A2E               	xorlw	46	; case 46
  6345  01295A  B4D8               	btfsc	status,2,c
  6346  01295C  D7F9               	goto	l917
  6347  01295E  0A1E               	xorlw	30	; case 48
  6348  012960  B4D8               	btfsc	status,2,c
  6349  012962  D77A               	goto	l854
  6350  012964  0A01               	xorlw	1	; case 49
  6351  012966  B4D8               	btfsc	status,2,c
  6352  012968  D779               	goto	l856
  6353  01296A  0A03               	xorlw	3	; case 50
  6354  01296C  B4D8               	btfsc	status,2,c
  6355  01296E  D778               	goto	l857
  6356  012970  0A01               	xorlw	1	; case 51
  6357  012972  B4D8               	btfsc	status,2,c
  6358  012974  D777               	goto	l858
  6359  012976  0A07               	xorlw	7	; case 52
  6360  012978  B4D8               	btfsc	status,2,c
  6361  01297A  D776               	goto	l859
  6362  01297C  0A01               	xorlw	1	; case 53
  6363  01297E  B4D8               	btfsc	status,2,c
  6364  012980  D775               	goto	l860
  6365  012982  0A03               	xorlw	3	; case 54
  6366  012984  B4D8               	btfsc	status,2,c
  6367  012986  D774               	goto	l861
  6368  012988  0A01               	xorlw	1	; case 55
  6369  01298A  B4D8               	btfsc	status,2,c
  6370  01298C  D773               	goto	l862
  6371  01298E  0A0F               	xorlw	15	; case 56
  6372  012990  B4D8               	btfsc	status,2,c
  6373  012992  D772               	goto	l863
  6374  012994  0A01               	xorlw	1	; case 57
  6375  012996  B4D8               	btfsc	status,2,c
  6376  012998  D771               	goto	l864
  6377  01299A  0A78               	xorlw	120	; case 65
  6378  01299C  B4D8               	btfsc	status,2,c
  6379  01299E  D7A4               	goto	l891
  6380  0129A0  0A03               	xorlw	3	; case 66
  6381  0129A2  B4D8               	btfsc	status,2,c
  6382  0129A4  D7A3               	goto	l892
  6383  0129A6  0A01               	xorlw	1	; case 67
  6384  0129A8  B4D8               	btfsc	status,2,c
  6385  0129AA  D7A2               	goto	l893
  6386  0129AC  0A07               	xorlw	7	; case 68
  6387  0129AE  B4D8               	btfsc	status,2,c
  6388  0129B0  D7A1               	goto	l894
  6389  0129B2  0A01               	xorlw	1	; case 69
  6390  0129B4  B4D8               	btfsc	status,2,c
  6391  0129B6  D7A0               	goto	l895
  6392  0129B8  0A03               	xorlw	3	; case 70
  6393  0129BA  B4D8               	btfsc	status,2,c
  6394  0129BC  D79F               	goto	l896
  6395  0129BE  0A01               	xorlw	1	; case 71
  6396  0129C0  B4D8               	btfsc	status,2,c
  6397  0129C2  D79E               	goto	l897
  6398  0129C4  0A0F               	xorlw	15	; case 72
  6399  0129C6  B4D8               	btfsc	status,2,c
  6400  0129C8  D79D               	goto	l898
  6401  0129CA  0A01               	xorlw	1	; case 73
  6402  0129CC  B4D8               	btfsc	status,2,c
  6403  0129CE  D79C               	goto	l899
  6404  0129D0  0A03               	xorlw	3	; case 74
  6405  0129D2  B4D8               	btfsc	status,2,c
  6406  0129D4  D79B               	goto	l900
  6407  0129D6  0A01               	xorlw	1	; case 75
  6408  0129D8  B4D8               	btfsc	status,2,c
  6409  0129DA  D79A               	goto	l901
  6410  0129DC  0A07               	xorlw	7	; case 76
  6411  0129DE  B4D8               	btfsc	status,2,c
  6412  0129E0  D799               	goto	l902
  6413  0129E2  0A01               	xorlw	1	; case 77
  6414  0129E4  B4D8               	btfsc	status,2,c
  6415  0129E6  D798               	goto	l903
  6416  0129E8  0A03               	xorlw	3	; case 78
  6417  0129EA  B4D8               	btfsc	status,2,c
  6418  0129EC  D797               	goto	l904
  6419  0129EE  0A01               	xorlw	1	; case 79
  6420  0129F0  B4D8               	btfsc	status,2,c
  6421  0129F2  D796               	goto	l905
  6422  0129F4  0A1F               	xorlw	31	; case 80
  6423  0129F6  B4D8               	btfsc	status,2,c
  6424  0129F8  D795               	goto	l906
  6425  0129FA  0A01               	xorlw	1	; case 81
  6426  0129FC  B4D8               	btfsc	status,2,c
  6427  0129FE  D794               	goto	l907
  6428  012A00  0A03               	xorlw	3	; case 82
  6429  012A02  B4D8               	btfsc	status,2,c
  6430  012A04  D793               	goto	l908
  6431  012A06  0A01               	xorlw	1	; case 83
  6432  012A08  B4D8               	btfsc	status,2,c
  6433  012A0A  D792               	goto	l909
  6434  012A0C  0A07               	xorlw	7	; case 84
  6435  012A0E  B4D8               	btfsc	status,2,c
  6436  012A10  D791               	goto	l910
  6437  012A12  0A01               	xorlw	1	; case 85
  6438  012A14  B4D8               	btfsc	status,2,c
  6439  012A16  D790               	goto	l911
  6440  012A18  0A03               	xorlw	3	; case 86
  6441  012A1A  B4D8               	btfsc	status,2,c
  6442  012A1C  D78F               	goto	l912
  6443  012A1E  0A01               	xorlw	1	; case 87
  6444  012A20  B4D8               	btfsc	status,2,c
  6445  012A22  D78E               	goto	l913
  6446  012A24  0A0F               	xorlw	15	; case 88
  6447  012A26  B4D8               	btfsc	status,2,c
  6448  012A28  D78D               	goto	l914
  6449  012A2A  0A01               	xorlw	1	; case 89
  6450  012A2C  B4D8               	btfsc	status,2,c
  6451  012A2E  D78C               	goto	l915
  6452  012A30  0A03               	xorlw	3	; case 90
  6453  012A32  B4D8               	btfsc	status,2,c
  6454  012A34  D78B               	goto	l916
  6455  012A36  0A3B               	xorlw	59	; case 97
  6456  012A38  B4D8               	btfsc	status,2,c
  6457  012A3A  D722               	goto	l865
  6458  012A3C  0A03               	xorlw	3	; case 98
  6459  012A3E  B4D8               	btfsc	status,2,c
  6460  012A40  D721               	goto	l866
  6461  012A42  0A01               	xorlw	1	; case 99
  6462  012A44  B4D8               	btfsc	status,2,c
  6463  012A46  D720               	goto	l867
  6464  012A48  0A07               	xorlw	7	; case 100
  6465  012A4A  B4D8               	btfsc	status,2,c
  6466  012A4C  D71F               	goto	l868
  6467  012A4E  0A01               	xorlw	1	; case 101
  6468  012A50  B4D8               	btfsc	status,2,c
  6469  012A52  D71E               	goto	l869
  6470  012A54  0A03               	xorlw	3	; case 102
  6471  012A56  B4D8               	btfsc	status,2,c
  6472  012A58  D71D               	goto	l870
  6473  012A5A  0A01               	xorlw	1	; case 103
  6474  012A5C  B4D8               	btfsc	status,2,c
  6475  012A5E  D71C               	goto	l871
  6476  012A60  0A0F               	xorlw	15	; case 104
  6477  012A62  B4D8               	btfsc	status,2,c
  6478  012A64  D71B               	goto	l872
  6479  012A66  0A01               	xorlw	1	; case 105
  6480  012A68  B4D8               	btfsc	status,2,c
  6481  012A6A  D71A               	goto	l873
  6482  012A6C  0A03               	xorlw	3	; case 106
  6483  012A6E  B4D8               	btfsc	status,2,c
  6484  012A70  D719               	goto	l874
  6485  012A72  0A01               	xorlw	1	; case 107
  6486  012A74  B4D8               	btfsc	status,2,c
  6487  012A76  D718               	goto	l875
  6488  012A78  0A07               	xorlw	7	; case 108
  6489  012A7A  B4D8               	btfsc	status,2,c
  6490  012A7C  D717               	goto	l876
  6491  012A7E  0A01               	xorlw	1	; case 109
  6492  012A80  B4D8               	btfsc	status,2,c
  6493  012A82  D716               	goto	l877
  6494  012A84  0A03               	xorlw	3	; case 110
  6495  012A86  B4D8               	btfsc	status,2,c
  6496  012A88  D715               	goto	l878
  6497  012A8A  0A01               	xorlw	1	; case 111
  6498  012A8C  B4D8               	btfsc	status,2,c
  6499  012A8E  D714               	goto	l879
  6500  012A90  0A1F               	xorlw	31	; case 112
  6501  012A92  B4D8               	btfsc	status,2,c
  6502  012A94  D713               	goto	l880
  6503  012A96  0A01               	xorlw	1	; case 113
  6504  012A98  B4D8               	btfsc	status,2,c
  6505  012A9A  D712               	goto	l881
  6506  012A9C  0A03               	xorlw	3	; case 114
  6507  012A9E  B4D8               	btfsc	status,2,c
  6508  012AA0  D711               	goto	l882
  6509  012AA2  0A01               	xorlw	1	; case 115
  6510  012AA4  B4D8               	btfsc	status,2,c
  6511  012AA6  D710               	goto	l883
  6512  012AA8  0A07               	xorlw	7	; case 116
  6513  012AAA  B4D8               	btfsc	status,2,c
  6514  012AAC  D70F               	goto	l884
  6515  012AAE  0A01               	xorlw	1	; case 117
  6516  012AB0  B4D8               	btfsc	status,2,c
  6517  012AB2  D70E               	goto	l885
  6518  012AB4  0A03               	xorlw	3	; case 118
  6519  012AB6  B4D8               	btfsc	status,2,c
  6520  012AB8  D70D               	goto	l886
  6521  012ABA  0A01               	xorlw	1	; case 119
  6522  012ABC  B4D8               	btfsc	status,2,c
  6523  012ABE  D70C               	goto	l887
  6524  012AC0  0A0F               	xorlw	15	; case 120
  6525  012AC2  B4D8               	btfsc	status,2,c
  6526  012AC4  D70B               	goto	l888
  6527  012AC6  0A01               	xorlw	1	; case 121
  6528  012AC8  B4D8               	btfsc	status,2,c
  6529  012ACA  D70A               	goto	l889
  6530  012ACC  0A03               	xorlw	3	; case 122
  6531  012ACE  B4D8               	btfsc	status,2,c
  6532  012AD0  D709               	goto	l890
  6533                           
  6534                           ;Types.c: 354: return 0;
  6535                           
  6536                           ; BSR set to: 0
  6537  012AD2  0E00               	movlw	0
  6538  012AD4  0012               	return	
  6539  012AD6                     __end_of_ToSegment:
  6540                           	opt stack 0
  6541                           tosu	equ	0xFFF
  6542                           tosh	equ	0xFFE
  6543                           tosl	equ	0xFFD
  6544                           pclath	equ	0xFFA
  6545                           tblptru	equ	0xFF8
  6546                           tblptrh	equ	0xFF7
  6547                           tblptrl	equ	0xFF6
  6548                           tablat	equ	0xFF5
  6549                           prodl	equ	0xFF3
  6550                           postinc0	equ	0xFEE
  6551                           wreg	equ	0xFE8
  6552                           indf1	equ	0xFE7
  6553                           postdec1	equ	0xFE5
  6554                           fsr1h	equ	0xFE2
  6555                           fsr1l	equ	0xFE1
  6556                           indf2	equ	0xFDF
  6557                           postinc2	equ	0xFDE
  6558                           postdec2	equ	0xFDD
  6559                           plusw2	equ	0xFDB
  6560                           fsr2h	equ	0xFDA
  6561                           fsr2l	equ	0xFD9
  6562                           status	equ	0xFD8
  6563                           
  6564 ;; *************** function _HMI_SetButton *****************
  6565 ;; Defined at:
  6566 ;;		line 186 in file "HMI.c"
  6567 ;; Parameters:    Size  Location     Type
  6568 ;;  pValue          1    wreg     unsigned char 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  pValue          1    6[BANK0 ] unsigned char 
  6571 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  6572 ;;  v               1    7[BANK0 ] unsigned char 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;                  1    wreg      void 
  6575 ;; Registers used:
  6576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;Total ram usage:        8 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    7
  6589 ;; This function calls:
  6590 ;;		Nothing
  6591 ;; This function is called by:
  6592 ;;		_Event_TestButton
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           	psect	text25
  6597  016740                     __ptext25:
  6598                           	opt stack 0
  6599  016740                     _HMI_SetButton:
  6600                           	opt stack 19
  6601                           
  6602                           ;incstack = 0
  6603                           ;HMI_SetButton@pValue stored from wreg
  6604  016740  0100               	movlb	0	; () banked
  6605  016742  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
  6606                           
  6607                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  6608  016744  0EC8               	movlw	low HMI_SetButton@F7213
  6609  016746  6EF6               	movwf	tblptrl,c
  6610  016748                     	if	1	;There is more than 1 active tblptr byte
  6611  016748  0EFC               	movlw	high HMI_SetButton@F7213
  6612  01674A  6EF7               	movwf	tblptrh,c
  6613  01674C                     	endif
  6614  01674C                     	if	1	;There are 3 active tblptr bytes
  6615  01674C  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
  6616  01674E  6EF8               	movwf	tblptru,c
  6617  016750                     	endif
  6618  016750  0009               	tblrd		*+
  6619  016752  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
  6620  016756  0009               	tblrd		*+
  6621  016758  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
  6622  01675C  0009               	tblrd		*+
  6623  01675E  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
  6624  016762  000A               	tblrd		*-
  6625  016764  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
  6626                           
  6627                           ;HMI.c: 189: UINT8 v = 0b00010001;
  6628  016768  0E11               	movlw	17
  6629  01676A  0100               	movlb	0	; () banked
  6630  01676C  6F67               	movwf	HMI_SetButton@v& (0+255),b
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;HMI.c: 190: pValue &= 3;
  6634  01676E  0E03               	movlw	3
  6635  016770  0100               	movlb	0	; () banked
  6636  016772  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;HMI.c: 191: v = v << reindex[pValue];
  6640  016774  0100               	movlb	0	; () banked
  6641  016776  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
  6642  016778  0D01               	mullw	1
  6643  01677A  0E62               	movlw	low HMI_SetButton@reindex
  6644  01677C  24F3               	addwf	prodl,w,c
  6645  01677E  6ED9               	movwf	fsr2l,c
  6646  016780  0E00               	movlw	high HMI_SetButton@reindex
  6647  016782  20F4               	addwfc	prodh,w,c
  6648  016784  6EDA               	movwf	fsr2h,c
  6649  016786  50DF               	movf	indf2,w,c
  6650  016788  0100               	movlb	0	; () banked
  6651  01678A  6F60               	movwf	??_HMI_SetButton& (0+255),b
  6652  01678C  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  6653  016790  0100               	movlb	0	; () banked
  6654  016792  2B60               	incf	??_HMI_SetButton& (0+255),f,b
  6655  016794  D003               	goto	u10884
  6656  016796                     u10885:
  6657  016796  0100               	movlb	0	; () banked
  6658  016798  90D8               	bcf	status,0,c
  6659  01679A  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  6660  01679C                     u10884:
  6661  01679C  0100               	movlb	0	; () banked
  6662  01679E  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
  6663  0167A0  D7FA               	goto	u10885
  6664  0167A2  0100               	movlb	0	; () banked
  6665  0167A4  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  6666  0167A6  0100               	movlb	0	; () banked
  6667  0167A8  6F67               	movwf	HMI_SetButton@v& (0+255),b
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;HMI.c: 192: v = v >> 4;
  6671  0167AA  0100               	movlb	0	; () banked
  6672  0167AC  3967               	swapf	HMI_SetButton@v& (0+255),w,b
  6673  0167AE  0B0F               	andlw	15
  6674  0167B0  0100               	movlb	0	; () banked
  6675  0167B2  6F67               	movwf	HMI_SetButton@v& (0+255),b
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;HMI.c: 193: v = v & 0x0F;
  6679  0167B4  0100               	movlb	0	; () banked
  6680  0167B6  5167               	movf	HMI_SetButton@v& (0+255),w,b
  6681  0167B8  0B0F               	andlw	15
  6682  0167BA  0100               	movlb	0	; () banked
  6683  0167BC  6F67               	movwf	HMI_SetButton@v& (0+255),b
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;HMI.c: 194: HMIBoard.pButton = v;
  6687  0167BE  0101               	movlb	1	; () banked
  6688  0167C0  512D               	movf	(_HMIBoard+6)& (0+255),w,b
  6689  0167C2  0100               	movlb	0	; () banked
  6690  0167C4  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
  6691  0167C6  0BF0               	andlw	-16
  6692  0167C8  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
  6693  0167CA  0101               	movlb	1	; () banked
  6694  0167CC  6F2D               	movwf	(_HMIBoard+6)& (0+255),b
  6695                           
  6696                           ; BSR set to: 1
  6697  0167CE  0012               	return		;funcret
  6698  0167D0                     __end_of_HMI_SetButton:
  6699                           	opt stack 0
  6700                           tosu	equ	0xFFF
  6701                           tosh	equ	0xFFE
  6702                           tosl	equ	0xFFD
  6703                           pclath	equ	0xFFA
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           postinc0	equ	0xFEE
  6711                           wreg	equ	0xFE8
  6712                           indf1	equ	0xFE7
  6713                           postdec1	equ	0xFE5
  6714                           fsr1h	equ	0xFE2
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           plusw2	equ	0xFDB
  6720                           fsr2h	equ	0xFDA
  6721                           fsr2l	equ	0xFD9
  6722                           status	equ	0xFD8
  6723                           
  6724 ;; *************** function _HMI_SetBar *****************
  6725 ;; Defined at:
  6726 ;;		line 205 in file "HMI.c"
  6727 ;; Parameters:    Size  Location     Type
  6728 ;;  pValue          1    wreg     unsigned char 
  6729 ;; Auto vars:     Size  Location     Type
  6730 ;;  pValue          1    0[BANK0 ] unsigned char 
  6731 ;; Return value:  Size  Location     Type
  6732 ;;                  1    wreg      void 
  6733 ;; Registers used:
  6734 ;;		wreg
  6735 ;; Tracked objects:
  6736 ;;		On entry : 0/0
  6737 ;;		On exit  : 0/0
  6738 ;;		Unchanged: 0/0
  6739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;Total ram usage:        1 bytes
  6745 ;; Hardware stack levels used:    1
  6746 ;; Hardware stack levels required when called:    7
  6747 ;; This function calls:
  6748 ;;		Nothing
  6749 ;; This function is called by:
  6750 ;;		_Event_DIPSwitch
  6751 ;;		_Event_HMI_DIPSwitch
  6752 ;;		_Event_HMI_LeftButton
  6753 ;;		_Event_HMI_RightButton
  6754 ;; This function uses a non-reentrant model
  6755 ;;
  6756                           
  6757                           	psect	text26
  6758  01803C                     __ptext26:
  6759                           	opt stack 0
  6760  01803C                     _HMI_SetBar:
  6761                           	opt stack 19
  6762                           
  6763                           ; BSR set to: 1
  6764                           ;incstack = 0
  6765                           ;HMI_SetBar@pValue stored from wreg
  6766  01803C  0100               	movlb	0	; () banked
  6767  01803E  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
  6768                           
  6769                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  6770  018040  C060  F12E         	movff	HMI_SetBar@pValue,_HMIBoard+7
  6771  018044  0012               	return		;funcret
  6772  018046                     __end_of_HMI_SetBar:
  6773                           	opt stack 0
  6774                           tosu	equ	0xFFF
  6775                           tosh	equ	0xFFE
  6776                           tosl	equ	0xFFD
  6777                           pclath	equ	0xFFA
  6778                           tblptru	equ	0xFF8
  6779                           tblptrh	equ	0xFF7
  6780                           tblptrl	equ	0xFF6
  6781                           tablat	equ	0xFF5
  6782                           prodh	equ	0xFF4
  6783                           prodl	equ	0xFF3
  6784                           postinc0	equ	0xFEE
  6785                           wreg	equ	0xFE8
  6786                           indf1	equ	0xFE7
  6787                           postdec1	equ	0xFE5
  6788                           fsr1h	equ	0xFE2
  6789                           fsr1l	equ	0xFE1
  6790                           indf2	equ	0xFDF
  6791                           postinc2	equ	0xFDE
  6792                           postdec2	equ	0xFDD
  6793                           plusw2	equ	0xFDB
  6794                           fsr2h	equ	0xFDA
  6795                           fsr2l	equ	0xFD9
  6796                           status	equ	0xFD8
  6797                           
  6798 ;; *************** function _HMI_GetBar *****************
  6799 ;; Defined at:
  6800 ;;		line 209 in file "HMI.c"
  6801 ;; Parameters:    Size  Location     Type
  6802 ;;		None
  6803 ;; Auto vars:     Size  Location     Type
  6804 ;;		None
  6805 ;; Return value:  Size  Location     Type
  6806 ;;                  1    wreg      unsigned char 
  6807 ;; Registers used:
  6808 ;;		wreg, status,2
  6809 ;; Tracked objects:
  6810 ;;		On entry : 0/0
  6811 ;;		On exit  : 0/0
  6812 ;;		Unchanged: 0/0
  6813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;Total ram usage:        0 bytes
  6819 ;; Hardware stack levels used:    1
  6820 ;; Hardware stack levels required when called:    7
  6821 ;; This function calls:
  6822 ;;		Nothing
  6823 ;; This function is called by:
  6824 ;;		_Event_DIPSwitch
  6825 ;;		_Event_HMI_DIPSwitch
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text27
  6830  01806A                     __ptext27:
  6831                           	opt stack 0
  6832  01806A                     _HMI_GetBar:
  6833                           	opt stack 19
  6834                           
  6835                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  6836                           
  6837                           ;incstack = 0
  6838  01806A  0101               	movlb	1	; () banked
  6839  01806C  512E               	movf	(_HMIBoard+7)& (0+255),w,b
  6840  01806E  0012               	return	
  6841  018070                     __end_of_HMI_GetBar:
  6842                           	opt stack 0
  6843                           tosu	equ	0xFFF
  6844                           tosh	equ	0xFFE
  6845                           tosl	equ	0xFFD
  6846                           pclath	equ	0xFFA
  6847                           tblptru	equ	0xFF8
  6848                           tblptrh	equ	0xFF7
  6849                           tblptrl	equ	0xFF6
  6850                           tablat	equ	0xFF5
  6851                           prodh	equ	0xFF4
  6852                           prodl	equ	0xFF3
  6853                           postinc0	equ	0xFEE
  6854                           wreg	equ	0xFE8
  6855                           indf1	equ	0xFE7
  6856                           postdec1	equ	0xFE5
  6857                           fsr1h	equ	0xFE2
  6858                           fsr1l	equ	0xFE1
  6859                           indf2	equ	0xFDF
  6860                           postinc2	equ	0xFDE
  6861                           postdec2	equ	0xFDD
  6862                           plusw2	equ	0xFDB
  6863                           fsr2h	equ	0xFDA
  6864                           fsr2l	equ	0xFD9
  6865                           status	equ	0xFD8
  6866                           
  6867 ;; *************** function _FunctADC *****************
  6868 ;; Defined at:
  6869 ;;		line 57 in file "Functions.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;		None
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;		None
  6874 ;; Return value:  Size  Location     Type
  6875 ;;                  1    wreg      void 
  6876 ;; Registers used:
  6877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 0/0
  6881 ;;		Unchanged: 0/0
  6882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6887 ;;Total ram usage:        0 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    9
  6890 ;; This function calls:
  6891 ;;		_ADC_Start
  6892 ;; This function is called by:
  6893 ;;		_inputVar
  6894 ;; This function uses a non-reentrant model
  6895 ;;
  6896                           
  6897                           	psect	text28
  6898  017FA2                     __ptext28:
  6899                           	opt stack 0
  6900  017FA2                     _FunctADC:
  6901                           	opt stack 20
  6902                           
  6903                           ;Functions.c: 58: ADC_Start(&ADC_AN0);
  6904                           
  6905                           ; BSR set to: 1
  6906                           ;incstack = 0
  6907  017FA2  0EDD               	movlw	low _ADC_AN0
  6908  017FA4  0100               	movlb	0	; () banked
  6909  017FA6  6F62               	movwf	ADC_Start@pInput& (0+255),b
  6910  017FA8  0E01               	movlw	high _ADC_AN0
  6911  017FAA  0100               	movlb	0	; () banked
  6912  017FAC  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  6913  017FAE  ECFE  F0B4         	call	_ADC_Start	;wreg free
  6914  017FB2  0012               	return		;funcret
  6915  017FB4                     __end_of_FunctADC:
  6916                           	opt stack 0
  6917                           tosu	equ	0xFFF
  6918                           tosh	equ	0xFFE
  6919                           tosl	equ	0xFFD
  6920                           pclath	equ	0xFFA
  6921                           tblptru	equ	0xFF8
  6922                           tblptrh	equ	0xFF7
  6923                           tblptrl	equ	0xFF6
  6924                           tablat	equ	0xFF5
  6925                           prodh	equ	0xFF4
  6926                           prodl	equ	0xFF3
  6927                           postinc0	equ	0xFEE
  6928                           wreg	equ	0xFE8
  6929                           indf1	equ	0xFE7
  6930                           postdec1	equ	0xFE5
  6931                           fsr1h	equ	0xFE2
  6932                           fsr1l	equ	0xFE1
  6933                           indf2	equ	0xFDF
  6934                           postinc2	equ	0xFDE
  6935                           postdec2	equ	0xFDD
  6936                           plusw2	equ	0xFDB
  6937                           fsr2h	equ	0xFDA
  6938                           fsr2l	equ	0xFD9
  6939                           status	equ	0xFD8
  6940                           
  6941 ;; *************** function _ADC_Start *****************
  6942 ;; Defined at:
  6943 ;;		line 114 in file "Library/ADC.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;  pInput          2    2[BANK0 ] PTR struct ADC
  6946 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
  6947 ;;		 -> NULL(0), 
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      void 
  6952 ;; Registers used:
  6953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6959 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;Total ram usage:        4 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    8
  6966 ;; This function calls:
  6967 ;;		_ADC_Off
  6968 ;;		_ADC_On
  6969 ;;		_ADC_SetChannel
  6970 ;; This function is called by:
  6971 ;;		_FunctADC
  6972 ;; This function uses a non-reentrant model
  6973 ;;
  6974                           
  6975                           	psect	text29
  6976  0169FC                     __ptext29:
  6977                           	opt stack 0
  6978  0169FC                     _ADC_Start:
  6979                           	opt stack 20
  6980                           
  6981                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
  6982                           
  6983                           ;incstack = 0
  6984  0169FC  B2C2               	btfsc	4034,1,c	;volatile
  6985  0169FE  0012               	return	
  6986  016A00                     
  6987                           ;ADC.c: 128: {
  6988                           ;ADC.c: 129: ADC_Off();
  6989                           
  6990                           ;ADC.c: 127: for(;;)
  6991  016A00  EC31  F0C0         	call	_ADC_Off	;wreg free
  6992                           
  6993                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
  6994  016A04  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
  6995  016A08  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
  6996  016A0C  50DF               	movf	indf2,w,c
  6997  016A0E  EC58  F0BF         	call	_ADC_SetChannel
  6998                           
  6999                           ;ADC.c: 131: ADC_On();
  7000  016A12  EC3E  F0C0         	call	_ADC_On	;wreg free
  7001                           
  7002                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
  7003  016A16  82C2               	bsf	4034,1,c	;volatile
  7004  016A18  B2C2               	btfsc	4034,1,c	;volatile
  7005  016A1A  D7FE               	goto	l1280
  7006                           
  7007                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
  7008  016A1C  50C3               	movf	4035,w,c	;volatile
  7009  016A1E  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
  7010  016A22  0100               	movlb	0	; () banked
  7011  016A24  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
  7012  016A26  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
  7013  016A2A  0100               	movlb	0	; () banked
  7014  016A2C  6B64               	clrf	??_ADC_Start& (0+255),b
  7015  016A2E  0100               	movlb	0	; () banked
  7016  016A30  1364               	iorwf	??_ADC_Start& (0+255),f,b
  7017  016A32  0E00               	movlw	0
  7018  016A34  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
  7019  016A36  0100               	movlb	0	; () banked
  7020  016A38  EE20 F001          	lfsr	2,1
  7021  016A3C  5162               	movf	ADC_Start@pInput& (0+255),w,b
  7022  016A3E  26D9               	addwf	fsr2l,f,c
  7023  016A40  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  7024  016A42  22DA               	addwfc	fsr2h,f,c
  7025  016A44  C064  FFDE         	movff	??_ADC_Start,postinc2
  7026  016A48  C065  FFDD         	movff	??_ADC_Start+1,postdec2
  7027                           
  7028                           ;ADC.c: 141: if (pInput->mNext == 0)
  7029  016A4C  0100               	movlb	0	; () banked
  7030  016A4E  EE20 F003          	lfsr	2,3
  7031  016A52  5162               	movf	ADC_Start@pInput& (0+255),w,b
  7032  016A54  26D9               	addwf	fsr2l,f,c
  7033  016A56  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  7034  016A58  22DA               	addwfc	fsr2h,f,c
  7035  016A5A  50DE               	movf	postinc2,w,c
  7036  016A5C  10DE               	iorwf	postinc2,w,c
  7037  016A5E  B4D8               	btfsc	status,2,c
  7038  016A60  D00C               	goto	l1283
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;ADC.c: 145: pInput = pInput->mNext;
  7042                           
  7043                           ; BSR set to: 0
  7044                           
  7045                           ; BSR set to: 0
  7046                           ;ADC.c: 142: break;
  7047  016A62  0100               	movlb	0	; () banked
  7048  016A64  EE20 F003          	lfsr	2,3
  7049  016A68  5162               	movf	ADC_Start@pInput& (0+255),w,b
  7050  016A6A  26D9               	addwf	fsr2l,f,c
  7051  016A6C  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  7052  016A6E  22DA               	addwfc	fsr2h,f,c
  7053  016A70  CFDE F062          	movff	postinc2,ADC_Start@pInput
  7054  016A74  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
  7055                           
  7056                           ;ADC.c: 146: }
  7057  016A78  D7C3               	goto	l1276
  7058  016A7A                     l1283:
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;ADC.c: 147: ADC_Off();
  7062                           
  7063                           ; BSR set to: 0
  7064  016A7A  EC31  F0C0         	call	_ADC_Off	;wreg free
  7065  016A7E  0012               	return		;funcret
  7066  016A80                     __end_of_ADC_Start:
  7067                           	opt stack 0
  7068                           tosu	equ	0xFFF
  7069                           tosh	equ	0xFFE
  7070                           tosl	equ	0xFFD
  7071                           pclath	equ	0xFFA
  7072                           tblptru	equ	0xFF8
  7073                           tblptrh	equ	0xFF7
  7074                           tblptrl	equ	0xFF6
  7075                           tablat	equ	0xFF5
  7076                           prodh	equ	0xFF4
  7077                           prodl	equ	0xFF3
  7078                           postinc0	equ	0xFEE
  7079                           wreg	equ	0xFE8
  7080                           indf1	equ	0xFE7
  7081                           postdec1	equ	0xFE5
  7082                           fsr1h	equ	0xFE2
  7083                           fsr1l	equ	0xFE1
  7084                           indf2	equ	0xFDF
  7085                           postinc2	equ	0xFDE
  7086                           postdec2	equ	0xFDD
  7087                           plusw2	equ	0xFDB
  7088                           fsr2h	equ	0xFDA
  7089                           fsr2l	equ	0xFD9
  7090                           status	equ	0xFD8
  7091                           
  7092 ;; *************** function _initialise *****************
  7093 ;; Defined at:
  7094 ;;		line 62 in file "main.c"
  7095 ;; Parameters:    Size  Location     Type
  7096 ;;		None
  7097 ;; Auto vars:     Size  Location     Type
  7098 ;;		None
  7099 ;; Return value:  Size  Location     Type
  7100 ;;                  1    wreg      void 
  7101 ;; Registers used:
  7102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7103 ;; Tracked objects:
  7104 ;;		On entry : 0/0
  7105 ;;		On exit  : 0/0
  7106 ;;		Unchanged: 0/0
  7107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7110 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7111 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7112 ;;Total ram usage:        0 bytes
  7113 ;; Hardware stack levels used:    1
  7114 ;; Hardware stack levels required when called:   17
  7115 ;; This function calls:
  7116 ;;		_Console_Init
  7117 ;;		_FunctInitADC
  7118 ;;		_FunctInitButton
  7119 ;;		_HMI_Init
  7120 ;;		_ISR_Enable
  7121 ;;		_LCD_Init
  7122 ;;		_MXK_BlockSwitchTo
  7123 ;;		_MXK_Dequeue
  7124 ;;		_MXK_Init
  7125 ;;		_MXK_Release
  7126 ;;		_Motor_Init
  7127 ;; This function is called by:
  7128 ;;		_main
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text30
  7133  0170D2                     __ptext30:
  7134                           	opt stack 0
  7135  0170D2                     _initialise:
  7136                           	opt stack 13
  7137                           
  7138                           ;main.c: 64: MXK_Init();
  7139                           
  7140                           ;incstack = 0
  7141  0170D2  ECF4  F0A1         	call	_MXK_Init	;wreg free
  7142                           
  7143                           ;main.c: 67: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  7144  0170D6  0E01               	movlw	1
  7145  0170D8  ECA1  F0BC         	call	_MXK_BlockSwitchTo
  7146  0170DC  0900               	iorlw	0
  7147  0170DE  B4D8               	btfsc	status,2,c
  7148  0170E0  D00C               	goto	l2040
  7149                           
  7150                           ;main.c: 68: HMI_Init();
  7151  0170E2  ECB3  F099         	call	_HMI_Init	;wreg free
  7152                           
  7153                           ;main.c: 69: LCD_Init();
  7154  0170E6  ECB4  F0A2         	call	_LCD_Init	;wreg free
  7155                           
  7156                           ;main.c: 70: Console_Init();
  7157  0170EA  EC74  F0B4         	call	_Console_Init	;wreg free
  7158                           
  7159                           ;main.c: 71: if (MXK_Release())
  7160  0170EE  EC4A  F0BF         	call	_MXK_Release	;wreg free
  7161  0170F2  0900               	iorlw	0
  7162  0170F4  A4D8               	btfss	status,2,c
  7163                           
  7164                           ;main.c: 72: MXK_Dequeue();
  7165  0170F6  EC82  F0BC         	call	_MXK_Dequeue	;wreg free
  7166  0170FA                     l2040:
  7167                           
  7168                           ;main.c: 73: }
  7169                           ;main.c: 76: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  7170  0170FA  0E08               	movlw	8
  7171  0170FC  ECA1  F0BC         	call	_MXK_BlockSwitchTo
  7172  017100  0900               	iorlw	0
  7173  017102  B4D8               	btfsc	status,2,c
  7174  017104  D013               	goto	l2042
  7175                           
  7176                           ;main.c: 77: Motor_Init(&Stepper, 0b1000);
  7177  017106  0E41               	movlw	low _Stepper
  7178  017108  0100               	movlb	0	; () banked
  7179  01710A  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
  7180  01710C  0E00               	movlw	high _Stepper
  7181  01710E  0100               	movlb	0	; () banked
  7182  017110  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  7183  017112  0E00               	movlw	0
  7184  017114  0100               	movlb	0	; () banked
  7185  017116  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  7186  017118  0E08               	movlw	8
  7187  01711A  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
  7188  01711C  EC9D  F0AA         	call	_Motor_Init	;wreg free
  7189                           
  7190                           ;main.c: 78: if (MXK_Release())
  7191  017120  EC4A  F0BF         	call	_MXK_Release	;wreg free
  7192  017124  0900               	iorlw	0
  7193  017126  A4D8               	btfss	status,2,c
  7194                           
  7195                           ;main.c: 79: MXK_Dequeue();
  7196  017128  EC82  F0BC         	call	_MXK_Dequeue	;wreg free
  7197  01712C                     l2042:
  7198                           
  7199                           ;main.c: 80: }
  7200                           ;main.c: 83: ISR_Enable();
  7201  01712C  EC23  F0C0         	call	_ISR_Enable	;wreg free
  7202                           
  7203                           ;main.c: 86: FunctInitADC();
  7204  017130  EC24  F0AF         	call	_FunctInitADC	;wreg free
  7205                           
  7206                           ;main.c: 89: FunctInitButton();
  7207  017134  ECC6  F0B1         	call	_FunctInitButton	;wreg free
  7208  017138  0012               	return		;funcret
  7209  01713A                     __end_of_initialise:
  7210                           	opt stack 0
  7211                           tosu	equ	0xFFF
  7212                           tosh	equ	0xFFE
  7213                           tosl	equ	0xFFD
  7214                           pclath	equ	0xFFA
  7215                           tblptru	equ	0xFF8
  7216                           tblptrh	equ	0xFF7
  7217                           tblptrl	equ	0xFF6
  7218                           tablat	equ	0xFF5
  7219                           prodh	equ	0xFF4
  7220                           prodl	equ	0xFF3
  7221                           postinc0	equ	0xFEE
  7222                           wreg	equ	0xFE8
  7223                           indf1	equ	0xFE7
  7224                           postdec1	equ	0xFE5
  7225                           fsr1h	equ	0xFE2
  7226                           fsr1l	equ	0xFE1
  7227                           indf2	equ	0xFDF
  7228                           postinc2	equ	0xFDE
  7229                           postdec2	equ	0xFDD
  7230                           plusw2	equ	0xFDB
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function _Motor_Init *****************
  7236 ;; Defined at:
  7237 ;;		line 26 in file "Library/Motor.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  7240 ;;		 -> Stepper(6), 
  7241 ;;  pAddress        2   47[BANK0 ] unsigned short 
  7242 ;; Auto vars:     Size  Location     Type
  7243 ;;		None
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      void 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7253 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7257 ;;Total ram usage:        4 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:   12
  7260 ;; This function calls:
  7261 ;;		_Port_SetPin
  7262 ;;		_Port_SetPinType
  7263 ;;		_Timer0_Init
  7264 ;; This function is called by:
  7265 ;;		_initialise
  7266 ;; This function uses a non-reentrant model
  7267 ;;
  7268                           
  7269                           	psect	text31
  7270  01553A                     __ptext31:
  7271                           	opt stack 0
  7272  01553A                     _Motor_Init:
  7273                           	opt stack 17
  7274                           
  7275                           ;Motor.c: 28: pMotor->mDelta = 0;
  7276                           
  7277                           ;incstack = 0
  7278  01553A  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
  7279  01553E  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  7280  015542  0E00               	movlw	0
  7281  015544  6EDE               	movwf	postinc2,c
  7282  015546  0E00               	movlw	0
  7283  015548  6EDD               	movwf	postdec2,c
  7284                           
  7285                           ;Motor.c: 29: pMotor->mFrequency = 0;
  7286  01554A  0100               	movlb	0	; () banked
  7287  01554C  EE20 F002          	lfsr	2,2
  7288  015550  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  7289  015552  26D9               	addwf	fsr2l,f,c
  7290  015554  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  7291  015556  22DA               	addwfc	fsr2h,f,c
  7292  015558  0E00               	movlw	0
  7293  01555A  6EDE               	movwf	postinc2,c
  7294  01555C  0E00               	movlw	0
  7295  01555E  6EDD               	movwf	postdec2,c
  7296                           
  7297                           ; BSR set to: 0
  7298                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  7299  015560  0100               	movlb	0	; () banked
  7300  015562  EE20 F004          	lfsr	2,4
  7301  015566  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  7302  015568  26D9               	addwf	fsr2l,f,c
  7303  01556A  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  7304  01556C  22DA               	addwfc	fsr2h,f,c
  7305  01556E  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
  7306  015572  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  7310  015576  0E95               	movlw	low _PortE
  7311  015578  0100               	movlb	0	; () banked
  7312  01557A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7313  01557C  0E01               	movlw	high _PortE
  7314  01557E  0100               	movlb	0	; () banked
  7315  015580  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7316  015582  0E00               	movlw	0
  7317  015584  0100               	movlb	0	; () banked
  7318  015586  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7319  015588  0E03               	movlw	3
  7320  01558A  0100               	movlb	0	; () banked
  7321  01558C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7322  01558E  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7323                           
  7324                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  7325  015592  0E95               	movlw	low _PortE
  7326  015594  0100               	movlb	0	; () banked
  7327  015596  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7328  015598  0E01               	movlw	high _PortE
  7329  01559A  0100               	movlb	0	; () banked
  7330  01559C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7331  01559E  0E01               	movlw	1
  7332  0155A0  0100               	movlb	0	; () banked
  7333  0155A2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7334  0155A4  0E03               	movlw	3
  7335  0155A6  0100               	movlb	0	; () banked
  7336  0155A8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7337  0155AA  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7338                           
  7339                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  7340  0155AE  0E95               	movlw	low _PortE
  7341  0155B0  0100               	movlb	0	; () banked
  7342  0155B2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7343  0155B4  0E01               	movlw	high _PortE
  7344  0155B6  0100               	movlb	0	; () banked
  7345  0155B8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7346  0155BA  0E00               	movlw	0
  7347  0155BC  0100               	movlb	0	; () banked
  7348  0155BE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7349  0155C0  0E00               	movlw	0
  7350  0155C2  0100               	movlb	0	; () banked
  7351  0155C4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7352  0155C6  EC37  F0AC         	call	_Port_SetPin	;wreg free
  7353                           
  7354                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  7355  0155CA  0E95               	movlw	low _PortE
  7356  0155CC  0100               	movlb	0	; () banked
  7357  0155CE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7358  0155D0  0E01               	movlw	high _PortE
  7359  0155D2  0100               	movlb	0	; () banked
  7360  0155D4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7361  0155D6  0E01               	movlw	1
  7362  0155D8  0100               	movlb	0	; () banked
  7363  0155DA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7364  0155DC  0E00               	movlw	0
  7365  0155DE  0100               	movlb	0	; () banked
  7366  0155E0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7367  0155E2  EC37  F0AC         	call	_Port_SetPin	;wreg free
  7368                           
  7369                           ;Motor.c: 38: lStepFunction = Motor_Step;
  7370  0155E6  0E00               	movlw	low _Motor_Step
  7371  0155E8  6E29               	movwf	_lStepFunction,c
  7372  0155EA  0E4B               	movlw	high _Motor_Step
  7373  0155EC  6E2A               	movwf	_lStepFunction+1,c
  7374  0155EE  0E01               	movlw	low (_Motor_Step shr (0+16))
  7375  0155F0  6E2B               	movwf	_lStepFunction+2,c
  7376                           
  7377                           ;Motor.c: 39: Timer0_Init(1000);
  7378  0155F2  0EE8               	movlw	232
  7379  0155F4  0100               	movlb	0	; () banked
  7380  0155F6  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
  7381  0155F8  0E03               	movlw	3
  7382  0155FA  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  7383  0155FC  0E00               	movlw	0
  7384  0155FE  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  7385  015600  0E00               	movlw	0
  7386  015602  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  7387  015604  ECD0  F0A4         	call	_Timer0_Init	;wreg free
  7388  015608  0012               	return		;funcret
  7389  01560A                     __end_of_Motor_Init:
  7390                           	opt stack 0
  7391                           tosu	equ	0xFFF
  7392                           tosh	equ	0xFFE
  7393                           tosl	equ	0xFFD
  7394                           pclath	equ	0xFFA
  7395                           tblptru	equ	0xFF8
  7396                           tblptrh	equ	0xFF7
  7397                           tblptrl	equ	0xFF6
  7398                           tablat	equ	0xFF5
  7399                           prodh	equ	0xFF4
  7400                           prodl	equ	0xFF3
  7401                           postinc0	equ	0xFEE
  7402                           wreg	equ	0xFE8
  7403                           indf1	equ	0xFE7
  7404                           postdec1	equ	0xFE5
  7405                           fsr1h	equ	0xFE2
  7406                           fsr1l	equ	0xFE1
  7407                           indf2	equ	0xFDF
  7408                           postinc2	equ	0xFDE
  7409                           postdec2	equ	0xFDD
  7410                           plusw2	equ	0xFDB
  7411                           fsr2h	equ	0xFDA
  7412                           fsr2l	equ	0xFD9
  7413                           status	equ	0xFD8
  7414                           
  7415 ;; *************** function _MXK_Init *****************
  7416 ;; Defined at:
  7417 ;;		line 33 in file "Library/MXK.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;		None
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;		None
  7422 ;; Return value:  Size  Location     Type
  7423 ;;                  1    wreg      void 
  7424 ;; Registers used:
  7425 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7434 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7435 ;;Total ram usage:        0 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:   16
  7438 ;; This function calls:
  7439 ;;		_LED_Init
  7440 ;;		_Port_Init
  7441 ;;		_Port_SetPin
  7442 ;;		_Port_SetPinType
  7443 ;;		_Port_SetQuadType
  7444 ;;		_Port_SetType
  7445 ;;		_delay_ms
  7446 ;; This function is called by:
  7447 ;;		_initialise
  7448 ;; This function uses a non-reentrant model
  7449 ;;
  7450                           
  7451                           	psect	text32
  7452  0143E8                     __ptext32:
  7453                           	opt stack 0
  7454  0143E8                     _MXK_Init:
  7455                           	opt stack 13
  7456                           
  7457                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  7458                           
  7459                           ;incstack = 0
  7460  0143E8  0E01               	movlw	1
  7461  0143EA  6E4B               	movwf	_Bus_State,c
  7462                           
  7463                           ;MXK.c: 36: lQueue = (Function)0;
  7464  0143EC  0E00               	movlw	0
  7465  0143EE  0100               	movlb	0	; () banked
  7466  0143F0  6FDB               	movwf	_lQueue& (0+255),b	;volatile
  7467  0143F2  0E00               	movlw	0
  7468  0143F4  0100               	movlb	0	; () banked
  7469  0143F6  6FDC               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7470  0143F8  0E00               	movlw	0
  7471  0143FA  0100               	movlb	0	; () banked
  7472  0143FC  6FDD               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7473                           
  7474                           ; BSR set to: 0
  7475                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  7476  0143FE  0E64               	movlw	low _PortA
  7477  014400  0100               	movlb	0	; () banked
  7478  014402  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7479  014404  0E02               	movlw	high _PortA
  7480  014406  0100               	movlb	0	; () banked
  7481  014408  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7482  01440A  0E00               	movlw	0
  7483  01440C  0100               	movlb	0	; () banked
  7484  01440E  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7485  014410  EC15  F09E         	call	_Port_Init	;wreg free
  7486                           
  7487                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  7488  014414  0EA9               	movlw	low _PortB
  7489  014416  0100               	movlb	0	; () banked
  7490  014418  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7491  01441A  0E01               	movlw	high _PortB
  7492  01441C  0100               	movlb	0	; () banked
  7493  01441E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7494  014420  0E01               	movlw	1
  7495  014422  0100               	movlb	0	; () banked
  7496  014424  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7497  014426  EC15  F09E         	call	_Port_Init	;wreg free
  7498                           
  7499                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  7500  01442A  0EB3               	movlw	low _PortC
  7501  01442C  0100               	movlb	0	; () banked
  7502  01442E  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7503  014430  0E01               	movlw	high _PortC
  7504  014432  0100               	movlb	0	; () banked
  7505  014434  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7506  014436  0E02               	movlw	2
  7507  014438  0100               	movlb	0	; () banked
  7508  01443A  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7509  01443C  EC15  F09E         	call	_Port_Init	;wreg free
  7510                           
  7511                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  7512  014440  0E9F               	movlw	low _PortD
  7513  014442  0100               	movlb	0	; () banked
  7514  014444  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7515  014446  0E01               	movlw	high _PortD
  7516  014448  0100               	movlb	0	; () banked
  7517  01444A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7518  01444C  0E03               	movlw	3
  7519  01444E  0100               	movlb	0	; () banked
  7520  014450  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7521  014452  EC15  F09E         	call	_Port_Init	;wreg free
  7522                           
  7523                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  7524  014456  0E95               	movlw	low _PortE
  7525  014458  0100               	movlb	0	; () banked
  7526  01445A  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7527  01445C  0E01               	movlw	high _PortE
  7528  01445E  0100               	movlb	0	; () banked
  7529  014460  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7530  014462  0E04               	movlw	4
  7531  014464  0100               	movlb	0	; () banked
  7532  014466  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7533  014468  EC15  F09E         	call	_Port_Init	;wreg free
  7534                           
  7535                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  7536  01446C  0EBD               	movlw	low _PortF
  7537  01446E  0100               	movlb	0	; () banked
  7538  014470  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7539  014472  0E01               	movlw	high _PortF
  7540  014474  0100               	movlb	0	; () banked
  7541  014476  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7542  014478  0E05               	movlw	5
  7543  01447A  0100               	movlb	0	; () banked
  7544  01447C  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7545  01447E  EC15  F09E         	call	_Port_Init	;wreg free
  7546                           
  7547                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  7548  014482  0E8B               	movlw	low _PortG
  7549  014484  0100               	movlb	0	; () banked
  7550  014486  6FA0               	movwf	Port_Init@pInput& (0+255),b
  7551  014488  0E01               	movlw	high _PortG
  7552  01448A  0100               	movlb	0	; () banked
  7553  01448C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
  7554  01448E  0E06               	movlw	6
  7555  014490  0100               	movlb	0	; () banked
  7556  014492  6FA2               	movwf	Port_Init@pPort& (0+255),b
  7557  014494  EC15  F09E         	call	_Port_Init	;wreg free
  7558                           
  7559                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  7560  014498  0EBD               	movlw	low _PortF
  7561  01449A  0100               	movlb	0	; () banked
  7562  01449C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7563  01449E  0E01               	movlw	high _PortF
  7564  0144A0  0100               	movlb	0	; () banked
  7565  0144A2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7566  0144A4  0E05               	movlw	5
  7567  0144A6  0100               	movlb	0	; () banked
  7568  0144A8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7569  0144AA  0E00               	movlw	0
  7570  0144AC  0100               	movlb	0	; () banked
  7571  0144AE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7572  0144B0  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7573                           
  7574                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  7575  0144B4  0EA9               	movlw	low _PortB
  7576  0144B6  0100               	movlb	0	; () banked
  7577  0144B8  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
  7578  0144BA  0E01               	movlw	high _PortB
  7579  0144BC  0100               	movlb	0	; () banked
  7580  0144BE  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  7581  0144C0  0E00               	movlw	0
  7582  0144C2  0100               	movlb	0	; () banked
  7583  0144C4  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
  7584  0144C6  0E00               	movlw	0
  7585  0144C8  0100               	movlb	0	; () banked
  7586  0144CA  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
  7587  0144CC  EC6B  F095         	call	_Port_SetQuadType	;wreg free
  7588                           
  7589                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  7590  0144D0  0EBD               	movlw	low _PortF
  7591  0144D2  0100               	movlb	0	; () banked
  7592  0144D4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  7593  0144D6  0E01               	movlw	high _PortF
  7594  0144D8  0100               	movlb	0	; () banked
  7595  0144DA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7596  0144DC  0E06               	movlw	6
  7597  0144DE  0100               	movlb	0	; () banked
  7598  0144E0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  7599  0144E2  0E03               	movlw	3
  7600  0144E4  0100               	movlb	0	; () banked
  7601  0144E6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7602  0144E8  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7603                           
  7604                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  7605  0144EC  0E8B               	movlw	low _PortG
  7606  0144EE  0100               	movlb	0	; () banked
  7607  0144F0  6F9A               	movwf	Port_SetType@pInput& (0+255),b
  7608  0144F2  0E01               	movlw	high _PortG
  7609  0144F4  0100               	movlb	0	; () banked
  7610  0144F6  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
  7611  0144F8  0E03               	movlw	3
  7612  0144FA  0100               	movlb	0	; () banked
  7613  0144FC  6F9C               	movwf	Port_SetType@pType& (0+255),b
  7614  0144FE  EC96  F096         	call	_Port_SetType	;wreg free
  7615                           
  7616                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  7617  014502  0E8B               	movlw	low _PortG
  7618  014504  0100               	movlb	0	; () banked
  7619  014506  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7620  014508  0E01               	movlw	high _PortG
  7621  01450A  0100               	movlb	0	; () banked
  7622  01450C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7623  01450E  0E04               	movlw	4
  7624  014510  0100               	movlb	0	; () banked
  7625  014512  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7626  014514  0E00               	movlw	0
  7627  014516  0100               	movlb	0	; () banked
  7628  014518  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7629  01451A  EC37  F0AC         	call	_Port_SetPin	;wreg free
  7630                           
  7631                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  7632  01451E  0EBD               	movlw	low _PortF
  7633  014520  0100               	movlb	0	; () banked
  7634  014522  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  7635  014524  0E01               	movlw	high _PortF
  7636  014526  0100               	movlb	0	; () banked
  7637  014528  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7638  01452A  0E06               	movlw	6
  7639  01452C  0100               	movlb	0	; () banked
  7640  01452E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  7641  014530  0E01               	movlw	1
  7642  014532  0100               	movlb	0	; () banked
  7643  014534  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  7644  014536  EC37  F0AC         	call	_Port_SetPin	;wreg free
  7645                           
  7646                           ;MXK.c: 55: LED_Init(eLED1);
  7647  01453A  0E00               	movlw	0
  7648  01453C  EC33  F0B9         	call	_LED_Init
  7649                           
  7650                           ;MXK.c: 56: LED_Init(eLED2);
  7651  014540  0E01               	movlw	1
  7652  014542  EC33  F0B9         	call	_LED_Init
  7653                           
  7654                           ;MXK.c: 58: PIR1 = 0;
  7655  014546  0E00               	movlw	0
  7656  014548  6E9E               	movwf	3998,c	;volatile
  7657                           
  7658                           ;MXK.c: 59: PIR2 = 0;
  7659  01454A  0E00               	movlw	0
  7660  01454C  6EA1               	movwf	4001,c	;volatile
  7661                           
  7662                           ;MXK.c: 60: PIR3 = 0;
  7663  01454E  0E00               	movlw	0
  7664  014550  6EA4               	movwf	4004,c	;volatile
  7665                           
  7666                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  7667  014552  8E9B               	bsf	3995,7,c	;volatile
  7668                           
  7669                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  7670  014554  8C9B               	bsf	3995,6,c	;volatile
  7671                           
  7672                           ;MXK.c: 66: delay_ms(100);
  7673  014556  0E00               	movlw	0
  7674  014558  0100               	movlb	0	; () banked
  7675  01455A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
  7676  01455C  0E64               	movlw	100
  7677  01455E  6F60               	movwf	delay_ms@ms& (0+255),b
  7678  014560  ECFF  F0B7         	call	_delay_ms	;wreg free
  7679                           
  7680                           ;MXK.c: 68: RCONbits.IPEN = 1;
  7681  014564  8ED0               	bsf	4048,7,c	;volatile
  7682  014566  0012               	return		;funcret
  7683  014568                     __end_of_MXK_Init:
  7684                           	opt stack 0
  7685                           tosu	equ	0xFFF
  7686                           tosh	equ	0xFFE
  7687                           tosl	equ	0xFFD
  7688                           pclath	equ	0xFFA
  7689                           tblptru	equ	0xFF8
  7690                           tblptrh	equ	0xFF7
  7691                           tblptrl	equ	0xFF6
  7692                           tablat	equ	0xFF5
  7693                           prodh	equ	0xFF4
  7694                           prodl	equ	0xFF3
  7695                           postinc0	equ	0xFEE
  7696                           wreg	equ	0xFE8
  7697                           indf1	equ	0xFE7
  7698                           postdec1	equ	0xFE5
  7699                           fsr1h	equ	0xFE2
  7700                           fsr1l	equ	0xFE1
  7701                           indf2	equ	0xFDF
  7702                           postinc2	equ	0xFDE
  7703                           postdec2	equ	0xFDD
  7704                           plusw2	equ	0xFDB
  7705                           fsr2h	equ	0xFDA
  7706                           fsr2l	equ	0xFD9
  7707                           status	equ	0xFD8
  7708                           
  7709 ;; *************** function _Port_Init *****************
  7710 ;; Defined at:
  7711 ;;		line 150 in file "Library/Port.c"
  7712 ;; Parameters:    Size  Location     Type
  7713 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  7714 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7715 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7716 ;;  pPort           1   66[BANK0 ] enum E6786
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  i               1   69[BANK0 ] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;                  1    wreg      void 
  7721 ;; Registers used:
  7722 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7728 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7731 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7732 ;;Total ram usage:        6 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:   15
  7735 ;; This function calls:
  7736 ;;		_GetPortPORT
  7737 ;;		_GetPortProperties
  7738 ;;		_GetPortTRIS
  7739 ;;		_Port_Set
  7740 ;;		_Port_SetPinType
  7741 ;;		_Port_SetType
  7742 ;;		_Word_GetPair
  7743 ;; This function is called by:
  7744 ;;		_MXK_Init
  7745 ;; This function uses a non-reentrant model
  7746 ;;
  7747                           
  7748                           	psect	text33
  7749  013C2A                     __ptext33:
  7750                           	opt stack 0
  7751  013C2A                     _Port_Init:
  7752                           	opt stack 13
  7753                           
  7754                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  7755                           
  7756                           ;incstack = 0
  7757  013C2A  0100               	movlb	0	; () banked
  7758  013C2C  51A2               	movf	Port_Init@pPort& (0+255),w,b
  7759  013C2E  ECCE  F0B0         	call	_GetPortProperties
  7760  013C32  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  7761  013C36  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7762  013C3A  0100               	movlb	0	; () banked
  7763  013C3C  C060  FFDE         	movff	?_GetPortProperties,postinc2
  7764  013C40  0100               	movlb	0	; () banked
  7765  013C42  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
  7766                           
  7767                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  7768  013C46  0100               	movlb	0	; () banked
  7769  013C48  51A2               	movf	Port_Init@pPort& (0+255),w,b
  7770  013C4A  EC21  F0B1         	call	_GetPortPORT
  7771  013C4E  0100               	movlb	0	; () banked
  7772  013C50  EE20 F006          	lfsr	2,6
  7773  013C54  51A0               	movf	Port_Init@pInput& (0+255),w,b
  7774  013C56  26D9               	addwf	fsr2l,f,c
  7775  013C58  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7776  013C5A  22DA               	addwfc	fsr2h,f,c
  7777  013C5C  0100               	movlb	0	; () banked
  7778  013C5E  C060  FFDE         	movff	?_GetPortPORT,postinc2
  7779  013C62  0100               	movlb	0	; () banked
  7780  013C64  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  7781                           
  7782                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  7783  013C68  0100               	movlb	0	; () banked
  7784  013C6A  51A2               	movf	Port_Init@pPort& (0+255),w,b
  7785  013C6C  EC21  F0B1         	call	_GetPortPORT
  7786  013C70  0100               	movlb	0	; () banked
  7787  013C72  EE20 F004          	lfsr	2,4
  7788  013C76  51A0               	movf	Port_Init@pInput& (0+255),w,b
  7789  013C78  26D9               	addwf	fsr2l,f,c
  7790  013C7A  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7791  013C7C  22DA               	addwfc	fsr2h,f,c
  7792  013C7E  0100               	movlb	0	; () banked
  7793  013C80  C060  FFDE         	movff	?_GetPortPORT,postinc2
  7794  013C84  0100               	movlb	0	; () banked
  7795  013C86  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
  7796                           
  7797                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  7798  013C8A  0100               	movlb	0	; () banked
  7799  013C8C  51A2               	movf	Port_Init@pPort& (0+255),w,b
  7800  013C8E  EC7B  F0B0         	call	_GetPortTRIS
  7801  013C92  0100               	movlb	0	; () banked
  7802  013C94  EE20 F002          	lfsr	2,2
  7803  013C98  51A0               	movf	Port_Init@pInput& (0+255),w,b
  7804  013C9A  26D9               	addwf	fsr2l,f,c
  7805  013C9C  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7806  013C9E  22DA               	addwfc	fsr2h,f,c
  7807  013CA0  0100               	movlb	0	; () banked
  7808  013CA2  C060  FFDE         	movff	?_GetPortTRIS,postinc2
  7809  013CA6  0100               	movlb	0	; () banked
  7810  013CA8  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
  7811                           
  7812                           ; BSR set to: 0
  7813                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  7814  013CAC  0100               	movlb	0	; () banked
  7815  013CAE  EE20 F004          	lfsr	2,4
  7816  013CB2  51A0               	movf	Port_Init@pInput& (0+255),w,b
  7817  013CB4  26D9               	addwf	fsr2l,f,c
  7818  013CB6  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7819  013CB8  22DA               	addwfc	fsr2h,f,c
  7820  013CBA  CFDE F0A3          	movff	postinc2,??_Port_Init
  7821  013CBE  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  7822  013CC2  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  7823  013CC6  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  7824  013CCA  0E00               	movlw	0
  7825  013CCC  6EDF               	movwf	indf2,c
  7826                           
  7827                           ; BSR set to: 0
  7828                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  7829  013CCE  0100               	movlb	0	; () banked
  7830  013CD0  EE20 F002          	lfsr	2,2
  7831  013CD4  51A0               	movf	Port_Init@pInput& (0+255),w,b
  7832  013CD6  26D9               	addwf	fsr2l,f,c
  7833  013CD8  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7834  013CDA  22DA               	addwfc	fsr2h,f,c
  7835  013CDC  CFDE F0A3          	movff	postinc2,??_Port_Init
  7836  013CE0  CFDD F0A4          	movff	postdec2,??_Port_Init+1
  7837  013CE4  C0A3  FFD9         	movff	??_Port_Init,fsr2l
  7838  013CE8  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
  7839  013CEC  0EFF               	movlw	255
  7840  013CEE  6EDF               	movwf	indf2,c
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  7844  013CF0  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
  7845  013CF4  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  7846  013CF8  0E00               	movlw	0
  7847  013CFA  0100               	movlb	0	; () banked
  7848  013CFC  6F9C               	movwf	Port_SetType@pType& (0+255),b
  7849  013CFE  EC96  F096         	call	_Port_SetType	;wreg free
  7850                           
  7851                           ;Port.c: 166: UINT8 i;
  7852                           ;Port.c: 167: for (i=0; i<8; i++)
  7853  013D02  0E00               	movlw	0
  7854  013D04  0100               	movlb	0	; () banked
  7855  013D06  6FA5               	movwf	Port_Init@i& (0+255),b
  7856  013D08                     l14751:
  7857                           
  7858                           ; BSR set to: 0
  7859  013D08  0E07               	movlw	7
  7860  013D0A  0100               	movlb	0	; () banked
  7861  013D0C  65A5               	cpfsgt	Port_Init@i& (0+255),b
  7862  013D0E  D031               	goto	l403
  7863  013D10  D04B               	goto	u12540
  7864  013D12                     
  7865                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  7866                           
  7867                           ; BSR set to: 0
  7868  013D12  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7869  013D16  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7870  013D1A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  7871  013D1E  0E03               	movlw	3
  7872  013D20  0100               	movlb	0	; () banked
  7873  013D22  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7874  013D24  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7875                           
  7876                           ;Port.c: 173: break;
  7877  013D28  D03C               	goto	l405
  7878  013D2A                     
  7879                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  7880  013D2A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7881  013D2E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7882  013D32  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  7883  013D36  0E02               	movlw	2
  7884  013D38  0100               	movlb	0	; () banked
  7885  013D3A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7886  013D3C  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7887                           
  7888                           ;Port.c: 176: break;
  7889  013D40  D030               	goto	l405
  7890  013D42                     
  7891                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  7892  013D42  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7893  013D46  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7894  013D4A  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  7895  013D4E  0E01               	movlw	1
  7896  013D50  0100               	movlb	0	; () banked
  7897  013D52  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7898  013D54  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7899                           
  7900                           ;Port.c: 179: break;
  7901  013D58  D024               	goto	l405
  7902  013D5A                     
  7903                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  7904  013D5A  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7905  013D5E  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7906  013D62  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
  7907  013D66  0E00               	movlw	0
  7908  013D68  0100               	movlb	0	; () banked
  7909  013D6A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  7910  013D6C  EC97  F09B         	call	_Port_SetPinType	;wreg free
  7911                           
  7912                           ;Port.c: 183: }
  7913                           
  7914                           ;Port.c: 182: break;
  7915  013D70  D018               	goto	l405
  7916  013D72                     l403:
  7917  013D72  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
  7918  013D76  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7919  013D7A  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
  7920  013D7E  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
  7921  013D82  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
  7922  013D86  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  7923                           
  7924                           ; Switch size 1, requested type "space"
  7925                           ; Number of cases is 4, Range of values is 0 to 3
  7926                           ; switch strategies available:
  7927                           ; Name         Instructions Cycles
  7928                           ; simple_byte           13     7 (average)
  7929                           ;	Chosen strategy is simple_byte
  7930  013D8A  0A00               	xorlw	0	; case 0
  7931  013D8C  B4D8               	btfsc	status,2,c
  7932  013D8E  D7C1               	goto	l404
  7933  013D90  0A01               	xorlw	1	; case 1
  7934  013D92  B4D8               	btfsc	status,2,c
  7935  013D94  D7D6               	goto	l407
  7936  013D96  0A03               	xorlw	3	; case 2
  7937  013D98  B4D8               	btfsc	status,2,c
  7938  013D9A  D7C7               	goto	l406
  7939  013D9C  0A01               	xorlw	1	; case 3
  7940  013D9E  B4D8               	btfsc	status,2,c
  7941  013DA0  D7DC               	goto	l408
  7942  013DA2                     l405:
  7943  013DA2  0100               	movlb	0	; () banked
  7944  013DA4  2BA5               	incf	Port_Init@i& (0+255),f,b
  7945  013DA6  D7B0               	goto	l14751
  7946  013DA8                     u12540:
  7947                           
  7948                           ; BSR set to: 0
  7949                           ;Port.c: 184: }
  7950                           ;Port.c: 185: Port_Set(pInput, 0x00);
  7951                           
  7952                           ; BSR set to: 0
  7953  013DA8  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
  7954  013DAC  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  7955  013DB0  0E00               	movlw	0
  7956  013DB2  0100               	movlb	0	; () banked
  7957  013DB4  6F71               	movwf	Port_Set@pValue& (0+255),b
  7958  013DB6  EC7C  F08F         	call	_Port_Set	;wreg free
  7959  013DBA  0012               	return		;funcret
  7960  013DBC                     __end_of_Port_Init:
  7961                           	opt stack 0
  7962                           tosu	equ	0xFFF
  7963                           tosh	equ	0xFFE
  7964                           tosl	equ	0xFFD
  7965                           pclath	equ	0xFFA
  7966                           tblptru	equ	0xFF8
  7967                           tblptrh	equ	0xFF7
  7968                           tblptrl	equ	0xFF6
  7969                           tablat	equ	0xFF5
  7970                           prodh	equ	0xFF4
  7971                           prodl	equ	0xFF3
  7972                           postinc0	equ	0xFEE
  7973                           wreg	equ	0xFE8
  7974                           indf1	equ	0xFE7
  7975                           postdec1	equ	0xFE5
  7976                           fsr1h	equ	0xFE2
  7977                           fsr1l	equ	0xFE1
  7978                           indf2	equ	0xFDF
  7979                           postinc2	equ	0xFDE
  7980                           postdec2	equ	0xFDD
  7981                           plusw2	equ	0xFDB
  7982                           fsr2h	equ	0xFDA
  7983                           fsr2l	equ	0xFD9
  7984                           status	equ	0xFD8
  7985                           
  7986 ;; *************** function _Port_SetType *****************
  7987 ;; Defined at:
  7988 ;;		line 513 in file "Library/Port.c"
  7989 ;; Parameters:    Size  Location     Type
  7990 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  7991 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7992 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7993 ;;  pType           1   60[BANK0 ] enum E6795
  7994 ;; Auto vars:     Size  Location     Type
  7995 ;;  Output          1   63[BANK0 ] enum E6475
  7996 ;; Return value:  Size  Location     Type
  7997 ;;                  1    wreg      enum E6475
  7998 ;; Registers used:
  7999 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8000 ;; Tracked objects:
  8001 ;;		On entry : 0/0
  8002 ;;		On exit  : 0/0
  8003 ;;		Unchanged: 0/0
  8004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8005 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8007 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8008 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8009 ;;Total ram usage:        6 bytes
  8010 ;; Hardware stack levels used:    1
  8011 ;; Hardware stack levels required when called:   14
  8012 ;; This function calls:
  8013 ;;		_Port_CheckPortType
  8014 ;;		_Word_SetPair
  8015 ;; This function is called by:
  8016 ;;		_Port_Init
  8017 ;;		_MXK_Init
  8018 ;; This function uses a non-reentrant model
  8019 ;;
  8020                           
  8021                           	psect	text34
  8022  012D2C                     __ptext34:
  8023                           	opt stack 0
  8024  012D2C                     _Port_SetType:
  8025                           	opt stack 14
  8026                           
  8027                           ;Port.c: 515: ePinError Output = ePinErrorState;
  8028                           
  8029                           ;incstack = 0
  8030  012D2C  0E05               	movlw	5
  8031  012D2E  0100               	movlb	0	; () banked
  8032  012D30  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8033                           
  8034                           ;Port.c: 517: switch (pType)
  8035  012D32  D07A               	goto	l509
  8036  012D34                     
  8037                           ; BSR set to: 0
  8038                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  8039                           
  8040                           ; BSR set to: 0
  8041  012D34  0100               	movlb	0	; () banked
  8042  012D36  EE20 F002          	lfsr	2,2
  8043  012D3A  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8044  012D3C  26D9               	addwf	fsr2l,f,c
  8045  012D3E  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8046  012D40  22DA               	addwfc	fsr2h,f,c
  8047  012D42  CFDE F09D          	movff	postinc2,??_Port_SetType
  8048  012D46  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8049  012D4A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8050  012D4E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8051  012D52  0EFF               	movlw	255
  8052  012D54  D067               	goto	L3
  8053  012D56                     
  8054                           ; BSR set to: 0
  8055                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  8056                           
  8057                           ; BSR set to: 0
  8058  012D56  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8059  012D5A  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8060  012D5E  0E01               	movlw	1
  8061  012D60  0100               	movlb	0	; () banked
  8062  012D62  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8063  012D64  EC07  F0BB         	call	_Port_CheckPortType	;wreg free
  8064  012D68  0100               	movlb	0	; () banked
  8065  012D6A  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8066  012D6C  0100               	movlb	0	; () banked
  8067  012D6E  519F               	movf	Port_SetType@Output& (0+255),w,b
  8068  012D70  A4D8               	btfss	status,2,c
  8069  012D72  0012               	return	
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;Port.c: 527: {
  8073                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  8074  012D74  0100               	movlb	0	; () banked
  8075  012D76  EE20 F002          	lfsr	2,2
  8076  012D7A  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8077  012D7C  26D9               	addwf	fsr2l,f,c
  8078  012D7E  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8079  012D80  22DA               	addwfc	fsr2h,f,c
  8080  012D82  CFDE F09D          	movff	postinc2,??_Port_SetType
  8081  012D86  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8082  012D8A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8083  012D8E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8084  012D92  0E00               	movlw	0
  8085  012D94  6EDF               	movwf	indf2,c
  8086                           
  8087                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  8088  012D96  0100               	movlb	0	; () banked
  8089  012D98  EE20 F004          	lfsr	2,4
  8090  012D9C  D036               	goto	L22
  8091  012D9E                     
  8092                           ; BSR set to: 0
  8093                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  8094                           
  8095                           ; BSR set to: 0
  8096  012D9E  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8097  012DA2  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8098  012DA6  0E02               	movlw	2
  8099  012DA8  0100               	movlb	0	; () banked
  8100  012DAA  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8101  012DAC  EC07  F0BB         	call	_Port_CheckPortType	;wreg free
  8102  012DB0  0100               	movlb	0	; () banked
  8103  012DB2  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8104  012DB4  0100               	movlb	0	; () banked
  8105  012DB6  519F               	movf	Port_SetType@Output& (0+255),w,b
  8106  012DB8  A4D8               	btfss	status,2,c
  8107  012DBA  0012               	return	
  8108                           
  8109                           ; BSR set to: 0
  8110                           ;Port.c: 538: {
  8111                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  8112  012DBC  0100               	movlb	0	; () banked
  8113  012DBE  EE20 F002          	lfsr	2,2
  8114  012DC2  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8115  012DC4  26D9               	addwf	fsr2l,f,c
  8116  012DC6  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8117  012DC8  22DA               	addwfc	fsr2h,f,c
  8118  012DCA  CFDE F09D          	movff	postinc2,??_Port_SetType
  8119  012DCE  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8120  012DD2  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8121  012DD6  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8122  012DDA  0EFF               	movlw	255
  8123  012DDC  6EDF               	movwf	indf2,c
  8124                           
  8125                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  8126  012DDE  0100               	movlb	0	; () banked
  8127  012DE0  EE20 F004          	lfsr	2,4
  8128  012DE4  D7AA               	goto	L4
  8129  012DE6                     
  8130                           ; BSR set to: 0
  8131                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  8132                           
  8133                           ; BSR set to: 0
  8134  012DE6  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8135  012DEA  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8136  012DEE  0E00               	movlw	0
  8137  012DF0  0100               	movlb	0	; () banked
  8138  012DF2  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8139  012DF4  EC07  F0BB         	call	_Port_CheckPortType	;wreg free
  8140  012DF8  0100               	movlb	0	; () banked
  8141  012DFA  6F9F               	movwf	Port_SetType@Output& (0+255),b
  8142  012DFC  0100               	movlb	0	; () banked
  8143  012DFE  519F               	movf	Port_SetType@Output& (0+255),w,b
  8144  012E00  A4D8               	btfss	status,2,c
  8145  012E02  0012               	return	
  8146                           
  8147                           ; BSR set to: 0
  8148                           ;Port.c: 549: {
  8149                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  8150  012E04  0100               	movlb	0	; () banked
  8151  012E06  EE20 F002          	lfsr	2,2
  8152  012E0A                     L22:
  8153  012E0A  519A               	movf	Port_SetType@pInput& (0+255),w,b
  8154  012E0C  26D9               	addwf	fsr2l,f,c
  8155  012E0E  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8156  012E10  22DA               	addwfc	fsr2h,f,c
  8157  012E12  CFDE F09D          	movff	postinc2,??_Port_SetType
  8158  012E16  CFDD F09E          	movff	postdec2,??_Port_SetType+1
  8159  012E1A  C09D  FFD9         	movff	??_Port_SetType,fsr2l
  8160  012E1E  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
  8161  012E22  0E00               	movlw	0
  8162  012E24                     L3:
  8163  012E24  6EDF               	movwf	indf2,c
  8164                           
  8165                           ;Port.c: 552: }
  8166  012E26  D00E               	goto	l511
  8167  012E28                     l509:
  8168                           
  8169                           ; BSR set to: 0
  8170                           
  8171                           ; BSR set to: 0
  8172  012E28  0100               	movlb	0	; () banked
  8173  012E2A  519C               	movf	Port_SetType@pType& (0+255),w,b
  8174                           
  8175                           ; Switch size 1, requested type "space"
  8176                           ; Number of cases is 4, Range of values is 0 to 3
  8177                           ; switch strategies available:
  8178                           ; Name         Instructions Cycles
  8179                           ; simple_byte           13     7 (average)
  8180                           ;	Chosen strategy is simple_byte
  8181  012E2C  0A00               	xorlw	0	; case 0
  8182  012E2E  B4D8               	btfsc	status,2,c
  8183  012E30  D781               	goto	l510
  8184  012E32  0A01               	xorlw	1	; case 1
  8185  012E34  B4D8               	btfsc	status,2,c
  8186  012E36  D78F               	goto	l512
  8187  012E38  0A03               	xorlw	3	; case 2
  8188  012E3A  B4D8               	btfsc	status,2,c
  8189  012E3C  D7B0               	goto	l516
  8190  012E3E  0A01               	xorlw	1	; case 3
  8191  012E40  B4D8               	btfsc	status,2,c
  8192  012E42  D7D1               	goto	l519
  8193  012E44                     l511:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  8197                           
  8198                           ; BSR set to: 0
  8199  012E44  0E08               	movlw	8
  8200  012E46  0100               	movlb	0	; () banked
  8201  012E48  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8202  012E4A  0100               	movlb	0	; () banked
  8203  012E4C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8204  012E4E  0E00               	movlw	0
  8205  012E50  0100               	movlb	0	; () banked
  8206  012E52  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8207  012E54  0100               	movlb	0	; () banked
  8208  012E56  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8209  012E58  0E00               	movlw	0
  8210  012E5A  0100               	movlb	0	; () banked
  8211  012E5C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8212  012E5E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8213  012E62  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8214                           
  8215                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  8216  012E66  0E08               	movlw	8
  8217  012E68  0100               	movlb	0	; () banked
  8218  012E6A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8219  012E6C  0100               	movlb	0	; () banked
  8220  012E6E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8221  012E70  0E00               	movlw	0
  8222  012E72  0100               	movlb	0	; () banked
  8223  012E74  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8224  012E76  0100               	movlb	0	; () banked
  8225  012E78  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8226  012E7A  0E01               	movlw	1
  8227  012E7C  0100               	movlb	0	; () banked
  8228  012E7E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8229  012E80  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8230  012E84  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8231                           
  8232                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  8233  012E88  0E08               	movlw	8
  8234  012E8A  0100               	movlb	0	; () banked
  8235  012E8C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8236  012E8E  0100               	movlb	0	; () banked
  8237  012E90  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8238  012E92  0E00               	movlw	0
  8239  012E94  0100               	movlb	0	; () banked
  8240  012E96  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8241  012E98  0100               	movlb	0	; () banked
  8242  012E9A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8243  012E9C  0E02               	movlw	2
  8244  012E9E  0100               	movlb	0	; () banked
  8245  012EA0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8246  012EA2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8247  012EA6  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8248                           
  8249                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  8250  012EAA  0E08               	movlw	8
  8251  012EAC  0100               	movlb	0	; () banked
  8252  012EAE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8253  012EB0  0100               	movlb	0	; () banked
  8254  012EB2  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8255  012EB4  0E00               	movlw	0
  8256  012EB6  0100               	movlb	0	; () banked
  8257  012EB8  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8258  012EBA  0100               	movlb	0	; () banked
  8259  012EBC  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8260  012EBE  0E03               	movlw	3
  8261  012EC0  0100               	movlb	0	; () banked
  8262  012EC2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8263  012EC4  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8264  012EC8  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8265                           
  8266                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  8267  012ECC  0E08               	movlw	8
  8268  012ECE  0100               	movlb	0	; () banked
  8269  012ED0  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8270  012ED2  0100               	movlb	0	; () banked
  8271  012ED4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8272  012ED6  0E00               	movlw	0
  8273  012ED8  0100               	movlb	0	; () banked
  8274  012EDA  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8275  012EDC  0100               	movlb	0	; () banked
  8276  012EDE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8277  012EE0  0E04               	movlw	4
  8278  012EE2  0100               	movlb	0	; () banked
  8279  012EE4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8280  012EE6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8281  012EEA  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8282                           
  8283                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  8284  012EEE  0E08               	movlw	8
  8285  012EF0  0100               	movlb	0	; () banked
  8286  012EF2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8287  012EF4  0100               	movlb	0	; () banked
  8288  012EF6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8289  012EF8  0E00               	movlw	0
  8290  012EFA  0100               	movlb	0	; () banked
  8291  012EFC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8292  012EFE  0100               	movlb	0	; () banked
  8293  012F00  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8294  012F02  0E05               	movlw	5
  8295  012F04  0100               	movlb	0	; () banked
  8296  012F06  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8297  012F08  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8298  012F0C  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8299                           
  8300                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  8301  012F10  0E08               	movlw	8
  8302  012F12  0100               	movlb	0	; () banked
  8303  012F14  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8304  012F16  0100               	movlb	0	; () banked
  8305  012F18  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8306  012F1A  0E00               	movlw	0
  8307  012F1C  0100               	movlb	0	; () banked
  8308  012F1E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8309  012F20  0100               	movlb	0	; () banked
  8310  012F22  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8311  012F24  0E06               	movlw	6
  8312  012F26  0100               	movlb	0	; () banked
  8313  012F28  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8314  012F2A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8315  012F2E  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8316                           
  8317                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  8318  012F32  0E08               	movlw	8
  8319  012F34  0100               	movlb	0	; () banked
  8320  012F36  259A               	addwf	Port_SetType@pInput& (0+255),w,b
  8321  012F38  0100               	movlb	0	; () banked
  8322  012F3A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
  8323  012F3C  0E00               	movlw	0
  8324  012F3E  0100               	movlb	0	; () banked
  8325  012F40  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8326  012F42  0100               	movlb	0	; () banked
  8327  012F44  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8328  012F46  0E07               	movlw	7
  8329  012F48  0100               	movlb	0	; () banked
  8330  012F4A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
  8331  012F4C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
  8332  012F50  ECBA  F0BB         	call	_Word_SetPair	;wreg free
  8333  012F54  0012               	return	
  8334  012F56                     __end_of_Port_SetType:
  8335                           	opt stack 0
  8336                           tosu	equ	0xFFF
  8337                           tosh	equ	0xFFE
  8338                           tosl	equ	0xFFD
  8339                           pclath	equ	0xFFA
  8340                           tblptru	equ	0xFF8
  8341                           tblptrh	equ	0xFF7
  8342                           tblptrl	equ	0xFF6
  8343                           tablat	equ	0xFF5
  8344                           prodh	equ	0xFF4
  8345                           prodl	equ	0xFF3
  8346                           postinc0	equ	0xFEE
  8347                           wreg	equ	0xFE8
  8348                           indf1	equ	0xFE7
  8349                           postdec1	equ	0xFE5
  8350                           fsr1h	equ	0xFE2
  8351                           fsr1l	equ	0xFE1
  8352                           indf2	equ	0xFDF
  8353                           postinc2	equ	0xFDE
  8354                           postdec2	equ	0xFDD
  8355                           plusw2	equ	0xFDB
  8356                           fsr2h	equ	0xFDA
  8357                           fsr2l	equ	0xFD9
  8358                           status	equ	0xFD8
  8359                           
  8360 ;; *************** function _Port_CheckPortType *****************
  8361 ;; Defined at:
  8362 ;;		line 138 in file "Library/Port.c"
  8363 ;; Parameters:    Size  Location     Type
  8364 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  8365 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8366 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8367 ;;  pDrive          1   56[BANK0 ] enum E6469
  8368 ;; Auto vars:     Size  Location     Type
  8369 ;;  Output          1   57[BANK0 ] enum E6475
  8370 ;; Return value:  Size  Location     Type
  8371 ;;                  1    wreg      enum E6475
  8372 ;; Registers used:
  8373 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8379 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8382 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8383 ;;Total ram usage:        4 bytes
  8384 ;; Hardware stack levels used:    1
  8385 ;; Hardware stack levels required when called:   13
  8386 ;; This function calls:
  8387 ;;		_Port_CheckQuadType
  8388 ;; This function is called by:
  8389 ;;		_Port_SetType
  8390 ;; This function uses a non-reentrant model
  8391 ;;
  8392                           
  8393                           	psect	text35
  8394  01760E                     __ptext35:
  8395                           	opt stack 0
  8396  01760E                     _Port_CheckPortType:
  8397                           	opt stack 14
  8398                           
  8399                           ;Port.c: 140: ePinError Output = ePinErrorState;
  8400                           
  8401                           ;incstack = 0
  8402  01760E  0E05               	movlw	5
  8403  017610  0100               	movlb	0	; () banked
  8404  017612  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  8408  017614  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8409  017618  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8410  01761C  0E00               	movlw	0
  8411  01761E  0100               	movlb	0	; () banked
  8412  017620  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8413  017622  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8414  017626  ECC0  F0B9         	call	_Port_CheckQuadType	;wreg free
  8415  01762A  0100               	movlb	0	; () banked
  8416  01762C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8417  01762E  0100               	movlb	0	; () banked
  8418  017630  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  8419  017632  A4D8               	btfss	status,2,c
  8420  017634  D00D               	goto	l397
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  8424  017636  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8425  01763A  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8426  01763E  0E01               	movlw	1
  8427  017640  0100               	movlb	0	; () banked
  8428  017642  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8429  017644  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8430  017648  ECC0  F0B9         	call	_Port_CheckQuadType	;wreg free
  8431  01764C  0100               	movlb	0	; () banked
  8432  01764E  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
  8433  017650                     l397:
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;Port.c: 146: return Output;
  8437                           
  8438                           ; BSR set to: 0
  8439  017650  0100               	movlb	0	; () banked
  8440  017652  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
  8441  017654  0012               	return	
  8442  017656                     __end_of_Port_CheckPortType:
  8443                           	opt stack 0
  8444                           tosu	equ	0xFFF
  8445                           tosh	equ	0xFFE
  8446                           tosl	equ	0xFFD
  8447                           pclath	equ	0xFFA
  8448                           tblptru	equ	0xFF8
  8449                           tblptrh	equ	0xFF7
  8450                           tblptrl	equ	0xFF6
  8451                           tablat	equ	0xFF5
  8452                           prodh	equ	0xFF4
  8453                           prodl	equ	0xFF3
  8454                           postinc0	equ	0xFEE
  8455                           wreg	equ	0xFE8
  8456                           indf1	equ	0xFE7
  8457                           postdec1	equ	0xFE5
  8458                           fsr1h	equ	0xFE2
  8459                           fsr1l	equ	0xFE1
  8460                           indf2	equ	0xFDF
  8461                           postinc2	equ	0xFDE
  8462                           postdec2	equ	0xFDD
  8463                           plusw2	equ	0xFDB
  8464                           fsr2h	equ	0xFDA
  8465                           fsr2l	equ	0xFD9
  8466                           status	equ	0xFD8
  8467                           
  8468 ;; *************** function _Port_Set *****************
  8469 ;; Defined at:
  8470 ;;		line 570 in file "Library/Port.c"
  8471 ;; Parameters:    Size  Location     Type
  8472 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  8473 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8474 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8475 ;;  pValue          1   17[BANK0 ] unsigned char 
  8476 ;; Auto vars:     Size  Location     Type
  8477 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  8478 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  8479 ;;  Type            1   38[BANK0 ] enum E6795
  8480 ;; Return value:  Size  Location     Type
  8481 ;;                  1    wreg      void 
  8482 ;; Registers used:
  8483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8484 ;; Tracked objects:
  8485 ;;		On entry : 0/0
  8486 ;;		On exit  : 0/0
  8487 ;;		Unchanged: 0/0
  8488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8489 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8490 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8491 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8492 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8493 ;;Total ram usage:       24 bytes
  8494 ;; Hardware stack levels used:    1
  8495 ;; Hardware stack levels required when called:   10
  8496 ;; This function calls:
  8497 ;;		_Byte_SetByte
  8498 ;;		_Word_GetPair
  8499 ;; This function is called by:
  8500 ;;		_Port_Init
  8501 ;;		_Port_Toggle
  8502 ;; This function uses a non-reentrant model
  8503 ;;
  8504                           
  8505                           	psect	text36
  8506  011EF8                     __ptext36:
  8507                           	opt stack 0
  8508  011EF8                     _Port_Set:
  8509                           	opt stack 17
  8510                           
  8511                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;incstack = 0
  8515  011EF8  0E08               	movlw	8
  8516  011EFA  0100               	movlb	0	; () banked
  8517  011EFC  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8518  011EFE  0100               	movlb	0	; () banked
  8519  011F00  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8520  011F02  0E00               	movlw	0
  8521  011F04  0100               	movlb	0	; () banked
  8522  011F06  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8523  011F08  0100               	movlb	0	; () banked
  8524  011F0A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8525  011F0C  0E00               	movlw	0
  8526  011F0E  0100               	movlb	0	; () banked
  8527  011F10  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8528  011F12  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8529  011F16  0100               	movlb	0	; () banked
  8530  011F18  6F86               	movwf	Port_Set@Type& (0+255),b
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  8534  011F1A  0100               	movlb	0	; () banked
  8535  011F1C  5186               	movf	Port_Set@Type& (0+255),w,b
  8536  011F1E  0100               	movlb	0	; () banked
  8537  011F20  6F72               	movwf	??_Port_Set& (0+255),b
  8538  011F22  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8539  011F24  0E0E               	movlw	14
  8540  011F26                     u11745:
  8541  011F26  90D8               	bcf	status,0,c
  8542  011F28  0100               	movlb	0	; () banked
  8543  011F2A  3772               	rlcf	??_Port_Set& (0+255),f,b
  8544  011F2C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8545  011F2E  2EE8               	decfsz	wreg,f,c
  8546  011F30  D7FA               	goto	u11745
  8547  011F32  0100               	movlb	0	; () banked
  8548  011F34  5186               	movf	Port_Set@Type& (0+255),w,b
  8549  011F36  0100               	movlb	0	; () banked
  8550  011F38  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  8551  011F3A  6B75               	clrf	(??_Port_Set+3)& (0+255),b
  8552  011F3C  0E0C               	movlw	12
  8553  011F3E                     u11755:
  8554  011F3E  90D8               	bcf	status,0,c
  8555  011F40  0100               	movlb	0	; () banked
  8556  011F42  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
  8557  011F44  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
  8558  011F46  2EE8               	decfsz	wreg,f,c
  8559  011F48  D7FA               	goto	u11755
  8560  011F4A  0100               	movlb	0	; () banked
  8561  011F4C  5186               	movf	Port_Set@Type& (0+255),w,b
  8562  011F4E  0100               	movlb	0	; () banked
  8563  011F50  6F76               	movwf	(??_Port_Set+4)& (0+255),b
  8564  011F52  6B77               	clrf	(??_Port_Set+5)& (0+255),b
  8565  011F54  0E0A               	movlw	10
  8566  011F56                     u11765:
  8567  011F56  90D8               	bcf	status,0,c
  8568  011F58  0100               	movlb	0	; () banked
  8569  011F5A  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
  8570  011F5C  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
  8571  011F5E  2EE8               	decfsz	wreg,f,c
  8572  011F60  D7FA               	goto	u11765
  8573  011F62  0100               	movlb	0	; () banked
  8574  011F64  5186               	movf	Port_Set@Type& (0+255),w,b
  8575  011F66  0100               	movlb	0	; () banked
  8576  011F68  6F79               	movwf	(??_Port_Set+7)& (0+255),b
  8577  011F6A  6B78               	clrf	(??_Port_Set+6)& (0+255),b
  8578  011F6C  0100               	movlb	0	; () banked
  8579  011F6E  5186               	movf	Port_Set@Type& (0+255),w,b
  8580  011F70  0100               	movlb	0	; () banked
  8581  011F72  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
  8582  011F74  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
  8583  011F76  0E06               	movlw	6
  8584  011F78                     u11775:
  8585  011F78  90D8               	bcf	status,0,c
  8586  011F7A  0100               	movlb	0	; () banked
  8587  011F7C  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
  8588  011F7E  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
  8589  011F80  2EE8               	decfsz	wreg,f,c
  8590  011F82  D7FA               	goto	u11775
  8591  011F84  0100               	movlb	0	; () banked
  8592  011F86  5186               	movf	Port_Set@Type& (0+255),w,b
  8593  011F88  0100               	movlb	0	; () banked
  8594  011F8A  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
  8595  011F8C  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
  8596  011F8E  0100               	movlb	0	; () banked
  8597  011F90  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
  8598  011F92  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
  8599  011F94  0EF0               	movlw	240
  8600  011F96  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
  8601  011F98  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  8602  011F9A  0B0F               	andlw	15
  8603  011F9C  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
  8604  011F9E  0EF0               	movlw	240
  8605  011FA0  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
  8606  011FA2  0100               	movlb	0	; () banked
  8607  011FA4  5186               	movf	Port_Set@Type& (0+255),w,b
  8608  011FA6  0100               	movlb	0	; () banked
  8609  011FA8  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
  8610  011FAA  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
  8611  011FAC  0100               	movlb	0	; () banked
  8612  011FAE  90D8               	bcf	status,0,c
  8613  011FB0  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8614  011FB2  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8615  011FB4  0100               	movlb	0	; () banked
  8616  011FB6  90D8               	bcf	status,0,c
  8617  011FB8  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8618  011FBA  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8619  011FBC  0100               	movlb	0	; () banked
  8620  011FBE  5186               	movf	Port_Set@Type& (0+255),w,b
  8621  011FC0  0100               	movlb	0	; () banked
  8622  011FC2  6F80               	movwf	(??_Port_Set+14)& (0+255),b
  8623  011FC4  6B81               	clrf	(??_Port_Set+15)& (0+255),b
  8624  011FC6  0100               	movlb	0	; () banked
  8625  011FC8  517E               	movf	(??_Port_Set+12)& (0+255),w,b
  8626  011FCA  0100               	movlb	0	; () banked
  8627  011FCC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8628  011FCE  0100               	movlb	0	; () banked
  8629  011FD0  517F               	movf	(??_Port_Set+13)& (0+255),w,b
  8630  011FD2  0100               	movlb	0	; () banked
  8631  011FD4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8632  011FD6  0100               	movlb	0	; () banked
  8633  011FD8  517C               	movf	(??_Port_Set+10)& (0+255),w,b
  8634  011FDA  0100               	movlb	0	; () banked
  8635  011FDC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8636  011FDE  0100               	movlb	0	; () banked
  8637  011FE0  517D               	movf	(??_Port_Set+11)& (0+255),w,b
  8638  011FE2  0100               	movlb	0	; () banked
  8639  011FE4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8640  011FE6  0100               	movlb	0	; () banked
  8641  011FE8  517A               	movf	(??_Port_Set+8)& (0+255),w,b
  8642  011FEA  0100               	movlb	0	; () banked
  8643  011FEC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8644  011FEE  0100               	movlb	0	; () banked
  8645  011FF0  517B               	movf	(??_Port_Set+9)& (0+255),w,b
  8646  011FF2  0100               	movlb	0	; () banked
  8647  011FF4  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8648  011FF6  0100               	movlb	0	; () banked
  8649  011FF8  5178               	movf	(??_Port_Set+6)& (0+255),w,b
  8650  011FFA  0100               	movlb	0	; () banked
  8651  011FFC  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8652  011FFE  0100               	movlb	0	; () banked
  8653  012000  5179               	movf	(??_Port_Set+7)& (0+255),w,b
  8654  012002  0100               	movlb	0	; () banked
  8655  012004  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8656  012006  0100               	movlb	0	; () banked
  8657  012008  5176               	movf	(??_Port_Set+4)& (0+255),w,b
  8658  01200A  0100               	movlb	0	; () banked
  8659  01200C  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8660  01200E  0100               	movlb	0	; () banked
  8661  012010  5177               	movf	(??_Port_Set+5)& (0+255),w,b
  8662  012012  0100               	movlb	0	; () banked
  8663  012014  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8664  012016  0100               	movlb	0	; () banked
  8665  012018  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  8666  01201A  0100               	movlb	0	; () banked
  8667  01201C  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8668  01201E  0100               	movlb	0	; () banked
  8669  012020  5175               	movf	(??_Port_Set+3)& (0+255),w,b
  8670  012022  0100               	movlb	0	; () banked
  8671  012024  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8672  012026  0100               	movlb	0	; () banked
  8673  012028  5172               	movf	??_Port_Set& (0+255),w,b
  8674  01202A  0100               	movlb	0	; () banked
  8675  01202C  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
  8676  01202E  0100               	movlb	0	; () banked
  8677  012030  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
  8678  012032  0100               	movlb	0	; () banked
  8679  012034  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8680  012036  0100               	movlb	0	; () banked
  8681  012038  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
  8682  01203A  0100               	movlb	0	; () banked
  8683  01203C  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  8684                           
  8685                           ; BSR set to: 0
  8686                           ;Port.c: 574: UINT16 TypeActual = Type;
  8687  01203E  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
  8688  012042  0100               	movlb	0	; () banked
  8689  012044  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  8693  012046  0E08               	movlw	8
  8694  012048  0100               	movlb	0	; () banked
  8695  01204A  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8696  01204C  0100               	movlb	0	; () banked
  8697  01204E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8698  012050  0E00               	movlw	0
  8699  012052  0100               	movlb	0	; () banked
  8700  012054  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8701  012056  0100               	movlb	0	; () banked
  8702  012058  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8703  01205A  0E01               	movlw	1
  8704  01205C  0100               	movlb	0	; () banked
  8705  01205E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8706  012060  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8707  012064  0100               	movlb	0	; () banked
  8708  012066  6F72               	movwf	??_Port_Set& (0+255),b
  8709  012068  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8710  01206A  0100               	movlb	0	; () banked
  8711  01206C  90D8               	bcf	status,0,c
  8712  01206E  3772               	rlcf	??_Port_Set& (0+255),f,b
  8713  012070  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8714  012072  0100               	movlb	0	; () banked
  8715  012074  90D8               	bcf	status,0,c
  8716  012076  3772               	rlcf	??_Port_Set& (0+255),f,b
  8717  012078  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8718  01207A  0100               	movlb	0	; () banked
  8719  01207C  5172               	movf	??_Port_Set& (0+255),w,b
  8720  01207E  0100               	movlb	0	; () banked
  8721  012080  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8722  012082  0100               	movlb	0	; () banked
  8723  012084  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8724  012086  0100               	movlb	0	; () banked
  8725  012088  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  8729  01208A  0E08               	movlw	8
  8730  01208C  0100               	movlb	0	; () banked
  8731  01208E  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8732  012090  0100               	movlb	0	; () banked
  8733  012092  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8734  012094  0E00               	movlw	0
  8735  012096  0100               	movlb	0	; () banked
  8736  012098  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8737  01209A  0100               	movlb	0	; () banked
  8738  01209C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8739  01209E  0E02               	movlw	2
  8740  0120A0  0100               	movlb	0	; () banked
  8741  0120A2  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8742  0120A4  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8743  0120A8  0100               	movlb	0	; () banked
  8744  0120AA  6F72               	movwf	??_Port_Set& (0+255),b
  8745  0120AC  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8746  0120AE  0100               	movlb	0	; () banked
  8747  0120B0  3B72               	swapf	??_Port_Set& (0+255),f,b
  8748  0120B2  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
  8749  0120B4  0EF0               	movlw	240
  8750  0120B6  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
  8751  0120B8  5172               	movf	??_Port_Set& (0+255),w,b
  8752  0120BA  0B0F               	andlw	15
  8753  0120BC  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
  8754  0120BE  0EF0               	movlw	240
  8755  0120C0  1772               	andwf	??_Port_Set& (0+255),f,b
  8756  0120C2  0100               	movlb	0	; () banked
  8757  0120C4  5172               	movf	??_Port_Set& (0+255),w,b
  8758  0120C6  0100               	movlb	0	; () banked
  8759  0120C8  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8760  0120CA  0100               	movlb	0	; () banked
  8761  0120CC  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8762  0120CE  0100               	movlb	0	; () banked
  8763  0120D0  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8764                           
  8765                           ; BSR set to: 0
  8766                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  8767  0120D2  0E08               	movlw	8
  8768  0120D4  0100               	movlb	0	; () banked
  8769  0120D6  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8770  0120D8  0100               	movlb	0	; () banked
  8771  0120DA  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8772  0120DC  0E00               	movlw	0
  8773  0120DE  0100               	movlb	0	; () banked
  8774  0120E0  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8775  0120E2  0100               	movlb	0	; () banked
  8776  0120E4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8777  0120E6  0E03               	movlw	3
  8778  0120E8  0100               	movlb	0	; () banked
  8779  0120EA  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8780  0120EC  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8781  0120F0  0100               	movlb	0	; () banked
  8782  0120F2  6F72               	movwf	??_Port_Set& (0+255),b
  8783  0120F4  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8784  0120F6  0E06               	movlw	6
  8785  0120F8                     u11785:
  8786  0120F8  90D8               	bcf	status,0,c
  8787  0120FA  0100               	movlb	0	; () banked
  8788  0120FC  3772               	rlcf	??_Port_Set& (0+255),f,b
  8789  0120FE  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8790  012100  2EE8               	decfsz	wreg,f,c
  8791  012102  D7FA               	goto	u11785
  8792  012104  0100               	movlb	0	; () banked
  8793  012106  5172               	movf	??_Port_Set& (0+255),w,b
  8794  012108  0100               	movlb	0	; () banked
  8795  01210A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8796  01210C  0100               	movlb	0	; () banked
  8797  01210E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8798  012110  0100               	movlb	0	; () banked
  8799  012112  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  8803  012114  0E08               	movlw	8
  8804  012116  0100               	movlb	0	; () banked
  8805  012118  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8806  01211A  0100               	movlb	0	; () banked
  8807  01211C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8808  01211E  0E00               	movlw	0
  8809  012120  0100               	movlb	0	; () banked
  8810  012122  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8811  012124  0100               	movlb	0	; () banked
  8812  012126  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8813  012128  0E04               	movlw	4
  8814  01212A  0100               	movlb	0	; () banked
  8815  01212C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8816  01212E  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8817  012132  0100               	movlb	0	; () banked
  8818  012134  6F72               	movwf	??_Port_Set& (0+255),b
  8819  012136  0100               	movlb	0	; () banked
  8820  012138  5172               	movf	??_Port_Set& (0+255),w,b
  8821  01213A  0100               	movlb	0	; () banked
  8822  01213C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
  8823  01213E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8824  012140  0100               	movlb	0	; () banked
  8825  012142  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8826  012144  0100               	movlb	0	; () banked
  8827  012146  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8828  012148  0100               	movlb	0	; () banked
  8829  01214A  5174               	movf	(??_Port_Set+2)& (0+255),w,b
  8830  01214C  0100               	movlb	0	; () banked
  8831  01214E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  8835  012150  0E08               	movlw	8
  8836  012152  0100               	movlb	0	; () banked
  8837  012154  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8838  012156  0100               	movlb	0	; () banked
  8839  012158  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8840  01215A  0E00               	movlw	0
  8841  01215C  0100               	movlb	0	; () banked
  8842  01215E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8843  012160  0100               	movlb	0	; () banked
  8844  012162  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8845  012164  0E05               	movlw	5
  8846  012166  0100               	movlb	0	; () banked
  8847  012168  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8848  01216A  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8849  01216E  0100               	movlb	0	; () banked
  8850  012170  6F72               	movwf	??_Port_Set& (0+255),b
  8851  012172  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8852  012174  0E0A               	movlw	10
  8853  012176                     u11795:
  8854  012176  90D8               	bcf	status,0,c
  8855  012178  0100               	movlb	0	; () banked
  8856  01217A  3772               	rlcf	??_Port_Set& (0+255),f,b
  8857  01217C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8858  01217E  2EE8               	decfsz	wreg,f,c
  8859  012180  D7FA               	goto	u11795
  8860  012182  0100               	movlb	0	; () banked
  8861  012184  5172               	movf	??_Port_Set& (0+255),w,b
  8862  012186  0100               	movlb	0	; () banked
  8863  012188  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8864  01218A  0100               	movlb	0	; () banked
  8865  01218C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8866  01218E  0100               	movlb	0	; () banked
  8867  012190  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8868                           
  8869                           ; BSR set to: 0
  8870                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  8871  012192  0E08               	movlw	8
  8872  012194  0100               	movlb	0	; () banked
  8873  012196  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8874  012198  0100               	movlb	0	; () banked
  8875  01219A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8876  01219C  0E00               	movlw	0
  8877  01219E  0100               	movlb	0	; () banked
  8878  0121A0  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8879  0121A2  0100               	movlb	0	; () banked
  8880  0121A4  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8881  0121A6  0E06               	movlw	6
  8882  0121A8  0100               	movlb	0	; () banked
  8883  0121AA  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8884  0121AC  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8885  0121B0  0100               	movlb	0	; () banked
  8886  0121B2  6F72               	movwf	??_Port_Set& (0+255),b
  8887  0121B4  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8888  0121B6  0E0C               	movlw	12
  8889  0121B8                     u11805:
  8890  0121B8  90D8               	bcf	status,0,c
  8891  0121BA  0100               	movlb	0	; () banked
  8892  0121BC  3772               	rlcf	??_Port_Set& (0+255),f,b
  8893  0121BE  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8894  0121C0  2EE8               	decfsz	wreg,f,c
  8895  0121C2  D7FA               	goto	u11805
  8896  0121C4  0100               	movlb	0	; () banked
  8897  0121C6  5172               	movf	??_Port_Set& (0+255),w,b
  8898  0121C8  0100               	movlb	0	; () banked
  8899  0121CA  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8900  0121CC  0100               	movlb	0	; () banked
  8901  0121CE  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8902  0121D0  0100               	movlb	0	; () banked
  8903  0121D2  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  8907  0121D4  0E08               	movlw	8
  8908  0121D6  0100               	movlb	0	; () banked
  8909  0121D8  256F               	addwf	Port_Set@pInput& (0+255),w,b
  8910  0121DA  0100               	movlb	0	; () banked
  8911  0121DC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
  8912  0121DE  0E00               	movlw	0
  8913  0121E0  0100               	movlb	0	; () banked
  8914  0121E2  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8915  0121E4  0100               	movlb	0	; () banked
  8916  0121E6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8917  0121E8  0E07               	movlw	7
  8918  0121EA  0100               	movlb	0	; () banked
  8919  0121EC  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
  8920  0121EE  ECC0  F0BC         	call	_Word_GetPair	;wreg free
  8921  0121F2  0100               	movlb	0	; () banked
  8922  0121F4  6F72               	movwf	??_Port_Set& (0+255),b
  8923  0121F6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
  8924  0121F8  0E0E               	movlw	14
  8925  0121FA                     u11815:
  8926  0121FA  90D8               	bcf	status,0,c
  8927  0121FC  0100               	movlb	0	; () banked
  8928  0121FE  3772               	rlcf	??_Port_Set& (0+255),f,b
  8929  012200  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8930  012202  2EE8               	decfsz	wreg,f,c
  8931  012204  D7FA               	goto	u11815
  8932  012206  0100               	movlb	0	; () banked
  8933  012208  5172               	movf	??_Port_Set& (0+255),w,b
  8934  01220A  0100               	movlb	0	; () banked
  8935  01220C  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8936  01220E  0100               	movlb	0	; () banked
  8937  012210  5173               	movf	(??_Port_Set+1)& (0+255),w,b
  8938  012212  0100               	movlb	0	; () banked
  8939  012214  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8940                           
  8941                           ;Port.c: 584: if (TypeRequired == TypeActual)
  8942  012216  0100               	movlb	0	; () banked
  8943  012218  5184               	movf	Port_Set@TypeActual& (0+255),w,b
  8944  01221A  0100               	movlb	0	; () banked
  8945  01221C  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  8946  01221E  E148               	bnz	l528
  8947  012220  0100               	movlb	0	; () banked
  8948  012222  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  8949  012224  0100               	movlb	0	; () banked
  8950  012226  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  8951  012228  A4D8               	btfss	status,2,c
  8952  01222A  0012               	return	
  8953  01222C  D032               	goto	l526
  8954  01222E                     
  8955                           ; BSR set to: 0
  8956                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  8957                           
  8958                           ; BSR set to: 0
  8959  01222E  0100               	movlb	0	; () banked
  8960  012230  EE20 F002          	lfsr	2,2
  8961  012234  516F               	movf	Port_Set@pInput& (0+255),w,b
  8962  012236  26D9               	addwf	fsr2l,f,c
  8963  012238  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8964  01223A  22DA               	addwfc	fsr2h,f,c
  8965  01223C  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  8966  012240  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  8967  012244  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  8968  012248  ECEB  F0BF         	call	_Byte_SetByte	;wreg free
  8969                           
  8970                           ;Port.c: 594: break;
  8971  01224C  0012               	return	
  8972  01224E                     
  8973                           ;Port.c: 597: pValue = ~pValue;
  8974  01224E  0100               	movlb	0	; () banked
  8975  012250  1F71               	comf	Port_Set@pValue& (0+255),f,b
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  8979  012252  0100               	movlb	0	; () banked
  8980  012254  EE20 F002          	lfsr	2,2
  8981  012258  516F               	movf	Port_Set@pInput& (0+255),w,b
  8982  01225A  26D9               	addwf	fsr2l,f,c
  8983  01225C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8984  01225E  22DA               	addwfc	fsr2h,f,c
  8985  012260  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  8986  012264  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  8987  012268  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  8988  01226C  ECEB  F0BF         	call	_Byte_SetByte	;wreg free
  8989                           
  8990                           ;Port.c: 599: break;
  8991  012270  0012               	return	
  8992  012272                     
  8993                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  8994  012272  0100               	movlb	0	; () banked
  8995  012274  EE20 F004          	lfsr	2,4
  8996  012278  516F               	movf	Port_Set@pInput& (0+255),w,b
  8997  01227A  26D9               	addwf	fsr2l,f,c
  8998  01227C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8999  01227E  22DA               	addwfc	fsr2h,f,c
  9000  012280  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
  9001  012284  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
  9002  012288  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9003  01228C  ECEB  F0BF         	call	_Byte_SetByte	;wreg free
  9004                           
  9005                           ;Port.c: 606: }
  9006                           
  9007                           ;Port.c: 605: break;
  9008                           
  9009                           ;Port.c: 604: default:
  9010                           
  9011                           ;Port.c: 603: break;
  9012  012290  0012               	return	
  9013  012292                     l526:
  9014  012292  0100               	movlb	0	; () banked
  9015  012294  5186               	movf	Port_Set@Type& (0+255),w,b
  9016                           
  9017                           ; Switch size 1, requested type "space"
  9018                           ; Number of cases is 4, Range of values is 0 to 3
  9019                           ; switch strategies available:
  9020                           ; Name         Instructions Cycles
  9021                           ; simple_byte           13     7 (average)
  9022                           ;	Chosen strategy is simple_byte
  9023  012296  0A00               	xorlw	0	; case 0
  9024  012298  B4D8               	btfsc	status,2,c
  9025  01229A  0012               	return	
  9026  01229C  0A01               	xorlw	1	; case 1
  9027  01229E  B4D8               	btfsc	status,2,c
  9028  0122A0  D7C6               	goto	l529
  9029  0122A2  0A03               	xorlw	3	; case 2
  9030  0122A4  B4D8               	btfsc	status,2,c
  9031  0122A6  D7D3               	goto	l531
  9032  0122A8  0A01               	xorlw	1	; case 3
  9033  0122AA  A4D8               	btfss	status,2,c
  9034                           
  9035                           ; BSR set to: 0
  9036                           
  9037                           ; BSR set to: 0
  9038                           ;Port.c: 607: }
  9039  0122AC  0012               	return	
  9040  0122AE  D7E1               	goto	l532
  9041  0122B0                     l528:
  9042  0122B0  0012               	return		;funcret
  9043  0122B2                     __end_of_Port_Set:
  9044                           	opt stack 0
  9045                           tosu	equ	0xFFF
  9046                           tosh	equ	0xFFE
  9047                           tosl	equ	0xFFD
  9048                           pclath	equ	0xFFA
  9049                           tblptru	equ	0xFF8
  9050                           tblptrh	equ	0xFF7
  9051                           tblptrl	equ	0xFF6
  9052                           tablat	equ	0xFF5
  9053                           prodh	equ	0xFF4
  9054                           prodl	equ	0xFF3
  9055                           postinc0	equ	0xFEE
  9056                           wreg	equ	0xFE8
  9057                           indf1	equ	0xFE7
  9058                           postdec1	equ	0xFE5
  9059                           fsr1h	equ	0xFE2
  9060                           fsr1l	equ	0xFE1
  9061                           indf2	equ	0xFDF
  9062                           postinc2	equ	0xFDE
  9063                           postdec2	equ	0xFDD
  9064                           plusw2	equ	0xFDB
  9065                           fsr2h	equ	0xFDA
  9066                           fsr2l	equ	0xFD9
  9067                           status	equ	0xFD8
  9068                           
  9069 ;; *************** function _Byte_SetByte *****************
  9070 ;; Defined at:
  9071 ;;		line 110 in file "Library/Types.c"
  9072 ;; Parameters:    Size  Location     Type
  9073 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  9074 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  9075 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  9076 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  9077 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  9078 ;;		 -> NULL(0), 
  9079 ;;  pValue          1    2[BANK0 ] unsigned char 
  9080 ;; Auto vars:     Size  Location     Type
  9081 ;;		None
  9082 ;; Return value:  Size  Location     Type
  9083 ;;                  1    wreg      void 
  9084 ;; Registers used:
  9085 ;;		fsr2l, fsr2h
  9086 ;; Tracked objects:
  9087 ;;		On entry : 0/0
  9088 ;;		On exit  : 0/0
  9089 ;;		Unchanged: 0/0
  9090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9091 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;Total ram usage:        3 bytes
  9096 ;; Hardware stack levels used:    1
  9097 ;; Hardware stack levels required when called:    7
  9098 ;; This function calls:
  9099 ;;		Nothing
  9100 ;; This function is called by:
  9101 ;;		_Port_Set
  9102 ;;		_I2C_Init
  9103 ;; This function uses a non-reentrant model
  9104 ;;
  9105                           
  9106                           	psect	text37
  9107  017FD6                     __ptext37:
  9108                           	opt stack 0
  9109  017FD6                     _Byte_SetByte:
  9110                           	opt stack 19
  9111                           
  9112                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  9113                           
  9114                           ;incstack = 0
  9115  017FD6  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  9116  017FDA  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  9117  017FDE  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
  9118  017FE2  0012               	return		;funcret
  9119  017FE4                     __end_of_Byte_SetByte:
  9120                           	opt stack 0
  9121                           tosu	equ	0xFFF
  9122                           tosh	equ	0xFFE
  9123                           tosl	equ	0xFFD
  9124                           pclath	equ	0xFFA
  9125                           tblptru	equ	0xFF8
  9126                           tblptrh	equ	0xFF7
  9127                           tblptrl	equ	0xFF6
  9128                           tablat	equ	0xFF5
  9129                           prodh	equ	0xFF4
  9130                           prodl	equ	0xFF3
  9131                           postinc0	equ	0xFEE
  9132                           wreg	equ	0xFE8
  9133                           indf1	equ	0xFE7
  9134                           postdec1	equ	0xFE5
  9135                           fsr1h	equ	0xFE2
  9136                           fsr1l	equ	0xFE1
  9137                           indf2	equ	0xFDF
  9138                           postinc2	equ	0xFDE
  9139                           postdec2	equ	0xFDD
  9140                           plusw2	equ	0xFDB
  9141                           fsr2h	equ	0xFDA
  9142                           fsr2l	equ	0xFD9
  9143                           status	equ	0xFD8
  9144                           
  9145 ;; *************** function _GetPortTRIS *****************
  9146 ;; Defined at:
  9147 ;;		line 67 in file "Library/Port.c"
  9148 ;; Parameters:    Size  Location     Type
  9149 ;;  pInput          1    wreg     enum E6786
  9150 ;; Auto vars:     Size  Location     Type
  9151 ;;  pInput          1    2[BANK0 ] enum E6786
  9152 ;; Return value:  Size  Location     Type
  9153 ;;                  2    0[BANK0 ] PTR struct Byte
  9154 ;; Registers used:
  9155 ;;		wreg, status,2, status,0
  9156 ;; Tracked objects:
  9157 ;;		On entry : 0/0
  9158 ;;		On exit  : 0/0
  9159 ;;		Unchanged: 0/0
  9160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9161 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9165 ;;Total ram usage:        3 bytes
  9166 ;; Hardware stack levels used:    1
  9167 ;; Hardware stack levels required when called:    7
  9168 ;; This function calls:
  9169 ;;		Nothing
  9170 ;; This function is called by:
  9171 ;;		_Port_Init
  9172 ;; This function uses a non-reentrant model
  9173 ;;
  9174                           
  9175                           	psect	text38
  9176  0160F6                     __ptext38:
  9177                           	opt stack 0
  9178  0160F6                     _GetPortTRIS:
  9179                           	opt stack 20
  9180                           
  9181                           ;incstack = 0
  9182                           ;GetPortTRIS@pInput stored from wreg
  9183  0160F6  0100               	movlb	0	; () banked
  9184  0160F8  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
  9185                           
  9186                           ;Port.c: 69: switch (pInput)
  9187  0160FA  D038               	goto	l363
  9188  0160FC                     
  9189                           ;Port.c: 72: return (BytePtr)&TRISA;
  9190  0160FC  0E92               	movlw	146
  9191  0160FE  0100               	movlb	0	; () banked
  9192  016100  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9193  016102  0E0F               	movlw	15
  9194  016104  0100               	movlb	0	; () banked
  9195  016106  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9196                           
  9197                           ; BSR set to: 0
  9198  016108  0012               	return	
  9199  01610A                     
  9200                           ; BSR set to: 0
  9201                           ;Port.c: 74: return (BytePtr)&TRISB;
  9202                           
  9203                           ; BSR set to: 0
  9204  01610A  0E93               	movlw	147
  9205  01610C  0100               	movlb	0	; () banked
  9206  01610E  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9207  016110  0E0F               	movlw	15
  9208  016112  0100               	movlb	0	; () banked
  9209  016114  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9210                           
  9211                           ; BSR set to: 0
  9212  016116  0012               	return	
  9213  016118                     
  9214                           ; BSR set to: 0
  9215                           ;Port.c: 76: return (BytePtr)&TRISC;
  9216                           
  9217                           ; BSR set to: 0
  9218  016118  0E94               	movlw	148
  9219  01611A  0100               	movlb	0	; () banked
  9220  01611C  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9221  01611E  0E0F               	movlw	15
  9222  016120  0100               	movlb	0	; () banked
  9223  016122  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9224                           
  9225                           ; BSR set to: 0
  9226  016124  0012               	return	
  9227  016126                     
  9228                           ; BSR set to: 0
  9229                           ;Port.c: 78: return (BytePtr)&TRISD;
  9230                           
  9231                           ; BSR set to: 0
  9232  016126  0E95               	movlw	149
  9233  016128  0100               	movlb	0	; () banked
  9234  01612A  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9235  01612C  0E0F               	movlw	15
  9236  01612E  0100               	movlb	0	; () banked
  9237  016130  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9238                           
  9239                           ; BSR set to: 0
  9240  016132  0012               	return	
  9241  016134                     
  9242                           ; BSR set to: 0
  9243                           ;Port.c: 80: return (BytePtr)&TRISE;
  9244                           
  9245                           ; BSR set to: 0
  9246  016134  0E96               	movlw	150
  9247  016136  0100               	movlb	0	; () banked
  9248  016138  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9249  01613A  0E0F               	movlw	15
  9250  01613C  0100               	movlb	0	; () banked
  9251  01613E  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9252                           
  9253                           ; BSR set to: 0
  9254  016140  0012               	return	
  9255  016142                     
  9256                           ; BSR set to: 0
  9257                           ;Port.c: 82: return (BytePtr)&TRISF;
  9258                           
  9259                           ; BSR set to: 0
  9260  016142  0E97               	movlw	151
  9261  016144  0100               	movlb	0	; () banked
  9262  016146  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9263  016148  0E0F               	movlw	15
  9264  01614A  0100               	movlb	0	; () banked
  9265  01614C  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9266                           
  9267                           ; BSR set to: 0
  9268  01614E  0012               	return	
  9269  016150                     
  9270                           ; BSR set to: 0
  9271                           ;Port.c: 84: return (BytePtr)&TRISG;
  9272                           
  9273                           ; BSR set to: 0
  9274  016150  0E98               	movlw	152
  9275  016152  0100               	movlb	0	; () banked
  9276  016154  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9277  016156  0E0F               	movlw	15
  9278  016158  0100               	movlb	0	; () banked
  9279  01615A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9280                           
  9281                           ; BSR set to: 0
  9282  01615C  0012               	return	
  9283  01615E                     
  9284                           ; BSR set to: 0
  9285                           ;Port.c: 86: return (void*)0;
  9286                           
  9287                           ; BSR set to: 0
  9288  01615E  0E00               	movlw	0
  9289  016160  0100               	movlb	0	; () banked
  9290  016162  6F60               	movwf	?_GetPortTRIS& (0+255),b
  9291  016164  0E00               	movlw	0
  9292  016166  0100               	movlb	0	; () banked
  9293  016168  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;Port.c: 87: }
  9297                           
  9298                           ; BSR set to: 0
  9299  01616A  0012               	return	
  9300  01616C                     l363:
  9301                           
  9302                           ; BSR set to: 0
  9303  01616C  0100               	movlb	0	; () banked
  9304  01616E  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
  9305                           
  9306                           ; Switch size 1, requested type "space"
  9307                           ; Number of cases is 7, Range of values is 0 to 6
  9308                           ; switch strategies available:
  9309                           ; Name         Instructions Cycles
  9310                           ; simple_byte           22    12 (average)
  9311                           ;	Chosen strategy is simple_byte
  9312  016170  0A00               	xorlw	0	; case 0
  9313  016172  B4D8               	btfsc	status,2,c
  9314  016174  D7C3               	goto	l364
  9315  016176  0A01               	xorlw	1	; case 1
  9316  016178  B4D8               	btfsc	status,2,c
  9317  01617A  D7C7               	goto	l366
  9318  01617C  0A03               	xorlw	3	; case 2
  9319  01617E  B4D8               	btfsc	status,2,c
  9320  016180  D7CB               	goto	l367
  9321  016182  0A01               	xorlw	1	; case 3
  9322  016184  B4D8               	btfsc	status,2,c
  9323  016186  D7CF               	goto	l368
  9324  016188  0A07               	xorlw	7	; case 4
  9325  01618A  B4D8               	btfsc	status,2,c
  9326  01618C  D7D3               	goto	l369
  9327  01618E  0A01               	xorlw	1	; case 5
  9328  016190  B4D8               	btfsc	status,2,c
  9329  016192  D7D7               	goto	l370
  9330  016194  0A03               	xorlw	3	; case 6
  9331  016196  B4D8               	btfsc	status,2,c
  9332  016198  D7DB               	goto	l371
  9333  01619A  D7E1               	goto	l372
  9334  01619C                     __end_of_GetPortTRIS:
  9335                           	opt stack 0
  9336                           tosu	equ	0xFFF
  9337                           tosh	equ	0xFFE
  9338                           tosl	equ	0xFFD
  9339                           pclath	equ	0xFFA
  9340                           tblptru	equ	0xFF8
  9341                           tblptrh	equ	0xFF7
  9342                           tblptrl	equ	0xFF6
  9343                           tablat	equ	0xFF5
  9344                           prodh	equ	0xFF4
  9345                           prodl	equ	0xFF3
  9346                           postinc0	equ	0xFEE
  9347                           wreg	equ	0xFE8
  9348                           indf1	equ	0xFE7
  9349                           postdec1	equ	0xFE5
  9350                           fsr1h	equ	0xFE2
  9351                           fsr1l	equ	0xFE1
  9352                           indf2	equ	0xFDF
  9353                           postinc2	equ	0xFDE
  9354                           postdec2	equ	0xFDD
  9355                           plusw2	equ	0xFDB
  9356                           fsr2h	equ	0xFDA
  9357                           fsr2l	equ	0xFD9
  9358                           status	equ	0xFD8
  9359                           
  9360 ;; *************** function _GetPortProperties *****************
  9361 ;; Defined at:
  9362 ;;		line 21 in file "Library/Port.c"
  9363 ;; Parameters:    Size  Location     Type
  9364 ;;  pInput          1    wreg     enum E6786
  9365 ;; Auto vars:     Size  Location     Type
  9366 ;;  pInput          1    2[BANK0 ] enum E6786
  9367 ;; Return value:  Size  Location     Type
  9368 ;;                  2    0[BANK0 ] PTR struct PortProperty
  9369 ;; Registers used:
  9370 ;;		wreg, status,2, status,0
  9371 ;; Tracked objects:
  9372 ;;		On entry : 0/0
  9373 ;;		On exit  : 0/0
  9374 ;;		Unchanged: 0/0
  9375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9377 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9379 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;Total ram usage:        3 bytes
  9381 ;; Hardware stack levels used:    1
  9382 ;; Hardware stack levels required when called:    7
  9383 ;; This function calls:
  9384 ;;		Nothing
  9385 ;; This function is called by:
  9386 ;;		_Port_Init
  9387 ;; This function uses a non-reentrant model
  9388 ;;
  9389                           
  9390                           	psect	text39
  9391  01619C                     __ptext39:
  9392                           	opt stack 0
  9393  01619C                     _GetPortProperties:
  9394                           	opt stack 20
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;incstack = 0
  9398                           ;GetPortProperties@pInput stored from wreg
  9399  01619C  0100               	movlb	0	; () banked
  9400  01619E  6F62               	movwf	GetPortProperties@pInput& (0+255),b
  9401                           
  9402                           ;Port.c: 23: switch (pInput)
  9403  0161A0  D038               	goto	l337
  9404  0161A2                     
  9405                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  9406  0161A2  0E07               	movlw	low _PortA_Property
  9407  0161A4  0100               	movlb	0	; () banked
  9408  0161A6  6F60               	movwf	?_GetPortProperties& (0+255),b
  9409  0161A8  0EFF               	movlw	high _PortA_Property
  9410  0161AA  0100               	movlb	0	; () banked
  9411  0161AC  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9412                           
  9413                           ; BSR set to: 0
  9414  0161AE  0012               	return	
  9415  0161B0                     
  9416                           ; BSR set to: 0
  9417                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  9418                           
  9419                           ; BSR set to: 0
  9420  0161B0  0E05               	movlw	low _PortB_Property
  9421  0161B2  0100               	movlb	0	; () banked
  9422  0161B4  6F60               	movwf	?_GetPortProperties& (0+255),b
  9423  0161B6  0EFF               	movlw	high _PortB_Property
  9424  0161B8  0100               	movlb	0	; () banked
  9425  0161BA  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9426                           
  9427                           ; BSR set to: 0
  9428  0161BC  0012               	return	
  9429  0161BE                     
  9430                           ; BSR set to: 0
  9431                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  9432                           
  9433                           ; BSR set to: 0
  9434  0161BE  0E03               	movlw	low _PortC_Property
  9435  0161C0  0100               	movlb	0	; () banked
  9436  0161C2  6F60               	movwf	?_GetPortProperties& (0+255),b
  9437  0161C4  0EFF               	movlw	high _PortC_Property
  9438  0161C6  0100               	movlb	0	; () banked
  9439  0161C8  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9440                           
  9441                           ; BSR set to: 0
  9442  0161CA  0012               	return	
  9443  0161CC                     
  9444                           ; BSR set to: 0
  9445                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  9446                           
  9447                           ; BSR set to: 0
  9448  0161CC  0E01               	movlw	low _PortD_Property
  9449  0161CE  0100               	movlb	0	; () banked
  9450  0161D0  6F60               	movwf	?_GetPortProperties& (0+255),b
  9451  0161D2  0EFF               	movlw	high _PortD_Property
  9452  0161D4  0100               	movlb	0	; () banked
  9453  0161D6  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9454                           
  9455                           ; BSR set to: 0
  9456  0161D8  0012               	return	
  9457  0161DA                     
  9458                           ; BSR set to: 0
  9459                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  9460                           
  9461                           ; BSR set to: 0
  9462  0161DA  0EFF               	movlw	low _PortE_Property
  9463  0161DC  0100               	movlb	0	; () banked
  9464  0161DE  6F60               	movwf	?_GetPortProperties& (0+255),b
  9465  0161E0  0EFE               	movlw	high _PortE_Property
  9466  0161E2  0100               	movlb	0	; () banked
  9467  0161E4  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9468                           
  9469                           ; BSR set to: 0
  9470  0161E6  0012               	return	
  9471  0161E8                     
  9472                           ; BSR set to: 0
  9473                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  9474                           
  9475                           ; BSR set to: 0
  9476  0161E8  0EFD               	movlw	low _PortF_Property
  9477  0161EA  0100               	movlb	0	; () banked
  9478  0161EC  6F60               	movwf	?_GetPortProperties& (0+255),b
  9479  0161EE  0EFE               	movlw	high _PortF_Property
  9480  0161F0  0100               	movlb	0	; () banked
  9481  0161F2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9482                           
  9483                           ; BSR set to: 0
  9484  0161F4  0012               	return	
  9485  0161F6                     
  9486                           ; BSR set to: 0
  9487                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  9488                           
  9489                           ; BSR set to: 0
  9490  0161F6  0EFB               	movlw	low _PortG_Property
  9491  0161F8  0100               	movlb	0	; () banked
  9492  0161FA  6F60               	movwf	?_GetPortProperties& (0+255),b
  9493  0161FC  0EFE               	movlw	high _PortG_Property
  9494  0161FE  0100               	movlb	0	; () banked
  9495  016200  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9496                           
  9497                           ; BSR set to: 0
  9498  016202  0012               	return	
  9499  016204                     
  9500                           ; BSR set to: 0
  9501                           ;Port.c: 40: return (void*)0;
  9502                           
  9503                           ; BSR set to: 0
  9504  016204  0E00               	movlw	0
  9505  016206  0100               	movlb	0	; () banked
  9506  016208  6F60               	movwf	?_GetPortProperties& (0+255),b
  9507  01620A  0E00               	movlw	0
  9508  01620C  0100               	movlb	0	; () banked
  9509  01620E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
  9510                           
  9511                           ; BSR set to: 0
  9512                           ;Port.c: 41: }
  9513                           
  9514                           ; BSR set to: 0
  9515  016210  0012               	return	
  9516  016212                     l337:
  9517                           
  9518                           ; BSR set to: 0
  9519  016212  0100               	movlb	0	; () banked
  9520  016214  5162               	movf	GetPortProperties@pInput& (0+255),w,b
  9521                           
  9522                           ; Switch size 1, requested type "space"
  9523                           ; Number of cases is 7, Range of values is 0 to 6
  9524                           ; switch strategies available:
  9525                           ; Name         Instructions Cycles
  9526                           ; simple_byte           22    12 (average)
  9527                           ;	Chosen strategy is simple_byte
  9528  016216  0A00               	xorlw	0	; case 0
  9529  016218  B4D8               	btfsc	status,2,c
  9530  01621A  D7C3               	goto	l338
  9531  01621C  0A01               	xorlw	1	; case 1
  9532  01621E  B4D8               	btfsc	status,2,c
  9533  016220  D7C7               	goto	l340
  9534  016222  0A03               	xorlw	3	; case 2
  9535  016224  B4D8               	btfsc	status,2,c
  9536  016226  D7CB               	goto	l341
  9537  016228  0A01               	xorlw	1	; case 3
  9538  01622A  B4D8               	btfsc	status,2,c
  9539  01622C  D7CF               	goto	l342
  9540  01622E  0A07               	xorlw	7	; case 4
  9541  016230  B4D8               	btfsc	status,2,c
  9542  016232  D7D3               	goto	l343
  9543  016234  0A01               	xorlw	1	; case 5
  9544  016236  B4D8               	btfsc	status,2,c
  9545  016238  D7D7               	goto	l344
  9546  01623A  0A03               	xorlw	3	; case 6
  9547  01623C  B4D8               	btfsc	status,2,c
  9548  01623E  D7DB               	goto	l345
  9549  016240  D7E1               	goto	l346
  9550  016242                     __end_of_GetPortProperties:
  9551                           	opt stack 0
  9552                           tosu	equ	0xFFF
  9553                           tosh	equ	0xFFE
  9554                           tosl	equ	0xFFD
  9555                           pclath	equ	0xFFA
  9556                           tblptru	equ	0xFF8
  9557                           tblptrh	equ	0xFF7
  9558                           tblptrl	equ	0xFF6
  9559                           tablat	equ	0xFF5
  9560                           prodh	equ	0xFF4
  9561                           prodl	equ	0xFF3
  9562                           postinc0	equ	0xFEE
  9563                           wreg	equ	0xFE8
  9564                           indf1	equ	0xFE7
  9565                           postdec1	equ	0xFE5
  9566                           fsr1h	equ	0xFE2
  9567                           fsr1l	equ	0xFE1
  9568                           indf2	equ	0xFDF
  9569                           postinc2	equ	0xFDE
  9570                           postdec2	equ	0xFDD
  9571                           plusw2	equ	0xFDB
  9572                           fsr2h	equ	0xFDA
  9573                           fsr2l	equ	0xFD9
  9574                           status	equ	0xFD8
  9575                           
  9576 ;; *************** function _GetPortPORT *****************
  9577 ;; Defined at:
  9578 ;;		line 44 in file "Library/Port.c"
  9579 ;; Parameters:    Size  Location     Type
  9580 ;;  pInput          1    wreg     enum E6786
  9581 ;; Auto vars:     Size  Location     Type
  9582 ;;  pInput          1    2[BANK0 ] enum E6786
  9583 ;; Return value:  Size  Location     Type
  9584 ;;                  2    0[BANK0 ] PTR struct Byte
  9585 ;; Registers used:
  9586 ;;		wreg, status,2, status,0
  9587 ;; Tracked objects:
  9588 ;;		On entry : 0/0
  9589 ;;		On exit  : 0/0
  9590 ;;		Unchanged: 0/0
  9591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9592 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9593 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;Total ram usage:        3 bytes
  9597 ;; Hardware stack levels used:    1
  9598 ;; Hardware stack levels required when called:    7
  9599 ;; This function calls:
  9600 ;;		Nothing
  9601 ;; This function is called by:
  9602 ;;		_Port_Init
  9603 ;; This function uses a non-reentrant model
  9604 ;;
  9605                           
  9606                           	psect	text40
  9607  016242                     __ptext40:
  9608                           	opt stack 0
  9609  016242                     _GetPortPORT:
  9610                           	opt stack 20
  9611                           
  9612                           ; BSR set to: 0
  9613                           ;incstack = 0
  9614                           ;GetPortPORT@pInput stored from wreg
  9615  016242  0100               	movlb	0	; () banked
  9616  016244  6F62               	movwf	GetPortPORT@pInput& (0+255),b
  9617                           
  9618                           ;Port.c: 46: switch (pInput)
  9619  016246  D038               	goto	l350
  9620  016248                     
  9621                           ;Port.c: 49: return (BytePtr)&PORTA;
  9622  016248  0E80               	movlw	128
  9623  01624A  0100               	movlb	0	; () banked
  9624  01624C  6F60               	movwf	?_GetPortPORT& (0+255),b
  9625  01624E  0E0F               	movlw	15
  9626  016250  0100               	movlb	0	; () banked
  9627  016252  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9628                           
  9629                           ; BSR set to: 0
  9630  016254  0012               	return	
  9631  016256                     
  9632                           ; BSR set to: 0
  9633                           ;Port.c: 51: return (BytePtr)&PORTB;
  9634                           
  9635                           ; BSR set to: 0
  9636  016256  0E81               	movlw	129
  9637  016258  0100               	movlb	0	; () banked
  9638  01625A  6F60               	movwf	?_GetPortPORT& (0+255),b
  9639  01625C  0E0F               	movlw	15
  9640  01625E  0100               	movlb	0	; () banked
  9641  016260  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9642                           
  9643                           ; BSR set to: 0
  9644  016262  0012               	return	
  9645  016264                     
  9646                           ; BSR set to: 0
  9647                           ;Port.c: 53: return (BytePtr)&PORTC;
  9648                           
  9649                           ; BSR set to: 0
  9650  016264  0E82               	movlw	130
  9651  016266  0100               	movlb	0	; () banked
  9652  016268  6F60               	movwf	?_GetPortPORT& (0+255),b
  9653  01626A  0E0F               	movlw	15
  9654  01626C  0100               	movlb	0	; () banked
  9655  01626E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9656                           
  9657                           ; BSR set to: 0
  9658  016270  0012               	return	
  9659  016272                     
  9660                           ; BSR set to: 0
  9661                           ;Port.c: 55: return (BytePtr)&PORTD;
  9662                           
  9663                           ; BSR set to: 0
  9664  016272  0E83               	movlw	131
  9665  016274  0100               	movlb	0	; () banked
  9666  016276  6F60               	movwf	?_GetPortPORT& (0+255),b
  9667  016278  0E0F               	movlw	15
  9668  01627A  0100               	movlb	0	; () banked
  9669  01627C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9670                           
  9671                           ; BSR set to: 0
  9672  01627E  0012               	return	
  9673  016280                     
  9674                           ; BSR set to: 0
  9675                           ;Port.c: 57: return (BytePtr)&PORTE;
  9676                           
  9677                           ; BSR set to: 0
  9678  016280  0E84               	movlw	132
  9679  016282  0100               	movlb	0	; () banked
  9680  016284  6F60               	movwf	?_GetPortPORT& (0+255),b
  9681  016286  0E0F               	movlw	15
  9682  016288  0100               	movlb	0	; () banked
  9683  01628A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9684                           
  9685                           ; BSR set to: 0
  9686  01628C  0012               	return	
  9687  01628E                     
  9688                           ; BSR set to: 0
  9689                           ;Port.c: 59: return (BytePtr)&PORTF;
  9690                           
  9691                           ; BSR set to: 0
  9692  01628E  0E85               	movlw	133
  9693  016290  0100               	movlb	0	; () banked
  9694  016292  6F60               	movwf	?_GetPortPORT& (0+255),b
  9695  016294  0E0F               	movlw	15
  9696  016296  0100               	movlb	0	; () banked
  9697  016298  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9698                           
  9699                           ; BSR set to: 0
  9700  01629A  0012               	return	
  9701  01629C                     
  9702                           ; BSR set to: 0
  9703                           ;Port.c: 61: return (BytePtr)&PORTG;
  9704                           
  9705                           ; BSR set to: 0
  9706  01629C  0E86               	movlw	134
  9707  01629E  0100               	movlb	0	; () banked
  9708  0162A0  6F60               	movwf	?_GetPortPORT& (0+255),b
  9709  0162A2  0E0F               	movlw	15
  9710  0162A4  0100               	movlb	0	; () banked
  9711  0162A6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9712                           
  9713                           ; BSR set to: 0
  9714  0162A8  0012               	return	
  9715  0162AA                     
  9716                           ; BSR set to: 0
  9717                           ;Port.c: 63: return (void*)0;
  9718                           
  9719                           ; BSR set to: 0
  9720  0162AA  0E00               	movlw	0
  9721  0162AC  0100               	movlb	0	; () banked
  9722  0162AE  6F60               	movwf	?_GetPortPORT& (0+255),b
  9723  0162B0  0E00               	movlw	0
  9724  0162B2  0100               	movlb	0	; () banked
  9725  0162B4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
  9726                           
  9727                           ; BSR set to: 0
  9728                           ;Port.c: 64: }
  9729                           
  9730                           ; BSR set to: 0
  9731  0162B6  0012               	return	
  9732  0162B8                     l350:
  9733                           
  9734                           ; BSR set to: 0
  9735  0162B8  0100               	movlb	0	; () banked
  9736  0162BA  5162               	movf	GetPortPORT@pInput& (0+255),w,b
  9737                           
  9738                           ; Switch size 1, requested type "space"
  9739                           ; Number of cases is 7, Range of values is 0 to 6
  9740                           ; switch strategies available:
  9741                           ; Name         Instructions Cycles
  9742                           ; simple_byte           22    12 (average)
  9743                           ;	Chosen strategy is simple_byte
  9744  0162BC  0A00               	xorlw	0	; case 0
  9745  0162BE  B4D8               	btfsc	status,2,c
  9746  0162C0  D7C3               	goto	l351
  9747  0162C2  0A01               	xorlw	1	; case 1
  9748  0162C4  B4D8               	btfsc	status,2,c
  9749  0162C6  D7C7               	goto	l353
  9750  0162C8  0A03               	xorlw	3	; case 2
  9751  0162CA  B4D8               	btfsc	status,2,c
  9752  0162CC  D7CB               	goto	l354
  9753  0162CE  0A01               	xorlw	1	; case 3
  9754  0162D0  B4D8               	btfsc	status,2,c
  9755  0162D2  D7CF               	goto	l355
  9756  0162D4  0A07               	xorlw	7	; case 4
  9757  0162D6  B4D8               	btfsc	status,2,c
  9758  0162D8  D7D3               	goto	l356
  9759  0162DA  0A01               	xorlw	1	; case 5
  9760  0162DC  B4D8               	btfsc	status,2,c
  9761  0162DE  D7D7               	goto	l357
  9762  0162E0  0A03               	xorlw	3	; case 6
  9763  0162E2  B4D8               	btfsc	status,2,c
  9764  0162E4  D7DB               	goto	l358
  9765  0162E6  D7E1               	goto	l359
  9766  0162E8                     __end_of_GetPortPORT:
  9767                           	opt stack 0
  9768                           tosu	equ	0xFFF
  9769                           tosh	equ	0xFFE
  9770                           tosl	equ	0xFFD
  9771                           pclath	equ	0xFFA
  9772                           tblptru	equ	0xFF8
  9773                           tblptrh	equ	0xFF7
  9774                           tblptrl	equ	0xFF6
  9775                           tablat	equ	0xFF5
  9776                           prodh	equ	0xFF4
  9777                           prodl	equ	0xFF3
  9778                           postinc0	equ	0xFEE
  9779                           wreg	equ	0xFE8
  9780                           indf1	equ	0xFE7
  9781                           postdec1	equ	0xFE5
  9782                           fsr1h	equ	0xFE2
  9783                           fsr1l	equ	0xFE1
  9784                           indf2	equ	0xFDF
  9785                           postinc2	equ	0xFDE
  9786                           postdec2	equ	0xFDD
  9787                           plusw2	equ	0xFDB
  9788                           fsr2h	equ	0xFDA
  9789                           fsr2l	equ	0xFD9
  9790                           status	equ	0xFD8
  9791                           
  9792 ;; *************** function _LED_Init *****************
  9793 ;; Defined at:
  9794 ;;		line 15 in file "Library/LED.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;  pLED            1    wreg     enum E6739
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;  pLED            1   45[BANK0 ] enum E6739
  9799 ;; Return value:  Size  Location     Type
  9800 ;;                  1    wreg      void 
  9801 ;; Registers used:
  9802 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9809 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9811 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9812 ;;Total ram usage:        1 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:   12
  9815 ;; This function calls:
  9816 ;;		_LED_Set
  9817 ;;		_Port_SetPinType
  9818 ;; This function is called by:
  9819 ;;		_MXK_Init
  9820 ;; This function uses a non-reentrant model
  9821 ;;
  9822                           
  9823                           	psect	text41
  9824  017266                     __ptext41:
  9825                           	opt stack 0
  9826  017266                     _LED_Init:
  9827                           	opt stack 16
  9828                           
  9829                           ; BSR set to: 0
  9830                           ;incstack = 0
  9831                           ;LED_Init@pLED stored from wreg
  9832  017266  0100               	movlb	0	; () banked
  9833  017268  6F8D               	movwf	LED_Init@pLED& (0+255),b
  9834                           
  9835                           ;LED.c: 17: switch (pLED)
  9836  01726A  D01E               	goto	l220
  9837  01726C                     
  9838                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  9839  01726C  0EB3               	movlw	low _PortC
  9840  01726E  0100               	movlb	0	; () banked
  9841  017270  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9842  017272  0E01               	movlw	high _PortC
  9843  017274  0100               	movlb	0	; () banked
  9844  017276  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9845  017278  0E00               	movlw	0
  9846  01727A  0100               	movlb	0	; () banked
  9847  01727C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9848  01727E  0E03               	movlw	3
  9849  017280  0100               	movlb	0	; () banked
  9850  017282  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9851  017284  EC97  F09B         	call	_Port_SetPinType	;wreg free
  9852                           
  9853                           ;LED.c: 21: break;
  9854  017288  D017               	goto	l222
  9855  01728A                     
  9856                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  9857  01728A  0EB3               	movlw	low _PortC
  9858  01728C  0100               	movlb	0	; () banked
  9859  01728E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9860  017290  0E01               	movlw	high _PortC
  9861  017292  0100               	movlb	0	; () banked
  9862  017294  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9863  017296  0E01               	movlw	1
  9864  017298  0100               	movlb	0	; () banked
  9865  01729A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9866  01729C  0E03               	movlw	3
  9867  01729E  0100               	movlb	0	; () banked
  9868  0172A0  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9869  0172A2  EC97  F09B         	call	_Port_SetPinType	;wreg free
  9870                           
  9871                           ;LED.c: 25: }
  9872                           
  9873                           ;LED.c: 24: break;
  9874  0172A6  D008               	goto	l222
  9875  0172A8                     l220:
  9876  0172A8  0100               	movlb	0	; () banked
  9877  0172AA  518D               	movf	LED_Init@pLED& (0+255),w,b
  9878                           
  9879                           ; Switch size 1, requested type "space"
  9880                           ; Number of cases is 2, Range of values is 0 to 1
  9881                           ; switch strategies available:
  9882                           ; Name         Instructions Cycles
  9883                           ; simple_byte            7     4 (average)
  9884                           ;	Chosen strategy is simple_byte
  9885  0172AC  0A00               	xorlw	0	; case 0
  9886  0172AE  B4D8               	btfsc	status,2,c
  9887  0172B0  D7DD               	goto	l221
  9888  0172B2  0A01               	xorlw	1	; case 1
  9889  0172B4  B4D8               	btfsc	status,2,c
  9890  0172B6  D7E9               	goto	l223
  9891  0172B8                     l222:
  9892                           
  9893                           ;LED.c: 26: LED_Set(pLED, 0);
  9894                           
  9895                           ; BSR set to: 0
  9896  0172B8  0E00               	movlw	0
  9897  0172BA  0100               	movlb	0	; () banked
  9898  0172BC  6F74               	movwf	LED_Set@pValue& (0+255),b
  9899  0172BE  0100               	movlb	0	; () banked
  9900  0172C0  518D               	movf	LED_Init@pLED& (0+255),w,b
  9901  0172C2  EC6C  F0BA         	call	_LED_Set
  9902  0172C6  0012               	return		;funcret
  9903  0172C8                     __end_of_LED_Init:
  9904                           	opt stack 0
  9905                           tosu	equ	0xFFF
  9906                           tosh	equ	0xFFE
  9907                           tosl	equ	0xFFD
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           postinc0	equ	0xFEE
  9916                           wreg	equ	0xFE8
  9917                           indf1	equ	0xFE7
  9918                           postdec1	equ	0xFE5
  9919                           fsr1h	equ	0xFE2
  9920                           fsr1l	equ	0xFE1
  9921                           indf2	equ	0xFDF
  9922                           postinc2	equ	0xFDE
  9923                           postdec2	equ	0xFDD
  9924                           plusw2	equ	0xFDB
  9925                           fsr2h	equ	0xFDA
  9926                           fsr2l	equ	0xFD9
  9927                           status	equ	0xFD8
  9928                           
  9929 ;; *************** function _LED_Set *****************
  9930 ;; Defined at:
  9931 ;;		line 33 in file "Library/LED.c"
  9932 ;; Parameters:    Size  Location     Type
  9933 ;;  pLED            1    wreg     enum E6739
  9934 ;;  pValue          1   20[BANK0 ] unsigned char 
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;  pLED            1   21[BANK0 ] enum E6739
  9937 ;; Return value:  Size  Location     Type
  9938 ;;                  1    wreg      void 
  9939 ;; Registers used:
  9940 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9941 ;; Tracked objects:
  9942 ;;		On entry : 0/0
  9943 ;;		On exit  : 0/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9946 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9949 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9950 ;;Total ram usage:        2 bytes
  9951 ;; Hardware stack levels used:    1
  9952 ;; Hardware stack levels required when called:   11
  9953 ;; This function calls:
  9954 ;;		_Port_SetPin
  9955 ;; This function is called by:
  9956 ;;		_LED_Init
  9957 ;;		_SYSTEM_Initialize
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           	psect	text42
  9962  0174D8                     __ptext42:
  9963                           	opt stack 0
  9964  0174D8                     _LED_Set:
  9965                           	opt stack 16
  9966                           
  9967                           ;incstack = 0
  9968                           ;LED_Set@pLED stored from wreg
  9969  0174D8  0100               	movlb	0	; () banked
  9970  0174DA  6F75               	movwf	LED_Set@pLED& (0+255),b
  9971                           
  9972                           ;LED.c: 35: switch (pLED)
  9973  0174DC  D01C               	goto	l227
  9974  0174DE                     
  9975                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  9976  0174DE  0EB3               	movlw	low _PortC
  9977  0174E0  0100               	movlb	0	; () banked
  9978  0174E2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9979  0174E4  0E01               	movlw	high _PortC
  9980  0174E6  0100               	movlb	0	; () banked
  9981  0174E8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9982  0174EA  0E00               	movlw	0
  9983  0174EC  0100               	movlb	0	; () banked
  9984  0174EE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9985  0174F0  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
  9986  0174F4  EC37  F0AC         	call	_Port_SetPin	;wreg free
  9987                           
  9988                           ;LED.c: 39: break;
  9989  0174F8  0012               	return	
  9990  0174FA                     
  9991                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  9992  0174FA  0EB3               	movlw	low _PortC
  9993  0174FC  0100               	movlb	0	; () banked
  9994  0174FE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9995  017500  0E01               	movlw	high _PortC
  9996  017502  0100               	movlb	0	; () banked
  9997  017504  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9998  017506  0E01               	movlw	1
  9999  017508  0100               	movlb	0	; () banked
 10000  01750A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10001  01750C  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 10002  017510  EC37  F0AC         	call	_Port_SetPin	;wreg free
 10003                           
 10004                           ;LED.c: 43: }
 10005                           
 10006                           ;LED.c: 42: break;
 10007  017514  0012               	return	
 10008  017516                     l227:
 10009  017516  0100               	movlb	0	; () banked
 10010  017518  5175               	movf	LED_Set@pLED& (0+255),w,b
 10011                           
 10012                           ; Switch size 1, requested type "space"
 10013                           ; Number of cases is 2, Range of values is 0 to 1
 10014                           ; switch strategies available:
 10015                           ; Name         Instructions Cycles
 10016                           ; simple_byte            7     4 (average)
 10017                           ;	Chosen strategy is simple_byte
 10018  01751A  0A00               	xorlw	0	; case 0
 10019  01751C  B4D8               	btfsc	status,2,c
 10020  01751E  D7DF               	goto	l228
 10021  017520  0A01               	xorlw	1	; case 1
 10022  017522  A4D8               	btfss	status,2,c
 10023  017524  0012               	return	
 10024  017526  D7E9               	goto	l230
 10025  017528                     __end_of_LED_Set:
 10026                           	opt stack 0
 10027                           tosu	equ	0xFFF
 10028                           tosh	equ	0xFFE
 10029                           tosl	equ	0xFFD
 10030                           pclath	equ	0xFFA
 10031                           tblptru	equ	0xFF8
 10032                           tblptrh	equ	0xFF7
 10033                           tblptrl	equ	0xFF6
 10034                           tablat	equ	0xFF5
 10035                           prodh	equ	0xFF4
 10036                           prodl	equ	0xFF3
 10037                           postinc0	equ	0xFEE
 10038                           wreg	equ	0xFE8
 10039                           indf1	equ	0xFE7
 10040                           postdec1	equ	0xFE5
 10041                           fsr1h	equ	0xFE2
 10042                           fsr1l	equ	0xFE1
 10043                           indf2	equ	0xFDF
 10044                           postinc2	equ	0xFDE
 10045                           postdec2	equ	0xFDD
 10046                           plusw2	equ	0xFDB
 10047                           fsr2h	equ	0xFDA
 10048                           fsr2l	equ	0xFD9
 10049                           status	equ	0xFD8
 10050                           
 10051 ;; *************** function _MXK_Dequeue *****************
 10052 ;; Defined at:
 10053 ;;		line 153 in file "Library/MXK.c"
 10054 ;; Parameters:    Size  Location     Type
 10055 ;;		None
 10056 ;; Auto vars:     Size  Location     Type
 10057 ;;		None
 10058 ;; Return value:  Size  Location     Type
 10059 ;;                  1    wreg      void 
 10060 ;; Registers used:
 10061 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10062 ;; Tracked objects:
 10063 ;;		On entry : 0/0
 10064 ;;		On exit  : 0/0
 10065 ;;		Unchanged: 0/0
 10066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10071 ;;Total ram usage:        0 bytes
 10072 ;; Hardware stack levels used:    1
 10073 ;; Hardware stack levels required when called:   12
 10074 ;; This function calls:
 10075 ;;		Absolute function
 10076 ;;		_Motor_Step
 10077 ;; This function is called by:
 10078 ;;		_initialise
 10079 ;;		_main
 10080 ;; This function uses a non-reentrant model
 10081 ;;
 10082                           
 10083                           	psect	text43
 10084  017904                     __ptext43:
 10085                           	opt stack 0
 10086  017904                     _MXK_Dequeue:
 10087                           	opt stack 17
 10088                           
 10089                           ;MXK.c: 155: if (lQueue)
 10090                           
 10091                           ;incstack = 0
 10092  017904  0100               	movlb	0	; () banked
 10093  017906  51DB               	movf	_lQueue& (0+255),w,b	;volatile
 10094  017908  0100               	movlb	0	; () banked
 10095  01790A  11DC               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10096  01790C  0100               	movlb	0	; () banked
 10097  01790E  11DD               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10098  017910  B4D8               	btfsc	status,2,c
 10099  017912  D00D               	goto	u14959
 10100                           
 10101                           ; BSR set to: 0
 10102                           ;MXK.c: 156: lQueue();
 10103  017914  D801               	call	u14958
 10104  017916  D00B               	goto	u14959
 10105  017918                     u14958:
 10106  017918  0005               	push	
 10107  01791A  6EFA               	movwf	pclath,c
 10108  01791C  0100               	movlb	0	; () banked
 10109  01791E  51DB               	movf	_lQueue& (0+255),w,b	;volatile
 10110  017920  6EFD               	movwf	tosl,c
 10111  017922  51DC               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 10112  017924  6EFE               	movwf	tosh,c
 10113  017926  51DD               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 10114  017928  6EFF               	movwf	tosu,c
 10115  01792A  50FA               	movf	pclath,w,c
 10116  01792C  0012               	return		;indir
 10117  01792E                     u14959:
 10118                           
 10119                           ;MXK.c: 157: lQueue = 0;
 10120  01792E  0E00               	movlw	0
 10121  017930  0100               	movlb	0	; () banked
 10122  017932  6FDB               	movwf	_lQueue& (0+255),b	;volatile
 10123  017934  0E00               	movlw	0
 10124  017936  0100               	movlb	0	; () banked
 10125  017938  6FDC               	movwf	(_lQueue+1)& (0+255),b	;volatile
 10126  01793A  0E00               	movlw	0
 10127  01793C  0100               	movlb	0	; () banked
 10128  01793E  6FDD               	movwf	(_lQueue+2)& (0+255),b	;volatile
 10129                           
 10130                           ; BSR set to: 0
 10131  017940  0012               	return		;funcret
 10132  017942                     __end_of_MXK_Dequeue:
 10133                           	opt stack 0
 10134                           tosu	equ	0xFFF
 10135                           tosh	equ	0xFFE
 10136                           tosl	equ	0xFFD
 10137                           pclath	equ	0xFFA
 10138                           tblptru	equ	0xFF8
 10139                           tblptrh	equ	0xFF7
 10140                           tblptrl	equ	0xFF6
 10141                           tablat	equ	0xFF5
 10142                           prodh	equ	0xFF4
 10143                           prodl	equ	0xFF3
 10144                           postinc0	equ	0xFEE
 10145                           wreg	equ	0xFE8
 10146                           indf1	equ	0xFE7
 10147                           postdec1	equ	0xFE5
 10148                           fsr1h	equ	0xFE2
 10149                           fsr1l	equ	0xFE1
 10150                           indf2	equ	0xFDF
 10151                           postinc2	equ	0xFDE
 10152                           postdec2	equ	0xFDD
 10153                           plusw2	equ	0xFDB
 10154                           fsr2h	equ	0xFDA
 10155                           fsr2l	equ	0xFD9
 10156                           status	equ	0xFD8
 10157                           
 10158 ;; *************** function _Motor_Step *****************
 10159 ;; Defined at:
 10160 ;;		line 75 in file "Library/Motor.c"
 10161 ;; Parameters:    Size  Location     Type
 10162 ;;		None
 10163 ;; Auto vars:     Size  Location     Type
 10164 ;;		None
 10165 ;; Return value:  Size  Location     Type
 10166 ;;                  1    wreg      void 
 10167 ;; Registers used:
 10168 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10169 ;; Tracked objects:
 10170 ;;		On entry : 0/0
 10171 ;;		On exit  : 0/0
 10172 ;;		Unchanged: 0/0
 10173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10176 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10177 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10178 ;;Total ram usage:        2 bytes
 10179 ;; Hardware stack levels used:    1
 10180 ;; Hardware stack levels required when called:   11
 10181 ;; This function calls:
 10182 ;;		_MXK_Queue
 10183 ;;		_MXK_Release
 10184 ;;		_MXK_SwitchTo
 10185 ;;		_Port_SetPin
 10186 ;;		_Timer0_Restart
 10187 ;;		_Timer0_Stop
 10188 ;; This function is called by:
 10189 ;;		_Motor_Init
 10190 ;;		_MXK_Dequeue
 10191 ;;		_Timer0_ISR
 10192 ;; This function uses a non-reentrant model
 10193 ;;
 10194                           
 10195                           	psect	text44
 10196  014B00                     __ptext44:
 10197                           	opt stack 0
 10198  014B00                     _Motor_Step:
 10199                           	opt stack 0
 10200                           
 10201                           ; BSR set to: 0
 10202                           ;Skip over the trampoline to the duplicate function for level 2
 10203  014B00  B251               	btfsc	btemp,1,c
 10204  014B02  EFDB  F0A8         	goto	i2_Motor_Step
 10205  014B06                     _Motor_Step$intlevel0:
 10206                           	opt stack 17
 10207                           
 10208                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 10209                           
 10210                           ;incstack = 0
 10211  014B06  0100               	movlb	0	; () banked
 10212  014B08  EE20 F004          	lfsr	2,4
 10213  014B0C  51EA               	movf	_lMotor& (0+255),w,b
 10214  014B0E  26D9               	addwf	fsr2l,f,c
 10215  014B10  51EB               	movf	(_lMotor+1)& (0+255),w,b
 10216  014B12  22DA               	addwfc	fsr2h,f,c
 10217  014B14  50DF               	movf	indf2,w,c
 10218  014B16  EC00  F0BC         	call	_MXK_SwitchTo
 10219  014B1A  0900               	iorlw	0
 10220  014B1C  B4D8               	btfsc	status,2,c
 10221  014B1E  D07A               	goto	l1627
 10222                           
 10223                           ;Motor.c: 78: {
 10224                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 10225  014B20  C0EA  FFD9         	movff	_lMotor,fsr2l
 10226  014B24  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10227  014B28  50DE               	movf	postinc2,w,c
 10228  014B2A  10DE               	iorwf	postinc2,w,c
 10229  014B2C  B4D8               	btfsc	status,2,c
 10230  014B2E  D06D               	goto	l1628
 10231                           
 10232                           ;Motor.c: 80: {
 10233                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 10234  014B30  C0EA  FFD9         	movff	_lMotor,fsr2l
 10235  014B34  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10236  014B38  0E01               	movlw	1
 10237  014B3A  BEDB               	btfsc	plusw2,7,c
 10238  014B3C  D026               	goto	l1629
 10239  014B3E  0E01               	movlw	1
 10240  014B40  50DB               	movf	plusw2,w,c
 10241  014B42  E103               	bnz	u12680
 10242  014B44  04DE               	decf	postinc2,w,c
 10243  014B46  A0D8               	btfss	status,0,c
 10244  014B48  D020               	goto	l1629
 10245  014B4A                     u12680:
 10246                           
 10247                           ;Motor.c: 83: {
 10248                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 10249  014B4A  C0EA  FFD9         	movff	_lMotor,fsr2l
 10250  014B4E  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10251  014B52  28DE               	incf	postinc2,w,c
 10252  014B54  E104               	bnz	u12690
 10253  014B56  0E7F               	movlw	127
 10254  014B58  18DE               	xorwf	postinc2,w,c
 10255  014B5A  B4D8               	btfsc	status,2,c
 10256  014B5C  D007               	goto	l1630
 10257  014B5E                     u12690:
 10258                           
 10259                           ;Motor.c: 85: lMotor->mDelta --;
 10260  014B5E  C0EA  FFD9         	movff	_lMotor,fsr2l
 10261  014B62  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10262  014B66  06DE               	decf	postinc2,f,c
 10263  014B68  0E00               	movlw	0
 10264  014B6A  5ADD               	subwfb	postdec2,f,c
 10265  014B6C                     l1630:
 10266                           
 10267                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 10268  014B6C  0E95               	movlw	low _PortE
 10269  014B6E  0100               	movlb	0	; () banked
 10270  014B70  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10271  014B72  0E01               	movlw	high _PortE
 10272  014B74  0100               	movlb	0	; () banked
 10273  014B76  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10274  014B78  0E00               	movlw	0
 10275  014B7A  0100               	movlb	0	; () banked
 10276  014B7C  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10277  014B7E  0E01               	movlw	1
 10278  014B80  0100               	movlb	0	; () banked
 10279  014B82  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10280  014B84  EC37  F0AC         	call	_Port_SetPin	;wreg free
 10281                           
 10282                           ;Motor.c: 88: }
 10283  014B88  D01F               	goto	l1631
 10284  014B8A                     l1629:
 10285                           
 10286                           ;Motor.c: 89: else
 10287                           ;Motor.c: 90: {
 10288                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 10289  014B8A  C0EA  FFD9         	movff	_lMotor,fsr2l
 10290  014B8E  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10291  014B92  04DE               	decf	postinc2,w,c
 10292  014B94  E104               	bnz	u12700
 10293  014B96  0E80               	movlw	128
 10294  014B98  18DE               	xorwf	postinc2,w,c
 10295  014B9A  B4D8               	btfsc	status,2,c
 10296  014B9C  D007               	goto	l1632
 10297  014B9E                     u12700:
 10298                           
 10299                           ;Motor.c: 92: lMotor->mDelta ++;
 10300  014B9E  C0EA  FFD9         	movff	_lMotor,fsr2l
 10301  014BA2  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 10302  014BA6  2ADE               	incf	postinc2,f,c
 10303  014BA8  0E00               	movlw	0
 10304  014BAA  22DD               	addwfc	postdec2,f,c
 10305  014BAC                     l1632:
 10306                           
 10307                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 10308  014BAC  0E95               	movlw	low _PortE
 10309  014BAE  0100               	movlb	0	; () banked
 10310  014BB0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10311  014BB2  0E01               	movlw	high _PortE
 10312  014BB4  0100               	movlb	0	; () banked
 10313  014BB6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10314  014BB8  0E00               	movlw	0
 10315  014BBA  0100               	movlb	0	; () banked
 10316  014BBC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10317  014BBE  0E00               	movlw	0
 10318  014BC0  0100               	movlb	0	; () banked
 10319  014BC2  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10320  014BC4  EC37  F0AC         	call	_Port_SetPin	;wreg free
 10321  014BC8                     l1631:
 10322                           
 10323                           ;Motor.c: 95: }
 10324                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 10325  014BC8  0E95               	movlw	low _PortE
 10326  014BCA  0100               	movlb	0	; () banked
 10327  014BCC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10328  014BCE  0E01               	movlw	high _PortE
 10329  014BD0  0100               	movlb	0	; () banked
 10330  014BD2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10331  014BD4  0E01               	movlw	1
 10332  014BD6  0100               	movlb	0	; () banked
 10333  014BD8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10334  014BDA  0E01               	movlw	1
 10335  014BDC  0100               	movlb	0	; () banked
 10336  014BDE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10337  014BE0  EC37  F0AC         	call	_Port_SetPin	;wreg free
 10338                           
 10339                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 10340  014BE4  0E95               	movlw	low _PortE
 10341  014BE6  0100               	movlb	0	; () banked
 10342  014BE8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10343  014BEA  0E01               	movlw	high _PortE
 10344  014BEC  0100               	movlb	0	; () banked
 10345  014BEE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10346  014BF0  0E01               	movlw	1
 10347  014BF2  0100               	movlb	0	; () banked
 10348  014BF4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10349  014BF6  0E00               	movlw	0
 10350  014BF8  0100               	movlb	0	; () banked
 10351  014BFA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10352  014BFC  EC37  F0AC         	call	_Port_SetPin	;wreg free
 10353                           
 10354                           ;Motor.c: 101: MXK_Release();
 10355  014C00  EC4A  F0BF         	call	_MXK_Release	;wreg free
 10356                           
 10357                           ;Motor.c: 102: Timer0_Restart();
 10358  014C04  EC07  F0C0         	call	_Timer0_Restart	;wreg free
 10359                           
 10360                           ;Motor.c: 103: return;
 10361  014C08  0012               	return	
 10362  014C0A                     l1628:
 10363                           
 10364                           ;Motor.c: 104: }
 10365                           ;Motor.c: 105: MXK_Release();
 10366  014C0A  EC4A  F0BF         	call	_MXK_Release	;wreg free
 10367                           
 10368                           ;Motor.c: 106: Timer0_Stop();
 10369  014C0E  EC38  F0C0         	call	_Timer0_Stop	;wreg free
 10370                           
 10371                           ;Motor.c: 107: return;
 10372  014C12  0012               	return	
 10373  014C14                     l1627:
 10374                           
 10375                           ;Motor.c: 108: }
 10376                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 10377  014C14  C029  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 10378  014C18  C02A  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 10379  014C1C  C02B  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 10380  014C20  ECF2  F0BF         	call	_MXK_Queue	;wreg free
 10381  014C24  0012               	return		;funcret
 10382  014C26                     __end_of_Motor_Step:
 10383                           	opt stack 0
 10384                           tosu	equ	0xFFF
 10385                           tosh	equ	0xFFE
 10386                           tosl	equ	0xFFD
 10387                           pclath	equ	0xFFA
 10388                           tblptru	equ	0xFF8
 10389                           tblptrh	equ	0xFF7
 10390                           tblptrl	equ	0xFF6
 10391                           tablat	equ	0xFF5
 10392                           prodh	equ	0xFF4
 10393                           prodl	equ	0xFF3
 10394                           postinc0	equ	0xFEE
 10395                           wreg	equ	0xFE8
 10396                           indf1	equ	0xFE7
 10397                           postdec1	equ	0xFE5
 10398                           fsr1h	equ	0xFE2
 10399                           fsr1l	equ	0xFE1
 10400                           indf2	equ	0xFDF
 10401                           postinc2	equ	0xFDE
 10402                           postdec2	equ	0xFDD
 10403                           plusw2	equ	0xFDB
 10404                           fsr2h	equ	0xFDA
 10405                           fsr2l	equ	0xFD9
 10406                           status	equ	0xFD8
 10407                           
 10408 ;; *************** function _Timer0_Stop *****************
 10409 ;; Defined at:
 10410 ;;		line 89 in file "Library/Timer0.c"
 10411 ;; Parameters:    Size  Location     Type
 10412 ;;		None
 10413 ;; Auto vars:     Size  Location     Type
 10414 ;;		None
 10415 ;; Return value:  Size  Location     Type
 10416 ;;                  1    wreg      void 
 10417 ;; Registers used:
 10418 ;;		None
 10419 ;; Tracked objects:
 10420 ;;		On entry : 0/0
 10421 ;;		On exit  : 0/0
 10422 ;;		Unchanged: 0/0
 10423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10428 ;;Total ram usage:        0 bytes
 10429 ;; Hardware stack levels used:    1
 10430 ;; Hardware stack levels required when called:    7
 10431 ;; This function calls:
 10432 ;;		Nothing
 10433 ;; This function is called by:
 10434 ;;		_Motor_Step
 10435 ;; This function uses a non-reentrant model
 10436 ;;
 10437                           
 10438                           	psect	text45
 10439  018070                     __ptext45:
 10440                           	opt stack 0
 10441  018070                     _Timer0_Stop:
 10442                           	opt stack 20
 10443                           
 10444                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 10445                           
 10446                           ;incstack = 0
 10447  018070  9AF2               	bcf	intcon,5,c	;volatile
 10448                           
 10449                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 10450  018072  94F2               	bcf	intcon,2,c	;volatile
 10451  018074  0012               	return		;funcret
 10452  018076                     __end_of_Timer0_Stop:
 10453                           	opt stack 0
 10454                           tosu	equ	0xFFF
 10455                           tosh	equ	0xFFE
 10456                           tosl	equ	0xFFD
 10457                           pclath	equ	0xFFA
 10458                           tblptru	equ	0xFF8
 10459                           tblptrh	equ	0xFF7
 10460                           tblptrl	equ	0xFF6
 10461                           tablat	equ	0xFF5
 10462                           prodh	equ	0xFF4
 10463                           prodl	equ	0xFF3
 10464                           intcon	equ	0xFF2
 10465                           postinc0	equ	0xFEE
 10466                           wreg	equ	0xFE8
 10467                           indf1	equ	0xFE7
 10468                           postdec1	equ	0xFE5
 10469                           fsr1h	equ	0xFE2
 10470                           fsr1l	equ	0xFE1
 10471                           indf2	equ	0xFDF
 10472                           postinc2	equ	0xFDE
 10473                           postdec2	equ	0xFDD
 10474                           plusw2	equ	0xFDB
 10475                           fsr2h	equ	0xFDA
 10476                           fsr2l	equ	0xFD9
 10477                           status	equ	0xFD8
 10478                           
 10479 ;; *************** function _Timer0_Restart *****************
 10480 ;; Defined at:
 10481 ;;		line 83 in file "Library/Timer0.c"
 10482 ;; Parameters:    Size  Location     Type
 10483 ;;		None
 10484 ;; Auto vars:     Size  Location     Type
 10485 ;;		None
 10486 ;; Return value:  Size  Location     Type
 10487 ;;                  1    wreg      void 
 10488 ;; Registers used:
 10489 ;;		None
 10490 ;; Tracked objects:
 10491 ;;		On entry : 0/0
 10492 ;;		On exit  : 0/0
 10493 ;;		Unchanged: 0/0
 10494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10499 ;;Total ram usage:        0 bytes
 10500 ;; Hardware stack levels used:    1
 10501 ;; Hardware stack levels required when called:    7
 10502 ;; This function calls:
 10503 ;;		Nothing
 10504 ;; This function is called by:
 10505 ;;		_Motor_Step
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text46
 10510  01800E                     __ptext46:
 10511                           	opt stack 0
 10512  01800E                     _Timer0_Restart:
 10513                           	opt stack 20
 10514                           
 10515                           ;Timer0.c: 85: TMR0 = COUNTER;
 10516                           
 10517                           ;incstack = 0
 10518  01800E  C02E  FFD6         	movff	_COUNTER,4054	;volatile
 10519  018012  C02F  FFD7         	movff	_COUNTER+1,4055	;volatile
 10520                           
 10521                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 10522  018016  8AF2               	bsf	intcon,5,c	;volatile
 10523  018018  0012               	return		;funcret
 10524  01801A                     __end_of_Timer0_Restart:
 10525                           	opt stack 0
 10526                           tosu	equ	0xFFF
 10527                           tosh	equ	0xFFE
 10528                           tosl	equ	0xFFD
 10529                           pclath	equ	0xFFA
 10530                           tblptru	equ	0xFF8
 10531                           tblptrh	equ	0xFF7
 10532                           tblptrl	equ	0xFF6
 10533                           tablat	equ	0xFF5
 10534                           prodh	equ	0xFF4
 10535                           prodl	equ	0xFF3
 10536                           intcon	equ	0xFF2
 10537                           postinc0	equ	0xFEE
 10538                           wreg	equ	0xFE8
 10539                           indf1	equ	0xFE7
 10540                           postdec1	equ	0xFE5
 10541                           fsr1h	equ	0xFE2
 10542                           fsr1l	equ	0xFE1
 10543                           indf2	equ	0xFDF
 10544                           postinc2	equ	0xFDE
 10545                           postdec2	equ	0xFDD
 10546                           plusw2	equ	0xFDB
 10547                           fsr2h	equ	0xFDA
 10548                           fsr2l	equ	0xFD9
 10549                           status	equ	0xFD8
 10550                           
 10551 ;; *************** function _MXK_SwitchTo *****************
 10552 ;; Defined at:
 10553 ;;		line 105 in file "Library/MXK.c"
 10554 ;; Parameters:    Size  Location     Type
 10555 ;;  pModule         1    wreg     enum E6927
 10556 ;; Auto vars:     Size  Location     Type
 10557 ;;  pModule         1    7[BANK0 ] enum E6927
 10558 ;;  CUR             1    6[BANK0 ] unsigned char 
 10559 ;; Return value:  Size  Location     Type
 10560 ;;                  1    wreg      unsigned char 
 10561 ;; Registers used:
 10562 ;;		wreg, status,2, status,0, cstack
 10563 ;; Tracked objects:
 10564 ;;		On entry : 0/0
 10565 ;;		On exit  : 0/0
 10566 ;;		Unchanged: 0/0
 10567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10569 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10571 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10572 ;;Total ram usage:        2 bytes
 10573 ;; Hardware stack levels used:    1
 10574 ;; Hardware stack levels required when called:    8
 10575 ;; This function calls:
 10576 ;;		_delay_us
 10577 ;; This function is called by:
 10578 ;;		_Motor_Step
 10579 ;; This function uses a non-reentrant model
 10580 ;;
 10581                           
 10582                           	psect	text47
 10583  017800                     __ptext47:
 10584                           	opt stack 0
 10585  017800                     _MXK_SwitchTo:
 10586                           	opt stack 19
 10587                           
 10588                           ;incstack = 0
 10589                           ;MXK_SwitchTo@pModule stored from wreg
 10590  017800  0100               	movlb	0	; () banked
 10591  017802  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 10592                           
 10593                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 10594  017804  5086               	movf	3974,w,c	;volatile
 10595  017806  0B0F               	andlw	15
 10596  017808  0100               	movlb	0	; () banked
 10597  01780A  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 10598                           
 10599                           ; BSR set to: 0
 10600                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 10601  01780C  504B               	movf	_Bus_State,w,c
 10602  01780E  A4D8               	btfss	status,2,c
 10603  017810  D002               	goto	l1730
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;MXK.c: 110: return 0;
 10607  017812  0E00               	movlw	0
 10608                           
 10609                           ; BSR set to: 0
 10610  017814  0012               	return	
 10611  017816                     l1730:
 10612                           
 10613                           ; BSR set to: 0
 10614                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 10615                           
 10616                           ; BSR set to: 0
 10617  017816  0E00               	movlw	0
 10618  017818  6E4B               	movwf	_Bus_State,c
 10619                           
 10620                           ; BSR set to: 0
 10621                           ;MXK.c: 114: if (CUR != pModule)
 10622  01781A  0100               	movlb	0	; () banked
 10623  01781C  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10624  01781E  0100               	movlb	0	; () banked
 10625  017820  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 10626  017822  B4D8               	btfsc	status,2,c
 10627  017824  D00C               	goto	l1732
 10628                           
 10629                           ; BSR set to: 0
 10630                           ;MXK.c: 115: {
 10631                           ;MXK.c: 116: PORTG &= ~(0xF);
 10632  017826  0EF0               	movlw	240
 10633  017828  1686               	andwf	3974,f,c	;volatile
 10634                           
 10635                           ;MXK.c: 117: PORTG |= pModule;
 10636  01782A  0100               	movlb	0	; () banked
 10637  01782C  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10638  01782E  1286               	iorwf	3974,f,c	;volatile
 10639                           
 10640                           ; BSR set to: 0
 10641                           ;MXK.c: 120: delay_us(10);
 10642  017830  0E00               	movlw	0
 10643  017832  0100               	movlb	0	; () banked
 10644  017834  6F61               	movwf	(delay_us@us+1)& (0+255),b
 10645  017836  0E0A               	movlw	10
 10646  017838  6F60               	movwf	delay_us@us& (0+255),b
 10647  01783A  EC43  F0BA         	call	_delay_us	;wreg free
 10648  01783E                     l1732:
 10649                           
 10650                           ;MXK.c: 121: }
 10651                           ;MXK.c: 122: return 1;
 10652  01783E  0E01               	movlw	1
 10653  017840  0012               	return	
 10654  017842                     __end_of_MXK_SwitchTo:
 10655                           	opt stack 0
 10656                           tosu	equ	0xFFF
 10657                           tosh	equ	0xFFE
 10658                           tosl	equ	0xFFD
 10659                           pclath	equ	0xFFA
 10660                           tblptru	equ	0xFF8
 10661                           tblptrh	equ	0xFF7
 10662                           tblptrl	equ	0xFF6
 10663                           tablat	equ	0xFF5
 10664                           prodh	equ	0xFF4
 10665                           prodl	equ	0xFF3
 10666                           intcon	equ	0xFF2
 10667                           postinc0	equ	0xFEE
 10668                           wreg	equ	0xFE8
 10669                           indf1	equ	0xFE7
 10670                           postdec1	equ	0xFE5
 10671                           fsr1h	equ	0xFE2
 10672                           fsr1l	equ	0xFE1
 10673                           indf2	equ	0xFDF
 10674                           postinc2	equ	0xFDE
 10675                           postdec2	equ	0xFDD
 10676                           plusw2	equ	0xFDB
 10677                           fsr2h	equ	0xFDA
 10678                           fsr2l	equ	0xFD9
 10679                           status	equ	0xFD8
 10680                           
 10681 ;; *************** function _MXK_Release *****************
 10682 ;; Defined at:
 10683 ;;		line 130 in file "Library/MXK.c"
 10684 ;; Parameters:    Size  Location     Type
 10685 ;;		None
 10686 ;; Auto vars:     Size  Location     Type
 10687 ;;		None
 10688 ;; Return value:  Size  Location     Type
 10689 ;;                  1    wreg      unsigned char 
 10690 ;; Registers used:
 10691 ;;		wreg, status,2, status,0
 10692 ;; Tracked objects:
 10693 ;;		On entry : 0/0
 10694 ;;		On exit  : 0/0
 10695 ;;		Unchanged: 0/0
 10696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10700 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10701 ;;Total ram usage:        0 bytes
 10702 ;; Hardware stack levels used:    1
 10703 ;; Hardware stack levels required when called:    7
 10704 ;; This function calls:
 10705 ;;		Nothing
 10706 ;; This function is called by:
 10707 ;;		_Motor_Step
 10708 ;;		_initialise
 10709 ;;		_main
 10710 ;; This function uses a non-reentrant model
 10711 ;;
 10712                           
 10713                           	psect	text48
 10714  017E94                     __ptext48:
 10715                           	opt stack 0
 10716  017E94                     _MXK_Release:
 10717                           	opt stack 22
 10718                           
 10719                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 10720                           
 10721                           ;incstack = 0
 10722  017E94  0E01               	movlw	1
 10723  017E96  6E4B               	movwf	_Bus_State,c
 10724                           
 10725                           ;MXK.c: 134: if (lQueue != 0)
 10726  017E98  0100               	movlb	0	; () banked
 10727  017E9A  51DB               	movf	_lQueue& (0+255),w,b	;volatile
 10728  017E9C  0100               	movlb	0	; () banked
 10729  017E9E  11DC               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10730  017EA0  0100               	movlb	0	; () banked
 10731  017EA2  11DD               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10732  017EA4  B4D8               	btfsc	status,2,c
 10733  017EA6  D002               	goto	l1735
 10734                           
 10735                           ; BSR set to: 0
 10736                           ;MXK.c: 135: return 1;
 10737  017EA8  0E01               	movlw	1
 10738                           
 10739                           ; BSR set to: 0
 10740  017EAA  0012               	return	
 10741  017EAC                     l1735:
 10742                           
 10743                           ; BSR set to: 0
 10744                           ;MXK.c: 137: return 0;
 10745                           
 10746                           ; BSR set to: 0
 10747  017EAC  0E00               	movlw	0
 10748  017EAE  0012               	return	
 10749  017EB0                     __end_of_MXK_Release:
 10750                           	opt stack 0
 10751                           tosu	equ	0xFFF
 10752                           tosh	equ	0xFFE
 10753                           tosl	equ	0xFFD
 10754                           pclath	equ	0xFFA
 10755                           tblptru	equ	0xFF8
 10756                           tblptrh	equ	0xFF7
 10757                           tblptrl	equ	0xFF6
 10758                           tablat	equ	0xFF5
 10759                           prodh	equ	0xFF4
 10760                           prodl	equ	0xFF3
 10761                           intcon	equ	0xFF2
 10762                           postinc0	equ	0xFEE
 10763                           wreg	equ	0xFE8
 10764                           indf1	equ	0xFE7
 10765                           postdec1	equ	0xFE5
 10766                           fsr1h	equ	0xFE2
 10767                           fsr1l	equ	0xFE1
 10768                           indf2	equ	0xFDF
 10769                           postinc2	equ	0xFDE
 10770                           postdec2	equ	0xFDD
 10771                           plusw2	equ	0xFDB
 10772                           fsr2h	equ	0xFDA
 10773                           fsr2l	equ	0xFD9
 10774                           status	equ	0xFD8
 10775                           
 10776 ;; *************** function _MXK_Queue *****************
 10777 ;; Defined at:
 10778 ;;		line 144 in file "Library/MXK.c"
 10779 ;; Parameters:    Size  Location     Type
 10780 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 10781 ;;		 -> Absolute function(1), Motor_Step(1), 
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;		None
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      void 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2, status,0
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10793 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;Total ram usage:        3 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    7
 10800 ;; This function calls:
 10801 ;;		Nothing
 10802 ;; This function is called by:
 10803 ;;		_Motor_Step
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           	psect	text49
 10808  017FE4                     __ptext49:
 10809                           	opt stack 0
 10810  017FE4                     _MXK_Queue:
 10811                           	opt stack 20
 10812                           
 10813                           ;MXK.c: 146: lQueue = pCallback;
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;incstack = 0
 10817  017FE4  C060  F0DB         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 10818  017FE8  C061  F0DC         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 10819  017FEC  C062  F0DD         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 10820  017FF0  0012               	return		;funcret
 10821  017FF2                     __end_of_MXK_Queue:
 10822                           	opt stack 0
 10823                           tosu	equ	0xFFF
 10824                           tosh	equ	0xFFE
 10825                           tosl	equ	0xFFD
 10826                           pclath	equ	0xFFA
 10827                           tblptru	equ	0xFF8
 10828                           tblptrh	equ	0xFF7
 10829                           tblptrl	equ	0xFF6
 10830                           tablat	equ	0xFF5
 10831                           prodh	equ	0xFF4
 10832                           prodl	equ	0xFF3
 10833                           intcon	equ	0xFF2
 10834                           postinc0	equ	0xFEE
 10835                           wreg	equ	0xFE8
 10836                           indf1	equ	0xFE7
 10837                           postdec1	equ	0xFE5
 10838                           fsr1h	equ	0xFE2
 10839                           fsr1l	equ	0xFE1
 10840                           indf2	equ	0xFDF
 10841                           postinc2	equ	0xFDE
 10842                           postdec2	equ	0xFDD
 10843                           plusw2	equ	0xFDB
 10844                           fsr2h	equ	0xFDA
 10845                           fsr2l	equ	0xFD9
 10846                           status	equ	0xFD8
 10847                           
 10848 ;; *************** function _MXK_BlockSwitchTo *****************
 10849 ;; Defined at:
 10850 ;;		line 82 in file "Library/MXK.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;  pModule         1    wreg     enum E6927
 10853 ;; Auto vars:     Size  Location     Type
 10854 ;;  pModule         1    7[BANK0 ] enum E6927
 10855 ;;  CUR             1    6[BANK0 ] unsigned char 
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  1    wreg      unsigned char 
 10858 ;; Registers used:
 10859 ;;		wreg, status,2, status,0, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;Total ram usage:        2 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:    8
 10872 ;; This function calls:
 10873 ;;		_delay_us
 10874 ;; This function is called by:
 10875 ;;		_initialise
 10876 ;;		_main
 10877 ;; This function uses a non-reentrant model
 10878 ;;
 10879                           
 10880                           	psect	text50
 10881  017942                     __ptext50:
 10882                           	opt stack 0
 10883  017942                     _MXK_BlockSwitchTo:
 10884                           	opt stack 21
 10885                           
 10886                           ;incstack = 0
 10887                           ;MXK_BlockSwitchTo@pModule stored from wreg
 10888  017942  0100               	movlb	0	; () banked
 10889  017944  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 10890                           
 10891                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 10892  017946  5086               	movf	3974,w,c	;volatile
 10893  017948  0B0F               	andlw	15
 10894  01794A  0100               	movlb	0	; () banked
 10895  01794C  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 10896  01794E                     
 10897                           ; BSR set to: 0
 10898                           
 10899                           ; BSR set to: 0
 10900  01794E  504B               	movf	_Bus_State,w,c
 10901  017950  B4D8               	btfsc	status,2,c
 10902  017952  D7FD               	goto	l1724
 10903                           
 10904                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 10905  017954  0E00               	movlw	0
 10906  017956  6E4B               	movwf	_Bus_State,c
 10907                           
 10908                           ;MXK.c: 90: if (CUR != pModule)
 10909  017958  0100               	movlb	0	; () banked
 10910  01795A  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10911  01795C  0100               	movlb	0	; () banked
 10912  01795E  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 10913  017960  B4D8               	btfsc	status,2,c
 10914  017962  D00C               	goto	l1726
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;MXK.c: 91: {
 10918                           ;MXK.c: 92: PORTG &= ~(0xF);
 10919  017964  0EF0               	movlw	240
 10920  017966  1686               	andwf	3974,f,c	;volatile
 10921                           
 10922                           ;MXK.c: 93: PORTG |= pModule;
 10923  017968  0100               	movlb	0	; () banked
 10924  01796A  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10925  01796C  1286               	iorwf	3974,f,c	;volatile
 10926                           
 10927                           ; BSR set to: 0
 10928                           ;MXK.c: 96: delay_us(10);
 10929  01796E  0E00               	movlw	0
 10930  017970  0100               	movlb	0	; () banked
 10931  017972  6F61               	movwf	(delay_us@us+1)& (0+255),b
 10932  017974  0E0A               	movlw	10
 10933  017976  6F60               	movwf	delay_us@us& (0+255),b
 10934  017978  EC43  F0BA         	call	_delay_us	;wreg free
 10935  01797C                     l1726:
 10936                           
 10937                           ;MXK.c: 97: }
 10938                           ;MXK.c: 98: return 1;
 10939  01797C  0E01               	movlw	1
 10940  01797E  0012               	return	
 10941  017980                     __end_of_MXK_BlockSwitchTo:
 10942                           	opt stack 0
 10943                           tosu	equ	0xFFF
 10944                           tosh	equ	0xFFE
 10945                           tosl	equ	0xFFD
 10946                           pclath	equ	0xFFA
 10947                           tblptru	equ	0xFF8
 10948                           tblptrh	equ	0xFF7
 10949                           tblptrl	equ	0xFF6
 10950                           tablat	equ	0xFF5
 10951                           prodh	equ	0xFF4
 10952                           prodl	equ	0xFF3
 10953                           intcon	equ	0xFF2
 10954                           postinc0	equ	0xFEE
 10955                           wreg	equ	0xFE8
 10956                           indf1	equ	0xFE7
 10957                           postdec1	equ	0xFE5
 10958                           fsr1h	equ	0xFE2
 10959                           fsr1l	equ	0xFE1
 10960                           indf2	equ	0xFDF
 10961                           postinc2	equ	0xFDE
 10962                           postdec2	equ	0xFDD
 10963                           plusw2	equ	0xFDB
 10964                           fsr2h	equ	0xFDA
 10965                           fsr2l	equ	0xFD9
 10966                           status	equ	0xFD8
 10967                           
 10968 ;; *************** function _delay_us *****************
 10969 ;; Defined at:
 10970 ;;		line 255 in file "Library/Types.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;  us              2    0[BANK0 ] unsigned short 
 10973 ;; Auto vars:     Size  Location     Type
 10974 ;;  u               4    2[BANK0 ] unsigned long 
 10975 ;; Return value:  Size  Location     Type
 10976 ;;                  1    wreg      void 
 10977 ;; Registers used:
 10978 ;;		wreg, status,2, status,0
 10979 ;; Tracked objects:
 10980 ;;		On entry : 0/0
 10981 ;;		On exit  : 0/0
 10982 ;;		Unchanged: 0/0
 10983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10985 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10987 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;Total ram usage:        6 bytes
 10989 ;; Hardware stack levels used:    1
 10990 ;; Hardware stack levels required when called:    7
 10991 ;; This function calls:
 10992 ;;		Nothing
 10993 ;; This function is called by:
 10994 ;;		_MXK_BlockSwitchTo
 10995 ;;		_MXK_SwitchTo
 10996 ;; This function uses a non-reentrant model
 10997 ;;
 10998                           
 10999                           	psect	text51
 11000  017486                     __ptext51:
 11001                           	opt stack 0
 11002  017486                     _delay_us:
 11003                           	opt stack 19
 11004                           
 11005                           ;Types.c: 256: unsigned long u;
 11006                           ;Types.c: 257: while (us--) {
 11007                           
 11008                           ;incstack = 0
 11009  017486  D01C               	goto	u10830
 11010  017488                     l13343:
 11011                           
 11012                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 11013  017488  0E00               	movlw	0
 11014  01748A  0100               	movlb	0	; () banked
 11015  01748C  6F62               	movwf	delay_us@u& (0+255),b
 11016  01748E  0E00               	movlw	0
 11017  017490  6F63               	movwf	(delay_us@u+1)& (0+255),b
 11018  017492  0E00               	movlw	0
 11019  017494  6F64               	movwf	(delay_us@u+2)& (0+255),b
 11020  017496  0E00               	movlw	0
 11021  017498  6F65               	movwf	(delay_us@u+3)& (0+255),b
 11022  01749A                     l13345:
 11023                           
 11024                           ; BSR set to: 0
 11025  01749A  0100               	movlb	0	; () banked
 11026  01749C  5162               	movf	delay_us@u& (0+255),w,b
 11027  01749E  0100               	movlb	0	; () banked
 11028  0174A0  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 11029  0174A2  0100               	movlb	0	; () banked
 11030  0174A4  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 11031  0174A6  0100               	movlb	0	; () banked
 11032  0174A8  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 11033  0174AA  A4D8               	btfss	status,2,c
 11034  0174AC  D009               	goto	u10830
 11035                           
 11036                           ; BSR set to: 0
 11037                           
 11038                           ; BSR set to: 0
 11039  0174AE  F000               	nop		; ;# 
 11040  0174B0  0E01               	movlw	1
 11041  0174B2  0100               	movlb	0	; () banked
 11042  0174B4  2762               	addwf	delay_us@u& (0+255),f,b
 11043  0174B6  0E00               	movlw	0
 11044  0174B8  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 11045  0174BA  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 11046  0174BC  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 11047  0174BE  D7ED               	goto	l13345
 11048  0174C0                     u10830:
 11049                           
 11050                           ; BSR set to: 0
 11051                           
 11052                           ; BSR set to: 0
 11053  0174C0  0100               	movlb	0	; () banked
 11054  0174C2  0760               	decf	delay_us@us& (0+255),f,b
 11055  0174C4  A0D8               	btfss	status,0,c
 11056  0174C6  0761               	decf	(delay_us@us+1)& (0+255),f,b
 11057  0174C8  0100               	movlb	0	; () banked
 11058  0174CA  2960               	incf	delay_us@us& (0+255),w,b
 11059  0174CC  E1DD               	bnz	l13343
 11060  0174CE  0100               	movlb	0	; () banked
 11061  0174D0  2961               	incf	(delay_us@us+1)& (0+255),w,b
 11062  0174D2  B4D8               	btfsc	status,2,c
 11063  0174D4  0012               	return	
 11064  0174D6  D7D8               	goto	l832
 11065  0174D8                     __end_of_delay_us:
 11066                           	opt stack 0
 11067                           tosu	equ	0xFFF
 11068                           tosh	equ	0xFFE
 11069                           tosl	equ	0xFFD
 11070                           pclath	equ	0xFFA
 11071                           tblptru	equ	0xFF8
 11072                           tblptrh	equ	0xFF7
 11073                           tblptrl	equ	0xFF6
 11074                           tablat	equ	0xFF5
 11075                           prodh	equ	0xFF4
 11076                           prodl	equ	0xFF3
 11077                           intcon	equ	0xFF2
 11078                           postinc0	equ	0xFEE
 11079                           wreg	equ	0xFE8
 11080                           indf1	equ	0xFE7
 11081                           postdec1	equ	0xFE5
 11082                           fsr1h	equ	0xFE2
 11083                           fsr1l	equ	0xFE1
 11084                           indf2	equ	0xFDF
 11085                           postinc2	equ	0xFDE
 11086                           postdec2	equ	0xFDD
 11087                           plusw2	equ	0xFDB
 11088                           fsr2h	equ	0xFDA
 11089                           fsr2l	equ	0xFD9
 11090                           status	equ	0xFD8
 11091                           
 11092 ;; *************** function _LCD_Init *****************
 11093 ;; Defined at:
 11094 ;;		line 172 in file "Library/LCD.c"
 11095 ;; Parameters:    Size  Location     Type
 11096 ;;		None
 11097 ;; Auto vars:     Size  Location     Type
 11098 ;;  i               2   55[BANK0 ] unsigned short 
 11099 ;; Return value:  Size  Location     Type
 11100 ;;                  1    wreg      void 
 11101 ;; Registers used:
 11102 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11103 ;; Tracked objects:
 11104 ;;		On entry : 0/0
 11105 ;;		On exit  : 0/0
 11106 ;;		Unchanged: 0/0
 11107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11109 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11110 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11111 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11112 ;;Total ram usage:        4 bytes
 11113 ;; Hardware stack levels used:    1
 11114 ;; Hardware stack levels required when called:   15
 11115 ;; This function calls:
 11116 ;;		_Configure_GPIOs
 11117 ;;		_LCD_Fill
 11118 ;;		_LCD_Write
 11119 ;;		_Set_Rotation
 11120 ;;		_delay_ms
 11121 ;; This function is called by:
 11122 ;;		_initialise
 11123 ;; This function uses a non-reentrant model
 11124 ;;
 11125                           
 11126                           	psect	text52
 11127  014568                     __ptext52:
 11128                           	opt stack 0
 11129  014568                     _LCD_Init:
 11130                           	opt stack 14
 11131                           
 11132                           ;LCD.c: 174: UINT16 i;
 11133                           ;LCD.c: 175: Configure_GPIOs();
 11134                           
 11135                           ; BSR set to: 0
 11136                           ;incstack = 0
 11137  014568  EC5B  F0B7         	call	_Configure_GPIOs	;wreg free
 11138                           
 11139                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 11140  01456C  0E00               	movlw	0
 11141  01456E  0100               	movlb	0	; () banked
 11142  014570  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 11143  014572  0E00               	movlw	0
 11144  014574  6F97               	movwf	LCD_Init@i& (0+255),b
 11145                           
 11146                           ; BSR set to: 0
 11147  014576  0100               	movlb	0	; () banked
 11148  014578  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11149  01457A  E106               	bnz	u13070
 11150  01457C  0E59               	movlw	89
 11151  01457E  0100               	movlb	0	; () banked
 11152  014580  5D97               	subwf	LCD_Init@i& (0+255),w,b
 11153  014582  B0D8               	btfsc	status,0,c
 11154  014584  D08B               	goto	u13110
 11155  014586  D001               	goto	l85
 11156  014588                     u13070:
 11157                           
 11158                           ; BSR set to: 0
 11159  014588  D089               	goto	u13110
 11160  01458A                     l85:
 11161                           
 11162                           ; BSR set to: 0
 11163                           ;LCD.c: 178: {
 11164                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 11165                           
 11166                           ; BSR set to: 0
 11167  01458A  90D8               	bcf	status,0,c
 11168  01458C  0100               	movlb	0	; () banked
 11169  01458E  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11170  014590  6EF6               	movwf	tblptrl,c
 11171  014592  0100               	movlb	0	; () banked
 11172  014594  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11173  014596  6EF7               	movwf	tblptrh,c
 11174  014598  0E5D               	movlw	low _InitList
 11175  01459A  26F6               	addwf	tblptrl,f,c
 11176  01459C  0EFB               	movlw	high _InitList
 11177  01459E  22F7               	addwfc	tblptrh,f,c
 11178  0145A0                     	if	1	;There are 3 active tblptr bytes
 11179  0145A0  6AF8               	clrf	tblptru,c
 11180  0145A2  0E00               	movlw	low (__mediumconst shr (0+16))
 11181  0145A4  22F8               	addwfc	tblptru,f,c
 11182  0145A6                     	endif
 11183  0145A6  0009               	tblrd		*+
 11184  0145A8  0E80               	movlw	128
 11185  0145AA  18F5               	xorwf	tablat,w,c
 11186  0145AC  0009               	tblrd		*+
 11187  0145AE  10F5               	iorwf	tablat,w,c
 11188  0145B0  A4D8               	btfss	status,2,c
 11189  0145B2  D022               	goto	l87
 11190                           
 11191                           ; BSR set to: 0
 11192  0145B4  0100               	movlb	0	; () banked
 11193  0145B6  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11194  0145B8  E11F               	bnz	l15205
 11195  0145BA  0E58               	movlw	88
 11196  0145BC  0100               	movlb	0	; () banked
 11197  0145BE  5D97               	subwf	LCD_Init@i& (0+255),w,b
 11198  0145C0  B0D8               	btfsc	status,0,c
 11199  0145C2  D01A               	goto	l87
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;LCD.c: 180: delay_ms(InitList[++i]);
 11203  0145C4  0100               	movlb	0	; () banked
 11204  0145C6  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 11205  0145C8  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 11206  0145CA  90D8               	bcf	status,0,c
 11207  0145CC  0100               	movlb	0	; () banked
 11208  0145CE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11209  0145D0  6EF6               	movwf	tblptrl,c
 11210  0145D2  0100               	movlb	0	; () banked
 11211  0145D4  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11212  0145D6  6EF7               	movwf	tblptrh,c
 11213  0145D8  0E5D               	movlw	low _InitList
 11214  0145DA  26F6               	addwf	tblptrl,f,c
 11215  0145DC  0EFB               	movlw	high _InitList
 11216  0145DE  22F7               	addwfc	tblptrh,f,c
 11217  0145E0                     	if	1	;There are 3 active tblptr bytes
 11218  0145E0  6AF8               	clrf	tblptru,c
 11219  0145E2  0E00               	movlw	low (__mediumconst shr (0+16))
 11220  0145E4  22F8               	addwfc	tblptru,f,c
 11221  0145E6                     	endif
 11222  0145E6  0009               	tblrd		*+
 11223  0145E8  CFF5 F060          	movff	tablat,delay_ms@ms
 11224  0145EC  000A               	tblrd		*-
 11225  0145EE  CFF5 F061          	movff	tablat,delay_ms@ms+1
 11226  0145F2  ECFF  F0B7         	call	_delay_ms	;wreg free
 11227  0145F6  D04B               	goto	l90
 11228  0145F8                     l87:
 11229  0145F8                     l15205:
 11230                           
 11231                           ;LCD.c: 181: else
 11232                           ;LCD.c: 182: {
 11233                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 11234  0145F8  90D8               	bcf	status,0,c
 11235  0145FA  0100               	movlb	0	; () banked
 11236  0145FC  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11237  0145FE  6EF6               	movwf	tblptrl,c
 11238  014600  0100               	movlb	0	; () banked
 11239  014602  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11240  014604  6EF7               	movwf	tblptrh,c
 11241  014606  0E5D               	movlw	low _InitList
 11242  014608  26F6               	addwf	tblptrl,f,c
 11243  01460A  0EFB               	movlw	high _InitList
 11244  01460C  22F7               	addwfc	tblptrh,f,c
 11245  01460E                     	if	1	;There are 3 active tblptr bytes
 11246  01460E  6AF8               	clrf	tblptru,c
 11247  014610  0E00               	movlw	low (__mediumconst shr (0+16))
 11248  014612  22F8               	addwfc	tblptru,f,c
 11249  014614                     	endif
 11250  014614  0009               	tblrd		*+
 11251  014616  0E00               	movlw	0
 11252  014618  5EF5               	subwf	tablat,f,c
 11253  01461A  0009               	tblrd		*+
 11254  01461C  0E01               	movlw	1
 11255  01461E  5AF5               	subwfb	tablat,f,c
 11256  014620  A0D8               	btfss	status,0,c
 11257  014622  D020               	goto	l89
 11258                           
 11259                           ; BSR set to: 0
 11260  014624  0E00               	movlw	0
 11261  014626  0100               	movlb	0	; () banked
 11262  014628  6F63               	movwf	LCD_Write@mode& (0+255),b
 11263  01462A  90D8               	bcf	status,0,c
 11264  01462C  0100               	movlb	0	; () banked
 11265  01462E  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11266  014630  6EF6               	movwf	tblptrl,c
 11267  014632  0100               	movlb	0	; () banked
 11268  014634  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11269  014636  6EF7               	movwf	tblptrh,c
 11270  014638  0E5D               	movlw	low _InitList
 11271  01463A  26F6               	addwf	tblptrl,f,c
 11272  01463C  0EFB               	movlw	high _InitList
 11273  01463E  22F7               	addwfc	tblptrh,f,c
 11274  014640                     	if	1	;There are 3 active tblptr bytes
 11275  014640  6AF8               	clrf	tblptru,c
 11276  014642  0E00               	movlw	low (__mediumconst shr (0+16))
 11277  014644  22F8               	addwfc	tblptru,f,c
 11278  014646                     	endif
 11279  014646  0009               	tblrd		*+
 11280  014648  CFF5 F095          	movff	tablat,??_LCD_Init
 11281  01464C  0009               	tblrd		*+
 11282  01464E  CFF5 F096          	movff	tablat,??_LCD_Init+1
 11283  014652  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 11284  014656  0100               	movlb	0	; () banked
 11285  014658  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 11286  01465A  0100               	movlb	0	; () banked
 11287  01465C  5195               	movf	??_LCD_Init& (0+255),w,b
 11288  01465E  ECC0  F0BE         	call	_LCD_Write
 11289  014662  D015               	goto	l90
 11290  014664                     l89:
 11291                           
 11292                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 11293  014664  0E01               	movlw	1
 11294  014666  0100               	movlb	0	; () banked
 11295  014668  6F63               	movwf	LCD_Write@mode& (0+255),b
 11296  01466A  90D8               	bcf	status,0,c
 11297  01466C  0100               	movlb	0	; () banked
 11298  01466E  3597               	rlcf	LCD_Init@i& (0+255),w,b
 11299  014670  6EF6               	movwf	tblptrl,c
 11300  014672  0100               	movlb	0	; () banked
 11301  014674  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11302  014676  6EF7               	movwf	tblptrh,c
 11303  014678  0E5D               	movlw	low _InitList
 11304  01467A  26F6               	addwf	tblptrl,f,c
 11305  01467C  0EFB               	movlw	high _InitList
 11306  01467E  22F7               	addwfc	tblptrh,f,c
 11307  014680                     	if	1	;There are 3 active tblptr bytes
 11308  014680  6AF8               	clrf	tblptru,c
 11309  014682  0E00               	movlw	low (__mediumconst shr (0+16))
 11310  014684  22F8               	addwfc	tblptru,f,c
 11311  014686                     	endif
 11312  014686  0008               	tblrd		*
 11313  014688  50F5               	movf	tablat,w,c
 11314  01468A  ECC0  F0BE         	call	_LCD_Write
 11315  01468E                     l90:
 11316  01468E  0100               	movlb	0	; () banked
 11317  014690  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 11318  014692  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 11319                           
 11320                           ; BSR set to: 0
 11321  014694  0100               	movlb	0	; () banked
 11322  014696  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 11323  014698  E101               	bnz	l15215
 11324  01469A  D770               	goto	L5
 11325  01469C                     u13110:
 11326  01469C                     l15215:
 11327                           
 11328                           ; BSR set to: 0
 11329                           ;LCD.c: 185: }
 11330                           ;LCD.c: 186: }
 11331                           ;LCD.c: 187: delay_ms(100);
 11332  01469C  0E00               	movlw	0
 11333  01469E  0100               	movlb	0	; () banked
 11334  0146A0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11335  0146A2  0E64               	movlw	100
 11336  0146A4  6F60               	movwf	delay_ms@ms& (0+255),b
 11337  0146A6  ECFF  F0B7         	call	_delay_ms	;wreg free
 11338                           
 11339                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 11340  0146AA  0E00               	movlw	0
 11341  0146AC  0100               	movlb	0	; () banked
 11342  0146AE  6F63               	movwf	LCD_Write@mode& (0+255),b
 11343  0146B0  0E29               	movlw	41
 11344  0146B2  ECC0  F0BE         	call	_LCD_Write
 11345                           
 11346                           ;LCD.c: 189: Set_Rotation(1);
 11347  0146B6  0E01               	movlw	1
 11348  0146B8  EC54  F0B3         	call	_Set_Rotation
 11349                           
 11350                           ;LCD.c: 191: delay_ms(100);
 11351  0146BC  0E00               	movlw	0
 11352  0146BE  0100               	movlb	0	; () banked
 11353  0146C0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11354  0146C2  0E64               	movlw	100
 11355  0146C4  6F60               	movwf	delay_ms@ms& (0+255),b
 11356  0146C6  ECFF  F0B7         	call	_delay_ms	;wreg free
 11357                           
 11358                           ;LCD.c: 192: LCD_Fill(0x0000);
 11359  0146CA  0E00               	movlw	0
 11360  0146CC  0100               	movlb	0	; () banked
 11361  0146CE  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 11362  0146D0  0E00               	movlw	0
 11363  0146D2  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 11364  0146D4  ECED  F0B9         	call	_LCD_Fill	;wreg free
 11365  0146D8  0012               	return		;funcret
 11366  0146DA                     __end_of_LCD_Init:
 11367                           	opt stack 0
 11368                           tosu	equ	0xFFF
 11369                           tosh	equ	0xFFE
 11370                           tosl	equ	0xFFD
 11371                           pclath	equ	0xFFA
 11372                           tblptru	equ	0xFF8
 11373                           tblptrh	equ	0xFF7
 11374                           tblptrl	equ	0xFF6
 11375                           tablat	equ	0xFF5
 11376                           prodh	equ	0xFF4
 11377                           prodl	equ	0xFF3
 11378                           intcon	equ	0xFF2
 11379                           postinc0	equ	0xFEE
 11380                           wreg	equ	0xFE8
 11381                           indf1	equ	0xFE7
 11382                           postdec1	equ	0xFE5
 11383                           fsr1h	equ	0xFE2
 11384                           fsr1l	equ	0xFE1
 11385                           indf2	equ	0xFDF
 11386                           postinc2	equ	0xFDE
 11387                           postdec2	equ	0xFDD
 11388                           plusw2	equ	0xFDB
 11389                           fsr2h	equ	0xFDA
 11390                           fsr2l	equ	0xFD9
 11391                           status	equ	0xFD8
 11392                           
 11393 ;; *************** function _Set_Rotation *****************
 11394 ;; Defined at:
 11395 ;;		line 248 in file "Library/LCD.c"
 11396 ;; Parameters:    Size  Location     Type
 11397 ;;  m               1    wreg     unsigned char 
 11398 ;; Auto vars:     Size  Location     Type
 11399 ;;  m               1    5[BANK0 ] unsigned char 
 11400 ;;  rotation        1    6[BANK0 ] unsigned char 
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  1    wreg      void 
 11403 ;; Registers used:
 11404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;Total ram usage:        2 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    9
 11417 ;; This function calls:
 11418 ;;		_LCD_Write
 11419 ;; This function is called by:
 11420 ;;		_LCD_Init
 11421 ;; This function uses a non-reentrant model
 11422 ;;
 11423                           
 11424                           	psect	text53
 11425  0166A8                     __ptext53:
 11426                           	opt stack 0
 11427  0166A8                     _Set_Rotation:
 11428                           	opt stack 19
 11429                           
 11430                           ;incstack = 0
 11431                           ;Set_Rotation@m stored from wreg
 11432  0166A8  0100               	movlb	0	; () banked
 11433  0166AA  6F65               	movwf	Set_Rotation@m& (0+255),b
 11434                           
 11435                           ;LCD.c: 250: UINT8 rotation = 0x00;
 11436  0166AC  0E00               	movlw	0
 11437  0166AE  0100               	movlb	0	; () banked
 11438  0166B0  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 11439                           
 11440                           ; BSR set to: 0
 11441                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 11442  0166B2  0E00               	movlw	0
 11443  0166B4  0100               	movlb	0	; () banked
 11444  0166B6  6F63               	movwf	LCD_Write@mode& (0+255),b
 11445  0166B8  0E36               	movlw	54
 11446  0166BA  ECC0  F0BE         	call	_LCD_Write
 11447                           
 11448                           ;LCD.c: 253: rotation = (m % 4);
 11449  0166BE  0100               	movlb	0	; () banked
 11450  0166C0  5165               	movf	Set_Rotation@m& (0+255),w,b
 11451  0166C2  0B03               	andlw	3
 11452  0166C4  0100               	movlb	0	; () banked
 11453  0166C6  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 11454                           
 11455                           ;LCD.c: 255: switch(rotation)
 11456  0166C8  D02C               	goto	l117
 11457  0166CA                     
 11458                           ; BSR set to: 0
 11459                           ;LCD.c: 258: {
 11460                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 11461                           
 11462                           ; BSR set to: 0
 11463  0166CA  0E01               	movlw	1
 11464  0166CC  0100               	movlb	0	; () banked
 11465  0166CE  6F63               	movwf	LCD_Write@mode& (0+255),b
 11466  0166D0  0EC8               	movlw	200
 11467  0166D2  ECC0  F0BE         	call	_LCD_Write
 11468                           
 11469                           ;LCD.c: 260: w = 128;
 11470  0166D6  0E80               	movlw	128
 11471  0166D8  6E50               	movwf	_w,c
 11472                           
 11473                           ;LCD.c: 261: l = 128;
 11474  0166DA  0E80               	movlw	128
 11475  0166DC  6E4F               	movwf	_l,c
 11476                           
 11477                           ;LCD.c: 262: break;
 11478  0166DE  0012               	return	
 11479  0166E0                     
 11480                           ;LCD.c: 265: {
 11481                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 11482  0166E0  0E01               	movlw	1
 11483  0166E2  0100               	movlb	0	; () banked
 11484  0166E4  6F63               	movwf	LCD_Write@mode& (0+255),b
 11485  0166E6  0EA8               	movlw	168
 11486  0166E8  ECC0  F0BE         	call	_LCD_Write
 11487                           
 11488                           ;LCD.c: 267: w = 128;
 11489  0166EC  0E80               	movlw	128
 11490  0166EE  6E50               	movwf	_w,c
 11491                           
 11492                           ;LCD.c: 268: l = 128;
 11493  0166F0  0E80               	movlw	128
 11494  0166F2  6E4F               	movwf	_l,c
 11495                           
 11496                           ;LCD.c: 269: break;
 11497  0166F4  0012               	return	
 11498  0166F6                     
 11499                           ;LCD.c: 272: {
 11500                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 11501  0166F6  0E01               	movlw	1
 11502  0166F8  0100               	movlb	0	; () banked
 11503  0166FA  6F63               	movwf	LCD_Write@mode& (0+255),b
 11504  0166FC  0E08               	movlw	8
 11505  0166FE  ECC0  F0BE         	call	_LCD_Write
 11506                           
 11507                           ;LCD.c: 274: w = 128;
 11508  016702  0E80               	movlw	128
 11509  016704  6E50               	movwf	_w,c
 11510                           
 11511                           ;LCD.c: 275: l = 128;
 11512  016706  0E80               	movlw	128
 11513  016708  6E4F               	movwf	_l,c
 11514                           
 11515                           ;LCD.c: 276: break;
 11516  01670A  0012               	return	
 11517  01670C                     
 11518                           ;LCD.c: 279: {
 11519                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 11520  01670C  0E01               	movlw	1
 11521  01670E  0100               	movlb	0	; () banked
 11522  016710  6F63               	movwf	LCD_Write@mode& (0+255),b
 11523  016712  0E68               	movlw	104
 11524  016714  ECC0  F0BE         	call	_LCD_Write
 11525                           
 11526                           ;LCD.c: 281: w = 128;
 11527  016718  0E80               	movlw	128
 11528  01671A  6E50               	movwf	_w,c
 11529                           
 11530                           ;LCD.c: 282: l = 128;
 11531  01671C  0E80               	movlw	128
 11532  01671E  6E4F               	movwf	_l,c
 11533                           
 11534                           ;LCD.c: 284: }
 11535                           ;LCD.c: 285: }
 11536                           
 11537                           ;LCD.c: 283: break;
 11538  016720  0012               	return	
 11539  016722                     l117:
 11540  016722  0100               	movlb	0	; () banked
 11541  016724  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 11542                           
 11543                           ; Switch size 1, requested type "space"
 11544                           ; Number of cases is 4, Range of values is 0 to 3
 11545                           ; switch strategies available:
 11546                           ; Name         Instructions Cycles
 11547                           ; simple_byte           13     7 (average)
 11548                           ;	Chosen strategy is simple_byte
 11549  016726  0A00               	xorlw	0	; case 0
 11550  016728  B4D8               	btfsc	status,2,c
 11551  01672A  D7CF               	goto	l118
 11552  01672C  0A01               	xorlw	1	; case 1
 11553  01672E  B4D8               	btfsc	status,2,c
 11554  016730  D7D7               	goto	l120
 11555  016732  0A03               	xorlw	3	; case 2
 11556  016734  B4D8               	btfsc	status,2,c
 11557  016736  D7DF               	goto	l121
 11558  016738  0A01               	xorlw	1	; case 3
 11559  01673A  A4D8               	btfss	status,2,c
 11560  01673C  0012               	return	
 11561  01673E  D7E6               	goto	l122
 11562  016740                     __end_of_Set_Rotation:
 11563                           	opt stack 0
 11564                           tosu	equ	0xFFF
 11565                           tosh	equ	0xFFE
 11566                           tosl	equ	0xFFD
 11567                           pclath	equ	0xFFA
 11568                           tblptru	equ	0xFF8
 11569                           tblptrh	equ	0xFF7
 11570                           tblptrl	equ	0xFF6
 11571                           tablat	equ	0xFF5
 11572                           prodh	equ	0xFF4
 11573                           prodl	equ	0xFF3
 11574                           intcon	equ	0xFF2
 11575                           postinc0	equ	0xFEE
 11576                           wreg	equ	0xFE8
 11577                           indf1	equ	0xFE7
 11578                           postdec1	equ	0xFE5
 11579                           fsr1h	equ	0xFE2
 11580                           fsr1l	equ	0xFE1
 11581                           indf2	equ	0xFDF
 11582                           postinc2	equ	0xFDE
 11583                           postdec2	equ	0xFDD
 11584                           plusw2	equ	0xFDB
 11585                           fsr2h	equ	0xFDA
 11586                           fsr2l	equ	0xFD9
 11587                           status	equ	0xFD8
 11588                           
 11589 ;; *************** function _LCD_Fill *****************
 11590 ;; Defined at:
 11591 ;;		line 287 in file "Library/LCD.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;  pColour         2    9[BANK0 ] unsigned short 
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;  j               1   12[BANK0 ] unsigned char 
 11596 ;;  i               1   11[BANK0 ] unsigned char 
 11597 ;; Return value:  Size  Location     Type
 11598 ;;                  1    wreg      void 
 11599 ;; Registers used:
 11600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11601 ;; Tracked objects:
 11602 ;;		On entry : 0/0
 11603 ;;		On exit  : 0/0
 11604 ;;		Unchanged: 0/0
 11605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11606 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11607 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;Total ram usage:        4 bytes
 11611 ;; Hardware stack levels used:    1
 11612 ;; Hardware stack levels required when called:   10
 11613 ;; This function calls:
 11614 ;;		_LCD_Word_Write
 11615 ;;		_Set_Addr_Window
 11616 ;; This function is called by:
 11617 ;;		_LCD_Init
 11618 ;; This function uses a non-reentrant model
 11619 ;;
 11620                           
 11621                           	psect	text54
 11622  0173DA                     __ptext54:
 11623                           	opt stack 0
 11624  0173DA                     _LCD_Fill:
 11625                           	opt stack 18
 11626                           
 11627                           ;LCD.c: 296: UINT8 i = 0x00;
 11628                           
 11629                           ;incstack = 0
 11630  0173DA  0E00               	movlw	0
 11631  0173DC  0100               	movlb	0	; () banked
 11632  0173DE  6F6B               	movwf	LCD_Fill@i& (0+255),b
 11633                           
 11634                           ;LCD.c: 297: UINT8 j = 0x00;
 11635  0173E0  0E00               	movlw	0
 11636  0173E2  0100               	movlb	0	; () banked
 11637  0173E4  6F6C               	movwf	LCD_Fill@j& (0+255),b
 11638                           
 11639                           ; BSR set to: 0
 11640                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 11641  0173E6  0E00               	movlw	0
 11642  0173E8  0100               	movlb	0	; () banked
 11643  0173EA  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 11644  0173EC  0450               	decf	_w,w,c
 11645  0173EE  0100               	movlb	0	; () banked
 11646  0173F0  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 11647  0173F2  044F               	decf	_l,w,c
 11648  0173F4  0100               	movlb	0	; () banked
 11649  0173F6  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 11650  0173F8  0E00               	movlw	0
 11651  0173FA  ECD1  F0AF         	call	_Set_Addr_Window
 11652                           
 11653                           ;LCD.c: 299: for (j = l; j > 0; j--)
 11654  0173FE  C04F  F06C         	movff	_l,LCD_Fill@j
 11655  017402                     l14711:
 11656  017402  0100               	movlb	0	; () banked
 11657  017404  516C               	movf	LCD_Fill@j& (0+255),w,b
 11658  017406  0100               	movlb	0	; () banked
 11659  017408  B4D8               	btfsc	status,2,c
 11660  01740A  0012               	return	
 11661                           
 11662                           ; BSR set to: 0
 11663                           ;LCD.c: 300: for (i = w; i > 0; i--)
 11664                           
 11665                           ; BSR set to: 0
 11666  01740C  C050  F06B         	movff	_w,LCD_Fill@i
 11667  017410                     l14715:
 11668                           
 11669                           ; BSR set to: 0
 11670  017410  0100               	movlb	0	; () banked
 11671  017412  516B               	movf	LCD_Fill@i& (0+255),w,b
 11672  017414  0100               	movlb	0	; () banked
 11673  017416  B4D8               	btfsc	status,2,c
 11674  017418  D009               	goto	u12510
 11675                           
 11676                           ; BSR set to: 0
 11677                           ;LCD.c: 301: LCD_Word_Write(pColour);
 11678                           
 11679                           ; BSR set to: 0
 11680                           
 11681                           ; BSR set to: 0
 11682  01741A  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 11683  01741E  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 11684  017422  EC3B  F0BF         	call	_LCD_Word_Write	;wreg free
 11685  017426  0100               	movlb	0	; () banked
 11686  017428  076B               	decf	LCD_Fill@i& (0+255),f,b
 11687  01742A  D7F2               	goto	l14715
 11688  01742C                     u12510:
 11689                           
 11690                           ; BSR set to: 0
 11691                           
 11692                           ; BSR set to: 0
 11693  01742C  0100               	movlb	0	; () banked
 11694  01742E  076C               	decf	LCD_Fill@j& (0+255),f,b
 11695  017430  D7E8               	goto	l14711
 11696  017432                     __end_of_LCD_Fill:
 11697                           	opt stack 0
 11698                           tosu	equ	0xFFF
 11699                           tosh	equ	0xFFE
 11700                           tosl	equ	0xFFD
 11701                           pclath	equ	0xFFA
 11702                           tblptru	equ	0xFF8
 11703                           tblptrh	equ	0xFF7
 11704                           tblptrl	equ	0xFF6
 11705                           tablat	equ	0xFF5
 11706                           prodh	equ	0xFF4
 11707                           prodl	equ	0xFF3
 11708                           intcon	equ	0xFF2
 11709                           postinc0	equ	0xFEE
 11710                           wreg	equ	0xFE8
 11711                           indf1	equ	0xFE7
 11712                           postdec1	equ	0xFE5
 11713                           fsr1h	equ	0xFE2
 11714                           fsr1l	equ	0xFE1
 11715                           indf2	equ	0xFDF
 11716                           postinc2	equ	0xFDE
 11717                           postdec2	equ	0xFDD
 11718                           plusw2	equ	0xFDB
 11719                           fsr2h	equ	0xFDA
 11720                           fsr2l	equ	0xFD9
 11721                           status	equ	0xFD8
 11722                           
 11723 ;; *************** function _Configure_GPIOs *****************
 11724 ;; Defined at:
 11725 ;;		line 46 in file "Library/LCD.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;		None
 11728 ;; Auto vars:     Size  Location     Type
 11729 ;;		None
 11730 ;; Return value:  Size  Location     Type
 11731 ;;                  1    wreg      void 
 11732 ;; Registers used:
 11733 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11734 ;; Tracked objects:
 11735 ;;		On entry : 0/0
 11736 ;;		On exit  : 0/0
 11737 ;;		Unchanged: 0/0
 11738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11743 ;;Total ram usage:        0 bytes
 11744 ;; Hardware stack levels used:    1
 11745 ;; Hardware stack levels required when called:   14
 11746 ;; This function calls:
 11747 ;;		_LCD_Reset
 11748 ;;		_Port_SetPinType
 11749 ;;		_SPI_Init
 11750 ;;		_SPI_MaxSpeed
 11751 ;; This function is called by:
 11752 ;;		_LCD_Init
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           	psect	text55
 11757  016EB6                     __ptext55:
 11758                           	opt stack 0
 11759  016EB6                     _Configure_GPIOs:
 11760                           	opt stack 14
 11761                           
 11762                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 11763                           
 11764                           ; BSR set to: 0
 11765                           ;incstack = 0
 11766  016EB6  0EBD               	movlw	low _PortF
 11767  016EB8  0100               	movlb	0	; () banked
 11768  016EBA  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 11769  016EBC  0E01               	movlw	high _PortF
 11770  016EBE  0100               	movlb	0	; () banked
 11771  016EC0  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11772  016EC2  0E07               	movlw	7
 11773  016EC4  0100               	movlb	0	; () banked
 11774  016EC6  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11775  016EC8  0E03               	movlw	3
 11776  016ECA  0100               	movlb	0	; () banked
 11777  016ECC  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11778  016ECE  EC97  F09B         	call	_Port_SetPinType	;wreg free
 11779                           
 11780                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 11781  016ED2  0EBD               	movlw	low _PortF
 11782  016ED4  0100               	movlb	0	; () banked
 11783  016ED6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 11784  016ED8  0E01               	movlw	high _PortF
 11785  016EDA  0100               	movlb	0	; () banked
 11786  016EDC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11787  016EDE  0E06               	movlw	6
 11788  016EE0  0100               	movlb	0	; () banked
 11789  016EE2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11790  016EE4  0E03               	movlw	3
 11791  016EE6  0100               	movlb	0	; () banked
 11792  016EE8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11793  016EEA  EC97  F09B         	call	_Port_SetPinType	;wreg free
 11794                           
 11795                           ;LCD.c: 55: LCD_Reset();
 11796  016EEE  EC94  F0BA         	call	_LCD_Reset	;wreg free
 11797                           
 11798                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 11799  016EF2  0EC0               	movlw	192
 11800  016EF4  0100               	movlb	0	; () banked
 11801  016EF6  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 11802  016EF8  0EC6               	movlw	198
 11803  016EFA  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 11804  016EFC  0E2D               	movlw	45
 11805  016EFE  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 11806  016F00  0E00               	movlw	0
 11807  016F02  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 11808  016F04  0E01               	movlw	1
 11809  016F06  0100               	movlb	0	; () banked
 11810  016F08  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 11811  016F0A  0E01               	movlw	1
 11812  016F0C  0100               	movlb	0	; () banked
 11813  016F0E  6F92               	movwf	SPI_Init@pMode& (0+255),b
 11814  016F10  EC8D  F08B         	call	_SPI_Init	;wreg free
 11815                           
 11816                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 11817  016F14  0E6C               	movlw	low _SPI2
 11818  016F16  0100               	movlb	0	; () banked
 11819  016F18  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 11820  016F1A  0E01               	movlw	high _SPI2
 11821  016F1C  0100               	movlb	0	; () banked
 11822  016F1E  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 11823  016F20  ECAD  F0B6         	call	_SPI_MaxSpeed	;wreg free
 11824  016F24  0012               	return		;funcret
 11825  016F26                     __end_of_Configure_GPIOs:
 11826                           	opt stack 0
 11827                           tosu	equ	0xFFF
 11828                           tosh	equ	0xFFE
 11829                           tosl	equ	0xFFD
 11830                           pclath	equ	0xFFA
 11831                           tblptru	equ	0xFF8
 11832                           tblptrh	equ	0xFF7
 11833                           tblptrl	equ	0xFF6
 11834                           tablat	equ	0xFF5
 11835                           prodh	equ	0xFF4
 11836                           prodl	equ	0xFF3
 11837                           intcon	equ	0xFF2
 11838                           postinc0	equ	0xFEE
 11839                           wreg	equ	0xFE8
 11840                           indf1	equ	0xFE7
 11841                           postdec1	equ	0xFE5
 11842                           fsr1h	equ	0xFE2
 11843                           fsr1l	equ	0xFE1
 11844                           indf2	equ	0xFDF
 11845                           postinc2	equ	0xFDE
 11846                           postdec2	equ	0xFDD
 11847                           plusw2	equ	0xFDB
 11848                           fsr2h	equ	0xFDA
 11849                           fsr2l	equ	0xFD9
 11850                           status	equ	0xFD8
 11851                           
 11852 ;; *************** function _SPI_MaxSpeed *****************
 11853 ;; Defined at:
 11854 ;;		line 201 in file "Library/SPI.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 11857 ;;		 -> SPI2(11), 
 11858 ;; Auto vars:     Size  Location     Type
 11859 ;;		None
 11860 ;; Return value:  Size  Location     Type
 11861 ;;                  1    wreg      void 
 11862 ;; Registers used:
 11863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11864 ;; Tracked objects:
 11865 ;;		On entry : 0/0
 11866 ;;		On exit  : 0/0
 11867 ;;		Unchanged: 0/0
 11868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11869 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11873 ;;Total ram usage:        2 bytes
 11874 ;; Hardware stack levels used:    1
 11875 ;; Hardware stack levels required when called:    9
 11876 ;; This function calls:
 11877 ;;		_Byte_SetBit
 11878 ;;		_Byte_SetQuad
 11879 ;; This function is called by:
 11880 ;;		_Configure_GPIOs
 11881 ;; This function uses a non-reentrant model
 11882 ;;
 11883                           
 11884                           	psect	text56
 11885  016D5A                     __ptext56:
 11886                           	opt stack 0
 11887  016D5A                     _SPI_MaxSpeed:
 11888                           	opt stack 18
 11889                           
 11890                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11891                           
 11892                           ;incstack = 0
 11893  016D5A  0100               	movlb	0	; () banked
 11894  016D5C  EE20 F006          	lfsr	2,6
 11895  016D60  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11896  016D62  26D9               	addwf	fsr2l,f,c
 11897  016D64  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11898  016D66  22DA               	addwfc	fsr2h,f,c
 11899  016D68  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11900  016D6C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11901  016D70  0E05               	movlw	5
 11902  016D72  0100               	movlb	0	; () banked
 11903  016D74  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 11904  016D76  0E00               	movlw	0
 11905  016D78  0100               	movlb	0	; () banked
 11906  016D7A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 11907  016D7C  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 11908                           
 11909                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 11910  016D80  0100               	movlb	0	; () banked
 11911  016D82  EE20 F006          	lfsr	2,6
 11912  016D86  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11913  016D88  26D9               	addwf	fsr2l,f,c
 11914  016D8A  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11915  016D8C  22DA               	addwfc	fsr2h,f,c
 11916  016D8E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 11917  016D92  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 11918  016D96  0E00               	movlw	0
 11919  016D98  0100               	movlb	0	; () banked
 11920  016D9A  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 11921  016D9C  0E00               	movlw	0
 11922  016D9E  0100               	movlb	0	; () banked
 11923  016DA0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 11924  016DA2  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 11925                           
 11926                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 11927  016DA6  0100               	movlb	0	; () banked
 11928  016DA8  EE20 F006          	lfsr	2,6
 11929  016DAC  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11930  016DAE  26D9               	addwf	fsr2l,f,c
 11931  016DB0  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11932  016DB2  22DA               	addwfc	fsr2h,f,c
 11933  016DB4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 11934  016DB8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 11935  016DBC  0E05               	movlw	5
 11936  016DBE  0100               	movlb	0	; () banked
 11937  016DC0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 11938  016DC2  0E01               	movlw	1
 11939  016DC4  0100               	movlb	0	; () banked
 11940  016DC6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 11941  016DC8  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 11942  016DCC  0012               	return		;funcret
 11943  016DCE                     __end_of_SPI_MaxSpeed:
 11944                           	opt stack 0
 11945                           tosu	equ	0xFFF
 11946                           tosh	equ	0xFFE
 11947                           tosl	equ	0xFFD
 11948                           pclath	equ	0xFFA
 11949                           tblptru	equ	0xFF8
 11950                           tblptrh	equ	0xFF7
 11951                           tblptrl	equ	0xFF6
 11952                           tablat	equ	0xFF5
 11953                           prodh	equ	0xFF4
 11954                           prodl	equ	0xFF3
 11955                           intcon	equ	0xFF2
 11956                           postinc0	equ	0xFEE
 11957                           wreg	equ	0xFE8
 11958                           indf1	equ	0xFE7
 11959                           postdec1	equ	0xFE5
 11960                           fsr1h	equ	0xFE2
 11961                           fsr1l	equ	0xFE1
 11962                           indf2	equ	0xFDF
 11963                           postinc2	equ	0xFDE
 11964                           postdec2	equ	0xFDD
 11965                           plusw2	equ	0xFDB
 11966                           fsr2h	equ	0xFDA
 11967                           fsr2l	equ	0xFD9
 11968                           status	equ	0xFD8
 11969                           
 11970 ;; *************** function _LCD_Reset *****************
 11971 ;; Defined at:
 11972 ;;		line 95 in file "Library/LCD.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;		None
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;		None
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  1    wreg      void 
 11979 ;; Registers used:
 11980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11989 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;Total ram usage:        0 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; Hardware stack levels required when called:   13
 11993 ;; This function calls:
 11994 ;;		_LED_Toggle
 11995 ;;		_Reset_High
 11996 ;;		_Reset_Low
 11997 ;;		_delay_ms
 11998 ;; This function is called by:
 11999 ;;		_Configure_GPIOs
 12000 ;; This function uses a non-reentrant model
 12001 ;;
 12002                           
 12003                           	psect	text57
 12004  017528                     __ptext57:
 12005                           	opt stack 0
 12006  017528                     _LCD_Reset:
 12007                           	opt stack 14
 12008                           
 12009                           ;LCD.c: 97: Reset_High();
 12010                           
 12011                           ;incstack = 0
 12012  017528  ECF0  F0BE         	call	_Reset_High	;wreg free
 12013                           
 12014                           ;LCD.c: 98: LED_Toggle(eLED2);
 12015  01752C  0E01               	movlw	1
 12016  01752E  EC2B  F0BB         	call	_LED_Toggle
 12017                           
 12018                           ;LCD.c: 99: delay_ms(0x80);
 12019  017532  0E00               	movlw	0
 12020  017534  0100               	movlb	0	; () banked
 12021  017536  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12022  017538  0E80               	movlw	128
 12023  01753A  6F60               	movwf	delay_ms@ms& (0+255),b
 12024  01753C  ECFF  F0B7         	call	_delay_ms	;wreg free
 12025                           
 12026                           ;LCD.c: 100: LED_Toggle(eLED2);
 12027  017540  0E01               	movlw	1
 12028  017542  EC2B  F0BB         	call	_LED_Toggle
 12029                           
 12030                           ;LCD.c: 101: Reset_Low();
 12031  017546  ECE1  F0BE         	call	_Reset_Low	;wreg free
 12032                           
 12033                           ;LCD.c: 102: delay_ms(0x80);
 12034  01754A  0E00               	movlw	0
 12035  01754C  0100               	movlb	0	; () banked
 12036  01754E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12037  017550  0E80               	movlw	128
 12038  017552  6F60               	movwf	delay_ms@ms& (0+255),b
 12039  017554  ECFF  F0B7         	call	_delay_ms	;wreg free
 12040                           
 12041                           ;LCD.c: 103: LED_Toggle(eLED2);
 12042  017558  0E01               	movlw	1
 12043  01755A  EC2B  F0BB         	call	_LED_Toggle
 12044                           
 12045                           ;LCD.c: 104: Reset_High();
 12046  01755E  ECF0  F0BE         	call	_Reset_High	;wreg free
 12047                           
 12048                           ;LCD.c: 105: delay_ms(0x80);
 12049  017562  0E00               	movlw	0
 12050  017564  0100               	movlb	0	; () banked
 12051  017566  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 12052  017568  0E80               	movlw	128
 12053  01756A  6F60               	movwf	delay_ms@ms& (0+255),b
 12054  01756C  ECFF  F0B7         	call	_delay_ms	;wreg free
 12055                           
 12056                           ;LCD.c: 106: LED_Toggle(eLED2);
 12057  017570  0E01               	movlw	1
 12058  017572  EC2B  F0BB         	call	_LED_Toggle
 12059  017576  0012               	return		;funcret
 12060  017578                     __end_of_LCD_Reset:
 12061                           	opt stack 0
 12062                           tosu	equ	0xFFF
 12063                           tosh	equ	0xFFE
 12064                           tosl	equ	0xFFD
 12065                           pclath	equ	0xFFA
 12066                           tblptru	equ	0xFF8
 12067                           tblptrh	equ	0xFF7
 12068                           tblptrl	equ	0xFF6
 12069                           tablat	equ	0xFF5
 12070                           prodh	equ	0xFF4
 12071                           prodl	equ	0xFF3
 12072                           intcon	equ	0xFF2
 12073                           postinc0	equ	0xFEE
 12074                           wreg	equ	0xFE8
 12075                           indf1	equ	0xFE7
 12076                           postdec1	equ	0xFE5
 12077                           fsr1h	equ	0xFE2
 12078                           fsr1l	equ	0xFE1
 12079                           indf2	equ	0xFDF
 12080                           postinc2	equ	0xFDE
 12081                           postdec2	equ	0xFDD
 12082                           plusw2	equ	0xFDB
 12083                           fsr2h	equ	0xFDA
 12084                           fsr2l	equ	0xFD9
 12085                           status	equ	0xFD8
 12086                           
 12087 ;; *************** function _delay_ms *****************
 12088 ;; Defined at:
 12089 ;;		line 240 in file "Library/Types.c"
 12090 ;; Parameters:    Size  Location     Type
 12091 ;;  ms              2    0[BANK0 ] unsigned short 
 12092 ;; Auto vars:     Size  Location     Type
 12093 ;;  u               4    2[BANK0 ] volatile unsigned long 
 12094 ;; Return value:  Size  Location     Type
 12095 ;;                  1    wreg      void 
 12096 ;; Registers used:
 12097 ;;		wreg, status,2, status,0
 12098 ;; Tracked objects:
 12099 ;;		On entry : 0/0
 12100 ;;		On exit  : 0/0
 12101 ;;		Unchanged: 0/0
 12102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12103 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12104 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12106 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12107 ;;Total ram usage:        6 bytes
 12108 ;; Hardware stack levels used:    1
 12109 ;; Hardware stack levels required when called:    7
 12110 ;; This function calls:
 12111 ;;		Nothing
 12112 ;; This function is called by:
 12113 ;;		_LCD_Reset
 12114 ;;		_LCD_Init
 12115 ;;		_MXK_Init
 12116 ;; This function uses a non-reentrant model
 12117 ;;
 12118                           
 12119                           	psect	text58
 12120  016FFE                     __ptext58:
 12121                           	opt stack 0
 12122  016FFE                     _delay_ms:
 12123                           	opt stack 21
 12124                           
 12125                           ;Types.c: 242: volatile unsigned long u;
 12126                           ;Types.c: 243: while (ms--)
 12127                           
 12128                           ;incstack = 0
 12129  016FFE  D01F               	goto	u10710
 12130  017000                     l13239:
 12131                           
 12132                           ;Types.c: 244: {
 12133                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 12134  017000  0E00               	movlw	0
 12135  017002  0100               	movlb	0	; () banked
 12136  017004  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 12137  017006  0E00               	movlw	0
 12138  017008  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12139  01700A  0E00               	movlw	0
 12140  01700C  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12141  01700E  0E00               	movlw	0
 12142  017010  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12143  017012                     l13241:
 12144                           
 12145                           ; BSR set to: 0
 12146  017012  0100               	movlb	0	; () banked
 12147  017014  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 12148  017016  0100               	movlb	0	; () banked
 12149  017018  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 12150  01701A  E111               	bnz	l13247
 12151  01701C  0EB0               	movlw	176
 12152  01701E  0100               	movlb	0	; () banked
 12153  017020  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 12154  017022  0E04               	movlw	4
 12155  017024  0100               	movlb	0	; () banked
 12156  017026  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 12157  017028  B0D8               	btfsc	status,0,c
 12158  01702A  D009               	goto	u10710
 12159                           
 12160                           ; BSR set to: 0
 12161                           
 12162                           ; BSR set to: 0
 12163  01702C  F000               	nop		; ;# 
 12164  01702E  0E01               	movlw	1
 12165  017030  0100               	movlb	0	; () banked
 12166  017032  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 12167  017034  0E00               	movlw	0
 12168  017036  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 12169  017038  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 12170  01703A  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 12171  01703C  D7EA               	goto	l13241
 12172  01703E                     u10710:
 12173  01703E                     l13247:
 12174  01703E  0100               	movlb	0	; () banked
 12175  017040  0760               	decf	delay_ms@ms& (0+255),f,b
 12176  017042  A0D8               	btfss	status,0,c
 12177  017044  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 12178  017046  0100               	movlb	0	; () banked
 12179  017048  2960               	incf	delay_ms@ms& (0+255),w,b
 12180  01704A  E1DA               	bnz	l13239
 12181  01704C  0100               	movlb	0	; () banked
 12182  01704E  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 12183  017050  A4D8               	btfss	status,2,c
 12184  017052  D7D6               	goto	l824
 12185                           
 12186                           ; BSR set to: 0
 12187                           ;Types.c: 251: }
 12188                           ;Types.c: 252: }
 12189                           ;Types.c: 253: u = 0x8008;
 12190                           
 12191                           ; BSR set to: 0
 12192  017054  0E08               	movlw	8
 12193  017056  0100               	movlb	0	; () banked
 12194  017058  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 12195  01705A  0E80               	movlw	128
 12196  01705C  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12197  01705E  0E00               	movlw	0
 12198  017060  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12199  017062  0E00               	movlw	0
 12200  017064  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12201                           
 12202                           ; BSR set to: 0
 12203  017066  0012               	return		;funcret
 12204  017068                     __end_of_delay_ms:
 12205                           	opt stack 0
 12206                           tosu	equ	0xFFF
 12207                           tosh	equ	0xFFE
 12208                           tosl	equ	0xFFD
 12209                           pclath	equ	0xFFA
 12210                           tblptru	equ	0xFF8
 12211                           tblptrh	equ	0xFF7
 12212                           tblptrl	equ	0xFF6
 12213                           tablat	equ	0xFF5
 12214                           prodh	equ	0xFF4
 12215                           prodl	equ	0xFF3
 12216                           intcon	equ	0xFF2
 12217                           postinc0	equ	0xFEE
 12218                           wreg	equ	0xFE8
 12219                           indf1	equ	0xFE7
 12220                           postdec1	equ	0xFE5
 12221                           fsr1h	equ	0xFE2
 12222                           fsr1l	equ	0xFE1
 12223                           indf2	equ	0xFDF
 12224                           postinc2	equ	0xFDE
 12225                           postdec2	equ	0xFDD
 12226                           plusw2	equ	0xFDB
 12227                           fsr2h	equ	0xFDA
 12228                           fsr2l	equ	0xFD9
 12229                           status	equ	0xFD8
 12230                           
 12231 ;; *************** function _Reset_Low *****************
 12232 ;; Defined at:
 12233 ;;		line 32 in file "Library/LCD.c"
 12234 ;; Parameters:    Size  Location     Type
 12235 ;;		None
 12236 ;; Auto vars:     Size  Location     Type
 12237 ;;		None
 12238 ;; Return value:  Size  Location     Type
 12239 ;;                  1    wreg      void 
 12240 ;; Registers used:
 12241 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12242 ;; Tracked objects:
 12243 ;;		On entry : 0/0
 12244 ;;		On exit  : 0/0
 12245 ;;		Unchanged: 0/0
 12246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12251 ;;Total ram usage:        0 bytes
 12252 ;; Hardware stack levels used:    1
 12253 ;; Hardware stack levels required when called:   11
 12254 ;; This function calls:
 12255 ;;		_Port_SetPin
 12256 ;; This function is called by:
 12257 ;;		_LCD_Reset
 12258 ;; This function uses a non-reentrant model
 12259 ;;
 12260                           
 12261                           	psect	text59
 12262  017DC2                     __ptext59:
 12263                           	opt stack 0
 12264  017DC2                     _Reset_Low:
 12265                           	opt stack 15
 12266                           
 12267                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 12268                           
 12269                           ; BSR set to: 0
 12270                           ;incstack = 0
 12271  017DC2  0EBD               	movlw	low _PortF
 12272  017DC4  0100               	movlb	0	; () banked
 12273  017DC6  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12274  017DC8  0E01               	movlw	high _PortF
 12275  017DCA  0100               	movlb	0	; () banked
 12276  017DCC  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12277  017DCE  0E06               	movlw	6
 12278  017DD0  0100               	movlb	0	; () banked
 12279  017DD2  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12280  017DD4  0E01               	movlw	1
 12281  017DD6  0100               	movlb	0	; () banked
 12282  017DD8  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12283  017DDA  EC37  F0AC         	call	_Port_SetPin	;wreg free
 12284  017DDE  0012               	return		;funcret
 12285  017DE0                     __end_of_Reset_Low:
 12286                           	opt stack 0
 12287                           tosu	equ	0xFFF
 12288                           tosh	equ	0xFFE
 12289                           tosl	equ	0xFFD
 12290                           pclath	equ	0xFFA
 12291                           tblptru	equ	0xFF8
 12292                           tblptrh	equ	0xFF7
 12293                           tblptrl	equ	0xFF6
 12294                           tablat	equ	0xFF5
 12295                           prodh	equ	0xFF4
 12296                           prodl	equ	0xFF3
 12297                           intcon	equ	0xFF2
 12298                           postinc0	equ	0xFEE
 12299                           wreg	equ	0xFE8
 12300                           indf1	equ	0xFE7
 12301                           postdec1	equ	0xFE5
 12302                           fsr1h	equ	0xFE2
 12303                           fsr1l	equ	0xFE1
 12304                           indf2	equ	0xFDF
 12305                           postinc2	equ	0xFDE
 12306                           postdec2	equ	0xFDD
 12307                           plusw2	equ	0xFDB
 12308                           fsr2h	equ	0xFDA
 12309                           fsr2l	equ	0xFD9
 12310                           status	equ	0xFD8
 12311                           
 12312 ;; *************** function _Reset_High *****************
 12313 ;; Defined at:
 12314 ;;		line 36 in file "Library/LCD.c"
 12315 ;; Parameters:    Size  Location     Type
 12316 ;;		None
 12317 ;; Auto vars:     Size  Location     Type
 12318 ;;		None
 12319 ;; Return value:  Size  Location     Type
 12320 ;;                  1    wreg      void 
 12321 ;; Registers used:
 12322 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12323 ;; Tracked objects:
 12324 ;;		On entry : 0/0
 12325 ;;		On exit  : 0/0
 12326 ;;		Unchanged: 0/0
 12327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12329 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12331 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12332 ;;Total ram usage:        0 bytes
 12333 ;; Hardware stack levels used:    1
 12334 ;; Hardware stack levels required when called:   11
 12335 ;; This function calls:
 12336 ;;		_Port_SetPin
 12337 ;; This function is called by:
 12338 ;;		_LCD_Reset
 12339 ;; This function uses a non-reentrant model
 12340 ;;
 12341                           
 12342                           	psect	text60
 12343  017DE0                     __ptext60:
 12344                           	opt stack 0
 12345  017DE0                     _Reset_High:
 12346                           	opt stack 15
 12347                           
 12348                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 12349                           
 12350                           ;incstack = 0
 12351  017DE0  0EBD               	movlw	low _PortF
 12352  017DE2  0100               	movlb	0	; () banked
 12353  017DE4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12354  017DE6  0E01               	movlw	high _PortF
 12355  017DE8  0100               	movlb	0	; () banked
 12356  017DEA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12357  017DEC  0E06               	movlw	6
 12358  017DEE  0100               	movlb	0	; () banked
 12359  017DF0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12360  017DF2  0E00               	movlw	0
 12361  017DF4  0100               	movlb	0	; () banked
 12362  017DF6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12363  017DF8  EC37  F0AC         	call	_Port_SetPin	;wreg free
 12364  017DFC  0012               	return		;funcret
 12365  017DFE                     __end_of_Reset_High:
 12366                           	opt stack 0
 12367                           tosu	equ	0xFFF
 12368                           tosh	equ	0xFFE
 12369                           tosl	equ	0xFFD
 12370                           pclath	equ	0xFFA
 12371                           tblptru	equ	0xFF8
 12372                           tblptrh	equ	0xFF7
 12373                           tblptrl	equ	0xFF6
 12374                           tablat	equ	0xFF5
 12375                           prodh	equ	0xFF4
 12376                           prodl	equ	0xFF3
 12377                           intcon	equ	0xFF2
 12378                           postinc0	equ	0xFEE
 12379                           wreg	equ	0xFE8
 12380                           indf1	equ	0xFE7
 12381                           postdec1	equ	0xFE5
 12382                           fsr1h	equ	0xFE2
 12383                           fsr1l	equ	0xFE1
 12384                           indf2	equ	0xFDF
 12385                           postinc2	equ	0xFDE
 12386                           postdec2	equ	0xFDD
 12387                           plusw2	equ	0xFDB
 12388                           fsr2h	equ	0xFDA
 12389                           fsr2l	equ	0xFD9
 12390                           status	equ	0xFD8
 12391                           
 12392 ;; *************** function _LED_Toggle *****************
 12393 ;; Defined at:
 12394 ;;		line 50 in file "Library/LED.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;  pLED            1    wreg     enum E6739
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;  pLED            1   24[BANK0 ] enum E6739
 12399 ;; Return value:  Size  Location     Type
 12400 ;;                  1    wreg      void 
 12401 ;; Registers used:
 12402 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12409 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12411 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12412 ;;Total ram usage:        1 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; Hardware stack levels required when called:   12
 12415 ;; This function calls:
 12416 ;;		_Port_TogglePin
 12417 ;; This function is called by:
 12418 ;;		_LCD_Reset
 12419 ;;		_Event_DIPSwitch
 12420 ;;		_Event_TestButton
 12421 ;;		_Event_ADCSequenceComplete
 12422 ;;		_Event_HMI_DIPSwitch
 12423 ;;		_Event_HMI_LeftButton
 12424 ;;		_Event_HMI_RightButton
 12425 ;;		_Event_HMI_UpButton
 12426 ;;		_Event_HMI_DownButton
 12427 ;; This function uses a non-reentrant model
 12428 ;;
 12429                           
 12430                           	psect	text61
 12431  017656                     __ptext61:
 12432                           	opt stack 0
 12433  017656                     _LED_Toggle:
 12434                           	opt stack 14
 12435                           
 12436                           ;incstack = 0
 12437                           ;LED_Toggle@pLED stored from wreg
 12438  017656  0100               	movlb	0	; () banked
 12439  017658  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 12440                           
 12441                           ;LED.c: 52: switch (pLED)
 12442  01765A  D018               	goto	l234
 12443  01765C                     
 12444                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 12445  01765C  0EB3               	movlw	low _PortC
 12446  01765E  0100               	movlb	0	; () banked
 12447  017660  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 12448  017662  0E01               	movlw	high _PortC
 12449  017664  0100               	movlb	0	; () banked
 12450  017666  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 12451  017668  0E00               	movlw	0
 12452  01766A  0100               	movlb	0	; () banked
 12453  01766C  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 12454  01766E  ECD7  F0BD         	call	_Port_TogglePin	;wreg free
 12455                           
 12456                           ;LED.c: 56: break;
 12457  017672  0012               	return	
 12458  017674                     
 12459                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 12460  017674  0EB3               	movlw	low _PortC
 12461  017676  0100               	movlb	0	; () banked
 12462  017678  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 12463  01767A  0E01               	movlw	high _PortC
 12464  01767C  0100               	movlb	0	; () banked
 12465  01767E  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 12466  017680  0E01               	movlw	1
 12467  017682  0100               	movlb	0	; () banked
 12468  017684  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 12469  017686  ECD7  F0BD         	call	_Port_TogglePin	;wreg free
 12470                           
 12471                           ;LED.c: 60: }
 12472                           
 12473                           ;LED.c: 59: break;
 12474  01768A  0012               	return	
 12475  01768C                     l234:
 12476  01768C  0100               	movlb	0	; () banked
 12477  01768E  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 12478                           
 12479                           ; Switch size 1, requested type "space"
 12480                           ; Number of cases is 2, Range of values is 0 to 1
 12481                           ; switch strategies available:
 12482                           ; Name         Instructions Cycles
 12483                           ; simple_byte            7     4 (average)
 12484                           ;	Chosen strategy is simple_byte
 12485  017690  0A00               	xorlw	0	; case 0
 12486  017692  B4D8               	btfsc	status,2,c
 12487  017694  D7E3               	goto	l235
 12488  017696  0A01               	xorlw	1	; case 1
 12489  017698  A4D8               	btfss	status,2,c
 12490  01769A  0012               	return	
 12491  01769C  D7EB               	goto	l237
 12492  01769E                     __end_of_LED_Toggle:
 12493                           	opt stack 0
 12494                           tosu	equ	0xFFF
 12495                           tosh	equ	0xFFE
 12496                           tosl	equ	0xFFD
 12497                           pclath	equ	0xFFA
 12498                           tblptru	equ	0xFF8
 12499                           tblptrh	equ	0xFF7
 12500                           tblptrl	equ	0xFF6
 12501                           tablat	equ	0xFF5
 12502                           prodh	equ	0xFF4
 12503                           prodl	equ	0xFF3
 12504                           intcon	equ	0xFF2
 12505                           postinc0	equ	0xFEE
 12506                           wreg	equ	0xFE8
 12507                           indf1	equ	0xFE7
 12508                           postdec1	equ	0xFE5
 12509                           fsr1h	equ	0xFE2
 12510                           fsr1l	equ	0xFE1
 12511                           indf2	equ	0xFDF
 12512                           postinc2	equ	0xFDE
 12513                           postdec2	equ	0xFDD
 12514                           plusw2	equ	0xFDB
 12515                           fsr2h	equ	0xFDA
 12516                           fsr2l	equ	0xFD9
 12517                           status	equ	0xFD8
 12518                           
 12519 ;; *************** function _Port_TogglePin *****************
 12520 ;; Defined at:
 12521 ;;		line 278 in file "Library/Port.c"
 12522 ;; Parameters:    Size  Location     Type
 12523 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 12524 ;;		 -> PortC(10), 
 12525 ;;  pPin            1   22[BANK0 ] enum E6750
 12526 ;; Auto vars:     Size  Location     Type
 12527 ;;  Value           1   23[BANK0 ] unsigned char 
 12528 ;; Return value:  Size  Location     Type
 12529 ;;                  1    wreg      void 
 12530 ;; Registers used:
 12531 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12532 ;; Tracked objects:
 12533 ;;		On entry : 0/0
 12534 ;;		On exit  : 0/0
 12535 ;;		Unchanged: 0/0
 12536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12537 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12540 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12541 ;;Total ram usage:        4 bytes
 12542 ;; Hardware stack levels used:    1
 12543 ;; Hardware stack levels required when called:   11
 12544 ;; This function calls:
 12545 ;;		_Port_GetPin
 12546 ;;		_Port_SetPin
 12547 ;; This function is called by:
 12548 ;;		_LED_Toggle
 12549 ;; This function uses a non-reentrant model
 12550 ;;
 12551                           
 12552                           	psect	text62
 12553  017BAE                     __ptext62:
 12554                           	opt stack 0
 12555  017BAE                     _Port_TogglePin:
 12556                           	opt stack 14
 12557                           
 12558                           ;Port.c: 280: UINT8 Value;
 12559                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 12560                           
 12561                           ;incstack = 0
 12562  017BAE  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 12563  017BB2  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 12564  017BB6  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 12565  017BBA  EC97  F0BB         	call	_Port_GetPin	;wreg free
 12566  017BBE  0100               	movlb	0	; () banked
 12567  017BC0  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;Port.c: 282: Value ^= 0x01;
 12571  017BC2  0E01               	movlw	1
 12572  017BC4  0100               	movlb	0	; () banked
 12573  017BC6  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 12574                           
 12575                           ; BSR set to: 0
 12576                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 12577  017BC8  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 12578  017BCC  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 12579  017BD0  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 12580  017BD4  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 12581  017BD8  EC37  F0AC         	call	_Port_SetPin	;wreg free
 12582  017BDC  0012               	return		;funcret
 12583  017BDE                     __end_of_Port_TogglePin:
 12584                           	opt stack 0
 12585                           tosu	equ	0xFFF
 12586                           tosh	equ	0xFFE
 12587                           tosl	equ	0xFFD
 12588                           pclath	equ	0xFFA
 12589                           tblptru	equ	0xFF8
 12590                           tblptrh	equ	0xFF7
 12591                           tblptrl	equ	0xFF6
 12592                           tablat	equ	0xFF5
 12593                           prodh	equ	0xFF4
 12594                           prodl	equ	0xFF3
 12595                           intcon	equ	0xFF2
 12596                           postinc0	equ	0xFEE
 12597                           wreg	equ	0xFE8
 12598                           indf1	equ	0xFE7
 12599                           postdec1	equ	0xFE5
 12600                           fsr1h	equ	0xFE2
 12601                           fsr1l	equ	0xFE1
 12602                           indf2	equ	0xFDF
 12603                           postinc2	equ	0xFDE
 12604                           postdec2	equ	0xFDD
 12605                           plusw2	equ	0xFDB
 12606                           fsr2h	equ	0xFDA
 12607                           fsr2l	equ	0xFD9
 12608                           status	equ	0xFD8
 12609                           
 12610 ;; *************** function _Port_SetPin *****************
 12611 ;; Defined at:
 12612 ;;		line 247 in file "Library/Port.c"
 12613 ;; Parameters:    Size  Location     Type
 12614 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 12615 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 12616 ;;  pPin            1   17[BANK0 ] enum E6750
 12617 ;;  pValue          1   18[BANK0 ] unsigned char 
 12618 ;; Auto vars:     Size  Location     Type
 12619 ;;  Type            1   19[BANK0 ] enum E6795
 12620 ;; Return value:  Size  Location     Type
 12621 ;;                  1    wreg      void 
 12622 ;; Registers used:
 12623 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12624 ;; Tracked objects:
 12625 ;;		On entry : 0/0
 12626 ;;		On exit  : 0/0
 12627 ;;		Unchanged: 0/0
 12628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12629 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;Total ram usage:        5 bytes
 12634 ;; Hardware stack levels used:    1
 12635 ;; Hardware stack levels required when called:   10
 12636 ;; This function calls:
 12637 ;;		_Byte_SetBit
 12638 ;;		_Word_GetPair
 12639 ;; This function is called by:
 12640 ;;		_Reset_Low
 12641 ;;		_Reset_High
 12642 ;;		_LED_Set
 12643 ;;		_Port_TogglePin
 12644 ;;		_Motor_Init
 12645 ;;		_Motor_Step
 12646 ;;		_MXK_Init
 12647 ;; This function uses a non-reentrant model
 12648 ;;
 12649                           
 12650                           	psect	text63
 12651  01586E                     __ptext63:
 12652                           	opt stack 0
 12653  01586E                     _Port_SetPin:
 12654                           	opt stack 14
 12655                           
 12656                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 12657                           
 12658                           ;incstack = 0
 12659  01586E  0E08               	movlw	8
 12660  015870  0100               	movlb	0	; () banked
 12661  015872  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 12662  015874  0100               	movlb	0	; () banked
 12663  015876  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12664  015878  0E00               	movlw	0
 12665  01587A  0100               	movlb	0	; () banked
 12666  01587C  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 12667  01587E  0100               	movlb	0	; () banked
 12668  015880  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12669  015882  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 12670  015886  ECC0  F0BC         	call	_Word_GetPair	;wreg free
 12671  01588A  0100               	movlb	0	; () banked
 12672  01588C  6F73               	movwf	Port_SetPin@Type& (0+255),b
 12673                           
 12674                           ;Port.c: 250: switch (Type)
 12675  01588E  D042               	goto	l427
 12676  015890                     
 12677                           ; BSR set to: 0
 12678                           ;Port.c: 256: pValue &= 1;
 12679                           
 12680                           ; BSR set to: 0
 12681  015890  0E01               	movlw	1
 12682  015892  0100               	movlb	0	; () banked
 12683  015894  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12684                           
 12685                           ; BSR set to: 0
 12686                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12687  015896  0100               	movlb	0	; () banked
 12688  015898  EE20 F002          	lfsr	2,2
 12689  01589C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12690  01589E  26D9               	addwf	fsr2l,f,c
 12691  0158A0  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12692  0158A2  22DA               	addwfc	fsr2h,f,c
 12693  0158A4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12694  0158A8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12695  0158AC  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12696  0158B0  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12697  0158B4  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 12698                           
 12699                           ;Port.c: 258: break;
 12700  0158B8  0012               	return	
 12701  0158BA                     
 12702                           ;Port.c: 261: pValue &= 1;
 12703  0158BA  0E01               	movlw	1
 12704  0158BC  0100               	movlb	0	; () banked
 12705  0158BE  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12706                           
 12707                           ;Port.c: 262: pValue ^= 1;
 12708  0158C0  0E01               	movlw	1
 12709  0158C2  0100               	movlb	0	; () banked
 12710  0158C4  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 12711                           
 12712                           ; BSR set to: 0
 12713                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12714  0158C6  0100               	movlb	0	; () banked
 12715  0158C8  EE20 F002          	lfsr	2,2
 12716  0158CC  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12717  0158CE  26D9               	addwf	fsr2l,f,c
 12718  0158D0  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12719  0158D2  22DA               	addwfc	fsr2h,f,c
 12720  0158D4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12721  0158D8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12722  0158DC  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12723  0158E0  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12724  0158E4  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 12725                           
 12726                           ;Port.c: 264: break;
 12727  0158E8  0012               	return	
 12728  0158EA                     
 12729                           ;Port.c: 266: pValue &= 1;
 12730  0158EA  0E01               	movlw	1
 12731  0158EC  0100               	movlb	0	; () banked
 12732  0158EE  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 12733                           
 12734                           ; BSR set to: 0
 12735                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 12736  0158F0  0100               	movlb	0	; () banked
 12737  0158F2  EE20 F004          	lfsr	2,4
 12738  0158F6  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 12739  0158F8  26D9               	addwf	fsr2l,f,c
 12740  0158FA  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12741  0158FC  22DA               	addwfc	fsr2h,f,c
 12742  0158FE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 12743  015902  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 12744  015906  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12745  01590A  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12746  01590E  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 12747                           
 12748                           ;Port.c: 269: }
 12749                           
 12750                           ;Port.c: 268: break;
 12751  015912  0012               	return	
 12752  015914                     l427:
 12753  015914  0100               	movlb	0	; () banked
 12754  015916  5173               	movf	Port_SetPin@Type& (0+255),w,b
 12755                           
 12756                           ; Switch size 1, requested type "space"
 12757                           ; Number of cases is 4, Range of values is 0 to 3
 12758                           ; switch strategies available:
 12759                           ; Name         Instructions Cycles
 12760                           ; simple_byte           13     7 (average)
 12761                           ;	Chosen strategy is simple_byte
 12762  015918  0A00               	xorlw	0	; case 0
 12763  01591A  B4D8               	btfsc	status,2,c
 12764  01591C  0012               	return	
 12765  01591E  0A01               	xorlw	1	; case 1
 12766  015920  B4D8               	btfsc	status,2,c
 12767  015922  D7B6               	goto	l430
 12768  015924  0A03               	xorlw	3	; case 2
 12769  015926  B4D8               	btfsc	status,2,c
 12770  015928  D7C8               	goto	l432
 12771  01592A  0A01               	xorlw	1	; case 3
 12772  01592C  A4D8               	btfss	status,2,c
 12773  01592E  0012               	return	
 12774  015930  D7DC               	goto	l433
 12775  015932                     __end_of_Port_SetPin:
 12776                           	opt stack 0
 12777                           tosu	equ	0xFFF
 12778                           tosh	equ	0xFFE
 12779                           tosl	equ	0xFFD
 12780                           pclath	equ	0xFFA
 12781                           tblptru	equ	0xFF8
 12782                           tblptrh	equ	0xFF7
 12783                           tblptrl	equ	0xFF6
 12784                           tablat	equ	0xFF5
 12785                           prodh	equ	0xFF4
 12786                           prodl	equ	0xFF3
 12787                           intcon	equ	0xFF2
 12788                           postinc0	equ	0xFEE
 12789                           wreg	equ	0xFE8
 12790                           indf1	equ	0xFE7
 12791                           postdec1	equ	0xFE5
 12792                           fsr1h	equ	0xFE2
 12793                           fsr1l	equ	0xFE1
 12794                           indf2	equ	0xFDF
 12795                           postinc2	equ	0xFDE
 12796                           postdec2	equ	0xFDD
 12797                           plusw2	equ	0xFDB
 12798                           fsr2h	equ	0xFDA
 12799                           fsr2l	equ	0xFD9
 12800                           status	equ	0xFD8
 12801                           
 12802 ;; *************** function _Port_GetPin *****************
 12803 ;; Defined at:
 12804 ;;		line 271 in file "Library/Port.c"
 12805 ;; Parameters:    Size  Location     Type
 12806 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 12807 ;;		 -> PortB(10), PortE(10), PortC(10), 
 12808 ;;  pPin            1    2[BANK0 ] enum E6750
 12809 ;; Auto vars:     Size  Location     Type
 12810 ;;  Output          1    5[BANK0 ] unsigned char 
 12811 ;; Return value:  Size  Location     Type
 12812 ;;                  1    wreg      unsigned char 
 12813 ;; Registers used:
 12814 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12815 ;; Tracked objects:
 12816 ;;		On entry : 0/0
 12817 ;;		On exit  : 0/0
 12818 ;;		Unchanged: 0/0
 12819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12820 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12821 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12822 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12823 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12824 ;;Total ram usage:        6 bytes
 12825 ;; Hardware stack levels used:    1
 12826 ;; Hardware stack levels required when called:    7
 12827 ;; This function calls:
 12828 ;;		Nothing
 12829 ;; This function is called by:
 12830 ;;		_Port_TogglePin
 12831 ;;		_HMI_LeftSwitch
 12832 ;;		_HMI_RightSwitch
 12833 ;;		_HMI_UpSwitch
 12834 ;;		_HMI_DownSwitch
 12835 ;;		_MXK_TestButton
 12836 ;; This function uses a non-reentrant model
 12837 ;;
 12838                           
 12839                           	psect	text64
 12840  01772E                     __ptext64:
 12841                           	opt stack 0
 12842  01772E                     _Port_GetPin:
 12843                           	opt stack 21
 12844                           
 12845                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 12846                           
 12847                           ;incstack = 0
 12848  01772E  0100               	movlb	0	; () banked
 12849  017730  EE20 F006          	lfsr	2,6
 12850  017734  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 12851  017736  26D9               	addwf	fsr2l,f,c
 12852  017738  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 12853  01773A  22DA               	addwfc	fsr2h,f,c
 12854  01773C  CFDE F063          	movff	postinc2,??_Port_GetPin
 12855  017740  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 12856  017744  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 12857  017748  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 12858  01774C  50DF               	movf	indf2,w,c
 12859  01774E  0100               	movlb	0	; () banked
 12860  017750  6F65               	movwf	Port_GetPin@Output& (0+255),b
 12861                           
 12862                           ; BSR set to: 0
 12863                           ;Port.c: 274: Output >>= (UINT8)pPin;
 12864  017752  0100               	movlb	0	; () banked
 12865  017754  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 12866  017756  0100               	movlb	0	; () banked
 12867  017758  6F63               	movwf	??_Port_GetPin& (0+255),b
 12868  01775A  D003               	goto	u10300
 12869  01775C                     u10305:
 12870  01775C  0100               	movlb	0	; () banked
 12871  01775E  90D8               	bcf	status,0,c
 12872  017760  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 12873  017762                     u10300:
 12874  017762  0100               	movlb	0	; () banked
 12875  017764  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 12876  017766  D7FA               	goto	u10305
 12877                           
 12878                           ;Port.c: 275: Output &= 1;
 12879  017768  0E01               	movlw	1
 12880  01776A  0100               	movlb	0	; () banked
 12881  01776C  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;Port.c: 276: return Output;
 12885  01776E  0100               	movlb	0	; () banked
 12886  017770  5165               	movf	Port_GetPin@Output& (0+255),w,b
 12887  017772  0012               	return	
 12888  017774                     __end_of_Port_GetPin:
 12889                           	opt stack 0
 12890                           tosu	equ	0xFFF
 12891                           tosh	equ	0xFFE
 12892                           tosl	equ	0xFFD
 12893                           pclath	equ	0xFFA
 12894                           tblptru	equ	0xFF8
 12895                           tblptrh	equ	0xFF7
 12896                           tblptrl	equ	0xFF6
 12897                           tablat	equ	0xFF5
 12898                           prodh	equ	0xFF4
 12899                           prodl	equ	0xFF3
 12900                           intcon	equ	0xFF2
 12901                           postinc0	equ	0xFEE
 12902                           wreg	equ	0xFE8
 12903                           indf1	equ	0xFE7
 12904                           postdec1	equ	0xFE5
 12905                           fsr1h	equ	0xFE2
 12906                           fsr1l	equ	0xFE1
 12907                           indf2	equ	0xFDF
 12908                           postinc2	equ	0xFDE
 12909                           postdec2	equ	0xFDD
 12910                           plusw2	equ	0xFDB
 12911                           fsr2h	equ	0xFDA
 12912                           fsr2l	equ	0xFD9
 12913                           status	equ	0xFD8
 12914                           
 12915 ;; *************** function _ISR_Enable *****************
 12916 ;; Defined at:
 12917 ;;		line 27 in file "Library/ISR.c"
 12918 ;; Parameters:    Size  Location     Type
 12919 ;;		None
 12920 ;; Auto vars:     Size  Location     Type
 12921 ;;		None
 12922 ;; Return value:  Size  Location     Type
 12923 ;;                  1    wreg      void 
 12924 ;; Registers used:
 12925 ;;		None
 12926 ;; Tracked objects:
 12927 ;;		On entry : 0/0
 12928 ;;		On exit  : 0/0
 12929 ;;		Unchanged: 0/0
 12930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12935 ;;Total ram usage:        0 bytes
 12936 ;; Hardware stack levels used:    1
 12937 ;; Hardware stack levels required when called:    7
 12938 ;; This function calls:
 12939 ;;		Nothing
 12940 ;; This function is called by:
 12941 ;;		_initialise
 12942 ;; This function uses a non-reentrant model
 12943 ;;
 12944                           
 12945                           	psect	text65
 12946  018046                     __ptext65:
 12947                           	opt stack 0
 12948  018046                     _ISR_Enable:
 12949                           	opt stack 22
 12950                           
 12951                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;incstack = 0
 12955  018046  8CF2               	bsf	intcon,6,c	;volatile
 12956                           
 12957                           ;ISR.c: 30: INTCONbits.GIE = 1;
 12958  018048  8EF2               	bsf	intcon,7,c	;volatile
 12959                           
 12960                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 12961  01804A  88F2               	bsf	intcon,4,c	;volatile
 12962                           
 12963                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 12964  01804C  92F2               	bcf	intcon,1,c	;volatile
 12965  01804E  0012               	return		;funcret
 12966  018050                     __end_of_ISR_Enable:
 12967                           	opt stack 0
 12968                           tosu	equ	0xFFF
 12969                           tosh	equ	0xFFE
 12970                           tosl	equ	0xFFD
 12971                           pclath	equ	0xFFA
 12972                           tblptru	equ	0xFF8
 12973                           tblptrh	equ	0xFF7
 12974                           tblptrl	equ	0xFF6
 12975                           tablat	equ	0xFF5
 12976                           prodh	equ	0xFF4
 12977                           prodl	equ	0xFF3
 12978                           intcon	equ	0xFF2
 12979                           postinc0	equ	0xFEE
 12980                           wreg	equ	0xFE8
 12981                           indf1	equ	0xFE7
 12982                           postdec1	equ	0xFE5
 12983                           fsr1h	equ	0xFE2
 12984                           fsr1l	equ	0xFE1
 12985                           indf2	equ	0xFDF
 12986                           postinc2	equ	0xFDE
 12987                           postdec2	equ	0xFDD
 12988                           plusw2	equ	0xFDB
 12989                           fsr2h	equ	0xFDA
 12990                           fsr2l	equ	0xFD9
 12991                           status	equ	0xFD8
 12992                           
 12993 ;; *************** function _HMI_Init *****************
 12994 ;; Defined at:
 12995 ;;		line 104 in file "HMI.c"
 12996 ;; Parameters:    Size  Location     Type
 12997 ;;		None
 12998 ;; Auto vars:     Size  Location     Type
 12999 ;;  in              2   72[BANK0 ] unsigned short 
 13000 ;; Return value:  Size  Location     Type
 13001 ;;                  1    wreg      void 
 13002 ;; Registers used:
 13003 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13004 ;; Tracked objects:
 13005 ;;		On entry : 0/0
 13006 ;;		On exit  : 0/0
 13007 ;;		Unchanged: 0/0
 13008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13011 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13012 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13013 ;;Total ram usage:        2 bytes
 13014 ;; Hardware stack levels used:    1
 13015 ;; Hardware stack levels required when called:   16
 13016 ;; This function calls:
 13017 ;;		_Button_Init
 13018 ;;		_SPI_Init
 13019 ;;		_SPI_MinSpeed
 13020 ;; This function is called by:
 13021 ;;		_initialise
 13022 ;; This function uses a non-reentrant model
 13023 ;;
 13024                           
 13025                           	psect	text66
 13026  013366                     __ptext66:
 13027                           	opt stack 0
 13028  013366                     _HMI_Init:
 13029                           	opt stack 13
 13030                           
 13031                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 13032                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 13033                           
 13034                           ;incstack = 0
 13035  013366  0E57               	movlw	low (_HMIBoard+48)
 13036  013368  0100               	movlb	0	; () banked
 13037  01336A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 13038  01336C  0E01               	movlw	high (_HMIBoard+48)
 13039  01336E  0100               	movlb	0	; () banked
 13040  013370  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 13041  013372  0E00               	movlw	0
 13042  013374  0100               	movlb	0	; () banked
 13043  013376  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13044  013378  0E02               	movlw	2
 13045  01337A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 13046  01337C  0E76               	movlw	low _HMI_InitButtons
 13047  01337E  0100               	movlb	0	; () banked
 13048  013380  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 13049  013382  0E80               	movlw	high _HMI_InitButtons
 13050  013384  0100               	movlb	0	; () banked
 13051  013386  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13052  013388  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13053  01338A  0100               	movlb	0	; () banked
 13054  01338C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13055  01338E  0EFE               	movlw	low _HMI_DIPSwitch
 13056  013390  0100               	movlb	0	; () banked
 13057  013392  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 13058  013394  0E7E               	movlw	high _HMI_DIPSwitch
 13059  013396  0100               	movlb	0	; () banked
 13060  013398  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13061  01339A  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 13062  01339C  0100               	movlb	0	; () banked
 13063  01339E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13064  0133A0  0E92               	movlw	low _Event_NULL
 13065  0133A2  0100               	movlb	0	; () banked
 13066  0133A4  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 13067  0133A6  0E80               	movlw	high _Event_NULL
 13068  0133A8  0100               	movlb	0	; () banked
 13069  0133AA  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13070  0133AC  0E01               	movlw	low (_Event_NULL shr (0+16))
 13071  0133AE  0100               	movlb	0	; () banked
 13072  0133B0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13073  0133B2  EC33  F0AA         	call	_Button_Init	;wreg free
 13074                           
 13075                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 13076                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 13077  0133B6  0E39               	movlw	low (_HMIBoard+18)
 13078  0133B8  0100               	movlb	0	; () banked
 13079  0133BA  6F9B               	movwf	Button_Init@pInput& (0+255),b
 13080  0133BC  0E01               	movlw	high (_HMIBoard+18)
 13081  0133BE  0100               	movlb	0	; () banked
 13082  0133C0  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 13083  0133C2  0E00               	movlw	0
 13084  0133C4  0100               	movlb	0	; () banked
 13085  0133C6  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13086  0133C8  0E02               	movlw	2
 13087  0133CA  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 13088  0133CC  0E76               	movlw	low _HMI_InitButtons
 13089  0133CE  0100               	movlb	0	; () banked
 13090  0133D0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 13091  0133D2  0E80               	movlw	high _HMI_InitButtons
 13092  0133D4  0100               	movlb	0	; () banked
 13093  0133D6  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13094  0133D8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13095  0133DA  0100               	movlb	0	; () banked
 13096  0133DC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13097  0133DE  0E5E               	movlw	low _HMI_LeftSwitch
 13098  0133E0  0100               	movlb	0	; () banked
 13099  0133E2  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 13100  0133E4  0E7F               	movlw	high _HMI_LeftSwitch
 13101  0133E6  0100               	movlb	0	; () banked
 13102  0133E8  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13103  0133EA  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 13104  0133EC  0100               	movlb	0	; () banked
 13105  0133EE  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13106  0133F0  0E92               	movlw	low _Event_NULL
 13107  0133F2  0100               	movlb	0	; () banked
 13108  0133F4  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 13109  0133F6  0E80               	movlw	high _Event_NULL
 13110  0133F8  0100               	movlb	0	; () banked
 13111  0133FA  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13112  0133FC  0E01               	movlw	low (_Event_NULL shr (0+16))
 13113  0133FE  0100               	movlb	0	; () banked
 13114  013400  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13115  013402  EC33  F0AA         	call	_Button_Init	;wreg free
 13116                           
 13117                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 13118                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 13119  013406  0E2F               	movlw	low (_HMIBoard+8)
 13120  013408  0100               	movlb	0	; () banked
 13121  01340A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 13122  01340C  0E01               	movlw	high (_HMIBoard+8)
 13123  01340E  0100               	movlb	0	; () banked
 13124  013410  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 13125  013412  0E00               	movlw	0
 13126  013414  0100               	movlb	0	; () banked
 13127  013416  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13128  013418  0E02               	movlw	2
 13129  01341A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 13130  01341C  0E76               	movlw	low _HMI_InitButtons
 13131  01341E  0100               	movlb	0	; () banked
 13132  013420  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 13133  013422  0E80               	movlw	high _HMI_InitButtons
 13134  013424  0100               	movlb	0	; () banked
 13135  013426  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13136  013428  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13137  01342A  0100               	movlb	0	; () banked
 13138  01342C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13139  01342E  0E46               	movlw	low _HMI_RightSwitch
 13140  013430  0100               	movlb	0	; () banked
 13141  013432  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 13142  013434  0E7F               	movlw	high _HMI_RightSwitch
 13143  013436  0100               	movlb	0	; () banked
 13144  013438  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13145  01343A  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 13146  01343C  0100               	movlb	0	; () banked
 13147  01343E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13148  013440  0E92               	movlw	low _Event_NULL
 13149  013442  0100               	movlb	0	; () banked
 13150  013444  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 13151  013446  0E80               	movlw	high _Event_NULL
 13152  013448  0100               	movlb	0	; () banked
 13153  01344A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13154  01344C  0E01               	movlw	low (_Event_NULL shr (0+16))
 13155  01344E  0100               	movlb	0	; () banked
 13156  013450  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13157  013452  EC33  F0AA         	call	_Button_Init	;wreg free
 13158                           
 13159                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 13160                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 13161  013456  0E43               	movlw	low (_HMIBoard+28)
 13162  013458  0100               	movlb	0	; () banked
 13163  01345A  6F9B               	movwf	Button_Init@pInput& (0+255),b
 13164  01345C  0E01               	movlw	high (_HMIBoard+28)
 13165  01345E  0100               	movlb	0	; () banked
 13166  013460  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 13167  013462  0E00               	movlw	0
 13168  013464  0100               	movlb	0	; () banked
 13169  013466  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13170  013468  0E02               	movlw	2
 13171  01346A  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 13172  01346C  0E76               	movlw	low _HMI_InitButtons
 13173  01346E  0100               	movlb	0	; () banked
 13174  013470  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 13175  013472  0E80               	movlw	high _HMI_InitButtons
 13176  013474  0100               	movlb	0	; () banked
 13177  013476  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13178  013478  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13179  01347A  0100               	movlb	0	; () banked
 13180  01347C  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13181  01347E  0E2E               	movlw	low _HMI_UpSwitch
 13182  013480  0100               	movlb	0	; () banked
 13183  013482  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 13184  013484  0E7F               	movlw	high _HMI_UpSwitch
 13185  013486  0100               	movlb	0	; () banked
 13186  013488  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13187  01348A  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 13188  01348C  0100               	movlb	0	; () banked
 13189  01348E  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13190  013490  0E92               	movlw	low _Event_NULL
 13191  013492  0100               	movlb	0	; () banked
 13192  013494  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 13193  013496  0E80               	movlw	high _Event_NULL
 13194  013498  0100               	movlb	0	; () banked
 13195  01349A  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13196  01349C  0E01               	movlw	low (_Event_NULL shr (0+16))
 13197  01349E  0100               	movlb	0	; () banked
 13198  0134A0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13199  0134A2  EC33  F0AA         	call	_Button_Init	;wreg free
 13200                           
 13201                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 13202                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 13203  0134A6  0E4D               	movlw	low (_HMIBoard+38)
 13204  0134A8  0100               	movlb	0	; () banked
 13205  0134AA  6F9B               	movwf	Button_Init@pInput& (0+255),b
 13206  0134AC  0E01               	movlw	high (_HMIBoard+38)
 13207  0134AE  0100               	movlb	0	; () banked
 13208  0134B0  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 13209  0134B2  0E00               	movlw	0
 13210  0134B4  0100               	movlb	0	; () banked
 13211  0134B6  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 13212  0134B8  0E02               	movlw	2
 13213  0134BA  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 13214  0134BC  0E76               	movlw	low _HMI_InitButtons
 13215  0134BE  0100               	movlb	0	; () banked
 13216  0134C0  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 13217  0134C2  0E80               	movlw	high _HMI_InitButtons
 13218  0134C4  0100               	movlb	0	; () banked
 13219  0134C6  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 13220  0134C8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 13221  0134CA  0100               	movlb	0	; () banked
 13222  0134CC  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 13223  0134CE  0E16               	movlw	low _HMI_DownSwitch
 13224  0134D0  0100               	movlb	0	; () banked
 13225  0134D2  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 13226  0134D4  0E7F               	movlw	high _HMI_DownSwitch
 13227  0134D6  0100               	movlb	0	; () banked
 13228  0134D8  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 13229  0134DA  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 13230  0134DC  0100               	movlb	0	; () banked
 13231  0134DE  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 13232  0134E0  0E92               	movlw	low _Event_NULL
 13233  0134E2  0100               	movlb	0	; () banked
 13234  0134E4  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 13235  0134E6  0E80               	movlw	high _Event_NULL
 13236  0134E8  0100               	movlb	0	; () banked
 13237  0134EA  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13238  0134EC  0E01               	movlw	low (_Event_NULL shr (0+16))
 13239  0134EE  0100               	movlb	0	; () banked
 13240  0134F0  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13241  0134F2  EC33  F0AA         	call	_Button_Init	;wreg free
 13242                           
 13243                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 13244  0134F6  0EA0               	movlw	160
 13245  0134F8  0100               	movlb	0	; () banked
 13246  0134FA  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 13247  0134FC  0E86               	movlw	134
 13248  0134FE  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 13249  013500  0E01               	movlw	1
 13250  013502  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 13251  013504  0E00               	movlw	0
 13252  013506  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 13253  013508  0E00               	movlw	0
 13254  01350A  0100               	movlb	0	; () banked
 13255  01350C  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 13256  01350E  0E02               	movlw	2
 13257  013510  0100               	movlb	0	; () banked
 13258  013512  6F92               	movwf	SPI_Init@pMode& (0+255),b
 13259  013514  EC8D  F08B         	call	_SPI_Init	;wreg free
 13260                           
 13261                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 13262  013518  0E61               	movlw	low _SPI1
 13263  01351A  0100               	movlb	0	; () banked
 13264  01351C  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 13265  01351E  0E01               	movlw	high _SPI1
 13266  013520  0100               	movlb	0	; () banked
 13267  013522  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 13268  013524  ECE7  F0B6         	call	_SPI_MinSpeed	;wreg free
 13269                           
 13270                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 13271  013528  0E00               	movlw	0
 13272  01352A  0100               	movlb	0	; () banked
 13273  01352C  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 13274  01352E  0E00               	movlw	0
 13275  013530  6FA8               	movwf	HMI_Init@in& (0+255),b
 13276  013532                     l15355:
 13277                           
 13278                           ; BSR set to: 0
 13279  013532  0100               	movlb	0	; () banked
 13280  013534  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 13281  013536  E113               	bnz	l1153
 13282  013538  0E08               	movlw	8
 13283  01353A  0100               	movlb	0	; () banked
 13284  01353C  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 13285  01353E  B0D8               	btfsc	status,0,c
 13286  013540  0012               	return	
 13287                           
 13288                           ; BSR set to: 0
 13289                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 13290                           
 13291                           ; BSR set to: 0
 13292                           
 13293                           ; BSR set to: 0
 13294  013542  0E27               	movlw	low _HMIBoard
 13295  013544  0100               	movlb	0	; () banked
 13296  013546  25A8               	addwf	HMI_Init@in& (0+255),w,b
 13297  013548  6ED9               	movwf	fsr2l,c
 13298  01354A  0E01               	movlw	high _HMIBoard
 13299  01354C  0100               	movlb	0	; () banked
 13300  01354E  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 13301  013550  6EDA               	movwf	fsr2h,c
 13302  013552  0E00               	movlw	0
 13303  013554  6EDF               	movwf	indf2,c
 13304                           
 13305                           ; BSR set to: 0
 13306  013556  0100               	movlb	0	; () banked
 13307  013558  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 13308  01355A  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 13309  01355C  D7EA               	goto	l15355
 13310  01355E                     l1153:
 13311                           
 13312                           ; BSR set to: 0
 13313  01355E  0012               	return		;funcret
 13314  013560                     __end_of_HMI_Init:
 13315                           	opt stack 0
 13316                           tosu	equ	0xFFF
 13317                           tosh	equ	0xFFE
 13318                           tosl	equ	0xFFD
 13319                           pclath	equ	0xFFA
 13320                           tblptru	equ	0xFF8
 13321                           tblptrh	equ	0xFF7
 13322                           tblptrl	equ	0xFF6
 13323                           tablat	equ	0xFF5
 13324                           prodh	equ	0xFF4
 13325                           prodl	equ	0xFF3
 13326                           intcon	equ	0xFF2
 13327                           postinc0	equ	0xFEE
 13328                           wreg	equ	0xFE8
 13329                           indf1	equ	0xFE7
 13330                           postdec1	equ	0xFE5
 13331                           fsr1h	equ	0xFE2
 13332                           fsr1l	equ	0xFE1
 13333                           indf2	equ	0xFDF
 13334                           postinc2	equ	0xFDE
 13335                           postdec2	equ	0xFDD
 13336                           plusw2	equ	0xFDB
 13337                           fsr2h	equ	0xFDA
 13338                           fsr2l	equ	0xFD9
 13339                           status	equ	0xFD8
 13340                           
 13341 ;; *************** function _SPI_MinSpeed *****************
 13342 ;; Defined at:
 13343 ;;		line 190 in file "Library/SPI.c"
 13344 ;; Parameters:    Size  Location     Type
 13345 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 13346 ;;		 -> SPI1(11), 
 13347 ;; Auto vars:     Size  Location     Type
 13348 ;;		None
 13349 ;; Return value:  Size  Location     Type
 13350 ;;                  1    wreg      void 
 13351 ;; Registers used:
 13352 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13353 ;; Tracked objects:
 13354 ;;		On entry : 0/0
 13355 ;;		On exit  : 0/0
 13356 ;;		Unchanged: 0/0
 13357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13361 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13362 ;;Total ram usage:        2 bytes
 13363 ;; Hardware stack levels used:    1
 13364 ;; Hardware stack levels required when called:    9
 13365 ;; This function calls:
 13366 ;;		_Byte_SetBit
 13367 ;;		_Byte_SetQuad
 13368 ;; This function is called by:
 13369 ;;		_HMI_Init
 13370 ;; This function uses a non-reentrant model
 13371 ;;
 13372                           
 13373                           	psect	text67
 13374  016DCE                     __ptext67:
 13375                           	opt stack 0
 13376  016DCE                     _SPI_MinSpeed:
 13377                           	opt stack 19
 13378                           
 13379                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13380                           
 13381                           ; BSR set to: 0
 13382                           ;incstack = 0
 13383  016DCE  0100               	movlb	0	; () banked
 13384  016DD0  EE20 F006          	lfsr	2,6
 13385  016DD4  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 13386  016DD6  26D9               	addwf	fsr2l,f,c
 13387  016DD8  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 13388  016DDA  22DA               	addwfc	fsr2h,f,c
 13389  016DDC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13390  016DE0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13391  016DE4  0E05               	movlw	5
 13392  016DE6  0100               	movlb	0	; () banked
 13393  016DE8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13394  016DEA  0E00               	movlw	0
 13395  016DEC  0100               	movlb	0	; () banked
 13396  016DEE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13397  016DF0  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13398                           
 13399                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 13400  016DF4  0100               	movlb	0	; () banked
 13401  016DF6  EE20 F006          	lfsr	2,6
 13402  016DFA  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 13403  016DFC  26D9               	addwf	fsr2l,f,c
 13404  016DFE  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 13405  016E00  22DA               	addwfc	fsr2h,f,c
 13406  016E02  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 13407  016E06  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 13408  016E0A  0E00               	movlw	0
 13409  016E0C  0100               	movlb	0	; () banked
 13410  016E0E  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13411  016E10  0E02               	movlw	2
 13412  016E12  0100               	movlb	0	; () banked
 13413  016E14  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 13414  016E16  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 13415                           
 13416                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13417  016E1A  0100               	movlb	0	; () banked
 13418  016E1C  EE20 F006          	lfsr	2,6
 13419  016E20  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 13420  016E22  26D9               	addwf	fsr2l,f,c
 13421  016E24  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 13422  016E26  22DA               	addwfc	fsr2h,f,c
 13423  016E28  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13424  016E2C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13425  016E30  0E05               	movlw	5
 13426  016E32  0100               	movlb	0	; () banked
 13427  016E34  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13428  016E36  0E01               	movlw	1
 13429  016E38  0100               	movlb	0	; () banked
 13430  016E3A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13431  016E3C  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13432  016E40  0012               	return		;funcret
 13433  016E42                     __end_of_SPI_MinSpeed:
 13434                           	opt stack 0
 13435                           tosu	equ	0xFFF
 13436                           tosh	equ	0xFFE
 13437                           tosl	equ	0xFFD
 13438                           pclath	equ	0xFFA
 13439                           tblptru	equ	0xFF8
 13440                           tblptrh	equ	0xFF7
 13441                           tblptrl	equ	0xFF6
 13442                           tablat	equ	0xFF5
 13443                           prodh	equ	0xFF4
 13444                           prodl	equ	0xFF3
 13445                           intcon	equ	0xFF2
 13446                           postinc0	equ	0xFEE
 13447                           wreg	equ	0xFE8
 13448                           indf1	equ	0xFE7
 13449                           postdec1	equ	0xFE5
 13450                           fsr1h	equ	0xFE2
 13451                           fsr1l	equ	0xFE1
 13452                           indf2	equ	0xFDF
 13453                           postinc2	equ	0xFDE
 13454                           postdec2	equ	0xFDD
 13455                           plusw2	equ	0xFDB
 13456                           fsr2h	equ	0xFDA
 13457                           fsr2l	equ	0xFD9
 13458                           status	equ	0xFD8
 13459                           
 13460 ;; *************** function _SPI_Init *****************
 13461 ;; Defined at:
 13462 ;;		line 12 in file "Library/SPI.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;  pClock          4   45[BANK0 ] unsigned long 
 13465 ;;  pChannel        1   49[BANK0 ] enum E6744
 13466 ;;  pMode           1   50[BANK0 ] enum E6748
 13467 ;; Auto vars:     Size  Location     Type
 13468 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 13469 ;;		 -> SPI1(11), SPI2(11), 
 13470 ;; Return value:  Size  Location     Type
 13471 ;;                  1    wreg      void 
 13472 ;; Registers used:
 13473 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13474 ;; Tracked objects:
 13475 ;;		On entry : 0/0
 13476 ;;		On exit  : 0/0
 13477 ;;		Unchanged: 0/0
 13478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13479 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13482 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13483 ;;Total ram usage:        8 bytes
 13484 ;; Hardware stack levels used:    1
 13485 ;; Hardware stack levels required when called:   12
 13486 ;; This function calls:
 13487 ;;		_Byte_SetBit
 13488 ;;		_Byte_SetQuad
 13489 ;;		_Port_SetPinType
 13490 ;;		_SPI_DCS
 13491 ;;		_SPI_DisableISR
 13492 ;;		_Timer2_Init
 13493 ;; This function is called by:
 13494 ;;		_Configure_GPIOs
 13495 ;;		_HMI_Init
 13496 ;; This function uses a non-reentrant model
 13497 ;;
 13498                           
 13499                           	psect	text68
 13500  01171A                     __ptext68:
 13501                           	opt stack 0
 13502  01171A                     _SPI_Init:
 13503                           	opt stack 15
 13504                           
 13505                           ;SPI.c: 14: SPIPtr pInput;
 13506                           ;SPI.c: 16: switch (pChannel)
 13507                           
 13508                           ;incstack = 0
 13509  01171A  D00C               	goto	l597
 13510  01171C                     
 13511                           ;SPI.c: 19: pInput = &SPI1;
 13512  01171C  0E61               	movlw	low _SPI1
 13513  01171E  0100               	movlb	0	; () banked
 13514  011720  6F93               	movwf	SPI_Init@pInput& (0+255),b
 13515  011722  0E01               	movlw	high _SPI1
 13516  011724  D004               	goto	L6
 13517  011726                     
 13518                           ; BSR set to: 0
 13519                           ;SPI.c: 22: pInput = &SPI2;
 13520                           
 13521                           ; BSR set to: 0
 13522  011726  0E6C               	movlw	low _SPI2
 13523  011728  0100               	movlb	0	; () banked
 13524  01172A  6F93               	movwf	SPI_Init@pInput& (0+255),b
 13525  01172C  0E01               	movlw	high _SPI2
 13526  01172E                     L6:
 13527  01172E  0100               	movlb	0	; () banked
 13528  011730  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 13529                           
 13530                           ; BSR set to: 0
 13531                           ;SPI.c: 24: };
 13532                           
 13533                           ;SPI.c: 23: break;
 13534  011732  D008               	goto	l599
 13535  011734                     l597:
 13536                           
 13537                           ; BSR set to: 0
 13538  011734  0100               	movlb	0	; () banked
 13539  011736  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13540                           
 13541                           ; Switch size 1, requested type "space"
 13542                           ; Number of cases is 2, Range of values is 0 to 1
 13543                           ; switch strategies available:
 13544                           ; Name         Instructions Cycles
 13545                           ; simple_byte            7     4 (average)
 13546                           ;	Chosen strategy is simple_byte
 13547  011738  0A00               	xorlw	0	; case 0
 13548  01173A  B4D8               	btfsc	status,2,c
 13549  01173C  D7EF               	goto	l598
 13550  01173E  0A01               	xorlw	1	; case 1
 13551  011740  B4D8               	btfsc	status,2,c
 13552  011742  D7F1               	goto	l600
 13553  011744                     l599:
 13554                           
 13555                           ; BSR set to: 0
 13556                           ;SPI.c: 26: pInput->mChannel = pChannel;
 13557                           
 13558                           ; BSR set to: 0
 13559  011744  0100               	movlb	0	; () banked
 13560  011746  EE20 F002          	lfsr	2,2
 13561  01174A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13562  01174C  26D9               	addwf	fsr2l,f,c
 13563  01174E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13564  011750  22DA               	addwfc	fsr2h,f,c
 13565  011752  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 13566                           
 13567                           ;SPI.c: 35: switch (pChannel)
 13568  011756  D0B1               	goto	l601
 13569  011758                     
 13570                           ; BSR set to: 0
 13571                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 13572                           
 13573                           ; BSR set to: 0
 13574  011758  0EB3               	movlw	low _PortC
 13575  01175A  0100               	movlb	0	; () banked
 13576  01175C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13577  01175E  0E01               	movlw	high _PortC
 13578  011760  0100               	movlb	0	; () banked
 13579  011762  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13580  011764  0E02               	movlw	2
 13581  011766  0100               	movlb	0	; () banked
 13582  011768  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13583  01176A  0E03               	movlw	3
 13584  01176C  0100               	movlb	0	; () banked
 13585  01176E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13586  011770  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13587                           
 13588                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 13589  011774  0EB3               	movlw	low _PortC
 13590  011776  0100               	movlb	0	; () banked
 13591  011778  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13592  01177A  0E01               	movlw	high _PortC
 13593  01177C  0100               	movlb	0	; () banked
 13594  01177E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13595  011780  0E03               	movlw	3
 13596  011782  0100               	movlb	0	; () banked
 13597  011784  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13598  011786  0E03               	movlw	3
 13599  011788  0100               	movlb	0	; () banked
 13600  01178A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13601  01178C  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13602                           
 13603                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 13604  011790  0EB3               	movlw	low _PortC
 13605  011792  0100               	movlb	0	; () banked
 13606  011794  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13607  011796  0E01               	movlw	high _PortC
 13608  011798  0100               	movlb	0	; () banked
 13609  01179A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13610  01179C  0E05               	movlw	5
 13611  01179E  0100               	movlb	0	; () banked
 13612  0117A0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13613  0117A2  0E03               	movlw	3
 13614  0117A4  0100               	movlb	0	; () banked
 13615  0117A6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13616  0117A8  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13617                           
 13618                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 13619  0117AC  0EB3               	movlw	low _PortC
 13620  0117AE  0100               	movlb	0	; () banked
 13621  0117B0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13622  0117B2  0E01               	movlw	high _PortC
 13623  0117B4  0100               	movlb	0	; () banked
 13624  0117B6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13625  0117B8  0E04               	movlw	4
 13626  0117BA  0100               	movlb	0	; () banked
 13627  0117BC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13628  0117BE  0E00               	movlw	0
 13629  0117C0  0100               	movlb	0	; () banked
 13630  0117C2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13631  0117C4  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13632                           
 13633                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 13634  0117C8  0100               	movlb	0	; () banked
 13635  0117CA  EE20 F003          	lfsr	2,3
 13636  0117CE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13637  0117D0  26D9               	addwf	fsr2l,f,c
 13638  0117D2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13639  0117D4  22DA               	addwfc	fsr2h,f,c
 13640  0117D6  0EC7               	movlw	199
 13641  0117D8  6EDE               	movwf	postinc2,c
 13642  0117DA  0E0F               	movlw	15
 13643  0117DC  6EDD               	movwf	postdec2,c
 13644                           
 13645                           ; BSR set to: 0
 13646                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 13647  0117DE  0100               	movlb	0	; () banked
 13648  0117E0  EE20 F006          	lfsr	2,6
 13649  0117E4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13650  0117E6  26D9               	addwf	fsr2l,f,c
 13651  0117E8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13652  0117EA  22DA               	addwfc	fsr2h,f,c
 13653  0117EC  0EC6               	movlw	198
 13654  0117EE  6EDE               	movwf	postinc2,c
 13655  0117F0  0E0F               	movlw	15
 13656  0117F2  6EDD               	movwf	postdec2,c
 13657                           
 13658                           ; BSR set to: 0
 13659                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 13660  0117F4  0100               	movlb	0	; () banked
 13661  0117F6  EE20 F009          	lfsr	2,9
 13662  0117FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13663  0117FC  26D9               	addwf	fsr2l,f,c
 13664  0117FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13665  011800  22DA               	addwfc	fsr2h,f,c
 13666  011802  0EC9               	movlw	201
 13667  011804  D056               	goto	L7
 13668  011806                     
 13669                           ; BSR set to: 0
 13670                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 13671                           
 13672                           ; BSR set to: 0
 13673  011806  0E9F               	movlw	low _PortD
 13674  011808  0100               	movlb	0	; () banked
 13675  01180A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13676  01180C  0E01               	movlw	high _PortD
 13677  01180E  0100               	movlb	0	; () banked
 13678  011810  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13679  011812  0E07               	movlw	7
 13680  011814  0100               	movlb	0	; () banked
 13681  011816  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13682  011818  0E03               	movlw	3
 13683  01181A  0100               	movlb	0	; () banked
 13684  01181C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13685  01181E  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13686                           
 13687                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 13688  011822  0E9F               	movlw	low _PortD
 13689  011824  0100               	movlb	0	; () banked
 13690  011826  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13691  011828  0E01               	movlw	high _PortD
 13692  01182A  0100               	movlb	0	; () banked
 13693  01182C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13694  01182E  0E06               	movlw	6
 13695  011830  0100               	movlb	0	; () banked
 13696  011832  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13697  011834  0E03               	movlw	3
 13698  011836  0100               	movlb	0	; () banked
 13699  011838  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13700  01183A  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13701                           
 13702                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 13703  01183E  0E9F               	movlw	low _PortD
 13704  011840  0100               	movlb	0	; () banked
 13705  011842  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13706  011844  0E01               	movlw	high _PortD
 13707  011846  0100               	movlb	0	; () banked
 13708  011848  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13709  01184A  0E04               	movlw	4
 13710  01184C  0100               	movlb	0	; () banked
 13711  01184E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13712  011850  0E03               	movlw	3
 13713  011852  0100               	movlb	0	; () banked
 13714  011854  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13715  011856  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13716                           
 13717                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 13718  01185A  0E9F               	movlw	low _PortD
 13719  01185C  0100               	movlb	0	; () banked
 13720  01185E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13721  011860  0E01               	movlw	high _PortD
 13722  011862  0100               	movlb	0	; () banked
 13723  011864  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13724  011866  0E05               	movlw	5
 13725  011868  0100               	movlb	0	; () banked
 13726  01186A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13727  01186C  0E00               	movlw	0
 13728  01186E  0100               	movlb	0	; () banked
 13729  011870  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13730  011872  EC97  F09B         	call	_Port_SetPinType	;wreg free
 13731                           
 13732                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 13733  011876  0100               	movlb	0	; () banked
 13734  011878  EE20 F003          	lfsr	2,3
 13735  01187C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13736  01187E  26D9               	addwf	fsr2l,f,c
 13737  011880  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13738  011882  22DA               	addwfc	fsr2h,f,c
 13739  011884  0E6D               	movlw	109
 13740  011886  6EDE               	movwf	postinc2,c
 13741  011888  0E0F               	movlw	15
 13742  01188A  6EDD               	movwf	postdec2,c
 13743                           
 13744                           ; BSR set to: 0
 13745                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 13746  01188C  0100               	movlb	0	; () banked
 13747  01188E  EE20 F006          	lfsr	2,6
 13748  011892  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13749  011894  26D9               	addwf	fsr2l,f,c
 13750  011896  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13751  011898  22DA               	addwfc	fsr2h,f,c
 13752  01189A  0E6C               	movlw	108
 13753  01189C  6EDE               	movwf	postinc2,c
 13754  01189E  0E0F               	movlw	15
 13755  0118A0  6EDD               	movwf	postdec2,c
 13756                           
 13757                           ; BSR set to: 0
 13758                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 13759  0118A2  0100               	movlb	0	; () banked
 13760  0118A4  EE20 F009          	lfsr	2,9
 13761  0118A8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13762  0118AA  26D9               	addwf	fsr2l,f,c
 13763  0118AC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13764  0118AE  22DA               	addwfc	fsr2h,f,c
 13765  0118B0  0E6F               	movlw	111
 13766  0118B2                     L7:
 13767  0118B2  6EDE               	movwf	postinc2,c
 13768  0118B4  0E0F               	movlw	15
 13769  0118B6  6EDD               	movwf	postdec2,c
 13770                           
 13771                           ;SPI.c: 68: break;
 13772  0118B8  D009               	goto	l603
 13773  0118BA                     l601:
 13774                           
 13775                           ; BSR set to: 0
 13776                           
 13777                           ; BSR set to: 0
 13778  0118BA  0100               	movlb	0	; () banked
 13779  0118BC  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 13780                           
 13781                           ; Switch size 1, requested type "space"
 13782                           ; Number of cases is 2, Range of values is 0 to 1
 13783                           ; switch strategies available:
 13784                           ; Name         Instructions Cycles
 13785                           ; simple_byte            7     4 (average)
 13786                           ;	Chosen strategy is simple_byte
 13787  0118BE  0A00               	xorlw	0	; case 0
 13788  0118C0  B4D8               	btfsc	status,2,c
 13789  0118C2  D74A               	goto	l602
 13790  0118C4  0A01               	xorlw	1	; case 1
 13791  0118C6  A4D8               	btfss	status,2,c
 13792  0118C8  0012               	return	
 13793  0118CA  D79D               	goto	l604
 13794  0118CC                     l603:
 13795                           
 13796                           ; BSR set to: 0
 13797                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13798                           
 13799                           ; BSR set to: 0
 13800  0118CC  0100               	movlb	0	; () banked
 13801  0118CE  EE20 F006          	lfsr	2,6
 13802  0118D2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13803  0118D4  26D9               	addwf	fsr2l,f,c
 13804  0118D6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13805  0118D8  22DA               	addwfc	fsr2h,f,c
 13806  0118DA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13807  0118DE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13808  0118E2  0E05               	movlw	5
 13809  0118E4  0100               	movlb	0	; () banked
 13810  0118E6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13811  0118E8  0E00               	movlw	0
 13812  0118EA  0100               	movlb	0	; () banked
 13813  0118EC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13814  0118EE  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13815                           
 13816                           ;SPI.c: 77: switch(pMode)
 13817  0118F2  D09C               	goto	l607
 13818  0118F4                     
 13819                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13820  0118F4  0100               	movlb	0	; () banked
 13821  0118F6  EE20 F006          	lfsr	2,6
 13822  0118FA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13823  0118FC  26D9               	addwf	fsr2l,f,c
 13824  0118FE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13825  011900  22DA               	addwfc	fsr2h,f,c
 13826  011902  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13827  011906  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13828  01190A  0E04               	movlw	4
 13829  01190C  0100               	movlb	0	; () banked
 13830  01190E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13831  011910  0E00               	movlw	0
 13832  011912  0100               	movlb	0	; () banked
 13833  011914  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13834  011916  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13835                           
 13836                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13837  01191A  0100               	movlb	0	; () banked
 13838  01191C  EE20 F003          	lfsr	2,3
 13839  011920  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13840  011922  26D9               	addwf	fsr2l,f,c
 13841  011924  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13842  011926  22DA               	addwfc	fsr2h,f,c
 13843  011928  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13844  01192C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13845  011930  0E06               	movlw	6
 13846  011932  0100               	movlb	0	; () banked
 13847  011934  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13848  011936  0E00               	movlw	0
 13849  011938  0100               	movlb	0	; () banked
 13850  01193A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13851  01193C  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13852                           
 13853                           ;SPI.c: 82: break;
 13854  011940  D084               	goto	l609
 13855  011942                     
 13856                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13857  011942  0100               	movlb	0	; () banked
 13858  011944  EE20 F006          	lfsr	2,6
 13859  011948  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13860  01194A  26D9               	addwf	fsr2l,f,c
 13861  01194C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13862  01194E  22DA               	addwfc	fsr2h,f,c
 13863  011950  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13864  011954  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13865  011958  0E04               	movlw	4
 13866  01195A  0100               	movlb	0	; () banked
 13867  01195C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13868  01195E  0E00               	movlw	0
 13869  011960  0100               	movlb	0	; () banked
 13870  011962  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13871  011964  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13872                           
 13873                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13874  011968  0100               	movlb	0	; () banked
 13875  01196A  EE20 F003          	lfsr	2,3
 13876  01196E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13877  011970  26D9               	addwf	fsr2l,f,c
 13878  011972  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13879  011974  22DA               	addwfc	fsr2h,f,c
 13880  011976  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13881  01197A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13882  01197E  0E06               	movlw	6
 13883  011980  0100               	movlb	0	; () banked
 13884  011982  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13885  011984  0E01               	movlw	1
 13886  011986  0100               	movlb	0	; () banked
 13887  011988  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13888  01198A  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13889                           
 13890                           ;SPI.c: 86: break;
 13891  01198E  D05D               	goto	l609
 13892  011990                     
 13893                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13894  011990  0100               	movlb	0	; () banked
 13895  011992  EE20 F006          	lfsr	2,6
 13896  011996  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13897  011998  26D9               	addwf	fsr2l,f,c
 13898  01199A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13899  01199C  22DA               	addwfc	fsr2h,f,c
 13900  01199E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13901  0119A2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13902  0119A6  0E04               	movlw	4
 13903  0119A8  0100               	movlb	0	; () banked
 13904  0119AA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13905  0119AC  0E01               	movlw	1
 13906  0119AE  0100               	movlb	0	; () banked
 13907  0119B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13908  0119B2  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13909                           
 13910                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13911  0119B6  0100               	movlb	0	; () banked
 13912  0119B8  EE20 F003          	lfsr	2,3
 13913  0119BC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13914  0119BE  26D9               	addwf	fsr2l,f,c
 13915  0119C0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13916  0119C2  22DA               	addwfc	fsr2h,f,c
 13917  0119C4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13918  0119C8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13919  0119CC  0E06               	movlw	6
 13920  0119CE  0100               	movlb	0	; () banked
 13921  0119D0  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13922  0119D2  0E00               	movlw	0
 13923  0119D4  0100               	movlb	0	; () banked
 13924  0119D6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13925  0119D8  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13926                           
 13927                           ;SPI.c: 90: break;
 13928  0119DC  D036               	goto	l609
 13929  0119DE                     
 13930                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13931  0119DE  0100               	movlb	0	; () banked
 13932  0119E0  EE20 F006          	lfsr	2,6
 13933  0119E4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13934  0119E6  26D9               	addwf	fsr2l,f,c
 13935  0119E8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13936  0119EA  22DA               	addwfc	fsr2h,f,c
 13937  0119EC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13938  0119F0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13939  0119F4  0E04               	movlw	4
 13940  0119F6  0100               	movlb	0	; () banked
 13941  0119F8  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13942  0119FA  0E01               	movlw	1
 13943  0119FC  0100               	movlb	0	; () banked
 13944  0119FE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13945  011A00  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13946                           
 13947                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13948  011A04  0100               	movlb	0	; () banked
 13949  011A06  EE20 F003          	lfsr	2,3
 13950  011A0A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13951  011A0C  26D9               	addwf	fsr2l,f,c
 13952  011A0E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13953  011A10  22DA               	addwfc	fsr2h,f,c
 13954  011A12  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 13955  011A16  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 13956  011A1A  0E06               	movlw	6
 13957  011A1C  0100               	movlb	0	; () banked
 13958  011A1E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 13959  011A20  0E01               	movlw	1
 13960  011A22  0100               	movlb	0	; () banked
 13961  011A24  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 13962  011A26  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 13963                           
 13964                           ;SPI.c: 94: break;
 13965  011A2A  D00F               	goto	l609
 13966  011A2C                     l607:
 13967  011A2C  0100               	movlb	0	; () banked
 13968  011A2E  5192               	movf	SPI_Init@pMode& (0+255),w,b
 13969                           
 13970                           ; Switch size 1, requested type "space"
 13971                           ; Number of cases is 4, Range of values is 0 to 3
 13972                           ; switch strategies available:
 13973                           ; Name         Instructions Cycles
 13974                           ; simple_byte           13     7 (average)
 13975                           ;	Chosen strategy is simple_byte
 13976  011A30  0A00               	xorlw	0	; case 0
 13977  011A32  B4D8               	btfsc	status,2,c
 13978  011A34  D75F               	goto	l608
 13979  011A36  0A01               	xorlw	1	; case 1
 13980  011A38  B4D8               	btfsc	status,2,c
 13981  011A3A  D783               	goto	l610
 13982  011A3C  0A03               	xorlw	3	; case 2
 13983  011A3E  B4D8               	btfsc	status,2,c
 13984  011A40  D7A7               	goto	l611
 13985  011A42  0A01               	xorlw	1	; case 3
 13986  011A44  A4D8               	btfss	status,2,c
 13987  011A46  0012               	return	
 13988  011A48  D7CA               	goto	l612
 13989  011A4A                     l609:
 13990                           
 13991                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 13992                           
 13993                           ; BSR set to: 0
 13994  011A4A  0100               	movlb	0	; () banked
 13995  011A4C  EE20 F006          	lfsr	2,6
 13996  011A50  5193               	movf	SPI_Init@pInput& (0+255),w,b
 13997  011A52  26D9               	addwf	fsr2l,f,c
 13998  011A54  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13999  011A56  22DA               	addwfc	fsr2h,f,c
 14000  011A58  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14001  011A5C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14002  011A60  0E07               	movlw	7
 14003  011A62  0100               	movlb	0	; () banked
 14004  011A64  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14005  011A66  0E00               	movlw	0
 14006  011A68  0100               	movlb	0	; () banked
 14007  011A6A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14008  011A6C  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 14009                           
 14010                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 14011  011A70  0100               	movlb	0	; () banked
 14012  011A72  EE20 F006          	lfsr	2,6
 14013  011A76  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14014  011A78  26D9               	addwf	fsr2l,f,c
 14015  011A7A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14016  011A7C  22DA               	addwfc	fsr2h,f,c
 14017  011A7E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14018  011A82  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14019  011A86  0E06               	movlw	6
 14020  011A88  0100               	movlb	0	; () banked
 14021  011A8A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14022  011A8C  0E00               	movlw	0
 14023  011A8E  0100               	movlb	0	; () banked
 14024  011A90  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14025  011A92  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 14026                           
 14027                           ;SPI.c: 106: Timer2_Init(pClock);
 14028  011A96  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 14029  011A9A  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 14030  011A9E  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 14031  011AA2  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 14032  011AA6  EC20  F0A4         	call	_Timer2_Init	;wreg free
 14033                           
 14034                           ;SPI.c: 112: SPI_DisableISR(pInput);
 14035  011AAA  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 14036  011AAE  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 14037  011AB2  EC77  F0BE         	call	_SPI_DisableISR	;wreg free
 14038                           
 14039                           ;SPI.c: 116: switch (pChannel)
 14040  011AB6  D004               	goto	l614
 14041  011AB8                     l615:
 14042                           
 14043                           ; BSR set to: 0
 14044  011AB8  869F               	bsf	3999,3,c	;volatile
 14045  011ABA  D00B               	goto	l616
 14046  011ABC                     l617:
 14047                           
 14048                           ; BSR set to: 0
 14049  011ABC  8EA5               	bsf	4005,7,c	;volatile
 14050  011ABE  D009               	goto	l616
 14051  011AC0                     l614:
 14052                           
 14053                           ; BSR set to: 0
 14054  011AC0  0100               	movlb	0	; () banked
 14055  011AC2  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 14056                           
 14057                           ; Switch size 1, requested type "space"
 14058                           ; Number of cases is 2, Range of values is 0 to 1
 14059                           ; switch strategies available:
 14060                           ; Name         Instructions Cycles
 14061                           ; simple_byte            7     4 (average)
 14062                           ;	Chosen strategy is simple_byte
 14063  011AC4  0A00               	xorlw	0	; case 0
 14064  011AC6  B4D8               	btfsc	status,2,c
 14065  011AC8  D7F7               	goto	l615
 14066  011ACA  0A01               	xorlw	1	; case 1
 14067  011ACC  A4D8               	btfss	status,2,c
 14068  011ACE  0012               	return	
 14069  011AD0  D7F5               	goto	l617
 14070  011AD2                     l616:
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;SPI.c: 124: SPI_DCS(pInput);
 14074                           
 14075                           ; BSR set to: 0
 14076  011AD2  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 14077  011AD6  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 14078  011ADA  ECEF  F0BD         	call	_SPI_DCS	;wreg free
 14079                           
 14080                           ;SPI.c: 126: pInput->mBusy = 0;
 14081  011ADE  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 14082  011AE2  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 14083  011AE6  0E00               	movlw	0
 14084  011AE8  6EDF               	movwf	indf2,c
 14085                           
 14086                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 14087  011AEA  0100               	movlb	0	; () banked
 14088  011AEC  EE20 F006          	lfsr	2,6
 14089  011AF0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14090  011AF2  26D9               	addwf	fsr2l,f,c
 14091  011AF4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14092  011AF6  22DA               	addwfc	fsr2h,f,c
 14093  011AF8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 14094  011AFC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 14095  011B00  0E00               	movlw	0
 14096  011B02  0100               	movlb	0	; () banked
 14097  011B04  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14098  011B06  0E03               	movlw	3
 14099  011B08  0100               	movlb	0	; () banked
 14100  011B0A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 14101  011B0C  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 14102                           
 14103                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14104  011B10  0100               	movlb	0	; () banked
 14105  011B12  EE20 F006          	lfsr	2,6
 14106  011B16  5193               	movf	SPI_Init@pInput& (0+255),w,b
 14107  011B18  26D9               	addwf	fsr2l,f,c
 14108  011B1A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 14109  011B1C  22DA               	addwfc	fsr2h,f,c
 14110  011B1E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14111  011B22  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14112  011B26  0E05               	movlw	5
 14113  011B28  0100               	movlb	0	; () banked
 14114  011B2A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14115  011B2C  0E01               	movlw	1
 14116  011B2E  0100               	movlb	0	; () banked
 14117  011B30  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14118  011B32  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 14119  011B36  0012               	return		;funcret
 14120  011B38                     __end_of_SPI_Init:
 14121                           	opt stack 0
 14122                           tosu	equ	0xFFF
 14123                           tosh	equ	0xFFE
 14124                           tosl	equ	0xFFD
 14125                           pclath	equ	0xFFA
 14126                           tblptru	equ	0xFF8
 14127                           tblptrh	equ	0xFF7
 14128                           tblptrl	equ	0xFF6
 14129                           tablat	equ	0xFF5
 14130                           prodh	equ	0xFF4
 14131                           prodl	equ	0xFF3
 14132                           intcon	equ	0xFF2
 14133                           postinc0	equ	0xFEE
 14134                           wreg	equ	0xFE8
 14135                           indf1	equ	0xFE7
 14136                           postdec1	equ	0xFE5
 14137                           fsr1h	equ	0xFE2
 14138                           fsr1l	equ	0xFE1
 14139                           indf2	equ	0xFDF
 14140                           postinc2	equ	0xFDE
 14141                           postdec2	equ	0xFDD
 14142                           plusw2	equ	0xFDB
 14143                           fsr2h	equ	0xFDA
 14144                           fsr2l	equ	0xFD9
 14145                           status	equ	0xFD8
 14146                           
 14147 ;; *************** function _Timer2_Init *****************
 14148 ;; Defined at:
 14149 ;;		line 10 in file "Library/Timer2.c"
 14150 ;; Parameters:    Size  Location     Type
 14151 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14152 ;; Auto vars:     Size  Location     Type
 14153 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 14154 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 14155 ;;  RDIV            4   18[BANK0 ] unsigned long 
 14156 ;; Return value:  Size  Location     Type
 14157 ;;                  1    wreg      void 
 14158 ;; Registers used:
 14159 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14165 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14166 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14167 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14168 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14169 ;;Total ram usage:       17 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    8
 14172 ;; This function calls:
 14173 ;;		_Timer2_Clear
 14174 ;;		___lldiv
 14175 ;; This function is called by:
 14176 ;;		_SPI_Init
 14177 ;; This function uses a non-reentrant model
 14178 ;;
 14179                           
 14180                           	psect	text69
 14181  014840                     __ptext69:
 14182                           	opt stack 0
 14183  014840                     _Timer2_Init:
 14184                           	opt stack 18
 14185                           
 14186                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 14187                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 14188                           ;Timer2.c: 14: static UINT8 PRE = 0;
 14189                           ;Timer2.c: 15: static UINT32 DIV = 0;
 14190                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 14191                           
 14192                           ;incstack = 0
 14193  014840  0E00               	movlw	0
 14194  014842  0100               	movlb	0	; () banked
 14195  014844  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 14196  014846  0E6C               	movlw	108
 14197  014848  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 14198  01484A  0EDC               	movlw	220
 14199  01484C  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 14200  01484E  0E02               	movlw	2
 14201  014850  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 14205                           ;Timer2.c: 20: pFrequency *= 2;
 14206  014852  0100               	movlb	0	; () banked
 14207  014854  90D8               	bcf	status,0,c
 14208  014856  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 14209  014858  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 14210  01485A  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 14211  01485C  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 14212                           
 14213                           ; BSR set to: 0
 14214                           ;Timer2.c: 23: pCPUClock /= 4;
 14215  01485E  0E02               	movlw	2
 14216  014860  0100               	movlb	0	; () banked
 14217  014862  6F71               	movwf	??_Timer2_Init& (0+255),b
 14218  014864                     u10785:
 14219  014864  90D8               	bcf	status,0,c
 14220  014866  0100               	movlb	0	; () banked
 14221  014868  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 14222  01486A  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 14223  01486C  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 14224  01486E  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 14225  014870  0100               	movlb	0	; () banked
 14226  014872  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 14227  014874  D7F7               	goto	u10785
 14228                           
 14229                           ; BSR set to: 0
 14230                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 14231  014876  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 14232  01487A  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 14233  01487E  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 14234  014882  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 14235  014886  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 14236  01488A  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 14237  01488E  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 14238  014892  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 14239  014896  EC59  F0AD         	call	___lldiv	;wreg free
 14240  01489A  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 14241  01489E  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 14242  0148A2  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 14243  0148A6  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 14244                           
 14245                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 14246  0148AA  D010               	goto	l1828
 14247  0148AC                     l13305:
 14248                           
 14249                           ;Timer2.c: 28: {
 14250                           ;Timer2.c: 29: RDIV = 0;
 14251  0148AC  0E00               	movlw	0
 14252  0148AE  0100               	movlb	0	; () banked
 14253  0148B0  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 14254  0148B2  0E00               	movlw	0
 14255  0148B4  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 14256  0148B6  0E00               	movlw	0
 14257  0148B8  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 14258  0148BA  0E00               	movlw	0
 14259  0148BC  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;Timer2.c: 30: INDEX ++;
 14263  0148BE  0100               	movlb	0	; () banked
 14264  0148C0  2BF6               	incf	Timer2_Init@INDEX& (0+255),f,b
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;Timer2.c: 31: if (INDEX >= 3)
 14268  0148C2  0E02               	movlw	2
 14269  0148C4  0100               	movlb	0	; () banked
 14270  0148C6  65F6               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 14271  0148C8  D001               	goto	l1828
 14272  0148CA  D026               	goto	u10800
 14273  0148CC                     l1828:
 14274                           
 14275                           ; BSR set to: 0
 14276                           
 14277                           ; BSR set to: 0
 14278  0148CC  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 14279  0148D0  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 14280  0148D4  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 14281  0148D8  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 14282  0148DC  0100               	movlb	0	; () banked
 14283  0148DE  51F6               	movf	Timer2_Init@INDEX& (0+255),w,b
 14284  0148E0  0D01               	mullw	1
 14285  0148E2  0ECC               	movlw	low Timer2_Init@PRESCALE
 14286  0148E4  24F3               	addwf	prodl,w,c
 14287  0148E6  6EF6               	movwf	tblptrl,c
 14288  0148E8  0EFC               	movlw	high Timer2_Init@PRESCALE
 14289  0148EA  20F4               	addwfc	prodh,w,c
 14290  0148EC  6EF7               	movwf	tblptrh,c
 14291  0148EE                     	if	1	;There are 3 active tblptr bytes
 14292  0148EE  6AF8               	clrf	tblptru,c
 14293  0148F0  0E00               	movlw	low (__mediumconst shr (0+16))
 14294  0148F2  22F8               	addwfc	tblptru,f,c
 14295  0148F4                     	endif
 14296  0148F4  0008               	tblrd		*
 14297  0148F6  50F5               	movf	tablat,w,c
 14298  0148F8  0100               	movlb	0	; () banked
 14299  0148FA  6F64               	movwf	___lldiv@divisor& (0+255),b
 14300  0148FC  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 14301  0148FE  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 14302  014900  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 14303  014902  EC59  F0AD         	call	___lldiv	;wreg free
 14304  014906  0100               	movlb	0	; () banked
 14305  014908  5163               	movf	(?___lldiv+3)& (0+255),w,b
 14306  01490A  0100               	movlb	0	; () banked
 14307  01490C  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 14308  01490E  E1CE               	bnz	l13305
 14309  014910  0100               	movlb	0	; () banked
 14310  014912  0561               	decf	(?___lldiv+1)& (0+255),w,b
 14311  014914  B0D8               	btfsc	status,0,c
 14312  014916  D7CA               	goto	l1827
 14313  014918                     u10800:
 14314                           
 14315                           ; BSR set to: 0
 14316                           ;Timer2.c: 33: }
 14317                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 14318                           
 14319                           ; BSR set to: 0
 14320  014918  50CA               	movf	4042,w,c	;volatile
 14321  01491A  0100               	movlb	0	; () banked
 14322  01491C  19F6               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 14323  01491E  0BFC               	andlw	-4
 14324  014920  19F6               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 14325  014922  6ECA               	movwf	4042,c	;volatile
 14326                           
 14327                           ; BSR set to: 0
 14328                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 14329  014924  84CA               	bsf	4042,2,c	;volatile
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;Timer2.c: 44: Timer2_Clear();
 14333  014926  EC2D  F0C0         	call	_Timer2_Clear	;wreg free
 14334                           
 14335                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 14336  01492A  0100               	movlb	0	; () banked
 14337  01492C  51F6               	movf	Timer2_Init@INDEX& (0+255),w,b
 14338  01492E  0D01               	mullw	1
 14339  014930  0ECC               	movlw	low Timer2_Init@PRESCALE
 14340  014932  24F3               	addwf	prodl,w,c
 14341  014934  6EF6               	movwf	tblptrl,c
 14342  014936  0EFC               	movlw	high Timer2_Init@PRESCALE
 14343  014938  20F4               	addwfc	prodh,w,c
 14344  01493A  6EF7               	movwf	tblptrh,c
 14345  01493C                     	if	1	;There are 3 active tblptr bytes
 14346  01493C  6AF8               	clrf	tblptru,c
 14347  01493E  0E00               	movlw	low (__mediumconst shr (0+16))
 14348  014940  22F8               	addwfc	tblptru,f,c
 14349  014942                     	endif
 14350  014942  0008               	tblrd		*
 14351  014944  CFF5 F0F5          	movff	tablat,Timer2_Init@PRE
 14352                           
 14353                           ; BSR set to: 0
 14354                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 14355  014948  0EFF               	movlw	255
 14356  01494A  0100               	movlb	0	; () banked
 14357  01494C  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 14358  01494E  0101               	movlb	1	; () banked
 14359  014950  6F04               	movwf	Timer2_Init@DIV& (0+255),b
 14360  014952  0EFF               	movlw	255
 14361  014954  0100               	movlb	0	; () banked
 14362  014956  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 14363  014958  0101               	movlb	1	; () banked
 14364  01495A  6F05               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 14365  01495C  0EFF               	movlw	255
 14366  01495E  0100               	movlb	0	; () banked
 14367  014960  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 14368  014962  0101               	movlb	1	; () banked
 14369  014964  6F06               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 14370  014966  0EFF               	movlw	255
 14371  014968  0100               	movlb	0	; () banked
 14372  01496A  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 14373  01496C  0101               	movlb	1	; () banked
 14374  01496E  6F07               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 14375                           
 14376                           ; BSR set to: 1
 14377                           ;Timer2.c: 48: INDEX = DIV/PRE;
 14378  014970  C104  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 14379  014974  C105  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 14380  014978  C106  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 14381  01497C  C107  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 14382  014980  0100               	movlb	0	; () banked
 14383  014982  51F5               	movf	Timer2_Init@PRE& (0+255),w,b
 14384  014984  0100               	movlb	0	; () banked
 14385  014986  6F64               	movwf	___lldiv@divisor& (0+255),b
 14386  014988  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 14387  01498A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 14388  01498C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 14389  01498E  EC59  F0AD         	call	___lldiv	;wreg free
 14390  014992  0100               	movlb	0	; () banked
 14391  014994  5160               	movf	?___lldiv& (0+255),w,b
 14392  014996  0100               	movlb	0	; () banked
 14393  014998  6FF6               	movwf	Timer2_Init@INDEX& (0+255),b
 14394                           
 14395                           ; BSR set to: 0
 14396                           ;Timer2.c: 49: PR2 = INDEX;
 14397  01499A  C0F6  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 14398                           
 14399                           ; BSR set to: 0
 14400  01499E  0012               	return		;funcret
 14401  0149A0                     __end_of_Timer2_Init:
 14402                           	opt stack 0
 14403                           tosu	equ	0xFFF
 14404                           tosh	equ	0xFFE
 14405                           tosl	equ	0xFFD
 14406                           pclath	equ	0xFFA
 14407                           tblptru	equ	0xFF8
 14408                           tblptrh	equ	0xFF7
 14409                           tblptrl	equ	0xFF6
 14410                           tablat	equ	0xFF5
 14411                           prodh	equ	0xFF4
 14412                           prodl	equ	0xFF3
 14413                           intcon	equ	0xFF2
 14414                           postinc0	equ	0xFEE
 14415                           wreg	equ	0xFE8
 14416                           indf1	equ	0xFE7
 14417                           postdec1	equ	0xFE5
 14418                           fsr1h	equ	0xFE2
 14419                           fsr1l	equ	0xFE1
 14420                           indf2	equ	0xFDF
 14421                           postinc2	equ	0xFDE
 14422                           postdec2	equ	0xFDD
 14423                           plusw2	equ	0xFDB
 14424                           fsr2h	equ	0xFDA
 14425                           fsr2l	equ	0xFD9
 14426                           status	equ	0xFD8
 14427                           
 14428 ;; *************** function _Timer2_Clear *****************
 14429 ;; Defined at:
 14430 ;;		line 3 in file "Library/Timer2.c"
 14431 ;; Parameters:    Size  Location     Type
 14432 ;;		None
 14433 ;; Auto vars:     Size  Location     Type
 14434 ;;		None
 14435 ;; Return value:  Size  Location     Type
 14436 ;;                  1    wreg      void 
 14437 ;; Registers used:
 14438 ;;		None
 14439 ;; Tracked objects:
 14440 ;;		On entry : 0/0
 14441 ;;		On exit  : 0/0
 14442 ;;		Unchanged: 0/0
 14443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14444 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14447 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14448 ;;Total ram usage:        0 bytes
 14449 ;; Hardware stack levels used:    1
 14450 ;; Hardware stack levels required when called:    7
 14451 ;; This function calls:
 14452 ;;		Nothing
 14453 ;; This function is called by:
 14454 ;;		_Timer2_Init
 14455 ;; This function uses a non-reentrant model
 14456 ;;
 14457                           
 14458                           	psect	text70
 14459  01805A                     __ptext70:
 14460                           	opt stack 0
 14461  01805A                     _Timer2_Clear:
 14462                           	opt stack 18
 14463                           
 14464                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 14465                           
 14466                           ; BSR set to: 0
 14467                           ;incstack = 0
 14468  01805A  929E               	bcf	3998,1,c	;volatile
 14469                           
 14470                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 14471  01805C  929D               	bcf	3997,1,c	;volatile
 14472                           
 14473                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 14474  01805E  929F               	bcf	3999,1,c	;volatile
 14475  018060  0012               	return		;funcret
 14476  018062                     __end_of_Timer2_Clear:
 14477                           	opt stack 0
 14478                           tosu	equ	0xFFF
 14479                           tosh	equ	0xFFE
 14480                           tosl	equ	0xFFD
 14481                           pclath	equ	0xFFA
 14482                           tblptru	equ	0xFF8
 14483                           tblptrh	equ	0xFF7
 14484                           tblptrl	equ	0xFF6
 14485                           tablat	equ	0xFF5
 14486                           prodh	equ	0xFF4
 14487                           prodl	equ	0xFF3
 14488                           intcon	equ	0xFF2
 14489                           postinc0	equ	0xFEE
 14490                           wreg	equ	0xFE8
 14491                           indf1	equ	0xFE7
 14492                           postdec1	equ	0xFE5
 14493                           fsr1h	equ	0xFE2
 14494                           fsr1l	equ	0xFE1
 14495                           indf2	equ	0xFDF
 14496                           postinc2	equ	0xFDE
 14497                           postdec2	equ	0xFDD
 14498                           plusw2	equ	0xFDB
 14499                           fsr2h	equ	0xFDA
 14500                           fsr2l	equ	0xFD9
 14501                           status	equ	0xFD8
 14502                           
 14503 ;; *************** function _SPI_DisableISR *****************
 14504 ;; Defined at:
 14505 ;;		line 181 in file "Library/SPI.c"
 14506 ;; Parameters:    Size  Location     Type
 14507 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14508 ;;		 -> SPI1(11), SPI2(11), 
 14509 ;; Auto vars:     Size  Location     Type
 14510 ;;		None
 14511 ;; Return value:  Size  Location     Type
 14512 ;;                  1    wreg      void 
 14513 ;; Registers used:
 14514 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14515 ;; Tracked objects:
 14516 ;;		On entry : 0/0
 14517 ;;		On exit  : 0/0
 14518 ;;		Unchanged: 0/0
 14519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14520 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14523 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14524 ;;Total ram usage:        2 bytes
 14525 ;; Hardware stack levels used:    1
 14526 ;; Hardware stack levels required when called:    7
 14527 ;; This function calls:
 14528 ;;		Nothing
 14529 ;; This function is called by:
 14530 ;;		_SPI_Init
 14531 ;; This function uses a non-reentrant model
 14532 ;;
 14533                           
 14534                           	psect	text71
 14535  017CEE                     __ptext71:
 14536                           	opt stack 0
 14537  017CEE                     _SPI_DisableISR:
 14538                           	opt stack 19
 14539                           
 14540                           ;SPI.c: 183: switch (pInput->mChannel)
 14541                           
 14542                           ;incstack = 0
 14543  017CEE  D004               	goto	l654
 14544  017CF0                     l655:
 14545                           
 14546                           ; BSR set to: 0
 14547  017CF0  969D               	bcf	3997,3,c	;volatile
 14548  017CF2  0012               	return	
 14549  017CF4                     l657:
 14550                           
 14551                           ; BSR set to: 0
 14552  017CF4  9EA3               	bcf	4003,7,c	;volatile
 14553                           
 14554                           ; BSR set to: 0
 14555                           ;SPI.c: 188: };
 14556                           
 14557                           ; BSR set to: 0
 14558                           
 14559                           ;SPI.c: 187: default: return;
 14560  017CF6  0012               	return	
 14561  017CF8                     l654:
 14562                           
 14563                           ; BSR set to: 0
 14564  017CF8  0100               	movlb	0	; () banked
 14565  017CFA  EE20 F002          	lfsr	2,2
 14566  017CFE  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 14567  017D00  26D9               	addwf	fsr2l,f,c
 14568  017D02  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 14569  017D04  22DA               	addwfc	fsr2h,f,c
 14570  017D06  50DF               	movf	indf2,w,c
 14571                           
 14572                           ; Switch size 1, requested type "space"
 14573                           ; Number of cases is 2, Range of values is 0 to 1
 14574                           ; switch strategies available:
 14575                           ; Name         Instructions Cycles
 14576                           ; simple_byte            7     4 (average)
 14577                           ;	Chosen strategy is simple_byte
 14578  017D08  0A00               	xorlw	0	; case 0
 14579  017D0A  B4D8               	btfsc	status,2,c
 14580  017D0C  D7F1               	goto	l655
 14581  017D0E  0A01               	xorlw	1	; case 1
 14582  017D10  A4D8               	btfss	status,2,c
 14583  017D12  0012               	return	
 14584  017D14  D7EF               	goto	l657
 14585  017D16                     __end_of_SPI_DisableISR:
 14586                           	opt stack 0
 14587                           tosu	equ	0xFFF
 14588                           tosh	equ	0xFFE
 14589                           tosl	equ	0xFFD
 14590                           pclath	equ	0xFFA
 14591                           tblptru	equ	0xFF8
 14592                           tblptrh	equ	0xFF7
 14593                           tblptrl	equ	0xFF6
 14594                           tablat	equ	0xFF5
 14595                           prodh	equ	0xFF4
 14596                           prodl	equ	0xFF3
 14597                           intcon	equ	0xFF2
 14598                           postinc0	equ	0xFEE
 14599                           wreg	equ	0xFE8
 14600                           indf1	equ	0xFE7
 14601                           postdec1	equ	0xFE5
 14602                           fsr1h	equ	0xFE2
 14603                           fsr1l	equ	0xFE1
 14604                           indf2	equ	0xFDF
 14605                           postinc2	equ	0xFDE
 14606                           postdec2	equ	0xFDD
 14607                           plusw2	equ	0xFDB
 14608                           fsr2h	equ	0xFDA
 14609                           fsr2l	equ	0xFD9
 14610                           status	equ	0xFD8
 14611                           
 14612 ;; *************** function _SPI_DCS *****************
 14613 ;; Defined at:
 14614 ;;		line 219 in file "Library/SPI.c"
 14615 ;; Parameters:    Size  Location     Type
 14616 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14617 ;;		 -> SPI1(11), SPI2(11), 
 14618 ;; Auto vars:     Size  Location     Type
 14619 ;;		None
 14620 ;; Return value:  Size  Location     Type
 14621 ;;                  1    wreg      void 
 14622 ;; Registers used:
 14623 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14624 ;; Tracked objects:
 14625 ;;		On entry : 0/0
 14626 ;;		On exit  : 0/0
 14627 ;;		Unchanged: 0/0
 14628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14631 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14632 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14633 ;;Total ram usage:        2 bytes
 14634 ;; Hardware stack levels used:    1
 14635 ;; Hardware stack levels required when called:    7
 14636 ;; This function calls:
 14637 ;;		Nothing
 14638 ;; This function is called by:
 14639 ;;		_SPI_Init
 14640 ;; This function uses a non-reentrant model
 14641 ;;
 14642                           
 14643                           	psect	text72
 14644  017BDE                     __ptext72:
 14645                           	opt stack 0
 14646  017BDE                     _SPI_DCS:
 14647                           	opt stack 19
 14648                           
 14649                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 14650                           
 14651                           ; BSR set to: 0
 14652                           ;incstack = 0
 14653  017BDE  0100               	movlb	0	; () banked
 14654  017BE0  EE20 F002          	lfsr	2,2
 14655  017BE4  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 14656  017BE6  26D9               	addwf	fsr2l,f,c
 14657  017BE8  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 14658  017BEA  22DA               	addwfc	fsr2h,f,c
 14659  017BEC  50DF               	movf	indf2,w,c
 14660  017BEE  A4D8               	btfss	status,2,c
 14661  017BF0  D007               	goto	l673
 14662                           
 14663                           ; BSR set to: 0
 14664                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 14665  017BF2  C1B7  FFD9         	movff	_PortC+4,fsr2l
 14666  017BF6  C1B8  FFDA         	movff	_PortC+5,fsr2h
 14667  017BFA  0101               	movlb	1	; () banked
 14668  017BFC  84DF               	bsf	indf2,2,c
 14669  017BFE  0012               	return	
 14670  017C00                     l673:
 14671                           
 14672                           ;SPI.c: 223: else
 14673                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 14674                           
 14675                           ; BSR set to: 1
 14676  017C00  C1A3  FFD9         	movff	_PortD+4,fsr2l
 14677  017C04  C1A4  FFDA         	movff	_PortD+5,fsr2h
 14678  017C08  0101               	movlb	1	; () banked
 14679  017C0A  8EDF               	bsf	indf2,7,c
 14680  017C0C  0012               	return	
 14681  017C0E                     __end_of_SPI_DCS:
 14682                           	opt stack 0
 14683                           tosu	equ	0xFFF
 14684                           tosh	equ	0xFFE
 14685                           tosl	equ	0xFFD
 14686                           pclath	equ	0xFFA
 14687                           tblptru	equ	0xFF8
 14688                           tblptrh	equ	0xFF7
 14689                           tblptrl	equ	0xFF6
 14690                           tablat	equ	0xFF5
 14691                           prodh	equ	0xFF4
 14692                           prodl	equ	0xFF3
 14693                           intcon	equ	0xFF2
 14694                           postinc0	equ	0xFEE
 14695                           wreg	equ	0xFE8
 14696                           indf1	equ	0xFE7
 14697                           postdec1	equ	0xFE5
 14698                           fsr1h	equ	0xFE2
 14699                           fsr1l	equ	0xFE1
 14700                           indf2	equ	0xFDF
 14701                           postinc2	equ	0xFDE
 14702                           postdec2	equ	0xFDD
 14703                           plusw2	equ	0xFDB
 14704                           fsr2h	equ	0xFDA
 14705                           fsr2l	equ	0xFD9
 14706                           status	equ	0xFD8
 14707                           
 14708 ;; *************** function _FunctInitButton *****************
 14709 ;; Defined at:
 14710 ;;		line 16 in file "Functions.c"
 14711 ;; Parameters:    Size  Location     Type
 14712 ;;		None
 14713 ;; Auto vars:     Size  Location     Type
 14714 ;;		None
 14715 ;; Return value:  Size  Location     Type
 14716 ;;                  1    wreg      void 
 14717 ;; Registers used:
 14718 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14719 ;; Tracked objects:
 14720 ;;		On entry : 0/0
 14721 ;;		On exit  : 0/0
 14722 ;;		Unchanged: 0/0
 14723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14727 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14728 ;;Total ram usage:        0 bytes
 14729 ;; Hardware stack levels used:    1
 14730 ;; Hardware stack levels required when called:   16
 14731 ;; This function calls:
 14732 ;;		_Button_Init
 14733 ;; This function is called by:
 14734 ;;		_initialise
 14735 ;; This function uses a non-reentrant model
 14736 ;;
 14737                           
 14738                           	psect	text73
 14739  01638C                     __ptext73:
 14740                           	opt stack 0
 14741  01638C                     _FunctInitButton:
 14742                           	opt stack 13
 14743                           
 14744                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 14745                           
 14746                           ; BSR set to: 1
 14747                           ;incstack = 0
 14748  01638C  0E81               	movlw	low _TestButton
 14749  01638E  0100               	movlb	0	; () banked
 14750  016390  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14751  016392  0E01               	movlw	high _TestButton
 14752  016394  0100               	movlb	0	; () banked
 14753  016396  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14754  016398  0E00               	movlw	0
 14755  01639A  0100               	movlb	0	; () banked
 14756  01639C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14757  01639E  0E02               	movlw	2
 14758  0163A0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14759  0163A2  0E1C               	movlw	low _MXK_InitTestButton
 14760  0163A4  0100               	movlb	0	; () banked
 14761  0163A6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14762  0163A8  0E7E               	movlw	high _MXK_InitTestButton
 14763  0163AA  0100               	movlb	0	; () banked
 14764  0163AC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14765  0163AE  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 14766  0163B0  0100               	movlb	0	; () banked
 14767  0163B2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14768  0163B4  0E76               	movlw	low _MXK_TestButton
 14769  0163B6  0100               	movlb	0	; () banked
 14770  0163B8  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14771  0163BA  0E7F               	movlw	high _MXK_TestButton
 14772  0163BC  0100               	movlb	0	; () banked
 14773  0163BE  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14774  0163C0  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 14775  0163C2  0100               	movlb	0	; () banked
 14776  0163C4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14777  0163C6  0EFC               	movlw	low _Event_TestButton
 14778  0163C8  0100               	movlb	0	; () banked
 14779  0163CA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14780  0163CC  0E79               	movlw	high _Event_TestButton
 14781  0163CE  0100               	movlb	0	; () banked
 14782  0163D0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14783  0163D2  0E01               	movlw	low (_Event_TestButton shr (0+16))
 14784  0163D4  0100               	movlb	0	; () banked
 14785  0163D6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14786  0163D8  EC33  F0AA         	call	_Button_Init	;wreg free
 14787                           
 14788                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 14789  0163DC  0E77               	movlw	low _DIPSwitch
 14790  0163DE  0100               	movlb	0	; () banked
 14791  0163E0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 14792  0163E2  0E01               	movlw	high _DIPSwitch
 14793  0163E4  0100               	movlb	0	; () banked
 14794  0163E6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 14795  0163E8  0E00               	movlw	0
 14796  0163EA  0100               	movlb	0	; () banked
 14797  0163EC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14798  0163EE  0E02               	movlw	2
 14799  0163F0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14800  0163F2  0EFE               	movlw	low _MXK_InitDIPSwitch
 14801  0163F4  0100               	movlb	0	; () banked
 14802  0163F6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 14803  0163F8  0E7D               	movlw	high _MXK_InitDIPSwitch
 14804  0163FA  0100               	movlb	0	; () banked
 14805  0163FC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 14806  0163FE  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 14807  016400  0100               	movlb	0	; () banked
 14808  016402  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 14809  016404  0EE6               	movlw	low _MXK_DIPSwitch
 14810  016406  0100               	movlb	0	; () banked
 14811  016408  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 14812  01640A  0E7E               	movlw	high _MXK_DIPSwitch
 14813  01640C  0100               	movlb	0	; () banked
 14814  01640E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 14815  016410  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 14816  016412  0100               	movlb	0	; () banked
 14817  016414  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 14818  016416  0E3E               	movlw	low _Event_DIPSwitch
 14819  016418  0100               	movlb	0	; () banked
 14820  01641A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 14821  01641C  0E7C               	movlw	high _Event_DIPSwitch
 14822  01641E  0100               	movlb	0	; () banked
 14823  016420  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 14824  016422  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 14825  016424  0100               	movlb	0	; () banked
 14826  016426  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 14827  016428  EC33  F0AA         	call	_Button_Init	;wreg free
 14828  01642C  0012               	return		;funcret
 14829  01642E                     __end_of_FunctInitButton:
 14830                           	opt stack 0
 14831                           tosu	equ	0xFFF
 14832                           tosh	equ	0xFFE
 14833                           tosl	equ	0xFFD
 14834                           pclath	equ	0xFFA
 14835                           tblptru	equ	0xFF8
 14836                           tblptrh	equ	0xFF7
 14837                           tblptrl	equ	0xFF6
 14838                           tablat	equ	0xFF5
 14839                           prodh	equ	0xFF4
 14840                           prodl	equ	0xFF3
 14841                           intcon	equ	0xFF2
 14842                           postinc0	equ	0xFEE
 14843                           wreg	equ	0xFE8
 14844                           indf1	equ	0xFE7
 14845                           postdec1	equ	0xFE5
 14846                           fsr1h	equ	0xFE2
 14847                           fsr1l	equ	0xFE1
 14848                           indf2	equ	0xFDF
 14849                           postinc2	equ	0xFDE
 14850                           postdec2	equ	0xFDD
 14851                           plusw2	equ	0xFDB
 14852                           fsr2h	equ	0xFDA
 14853                           fsr2l	equ	0xFD9
 14854                           status	equ	0xFD8
 14855                           
 14856 ;; *************** function _Button_Init *****************
 14857 ;; Defined at:
 14858 ;;		line 18 in file "Library/Button.c"
 14859 ;; Parameters:    Size  Location     Type
 14860 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 14861 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 14862 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 14863 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 14864 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 14865 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 14866 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 14867 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 14868 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 14869 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 14870 ;; Auto vars:     Size  Location     Type
 14871 ;;		None
 14872 ;; Return value:  Size  Location     Type
 14873 ;;                  1    wreg      void 
 14874 ;; Registers used:
 14875 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14876 ;; Tracked objects:
 14877 ;;		On entry : 0/0
 14878 ;;		On exit  : 0/0
 14879 ;;		Unchanged: 0/0
 14880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14881 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14884 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14885 ;;Total ram usage:       13 bytes
 14886 ;; Hardware stack levels used:    1
 14887 ;; Hardware stack levels required when called:   15
 14888 ;; This function calls:
 14889 ;;		_HMI_InitButtons
 14890 ;;		_MXK_InitDIPSwitch
 14891 ;;		_MXK_InitTestButton
 14892 ;; This function is called by:
 14893 ;;		_HMI_Init
 14894 ;;		_FunctInitButton
 14895 ;; This function uses a non-reentrant model
 14896 ;;
 14897                           
 14898                           	psect	text74
 14899  015466                     __ptext74:
 14900                           	opt stack 0
 14901  015466                     _Button_Init:
 14902                           	opt stack 13
 14903                           
 14904                           ;Button.c: 21: if(pInput==(void*)0)
 14905                           
 14906                           ;incstack = 0
 14907  015466  0100               	movlb	0	; () banked
 14908  015468  519B               	movf	Button_Init@pInput& (0+255),w,b
 14909  01546A  0100               	movlb	0	; () banked
 14910  01546C  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 14911  01546E  B4D8               	btfsc	status,2,c
 14912  015470  0012               	return	
 14913                           
 14914                           ; BSR set to: 0
 14915                           ;Button.c: 23: if(pInitIO==(void*)0)
 14916                           
 14917                           ; BSR set to: 0
 14918                           
 14919                           ; BSR set to: 0
 14920                           ;Button.c: 22: return;
 14921  015472  0100               	movlb	0	; () banked
 14922  015474  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 14923  015476  0100               	movlb	0	; () banked
 14924  015478  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 14925  01547A  0100               	movlb	0	; () banked
 14926  01547C  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 14927  01547E  B4D8               	btfsc	status,2,c
 14928  015480  0012               	return	
 14929                           
 14930                           ; BSR set to: 0
 14931                           ;Button.c: 25: if(pGetState==(void*)0)
 14932                           
 14933                           ; BSR set to: 0
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;Button.c: 24: return;
 14937  015482  0100               	movlb	0	; () banked
 14938  015484  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 14939  015486  0100               	movlb	0	; () banked
 14940  015488  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 14941  01548A  0100               	movlb	0	; () banked
 14942  01548C  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 14943  01548E  B4D8               	btfsc	status,2,c
 14944  015490  0012               	return	
 14945                           
 14946                           ; BSR set to: 0
 14947                           ;Button.c: 27: if(pFunction==(void*)0)
 14948                           
 14949                           ; BSR set to: 0
 14950                           
 14951                           ; BSR set to: 0
 14952                           ;Button.c: 26: return;
 14953  015492  0100               	movlb	0	; () banked
 14954  015494  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 14955  015496  0100               	movlb	0	; () banked
 14956  015498  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 14957  01549A  0100               	movlb	0	; () banked
 14958  01549C  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 14959  01549E  B4D8               	btfsc	status,2,c
 14960  0154A0  0012               	return	
 14961                           
 14962                           ; BSR set to: 0
 14963                           ;Button.c: 30: if(pThreshold == 0)
 14964                           
 14965                           ; BSR set to: 0
 14966                           
 14967                           ; BSR set to: 0
 14968                           ;Button.c: 28: return;
 14969  0154A2  0100               	movlb	0	; () banked
 14970  0154A4  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 14971  0154A6  0100               	movlb	0	; () banked
 14972  0154A8  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 14973  0154AA  A4D8               	btfss	status,2,c
 14974  0154AC  D005               	goto	l8
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;Button.c: 31: pThreshold = 1;
 14978  0154AE  0E00               	movlw	0
 14979  0154B0  0100               	movlb	0	; () banked
 14980  0154B2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14981  0154B4  0E01               	movlw	1
 14982  0154B6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 14983  0154B8                     l8:
 14984                           
 14985                           ; BSR set to: 0
 14986                           ;Button.c: 34: pInput->mState = 0;
 14987                           
 14988                           ; BSR set to: 0
 14989  0154B8  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 14990  0154BC  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 14991  0154C0  0E00               	movlw	0
 14992  0154C2  6EDF               	movwf	indf2,c
 14993                           
 14994                           ; BSR set to: 0
 14995                           ;Button.c: 35: pInput->mCount = 0;
 14996  0154C4  0100               	movlb	0	; () banked
 14997  0154C6  EE20 F001          	lfsr	2,1
 14998  0154CA  519B               	movf	Button_Init@pInput& (0+255),w,b
 14999  0154CC  26D9               	addwf	fsr2l,f,c
 15000  0154CE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15001  0154D0  22DA               	addwfc	fsr2h,f,c
 15002  0154D2  0E00               	movlw	0
 15003  0154D4  6EDF               	movwf	indf2,c
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 15007  0154D6  0100               	movlb	0	; () banked
 15008  0154D8  EE20 F002          	lfsr	2,2
 15009  0154DC  519B               	movf	Button_Init@pInput& (0+255),w,b
 15010  0154DE  26D9               	addwf	fsr2l,f,c
 15011  0154E0  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15012  0154E2  22DA               	addwfc	fsr2h,f,c
 15013  0154E4  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 15014  0154E8  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;Button.c: 37: pInput->mFunction = pFunction;
 15018  0154EC  0100               	movlb	0	; () banked
 15019  0154EE  EE20 F004          	lfsr	2,4
 15020  0154F2  519B               	movf	Button_Init@pInput& (0+255),w,b
 15021  0154F4  26D9               	addwf	fsr2l,f,c
 15022  0154F6  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15023  0154F8  22DA               	addwfc	fsr2h,f,c
 15024  0154FA  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 15025  0154FE  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 15026  015502  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 15027                           
 15028                           ; BSR set to: 0
 15029                           ;Button.c: 38: pInput->mGetState = pGetState;
 15030  015506  0100               	movlb	0	; () banked
 15031  015508  EE20 F007          	lfsr	2,7
 15032  01550C  519B               	movf	Button_Init@pInput& (0+255),w,b
 15033  01550E  26D9               	addwf	fsr2l,f,c
 15034  015510  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 15035  015512  22DA               	addwfc	fsr2h,f,c
 15036  015514  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 15037  015518  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 15038  01551C  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 15039                           
 15040                           ; BSR set to: 0
 15041                           ;Button.c: 41: pInitIO();
 15042  015520  D801               	call	u12428
 15043  015522  0012               	return	
 15044  015524                     u12428:
 15045  015524  0005               	push	
 15046  015526  6EFA               	movwf	pclath,c
 15047  015528  0100               	movlb	0	; () banked
 15048  01552A  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 15049  01552C  6EFD               	movwf	tosl,c
 15050  01552E  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 15051  015530  6EFE               	movwf	tosh,c
 15052  015532  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 15053  015534  6EFF               	movwf	tosu,c
 15054  015536  50FA               	movf	pclath,w,c
 15055  015538  0012               	return		;indir
 15056  01553A                     __end_of_Button_Init:
 15057                           	opt stack 0
 15058                           tosu	equ	0xFFF
 15059                           tosh	equ	0xFFE
 15060                           tosl	equ	0xFFD
 15061                           pclath	equ	0xFFA
 15062                           tblptru	equ	0xFF8
 15063                           tblptrh	equ	0xFF7
 15064                           tblptrl	equ	0xFF6
 15065                           tablat	equ	0xFF5
 15066                           prodh	equ	0xFF4
 15067                           prodl	equ	0xFF3
 15068                           intcon	equ	0xFF2
 15069                           postinc0	equ	0xFEE
 15070                           wreg	equ	0xFE8
 15071                           indf1	equ	0xFE7
 15072                           postdec1	equ	0xFE5
 15073                           fsr1h	equ	0xFE2
 15074                           fsr1l	equ	0xFE1
 15075                           indf2	equ	0xFDF
 15076                           postinc2	equ	0xFDE
 15077                           postdec2	equ	0xFDD
 15078                           plusw2	equ	0xFDB
 15079                           fsr2h	equ	0xFDA
 15080                           fsr2l	equ	0xFD9
 15081                           status	equ	0xFD8
 15082                           
 15083 ;; *************** function _MXK_InitDIPSwitch *****************
 15084 ;; Defined at:
 15085 ;;		line 20 in file "Library/MXK.c"
 15086 ;; Parameters:    Size  Location     Type
 15087 ;;		None
 15088 ;; Auto vars:     Size  Location     Type
 15089 ;;		None
 15090 ;; Return value:  Size  Location     Type
 15091 ;;                  1    wreg      void 
 15092 ;; Registers used:
 15093 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15094 ;; Tracked objects:
 15095 ;;		On entry : 0/0
 15096 ;;		On exit  : 0/0
 15097 ;;		Unchanged: 0/0
 15098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15103 ;;Total ram usage:        0 bytes
 15104 ;; Hardware stack levels used:    1
 15105 ;; Hardware stack levels required when called:   14
 15106 ;; This function calls:
 15107 ;;		_Port_SetQuadType
 15108 ;; This function is called by:
 15109 ;;		_FunctInitButton
 15110 ;;		_Button_Init
 15111 ;; This function uses a non-reentrant model
 15112 ;;
 15113                           
 15114                           	psect	text75
 15115  017DFE                     __ptext75:
 15116                           	opt stack 0
 15117  017DFE                     _MXK_InitDIPSwitch:
 15118                           	opt stack 13
 15119                           
 15120                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 15121                           
 15122                           ;incstack = 0
 15123  017DFE  0E9F               	movlw	low _PortD
 15124  017E00  0100               	movlb	0	; () banked
 15125  017E02  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 15126  017E04  0E01               	movlw	high _PortD
 15127  017E06  0100               	movlb	0	; () banked
 15128  017E08  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 15129  017E0A  0E00               	movlw	0
 15130  017E0C  0100               	movlb	0	; () banked
 15131  017E0E  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 15132  017E10  0E00               	movlw	0
 15133  017E12  0100               	movlb	0	; () banked
 15134  017E14  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 15135  017E16  EC6B  F095         	call	_Port_SetQuadType	;wreg free
 15136  017E1A  0012               	return		;funcret
 15137  017E1C                     __end_of_MXK_InitDIPSwitch:
 15138                           	opt stack 0
 15139                           tosu	equ	0xFFF
 15140                           tosh	equ	0xFFE
 15141                           tosl	equ	0xFFD
 15142                           pclath	equ	0xFFA
 15143                           tblptru	equ	0xFF8
 15144                           tblptrh	equ	0xFF7
 15145                           tblptrl	equ	0xFF6
 15146                           tablat	equ	0xFF5
 15147                           prodh	equ	0xFF4
 15148                           prodl	equ	0xFF3
 15149                           intcon	equ	0xFF2
 15150                           postinc0	equ	0xFEE
 15151                           wreg	equ	0xFE8
 15152                           indf1	equ	0xFE7
 15153                           postdec1	equ	0xFE5
 15154                           fsr1h	equ	0xFE2
 15155                           fsr1l	equ	0xFE1
 15156                           indf2	equ	0xFDF
 15157                           postinc2	equ	0xFDE
 15158                           postdec2	equ	0xFDD
 15159                           plusw2	equ	0xFDB
 15160                           fsr2h	equ	0xFDA
 15161                           fsr2l	equ	0xFD9
 15162                           status	equ	0xFD8
 15163                           
 15164 ;; *************** function _HMI_InitButtons *****************
 15165 ;; Defined at:
 15166 ;;		line 21 in file "HMI.c"
 15167 ;; Parameters:    Size  Location     Type
 15168 ;;		None
 15169 ;; Auto vars:     Size  Location     Type
 15170 ;;		None
 15171 ;; Return value:  Size  Location     Type
 15172 ;;                  1    wreg      void 
 15173 ;; Registers used:
 15174 ;;		wreg, status,2
 15175 ;; Tracked objects:
 15176 ;;		On entry : 0/0
 15177 ;;		On exit  : 0/0
 15178 ;;		Unchanged: 0/0
 15179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15184 ;;Total ram usage:        0 bytes
 15185 ;; Hardware stack levels used:    1
 15186 ;; Hardware stack levels required when called:    7
 15187 ;; This function calls:
 15188 ;;		Nothing
 15189 ;; This function is called by:
 15190 ;;		_HMI_Init
 15191 ;;		_Button_Init
 15192 ;; This function uses a non-reentrant model
 15193 ;;
 15194                           
 15195                           	psect	text76
 15196  018076                     __ptext76:
 15197                           	opt stack 0
 15198  018076                     _HMI_InitButtons:
 15199                           	opt stack 20
 15200                           
 15201                           ;HMI.c: 23: TRISE = 0xFC;
 15202                           
 15203                           ;incstack = 0
 15204  018076  0EFC               	movlw	252
 15205  018078  6E96               	movwf	3990,c	;volatile
 15206  01807A  0012               	return		;funcret
 15207  01807C                     __end_of_HMI_InitButtons:
 15208                           	opt stack 0
 15209                           tosu	equ	0xFFF
 15210                           tosh	equ	0xFFE
 15211                           tosl	equ	0xFFD
 15212                           pclath	equ	0xFFA
 15213                           tblptru	equ	0xFF8
 15214                           tblptrh	equ	0xFF7
 15215                           tblptrl	equ	0xFF6
 15216                           tablat	equ	0xFF5
 15217                           prodh	equ	0xFF4
 15218                           prodl	equ	0xFF3
 15219                           intcon	equ	0xFF2
 15220                           postinc0	equ	0xFEE
 15221                           wreg	equ	0xFE8
 15222                           indf1	equ	0xFE7
 15223                           postdec1	equ	0xFE5
 15224                           fsr1h	equ	0xFE2
 15225                           fsr1l	equ	0xFE1
 15226                           indf2	equ	0xFDF
 15227                           postinc2	equ	0xFDE
 15228                           postdec2	equ	0xFDD
 15229                           plusw2	equ	0xFDB
 15230                           fsr2h	equ	0xFDA
 15231                           fsr2l	equ	0xFD9
 15232                           status	equ	0xFD8
 15233                           
 15234 ;; *************** function _MXK_InitTestButton *****************
 15235 ;; Defined at:
 15236 ;;		line 10 in file "Library/MXK.c"
 15237 ;; Parameters:    Size  Location     Type
 15238 ;;		None
 15239 ;; Auto vars:     Size  Location     Type
 15240 ;;		None
 15241 ;; Return value:  Size  Location     Type
 15242 ;;                  1    wreg      void 
 15243 ;; Registers used:
 15244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15245 ;; Tracked objects:
 15246 ;;		On entry : 0/0
 15247 ;;		On exit  : 0/0
 15248 ;;		Unchanged: 0/0
 15249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15253 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15254 ;;Total ram usage:        0 bytes
 15255 ;; Hardware stack levels used:    1
 15256 ;; Hardware stack levels required when called:   12
 15257 ;; This function calls:
 15258 ;;		_Port_SetPinType
 15259 ;; This function is called by:
 15260 ;;		_FunctInitButton
 15261 ;;		_Button_Init
 15262 ;; This function uses a non-reentrant model
 15263 ;;
 15264                           
 15265                           	psect	text77
 15266  017E1C                     __ptext77:
 15267                           	opt stack 0
 15268  017E1C                     _MXK_InitTestButton:
 15269                           	opt stack 15
 15270                           
 15271                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 15272                           
 15273                           ;incstack = 0
 15274  017E1C  0EA9               	movlw	low _PortB
 15275  017E1E  0100               	movlb	0	; () banked
 15276  017E20  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15277  017E22  0E01               	movlw	high _PortB
 15278  017E24  0100               	movlb	0	; () banked
 15279  017E26  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15280  017E28  0E04               	movlw	4
 15281  017E2A  0100               	movlb	0	; () banked
 15282  017E2C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15283  017E2E  0E00               	movlw	0
 15284  017E30  0100               	movlb	0	; () banked
 15285  017E32  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15286  017E34  EC97  F09B         	call	_Port_SetPinType	;wreg free
 15287  017E38  0012               	return		;funcret
 15288  017E3A                     __end_of_MXK_InitTestButton:
 15289                           	opt stack 0
 15290                           tosu	equ	0xFFF
 15291                           tosh	equ	0xFFE
 15292                           tosl	equ	0xFFD
 15293                           pclath	equ	0xFFA
 15294                           tblptru	equ	0xFF8
 15295                           tblptrh	equ	0xFF7
 15296                           tblptrl	equ	0xFF6
 15297                           tablat	equ	0xFF5
 15298                           prodh	equ	0xFF4
 15299                           prodl	equ	0xFF3
 15300                           intcon	equ	0xFF2
 15301                           postinc0	equ	0xFEE
 15302                           wreg	equ	0xFE8
 15303                           indf1	equ	0xFE7
 15304                           postdec1	equ	0xFE5
 15305                           fsr1h	equ	0xFE2
 15306                           fsr1l	equ	0xFE1
 15307                           indf2	equ	0xFDF
 15308                           postinc2	equ	0xFDE
 15309                           postdec2	equ	0xFDD
 15310                           plusw2	equ	0xFDB
 15311                           fsr2h	equ	0xFDA
 15312                           fsr2l	equ	0xFD9
 15313                           status	equ	0xFD8
 15314                           
 15315 ;; *************** function _Port_SetPinType *****************
 15316 ;; Defined at:
 15317 ;;		line 189 in file "Library/Port.c"
 15318 ;; Parameters:    Size  Location     Type
 15319 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 15320 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15321 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15322 ;;  pPin            1   40[BANK0 ] enum E6750
 15323 ;;  pType           1   41[BANK0 ] enum E6795
 15324 ;; Auto vars:     Size  Location     Type
 15325 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 15326 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 15327 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 15328 ;;  Output          1   42[BANK0 ] enum E6475
 15329 ;; Return value:  Size  Location     Type
 15330 ;;                  1    wreg      enum E6475
 15331 ;; Registers used:
 15332 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15333 ;; Tracked objects:
 15334 ;;		On entry : 0/0
 15335 ;;		On exit  : 0/0
 15336 ;;		Unchanged: 0/0
 15337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15338 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15339 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15341 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15342 ;;Total ram usage:        7 bytes
 15343 ;; Hardware stack levels used:    1
 15344 ;; Hardware stack levels required when called:   11
 15345 ;; This function calls:
 15346 ;;		_Byte_SetBit
 15347 ;;		_PortProperty_Valid
 15348 ;;		_Word_SetPair
 15349 ;; This function is called by:
 15350 ;;		_Configure_GPIOs
 15351 ;;		_LED_Init
 15352 ;;		_Port_Init
 15353 ;;		_SPI_Init
 15354 ;;		_Motor_Init
 15355 ;;		_MXK_InitTestButton
 15356 ;;		_MXK_Init
 15357 ;;		_I2C_Init
 15358 ;; This function uses a non-reentrant model
 15359 ;;
 15360                           
 15361                           	psect	text78
 15362  01372E                     __ptext78:
 15363                           	opt stack 0
 15364  01372E                     _Port_SetPinType:
 15365                           	opt stack 17
 15366                           
 15367                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 15368                           
 15369                           ;incstack = 0
 15370  01372E  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 15371  013732  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 15372  013736  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 15373  01373A  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 15374                           
 15375                           ;Port.c: 192: ePinError Output = ePinErrorState;
 15376  01373E  0E05               	movlw	5
 15377  013740  0100               	movlb	0	; () banked
 15378  013742  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15379                           
 15380                           ;Port.c: 193: switch (pType)
 15381  013744  D0B5               	goto	l412
 15382  013746                     
 15383                           ; BSR set to: 0
 15384                           ;Port.c: 197: {
 15385                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15386                           
 15387                           ; BSR set to: 0
 15388  013746  0100               	movlb	0	; () banked
 15389  013748  EE20 F002          	lfsr	2,2
 15390  01374C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15391  01374E  26D9               	addwf	fsr2l,f,c
 15392  013750  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15393  013752  22DA               	addwfc	fsr2h,f,c
 15394  013754  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15395  013758  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15396  01375C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15397  013760  0E01               	movlw	1
 15398  013762  0100               	movlb	0	; () banked
 15399  013764  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15400  013766  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 15401                           
 15402                           ;Port.c: 203: break;
 15403  01376A  D0B0               	goto	l414
 15404  01376C                     
 15405                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 15406  01376C  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15407  013770  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15408  013774  0E01               	movlw	1
 15409  013776  0100               	movlb	0	; () banked
 15410  013778  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15411  01377A  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15412  01377E  EC81  F0B5         	call	_PortProperty_Valid	;wreg free
 15413  013782  0100               	movlb	0	; () banked
 15414  013784  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15415  013786  0100               	movlb	0	; () banked
 15416  013788  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15417  01378A  A4D8               	btfss	status,2,c
 15418  01378C  0012               	return	
 15419                           
 15420                           ; BSR set to: 0
 15421                           ;Port.c: 208: {
 15422                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15423  01378E  0100               	movlb	0	; () banked
 15424  013790  EE20 F002          	lfsr	2,2
 15425  013794  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15426  013796  26D9               	addwf	fsr2l,f,c
 15427  013798  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15428  01379A  22DA               	addwfc	fsr2h,f,c
 15429  01379C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15430  0137A0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15431  0137A4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15432  0137A8  0E00               	movlw	0
 15433  0137AA  0100               	movlb	0	; () banked
 15434  0137AC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15435  0137AE  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 15436                           
 15437                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15438  0137B2  0100               	movlb	0	; () banked
 15439  0137B4  EE20 F004          	lfsr	2,4
 15440  0137B8  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15441  0137BA  26D9               	addwf	fsr2l,f,c
 15442  0137BC  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15443  0137BE  22DA               	addwfc	fsr2h,f,c
 15444  0137C0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15445  0137C4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15446  0137C8  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15447  0137CC  0E00               	movlw	0
 15448  0137CE  0100               	movlb	0	; () banked
 15449  0137D0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15450  0137D2  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 15451                           
 15452                           ;Port.c: 214: break;
 15453  0137D6  D07A               	goto	l414
 15454  0137D8                     
 15455                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 15456                           
 15457                           ;Port.c: 218: case eTypeOutputOpenSource:
 15458  0137D8  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15459  0137DC  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15460  0137E0  0E02               	movlw	2
 15461  0137E2  0100               	movlb	0	; () banked
 15462  0137E4  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15463  0137E6  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15464  0137EA  EC81  F0B5         	call	_PortProperty_Valid	;wreg free
 15465  0137EE  0100               	movlb	0	; () banked
 15466  0137F0  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15467  0137F2  0100               	movlb	0	; () banked
 15468  0137F4  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15469  0137F6  A4D8               	btfss	status,2,c
 15470  0137F8  0012               	return	
 15471                           
 15472                           ; BSR set to: 0
 15473                           ;Port.c: 220: {
 15474                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15475  0137FA  0100               	movlb	0	; () banked
 15476  0137FC  EE20 F002          	lfsr	2,2
 15477  013800  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15478  013802  26D9               	addwf	fsr2l,f,c
 15479  013804  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15480  013806  22DA               	addwfc	fsr2h,f,c
 15481  013808  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15482  01380C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15483  013810  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15484  013814  0E01               	movlw	1
 15485  013816  0100               	movlb	0	; () banked
 15486  013818  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15487  01381A  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 15488                           
 15489                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 15490  01381E  0100               	movlb	0	; () banked
 15491  013820  EE20 F004          	lfsr	2,4
 15492  013824  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15493  013826  26D9               	addwf	fsr2l,f,c
 15494  013828  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15495  01382A  22DA               	addwfc	fsr2h,f,c
 15496  01382C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15497  013830  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15498  013834  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15499  013838  0E01               	movlw	1
 15500  01383A  0100               	movlb	0	; () banked
 15501  01383C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15502  01383E  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 15503                           
 15504                           ;Port.c: 226: break;
 15505  013842  D044               	goto	l414
 15506  013844                     
 15507                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 15508                           
 15509                           ;Port.c: 230: case eTypeOutputPushPull:
 15510  013844  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15511  013848  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15512  01384C  0E00               	movlw	0
 15513  01384E  0100               	movlb	0	; () banked
 15514  013850  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15515  013852  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15516  013856  EC81  F0B5         	call	_PortProperty_Valid	;wreg free
 15517  01385A  0100               	movlb	0	; () banked
 15518  01385C  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 15519  01385E  0100               	movlb	0	; () banked
 15520  013860  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 15521  013862  A4D8               	btfss	status,2,c
 15522  013864  0012               	return	
 15523                           
 15524                           ; BSR set to: 0
 15525                           ;Port.c: 232: {
 15526                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15527  013866  0100               	movlb	0	; () banked
 15528  013868  EE20 F002          	lfsr	2,2
 15529  01386C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15530  01386E  26D9               	addwf	fsr2l,f,c
 15531  013870  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15532  013872  22DA               	addwfc	fsr2h,f,c
 15533  013874  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15534  013878  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15535  01387C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15536  013880  0E00               	movlw	0
 15537  013882  0100               	movlb	0	; () banked
 15538  013884  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15539  013886  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 15540                           
 15541                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15542  01388A  0100               	movlb	0	; () banked
 15543  01388C  EE20 F004          	lfsr	2,4
 15544  013890  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 15545  013892  26D9               	addwf	fsr2l,f,c
 15546  013894  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15547  013896  22DA               	addwfc	fsr2h,f,c
 15548  013898  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15549  01389C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15550  0138A0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15551  0138A4  0E00               	movlw	0
 15552  0138A6  0100               	movlb	0	; () banked
 15553  0138A8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15554  0138AA  ECD0  F0B8         	call	_Byte_SetBit	;wreg free
 15555                           
 15556                           ;Port.c: 239: }
 15557                           
 15558                           ;Port.c: 238: break;
 15559  0138AE  D00E               	goto	l414
 15560  0138B0                     l412:
 15561  0138B0  0100               	movlb	0	; () banked
 15562  0138B2  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 15563                           
 15564                           ; Switch size 1, requested type "space"
 15565                           ; Number of cases is 4, Range of values is 0 to 3
 15566                           ; switch strategies available:
 15567                           ; Name         Instructions Cycles
 15568                           ; simple_byte           13     7 (average)
 15569                           ;	Chosen strategy is simple_byte
 15570  0138B4  0A00               	xorlw	0	; case 0
 15571  0138B6  B4D8               	btfsc	status,2,c
 15572  0138B8  D746               	goto	l413
 15573  0138BA  0A01               	xorlw	1	; case 1
 15574  0138BC  B4D8               	btfsc	status,2,c
 15575  0138BE  D756               	goto	l415
 15576  0138C0  0A03               	xorlw	3	; case 2
 15577  0138C2  B4D8               	btfsc	status,2,c
 15578  0138C4  D789               	goto	l417
 15579  0138C6  0A01               	xorlw	1	; case 3
 15580  0138C8  B4D8               	btfsc	status,2,c
 15581  0138CA  D7BC               	goto	l421
 15582  0138CC                     l414:
 15583                           
 15584                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 15585                           
 15586                           ; BSR set to: 0
 15587  0138CC  0E08               	movlw	8
 15588  0138CE  0100               	movlb	0	; () banked
 15589  0138D0  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 15590  0138D2  0100               	movlb	0	; () banked
 15591  0138D4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 15592  0138D6  0E00               	movlw	0
 15593  0138D8  0100               	movlb	0	; () banked
 15594  0138DA  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 15595  0138DC  0100               	movlb	0	; () banked
 15596  0138DE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15597  0138E0  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 15598  0138E4  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 15599  0138E8  ECBA  F0BB         	call	_Word_SetPair	;wreg free
 15600  0138EC  0012               	return	
 15601  0138EE                     __end_of_Port_SetPinType:
 15602                           	opt stack 0
 15603                           tosu	equ	0xFFF
 15604                           tosh	equ	0xFFE
 15605                           tosl	equ	0xFFD
 15606                           pclath	equ	0xFFA
 15607                           tblptru	equ	0xFF8
 15608                           tblptrh	equ	0xFF7
 15609                           tblptrl	equ	0xFF6
 15610                           tablat	equ	0xFF5
 15611                           prodh	equ	0xFF4
 15612                           prodl	equ	0xFF3
 15613                           intcon	equ	0xFF2
 15614                           postinc0	equ	0xFEE
 15615                           wreg	equ	0xFE8
 15616                           indf1	equ	0xFE7
 15617                           postdec1	equ	0xFE5
 15618                           fsr1h	equ	0xFE2
 15619                           fsr1l	equ	0xFE1
 15620                           indf2	equ	0xFDF
 15621                           postinc2	equ	0xFDE
 15622                           postdec2	equ	0xFDD
 15623                           plusw2	equ	0xFDB
 15624                           fsr2h	equ	0xFDA
 15625                           fsr2l	equ	0xFD9
 15626                           status	equ	0xFD8
 15627                           
 15628 ;; *************** function _Byte_SetBit *****************
 15629 ;; Defined at:
 15630 ;;		line 32 in file "Library/Types.c"
 15631 ;; Parameters:    Size  Location     Type
 15632 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15633 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 15634 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 15635 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15636 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15637 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15638 ;;		 -> NULL(0), 
 15639 ;;  pBit            1    2[BANK0 ] unsigned char 
 15640 ;;  pValue          1    3[BANK0 ] unsigned char 
 15641 ;; Auto vars:     Size  Location     Type
 15642 ;;		None
 15643 ;; Return value:  Size  Location     Type
 15644 ;;                  1    wreg      void 
 15645 ;; Registers used:
 15646 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15647 ;; Tracked objects:
 15648 ;;		On entry : 0/0
 15649 ;;		On exit  : 0/0
 15650 ;;		Unchanged: 0/0
 15651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15652 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15654 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15655 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15656 ;;Total ram usage:        7 bytes
 15657 ;; Hardware stack levels used:    1
 15658 ;; Hardware stack levels required when called:    7
 15659 ;; This function calls:
 15660 ;;		Nothing
 15661 ;; This function is called by:
 15662 ;;		_Port_SetPinType
 15663 ;;		_Port_SetPin
 15664 ;;		_SPI_Init
 15665 ;;		_SPI_MinSpeed
 15666 ;;		_SPI_MaxSpeed
 15667 ;;		_Word_SetBit
 15668 ;;		_I2C_Init
 15669 ;; This function uses a non-reentrant model
 15670 ;;
 15671                           
 15672                           	psect	text79
 15673  0171A0                     __ptext79:
 15674                           	opt stack 0
 15675  0171A0                     _Byte_SetBit:
 15676                           	opt stack 16
 15677                           
 15678                           ;Types.c: 34: pValue &= 1;
 15679                           
 15680                           ;incstack = 0
 15681  0171A0  0E01               	movlw	1
 15682  0171A2  0100               	movlb	0	; () banked
 15683  0171A4  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 15684                           
 15685                           ; BSR set to: 0
 15686                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 15687  0171A6  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15688  0171AA  0E01               	movlw	1
 15689  0171AC  0100               	movlb	0	; () banked
 15690  0171AE  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 15691  0171B0  0100               	movlb	0	; () banked
 15692  0171B2  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15693  0171B4  D003               	goto	u10244
 15694  0171B6                     u10245:
 15695  0171B6  0100               	movlb	0	; () banked
 15696  0171B8  90D8               	bcf	status,0,c
 15697  0171BA  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15698  0171BC                     u10244:
 15699  0171BC  0100               	movlb	0	; () banked
 15700  0171BE  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15701  0171C0  D7FA               	goto	u10245
 15702  0171C2  0100               	movlb	0	; () banked
 15703  0171C4  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15704  0171C6  0AFF               	xorlw	255
 15705  0171C8  0100               	movlb	0	; () banked
 15706  0171CA  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 15707  0171CC  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15708  0171D0  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15709  0171D4  0100               	movlb	0	; () banked
 15710  0171D6  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 15711  0171D8  16DF               	andwf	indf2,f,c
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 15715  0171DA  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15716  0171DE  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 15717  0171E2  0100               	movlb	0	; () banked
 15718  0171E4  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 15719  0171E6  D003               	goto	u10254
 15720  0171E8                     u10255:
 15721  0171E8  0100               	movlb	0	; () banked
 15722  0171EA  90D8               	bcf	status,0,c
 15723  0171EC  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15724  0171EE                     u10254:
 15725  0171EE  0100               	movlb	0	; () banked
 15726  0171F0  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 15727  0171F2  D7FA               	goto	u10255
 15728  0171F4  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15729  0171F8  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15730  0171FC  0100               	movlb	0	; () banked
 15731  0171FE  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15732  017200  12DF               	iorwf	indf2,f,c
 15733                           
 15734                           ; BSR set to: 0
 15735  017202  0012               	return		;funcret
 15736  017204                     __end_of_Byte_SetBit:
 15737                           	opt stack 0
 15738                           tosu	equ	0xFFF
 15739                           tosh	equ	0xFFE
 15740                           tosl	equ	0xFFD
 15741                           pclath	equ	0xFFA
 15742                           tblptru	equ	0xFF8
 15743                           tblptrh	equ	0xFF7
 15744                           tblptrl	equ	0xFF6
 15745                           tablat	equ	0xFF5
 15746                           prodh	equ	0xFF4
 15747                           prodl	equ	0xFF3
 15748                           intcon	equ	0xFF2
 15749                           postinc0	equ	0xFEE
 15750                           wreg	equ	0xFE8
 15751                           indf1	equ	0xFE7
 15752                           postdec1	equ	0xFE5
 15753                           fsr1h	equ	0xFE2
 15754                           fsr1l	equ	0xFE1
 15755                           indf2	equ	0xFDF
 15756                           postinc2	equ	0xFDE
 15757                           postdec2	equ	0xFDD
 15758                           plusw2	equ	0xFDB
 15759                           fsr2h	equ	0xFDA
 15760                           fsr2l	equ	0xFD9
 15761                           status	equ	0xFD8
 15762                           
 15763 ;; *************** function _Port_SetQuadType *****************
 15764 ;; Defined at:
 15765 ;;		line 399 in file "Library/Port.c"
 15766 ;; Parameters:    Size  Location     Type
 15767 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15768 ;;		 -> PortB(10), PortD(10), 
 15769 ;;  pQuad           1   56[BANK0 ] enum E6776
 15770 ;;  pType           1   57[BANK0 ] enum E6795
 15771 ;; Auto vars:     Size  Location     Type
 15772 ;;  Output          1   58[BANK0 ] enum E6475
 15773 ;; Return value:  Size  Location     Type
 15774 ;;                  1    wreg      enum E6475
 15775 ;; Registers used:
 15776 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15777 ;; Tracked objects:
 15778 ;;		On entry : 0/0
 15779 ;;		On exit  : 0/0
 15780 ;;		Unchanged: 0/0
 15781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15782 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15785 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15786 ;;Total ram usage:        5 bytes
 15787 ;; Hardware stack levels used:    1
 15788 ;; Hardware stack levels required when called:   13
 15789 ;; This function calls:
 15790 ;;		_Byte_SetQuad
 15791 ;;		_Port_CheckQuadType
 15792 ;;		_Word_SetPair
 15793 ;; This function is called by:
 15794 ;;		_MXK_InitDIPSwitch
 15795 ;;		_MXK_Init
 15796 ;; This function uses a non-reentrant model
 15797 ;;
 15798                           
 15799                           	psect	text80
 15800  012AD6                     __ptext80:
 15801                           	opt stack 0
 15802  012AD6                     _Port_SetQuadType:
 15803                           	opt stack 15
 15804                           
 15805                           ;Port.c: 401: ePinError Output = ePinErrorState;
 15806                           
 15807                           ; BSR set to: 0
 15808                           ;incstack = 0
 15809  012AD6  0E05               	movlw	5
 15810  012AD8  0100               	movlb	0	; () banked
 15811  012ADA  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15812                           
 15813                           ;Port.c: 403: switch (pType)
 15814  012ADC  D0C7               	goto	l476
 15815  012ADE                     
 15816                           ; BSR set to: 0
 15817                           ;Port.c: 407: {
 15818                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15819                           
 15820                           ; BSR set to: 0
 15821  012ADE  0100               	movlb	0	; () banked
 15822  012AE0  EE20 F002          	lfsr	2,2
 15823  012AE4  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15824  012AE6  26D9               	addwf	fsr2l,f,c
 15825  012AE8  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15826  012AEA  22DA               	addwfc	fsr2h,f,c
 15827  012AEC  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15828  012AF0  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15829  012AF4  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15830  012AF8  0E0F               	movlw	15
 15831  012AFA  0100               	movlb	0	; () banked
 15832  012AFC  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15833  012AFE  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 15834                           
 15835                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15836  012B02  0100               	movlb	0	; () banked
 15837  012B04  EE20 F004          	lfsr	2,4
 15838  012B08  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15839  012B0A  26D9               	addwf	fsr2l,f,c
 15840  012B0C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15841  012B0E  22DA               	addwfc	fsr2h,f,c
 15842  012B10  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15843  012B14  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15844  012B18  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15845  012B1C  0E00               	movlw	0
 15846  012B1E  0100               	movlb	0	; () banked
 15847  012B20  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15848  012B22  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 15849                           
 15850                           ;Port.c: 413: }
 15851                           ;Port.c: 415: break;
 15852  012B26  D0B0               	goto	l478
 15853  012B28                     
 15854                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15855  012B28  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15856  012B2C  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15857  012B30  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15858  012B34  0E03               	movlw	3
 15859  012B36  0100               	movlb	0	; () banked
 15860  012B38  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15861  012B3A  ECC0  F0B9         	call	_Port_CheckQuadType	;wreg free
 15862  012B3E  0100               	movlb	0	; () banked
 15863  012B40  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15864  012B42  0100               	movlb	0	; () banked
 15865  012B44  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15866  012B46  A4D8               	btfss	status,2,c
 15867  012B48  0012               	return	
 15868                           
 15869                           ; BSR set to: 0
 15870                           ;Port.c: 418: {
 15871                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15872  012B4A  0100               	movlb	0	; () banked
 15873  012B4C  EE20 F002          	lfsr	2,2
 15874  012B50  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15875  012B52  26D9               	addwf	fsr2l,f,c
 15876  012B54  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15877  012B56  22DA               	addwfc	fsr2h,f,c
 15878  012B58  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15879  012B5C  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15880  012B60  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15881  012B64  0E00               	movlw	0
 15882  012B66  0100               	movlb	0	; () banked
 15883  012B68  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15884  012B6A  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 15885                           
 15886                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15887  012B6E  0100               	movlb	0	; () banked
 15888  012B70  EE20 F004          	lfsr	2,4
 15889  012B74  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15890  012B76  26D9               	addwf	fsr2l,f,c
 15891  012B78  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15892  012B7A  22DA               	addwfc	fsr2h,f,c
 15893  012B7C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15894  012B80  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15895  012B84  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15896  012B88  0E00               	movlw	0
 15897  012B8A  0100               	movlb	0	; () banked
 15898  012B8C  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15899  012B8E  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 15900                           
 15901                           ;Port.c: 424: }
 15902  012B92  D07A               	goto	l478
 15903  012B94                     
 15904                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15905  012B94  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15906  012B98  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15907  012B9C  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15908  012BA0  0E03               	movlw	3
 15909  012BA2  0100               	movlb	0	; () banked
 15910  012BA4  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15911  012BA6  ECC0  F0B9         	call	_Port_CheckQuadType	;wreg free
 15912  012BAA  0100               	movlb	0	; () banked
 15913  012BAC  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15914  012BAE  0100               	movlb	0	; () banked
 15915  012BB0  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15916  012BB2  A4D8               	btfss	status,2,c
 15917  012BB4  0012               	return	
 15918                           
 15919                           ; BSR set to: 0
 15920                           ;Port.c: 429: {
 15921                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15922  012BB6  0100               	movlb	0	; () banked
 15923  012BB8  EE20 F002          	lfsr	2,2
 15924  012BBC  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15925  012BBE  26D9               	addwf	fsr2l,f,c
 15926  012BC0  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15927  012BC2  22DA               	addwfc	fsr2h,f,c
 15928  012BC4  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15929  012BC8  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15930  012BCC  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15931  012BD0  0E0F               	movlw	15
 15932  012BD2  0100               	movlb	0	; () banked
 15933  012BD4  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15934  012BD6  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 15935                           
 15936                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 15937  012BDA  0100               	movlb	0	; () banked
 15938  012BDC  EE20 F004          	lfsr	2,4
 15939  012BE0  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15940  012BE2  26D9               	addwf	fsr2l,f,c
 15941  012BE4  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15942  012BE6  22DA               	addwfc	fsr2h,f,c
 15943  012BE8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15944  012BEC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15945  012BF0  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15946  012BF4  0E0F               	movlw	15
 15947  012BF6  0100               	movlb	0	; () banked
 15948  012BF8  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15949  012BFA  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 15950                           
 15951                           ;Port.c: 435: }
 15952  012BFE  D044               	goto	l478
 15953  012C00                     
 15954                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15955  012C00  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15956  012C04  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15957  012C08  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15958  012C0C  0E03               	movlw	3
 15959  012C0E  0100               	movlb	0	; () banked
 15960  012C10  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15961  012C12  ECC0  F0B9         	call	_Port_CheckQuadType	;wreg free
 15962  012C16  0100               	movlb	0	; () banked
 15963  012C18  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 15964  012C1A  0100               	movlb	0	; () banked
 15965  012C1C  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 15966  012C1E  A4D8               	btfss	status,2,c
 15967  012C20  0012               	return	
 15968                           
 15969                           ; BSR set to: 0
 15970                           ;Port.c: 440: {
 15971                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15972  012C22  0100               	movlb	0	; () banked
 15973  012C24  EE20 F002          	lfsr	2,2
 15974  012C28  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15975  012C2A  26D9               	addwf	fsr2l,f,c
 15976  012C2C  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15977  012C2E  22DA               	addwfc	fsr2h,f,c
 15978  012C30  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15979  012C34  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15980  012C38  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15981  012C3C  0E00               	movlw	0
 15982  012C3E  0100               	movlb	0	; () banked
 15983  012C40  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15984  012C42  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 15985                           
 15986                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15987  012C46  0100               	movlb	0	; () banked
 15988  012C48  EE20 F004          	lfsr	2,4
 15989  012C4C  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15990  012C4E  26D9               	addwf	fsr2l,f,c
 15991  012C50  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15992  012C52  22DA               	addwfc	fsr2h,f,c
 15993  012C54  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15994  012C58  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15995  012C5C  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15996  012C60  0E00               	movlw	0
 15997  012C62  0100               	movlb	0	; () banked
 15998  012C64  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15999  012C66  ECAF  F0BE         	call	_Byte_SetQuad	;wreg free
 16000                           
 16001                           ;Port.c: 446: }
 16002  012C6A  D00E               	goto	l478
 16003  012C6C                     l476:
 16004  012C6C  0100               	movlb	0	; () banked
 16005  012C6E  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 16006                           
 16007                           ; Switch size 1, requested type "space"
 16008                           ; Number of cases is 4, Range of values is 0 to 3
 16009                           ; switch strategies available:
 16010                           ; Name         Instructions Cycles
 16011                           ; simple_byte           13     7 (average)
 16012                           ;	Chosen strategy is simple_byte
 16013  012C70  0A00               	xorlw	0	; case 0
 16014  012C72  B4D8               	btfsc	status,2,c
 16015  012C74  D734               	goto	l477
 16016  012C76  0A01               	xorlw	1	; case 1
 16017  012C78  B4D8               	btfsc	status,2,c
 16018  012C7A  D756               	goto	l479
 16019  012C7C  0A03               	xorlw	3	; case 2
 16020  012C7E  B4D8               	btfsc	status,2,c
 16021  012C80  D789               	goto	l483
 16022  012C82  0A01               	xorlw	1	; case 3
 16023  012C84  B4D8               	btfsc	status,2,c
 16024  012C86  D7BC               	goto	l486
 16025  012C88                     l478:
 16026                           
 16027                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 16028                           
 16029                           ; BSR set to: 0
 16030  012C88  0E08               	movlw	8
 16031  012C8A  0100               	movlb	0	; () banked
 16032  012C8C  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16033  012C8E  0100               	movlb	0	; () banked
 16034  012C90  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16035  012C92  0E00               	movlw	0
 16036  012C94  0100               	movlb	0	; () banked
 16037  012C96  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16038  012C98  0100               	movlb	0	; () banked
 16039  012C9A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16040  012C9C  0100               	movlb	0	; () banked
 16041  012C9E  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16042  012CA0  0D04               	mullw	4
 16043  012CA2  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 16044  012CA6  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16045  012CAA  ECBA  F0BB         	call	_Word_SetPair	;wreg free
 16046                           
 16047                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 16048  012CAE  0E08               	movlw	8
 16049  012CB0  0100               	movlb	0	; () banked
 16050  012CB2  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16051  012CB4  0100               	movlb	0	; () banked
 16052  012CB6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16053  012CB8  0E00               	movlw	0
 16054  012CBA  0100               	movlb	0	; () banked
 16055  012CBC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16056  012CBE  0100               	movlb	0	; () banked
 16057  012CC0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16058  012CC2  0100               	movlb	0	; () banked
 16059  012CC4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16060  012CC6  0D04               	mullw	4
 16061  012CC8  28F3               	incf	prodl,w,c
 16062  012CCA  0100               	movlb	0	; () banked
 16063  012CCC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16064  012CCE  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16065  012CD2  ECBA  F0BB         	call	_Word_SetPair	;wreg free
 16066                           
 16067                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 16068  012CD6  0E08               	movlw	8
 16069  012CD8  0100               	movlb	0	; () banked
 16070  012CDA  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16071  012CDC  0100               	movlb	0	; () banked
 16072  012CDE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16073  012CE0  0E00               	movlw	0
 16074  012CE2  0100               	movlb	0	; () banked
 16075  012CE4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16076  012CE6  0100               	movlb	0	; () banked
 16077  012CE8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16078  012CEA  0100               	movlb	0	; () banked
 16079  012CEC  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16080  012CEE  0D04               	mullw	4
 16081  012CF0  50F3               	movf	prodl,w,c
 16082  012CF2  0F02               	addlw	2
 16083  012CF4  0100               	movlb	0	; () banked
 16084  012CF6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16085  012CF8  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16086  012CFC  ECBA  F0BB         	call	_Word_SetPair	;wreg free
 16087                           
 16088                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 16089  012D00  0E08               	movlw	8
 16090  012D02  0100               	movlb	0	; () banked
 16091  012D04  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 16092  012D06  0100               	movlb	0	; () banked
 16093  012D08  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 16094  012D0A  0E00               	movlw	0
 16095  012D0C  0100               	movlb	0	; () banked
 16096  012D0E  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 16097  012D10  0100               	movlb	0	; () banked
 16098  012D12  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16099  012D14  0100               	movlb	0	; () banked
 16100  012D16  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 16101  012D18  0D04               	mullw	4
 16102  012D1A  50F3               	movf	prodl,w,c
 16103  012D1C  0F03               	addlw	3
 16104  012D1E  0100               	movlb	0	; () banked
 16105  012D20  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 16106  012D22  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 16107  012D26  ECBA  F0BB         	call	_Word_SetPair	;wreg free
 16108  012D2A  0012               	return	
 16109  012D2C                     __end_of_Port_SetQuadType:
 16110                           	opt stack 0
 16111                           tosu	equ	0xFFF
 16112                           tosh	equ	0xFFE
 16113                           tosl	equ	0xFFD
 16114                           pclath	equ	0xFFA
 16115                           tblptru	equ	0xFF8
 16116                           tblptrh	equ	0xFF7
 16117                           tblptrl	equ	0xFF6
 16118                           tablat	equ	0xFF5
 16119                           prodh	equ	0xFF4
 16120                           prodl	equ	0xFF3
 16121                           intcon	equ	0xFF2
 16122                           postinc0	equ	0xFEE
 16123                           wreg	equ	0xFE8
 16124                           indf1	equ	0xFE7
 16125                           postdec1	equ	0xFE5
 16126                           fsr1h	equ	0xFE2
 16127                           fsr1l	equ	0xFE1
 16128                           indf2	equ	0xFDF
 16129                           postinc2	equ	0xFDE
 16130                           postdec2	equ	0xFDD
 16131                           plusw2	equ	0xFDB
 16132                           fsr2h	equ	0xFDA
 16133                           fsr2l	equ	0xFD9
 16134                           status	equ	0xFD8
 16135                           
 16136 ;; *************** function _Word_SetPair *****************
 16137 ;; Defined at:
 16138 ;;		line 149 in file "Library/Types.c"
 16139 ;; Parameters:    Size  Location     Type
 16140 ;;  pInput          2   15[BANK0 ] PTR struct Word
 16141 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16142 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16143 ;;  pPair           1   17[BANK0 ] unsigned char 
 16144 ;;  pValue          1   18[BANK0 ] unsigned char 
 16145 ;; Auto vars:     Size  Location     Type
 16146 ;;		None
 16147 ;; Return value:  Size  Location     Type
 16148 ;;                  1    wreg      void 
 16149 ;; Registers used:
 16150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16151 ;; Tracked objects:
 16152 ;;		On entry : 0/0
 16153 ;;		On exit  : 0/0
 16154 ;;		Unchanged: 0/0
 16155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16156 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16159 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16160 ;;Total ram usage:        4 bytes
 16161 ;; Hardware stack levels used:    1
 16162 ;; Hardware stack levels required when called:    9
 16163 ;; This function calls:
 16164 ;;		_Byte_SetPair
 16165 ;; This function is called by:
 16166 ;;		_Port_SetPinType
 16167 ;;		_Port_SetQuadType
 16168 ;;		_Port_SetType
 16169 ;;		_Port_SetPairType
 16170 ;;		_PortProperty_Init
 16171 ;; This function uses a non-reentrant model
 16172 ;;
 16173                           
 16174                           	psect	text81
 16175  017774                     __ptext81:
 16176                           	opt stack 0
 16177  017774                     _Word_SetPair:
 16178                           	opt stack 18
 16179                           
 16180                           ;Types.c: 151: if (pPair >= 4)
 16181                           
 16182                           ;incstack = 0
 16183  017774  0E03               	movlw	3
 16184  017776  0100               	movlb	0	; () banked
 16185  017778  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 16186  01777A  D014               	goto	l776
 16187                           
 16188                           ; BSR set to: 0
 16189                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 16190  01777C  0E01               	movlw	1
 16191  01777E  0100               	movlb	0	; () banked
 16192  017780  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 16193  017782  0100               	movlb	0	; () banked
 16194  017784  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 16195  017786  0E00               	movlw	0
 16196  017788  0100               	movlb	0	; () banked
 16197  01778A  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 16198  01778C  0100               	movlb	0	; () banked
 16199  01778E  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 16200  017790  0100               	movlb	0	; () banked
 16201  017792  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 16202  017794  0FFC               	addlw	252
 16203  017796  0100               	movlb	0	; () banked
 16204  017798  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 16205  01779A  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 16206  01779E  EC9E  F0BE         	call	_Byte_SetPair	;wreg free
 16207  0177A2  0012               	return	
 16208  0177A4                     l776:
 16209                           
 16210                           ;Types.c: 153: else
 16211                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 16212  0177A4  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 16213  0177A8  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 16214  0177AC  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 16215  0177B0  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 16216  0177B4  EC9E  F0BE         	call	_Byte_SetPair	;wreg free
 16217  0177B8  0012               	return	
 16218  0177BA                     __end_of_Word_SetPair:
 16219                           	opt stack 0
 16220                           tosu	equ	0xFFF
 16221                           tosh	equ	0xFFE
 16222                           tosl	equ	0xFFD
 16223                           pclath	equ	0xFFA
 16224                           tblptru	equ	0xFF8
 16225                           tblptrh	equ	0xFF7
 16226                           tblptrl	equ	0xFF6
 16227                           tablat	equ	0xFF5
 16228                           prodh	equ	0xFF4
 16229                           prodl	equ	0xFF3
 16230                           intcon	equ	0xFF2
 16231                           postinc0	equ	0xFEE
 16232                           wreg	equ	0xFE8
 16233                           indf1	equ	0xFE7
 16234                           postdec1	equ	0xFE5
 16235                           fsr1h	equ	0xFE2
 16236                           fsr1l	equ	0xFE1
 16237                           indf2	equ	0xFDF
 16238                           postinc2	equ	0xFDE
 16239                           postdec2	equ	0xFDD
 16240                           plusw2	equ	0xFDB
 16241                           fsr2h	equ	0xFDA
 16242                           fsr2l	equ	0xFD9
 16243                           status	equ	0xFD8
 16244                           
 16245 ;; *************** function _Byte_SetPair *****************
 16246 ;; Defined at:
 16247 ;;		line 83 in file "Library/Types.c"
 16248 ;; Parameters:    Size  Location     Type
 16249 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 16250 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 16251 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 16252 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 16253 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 16254 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 16255 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 16256 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 16257 ;;		 -> NULL(0), 
 16258 ;;  pPair           1   13[BANK0 ] unsigned char 
 16259 ;;  pValue          1   14[BANK0 ] unsigned char 
 16260 ;; Auto vars:     Size  Location     Type
 16261 ;;		None
 16262 ;; Return value:  Size  Location     Type
 16263 ;;                  1    wreg      void 
 16264 ;; Registers used:
 16265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16266 ;; Tracked objects:
 16267 ;;		On entry : 0/0
 16268 ;;		On exit  : 0/0
 16269 ;;		Unchanged: 0/0
 16270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16271 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16274 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16275 ;;Total ram usage:        4 bytes
 16276 ;; Hardware stack levels used:    1
 16277 ;; Hardware stack levels required when called:    8
 16278 ;; This function calls:
 16279 ;;		_Byte_SetZone
 16280 ;; This function is called by:
 16281 ;;		_Word_SetPair
 16282 ;;		_Port_SetPairType
 16283 ;;		_Port_SetPair
 16284 ;; This function uses a non-reentrant model
 16285 ;;
 16286                           
 16287                           	psect	text82
 16288  017D3C                     __ptext82:
 16289                           	opt stack 0
 16290  017D3C                     _Byte_SetPair:
 16291                           	opt stack 18
 16292                           
 16293                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 16294                           
 16295                           ;incstack = 0
 16296  017D3C  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 16297  017D40  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 16298  017D44  0E04               	movlw	4
 16299  017D46  0100               	movlb	0	; () banked
 16300  017D48  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 16301  017D4A  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 16302  017D4E  0E02               	movlw	2
 16303  017D50  0100               	movlb	0	; () banked
 16304  017D52  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 16305  017D54  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 16306  017D58  EC14  F0AE         	call	_Byte_SetZone	;wreg free
 16307  017D5C  0012               	return		;funcret
 16308  017D5E                     __end_of_Byte_SetPair:
 16309                           	opt stack 0
 16310                           tosu	equ	0xFFF
 16311                           tosh	equ	0xFFE
 16312                           tosl	equ	0xFFD
 16313                           pclath	equ	0xFFA
 16314                           tblptru	equ	0xFF8
 16315                           tblptrh	equ	0xFF7
 16316                           tblptrl	equ	0xFF6
 16317                           tablat	equ	0xFF5
 16318                           prodh	equ	0xFF4
 16319                           prodl	equ	0xFF3
 16320                           intcon	equ	0xFF2
 16321                           postinc0	equ	0xFEE
 16322                           wreg	equ	0xFE8
 16323                           indf1	equ	0xFE7
 16324                           postdec1	equ	0xFE5
 16325                           fsr1h	equ	0xFE2
 16326                           fsr1l	equ	0xFE1
 16327                           indf2	equ	0xFDF
 16328                           postinc2	equ	0xFDE
 16329                           postdec2	equ	0xFDD
 16330                           plusw2	equ	0xFDB
 16331                           fsr2h	equ	0xFDA
 16332                           fsr2l	equ	0xFD9
 16333                           status	equ	0xFD8
 16334                           
 16335 ;; *************** function _Port_CheckQuadType *****************
 16336 ;; Defined at:
 16337 ;;		line 126 in file "Library/Port.c"
 16338 ;; Parameters:    Size  Location     Type
 16339 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 16340 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16341 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16342 ;;  pQuad           1   49[BANK0 ] enum E6776
 16343 ;;  pDrive          1   50[BANK0 ] enum E6469
 16344 ;; Auto vars:     Size  Location     Type
 16345 ;;  Output          1   53[BANK0 ] enum E6475
 16346 ;;  Pair2           1   52[BANK0 ] enum E6760
 16347 ;;  Pair1           1   51[BANK0 ] enum E6760
 16348 ;; Return value:  Size  Location     Type
 16349 ;;                  1    wreg      enum E6475
 16350 ;; Registers used:
 16351 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16352 ;; Tracked objects:
 16353 ;;		On entry : 0/0
 16354 ;;		On exit  : 0/0
 16355 ;;		Unchanged: 0/0
 16356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16357 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16358 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16360 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16361 ;;Total ram usage:        7 bytes
 16362 ;; Hardware stack levels used:    1
 16363 ;; Hardware stack levels required when called:   12
 16364 ;; This function calls:
 16365 ;;		_Port_CheckPairType
 16366 ;; This function is called by:
 16367 ;;		_Port_CheckPortType
 16368 ;;		_Port_SetQuadType
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           	psect	text83
 16373  017380                     __ptext83:
 16374                           	opt stack 0
 16375  017380                     _Port_CheckQuadType:
 16376                           	opt stack 14
 16377                           
 16378                           ;Port.c: 128: ePinError Output = ePinErrorState;
 16379                           
 16380                           ;incstack = 0
 16381  017380  0E05               	movlw	5
 16382  017382  0100               	movlb	0	; () banked
 16383  017384  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 16384                           
 16385                           ; BSR set to: 0
 16386                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 16387  017386  0100               	movlb	0	; () banked
 16388  017388  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 16389  01738A  0D02               	mullw	2
 16390  01738C  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 16391                           
 16392                           ; BSR set to: 0
 16393                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 16394  017390  0100               	movlb	0	; () banked
 16395  017392  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 16396  017394  0D02               	mullw	2
 16397  017396  28F3               	incf	prodl,w,c
 16398  017398  0100               	movlb	0	; () banked
 16399  01739A  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 16400                           
 16401                           ; BSR set to: 0
 16402                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 16403  01739C  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 16404  0173A0  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 16405  0173A4  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 16406  0173A8  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16407  0173AC  EC34  F0B8         	call	_Port_CheckPairType	;wreg free
 16408  0173B0  0100               	movlb	0	; () banked
 16409  0173B2  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 16410  0173B4  0100               	movlb	0	; () banked
 16411  0173B6  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16412  0173B8  A4D8               	btfss	status,2,c
 16413  0173BA  D00C               	goto	l393
 16414                           
 16415                           ; BSR set to: 0
 16416                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 16417  0173BC  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 16418  0173C0  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 16419  0173C4  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 16420  0173C8  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16421  0173CC  EC34  F0B8         	call	_Port_CheckPairType	;wreg free
 16422  0173D0  0100               	movlb	0	; () banked
 16423  0173D2  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 16424  0173D4                     l393:
 16425                           
 16426                           ; BSR set to: 0
 16427                           ;Port.c: 136: return Output;
 16428                           
 16429                           ; BSR set to: 0
 16430  0173D4  0100               	movlb	0	; () banked
 16431  0173D6  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16432  0173D8  0012               	return	
 16433  0173DA                     __end_of_Port_CheckQuadType:
 16434                           	opt stack 0
 16435                           tosu	equ	0xFFF
 16436                           tosh	equ	0xFFE
 16437                           tosl	equ	0xFFD
 16438                           pclath	equ	0xFFA
 16439                           tblptru	equ	0xFF8
 16440                           tblptrh	equ	0xFF7
 16441                           tblptrl	equ	0xFF6
 16442                           tablat	equ	0xFF5
 16443                           prodh	equ	0xFF4
 16444                           prodl	equ	0xFF3
 16445                           intcon	equ	0xFF2
 16446                           postinc0	equ	0xFEE
 16447                           wreg	equ	0xFE8
 16448                           indf1	equ	0xFE7
 16449                           postdec1	equ	0xFE5
 16450                           fsr1h	equ	0xFE2
 16451                           fsr1l	equ	0xFE1
 16452                           indf2	equ	0xFDF
 16453                           postinc2	equ	0xFDE
 16454                           postdec2	equ	0xFDD
 16455                           plusw2	equ	0xFDB
 16456                           fsr2h	equ	0xFDA
 16457                           fsr2l	equ	0xFD9
 16458                           status	equ	0xFD8
 16459                           
 16460 ;; *************** function _Port_CheckPairType *****************
 16461 ;; Defined at:
 16462 ;;		line 112 in file "Library/Port.c"
 16463 ;; Parameters:    Size  Location     Type
 16464 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16465 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16466 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16467 ;;  pPair           1   40[BANK0 ] enum E6760
 16468 ;;  pDrive          1   41[BANK0 ] enum E6469
 16469 ;; Auto vars:     Size  Location     Type
 16470 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 16471 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16472 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16473 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16474 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16475 ;;  Output          1   44[BANK0 ] enum E6475
 16476 ;;  Pin2            1   43[BANK0 ] enum E6750
 16477 ;;  Pin1            1   42[BANK0 ] enum E6750
 16478 ;; Return value:  Size  Location     Type
 16479 ;;                  1    wreg      enum E6475
 16480 ;; Registers used:
 16481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16482 ;; Tracked objects:
 16483 ;;		On entry : 0/0
 16484 ;;		On exit  : 0/0
 16485 ;;		Unchanged: 0/0
 16486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16488 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16490 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16491 ;;Total ram usage:        9 bytes
 16492 ;; Hardware stack levels used:    1
 16493 ;; Hardware stack levels required when called:   11
 16494 ;; This function calls:
 16495 ;;		_PortProperty_Valid
 16496 ;; This function is called by:
 16497 ;;		_Port_CheckQuadType
 16498 ;;		_Port_SetPairType
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           	psect	text84
 16503  017068                     __ptext84:
 16504                           	opt stack 0
 16505  017068                     _Port_CheckPairType:
 16506                           	opt stack 14
 16507                           
 16508                           ;Port.c: 114: ePinError Output = ePinErrorState;
 16509                           
 16510                           ; BSR set to: 0
 16511                           ;incstack = 0
 16512  017068  0E05               	movlw	5
 16513  01706A  0100               	movlb	0	; () banked
 16514  01706C  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16515                           
 16516                           ; BSR set to: 0
 16517                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 16518  01706E  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 16519  017072  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 16520  017076  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 16521  01707A  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 16522                           
 16523                           ; BSR set to: 0
 16524                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 16525  01707E  0100               	movlb	0	; () banked
 16526  017080  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16527  017082  0D02               	mullw	2
 16528  017084  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 16529                           
 16530                           ; BSR set to: 0
 16531                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 16532  017088  0100               	movlb	0	; () banked
 16533  01708A  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16534  01708C  0D02               	mullw	2
 16535  01708E  28F3               	incf	prodl,w,c
 16536  017090  0100               	movlb	0	; () banked
 16537  017092  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 16538                           
 16539                           ; BSR set to: 0
 16540                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 16541  017094  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16542  017098  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16543  01709C  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16544  0170A0  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 16545  0170A4  EC81  F0B5         	call	_PortProperty_Valid	;wreg free
 16546  0170A8  0100               	movlb	0	; () banked
 16547  0170AA  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16548  0170AC  0100               	movlb	0	; () banked
 16549  0170AE  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16550  0170B0  A4D8               	btfss	status,2,c
 16551  0170B2  D00C               	goto	l389
 16552                           
 16553                           ; BSR set to: 0
 16554                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 16555  0170B4  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16556  0170B8  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16557  0170BC  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16558  0170C0  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 16559  0170C4  EC81  F0B5         	call	_PortProperty_Valid	;wreg free
 16560  0170C8  0100               	movlb	0	; () banked
 16561  0170CA  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 16562  0170CC                     l389:
 16563                           
 16564                           ; BSR set to: 0
 16565                           ;Port.c: 124: return Output;
 16566                           
 16567                           ; BSR set to: 0
 16568  0170CC  0100               	movlb	0	; () banked
 16569  0170CE  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 16570  0170D0  0012               	return	
 16571  0170D2                     __end_of_Port_CheckPairType:
 16572                           	opt stack 0
 16573                           tosu	equ	0xFFF
 16574                           tosh	equ	0xFFE
 16575                           tosl	equ	0xFFD
 16576                           pclath	equ	0xFFA
 16577                           tblptru	equ	0xFF8
 16578                           tblptrh	equ	0xFF7
 16579                           tblptrl	equ	0xFF6
 16580                           tablat	equ	0xFF5
 16581                           prodh	equ	0xFF4
 16582                           prodl	equ	0xFF3
 16583                           intcon	equ	0xFF2
 16584                           postinc0	equ	0xFEE
 16585                           wreg	equ	0xFE8
 16586                           indf1	equ	0xFE7
 16587                           postdec1	equ	0xFE5
 16588                           fsr1h	equ	0xFE2
 16589                           fsr1l	equ	0xFE1
 16590                           indf2	equ	0xFDF
 16591                           postinc2	equ	0xFDE
 16592                           postdec2	equ	0xFDD
 16593                           plusw2	equ	0xFDB
 16594                           fsr2h	equ	0xFDA
 16595                           fsr2l	equ	0xFD9
 16596                           status	equ	0xFD8
 16597                           
 16598 ;; *************** function _PortProperty_Valid *****************
 16599 ;; Defined at:
 16600 ;;		line 220 in file "Library/Types.c"
 16601 ;; Parameters:    Size  Location     Type
 16602 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 16603 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16604 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16605 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16606 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16607 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 16608 ;;  pPin            1   18[BANK0 ] unsigned char 
 16609 ;; Auto vars:     Size  Location     Type
 16610 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 16611 ;;  Pair            1   37[BANK0 ] enum E6469
 16612 ;; Return value:  Size  Location     Type
 16613 ;;                  1    wreg      enum E6475
 16614 ;; Registers used:
 16615 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16616 ;; Tracked objects:
 16617 ;;		On entry : 0/0
 16618 ;;		On exit  : 0/0
 16619 ;;		Unchanged: 0/0
 16620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16621 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16622 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16623 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16624 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16625 ;;Total ram usage:       23 bytes
 16626 ;; Hardware stack levels used:    1
 16627 ;; Hardware stack levels required when called:   10
 16628 ;; This function calls:
 16629 ;;		_Word_GetPair
 16630 ;; This function is called by:
 16631 ;;		_Port_CheckPairType
 16632 ;;		_Port_SetPinType
 16633 ;; This function uses a non-reentrant model
 16634 ;;
 16635                           
 16636                           	psect	text85
 16637  016B02                     __ptext85:
 16638                           	opt stack 0
 16639  016B02                     _PortProperty_Valid:
 16640                           	opt stack 17
 16641                           
 16642                           ;Types.c: 222: ePinDrive Pair;
 16643                           ;Types.c: 223: const ePinError Errors[4][4] =
 16644                           ;Types.c: 224: {
 16645                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 16646                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 16647                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 16648                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 16649                           ;Types.c: 230: };
 16650                           
 16651                           ; BSR set to: 0
 16652                           ;incstack = 0
 16653  016B02  0EAF               	movlw	low PortProperty_Valid@F6830
 16654  016B04  6EF6               	movwf	tblptrl,c
 16655  016B06                     	if	1	;There is more than 1 active tblptr byte
 16656  016B06  0EFC               	movlw	high PortProperty_Valid@F6830
 16657  016B08  6EF7               	movwf	tblptrh,c
 16658  016B0A                     	endif
 16659  016B0A                     	if	1	;There are 3 active tblptr bytes
 16660  016B0A  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 16661  016B0C  6EF8               	movwf	tblptru,c
 16662  016B0E                     	endif
 16663  016B0E  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 16664  016B12  0E0F               	movlw	15
 16665  016B14                     u10210:
 16666  016B14  0009               	tblrd		*+
 16667  016B16  CFF5 FFDE          	movff	tablat,postinc2
 16668  016B1A  06E8               	decf	wreg,f,c
 16669  016B1C  E2FB               	bc	u10210
 16670                           
 16671                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 16672  016B1E  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 16673  016B22  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 16674  016B26  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 16675  016B2A  ECC0  F0BC         	call	_Word_GetPair	;wreg free
 16676  016B2E  0100               	movlb	0	; () banked
 16677  016B30  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 16678                           
 16679                           ; BSR set to: 0
 16680                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 16681  016B32  0E04               	movlw	4
 16682  016B34  0100               	movlb	0	; () banked
 16683  016B36  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 16684  016B38  D020               	goto	l819
 16685                           
 16686                           ; BSR set to: 0
 16687  016B3A  0E04               	movlw	4
 16688  016B3C  0100               	movlb	0	; () banked
 16689  016B3E  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 16690  016B40  D01C               	goto	l819
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 16694  016B42  0100               	movlb	0	; () banked
 16695  016B44  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 16696  016B46  0D04               	mullw	4
 16697  016B48  0E75               	movlw	low PortProperty_Valid@Errors
 16698  016B4A  0100               	movlb	0	; () banked
 16699  016B4C  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 16700  016B4E  0E00               	movlw	high PortProperty_Valid@Errors
 16701  016B50  0100               	movlb	0	; () banked
 16702  016B52  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 16703  016B54  50F3               	movf	prodl,w,c
 16704  016B56  0100               	movlb	0	; () banked
 16705  016B58  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 16706  016B5A  50F4               	movf	prodh,w,c
 16707  016B5C  0100               	movlb	0	; () banked
 16708  016B5E  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 16709  016B60  0100               	movlb	0	; () banked
 16710  016B62  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 16711  016B64  0D01               	mullw	1
 16712  016B66  50F3               	movf	prodl,w,c
 16713  016B68  0100               	movlb	0	; () banked
 16714  016B6A  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 16715  016B6C  6ED9               	movwf	fsr2l,c
 16716  016B6E  50F4               	movf	prodh,w,c
 16717  016B70  0100               	movlb	0	; () banked
 16718  016B72  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 16719  016B74  6EDA               	movwf	fsr2h,c
 16720  016B76  50DF               	movf	indf2,w,c
 16721                           
 16722                           ; BSR set to: 0
 16723  016B78  0012               	return	
 16724  016B7A                     l819:
 16725                           
 16726                           ; BSR set to: 0
 16727                           ;Types.c: 237: return ePinErrorState;
 16728                           
 16729                           ; BSR set to: 0
 16730  016B7A  0E05               	movlw	5
 16731  016B7C  0012               	return	
 16732  016B7E                     __end_of_PortProperty_Valid:
 16733                           	opt stack 0
 16734                           tosu	equ	0xFFF
 16735                           tosh	equ	0xFFE
 16736                           tosl	equ	0xFFD
 16737                           pclath	equ	0xFFA
 16738                           tblptru	equ	0xFF8
 16739                           tblptrh	equ	0xFF7
 16740                           tblptrl	equ	0xFF6
 16741                           tablat	equ	0xFF5
 16742                           prodh	equ	0xFF4
 16743                           prodl	equ	0xFF3
 16744                           intcon	equ	0xFF2
 16745                           postinc0	equ	0xFEE
 16746                           wreg	equ	0xFE8
 16747                           indf1	equ	0xFE7
 16748                           postdec1	equ	0xFE5
 16749                           fsr1h	equ	0xFE2
 16750                           fsr1l	equ	0xFE1
 16751                           indf2	equ	0xFDF
 16752                           postinc2	equ	0xFDE
 16753                           postdec2	equ	0xFDD
 16754                           plusw2	equ	0xFDB
 16755                           fsr2h	equ	0xFDA
 16756                           fsr2l	equ	0xFD9
 16757                           status	equ	0xFD8
 16758                           
 16759 ;; *************** function _Word_GetPair *****************
 16760 ;; Defined at:
 16761 ;;		line 156 in file "Library/Types.c"
 16762 ;; Parameters:    Size  Location     Type
 16763 ;;  pInput          2   12[BANK0 ] PTR struct Word
 16764 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16765 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16766 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16767 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16768 ;;  pPair           1   14[BANK0 ] unsigned char 
 16769 ;; Auto vars:     Size  Location     Type
 16770 ;;		None
 16771 ;; Return value:  Size  Location     Type
 16772 ;;                  1    wreg      unsigned char 
 16773 ;; Registers used:
 16774 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16775 ;; Tracked objects:
 16776 ;;		On entry : 0/0
 16777 ;;		On exit  : 0/0
 16778 ;;		Unchanged: 0/0
 16779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16780 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16783 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16784 ;;Total ram usage:        3 bytes
 16785 ;; Hardware stack levels used:    1
 16786 ;; Hardware stack levels required when called:    9
 16787 ;; This function calls:
 16788 ;;		_Byte_GetPair
 16789 ;; This function is called by:
 16790 ;;		_Port_Init
 16791 ;;		_Port_SetPin
 16792 ;;		_Port_Set
 16793 ;;		_PortProperty_Valid
 16794 ;;		_Port_SetPair
 16795 ;;		_Port_SetQuad
 16796 ;; This function uses a non-reentrant model
 16797 ;;
 16798                           
 16799                           	psect	text86
 16800  017980                     __ptext86:
 16801                           	opt stack 0
 16802  017980                     _Word_GetPair:
 16803                           	opt stack 14
 16804                           
 16805                           ;Types.c: 158: if (pPair >= 4)
 16806                           
 16807                           ; BSR set to: 0
 16808                           ;incstack = 0
 16809  017980  0E03               	movlw	3
 16810  017982  0100               	movlb	0	; () banked
 16811  017984  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 16812  017986  D012               	goto	l781
 16813                           
 16814                           ; BSR set to: 0
 16815                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16816  017988  0E01               	movlw	1
 16817  01798A  0100               	movlb	0	; () banked
 16818  01798C  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 16819  01798E  0100               	movlb	0	; () banked
 16820  017990  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 16821  017992  0E00               	movlw	0
 16822  017994  0100               	movlb	0	; () banked
 16823  017996  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 16824  017998  0100               	movlb	0	; () banked
 16825  01799A  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 16826  01799C  0100               	movlb	0	; () banked
 16827  01799E  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 16828  0179A0  0FFC               	addlw	252
 16829  0179A2  0100               	movlb	0	; () banked
 16830  0179A4  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 16831  0179A6  EC1D  F0BF         	call	_Byte_GetPair	;wreg free
 16832  0179AA  0012               	return	
 16833  0179AC                     l781:
 16834                           
 16835                           ;Types.c: 160: else
 16836                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16837  0179AC  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 16838  0179B0  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 16839  0179B4  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 16840  0179B8  EC1D  F0BF         	call	_Byte_GetPair	;wreg free
 16841  0179BC  0012               	return	
 16842  0179BE                     __end_of_Word_GetPair:
 16843                           	opt stack 0
 16844                           tosu	equ	0xFFF
 16845                           tosh	equ	0xFFE
 16846                           tosl	equ	0xFFD
 16847                           pclath	equ	0xFFA
 16848                           tblptru	equ	0xFF8
 16849                           tblptrh	equ	0xFF7
 16850                           tblptrl	equ	0xFF6
 16851                           tablat	equ	0xFF5
 16852                           prodh	equ	0xFF4
 16853                           prodl	equ	0xFF3
 16854                           intcon	equ	0xFF2
 16855                           postinc0	equ	0xFEE
 16856                           wreg	equ	0xFE8
 16857                           indf1	equ	0xFE7
 16858                           postdec1	equ	0xFE5
 16859                           fsr1h	equ	0xFE2
 16860                           fsr1l	equ	0xFE1
 16861                           indf2	equ	0xFDF
 16862                           postinc2	equ	0xFDE
 16863                           postdec2	equ	0xFDD
 16864                           plusw2	equ	0xFDB
 16865                           fsr2h	equ	0xFDA
 16866                           fsr2l	equ	0xFD9
 16867                           status	equ	0xFD8
 16868                           
 16869 ;; *************** function _Byte_GetPair *****************
 16870 ;; Defined at:
 16871 ;;		line 87 in file "Library/Types.c"
 16872 ;; Parameters:    Size  Location     Type
 16873 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 16874 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16875 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16876 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16877 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16878 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16879 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16880 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16881 ;;		 -> NULL(0), 
 16882 ;;  pPair           1   11[BANK0 ] unsigned char 
 16883 ;; Auto vars:     Size  Location     Type
 16884 ;;		None
 16885 ;; Return value:  Size  Location     Type
 16886 ;;                  1    wreg      unsigned char 
 16887 ;; Registers used:
 16888 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16889 ;; Tracked objects:
 16890 ;;		On entry : 0/0
 16891 ;;		On exit  : 0/0
 16892 ;;		Unchanged: 0/0
 16893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16894 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16897 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16898 ;;Total ram usage:        3 bytes
 16899 ;; Hardware stack levels used:    1
 16900 ;; Hardware stack levels required when called:    8
 16901 ;; This function calls:
 16902 ;;		_Byte_GetZone
 16903 ;; This function is called by:
 16904 ;;		_Word_GetPair
 16905 ;; This function uses a non-reentrant model
 16906 ;;
 16907                           
 16908                           	psect	text87
 16909  017E3A                     __ptext87:
 16910                           	opt stack 0
 16911  017E3A                     _Byte_GetPair:
 16912                           	opt stack 14
 16913                           
 16914                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16915                           
 16916                           ;incstack = 0
 16917  017E3A  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 16918  017E3E  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 16919  017E42  0E04               	movlw	4
 16920  017E44  0100               	movlb	0	; () banked
 16921  017E46  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 16922  017E48  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 16923  017E4C  0E02               	movlw	2
 16924  017E4E  0100               	movlb	0	; () banked
 16925  017E50  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 16926  017E52  ECB9  F0B2         	call	_Byte_GetZone	;wreg free
 16927  017E56  0012               	return	
 16928  017E58                     __end_of_Byte_GetPair:
 16929                           	opt stack 0
 16930                           tosu	equ	0xFFF
 16931                           tosh	equ	0xFFE
 16932                           tosl	equ	0xFFD
 16933                           pclath	equ	0xFFA
 16934                           tblptru	equ	0xFF8
 16935                           tblptrh	equ	0xFF7
 16936                           tblptrl	equ	0xFF6
 16937                           tablat	equ	0xFF5
 16938                           prodh	equ	0xFF4
 16939                           prodl	equ	0xFF3
 16940                           intcon	equ	0xFF2
 16941                           postinc0	equ	0xFEE
 16942                           wreg	equ	0xFE8
 16943                           indf1	equ	0xFE7
 16944                           postdec1	equ	0xFE5
 16945                           fsr1h	equ	0xFE2
 16946                           fsr1l	equ	0xFE1
 16947                           indf2	equ	0xFDF
 16948                           postinc2	equ	0xFDE
 16949                           postdec2	equ	0xFDD
 16950                           plusw2	equ	0xFDB
 16951                           fsr2h	equ	0xFDA
 16952                           fsr2l	equ	0xFD9
 16953                           status	equ	0xFD8
 16954                           
 16955 ;; *************** function _Byte_GetZone *****************
 16956 ;; Defined at:
 16957 ;;		line 64 in file "Library/Types.c"
 16958 ;; Parameters:    Size  Location     Type
 16959 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16960 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16961 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16962 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16963 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16964 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16965 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16966 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16967 ;;		 -> NULL(0), 
 16968 ;;  pMax            1    2[BANK0 ] unsigned char 
 16969 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16970 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16971 ;; Auto vars:     Size  Location     Type
 16972 ;;  Output          1    8[BANK0 ] unsigned char 
 16973 ;;  Offset          1    7[BANK0 ] unsigned char 
 16974 ;;  MASK            1    6[BANK0 ] unsigned char 
 16975 ;; Return value:  Size  Location     Type
 16976 ;;                  1    wreg      unsigned char 
 16977 ;; Registers used:
 16978 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16984 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;Total ram usage:        9 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; Hardware stack levels required when called:    7
 16991 ;; This function calls:
 16992 ;;		Nothing
 16993 ;; This function is called by:
 16994 ;;		_Byte_GetPair
 16995 ;;		_Byte_GetTriple
 16996 ;;		_Byte_GetQuad
 16997 ;; This function uses a non-reentrant model
 16998 ;;
 16999                           
 17000                           	psect	text88
 17001  016572                     __ptext88:
 17002                           	opt stack 0
 17003  016572                     _Byte_GetZone:
 17004                           	opt stack 14
 17005                           
 17006                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 17007                           
 17008                           ;incstack = 0
 17009  016572  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 17010  016576  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 17011  01657A  0E00               	movlw	low (__mediumconst shr (0+16))
 17012  01657C  6EF8               	movwf	tblptru,c
 17013  01657E  0E0F               	movlw	(high __ramtop+-1)
 17014  016580  64F7               	cpfsgt	tblptrh,c
 17015  016582  D003               	bra	u10177
 17016  016584  0008               	tblrd		*
 17017  016586  50F5               	movf	tablat,w,c
 17018  016588  D005               	bra	u10170
 17019  01658A                     u10177:
 17020  01658A  CFF6 FFE9          	movff	tblptrl,fsr0l
 17021  01658E  CFF7 FFEA          	movff	tblptrh,fsr0h
 17022  016592  50EF               	movf	indf0,w,c
 17023  016594                     u10170:
 17024  016594  0100               	movlb	0	; () banked
 17025  016596  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 17026                           
 17027                           ; BSR set to: 0
 17028                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 17029  016598  0100               	movlb	0	; () banked
 17030  01659A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17031  01659C  0D01               	mullw	1
 17032  01659E  0EBF               	movlw	low _MASKS
 17033  0165A0  24F3               	addwf	prodl,w,c
 17034  0165A2  6EF6               	movwf	tblptrl,c
 17035  0165A4  0EFC               	movlw	high _MASKS
 17036  0165A6  20F4               	addwfc	prodh,w,c
 17037  0165A8  6EF7               	movwf	tblptrh,c
 17038  0165AA                     	if	1	;There are 3 active tblptr bytes
 17039  0165AA  6AF8               	clrf	tblptru,c
 17040  0165AC  0E00               	movlw	low (__mediumconst shr (0+16))
 17041  0165AE  22F8               	addwfc	tblptru,f,c
 17042  0165B0                     	endif
 17043  0165B0  0008               	tblrd		*
 17044  0165B2  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;Types.c: 68: UINT8 Offset = 0;
 17048  0165B6  0E00               	movlw	0
 17049  0165B8  0100               	movlb	0	; () banked
 17050  0165BA  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 17051                           
 17052                           ;Types.c: 70: while (pChunk >= pMax)
 17053  0165BC  D006               	goto	l732
 17054  0165BE                     
 17055                           ; BSR set to: 0
 17056                           ;Types.c: 71: {
 17057                           ;Types.c: 72: pChunk -= pMax;
 17058                           
 17059                           ; BSR set to: 0
 17060  0165BE  0100               	movlb	0	; () banked
 17061  0165C0  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 17062  0165C2  0100               	movlb	0	; () banked
 17063  0165C4  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 17064                           
 17065                           ; BSR set to: 0
 17066                           ;Types.c: 73: Offset += 1;
 17067  0165C6  0100               	movlb	0	; () banked
 17068  0165C8  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 17069  0165CA                     l732:
 17070                           
 17071                           ; BSR set to: 0
 17072                           
 17073                           ; BSR set to: 0
 17074  0165CA  0100               	movlb	0	; () banked
 17075  0165CC  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 17076  0165CE  0100               	movlb	0	; () banked
 17077  0165D0  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 17078  0165D2  B0D8               	btfsc	status,0,c
 17079  0165D4  D7F4               	goto	l733
 17080                           
 17081                           ; BSR set to: 0
 17082                           ;Types.c: 74: }
 17083                           ;Types.c: 75: pChunk *= pChunkSize;
 17084                           
 17085                           ; BSR set to: 0
 17086  0165D6  0100               	movlb	0	; () banked
 17087  0165D8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 17088  0165DA  0100               	movlb	0	; () banked
 17089  0165DC  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 17090  0165DE  50F3               	movf	prodl,w,c
 17091  0165E0  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 17092                           
 17093                           ; BSR set to: 0
 17094                           ;Types.c: 76: pChunk += Offset;
 17095  0165E2  0100               	movlb	0	; () banked
 17096  0165E4  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 17097  0165E6  0100               	movlb	0	; () banked
 17098  0165E8  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 17099                           
 17100                           ; BSR set to: 0
 17101                           ;Types.c: 78: Output >>= pChunk;
 17102  0165EA  0100               	movlb	0	; () banked
 17103  0165EC  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 17104  0165EE  0100               	movlb	0	; () banked
 17105  0165F0  6F65               	movwf	??_Byte_GetZone& (0+255),b
 17106  0165F2  D003               	goto	u10190
 17107  0165F4                     u10195:
 17108  0165F4  0100               	movlb	0	; () banked
 17109  0165F6  90D8               	bcf	status,0,c
 17110  0165F8  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 17111  0165FA                     u10190:
 17112  0165FA  0100               	movlb	0	; () banked
 17113  0165FC  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 17114  0165FE  D7FA               	goto	u10195
 17115                           
 17116                           ;Types.c: 79: Output &= MASK;
 17117  016600  0100               	movlb	0	; () banked
 17118  016602  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 17119  016604  0100               	movlb	0	; () banked
 17120  016606  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 17121                           
 17122                           ; BSR set to: 0
 17123                           ;Types.c: 80: return Output;
 17124  016608  0100               	movlb	0	; () banked
 17125  01660A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 17126  01660C  0012               	return	
 17127  01660E                     __end_of_Byte_GetZone:
 17128                           	opt stack 0
 17129                           tosu	equ	0xFFF
 17130                           tosh	equ	0xFFE
 17131                           tosl	equ	0xFFD
 17132                           pclath	equ	0xFFA
 17133                           tblptru	equ	0xFF8
 17134                           tblptrh	equ	0xFF7
 17135                           tblptrl	equ	0xFF6
 17136                           tablat	equ	0xFF5
 17137                           prodh	equ	0xFF4
 17138                           prodl	equ	0xFF3
 17139                           intcon	equ	0xFF2
 17140                           indf0	equ	0xFEF
 17141                           postinc0	equ	0xFEE
 17142                           fsr0h	equ	0xFEA
 17143                           fsr0l	equ	0xFE9
 17144                           wreg	equ	0xFE8
 17145                           indf1	equ	0xFE7
 17146                           postdec1	equ	0xFE5
 17147                           fsr1h	equ	0xFE2
 17148                           fsr1l	equ	0xFE1
 17149                           indf2	equ	0xFDF
 17150                           postinc2	equ	0xFDE
 17151                           postdec2	equ	0xFDD
 17152                           plusw2	equ	0xFDB
 17153                           fsr2h	equ	0xFDA
 17154                           fsr2l	equ	0xFD9
 17155                           status	equ	0xFD8
 17156                           
 17157 ;; *************** function _Byte_SetQuad *****************
 17158 ;; Defined at:
 17159 ;;		line 101 in file "Library/Types.c"
 17160 ;; Parameters:    Size  Location     Type
 17161 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 17162 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 17163 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17164 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17165 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17166 ;;		 -> NULL(0), 
 17167 ;;  pQuad           1   13[BANK0 ] unsigned char 
 17168 ;;  pValue          1   14[BANK0 ] unsigned char 
 17169 ;; Auto vars:     Size  Location     Type
 17170 ;;		None
 17171 ;; Return value:  Size  Location     Type
 17172 ;;                  1    wreg      void 
 17173 ;; Registers used:
 17174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17175 ;; Tracked objects:
 17176 ;;		On entry : 0/0
 17177 ;;		On exit  : 0/0
 17178 ;;		Unchanged: 0/0
 17179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17180 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17183 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17184 ;;Total ram usage:        4 bytes
 17185 ;; Hardware stack levels used:    1
 17186 ;; Hardware stack levels required when called:    8
 17187 ;; This function calls:
 17188 ;;		_Byte_SetZone
 17189 ;; This function is called by:
 17190 ;;		_Port_SetQuadType
 17191 ;;		_SPI_Init
 17192 ;;		_SPI_MinSpeed
 17193 ;;		_SPI_MaxSpeed
 17194 ;;		_Port_SetQuad
 17195 ;;		_Word_SetQuad
 17196 ;;		_I2C_Init
 17197 ;; This function uses a non-reentrant model
 17198 ;;
 17199                           
 17200                           	psect	text89
 17201  017D5E                     __ptext89:
 17202                           	opt stack 0
 17203  017D5E                     _Byte_SetQuad:
 17204                           	opt stack 19
 17205                           
 17206                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 17207                           
 17208                           ; BSR set to: 0
 17209                           ;incstack = 0
 17210  017D5E  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 17211  017D62  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 17212  017D66  0E02               	movlw	2
 17213  017D68  0100               	movlb	0	; () banked
 17214  017D6A  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 17215  017D6C  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 17216  017D70  0E04               	movlw	4
 17217  017D72  0100               	movlb	0	; () banked
 17218  017D74  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17219  017D76  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 17220  017D7A  EC14  F0AE         	call	_Byte_SetZone	;wreg free
 17221  017D7E  0012               	return		;funcret
 17222  017D80                     __end_of_Byte_SetQuad:
 17223                           	opt stack 0
 17224                           tosu	equ	0xFFF
 17225                           tosh	equ	0xFFE
 17226                           tosl	equ	0xFFD
 17227                           pclath	equ	0xFFA
 17228                           tblptru	equ	0xFF8
 17229                           tblptrh	equ	0xFF7
 17230                           tblptrl	equ	0xFF6
 17231                           tablat	equ	0xFF5
 17232                           prodh	equ	0xFF4
 17233                           prodl	equ	0xFF3
 17234                           intcon	equ	0xFF2
 17235                           indf0	equ	0xFEF
 17236                           postinc0	equ	0xFEE
 17237                           fsr0h	equ	0xFEA
 17238                           fsr0l	equ	0xFE9
 17239                           wreg	equ	0xFE8
 17240                           indf1	equ	0xFE7
 17241                           postdec1	equ	0xFE5
 17242                           fsr1h	equ	0xFE2
 17243                           fsr1l	equ	0xFE1
 17244                           indf2	equ	0xFDF
 17245                           postinc2	equ	0xFDE
 17246                           postdec2	equ	0xFDD
 17247                           plusw2	equ	0xFDB
 17248                           fsr2h	equ	0xFDA
 17249                           fsr2l	equ	0xFD9
 17250                           status	equ	0xFD8
 17251                           
 17252 ;; *************** function _Byte_SetZone *****************
 17253 ;; Defined at:
 17254 ;;		line 47 in file "Library/Types.c"
 17255 ;; Parameters:    Size  Location     Type
 17256 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17257 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17258 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17259 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 17260 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 17261 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17262 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17263 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17264 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17265 ;;  pMax            1    2[BANK0 ] unsigned char 
 17266 ;;  pChunk          1    3[BANK0 ] unsigned char 
 17267 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 17268 ;;  pValue          1    5[BANK0 ] unsigned char 
 17269 ;; Auto vars:     Size  Location     Type
 17270 ;;  MASK            1   10[BANK0 ] unsigned char 
 17271 ;;  Offset          1    9[BANK0 ] unsigned char 
 17272 ;; Return value:  Size  Location     Type
 17273 ;;                  1    wreg      void 
 17274 ;; Registers used:
 17275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 17276 ;; Tracked objects:
 17277 ;;		On entry : 0/0
 17278 ;;		On exit  : 0/0
 17279 ;;		Unchanged: 0/0
 17280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17281 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17282 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17283 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17284 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17285 ;;Total ram usage:       11 bytes
 17286 ;; Hardware stack levels used:    1
 17287 ;; Hardware stack levels required when called:    7
 17288 ;; This function calls:
 17289 ;;		Nothing
 17290 ;; This function is called by:
 17291 ;;		_Byte_SetPair
 17292 ;;		_Byte_SetQuad
 17293 ;;		_Byte_SetTriple
 17294 ;; This function uses a non-reentrant model
 17295 ;;
 17296                           
 17297                           	psect	text90
 17298  015C28                     __ptext90:
 17299                           	opt stack 0
 17300  015C28                     _Byte_SetZone:
 17301                           	opt stack 18
 17302                           
 17303                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 17304                           
 17305                           ;incstack = 0
 17306  015C28  0100               	movlb	0	; () banked
 17307  015C2A  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 17308  015C2C  0D01               	mullw	1
 17309  015C2E  0EBF               	movlw	low _MASKS
 17310  015C30  24F3               	addwf	prodl,w,c
 17311  015C32  6EF6               	movwf	tblptrl,c
 17312  015C34  0EFC               	movlw	high _MASKS
 17313  015C36  20F4               	addwfc	prodh,w,c
 17314  015C38  6EF7               	movwf	tblptrh,c
 17315  015C3A                     	if	1	;There are 3 active tblptr bytes
 17316  015C3A  6AF8               	clrf	tblptru,c
 17317  015C3C  0E00               	movlw	low (__mediumconst shr (0+16))
 17318  015C3E  22F8               	addwfc	tblptru,f,c
 17319  015C40                     	endif
 17320  015C40  0008               	tblrd		*
 17321  015C42  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 17322                           
 17323                           ; BSR set to: 0
 17324                           ;Types.c: 50: UINT8 Offset = 0;
 17325  015C46  0E00               	movlw	0
 17326  015C48  0100               	movlb	0	; () banked
 17327  015C4A  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 17328                           
 17329                           ;Types.c: 52: while (pChunk >= pMax)
 17330  015C4C  D006               	goto	l726
 17331  015C4E                     
 17332                           ; BSR set to: 0
 17333                           ;Types.c: 53: {
 17334                           ;Types.c: 54: pChunk -= pMax;
 17335                           
 17336                           ; BSR set to: 0
 17337  015C4E  0100               	movlb	0	; () banked
 17338  015C50  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 17339  015C52  0100               	movlb	0	; () banked
 17340  015C54  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;Types.c: 55: Offset += 1;
 17344  015C56  0100               	movlb	0	; () banked
 17345  015C58  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 17346  015C5A                     l726:
 17347                           
 17348                           ; BSR set to: 0
 17349                           
 17350                           ; BSR set to: 0
 17351  015C5A  0100               	movlb	0	; () banked
 17352  015C5C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 17353  015C5E  0100               	movlb	0	; () banked
 17354  015C60  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 17355  015C62  B0D8               	btfsc	status,0,c
 17356  015C64  D7F4               	goto	l727
 17357                           
 17358                           ; BSR set to: 0
 17359                           ;Types.c: 56: }
 17360                           ;Types.c: 57: pChunk *= pChunkSize;
 17361                           
 17362                           ; BSR set to: 0
 17363  015C66  0100               	movlb	0	; () banked
 17364  015C68  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 17365  015C6A  0100               	movlb	0	; () banked
 17366  015C6C  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 17367  015C6E  50F3               	movf	prodl,w,c
 17368  015C70  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 17369                           
 17370                           ; BSR set to: 0
 17371                           ;Types.c: 58: pChunk += Offset;
 17372  015C72  0100               	movlb	0	; () banked
 17373  015C74  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 17374  015C76  0100               	movlb	0	; () banked
 17375  015C78  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 17376                           
 17377                           ; BSR set to: 0
 17378                           ;Types.c: 60: pValue &= MASK;
 17379  015C7A  0100               	movlb	0	; () banked
 17380  015C7C  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 17381  015C7E  0100               	movlb	0	; () banked
 17382  015C80  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 17386  015C82  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 17387  015C86  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 17388  015C8A  0100               	movlb	0	; () banked
 17389  015C8C  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 17390  015C8E  D003               	goto	u10274
 17391  015C90                     u10275:
 17392  015C90  0100               	movlb	0	; () banked
 17393  015C92  90D8               	bcf	status,0,c
 17394  015C94  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 17395  015C96                     u10274:
 17396  015C96  0100               	movlb	0	; () banked
 17397  015C98  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 17398  015C9A  D7FA               	goto	u10275
 17399  015C9C  0100               	movlb	0	; () banked
 17400  015C9E  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 17401  015CA0  0AFF               	xorlw	255
 17402  015CA2  0100               	movlb	0	; () banked
 17403  015CA4  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 17404  015CA6  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 17405  015CAA  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 17406  015CAE  0100               	movlb	0	; () banked
 17407  015CB0  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 17408  015CB2  16DF               	andwf	indf2,f,c
 17409                           
 17410                           ; BSR set to: 0
 17411                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 17412  015CB4  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 17413  015CB8  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 17414  015CBC  0100               	movlb	0	; () banked
 17415  015CBE  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 17416  015CC0  D003               	goto	u10284
 17417  015CC2                     u10285:
 17418  015CC2  0100               	movlb	0	; () banked
 17419  015CC4  90D8               	bcf	status,0,c
 17420  015CC6  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 17421  015CC8                     u10284:
 17422  015CC8  0100               	movlb	0	; () banked
 17423  015CCA  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 17424  015CCC  D7FA               	goto	u10285
 17425  015CCE  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 17426  015CD2  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 17427  015CD6  0100               	movlb	0	; () banked
 17428  015CD8  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 17429  015CDA  12DF               	iorwf	indf2,f,c
 17430                           
 17431                           ; BSR set to: 0
 17432  015CDC  0012               	return		;funcret
 17433  015CDE                     __end_of_Byte_SetZone:
 17434                           	opt stack 0
 17435                           tosu	equ	0xFFF
 17436                           tosh	equ	0xFFE
 17437                           tosl	equ	0xFFD
 17438                           pclath	equ	0xFFA
 17439                           tblptru	equ	0xFF8
 17440                           tblptrh	equ	0xFF7
 17441                           tblptrl	equ	0xFF6
 17442                           tablat	equ	0xFF5
 17443                           prodh	equ	0xFF4
 17444                           prodl	equ	0xFF3
 17445                           intcon	equ	0xFF2
 17446                           indf0	equ	0xFEF
 17447                           postinc0	equ	0xFEE
 17448                           fsr0h	equ	0xFEA
 17449                           fsr0l	equ	0xFE9
 17450                           wreg	equ	0xFE8
 17451                           indf1	equ	0xFE7
 17452                           postdec1	equ	0xFE5
 17453                           fsr1h	equ	0xFE2
 17454                           fsr1l	equ	0xFE1
 17455                           indf2	equ	0xFDF
 17456                           postinc2	equ	0xFDE
 17457                           postdec2	equ	0xFDD
 17458                           plusw2	equ	0xFDB
 17459                           fsr2h	equ	0xFDA
 17460                           fsr2l	equ	0xFD9
 17461                           status	equ	0xFD8
 17462                           
 17463 ;; *************** function _FunctInitADC *****************
 17464 ;; Defined at:
 17465 ;;		line 31 in file "Functions.c"
 17466 ;; Parameters:    Size  Location     Type
 17467 ;;		None
 17468 ;; Auto vars:     Size  Location     Type
 17469 ;;		None
 17470 ;; Return value:  Size  Location     Type
 17471 ;;                  1    wreg      void 
 17472 ;; Registers used:
 17473 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17474 ;; Tracked objects:
 17475 ;;		On entry : 0/0
 17476 ;;		On exit  : 0/0
 17477 ;;		Unchanged: 0/0
 17478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17483 ;;Total ram usage:        0 bytes
 17484 ;; Hardware stack levels used:    1
 17485 ;; Hardware stack levels required when called:   10
 17486 ;; This function calls:
 17487 ;;		_ADC_Init
 17488 ;;		_ADC_Sequence
 17489 ;; This function is called by:
 17490 ;;		_initialise
 17491 ;; This function uses a non-reentrant model
 17492 ;;
 17493                           
 17494                           	psect	text91
 17495  015E48                     __ptext91:
 17496                           	opt stack 0
 17497  015E48                     _FunctInitADC:
 17498                           	opt stack 19
 17499                           
 17500                           ;Functions.c: 33: ADC_Init(&ADC_AN0, eADC_Ch0);
 17501                           
 17502                           ; BSR set to: 0
 17503                           ;incstack = 0
 17504  015E48  0EDD               	movlw	low _ADC_AN0
 17505  015E4A  0100               	movlb	0	; () banked
 17506  015E4C  6F64               	movwf	ADC_Init@pInput& (0+255),b
 17507  015E4E  0E01               	movlw	high _ADC_AN0
 17508  015E50  0100               	movlb	0	; () banked
 17509  015E52  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 17510  015E54  0E00               	movlw	0
 17511  015E56  0100               	movlb	0	; () banked
 17512  015E58  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 17513  015E5A  ECBF  F0B5         	call	_ADC_Init	;wreg free
 17514                           
 17515                           ;Functions.c: 34: ADC_Init(&ADC_AN1, eADC_Ch1);
 17516  015E5E  0ED8               	movlw	low _ADC_AN1
 17517  015E60  0100               	movlb	0	; () banked
 17518  015E62  6F64               	movwf	ADC_Init@pInput& (0+255),b
 17519  015E64  0E01               	movlw	high _ADC_AN1
 17520  015E66  0100               	movlb	0	; () banked
 17521  015E68  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 17522  015E6A  0E01               	movlw	1
 17523  015E6C  0100               	movlb	0	; () banked
 17524  015E6E  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 17525  015E70  ECBF  F0B5         	call	_ADC_Init	;wreg free
 17526                           
 17527                           ;Functions.c: 35: ADC_Init(&ADC_AN2, eADC_Ch2);
 17528  015E74  0ED3               	movlw	low _ADC_AN2
 17529  015E76  0100               	movlb	0	; () banked
 17530  015E78  6F64               	movwf	ADC_Init@pInput& (0+255),b
 17531  015E7A  0E01               	movlw	high _ADC_AN2
 17532  015E7C  0100               	movlb	0	; () banked
 17533  015E7E  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 17534  015E80  0E02               	movlw	2
 17535  015E82  0100               	movlb	0	; () banked
 17536  015E84  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 17537  015E86  ECBF  F0B5         	call	_ADC_Init	;wreg free
 17538                           
 17539                           ;Functions.c: 36: ADC_Init(&ADC_AN3, eADC_Ch3);
 17540  015E8A  0ECE               	movlw	low _ADC_AN3
 17541  015E8C  0100               	movlb	0	; () banked
 17542  015E8E  6F64               	movwf	ADC_Init@pInput& (0+255),b
 17543  015E90  0E01               	movlw	high _ADC_AN3
 17544  015E92  0100               	movlb	0	; () banked
 17545  015E94  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 17546  015E96  0E03               	movlw	3
 17547  015E98  0100               	movlb	0	; () banked
 17548  015E9A  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 17549  015E9C  ECBF  F0B5         	call	_ADC_Init	;wreg free
 17550                           
 17551                           ;Functions.c: 39: ADC_Sequence(&ADC_AN0, &ADC_AN1);
 17552  015EA0  0EDD               	movlw	low _ADC_AN0
 17553  015EA2  0100               	movlb	0	; () banked
 17554  015EA4  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 17555  015EA6  0E01               	movlw	high _ADC_AN0
 17556  015EA8  0100               	movlb	0	; () banked
 17557  015EAA  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 17558  015EAC  0ED8               	movlw	low _ADC_AN1
 17559  015EAE  0100               	movlb	0	; () banked
 17560  015EB0  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 17561  015EB2  0E01               	movlw	high _ADC_AN1
 17562  015EB4  0100               	movlb	0	; () banked
 17563  015EB6  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 17564  015EB8  ECDD  F0BB         	call	_ADC_Sequence	;wreg free
 17565                           
 17566                           ;Functions.c: 40: ADC_Sequence(&ADC_AN1, &ADC_AN2);
 17567  015EBC  0ED8               	movlw	low _ADC_AN1
 17568  015EBE  0100               	movlb	0	; () banked
 17569  015EC0  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 17570  015EC2  0E01               	movlw	high _ADC_AN1
 17571  015EC4  0100               	movlb	0	; () banked
 17572  015EC6  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 17573  015EC8  0ED3               	movlw	low _ADC_AN2
 17574  015ECA  0100               	movlb	0	; () banked
 17575  015ECC  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 17576  015ECE  0E01               	movlw	high _ADC_AN2
 17577  015ED0  0100               	movlb	0	; () banked
 17578  015ED2  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 17579  015ED4  ECDD  F0BB         	call	_ADC_Sequence	;wreg free
 17580                           
 17581                           ;Functions.c: 41: ADC_Sequence(&ADC_AN2, &ADC_AN3);
 17582  015ED8  0ED3               	movlw	low _ADC_AN2
 17583  015EDA  0100               	movlb	0	; () banked
 17584  015EDC  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 17585  015EDE  0E01               	movlw	high _ADC_AN2
 17586  015EE0  0100               	movlb	0	; () banked
 17587  015EE2  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 17588  015EE4  0ECE               	movlw	low _ADC_AN3
 17589  015EE6  0100               	movlb	0	; () banked
 17590  015EE8  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 17591  015EEA  0E01               	movlw	high _ADC_AN3
 17592  015EEC  0100               	movlb	0	; () banked
 17593  015EEE  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 17594  015EF0  ECDD  F0BB         	call	_ADC_Sequence	;wreg free
 17595  015EF4  0012               	return		;funcret
 17596  015EF6                     __end_of_FunctInitADC:
 17597                           	opt stack 0
 17598                           tosu	equ	0xFFF
 17599                           tosh	equ	0xFFE
 17600                           tosl	equ	0xFFD
 17601                           pclath	equ	0xFFA
 17602                           tblptru	equ	0xFF8
 17603                           tblptrh	equ	0xFF7
 17604                           tblptrl	equ	0xFF6
 17605                           tablat	equ	0xFF5
 17606                           prodh	equ	0xFF4
 17607                           prodl	equ	0xFF3
 17608                           intcon	equ	0xFF2
 17609                           indf0	equ	0xFEF
 17610                           postinc0	equ	0xFEE
 17611                           fsr0h	equ	0xFEA
 17612                           fsr0l	equ	0xFE9
 17613                           wreg	equ	0xFE8
 17614                           indf1	equ	0xFE7
 17615                           postdec1	equ	0xFE5
 17616                           fsr1h	equ	0xFE2
 17617                           fsr1l	equ	0xFE1
 17618                           indf2	equ	0xFDF
 17619                           postinc2	equ	0xFDE
 17620                           postdec2	equ	0xFDD
 17621                           plusw2	equ	0xFDB
 17622                           fsr2h	equ	0xFDA
 17623                           fsr2l	equ	0xFD9
 17624                           status	equ	0xFD8
 17625                           
 17626 ;; *************** function _ADC_Sequence *****************
 17627 ;; Defined at:
 17628 ;;		line 101 in file "Library/ADC.c"
 17629 ;; Parameters:    Size  Location     Type
 17630 ;;  pItemA          2    0[BANK0 ] PTR struct ADC
 17631 ;;		 -> ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 17632 ;;  pItemB          2    2[BANK0 ] PTR struct ADC
 17633 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), 
 17634 ;; Auto vars:     Size  Location     Type
 17635 ;;		None
 17636 ;; Return value:  Size  Location     Type
 17637 ;;                  1    wreg      void 
 17638 ;; Registers used:
 17639 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17640 ;; Tracked objects:
 17641 ;;		On entry : 0/0
 17642 ;;		On exit  : 0/0
 17643 ;;		Unchanged: 0/0
 17644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17645 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17647 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17648 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17649 ;;Total ram usage:        4 bytes
 17650 ;; Hardware stack levels used:    1
 17651 ;; Hardware stack levels required when called:    7
 17652 ;; This function calls:
 17653 ;;		Nothing
 17654 ;; This function is called by:
 17655 ;;		_FunctInitADC
 17656 ;; This function uses a non-reentrant model
 17657 ;;
 17658                           
 17659                           	psect	text92
 17660  0177BA                     __ptext92:
 17661                           	opt stack 0
 17662  0177BA                     _ADC_Sequence:
 17663                           	opt stack 21
 17664                           
 17665                           ;ADC.c: 103: if(pItemA==(void*)0)
 17666                           
 17667                           ;incstack = 0
 17668  0177BA  0100               	movlb	0	; () banked
 17669  0177BC  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 17670  0177BE  0100               	movlb	0	; () banked
 17671  0177C0  1161               	iorwf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 17672  0177C2  B4D8               	btfsc	status,2,c
 17673  0177C4  0012               	return	
 17674                           
 17675                           ; BSR set to: 0
 17676                           ;ADC.c: 105: if(pItemB==(void*)0)
 17677                           
 17678                           ; BSR set to: 0
 17679                           
 17680                           ; BSR set to: 0
 17681                           ;ADC.c: 104: return;
 17682  0177C6  0100               	movlb	0	; () banked
 17683  0177C8  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 17684  0177CA  0100               	movlb	0	; () banked
 17685  0177CC  1163               	iorwf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 17686  0177CE  B4D8               	btfsc	status,2,c
 17687  0177D0  0012               	return	
 17688                           
 17689                           ; BSR set to: 0
 17690                           ;ADC.c: 109: pItemA->mNext = pItemB;
 17691                           
 17692                           ; BSR set to: 0
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;ADC.c: 106: return;
 17696  0177D2  0100               	movlb	0	; () banked
 17697  0177D4  EE20 F003          	lfsr	2,3
 17698  0177D8  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 17699  0177DA  26D9               	addwf	fsr2l,f,c
 17700  0177DC  5161               	movf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 17701  0177DE  22DA               	addwfc	fsr2h,f,c
 17702  0177E0  C062  FFDE         	movff	ADC_Sequence@pItemB,postinc2
 17703  0177E4  C063  FFDD         	movff	ADC_Sequence@pItemB+1,postdec2
 17704                           
 17705                           ;ADC.c: 110: pItemB->mNext = 0;
 17706  0177E8  0100               	movlb	0	; () banked
 17707  0177EA  EE20 F003          	lfsr	2,3
 17708  0177EE  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 17709  0177F0  26D9               	addwf	fsr2l,f,c
 17710  0177F2  5163               	movf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 17711  0177F4  22DA               	addwfc	fsr2h,f,c
 17712  0177F6  0E00               	movlw	0
 17713  0177F8  6EDE               	movwf	postinc2,c
 17714  0177FA  0E00               	movlw	0
 17715  0177FC  6EDD               	movwf	postdec2,c
 17716                           
 17717                           ; BSR set to: 0
 17718  0177FE  0012               	return		;funcret
 17719  017800                     __end_of_ADC_Sequence:
 17720                           	opt stack 0
 17721                           tosu	equ	0xFFF
 17722                           tosh	equ	0xFFE
 17723                           tosl	equ	0xFFD
 17724                           pclath	equ	0xFFA
 17725                           tblptru	equ	0xFF8
 17726                           tblptrh	equ	0xFF7
 17727                           tblptrl	equ	0xFF6
 17728                           tablat	equ	0xFF5
 17729                           prodh	equ	0xFF4
 17730                           prodl	equ	0xFF3
 17731                           intcon	equ	0xFF2
 17732                           indf0	equ	0xFEF
 17733                           postinc0	equ	0xFEE
 17734                           fsr0h	equ	0xFEA
 17735                           fsr0l	equ	0xFE9
 17736                           wreg	equ	0xFE8
 17737                           indf1	equ	0xFE7
 17738                           postdec1	equ	0xFE5
 17739                           fsr1h	equ	0xFE2
 17740                           fsr1l	equ	0xFE1
 17741                           indf2	equ	0xFDF
 17742                           postinc2	equ	0xFDE
 17743                           postdec2	equ	0xFDD
 17744                           plusw2	equ	0xFDB
 17745                           fsr2h	equ	0xFDA
 17746                           fsr2l	equ	0xFD9
 17747                           status	equ	0xFD8
 17748                           
 17749 ;; *************** function _ADC_Init *****************
 17750 ;; Defined at:
 17751 ;;		line 19 in file "Library/ADC.c"
 17752 ;; Parameters:    Size  Location     Type
 17753 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 17754 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 17755 ;;  pChannel        1    6[BANK0 ] enum E6742
 17756 ;; Auto vars:     Size  Location     Type
 17757 ;;		None
 17758 ;; Return value:  Size  Location     Type
 17759 ;;                  1    wreg      void 
 17760 ;; Registers used:
 17761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17762 ;; Tracked objects:
 17763 ;;		On entry : 0/0
 17764 ;;		On exit  : 0/0
 17765 ;;		Unchanged: 0/0
 17766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17767 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17770 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17771 ;;Total ram usage:        3 bytes
 17772 ;; Hardware stack levels used:    1
 17773 ;; Hardware stack levels required when called:    9
 17774 ;; This function calls:
 17775 ;;		_ADC_Calibrate
 17776 ;;		_ADC_ClockDivision
 17777 ;;		_ADC_ConversionTime
 17778 ;;		_ADC_SetChannel
 17779 ;;		_ADC_SetupIO
 17780 ;; This function is called by:
 17781 ;;		_FunctInitADC
 17782 ;; This function uses a non-reentrant model
 17783 ;;
 17784                           
 17785                           	psect	text93
 17786  016B7E                     __ptext93:
 17787                           	opt stack 0
 17788  016B7E                     _ADC_Init:
 17789                           	opt stack 19
 17790                           
 17791                           ;ADC.c: 21: if(pInput==(void*)0)
 17792                           
 17793                           ; BSR set to: 0
 17794                           ;incstack = 0
 17795  016B7E  0100               	movlb	0	; () banked
 17796  016B80  5164               	movf	ADC_Init@pInput& (0+255),w,b
 17797  016B82  0100               	movlb	0	; () banked
 17798  016B84  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 17799  016B86  B4D8               	btfsc	status,2,c
 17800  016B88  0012               	return	
 17801                           
 17802                           ; BSR set to: 0
 17803                           ;ADC.c: 25: lCurrent = pInput;
 17804                           
 17805                           ; BSR set to: 0
 17806                           
 17807                           ; BSR set to: 0
 17808                           ;ADC.c: 22: return;
 17809  016B8A  C064  F0EC         	movff	ADC_Init@pInput,_lCurrent
 17810  016B8E  C065  F0ED         	movff	ADC_Init@pInput+1,_lCurrent+1
 17811                           
 17812                           ; BSR set to: 0
 17813                           ;ADC.c: 27: pInput->mChannel = pChannel;
 17814  016B92  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 17815  016B96  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 17816  016B9A  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 17817                           
 17818                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 17819  016B9E  0100               	movlb	0	; () banked
 17820  016BA0  EE20 F003          	lfsr	2,3
 17821  016BA4  5164               	movf	ADC_Init@pInput& (0+255),w,b
 17822  016BA6  26D9               	addwf	fsr2l,f,c
 17823  016BA8  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 17824  016BAA  22DA               	addwfc	fsr2h,f,c
 17825  016BAC  0E00               	movlw	0
 17826  016BAE  6EDE               	movwf	postinc2,c
 17827  016BB0  0E00               	movlw	0
 17828  016BB2  6EDD               	movwf	postdec2,c
 17829                           
 17830                           ;ADC.c: 29: pInput->mValue = 0;
 17831  016BB4  0100               	movlb	0	; () banked
 17832  016BB6  EE20 F001          	lfsr	2,1
 17833  016BBA  5164               	movf	ADC_Init@pInput& (0+255),w,b
 17834  016BBC  26D9               	addwf	fsr2l,f,c
 17835  016BBE  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 17836  016BC0  22DA               	addwfc	fsr2h,f,c
 17837  016BC2  0E00               	movlw	0
 17838  016BC4  6EDE               	movwf	postinc2,c
 17839  016BC6  0E00               	movlw	0
 17840  016BC8  6EDD               	movwf	postdec2,c
 17841                           
 17842                           ; BSR set to: 0
 17843                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 17844  016BCA  0100               	movlb	0	; () banked
 17845  016BCC  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 17846  016BCE  EC58  F0BF         	call	_ADC_SetChannel
 17847                           
 17848                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 17849  016BD2  9EC2               	bcf	4034,7,c	;volatile
 17850                           
 17851                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 17852  016BD4  9CC2               	bcf	4034,6,c	;volatile
 17853                           
 17854                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 17855  016BD6  8EC1               	bsf	4033,7,c	;volatile
 17856                           
 17857                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 17858  016BD8  8CC1               	bsf	4033,6,c	;volatile
 17859                           
 17860                           ;ADC.c: 43: ADC_ConversionTime(12);
 17861  016BDA  0E0C               	movlw	12
 17862  016BDC  EC4F  F0BB         	call	_ADC_ConversionTime
 17863                           
 17864                           ;ADC.c: 47: ADC_ClockDivision(16);
 17865  016BE0  0E10               	movlw	16
 17866  016BE2  EC2F  F0B4         	call	_ADC_ClockDivision
 17867                           
 17868                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 17869  016BE6  0100               	movlb	0	; () banked
 17870  016BE8  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 17871  016BEA  ECA5  F0BD         	call	_ADC_SetupIO
 17872                           
 17873                           ;ADC.c: 58: ADC_Initialised = 1;
 17874  016BEE  0E01               	movlw	1
 17875  016BF0  6E36               	movwf	_ADC_Initialised,c
 17876                           
 17877                           ;ADC.c: 61: ADC_Calibrate();
 17878  016BF2  ECC7  F0BF         	call	_ADC_Calibrate	;wreg free
 17879  016BF6  0012               	return		;funcret
 17880  016BF8                     __end_of_ADC_Init:
 17881                           	opt stack 0
 17882                           tosu	equ	0xFFF
 17883                           tosh	equ	0xFFE
 17884                           tosl	equ	0xFFD
 17885                           pclath	equ	0xFFA
 17886                           tblptru	equ	0xFF8
 17887                           tblptrh	equ	0xFF7
 17888                           tblptrl	equ	0xFF6
 17889                           tablat	equ	0xFF5
 17890                           prodh	equ	0xFF4
 17891                           prodl	equ	0xFF3
 17892                           intcon	equ	0xFF2
 17893                           indf0	equ	0xFEF
 17894                           postinc0	equ	0xFEE
 17895                           fsr0h	equ	0xFEA
 17896                           fsr0l	equ	0xFE9
 17897                           wreg	equ	0xFE8
 17898                           indf1	equ	0xFE7
 17899                           postdec1	equ	0xFE5
 17900                           fsr1h	equ	0xFE2
 17901                           fsr1l	equ	0xFE1
 17902                           indf2	equ	0xFDF
 17903                           postinc2	equ	0xFDE
 17904                           postdec2	equ	0xFDD
 17905                           plusw2	equ	0xFDB
 17906                           fsr2h	equ	0xFDA
 17907                           fsr2l	equ	0xFD9
 17908                           status	equ	0xFD8
 17909                           
 17910 ;; *************** function _ADC_SetupIO *****************
 17911 ;; Defined at:
 17912 ;;		line 150 in file "Library/ADC.c"
 17913 ;; Parameters:    Size  Location     Type
 17914 ;;  pChannel        1    wreg     enum E6742
 17915 ;; Auto vars:     Size  Location     Type
 17916 ;;  pChannel        1    2[BANK0 ] enum E6742
 17917 ;;  MASK            1    3[BANK0 ] unsigned char 
 17918 ;; Return value:  Size  Location     Type
 17919 ;;                  1    wreg      void 
 17920 ;; Registers used:
 17921 ;;		wreg, status,2, status,0
 17922 ;; Tracked objects:
 17923 ;;		On entry : 0/0
 17924 ;;		On exit  : 0/0
 17925 ;;		Unchanged: 0/0
 17926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17928 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17929 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17930 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17931 ;;Total ram usage:        4 bytes
 17932 ;; Hardware stack levels used:    1
 17933 ;; Hardware stack levels required when called:    7
 17934 ;; This function calls:
 17935 ;;		Nothing
 17936 ;; This function is called by:
 17937 ;;		_ADC_Init
 17938 ;; This function uses a non-reentrant model
 17939 ;;
 17940                           
 17941                           	psect	text94
 17942  017B4A                     __ptext94:
 17943                           	opt stack 0
 17944  017B4A                     _ADC_SetupIO:
 17945                           	opt stack 20
 17946                           
 17947                           ;incstack = 0
 17948                           ;ADC_SetupIO@pChannel stored from wreg
 17949  017B4A  0100               	movlb	0	; () banked
 17950  017B4C  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 17951                           
 17952                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 17953  017B4E  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 17954  017B52  0E01               	movlw	1
 17955  017B54  0100               	movlb	0	; () banked
 17956  017B56  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 17957  017B58  0100               	movlb	0	; () banked
 17958  017B5A  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 17959  017B5C  D003               	goto	u11914
 17960  017B5E                     u11915:
 17961  017B5E  0100               	movlb	0	; () banked
 17962  017B60  90D8               	bcf	status,0,c
 17963  017B62  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 17964  017B64                     u11914:
 17965  017B64  0100               	movlb	0	; () banked
 17966  017B66  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 17967  017B68  D7FA               	goto	u11915
 17968  017B6A  0100               	movlb	0	; () banked
 17969  017B6C  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 17970  017B6E  0AFF               	xorlw	255
 17971  017B70  0100               	movlb	0	; () banked
 17972  017B72  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 17973                           
 17974                           ;ADC.c: 153: ANCON0 &= MASK;
 17975  017B74  0100               	movlb	0	; () banked
 17976  017B76  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 17977  017B78  16C1               	andwf	4033,f,c	;volatile
 17978                           
 17979                           ; BSR set to: 0
 17980  017B7A  0012               	return		;funcret
 17981  017B7C                     __end_of_ADC_SetupIO:
 17982                           	opt stack 0
 17983                           tosu	equ	0xFFF
 17984                           tosh	equ	0xFFE
 17985                           tosl	equ	0xFFD
 17986                           pclath	equ	0xFFA
 17987                           tblptru	equ	0xFF8
 17988                           tblptrh	equ	0xFF7
 17989                           tblptrl	equ	0xFF6
 17990                           tablat	equ	0xFF5
 17991                           prodh	equ	0xFF4
 17992                           prodl	equ	0xFF3
 17993                           intcon	equ	0xFF2
 17994                           indf0	equ	0xFEF
 17995                           postinc0	equ	0xFEE
 17996                           fsr0h	equ	0xFEA
 17997                           fsr0l	equ	0xFE9
 17998                           wreg	equ	0xFE8
 17999                           indf1	equ	0xFE7
 18000                           postdec1	equ	0xFE5
 18001                           fsr1h	equ	0xFE2
 18002                           fsr1l	equ	0xFE1
 18003                           indf2	equ	0xFDF
 18004                           postinc2	equ	0xFDE
 18005                           postdec2	equ	0xFDD
 18006                           plusw2	equ	0xFDB
 18007                           fsr2h	equ	0xFDA
 18008                           fsr2l	equ	0xFD9
 18009                           status	equ	0xFD8
 18010                           
 18011 ;; *************** function _ADC_SetChannel *****************
 18012 ;; Defined at:
 18013 ;;		line 155 in file "Library/ADC.c"
 18014 ;; Parameters:    Size  Location     Type
 18015 ;;  pChannel        1    wreg     enum E6742
 18016 ;; Auto vars:     Size  Location     Type
 18017 ;;  pChannel        1    1[BANK0 ] enum E6742
 18018 ;; Return value:  Size  Location     Type
 18019 ;;                  1    wreg      void 
 18020 ;; Registers used:
 18021 ;;		wreg, status,2, status,0
 18022 ;; Tracked objects:
 18023 ;;		On entry : 0/0
 18024 ;;		On exit  : 0/0
 18025 ;;		Unchanged: 0/0
 18026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18030 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18031 ;;Total ram usage:        2 bytes
 18032 ;; Hardware stack levels used:    1
 18033 ;; Hardware stack levels required when called:    7
 18034 ;; This function calls:
 18035 ;;		Nothing
 18036 ;; This function is called by:
 18037 ;;		_ADC_Init
 18038 ;;		_ADC_Start
 18039 ;;		_ADC_ISR
 18040 ;;		_ADC_Sample
 18041 ;; This function uses a non-reentrant model
 18042 ;;
 18043                           
 18044                           	psect	text95
 18045  017EB0                     __ptext95:
 18046                           	opt stack 0
 18047  017EB0                     _ADC_SetChannel:
 18048                           	opt stack 20
 18049                           
 18050                           ; BSR set to: 0
 18051                           ;incstack = 0
 18052                           ;ADC_SetChannel@pChannel stored from wreg
 18053  017EB0  0100               	movlb	0	; () banked
 18054  017EB2  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 18055                           
 18056                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 18057  017EB4  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 18058  017EB8  0100               	movlb	0	; () banked
 18059  017EBA  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 18060  017EBC  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 18061  017EBE  50C2               	movf	4034,w,c	;volatile
 18062  017EC0  0100               	movlb	0	; () banked
 18063  017EC2  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 18064  017EC4  0BC3               	andlw	-61
 18065  017EC6  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 18066  017EC8  6EC2               	movwf	4034,c	;volatile
 18067                           
 18068                           ; BSR set to: 0
 18069  017ECA  0012               	return		;funcret
 18070  017ECC                     __end_of_ADC_SetChannel:
 18071                           	opt stack 0
 18072                           tosu	equ	0xFFF
 18073                           tosh	equ	0xFFE
 18074                           tosl	equ	0xFFD
 18075                           pclath	equ	0xFFA
 18076                           tblptru	equ	0xFF8
 18077                           tblptrh	equ	0xFF7
 18078                           tblptrl	equ	0xFF6
 18079                           tablat	equ	0xFF5
 18080                           prodh	equ	0xFF4
 18081                           prodl	equ	0xFF3
 18082                           intcon	equ	0xFF2
 18083                           indf0	equ	0xFEF
 18084                           postinc0	equ	0xFEE
 18085                           fsr0h	equ	0xFEA
 18086                           fsr0l	equ	0xFE9
 18087                           wreg	equ	0xFE8
 18088                           indf1	equ	0xFE7
 18089                           postdec1	equ	0xFE5
 18090                           fsr1h	equ	0xFE2
 18091                           fsr1l	equ	0xFE1
 18092                           indf2	equ	0xFDF
 18093                           postinc2	equ	0xFDE
 18094                           postdec2	equ	0xFDD
 18095                           plusw2	equ	0xFDB
 18096                           fsr2h	equ	0xFDA
 18097                           fsr2l	equ	0xFD9
 18098                           status	equ	0xFD8
 18099                           
 18100 ;; *************** function _ADC_ConversionTime *****************
 18101 ;; Defined at:
 18102 ;;		line 199 in file "Library/ADC.c"
 18103 ;; Parameters:    Size  Location     Type
 18104 ;;  pCount          1    wreg     unsigned char 
 18105 ;; Auto vars:     Size  Location     Type
 18106 ;;  pCount          1    1[BANK0 ] unsigned char 
 18107 ;; Return value:  Size  Location     Type
 18108 ;;                  1    wreg      void 
 18109 ;; Registers used:
 18110 ;;		wreg, status,2, status,0
 18111 ;; Tracked objects:
 18112 ;;		On entry : 0/0
 18113 ;;		On exit  : 0/0
 18114 ;;		Unchanged: 0/0
 18115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18120 ;;Total ram usage:        2 bytes
 18121 ;; Hardware stack levels used:    1
 18122 ;; Hardware stack levels required when called:    7
 18123 ;; This function calls:
 18124 ;;		Nothing
 18125 ;; This function is called by:
 18126 ;;		_ADC_Init
 18127 ;; This function uses a non-reentrant model
 18128 ;;
 18129                           
 18130                           	psect	text96
 18131  01769E                     __ptext96:
 18132                           	opt stack 0
 18133  01769E                     _ADC_ConversionTime:
 18134                           	opt stack 20
 18135                           
 18136                           ; BSR set to: 0
 18137                           ;incstack = 0
 18138                           ;ADC_ConversionTime@pCount stored from wreg
 18139  01769E  0100               	movlb	0	; () banked
 18140  0176A0  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 18141                           
 18142                           ;ADC.c: 201: if (pCount == 10)
 18143  0176A2  0E0A               	movlw	10
 18144  0176A4  0100               	movlb	0	; () banked
 18145  0176A6  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 18146  0176A8  B4D8               	btfsc	status,2,c
 18147  0176AA  D00A               	goto	u11880
 18148                           
 18149                           ; BSR set to: 0
 18150                           ;ADC.c: 203: else if (pCount == 14)
 18151                           
 18152                           ; BSR set to: 0
 18153                           
 18154                           ; BSR set to: 0
 18155                           ;ADC.c: 202: pCount -= 2;
 18156  0176AC  0E0E               	movlw	14
 18157  0176AE  0100               	movlb	0	; () banked
 18158  0176B0  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 18159  0176B2  B4D8               	btfsc	status,2,c
 18160  0176B4  D005               	goto	u11880
 18161                           
 18162                           ; BSR set to: 0
 18163                           ;ADC.c: 205: else if (pCount == 18)
 18164                           
 18165                           ; BSR set to: 0
 18166                           
 18167                           ; BSR set to: 0
 18168                           ;ADC.c: 204: pCount -= 2;
 18169  0176B6  0E12               	movlw	18
 18170  0176B8  0100               	movlb	0	; () banked
 18171  0176BA  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 18172  0176BC  A4D8               	btfss	status,2,c
 18173  0176BE  D003               	goto	l1313
 18174  0176C0                     u11880:
 18175                           
 18176                           ; BSR set to: 0
 18177                           ;ADC.c: 206: pCount -= 2;
 18178  0176C0  0E02               	movlw	2
 18179  0176C2  0100               	movlb	0	; () banked
 18180  0176C4  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 18181  0176C6                     l1313:
 18182                           
 18183                           ; BSR set to: 0
 18184                           ;ADC.c: 208: pCount <<= 1;
 18185                           
 18186                           ; BSR set to: 0
 18187                           
 18188                           ; BSR set to: 0
 18189  0176C6  0100               	movlb	0	; () banked
 18190  0176C8  90D8               	bcf	status,0,c
 18191  0176CA  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 18192                           
 18193                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 18194  0176CC  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 18195  0176D0  0100               	movlb	0	; () banked
 18196  0176D2  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 18197  0176D4  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 18198  0176D6  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 18199  0176D8  50C1               	movf	4033,w,c	;volatile
 18200  0176DA  0100               	movlb	0	; () banked
 18201  0176DC  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 18202  0176DE  0BC7               	andlw	-57
 18203  0176E0  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 18204  0176E2  6EC1               	movwf	4033,c	;volatile
 18205                           
 18206                           ; BSR set to: 0
 18207  0176E4  0012               	return		;funcret
 18208  0176E6                     __end_of_ADC_ConversionTime:
 18209                           	opt stack 0
 18210                           tosu	equ	0xFFF
 18211                           tosh	equ	0xFFE
 18212                           tosl	equ	0xFFD
 18213                           pclath	equ	0xFFA
 18214                           tblptru	equ	0xFF8
 18215                           tblptrh	equ	0xFF7
 18216                           tblptrl	equ	0xFF6
 18217                           tablat	equ	0xFF5
 18218                           prodh	equ	0xFF4
 18219                           prodl	equ	0xFF3
 18220                           intcon	equ	0xFF2
 18221                           indf0	equ	0xFEF
 18222                           postinc0	equ	0xFEE
 18223                           fsr0h	equ	0xFEA
 18224                           fsr0l	equ	0xFE9
 18225                           wreg	equ	0xFE8
 18226                           indf1	equ	0xFE7
 18227                           postdec1	equ	0xFE5
 18228                           fsr1h	equ	0xFE2
 18229                           fsr1l	equ	0xFE1
 18230                           indf2	equ	0xFDF
 18231                           postinc2	equ	0xFDE
 18232                           postdec2	equ	0xFDD
 18233                           plusw2	equ	0xFDB
 18234                           fsr2h	equ	0xFDA
 18235                           fsr2l	equ	0xFD9
 18236                           status	equ	0xFD8
 18237                           
 18238 ;; *************** function _ADC_ClockDivision *****************
 18239 ;; Defined at:
 18240 ;;		line 159 in file "Library/ADC.c"
 18241 ;; Parameters:    Size  Location     Type
 18242 ;;  pDivide         1    wreg     unsigned char 
 18243 ;; Auto vars:     Size  Location     Type
 18244 ;;  pDivide         1    0[BANK0 ] unsigned char 
 18245 ;;  unfound         1    2[BANK0 ] unsigned char 
 18246 ;;  reg             1    1[BANK0 ] unsigned char 
 18247 ;; Return value:  Size  Location     Type
 18248 ;;                  1    wreg      void 
 18249 ;; Registers used:
 18250 ;;		wreg, status,2, status,0
 18251 ;; Tracked objects:
 18252 ;;		On entry : 0/0
 18253 ;;		On exit  : 0/0
 18254 ;;		Unchanged: 0/0
 18255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18257 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18259 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18260 ;;Total ram usage:        3 bytes
 18261 ;; Hardware stack levels used:    1
 18262 ;; Hardware stack levels required when called:    7
 18263 ;; This function calls:
 18264 ;;		Nothing
 18265 ;; This function is called by:
 18266 ;;		_ADC_Init
 18267 ;; This function uses a non-reentrant model
 18268 ;;
 18269                           
 18270                           	psect	text97
 18271  01685E                     __ptext97:
 18272                           	opt stack 0
 18273  01685E                     _ADC_ClockDivision:
 18274                           	opt stack 20
 18275                           
 18276                           ; BSR set to: 0
 18277                           ;incstack = 0
 18278                           ;ADC_ClockDivision@pDivide stored from wreg
 18279  01685E  0100               	movlb	0	; () banked
 18280  016860  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 18281                           
 18282                           ;ADC.c: 161: UINT8 reg = 0;
 18283  016862  0E00               	movlw	0
 18284  016864  0100               	movlb	0	; () banked
 18285  016866  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 18286                           
 18287                           ;ADC.c: 162: bool unfound = 1;
 18288  016868  0E01               	movlw	1
 18289  01686A  D002               	goto	L8
 18290  01686C                     
 18291                           ; BSR set to: 0
 18292                           ;ADC.c: 167: reg = 0;
 18293                           
 18294                           ; BSR set to: 0
 18295  01686C  0E00               	movlw	0
 18296  01686E  D00C               	goto	L13
 18297  016870                     L8:
 18298  016870  0100               	movlb	0	; () banked
 18299  016872  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 18300                           
 18301                           ;ADC.c: 169: break;
 18302  016874  D02D               	goto	l1296
 18303  016876                     
 18304                           ; BSR set to: 0
 18305                           ;ADC.c: 171: reg = 0b100;
 18306                           
 18307                           ; BSR set to: 0
 18308  016876  0E04               	movlw	4
 18309  016878  D007               	goto	L13
 18310  01687A                     
 18311                           ; BSR set to: 0
 18312                           ;ADC.c: 175: reg = 0b001;
 18313                           
 18314                           ; BSR set to: 0
 18315  01687A  0E01               	movlw	1
 18316  01687C  D005               	goto	L13
 18317  01687E                     
 18318                           ; BSR set to: 0
 18319                           ;ADC.c: 179: reg = 0b101;
 18320                           
 18321                           ; BSR set to: 0
 18322  01687E  0E05               	movlw	5
 18323  016880  D003               	goto	L13
 18324  016882                     
 18325                           ; BSR set to: 0
 18326                           ;ADC.c: 183: reg = 0b010;
 18327                           
 18328                           ; BSR set to: 0
 18329  016882  0E02               	movlw	2
 18330  016884  D001               	goto	L13
 18331  016886                     
 18332                           ; BSR set to: 0
 18333                           ;ADC.c: 187: reg = 0b110;
 18334                           
 18335                           ; BSR set to: 0
 18336  016886  0E06               	movlw	6
 18337  016888                     L13:
 18338  016888  0100               	movlb	0	; () banked
 18339  01688A  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 18340                           
 18341                           ;ADC.c: 188: unfound = 0;
 18342  01688C  0E00               	movlw	0
 18343  01688E  D7F0               	goto	L8
 18344  016890                     
 18345                           ; BSR set to: 0
 18346                           ;ADC.c: 191: if (pDivide > 2)
 18347                           
 18348                           ; BSR set to: 0
 18349  016890  0E02               	movlw	2
 18350  016892  0100               	movlb	0	; () banked
 18351  016894  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 18352  016896  D003               	goto	l1303
 18353                           
 18354                           ; BSR set to: 0
 18355                           ;ADC.c: 192: pDivide --;
 18356  016898  0100               	movlb	0	; () banked
 18357  01689A  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 18358  01689C  D019               	goto	l1296
 18359  01689E                     l1303:
 18360                           
 18361                           ; BSR set to: 0
 18362                           ;ADC.c: 193: else
 18363                           ;ADC.c: 194: pDivide = 2;
 18364                           
 18365                           ; BSR set to: 0
 18366  01689E  0E02               	movlw	2
 18367  0168A0  0100               	movlb	0	; () banked
 18368  0168A2  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 18369                           
 18370                           ; BSR set to: 0
 18371                           ;ADC.c: 195: };
 18372  0168A4  D015               	goto	l1296
 18373  0168A6                     
 18374                           ; BSR set to: 0
 18375                           
 18376                           ; BSR set to: 0
 18377  0168A6  0100               	movlb	0	; () banked
 18378  0168A8  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 18379                           
 18380                           ; Switch size 1, requested type "space"
 18381                           ; Number of cases is 6, Range of values is 2 to 64
 18382                           ; switch strategies available:
 18383                           ; Name         Instructions Cycles
 18384                           ; simple_byte           19    10 (average)
 18385                           ;	Chosen strategy is simple_byte
 18386  0168AA  0A02               	xorlw	2	; case 2
 18387  0168AC  B4D8               	btfsc	status,2,c
 18388  0168AE  D7DE               	goto	l1295
 18389  0168B0  0A06               	xorlw	6	; case 4
 18390  0168B2  B4D8               	btfsc	status,2,c
 18391  0168B4  D7E0               	goto	l1297
 18392  0168B6  0A0C               	xorlw	12	; case 8
 18393  0168B8  B4D8               	btfsc	status,2,c
 18394  0168BA  D7DF               	goto	l1298
 18395  0168BC  0A18               	xorlw	24	; case 16
 18396  0168BE  B4D8               	btfsc	status,2,c
 18397  0168C0  D7DE               	goto	l1299
 18398  0168C2  0A30               	xorlw	48	; case 32
 18399  0168C4  B4D8               	btfsc	status,2,c
 18400  0168C6  D7DD               	goto	l1300
 18401  0168C8  0A60               	xorlw	96	; case 64
 18402  0168CA  B4D8               	btfsc	status,2,c
 18403  0168CC  D7DC               	goto	l1301
 18404  0168CE  D7E0               	goto	l1302
 18405  0168D0                     l1296:
 18406                           
 18407                           ; BSR set to: 0
 18408                           
 18409                           ; BSR set to: 0
 18410                           
 18411                           ; BSR set to: 0
 18412  0168D0  0100               	movlb	0	; () banked
 18413  0168D2  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 18414  0168D4  0100               	movlb	0	; () banked
 18415  0168D6  A4D8               	btfss	status,2,c
 18416  0168D8  D7E6               	goto	l1294
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 18420                           
 18421                           ; BSR set to: 0
 18422  0168DA  50C1               	movf	4033,w,c	;volatile
 18423  0168DC  0100               	movlb	0	; () banked
 18424  0168DE  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 18425  0168E0  0BF8               	andlw	-8
 18426  0168E2  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 18427  0168E4  6EC1               	movwf	4033,c	;volatile
 18428                           
 18429                           ; BSR set to: 0
 18430  0168E6  0012               	return		;funcret
 18431  0168E8                     __end_of_ADC_ClockDivision:
 18432                           	opt stack 0
 18433                           tosu	equ	0xFFF
 18434                           tosh	equ	0xFFE
 18435                           tosl	equ	0xFFD
 18436                           pclath	equ	0xFFA
 18437                           tblptru	equ	0xFF8
 18438                           tblptrh	equ	0xFF7
 18439                           tblptrl	equ	0xFF6
 18440                           tablat	equ	0xFF5
 18441                           prodh	equ	0xFF4
 18442                           prodl	equ	0xFF3
 18443                           intcon	equ	0xFF2
 18444                           indf0	equ	0xFEF
 18445                           postinc0	equ	0xFEE
 18446                           fsr0h	equ	0xFEA
 18447                           fsr0l	equ	0xFE9
 18448                           wreg	equ	0xFE8
 18449                           indf1	equ	0xFE7
 18450                           postdec1	equ	0xFE5
 18451                           fsr1h	equ	0xFE2
 18452                           fsr1l	equ	0xFE1
 18453                           indf2	equ	0xFDF
 18454                           postinc2	equ	0xFDE
 18455                           postdec2	equ	0xFDD
 18456                           plusw2	equ	0xFDB
 18457                           fsr2h	equ	0xFDA
 18458                           fsr2l	equ	0xFD9
 18459                           status	equ	0xFD8
 18460                           
 18461 ;; *************** function _ADC_Calibrate *****************
 18462 ;; Defined at:
 18463 ;;		line 63 in file "Library/ADC.c"
 18464 ;; Parameters:    Size  Location     Type
 18465 ;;		None
 18466 ;; Auto vars:     Size  Location     Type
 18467 ;;		None
 18468 ;; Return value:  Size  Location     Type
 18469 ;;                  1    wreg      void 
 18470 ;; Registers used:
 18471 ;;		cstack
 18472 ;; Tracked objects:
 18473 ;;		On entry : 0/0
 18474 ;;		On exit  : 0/0
 18475 ;;		Unchanged: 0/0
 18476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18481 ;;Total ram usage:        0 bytes
 18482 ;; Hardware stack levels used:    1
 18483 ;; Hardware stack levels required when called:    8
 18484 ;; This function calls:
 18485 ;;		_ADC_Off
 18486 ;;		_ADC_On
 18487 ;; This function is called by:
 18488 ;;		_ADC_Init
 18489 ;; This function uses a non-reentrant model
 18490 ;;
 18491                           
 18492                           	psect	text98
 18493  017F8E                     __ptext98:
 18494                           	opt stack 0
 18495  017F8E                     _ADC_Calibrate:
 18496                           	opt stack 19
 18497                           
 18498                           ;ADC.c: 65: ADC_On();
 18499                           
 18500                           ; BSR set to: 0
 18501                           ;incstack = 0
 18502  017F8E  EC3E  F0C0         	call	_ADC_On	;wreg free
 18503                           
 18504                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 18505  017F92  8CC1               	bsf	4033,6,c	;volatile
 18506                           
 18507                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 18508  017F94  82C2               	bsf	4034,1,c	;volatile
 18509  017F96  B2C2               	btfsc	4034,1,c	;volatile
 18510  017F98  D7FE               	goto	l1254
 18511                           
 18512                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 18513  017F9A  9CC1               	bcf	4033,6,c	;volatile
 18514                           
 18515                           ;ADC.c: 73: ADC_Off();
 18516  017F9C  EC31  F0C0         	call	_ADC_Off	;wreg free
 18517  017FA0  0012               	return		;funcret
 18518  017FA2                     __end_of_ADC_Calibrate:
 18519                           	opt stack 0
 18520                           tosu	equ	0xFFF
 18521                           tosh	equ	0xFFE
 18522                           tosl	equ	0xFFD
 18523                           pclath	equ	0xFFA
 18524                           tblptru	equ	0xFF8
 18525                           tblptrh	equ	0xFF7
 18526                           tblptrl	equ	0xFF6
 18527                           tablat	equ	0xFF5
 18528                           prodh	equ	0xFF4
 18529                           prodl	equ	0xFF3
 18530                           intcon	equ	0xFF2
 18531                           indf0	equ	0xFEF
 18532                           postinc0	equ	0xFEE
 18533                           fsr0h	equ	0xFEA
 18534                           fsr0l	equ	0xFE9
 18535                           wreg	equ	0xFE8
 18536                           indf1	equ	0xFE7
 18537                           postdec1	equ	0xFE5
 18538                           fsr1h	equ	0xFE2
 18539                           fsr1l	equ	0xFE1
 18540                           indf2	equ	0xFDF
 18541                           postinc2	equ	0xFDE
 18542                           postdec2	equ	0xFDD
 18543                           plusw2	equ	0xFDB
 18544                           fsr2h	equ	0xFDA
 18545                           fsr2l	equ	0xFD9
 18546                           status	equ	0xFD8
 18547                           
 18548 ;; *************** function _ADC_On *****************
 18549 ;; Defined at:
 18550 ;;		line 85 in file "Library/ADC.c"
 18551 ;; Parameters:    Size  Location     Type
 18552 ;;		None
 18553 ;; Auto vars:     Size  Location     Type
 18554 ;;		None
 18555 ;; Return value:  Size  Location     Type
 18556 ;;                  1    wreg      void 
 18557 ;; Registers used:
 18558 ;;		None
 18559 ;; Tracked objects:
 18560 ;;		On entry : 0/0
 18561 ;;		On exit  : 0/0
 18562 ;;		Unchanged: 0/0
 18563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18568 ;;Total ram usage:        0 bytes
 18569 ;; Hardware stack levels used:    1
 18570 ;; Hardware stack levels required when called:    7
 18571 ;; This function calls:
 18572 ;;		Nothing
 18573 ;; This function is called by:
 18574 ;;		_ADC_Calibrate
 18575 ;;		_ADC_Start
 18576 ;;		_ADC_ISR
 18577 ;;		_ADC_Sample
 18578 ;; This function uses a non-reentrant model
 18579 ;;
 18580                           
 18581                           	psect	text99
 18582  01807C                     __ptext99:
 18583                           	opt stack 0
 18584  01807C                     _ADC_On:
 18585                           	opt stack 20
 18586                           
 18587                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 18588                           
 18589                           ;incstack = 0
 18590  01807C  80C2               	bsf	4034,0,c	;volatile
 18591                           
 18592                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 18593  01807E  9C9E               	bcf	3998,6,c	;volatile
 18594  018080  0012               	return		;funcret
 18595  018082                     __end_of_ADC_On:
 18596                           	opt stack 0
 18597                           tosu	equ	0xFFF
 18598                           tosh	equ	0xFFE
 18599                           tosl	equ	0xFFD
 18600                           pclath	equ	0xFFA
 18601                           tblptru	equ	0xFF8
 18602                           tblptrh	equ	0xFF7
 18603                           tblptrl	equ	0xFF6
 18604                           tablat	equ	0xFF5
 18605                           prodh	equ	0xFF4
 18606                           prodl	equ	0xFF3
 18607                           intcon	equ	0xFF2
 18608                           indf0	equ	0xFEF
 18609                           postinc0	equ	0xFEE
 18610                           fsr0h	equ	0xFEA
 18611                           fsr0l	equ	0xFE9
 18612                           wreg	equ	0xFE8
 18613                           indf1	equ	0xFE7
 18614                           postdec1	equ	0xFE5
 18615                           fsr1h	equ	0xFE2
 18616                           fsr1l	equ	0xFE1
 18617                           indf2	equ	0xFDF
 18618                           postinc2	equ	0xFDE
 18619                           postdec2	equ	0xFDD
 18620                           plusw2	equ	0xFDB
 18621                           fsr2h	equ	0xFDA
 18622                           fsr2l	equ	0xFD9
 18623                           status	equ	0xFD8
 18624                           
 18625 ;; *************** function _ADC_Off *****************
 18626 ;; Defined at:
 18627 ;;		line 94 in file "Library/ADC.c"
 18628 ;; Parameters:    Size  Location     Type
 18629 ;;		None
 18630 ;; Auto vars:     Size  Location     Type
 18631 ;;		None
 18632 ;; Return value:  Size  Location     Type
 18633 ;;                  1    wreg      void 
 18634 ;; Registers used:
 18635 ;;		None
 18636 ;; Tracked objects:
 18637 ;;		On entry : 0/0
 18638 ;;		On exit  : 0/0
 18639 ;;		Unchanged: 0/0
 18640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18645 ;;Total ram usage:        0 bytes
 18646 ;; Hardware stack levels used:    1
 18647 ;; Hardware stack levels required when called:    7
 18648 ;; This function calls:
 18649 ;;		Nothing
 18650 ;; This function is called by:
 18651 ;;		_ADC_Calibrate
 18652 ;;		_ADC_Start
 18653 ;;		_ADC_ISR
 18654 ;;		_ADC_Sample
 18655 ;; This function uses a non-reentrant model
 18656 ;;
 18657                           
 18658                           	psect	text100
 18659  018062                     __ptext100:
 18660                           	opt stack 0
 18661  018062                     _ADC_Off:
 18662                           	opt stack 20
 18663                           
 18664                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 18665                           
 18666                           ;incstack = 0
 18667  018062  90C2               	bcf	4034,0,c	;volatile
 18668                           
 18669                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 18670  018064  9C9E               	bcf	3998,6,c	;volatile
 18671                           
 18672                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 18673  018066  9C9D               	bcf	3997,6,c	;volatile
 18674  018068  0012               	return		;funcret
 18675  01806A                     __end_of_ADC_Off:
 18676                           	opt stack 0
 18677                           tosu	equ	0xFFF
 18678                           tosh	equ	0xFFE
 18679                           tosl	equ	0xFFD
 18680                           pclath	equ	0xFFA
 18681                           tblptru	equ	0xFF8
 18682                           tblptrh	equ	0xFF7
 18683                           tblptrl	equ	0xFF6
 18684                           tablat	equ	0xFF5
 18685                           prodh	equ	0xFF4
 18686                           prodl	equ	0xFF3
 18687                           intcon	equ	0xFF2
 18688                           indf0	equ	0xFEF
 18689                           postinc0	equ	0xFEE
 18690                           fsr0h	equ	0xFEA
 18691                           fsr0l	equ	0xFE9
 18692                           wreg	equ	0xFE8
 18693                           indf1	equ	0xFE7
 18694                           postdec1	equ	0xFE5
 18695                           fsr1h	equ	0xFE2
 18696                           fsr1l	equ	0xFE1
 18697                           indf2	equ	0xFDF
 18698                           postinc2	equ	0xFDE
 18699                           postdec2	equ	0xFDD
 18700                           plusw2	equ	0xFDB
 18701                           fsr2h	equ	0xFDA
 18702                           fsr2l	equ	0xFD9
 18703                           status	equ	0xFD8
 18704                           
 18705 ;; *************** function _Console_Init *****************
 18706 ;; Defined at:
 18707 ;;		line 157 in file "Library/Console.c"
 18708 ;; Parameters:    Size  Location     Type
 18709 ;;		None
 18710 ;; Auto vars:     Size  Location     Type
 18711 ;;  y               1    3[BANK0 ] unsigned char 
 18712 ;;  x               1    2[BANK0 ] unsigned char 
 18713 ;; Return value:  Size  Location     Type
 18714 ;;                  1    wreg      void 
 18715 ;; Registers used:
 18716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 18717 ;; Tracked objects:
 18718 ;;		On entry : 0/0
 18719 ;;		On exit  : 0/0
 18720 ;;		Unchanged: 0/0
 18721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;Total ram usage:        4 bytes
 18727 ;; Hardware stack levels used:    1
 18728 ;; Hardware stack levels required when called:    7
 18729 ;; This function calls:
 18730 ;;		Nothing
 18731 ;; This function is called by:
 18732 ;;		_initialise
 18733 ;; This function uses a non-reentrant model
 18734 ;;
 18735                           
 18736                           	psect	text101
 18737  0168E8                     __ptext101:
 18738                           	opt stack 0
 18739  0168E8                     _Console_Init:
 18740                           	opt stack 22
 18741                           
 18742                           ;Console.c: 160: lBufferX = 0;
 18743                           
 18744                           ;incstack = 0
 18745  0168E8  0E00               	movlw	0
 18746  0168EA  0100               	movlb	0	; () banked
 18747  0168EC  6FFA               	movwf	_lBufferX& (0+255),b
 18748                           
 18749                           ;Console.c: 161: lBufferY = 0;
 18750  0168EE  0E00               	movlw	0
 18751  0168F0  0100               	movlb	0	; () banked
 18752  0168F2  6FF9               	movwf	_lBufferY& (0+255),b
 18753                           
 18754                           ;Console.c: 163: UINT8 x, y;
 18755                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 18756  0168F4  0E00               	movlw	0
 18757  0168F6  0100               	movlb	0	; () banked
 18758  0168F8  6F62               	movwf	Console_Init@x& (0+255),b
 18759  0168FA                     l15269:
 18760                           
 18761                           ; BSR set to: 0
 18762  0168FA  0E13               	movlw	19
 18763  0168FC  0100               	movlb	0	; () banked
 18764  0168FE  6562               	cpfsgt	Console_Init@x& (0+255),b
 18765  016900  D001               	goto	l976
 18766  016902  0012               	return	
 18767  016904                     l976:
 18768                           
 18769                           ; BSR set to: 0
 18770                           ;Console.c: 165: {
 18771                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 18772                           
 18773                           ; BSR set to: 0
 18774  016904  0E00               	movlw	0
 18775  016906  0100               	movlb	0	; () banked
 18776  016908  6F63               	movwf	Console_Init@y& (0+255),b
 18777  01690A                     l15275:
 18778                           
 18779                           ; BSR set to: 0
 18780  01690A  0E0E               	movlw	14
 18781  01690C  0100               	movlb	0	; () banked
 18782  01690E  6563               	cpfsgt	Console_Init@y& (0+255),b
 18783  016910  D001               	goto	l978
 18784  016912  D02C               	goto	u13190
 18785  016914                     l978:
 18786                           
 18787                           ; BSR set to: 0
 18788                           ;Console.c: 167: {
 18789                           ;Console.c: 168: lBuffer[y][x] = '\0';
 18790                           
 18791                           ; BSR set to: 0
 18792  016914  0100               	movlb	0	; () banked
 18793  016916  5163               	movf	Console_Init@y& (0+255),w,b
 18794  016918  0D14               	mullw	20
 18795  01691A  0E7B               	movlw	low _lBuffer
 18796  01691C  0100               	movlb	0	; () banked
 18797  01691E  6F60               	movwf	??_Console_Init& (0+255),b
 18798  016920  0E02               	movlw	high _lBuffer
 18799  016922  0100               	movlb	0	; () banked
 18800  016924  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 18801  016926  50F3               	movf	prodl,w,c
 18802  016928  0100               	movlb	0	; () banked
 18803  01692A  2760               	addwf	??_Console_Init& (0+255),f,b
 18804  01692C  50F4               	movf	prodh,w,c
 18805  01692E  0100               	movlb	0	; () banked
 18806  016930  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 18807  016932  0100               	movlb	0	; () banked
 18808  016934  5162               	movf	Console_Init@x& (0+255),w,b
 18809  016936  0D01               	mullw	1
 18810  016938  50F3               	movf	prodl,w,c
 18811  01693A  0100               	movlb	0	; () banked
 18812  01693C  2560               	addwf	??_Console_Init& (0+255),w,b
 18813  01693E  6ED9               	movwf	fsr2l,c
 18814  016940  50F4               	movf	prodh,w,c
 18815  016942  0100               	movlb	0	; () banked
 18816  016944  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 18817  016946  6EDA               	movwf	fsr2h,c
 18818  016948  0E00               	movlw	0
 18819  01694A  6EDF               	movwf	indf2,c
 18820                           
 18821                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 18822  01694C  0100               	movlb	0	; () banked
 18823  01694E  5163               	movf	Console_Init@y& (0+255),w,b
 18824  016950  0D02               	mullw	2
 18825  016952  0E00               	movlw	low _lCBuffer
 18826  016954  24F3               	addwf	prodl,w,c
 18827  016956  6ED9               	movwf	fsr2l,c
 18828  016958  0E02               	movlw	high _lCBuffer
 18829  01695A  20F4               	addwfc	prodh,w,c
 18830  01695C  6EDA               	movwf	fsr2h,c
 18831  01695E  0EFF               	movlw	255
 18832  016960  6EDE               	movwf	postinc2,c
 18833  016962  0EFF               	movlw	255
 18834  016964  6EDD               	movwf	postdec2,c
 18835                           
 18836                           ; BSR set to: 0
 18837  016966  0100               	movlb	0	; () banked
 18838  016968  2B63               	incf	Console_Init@y& (0+255),f,b
 18839  01696A  D7CF               	goto	l15275
 18840  01696C                     u13190:
 18841                           
 18842                           ; BSR set to: 0
 18843                           
 18844                           ; BSR set to: 0
 18845  01696C  0100               	movlb	0	; () banked
 18846  01696E  2B62               	incf	Console_Init@x& (0+255),f,b
 18847  016970  D7C4               	goto	l15269
 18848  016972                     __end_of_Console_Init:
 18849                           	opt stack 0
 18850                           tosu	equ	0xFFF
 18851                           tosh	equ	0xFFE
 18852                           tosl	equ	0xFFD
 18853                           pclath	equ	0xFFA
 18854                           tblptru	equ	0xFF8
 18855                           tblptrh	equ	0xFF7
 18856                           tblptrl	equ	0xFF6
 18857                           tablat	equ	0xFF5
 18858                           prodh	equ	0xFF4
 18859                           prodl	equ	0xFF3
 18860                           intcon	equ	0xFF2
 18861                           indf0	equ	0xFEF
 18862                           postinc0	equ	0xFEE
 18863                           fsr0h	equ	0xFEA
 18864                           fsr0l	equ	0xFE9
 18865                           wreg	equ	0xFE8
 18866                           indf1	equ	0xFE7
 18867                           postdec1	equ	0xFE5
 18868                           fsr1h	equ	0xFE2
 18869                           fsr1l	equ	0xFE1
 18870                           indf2	equ	0xFDF
 18871                           postinc2	equ	0xFDE
 18872                           postdec2	equ	0xFDD
 18873                           plusw2	equ	0xFDB
 18874                           fsr2h	equ	0xFDA
 18875                           fsr2l	equ	0xFD9
 18876                           status	equ	0xFD8
 18877                           
 18878 ;; *************** function _getMode *****************
 18879 ;; Defined at:
 18880 ;;		line 119 in file "main.c"
 18881 ;; Parameters:    Size  Location     Type
 18882 ;;		None
 18883 ;; Auto vars:     Size  Location     Type
 18884 ;;		None
 18885 ;; Return value:  Size  Location     Type
 18886 ;;                  1    wreg      void 
 18887 ;; Registers used:
 18888 ;;		wreg, status,2, status,0
 18889 ;; Tracked objects:
 18890 ;;		On entry : 0/0
 18891 ;;		On exit  : 0/0
 18892 ;;		Unchanged: 0/0
 18893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18897 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18898 ;;Total ram usage:        2 bytes
 18899 ;; Hardware stack levels used:    1
 18900 ;; Hardware stack levels required when called:    7
 18901 ;; This function calls:
 18902 ;;		Nothing
 18903 ;; This function is called by:
 18904 ;;		_main
 18905 ;; This function uses a non-reentrant model
 18906 ;;
 18907                           
 18908                           	psect	text102
 18909  017432                     __ptext102:
 18910                           	opt stack 0
 18911  017432                     _getMode:
 18912                           	opt stack 23
 18913                           
 18914                           ;main.c: 120: switch (dip) {
 18915                           
 18916                           ; BSR set to: 0
 18917                           ;incstack = 0
 18918  017432  D014               	goto	l2049
 18919  017434                     
 18920                           ;main.c: 122: mode = 1;
 18921  017434  0E00               	movlw	0
 18922  017436  6E2D               	movwf	_mode+1,c
 18923  017438  0E01               	movlw	1
 18924  01743A  6E2C               	movwf	_mode,c
 18925                           
 18926                           ;main.c: 123: return;
 18927  01743C  0012               	return	
 18928  01743E                     
 18929                           ;main.c: 125: mode = 2;
 18930  01743E  0E00               	movlw	0
 18931  017440  6E2D               	movwf	_mode+1,c
 18932  017442  0E02               	movlw	2
 18933  017444  6E2C               	movwf	_mode,c
 18934                           
 18935                           ;main.c: 126: return;
 18936  017446  0012               	return	
 18937  017448                     
 18938                           ;main.c: 128: mode = 3;
 18939  017448  0E00               	movlw	0
 18940  01744A  6E2D               	movwf	_mode+1,c
 18941  01744C  0E03               	movlw	3
 18942  01744E  6E2C               	movwf	_mode,c
 18943                           
 18944                           ;main.c: 129: return;
 18945  017450  0012               	return	
 18946  017452                     
 18947                           ;main.c: 131: mode = 0;
 18948  017452  0E00               	movlw	0
 18949  017454  6E2D               	movwf	_mode+1,c
 18950  017456  0E00               	movlw	0
 18951  017458  6E2C               	movwf	_mode,c
 18952                           
 18953                           ;main.c: 133: }
 18954                           
 18955                           ;main.c: 132: return;
 18956  01745A  0012               	return	
 18957  01745C                     l2049:
 18958  01745C  C123  F060         	movff	_dip,??_getMode
 18959  017460  C124  F061         	movff	_dip+1,??_getMode+1
 18960                           
 18961                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 18962                           ; Switch size 1, requested type "space"
 18963                           ; Number of cases is 1, Range of values is 0 to 0
 18964                           ; switch strategies available:
 18965                           ; Name         Instructions Cycles
 18966                           ; simple_byte            4     3 (average)
 18967                           ;	Chosen strategy is simple_byte
 18968  017464  0100               	movlb	0	; () banked
 18969  017466  5161               	movf	(??_getMode+1)& (0+255),w,b
 18970  017468  0A00               	xorlw	0	; case 0
 18971  01746A  A4D8               	btfss	status,2,c
 18972  01746C  D7F2               	goto	l2054
 18973                           
 18974                           ; BSR set to: 0
 18975                           ; Switch size 1, requested type "space"
 18976                           ; Number of cases is 3, Range of values is 1 to 4
 18977                           ; switch strategies available:
 18978                           ; Name         Instructions Cycles
 18979                           ; simple_byte           10     6 (average)
 18980                           ;	Chosen strategy is simple_byte
 18981  01746E  0100               	movlb	0	; () banked
 18982  017470  5160               	movf	??_getMode& (0+255),w,b
 18983  017472  0A01               	xorlw	1	; case 1
 18984  017474  B4D8               	btfsc	status,2,c
 18985  017476  D7DE               	goto	l2050
 18986  017478  0A03               	xorlw	3	; case 2
 18987  01747A  B4D8               	btfsc	status,2,c
 18988  01747C  D7E0               	goto	l2052
 18989  01747E  0A06               	xorlw	6	; case 4
 18990  017480  B4D8               	btfsc	status,2,c
 18991  017482  D7E2               	goto	l2053
 18992  017484  D7E6               	goto	l2054
 18993  017486                     __end_of_getMode:
 18994                           	opt stack 0
 18995                           tosu	equ	0xFFF
 18996                           tosh	equ	0xFFE
 18997                           tosl	equ	0xFFD
 18998                           pclath	equ	0xFFA
 18999                           tblptru	equ	0xFF8
 19000                           tblptrh	equ	0xFF7
 19001                           tblptrl	equ	0xFF6
 19002                           tablat	equ	0xFF5
 19003                           prodh	equ	0xFF4
 19004                           prodl	equ	0xFF3
 19005                           intcon	equ	0xFF2
 19006                           indf0	equ	0xFEF
 19007                           postinc0	equ	0xFEE
 19008                           fsr0h	equ	0xFEA
 19009                           fsr0l	equ	0xFE9
 19010                           wreg	equ	0xFE8
 19011                           indf1	equ	0xFE7
 19012                           postdec1	equ	0xFE5
 19013                           fsr1h	equ	0xFE2
 19014                           fsr1l	equ	0xFE1
 19015                           indf2	equ	0xFDF
 19016                           postinc2	equ	0xFDE
 19017                           postdec2	equ	0xFDD
 19018                           plusw2	equ	0xFDB
 19019                           fsr2h	equ	0xFDA
 19020                           fsr2l	equ	0xFD9
 19021                           status	equ	0xFD8
 19022                           
 19023 ;; *************** function _displayStepMode *****************
 19024 ;; Defined at:
 19025 ;;		line 177 in file "main.c"
 19026 ;; Parameters:    Size  Location     Type
 19027 ;;		None
 19028 ;; Auto vars:     Size  Location     Type
 19029 ;;		None
 19030 ;; Return value:  Size  Location     Type
 19031 ;;                  1    wreg      void 
 19032 ;; Registers used:
 19033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19034 ;; Tracked objects:
 19035 ;;		On entry : 0/0
 19036 ;;		On exit  : 0/0
 19037 ;;		Unchanged: 0/0
 19038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19043 ;;Total ram usage:        0 bytes
 19044 ;; Hardware stack levels used:    1
 19045 ;; Hardware stack levels required when called:   13
 19046 ;; This function calls:
 19047 ;;		_printf
 19048 ;; This function is called by:
 19049 ;;		_main
 19050 ;; This function uses a non-reentrant model
 19051 ;;
 19052                           
 19053                           	psect	text103
 19054  016972                     __ptext103:
 19055                           	opt stack 0
 19056  016972                     _displayStepMode:
 19057                           	opt stack 17
 19058                           
 19059                           ;main.c: 179: printf("Current Mode:\n Step Mode\n");
 19060                           
 19061                           ;incstack = 0
 19062  016972  0E62               	movlw	low STR_7
 19063  016974  0100               	movlb	0	; () banked
 19064  016976  6FB0               	movwf	printf@f& (0+255),b
 19065  016978  0EFF               	movlw	high STR_7
 19066  01697A  0100               	movlb	0	; () banked
 19067  01697C  6FB1               	movwf	(printf@f+1)& (0+255),b
 19068  01697E  EC00  F080         	call	_printf	;wreg free
 19069                           
 19070                           ;main.c: 180: printf("Steps: %d\n", steps);
 19071  016982  0EEC               	movlw	low STR_8
 19072  016984  0100               	movlb	0	; () banked
 19073  016986  6FB0               	movwf	printf@f& (0+255),b
 19074  016988  0EFF               	movlw	high STR_8
 19075  01698A  0100               	movlb	0	; () banked
 19076  01698C  6FB1               	movwf	(printf@f+1)& (0+255),b
 19077  01698E  C0E0  F0B2         	movff	_steps,?_printf+2
 19078  016992  C0E1  F0B3         	movff	_steps+1,?_printf+3
 19079  016996  EC00  F080         	call	_printf	;wreg free
 19080                           
 19081                           ;main.c: 181: printf("Remaining Steps: %d\n\n", remainingSteps);
 19082  01699A  0EAB               	movlw	low STR_9
 19083  01699C  0100               	movlb	0	; () banked
 19084  01699E  6FB0               	movwf	printf@f& (0+255),b
 19085  0169A0  0EFF               	movlw	high STR_9
 19086  0169A2  0100               	movlb	0	; () banked
 19087  0169A4  6FB1               	movwf	(printf@f+1)& (0+255),b
 19088  0169A6  C11F  F0B2         	movff	_remainingSteps,?_printf+2
 19089  0169AA  C120  F0B3         	movff	_remainingSteps+1,?_printf+3
 19090  0169AE  EC00  F080         	call	_printf	;wreg free
 19091                           
 19092                           ;main.c: 182: if (leftState == 1 && steps > 0) {
 19093  0169B2  0100               	movlb	0	; () banked
 19094  0169B4  05F1               	decf	_leftState& (0+255),w,b
 19095  0169B6  A4D8               	btfss	status,2,c
 19096  0169B8  D00F               	goto	l2073
 19097                           
 19098                           ; BSR set to: 0
 19099  0169BA  0100               	movlb	0	; () banked
 19100  0169BC  BFE1               	btfsc	(_steps+1)& (0+255),7,b
 19101  0169BE  D00C               	goto	l2073
 19102  0169C0  0100               	movlb	0	; () banked
 19103  0169C2  51E1               	movf	(_steps+1)& (0+255),w,b
 19104  0169C4  E104               	bnz	u14230
 19105  0169C6  0100               	movlb	0	; () banked
 19106  0169C8  05E0               	decf	_steps& (0+255),w,b
 19107  0169CA  A0D8               	btfss	status,0,c
 19108  0169CC  D005               	goto	l2073
 19109  0169CE                     u14230:
 19110                           
 19111                           ; BSR set to: 0
 19112                           ;main.c: 183: steps--;
 19113  0169CE  0100               	movlb	0	; () banked
 19114  0169D0  07E0               	decf	_steps& (0+255),f,b
 19115  0169D2  A0D8               	btfss	status,0,c
 19116  0169D4  07E1               	decf	(_steps+1)& (0+255),f,b
 19117                           
 19118                           ;main.c: 184: } else if (rightState) {
 19119  0169D6  0012               	return	
 19120  0169D8                     l2073:
 19121                           
 19122                           ; BSR set to: 0
 19123                           
 19124                           ; BSR set to: 0
 19125  0169D8  0100               	movlb	0	; () banked
 19126  0169DA  51F0               	movf	_rightState& (0+255),w,b
 19127  0169DC  B4D8               	btfsc	status,2,c
 19128  0169DE  D004               	goto	l2075
 19129                           
 19130                           ; BSR set to: 0
 19131                           ;main.c: 185: steps++;
 19132  0169E0  0100               	movlb	0	; () banked
 19133  0169E2  4BE0               	infsnz	_steps& (0+255),f,b
 19134  0169E4  2BE1               	incf	(_steps+1)& (0+255),f,b
 19135                           
 19136                           ;main.c: 186: } else if (upState) {
 19137  0169E6  0012               	return	
 19138  0169E8                     l2075:
 19139                           
 19140                           ; BSR set to: 0
 19141                           
 19142                           ; BSR set to: 0
 19143  0169E8  0100               	movlb	0	; () banked
 19144  0169EA  51F3               	movf	_upState& (0+255),w,b
 19145  0169EC  B4D8               	btfsc	status,2,c
 19146  0169EE  0012               	return	
 19147                           
 19148                           ; BSR set to: 0
 19149                           ;main.c: 187: steps = 0;
 19150  0169F0  0E00               	movlw	0
 19151  0169F2  0100               	movlb	0	; () banked
 19152  0169F4  6FE1               	movwf	(_steps+1)& (0+255),b
 19153  0169F6  0E00               	movlw	0
 19154  0169F8  6FE0               	movwf	_steps& (0+255),b
 19155                           
 19156                           ; BSR set to: 0
 19157                           
 19158                           ; BSR set to: 0
 19159  0169FA  0012               	return	
 19160  0169FC                     __end_of_displayStepMode:
 19161                           	opt stack 0
 19162                           tosu	equ	0xFFF
 19163                           tosh	equ	0xFFE
 19164                           tosl	equ	0xFFD
 19165                           pclath	equ	0xFFA
 19166                           tblptru	equ	0xFF8
 19167                           tblptrh	equ	0xFF7
 19168                           tblptrl	equ	0xFF6
 19169                           tablat	equ	0xFF5
 19170                           prodh	equ	0xFF4
 19171                           prodl	equ	0xFF3
 19172                           intcon	equ	0xFF2
 19173                           indf0	equ	0xFEF
 19174                           postinc0	equ	0xFEE
 19175                           fsr0h	equ	0xFEA
 19176                           fsr0l	equ	0xFE9
 19177                           wreg	equ	0xFE8
 19178                           indf1	equ	0xFE7
 19179                           postdec1	equ	0xFE5
 19180                           fsr1h	equ	0xFE2
 19181                           fsr1l	equ	0xFE1
 19182                           indf2	equ	0xFDF
 19183                           postinc2	equ	0xFDE
 19184                           postdec2	equ	0xFDD
 19185                           plusw2	equ	0xFDB
 19186                           fsr2h	equ	0xFDA
 19187                           fsr2l	equ	0xFD9
 19188                           status	equ	0xFD8
 19189                           
 19190 ;; *************** function _displaySID *****************
 19191 ;; Defined at:
 19192 ;;		line 138 in file "main.c"
 19193 ;; Parameters:    Size  Location     Type
 19194 ;;		None
 19195 ;; Auto vars:     Size  Location     Type
 19196 ;;		None
 19197 ;; Return value:  Size  Location     Type
 19198 ;;                  1    wreg      void 
 19199 ;; Registers used:
 19200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19201 ;; Tracked objects:
 19202 ;;		On entry : 0/0
 19203 ;;		On exit  : 0/0
 19204 ;;		Unchanged: 0/0
 19205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19210 ;;Total ram usage:        0 bytes
 19211 ;; Hardware stack levels used:    1
 19212 ;; Hardware stack levels required when called:   13
 19213 ;; This function calls:
 19214 ;;		_Console_SetForecolour
 19215 ;;		_printf
 19216 ;; This function is called by:
 19217 ;;		_main
 19218 ;; This function uses a non-reentrant model
 19219 ;;
 19220                           
 19221                           	psect	text104
 19222  017DA2                     __ptext104:
 19223                           	opt stack 0
 19224  017DA2                     _displaySID:
 19225                           	opt stack 17
 19226                           
 19227                           ;main.c: 139: Console_SetForecolour(0x07E0);
 19228                           
 19229                           ; BSR set to: 0
 19230                           ;incstack = 0
 19231  017DA2  0E07               	movlw	7
 19232  017DA4  0100               	movlb	0	; () banked
 19233  017DA6  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
 19234  017DA8  0EE0               	movlw	224
 19235  017DAA  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
 19236  017DAC  EC28  F0C0         	call	_Console_SetForecolour	;wreg free
 19237                           
 19238                           ;main.c: 140: printf("Jamin Early 99133391\n\n");
 19239  017DB0  0E94               	movlw	low STR_1
 19240  017DB2  0100               	movlb	0	; () banked
 19241  017DB4  6FB0               	movwf	printf@f& (0+255),b
 19242  017DB6  0EFF               	movlw	high STR_1
 19243  017DB8  0100               	movlb	0	; () banked
 19244  017DBA  6FB1               	movwf	(printf@f+1)& (0+255),b
 19245  017DBC  EC00  F080         	call	_printf	;wreg free
 19246  017DC0  0012               	return		;funcret
 19247  017DC2                     __end_of_displaySID:
 19248                           	opt stack 0
 19249                           tosu	equ	0xFFF
 19250                           tosh	equ	0xFFE
 19251                           tosl	equ	0xFFD
 19252                           pclath	equ	0xFFA
 19253                           tblptru	equ	0xFF8
 19254                           tblptrh	equ	0xFF7
 19255                           tblptrl	equ	0xFF6
 19256                           tablat	equ	0xFF5
 19257                           prodh	equ	0xFF4
 19258                           prodl	equ	0xFF3
 19259                           intcon	equ	0xFF2
 19260                           indf0	equ	0xFEF
 19261                           postinc0	equ	0xFEE
 19262                           fsr0h	equ	0xFEA
 19263                           fsr0l	equ	0xFE9
 19264                           wreg	equ	0xFE8
 19265                           indf1	equ	0xFE7
 19266                           postdec1	equ	0xFE5
 19267                           fsr1h	equ	0xFE2
 19268                           fsr1l	equ	0xFE1
 19269                           indf2	equ	0xFDF
 19270                           postinc2	equ	0xFDE
 19271                           postdec2	equ	0xFDD
 19272                           plusw2	equ	0xFDB
 19273                           fsr2h	equ	0xFDA
 19274                           fsr2l	equ	0xFD9
 19275                           status	equ	0xFD8
 19276                           
 19277 ;; *************** function _Console_SetForecolour *****************
 19278 ;; Defined at:
 19279 ;;		line 286 in file "Library/Console.c"
 19280 ;; Parameters:    Size  Location     Type
 19281 ;;  pColour         2    0[BANK0 ] unsigned short 
 19282 ;; Auto vars:     Size  Location     Type
 19283 ;;		None
 19284 ;; Return value:  Size  Location     Type
 19285 ;;                  1    wreg      void 
 19286 ;; Registers used:
 19287 ;;		None
 19288 ;; Tracked objects:
 19289 ;;		On entry : 0/0
 19290 ;;		On exit  : 0/0
 19291 ;;		Unchanged: 0/0
 19292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19294 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19297 ;;Total ram usage:        2 bytes
 19298 ;; Hardware stack levels used:    1
 19299 ;; Hardware stack levels required when called:    7
 19300 ;; This function calls:
 19301 ;;		Nothing
 19302 ;; This function is called by:
 19303 ;;		_displaySID
 19304 ;;		_main
 19305 ;; This function uses a non-reentrant model
 19306 ;;
 19307                           
 19308                           	psect	text105
 19309  018050                     __ptext105:
 19310                           	opt stack 0
 19311  018050                     _Console_SetForecolour:
 19312                           	opt stack 22
 19313                           
 19314                           ;Console.c: 289: gForecolour = pColour;
 19315                           
 19316                           ;incstack = 0
 19317  018050  C060  F0FC         	movff	Console_SetForecolour@pColour,_gForecolour
 19318  018054  C061  F0FD         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 19319  018058  0012               	return		;funcret
 19320  01805A                     __end_of_Console_SetForecolour:
 19321                           	opt stack 0
 19322                           tosu	equ	0xFFF
 19323                           tosh	equ	0xFFE
 19324                           tosl	equ	0xFFD
 19325                           pclath	equ	0xFFA
 19326                           tblptru	equ	0xFF8
 19327                           tblptrh	equ	0xFF7
 19328                           tblptrl	equ	0xFF6
 19329                           tablat	equ	0xFF5
 19330                           prodh	equ	0xFF4
 19331                           prodl	equ	0xFF3
 19332                           intcon	equ	0xFF2
 19333                           indf0	equ	0xFEF
 19334                           postinc0	equ	0xFEE
 19335                           fsr0h	equ	0xFEA
 19336                           fsr0l	equ	0xFE9
 19337                           wreg	equ	0xFE8
 19338                           indf1	equ	0xFE7
 19339                           postdec1	equ	0xFE5
 19340                           fsr1h	equ	0xFE2
 19341                           fsr1l	equ	0xFE1
 19342                           indf2	equ	0xFDF
 19343                           postinc2	equ	0xFDE
 19344                           postdec2	equ	0xFDD
 19345                           plusw2	equ	0xFDB
 19346                           fsr2h	equ	0xFDA
 19347                           fsr2l	equ	0xFD9
 19348                           status	equ	0xFD8
 19349                           
 19350 ;; *************** function _displayPositionMode *****************
 19351 ;; Defined at:
 19352 ;;		line 193 in file "main.c"
 19353 ;; Parameters:    Size  Location     Type
 19354 ;;		None
 19355 ;; Auto vars:     Size  Location     Type
 19356 ;;  angleDegrees    4  115[BANK0 ] float 
 19357 ;; Return value:  Size  Location     Type
 19358 ;;                  1    wreg      void 
 19359 ;; Registers used:
 19360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19361 ;; Tracked objects:
 19362 ;;		On entry : 0/0
 19363 ;;		On exit  : 0/0
 19364 ;;		Unchanged: 0/0
 19365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19367 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19369 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19370 ;;Total ram usage:        8 bytes
 19371 ;; Hardware stack levels used:    1
 19372 ;; Hardware stack levels required when called:   13
 19373 ;; This function calls:
 19374 ;;		_ADC_Voltage
 19375 ;;		___awdiv
 19376 ;;		___flmul
 19377 ;;		___fltol
 19378 ;;		___wmul
 19379 ;;		___xxtofl
 19380 ;;		_pow
 19381 ;;		_printf
 19382 ;; This function is called by:
 19383 ;;		_main
 19384 ;; This function uses a non-reentrant model
 19385 ;;
 19386                           
 19387                           	psect	text106
 19388  013F4C                     __ptext106:
 19389                           	opt stack 0
 19390  013F4C                     _displayPositionMode:
 19391                           	opt stack 17
 19392                           
 19393                           ;main.c: 194: ADCVoltage = ADC_Voltage(&ADC_AN0);
 19394                           
 19395                           ;incstack = 0
 19396  013F4C  0EDD               	movlw	low _ADC_AN0
 19397  013F4E  0100               	movlb	0	; () banked
 19398  013F50  6F87               	movwf	ADC_Voltage@pInput& (0+255),b
 19399  013F52  0E01               	movlw	high _ADC_AN0
 19400  013F54  0100               	movlb	0	; () banked
 19401  013F56  6F88               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
 19402  013F58  ECC7  F0A9         	call	_ADC_Voltage	;wreg free
 19403  013F5C  C087  F100         	movff	?_ADC_Voltage,_ADCVoltage
 19404  013F60  C088  F101         	movff	?_ADC_Voltage+1,_ADCVoltage+1
 19405  013F64  C089  F102         	movff	?_ADC_Voltage+2,_ADCVoltage+2
 19406  013F68  C08A  F103         	movff	?_ADC_Voltage+3,_ADCVoltage+3
 19407                           
 19408                           ;main.c: 195: IRDistance = 58 * pow(ADCVoltage, -1.10);
 19409  013F6C  0ECD               	movlw	205
 19410  013F6E  0100               	movlb	0	; () banked
 19411  013F70  6FCF               	movwf	pow@y& (0+255),b
 19412  013F72  0ECC               	movlw	204
 19413  013F74  6FD0               	movwf	(pow@y+1)& (0+255),b
 19414  013F76  0E8C               	movlw	140
 19415  013F78  6FD1               	movwf	(pow@y+2)& (0+255),b
 19416  013F7A  0EBF               	movlw	191
 19417  013F7C  6FD2               	movwf	(pow@y+3)& (0+255),b
 19418  013F7E  C100  F0CB         	movff	_ADCVoltage,pow@x
 19419  013F82  C101  F0CC         	movff	_ADCVoltage+1,pow@x+1
 19420  013F86  C102  F0CD         	movff	_ADCVoltage+2,pow@x+2
 19421  013F8A  C103  F0CE         	movff	_ADCVoltage+3,pow@x+3
 19422  013F8E  ECB3  F098         	call	_pow	;wreg free
 19423  013F92  C0CB  F0D7         	movff	?_pow,_displayPositionMode$15263
 19424  013F96  C0CC  F0D8         	movff	?_pow+1,_displayPositionMode$15263+1
 19425  013F9A  C0CD  F0D9         	movff	?_pow+2,_displayPositionMode$15263+2
 19426  013F9E  C0CE  F0DA         	movff	?_pow+3,_displayPositionMode$15263+3
 19427                           
 19428                           ;main.c: 195: IRDistance = 58 * pow(ADCVoltage, -1.10);
 19429  013FA2  0E00               	movlw	0
 19430  013FA4  0100               	movlb	0	; () banked
 19431  013FA6  6F72               	movwf	___flmul@a& (0+255),b
 19432  013FA8  0E00               	movlw	0
 19433  013FAA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 19434  013FAC  0E68               	movlw	104
 19435  013FAE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 19436  013FB0  0E42               	movlw	66
 19437  013FB2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 19438  013FB4  C0D7  F06E         	movff	_displayPositionMode$15263,___flmul@b
 19439  013FB8  C0D8  F06F         	movff	_displayPositionMode$15263+1,___flmul@b+1
 19440  013FBC  C0D9  F070         	movff	_displayPositionMode$15263+2,___flmul@b+2
 19441  013FC0  C0DA  F071         	movff	_displayPositionMode$15263+3,___flmul@b+3
 19442  013FC4  EC3A  F089         	call	___flmul	;wreg free
 19443  013FC8  C06E  F087         	movff	?___flmul,___fltol@f1
 19444  013FCC  C06F  F088         	movff	?___flmul+1,___fltol@f1+1
 19445  013FD0  C070  F089         	movff	?___flmul+2,___fltol@f1+2
 19446  013FD4  C071  F08A         	movff	?___flmul+3,___fltol@f1+3
 19447  013FD8  EC55  F0A8         	call	___fltol	;wreg free
 19448  013FDC  C087  F121         	movff	?___fltol,_IRDistance
 19449  013FE0  C088  F122         	movff	?___fltol+1,_IRDistance+1
 19450                           
 19451                           ;main.c: 196: angle = ((IRDistance - 17) * (200) / (117 - 17));
 19452  013FE4  0EEF               	movlw	239
 19453  013FE6  0101               	movlb	1	; () banked
 19454  013FE8  2521               	addwf	_IRDistance& (0+255),w,b
 19455  013FEA  0100               	movlb	0	; () banked
 19456  013FEC  6F60               	movwf	___wmul@multiplier& (0+255),b
 19457  013FEE  0EFF               	movlw	255
 19458  013FF0  0101               	movlb	1	; () banked
 19459  013FF2  2122               	addwfc	(_IRDistance+1)& (0+255),w,b
 19460  013FF4  0100               	movlb	0	; () banked
 19461  013FF6  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 19462  013FF8  0E00               	movlw	0
 19463  013FFA  0100               	movlb	0	; () banked
 19464  013FFC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 19465  013FFE  0EC8               	movlw	200
 19466  014000  6F62               	movwf	___wmul@multiplicand& (0+255),b
 19467  014002  EC55  F0BD         	call	___wmul	;wreg free
 19468  014006  C060  F066         	movff	?___wmul,___awdiv@dividend
 19469  01400A  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
 19470  01400E  0E00               	movlw	0
 19471  014010  0100               	movlb	0	; () banked
 19472  014012  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 19473  014014  0E64               	movlw	100
 19474  014016  6F68               	movwf	___awdiv@divisor& (0+255),b
 19475  014018  ECFA  F0AC         	call	___awdiv	;wreg free
 19476  01401C  C066  F0DE         	movff	?___awdiv,_angle
 19477  014020  C067  F0DF         	movff	?___awdiv+1,_angle+1
 19478                           
 19479                           ;main.c: 197: if (angle >= 200) {
 19480  014024  0100               	movlb	0	; () banked
 19481  014026  BFDF               	btfsc	(_angle+1)& (0+255),7,b
 19482  014028  D00D               	goto	l2081
 19483  01402A  0100               	movlb	0	; () banked
 19484  01402C  51DF               	movf	(_angle+1)& (0+255),w,b
 19485  01402E  E105               	bnz	u14260
 19486  014030  0EC8               	movlw	200
 19487  014032  0100               	movlb	0	; () banked
 19488  014034  5DDE               	subwf	_angle& (0+255),w,b
 19489  014036  A0D8               	btfss	status,0,c
 19490  014038  D005               	goto	l2081
 19491  01403A                     u14260:
 19492                           
 19493                           ; BSR set to: 0
 19494                           ;main.c: 198: angle = 200;
 19495  01403A  0E00               	movlw	0
 19496  01403C  0100               	movlb	0	; () banked
 19497  01403E  6FDF               	movwf	(_angle+1)& (0+255),b
 19498  014040  0EC8               	movlw	200
 19499  014042  6FDE               	movwf	_angle& (0+255),b
 19500  014044                     l2081:
 19501                           
 19502                           ; BSR set to: 0
 19503                           ;main.c: 199: }
 19504                           ;main.c: 200: if (angle < 0) {
 19505                           
 19506                           ; BSR set to: 0
 19507  014044  0100               	movlb	0	; () banked
 19508  014046  AFDF               	btfss	(_angle+1)& (0+255),7,b
 19509  014048  D005               	goto	l2082
 19510                           
 19511                           ; BSR set to: 0
 19512                           ;main.c: 201: angle = 0;
 19513  01404A  0E00               	movlw	0
 19514  01404C  0100               	movlb	0	; () banked
 19515  01404E  6FDF               	movwf	(_angle+1)& (0+255),b
 19516  014050  0E00               	movlw	0
 19517  014052  6FDE               	movwf	_angle& (0+255),b
 19518  014054                     l2082:
 19519                           
 19520                           ; BSR set to: 0
 19521                           ;main.c: 202: }
 19522                           ;main.c: 203: printf("Current Mode:\n Position Mode\n\n");
 19523                           
 19524                           ; BSR set to: 0
 19525  014054  0E29               	movlw	low STR_10
 19526  014056  0100               	movlb	0	; () banked
 19527  014058  6FB0               	movwf	printf@f& (0+255),b
 19528  01405A  0EFF               	movlw	high STR_10
 19529  01405C  0100               	movlb	0	; () banked
 19530  01405E  6FB1               	movwf	(printf@f+1)& (0+255),b
 19531  014060  EC00  F080         	call	_printf	;wreg free
 19532                           
 19533                           ;main.c: 204: float angleDegrees = ((float) angle * 1.8);
 19534  014064  C0DE  F060         	movff	_angle,___xxtofl@val
 19535  014068  C0DF  F061         	movff	_angle+1,___xxtofl@val+1
 19536  01406C  0100               	movlb	0	; () banked
 19537  01406E  0E00               	movlw	0
 19538  014070  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 19539  014072  0EFF               	movlw	-1
 19540  014074  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 19541  014076  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 19542  014078  0E01               	movlw	1
 19543  01407A  ECB0  F09A         	call	___xxtofl
 19544  01407E  C060  F06E         	movff	?___xxtofl,___flmul@b
 19545  014082  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 19546  014086  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 19547  01408A  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 19548  01408E  0E66               	movlw	102
 19549  014090  0100               	movlb	0	; () banked
 19550  014092  6F72               	movwf	___flmul@a& (0+255),b
 19551  014094  0E66               	movlw	102
 19552  014096  6F73               	movwf	(___flmul@a+1)& (0+255),b
 19553  014098  0EE6               	movlw	230
 19554  01409A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 19555  01409C  0E3F               	movlw	63
 19556  01409E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 19557  0140A0  EC3A  F089         	call	___flmul	;wreg free
 19558  0140A4  C06E  F0D3         	movff	?___flmul,displayPositionMode@angleDegrees
 19559  0140A8  C06F  F0D4         	movff	?___flmul+1,displayPositionMode@angleDegrees+1
 19560  0140AC  C070  F0D5         	movff	?___flmul+2,displayPositionMode@angleDegrees+2
 19561  0140B0  C071  F0D6         	movff	?___flmul+3,displayPositionMode@angleDegrees+3
 19562                           
 19563                           ;main.c: 205: printf("Target Angle:\n %f \n", angleDegrees);
 19564  0140B4  0EC1               	movlw	low STR_11
 19565  0140B6  0100               	movlb	0	; () banked
 19566  0140B8  6FB0               	movwf	printf@f& (0+255),b
 19567  0140BA  0EFF               	movlw	high STR_11
 19568  0140BC  0100               	movlb	0	; () banked
 19569  0140BE  6FB1               	movwf	(printf@f+1)& (0+255),b
 19570  0140C0  C0D3  F0B2         	movff	displayPositionMode@angleDegrees,?_printf+2
 19571  0140C4  C0D4  F0B3         	movff	displayPositionMode@angleDegrees+1,?_printf+3
 19572  0140C8  C0D5  F0B4         	movff	displayPositionMode@angleDegrees+2,?_printf+4
 19573  0140CC  C0D6  F0B5         	movff	displayPositionMode@angleDegrees+3,?_printf+5
 19574  0140D0  EC00  F080         	call	_printf	;wreg free
 19575  0140D4  0012               	return		;funcret
 19576  0140D6                     __end_of_displayPositionMode:
 19577                           	opt stack 0
 19578                           tosu	equ	0xFFF
 19579                           tosh	equ	0xFFE
 19580                           tosl	equ	0xFFD
 19581                           pclath	equ	0xFFA
 19582                           tblptru	equ	0xFF8
 19583                           tblptrh	equ	0xFF7
 19584                           tblptrl	equ	0xFF6
 19585                           tablat	equ	0xFF5
 19586                           prodh	equ	0xFF4
 19587                           prodl	equ	0xFF3
 19588                           intcon	equ	0xFF2
 19589                           indf0	equ	0xFEF
 19590                           postinc0	equ	0xFEE
 19591                           fsr0h	equ	0xFEA
 19592                           fsr0l	equ	0xFE9
 19593                           wreg	equ	0xFE8
 19594                           indf1	equ	0xFE7
 19595                           postdec1	equ	0xFE5
 19596                           fsr1h	equ	0xFE2
 19597                           fsr1l	equ	0xFE1
 19598                           indf2	equ	0xFDF
 19599                           postinc2	equ	0xFDE
 19600                           postdec2	equ	0xFDD
 19601                           plusw2	equ	0xFDB
 19602                           fsr2h	equ	0xFDA
 19603                           fsr2l	equ	0xFD9
 19604                           status	equ	0xFD8
 19605                           
 19606 ;; *************** function _pow *****************
 19607 ;; Defined at:
 19608 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
 19609 ;; Parameters:    Size  Location     Type
 19610 ;;  x               4  107[BANK0 ] void 
 19611 ;;  y               4  111[BANK0 ] void 
 19612 ;; Auto vars:     Size  Location     Type
 19613 ;;  yi              4    9[BANK2 ] unsigned long 
 19614 ;;  sign            1    8[BANK2 ] unsigned char 
 19615 ;; Return value:  Size  Location     Type
 19616 ;;                  4  107[BANK0 ] unsigned char 
 19617 ;; Registers used:
 19618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19619 ;; Tracked objects:
 19620 ;;		On entry : 0/0
 19621 ;;		On exit  : 0/0
 19622 ;;		Unchanged: 0/0
 19623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19624 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19625 ;;      Locals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19627 ;;      Totals:         0       8       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19628 ;;Total ram usage:       21 bytes
 19629 ;; Hardware stack levels used:    1
 19630 ;; Hardware stack levels required when called:   10
 19631 ;; This function calls:
 19632 ;;		___flge
 19633 ;;		___flmul
 19634 ;;		___flneg
 19635 ;;		___fltol
 19636 ;;		___xxtofl
 19637 ;;		_exp
 19638 ;;		_log
 19639 ;; This function is called by:
 19640 ;;		_displayPositionMode
 19641 ;; This function uses a non-reentrant model
 19642 ;;
 19643                           
 19644                           	psect	text107
 19645  013166                     __ptext107:
 19646                           	opt stack 0
 19647  013166                     _pow:
 19648                           	opt stack 19
 19649                           
 19650                           ;incstack = 0
 19651  013166  0E00               	movlw	0
 19652  013168  0102               	movlb	2	; () banked
 19653  01316A  6F76               	movwf	pow@sign& (0+255),b
 19654                           
 19655                           ; BSR set to: 2
 19656  01316C  0100               	movlb	0	; () banked
 19657  01316E  51CB               	movf	pow@x& (0+255),w,b
 19658  013170  0100               	movlb	0	; () banked
 19659  013172  11CC               	iorwf	(pow@x+1)& (0+255),w,b
 19660  013174  0100               	movlb	0	; () banked
 19661  013176  11CD               	iorwf	(pow@x+2)& (0+255),w,b
 19662  013178  0100               	movlb	0	; () banked
 19663  01317A  11CE               	iorwf	(pow@x+3)& (0+255),w,b
 19664  01317C  A4D8               	btfss	status,2,c
 19665  01317E  D025               	goto	l2686
 19666                           
 19667                           ; BSR set to: 0
 19668  013180  0E00               	movlw	0
 19669  013182  0100               	movlb	0	; () banked
 19670  013184  6F60               	movwf	___flge@ff1& (0+255),b
 19671  013186  0E00               	movlw	0
 19672  013188  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 19673  01318A  0E00               	movlw	0
 19674  01318C  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 19675  01318E  0E00               	movlw	0
 19676  013190  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 19677  013192  C0CF  F064         	movff	pow@y,___flge@ff2
 19678  013196  C0D0  F065         	movff	pow@y+1,___flge@ff2+1
 19679  01319A  C0D1  F066         	movff	pow@y+2,___flge@ff2+2
 19680  01319E  C0D2  F067         	movff	pow@y+3,___flge@ff2+3
 19681  0131A2  ECDE  F09E         	call	___flge	;wreg free
 19682  0131A6  0100               	movlb	0	; () banked
 19683  0131A8  A0D8               	btfss	status,0,c
 19684  0131AA  D005               	goto	l2687
 19685                           
 19686                           ; BSR set to: 0
 19687  0131AC  0E00               	movlw	0
 19688  0131AE  0101               	movlb	1	; () banked
 19689  0131B0  6F1C               	movwf	(_errno+1)& (0+255),b
 19690  0131B2  0E21               	movlw	33
 19691  0131B4  6F1B               	movwf	_errno& (0+255),b
 19692  0131B6                     l2687:
 19693  0131B6  0E00               	movlw	0
 19694  0131B8  0100               	movlb	0	; () banked
 19695  0131BA  6FCB               	movwf	?_pow& (0+255),b
 19696  0131BC  0E00               	movlw	0
 19697  0131BE  6FCC               	movwf	(?_pow+1)& (0+255),b
 19698  0131C0  0E00               	movlw	0
 19699  0131C2  6FCD               	movwf	(?_pow+2)& (0+255),b
 19700  0131C4  0E00               	movlw	0
 19701  0131C6  6FCE               	movwf	(?_pow+3)& (0+255),b
 19702                           
 19703                           ; BSR set to: 0
 19704  0131C8  0012               	return	
 19705  0131CA                     l2686:
 19706                           
 19707                           ; BSR set to: 0
 19708                           
 19709                           ; BSR set to: 0
 19710  0131CA  0100               	movlb	0	; () banked
 19711  0131CC  51CF               	movf	pow@y& (0+255),w,b
 19712  0131CE  0100               	movlb	0	; () banked
 19713  0131D0  11D0               	iorwf	(pow@y+1)& (0+255),w,b
 19714  0131D2  0100               	movlb	0	; () banked
 19715  0131D4  11D1               	iorwf	(pow@y+2)& (0+255),w,b
 19716  0131D6  0100               	movlb	0	; () banked
 19717  0131D8  11D2               	iorwf	(pow@y+3)& (0+255),w,b
 19718  0131DA  A4D8               	btfss	status,2,c
 19719  0131DC  D00A               	goto	l2689
 19720                           
 19721                           ; BSR set to: 0
 19722  0131DE  0E00               	movlw	0
 19723  0131E0  0100               	movlb	0	; () banked
 19724  0131E2  6FCB               	movwf	?_pow& (0+255),b
 19725  0131E4  0E00               	movlw	0
 19726  0131E6  6FCC               	movwf	(?_pow+1)& (0+255),b
 19727  0131E8  0E80               	movlw	128
 19728  0131EA  6FCD               	movwf	(?_pow+2)& (0+255),b
 19729  0131EC  0E3F               	movlw	63
 19730  0131EE  6FCE               	movwf	(?_pow+3)& (0+255),b
 19731                           
 19732                           ; BSR set to: 0
 19733  0131F0  0012               	return	
 19734  0131F2                     l2689:
 19735                           
 19736                           ; BSR set to: 0
 19737                           
 19738                           ; BSR set to: 0
 19739  0131F2  0100               	movlb	0	; () banked
 19740  0131F4  AFCE               	btfss	(pow@x+3)& (0+255),7,b
 19741  0131F6  D058               	goto	l2690
 19742                           
 19743                           ; BSR set to: 0
 19744  0131F8  C0CF  F087         	movff	pow@y,___fltol@f1
 19745  0131FC  C0D0  F088         	movff	pow@y+1,___fltol@f1+1
 19746  013200  C0D1  F089         	movff	pow@y+2,___fltol@f1+2
 19747  013204  C0D2  F08A         	movff	pow@y+3,___fltol@f1+3
 19748  013208  EC55  F0A8         	call	___fltol	;wreg free
 19749  01320C  C087  F277         	movff	?___fltol,pow@yi
 19750  013210  C088  F278         	movff	?___fltol+1,pow@yi+1
 19751  013214  C089  F279         	movff	?___fltol+2,pow@yi+2
 19752  013218  C08A  F27A         	movff	?___fltol+3,pow@yi+3
 19753  01321C  C277  F060         	movff	pow@yi,___xxtofl@val
 19754  013220  C278  F061         	movff	pow@yi+1,___xxtofl@val+1
 19755  013224  C279  F062         	movff	pow@yi+2,___xxtofl@val+2
 19756  013228  C27A  F063         	movff	pow@yi+3,___xxtofl@val+3
 19757  01322C  0E00               	movlw	0
 19758  01322E  ECB0  F09A         	call	___xxtofl
 19759  013232  0100               	movlb	0	; () banked
 19760  013234  51CF               	movf	pow@y& (0+255),w,b
 19761  013236  0100               	movlb	0	; () banked
 19762  013238  1960               	xorwf	?___xxtofl& (0+255),w,b
 19763  01323A  E110               	bnz	u13720
 19764  01323C  0100               	movlb	0	; () banked
 19765  01323E  51D0               	movf	(pow@y+1)& (0+255),w,b
 19766  013240  0100               	movlb	0	; () banked
 19767  013242  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
 19768  013244  E10B               	bnz	u13720
 19769  013246  0100               	movlb	0	; () banked
 19770  013248  51D1               	movf	(pow@y+2)& (0+255),w,b
 19771  01324A  0100               	movlb	0	; () banked
 19772  01324C  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
 19773  01324E  E106               	bnz	u13720
 19774  013250  0100               	movlb	0	; () banked
 19775  013252  51D2               	movf	(pow@y+3)& (0+255),w,b
 19776  013254  0100               	movlb	0	; () banked
 19777  013256  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
 19778  013258  B4D8               	btfsc	status,2,c
 19779  01325A  D00F               	goto	l2691
 19780  01325C                     u13720:
 19781                           
 19782                           ; BSR set to: 0
 19783  01325C  0E00               	movlw	0
 19784  01325E  0101               	movlb	1	; () banked
 19785  013260  6F1C               	movwf	(_errno+1)& (0+255),b
 19786  013262  0E21               	movlw	33
 19787  013264  6F1B               	movwf	_errno& (0+255),b
 19788  013266  0E00               	movlw	0
 19789  013268  0100               	movlb	0	; () banked
 19790  01326A  6FCB               	movwf	?_pow& (0+255),b
 19791  01326C  0E00               	movlw	0
 19792  01326E  6FCC               	movwf	(?_pow+1)& (0+255),b
 19793  013270  0E00               	movlw	0
 19794  013272  6FCD               	movwf	(?_pow+2)& (0+255),b
 19795  013274  0E00               	movlw	0
 19796  013276  6FCE               	movwf	(?_pow+3)& (0+255),b
 19797                           
 19798                           ; BSR set to: 0
 19799  013278  0012               	return	
 19800  01327A                     l2691:
 19801                           
 19802                           ; BSR set to: 0
 19803                           
 19804                           ; BSR set to: 0
 19805  01327A  0102               	movlb	2	; () banked
 19806  01327C  5177               	movf	pow@yi& (0+255),w,b
 19807  01327E  0B01               	andlw	1
 19808  013280  0102               	movlb	2	; () banked
 19809  013282  6F76               	movwf	pow@sign& (0+255),b
 19810                           
 19811                           ; BSR set to: 2
 19812  013284  C0CB  F060         	movff	pow@x,___flneg@f1
 19813  013288  C0CC  F061         	movff	pow@x+1,___flneg@f1+1
 19814  01328C  C0CD  F062         	movff	pow@x+2,___flneg@f1+2
 19815  013290  C0CE  F063         	movff	pow@x+3,___flneg@f1+3
 19816  013294  EC39  F0BD         	call	___flneg	;wreg free
 19817  013298  C060  F0CB         	movff	?___flneg,pow@x
 19818  01329C  C061  F0CC         	movff	?___flneg+1,pow@x+1
 19819  0132A0  C062  F0CD         	movff	?___flneg+2,pow@x+2
 19820  0132A4  C063  F0CE         	movff	?___flneg+3,pow@x+3
 19821  0132A8                     l2690:
 19822  0132A8  C0CB  F0B8         	movff	pow@x,log@x
 19823  0132AC  C0CC  F0B9         	movff	pow@x+1,log@x+1
 19824  0132B0  C0CD  F0BA         	movff	pow@x+2,log@x+2
 19825  0132B4  C0CE  F0BB         	movff	pow@x+3,log@x+3
 19826  0132B8  EC6B  F0A0         	call	_log	;wreg free
 19827  0132BC  C0B8  F26E         	movff	?_log,_pow$15268
 19828  0132C0  C0B9  F26F         	movff	?_log+1,_pow$15268+1
 19829  0132C4  C0BA  F270         	movff	?_log+2,_pow$15268+2
 19830  0132C8  C0BB  F271         	movff	?_log+3,_pow$15268+3
 19831  0132CC  C26E  F06E         	movff	_pow$15268,___flmul@b
 19832  0132D0  C26F  F06F         	movff	_pow$15268+1,___flmul@b+1
 19833  0132D4  C270  F070         	movff	_pow$15268+2,___flmul@b+2
 19834  0132D8  C271  F071         	movff	_pow$15268+3,___flmul@b+3
 19835  0132DC  C0CF  F072         	movff	pow@y,___flmul@a
 19836  0132E0  C0D0  F073         	movff	pow@y+1,___flmul@a+1
 19837  0132E4  C0D1  F074         	movff	pow@y+2,___flmul@a+2
 19838  0132E8  C0D2  F075         	movff	pow@y+3,___flmul@a+3
 19839  0132EC  EC3A  F089         	call	___flmul	;wreg free
 19840  0132F0  C06E  F272         	movff	?___flmul,_pow$15269
 19841  0132F4  C06F  F273         	movff	?___flmul+1,_pow$15269+1
 19842  0132F8  C070  F274         	movff	?___flmul+2,_pow$15269+2
 19843  0132FC  C071  F275         	movff	?___flmul+3,_pow$15269+3
 19844  013300  C272  F0C0         	movff	_pow$15269,exp@x
 19845  013304  C273  F0C1         	movff	_pow$15269+1,exp@x+1
 19846  013308  C274  F0C2         	movff	_pow$15269+2,exp@x+2
 19847  01330C  C275  F0C3         	movff	_pow$15269+3,exp@x+3
 19848  013310  ECDC  F092         	call	_exp	;wreg free
 19849  013314  C0C0  F0CB         	movff	?_exp,pow@x
 19850  013318  C0C1  F0CC         	movff	?_exp+1,pow@x+1
 19851  01331C  C0C2  F0CD         	movff	?_exp+2,pow@x+2
 19852  013320  C0C3  F0CE         	movff	?_exp+3,pow@x+3
 19853  013324  0102               	movlb	2	; () banked
 19854  013326  5176               	movf	pow@sign& (0+255),w,b
 19855  013328  0102               	movlb	2	; () banked
 19856  01332A  B4D8               	btfsc	status,2,c
 19857  01332C  D013               	goto	l2692
 19858                           
 19859                           ; BSR set to: 2
 19860  01332E  C0CB  F060         	movff	pow@x,___flneg@f1
 19861  013332  C0CC  F061         	movff	pow@x+1,___flneg@f1+1
 19862  013336  C0CD  F062         	movff	pow@x+2,___flneg@f1+2
 19863  01333A  C0CE  F063         	movff	pow@x+3,___flneg@f1+3
 19864  01333E  EC39  F0BD         	call	___flneg	;wreg free
 19865  013342  C060  F0CB         	movff	?___flneg,?_pow
 19866  013346  C061  F0CC         	movff	?___flneg+1,?_pow+1
 19867  01334A  C062  F0CD         	movff	?___flneg+2,?_pow+2
 19868  01334E  C063  F0CE         	movff	?___flneg+3,?_pow+3
 19869  013352  0012               	return	
 19870  013354                     l2692:
 19871                           
 19872                           ; BSR set to: 2
 19873  013354  C0CB  F0CB         	movff	pow@x,?_pow
 19874  013358  C0CC  F0CC         	movff	pow@x+1,?_pow+1
 19875  01335C  C0CD  F0CD         	movff	pow@x+2,?_pow+2
 19876  013360  C0CE  F0CE         	movff	pow@x+3,?_pow+3
 19877  013364  0012               	return		;funcret
 19878  013366                     __end_of_pow:
 19879                           	opt stack 0
 19880                           tosu	equ	0xFFF
 19881                           tosh	equ	0xFFE
 19882                           tosl	equ	0xFFD
 19883                           pclath	equ	0xFFA
 19884                           tblptru	equ	0xFF8
 19885                           tblptrh	equ	0xFF7
 19886                           tblptrl	equ	0xFF6
 19887                           tablat	equ	0xFF5
 19888                           prodh	equ	0xFF4
 19889                           prodl	equ	0xFF3
 19890                           intcon	equ	0xFF2
 19891                           indf0	equ	0xFEF
 19892                           postinc0	equ	0xFEE
 19893                           fsr0h	equ	0xFEA
 19894                           fsr0l	equ	0xFE9
 19895                           wreg	equ	0xFE8
 19896                           indf1	equ	0xFE7
 19897                           postdec1	equ	0xFE5
 19898                           fsr1h	equ	0xFE2
 19899                           fsr1l	equ	0xFE1
 19900                           indf2	equ	0xFDF
 19901                           postinc2	equ	0xFDE
 19902                           postdec2	equ	0xFDD
 19903                           plusw2	equ	0xFDB
 19904                           fsr2h	equ	0xFDA
 19905                           fsr2l	equ	0xFD9
 19906                           status	equ	0xFD8
 19907                           
 19908 ;; *************** function _log *****************
 19909 ;; Defined at:
 19910 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
 19911 ;; Parameters:    Size  Location     Type
 19912 ;;  x               4   88[BANK0 ] unsigned char 
 19913 ;; Auto vars:     Size  Location     Type
 19914 ;;  exponent        2   92[BANK0 ] int 
 19915 ;; Return value:  Size  Location     Type
 19916 ;;                  4   88[BANK0 ] int 
 19917 ;; Registers used:
 19918 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19919 ;; Tracked objects:
 19920 ;;		On entry : 0/0
 19921 ;;		On exit  : 0/0
 19922 ;;		Unchanged: 0/0
 19923 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19924 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19925 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19926 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19927 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19928 ;;Total ram usage:        6 bytes
 19929 ;; Hardware stack levels used:    1
 19930 ;; Hardware stack levels required when called:    9
 19931 ;; This function calls:
 19932 ;;		___fladd
 19933 ;;		___flmul
 19934 ;;		___xxtofl
 19935 ;;		_eval_poly
 19936 ;;		_frexp
 19937 ;; This function is called by:
 19938 ;;		_pow
 19939 ;; This function uses a non-reentrant model
 19940 ;;
 19941                           
 19942                           	psect	text108
 19943  0140D6                     __ptext108:
 19944                           	opt stack 0
 19945  0140D6                     _log:
 19946                           	opt stack 19
 19947                           
 19948                           ;incstack = 0
 19949  0140D6  0100               	movlb	0	; () banked
 19950  0140D8  AFBB               	btfss	(log@x+3)& (0+255),7,b
 19951  0140DA  D00F               	goto	l2892
 19952                           
 19953                           ; BSR set to: 0
 19954  0140DC  0E00               	movlw	0
 19955  0140DE  0101               	movlb	1	; () banked
 19956  0140E0  6F1C               	movwf	(_errno+1)& (0+255),b
 19957  0140E2  0E21               	movlw	33
 19958  0140E4  6F1B               	movwf	_errno& (0+255),b
 19959  0140E6  0E00               	movlw	0
 19960  0140E8  0100               	movlb	0	; () banked
 19961  0140EA  6FB8               	movwf	?_log& (0+255),b
 19962  0140EC  0E00               	movlw	0
 19963  0140EE  6FB9               	movwf	(?_log+1)& (0+255),b
 19964  0140F0  0E00               	movlw	0
 19965  0140F2  6FBA               	movwf	(?_log+2)& (0+255),b
 19966  0140F4  0E00               	movlw	0
 19967  0140F6  6FBB               	movwf	(?_log+3)& (0+255),b
 19968                           
 19969                           ; BSR set to: 0
 19970  0140F8  0012               	return	
 19971  0140FA                     l2892:
 19972                           
 19973                           ; BSR set to: 0
 19974                           
 19975                           ; BSR set to: 0
 19976  0140FA  0100               	movlb	0	; () banked
 19977  0140FC  51B8               	movf	log@x& (0+255),w,b
 19978  0140FE  0100               	movlb	0	; () banked
 19979  014100  11B9               	iorwf	(log@x+1)& (0+255),w,b
 19980  014102  0100               	movlb	0	; () banked
 19981  014104  11BA               	iorwf	(log@x+2)& (0+255),w,b
 19982  014106  0100               	movlb	0	; () banked
 19983  014108  11BB               	iorwf	(log@x+3)& (0+255),w,b
 19984  01410A  A4D8               	btfss	status,2,c
 19985  01410C  D00F               	goto	l2894
 19986                           
 19987                           ; BSR set to: 0
 19988  01410E  0E00               	movlw	0
 19989  014110  0101               	movlb	1	; () banked
 19990  014112  6F1C               	movwf	(_errno+1)& (0+255),b
 19991  014114  0E22               	movlw	34
 19992  014116  6F1B               	movwf	_errno& (0+255),b
 19993  014118  0E00               	movlw	0
 19994  01411A  0100               	movlb	0	; () banked
 19995  01411C  6FB8               	movwf	?_log& (0+255),b
 19996  01411E  0E00               	movlw	0
 19997  014120  6FB9               	movwf	(?_log+1)& (0+255),b
 19998  014122  0E00               	movlw	0
 19999  014124  6FBA               	movwf	(?_log+2)& (0+255),b
 20000  014126  0E00               	movlw	0
 20001  014128  6FBB               	movwf	(?_log+3)& (0+255),b
 20002                           
 20003                           ; BSR set to: 0
 20004  01412A  0012               	return	
 20005  01412C                     l2894:
 20006                           
 20007                           ; BSR set to: 0
 20008                           
 20009                           ; BSR set to: 0
 20010  01412C  0E00               	movlw	0
 20011  01412E  0100               	movlb	0	; () banked
 20012  014130  6F72               	movwf	___flmul@a& (0+255),b
 20013  014132  0E00               	movlw	0
 20014  014134  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20015  014136  0E00               	movlw	0
 20016  014138  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20017  01413A  0E40               	movlw	64
 20018  01413C  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20019  01413E  0EBC               	movlw	low log@exponent
 20020  014140  0100               	movlb	0	; () banked
 20021  014142  6F64               	movwf	frexp@eptr& (0+255),b
 20022  014144  0E00               	movlw	high log@exponent
 20023  014146  0100               	movlb	0	; () banked
 20024  014148  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 20025  01414A  C0B8  F060         	movff	log@x,frexp@value
 20026  01414E  C0B9  F061         	movff	log@x+1,frexp@value+1
 20027  014152  C0BA  F062         	movff	log@x+2,frexp@value+2
 20028  014156  C0BB  F063         	movff	log@x+3,frexp@value+3
 20029  01415A  EC6F  F0AE         	call	_frexp	;wreg free
 20030  01415E  C060  F06E         	movff	?_frexp,___flmul@b
 20031  014162  C061  F06F         	movff	?_frexp+1,___flmul@b+1
 20032  014166  C062  F070         	movff	?_frexp+2,___flmul@b+2
 20033  01416A  C063  F071         	movff	?_frexp+3,___flmul@b+3
 20034  01416E  EC3A  F089         	call	___flmul	;wreg free
 20035  014172  C06E  F094         	movff	?___flmul,___fladd@b
 20036  014176  C06F  F095         	movff	?___flmul+1,___fladd@b+1
 20037  01417A  C070  F096         	movff	?___flmul+2,___fladd@b+2
 20038  01417E  C071  F097         	movff	?___flmul+3,___fladd@b+3
 20039  014182  0E00               	movlw	0
 20040  014184  0100               	movlb	0	; () banked
 20041  014186  6F98               	movwf	___fladd@a& (0+255),b
 20042  014188  0E00               	movlw	0
 20043  01418A  6F99               	movwf	(___fladd@a+1)& (0+255),b
 20044  01418C  0E80               	movlw	128
 20045  01418E  6F9A               	movwf	(___fladd@a+2)& (0+255),b
 20046  014190  0EBF               	movlw	191
 20047  014192  6F9B               	movwf	(___fladd@a+3)& (0+255),b
 20048  014194  ECE6  F086         	call	___fladd	;wreg free
 20049  014198  C094  F0B8         	movff	?___fladd,log@x
 20050  01419C  C095  F0B9         	movff	?___fladd+1,log@x+1
 20051  0141A0  C096  F0BA         	movff	?___fladd+2,log@x+2
 20052  0141A4  C097  F0BB         	movff	?___fladd+3,log@x+3
 20053  0141A8  0100               	movlb	0	; () banked
 20054  0141AA  07BC               	decf	log@exponent& (0+255),f,b
 20055  0141AC  A0D8               	btfss	status,0,c
 20056  0141AE  07BD               	decf	(log@exponent+1)& (0+255),f,b
 20057                           
 20058                           ; BSR set to: 0
 20059  0141B0  C0B8  F0A8         	movff	log@x,eval_poly@x
 20060  0141B4  C0B9  F0A9         	movff	log@x+1,eval_poly@x+1
 20061  0141B8  C0BA  F0AA         	movff	log@x+2,eval_poly@x+2
 20062  0141BC  C0BB  F0AB         	movff	log@x+3,eval_poly@x+3
 20063  0141C0  0ED7               	movlw	low log@coeff
 20064  0141C2  0100               	movlb	0	; () banked
 20065  0141C4  6FAC               	movwf	eval_poly@d& (0+255),b
 20066  0141C6  0EFE               	movlw	high log@coeff
 20067  0141C8  0100               	movlb	0	; () banked
 20068  0141CA  6FAD               	movwf	(eval_poly@d+1)& (0+255),b
 20069  0141CC  0E00               	movlw	0
 20070  0141CE  0100               	movlb	0	; () banked
 20071  0141D0  6FAF               	movwf	(eval_poly@n+1)& (0+255),b
 20072  0141D2  0E08               	movlw	8
 20073  0141D4  6FAE               	movwf	eval_poly@n& (0+255),b
 20074  0141D6  ECC9  F0A7         	call	_eval_poly	;wreg free
 20075  0141DA  C0A8  F0B8         	movff	?_eval_poly,log@x
 20076  0141DE  C0A9  F0B9         	movff	?_eval_poly+1,log@x+1
 20077  0141E2  C0AA  F0BA         	movff	?_eval_poly+2,log@x+2
 20078  0141E6  C0AB  F0BB         	movff	?_eval_poly+3,log@x+3
 20079  0141EA  0E18               	movlw	24
 20080  0141EC  0100               	movlb	0	; () banked
 20081  0141EE  6F72               	movwf	___flmul@a& (0+255),b
 20082  0141F0  0E72               	movlw	114
 20083  0141F2  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20084  0141F4  0E31               	movlw	49
 20085  0141F6  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20086  0141F8  0E3F               	movlw	63
 20087  0141FA  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20088  0141FC  C0BC  F060         	movff	log@exponent,___xxtofl@val
 20089  014200  C0BD  F061         	movff	log@exponent+1,___xxtofl@val+1
 20090  014204  0100               	movlb	0	; () banked
 20091  014206  0E00               	movlw	0
 20092  014208  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 20093  01420A  0EFF               	movlw	-1
 20094  01420C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 20095  01420E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 20096  014210  0E01               	movlw	1
 20097  014212  ECB0  F09A         	call	___xxtofl
 20098  014216  C060  F06E         	movff	?___xxtofl,___flmul@b
 20099  01421A  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
 20100  01421E  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
 20101  014222  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
 20102  014226  EC3A  F089         	call	___flmul	;wreg free
 20103  01422A  C06E  F094         	movff	?___flmul,___fladd@b
 20104  01422E  C06F  F095         	movff	?___flmul+1,___fladd@b+1
 20105  014232  C070  F096         	movff	?___flmul+2,___fladd@b+2
 20106  014236  C071  F097         	movff	?___flmul+3,___fladd@b+3
 20107  01423A  C0B8  F098         	movff	log@x,___fladd@a
 20108  01423E  C0B9  F099         	movff	log@x+1,___fladd@a+1
 20109  014242  C0BA  F09A         	movff	log@x+2,___fladd@a+2
 20110  014246  C0BB  F09B         	movff	log@x+3,___fladd@a+3
 20111  01424A  ECE6  F086         	call	___fladd	;wreg free
 20112  01424E  C094  F0B8         	movff	?___fladd,?_log
 20113  014252  C095  F0B9         	movff	?___fladd+1,?_log+1
 20114  014256  C096  F0BA         	movff	?___fladd+2,?_log+2
 20115  01425A  C097  F0BB         	movff	?___fladd+3,?_log+3
 20116  01425E  0012               	return	
 20117  014260                     __end_of_log:
 20118                           	opt stack 0
 20119                           tosu	equ	0xFFF
 20120                           tosh	equ	0xFFE
 20121                           tosl	equ	0xFFD
 20122                           pclath	equ	0xFFA
 20123                           tblptru	equ	0xFF8
 20124                           tblptrh	equ	0xFF7
 20125                           tblptrl	equ	0xFF6
 20126                           tablat	equ	0xFF5
 20127                           prodh	equ	0xFF4
 20128                           prodl	equ	0xFF3
 20129                           intcon	equ	0xFF2
 20130                           indf0	equ	0xFEF
 20131                           postinc0	equ	0xFEE
 20132                           fsr0h	equ	0xFEA
 20133                           fsr0l	equ	0xFE9
 20134                           wreg	equ	0xFE8
 20135                           indf1	equ	0xFE7
 20136                           postdec1	equ	0xFE5
 20137                           fsr1h	equ	0xFE2
 20138                           fsr1l	equ	0xFE1
 20139                           indf2	equ	0xFDF
 20140                           postinc2	equ	0xFDE
 20141                           postdec2	equ	0xFDD
 20142                           plusw2	equ	0xFDB
 20143                           fsr2h	equ	0xFDA
 20144                           fsr2l	equ	0xFD9
 20145                           status	equ	0xFD8
 20146                           
 20147 ;; *************** function _exp *****************
 20148 ;; Defined at:
 20149 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
 20150 ;; Parameters:    Size  Location     Type
 20151 ;;  x               4   96[BANK0 ] int 
 20152 ;; Auto vars:     Size  Location     Type
 20153 ;;  exponent        2  104[BANK0 ] int 
 20154 ;;  sign            1  106[BANK0 ] unsigned char 
 20155 ;; Return value:  Size  Location     Type
 20156 ;;                  4   96[BANK0 ] unsigned char 
 20157 ;; Registers used:
 20158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20159 ;; Tracked objects:
 20160 ;;		On entry : 0/0
 20161 ;;		On exit  : 0/0
 20162 ;;		Unchanged: 0/0
 20163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20165 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20167 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20168 ;;Total ram usage:       11 bytes
 20169 ;; Hardware stack levels used:    1
 20170 ;; Hardware stack levels required when called:    9
 20171 ;; This function calls:
 20172 ;;		___fldiv
 20173 ;;		___flge
 20174 ;;		___flmul
 20175 ;;		___flneg
 20176 ;;		___flsub
 20177 ;;		___fltol
 20178 ;;		___xxtofl
 20179 ;;		_eval_poly
 20180 ;;		_floor
 20181 ;;		_ldexp
 20182 ;; This function is called by:
 20183 ;;		_pow
 20184 ;; This function uses a non-reentrant model
 20185 ;;
 20186                           
 20187                           	psect	text109
 20188  0125B8                     __ptext109:
 20189                           	opt stack 0
 20190  0125B8                     _exp:
 20191                           	opt stack 19
 20192                           
 20193                           ;incstack = 0
 20194  0125B8  0100               	movlb	0	; () banked
 20195  0125BA  51C0               	movf	exp@x& (0+255),w,b
 20196  0125BC  0100               	movlb	0	; () banked
 20197  0125BE  11C1               	iorwf	(exp@x+1)& (0+255),w,b
 20198  0125C0  0100               	movlb	0	; () banked
 20199  0125C2  11C2               	iorwf	(exp@x+2)& (0+255),w,b
 20200  0125C4  0100               	movlb	0	; () banked
 20201  0125C6  11C3               	iorwf	(exp@x+3)& (0+255),w,b
 20202  0125C8  A4D8               	btfss	status,2,c
 20203  0125CA  D00A               	goto	l2850
 20204                           
 20205                           ; BSR set to: 0
 20206  0125CC  0E00               	movlw	0
 20207  0125CE  0100               	movlb	0	; () banked
 20208  0125D0  6FC0               	movwf	?_exp& (0+255),b
 20209  0125D2  0E00               	movlw	0
 20210  0125D4  6FC1               	movwf	(?_exp+1)& (0+255),b
 20211  0125D6  0E80               	movlw	128
 20212  0125D8  6FC2               	movwf	(?_exp+2)& (0+255),b
 20213  0125DA  0E3F               	movlw	63
 20214  0125DC  6FC3               	movwf	(?_exp+3)& (0+255),b
 20215                           
 20216                           ; BSR set to: 0
 20217  0125DE  0012               	return	
 20218  0125E0                     l2850:
 20219                           
 20220                           ; BSR set to: 0
 20221                           
 20222                           ; BSR set to: 0
 20223  0125E0  0E18               	movlw	24
 20224  0125E2  0100               	movlb	0	; () banked
 20225  0125E4  6F60               	movwf	___flge@ff1& (0+255),b
 20226  0125E6  0E72               	movlw	114
 20227  0125E8  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 20228  0125EA  0E31               	movlw	49
 20229  0125EC  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 20230  0125EE  0E44               	movlw	68
 20231  0125F0  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 20232  0125F2  C0C0  F064         	movff	exp@x,___flge@ff2
 20233  0125F6  C0C1  F065         	movff	exp@x+1,___flge@ff2+1
 20234  0125FA  C0C2  F066         	movff	exp@x+2,___flge@ff2+2
 20235  0125FE  C0C3  F067         	movff	exp@x+3,___flge@ff2+3
 20236  012602  ECDE  F09E         	call	___flge	;wreg free
 20237  012606  0100               	movlb	0	; () banked
 20238  012608  B0D8               	btfsc	status,0,c
 20239  01260A  D00F               	goto	l2852
 20240                           
 20241                           ; BSR set to: 0
 20242  01260C  0E00               	movlw	0
 20243  01260E  0101               	movlb	1	; () banked
 20244  012610  6F1C               	movwf	(_errno+1)& (0+255),b
 20245  012612  0E22               	movlw	34
 20246  012614  6F1B               	movwf	_errno& (0+255),b
 20247  012616  0EFF               	movlw	255
 20248  012618  0100               	movlb	0	; () banked
 20249  01261A  6FC0               	movwf	?_exp& (0+255),b
 20250  01261C  0EFF               	movlw	255
 20251  01261E  6FC1               	movwf	(?_exp+1)& (0+255),b
 20252  012620  0E7F               	movlw	127
 20253  012622  6FC2               	movwf	(?_exp+2)& (0+255),b
 20254  012624  0E7F               	movlw	127
 20255  012626  6FC3               	movwf	(?_exp+3)& (0+255),b
 20256                           
 20257                           ; BSR set to: 0
 20258  012628  0012               	return	
 20259  01262A                     l2852:
 20260                           
 20261                           ; BSR set to: 0
 20262                           
 20263                           ; BSR set to: 0
 20264  01262A  C0C0  F060         	movff	exp@x,___flge@ff1
 20265  01262E  C0C1  F061         	movff	exp@x+1,___flge@ff1+1
 20266  012632  C0C2  F062         	movff	exp@x+2,___flge@ff1+2
 20267  012636  C0C3  F063         	movff	exp@x+3,___flge@ff1+3
 20268  01263A  0E87               	movlw	135
 20269  01263C  0100               	movlb	0	; () banked
 20270  01263E  6F64               	movwf	___flge@ff2& (0+255),b
 20271  012640  0E48               	movlw	72
 20272  012642  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 20273  012644  0E3A               	movlw	58
 20274  012646  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 20275  012648  0EC4               	movlw	196
 20276  01264A  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 20277  01264C  ECDE  F09E         	call	___flge	;wreg free
 20278  012650  0100               	movlb	0	; () banked
 20279  012652  B0D8               	btfsc	status,0,c
 20280  012654  D00F               	goto	l2853
 20281                           
 20282                           ; BSR set to: 0
 20283  012656  0E00               	movlw	0
 20284  012658  0101               	movlb	1	; () banked
 20285  01265A  6F1C               	movwf	(_errno+1)& (0+255),b
 20286  01265C  0E22               	movlw	34
 20287  01265E  6F1B               	movwf	_errno& (0+255),b
 20288  012660  0E00               	movlw	0
 20289  012662  0100               	movlb	0	; () banked
 20290  012664  6FC0               	movwf	?_exp& (0+255),b
 20291  012666  0E00               	movlw	0
 20292  012668  6FC1               	movwf	(?_exp+1)& (0+255),b
 20293  01266A  0E00               	movlw	0
 20294  01266C  6FC2               	movwf	(?_exp+2)& (0+255),b
 20295  01266E  0E00               	movlw	0
 20296  012670  6FC3               	movwf	(?_exp+3)& (0+255),b
 20297                           
 20298                           ; BSR set to: 0
 20299  012672  0012               	return	
 20300  012674                     l2853:
 20301                           
 20302                           ; BSR set to: 0
 20303                           
 20304                           ; BSR set to: 0
 20305  012674  0100               	movlb	0	; () banked
 20306  012676  AFC3               	btfss	(exp@x+3)& (0+255),7,b
 20307  012678  D002               	goto	u13020
 20308  01267A  0E01               	movlw	1
 20309  01267C  D001               	goto	u13030
 20310  01267E                     u13020:
 20311  01267E  0E00               	movlw	0
 20312  012680                     u13030:
 20313  012680  0100               	movlb	0	; () banked
 20314  012682  6FCA               	movwf	exp@sign& (0+255),b
 20315                           
 20316                           ; BSR set to: 0
 20317  012684  0100               	movlb	0	; () banked
 20318  012686  51CA               	movf	exp@sign& (0+255),w,b
 20319  012688  0100               	movlb	0	; () banked
 20320  01268A  B4D8               	btfsc	status,2,c
 20321  01268C  D012               	goto	l2854
 20322                           
 20323                           ; BSR set to: 0
 20324  01268E  C0C0  F060         	movff	exp@x,___flneg@f1
 20325  012692  C0C1  F061         	movff	exp@x+1,___flneg@f1+1
 20326  012696  C0C2  F062         	movff	exp@x+2,___flneg@f1+2
 20327  01269A  C0C3  F063         	movff	exp@x+3,___flneg@f1+3
 20328  01269E  EC39  F0BD         	call	___flneg	;wreg free
 20329  0126A2  C060  F0C0         	movff	?___flneg,exp@x
 20330  0126A6  C061  F0C1         	movff	?___flneg+1,exp@x+1
 20331  0126AA  C062  F0C2         	movff	?___flneg+2,exp@x+2
 20332  0126AE  C063  F0C3         	movff	?___flneg+3,exp@x+3
 20333  0126B2                     l2854:
 20334  0126B2  C0C0  F06E         	movff	exp@x,___flmul@b
 20335  0126B6  C0C1  F06F         	movff	exp@x+1,___flmul@b+1
 20336  0126BA  C0C2  F070         	movff	exp@x+2,___flmul@b+2
 20337  0126BE  C0C3  F071         	movff	exp@x+3,___flmul@b+3
 20338  0126C2  0E3B               	movlw	59
 20339  0126C4  0100               	movlb	0	; () banked
 20340  0126C6  6F72               	movwf	___flmul@a& (0+255),b
 20341  0126C8  0EAA               	movlw	170
 20342  0126CA  6F73               	movwf	(___flmul@a+1)& (0+255),b
 20343  0126CC  0EB8               	movlw	184
 20344  0126CE  6F74               	movwf	(___flmul@a+2)& (0+255),b
 20345  0126D0  0E3F               	movlw	63
 20346  0126D2  6F75               	movwf	(___flmul@a+3)& (0+255),b
 20347  0126D4  EC3A  F089         	call	___flmul	;wreg free
 20348  0126D8  C06E  F0C0         	movff	?___flmul,exp@x
 20349  0126DC  C06F  F0C1         	movff	?___flmul+1,exp@x+1
 20350  0126E0  C070  F0C2         	movff	?___flmul+2,exp@x+2
 20351  0126E4  C071  F0C3         	movff	?___flmul+3,exp@x+3
 20352  0126E8  C0C0  F0A8         	movff	exp@x,floor@x
 20353  0126EC  C0C1  F0A9         	movff	exp@x+1,floor@x+1
 20354  0126F0  C0C2  F0AA         	movff	exp@x+2,floor@x+2
 20355  0126F4  C0C3  F0AB         	movff	exp@x+3,floor@x+3
 20356  0126F8  EC37  F0A7         	call	_floor	;wreg free
 20357  0126FC  C0A8  F0C4         	movff	?_floor,_exp$15270
 20358  012700  C0A9  F0C5         	movff	?_floor+1,_exp$15270+1
 20359  012704  C0AA  F0C6         	movff	?_floor+2,_exp$15270+2
 20360  012708  C0AB  F0C7         	movff	?_floor+3,_exp$15270+3
 20361  01270C  C0C4  F087         	movff	_exp$15270,___fltol@f1
 20362  012710  C0C5  F088         	movff	_exp$15270+1,___fltol@f1+1
 20363  012714  C0C6  F089         	movff	_exp$15270+2,___fltol@f1+2
 20364  012718  C0C7  F08A         	movff	_exp$15270+3,___fltol@f1+3
 20365  01271C  EC55  F0A8         	call	___fltol	;wreg free
 20366  012720  C087  F0C8         	movff	?___fltol,exp@exponent
 20367  012724  C088  F0C9         	movff	?___fltol+1,exp@exponent+1
 20368  012728  C0C0  F0A8         	movff	exp@x,___flsub@b
 20369  01272C  C0C1  F0A9         	movff	exp@x+1,___flsub@b+1
 20370  012730  C0C2  F0AA         	movff	exp@x+2,___flsub@b+2
 20371  012734  C0C3  F0AB         	movff	exp@x+3,___flsub@b+3
 20372  012738  C0C8  F060         	movff	exp@exponent,___xxtofl@val
 20373  01273C  C0C9  F061         	movff	exp@exponent+1,___xxtofl@val+1
 20374  012740  0100               	movlb	0	; () banked
 20375  012742  0E00               	movlw	0
 20376  012744  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 20377  012746  0EFF               	movlw	-1
 20378  012748  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
 20379  01274A  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
 20380  01274C  0E01               	movlw	1
 20381  01274E  ECB0  F09A         	call	___xxtofl
 20382  012752  C060  F0AC         	movff	?___xxtofl,___flsub@a
 20383  012756  C061  F0AD         	movff	?___xxtofl+1,___flsub@a+1
 20384  01275A  C062  F0AE         	movff	?___xxtofl+2,___flsub@a+2
 20385  01275E  C063  F0AF         	movff	?___xxtofl+3,___flsub@a+3
 20386  012762  EC73  F0BB         	call	___flsub	;wreg free
 20387  012766  C0A8  F0C0         	movff	?___flsub,exp@x
 20388  01276A  C0A9  F0C1         	movff	?___flsub+1,exp@x+1
 20389  01276E  C0AA  F0C2         	movff	?___flsub+2,exp@x+2
 20390  012772  C0AB  F0C3         	movff	?___flsub+3,exp@x+3
 20391  012776  C0C0  F0A8         	movff	exp@x,eval_poly@x
 20392  01277A  C0C1  F0A9         	movff	exp@x+1,eval_poly@x+1
 20393  01277E  C0C2  F0AA         	movff	exp@x+2,eval_poly@x+2
 20394  012782  C0C3  F0AB         	movff	exp@x+3,eval_poly@x+3
 20395  012786  0EAF               	movlw	low exp@coeff
 20396  012788  0100               	movlb	0	; () banked
 20397  01278A  6FAC               	movwf	eval_poly@d& (0+255),b
 20398  01278C  0EFE               	movlw	high exp@coeff
 20399  01278E  0100               	movlb	0	; () banked
 20400  012790  6FAD               	movwf	(eval_poly@d+1)& (0+255),b
 20401  012792  0E00               	movlw	0
 20402  012794  0100               	movlb	0	; () banked
 20403  012796  6FAF               	movwf	(eval_poly@n+1)& (0+255),b
 20404  012798  0E09               	movlw	9
 20405  01279A  6FAE               	movwf	eval_poly@n& (0+255),b
 20406  01279C  ECC9  F0A7         	call	_eval_poly	;wreg free
 20407  0127A0  C0A8  F0B8         	movff	?_eval_poly,ldexp@value
 20408  0127A4  C0A9  F0B9         	movff	?_eval_poly+1,ldexp@value+1
 20409  0127A8  C0AA  F0BA         	movff	?_eval_poly+2,ldexp@value+2
 20410  0127AC  C0AB  F0BB         	movff	?_eval_poly+3,ldexp@value+3
 20411  0127B0  C0C8  F0BC         	movff	exp@exponent,ldexp@newexp
 20412  0127B4  C0C9  F0BD         	movff	exp@exponent+1,ldexp@newexp+1
 20413  0127B8  ECA5  F0A6         	call	_ldexp	;wreg free
 20414  0127BC  C0B8  F0C0         	movff	?_ldexp,exp@x
 20415  0127C0  C0B9  F0C1         	movff	?_ldexp+1,exp@x+1
 20416  0127C4  C0BA  F0C2         	movff	?_ldexp+2,exp@x+2
 20417  0127C8  C0BB  F0C3         	movff	?_ldexp+3,exp@x+3
 20418  0127CC  0100               	movlb	0	; () banked
 20419  0127CE  51CA               	movf	exp@sign& (0+255),w,b
 20420  0127D0  0100               	movlb	0	; () banked
 20421  0127D2  B4D8               	btfsc	status,2,c
 20422  0127D4  D035               	goto	l2855
 20423                           
 20424                           ; BSR set to: 0
 20425  0127D6  0100               	movlb	0	; () banked
 20426  0127D8  29C0               	incf	exp@x& (0+255),w,b
 20427  0127DA  E116               	bnz	l15187
 20428  0127DC  0100               	movlb	0	; () banked
 20429  0127DE  29C1               	incf	(exp@x+1)& (0+255),w,b
 20430  0127E0  E113               	bnz	l15187
 20431  0127E2  0E7F               	movlw	127
 20432  0127E4  0100               	movlb	0	; () banked
 20433  0127E6  19C2               	xorwf	(exp@x+2)& (0+255),w,b
 20434  0127E8  E10F               	bnz	l15187
 20435  0127EA  0E7F               	movlw	127
 20436  0127EC  0100               	movlb	0	; () banked
 20437  0127EE  19C3               	xorwf	(exp@x+3)& (0+255),w,b
 20438  0127F0  A4D8               	btfss	status,2,c
 20439  0127F2  D00A               	goto	l2856
 20440                           
 20441                           ; BSR set to: 0
 20442  0127F4  0E00               	movlw	0
 20443  0127F6  0100               	movlb	0	; () banked
 20444  0127F8  6FC0               	movwf	?_exp& (0+255),b
 20445  0127FA  0E00               	movlw	0
 20446  0127FC  6FC1               	movwf	(?_exp+1)& (0+255),b
 20447  0127FE  0E00               	movlw	0
 20448  012800  6FC2               	movwf	(?_exp+2)& (0+255),b
 20449  012802  0E00               	movlw	0
 20450  012804  6FC3               	movwf	(?_exp+3)& (0+255),b
 20451                           
 20452                           ; BSR set to: 0
 20453  012806  0012               	return	
 20454  012808                     l2856:
 20455  012808                     l15187:
 20456                           
 20457                           ; BSR set to: 0
 20458  012808  0E00               	movlw	0
 20459  01280A  0100               	movlb	0	; () banked
 20460  01280C  6F60               	movwf	___fldiv@b& (0+255),b
 20461  01280E  0E00               	movlw	0
 20462  012810  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 20463  012812  0E80               	movlw	128
 20464  012814  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 20465  012816  0E3F               	movlw	63
 20466  012818  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 20467  01281A  C0C0  F064         	movff	exp@x,___fldiv@a
 20468  01281E  C0C1  F065         	movff	exp@x+1,___fldiv@a+1
 20469  012822  C0C2  F066         	movff	exp@x+2,___fldiv@a+2
 20470  012826  C0C3  F067         	movff	exp@x+3,___fldiv@a+3
 20471  01282A  EC9C  F08D         	call	___fldiv	;wreg free
 20472  01282E  C060  F0C0         	movff	?___fldiv,?_exp
 20473  012832  C061  F0C1         	movff	?___fldiv+1,?_exp+1
 20474  012836  C062  F0C2         	movff	?___fldiv+2,?_exp+2
 20475  01283A  C063  F0C3         	movff	?___fldiv+3,?_exp+3
 20476  01283E  0012               	return	
 20477  012840                     l2855:
 20478                           
 20479                           ; BSR set to: 0
 20480  012840  C0C0  F0C0         	movff	exp@x,?_exp
 20481  012844  C0C1  F0C1         	movff	exp@x+1,?_exp+1
 20482  012848  C0C2  F0C2         	movff	exp@x+2,?_exp+2
 20483  01284C  C0C3  F0C3         	movff	exp@x+3,?_exp+3
 20484  012850  0012               	return		;funcret
 20485  012852                     __end_of_exp:
 20486                           	opt stack 0
 20487                           tosu	equ	0xFFF
 20488                           tosh	equ	0xFFE
 20489                           tosl	equ	0xFFD
 20490                           pclath	equ	0xFFA
 20491                           tblptru	equ	0xFF8
 20492                           tblptrh	equ	0xFF7
 20493                           tblptrl	equ	0xFF6
 20494                           tablat	equ	0xFF5
 20495                           prodh	equ	0xFF4
 20496                           prodl	equ	0xFF3
 20497                           intcon	equ	0xFF2
 20498                           indf0	equ	0xFEF
 20499                           postinc0	equ	0xFEE
 20500                           fsr0h	equ	0xFEA
 20501                           fsr0l	equ	0xFE9
 20502                           wreg	equ	0xFE8
 20503                           indf1	equ	0xFE7
 20504                           postdec1	equ	0xFE5
 20505                           fsr1h	equ	0xFE2
 20506                           fsr1l	equ	0xFE1
 20507                           indf2	equ	0xFDF
 20508                           postinc2	equ	0xFDE
 20509                           postdec2	equ	0xFDD
 20510                           plusw2	equ	0xFDB
 20511                           fsr2h	equ	0xFDA
 20512                           fsr2l	equ	0xFD9
 20513                           status	equ	0xFD8
 20514                           
 20515 ;; *************** function _ldexp *****************
 20516 ;; Defined at:
 20517 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
 20518 ;; Parameters:    Size  Location     Type
 20519 ;;  value           4   88[BANK0 ] unsigned char 
 20520 ;;  newexp          2   92[BANK0 ] int 
 20521 ;; Auto vars:     Size  Location     Type
 20522 ;;		None
 20523 ;; Return value:  Size  Location     Type
 20524 ;;                  4   88[BANK0 ] int 
 20525 ;; Registers used:
 20526 ;;		wreg, status,2, status,0
 20527 ;; Tracked objects:
 20528 ;;		On entry : 0/0
 20529 ;;		On exit  : 0/0
 20530 ;;		Unchanged: 0/0
 20531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20532 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20534 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20535 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20536 ;;Total ram usage:        8 bytes
 20537 ;; Hardware stack levels used:    1
 20538 ;; Hardware stack levels required when called:    7
 20539 ;; This function calls:
 20540 ;;		Nothing
 20541 ;; This function is called by:
 20542 ;;		_exp
 20543 ;; This function uses a non-reentrant model
 20544 ;;
 20545                           
 20546                           	psect	text110
 20547  014D4A                     __ptext110:
 20548                           	opt stack 0
 20549  014D4A                     _ldexp:
 20550                           	opt stack 20
 20551                           
 20552                           ;incstack = 0
 20553  014D4A  0100               	movlb	0	; () banked
 20554  014D4C  51B8               	movf	ldexp@value& (0+255),w,b
 20555  014D4E  0100               	movlb	0	; () banked
 20556  014D50  11B9               	iorwf	(ldexp@value+1)& (0+255),w,b
 20557  014D52  0100               	movlb	0	; () banked
 20558  014D54  11BA               	iorwf	(ldexp@value+2)& (0+255),w,b
 20559  014D56  0100               	movlb	0	; () banked
 20560  014D58  11BB               	iorwf	(ldexp@value+3)& (0+255),w,b
 20561  014D5A  A4D8               	btfss	status,2,c
 20562  014D5C  D00A               	goto	l2874
 20563                           
 20564                           ; BSR set to: 0
 20565  014D5E  0E00               	movlw	0
 20566  014D60  0100               	movlb	0	; () banked
 20567  014D62  6FB8               	movwf	?_ldexp& (0+255),b
 20568  014D64  0E00               	movlw	0
 20569  014D66  6FB9               	movwf	(?_ldexp+1)& (0+255),b
 20570  014D68  0E00               	movlw	0
 20571  014D6A  6FBA               	movwf	(?_ldexp+2)& (0+255),b
 20572  014D6C  0E00               	movlw	0
 20573  014D6E  6FBB               	movwf	(?_ldexp+3)& (0+255),b
 20574                           
 20575                           ; BSR set to: 0
 20576  014D70  0012               	return	
 20577  014D72                     l2874:
 20578                           
 20579                           ; BSR set to: 0
 20580                           
 20581                           ; BSR set to: 0
 20582  014D72  0100               	movlb	0	; () banked
 20583  014D74  51BB               	movf	(ldexp@value+3)& (0+255),w,b
 20584  014D76  0B7F               	andlw	127
 20585  014D78  0100               	movlb	0	; () banked
 20586  014D7A  6FBE               	movwf	??_ldexp& (0+255),b
 20587  014D7C  6BBF               	clrf	(??_ldexp+1)& (0+255),b
 20588  014D7E  90D8               	bcf	status,0,c
 20589  014D80  0100               	movlb	0	; () banked
 20590  014D82  37BE               	rlcf	??_ldexp& (0+255),f,b
 20591  014D84  37BF               	rlcf	(??_ldexp+1)& (0+255),f,b
 20592  014D86  0100               	movlb	0	; () banked
 20593  014D88  51BE               	movf	??_ldexp& (0+255),w,b
 20594  014D8A  0100               	movlb	0	; () banked
 20595  014D8C  27BC               	addwf	ldexp@newexp& (0+255),f,b
 20596  014D8E  0100               	movlb	0	; () banked
 20597  014D90  51BF               	movf	(??_ldexp+1)& (0+255),w,b
 20598  014D92  0100               	movlb	0	; () banked
 20599  014D94  23BD               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 20600  014D96  0100               	movlb	0	; () banked
 20601  014D98  AFBA               	btfss	(ldexp@value+2)& (0+255),7,b
 20602  014D9A  D004               	goto	u12330
 20603  014D9C  0100               	movlb	0	; () banked
 20604  014D9E  6BBE               	clrf	??_ldexp& (0+255),b
 20605  014DA0  2BBE               	incf	??_ldexp& (0+255),f,b
 20606  014DA2  D002               	goto	u12338
 20607  014DA4                     u12330:
 20608  014DA4  0100               	movlb	0	; () banked
 20609  014DA6  6BBE               	clrf	??_ldexp& (0+255),b
 20610  014DA8                     u12338:
 20611  014DA8  0100               	movlb	0	; () banked
 20612  014DAA  51BE               	movf	??_ldexp& (0+255),w,b
 20613  014DAC  0100               	movlb	0	; () banked
 20614  014DAE  27BC               	addwf	ldexp@newexp& (0+255),f,b
 20615  014DB0  0E00               	movlw	0
 20616  014DB2  23BD               	addwfc	(ldexp@newexp+1)& (0+255),f,b
 20617  014DB4  0100               	movlb	0	; () banked
 20618  014DB6  AFBD               	btfss	(ldexp@newexp+1)& (0+255),7,b
 20619  014DB8  D00F               	goto	l2876
 20620                           
 20621                           ; BSR set to: 0
 20622  014DBA  0E00               	movlw	0
 20623  014DBC  0101               	movlb	1	; () banked
 20624  014DBE  6F1C               	movwf	(_errno+1)& (0+255),b
 20625  014DC0  0E22               	movlw	34
 20626  014DC2  6F1B               	movwf	_errno& (0+255),b
 20627  014DC4  0E00               	movlw	0
 20628  014DC6  0100               	movlb	0	; () banked
 20629  014DC8  6FB8               	movwf	?_ldexp& (0+255),b
 20630  014DCA  0E00               	movlw	0
 20631  014DCC  6FB9               	movwf	(?_ldexp+1)& (0+255),b
 20632  014DCE  0E00               	movlw	0
 20633  014DD0  6FBA               	movwf	(?_ldexp+2)& (0+255),b
 20634  014DD2  0E00               	movlw	0
 20635  014DD4                     L14:
 20636  014DD4  6FBB               	movwf	(?_ldexp+3)& (0+255),b
 20637                           
 20638                           ; BSR set to: 0
 20639  014DD6  0012               	return	
 20640  014DD8                     l2876:
 20641                           
 20642                           ; BSR set to: 0
 20643                           
 20644                           ; BSR set to: 0
 20645  014DD8  0100               	movlb	0	; () banked
 20646  014DDA  BFBD               	btfsc	(ldexp@newexp+1)& (0+255),7,b
 20647  014DDC  D01E               	goto	l2878
 20648  014DDE  0100               	movlb	0	; () banked
 20649  014DE0  05BD               	decf	(ldexp@newexp+1)& (0+255),w,b
 20650  014DE2  A0D8               	btfss	status,0,c
 20651  014DE4  D01A               	goto	l2878
 20652                           
 20653                           ; BSR set to: 0
 20654  014DE6  0E00               	movlw	0
 20655  014DE8  0101               	movlb	1	; () banked
 20656  014DEA  6F1C               	movwf	(_errno+1)& (0+255),b
 20657  014DEC  0E22               	movlw	34
 20658  014DEE  6F1B               	movwf	_errno& (0+255),b
 20659                           
 20660                           ; BSR set to: 1
 20661  014DF0  0100               	movlb	0	; () banked
 20662  014DF2  AFBB               	btfss	(ldexp@value+3)& (0+255),7,b
 20663  014DF4  D009               	goto	l2879
 20664                           
 20665                           ; BSR set to: 0
 20666  014DF6  0EFF               	movlw	255
 20667  014DF8  0100               	movlb	0	; () banked
 20668  014DFA  6FB8               	movwf	?_ldexp& (0+255),b
 20669  014DFC  0EFF               	movlw	255
 20670  014DFE  6FB9               	movwf	(?_ldexp+1)& (0+255),b
 20671  014E00  0E7F               	movlw	127
 20672  014E02  6FBA               	movwf	(?_ldexp+2)& (0+255),b
 20673  014E04  0EFF               	movlw	255
 20674  014E06  D7E6               	goto	L14
 20675  014E08                     l2879:
 20676                           
 20677                           ; BSR set to: 0
 20678                           
 20679                           ; BSR set to: 0
 20680  014E08  0EFF               	movlw	255
 20681  014E0A  0100               	movlb	0	; () banked
 20682  014E0C  6FB8               	movwf	?_ldexp& (0+255),b
 20683  014E0E  0EFF               	movlw	255
 20684  014E10  6FB9               	movwf	(?_ldexp+1)& (0+255),b
 20685  014E12  0E7F               	movlw	127
 20686  014E14  6FBA               	movwf	(?_ldexp+2)& (0+255),b
 20687  014E16  0E7F               	movlw	127
 20688  014E18  D7DD               	goto	L14
 20689  014E1A                     l2878:
 20690                           
 20691                           ; BSR set to: 0
 20692                           
 20693                           ; BSR set to: 0
 20694  014E1A  0100               	movlb	0	; () banked
 20695  014E1C  35BD               	rlcf	(ldexp@newexp+1)& (0+255),w,b
 20696  014E1E  31BD               	rrcf	(ldexp@newexp+1)& (0+255),w,b
 20697  014E20  0100               	movlb	0	; () banked
 20698  014E22  6FBF               	movwf	(??_ldexp+1)& (0+255),b
 20699  014E24  0100               	movlb	0	; () banked
 20700  014E26  31BC               	rrcf	ldexp@newexp& (0+255),w,b
 20701  014E28  0100               	movlb	0	; () banked
 20702  014E2A  6FBE               	movwf	??_ldexp& (0+255),b
 20703  014E2C  0100               	movlb	0	; () banked
 20704  014E2E  51BB               	movf	(ldexp@value+3)& (0+255),w,b
 20705  014E30  0100               	movlb	0	; () banked
 20706  014E32  19BE               	xorwf	??_ldexp& (0+255),w,b
 20707  014E34  0B80               	andlw	-128
 20708  014E36  19BE               	xorwf	??_ldexp& (0+255),w,b
 20709  014E38  0100               	movlb	0	; () banked
 20710  014E3A  6FBB               	movwf	(ldexp@value+3)& (0+255),b
 20711  014E3C  C0BC  F0BE         	movff	ldexp@newexp,??_ldexp
 20712  014E40  0E01               	movlw	1
 20713  014E42  0100               	movlb	0	; () banked
 20714  014E44  17BE               	andwf	??_ldexp& (0+255),f,b
 20715  014E46  0100               	movlb	0	; () banked
 20716  014E48  33BE               	rrcf	??_ldexp& (0+255),f,b
 20717  014E4A  33BE               	rrcf	??_ldexp& (0+255),f,b
 20718  014E4C  0100               	movlb	0	; () banked
 20719  014E4E  51BA               	movf	(ldexp@value+2)& (0+255),w,b
 20720  014E50  0100               	movlb	0	; () banked
 20721  014E52  19BE               	xorwf	??_ldexp& (0+255),w,b
 20722  014E54  0B7F               	andlw	-129
 20723  014E56  19BE               	xorwf	??_ldexp& (0+255),w,b
 20724  014E58  0100               	movlb	0	; () banked
 20725  014E5A  6FBA               	movwf	(ldexp@value+2)& (0+255),b
 20726                           
 20727                           ; BSR set to: 0
 20728                           
 20729                           ; BSR set to: 0
 20730                           
 20731                           ; BSR set to: 0
 20732  014E5C  C0B8  F0B8         	movff	ldexp@value,?_ldexp
 20733  014E60  C0B9  F0B9         	movff	ldexp@value+1,?_ldexp+1
 20734  014E64  C0BA  F0BA         	movff	ldexp@value+2,?_ldexp+2
 20735  014E68  C0BB  F0BB         	movff	ldexp@value+3,?_ldexp+3
 20736  014E6C  0012               	return	
 20737  014E6E                     __end_of_ldexp:
 20738                           	opt stack 0
 20739                           tosu	equ	0xFFF
 20740                           tosh	equ	0xFFE
 20741                           tosl	equ	0xFFD
 20742                           pclath	equ	0xFFA
 20743                           tblptru	equ	0xFF8
 20744                           tblptrh	equ	0xFF7
 20745                           tblptrl	equ	0xFF6
 20746                           tablat	equ	0xFF5
 20747                           prodh	equ	0xFF4
 20748                           prodl	equ	0xFF3
 20749                           intcon	equ	0xFF2
 20750                           indf0	equ	0xFEF
 20751                           postinc0	equ	0xFEE
 20752                           fsr0h	equ	0xFEA
 20753                           fsr0l	equ	0xFE9
 20754                           wreg	equ	0xFE8
 20755                           indf1	equ	0xFE7
 20756                           postdec1	equ	0xFE5
 20757                           fsr1h	equ	0xFE2
 20758                           fsr1l	equ	0xFE1
 20759                           indf2	equ	0xFDF
 20760                           postinc2	equ	0xFDE
 20761                           postdec2	equ	0xFDD
 20762                           plusw2	equ	0xFDB
 20763                           fsr2h	equ	0xFDA
 20764                           fsr2l	equ	0xFD9
 20765                           status	equ	0xFD8
 20766                           
 20767 ;; *************** function _floor *****************
 20768 ;; Defined at:
 20769 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
 20770 ;; Parameters:    Size  Location     Type
 20771 ;;  x               4   72[BANK0 ] int 
 20772 ;; Auto vars:     Size  Location     Type
 20773 ;;  i               4   76[BANK0 ] int 
 20774 ;;  expon           2   80[BANK0 ] int 
 20775 ;; Return value:  Size  Location     Type
 20776 ;;                  4   72[BANK0 ] int 
 20777 ;; Registers used:
 20778 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20779 ;; Tracked objects:
 20780 ;;		On entry : 0/0
 20781 ;;		On exit  : 0/0
 20782 ;;		Unchanged: 0/0
 20783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20784 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20785 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20787 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20788 ;;Total ram usage:       10 bytes
 20789 ;; Hardware stack levels used:    1
 20790 ;; Hardware stack levels required when called:    8
 20791 ;; This function calls:
 20792 ;;		___fladd
 20793 ;;		___flge
 20794 ;;		___fltol
 20795 ;;		___xxtofl
 20796 ;;		_frexp
 20797 ;; This function is called by:
 20798 ;;		_exp
 20799 ;; This function uses a non-reentrant model
 20800 ;;
 20801                           
 20802                           	psect	text111
 20803  014E6E                     __ptext111:
 20804                           	opt stack 0
 20805  014E6E                     _floor:
 20806                           	opt stack 19
 20807                           
 20808                           ; BSR set to: 0
 20809                           ;incstack = 0
 20810  014E6E  C0A8  F060         	movff	floor@x,frexp@value
 20811  014E72  C0A9  F061         	movff	floor@x+1,frexp@value+1
 20812  014E76  C0AA  F062         	movff	floor@x+2,frexp@value+2
 20813  014E7A  C0AB  F063         	movff	floor@x+3,frexp@value+3
 20814  014E7E  0EB0               	movlw	low floor@expon
 20815  014E80  0100               	movlb	0	; () banked
 20816  014E82  6F64               	movwf	frexp@eptr& (0+255),b
 20817  014E84  0E00               	movlw	high floor@expon
 20818  014E86  0100               	movlb	0	; () banked
 20819  014E88  6F65               	movwf	(frexp@eptr+1)& (0+255),b
 20820  014E8A  EC6F  F0AE         	call	_frexp	;wreg free
 20821  014E8E  0100               	movlb	0	; () banked
 20822  014E90  AFB1               	btfss	(floor@expon+1)& (0+255),7,b
 20823  014E92  D017               	goto	l2861
 20824                           
 20825                           ; BSR set to: 0
 20826  014E94  0100               	movlb	0	; () banked
 20827  014E96  AFAB               	btfss	(floor@x+3)& (0+255),7,b
 20828  014E98  D00A               	goto	l2862
 20829                           
 20830                           ; BSR set to: 0
 20831  014E9A  0E00               	movlw	0
 20832  014E9C  0100               	movlb	0	; () banked
 20833  014E9E  6FA8               	movwf	?_floor& (0+255),b
 20834  014EA0  0E00               	movlw	0
 20835  014EA2  6FA9               	movwf	(?_floor+1)& (0+255),b
 20836  014EA4  0E80               	movlw	128
 20837  014EA6  6FAA               	movwf	(?_floor+2)& (0+255),b
 20838  014EA8  0EBF               	movlw	191
 20839  014EAA  6FAB               	movwf	(?_floor+3)& (0+255),b
 20840                           
 20841                           ; BSR set to: 0
 20842  014EAC  0012               	return	
 20843  014EAE                     l2862:
 20844                           
 20845                           ; BSR set to: 0
 20846                           
 20847                           ; BSR set to: 0
 20848  014EAE  0E00               	movlw	0
 20849  014EB0  0100               	movlb	0	; () banked
 20850  014EB2  6FA8               	movwf	?_floor& (0+255),b
 20851  014EB4  0E00               	movlw	0
 20852  014EB6  6FA9               	movwf	(?_floor+1)& (0+255),b
 20853  014EB8  0E00               	movlw	0
 20854  014EBA  6FAA               	movwf	(?_floor+2)& (0+255),b
 20855  014EBC  0E00               	movlw	0
 20856  014EBE  6FAB               	movwf	(?_floor+3)& (0+255),b
 20857                           
 20858                           ; BSR set to: 0
 20859  014EC0  0012               	return	
 20860  014EC2                     l2861:
 20861                           
 20862                           ; BSR set to: 0
 20863                           
 20864                           ; BSR set to: 0
 20865  014EC2  0100               	movlb	0	; () banked
 20866  014EC4  51B1               	movf	(floor@expon+1)& (0+255),w,b
 20867  014EC6  E105               	bnz	u12290
 20868  014EC8  0E1D               	movlw	29
 20869  014ECA  0100               	movlb	0	; () banked
 20870  014ECC  5DB0               	subwf	floor@expon& (0+255),w,b
 20871  014ECE  A0D8               	btfss	status,0,c
 20872  014ED0  D009               	goto	l2864
 20873  014ED2                     u12290:
 20874                           
 20875                           ; BSR set to: 0
 20876  014ED2  C0A8  F0A8         	movff	floor@x,?_floor
 20877  014ED6  C0A9  F0A9         	movff	floor@x+1,?_floor+1
 20878  014EDA  C0AA  F0AA         	movff	floor@x+2,?_floor+2
 20879  014EDE  C0AB  F0AB         	movff	floor@x+3,?_floor+3
 20880  014EE2  0012               	return	
 20881  014EE4                     l2864:
 20882                           
 20883                           ; BSR set to: 0
 20884                           
 20885                           ; BSR set to: 0
 20886  014EE4  C0A8  F087         	movff	floor@x,___fltol@f1
 20887  014EE8  C0A9  F088         	movff	floor@x+1,___fltol@f1+1
 20888  014EEC  C0AA  F089         	movff	floor@x+2,___fltol@f1+2
 20889  014EF0  C0AB  F08A         	movff	floor@x+3,___fltol@f1+3
 20890  014EF4  EC55  F0A8         	call	___fltol	;wreg free
 20891  014EF8  C087  F060         	movff	?___fltol,___xxtofl@val
 20892  014EFC  C088  F061         	movff	?___fltol+1,___xxtofl@val+1
 20893  014F00  C089  F062         	movff	?___fltol+2,___xxtofl@val+2
 20894  014F04  C08A  F063         	movff	?___fltol+3,___xxtofl@val+3
 20895  014F08  0E01               	movlw	1
 20896  014F0A  ECB0  F09A         	call	___xxtofl
 20897  014F0E  C060  F0AC         	movff	?___xxtofl,floor@i
 20898  014F12  C061  F0AD         	movff	?___xxtofl+1,floor@i+1
 20899  014F16  C062  F0AE         	movff	?___xxtofl+2,floor@i+2
 20900  014F1A  C063  F0AF         	movff	?___xxtofl+3,floor@i+3
 20901  014F1E  C0A8  F060         	movff	floor@x,___flge@ff1
 20902  014F22  C0A9  F061         	movff	floor@x+1,___flge@ff1+1
 20903  014F26  C0AA  F062         	movff	floor@x+2,___flge@ff1+2
 20904  014F2A  C0AB  F063         	movff	floor@x+3,___flge@ff1+3
 20905  014F2E  C0AC  F064         	movff	floor@i,___flge@ff2
 20906  014F32  C0AD  F065         	movff	floor@i+1,___flge@ff2+1
 20907  014F36  C0AE  F066         	movff	floor@i+2,___flge@ff2+2
 20908  014F3A  C0AF  F067         	movff	floor@i+3,___flge@ff2+3
 20909  014F3E  ECDE  F09E         	call	___flge	;wreg free
 20910  014F42  0100               	movlb	0	; () banked
 20911  014F44  B0D8               	btfsc	status,0,c
 20912  014F46  D01C               	goto	l2865
 20913                           
 20914                           ; BSR set to: 0
 20915  014F48  C0AC  F094         	movff	floor@i,___fladd@b
 20916  014F4C  C0AD  F095         	movff	floor@i+1,___fladd@b+1
 20917  014F50  C0AE  F096         	movff	floor@i+2,___fladd@b+2
 20918  014F54  C0AF  F097         	movff	floor@i+3,___fladd@b+3
 20919  014F58  0E00               	movlw	0
 20920  014F5A  0100               	movlb	0	; () banked
 20921  014F5C  6F98               	movwf	___fladd@a& (0+255),b
 20922  014F5E  0E00               	movlw	0
 20923  014F60  6F99               	movwf	(___fladd@a+1)& (0+255),b
 20924  014F62  0E80               	movlw	128
 20925  014F64  6F9A               	movwf	(___fladd@a+2)& (0+255),b
 20926  014F66  0EBF               	movlw	191
 20927  014F68  6F9B               	movwf	(___fladd@a+3)& (0+255),b
 20928  014F6A  ECE6  F086         	call	___fladd	;wreg free
 20929  014F6E  C094  F0A8         	movff	?___fladd,?_floor
 20930  014F72  C095  F0A9         	movff	?___fladd+1,?_floor+1
 20931  014F76  C096  F0AA         	movff	?___fladd+2,?_floor+2
 20932  014F7A  C097  F0AB         	movff	?___fladd+3,?_floor+3
 20933  014F7E  0012               	return	
 20934  014F80                     l2865:
 20935                           
 20936                           ; BSR set to: 0
 20937  014F80  C0AC  F0A8         	movff	floor@i,?_floor
 20938  014F84  C0AD  F0A9         	movff	floor@i+1,?_floor+1
 20939  014F88  C0AE  F0AA         	movff	floor@i+2,?_floor+2
 20940  014F8C  C0AF  F0AB         	movff	floor@i+3,?_floor+3
 20941  014F90  0012               	return		;funcret
 20942  014F92                     __end_of_floor:
 20943                           	opt stack 0
 20944                           tosu	equ	0xFFF
 20945                           tosh	equ	0xFFE
 20946                           tosl	equ	0xFFD
 20947                           pclath	equ	0xFFA
 20948                           tblptru	equ	0xFF8
 20949                           tblptrh	equ	0xFF7
 20950                           tblptrl	equ	0xFF6
 20951                           tablat	equ	0xFF5
 20952                           prodh	equ	0xFF4
 20953                           prodl	equ	0xFF3
 20954                           intcon	equ	0xFF2
 20955                           indf0	equ	0xFEF
 20956                           postinc0	equ	0xFEE
 20957                           fsr0h	equ	0xFEA
 20958                           fsr0l	equ	0xFE9
 20959                           wreg	equ	0xFE8
 20960                           indf1	equ	0xFE7
 20961                           postdec1	equ	0xFE5
 20962                           fsr1h	equ	0xFE2
 20963                           fsr1l	equ	0xFE1
 20964                           indf2	equ	0xFDF
 20965                           postinc2	equ	0xFDE
 20966                           postdec2	equ	0xFDD
 20967                           plusw2	equ	0xFDB
 20968                           fsr2h	equ	0xFDA
 20969                           fsr2l	equ	0xFD9
 20970                           status	equ	0xFD8
 20971                           
 20972 ;; *************** function _frexp *****************
 20973 ;; Defined at:
 20974 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
 20975 ;; Parameters:    Size  Location     Type
 20976 ;;  value           4    0[BANK0 ] int 
 20977 ;;  eptr            2    4[BANK0 ] PTR int 
 20978 ;;		 -> log@exponent(2), floor@expon(2), 
 20979 ;; Auto vars:     Size  Location     Type
 20980 ;;		None
 20981 ;; Return value:  Size  Location     Type
 20982 ;;                  4    0[BANK0 ] PTR int 
 20983 ;; Registers used:
 20984 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20985 ;; Tracked objects:
 20986 ;;		On entry : 0/0
 20987 ;;		On exit  : 0/0
 20988 ;;		Unchanged: 0/0
 20989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20990 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20994 ;;Total ram usage:        8 bytes
 20995 ;; Hardware stack levels used:    1
 20996 ;; Hardware stack levels required when called:    7
 20997 ;; This function calls:
 20998 ;;		Nothing
 20999 ;; This function is called by:
 21000 ;;		_floor
 21001 ;;		_log
 21002 ;; This function uses a non-reentrant model
 21003 ;;
 21004                           
 21005                           	psect	text112
 21006  015CDE                     __ptext112:
 21007                           	opt stack 0
 21008  015CDE                     _frexp:
 21009                           	opt stack 20
 21010                           
 21011                           ;incstack = 0
 21012  015CDE  0100               	movlb	0	; () banked
 21013  015CE0  5160               	movf	frexp@value& (0+255),w,b
 21014  015CE2  0100               	movlb	0	; () banked
 21015  015CE4  1161               	iorwf	(frexp@value+1)& (0+255),w,b
 21016  015CE6  0100               	movlb	0	; () banked
 21017  015CE8  1162               	iorwf	(frexp@value+2)& (0+255),w,b
 21018  015CEA  0100               	movlb	0	; () banked
 21019  015CEC  1163               	iorwf	(frexp@value+3)& (0+255),w,b
 21020  015CEE  A4D8               	btfss	status,2,c
 21021  015CF0  D012               	goto	l2870
 21022                           
 21023                           ; BSR set to: 0
 21024  015CF2  C064  FFD9         	movff	frexp@eptr,fsr2l
 21025  015CF6  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21026  015CFA  0E00               	movlw	0
 21027  015CFC  6EDE               	movwf	postinc2,c
 21028  015CFE  0E00               	movlw	0
 21029  015D00  6EDD               	movwf	postdec2,c
 21030                           
 21031                           ; BSR set to: 0
 21032  015D02  0E00               	movlw	0
 21033  015D04  0100               	movlb	0	; () banked
 21034  015D06  6F60               	movwf	?_frexp& (0+255),b
 21035  015D08  0E00               	movlw	0
 21036  015D0A  6F61               	movwf	(?_frexp+1)& (0+255),b
 21037  015D0C  0E00               	movlw	0
 21038  015D0E  6F62               	movwf	(?_frexp+2)& (0+255),b
 21039  015D10  0E00               	movlw	0
 21040  015D12  6F63               	movwf	(?_frexp+3)& (0+255),b
 21041                           
 21042                           ; BSR set to: 0
 21043  015D14  0012               	return	
 21044  015D16                     l2870:
 21045                           
 21046                           ; BSR set to: 0
 21047                           
 21048                           ; BSR set to: 0
 21049  015D16  0100               	movlb	0	; () banked
 21050  015D18  5163               	movf	(frexp@value+3)& (0+255),w,b
 21051  015D1A  0B7F               	andlw	127
 21052  015D1C  0100               	movlb	0	; () banked
 21053  015D1E  6F66               	movwf	??_frexp& (0+255),b
 21054  015D20  6B67               	clrf	(??_frexp+1)& (0+255),b
 21055  015D22  90D8               	bcf	status,0,c
 21056  015D24  0100               	movlb	0	; () banked
 21057  015D26  3766               	rlcf	??_frexp& (0+255),f,b
 21058  015D28  3767               	rlcf	(??_frexp+1)& (0+255),f,b
 21059  015D2A  C064  FFD9         	movff	frexp@eptr,fsr2l
 21060  015D2E  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21061  015D32  C066  FFDE         	movff	??_frexp,postinc2
 21062  015D36  C067  FFDD         	movff	??_frexp+1,postdec2
 21063  015D3A  0100               	movlb	0	; () banked
 21064  015D3C  AF62               	btfss	(frexp@value+2)& (0+255),7,b
 21065  015D3E  D004               	goto	u11700
 21066  015D40  0100               	movlb	0	; () banked
 21067  015D42  6B66               	clrf	??_frexp& (0+255),b
 21068  015D44  2B66               	incf	??_frexp& (0+255),f,b
 21069  015D46  D002               	goto	u11708
 21070  015D48                     u11700:
 21071  015D48  0100               	movlb	0	; () banked
 21072  015D4A  6B66               	clrf	??_frexp& (0+255),b
 21073  015D4C                     u11708:
 21074  015D4C  0100               	movlb	0	; () banked
 21075  015D4E  5166               	movf	??_frexp& (0+255),w,b
 21076  015D50  C064  FFD9         	movff	frexp@eptr,fsr2l
 21077  015D54  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21078  015D58  12DE               	iorwf	postinc2,f,c
 21079  015D5A  0E00               	movlw	0
 21080  015D5C  12DD               	iorwf	postdec2,f,c
 21081                           
 21082                           ; BSR set to: 0
 21083  015D5E  C064  FFD9         	movff	frexp@eptr,fsr2l
 21084  015D62  C065  FFDA         	movff	frexp@eptr+1,fsr2h
 21085  015D66  0E82               	movlw	130
 21086  015D68  26DE               	addwf	postinc2,f,c
 21087  015D6A  0EFF               	movlw	255
 21088  015D6C  22DD               	addwfc	postdec2,f,c
 21089                           
 21090                           ; BSR set to: 0
 21091  015D6E  0100               	movlb	0	; () banked
 21092  015D70  8163               	bsf	(frexp@value+3)& (0+255),0,b
 21093  015D72  8363               	bsf	(frexp@value+3)& (0+255),1,b
 21094  015D74  8563               	bsf	(frexp@value+3)& (0+255),2,b
 21095  015D76  8763               	bsf	(frexp@value+3)& (0+255),3,b
 21096  015D78  8963               	bsf	(frexp@value+3)& (0+255),4,b
 21097  015D7A  8B63               	bsf	(frexp@value+3)& (0+255),5,b
 21098  015D7C  9D63               	bcf	(frexp@value+3)& (0+255),6,b
 21099                           
 21100                           ; BSR set to: 0
 21101  015D7E  0100               	movlb	0	; () banked
 21102  015D80  9F62               	bcf	(frexp@value+2)& (0+255),7,b
 21103                           
 21104                           ; BSR set to: 0
 21105  015D82  C060  F060         	movff	frexp@value,?_frexp
 21106  015D86  C061  F061         	movff	frexp@value+1,?_frexp+1
 21107  015D8A  C062  F062         	movff	frexp@value+2,?_frexp+2
 21108  015D8E  C063  F063         	movff	frexp@value+3,?_frexp+3
 21109  015D92  0012               	return	
 21110  015D94                     __end_of_frexp:
 21111                           	opt stack 0
 21112                           tosu	equ	0xFFF
 21113                           tosh	equ	0xFFE
 21114                           tosl	equ	0xFFD
 21115                           pclath	equ	0xFFA
 21116                           tblptru	equ	0xFF8
 21117                           tblptrh	equ	0xFF7
 21118                           tblptrl	equ	0xFF6
 21119                           tablat	equ	0xFF5
 21120                           prodh	equ	0xFF4
 21121                           prodl	equ	0xFF3
 21122                           intcon	equ	0xFF2
 21123                           indf0	equ	0xFEF
 21124                           postinc0	equ	0xFEE
 21125                           fsr0h	equ	0xFEA
 21126                           fsr0l	equ	0xFE9
 21127                           wreg	equ	0xFE8
 21128                           indf1	equ	0xFE7
 21129                           postdec1	equ	0xFE5
 21130                           fsr1h	equ	0xFE2
 21131                           fsr1l	equ	0xFE1
 21132                           indf2	equ	0xFDF
 21133                           postinc2	equ	0xFDE
 21134                           postdec2	equ	0xFDD
 21135                           plusw2	equ	0xFDB
 21136                           fsr2h	equ	0xFDA
 21137                           fsr2l	equ	0xFD9
 21138                           status	equ	0xFD8
 21139                           
 21140 ;; *************** function _eval_poly *****************
 21141 ;; Defined at:
 21142 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
 21143 ;; Parameters:    Size  Location     Type
 21144 ;;  x               4   72[BANK0 ] PTR int 
 21145 ;;  d               2   76[BANK0 ] PTR const 
 21146 ;;		 -> log@coeff(36), exp@coeff(40), 
 21147 ;;  n               2   78[BANK0 ] int 
 21148 ;; Auto vars:     Size  Location     Type
 21149 ;;  res             4   84[BANK0 ] int 
 21150 ;; Return value:  Size  Location     Type
 21151 ;;                  4   72[BANK0 ] int 
 21152 ;; Registers used:
 21153 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21154 ;; Tracked objects:
 21155 ;;		On entry : 0/0
 21156 ;;		On exit  : 0/0
 21157 ;;		Unchanged: 0/0
 21158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21159 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21160 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21161 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21162 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21163 ;;Total ram usage:       16 bytes
 21164 ;; Hardware stack levels used:    1
 21165 ;; Hardware stack levels required when called:    8
 21166 ;; This function calls:
 21167 ;;		___fladd
 21168 ;;		___flmul
 21169 ;; This function is called by:
 21170 ;;		_exp
 21171 ;;		_log
 21172 ;; This function uses a non-reentrant model
 21173 ;;
 21174                           
 21175                           	psect	text113
 21176  014F92                     __ptext113:
 21177                           	opt stack 0
 21178  014F92                     _eval_poly:
 21179                           	opt stack 19
 21180                           
 21181                           ; BSR set to: 0
 21182                           ;incstack = 0
 21183  014F92  C0AE  F0B0         	movff	eval_poly@n,??_eval_poly
 21184  014F96  C0AF  F0B1         	movff	eval_poly@n+1,??_eval_poly+1
 21185  014F9A  0100               	movlb	0	; () banked
 21186  014F9C  90D8               	bcf	status,0,c
 21187  014F9E  37B0               	rlcf	??_eval_poly& (0+255),f,b
 21188  014FA0  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21189  014FA2  0100               	movlb	0	; () banked
 21190  014FA4  90D8               	bcf	status,0,c
 21191  014FA6  37B0               	rlcf	??_eval_poly& (0+255),f,b
 21192  014FA8  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21193  014FAA  C0AC  F0B2         	movff	eval_poly@d,??_eval_poly+2
 21194  014FAE  C0AD  F0B3         	movff	eval_poly@d+1,??_eval_poly+3
 21195  014FB2  0100               	movlb	0	; () banked
 21196  014FB4  51B0               	movf	??_eval_poly& (0+255),w,b
 21197  014FB6  0100               	movlb	0	; () banked
 21198  014FB8  27B2               	addwf	(??_eval_poly+2)& (0+255),f,b
 21199  014FBA  0100               	movlb	0	; () banked
 21200  014FBC  51B1               	movf	(??_eval_poly+1)& (0+255),w,b
 21201  014FBE  0100               	movlb	0	; () banked
 21202  014FC0  23B3               	addwfc	(??_eval_poly+3)& (0+255),f,b
 21203  014FC2  C0B2  FFF6         	movff	??_eval_poly+2,tblptrl
 21204  014FC6  C0B3  FFF7         	movff	??_eval_poly+3,tblptrh
 21205  014FCA                     	if	0	;tblptru may be non-zero
 21206  014FCA                     	endif
 21207  014FCA                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21208  014FCA  0E00               	movlw	low (__mediumconst shr (0+16))
 21209  014FCC  6EF8               	movwf	tblptru,c
 21210  014FCE                     	endif
 21211  014FCE  0009               	tblrd		*+
 21212  014FD0  CFF5 F0B4          	movff	tablat,eval_poly@res
 21213  014FD4  0009               	tblrd		*+
 21214  014FD6  CFF5 F0B5          	movff	tablat,eval_poly@res+1
 21215  014FDA  0009               	tblrd		*+
 21216  014FDC  CFF5 F0B6          	movff	tablat,eval_poly@res+2
 21217  014FE0  000A               	tblrd		*-
 21218  014FE2  CFF5 F0B7          	movff	tablat,eval_poly@res+3
 21219  014FE6  D052               	goto	l2900
 21220  014FE8                     
 21221                           ; BSR set to: 0
 21222                           
 21223                           ; BSR set to: 0
 21224  014FE8  C0B4  F072         	movff	eval_poly@res,___flmul@a
 21225  014FEC  C0B5  F073         	movff	eval_poly@res+1,___flmul@a+1
 21226  014FF0  C0B6  F074         	movff	eval_poly@res+2,___flmul@a+2
 21227  014FF4  C0B7  F075         	movff	eval_poly@res+3,___flmul@a+3
 21228  014FF8  C0A8  F06E         	movff	eval_poly@x,___flmul@b
 21229  014FFC  C0A9  F06F         	movff	eval_poly@x+1,___flmul@b+1
 21230  015000  C0AA  F070         	movff	eval_poly@x+2,___flmul@b+2
 21231  015004  C0AB  F071         	movff	eval_poly@x+3,___flmul@b+3
 21232  015008  EC3A  F089         	call	___flmul	;wreg free
 21233  01500C  C06E  F094         	movff	?___flmul,___fladd@b
 21234  015010  C06F  F095         	movff	?___flmul+1,___fladd@b+1
 21235  015014  C070  F096         	movff	?___flmul+2,___fladd@b+2
 21236  015018  C071  F097         	movff	?___flmul+3,___fladd@b+3
 21237  01501C  0100               	movlb	0	; () banked
 21238  01501E  07AE               	decf	eval_poly@n& (0+255),f,b
 21239  015020  A0D8               	btfss	status,0,c
 21240  015022  07AF               	decf	(eval_poly@n+1)& (0+255),f,b
 21241  015024  C0AE  F0B0         	movff	eval_poly@n,??_eval_poly
 21242  015028  C0AF  F0B1         	movff	eval_poly@n+1,??_eval_poly+1
 21243  01502C  0100               	movlb	0	; () banked
 21244  01502E  90D8               	bcf	status,0,c
 21245  015030  37B0               	rlcf	??_eval_poly& (0+255),f,b
 21246  015032  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21247  015034  0100               	movlb	0	; () banked
 21248  015036  90D8               	bcf	status,0,c
 21249  015038  37B0               	rlcf	??_eval_poly& (0+255),f,b
 21250  01503A  37B1               	rlcf	(??_eval_poly+1)& (0+255),f,b
 21251  01503C  C0AC  F0B2         	movff	eval_poly@d,??_eval_poly+2
 21252  015040  C0AD  F0B3         	movff	eval_poly@d+1,??_eval_poly+3
 21253  015044  0100               	movlb	0	; () banked
 21254  015046  51B0               	movf	??_eval_poly& (0+255),w,b
 21255  015048  0100               	movlb	0	; () banked
 21256  01504A  27B2               	addwf	(??_eval_poly+2)& (0+255),f,b
 21257  01504C  0100               	movlb	0	; () banked
 21258  01504E  51B1               	movf	(??_eval_poly+1)& (0+255),w,b
 21259  015050  0100               	movlb	0	; () banked
 21260  015052  23B3               	addwfc	(??_eval_poly+3)& (0+255),f,b
 21261  015054  C0B2  FFF6         	movff	??_eval_poly+2,tblptrl
 21262  015058  C0B3  FFF7         	movff	??_eval_poly+3,tblptrh
 21263  01505C                     	if	0	;tblptru may be non-zero
 21264  01505C                     	endif
 21265  01505C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 21266  01505C  0E00               	movlw	low (__mediumconst shr (0+16))
 21267  01505E  6EF8               	movwf	tblptru,c
 21268  015060                     	endif
 21269  015060  0009               	tblrd		*+
 21270  015062  CFF5 F098          	movff	tablat,___fladd@a
 21271  015066  0009               	tblrd		*+
 21272  015068  CFF5 F099          	movff	tablat,___fladd@a+1
 21273  01506C  0009               	tblrd		*+
 21274  01506E  CFF5 F09A          	movff	tablat,___fladd@a+2
 21275  015072  000A               	tblrd		*-
 21276  015074  CFF5 F09B          	movff	tablat,___fladd@a+3
 21277  015078  ECE6  F086         	call	___fladd	;wreg free
 21278  01507C  C094  F0B4         	movff	?___fladd,eval_poly@res
 21279  015080  C095  F0B5         	movff	?___fladd+1,eval_poly@res+1
 21280  015084  C096  F0B6         	movff	?___fladd+2,eval_poly@res+2
 21281  015088  C097  F0B7         	movff	?___fladd+3,eval_poly@res+3
 21282  01508C                     l2900:
 21283  01508C  0100               	movlb	0	; () banked
 21284  01508E  51AE               	movf	eval_poly@n& (0+255),w,b
 21285  015090  0100               	movlb	0	; () banked
 21286  015092  11AF               	iorwf	(eval_poly@n+1)& (0+255),w,b
 21287  015094  A4D8               	btfss	status,2,c
 21288  015096  D7A8               	goto	l2901
 21289                           
 21290                           ; BSR set to: 0
 21291  015098  C0B4  F0A8         	movff	eval_poly@res,?_eval_poly
 21292  01509C  C0B5  F0A9         	movff	eval_poly@res+1,?_eval_poly+1
 21293  0150A0  C0B6  F0AA         	movff	eval_poly@res+2,?_eval_poly+2
 21294  0150A4  C0B7  F0AB         	movff	eval_poly@res+3,?_eval_poly+3
 21295                           
 21296                           ; BSR set to: 0
 21297  0150A8  0012               	return		;funcret
 21298  0150AA                     __end_of_eval_poly:
 21299                           	opt stack 0
 21300                           tosu	equ	0xFFF
 21301                           tosh	equ	0xFFE
 21302                           tosl	equ	0xFFD
 21303                           pclath	equ	0xFFA
 21304                           tblptru	equ	0xFF8
 21305                           tblptrh	equ	0xFF7
 21306                           tblptrl	equ	0xFF6
 21307                           tablat	equ	0xFF5
 21308                           prodh	equ	0xFF4
 21309                           prodl	equ	0xFF3
 21310                           intcon	equ	0xFF2
 21311                           indf0	equ	0xFEF
 21312                           postinc0	equ	0xFEE
 21313                           fsr0h	equ	0xFEA
 21314                           fsr0l	equ	0xFE9
 21315                           wreg	equ	0xFE8
 21316                           indf1	equ	0xFE7
 21317                           postdec1	equ	0xFE5
 21318                           fsr1h	equ	0xFE2
 21319                           fsr1l	equ	0xFE1
 21320                           indf2	equ	0xFDF
 21321                           postinc2	equ	0xFDE
 21322                           postdec2	equ	0xFDD
 21323                           plusw2	equ	0xFDB
 21324                           fsr2h	equ	0xFDA
 21325                           fsr2l	equ	0xFD9
 21326                           status	equ	0xFD8
 21327                           
 21328 ;; *************** function _ADC_Voltage *****************
 21329 ;; Defined at:
 21330 ;;		line 259 in file "Library/ADC.c"
 21331 ;; Parameters:    Size  Location     Type
 21332 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 21333 ;;		 -> ADC_AN0(5), 
 21334 ;; Auto vars:     Size  Location     Type
 21335 ;;  output          4   53[BANK0 ] float 
 21336 ;;  ref             4   49[BANK0 ] const float 
 21337 ;;  max             4   45[BANK0 ] const float 
 21338 ;; Return value:  Size  Location     Type
 21339 ;;                  4   39[BANK0 ] float 
 21340 ;; Registers used:
 21341 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21342 ;; Tracked objects:
 21343 ;;		On entry : 0/0
 21344 ;;		On exit  : 0/0
 21345 ;;		Unchanged: 0/0
 21346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21347 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21348 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21349 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21350 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21351 ;;Total ram usage:       18 bytes
 21352 ;; Hardware stack levels used:    1
 21353 ;; Hardware stack levels required when called:    8
 21354 ;; This function calls:
 21355 ;;		___fldiv
 21356 ;;		___flmul
 21357 ;;		___xxtofl
 21358 ;; This function is called by:
 21359 ;;		_displayPositionMode
 21360 ;; This function uses a non-reentrant model
 21361 ;;
 21362                           
 21363                           	psect	text114
 21364  01538E                     __ptext114:
 21365                           	opt stack 0
 21366  01538E                     _ADC_Voltage:
 21367                           	opt stack 21
 21368                           
 21369                           ;ADC.c: 261: const float max = 1024;
 21370                           
 21371                           ; BSR set to: 0
 21372                           ;incstack = 0
 21373  01538E  0E00               	movlw	0
 21374  015390  0100               	movlb	0	; () banked
 21375  015392  6F8D               	movwf	ADC_Voltage@max& (0+255),b
 21376  015394  0E00               	movlw	0
 21377  015396  6F8E               	movwf	(ADC_Voltage@max+1)& (0+255),b
 21378  015398  0E80               	movlw	128
 21379  01539A  6F8F               	movwf	(ADC_Voltage@max+2)& (0+255),b
 21380  01539C  0E44               	movlw	68
 21381  01539E  6F90               	movwf	(ADC_Voltage@max+3)& (0+255),b
 21382                           
 21383                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 21384  0153A0  0E33               	movlw	51
 21385  0153A2  0100               	movlb	0	; () banked
 21386  0153A4  6F91               	movwf	ADC_Voltage@ref& (0+255),b
 21387  0153A6  0E33               	movlw	51
 21388  0153A8  6F92               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 21389  0153AA  0E53               	movlw	83
 21390  0153AC  6F93               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 21391  0153AE  0E40               	movlw	64
 21392  0153B0  6F94               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 21393                           
 21394                           ; BSR set to: 0
 21395                           ;ADC.c: 263: float output = pInput->mValue;
 21396  0153B2  0100               	movlb	0	; () banked
 21397  0153B4  EE20 F001          	lfsr	2,1
 21398  0153B8  5187               	movf	ADC_Voltage@pInput& (0+255),w,b
 21399  0153BA  26D9               	addwf	fsr2l,f,c
 21400  0153BC  5188               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 21401  0153BE  22DA               	addwfc	fsr2h,f,c
 21402  0153C0  CFDE F08B          	movff	postinc2,??_ADC_Voltage
 21403  0153C4  CFDD F08C          	movff	postdec2,??_ADC_Voltage+1
 21404  0153C8  C08B  F060         	movff	??_ADC_Voltage,___xxtofl@val
 21405  0153CC  C08C  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 21406  0153D0  0100               	movlb	0	; () banked
 21407  0153D2  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 21408  0153D4  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 21409  0153D6  0E00               	movlw	0
 21410  0153D8  ECB0  F09A         	call	___xxtofl
 21411  0153DC  C060  F095         	movff	?___xxtofl,ADC_Voltage@output
 21412  0153E0  C061  F096         	movff	?___xxtofl+1,ADC_Voltage@output+1
 21413  0153E4  C062  F097         	movff	?___xxtofl+2,ADC_Voltage@output+2
 21414  0153E8  C063  F098         	movff	?___xxtofl+3,ADC_Voltage@output+3
 21415                           
 21416                           ;ADC.c: 265: output /= max;
 21417  0153EC  C095  F060         	movff	ADC_Voltage@output,___fldiv@b
 21418  0153F0  C096  F061         	movff	ADC_Voltage@output+1,___fldiv@b+1
 21419  0153F4  C097  F062         	movff	ADC_Voltage@output+2,___fldiv@b+2
 21420  0153F8  C098  F063         	movff	ADC_Voltage@output+3,___fldiv@b+3
 21421  0153FC  C08D  F064         	movff	ADC_Voltage@max,___fldiv@a
 21422  015400  C08E  F065         	movff	ADC_Voltage@max+1,___fldiv@a+1
 21423  015404  C08F  F066         	movff	ADC_Voltage@max+2,___fldiv@a+2
 21424  015408  C090  F067         	movff	ADC_Voltage@max+3,___fldiv@a+3
 21425  01540C  EC9C  F08D         	call	___fldiv	;wreg free
 21426  015410  C060  F095         	movff	?___fldiv,ADC_Voltage@output
 21427  015414  C061  F096         	movff	?___fldiv+1,ADC_Voltage@output+1
 21428  015418  C062  F097         	movff	?___fldiv+2,ADC_Voltage@output+2
 21429  01541C  C063  F098         	movff	?___fldiv+3,ADC_Voltage@output+3
 21430                           
 21431                           ;ADC.c: 266: output *= ref;
 21432  015420  C095  F06E         	movff	ADC_Voltage@output,___flmul@b
 21433  015424  C096  F06F         	movff	ADC_Voltage@output+1,___flmul@b+1
 21434  015428  C097  F070         	movff	ADC_Voltage@output+2,___flmul@b+2
 21435  01542C  C098  F071         	movff	ADC_Voltage@output+3,___flmul@b+3
 21436  015430  C091  F072         	movff	ADC_Voltage@ref,___flmul@a
 21437  015434  C092  F073         	movff	ADC_Voltage@ref+1,___flmul@a+1
 21438  015438  C093  F074         	movff	ADC_Voltage@ref+2,___flmul@a+2
 21439  01543C  C094  F075         	movff	ADC_Voltage@ref+3,___flmul@a+3
 21440  015440  EC3A  F089         	call	___flmul	;wreg free
 21441  015444  C06E  F095         	movff	?___flmul,ADC_Voltage@output
 21442  015448  C06F  F096         	movff	?___flmul+1,ADC_Voltage@output+1
 21443  01544C  C070  F097         	movff	?___flmul+2,ADC_Voltage@output+2
 21444  015450  C071  F098         	movff	?___flmul+3,ADC_Voltage@output+3
 21445                           
 21446                           ;ADC.c: 268: return output + (float)0.000;
 21447  015454  C095  F087         	movff	ADC_Voltage@output,?_ADC_Voltage
 21448  015458  C096  F088         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 21449  01545C  C097  F089         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 21450  015460  C098  F08A         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 21451  015464  0012               	return	
 21452  015466                     __end_of_ADC_Voltage:
 21453                           	opt stack 0
 21454                           tosu	equ	0xFFF
 21455                           tosh	equ	0xFFE
 21456                           tosl	equ	0xFFD
 21457                           pclath	equ	0xFFA
 21458                           tblptru	equ	0xFF8
 21459                           tblptrh	equ	0xFF7
 21460                           tblptrl	equ	0xFF6
 21461                           tablat	equ	0xFF5
 21462                           prodh	equ	0xFF4
 21463                           prodl	equ	0xFF3
 21464                           intcon	equ	0xFF2
 21465                           indf0	equ	0xFEF
 21466                           postinc0	equ	0xFEE
 21467                           fsr0h	equ	0xFEA
 21468                           fsr0l	equ	0xFE9
 21469                           wreg	equ	0xFE8
 21470                           indf1	equ	0xFE7
 21471                           postdec1	equ	0xFE5
 21472                           fsr1h	equ	0xFE2
 21473                           fsr1l	equ	0xFE1
 21474                           indf2	equ	0xFDF
 21475                           postinc2	equ	0xFDE
 21476                           postdec2	equ	0xFDD
 21477                           plusw2	equ	0xFDB
 21478                           fsr2h	equ	0xFDA
 21479                           fsr2l	equ	0xFD9
 21480                           status	equ	0xFD8
 21481                           
 21482 ;; *************** function ___fldiv *****************
 21483 ;; Defined at:
 21484 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 21485 ;; Parameters:    Size  Location     Type
 21486 ;;  b               4    0[BANK0 ] float 
 21487 ;;  a               4    4[BANK0 ] float 
 21488 ;; Auto vars:     Size  Location     Type
 21489 ;;  grs             4   19[BANK0 ] unsigned long 
 21490 ;;  rem             4   13[BANK0 ] unsigned long 
 21491 ;;  new_exp         2   17[BANK0 ] int 
 21492 ;;  aexp            1   24[BANK0 ] unsigned char 
 21493 ;;  bexp            1   23[BANK0 ] unsigned char 
 21494 ;;  sign            1   12[BANK0 ] unsigned char 
 21495 ;; Return value:  Size  Location     Type
 21496 ;;                  4    0[BANK0 ] unsigned char 
 21497 ;; Registers used:
 21498 ;;		wreg, status,2, status,0
 21499 ;; Tracked objects:
 21500 ;;		On entry : 0/0
 21501 ;;		On exit  : 0/0
 21502 ;;		Unchanged: 0/0
 21503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21504 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21505 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21506 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21507 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21508 ;;Total ram usage:       25 bytes
 21509 ;; Hardware stack levels used:    1
 21510 ;; Hardware stack levels required when called:    7
 21511 ;; This function calls:
 21512 ;;		Nothing
 21513 ;; This function is called by:
 21514 ;;		_ADC_Voltage
 21515 ;;		_exp
 21516 ;; This function uses a non-reentrant model
 21517 ;;
 21518                           
 21519                           	psect	text115
 21520  011B38                     __ptext115:
 21521                           	opt stack 0
 21522  011B38                     ___fldiv:
 21523                           	opt stack 20
 21524                           
 21525                           ;incstack = 0
 21526  011B38  0100               	movlb	0	; () banked
 21527  011B3A  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 21528  011B3C  0B80               	andlw	128
 21529  011B3E  0100               	movlb	0	; () banked
 21530  011B40  6F6C               	movwf	___fldiv@sign& (0+255),b
 21531  011B42  0100               	movlb	0	; () banked
 21532  011B44  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 21533  011B46  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 21534  011B48  0100               	movlb	0	; () banked
 21535  011B4A  6F77               	movwf	___fldiv@bexp& (0+255),b
 21536                           
 21537                           ; BSR set to: 0
 21538  011B4C  0100               	movlb	0	; () banked
 21539  011B4E  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 21540  011B50  D002               	goto	l2756
 21541                           
 21542                           ; BSR set to: 0
 21543  011B52  0100               	movlb	0	; () banked
 21544  011B54  8177               	bsf	___fldiv@bexp& (0+255),0,b
 21545  011B56                     l2756:
 21546                           
 21547                           ; BSR set to: 0
 21548                           
 21549                           ; BSR set to: 0
 21550  011B56  0100               	movlb	0	; () banked
 21551  011B58  5177               	movf	___fldiv@bexp& (0+255),w,b
 21552  011B5A  0100               	movlb	0	; () banked
 21553  011B5C  B4D8               	btfsc	status,2,c
 21554  011B5E  D012               	goto	l2757
 21555                           
 21556                           ; BSR set to: 0
 21557  011B60  0100               	movlb	0	; () banked
 21558  011B62  2977               	incf	___fldiv@bexp& (0+255),w,b
 21559  011B64  A4D8               	btfss	status,2,c
 21560  011B66  D009               	goto	l2758
 21561                           
 21562                           ; BSR set to: 0
 21563  011B68  0E00               	movlw	0
 21564  011B6A  0100               	movlb	0	; () banked
 21565  011B6C  6F60               	movwf	___fldiv@b& (0+255),b
 21566  011B6E  0E00               	movlw	0
 21567  011B70  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 21568  011B72  0E00               	movlw	0
 21569  011B74  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 21570  011B76  0E00               	movlw	0
 21571  011B78  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 21572  011B7A                     l2758:
 21573                           
 21574                           ; BSR set to: 0
 21575                           
 21576                           ; BSR set to: 0
 21577  011B7A  0100               	movlb	0	; () banked
 21578  011B7C  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 21579                           
 21580                           ; BSR set to: 0
 21581  011B7E  0E00               	movlw	0
 21582  011B80  0100               	movlb	0	; () banked
 21583  011B82  D008               	goto	L15
 21584  011B84                     l2757:
 21585                           
 21586                           ; BSR set to: 0
 21587                           
 21588                           ; BSR set to: 0
 21589  011B84  0E00               	movlw	0
 21590  011B86  0100               	movlb	0	; () banked
 21591  011B88  6F60               	movwf	___fldiv@b& (0+255),b
 21592  011B8A  0E00               	movlw	0
 21593  011B8C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 21594  011B8E  0E00               	movlw	0
 21595  011B90  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 21596  011B92  0E00               	movlw	0
 21597  011B94                     L15:
 21598  011B94  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 21599                           
 21600                           ; BSR set to: 0
 21601                           
 21602                           ; BSR set to: 0
 21603  011B96  0100               	movlb	0	; () banked
 21604  011B98  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 21605  011B9A  0B80               	andlw	128
 21606  011B9C  0100               	movlb	0	; () banked
 21607  011B9E  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 21608                           
 21609                           ; BSR set to: 0
 21610  011BA0  0100               	movlb	0	; () banked
 21611  011BA2  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 21612  011BA4  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 21613  011BA6  0100               	movlb	0	; () banked
 21614  011BA8  6F78               	movwf	___fldiv@aexp& (0+255),b
 21615                           
 21616                           ; BSR set to: 0
 21617  011BAA  0100               	movlb	0	; () banked
 21618  011BAC  AF66               	btfss	(___fldiv@a+2)& (0+255),7,b
 21619  011BAE  D002               	goto	l2760
 21620                           
 21621                           ; BSR set to: 0
 21622  011BB0  0100               	movlb	0	; () banked
 21623  011BB2  8178               	bsf	___fldiv@aexp& (0+255),0,b
 21624  011BB4                     l2760:
 21625                           
 21626                           ; BSR set to: 0
 21627                           
 21628                           ; BSR set to: 0
 21629  011BB4  0100               	movlb	0	; () banked
 21630  011BB6  5178               	movf	___fldiv@aexp& (0+255),w,b
 21631  011BB8  0100               	movlb	0	; () banked
 21632  011BBA  B4D8               	btfsc	status,2,c
 21633  011BBC  D012               	goto	l2761
 21634                           
 21635                           ; BSR set to: 0
 21636  011BBE  0100               	movlb	0	; () banked
 21637  011BC0  2978               	incf	___fldiv@aexp& (0+255),w,b
 21638  011BC2  A4D8               	btfss	status,2,c
 21639  011BC4  D009               	goto	l2762
 21640                           
 21641                           ; BSR set to: 0
 21642  011BC6  0E00               	movlw	0
 21643  011BC8  0100               	movlb	0	; () banked
 21644  011BCA  6F64               	movwf	___fldiv@a& (0+255),b
 21645  011BCC  0E00               	movlw	0
 21646  011BCE  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 21647  011BD0  0E00               	movlw	0
 21648  011BD2  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 21649  011BD4  0E00               	movlw	0
 21650  011BD6  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 21651  011BD8                     l2762:
 21652                           
 21653                           ; BSR set to: 0
 21654                           
 21655                           ; BSR set to: 0
 21656  011BD8  0100               	movlb	0	; () banked
 21657  011BDA  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 21658                           
 21659                           ; BSR set to: 0
 21660  011BDC  0E00               	movlw	0
 21661  011BDE  0100               	movlb	0	; () banked
 21662  011BE0  D008               	goto	L16
 21663  011BE2                     l2761:
 21664                           
 21665                           ; BSR set to: 0
 21666                           
 21667                           ; BSR set to: 0
 21668  011BE2  0E00               	movlw	0
 21669  011BE4  0100               	movlb	0	; () banked
 21670  011BE6  6F64               	movwf	___fldiv@a& (0+255),b
 21671  011BE8  0E00               	movlw	0
 21672  011BEA  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 21673  011BEC  0E00               	movlw	0
 21674  011BEE  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 21675  011BF0  0E00               	movlw	0
 21676  011BF2                     L16:
 21677  011BF2  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 21678                           
 21679                           ; BSR set to: 0
 21680                           
 21681                           ; BSR set to: 0
 21682  011BF4  0100               	movlb	0	; () banked
 21683  011BF6  5164               	movf	___fldiv@a& (0+255),w,b
 21684  011BF8  0100               	movlb	0	; () banked
 21685  011BFA  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 21686  011BFC  0100               	movlb	0	; () banked
 21687  011BFE  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 21688  011C00  0100               	movlb	0	; () banked
 21689  011C02  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 21690  011C04  A4D8               	btfss	status,2,c
 21691  011C06  D017               	goto	l2764
 21692                           
 21693                           ; BSR set to: 0
 21694  011C08  0E00               	movlw	0
 21695  011C0A  0100               	movlb	0	; () banked
 21696  011C0C  6F60               	movwf	___fldiv@b& (0+255),b
 21697  011C0E  0E00               	movlw	0
 21698  011C10  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 21699  011C12  0E00               	movlw	0
 21700  011C14  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 21701  011C16  0E00               	movlw	0
 21702  011C18  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 21703                           
 21704                           ; BSR set to: 0
 21705  011C1A  0100               	movlb	0	; () banked
 21706  011C1C  0E80               	movlw	128
 21707  011C1E  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 21708  011C20  0E7F               	movlw	127
 21709  011C22  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 21710                           
 21711                           ; BSR set to: 0
 21712  011C24  C060  F060         	movff	___fldiv@b,?___fldiv
 21713  011C28  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 21714  011C2C  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 21715  011C30  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 21716                           
 21717                           ; BSR set to: 0
 21718  011C34  0012               	return	
 21719  011C36                     l2764:
 21720                           
 21721                           ; BSR set to: 0
 21722                           
 21723                           ; BSR set to: 0
 21724  011C36  0100               	movlb	0	; () banked
 21725  011C38  5177               	movf	___fldiv@bexp& (0+255),w,b
 21726  011C3A  0100               	movlb	0	; () banked
 21727  011C3C  A4D8               	btfss	status,2,c
 21728  011C3E  D012               	goto	l2766
 21729                           
 21730                           ; BSR set to: 0
 21731  011C40  0E00               	movlw	0
 21732  011C42  0100               	movlb	0	; () banked
 21733  011C44  6F60               	movwf	___fldiv@b& (0+255),b
 21734  011C46  0E00               	movlw	0
 21735  011C48  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 21736  011C4A  0E00               	movlw	0
 21737  011C4C  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 21738  011C4E  0E00               	movlw	0
 21739  011C50  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 21740                           
 21741                           ; BSR set to: 0
 21742  011C52  C060  F060         	movff	___fldiv@b,?___fldiv
 21743  011C56  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 21744  011C5A  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 21745  011C5E  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 21746                           
 21747                           ; BSR set to: 0
 21748  011C62  0012               	return	
 21749  011C64                     l2766:
 21750                           
 21751                           ; BSR set to: 0
 21752                           
 21753                           ; BSR set to: 0
 21754  011C64  0100               	movlb	0	; () banked
 21755  011C66  5178               	movf	___fldiv@aexp& (0+255),w,b
 21756  011C68  0100               	movlb	0	; () banked
 21757  011C6A  6F68               	movwf	??___fldiv& (0+255),b
 21758  011C6C  6B69               	clrf	(??___fldiv+1)& (0+255),b
 21759  011C6E  0100               	movlb	0	; () banked
 21760  011C70  1F68               	comf	??___fldiv& (0+255),f,b
 21761  011C72  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 21762  011C74  4B68               	infsnz	??___fldiv& (0+255),f,b
 21763  011C76  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 21764  011C78  0100               	movlb	0	; () banked
 21765  011C7A  5177               	movf	___fldiv@bexp& (0+255),w,b
 21766  011C7C  0100               	movlb	0	; () banked
 21767  011C7E  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 21768  011C80  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 21769  011C82  0100               	movlb	0	; () banked
 21770  011C84  5168               	movf	??___fldiv& (0+255),w,b
 21771  011C86  0100               	movlb	0	; () banked
 21772  011C88  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 21773  011C8A  0100               	movlb	0	; () banked
 21774  011C8C  5169               	movf	(??___fldiv+1)& (0+255),w,b
 21775  011C8E  0100               	movlb	0	; () banked
 21776  011C90  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 21777  011C92  0E7F               	movlw	127
 21778  011C94  0100               	movlb	0	; () banked
 21779  011C96  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 21780  011C98  0100               	movlb	0	; () banked
 21781  011C9A  6F71               	movwf	___fldiv@new_exp& (0+255),b
 21782  011C9C  0E00               	movlw	0
 21783  011C9E  0100               	movlb	0	; () banked
 21784  011CA0  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 21785  011CA2  0100               	movlb	0	; () banked
 21786  011CA4  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 21787                           
 21788                           ; BSR set to: 0
 21789  011CA6  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 21790  011CAA  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 21791  011CAE  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 21792  011CB2  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 21793                           
 21794                           ; BSR set to: 0
 21795  011CB6  0E00               	movlw	0
 21796  011CB8  0100               	movlb	0	; () banked
 21797  011CBA  6F60               	movwf	___fldiv@b& (0+255),b
 21798  011CBC  0E00               	movlw	0
 21799  011CBE  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 21800  011CC0  0E00               	movlw	0
 21801  011CC2  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 21802  011CC4  0E00               	movlw	0
 21803  011CC6  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 21804                           
 21805                           ; BSR set to: 0
 21806  011CC8  0E00               	movlw	0
 21807  011CCA  0100               	movlb	0	; () banked
 21808  011CCC  6F73               	movwf	___fldiv@grs& (0+255),b
 21809  011CCE  0E00               	movlw	0
 21810  011CD0  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 21811  011CD2  0E00               	movlw	0
 21812  011CD4  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 21813  011CD6  0E00               	movlw	0
 21814  011CD8  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 21815                           
 21816                           ; BSR set to: 0
 21817  011CDA  0E00               	movlw	0
 21818  011CDC  0100               	movlb	0	; () banked
 21819  011CDE  6F78               	movwf	___fldiv@aexp& (0+255),b
 21820  011CE0  D042               	goto	l2767
 21821  011CE2                     
 21822                           ; BSR set to: 0
 21823                           
 21824                           ; BSR set to: 0
 21825  011CE2  0100               	movlb	0	; () banked
 21826  011CE4  5178               	movf	___fldiv@aexp& (0+255),w,b
 21827  011CE6  0100               	movlb	0	; () banked
 21828  011CE8  B4D8               	btfsc	status,2,c
 21829  011CEA  D017               	goto	l2769
 21830                           
 21831                           ; BSR set to: 0
 21832  011CEC  0100               	movlb	0	; () banked
 21833  011CEE  90D8               	bcf	status,0,c
 21834  011CF0  376D               	rlcf	___fldiv@rem& (0+255),f,b
 21835  011CF2  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 21836  011CF4  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 21837  011CF6  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 21838  011CF8  0100               	movlb	0	; () banked
 21839  011CFA  90D8               	bcf	status,0,c
 21840  011CFC  3760               	rlcf	___fldiv@b& (0+255),f,b
 21841  011CFE  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 21842  011D00  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 21843  011D02  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 21844                           
 21845                           ; BSR set to: 0
 21846  011D04  0100               	movlb	0	; () banked
 21847  011D06  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 21848  011D08  D002               	goto	l2770
 21849                           
 21850                           ; BSR set to: 0
 21851  011D0A  0100               	movlb	0	; () banked
 21852  011D0C  8160               	bsf	___fldiv@b& (0+255),0,b
 21853  011D0E                     l2770:
 21854                           
 21855                           ; BSR set to: 0
 21856  011D0E  0100               	movlb	0	; () banked
 21857  011D10  90D8               	bcf	status,0,c
 21858  011D12  3773               	rlcf	___fldiv@grs& (0+255),f,b
 21859  011D14  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 21860  011D16  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 21861  011D18  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 21862  011D1A                     l2769:
 21863                           
 21864                           ; BSR set to: 0
 21865                           
 21866                           ; BSR set to: 0
 21867  011D1A  0100               	movlb	0	; () banked
 21868  011D1C  5164               	movf	___fldiv@a& (0+255),w,b
 21869  011D1E  0100               	movlb	0	; () banked
 21870  011D20  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 21871  011D22  0100               	movlb	0	; () banked
 21872  011D24  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 21873  011D26  0100               	movlb	0	; () banked
 21874  011D28  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 21875  011D2A  0100               	movlb	0	; () banked
 21876  011D2C  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 21877  011D2E  0100               	movlb	0	; () banked
 21878  011D30  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 21879  011D32  0100               	movlb	0	; () banked
 21880  011D34  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 21881  011D36  0100               	movlb	0	; () banked
 21882  011D38  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 21883  011D3A  A0D8               	btfss	status,0,c
 21884  011D3C  D012               	goto	l2771
 21885                           
 21886                           ; BSR set to: 0
 21887  011D3E  0100               	movlb	0	; () banked
 21888  011D40  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 21889                           
 21890                           ; BSR set to: 0
 21891  011D42  0100               	movlb	0	; () banked
 21892  011D44  5164               	movf	___fldiv@a& (0+255),w,b
 21893  011D46  0100               	movlb	0	; () banked
 21894  011D48  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 21895  011D4A  0100               	movlb	0	; () banked
 21896  011D4C  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 21897  011D4E  0100               	movlb	0	; () banked
 21898  011D50  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 21899  011D52  0100               	movlb	0	; () banked
 21900  011D54  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 21901  011D56  0100               	movlb	0	; () banked
 21902  011D58  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 21903  011D5A  0100               	movlb	0	; () banked
 21904  011D5C  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 21905  011D5E  0100               	movlb	0	; () banked
 21906  011D60  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 21907  011D62                     l2771:
 21908                           
 21909                           ; BSR set to: 0
 21910                           
 21911                           ; BSR set to: 0
 21912  011D62  0100               	movlb	0	; () banked
 21913  011D64  2B78               	incf	___fldiv@aexp& (0+255),f,b
 21914  011D66                     l2767:
 21915                           
 21916                           ; BSR set to: 0
 21917  011D66  0E19               	movlw	25
 21918  011D68  0100               	movlb	0	; () banked
 21919  011D6A  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 21920  011D6C  D7BA               	goto	l2768
 21921                           
 21922                           ; BSR set to: 0
 21923                           
 21924                           ; BSR set to: 0
 21925  011D6E  0100               	movlb	0	; () banked
 21926  011D70  516D               	movf	___fldiv@rem& (0+255),w,b
 21927  011D72  0100               	movlb	0	; () banked
 21928  011D74  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 21929  011D76  0100               	movlb	0	; () banked
 21930  011D78  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 21931  011D7A  0100               	movlb	0	; () banked
 21932  011D7C  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 21933  011D7E  B4D8               	btfsc	status,2,c
 21934  011D80  D018               	goto	l2774
 21935                           
 21936                           ; BSR set to: 0
 21937  011D82  0100               	movlb	0	; () banked
 21938  011D84  8173               	bsf	___fldiv@grs& (0+255),0,b
 21939                           
 21940                           ; BSR set to: 0
 21941  011D86  D015               	goto	l2774
 21942  011D88                     
 21943                           ; BSR set to: 0
 21944                           
 21945                           ; BSR set to: 0
 21946  011D88  0100               	movlb	0	; () banked
 21947  011D8A  90D8               	bcf	status,0,c
 21948  011D8C  3760               	rlcf	___fldiv@b& (0+255),f,b
 21949  011D8E  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 21950  011D90  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 21951  011D92  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 21952                           
 21953                           ; BSR set to: 0
 21954  011D94  0100               	movlb	0	; () banked
 21955  011D96  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 21956  011D98  D002               	goto	l2776
 21957                           
 21958                           ; BSR set to: 0
 21959  011D9A  0100               	movlb	0	; () banked
 21960  011D9C  8160               	bsf	___fldiv@b& (0+255),0,b
 21961  011D9E                     l2776:
 21962                           
 21963                           ; BSR set to: 0
 21964  011D9E  0100               	movlb	0	; () banked
 21965  011DA0  90D8               	bcf	status,0,c
 21966  011DA2  3773               	rlcf	___fldiv@grs& (0+255),f,b
 21967  011DA4  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 21968  011DA6  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 21969  011DA8  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 21970  011DAA  0100               	movlb	0	; () banked
 21971  011DAC  0771               	decf	___fldiv@new_exp& (0+255),f,b
 21972  011DAE  A0D8               	btfss	status,0,c
 21973  011DB0  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 21974  011DB2                     l2774:
 21975                           
 21976                           ; BSR set to: 0
 21977                           
 21978                           ; BSR set to: 0
 21979  011DB2  0100               	movlb	0	; () banked
 21980  011DB4  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 21981  011DB6  D7E8               	goto	l2775
 21982                           
 21983                           ; BSR set to: 0
 21984                           
 21985                           ; BSR set to: 0
 21986  011DB8  0E00               	movlw	0
 21987  011DBA  0100               	movlb	0	; () banked
 21988  011DBC  6F78               	movwf	___fldiv@aexp& (0+255),b
 21989                           
 21990                           ; BSR set to: 0
 21991  011DBE  0100               	movlb	0	; () banked
 21992  011DC0  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 21993  011DC2  D024               	goto	l2781
 21994                           
 21995                           ; BSR set to: 0
 21996  011DC4  0EFF               	movlw	255
 21997  011DC6  0100               	movlb	0	; () banked
 21998  011DC8  1573               	andwf	___fldiv@grs& (0+255),w,b
 21999  011DCA  0100               	movlb	0	; () banked
 22000  011DCC  6F68               	movwf	??___fldiv& (0+255),b
 22001  011DCE  0EFF               	movlw	255
 22002  011DD0  0100               	movlb	0	; () banked
 22003  011DD2  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 22004  011DD4  0100               	movlb	0	; () banked
 22005  011DD6  6F69               	movwf	(??___fldiv+1)& (0+255),b
 22006  011DD8  0EFF               	movlw	255
 22007  011DDA  0100               	movlb	0	; () banked
 22008  011DDC  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 22009  011DDE  0100               	movlb	0	; () banked
 22010  011DE0  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 22011  011DE2  0E7F               	movlw	127
 22012  011DE4  0100               	movlb	0	; () banked
 22013  011DE6  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 22014  011DE8  0100               	movlb	0	; () banked
 22015  011DEA  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 22016  011DEC  0100               	movlb	0	; () banked
 22017  011DEE  5168               	movf	??___fldiv& (0+255),w,b
 22018  011DF0  0100               	movlb	0	; () banked
 22019  011DF2  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 22020  011DF4  0100               	movlb	0	; () banked
 22021  011DF6  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 22022  011DF8  0100               	movlb	0	; () banked
 22023  011DFA  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 22024  011DFC  A4D8               	btfss	status,2,c
 22025  011DFE  D003               	goto	u12140
 22026                           
 22027                           ; BSR set to: 0
 22028                           
 22029                           ; BSR set to: 0
 22030  011E00  0100               	movlb	0	; () banked
 22031  011E02  A160               	btfss	___fldiv@b& (0+255),0,b
 22032  011E04  D003               	goto	l2781
 22033  011E06                     u12140:
 22034                           
 22035                           ; BSR set to: 0
 22036  011E06  0E01               	movlw	1
 22037  011E08  0100               	movlb	0	; () banked
 22038  011E0A  6F78               	movwf	___fldiv@aexp& (0+255),b
 22039  011E0C                     l2781:
 22040                           
 22041                           ; BSR set to: 0
 22042                           
 22043                           ; BSR set to: 0
 22044                           
 22045                           ; BSR set to: 0
 22046  011E0C  0100               	movlb	0	; () banked
 22047  011E0E  5178               	movf	___fldiv@aexp& (0+255),w,b
 22048  011E10  0100               	movlb	0	; () banked
 22049  011E12  B4D8               	btfsc	status,2,c
 22050  011E14  D023               	goto	l2783
 22051                           
 22052                           ; BSR set to: 0
 22053  011E16  0E01               	movlw	1
 22054  011E18  0100               	movlb	0	; () banked
 22055  011E1A  2760               	addwf	___fldiv@b& (0+255),f,b
 22056  011E1C  0E00               	movlw	0
 22057  011E1E  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 22058  011E20  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 22059  011E22  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 22060                           
 22061                           ; BSR set to: 0
 22062  011E24  0100               	movlb	0	; () banked
 22063  011E26  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 22064  011E28  D019               	goto	l2783
 22065                           
 22066                           ; BSR set to: 0
 22067  011E2A  C060  F068         	movff	___fldiv@b,??___fldiv
 22068  011E2E  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 22069  011E32  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 22070  011E36  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 22071  011E3A  0100               	movlb	0	; () banked
 22072  011E3C  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 22073  011E3E  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 22074  011E40  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 22075  011E42  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 22076  011E44  3368               	rrcf	??___fldiv& (0+255),f,b
 22077  011E46  C068  F060         	movff	??___fldiv,___fldiv@b
 22078  011E4A  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 22079  011E4E  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 22080  011E52  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 22081                           
 22082                           ; BSR set to: 0
 22083  011E56  0100               	movlb	0	; () banked
 22084  011E58  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 22085  011E5A  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 22086  011E5C                     l2783:
 22087                           
 22088                           ; BSR set to: 0
 22089                           
 22090                           ; BSR set to: 0
 22091                           
 22092                           ; BSR set to: 0
 22093  011E5C  0100               	movlb	0	; () banked
 22094  011E5E  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 22095  011E60  D014               	goto	l2784
 22096  011E62  0100               	movlb	0	; () banked
 22097  011E64  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 22098  011E66  E104               	bnz	u12170
 22099  011E68  0100               	movlb	0	; () banked
 22100  011E6A  2971               	incf	___fldiv@new_exp& (0+255),w,b
 22101  011E6C  A0D8               	btfss	status,0,c
 22102  011E6E  D00D               	goto	l2784
 22103  011E70                     u12170:
 22104                           
 22105                           ; BSR set to: 0
 22106  011E70  0E00               	movlw	0
 22107  011E72  0100               	movlb	0	; () banked
 22108  011E74  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 22109  011E76  6971               	setf	___fldiv@new_exp& (0+255),b
 22110  011E78  0E00               	movlw	0
 22111  011E7A  0100               	movlb	0	; () banked
 22112  011E7C  6F60               	movwf	___fldiv@b& (0+255),b
 22113  011E7E  0E00               	movlw	0
 22114  011E80  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 22115  011E82  0E00               	movlw	0
 22116  011E84  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 22117  011E86  0E00               	movlw	0
 22118  011E88  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22119  011E8A                     l2784:
 22120                           
 22121                           ; BSR set to: 0
 22122                           
 22123                           ; BSR set to: 0
 22124  011E8A  0100               	movlb	0	; () banked
 22125  011E8C  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 22126  011E8E  D007               	goto	u12180
 22127  011E90  0100               	movlb	0	; () banked
 22128  011E92  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 22129  011E94  E115               	bnz	l14479
 22130  011E96  0100               	movlb	0	; () banked
 22131  011E98  0571               	decf	___fldiv@new_exp& (0+255),w,b
 22132  011E9A  B0D8               	btfsc	status,0,c
 22133  011E9C  D011               	goto	l2785
 22134  011E9E                     u12180:
 22135                           
 22136                           ; BSR set to: 0
 22137  011E9E  0E00               	movlw	0
 22138  011EA0  0100               	movlb	0	; () banked
 22139  011EA2  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 22140  011EA4  0E00               	movlw	0
 22141  011EA6  6F71               	movwf	___fldiv@new_exp& (0+255),b
 22142  011EA8  0E00               	movlw	0
 22143  011EAA  0100               	movlb	0	; () banked
 22144  011EAC  6F60               	movwf	___fldiv@b& (0+255),b
 22145  011EAE  0E00               	movlw	0
 22146  011EB0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 22147  011EB2  0E00               	movlw	0
 22148  011EB4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 22149  011EB6  0E00               	movlw	0
 22150  011EB8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22151  011EBA  0E00               	movlw	0
 22152  011EBC  0100               	movlb	0	; () banked
 22153  011EBE  6F6C               	movwf	___fldiv@sign& (0+255),b
 22154  011EC0                     l2785:
 22155  011EC0                     l14479:
 22156                           
 22157                           ; BSR set to: 0
 22158  011EC0  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 22159                           
 22160                           ; BSR set to: 0
 22161  011EC4  0100               	movlb	0	; () banked
 22162  011EC6  A177               	btfss	___fldiv@bexp& (0+255),0,b
 22163  011EC8  D003               	goto	l2786
 22164                           
 22165                           ; BSR set to: 0
 22166  011ECA  0100               	movlb	0	; () banked
 22167  011ECC  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 22168  011ECE  D002               	goto	l2787
 22169  011ED0                     l2786:
 22170                           
 22171                           ; BSR set to: 0
 22172                           
 22173                           ; BSR set to: 0
 22174  011ED0  0100               	movlb	0	; () banked
 22175  011ED2  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 22176  011ED4                     l2787:
 22177                           
 22178                           ; BSR set to: 0
 22179                           
 22180                           ; BSR set to: 0
 22181  011ED4  0100               	movlb	0	; () banked
 22182  011ED6  90D8               	bcf	status,0,c
 22183  011ED8  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 22184  011EDA  0100               	movlb	0	; () banked
 22185  011EDC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 22186                           
 22187                           ; BSR set to: 0
 22188  011EDE  0100               	movlb	0	; () banked
 22189  011EE0  516C               	movf	___fldiv@sign& (0+255),w,b
 22190  011EE2  0100               	movlb	0	; () banked
 22191  011EE4  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 22192                           
 22193                           ; BSR set to: 0
 22194  011EE6  C060  F060         	movff	___fldiv@b,?___fldiv
 22195  011EEA  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 22196  011EEE  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 22197  011EF2  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 22198  011EF6  0012               	return	
 22199  011EF8                     __end_of___fldiv:
 22200                           	opt stack 0
 22201                           tosu	equ	0xFFF
 22202                           tosh	equ	0xFFE
 22203                           tosl	equ	0xFFD
 22204                           pclath	equ	0xFFA
 22205                           tblptru	equ	0xFF8
 22206                           tblptrh	equ	0xFF7
 22207                           tblptrl	equ	0xFF6
 22208                           tablat	equ	0xFF5
 22209                           prodh	equ	0xFF4
 22210                           prodl	equ	0xFF3
 22211                           intcon	equ	0xFF2
 22212                           indf0	equ	0xFEF
 22213                           postinc0	equ	0xFEE
 22214                           fsr0h	equ	0xFEA
 22215                           fsr0l	equ	0xFE9
 22216                           wreg	equ	0xFE8
 22217                           indf1	equ	0xFE7
 22218                           postdec1	equ	0xFE5
 22219                           fsr1h	equ	0xFE2
 22220                           fsr1l	equ	0xFE1
 22221                           indf2	equ	0xFDF
 22222                           postinc2	equ	0xFDE
 22223                           postdec2	equ	0xFDD
 22224                           plusw2	equ	0xFDB
 22225                           fsr2h	equ	0xFDA
 22226                           fsr2l	equ	0xFD9
 22227                           status	equ	0xFD8
 22228                           
 22229 ;; *************** function _displayNullMode *****************
 22230 ;; Defined at:
 22231 ;;		line 211 in file "main.c"
 22232 ;; Parameters:    Size  Location     Type
 22233 ;;		None
 22234 ;; Auto vars:     Size  Location     Type
 22235 ;;		None
 22236 ;; Return value:  Size  Location     Type
 22237 ;;                  1    wreg      void 
 22238 ;; Registers used:
 22239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22240 ;; Tracked objects:
 22241 ;;		On entry : 0/0
 22242 ;;		On exit  : 0/0
 22243 ;;		Unchanged: 0/0
 22244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22249 ;;Total ram usage:        0 bytes
 22250 ;; Hardware stack levels used:    1
 22251 ;; Hardware stack levels required when called:   13
 22252 ;; This function calls:
 22253 ;;		_printf
 22254 ;; This function is called by:
 22255 ;;		_main
 22256 ;; This function uses a non-reentrant model
 22257 ;;
 22258                           
 22259                           	psect	text116
 22260  017842                     __ptext116:
 22261                           	opt stack 0
 22262  017842                     _displayNullMode:
 22263                           	opt stack 17
 22264                           
 22265                           ;main.c: 212: printf("Current Mode:\n Undefined\n");
 22266                           
 22267                           ; BSR set to: 0
 22268                           ;incstack = 0
 22269  017842  0E48               	movlw	low STR_12
 22270  017844  0100               	movlb	0	; () banked
 22271  017846  6FB0               	movwf	printf@f& (0+255),b
 22272  017848  0EFF               	movlw	high STR_12
 22273  01784A  0100               	movlb	0	; () banked
 22274  01784C  6FB1               	movwf	(printf@f+1)& (0+255),b
 22275  01784E  EC00  F080         	call	_printf	;wreg free
 22276                           
 22277                           ;main.c: 213: printf("                      \n");
 22278  017852  0E7C               	movlw	low STR_13
 22279  017854  0100               	movlb	0	; () banked
 22280  017856  6FB0               	movwf	printf@f& (0+255),b
 22281  017858  0EFF               	movlw	high STR_13
 22282  01785A  0100               	movlb	0	; () banked
 22283  01785C  6FB1               	movwf	(printf@f+1)& (0+255),b
 22284  01785E  EC00  F080         	call	_printf	;wreg free
 22285                           
 22286                           ;main.c: 214: printf("                      \n");
 22287  017862  0E7C               	movlw	low STR_13
 22288  017864  0100               	movlb	0	; () banked
 22289  017866  6FB0               	movwf	printf@f& (0+255),b
 22290  017868  0EFF               	movlw	high STR_13
 22291  01786A  0100               	movlb	0	; () banked
 22292  01786C  6FB1               	movwf	(printf@f+1)& (0+255),b
 22293  01786E  EC00  F080         	call	_printf	;wreg free
 22294                           
 22295                           ;main.c: 215: printf("                      \n");
 22296  017872  0E7C               	movlw	low STR_13
 22297  017874  0100               	movlb	0	; () banked
 22298  017876  6FB0               	movwf	printf@f& (0+255),b
 22299  017878  0EFF               	movlw	high STR_13
 22300  01787A  0100               	movlb	0	; () banked
 22301  01787C  6FB1               	movwf	(printf@f+1)& (0+255),b
 22302  01787E  EC00  F080         	call	_printf	;wreg free
 22303  017882  0012               	return		;funcret
 22304  017884                     __end_of_displayNullMode:
 22305                           	opt stack 0
 22306                           tosu	equ	0xFFF
 22307                           tosh	equ	0xFFE
 22308                           tosl	equ	0xFFD
 22309                           pclath	equ	0xFFA
 22310                           tblptru	equ	0xFF8
 22311                           tblptrh	equ	0xFF7
 22312                           tblptrl	equ	0xFF6
 22313                           tablat	equ	0xFF5
 22314                           prodh	equ	0xFF4
 22315                           prodl	equ	0xFF3
 22316                           intcon	equ	0xFF2
 22317                           indf0	equ	0xFEF
 22318                           postinc0	equ	0xFEE
 22319                           fsr0h	equ	0xFEA
 22320                           fsr0l	equ	0xFE9
 22321                           wreg	equ	0xFE8
 22322                           indf1	equ	0xFE7
 22323                           postdec1	equ	0xFE5
 22324                           fsr1h	equ	0xFE2
 22325                           fsr1l	equ	0xFE1
 22326                           indf2	equ	0xFDF
 22327                           postinc2	equ	0xFDE
 22328                           postdec2	equ	0xFDD
 22329                           plusw2	equ	0xFDB
 22330                           fsr2h	equ	0xFDA
 22331                           fsr2l	equ	0xFD9
 22332                           status	equ	0xFD8
 22333                           
 22334 ;; *************** function _displayContinuousMode *****************
 22335 ;; Defined at:
 22336 ;;		line 145 in file "main.c"
 22337 ;; Parameters:    Size  Location     Type
 22338 ;;		None
 22339 ;; Auto vars:     Size  Location     Type
 22340 ;;		None
 22341 ;; Return value:  Size  Location     Type
 22342 ;;                  1    wreg      void 
 22343 ;; Registers used:
 22344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22345 ;; Tracked objects:
 22346 ;;		On entry : 0/0
 22347 ;;		On exit  : 0/0
 22348 ;;		Unchanged: 0/0
 22349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22353 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22354 ;;Total ram usage:        0 bytes
 22355 ;; Hardware stack levels used:    1
 22356 ;; Hardware stack levels required when called:   13
 22357 ;; This function calls:
 22358 ;;		_printf
 22359 ;; This function is called by:
 22360 ;;		_main
 22361 ;; This function uses a non-reentrant model
 22362 ;;
 22363                           
 22364                           	psect	text117
 22365  0156DA                     __ptext117:
 22366                           	opt stack 0
 22367  0156DA                     _displayContinuousMode:
 22368                           	opt stack 17
 22369                           
 22370                           ;main.c: 147: printf("Current Mode:\n Continuous Mode\n");
 22371                           
 22372                           ;incstack = 0
 22373  0156DA  0E09               	movlw	low STR_2
 22374  0156DC  0100               	movlb	0	; () banked
 22375  0156DE  6FB0               	movwf	printf@f& (0+255),b
 22376  0156E0  0EFF               	movlw	high STR_2
 22377  0156E2  0100               	movlb	0	; () banked
 22378  0156E4  6FB1               	movwf	(printf@f+1)& (0+255),b
 22379  0156E6  EC00  F080         	call	_printf	;wreg free
 22380                           
 22381                           ;main.c: 148: printf("Direction: ");
 22382  0156EA  0ED5               	movlw	low STR_3
 22383  0156EC  0100               	movlb	0	; () banked
 22384  0156EE  6FB0               	movwf	printf@f& (0+255),b
 22385  0156F0  0EFF               	movlw	high STR_3
 22386  0156F2  0100               	movlb	0	; () banked
 22387  0156F4  6FB1               	movwf	(printf@f+1)& (0+255),b
 22388  0156F6  EC00  F080         	call	_printf	;wreg free
 22389                           
 22390                           ;main.c: 152: if (direction > 0) {
 22391  0156FA  0101               	movlb	1	; () banked
 22392  0156FC  BFF9               	btfsc	(_direction+1)& (0+255),7,b
 22393  0156FE  D010               	goto	l2061
 22394  015700  0101               	movlb	1	; () banked
 22395  015702  51F9               	movf	(_direction+1)& (0+255),w,b
 22396  015704  E104               	bnz	u14160
 22397  015706  0101               	movlb	1	; () banked
 22398  015708  05F8               	decf	_direction& (0+255),w,b
 22399  01570A  A0D8               	btfss	status,0,c
 22400  01570C  D009               	goto	l2061
 22401  01570E                     u14160:
 22402                           
 22403                           ; BSR set to: 1
 22404                           ;main.c: 153: printf("CW\n");
 22405  01570E  0EF8               	movlw	low (STR_5+1)
 22406  015710  0100               	movlb	0	; () banked
 22407  015712  6FB0               	movwf	printf@f& (0+255),b
 22408  015714  0EFF               	movlw	high (STR_5+1)
 22409  015716  0100               	movlb	0	; () banked
 22410  015718  6FB1               	movwf	(printf@f+1)& (0+255),b
 22411  01571A  EC00  F080         	call	_printf	;wreg free
 22412                           
 22413                           ;main.c: 154: } else {
 22414  01571E  D008               	goto	l2062
 22415  015720                     l2061:
 22416                           
 22417                           ;main.c: 155: printf("CCW\n");
 22418  015720  0EF7               	movlw	low STR_5
 22419  015722  0100               	movlb	0	; () banked
 22420  015724  6FB0               	movwf	printf@f& (0+255),b
 22421  015726  0EFF               	movlw	high STR_5
 22422  015728  0100               	movlb	0	; () banked
 22423  01572A  6FB1               	movwf	(printf@f+1)& (0+255),b
 22424  01572C  EC00  F080         	call	_printf	;wreg free
 22425  015730                     l2062:
 22426                           
 22427                           ;main.c: 156: }
 22428                           ;main.c: 158: printf("Speed: %d\n", speed);
 22429  015730  0EE1               	movlw	low STR_6
 22430  015732  0100               	movlb	0	; () banked
 22431  015734  6FB0               	movwf	printf@f& (0+255),b
 22432  015736  0EFF               	movlw	high STR_6
 22433  015738  0100               	movlb	0	; () banked
 22434  01573A  6FB1               	movwf	(printf@f+1)& (0+255),b
 22435  01573C  C0E2  F0B2         	movff	_speed,?_printf+2
 22436  015740  C0E3  F0B3         	movff	_speed+1,?_printf+3
 22437  015744  EC00  F080         	call	_printf	;wreg free
 22438                           
 22439                           ;main.c: 164: if (rightState) {
 22440  015748  0100               	movlb	0	; () banked
 22441  01574A  51F0               	movf	_rightState& (0+255),w,b
 22442  01574C  B4D8               	btfsc	status,2,c
 22443  01574E  D006               	goto	l2063
 22444                           
 22445                           ; BSR set to: 0
 22446                           ;main.c: 165: direction = 200;
 22447  015750  0E00               	movlw	0
 22448  015752  0101               	movlb	1	; () banked
 22449  015754  6FF9               	movwf	(_direction+1)& (0+255),b
 22450  015756  0EC8               	movlw	200
 22451  015758  6FF8               	movwf	_direction& (0+255),b
 22452                           
 22453                           ;main.c: 166: } else if (leftState) {
 22454  01575A  0012               	return	
 22455  01575C                     l2063:
 22456                           
 22457                           ; BSR set to: 1
 22458  01575C  0100               	movlb	0	; () banked
 22459  01575E  51F1               	movf	_leftState& (0+255),w,b
 22460  015760  B4D8               	btfsc	status,2,c
 22461  015762  D006               	goto	l2065
 22462                           
 22463                           ; BSR set to: 0
 22464                           ;main.c: 167: direction = -200;
 22465  015764  0EFF               	movlw	255
 22466  015766  0101               	movlb	1	; () banked
 22467  015768  6FF9               	movwf	(_direction+1)& (0+255),b
 22468  01576A  0E38               	movlw	56
 22469  01576C  6FF8               	movwf	_direction& (0+255),b
 22470                           
 22471                           ;main.c: 168: } else if (upState) {
 22472  01576E  0012               	return	
 22473  015770                     l2065:
 22474                           
 22475                           ; BSR set to: 1
 22476  015770  0100               	movlb	0	; () banked
 22477  015772  51F3               	movf	_upState& (0+255),w,b
 22478  015774  B4D8               	btfsc	status,2,c
 22479  015776  D004               	goto	l2067
 22480                           
 22481                           ; BSR set to: 0
 22482                           ;main.c: 169: speed++;
 22483  015778  0100               	movlb	0	; () banked
 22484  01577A  4BE2               	infsnz	_speed& (0+255),f,b
 22485  01577C  2BE3               	incf	(_speed+1)& (0+255),f,b
 22486                           
 22487                           ;main.c: 170: } else if (downState && speed > 0) {
 22488  01577E  0012               	return	
 22489  015780                     l2067:
 22490                           
 22491                           ; BSR set to: 0
 22492                           
 22493                           ; BSR set to: 0
 22494  015780  0100               	movlb	0	; () banked
 22495  015782  51F2               	movf	_downState& (0+255),w,b
 22496  015784  B4D8               	btfsc	status,2,c
 22497  015786  0012               	return	
 22498                           
 22499                           ; BSR set to: 0
 22500  015788  0100               	movlb	0	; () banked
 22501  01578A  BFE3               	btfsc	(_speed+1)& (0+255),7,b
 22502  01578C  0012               	return	
 22503  01578E  0100               	movlb	0	; () banked
 22504  015790  51E3               	movf	(_speed+1)& (0+255),w,b
 22505  015792  E104               	bnz	u14210
 22506  015794  0100               	movlb	0	; () banked
 22507  015796  05E2               	decf	_speed& (0+255),w,b
 22508  015798  A0D8               	btfss	status,0,c
 22509  01579A  0012               	return	
 22510  01579C                     u14210:
 22511                           
 22512                           ; BSR set to: 0
 22513                           ;main.c: 171: speed--;
 22514  01579C  0100               	movlb	0	; () banked
 22515  01579E  07E2               	decf	_speed& (0+255),f,b
 22516  0157A0  A0D8               	btfss	status,0,c
 22517  0157A2  07E3               	decf	(_speed+1)& (0+255),f,b
 22518                           
 22519                           ; BSR set to: 0
 22520                           
 22521                           ; BSR set to: 0
 22522                           
 22523                           ; BSR set to: 0
 22524  0157A4  0012               	return	
 22525  0157A6                     __end_of_displayContinuousMode:
 22526                           	opt stack 0
 22527                           tosu	equ	0xFFF
 22528                           tosh	equ	0xFFE
 22529                           tosl	equ	0xFFD
 22530                           pclath	equ	0xFFA
 22531                           tblptru	equ	0xFF8
 22532                           tblptrh	equ	0xFF7
 22533                           tblptrl	equ	0xFF6
 22534                           tablat	equ	0xFF5
 22535                           prodh	equ	0xFF4
 22536                           prodl	equ	0xFF3
 22537                           intcon	equ	0xFF2
 22538                           indf0	equ	0xFEF
 22539                           postinc0	equ	0xFEE
 22540                           fsr0h	equ	0xFEA
 22541                           fsr0l	equ	0xFE9
 22542                           wreg	equ	0xFE8
 22543                           indf1	equ	0xFE7
 22544                           postdec1	equ	0xFE5
 22545                           fsr1h	equ	0xFE2
 22546                           fsr1l	equ	0xFE1
 22547                           indf2	equ	0xFDF
 22548                           postinc2	equ	0xFDE
 22549                           postdec2	equ	0xFDD
 22550                           plusw2	equ	0xFDB
 22551                           fsr2h	equ	0xFDA
 22552                           fsr2l	equ	0xFD9
 22553                           status	equ	0xFD8
 22554                           
 22555 ;; *************** function _printf *****************
 22556 ;; Defined at:
 22557 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 22558 ;; Parameters:    Size  Location     Type
 22559 ;;  f               2   80[BANK0 ] PTR const unsigned char 
 22560 ;;		 -> STR_17(4), STR_16(3), STR_15(24), STR_14(24), 
 22561 ;;		 -> STR_13(24), STR_12(26), STR_11(20), STR_10(31), 
 22562 ;;		 -> STR_9(22), STR_8(11), STR_7(26), STR_6(11), 
 22563 ;;		 -> STR_5(5), STR_4(4), STR_3(12), STR_2(32), 
 22564 ;;		 -> STR_1(23), 
 22565 ;; Auto vars:     Size  Location     Type
 22566 ;;  fval            4  108[BANK0 ] PTR const unsigned char 
 22567 ;;  tmpval          4  104[BANK0 ] struct .
 22568 ;;  val             4   98[BANK0 ] unsigned long 
 22569 ;;  cp              3    0        PTR const unsigned char 
 22570 ;;  exp             2  102[BANK0 ] int 
 22571 ;;  prec            2   96[BANK0 ] int 
 22572 ;;  flag            2   94[BANK0 ] unsigned short 
 22573 ;;  ap              2   92[BANK0 ] PTR void [1]
 22574 ;;		 -> ?_printf(2), 
 22575 ;;  len             2    0        unsigned int 
 22576 ;;  width           2    0        int 
 22577 ;;  c               1  112[BANK0 ] char 
 22578 ;;  d               1    0        unsigned char 
 22579 ;; Return value:  Size  Location     Type
 22580 ;;                  2   80[BANK0 ] int 
 22581 ;; Registers used:
 22582 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22583 ;; Tracked objects:
 22584 ;;		On entry : 0/0
 22585 ;;		On exit  : 0/0
 22586 ;;		Unchanged: 0/0
 22587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22588 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22589 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22590 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22591 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22592 ;;Total ram usage:       33 bytes
 22593 ;; Hardware stack levels used:    1
 22594 ;; Hardware stack levels required when called:   12
 22595 ;; This function calls:
 22596 ;;		___awdiv
 22597 ;;		___fladd
 22598 ;;		___flge
 22599 ;;		___flmul
 22600 ;;		___flneg
 22601 ;;		___flsub
 22602 ;;		___fltol
 22603 ;;		___lldiv
 22604 ;;		___llmod
 22605 ;;		___wmul
 22606 ;;		___xxtofl
 22607 ;;		__div_to_l_
 22608 ;;		__tdiv_to_l_
 22609 ;;		_fround
 22610 ;;		_putch
 22611 ;;		_scale
 22612 ;; This function is called by:
 22613 ;;		_displaySID
 22614 ;;		_displayContinuousMode
 22615 ;;		_displayStepMode
 22616 ;;		_displayPositionMode
 22617 ;;		_displayNullMode
 22618 ;;		_main
 22619 ;; This function uses a non-reentrant model
 22620 ;;
 22621                           
 22622                           	psect	text118
 22623  010000                     __ptext118:
 22624                           	opt stack 0
 22625  010000                     _printf:
 22626                           	opt stack 18
 22627                           
 22628                           ;doprnt.c: 466: va_list ap;
 22629                           ;doprnt.c: 499: signed char c;
 22630                           ;doprnt.c: 501: int width;
 22631                           ;doprnt.c: 504: int prec;
 22632                           ;doprnt.c: 508: unsigned short flag;
 22633                           ;doprnt.c: 515: char d;
 22634                           ;doprnt.c: 516: double fval;
 22635                           ;doprnt.c: 517: int exp;
 22636                           ;doprnt.c: 523: union {
 22637                           ;doprnt.c: 524: unsigned long vd;
 22638                           ;doprnt.c: 525: double integ;
 22639                           ;doprnt.c: 526: } tmpval;
 22640                           ;doprnt.c: 528: unsigned long val;
 22641                           ;doprnt.c: 529: unsigned len;
 22642                           ;doprnt.c: 530: const char * cp;
 22643                           ;doprnt.c: 533: *ap = __va_start();
 22644                           
 22645                           ;incstack = 0
 22646  010000  0EB2               	movlw	low (?_printf+2)
 22647  010002  0100               	movlb	0	; () banked
 22648  010004  6FBC               	movwf	printf@ap& (0+255),b
 22649  010006  0E00               	movlw	high (?_printf+2)
 22650  010008  0100               	movlb	0	; () banked
 22651  01000A  6FBD               	movwf	(printf@ap+1)& (0+255),b
 22652                           
 22653                           ;doprnt.c: 536: while(c = *f++) {
 22654  01000C  EF37  F084         	goto	u13660
 22655  010010                     
 22656                           ; BSR set to: 0
 22657                           ;doprnt.c: 538: if(c != '%')
 22658                           
 22659                           ; BSR set to: 0
 22660  010010  0E25               	movlw	37
 22661  010012  0100               	movlb	0	; () banked
 22662  010014  19D0               	xorwf	printf@c& (0+255),w,b
 22663  010016  B4D8               	btfsc	status,2,c
 22664  010018  D006               	goto	l2162
 22665                           
 22666                           ; BSR set to: 0
 22667                           ;doprnt.c: 540: {
 22668                           ;doprnt.c: 541: (putch(c) );
 22669  01001A  0100               	movlb	0	; () banked
 22670  01001C  51D0               	movf	printf@c& (0+255),w,b
 22671  01001E  ECF9  F0BF         	call	_putch
 22672                           
 22673                           ;doprnt.c: 542: continue;
 22674  010022  EF37  F084         	goto	u13660
 22675  010026                     l2162:
 22676                           
 22677                           ;doprnt.c: 543: }
 22678                           ;doprnt.c: 548: flag = 0;
 22679  010026  0E00               	movlw	0
 22680  010028  0100               	movlb	0	; () banked
 22681  01002A  6FBF               	movwf	(printf@flag+1)& (0+255),b
 22682  01002C  0E00               	movlw	0
 22683  01002E  6FBE               	movwf	printf@flag& (0+255),b
 22684                           
 22685                           ;doprnt.c: 635: switch(c = *f++) {
 22686  010030  D015               	goto	l2163
 22687  010032                     
 22688                           ; BSR set to: 0
 22689                           ;doprnt.c: 663: flag |= 0x400;
 22690                           
 22691                           ; BSR set to: 0
 22692  010032  0100               	movlb	0	; () banked
 22693  010034  85BF               	bsf	(printf@flag+1)& (0+255),2,b
 22694                           
 22695                           ; BSR set to: 0
 22696                           ;doprnt.c: 698: case 'i':
 22697                           ;doprnt.c: 699: break;
 22698                           
 22699                           ; BSR set to: 0
 22700                           
 22701                           ;doprnt.c: 697: case 'd':
 22702                           
 22703                           ;doprnt.c: 664: break;
 22704  010036  D02F               	goto	l2167
 22705  010038                     
 22706                           ; BSR set to: 0
 22707                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22708                           
 22709                           ; BSR set to: 0
 22710  010038  C0BC  FFD9         	movff	printf@ap,fsr2l
 22711  01003C  C0BD  FFDA         	movff	printf@ap+1,fsr2h
 22712  010040  50DF               	movf	indf2,w,c
 22713  010042  0100               	movlb	0	; () banked
 22714  010044  6FD0               	movwf	printf@c& (0+255),b
 22715                           
 22716                           ; BSR set to: 0
 22717  010046  0E02               	movlw	2
 22718  010048  0100               	movlb	0	; () banked
 22719  01004A  27BC               	addwf	printf@ap& (0+255),f,b
 22720  01004C  0E00               	movlw	0
 22721  01004E  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
 22722  010050                     
 22723                           ; BSR set to: 0
 22724                           ;doprnt.c: 809: (putch(c) );
 22725                           
 22726                           ; BSR set to: 0
 22727  010050  0100               	movlb	0	; () banked
 22728  010052  51D0               	movf	printf@c& (0+255),w,b
 22729  010054  ECF9  F0BF         	call	_putch
 22730                           
 22731                           ;doprnt.c: 810: continue;
 22732  010058  EF37  F084         	goto	u13660
 22733  01005C                     l2163:
 22734  01005C  C0B0  FFF6         	movff	printf@f,tblptrl
 22735  010060  C0B1  FFF7         	movff	printf@f+1,tblptrh
 22736  010064  0100               	movlb	0	; () banked
 22737  010066  4BB0               	infsnz	printf@f& (0+255),f,b
 22738  010068  2BB1               	incf	(printf@f+1)& (0+255),f,b
 22739  01006A                     	if	0	;tblptru may be non-zero
 22740  01006A                     	endif
 22741  01006A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 22742  01006A  0E00               	movlw	low (__mediumconst shr (0+16))
 22743  01006C  6EF8               	movwf	tblptru,c
 22744  01006E                     	endif
 22745  01006E  0008               	tblrd		*
 22746  010070  CFF5 F0D0          	movff	tablat,printf@c
 22747  010074  0100               	movlb	0	; () banked
 22748  010076  51D0               	movf	printf@c& (0+255),w,b
 22749                           
 22750                           ; Switch size 1, requested type "space"
 22751                           ; Number of cases is 5, Range of values is 0 to 105
 22752                           ; switch strategies available:
 22753                           ; Name         Instructions Cycles
 22754                           ; simple_byte           16     9 (average)
 22755                           ;	Chosen strategy is simple_byte
 22756  010078  0A00               	xorlw	0	; case 0
 22757  01007A  B4D8               	btfsc	status,2,c
 22758  01007C  0012               	return	
 22759  01007E  0A63               	xorlw	99	; case 99
 22760  010080  B4D8               	btfsc	status,2,c
 22761  010082  D7DA               	goto	l2170
 22762  010084  0A07               	xorlw	7	; case 100
 22763  010086  B4D8               	btfsc	status,2,c
 22764  010088  D006               	goto	l2167
 22765  01008A  0A02               	xorlw	2	; case 102
 22766  01008C  B4D8               	btfsc	status,2,c
 22767  01008E  D7D1               	goto	l2166
 22768  010090  0A0F               	xorlw	15	; case 105
 22769  010092  A4D8               	btfss	status,2,c
 22770  010094  D7DD               	goto	l2171
 22771  010096                     l2167:
 22772                           
 22773                           ;doprnt.c: 825: if(flag & (0x700)) {
 22774                           
 22775                           ; BSR set to: 0
 22776  010096  0E07               	movlw	7
 22777  010098  0100               	movlb	0	; () banked
 22778  01009A  15BF               	andwf	(printf@flag+1)& (0+255),w,b
 22779  01009C  B4D8               	btfsc	status,2,c
 22780  01009E  D32E               	goto	l2172
 22781                           
 22782                           ; BSR set to: 0
 22783                           ;doprnt.c: 829: prec = 6;
 22784  0100A0  0E00               	movlw	0
 22785  0100A2  0100               	movlb	0	; () banked
 22786  0100A4  6FC1               	movwf	(printf@prec+1)& (0+255),b
 22787  0100A6  0E06               	movlw	6
 22788  0100A8  6FC0               	movwf	printf@prec& (0+255),b
 22789                           
 22790                           ; BSR set to: 0
 22791                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
 22792  0100AA  C0BC  FFD9         	movff	printf@ap,fsr2l
 22793  0100AE  C0BD  FFDA         	movff	printf@ap+1,fsr2h
 22794  0100B2  CFDE F0CC          	movff	postinc2,printf@fval
 22795  0100B6  CFDE F0CD          	movff	postinc2,printf@fval+1
 22796  0100BA  CFDE F0CE          	movff	postinc2,printf@fval+2
 22797  0100BE  CFDE F0CF          	movff	postinc2,printf@fval+3
 22798                           
 22799                           ; BSR set to: 0
 22800  0100C2  0E04               	movlw	4
 22801  0100C4  0100               	movlb	0	; () banked
 22802  0100C6  27BC               	addwf	printf@ap& (0+255),f,b
 22803  0100C8  0E00               	movlw	0
 22804  0100CA  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
 22805                           
 22806                           ; BSR set to: 0
 22807                           ;doprnt.c: 831: if(fval < 0.0) {
 22808  0100CC  0100               	movlb	0	; () banked
 22809  0100CE  AFCF               	btfss	(printf@fval+3)& (0+255),7,b
 22810  0100D0  D015               	goto	l2173
 22811                           
 22812                           ; BSR set to: 0
 22813                           ;doprnt.c: 832: fval = -fval;
 22814  0100D2  C0CC  F060         	movff	printf@fval,___flneg@f1
 22815  0100D6  C0CD  F061         	movff	printf@fval+1,___flneg@f1+1
 22816  0100DA  C0CE  F062         	movff	printf@fval+2,___flneg@f1+2
 22817  0100DE  C0CF  F063         	movff	printf@fval+3,___flneg@f1+3
 22818  0100E2  EC39  F0BD         	call	___flneg	;wreg free
 22819  0100E6  C060  F0CC         	movff	?___flneg,printf@fval
 22820  0100EA  C061  F0CD         	movff	?___flneg+1,printf@fval+1
 22821  0100EE  C062  F0CE         	movff	?___flneg+2,printf@fval+2
 22822  0100F2  C063  F0CF         	movff	?___flneg+3,printf@fval+3
 22823                           
 22824                           ;doprnt.c: 833: flag |= 0x03;
 22825  0100F6  0E03               	movlw	3
 22826  0100F8  0100               	movlb	0	; () banked
 22827  0100FA  13BE               	iorwf	printf@flag& (0+255),f,b
 22828  0100FC                     l2173:
 22829                           
 22830                           ; BSR set to: 0
 22831                           ;doprnt.c: 834: }
 22832                           ;doprnt.c: 835: exp = 0;
 22833                           
 22834                           ; BSR set to: 0
 22835  0100FC  0E00               	movlw	0
 22836  0100FE  0100               	movlb	0	; () banked
 22837  010100  6FC7               	movwf	(printf@exp+1)& (0+255),b
 22838  010102  0E00               	movlw	0
 22839  010104  6FC6               	movwf	printf@exp& (0+255),b
 22840                           
 22841                           ; BSR set to: 0
 22842                           ;doprnt.c: 836: if( fval!=0) {
 22843  010106  0100               	movlb	0	; () banked
 22844  010108  51CC               	movf	printf@fval& (0+255),w,b
 22845  01010A  0100               	movlb	0	; () banked
 22846  01010C  11CD               	iorwf	(printf@fval+1)& (0+255),w,b
 22847  01010E  0100               	movlb	0	; () banked
 22848  010110  11CE               	iorwf	(printf@fval+2)& (0+255),w,b
 22849  010112  0100               	movlb	0	; () banked
 22850  010114  11CF               	iorwf	(printf@fval+3)& (0+255),w,b
 22851  010116  B4D8               	btfsc	status,2,c
 22852  010118  D08E               	goto	l2178
 22853                           
 22854                           ; BSR set to: 0
 22855                           ;doprnt.c: 837: (void)(*(&exp) = (unsigned char)((*(unsigned long *)&fval >> 23) & 255) 
      +                          - 126);
 22856  01011A  0100               	movlb	0	; () banked
 22857  01011C  35CE               	rlcf	(printf@fval+2)& (0+255),w,b
 22858  01011E  35CF               	rlcf	(printf@fval+3)& (0+255),w,b
 22859  010120  0F82               	addlw	130
 22860  010122  0100               	movlb	0	; () banked
 22861  010124  6FC6               	movwf	printf@exp& (0+255),b
 22862  010126  0100               	movlb	0	; () banked
 22863  010128  6BC7               	clrf	(printf@exp+1)& (0+255),b
 22864  01012A  0EFF               	movlw	255
 22865  01012C  23C7               	addwfc	(printf@exp+1)& (0+255),f,b
 22866                           
 22867                           ; BSR set to: 0
 22868                           ;doprnt.c: 838: exp--;
 22869  01012E  0100               	movlb	0	; () banked
 22870  010130  07C6               	decf	printf@exp& (0+255),f,b
 22871  010132  A0D8               	btfss	status,0,c
 22872  010134  07C7               	decf	(printf@exp+1)& (0+255),f,b
 22873                           
 22874                           ; BSR set to: 0
 22875                           ;doprnt.c: 839: exp *= 3;
 22876  010136  C0C6  F060         	movff	printf@exp,___wmul@multiplier
 22877  01013A  C0C7  F061         	movff	printf@exp+1,___wmul@multiplier+1
 22878  01013E  0E00               	movlw	0
 22879  010140  0100               	movlb	0	; () banked
 22880  010142  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22881  010144  0E03               	movlw	3
 22882  010146  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22883  010148  EC55  F0BD         	call	___wmul	;wreg free
 22884  01014C  C060  F0C6         	movff	?___wmul,printf@exp
 22885  010150  C061  F0C7         	movff	?___wmul+1,printf@exp+1
 22886                           
 22887                           ;doprnt.c: 840: exp /= 10;
 22888  010154  C0C6  F066         	movff	printf@exp,___awdiv@dividend
 22889  010158  C0C7  F067         	movff	printf@exp+1,___awdiv@dividend+1
 22890  01015C  0E00               	movlw	0
 22891  01015E  0100               	movlb	0	; () banked
 22892  010160  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 22893  010162  0E0A               	movlw	10
 22894  010164  6F68               	movwf	___awdiv@divisor& (0+255),b
 22895  010166  ECFA  F0AC         	call	___awdiv	;wreg free
 22896  01016A  C066  F0C6         	movff	?___awdiv,printf@exp
 22897  01016E  C067  F0C7         	movff	?___awdiv+1,printf@exp+1
 22898                           
 22899                           ;doprnt.c: 841: if(exp < 0)
 22900  010172  0100               	movlb	0	; () banked
 22901  010174  AFC7               	btfss	(printf@exp+1)& (0+255),7,b
 22902  010176  D004               	goto	l2175
 22903                           
 22904                           ; BSR set to: 0
 22905                           ;doprnt.c: 842: exp--;
 22906  010178  0100               	movlb	0	; () banked
 22907  01017A  07C6               	decf	printf@exp& (0+255),f,b
 22908  01017C  A0D8               	btfss	status,0,c
 22909  01017E  07C7               	decf	(printf@exp+1)& (0+255),f,b
 22910  010180                     l2175:
 22911                           
 22912                           ; BSR set to: 0
 22913                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
 22914                           
 22915                           ; BSR set to: 0
 22916  010180  0100               	movlb	0	; () banked
 22917  010182  51C6               	movf	printf@exp& (0+255),w,b
 22918  010184  0800               	sublw	0
 22919  010186  EC49  F084         	call	_scale
 22920  01018A  C087  F0C8         	movff	?_scale,printf@tmpval
 22921  01018E  C088  F0C9         	movff	?_scale+1,printf@tmpval+1
 22922  010192  C089  F0CA         	movff	?_scale+2,printf@tmpval+2
 22923  010196  C08A  F0CB         	movff	?_scale+3,printf@tmpval+3
 22924                           
 22925                           ;doprnt.c: 847: tmpval.integ *= fval;
 22926  01019A  C0C8  F06E         	movff	printf@tmpval,___flmul@b
 22927  01019E  C0C9  F06F         	movff	printf@tmpval+1,___flmul@b+1
 22928  0101A2  C0CA  F070         	movff	printf@tmpval+2,___flmul@b+2
 22929  0101A6  C0CB  F071         	movff	printf@tmpval+3,___flmul@b+3
 22930  0101AA  C0CC  F072         	movff	printf@fval,___flmul@a
 22931  0101AE  C0CD  F073         	movff	printf@fval+1,___flmul@a+1
 22932  0101B2  C0CE  F074         	movff	printf@fval+2,___flmul@a+2
 22933  0101B6  C0CF  F075         	movff	printf@fval+3,___flmul@a+3
 22934  0101BA  EC3A  F089         	call	___flmul	;wreg free
 22935  0101BE  C06E  F0C8         	movff	?___flmul,printf@tmpval
 22936  0101C2  C06F  F0C9         	movff	?___flmul+1,printf@tmpval+1
 22937  0101C6  C070  F0CA         	movff	?___flmul+2,printf@tmpval+2
 22938  0101CA  C071  F0CB         	movff	?___flmul+3,printf@tmpval+3
 22939                           
 22940                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
 22941  0101CE  C0C8  F060         	movff	printf@tmpval,___flge@ff1
 22942  0101D2  C0C9  F061         	movff	printf@tmpval+1,___flge@ff1+1
 22943  0101D6  C0CA  F062         	movff	printf@tmpval+2,___flge@ff1+2
 22944  0101DA  C0CB  F063         	movff	printf@tmpval+3,___flge@ff1+3
 22945  0101DE  0E00               	movlw	0
 22946  0101E0  0100               	movlb	0	; () banked
 22947  0101E2  6F64               	movwf	___flge@ff2& (0+255),b
 22948  0101E4  0E00               	movlw	0
 22949  0101E6  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22950  0101E8  0E80               	movlw	128
 22951  0101EA  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22952  0101EC  0E3F               	movlw	63
 22953  0101EE  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22954  0101F0  ECDE  F09E         	call	___flge	;wreg free
 22955  0101F4  0100               	movlb	0	; () banked
 22956  0101F6  B0D8               	btfsc	status,0,c
 22957  0101F8  D005               	goto	l2176
 22958                           
 22959                           ; BSR set to: 0
 22960                           ;doprnt.c: 849: exp--;
 22961  0101FA  0100               	movlb	0	; () banked
 22962  0101FC  07C6               	decf	printf@exp& (0+255),f,b
 22963  0101FE  A0D8               	btfss	status,0,c
 22964  010200  07C7               	decf	(printf@exp+1)& (0+255),f,b
 22965  010202  D019               	goto	l2178
 22966  010204                     l2176:
 22967                           
 22968                           ; BSR set to: 0
 22969                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
 22970                           
 22971                           ; BSR set to: 0
 22972  010204  C0C8  F060         	movff	printf@tmpval,___flge@ff1
 22973  010208  C0C9  F061         	movff	printf@tmpval+1,___flge@ff1+1
 22974  01020C  C0CA  F062         	movff	printf@tmpval+2,___flge@ff1+2
 22975  010210  C0CB  F063         	movff	printf@tmpval+3,___flge@ff1+3
 22976  010214  0E00               	movlw	0
 22977  010216  0100               	movlb	0	; () banked
 22978  010218  6F64               	movwf	___flge@ff2& (0+255),b
 22979  01021A  0E00               	movlw	0
 22980  01021C  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22981  01021E  0E20               	movlw	32
 22982  010220  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22983  010222  0E41               	movlw	65
 22984  010224  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22985  010226  ECDE  F09E         	call	___flge	;wreg free
 22986  01022A  0100               	movlb	0	; () banked
 22987  01022C  A0D8               	btfss	status,0,c
 22988  01022E  D003               	goto	l2178
 22989                           
 22990                           ; BSR set to: 0
 22991                           ;doprnt.c: 851: exp++;
 22992  010230  0100               	movlb	0	; () banked
 22993  010232  4BC6               	infsnz	printf@exp& (0+255),f,b
 22994  010234  2BC7               	incf	(printf@exp+1)& (0+255),f,b
 22995  010236                     l2178:
 22996                           
 22997                           ; BSR set to: 0
 22998                           ;doprnt.c: 852: }
 22999                           ;doprnt.c: 1112: if(prec <= 12)
 23000                           
 23001                           ; BSR set to: 0
 23002                           
 23003                           ; BSR set to: 0
 23004                           
 23005                           ; BSR set to: 0
 23006  010236  0100               	movlb	0	; () banked
 23007  010238  BFC1               	btfsc	(printf@prec+1)& (0+255),7,b
 23008  01023A  D008               	goto	u13450
 23009  01023C  0100               	movlb	0	; () banked
 23010  01023E  51C1               	movf	(printf@prec+1)& (0+255),w,b
 23011  010240  E123               	bnz	l15581
 23012  010242  0E0D               	movlw	13
 23013  010244  0100               	movlb	0	; () banked
 23014  010246  5DC0               	subwf	printf@prec& (0+255),w,b
 23015  010248  B0D8               	btfsc	status,0,c
 23016  01024A  D01E               	goto	l2179
 23017  01024C                     u13450:
 23018                           
 23019                           ; BSR set to: 0
 23020                           ;doprnt.c: 1113: fval += fround(prec);
 23021  01024C  C0CC  F094         	movff	printf@fval,___fladd@b
 23022  010250  C0CD  F095         	movff	printf@fval+1,___fladd@b+1
 23023  010254  C0CE  F096         	movff	printf@fval+2,___fladd@b+2
 23024  010258  C0CF  F097         	movff	printf@fval+3,___fladd@b+3
 23025  01025C  0100               	movlb	0	; () banked
 23026  01025E  51C0               	movf	printf@prec& (0+255),w,b
 23027  010260  EC59  F091         	call	_fround
 23028  010264  C087  F098         	movff	?_fround,___fladd@a
 23029  010268  C088  F099         	movff	?_fround+1,___fladd@a+1
 23030  01026C  C089  F09A         	movff	?_fround+2,___fladd@a+2
 23031  010270  C08A  F09B         	movff	?_fround+3,___fladd@a+3
 23032  010274  ECE6  F086         	call	___fladd	;wreg free
 23033  010278  C094  F0CC         	movff	?___fladd,printf@fval
 23034  01027C  C095  F0CD         	movff	?___fladd+1,printf@fval+1
 23035  010280  C096  F0CE         	movff	?___fladd+2,printf@fval+2
 23036  010284  C097  F0CF         	movff	?___fladd+3,printf@fval+3
 23037  010288                     l2179:
 23038  010288                     l15581:
 23039                           
 23040                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
 23041  010288  0100               	movlb	0	; () banked
 23042  01028A  BFC7               	btfsc	(printf@exp+1)& (0+255),7,b
 23043  01028C  D008               	goto	u13460
 23044  01028E  0100               	movlb	0	; () banked
 23045  010290  51C7               	movf	(printf@exp+1)& (0+255),w,b
 23046  010292  E12E               	bnz	l15589
 23047  010294  0E0A               	movlw	10
 23048  010296  0100               	movlb	0	; () banked
 23049  010298  5DC6               	subwf	printf@exp& (0+255),w,b
 23050  01029A  B0D8               	btfsc	status,0,c
 23051  01029C  D029               	goto	u13490
 23052  01029E                     u13460:
 23053                           
 23054                           ; BSR set to: 0
 23055  01029E  0100               	movlb	0	; () banked
 23056  0102A0  51CC               	movf	printf@fval& (0+255),w,b
 23057  0102A2  0100               	movlb	0	; () banked
 23058  0102A4  11CD               	iorwf	(printf@fval+1)& (0+255),w,b
 23059  0102A6  0100               	movlb	0	; () banked
 23060  0102A8  11CE               	iorwf	(printf@fval+2)& (0+255),w,b
 23061  0102AA  0100               	movlb	0	; () banked
 23062  0102AC  11CF               	iorwf	(printf@fval+3)& (0+255),w,b
 23063  0102AE  B4D8               	btfsc	status,2,c
 23064  0102B0  D06D               	goto	l2180
 23065                           
 23066                           ; BSR set to: 0
 23067  0102B2  C0CC  F087         	movff	printf@fval,___fltol@f1
 23068  0102B6  C0CD  F088         	movff	printf@fval+1,___fltol@f1+1
 23069  0102BA  C0CE  F089         	movff	printf@fval+2,___fltol@f1+2
 23070  0102BE  C0CF  F08A         	movff	printf@fval+3,___fltol@f1+3
 23071  0102C2  EC55  F0A8         	call	___fltol	;wreg free
 23072  0102C6  0100               	movlb	0	; () banked
 23073  0102C8  5187               	movf	?___fltol& (0+255),w,b
 23074  0102CA  0100               	movlb	0	; () banked
 23075  0102CC  1188               	iorwf	(?___fltol+1)& (0+255),w,b
 23076  0102CE  0100               	movlb	0	; () banked
 23077  0102D0  1189               	iorwf	(?___fltol+2)& (0+255),w,b
 23078  0102D2  0100               	movlb	0	; () banked
 23079  0102D4  118A               	iorwf	(?___fltol+3)& (0+255),w,b
 23080  0102D6  A4D8               	btfss	status,2,c
 23081  0102D8  D059               	goto	l2180
 23082                           
 23083                           ; BSR set to: 0
 23084  0102DA  0100               	movlb	0	; () banked
 23085  0102DC  BFC7               	btfsc	(printf@exp+1)& (0+255),7,b
 23086  0102DE  D056               	goto	l2180
 23087  0102E0  0100               	movlb	0	; () banked
 23088  0102E2  51C7               	movf	(printf@exp+1)& (0+255),w,b
 23089  0102E4  E105               	bnz	l15589
 23090  0102E6  0E02               	movlw	2
 23091  0102E8  0100               	movlb	0	; () banked
 23092  0102EA  5DC6               	subwf	printf@exp& (0+255),w,b
 23093  0102EC  A0D8               	btfss	status,0,c
 23094  0102EE  D04E               	goto	l2180
 23095  0102F0                     u13490:
 23096  0102F0                     l15589:
 23097                           
 23098                           ; BSR set to: 0
 23099                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
 23100  0102F0  C0C8  F060         	movff	printf@tmpval,___flge@ff1
 23101  0102F4  C0C9  F061         	movff	printf@tmpval+1,___flge@ff1+1
 23102  0102F8  C0CA  F062         	movff	printf@tmpval+2,___flge@ff1+2
 23103  0102FC  C0CB  F063         	movff	printf@tmpval+3,___flge@ff1+3
 23104  010300  0E5F               	movlw	95
 23105  010302  0100               	movlb	0	; () banked
 23106  010304  6F64               	movwf	___flge@ff2& (0+255),b
 23107  010306  0E70               	movlw	112
 23108  010308  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 23109  01030A  0E89               	movlw	137
 23110  01030C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 23111  01030E  0E40               	movlw	64
 23112  010310  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 23113  010312  ECDE  F09E         	call	___flge	;wreg free
 23114  010316  0100               	movlb	0	; () banked
 23115  010318  B0D8               	btfsc	status,0,c
 23116  01031A  D003               	goto	l2183
 23117                           
 23118                           ; BSR set to: 0
 23119                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
 23120  01031C  0100               	movlb	0	; () banked
 23121  01031E  0EF7               	movlw	247
 23122  010320  D002               	goto	L17
 23123  010322                     l2183:
 23124                           
 23125                           ; BSR set to: 0
 23126                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
 23127                           
 23128                           ; BSR set to: 0
 23129  010322  0100               	movlb	0	; () banked
 23130  010324  0EF8               	movlw	248
 23131  010326                     L17:
 23132  010326  27C6               	addwf	printf@exp& (0+255),f,b
 23133  010328  0EFF               	movlw	255
 23134  01032A  23C7               	addwfc	(printf@exp+1)& (0+255),f,b
 23135                           
 23136                           ; BSR set to: 0
 23137                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
 23138                           
 23139                           ; BSR set to: 0
 23140  01032C  0100               	movlb	0	; () banked
 23141  01032E  51C6               	movf	printf@exp& (0+255),w,b
 23142  010330  EC49  F084         	call	_scale
 23143  010334  C087  F0C8         	movff	?_scale,printf@tmpval
 23144  010338  C088  F0C9         	movff	?_scale+1,printf@tmpval+1
 23145  01033C  C089  F0CA         	movff	?_scale+2,printf@tmpval+2
 23146  010340  C08A  F0CB         	movff	?_scale+3,printf@tmpval+3
 23147  010344  C0CC  F060         	movff	printf@fval,__div_to_l_@f1
 23148  010348  C0CD  F061         	movff	printf@fval+1,__div_to_l_@f1+1
 23149  01034C  C0CE  F062         	movff	printf@fval+2,__div_to_l_@f1+2
 23150  010350  C0CF  F063         	movff	printf@fval+3,__div_to_l_@f1+3
 23151  010354  C0C8  F064         	movff	printf@tmpval,__div_to_l_@f2
 23152  010358  C0C9  F065         	movff	printf@tmpval+1,__div_to_l_@f2+1
 23153  01035C  C0CA  F066         	movff	printf@tmpval+2,__div_to_l_@f2+2
 23154  010360  C0CB  F067         	movff	printf@tmpval+3,__div_to_l_@f2+3
 23155  010364  EC30  F0A1         	call	__div_to_l_	;wreg free
 23156  010368  C060  F0C2         	movff	?__div_to_l_,printf@val
 23157  01036C  C061  F0C3         	movff	?__div_to_l_+1,printf@val+1
 23158  010370  C062  F0C4         	movff	?__div_to_l_+2,printf@val+2
 23159  010374  C063  F0C5         	movff	?__div_to_l_+3,printf@val+3
 23160                           
 23161                           ;doprnt.c: 1129: fval = 0.0;
 23162  010378  0E00               	movlw	0
 23163  01037A  0100               	movlb	0	; () banked
 23164  01037C  6FCC               	movwf	printf@fval& (0+255),b
 23165  01037E  0E00               	movlw	0
 23166  010380  6FCD               	movwf	(printf@fval+1)& (0+255),b
 23167  010382  0E00               	movlw	0
 23168  010384  6FCE               	movwf	(printf@fval+2)& (0+255),b
 23169  010386  0E00               	movlw	0
 23170  010388  6FCF               	movwf	(printf@fval+3)& (0+255),b
 23171                           
 23172                           ;doprnt.c: 1130: } else {
 23173  01038A  D03C               	goto	l2189
 23174  01038C                     l2180:
 23175                           
 23176                           ; BSR set to: 0
 23177                           ;doprnt.c: 1131: val = (unsigned long)fval;
 23178                           
 23179                           ; BSR set to: 0
 23180  01038C  C0CC  F087         	movff	printf@fval,___fltol@f1
 23181  010390  C0CD  F088         	movff	printf@fval+1,___fltol@f1+1
 23182  010394  C0CE  F089         	movff	printf@fval+2,___fltol@f1+2
 23183  010398  C0CF  F08A         	movff	printf@fval+3,___fltol@f1+3
 23184  01039C  EC55  F0A8         	call	___fltol	;wreg free
 23185  0103A0  C087  F0C2         	movff	?___fltol,printf@val
 23186  0103A4  C088  F0C3         	movff	?___fltol+1,printf@val+1
 23187  0103A8  C089  F0C4         	movff	?___fltol+2,printf@val+2
 23188  0103AC  C08A  F0C5         	movff	?___fltol+3,printf@val+3
 23189                           
 23190                           ;doprnt.c: 1132: fval -= (double)val;
 23191  0103B0  C0CC  F0A8         	movff	printf@fval,___flsub@b
 23192  0103B4  C0CD  F0A9         	movff	printf@fval+1,___flsub@b+1
 23193  0103B8  C0CE  F0AA         	movff	printf@fval+2,___flsub@b+2
 23194  0103BC  C0CF  F0AB         	movff	printf@fval+3,___flsub@b+3
 23195  0103C0  C0C2  F060         	movff	printf@val,___xxtofl@val
 23196  0103C4  C0C3  F061         	movff	printf@val+1,___xxtofl@val+1
 23197  0103C8  C0C4  F062         	movff	printf@val+2,___xxtofl@val+2
 23198  0103CC  C0C5  F063         	movff	printf@val+3,___xxtofl@val+3
 23199  0103D0  0E00               	movlw	0
 23200  0103D2  ECB0  F09A         	call	___xxtofl
 23201  0103D6  C060  F0AC         	movff	?___xxtofl,___flsub@a
 23202  0103DA  C061  F0AD         	movff	?___xxtofl+1,___flsub@a+1
 23203  0103DE  C062  F0AE         	movff	?___xxtofl+2,___flsub@a+2
 23204  0103E2  C063  F0AF         	movff	?___xxtofl+3,___flsub@a+3
 23205  0103E6  EC73  F0BB         	call	___flsub	;wreg free
 23206  0103EA  C0A8  F0CC         	movff	?___flsub,printf@fval
 23207  0103EE  C0A9  F0CD         	movff	?___flsub+1,printf@fval+1
 23208  0103F2  C0AA  F0CE         	movff	?___flsub+2,printf@fval+2
 23209  0103F6  C0AB  F0CF         	movff	?___flsub+3,printf@fval+3
 23210                           
 23211                           ;doprnt.c: 1133: exp = 0;
 23212  0103FA  0E00               	movlw	0
 23213  0103FC  0100               	movlb	0	; () banked
 23214  0103FE  6FC7               	movwf	(printf@exp+1)& (0+255),b
 23215  010400  0E00               	movlw	0
 23216  010402  6FC6               	movwf	printf@exp& (0+255),b
 23217  010404                     l2189:
 23218                           
 23219                           ; BSR set to: 0
 23220                           ;doprnt.c: 1134: }
 23221                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
 23222                           
 23223                           ; BSR set to: 0
 23224  010404  0E01               	movlw	1
 23225  010406  0100               	movlb	0	; () banked
 23226  010408  6FD0               	movwf	printf@c& (0+255),b
 23227  01040A                     l15609:
 23228                           
 23229                           ; BSR set to: 0
 23230  01040A  0E0A               	movlw	10
 23231  01040C  0100               	movlb	0	; () banked
 23232  01040E  19D0               	xorwf	printf@c& (0+255),w,b
 23233  010410  B4D8               	btfsc	status,2,c
 23234  010412  D021               	goto	u13530
 23235                           
 23236                           ; BSR set to: 0
 23237                           ;doprnt.c: 1137: if(val < dpowers[c])
 23238                           
 23239                           ; BSR set to: 0
 23240                           
 23241                           ; BSR set to: 0
 23242  010414  0100               	movlb	0	; () banked
 23243  010416  51D0               	movf	printf@c& (0+255),w,b
 23244  010418  0D04               	mullw	4
 23245  01041A  0E77               	movlw	low _dpowers
 23246  01041C  24F3               	addwf	prodl,w,c
 23247  01041E  6EF6               	movwf	tblptrl,c
 23248  010420  0EFC               	movlw	high _dpowers
 23249  010422  20F4               	addwfc	prodh,w,c
 23250  010424  6EF7               	movwf	tblptrh,c
 23251  010426                     	if	1	;There are 3 active tblptr bytes
 23252  010426  6AF8               	clrf	tblptru,c
 23253  010428  0E00               	movlw	low (__mediumconst shr (0+16))
 23254  01042A  22F8               	addwfc	tblptru,f,c
 23255  01042C                     	endif
 23256  01042C  0009               	tblrd		*+
 23257  01042E  50F5               	movf	tablat,w,c
 23258  010430  0100               	movlb	0	; () banked
 23259  010432  5DC2               	subwf	printf@val& (0+255),w,b
 23260  010434  0009               	tblrd		*+
 23261  010436  50F5               	movf	tablat,w,c
 23262  010438  0100               	movlb	0	; () banked
 23263  01043A  59C3               	subwfb	(printf@val+1)& (0+255),w,b
 23264  01043C  0009               	tblrd		*+
 23265  01043E  50F5               	movf	tablat,w,c
 23266  010440  0100               	movlb	0	; () banked
 23267  010442  59C4               	subwfb	(printf@val+2)& (0+255),w,b
 23268  010444  0009               	tblrd		*+
 23269  010446  50F5               	movf	tablat,w,c
 23270  010448  0100               	movlb	0	; () banked
 23271  01044A  59C5               	subwfb	(printf@val+3)& (0+255),w,b
 23272  01044C  A0D8               	btfss	status,0,c
 23273  01044E  D003               	goto	u13530
 23274                           
 23275                           ; BSR set to: 0
 23276                           
 23277                           ; BSR set to: 0
 23278                           
 23279                           ; BSR set to: 0
 23280                           ;doprnt.c: 1138: break;
 23281  010450  0100               	movlb	0	; () banked
 23282  010452  2BD0               	incf	printf@c& (0+255),f,b
 23283  010454  D7DA               	goto	l15609
 23284  010456                     u13530:
 23285                           
 23286                           ; BSR set to: 0
 23287                           ;doprnt.c: 1175: {
 23288                           ;doprnt.c: 1188: if(flag & 0x03)
 23289                           
 23290                           ; BSR set to: 0
 23291  010456  0E03               	movlw	3
 23292  010458  0100               	movlb	0	; () banked
 23293  01045A  15BE               	andwf	printf@flag& (0+255),w,b
 23294  01045C  0100               	movlb	0	; () banked
 23295  01045E  6FB6               	movwf	??_printf& (0+255),b
 23296  010460  0E00               	movlw	0
 23297  010462  0100               	movlb	0	; () banked
 23298  010464  15BF               	andwf	(printf@flag+1)& (0+255),w,b
 23299  010466  0100               	movlb	0	; () banked
 23300  010468  6FB7               	movwf	(??_printf+1)& (0+255),b
 23301  01046A  0100               	movlb	0	; () banked
 23302  01046C  51B6               	movf	??_printf& (0+255),w,b
 23303  01046E  0100               	movlb	0	; () banked
 23304  010470  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 23305  010472  B4D8               	btfsc	status,2,c
 23306  010474  D04E               	goto	l2194
 23307                           
 23308                           ; BSR set to: 0
 23309                           ;doprnt.c: 1190: (putch('-') );
 23310  010476  0E2D               	movlw	45
 23311  010478  ECF9  F0BF         	call	_putch
 23312                           
 23313                           ;doprnt.c: 1195: }
 23314                           ;doprnt.c: 1196: while(c--) {
 23315  01047C  D04A               	goto	l2194
 23316  01047E                     
 23317                           ;doprnt.c: 1200: {
 23318                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
 23319  01047E  C0C2  F060         	movff	printf@val,___lldiv@dividend
 23320  010482  C0C3  F061         	movff	printf@val+1,___lldiv@dividend+1
 23321  010486  C0C4  F062         	movff	printf@val+2,___lldiv@dividend+2
 23322  01048A  C0C5  F063         	movff	printf@val+3,___lldiv@dividend+3
 23323  01048E  0100               	movlb	0	; () banked
 23324  010490  51D0               	movf	printf@c& (0+255),w,b
 23325  010492  0D04               	mullw	4
 23326  010494  0E77               	movlw	low _dpowers
 23327  010496  24F3               	addwf	prodl,w,c
 23328  010498  6EF6               	movwf	tblptrl,c
 23329  01049A  0EFC               	movlw	high _dpowers
 23330  01049C  20F4               	addwfc	prodh,w,c
 23331  01049E  6EF7               	movwf	tblptrh,c
 23332  0104A0                     	if	1	;There are 3 active tblptr bytes
 23333  0104A0  6AF8               	clrf	tblptru,c
 23334  0104A2  0E00               	movlw	low (__mediumconst shr (0+16))
 23335  0104A4  22F8               	addwfc	tblptru,f,c
 23336  0104A6                     	endif
 23337  0104A6  0009               	tblrd		*+
 23338  0104A8  CFF5 F064          	movff	tablat,___lldiv@divisor
 23339  0104AC  0009               	tblrd		*+
 23340  0104AE  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 23341  0104B2  0009               	tblrd		*+
 23342  0104B4  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 23343  0104B8  000A               	tblrd		*-
 23344  0104BA  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 23345  0104BE  EC59  F0AD         	call	___lldiv	;wreg free
 23346  0104C2  C060  F0C8         	movff	?___lldiv,printf@tmpval
 23347  0104C6  C061  F0C9         	movff	?___lldiv+1,printf@tmpval+1
 23348  0104CA  C062  F0CA         	movff	?___lldiv+2,printf@tmpval+2
 23349  0104CE  C063  F0CB         	movff	?___lldiv+3,printf@tmpval+3
 23350                           
 23351                           ;doprnt.c: 1202: tmpval.vd %= 10;
 23352  0104D2  C0C8  F06D         	movff	printf@tmpval,___llmod@dividend
 23353  0104D6  C0C9  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 23354  0104DA  C0CA  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 23355  0104DE  C0CB  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 23356  0104E2  0E0A               	movlw	10
 23357  0104E4  0100               	movlb	0	; () banked
 23358  0104E6  6F71               	movwf	___llmod@divisor& (0+255),b
 23359  0104E8  0E00               	movlw	0
 23360  0104EA  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 23361  0104EC  0E00               	movlw	0
 23362  0104EE  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 23363  0104F0  0E00               	movlw	0
 23364  0104F2  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 23365  0104F4  EC07  F0B3         	call	___llmod	;wreg free
 23366  0104F8  C06D  F0C8         	movff	?___llmod,printf@tmpval
 23367  0104FC  C06E  F0C9         	movff	?___llmod+1,printf@tmpval+1
 23368  010500  C06F  F0CA         	movff	?___llmod+2,printf@tmpval+2
 23369  010504  C070  F0CB         	movff	?___llmod+3,printf@tmpval+3
 23370                           
 23371                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
 23372  010508  0100               	movlb	0	; () banked
 23373  01050A  51C8               	movf	printf@tmpval& (0+255),w,b
 23374  01050C  0F30               	addlw	48
 23375  01050E  ECF9  F0BF         	call	_putch
 23376  010512                     l2194:
 23377  010512  0100               	movlb	0	; () banked
 23378  010514  07D0               	decf	printf@c& (0+255),f,b
 23379  010516  0100               	movlb	0	; () banked
 23380  010518  29D0               	incf	printf@c& (0+255),w,b
 23381  01051A  B4D8               	btfsc	status,2,c
 23382  01051C  D008               	goto	l2197
 23383  01051E  D7AF               	goto	l2195
 23384  010520                     l15633:
 23385                           
 23386                           ; BSR set to: 0
 23387                           ;doprnt.c: 1208: (putch('0') );
 23388  010520  0E30               	movlw	48
 23389  010522  ECF9  F0BF         	call	_putch
 23390                           
 23391                           ;doprnt.c: 1209: exp--;
 23392  010526  0100               	movlb	0	; () banked
 23393  010528  07C6               	decf	printf@exp& (0+255),f,b
 23394  01052A  A0D8               	btfss	status,0,c
 23395  01052C  07C7               	decf	(printf@exp+1)& (0+255),f,b
 23396  01052E                     l2197:
 23397                           
 23398                           ; BSR set to: 0
 23399                           
 23400                           ; BSR set to: 0
 23401  01052E  0100               	movlb	0	; () banked
 23402  010530  BFC7               	btfsc	(printf@exp+1)& (0+255),7,b
 23403  010532  D007               	goto	u13560
 23404  010534  0100               	movlb	0	; () banked
 23405  010536  51C7               	movf	(printf@exp+1)& (0+255),w,b
 23406  010538  E1F3               	bnz	l15633
 23407  01053A  0100               	movlb	0	; () banked
 23408  01053C  05C6               	decf	printf@exp& (0+255),w,b
 23409  01053E  B0D8               	btfsc	status,0,c
 23410  010540  D7EF               	goto	l2198
 23411  010542                     u13560:
 23412                           
 23413                           ; BSR set to: 0
 23414                           ;doprnt.c: 1210: }
 23415                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
 23416                           
 23417                           ; BSR set to: 0
 23418  010542  0100               	movlb	0	; () banked
 23419  010544  BFC1               	btfsc	(printf@prec+1)& (0+255),7,b
 23420  010546  D00C               	goto	l2200
 23421  010548  0100               	movlb	0	; () banked
 23422  01054A  51C1               	movf	(printf@prec+1)& (0+255),w,b
 23423  01054C  E105               	bnz	u13570
 23424  01054E  0E09               	movlw	9
 23425  010550  0100               	movlb	0	; () banked
 23426  010552  5DC0               	subwf	printf@prec& (0+255),w,b
 23427  010554  A0D8               	btfss	status,0,c
 23428  010556  D004               	goto	l2200
 23429  010558                     u13570:
 23430                           
 23431                           ; BSR set to: 0
 23432                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
 23433  010558  0E08               	movlw	8
 23434  01055A  0100               	movlb	0	; () banked
 23435  01055C  6FD0               	movwf	printf@c& (0+255),b
 23436  01055E  D002               	goto	l2201
 23437  010560                     l2200:
 23438                           
 23439                           ; BSR set to: 0
 23440                           ;doprnt.c: 1213: else
 23441                           ;doprnt.c: 1214: c = prec;
 23442  010560  C0C0  F0D0         	movff	printf@prec,printf@c
 23443  010564                     l2201:
 23444                           
 23445                           ; BSR set to: 0
 23446                           ;doprnt.c: 1215: prec -= c;
 23447                           
 23448                           ; BSR set to: 0
 23449  010564  0100               	movlb	0	; () banked
 23450  010566  51D0               	movf	printf@c& (0+255),w,b
 23451  010568  0100               	movlb	0	; () banked
 23452  01056A  5FC0               	subwf	printf@prec& (0+255),f,b
 23453  01056C  0E00               	movlw	0
 23454  01056E  0100               	movlb	0	; () banked
 23455  010570  BFD0               	btfsc	printf@c& (0+255),7,b
 23456  010572  0EFF               	movlw	255
 23457  010574  0100               	movlb	0	; () banked
 23458  010576  5BC1               	subwfb	(printf@prec+1)& (0+255),f,b
 23459                           
 23460                           ; BSR set to: 0
 23461                           ;doprnt.c: 1219: if(c)
 23462  010578  0100               	movlb	0	; () banked
 23463  01057A  51D0               	movf	printf@c& (0+255),w,b
 23464  01057C  0100               	movlb	0	; () banked
 23465  01057E  B4D8               	btfsc	status,2,c
 23466  010580  D003               	goto	l2202
 23467                           
 23468                           ; BSR set to: 0
 23469                           ;doprnt.c: 1221: (putch('.') );
 23470  010582  0E2E               	movlw	46
 23471  010584  ECF9  F0BF         	call	_putch
 23472  010588                     l2202:
 23473                           
 23474                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 23475  010588  0100               	movlb	0	; () banked
 23476  01058A  51D0               	movf	printf@c& (0+255),w,b
 23477  01058C  EC49  F084         	call	_scale
 23478  010590  C087  F0B8         	movff	?_scale,_printf$15267
 23479  010594  C088  F0B9         	movff	?_scale+1,_printf$15267+1
 23480  010598  C089  F0BA         	movff	?_scale+2,_printf$15267+2
 23481  01059C  C08A  F0BB         	movff	?_scale+3,_printf$15267+3
 23482                           
 23483                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
 23484  0105A0  C0CC  F072         	movff	printf@fval,___flmul@a
 23485  0105A4  C0CD  F073         	movff	printf@fval+1,___flmul@a+1
 23486  0105A8  C0CE  F074         	movff	printf@fval+2,___flmul@a+2
 23487  0105AC  C0CF  F075         	movff	printf@fval+3,___flmul@a+3
 23488  0105B0  C0B8  F06E         	movff	_printf$15267,___flmul@b
 23489  0105B4  C0B9  F06F         	movff	_printf$15267+1,___flmul@b+1
 23490  0105B8  C0BA  F070         	movff	_printf$15267+2,___flmul@b+2
 23491  0105BC  C0BB  F071         	movff	_printf$15267+3,___flmul@b+3
 23492  0105C0  EC3A  F089         	call	___flmul	;wreg free
 23493  0105C4  C06E  F087         	movff	?___flmul,___fltol@f1
 23494  0105C8  C06F  F088         	movff	?___flmul+1,___fltol@f1+1
 23495  0105CC  C070  F089         	movff	?___flmul+2,___fltol@f1+2
 23496  0105D0  C071  F08A         	movff	?___flmul+3,___fltol@f1+3
 23497  0105D4  EC55  F0A8         	call	___fltol	;wreg free
 23498  0105D8  C087  F0C2         	movff	?___fltol,printf@val
 23499  0105DC  C088  F0C3         	movff	?___fltol+1,printf@val+1
 23500  0105E0  C089  F0C4         	movff	?___fltol+2,printf@val+2
 23501  0105E4  C08A  F0C5         	movff	?___fltol+3,printf@val+3
 23502                           
 23503                           ;doprnt.c: 1228: while(c--) {
 23504  0105E8  D074               	goto	l2203
 23505  0105EA                     
 23506                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
 23507  0105EA  C0C2  F060         	movff	printf@val,___lldiv@dividend
 23508  0105EE  C0C3  F061         	movff	printf@val+1,___lldiv@dividend+1
 23509  0105F2  C0C4  F062         	movff	printf@val+2,___lldiv@dividend+2
 23510  0105F6  C0C5  F063         	movff	printf@val+3,___lldiv@dividend+3
 23511  0105FA  0100               	movlb	0	; () banked
 23512  0105FC  51D0               	movf	printf@c& (0+255),w,b
 23513  0105FE  0D04               	mullw	4
 23514  010600  0E77               	movlw	low _dpowers
 23515  010602  24F3               	addwf	prodl,w,c
 23516  010604  6EF6               	movwf	tblptrl,c
 23517  010606  0EFC               	movlw	high _dpowers
 23518  010608  20F4               	addwfc	prodh,w,c
 23519  01060A  6EF7               	movwf	tblptrh,c
 23520  01060C                     	if	1	;There are 3 active tblptr bytes
 23521  01060C  6AF8               	clrf	tblptru,c
 23522  01060E  0E00               	movlw	low (__mediumconst shr (0+16))
 23523  010610  22F8               	addwfc	tblptru,f,c
 23524  010612                     	endif
 23525  010612  0009               	tblrd		*+
 23526  010614  CFF5 F064          	movff	tablat,___lldiv@divisor
 23527  010618  0009               	tblrd		*+
 23528  01061A  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 23529  01061E  0009               	tblrd		*+
 23530  010620  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 23531  010624  000A               	tblrd		*-
 23532  010626  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 23533  01062A  EC59  F0AD         	call	___lldiv	;wreg free
 23534  01062E  C060  F0C8         	movff	?___lldiv,printf@tmpval
 23535  010632  C061  F0C9         	movff	?___lldiv+1,printf@tmpval+1
 23536  010636  C062  F0CA         	movff	?___lldiv+2,printf@tmpval+2
 23537  01063A  C063  F0CB         	movff	?___lldiv+3,printf@tmpval+3
 23538                           
 23539                           ;doprnt.c: 1230: tmpval.vd %= 10;
 23540  01063E  C0C8  F06D         	movff	printf@tmpval,___llmod@dividend
 23541  010642  C0C9  F06E         	movff	printf@tmpval+1,___llmod@dividend+1
 23542  010646  C0CA  F06F         	movff	printf@tmpval+2,___llmod@dividend+2
 23543  01064A  C0CB  F070         	movff	printf@tmpval+3,___llmod@dividend+3
 23544  01064E  0E0A               	movlw	10
 23545  010650  0100               	movlb	0	; () banked
 23546  010652  6F71               	movwf	___llmod@divisor& (0+255),b
 23547  010654  0E00               	movlw	0
 23548  010656  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 23549  010658  0E00               	movlw	0
 23550  01065A  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 23551  01065C  0E00               	movlw	0
 23552  01065E  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 23553  010660  EC07  F0B3         	call	___llmod	;wreg free
 23554  010664  C06D  F0C8         	movff	?___llmod,printf@tmpval
 23555  010668  C06E  F0C9         	movff	?___llmod+1,printf@tmpval+1
 23556  01066C  C06F  F0CA         	movff	?___llmod+2,printf@tmpval+2
 23557  010670  C070  F0CB         	movff	?___llmod+3,printf@tmpval+3
 23558                           
 23559                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
 23560  010674  0100               	movlb	0	; () banked
 23561  010676  51C8               	movf	printf@tmpval& (0+255),w,b
 23562  010678  0F30               	addlw	48
 23563  01067A  ECF9  F0BF         	call	_putch
 23564                           
 23565                           ;doprnt.c: 1232: val %= dpowers[c];
 23566  01067E  C0C2  F06D         	movff	printf@val,___llmod@dividend
 23567  010682  C0C3  F06E         	movff	printf@val+1,___llmod@dividend+1
 23568  010686  C0C4  F06F         	movff	printf@val+2,___llmod@dividend+2
 23569  01068A  C0C5  F070         	movff	printf@val+3,___llmod@dividend+3
 23570  01068E  0100               	movlb	0	; () banked
 23571  010690  51D0               	movf	printf@c& (0+255),w,b
 23572  010692  0D04               	mullw	4
 23573  010694  0E77               	movlw	low _dpowers
 23574  010696  24F3               	addwf	prodl,w,c
 23575  010698  6EF6               	movwf	tblptrl,c
 23576  01069A  0EFC               	movlw	high _dpowers
 23577  01069C  20F4               	addwfc	prodh,w,c
 23578  01069E  6EF7               	movwf	tblptrh,c
 23579  0106A0                     	if	1	;There are 3 active tblptr bytes
 23580  0106A0  6AF8               	clrf	tblptru,c
 23581  0106A2  0E00               	movlw	low (__mediumconst shr (0+16))
 23582  0106A4  22F8               	addwfc	tblptru,f,c
 23583  0106A6                     	endif
 23584  0106A6  0009               	tblrd		*+
 23585  0106A8  CFF5 F071          	movff	tablat,___llmod@divisor
 23586  0106AC  0009               	tblrd		*+
 23587  0106AE  CFF5 F072          	movff	tablat,___llmod@divisor+1
 23588  0106B2  0009               	tblrd		*+
 23589  0106B4  CFF5 F073          	movff	tablat,___llmod@divisor+2
 23590  0106B8  000A               	tblrd		*-
 23591  0106BA  CFF5 F074          	movff	tablat,___llmod@divisor+3
 23592  0106BE  EC07  F0B3         	call	___llmod	;wreg free
 23593  0106C2  C06D  F0C2         	movff	?___llmod,printf@val
 23594  0106C6  C06E  F0C3         	movff	?___llmod+1,printf@val+1
 23595  0106CA  C06F  F0C4         	movff	?___llmod+2,printf@val+2
 23596  0106CE  C070  F0C5         	movff	?___llmod+3,printf@val+3
 23597  0106D2                     l2203:
 23598  0106D2  0100               	movlb	0	; () banked
 23599  0106D4  07D0               	decf	printf@c& (0+255),f,b
 23600  0106D6  0100               	movlb	0	; () banked
 23601  0106D8  29D0               	incf	printf@c& (0+255),w,b
 23602  0106DA  B4D8               	btfsc	status,2,c
 23603  0106DC  D008               	goto	l2206
 23604  0106DE  D785               	goto	l2204
 23605  0106E0                     
 23606                           ; BSR set to: 0
 23607                           ;doprnt.c: 1236: (putch('0') );
 23608                           
 23609                           ; BSR set to: 0
 23610  0106E0  0E30               	movlw	48
 23611  0106E2  ECF9  F0BF         	call	_putch
 23612                           
 23613                           ;doprnt.c: 1237: prec--;
 23614  0106E6  0100               	movlb	0	; () banked
 23615  0106E8  07C0               	decf	printf@prec& (0+255),f,b
 23616  0106EA  A0D8               	btfss	status,0,c
 23617  0106EC  07C1               	decf	(printf@prec+1)& (0+255),f,b
 23618  0106EE                     l2206:
 23619                           
 23620                           ; BSR set to: 0
 23621                           
 23622                           ; BSR set to: 0
 23623  0106EE  0100               	movlb	0	; () banked
 23624  0106F0  51C0               	movf	printf@prec& (0+255),w,b
 23625  0106F2  0100               	movlb	0	; () banked
 23626  0106F4  11C1               	iorwf	(printf@prec+1)& (0+255),w,b
 23627  0106F6  B4D8               	btfsc	status,2,c
 23628  0106F8  D0BA               	goto	u13660
 23629  0106FA  D7F2               	goto	l2207
 23630  0106FC                     l2172:
 23631                           
 23632                           ; BSR set to: 0
 23633                           ;doprnt.c: 1246: }
 23634                           ;doprnt.c: 1253: {
 23635                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 23636                           
 23637                           ; BSR set to: 0
 23638  0106FC  C0BC  FFD9         	movff	printf@ap,fsr2l
 23639  010700  C0BD  FFDA         	movff	printf@ap+1,fsr2h
 23640  010704  CFDE F0C2          	movff	postinc2,printf@val
 23641  010708  CFDD F0C3          	movff	postdec2,printf@val+1
 23642  01070C  0100               	movlb	0	; () banked
 23643  01070E  0E00               	movlw	0
 23644  010710  BFC3               	btfsc	(printf@val+1)& (0+255),7,b
 23645  010712  0EFF               	movlw	-1
 23646  010714  6FC4               	movwf	(printf@val+2)& (0+255),b
 23647  010716  6FC5               	movwf	(printf@val+3)& (0+255),b
 23648                           
 23649                           ; BSR set to: 0
 23650  010718  0E02               	movlw	2
 23651  01071A  0100               	movlb	0	; () banked
 23652  01071C  27BC               	addwf	printf@ap& (0+255),f,b
 23653  01071E  0E00               	movlw	0
 23654  010720  23BD               	addwfc	(printf@ap+1)& (0+255),f,b
 23655                           
 23656                           ; BSR set to: 0
 23657                           ;doprnt.c: 1261: if((long)val < 0) {
 23658  010722  0100               	movlb	0	; () banked
 23659  010724  AFC5               	btfss	(printf@val+3)& (0+255),7,b
 23660  010726  D00C               	goto	l2209
 23661                           
 23662                           ; BSR set to: 0
 23663                           ;doprnt.c: 1262: flag |= 0x03;
 23664  010728  0E03               	movlw	3
 23665  01072A  0100               	movlb	0	; () banked
 23666  01072C  13BE               	iorwf	printf@flag& (0+255),f,b
 23667                           
 23668                           ; BSR set to: 0
 23669                           ;doprnt.c: 1263: val = -val;
 23670  01072E  0100               	movlb	0	; () banked
 23671  010730  1FC5               	comf	(printf@val+3)& (0+255),f,b
 23672  010732  1FC4               	comf	(printf@val+2)& (0+255),f,b
 23673  010734  1FC3               	comf	(printf@val+1)& (0+255),f,b
 23674  010736  6DC2               	negf	printf@val& (0+255),b
 23675  010738  0E00               	movlw	0
 23676  01073A  23C3               	addwfc	(printf@val+1)& (0+255),f,b
 23677  01073C  23C4               	addwfc	(printf@val+2)& (0+255),f,b
 23678  01073E  23C5               	addwfc	(printf@val+3)& (0+255),f,b
 23679  010740                     l2209:
 23680                           
 23681                           ; BSR set to: 0
 23682                           ;doprnt.c: 1264: }
 23683                           ;doprnt.c: 1266: }
 23684                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 23685                           
 23686                           ; BSR set to: 0
 23687  010740  0E01               	movlw	1
 23688  010742  0100               	movlb	0	; () banked
 23689  010744  6FD0               	movwf	printf@c& (0+255),b
 23690  010746                     l15681:
 23691                           
 23692                           ; BSR set to: 0
 23693  010746  0E0A               	movlw	10
 23694  010748  0100               	movlb	0	; () banked
 23695  01074A  19D0               	xorwf	printf@c& (0+255),w,b
 23696  01074C  B4D8               	btfsc	status,2,c
 23697  01074E  D021               	goto	u13640
 23698                           
 23699                           ; BSR set to: 0
 23700                           ;doprnt.c: 1306: if(val < dpowers[c])
 23701                           
 23702                           ; BSR set to: 0
 23703                           
 23704                           ; BSR set to: 0
 23705  010750  0100               	movlb	0	; () banked
 23706  010752  51D0               	movf	printf@c& (0+255),w,b
 23707  010754  0D04               	mullw	4
 23708  010756  0E77               	movlw	low _dpowers
 23709  010758  24F3               	addwf	prodl,w,c
 23710  01075A  6EF6               	movwf	tblptrl,c
 23711  01075C  0EFC               	movlw	high _dpowers
 23712  01075E  20F4               	addwfc	prodh,w,c
 23713  010760  6EF7               	movwf	tblptrh,c
 23714  010762                     	if	1	;There are 3 active tblptr bytes
 23715  010762  6AF8               	clrf	tblptru,c
 23716  010764  0E00               	movlw	low (__mediumconst shr (0+16))
 23717  010766  22F8               	addwfc	tblptru,f,c
 23718  010768                     	endif
 23719  010768  0009               	tblrd		*+
 23720  01076A  50F5               	movf	tablat,w,c
 23721  01076C  0100               	movlb	0	; () banked
 23722  01076E  5DC2               	subwf	printf@val& (0+255),w,b
 23723  010770  0009               	tblrd		*+
 23724  010772  50F5               	movf	tablat,w,c
 23725  010774  0100               	movlb	0	; () banked
 23726  010776  59C3               	subwfb	(printf@val+1)& (0+255),w,b
 23727  010778  0009               	tblrd		*+
 23728  01077A  50F5               	movf	tablat,w,c
 23729  01077C  0100               	movlb	0	; () banked
 23730  01077E  59C4               	subwfb	(printf@val+2)& (0+255),w,b
 23731  010780  0009               	tblrd		*+
 23732  010782  50F5               	movf	tablat,w,c
 23733  010784  0100               	movlb	0	; () banked
 23734  010786  59C5               	subwfb	(printf@val+3)& (0+255),w,b
 23735  010788  A0D8               	btfss	status,0,c
 23736  01078A  D003               	goto	u13640
 23737                           
 23738                           ; BSR set to: 0
 23739                           
 23740                           ; BSR set to: 0
 23741                           
 23742                           ; BSR set to: 0
 23743                           ;doprnt.c: 1307: break;
 23744  01078C  0100               	movlb	0	; () banked
 23745  01078E  2BD0               	incf	printf@c& (0+255),f,b
 23746  010790  D7DA               	goto	l15681
 23747  010792                     u13640:
 23748                           
 23749                           ; BSR set to: 0
 23750                           ;doprnt.c: 1422: {
 23751                           ;doprnt.c: 1438: if(flag & 0x03)
 23752                           
 23753                           ; BSR set to: 0
 23754  010792  0E03               	movlw	3
 23755  010794  0100               	movlb	0	; () banked
 23756  010796  15BE               	andwf	printf@flag& (0+255),w,b
 23757  010798  0100               	movlb	0	; () banked
 23758  01079A  6FB6               	movwf	??_printf& (0+255),b
 23759  01079C  0E00               	movlw	0
 23760  01079E  0100               	movlb	0	; () banked
 23761  0107A0  15BF               	andwf	(printf@flag+1)& (0+255),w,b
 23762  0107A2  0100               	movlb	0	; () banked
 23763  0107A4  6FB7               	movwf	(??_printf+1)& (0+255),b
 23764  0107A6  0100               	movlb	0	; () banked
 23765  0107A8  51B6               	movf	??_printf& (0+255),w,b
 23766  0107AA  0100               	movlb	0	; () banked
 23767  0107AC  11B7               	iorwf	(??_printf+1)& (0+255),w,b
 23768  0107AE  B4D8               	btfsc	status,2,c
 23769  0107B0  D003               	goto	l2213
 23770                           
 23771                           ; BSR set to: 0
 23772                           ;doprnt.c: 1439: (putch('-') );
 23773  0107B2  0E2D               	movlw	45
 23774  0107B4  ECF9  F0BF         	call	_putch
 23775  0107B8                     l2213:
 23776                           
 23777                           ;doprnt.c: 1469: }
 23778                           ;doprnt.c: 1472: prec = c;
 23779  0107B8  0100               	movlb	0	; () banked
 23780  0107BA  51D0               	movf	printf@c& (0+255),w,b
 23781  0107BC  0100               	movlb	0	; () banked
 23782  0107BE  6FC0               	movwf	printf@prec& (0+255),b
 23783  0107C0  6BC1               	clrf	(printf@prec+1)& (0+255),b
 23784  0107C2  BFC0               	btfsc	printf@prec& (0+255),7,b
 23785  0107C4  07C1               	decf	(printf@prec+1)& (0+255),f,b
 23786                           
 23787                           ;doprnt.c: 1474: while(prec--) {
 23788  0107C6  D048               	goto	l2214
 23789  0107C8                     l15699:
 23790                           
 23791                           ; BSR set to: 0
 23792                           ;doprnt.c: 1478: {
 23793                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 23794  0107C8  C0C0  F0B6         	movff	printf@prec,??_printf
 23795  0107CC  C0C1  F0B7         	movff	printf@prec+1,??_printf+1
 23796  0107D0  0100               	movlb	0	; () banked
 23797  0107D2  90D8               	bcf	status,0,c
 23798  0107D4  37B6               	rlcf	??_printf& (0+255),f,b
 23799  0107D6  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 23800  0107D8  0100               	movlb	0	; () banked
 23801  0107DA  90D8               	bcf	status,0,c
 23802  0107DC  37B6               	rlcf	??_printf& (0+255),f,b
 23803  0107DE  37B7               	rlcf	(??_printf+1)& (0+255),f,b
 23804  0107E0  0E77               	movlw	low _dpowers
 23805  0107E2  0100               	movlb	0	; () banked
 23806  0107E4  25B6               	addwf	??_printf& (0+255),w,b
 23807  0107E6  6EF6               	movwf	tblptrl,c
 23808  0107E8  0EFC               	movlw	high _dpowers
 23809  0107EA  21B7               	addwfc	(??_printf+1)& (0+255),w,b
 23810  0107EC  6EF7               	movwf	tblptrh,c
 23811  0107EE                     	if	1	;There are 3 active tblptr bytes
 23812  0107EE  6AF8               	clrf	tblptru,c
 23813  0107F0  0E00               	movlw	low (__mediumconst shr (0+16))
 23814  0107F2  22F8               	addwfc	tblptru,f,c
 23815  0107F4                     	endif
 23816  0107F4  0009               	tblrd		*+
 23817  0107F6  CFF5 F064          	movff	tablat,___lldiv@divisor
 23818  0107FA  0009               	tblrd		*+
 23819  0107FC  CFF5 F065          	movff	tablat,___lldiv@divisor+1
 23820  010800  0009               	tblrd		*+
 23821  010802  CFF5 F066          	movff	tablat,___lldiv@divisor+2
 23822  010806  000A               	tblrd		*-
 23823  010808  CFF5 F067          	movff	tablat,___lldiv@divisor+3
 23824  01080C  C0C2  F060         	movff	printf@val,___lldiv@dividend
 23825  010810  C0C3  F061         	movff	printf@val+1,___lldiv@dividend+1
 23826  010814  C0C4  F062         	movff	printf@val+2,___lldiv@dividend+2
 23827  010818  C0C5  F063         	movff	printf@val+3,___lldiv@dividend+3
 23828  01081C  EC59  F0AD         	call	___lldiv	;wreg free
 23829  010820  C060  F06D         	movff	?___lldiv,___llmod@dividend
 23830  010824  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
 23831  010828  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
 23832  01082C  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
 23833  010830  0E0A               	movlw	10
 23834  010832  0100               	movlb	0	; () banked
 23835  010834  6F71               	movwf	___llmod@divisor& (0+255),b
 23836  010836  0E00               	movlw	0
 23837  010838  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
 23838  01083A  0E00               	movlw	0
 23839  01083C  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
 23840  01083E  0E00               	movlw	0
 23841  010840  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
 23842  010842  EC07  F0B3         	call	___llmod	;wreg free
 23843  010846  0100               	movlb	0	; () banked
 23844  010848  516D               	movf	?___llmod& (0+255),w,b
 23845  01084A  0F30               	addlw	48
 23846  01084C  0100               	movlb	0	; () banked
 23847  01084E  6FD0               	movwf	printf@c& (0+255),b
 23848                           
 23849                           ; BSR set to: 0
 23850                           ;doprnt.c: 1523: }
 23851                           ;doprnt.c: 1524: (putch(c) );
 23852  010850  0100               	movlb	0	; () banked
 23853  010852  51D0               	movf	printf@c& (0+255),w,b
 23854  010854  ECF9  F0BF         	call	_putch
 23855  010858                     l2214:
 23856  010858  0100               	movlb	0	; () banked
 23857  01085A  07C0               	decf	printf@prec& (0+255),f,b
 23858  01085C  A0D8               	btfss	status,0,c
 23859  01085E  07C1               	decf	(printf@prec+1)& (0+255),f,b
 23860  010860  0100               	movlb	0	; () banked
 23861  010862  29C0               	incf	printf@prec& (0+255),w,b
 23862  010864  E1B1               	bnz	l15699
 23863  010866  0100               	movlb	0	; () banked
 23864  010868  29C1               	incf	(printf@prec+1)& (0+255),w,b
 23865  01086A  A4D8               	btfss	status,2,c
 23866  01086C  D7AD               	goto	l2215
 23867  01086E                     u13660:
 23868                           
 23869                           ; BSR set to: 0
 23870                           
 23871                           ; BSR set to: 0
 23872  01086E  C0B0  FFF6         	movff	printf@f,tblptrl
 23873  010872  C0B1  FFF7         	movff	printf@f+1,tblptrh
 23874  010876  0100               	movlb	0	; () banked
 23875  010878  4BB0               	infsnz	printf@f& (0+255),f,b
 23876  01087A  2BB1               	incf	(printf@f+1)& (0+255),f,b
 23877  01087C                     	if	0	;tblptru may be non-zero
 23878  01087C                     	endif
 23879  01087C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 23880  01087C  0E00               	movlw	low (__mediumconst shr (0+16))
 23881  01087E  6EF8               	movwf	tblptru,c
 23882  010880                     	endif
 23883  010880  0008               	tblrd		*
 23884  010882  CFF5 F0D0          	movff	tablat,printf@c
 23885  010886  0100               	movlb	0	; () banked
 23886  010888  51D0               	movf	printf@c& (0+255),w,b
 23887  01088A  B4D8               	btfsc	status,2,c
 23888  01088C  0012               	return	
 23889  01088E  EF08  F080         	goto	l2161
 23890  010892                     __end_of_printf:
 23891                           	opt stack 0
 23892                           tosu	equ	0xFFF
 23893                           tosh	equ	0xFFE
 23894                           tosl	equ	0xFFD
 23895                           pclath	equ	0xFFA
 23896                           tblptru	equ	0xFF8
 23897                           tblptrh	equ	0xFF7
 23898                           tblptrl	equ	0xFF6
 23899                           tablat	equ	0xFF5
 23900                           prodh	equ	0xFF4
 23901                           prodl	equ	0xFF3
 23902                           intcon	equ	0xFF2
 23903                           indf0	equ	0xFEF
 23904                           postinc0	equ	0xFEE
 23905                           fsr0h	equ	0xFEA
 23906                           fsr0l	equ	0xFE9
 23907                           wreg	equ	0xFE8
 23908                           indf1	equ	0xFE7
 23909                           postdec1	equ	0xFE5
 23910                           fsr1h	equ	0xFE2
 23911                           fsr1l	equ	0xFE1
 23912                           indf2	equ	0xFDF
 23913                           postinc2	equ	0xFDE
 23914                           postdec2	equ	0xFDD
 23915                           plusw2	equ	0xFDB
 23916                           fsr2h	equ	0xFDA
 23917                           fsr2l	equ	0xFD9
 23918                           status	equ	0xFD8
 23919                           
 23920 ;; *************** function _scale *****************
 23921 ;; Defined at:
 23922 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 23923 ;; Parameters:    Size  Location     Type
 23924 ;;  scl             1    wreg     char 
 23925 ;; Auto vars:     Size  Location     Type
 23926 ;;  scl             1   47[BANK0 ] char 
 23927 ;; Return value:  Size  Location     Type
 23928 ;;                  4   39[BANK0 ] char 
 23929 ;; Registers used:
 23930 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23931 ;; Tracked objects:
 23932 ;;		On entry : 0/0
 23933 ;;		On exit  : 0/0
 23934 ;;		Unchanged: 0/0
 23935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23936 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23937 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23939 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23940 ;;Total ram usage:        9 bytes
 23941 ;; Hardware stack levels used:    1
 23942 ;; Hardware stack levels required when called:    8
 23943 ;; This function calls:
 23944 ;;		___awdiv
 23945 ;;		___awmod
 23946 ;;		___flmul
 23947 ;; This function is called by:
 23948 ;;		_printf
 23949 ;; This function uses a non-reentrant model
 23950 ;;
 23951                           
 23952                           	psect	text119
 23953  010892                     __ptext119:
 23954                           	opt stack 0
 23955  010892                     _scale:
 23956                           	opt stack 21
 23957                           
 23958                           ; BSR set to: 0
 23959                           ;incstack = 0
 23960                           ;scale@scl stored from wreg
 23961  010892  0100               	movlb	0	; () banked
 23962  010894  6F8F               	movwf	scale@scl& (0+255),b
 23963                           
 23964                           ;doprnt.c: 428: if(scl < 0) {
 23965  010896  0100               	movlb	0	; () banked
 23966  010898  AF8F               	btfss	scale@scl& (0+255),7,b
 23967  01089A  D14D               	goto	l2150
 23968                           
 23969                           ; BSR set to: 0
 23970                           ;doprnt.c: 429: scl = -scl;
 23971  01089C  0100               	movlb	0	; () banked
 23972  01089E  6D8F               	negf	scale@scl& (0+255),b
 23973                           
 23974                           ;doprnt.c: 430: if(scl>=110)
 23975  0108A0  0100               	movlb	0	; () banked
 23976  0108A2  518F               	movf	scale@scl& (0+255),w,b
 23977  0108A4  0A80               	xorlw	128
 23978  0108A6  0F12               	addlw	-238
 23979  0108A8  A0D8               	btfss	status,0,c
 23980  0108AA  D0BB               	goto	l2151
 23981                           
 23982                           ; BSR set to: 0
 23983                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 23984  0108AC  0E00               	movlw	0
 23985  0108AE  0100               	movlb	0	; () banked
 23986  0108B0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 23987  0108B2  0E0A               	movlw	10
 23988  0108B4  6F68               	movwf	___awdiv@divisor& (0+255),b
 23989  0108B6  0E00               	movlw	0
 23990  0108B8  0100               	movlb	0	; () banked
 23991  0108BA  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 23992  0108BC  0E64               	movlw	100
 23993  0108BE  6F62               	movwf	___awmod@divisor& (0+255),b
 23994  0108C0  0100               	movlb	0	; () banked
 23995  0108C2  518F               	movf	scale@scl& (0+255),w,b
 23996  0108C4  0100               	movlb	0	; () banked
 23997  0108C6  6F60               	movwf	___awmod@dividend& (0+255),b
 23998  0108C8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 23999  0108CA  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 24000  0108CC  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 24001  0108CE  EC68  F0B2         	call	___awmod	;wreg free
 24002  0108D2  C060  F066         	movff	?___awmod,___awdiv@dividend
 24003  0108D6  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 24004  0108DA  ECFA  F0AC         	call	___awdiv	;wreg free
 24005  0108DE  0100               	movlb	0	; () banked
 24006  0108E0  90D8               	bcf	status,0,c
 24007  0108E2  3766               	rlcf	?___awdiv& (0+255),f,b
 24008  0108E4  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24009  0108E6  0100               	movlb	0	; () banked
 24010  0108E8  90D8               	bcf	status,0,c
 24011  0108EA  3766               	rlcf	?___awdiv& (0+255),f,b
 24012  0108EC  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24013  0108EE  0E24               	movlw	36
 24014  0108F0  0100               	movlb	0	; () banked
 24015  0108F2  2766               	addwf	?___awdiv& (0+255),f,b
 24016  0108F4  0E00               	movlw	0
 24017  0108F6  0100               	movlb	0	; () banked
 24018  0108F8  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24019  0108FA  0E43               	movlw	low __npowers_
 24020  0108FC  0100               	movlb	0	; () banked
 24021  0108FE  2566               	addwf	?___awdiv& (0+255),w,b
 24022  010900  6EF6               	movwf	tblptrl,c
 24023  010902  0EFC               	movlw	high __npowers_
 24024  010904  0100               	movlb	0	; () banked
 24025  010906  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24026  010908  6EF7               	movwf	tblptrh,c
 24027  01090A                     	if	1	;There are 3 active tblptr bytes
 24028  01090A  6AF8               	clrf	tblptru,c
 24029  01090C  0E00               	movlw	low (__mediumconst shr (0+16))
 24030  01090E  22F8               	addwfc	tblptru,f,c
 24031  010910                     	endif
 24032  010910  0009               	tblrd		*+
 24033  010912  CFF5 F072          	movff	tablat,___flmul@a
 24034  010916  0009               	tblrd		*+
 24035  010918  CFF5 F073          	movff	tablat,___flmul@a+1
 24036  01091C  0009               	tblrd		*+
 24037  01091E  CFF5 F074          	movff	tablat,___flmul@a+2
 24038  010922  000A               	tblrd		*-
 24039  010924  CFF5 F075          	movff	tablat,___flmul@a+3
 24040  010928  0E00               	movlw	0
 24041  01092A  0100               	movlb	0	; () banked
 24042  01092C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 24043  01092E  0E64               	movlw	100
 24044  010930  6F68               	movwf	___awdiv@divisor& (0+255),b
 24045  010932  0100               	movlb	0	; () banked
 24046  010934  518F               	movf	scale@scl& (0+255),w,b
 24047  010936  0100               	movlb	0	; () banked
 24048  010938  6F66               	movwf	___awdiv@dividend& (0+255),b
 24049  01093A  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 24050  01093C  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 24051  01093E  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 24052  010940  ECFA  F0AC         	call	___awdiv	;wreg free
 24053  010944  0100               	movlb	0	; () banked
 24054  010946  90D8               	bcf	status,0,c
 24055  010948  3766               	rlcf	?___awdiv& (0+255),f,b
 24056  01094A  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24057  01094C  0100               	movlb	0	; () banked
 24058  01094E  90D8               	bcf	status,0,c
 24059  010950  3766               	rlcf	?___awdiv& (0+255),f,b
 24060  010952  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24061  010954  0E48               	movlw	72
 24062  010956  0100               	movlb	0	; () banked
 24063  010958  2766               	addwf	?___awdiv& (0+255),f,b
 24064  01095A  0E00               	movlw	0
 24065  01095C  0100               	movlb	0	; () banked
 24066  01095E  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24067  010960  0E43               	movlw	low __npowers_
 24068  010962  0100               	movlb	0	; () banked
 24069  010964  2566               	addwf	?___awdiv& (0+255),w,b
 24070  010966  6EF6               	movwf	tblptrl,c
 24071  010968  0EFC               	movlw	high __npowers_
 24072  01096A  0100               	movlb	0	; () banked
 24073  01096C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24074  01096E  6EF7               	movwf	tblptrh,c
 24075  010970                     	if	1	;There are 3 active tblptr bytes
 24076  010970  6AF8               	clrf	tblptru,c
 24077  010972  0E00               	movlw	low (__mediumconst shr (0+16))
 24078  010974  22F8               	addwfc	tblptru,f,c
 24079  010976                     	endif
 24080  010976  0009               	tblrd		*+
 24081  010978  CFF5 F06E          	movff	tablat,___flmul@b
 24082  01097C  0009               	tblrd		*+
 24083  01097E  CFF5 F06F          	movff	tablat,___flmul@b+1
 24084  010982  0009               	tblrd		*+
 24085  010984  CFF5 F070          	movff	tablat,___flmul@b+2
 24086  010988  000A               	tblrd		*-
 24087  01098A  CFF5 F071          	movff	tablat,___flmul@b+3
 24088  01098E  EC3A  F089         	call	___flmul	;wreg free
 24089  010992  C06E  F08B         	movff	?___flmul,_scale$15266
 24090  010996  C06F  F08C         	movff	?___flmul+1,_scale$15266+1
 24091  01099A  C070  F08D         	movff	?___flmul+2,_scale$15266+2
 24092  01099E  C071  F08E         	movff	?___flmul+3,_scale$15266+3
 24093                           
 24094                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
 24095  0109A2  C08B  F06E         	movff	_scale$15266,___flmul@b
 24096  0109A6  C08C  F06F         	movff	_scale$15266+1,___flmul@b+1
 24097  0109AA  C08D  F070         	movff	_scale$15266+2,___flmul@b+2
 24098  0109AE  C08E  F071         	movff	_scale$15266+3,___flmul@b+3
 24099  0109B2  0E00               	movlw	0
 24100  0109B4  0100               	movlb	0	; () banked
 24101  0109B6  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 24102  0109B8  0E0A               	movlw	10
 24103  0109BA  6F62               	movwf	___awmod@divisor& (0+255),b
 24104  0109BC  0100               	movlb	0	; () banked
 24105  0109BE  518F               	movf	scale@scl& (0+255),w,b
 24106  0109C0  0100               	movlb	0	; () banked
 24107  0109C2  6F60               	movwf	___awmod@dividend& (0+255),b
 24108  0109C4  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 24109  0109C6  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 24110  0109C8  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 24111  0109CA  EC68  F0B2         	call	___awmod	;wreg free
 24112  0109CE  0100               	movlb	0	; () banked
 24113  0109D0  90D8               	bcf	status,0,c
 24114  0109D2  3760               	rlcf	?___awmod& (0+255),f,b
 24115  0109D4  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24116  0109D6  0100               	movlb	0	; () banked
 24117  0109D8  90D8               	bcf	status,0,c
 24118  0109DA  3760               	rlcf	?___awmod& (0+255),f,b
 24119  0109DC  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24120  0109DE  0E43               	movlw	low __npowers_
 24121  0109E0  0100               	movlb	0	; () banked
 24122  0109E2  2560               	addwf	?___awmod& (0+255),w,b
 24123  0109E4  6EF6               	movwf	tblptrl,c
 24124  0109E6  0EFC               	movlw	high __npowers_
 24125  0109E8  0100               	movlb	0	; () banked
 24126  0109EA  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 24127  0109EC  6EF7               	movwf	tblptrh,c
 24128  0109EE                     	if	1	;There are 3 active tblptr bytes
 24129  0109EE  6AF8               	clrf	tblptru,c
 24130  0109F0  0E00               	movlw	low (__mediumconst shr (0+16))
 24131  0109F2  22F8               	addwfc	tblptru,f,c
 24132  0109F4                     	endif
 24133  0109F4  0009               	tblrd		*+
 24134  0109F6  CFF5 F072          	movff	tablat,___flmul@a
 24135  0109FA  0009               	tblrd		*+
 24136  0109FC  CFF5 F073          	movff	tablat,___flmul@a+1
 24137  010A00  0009               	tblrd		*+
 24138  010A02  CFF5 F074          	movff	tablat,___flmul@a+2
 24139  010A06  000A               	tblrd		*-
 24140  010A08  CFF5 F075          	movff	tablat,___flmul@a+3
 24141  010A0C  EC3A  F089         	call	___flmul	;wreg free
 24142  010A10  C06E  F087         	movff	?___flmul,?_scale
 24143  010A14  C06F  F088         	movff	?___flmul+1,?_scale+1
 24144  010A18  C070  F089         	movff	?___flmul+2,?_scale+2
 24145  010A1C  C071  F08A         	movff	?___flmul+3,?_scale+3
 24146  010A20  0012               	return	
 24147  010A22                     l2151:
 24148                           
 24149                           ;doprnt.c: 432: else if(scl > 10)
 24150  010A22  0100               	movlb	0	; () banked
 24151  010A24  518F               	movf	scale@scl& (0+255),w,b
 24152  010A26  0A80               	xorlw	128
 24153  010A28  0F75               	addlw	-139
 24154  010A2A  A0D8               	btfss	status,0,c
 24155  010A2C  D06B               	goto	l2154
 24156                           
 24157                           ; BSR set to: 0
 24158                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
 24159  010A2E  0E00               	movlw	0
 24160  010A30  0100               	movlb	0	; () banked
 24161  010A32  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 24162  010A34  0E0A               	movlw	10
 24163  010A36  6F68               	movwf	___awdiv@divisor& (0+255),b
 24164  010A38  0100               	movlb	0	; () banked
 24165  010A3A  518F               	movf	scale@scl& (0+255),w,b
 24166  010A3C  0100               	movlb	0	; () banked
 24167  010A3E  6F66               	movwf	___awdiv@dividend& (0+255),b
 24168  010A40  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 24169  010A42  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 24170  010A44  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 24171  010A46  ECFA  F0AC         	call	___awdiv	;wreg free
 24172  010A4A  0100               	movlb	0	; () banked
 24173  010A4C  90D8               	bcf	status,0,c
 24174  010A4E  3766               	rlcf	?___awdiv& (0+255),f,b
 24175  010A50  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24176  010A52  0100               	movlb	0	; () banked
 24177  010A54  90D8               	bcf	status,0,c
 24178  010A56  3766               	rlcf	?___awdiv& (0+255),f,b
 24179  010A58  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24180  010A5A  0E24               	movlw	36
 24181  010A5C  0100               	movlb	0	; () banked
 24182  010A5E  2766               	addwf	?___awdiv& (0+255),f,b
 24183  010A60  0E00               	movlw	0
 24184  010A62  0100               	movlb	0	; () banked
 24185  010A64  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24186  010A66  0E43               	movlw	low __npowers_
 24187  010A68  0100               	movlb	0	; () banked
 24188  010A6A  2566               	addwf	?___awdiv& (0+255),w,b
 24189  010A6C  6EF6               	movwf	tblptrl,c
 24190  010A6E  0EFC               	movlw	high __npowers_
 24191  010A70  0100               	movlb	0	; () banked
 24192  010A72  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24193  010A74  6EF7               	movwf	tblptrh,c
 24194  010A76                     	if	1	;There are 3 active tblptr bytes
 24195  010A76  6AF8               	clrf	tblptru,c
 24196  010A78  0E00               	movlw	low (__mediumconst shr (0+16))
 24197  010A7A  22F8               	addwfc	tblptru,f,c
 24198  010A7C                     	endif
 24199  010A7C  0009               	tblrd		*+
 24200  010A7E  CFF5 F06E          	movff	tablat,___flmul@b
 24201  010A82  0009               	tblrd		*+
 24202  010A84  CFF5 F06F          	movff	tablat,___flmul@b+1
 24203  010A88  0009               	tblrd		*+
 24204  010A8A  CFF5 F070          	movff	tablat,___flmul@b+2
 24205  010A8E  000A               	tblrd		*-
 24206  010A90  CFF5 F071          	movff	tablat,___flmul@b+3
 24207  010A94  0E00               	movlw	0
 24208  010A96  0100               	movlb	0	; () banked
 24209  010A98  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 24210  010A9A  0E0A               	movlw	10
 24211  010A9C  6F62               	movwf	___awmod@divisor& (0+255),b
 24212  010A9E  0100               	movlb	0	; () banked
 24213  010AA0  518F               	movf	scale@scl& (0+255),w,b
 24214  010AA2  0100               	movlb	0	; () banked
 24215  010AA4  6F60               	movwf	___awmod@dividend& (0+255),b
 24216  010AA6  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 24217  010AA8  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 24218  010AAA  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 24219  010AAC  EC68  F0B2         	call	___awmod	;wreg free
 24220  010AB0  0100               	movlb	0	; () banked
 24221  010AB2  90D8               	bcf	status,0,c
 24222  010AB4  3760               	rlcf	?___awmod& (0+255),f,b
 24223  010AB6  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24224  010AB8  0100               	movlb	0	; () banked
 24225  010ABA  90D8               	bcf	status,0,c
 24226  010ABC  3760               	rlcf	?___awmod& (0+255),f,b
 24227  010ABE  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24228  010AC0  0E43               	movlw	low __npowers_
 24229  010AC2  0100               	movlb	0	; () banked
 24230  010AC4  2560               	addwf	?___awmod& (0+255),w,b
 24231  010AC6  6EF6               	movwf	tblptrl,c
 24232  010AC8  0EFC               	movlw	high __npowers_
 24233  010ACA  0100               	movlb	0	; () banked
 24234  010ACC  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 24235  010ACE  6EF7               	movwf	tblptrh,c
 24236  010AD0                     	if	1	;There are 3 active tblptr bytes
 24237  010AD0  6AF8               	clrf	tblptru,c
 24238  010AD2  0E00               	movlw	low (__mediumconst shr (0+16))
 24239  010AD4  22F8               	addwfc	tblptru,f,c
 24240  010AD6                     	endif
 24241  010AD6  0009               	tblrd		*+
 24242  010AD8  CFF5 F072          	movff	tablat,___flmul@a
 24243  010ADC  0009               	tblrd		*+
 24244  010ADE  CFF5 F073          	movff	tablat,___flmul@a+1
 24245  010AE2  0009               	tblrd		*+
 24246  010AE4  CFF5 F074          	movff	tablat,___flmul@a+2
 24247  010AE8  000A               	tblrd		*-
 24248  010AEA  CFF5 F075          	movff	tablat,___flmul@a+3
 24249  010AEE  EC3A  F089         	call	___flmul	;wreg free
 24250  010AF2  C06E  F087         	movff	?___flmul,?_scale
 24251  010AF6  C06F  F088         	movff	?___flmul+1,?_scale+1
 24252  010AFA  C070  F089         	movff	?___flmul+2,?_scale+2
 24253  010AFE  C071  F08A         	movff	?___flmul+3,?_scale+3
 24254  010B02  0012               	return	
 24255  010B04                     l2154:
 24256                           
 24257                           ;doprnt.c: 434: return _npowers_[scl];
 24258  010B04  0100               	movlb	0	; () banked
 24259  010B06  518F               	movf	scale@scl& (0+255),w,b
 24260  010B08  0D04               	mullw	4
 24261  010B0A  0E43               	movlw	low __npowers_
 24262  010B0C  24F3               	addwf	prodl,w,c
 24263  010B0E  6EF6               	movwf	tblptrl,c
 24264  010B10  0EFC               	movlw	high __npowers_
 24265  010B12  20F4               	addwfc	prodh,w,c
 24266  010B14  6EF7               	movwf	tblptrh,c
 24267  010B16                     	if	1	;There are 3 active tblptr bytes
 24268  010B16  6AF8               	clrf	tblptru,c
 24269  010B18  0E00               	movlw	low (__mediumconst shr (0+16))
 24270  010B1A  22F8               	addwfc	tblptru,f,c
 24271  010B1C                     	endif
 24272  010B1C  0009               	tblrd		*+
 24273  010B1E  CFF5 F087          	movff	tablat,?_scale
 24274  010B22  0009               	tblrd		*+
 24275  010B24  CFF5 F088          	movff	tablat,?_scale+1
 24276  010B28  0009               	tblrd		*+
 24277  010B2A  CFF5 F089          	movff	tablat,?_scale+2
 24278  010B2E  000A               	tblrd		*-
 24279  010B30  CFF5 F08A          	movff	tablat,?_scale+3
 24280                           
 24281                           ; BSR set to: 0
 24282  010B34  0012               	return	
 24283  010B36                     l2150:
 24284                           
 24285                           ; BSR set to: 0
 24286                           ;doprnt.c: 435: }
 24287                           ;doprnt.c: 436: if(scl>=110)
 24288                           
 24289                           ; BSR set to: 0
 24290  010B36  0100               	movlb	0	; () banked
 24291  010B38  518F               	movf	scale@scl& (0+255),w,b
 24292  010B3A  0A80               	xorlw	128
 24293  010B3C  0F12               	addlw	-238
 24294  010B3E  A0D8               	btfss	status,0,c
 24295  010B40  D0BB               	goto	l2155
 24296                           
 24297                           ; BSR set to: 0
 24298                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 24299  010B42  0E00               	movlw	0
 24300  010B44  0100               	movlb	0	; () banked
 24301  010B46  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 24302  010B48  0E0A               	movlw	10
 24303  010B4A  6F68               	movwf	___awdiv@divisor& (0+255),b
 24304  010B4C  0E00               	movlw	0
 24305  010B4E  0100               	movlb	0	; () banked
 24306  010B50  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 24307  010B52  0E64               	movlw	100
 24308  010B54  6F62               	movwf	___awmod@divisor& (0+255),b
 24309  010B56  0100               	movlb	0	; () banked
 24310  010B58  518F               	movf	scale@scl& (0+255),w,b
 24311  010B5A  0100               	movlb	0	; () banked
 24312  010B5C  6F60               	movwf	___awmod@dividend& (0+255),b
 24313  010B5E  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 24314  010B60  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 24315  010B62  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 24316  010B64  EC68  F0B2         	call	___awmod	;wreg free
 24317  010B68  C060  F066         	movff	?___awmod,___awdiv@dividend
 24318  010B6C  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 24319  010B70  ECFA  F0AC         	call	___awdiv	;wreg free
 24320  010B74  0100               	movlb	0	; () banked
 24321  010B76  90D8               	bcf	status,0,c
 24322  010B78  3766               	rlcf	?___awdiv& (0+255),f,b
 24323  010B7A  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24324  010B7C  0100               	movlb	0	; () banked
 24325  010B7E  90D8               	bcf	status,0,c
 24326  010B80  3766               	rlcf	?___awdiv& (0+255),f,b
 24327  010B82  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24328  010B84  0E24               	movlw	36
 24329  010B86  0100               	movlb	0	; () banked
 24330  010B88  2766               	addwf	?___awdiv& (0+255),f,b
 24331  010B8A  0E00               	movlw	0
 24332  010B8C  0100               	movlb	0	; () banked
 24333  010B8E  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24334  010B90  0E0F               	movlw	low __powers_
 24335  010B92  0100               	movlb	0	; () banked
 24336  010B94  2566               	addwf	?___awdiv& (0+255),w,b
 24337  010B96  6EF6               	movwf	tblptrl,c
 24338  010B98  0EFC               	movlw	high __powers_
 24339  010B9A  0100               	movlb	0	; () banked
 24340  010B9C  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24341  010B9E  6EF7               	movwf	tblptrh,c
 24342  010BA0                     	if	1	;There are 3 active tblptr bytes
 24343  010BA0  6AF8               	clrf	tblptru,c
 24344  010BA2  0E00               	movlw	low (__mediumconst shr (0+16))
 24345  010BA4  22F8               	addwfc	tblptru,f,c
 24346  010BA6                     	endif
 24347  010BA6  0009               	tblrd		*+
 24348  010BA8  CFF5 F072          	movff	tablat,___flmul@a
 24349  010BAC  0009               	tblrd		*+
 24350  010BAE  CFF5 F073          	movff	tablat,___flmul@a+1
 24351  010BB2  0009               	tblrd		*+
 24352  010BB4  CFF5 F074          	movff	tablat,___flmul@a+2
 24353  010BB8  000A               	tblrd		*-
 24354  010BBA  CFF5 F075          	movff	tablat,___flmul@a+3
 24355  010BBE  0E00               	movlw	0
 24356  010BC0  0100               	movlb	0	; () banked
 24357  010BC2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 24358  010BC4  0E64               	movlw	100
 24359  010BC6  6F68               	movwf	___awdiv@divisor& (0+255),b
 24360  010BC8  0100               	movlb	0	; () banked
 24361  010BCA  518F               	movf	scale@scl& (0+255),w,b
 24362  010BCC  0100               	movlb	0	; () banked
 24363  010BCE  6F66               	movwf	___awdiv@dividend& (0+255),b
 24364  010BD0  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 24365  010BD2  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 24366  010BD4  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 24367  010BD6  ECFA  F0AC         	call	___awdiv	;wreg free
 24368  010BDA  0100               	movlb	0	; () banked
 24369  010BDC  90D8               	bcf	status,0,c
 24370  010BDE  3766               	rlcf	?___awdiv& (0+255),f,b
 24371  010BE0  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24372  010BE2  0100               	movlb	0	; () banked
 24373  010BE4  90D8               	bcf	status,0,c
 24374  010BE6  3766               	rlcf	?___awdiv& (0+255),f,b
 24375  010BE8  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24376  010BEA  0E48               	movlw	72
 24377  010BEC  0100               	movlb	0	; () banked
 24378  010BEE  2766               	addwf	?___awdiv& (0+255),f,b
 24379  010BF0  0E00               	movlw	0
 24380  010BF2  0100               	movlb	0	; () banked
 24381  010BF4  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24382  010BF6  0E0F               	movlw	low __powers_
 24383  010BF8  0100               	movlb	0	; () banked
 24384  010BFA  2566               	addwf	?___awdiv& (0+255),w,b
 24385  010BFC  6EF6               	movwf	tblptrl,c
 24386  010BFE  0EFC               	movlw	high __powers_
 24387  010C00  0100               	movlb	0	; () banked
 24388  010C02  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24389  010C04  6EF7               	movwf	tblptrh,c
 24390  010C06                     	if	1	;There are 3 active tblptr bytes
 24391  010C06  6AF8               	clrf	tblptru,c
 24392  010C08  0E00               	movlw	low (__mediumconst shr (0+16))
 24393  010C0A  22F8               	addwfc	tblptru,f,c
 24394  010C0C                     	endif
 24395  010C0C  0009               	tblrd		*+
 24396  010C0E  CFF5 F06E          	movff	tablat,___flmul@b
 24397  010C12  0009               	tblrd		*+
 24398  010C14  CFF5 F06F          	movff	tablat,___flmul@b+1
 24399  010C18  0009               	tblrd		*+
 24400  010C1A  CFF5 F070          	movff	tablat,___flmul@b+2
 24401  010C1E  000A               	tblrd		*-
 24402  010C20  CFF5 F071          	movff	tablat,___flmul@b+3
 24403  010C24  EC3A  F089         	call	___flmul	;wreg free
 24404  010C28  C06E  F08B         	movff	?___flmul,_scale$15266
 24405  010C2C  C06F  F08C         	movff	?___flmul+1,_scale$15266+1
 24406  010C30  C070  F08D         	movff	?___flmul+2,_scale$15266+2
 24407  010C34  C071  F08E         	movff	?___flmul+3,_scale$15266+3
 24408                           
 24409                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
 24410  010C38  C08B  F06E         	movff	_scale$15266,___flmul@b
 24411  010C3C  C08C  F06F         	movff	_scale$15266+1,___flmul@b+1
 24412  010C40  C08D  F070         	movff	_scale$15266+2,___flmul@b+2
 24413  010C44  C08E  F071         	movff	_scale$15266+3,___flmul@b+3
 24414  010C48  0E00               	movlw	0
 24415  010C4A  0100               	movlb	0	; () banked
 24416  010C4C  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 24417  010C4E  0E0A               	movlw	10
 24418  010C50  6F62               	movwf	___awmod@divisor& (0+255),b
 24419  010C52  0100               	movlb	0	; () banked
 24420  010C54  518F               	movf	scale@scl& (0+255),w,b
 24421  010C56  0100               	movlb	0	; () banked
 24422  010C58  6F60               	movwf	___awmod@dividend& (0+255),b
 24423  010C5A  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 24424  010C5C  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 24425  010C5E  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 24426  010C60  EC68  F0B2         	call	___awmod	;wreg free
 24427  010C64  0100               	movlb	0	; () banked
 24428  010C66  90D8               	bcf	status,0,c
 24429  010C68  3760               	rlcf	?___awmod& (0+255),f,b
 24430  010C6A  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24431  010C6C  0100               	movlb	0	; () banked
 24432  010C6E  90D8               	bcf	status,0,c
 24433  010C70  3760               	rlcf	?___awmod& (0+255),f,b
 24434  010C72  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24435  010C74  0E0F               	movlw	low __powers_
 24436  010C76  0100               	movlb	0	; () banked
 24437  010C78  2560               	addwf	?___awmod& (0+255),w,b
 24438  010C7A  6EF6               	movwf	tblptrl,c
 24439  010C7C  0EFC               	movlw	high __powers_
 24440  010C7E  0100               	movlb	0	; () banked
 24441  010C80  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 24442  010C82  6EF7               	movwf	tblptrh,c
 24443  010C84                     	if	1	;There are 3 active tblptr bytes
 24444  010C84  6AF8               	clrf	tblptru,c
 24445  010C86  0E00               	movlw	low (__mediumconst shr (0+16))
 24446  010C88  22F8               	addwfc	tblptru,f,c
 24447  010C8A                     	endif
 24448  010C8A  0009               	tblrd		*+
 24449  010C8C  CFF5 F072          	movff	tablat,___flmul@a
 24450  010C90  0009               	tblrd		*+
 24451  010C92  CFF5 F073          	movff	tablat,___flmul@a+1
 24452  010C96  0009               	tblrd		*+
 24453  010C98  CFF5 F074          	movff	tablat,___flmul@a+2
 24454  010C9C  000A               	tblrd		*-
 24455  010C9E  CFF5 F075          	movff	tablat,___flmul@a+3
 24456  010CA2  EC3A  F089         	call	___flmul	;wreg free
 24457  010CA6  C06E  F087         	movff	?___flmul,?_scale
 24458  010CAA  C06F  F088         	movff	?___flmul+1,?_scale+1
 24459  010CAE  C070  F089         	movff	?___flmul+2,?_scale+2
 24460  010CB2  C071  F08A         	movff	?___flmul+3,?_scale+3
 24461  010CB6  0012               	return	
 24462  010CB8                     l2155:
 24463                           
 24464                           ;doprnt.c: 438: else if(scl > 10)
 24465  010CB8  0100               	movlb	0	; () banked
 24466  010CBA  518F               	movf	scale@scl& (0+255),w,b
 24467  010CBC  0A80               	xorlw	128
 24468  010CBE  0F75               	addlw	-139
 24469  010CC0  A0D8               	btfss	status,0,c
 24470  010CC2  D06B               	goto	l2157
 24471                           
 24472                           ; BSR set to: 0
 24473                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
 24474  010CC4  0E00               	movlw	0
 24475  010CC6  0100               	movlb	0	; () banked
 24476  010CC8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 24477  010CCA  0E0A               	movlw	10
 24478  010CCC  6F68               	movwf	___awdiv@divisor& (0+255),b
 24479  010CCE  0100               	movlb	0	; () banked
 24480  010CD0  518F               	movf	scale@scl& (0+255),w,b
 24481  010CD2  0100               	movlb	0	; () banked
 24482  010CD4  6F66               	movwf	___awdiv@dividend& (0+255),b
 24483  010CD6  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 24484  010CD8  BF66               	btfsc	___awdiv@dividend& (0+255),7,b
 24485  010CDA  0767               	decf	(___awdiv@dividend+1)& (0+255),f,b
 24486  010CDC  ECFA  F0AC         	call	___awdiv	;wreg free
 24487  010CE0  0100               	movlb	0	; () banked
 24488  010CE2  90D8               	bcf	status,0,c
 24489  010CE4  3766               	rlcf	?___awdiv& (0+255),f,b
 24490  010CE6  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24491  010CE8  0100               	movlb	0	; () banked
 24492  010CEA  90D8               	bcf	status,0,c
 24493  010CEC  3766               	rlcf	?___awdiv& (0+255),f,b
 24494  010CEE  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 24495  010CF0  0E24               	movlw	36
 24496  010CF2  0100               	movlb	0	; () banked
 24497  010CF4  2766               	addwf	?___awdiv& (0+255),f,b
 24498  010CF6  0E00               	movlw	0
 24499  010CF8  0100               	movlb	0	; () banked
 24500  010CFA  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 24501  010CFC  0E0F               	movlw	low __powers_
 24502  010CFE  0100               	movlb	0	; () banked
 24503  010D00  2566               	addwf	?___awdiv& (0+255),w,b
 24504  010D02  6EF6               	movwf	tblptrl,c
 24505  010D04  0EFC               	movlw	high __powers_
 24506  010D06  0100               	movlb	0	; () banked
 24507  010D08  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 24508  010D0A  6EF7               	movwf	tblptrh,c
 24509  010D0C                     	if	1	;There are 3 active tblptr bytes
 24510  010D0C  6AF8               	clrf	tblptru,c
 24511  010D0E  0E00               	movlw	low (__mediumconst shr (0+16))
 24512  010D10  22F8               	addwfc	tblptru,f,c
 24513  010D12                     	endif
 24514  010D12  0009               	tblrd		*+
 24515  010D14  CFF5 F06E          	movff	tablat,___flmul@b
 24516  010D18  0009               	tblrd		*+
 24517  010D1A  CFF5 F06F          	movff	tablat,___flmul@b+1
 24518  010D1E  0009               	tblrd		*+
 24519  010D20  CFF5 F070          	movff	tablat,___flmul@b+2
 24520  010D24  000A               	tblrd		*-
 24521  010D26  CFF5 F071          	movff	tablat,___flmul@b+3
 24522  010D2A  0E00               	movlw	0
 24523  010D2C  0100               	movlb	0	; () banked
 24524  010D2E  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 24525  010D30  0E0A               	movlw	10
 24526  010D32  6F62               	movwf	___awmod@divisor& (0+255),b
 24527  010D34  0100               	movlb	0	; () banked
 24528  010D36  518F               	movf	scale@scl& (0+255),w,b
 24529  010D38  0100               	movlb	0	; () banked
 24530  010D3A  6F60               	movwf	___awmod@dividend& (0+255),b
 24531  010D3C  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 24532  010D3E  BF60               	btfsc	___awmod@dividend& (0+255),7,b
 24533  010D40  0761               	decf	(___awmod@dividend+1)& (0+255),f,b
 24534  010D42  EC68  F0B2         	call	___awmod	;wreg free
 24535  010D46  0100               	movlb	0	; () banked
 24536  010D48  90D8               	bcf	status,0,c
 24537  010D4A  3760               	rlcf	?___awmod& (0+255),f,b
 24538  010D4C  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24539  010D4E  0100               	movlb	0	; () banked
 24540  010D50  90D8               	bcf	status,0,c
 24541  010D52  3760               	rlcf	?___awmod& (0+255),f,b
 24542  010D54  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 24543  010D56  0E0F               	movlw	low __powers_
 24544  010D58  0100               	movlb	0	; () banked
 24545  010D5A  2560               	addwf	?___awmod& (0+255),w,b
 24546  010D5C  6EF6               	movwf	tblptrl,c
 24547  010D5E  0EFC               	movlw	high __powers_
 24548  010D60  0100               	movlb	0	; () banked
 24549  010D62  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 24550  010D64  6EF7               	movwf	tblptrh,c
 24551  010D66                     	if	1	;There are 3 active tblptr bytes
 24552  010D66  6AF8               	clrf	tblptru,c
 24553  010D68  0E00               	movlw	low (__mediumconst shr (0+16))
 24554  010D6A  22F8               	addwfc	tblptru,f,c
 24555  010D6C                     	endif
 24556  010D6C  0009               	tblrd		*+
 24557  010D6E  CFF5 F072          	movff	tablat,___flmul@a
 24558  010D72  0009               	tblrd		*+
 24559  010D74  CFF5 F073          	movff	tablat,___flmul@a+1
 24560  010D78  0009               	tblrd		*+
 24561  010D7A  CFF5 F074          	movff	tablat,___flmul@a+2
 24562  010D7E  000A               	tblrd		*-
 24563  010D80  CFF5 F075          	movff	tablat,___flmul@a+3
 24564  010D84  EC3A  F089         	call	___flmul	;wreg free
 24565  010D88  C06E  F087         	movff	?___flmul,?_scale
 24566  010D8C  C06F  F088         	movff	?___flmul+1,?_scale+1
 24567  010D90  C070  F089         	movff	?___flmul+2,?_scale+2
 24568  010D94  C071  F08A         	movff	?___flmul+3,?_scale+3
 24569  010D98  0012               	return	
 24570  010D9A                     l2157:
 24571                           
 24572                           ;doprnt.c: 440: return _powers_[scl];
 24573  010D9A  0100               	movlb	0	; () banked
 24574  010D9C  518F               	movf	scale@scl& (0+255),w,b
 24575  010D9E  0D04               	mullw	4
 24576  010DA0  0E0F               	movlw	low __powers_
 24577  010DA2  24F3               	addwf	prodl,w,c
 24578  010DA4  6EF6               	movwf	tblptrl,c
 24579  010DA6  0EFC               	movlw	high __powers_
 24580  010DA8  20F4               	addwfc	prodh,w,c
 24581  010DAA  6EF7               	movwf	tblptrh,c
 24582  010DAC                     	if	1	;There are 3 active tblptr bytes
 24583  010DAC  6AF8               	clrf	tblptru,c
 24584  010DAE  0E00               	movlw	low (__mediumconst shr (0+16))
 24585  010DB0  22F8               	addwfc	tblptru,f,c
 24586  010DB2                     	endif
 24587  010DB2  0009               	tblrd		*+
 24588  010DB4  CFF5 F087          	movff	tablat,?_scale
 24589  010DB8  0009               	tblrd		*+
 24590  010DBA  CFF5 F088          	movff	tablat,?_scale+1
 24591  010DBE  0009               	tblrd		*+
 24592  010DC0  CFF5 F089          	movff	tablat,?_scale+2
 24593  010DC4  000A               	tblrd		*-
 24594  010DC6  CFF5 F08A          	movff	tablat,?_scale+3
 24595  010DCA  0012               	return	
 24596  010DCC                     __end_of_scale:
 24597                           	opt stack 0
 24598                           tosu	equ	0xFFF
 24599                           tosh	equ	0xFFE
 24600                           tosl	equ	0xFFD
 24601                           pclath	equ	0xFFA
 24602                           tblptru	equ	0xFF8
 24603                           tblptrh	equ	0xFF7
 24604                           tblptrl	equ	0xFF6
 24605                           tablat	equ	0xFF5
 24606                           prodh	equ	0xFF4
 24607                           prodl	equ	0xFF3
 24608                           intcon	equ	0xFF2
 24609                           indf0	equ	0xFEF
 24610                           postinc0	equ	0xFEE
 24611                           fsr0h	equ	0xFEA
 24612                           fsr0l	equ	0xFE9
 24613                           wreg	equ	0xFE8
 24614                           indf1	equ	0xFE7
 24615                           postdec1	equ	0xFE5
 24616                           fsr1h	equ	0xFE2
 24617                           fsr1l	equ	0xFE1
 24618                           indf2	equ	0xFDF
 24619                           postinc2	equ	0xFDE
 24620                           postdec2	equ	0xFDD
 24621                           plusw2	equ	0xFDB
 24622                           fsr2h	equ	0xFDA
 24623                           fsr2l	equ	0xFD9
 24624                           status	equ	0xFD8
 24625                           
 24626 ;; *************** function _putch *****************
 24627 ;; Defined at:
 24628 ;;		line 454 in file "Library/Console.c"
 24629 ;; Parameters:    Size  Location     Type
 24630 ;;  c               1    wreg     unsigned char 
 24631 ;; Auto vars:     Size  Location     Type
 24632 ;;  c               1   26[BANK0 ] unsigned char 
 24633 ;; Return value:  Size  Location     Type
 24634 ;;                  1    wreg      void 
 24635 ;; Registers used:
 24636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24637 ;; Tracked objects:
 24638 ;;		On entry : 0/0
 24639 ;;		On exit  : 0/0
 24640 ;;		Unchanged: 0/0
 24641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24645 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24646 ;;Total ram usage:        1 bytes
 24647 ;; Hardware stack levels used:    1
 24648 ;; Hardware stack levels required when called:   11
 24649 ;; This function calls:
 24650 ;;		_Console_PrintChar
 24651 ;; This function is called by:
 24652 ;;		_printf
 24653 ;; This function uses a non-reentrant model
 24654 ;;
 24655                           
 24656                           	psect	text120
 24657  017FF2                     __ptext120:
 24658                           	opt stack 0
 24659  017FF2                     _putch:
 24660                           	opt stack 18
 24661                           
 24662                           ;incstack = 0
 24663                           ;putch@c stored from wreg
 24664  017FF2  0100               	movlb	0	; () banked
 24665  017FF4  6F7A               	movwf	putch@c& (0+255),b
 24666                           
 24667                           ;Console.c: 456: Console_PrintChar(c);
 24668  017FF6  0100               	movlb	0	; () banked
 24669  017FF8  517A               	movf	putch@c& (0+255),w,b
 24670  017FFA  EC77  F09C         	call	_Console_PrintChar
 24671  017FFE  0012               	return		;funcret
 24672  018000                     __end_of_putch:
 24673                           	opt stack 0
 24674                           tosu	equ	0xFFF
 24675                           tosh	equ	0xFFE
 24676                           tosl	equ	0xFFD
 24677                           pclath	equ	0xFFA
 24678                           tblptru	equ	0xFF8
 24679                           tblptrh	equ	0xFF7
 24680                           tblptrl	equ	0xFF6
 24681                           tablat	equ	0xFF5
 24682                           prodh	equ	0xFF4
 24683                           prodl	equ	0xFF3
 24684                           intcon	equ	0xFF2
 24685                           indf0	equ	0xFEF
 24686                           postinc0	equ	0xFEE
 24687                           fsr0h	equ	0xFEA
 24688                           fsr0l	equ	0xFE9
 24689                           wreg	equ	0xFE8
 24690                           indf1	equ	0xFE7
 24691                           postdec1	equ	0xFE5
 24692                           fsr1h	equ	0xFE2
 24693                           fsr1l	equ	0xFE1
 24694                           indf2	equ	0xFDF
 24695                           postinc2	equ	0xFDE
 24696                           postdec2	equ	0xFDD
 24697                           plusw2	equ	0xFDB
 24698                           fsr2h	equ	0xFDA
 24699                           fsr2l	equ	0xFD9
 24700                           status	equ	0xFD8
 24701                           
 24702 ;; *************** function _Console_PrintChar *****************
 24703 ;; Defined at:
 24704 ;;		line 322 in file "Library/Console.c"
 24705 ;; Parameters:    Size  Location     Type
 24706 ;;  pInput          1    wreg     unsigned char 
 24707 ;; Auto vars:     Size  Location     Type
 24708 ;;  pInput          1   25[BANK0 ] unsigned char 
 24709 ;; Return value:  Size  Location     Type
 24710 ;;                  1    wreg      void 
 24711 ;; Registers used:
 24712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 24713 ;; Tracked objects:
 24714 ;;		On entry : 0/0
 24715 ;;		On exit  : 0/0
 24716 ;;		Unchanged: 0/0
 24717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24720 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24721 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24722 ;;Total ram usage:        4 bytes
 24723 ;; Hardware stack levels used:    1
 24724 ;; Hardware stack levels required when called:   10
 24725 ;; This function calls:
 24726 ;;		_Console_Backspace
 24727 ;;		_Console_FormFeed
 24728 ;;		_Console_IncrementCursor
 24729 ;;		_Console_NewLine
 24730 ;;		_Console_ResetCursor
 24731 ;;		_Console_Tab
 24732 ;; This function is called by:
 24733 ;;		_putch
 24734 ;;		_Console_PrintString
 24735 ;; This function uses a non-reentrant model
 24736 ;;
 24737                           
 24738                           	psect	text121
 24739  0138EE                     __ptext121:
 24740                           	opt stack 0
 24741  0138EE                     _Console_PrintChar:
 24742                           	opt stack 18
 24743                           
 24744                           ;incstack = 0
 24745                           ;Console_PrintChar@pInput stored from wreg
 24746  0138EE  0100               	movlb	0	; () banked
 24747  0138F0  6F79               	movwf	Console_PrintChar@pInput& (0+255),b
 24748                           
 24749                           ;Console.c: 324: switch(pInput)
 24750  0138F2  D0B1               	goto	l1036
 24751  0138F4                     
 24752                           ;Console.c: 327: case '\n':
 24753                           ;Console.c: 328: Console_NewLine();
 24754  0138F4  EC17  F0B2         	call	_Console_NewLine	;wreg free
 24755                           
 24756                           ;Console.c: 329: return;
 24757  0138F8  0012               	return	
 24758  0138FA                     
 24759                           ;Console.c: 331: Console_Backspace();
 24760  0138FA  EC92  F0B9         	call	_Console_Backspace	;wreg free
 24761                           
 24762                           ;Console.c: 332: return;
 24763  0138FE  0012               	return	
 24764  013900                     
 24765                           ;Console.c: 334: Console_FormFeed();
 24766  013900  ECE8  F0B3         	call	_Console_FormFeed	;wreg free
 24767                           
 24768                           ;Console.c: 335: return;
 24769  013904  0012               	return	
 24770  013906                     
 24771                           ;Console.c: 337: Console_Tab();
 24772  013906  EC99  F0AC         	call	_Console_Tab	;wreg free
 24773                           
 24774                           ;Console.c: 338: return;
 24775  01390A  0012               	return	
 24776  01390C                     
 24777                           ;Console.c: 340: Console_IncrementCursor();
 24778  01390C  EC9D  F0B8         	call	_Console_IncrementCursor	;wreg free
 24779                           
 24780                           ;Console.c: 341: return;
 24781  013910  0012               	return	
 24782  013912                     
 24783                           ;Console.c: 343: Console_ResetCursor();
 24784  013912  EC2C  F0BF         	call	_Console_ResetCursor	;wreg free
 24785                           
 24786                           ;Console.c: 344: return;
 24787  013916  0012               	return	
 24788  013918                     
 24789                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 24790                           
 24791                           ;Console.c: 349: default:
 24792  013918  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 24793  01391C  0E7F               	movlw	127
 24794  01391E  0100               	movlb	0	; () banked
 24795  013920  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 24796  013922  0100               	movlb	0	; () banked
 24797  013924  51F9               	movf	_lBufferY& (0+255),w,b
 24798  013926  0D14               	mullw	20
 24799  013928  0E7B               	movlw	low _lBuffer
 24800  01392A  0100               	movlb	0	; () banked
 24801  01392C  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24802  01392E  0E02               	movlw	high _lBuffer
 24803  013930  0100               	movlb	0	; () banked
 24804  013932  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 24805  013934  50F3               	movf	prodl,w,c
 24806  013936  0100               	movlb	0	; () banked
 24807  013938  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 24808  01393A  50F4               	movf	prodh,w,c
 24809  01393C  0100               	movlb	0	; () banked
 24810  01393E  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 24811  013940  0100               	movlb	0	; () banked
 24812  013942  51FA               	movf	_lBufferX& (0+255),w,b
 24813  013944  0D01               	mullw	1
 24814  013946  50F3               	movf	prodl,w,c
 24815  013948  0100               	movlb	0	; () banked
 24816  01394A  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 24817  01394C  6ED9               	movwf	fsr2l,c
 24818  01394E  50F4               	movf	prodh,w,c
 24819  013950  0100               	movlb	0	; () banked
 24820  013952  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 24821  013954  6EDA               	movwf	fsr2h,c
 24822  013956  50DF               	movf	indf2,w,c
 24823  013958  0B7F               	andlw	127
 24824  01395A  0100               	movlb	0	; () banked
 24825  01395C  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 24826  01395E  B4D8               	btfsc	status,2,c
 24827  013960  D02E               	goto	l1047
 24828                           
 24829                           ; BSR set to: 0
 24830                           ;Console.c: 351: {
 24831                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 24832  013962  0E01               	movlw	1
 24833  013964  0100               	movlb	0	; () banked
 24834  013966  6FFE               	movwf	_change& (0+255),b
 24835                           
 24836                           ; BSR set to: 0
 24837  013968  0100               	movlb	0	; () banked
 24838  01396A  51F9               	movf	_lBufferY& (0+255),w,b
 24839  01396C  0D14               	mullw	20
 24840  01396E  0E7B               	movlw	low _lBuffer
 24841  013970  0100               	movlb	0	; () banked
 24842  013972  6F76               	movwf	??_Console_PrintChar& (0+255),b
 24843  013974  0E02               	movlw	high _lBuffer
 24844  013976  0100               	movlb	0	; () banked
 24845  013978  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24846  01397A  50F3               	movf	prodl,w,c
 24847  01397C  0100               	movlb	0	; () banked
 24848  01397E  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 24849  013980  50F4               	movf	prodh,w,c
 24850  013982  0100               	movlb	0	; () banked
 24851  013984  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 24852  013986  0100               	movlb	0	; () banked
 24853  013988  51FA               	movf	_lBufferX& (0+255),w,b
 24854  01398A  0D01               	mullw	1
 24855  01398C  50F3               	movf	prodl,w,c
 24856  01398E  0100               	movlb	0	; () banked
 24857  013990  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 24858  013992  6ED9               	movwf	fsr2l,c
 24859  013994  50F4               	movf	prodh,w,c
 24860  013996  0100               	movlb	0	; () banked
 24861  013998  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 24862  01399A  6EDA               	movwf	fsr2h,c
 24863  01399C  0100               	movlb	0	; () banked
 24864  01399E  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 24865  0139A0  0980               	iorlw	128
 24866  0139A2  6EDF               	movwf	indf2,c
 24867                           
 24868                           ; BSR set to: 0
 24869                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 24870  0139A4  0100               	movlb	0	; () banked
 24871  0139A6  51F9               	movf	_lBufferY& (0+255),w,b
 24872  0139A8  0D02               	mullw	2
 24873  0139AA  0E00               	movlw	low _lCBuffer
 24874  0139AC  24F3               	addwf	prodl,w,c
 24875  0139AE  6ED9               	movwf	fsr2l,c
 24876  0139B0  0E02               	movlw	high _lCBuffer
 24877  0139B2  20F4               	addwfc	prodh,w,c
 24878  0139B4  6EDA               	movwf	fsr2h,c
 24879  0139B6  C0FC  FFDE         	movff	_gForecolour,postinc2
 24880  0139BA  C0FD  FFDD         	movff	_gForecolour+1,postdec2
 24881  0139BE                     l1047:
 24882                           
 24883                           ; BSR set to: 0
 24884                           ;Console.c: 354: }
 24885                           ;Console.c: 368: if(Console_IncrementCursor())
 24886                           
 24887                           ; BSR set to: 0
 24888  0139BE  EC9D  F0B8         	call	_Console_IncrementCursor	;wreg free
 24889  0139C2  0900               	iorlw	0
 24890  0139C4  B4D8               	btfsc	status,2,c
 24891  0139C6  0012               	return	
 24892                           
 24893                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 24894  0139C8  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 24895  0139CC  0E7F               	movlw	127
 24896  0139CE  0100               	movlb	0	; () banked
 24897  0139D0  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 24898  0139D2  0100               	movlb	0	; () banked
 24899  0139D4  51F9               	movf	_lBufferY& (0+255),w,b
 24900  0139D6  0D14               	mullw	20
 24901  0139D8  0E7B               	movlw	low _lBuffer
 24902  0139DA  0100               	movlb	0	; () banked
 24903  0139DC  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24904  0139DE  0E02               	movlw	high _lBuffer
 24905  0139E0  0100               	movlb	0	; () banked
 24906  0139E2  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 24907  0139E4  50F3               	movf	prodl,w,c
 24908  0139E6  0100               	movlb	0	; () banked
 24909  0139E8  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 24910  0139EA  50F4               	movf	prodh,w,c
 24911  0139EC  0100               	movlb	0	; () banked
 24912  0139EE  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 24913  0139F0  0100               	movlb	0	; () banked
 24914  0139F2  51FA               	movf	_lBufferX& (0+255),w,b
 24915  0139F4  0D01               	mullw	1
 24916  0139F6  50F3               	movf	prodl,w,c
 24917  0139F8  0100               	movlb	0	; () banked
 24918  0139FA  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 24919  0139FC  6ED9               	movwf	fsr2l,c
 24920  0139FE  50F4               	movf	prodh,w,c
 24921  013A00  0100               	movlb	0	; () banked
 24922  013A02  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 24923  013A04  6EDA               	movwf	fsr2h,c
 24924  013A06  50DF               	movf	indf2,w,c
 24925  013A08  0B7F               	andlw	127
 24926  013A0A  0100               	movlb	0	; () banked
 24927  013A0C  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 24928  013A0E  B4D8               	btfsc	status,2,c
 24929  013A10  0012               	return	
 24930                           
 24931                           ; BSR set to: 0
 24932                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 24933  013A12  0E01               	movlw	1
 24934  013A14  0100               	movlb	0	; () banked
 24935  013A16  6FFE               	movwf	_change& (0+255),b
 24936                           
 24937                           ; BSR set to: 0
 24938  013A18  0100               	movlb	0	; () banked
 24939  013A1A  51F9               	movf	_lBufferY& (0+255),w,b
 24940  013A1C  0D14               	mullw	20
 24941  013A1E  0E7B               	movlw	low _lBuffer
 24942  013A20  0100               	movlb	0	; () banked
 24943  013A22  6F76               	movwf	??_Console_PrintChar& (0+255),b
 24944  013A24  0E02               	movlw	high _lBuffer
 24945  013A26  0100               	movlb	0	; () banked
 24946  013A28  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 24947  013A2A  50F3               	movf	prodl,w,c
 24948  013A2C  0100               	movlb	0	; () banked
 24949  013A2E  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 24950  013A30  50F4               	movf	prodh,w,c
 24951  013A32  0100               	movlb	0	; () banked
 24952  013A34  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 24953  013A36  0100               	movlb	0	; () banked
 24954  013A38  51FA               	movf	_lBufferX& (0+255),w,b
 24955  013A3A  0D01               	mullw	1
 24956  013A3C  50F3               	movf	prodl,w,c
 24957  013A3E  0100               	movlb	0	; () banked
 24958  013A40  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 24959  013A42  6ED9               	movwf	fsr2l,c
 24960  013A44  50F4               	movf	prodh,w,c
 24961  013A46  0100               	movlb	0	; () banked
 24962  013A48  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 24963  013A4A  6EDA               	movwf	fsr2h,c
 24964  013A4C  0100               	movlb	0	; () banked
 24965  013A4E  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 24966  013A50  0980               	iorlw	128
 24967  013A52  6EDF               	movwf	indf2,c
 24968                           
 24969                           ; BSR set to: 0
 24970                           ;Console.c: 372: };
 24971                           
 24972                           ; BSR set to: 0
 24973                           ;Console.c: 371: return;
 24974                           
 24975                           ; BSR set to: 0
 24976                           
 24977                           ; BSR set to: 0
 24978  013A54  0012               	return	
 24979  013A56                     l1036:
 24980                           
 24981                           ; BSR set to: 0
 24982  013A56  0100               	movlb	0	; () banked
 24983  013A58  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 24984                           
 24985                           ; Switch size 1, requested type "space"
 24986                           ; Number of cases is 8, Range of values is 7 to 35
 24987                           ; switch strategies available:
 24988                           ; Name         Instructions Cycles
 24989                           ; simple_byte           25    13 (average)
 24990                           ;	Chosen strategy is simple_byte
 24991  013A5A  0A07               	xorlw	7	; case 7
 24992  013A5C  B4D8               	btfsc	status,2,c
 24993  013A5E  D756               	goto	l1043
 24994  013A60  0A0F               	xorlw	15	; case 8
 24995  013A62  B4D8               	btfsc	status,2,c
 24996  013A64  D74A               	goto	l1040
 24997  013A66  0A01               	xorlw	1	; case 9
 24998  013A68  B4D8               	btfsc	status,2,c
 24999  013A6A  D74D               	goto	l1042
 25000  013A6C  0A03               	xorlw	3	; case 10
 25001  013A6E  B4D8               	btfsc	status,2,c
 25002  013A70  D741               	goto	l1037
 25003  013A72  0A06               	xorlw	6	; case 12
 25004  013A74  B4D8               	btfsc	status,2,c
 25005  013A76  D744               	goto	l1041
 25006  013A78  0A01               	xorlw	1	; case 13
 25007  013A7A  B4D8               	btfsc	status,2,c
 25008  013A7C  D73B               	goto	l1037
 25009  013A7E  0A2D               	xorlw	45	; case 32
 25010  013A80  B4D8               	btfsc	status,2,c
 25011  013A82  D74A               	goto	l1045
 25012  013A84  0A03               	xorlw	3	; case 35
 25013  013A86  B4D8               	btfsc	status,2,c
 25014  013A88  D744               	goto	l1044
 25015  013A8A  D746               	goto	l1045
 25016  013A8C                     __end_of_Console_PrintChar:
 25017                           	opt stack 0
 25018                           tosu	equ	0xFFF
 25019                           tosh	equ	0xFFE
 25020                           tosl	equ	0xFFD
 25021                           pclath	equ	0xFFA
 25022                           tblptru	equ	0xFF8
 25023                           tblptrh	equ	0xFF7
 25024                           tblptrl	equ	0xFF6
 25025                           tablat	equ	0xFF5
 25026                           prodh	equ	0xFF4
 25027                           prodl	equ	0xFF3
 25028                           intcon	equ	0xFF2
 25029                           indf0	equ	0xFEF
 25030                           postinc0	equ	0xFEE
 25031                           fsr0h	equ	0xFEA
 25032                           fsr0l	equ	0xFE9
 25033                           wreg	equ	0xFE8
 25034                           indf1	equ	0xFE7
 25035                           postdec1	equ	0xFE5
 25036                           fsr1h	equ	0xFE2
 25037                           fsr1l	equ	0xFE1
 25038                           indf2	equ	0xFDF
 25039                           postinc2	equ	0xFDE
 25040                           postdec2	equ	0xFDD
 25041                           plusw2	equ	0xFDB
 25042                           fsr2h	equ	0xFDA
 25043                           fsr2l	equ	0xFD9
 25044                           status	equ	0xFD8
 25045                           
 25046 ;; *************** function _Console_Tab *****************
 25047 ;; Defined at:
 25048 ;;		line 260 in file "Library/Console.c"
 25049 ;; Parameters:    Size  Location     Type
 25050 ;;		None
 25051 ;; Auto vars:     Size  Location     Type
 25052 ;;  c               1   21[BANK0 ] unsigned char 
 25053 ;;  i               1   20[BANK0 ] unsigned char 
 25054 ;;  t               1   19[BANK0 ] unsigned char 
 25055 ;; Return value:  Size  Location     Type
 25056 ;;                  1    wreg      void 
 25057 ;; Registers used:
 25058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25059 ;; Tracked objects:
 25060 ;;		On entry : 0/0
 25061 ;;		On exit  : 0/0
 25062 ;;		Unchanged: 0/0
 25063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25065 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25066 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25067 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25068 ;;Total ram usage:        8 bytes
 25069 ;; Hardware stack levels used:    1
 25070 ;; Hardware stack levels required when called:    9
 25071 ;; This function calls:
 25072 ;;		_Console_ClearCursor
 25073 ;;		_Console_IncrementCursor
 25074 ;;		___awdiv
 25075 ;; This function is called by:
 25076 ;;		_Console_PrintChar
 25077 ;; This function uses a non-reentrant model
 25078 ;;
 25079                           
 25080                           	psect	text122
 25081  015932                     __ptext122:
 25082                           	opt stack 0
 25083  015932                     _Console_Tab:
 25084                           	opt stack 18
 25085                           
 25086                           ;Console.c: 262: UINT8 i = 0;
 25087                           
 25088                           ;incstack = 0
 25089  015932  0E00               	movlw	0
 25090  015934  0100               	movlb	0	; () banked
 25091  015936  6F74               	movwf	Console_Tab@i& (0+255),b
 25092                           
 25093                           ; BSR set to: 0
 25094                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 25095  015938  0EFA               	movlw	250
 25096  01593A  2447               	addwf	_gCursor,w,c
 25097  01593C  0100               	movlb	0	; () banked
 25098  01593E  6F66               	movwf	___awdiv@dividend& (0+255),b
 25099  015940  0EFF               	movlw	255
 25100  015942  2048               	addwfc	_gCursor+1,w,c
 25101  015944  0100               	movlb	0	; () banked
 25102  015946  6F67               	movwf	(___awdiv@dividend+1)& (0+255),b
 25103  015948  0E00               	movlw	0
 25104  01594A  0100               	movlb	0	; () banked
 25105  01594C  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 25106  01594E  0E06               	movlw	6
 25107  015950  6F68               	movwf	___awdiv@divisor& (0+255),b
 25108  015952  ECFA  F0AC         	call	___awdiv	;wreg free
 25109  015956  0100               	movlb	0	; () banked
 25110  015958  5166               	movf	?___awdiv& (0+255),w,b
 25111  01595A  0100               	movlb	0	; () banked
 25112  01595C  6F75               	movwf	Console_Tab@c& (0+255),b
 25113                           
 25114                           ; BSR set to: 0
 25115                           ;Console.c: 264: UINT8 t = c/4;
 25116  01595E  C075  F066         	movff	Console_Tab@c,___awdiv@dividend
 25117  015962  0100               	movlb	0	; () banked
 25118  015964  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 25119  015966  0E00               	movlw	0
 25120  015968  0100               	movlb	0	; () banked
 25121  01596A  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 25122  01596C  0E04               	movlw	4
 25123  01596E  6F68               	movwf	___awdiv@divisor& (0+255),b
 25124  015970  ECFA  F0AC         	call	___awdiv	;wreg free
 25125  015974  0100               	movlb	0	; () banked
 25126  015976  5166               	movf	?___awdiv& (0+255),w,b
 25127  015978  0100               	movlb	0	; () banked
 25128  01597A  6F73               	movwf	Console_Tab@t& (0+255),b
 25129                           
 25130                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 25131  01597C  0E00               	movlw	0
 25132  01597E  0100               	movlb	0	; () banked
 25133  015980  6F74               	movwf	Console_Tab@i& (0+255),b
 25134  015982  D006               	goto	l1009
 25135  015984                     
 25136                           ; BSR set to: 0
 25137                           ;Console.c: 266: {
 25138                           ;Console.c: 267: Console_ClearCursor();
 25139                           
 25140                           ; BSR set to: 0
 25141  015984  EC42  F0BC         	call	_Console_ClearCursor	;wreg free
 25142                           
 25143                           ;Console.c: 268: Console_IncrementCursor();
 25144  015988  EC9D  F0B8         	call	_Console_IncrementCursor	;wreg free
 25145  01598C  0100               	movlb	0	; () banked
 25146  01598E  2B74               	incf	Console_Tab@i& (0+255),f,b
 25147  015990                     l1009:
 25148                           
 25149                           ; BSR set to: 0
 25150                           
 25151                           ; BSR set to: 0
 25152  015990  0100               	movlb	0	; () banked
 25153  015992  5173               	movf	Console_Tab@t& (0+255),w,b
 25154  015994  0D04               	mullw	4
 25155  015996  1EF3               	comf	prodl,f,c
 25156  015998  1EF4               	comf	prodh,f,c
 25157  01599A  4AF3               	infsnz	prodl,f,c
 25158  01599C  2AF4               	incf	prodh,f,c
 25159  01599E  0100               	movlb	0	; () banked
 25160  0159A0  5175               	movf	Console_Tab@c& (0+255),w,b
 25161  0159A2  0100               	movlb	0	; () banked
 25162  0159A4  6F6E               	movwf	??_Console_Tab& (0+255),b
 25163  0159A6  6B6F               	clrf	(??_Console_Tab+1)& (0+255),b
 25164  0159A8  50F3               	movf	prodl,w,c
 25165  0159AA  0100               	movlb	0	; () banked
 25166  0159AC  276E               	addwf	??_Console_Tab& (0+255),f,b
 25167  0159AE  50F4               	movf	prodh,w,c
 25168  0159B0  0100               	movlb	0	; () banked
 25169  0159B2  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 25170  0159B4  0100               	movlb	0	; () banked
 25171  0159B6  1F6E               	comf	??_Console_Tab& (0+255),f,b
 25172  0159B8  1F6F               	comf	(??_Console_Tab+1)& (0+255),f,b
 25173  0159BA  4B6E               	infsnz	??_Console_Tab& (0+255),f,b
 25174  0159BC  2B6F               	incf	(??_Console_Tab+1)& (0+255),f,b
 25175  0159BE  0E04               	movlw	4
 25176  0159C0  0100               	movlb	0	; () banked
 25177  0159C2  276E               	addwf	??_Console_Tab& (0+255),f,b
 25178  0159C4  0E00               	movlw	0
 25179  0159C6  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 25180  0159C8  0100               	movlb	0	; () banked
 25181  0159CA  5174               	movf	Console_Tab@i& (0+255),w,b
 25182  0159CC  0100               	movlb	0	; () banked
 25183  0159CE  6F70               	movwf	(??_Console_Tab+2)& (0+255),b
 25184  0159D0  6B71               	clrf	(??_Console_Tab+3)& (0+255),b
 25185  0159D2  0100               	movlb	0	; () banked
 25186  0159D4  516E               	movf	??_Console_Tab& (0+255),w,b
 25187  0159D6  0100               	movlb	0	; () banked
 25188  0159D8  5D70               	subwf	(??_Console_Tab+2)& (0+255),w,b
 25189  0159DA  0100               	movlb	0	; () banked
 25190  0159DC  5171               	movf	(??_Console_Tab+3)& (0+255),w,b
 25191  0159DE  0A80               	xorlw	128
 25192  0159E0  0100               	movlb	0	; () banked
 25193  0159E2  6F72               	movwf	(??_Console_Tab+4)& (0+255),b
 25194  0159E4  0100               	movlb	0	; () banked
 25195  0159E6  516F               	movf	(??_Console_Tab+1)& (0+255),w,b
 25196  0159E8  0A80               	xorlw	128
 25197  0159EA  0100               	movlb	0	; () banked
 25198  0159EC  5972               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 25199  0159EE  B0D8               	btfsc	status,0,c
 25200  0159F0  0012               	return	
 25201  0159F2  D7C8               	goto	l1010
 25202  0159F4                     __end_of_Console_Tab:
 25203                           	opt stack 0
 25204                           tosu	equ	0xFFF
 25205                           tosh	equ	0xFFE
 25206                           tosl	equ	0xFFD
 25207                           pclath	equ	0xFFA
 25208                           tblptru	equ	0xFF8
 25209                           tblptrh	equ	0xFF7
 25210                           tblptrl	equ	0xFF6
 25211                           tablat	equ	0xFF5
 25212                           prodh	equ	0xFF4
 25213                           prodl	equ	0xFF3
 25214                           intcon	equ	0xFF2
 25215                           indf0	equ	0xFEF
 25216                           postinc0	equ	0xFEE
 25217                           fsr0h	equ	0xFEA
 25218                           fsr0l	equ	0xFE9
 25219                           wreg	equ	0xFE8
 25220                           indf1	equ	0xFE7
 25221                           postdec1	equ	0xFE5
 25222                           fsr1h	equ	0xFE2
 25223                           fsr1l	equ	0xFE1
 25224                           indf2	equ	0xFDF
 25225                           postinc2	equ	0xFDE
 25226                           postdec2	equ	0xFDD
 25227                           plusw2	equ	0xFDB
 25228                           fsr2h	equ	0xFDA
 25229                           fsr2l	equ	0xFD9
 25230                           status	equ	0xFD8
 25231                           
 25232 ;; *************** function _Console_IncrementCursor *****************
 25233 ;; Defined at:
 25234 ;;		line 243 in file "Library/Console.c"
 25235 ;; Parameters:    Size  Location     Type
 25236 ;;		None
 25237 ;; Auto vars:     Size  Location     Type
 25238 ;;		None
 25239 ;; Return value:  Size  Location     Type
 25240 ;;                  1    wreg      unsigned char 
 25241 ;; Registers used:
 25242 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25243 ;; Tracked objects:
 25244 ;;		On entry : 0/0
 25245 ;;		On exit  : 0/0
 25246 ;;		Unchanged: 0/0
 25247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25250 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25251 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25252 ;;Total ram usage:        2 bytes
 25253 ;; Hardware stack levels used:    1
 25254 ;; Hardware stack levels required when called:    8
 25255 ;; This function calls:
 25256 ;;		_Console_FormFeed
 25257 ;;		_Console_NewLine
 25258 ;; This function is called by:
 25259 ;;		_Console_Tab
 25260 ;;		_Console_PrintChar
 25261 ;; This function uses a non-reentrant model
 25262 ;;
 25263                           
 25264                           	psect	text123
 25265  01713A                     __ptext123:
 25266                           	opt stack 0
 25267  01713A                     _Console_IncrementCursor:
 25268                           	opt stack 18
 25269                           
 25270                           ;Console.c: 246: lBufferX += 1;
 25271                           
 25272                           ; BSR set to: 0
 25273                           ;incstack = 0
 25274  01713A  0100               	movlb	0	; () banked
 25275  01713C  2BFA               	incf	_lBufferX& (0+255),f,b
 25276                           
 25277                           ; BSR set to: 0
 25278                           ;Console.c: 248: gCursor.x += 6;
 25279  01713E  0E06               	movlw	6
 25280  017140  2647               	addwf	_gCursor,f,c
 25281  017142  0E00               	movlw	0
 25282  017144  2248               	addwfc	_gCursor+1,f,c
 25283                           
 25284                           ; BSR set to: 0
 25285                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 25286  017146  0E06               	movlw	6
 25287  017148  2447               	addwf	_gCursor,w,c
 25288  01714A  0100               	movlb	0	; () banked
 25289  01714C  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 25290  01714E  0E00               	movlw	0
 25291  017150  2048               	addwfc	_gCursor+1,w,c
 25292  017152  0100               	movlb	0	; () banked
 25293  017154  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 25294  017156  0100               	movlb	0	; () banked
 25295  017158  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 25296  01715A  D009               	goto	l1004
 25297  01715C  0100               	movlb	0	; () banked
 25298  01715E  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 25299  017160  E104               	bnz	u10520
 25300  017162  0E80               	movlw	128
 25301  017164  0100               	movlb	0	; () banked
 25302  017166  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 25303  017168  B0D8               	btfsc	status,0,c
 25304  01716A                     u10520:
 25305                           
 25306                           ; BSR set to: 0
 25307                           ;Console.c: 250: Console_NewLine();
 25308  01716A  EC17  F0B2         	call	_Console_NewLine	;wreg free
 25309  01716E                     l1004:
 25310                           
 25311                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 25312  01716E  0E08               	movlw	8
 25313  017170  2449               	addwf	_gCursor+2,w,c
 25314  017172  0100               	movlb	0	; () banked
 25315  017174  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 25316  017176  0E00               	movlw	0
 25317  017178  204A               	addwfc	_gCursor+3,w,c
 25318  01717A  0100               	movlb	0	; () banked
 25319  01717C  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 25320  01717E  0100               	movlb	0	; () banked
 25321  017180  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 25322  017182  D00C               	goto	l1005
 25323  017184  0100               	movlb	0	; () banked
 25324  017186  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 25325  017188  E105               	bnz	u10530
 25326  01718A  0E80               	movlw	128
 25327  01718C  0100               	movlb	0	; () banked
 25328  01718E  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 25329  017190  A0D8               	btfss	status,0,c
 25330  017192  D004               	goto	l1005
 25331  017194                     u10530:
 25332                           
 25333                           ; BSR set to: 0
 25334                           ;Console.c: 252: {
 25335                           ;Console.c: 253: Console_FormFeed();
 25336  017194  ECE8  F0B3         	call	_Console_FormFeed	;wreg free
 25337                           
 25338                           ;Console.c: 254: return 1;
 25339  017198  0E01               	movlw	1
 25340  01719A  0012               	return	
 25341  01719C                     l1005:
 25342                           
 25343                           ;Console.c: 255: }
 25344                           ;Console.c: 257: return 0;
 25345  01719C  0E00               	movlw	0
 25346  01719E  0012               	return	
 25347  0171A0                     __end_of_Console_IncrementCursor:
 25348                           	opt stack 0
 25349                           tosu	equ	0xFFF
 25350                           tosh	equ	0xFFE
 25351                           tosl	equ	0xFFD
 25352                           pclath	equ	0xFFA
 25353                           tblptru	equ	0xFF8
 25354                           tblptrh	equ	0xFF7
 25355                           tblptrl	equ	0xFF6
 25356                           tablat	equ	0xFF5
 25357                           prodh	equ	0xFF4
 25358                           prodl	equ	0xFF3
 25359                           intcon	equ	0xFF2
 25360                           indf0	equ	0xFEF
 25361                           postinc0	equ	0xFEE
 25362                           fsr0h	equ	0xFEA
 25363                           fsr0l	equ	0xFE9
 25364                           wreg	equ	0xFE8
 25365                           indf1	equ	0xFE7
 25366                           postdec1	equ	0xFE5
 25367                           fsr1h	equ	0xFE2
 25368                           fsr1l	equ	0xFE1
 25369                           indf2	equ	0xFDF
 25370                           postinc2	equ	0xFDE
 25371                           postdec2	equ	0xFDD
 25372                           plusw2	equ	0xFDB
 25373                           fsr2h	equ	0xFDA
 25374                           fsr2l	equ	0xFD9
 25375                           status	equ	0xFD8
 25376                           
 25377 ;; *************** function _Console_NewLine *****************
 25378 ;; Defined at:
 25379 ;;		line 175 in file "Library/Console.c"
 25380 ;; Parameters:    Size  Location     Type
 25381 ;;		None
 25382 ;; Auto vars:     Size  Location     Type
 25383 ;;		None
 25384 ;; Return value:  Size  Location     Type
 25385 ;;                  1    wreg      void 
 25386 ;; Registers used:
 25387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25388 ;; Tracked objects:
 25389 ;;		On entry : 0/0
 25390 ;;		On exit  : 0/0
 25391 ;;		Unchanged: 0/0
 25392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25395 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25396 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25397 ;;Total ram usage:        2 bytes
 25398 ;; Hardware stack levels used:    1
 25399 ;; Hardware stack levels required when called:    7
 25400 ;; This function calls:
 25401 ;;		Nothing
 25402 ;; This function is called by:
 25403 ;;		_Console_IncrementCursor
 25404 ;;		_Console_PrintChar
 25405 ;; This function uses a non-reentrant model
 25406 ;;
 25407                           
 25408                           	psect	text124
 25409  01642E                     __ptext124:
 25410                           	opt stack 0
 25411  01642E                     _Console_NewLine:
 25412                           	opt stack 18
 25413                           
 25414                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 25415                           
 25416                           ;incstack = 0
 25417  01642E  D03E               	goto	l983
 25418  016430                     
 25419                           ;Console.c: 179: {
 25420                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 25421  016430  0100               	movlb	0	; () banked
 25422  016432  51F9               	movf	_lBufferY& (0+255),w,b
 25423  016434  0D14               	mullw	20
 25424  016436  0E7B               	movlw	low _lBuffer
 25425  016438  0100               	movlb	0	; () banked
 25426  01643A  6F60               	movwf	??_Console_NewLine& (0+255),b
 25427  01643C  0E02               	movlw	high _lBuffer
 25428  01643E  0100               	movlb	0	; () banked
 25429  016440  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 25430  016442  50F3               	movf	prodl,w,c
 25431  016444  0100               	movlb	0	; () banked
 25432  016446  2760               	addwf	??_Console_NewLine& (0+255),f,b
 25433  016448  50F4               	movf	prodh,w,c
 25434  01644A  0100               	movlb	0	; () banked
 25435  01644C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 25436  01644E  0100               	movlb	0	; () banked
 25437  016450  51FA               	movf	_lBufferX& (0+255),w,b
 25438  016452  0D01               	mullw	1
 25439  016454  50F3               	movf	prodl,w,c
 25440  016456  0100               	movlb	0	; () banked
 25441  016458  2560               	addwf	??_Console_NewLine& (0+255),w,b
 25442  01645A  6ED9               	movwf	fsr2l,c
 25443  01645C  50F4               	movf	prodh,w,c
 25444  01645E  0100               	movlb	0	; () banked
 25445  016460  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 25446  016462  6EDA               	movwf	fsr2h,c
 25447  016464  50DF               	movf	indf2,w,c
 25448  016466  B4D8               	btfsc	status,2,c
 25449  016468  D01F               	goto	l985
 25450                           
 25451                           ; BSR set to: 0
 25452                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 25453  01646A  0E01               	movlw	1
 25454  01646C  0100               	movlb	0	; () banked
 25455  01646E  6FFE               	movwf	_change& (0+255),b
 25456                           
 25457                           ; BSR set to: 0
 25458  016470  0100               	movlb	0	; () banked
 25459  016472  51F9               	movf	_lBufferY& (0+255),w,b
 25460  016474  0D14               	mullw	20
 25461  016476  0E7B               	movlw	low _lBuffer
 25462  016478  0100               	movlb	0	; () banked
 25463  01647A  6F60               	movwf	??_Console_NewLine& (0+255),b
 25464  01647C  0E02               	movlw	high _lBuffer
 25465  01647E  0100               	movlb	0	; () banked
 25466  016480  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 25467  016482  50F3               	movf	prodl,w,c
 25468  016484  0100               	movlb	0	; () banked
 25469  016486  2760               	addwf	??_Console_NewLine& (0+255),f,b
 25470  016488  50F4               	movf	prodh,w,c
 25471  01648A  0100               	movlb	0	; () banked
 25472  01648C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 25473  01648E  0100               	movlb	0	; () banked
 25474  016490  51FA               	movf	_lBufferX& (0+255),w,b
 25475  016492  0D01               	mullw	1
 25476  016494  50F3               	movf	prodl,w,c
 25477  016496  0100               	movlb	0	; () banked
 25478  016498  2560               	addwf	??_Console_NewLine& (0+255),w,b
 25479  01649A  6ED9               	movwf	fsr2l,c
 25480  01649C  50F4               	movf	prodh,w,c
 25481  01649E  0100               	movlb	0	; () banked
 25482  0164A0  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 25483  0164A2  6EDA               	movwf	fsr2h,c
 25484  0164A4  0E80               	movlw	128
 25485  0164A6  6EDF               	movwf	indf2,c
 25486  0164A8                     l985:
 25487                           
 25488                           ; BSR set to: 0
 25489                           ;Console.c: 182: lBufferX ++;
 25490                           
 25491                           ; BSR set to: 0
 25492  0164A8  0100               	movlb	0	; () banked
 25493  0164AA  2BFA               	incf	_lBufferX& (0+255),f,b
 25494  0164AC                     l983:
 25495                           
 25496                           ; BSR set to: 0
 25497  0164AC  0E13               	movlw	19
 25498  0164AE  0100               	movlb	0	; () banked
 25499  0164B0  65FA               	cpfsgt	_lBufferX& (0+255),b
 25500  0164B2  D7BE               	goto	l984
 25501                           
 25502                           ; BSR set to: 0
 25503                           ;Console.c: 183: }
 25504                           ;Console.c: 185: lBufferX = 0;
 25505                           
 25506                           ; BSR set to: 0
 25507  0164B4  0E00               	movlw	0
 25508  0164B6  0100               	movlb	0	; () banked
 25509  0164B8  6FFA               	movwf	_lBufferX& (0+255),b
 25510                           
 25511                           ; BSR set to: 0
 25512                           ;Console.c: 186: lBufferY ++;
 25513  0164BA  0100               	movlb	0	; () banked
 25514  0164BC  2BF9               	incf	_lBufferY& (0+255),f,b
 25515                           
 25516                           ; BSR set to: 0
 25517                           ;Console.c: 188: gCursor.y += 8;
 25518  0164BE  0E08               	movlw	8
 25519  0164C0  2649               	addwf	_gCursor+2,f,c
 25520  0164C2  0E00               	movlw	0
 25521  0164C4  224A               	addwfc	_gCursor+3,f,c
 25522                           
 25523                           ; BSR set to: 0
 25524                           ;Console.c: 189: gCursor.x = 6;
 25525  0164C6  0E00               	movlw	0
 25526  0164C8  6E48               	movwf	_gCursor+1,c
 25527  0164CA  0E06               	movlw	6
 25528  0164CC  6E47               	movwf	_gCursor,c
 25529                           
 25530                           ; BSR set to: 0
 25531  0164CE  0012               	return		;funcret
 25532  0164D0                     __end_of_Console_NewLine:
 25533                           	opt stack 0
 25534                           tosu	equ	0xFFF
 25535                           tosh	equ	0xFFE
 25536                           tosl	equ	0xFFD
 25537                           pclath	equ	0xFFA
 25538                           tblptru	equ	0xFF8
 25539                           tblptrh	equ	0xFF7
 25540                           tblptrl	equ	0xFF6
 25541                           tablat	equ	0xFF5
 25542                           prodh	equ	0xFF4
 25543                           prodl	equ	0xFF3
 25544                           intcon	equ	0xFF2
 25545                           indf0	equ	0xFEF
 25546                           postinc0	equ	0xFEE
 25547                           fsr0h	equ	0xFEA
 25548                           fsr0l	equ	0xFE9
 25549                           wreg	equ	0xFE8
 25550                           indf1	equ	0xFE7
 25551                           postdec1	equ	0xFE5
 25552                           fsr1h	equ	0xFE2
 25553                           fsr1l	equ	0xFE1
 25554                           indf2	equ	0xFDF
 25555                           postinc2	equ	0xFDE
 25556                           postdec2	equ	0xFDD
 25557                           plusw2	equ	0xFDB
 25558                           fsr2h	equ	0xFDA
 25559                           fsr2l	equ	0xFD9
 25560                           status	equ	0xFD8
 25561                           
 25562 ;; *************** function _Console_FormFeed *****************
 25563 ;; Defined at:
 25564 ;;		line 192 in file "Library/Console.c"
 25565 ;; Parameters:    Size  Location     Type
 25566 ;;		None
 25567 ;; Auto vars:     Size  Location     Type
 25568 ;;  y               1    3[BANK0 ] unsigned char 
 25569 ;;  x               1    2[BANK0 ] unsigned char 
 25570 ;; Return value:  Size  Location     Type
 25571 ;;                  1    wreg      void 
 25572 ;; Registers used:
 25573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 25574 ;; Tracked objects:
 25575 ;;		On entry : 0/0
 25576 ;;		On exit  : 0/0
 25577 ;;		Unchanged: 0/0
 25578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25580 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25581 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25582 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25583 ;;Total ram usage:        4 bytes
 25584 ;; Hardware stack levels used:    1
 25585 ;; Hardware stack levels required when called:    7
 25586 ;; This function calls:
 25587 ;;		Nothing
 25588 ;; This function is called by:
 25589 ;;		_Console_IncrementCursor
 25590 ;;		_Console_PrintChar
 25591 ;; This function uses a non-reentrant model
 25592 ;;
 25593                           
 25594                           	psect	text125
 25595  0167D0                     __ptext125:
 25596                           	opt stack 0
 25597  0167D0                     _Console_FormFeed:
 25598                           	opt stack 18
 25599                           
 25600                           ;Console.c: 195: lBufferX = 0;
 25601                           
 25602                           ; BSR set to: 0
 25603                           ;incstack = 0
 25604  0167D0  0E00               	movlw	0
 25605  0167D2  0100               	movlb	0	; () banked
 25606  0167D4  6FFA               	movwf	_lBufferX& (0+255),b
 25607                           
 25608                           ;Console.c: 196: lBufferY = 0;
 25609  0167D6  0E00               	movlw	0
 25610  0167D8  0100               	movlb	0	; () banked
 25611  0167DA  6FF9               	movwf	_lBufferY& (0+255),b
 25612                           
 25613                           ;Console.c: 197: UINT8 x, y;
 25614                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 25615  0167DC  0E00               	movlw	0
 25616  0167DE  0100               	movlb	0	; () banked
 25617  0167E0  6F63               	movwf	Console_FormFeed@y& (0+255),b
 25618  0167E2                     l12929:
 25619                           
 25620                           ; BSR set to: 0
 25621  0167E2  0E0E               	movlw	14
 25622  0167E4  0100               	movlb	0	; () banked
 25623  0167E6  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 25624  0167E8  D001               	goto	l990
 25625  0167EA  D02D               	goto	u10370
 25626  0167EC                     l990:
 25627                           
 25628                           ; BSR set to: 0
 25629                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 25630                           
 25631                           ; BSR set to: 0
 25632  0167EC  0E00               	movlw	0
 25633  0167EE  0100               	movlb	0	; () banked
 25634  0167F0  6F62               	movwf	Console_FormFeed@x& (0+255),b
 25635  0167F2                     l12935:
 25636                           
 25637                           ; BSR set to: 0
 25638  0167F2  0E13               	movlw	19
 25639  0167F4  0100               	movlb	0	; () banked
 25640  0167F6  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 25641  0167F8  D001               	goto	l992
 25642  0167FA  D022               	goto	u10360
 25643  0167FC                     l992:
 25644                           
 25645                           ; BSR set to: 0
 25646                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 25647                           
 25648                           ; BSR set to: 0
 25649  0167FC  0E01               	movlw	1
 25650  0167FE  0100               	movlb	0	; () banked
 25651  016800  6FFE               	movwf	_change& (0+255),b
 25652                           
 25653                           ; BSR set to: 0
 25654  016802  0100               	movlb	0	; () banked
 25655  016804  5163               	movf	Console_FormFeed@y& (0+255),w,b
 25656  016806  0D14               	mullw	20
 25657  016808  0E7B               	movlw	low _lBuffer
 25658  01680A  0100               	movlb	0	; () banked
 25659  01680C  6F60               	movwf	??_Console_FormFeed& (0+255),b
 25660  01680E  0E02               	movlw	high _lBuffer
 25661  016810  0100               	movlb	0	; () banked
 25662  016812  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 25663  016814  50F3               	movf	prodl,w,c
 25664  016816  0100               	movlb	0	; () banked
 25665  016818  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 25666  01681A  50F4               	movf	prodh,w,c
 25667  01681C  0100               	movlb	0	; () banked
 25668  01681E  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 25669  016820  0100               	movlb	0	; () banked
 25670  016822  5162               	movf	Console_FormFeed@x& (0+255),w,b
 25671  016824  0D01               	mullw	1
 25672  016826  50F3               	movf	prodl,w,c
 25673  016828  0100               	movlb	0	; () banked
 25674  01682A  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 25675  01682C  6ED9               	movwf	fsr2l,c
 25676  01682E  50F4               	movf	prodh,w,c
 25677  016830  0100               	movlb	0	; () banked
 25678  016832  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 25679  016834  6EDA               	movwf	fsr2h,c
 25680  016836  0E80               	movlw	128
 25681  016838  6EDF               	movwf	indf2,c
 25682                           
 25683                           ; BSR set to: 0
 25684  01683A  0100               	movlb	0	; () banked
 25685  01683C  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 25686  01683E  D7D9               	goto	l12935
 25687  016840                     u10360:
 25688                           
 25689                           ; BSR set to: 0
 25690                           
 25691                           ; BSR set to: 0
 25692  016840  0100               	movlb	0	; () banked
 25693  016842  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 25694  016844  D7CE               	goto	l12929
 25695  016846                     u10370:
 25696                           
 25697                           ; BSR set to: 0
 25698                           ;Console.c: 204: clearall = 1;
 25699                           
 25700                           ; BSR set to: 0
 25701  016846  0E01               	movlw	1
 25702  016848  0100               	movlb	0	; () banked
 25703  01684A  6FFB               	movwf	_clearall& (0+255),b
 25704                           
 25705                           ;Console.c: 205: gCursor.x = 6;
 25706  01684C  0E00               	movlw	0
 25707  01684E  6E48               	movwf	_gCursor+1,c
 25708  016850  0E06               	movlw	6
 25709  016852  6E47               	movwf	_gCursor,c
 25710                           
 25711                           ;Console.c: 206: gCursor.y = 6;
 25712  016854  0E00               	movlw	0
 25713  016856  6E4A               	movwf	_gCursor+3,c
 25714  016858  0E06               	movlw	6
 25715  01685A  6E49               	movwf	_gCursor+2,c
 25716                           
 25717                           ; BSR set to: 0
 25718  01685C  0012               	return		;funcret
 25719  01685E                     __end_of_Console_FormFeed:
 25720                           	opt stack 0
 25721                           tosu	equ	0xFFF
 25722                           tosh	equ	0xFFE
 25723                           tosl	equ	0xFFD
 25724                           pclath	equ	0xFFA
 25725                           tblptru	equ	0xFF8
 25726                           tblptrh	equ	0xFF7
 25727                           tblptrl	equ	0xFF6
 25728                           tablat	equ	0xFF5
 25729                           prodh	equ	0xFF4
 25730                           prodl	equ	0xFF3
 25731                           intcon	equ	0xFF2
 25732                           indf0	equ	0xFEF
 25733                           postinc0	equ	0xFEE
 25734                           fsr0h	equ	0xFEA
 25735                           fsr0l	equ	0xFE9
 25736                           wreg	equ	0xFE8
 25737                           indf1	equ	0xFE7
 25738                           postdec1	equ	0xFE5
 25739                           fsr1h	equ	0xFE2
 25740                           fsr1l	equ	0xFE1
 25741                           indf2	equ	0xFDF
 25742                           postinc2	equ	0xFDE
 25743                           postdec2	equ	0xFDD
 25744                           plusw2	equ	0xFDB
 25745                           fsr2h	equ	0xFDA
 25746                           fsr2l	equ	0xFD9
 25747                           status	equ	0xFD8
 25748                           
 25749 ;; *************** function _Console_ResetCursor *****************
 25750 ;; Defined at:
 25751 ;;		line 297 in file "Library/Console.c"
 25752 ;; Parameters:    Size  Location     Type
 25753 ;;		None
 25754 ;; Auto vars:     Size  Location     Type
 25755 ;;		None
 25756 ;; Return value:  Size  Location     Type
 25757 ;;                  1    wreg      void 
 25758 ;; Registers used:
 25759 ;;		wreg, status,2
 25760 ;; Tracked objects:
 25761 ;;		On entry : 0/0
 25762 ;;		On exit  : 0/0
 25763 ;;		Unchanged: 0/0
 25764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25769 ;;Total ram usage:        0 bytes
 25770 ;; Hardware stack levels used:    1
 25771 ;; Hardware stack levels required when called:    7
 25772 ;; This function calls:
 25773 ;;		Nothing
 25774 ;; This function is called by:
 25775 ;;		_Console_PrintChar
 25776 ;; This function uses a non-reentrant model
 25777 ;;
 25778                           
 25779                           	psect	text126
 25780  017E58                     __ptext126:
 25781                           	opt stack 0
 25782  017E58                     _Console_ResetCursor:
 25783                           	opt stack 20
 25784                           
 25785                           ;Console.c: 299: gCursor.x = 6;
 25786                           
 25787                           ; BSR set to: 0
 25788                           ;incstack = 0
 25789  017E58  0E00               	movlw	0
 25790  017E5A  6E48               	movwf	_gCursor+1,c
 25791  017E5C  0E06               	movlw	6
 25792  017E5E  6E47               	movwf	_gCursor,c
 25793                           
 25794                           ;Console.c: 300: gCursor.y = 6;
 25795  017E60  0E00               	movlw	0
 25796  017E62  6E4A               	movwf	_gCursor+3,c
 25797  017E64  0E06               	movlw	6
 25798  017E66  6E49               	movwf	_gCursor+2,c
 25799                           
 25800                           ;Console.c: 303: lBufferX = 0;
 25801  017E68  0E00               	movlw	0
 25802  017E6A  0100               	movlb	0	; () banked
 25803  017E6C  6FFA               	movwf	_lBufferX& (0+255),b
 25804                           
 25805                           ;Console.c: 304: lBufferY = 0;
 25806  017E6E  0E00               	movlw	0
 25807  017E70  0100               	movlb	0	; () banked
 25808  017E72  6FF9               	movwf	_lBufferY& (0+255),b
 25809                           
 25810                           ; BSR set to: 0
 25811  017E74  0012               	return		;funcret
 25812  017E76                     __end_of_Console_ResetCursor:
 25813                           	opt stack 0
 25814                           tosu	equ	0xFFF
 25815                           tosh	equ	0xFFE
 25816                           tosl	equ	0xFFD
 25817                           pclath	equ	0xFFA
 25818                           tblptru	equ	0xFF8
 25819                           tblptrh	equ	0xFF7
 25820                           tblptrl	equ	0xFF6
 25821                           tablat	equ	0xFF5
 25822                           prodh	equ	0xFF4
 25823                           prodl	equ	0xFF3
 25824                           intcon	equ	0xFF2
 25825                           indf0	equ	0xFEF
 25826                           postinc0	equ	0xFEE
 25827                           fsr0h	equ	0xFEA
 25828                           fsr0l	equ	0xFE9
 25829                           wreg	equ	0xFE8
 25830                           indf1	equ	0xFE7
 25831                           postdec1	equ	0xFE5
 25832                           fsr1h	equ	0xFE2
 25833                           fsr1l	equ	0xFE1
 25834                           indf2	equ	0xFDF
 25835                           postinc2	equ	0xFDE
 25836                           postdec2	equ	0xFDD
 25837                           plusw2	equ	0xFDB
 25838                           fsr2h	equ	0xFDA
 25839                           fsr2l	equ	0xFD9
 25840                           status	equ	0xFD8
 25841                           
 25842 ;; *************** function _Console_Backspace *****************
 25843 ;; Defined at:
 25844 ;;		line 209 in file "Library/Console.c"
 25845 ;; Parameters:    Size  Location     Type
 25846 ;;		None
 25847 ;; Auto vars:     Size  Location     Type
 25848 ;;		None
 25849 ;; Return value:  Size  Location     Type
 25850 ;;                  1    wreg      void 
 25851 ;; Registers used:
 25852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25853 ;; Tracked objects:
 25854 ;;		On entry : 0/0
 25855 ;;		On exit  : 0/0
 25856 ;;		Unchanged: 0/0
 25857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25862 ;;Total ram usage:        0 bytes
 25863 ;; Hardware stack levels used:    1
 25864 ;; Hardware stack levels required when called:    8
 25865 ;; This function calls:
 25866 ;;		_Console_ClearCursor
 25867 ;; This function is called by:
 25868 ;;		_Console_PrintChar
 25869 ;; This function uses a non-reentrant model
 25870 ;;
 25871                           
 25872                           	psect	text127
 25873  017324                     __ptext127:
 25874                           	opt stack 0
 25875  017324                     _Console_Backspace:
 25876                           	opt stack 19
 25877                           
 25878                           ;Console.c: 211: if (lBufferX > 0)
 25879                           
 25880                           ; BSR set to: 0
 25881                           ;incstack = 0
 25882  017324  0100               	movlb	0	; () banked
 25883  017326  51FA               	movf	_lBufferX& (0+255),w,b
 25884  017328  B4D8               	btfsc	status,2,c
 25885  01732A  D007               	goto	l997
 25886                           
 25887                           ; BSR set to: 0
 25888                           ;Console.c: 212: {
 25889                           ;Console.c: 213: gCursor.x -= 6;
 25890  01732C  0EFA               	movlw	250
 25891  01732E  2647               	addwf	_gCursor,f,c
 25892  017330  0EFF               	movlw	255
 25893  017332  2248               	addwfc	_gCursor+1,f,c
 25894                           
 25895                           ; BSR set to: 0
 25896                           ;Console.c: 216: lBufferX --;
 25897  017334  0100               	movlb	0	; () banked
 25898  017336  07FA               	decf	_lBufferX& (0+255),f,b
 25899                           
 25900                           ;Console.c: 218: }
 25901  017338  D020               	goto	l1000
 25902  01733A                     l997:
 25903                           
 25904                           ; BSR set to: 0
 25905                           ;Console.c: 219: else if (lBufferY > 0)
 25906                           
 25907                           ; BSR set to: 0
 25908  01733A  0100               	movlb	0	; () banked
 25909  01733C  51F9               	movf	_lBufferY& (0+255),w,b
 25910  01733E  B4D8               	btfsc	status,2,c
 25911  017340  D00E               	goto	l999
 25912                           
 25913                           ; BSR set to: 0
 25914                           ;Console.c: 220: {
 25915                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 25916  017342  0E00               	movlw	0
 25917  017344  6E48               	movwf	_gCursor+1,c
 25918  017346  0E72               	movlw	114
 25919  017348  6E47               	movwf	_gCursor,c
 25920                           
 25921                           ; BSR set to: 0
 25922                           ;Console.c: 222: gCursor.y -= 8;
 25923  01734A  0EF8               	movlw	248
 25924  01734C  2649               	addwf	_gCursor+2,f,c
 25925  01734E  0EFF               	movlw	255
 25926  017350  224A               	addwfc	_gCursor+3,f,c
 25927                           
 25928                           ; BSR set to: 0
 25929                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 25930  017352  0E13               	movlw	19
 25931  017354  0100               	movlb	0	; () banked
 25932  017356  6FFA               	movwf	_lBufferX& (0+255),b
 25933                           
 25934                           ; BSR set to: 0
 25935                           ;Console.c: 226: lBufferY --;
 25936  017358  0100               	movlb	0	; () banked
 25937  01735A  07F9               	decf	_lBufferY& (0+255),f,b
 25938                           
 25939                           ;Console.c: 228: }
 25940  01735C  D00E               	goto	l1000
 25941  01735E                     l999:
 25942                           
 25943                           ; BSR set to: 0
 25944                           ;Console.c: 229: else
 25945                           ;Console.c: 230: {
 25946                           ;Console.c: 231: gCursor.x = 6;
 25947                           
 25948                           ; BSR set to: 0
 25949  01735E  0E00               	movlw	0
 25950  017360  6E48               	movwf	_gCursor+1,c
 25951  017362  0E06               	movlw	6
 25952  017364  6E47               	movwf	_gCursor,c
 25953                           
 25954                           ;Console.c: 232: gCursor.y = 6;
 25955  017366  0E00               	movlw	0
 25956  017368  6E4A               	movwf	_gCursor+3,c
 25957  01736A  0E06               	movlw	6
 25958  01736C  6E49               	movwf	_gCursor+2,c
 25959                           
 25960                           ;Console.c: 235: lBufferX = 0;
 25961  01736E  0E00               	movlw	0
 25962  017370  0100               	movlb	0	; () banked
 25963  017372  6FFA               	movwf	_lBufferX& (0+255),b
 25964                           
 25965                           ;Console.c: 236: lBufferY = 0;
 25966  017374  0E00               	movlw	0
 25967  017376  0100               	movlb	0	; () banked
 25968  017378  6FF9               	movwf	_lBufferY& (0+255),b
 25969  01737A                     l1000:
 25970                           
 25971                           ; BSR set to: 0
 25972                           ;Console.c: 238: }
 25973                           ;Console.c: 240: Console_ClearCursor();
 25974                           
 25975                           ; BSR set to: 0
 25976                           
 25977                           ; BSR set to: 0
 25978  01737A  EC42  F0BC         	call	_Console_ClearCursor	;wreg free
 25979  01737E  0012               	return		;funcret
 25980  017380                     __end_of_Console_Backspace:
 25981                           	opt stack 0
 25982                           tosu	equ	0xFFF
 25983                           tosh	equ	0xFFE
 25984                           tosl	equ	0xFFD
 25985                           pclath	equ	0xFFA
 25986                           tblptru	equ	0xFF8
 25987                           tblptrh	equ	0xFF7
 25988                           tblptrl	equ	0xFF6
 25989                           tablat	equ	0xFF5
 25990                           prodh	equ	0xFF4
 25991                           prodl	equ	0xFF3
 25992                           intcon	equ	0xFF2
 25993                           indf0	equ	0xFEF
 25994                           postinc0	equ	0xFEE
 25995                           fsr0h	equ	0xFEA
 25996                           fsr0l	equ	0xFE9
 25997                           wreg	equ	0xFE8
 25998                           indf1	equ	0xFE7
 25999                           postdec1	equ	0xFE5
 26000                           fsr1h	equ	0xFE2
 26001                           fsr1l	equ	0xFE1
 26002                           indf2	equ	0xFDF
 26003                           postinc2	equ	0xFDE
 26004                           postdec2	equ	0xFDD
 26005                           plusw2	equ	0xFDB
 26006                           fsr2h	equ	0xFDA
 26007                           fsr2l	equ	0xFD9
 26008                           status	equ	0xFD8
 26009                           
 26010 ;; *************** function _Console_ClearCursor *****************
 26011 ;; Defined at:
 26012 ;;		line 308 in file "Library/Console.c"
 26013 ;; Parameters:    Size  Location     Type
 26014 ;;		None
 26015 ;; Auto vars:     Size  Location     Type
 26016 ;;		None
 26017 ;; Return value:  Size  Location     Type
 26018 ;;                  1    wreg      void 
 26019 ;; Registers used:
 26020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26021 ;; Tracked objects:
 26022 ;;		On entry : 0/0
 26023 ;;		On exit  : 0/0
 26024 ;;		Unchanged: 0/0
 26025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26028 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26029 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26030 ;;Total ram usage:        2 bytes
 26031 ;; Hardware stack levels used:    1
 26032 ;; Hardware stack levels required when called:    7
 26033 ;; This function calls:
 26034 ;;		Nothing
 26035 ;; This function is called by:
 26036 ;;		_Console_Backspace
 26037 ;;		_Console_Tab
 26038 ;; This function uses a non-reentrant model
 26039 ;;
 26040                           
 26041                           	psect	text128
 26042  017884                     __ptext128:
 26043                           	opt stack 0
 26044  017884                     _Console_ClearCursor:
 26045                           	opt stack 19
 26046                           
 26047                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 26048                           
 26049                           ;incstack = 0
 26050  017884  0E01               	movlw	1
 26051  017886  0100               	movlb	0	; () banked
 26052  017888  6FFE               	movwf	_change& (0+255),b
 26053                           
 26054                           ; BSR set to: 0
 26055  01788A  0100               	movlb	0	; () banked
 26056  01788C  51F9               	movf	_lBufferY& (0+255),w,b
 26057  01788E  0D14               	mullw	20
 26058  017890  0E7B               	movlw	low _lBuffer
 26059  017892  0100               	movlb	0	; () banked
 26060  017894  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 26061  017896  0E02               	movlw	high _lBuffer
 26062  017898  0100               	movlb	0	; () banked
 26063  01789A  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 26064  01789C  50F3               	movf	prodl,w,c
 26065  01789E  0100               	movlb	0	; () banked
 26066  0178A0  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 26067  0178A2  50F4               	movf	prodh,w,c
 26068  0178A4  0100               	movlb	0	; () banked
 26069  0178A6  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 26070  0178A8  0100               	movlb	0	; () banked
 26071  0178AA  51FA               	movf	_lBufferX& (0+255),w,b
 26072  0178AC  0D01               	mullw	1
 26073  0178AE  50F3               	movf	prodl,w,c
 26074  0178B0  0100               	movlb	0	; () banked
 26075  0178B2  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 26076  0178B4  6ED9               	movwf	fsr2l,c
 26077  0178B6  50F4               	movf	prodh,w,c
 26078  0178B8  0100               	movlb	0	; () banked
 26079  0178BA  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 26080  0178BC  6EDA               	movwf	fsr2h,c
 26081  0178BE  0E80               	movlw	128
 26082  0178C0  6EDF               	movwf	indf2,c
 26083                           
 26084                           ; BSR set to: 0
 26085  0178C2  0012               	return		;funcret
 26086  0178C4                     __end_of_Console_ClearCursor:
 26087                           	opt stack 0
 26088                           tosu	equ	0xFFF
 26089                           tosh	equ	0xFFE
 26090                           tosl	equ	0xFFD
 26091                           pclath	equ	0xFFA
 26092                           tblptru	equ	0xFF8
 26093                           tblptrh	equ	0xFF7
 26094                           tblptrl	equ	0xFF6
 26095                           tablat	equ	0xFF5
 26096                           prodh	equ	0xFF4
 26097                           prodl	equ	0xFF3
 26098                           intcon	equ	0xFF2
 26099                           indf0	equ	0xFEF
 26100                           postinc0	equ	0xFEE
 26101                           fsr0h	equ	0xFEA
 26102                           fsr0l	equ	0xFE9
 26103                           wreg	equ	0xFE8
 26104                           indf1	equ	0xFE7
 26105                           postdec1	equ	0xFE5
 26106                           fsr1h	equ	0xFE2
 26107                           fsr1l	equ	0xFE1
 26108                           indf2	equ	0xFDF
 26109                           postinc2	equ	0xFDE
 26110                           postdec2	equ	0xFDD
 26111                           plusw2	equ	0xFDB
 26112                           fsr2h	equ	0xFDA
 26113                           fsr2l	equ	0xFD9
 26114                           status	equ	0xFD8
 26115                           
 26116 ;; *************** function _fround *****************
 26117 ;; Defined at:
 26118 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 26119 ;; Parameters:    Size  Location     Type
 26120 ;;  prec            1    wreg     unsigned char 
 26121 ;; Auto vars:     Size  Location     Type
 26122 ;;  prec            1   51[BANK0 ] unsigned char 
 26123 ;; Return value:  Size  Location     Type
 26124 ;;                  4   39[BANK0 ] unsigned char 
 26125 ;; Registers used:
 26126 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26127 ;; Tracked objects:
 26128 ;;		On entry : 0/0
 26129 ;;		On exit  : 0/0
 26130 ;;		Unchanged: 0/0
 26131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26132 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26133 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26135 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26136 ;;Total ram usage:       13 bytes
 26137 ;; Hardware stack levels used:    1
 26138 ;; Hardware stack levels required when called:    8
 26139 ;; This function calls:
 26140 ;;		___awdiv
 26141 ;;		___awmod
 26142 ;;		___flmul
 26143 ;; This function is called by:
 26144 ;;		_printf
 26145 ;; This function uses a non-reentrant model
 26146 ;;
 26147                           
 26148                           	psect	text129
 26149  0122B2                     __ptext129:
 26150                           	opt stack 0
 26151  0122B2                     _fround:
 26152                           	opt stack 21
 26153                           
 26154                           ; BSR set to: 0
 26155                           ;incstack = 0
 26156                           ;fround@prec stored from wreg
 26157  0122B2  0100               	movlb	0	; () banked
 26158  0122B4  6F93               	movwf	fround@prec& (0+255),b
 26159                           
 26160                           ;doprnt.c: 413: if(prec>=110)
 26161  0122B6  0E6D               	movlw	109
 26162  0122B8  0100               	movlb	0	; () banked
 26163  0122BA  6593               	cpfsgt	fround@prec& (0+255),b
 26164  0122BC  D0CD               	goto	l2144
 26165                           
 26166                           ; BSR set to: 0
 26167                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 26168  0122BE  0E00               	movlw	0
 26169  0122C0  0100               	movlb	0	; () banked
 26170  0122C2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 26171  0122C4  0E0A               	movlw	10
 26172  0122C6  6F68               	movwf	___awdiv@divisor& (0+255),b
 26173  0122C8  0E00               	movlw	0
 26174  0122CA  0100               	movlb	0	; () banked
 26175  0122CC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 26176  0122CE  0E64               	movlw	100
 26177  0122D0  6F62               	movwf	___awmod@divisor& (0+255),b
 26178  0122D2  C093  F060         	movff	fround@prec,___awmod@dividend
 26179  0122D6  0100               	movlb	0	; () banked
 26180  0122D8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 26181  0122DA  EC68  F0B2         	call	___awmod	;wreg free
 26182  0122DE  C060  F066         	movff	?___awmod,___awdiv@dividend
 26183  0122E2  C061  F067         	movff	?___awmod+1,___awdiv@dividend+1
 26184  0122E6  ECFA  F0AC         	call	___awdiv	;wreg free
 26185  0122EA  0100               	movlb	0	; () banked
 26186  0122EC  90D8               	bcf	status,0,c
 26187  0122EE  3766               	rlcf	?___awdiv& (0+255),f,b
 26188  0122F0  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 26189  0122F2  0100               	movlb	0	; () banked
 26190  0122F4  90D8               	bcf	status,0,c
 26191  0122F6  3766               	rlcf	?___awdiv& (0+255),f,b
 26192  0122F8  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 26193  0122FA  0E24               	movlw	36
 26194  0122FC  0100               	movlb	0	; () banked
 26195  0122FE  2766               	addwf	?___awdiv& (0+255),f,b
 26196  012300  0E00               	movlw	0
 26197  012302  0100               	movlb	0	; () banked
 26198  012304  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 26199  012306  0E43               	movlw	low __npowers_
 26200  012308  0100               	movlb	0	; () banked
 26201  01230A  2566               	addwf	?___awdiv& (0+255),w,b
 26202  01230C  6EF6               	movwf	tblptrl,c
 26203  01230E  0EFC               	movlw	high __npowers_
 26204  012310  0100               	movlb	0	; () banked
 26205  012312  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 26206  012314  6EF7               	movwf	tblptrh,c
 26207  012316                     	if	1	;There are 3 active tblptr bytes
 26208  012316  6AF8               	clrf	tblptru,c
 26209  012318  0E00               	movlw	low (__mediumconst shr (0+16))
 26210  01231A  22F8               	addwfc	tblptru,f,c
 26211  01231C                     	endif
 26212  01231C  0009               	tblrd		*+
 26213  01231E  CFF5 F072          	movff	tablat,___flmul@a
 26214  012322  0009               	tblrd		*+
 26215  012324  CFF5 F073          	movff	tablat,___flmul@a+1
 26216  012328  0009               	tblrd		*+
 26217  01232A  CFF5 F074          	movff	tablat,___flmul@a+2
 26218  01232E  000A               	tblrd		*-
 26219  012330  CFF5 F075          	movff	tablat,___flmul@a+3
 26220  012334  0E00               	movlw	0
 26221  012336  0100               	movlb	0	; () banked
 26222  012338  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 26223  01233A  0E64               	movlw	100
 26224  01233C  6F68               	movwf	___awdiv@divisor& (0+255),b
 26225  01233E  C093  F066         	movff	fround@prec,___awdiv@dividend
 26226  012342  0100               	movlb	0	; () banked
 26227  012344  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 26228  012346  ECFA  F0AC         	call	___awdiv	;wreg free
 26229  01234A  0100               	movlb	0	; () banked
 26230  01234C  90D8               	bcf	status,0,c
 26231  01234E  3766               	rlcf	?___awdiv& (0+255),f,b
 26232  012350  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 26233  012352  0100               	movlb	0	; () banked
 26234  012354  90D8               	bcf	status,0,c
 26235  012356  3766               	rlcf	?___awdiv& (0+255),f,b
 26236  012358  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 26237  01235A  0E48               	movlw	72
 26238  01235C  0100               	movlb	0	; () banked
 26239  01235E  2766               	addwf	?___awdiv& (0+255),f,b
 26240  012360  0E00               	movlw	0
 26241  012362  0100               	movlb	0	; () banked
 26242  012364  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 26243  012366  0E43               	movlw	low __npowers_
 26244  012368  0100               	movlb	0	; () banked
 26245  01236A  2566               	addwf	?___awdiv& (0+255),w,b
 26246  01236C  6EF6               	movwf	tblptrl,c
 26247  01236E  0EFC               	movlw	high __npowers_
 26248  012370  0100               	movlb	0	; () banked
 26249  012372  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 26250  012374  6EF7               	movwf	tblptrh,c
 26251  012376                     	if	1	;There are 3 active tblptr bytes
 26252  012376  6AF8               	clrf	tblptru,c
 26253  012378  0E00               	movlw	low (__mediumconst shr (0+16))
 26254  01237A  22F8               	addwfc	tblptru,f,c
 26255  01237C                     	endif
 26256  01237C  0009               	tblrd		*+
 26257  01237E  CFF5 F06E          	movff	tablat,___flmul@b
 26258  012382  0009               	tblrd		*+
 26259  012384  CFF5 F06F          	movff	tablat,___flmul@b+1
 26260  012388  0009               	tblrd		*+
 26261  01238A  CFF5 F070          	movff	tablat,___flmul@b+2
 26262  01238E  000A               	tblrd		*-
 26263  012390  CFF5 F071          	movff	tablat,___flmul@b+3
 26264  012394  EC3A  F089         	call	___flmul	;wreg free
 26265  012398  C06E  F08F         	movff	?___flmul,_fround$15264
 26266  01239C  C06F  F090         	movff	?___flmul+1,_fround$15264+1
 26267  0123A0  C070  F091         	movff	?___flmul+2,_fround$15264+2
 26268  0123A4  C071  F092         	movff	?___flmul+3,_fround$15264+3
 26269                           
 26270                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 26271  0123A8  0E00               	movlw	0
 26272  0123AA  0100               	movlb	0	; () banked
 26273  0123AC  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 26274  0123AE  0E0A               	movlw	10
 26275  0123B0  6F62               	movwf	___awmod@divisor& (0+255),b
 26276  0123B2  C093  F060         	movff	fround@prec,___awmod@dividend
 26277  0123B6  0100               	movlb	0	; () banked
 26278  0123B8  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 26279  0123BA  EC68  F0B2         	call	___awmod	;wreg free
 26280  0123BE  0100               	movlb	0	; () banked
 26281  0123C0  90D8               	bcf	status,0,c
 26282  0123C2  3760               	rlcf	?___awmod& (0+255),f,b
 26283  0123C4  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 26284  0123C6  0100               	movlb	0	; () banked
 26285  0123C8  90D8               	bcf	status,0,c
 26286  0123CA  3760               	rlcf	?___awmod& (0+255),f,b
 26287  0123CC  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 26288  0123CE  0E43               	movlw	low __npowers_
 26289  0123D0  0100               	movlb	0	; () banked
 26290  0123D2  2560               	addwf	?___awmod& (0+255),w,b
 26291  0123D4  6EF6               	movwf	tblptrl,c
 26292  0123D6  0EFC               	movlw	high __npowers_
 26293  0123D8  0100               	movlb	0	; () banked
 26294  0123DA  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 26295  0123DC  6EF7               	movwf	tblptrh,c
 26296  0123DE                     	if	1	;There are 3 active tblptr bytes
 26297  0123DE  6AF8               	clrf	tblptru,c
 26298  0123E0  0E00               	movlw	low (__mediumconst shr (0+16))
 26299  0123E2  22F8               	addwfc	tblptru,f,c
 26300  0123E4                     	endif
 26301  0123E4  0009               	tblrd		*+
 26302  0123E6  CFF5 F072          	movff	tablat,___flmul@a
 26303  0123EA  0009               	tblrd		*+
 26304  0123EC  CFF5 F073          	movff	tablat,___flmul@a+1
 26305  0123F0  0009               	tblrd		*+
 26306  0123F2  CFF5 F074          	movff	tablat,___flmul@a+2
 26307  0123F6  000A               	tblrd		*-
 26308  0123F8  CFF5 F075          	movff	tablat,___flmul@a+3
 26309  0123FC  C08F  F06E         	movff	_fround$15264,___flmul@b
 26310  012400  C090  F06F         	movff	_fround$15264+1,___flmul@b+1
 26311  012404  C091  F070         	movff	_fround$15264+2,___flmul@b+2
 26312  012408  C092  F071         	movff	_fround$15264+3,___flmul@b+3
 26313  01240C  EC3A  F089         	call	___flmul	;wreg free
 26314  012410  C06E  F08B         	movff	?___flmul,_fround$15265
 26315  012414  C06F  F08C         	movff	?___flmul+1,_fround$15265+1
 26316  012418  C070  F08D         	movff	?___flmul+2,_fround$15265+2
 26317  01241C  C071  F08E         	movff	?___flmul+3,_fround$15265+3
 26318                           
 26319                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
 26320  012420  C08B  F06E         	movff	_fround$15265,___flmul@b
 26321  012424  C08C  F06F         	movff	_fround$15265+1,___flmul@b+1
 26322  012428  C08D  F070         	movff	_fround$15265+2,___flmul@b+2
 26323  01242C  C08E  F071         	movff	_fround$15265+3,___flmul@b+3
 26324  012430  0E00               	movlw	0
 26325  012432  0100               	movlb	0	; () banked
 26326  012434  6F72               	movwf	___flmul@a& (0+255),b
 26327  012436  0E00               	movlw	0
 26328  012438  6F73               	movwf	(___flmul@a+1)& (0+255),b
 26329  01243A  0E00               	movlw	0
 26330  01243C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 26331  01243E  0E3F               	movlw	63
 26332  012440  6F75               	movwf	(___flmul@a+3)& (0+255),b
 26333  012442  EC3A  F089         	call	___flmul	;wreg free
 26334  012446  C06E  F087         	movff	?___flmul,?_fround
 26335  01244A  C06F  F088         	movff	?___flmul+1,?_fround+1
 26336  01244E  C070  F089         	movff	?___flmul+2,?_fround+2
 26337  012452  C071  F08A         	movff	?___flmul+3,?_fround+3
 26338  012456  0012               	return	
 26339  012458                     l2144:
 26340                           
 26341                           ;doprnt.c: 415: else if(prec > 10)
 26342  012458  0E0A               	movlw	10
 26343  01245A  0100               	movlb	0	; () banked
 26344  01245C  6593               	cpfsgt	fround@prec& (0+255),b
 26345  01245E  D080               	goto	l2147
 26346                           
 26347                           ; BSR set to: 0
 26348                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 26349  012460  0E00               	movlw	0
 26350  012462  0100               	movlb	0	; () banked
 26351  012464  6F63               	movwf	(___awmod@divisor+1)& (0+255),b
 26352  012466  0E0A               	movlw	10
 26353  012468  6F62               	movwf	___awmod@divisor& (0+255),b
 26354  01246A  C093  F060         	movff	fround@prec,___awmod@dividend
 26355  01246E  0100               	movlb	0	; () banked
 26356  012470  6B61               	clrf	(___awmod@dividend+1)& (0+255),b
 26357  012472  EC68  F0B2         	call	___awmod	;wreg free
 26358  012476  0100               	movlb	0	; () banked
 26359  012478  90D8               	bcf	status,0,c
 26360  01247A  3760               	rlcf	?___awmod& (0+255),f,b
 26361  01247C  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 26362  01247E  0100               	movlb	0	; () banked
 26363  012480  90D8               	bcf	status,0,c
 26364  012482  3760               	rlcf	?___awmod& (0+255),f,b
 26365  012484  3761               	rlcf	(?___awmod+1)& (0+255),f,b
 26366  012486  0E43               	movlw	low __npowers_
 26367  012488  0100               	movlb	0	; () banked
 26368  01248A  2560               	addwf	?___awmod& (0+255),w,b
 26369  01248C  6EF6               	movwf	tblptrl,c
 26370  01248E  0EFC               	movlw	high __npowers_
 26371  012490  0100               	movlb	0	; () banked
 26372  012492  2161               	addwfc	(?___awmod+1)& (0+255),w,b
 26373  012494  6EF7               	movwf	tblptrh,c
 26374  012496                     	if	1	;There are 3 active tblptr bytes
 26375  012496  6AF8               	clrf	tblptru,c
 26376  012498  0E00               	movlw	low (__mediumconst shr (0+16))
 26377  01249A  22F8               	addwfc	tblptru,f,c
 26378  01249C                     	endif
 26379  01249C  0009               	tblrd		*+
 26380  01249E  CFF5 F072          	movff	tablat,___flmul@a
 26381  0124A2  0009               	tblrd		*+
 26382  0124A4  CFF5 F073          	movff	tablat,___flmul@a+1
 26383  0124A8  0009               	tblrd		*+
 26384  0124AA  CFF5 F074          	movff	tablat,___flmul@a+2
 26385  0124AE  000A               	tblrd		*-
 26386  0124B0  CFF5 F075          	movff	tablat,___flmul@a+3
 26387  0124B4  0E00               	movlw	0
 26388  0124B6  0100               	movlb	0	; () banked
 26389  0124B8  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 26390  0124BA  0E0A               	movlw	10
 26391  0124BC  6F68               	movwf	___awdiv@divisor& (0+255),b
 26392  0124BE  C093  F066         	movff	fround@prec,___awdiv@dividend
 26393  0124C2  0100               	movlb	0	; () banked
 26394  0124C4  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 26395  0124C6  ECFA  F0AC         	call	___awdiv	;wreg free
 26396  0124CA  0100               	movlb	0	; () banked
 26397  0124CC  90D8               	bcf	status,0,c
 26398  0124CE  3766               	rlcf	?___awdiv& (0+255),f,b
 26399  0124D0  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 26400  0124D2  0100               	movlb	0	; () banked
 26401  0124D4  90D8               	bcf	status,0,c
 26402  0124D6  3766               	rlcf	?___awdiv& (0+255),f,b
 26403  0124D8  3767               	rlcf	(?___awdiv+1)& (0+255),f,b
 26404  0124DA  0E24               	movlw	36
 26405  0124DC  0100               	movlb	0	; () banked
 26406  0124DE  2766               	addwf	?___awdiv& (0+255),f,b
 26407  0124E0  0E00               	movlw	0
 26408  0124E2  0100               	movlb	0	; () banked
 26409  0124E4  2367               	addwfc	(?___awdiv+1)& (0+255),f,b
 26410  0124E6  0E43               	movlw	low __npowers_
 26411  0124E8  0100               	movlb	0	; () banked
 26412  0124EA  2566               	addwf	?___awdiv& (0+255),w,b
 26413  0124EC  6EF6               	movwf	tblptrl,c
 26414  0124EE  0EFC               	movlw	high __npowers_
 26415  0124F0  0100               	movlb	0	; () banked
 26416  0124F2  2167               	addwfc	(?___awdiv+1)& (0+255),w,b
 26417  0124F4  6EF7               	movwf	tblptrh,c
 26418  0124F6                     	if	1	;There are 3 active tblptr bytes
 26419  0124F6  6AF8               	clrf	tblptru,c
 26420  0124F8  0E00               	movlw	low (__mediumconst shr (0+16))
 26421  0124FA  22F8               	addwfc	tblptru,f,c
 26422  0124FC                     	endif
 26423  0124FC  0009               	tblrd		*+
 26424  0124FE  CFF5 F06E          	movff	tablat,___flmul@b
 26425  012502  0009               	tblrd		*+
 26426  012504  CFF5 F06F          	movff	tablat,___flmul@b+1
 26427  012508  0009               	tblrd		*+
 26428  01250A  CFF5 F070          	movff	tablat,___flmul@b+2
 26429  01250E  000A               	tblrd		*-
 26430  012510  CFF5 F071          	movff	tablat,___flmul@b+3
 26431  012514  EC3A  F089         	call	___flmul	;wreg free
 26432  012518  C06E  F08F         	movff	?___flmul,_fround$15264
 26433  01251C  C06F  F090         	movff	?___flmul+1,_fround$15264+1
 26434  012520  C070  F091         	movff	?___flmul+2,_fround$15264+2
 26435  012524  C071  F092         	movff	?___flmul+3,_fround$15264+3
 26436                           
 26437                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
 26438  012528  C08F  F06E         	movff	_fround$15264,___flmul@b
 26439  01252C  C090  F06F         	movff	_fround$15264+1,___flmul@b+1
 26440  012530  C091  F070         	movff	_fround$15264+2,___flmul@b+2
 26441  012534  C092  F071         	movff	_fround$15264+3,___flmul@b+3
 26442  012538  0E00               	movlw	0
 26443  01253A  0100               	movlb	0	; () banked
 26444  01253C  6F72               	movwf	___flmul@a& (0+255),b
 26445  01253E  0E00               	movlw	0
 26446  012540  6F73               	movwf	(___flmul@a+1)& (0+255),b
 26447  012542  0E00               	movlw	0
 26448  012544  6F74               	movwf	(___flmul@a+2)& (0+255),b
 26449  012546  0E3F               	movlw	63
 26450  012548  6F75               	movwf	(___flmul@a+3)& (0+255),b
 26451  01254A  EC3A  F089         	call	___flmul	;wreg free
 26452  01254E  C06E  F087         	movff	?___flmul,?_fround
 26453  012552  C06F  F088         	movff	?___flmul+1,?_fround+1
 26454  012556  C070  F089         	movff	?___flmul+2,?_fround+2
 26455  01255A  C071  F08A         	movff	?___flmul+3,?_fround+3
 26456  01255E  0012               	return	
 26457  012560                     l2147:
 26458                           
 26459                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
 26460  012560  0100               	movlb	0	; () banked
 26461  012562  5193               	movf	fround@prec& (0+255),w,b
 26462  012564  0D04               	mullw	4
 26463  012566  0E43               	movlw	low __npowers_
 26464  012568  24F3               	addwf	prodl,w,c
 26465  01256A  6EF6               	movwf	tblptrl,c
 26466  01256C  0EFC               	movlw	high __npowers_
 26467  01256E  20F4               	addwfc	prodh,w,c
 26468  012570  6EF7               	movwf	tblptrh,c
 26469  012572                     	if	1	;There are 3 active tblptr bytes
 26470  012572  6AF8               	clrf	tblptru,c
 26471  012574  0E00               	movlw	low (__mediumconst shr (0+16))
 26472  012576  22F8               	addwfc	tblptru,f,c
 26473  012578                     	endif
 26474  012578  0009               	tblrd		*+
 26475  01257A  CFF5 F06E          	movff	tablat,___flmul@b
 26476  01257E  0009               	tblrd		*+
 26477  012580  CFF5 F06F          	movff	tablat,___flmul@b+1
 26478  012584  0009               	tblrd		*+
 26479  012586  CFF5 F070          	movff	tablat,___flmul@b+2
 26480  01258A  000A               	tblrd		*-
 26481  01258C  CFF5 F071          	movff	tablat,___flmul@b+3
 26482  012590  0E00               	movlw	0
 26483  012592  0100               	movlb	0	; () banked
 26484  012594  6F72               	movwf	___flmul@a& (0+255),b
 26485  012596  0E00               	movlw	0
 26486  012598  6F73               	movwf	(___flmul@a+1)& (0+255),b
 26487  01259A  0E00               	movlw	0
 26488  01259C  6F74               	movwf	(___flmul@a+2)& (0+255),b
 26489  01259E  0E3F               	movlw	63
 26490  0125A0  6F75               	movwf	(___flmul@a+3)& (0+255),b
 26491  0125A2  EC3A  F089         	call	___flmul	;wreg free
 26492  0125A6  C06E  F087         	movff	?___flmul,?_fround
 26493  0125AA  C06F  F088         	movff	?___flmul+1,?_fround+1
 26494  0125AE  C070  F089         	movff	?___flmul+2,?_fround+2
 26495  0125B2  C071  F08A         	movff	?___flmul+3,?_fround+3
 26496  0125B6  0012               	return	
 26497  0125B8                     __end_of_fround:
 26498                           	opt stack 0
 26499                           tosu	equ	0xFFF
 26500                           tosh	equ	0xFFE
 26501                           tosl	equ	0xFFD
 26502                           pclath	equ	0xFFA
 26503                           tblptru	equ	0xFF8
 26504                           tblptrh	equ	0xFF7
 26505                           tblptrl	equ	0xFF6
 26506                           tablat	equ	0xFF5
 26507                           prodh	equ	0xFF4
 26508                           prodl	equ	0xFF3
 26509                           intcon	equ	0xFF2
 26510                           indf0	equ	0xFEF
 26511                           postinc0	equ	0xFEE
 26512                           fsr0h	equ	0xFEA
 26513                           fsr0l	equ	0xFE9
 26514                           wreg	equ	0xFE8
 26515                           indf1	equ	0xFE7
 26516                           postdec1	equ	0xFE5
 26517                           fsr1h	equ	0xFE2
 26518                           fsr1l	equ	0xFE1
 26519                           indf2	equ	0xFDF
 26520                           postinc2	equ	0xFDE
 26521                           postdec2	equ	0xFDD
 26522                           plusw2	equ	0xFDB
 26523                           fsr2h	equ	0xFDA
 26524                           fsr2l	equ	0xFD9
 26525                           status	equ	0xFD8
 26526                           
 26527 ;; *************** function ___flmul *****************
 26528 ;; Defined at:
 26529 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 26530 ;; Parameters:    Size  Location     Type
 26531 ;;  b               4   14[BANK0 ] unsigned char 
 26532 ;;  a               4   18[BANK0 ] unsigned char 
 26533 ;; Auto vars:     Size  Location     Type
 26534 ;;  prod            4   33[BANK0 ] struct .
 26535 ;;  grs             4   28[BANK0 ] unsigned long 
 26536 ;;  temp            2   37[BANK0 ] struct .
 26537 ;;  bexp            1   32[BANK0 ] unsigned char 
 26538 ;;  aexp            1   27[BANK0 ] unsigned char 
 26539 ;;  sign            1   26[BANK0 ] unsigned char 
 26540 ;; Return value:  Size  Location     Type
 26541 ;;                  4   14[BANK0 ] unsigned char 
 26542 ;; Registers used:
 26543 ;;		wreg, status,2, status,0, prodl, prodh
 26544 ;; Tracked objects:
 26545 ;;		On entry : 0/0
 26546 ;;		On exit  : 0/0
 26547 ;;		Unchanged: 0/0
 26548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26549 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26550 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26551 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26552 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26553 ;;Total ram usage:       25 bytes
 26554 ;; Hardware stack levels used:    1
 26555 ;; Hardware stack levels required when called:    7
 26556 ;; This function calls:
 26557 ;;		Nothing
 26558 ;; This function is called by:
 26559 ;;		_ADC_Voltage
 26560 ;;		_displayPositionMode
 26561 ;;		_fround
 26562 ;;		_scale
 26563 ;;		_printf
 26564 ;;		_pow
 26565 ;;		_exp
 26566 ;;		_log
 26567 ;;		_eval_poly
 26568 ;; This function uses a non-reentrant model
 26569 ;;
 26570                           
 26571                           	psect	text130
 26572  011274                     __ptext130:
 26573                           	opt stack 0
 26574  011274                     ___flmul:
 26575                           	opt stack 21
 26576                           
 26577                           ;incstack = 0
 26578  011274  0100               	movlb	0	; () banked
 26579  011276  5171               	movf	(___flmul@b+3)& (0+255),w,b
 26580  011278  0B80               	andlw	128
 26581  01127A  0100               	movlb	0	; () banked
 26582  01127C  6F7A               	movwf	___flmul@sign& (0+255),b
 26583  01127E  0100               	movlb	0	; () banked
 26584  011280  5171               	movf	(___flmul@b+3)& (0+255),w,b
 26585  011282  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 26586  011284  0100               	movlb	0	; () banked
 26587  011286  6F80               	movwf	___flmul@bexp& (0+255),b
 26588                           
 26589                           ; BSR set to: 0
 26590  011288  0100               	movlb	0	; () banked
 26591  01128A  AF70               	btfss	(___flmul@b+2)& (0+255),7,b
 26592  01128C  D002               	goto	l2790
 26593                           
 26594                           ; BSR set to: 0
 26595  01128E  0100               	movlb	0	; () banked
 26596  011290  8180               	bsf	___flmul@bexp& (0+255),0,b
 26597  011292                     l2790:
 26598                           
 26599                           ; BSR set to: 0
 26600                           
 26601                           ; BSR set to: 0
 26602  011292  0100               	movlb	0	; () banked
 26603  011294  5180               	movf	___flmul@bexp& (0+255),w,b
 26604  011296  0100               	movlb	0	; () banked
 26605  011298  B4D8               	btfsc	status,2,c
 26606  01129A  D010               	goto	l2791
 26607                           
 26608                           ; BSR set to: 0
 26609  01129C  0100               	movlb	0	; () banked
 26610  01129E  2980               	incf	___flmul@bexp& (0+255),w,b
 26611  0112A0  A4D8               	btfss	status,2,c
 26612  0112A2  D009               	goto	l2792
 26613                           
 26614                           ; BSR set to: 0
 26615  0112A4  0E00               	movlw	0
 26616  0112A6  0100               	movlb	0	; () banked
 26617  0112A8  6F6E               	movwf	___flmul@b& (0+255),b
 26618  0112AA  0E00               	movlw	0
 26619  0112AC  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 26620  0112AE  0E00               	movlw	0
 26621  0112B0  6F70               	movwf	(___flmul@b+2)& (0+255),b
 26622  0112B2  0E00               	movlw	0
 26623  0112B4  6F71               	movwf	(___flmul@b+3)& (0+255),b
 26624  0112B6                     l2792:
 26625                           
 26626                           ; BSR set to: 0
 26627                           
 26628                           ; BSR set to: 0
 26629  0112B6  0100               	movlb	0	; () banked
 26630  0112B8  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 26631  0112BA  D009               	goto	l2793
 26632  0112BC                     l2791:
 26633                           
 26634                           ; BSR set to: 0
 26635                           
 26636                           ; BSR set to: 0
 26637  0112BC  0E00               	movlw	0
 26638  0112BE  0100               	movlb	0	; () banked
 26639  0112C0  6F6E               	movwf	___flmul@b& (0+255),b
 26640  0112C2  0E00               	movlw	0
 26641  0112C4  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 26642  0112C6  0E00               	movlw	0
 26643  0112C8  6F70               	movwf	(___flmul@b+2)& (0+255),b
 26644  0112CA  0E00               	movlw	0
 26645  0112CC  6F71               	movwf	(___flmul@b+3)& (0+255),b
 26646  0112CE                     l2793:
 26647                           
 26648                           ; BSR set to: 0
 26649                           
 26650                           ; BSR set to: 0
 26651  0112CE  0100               	movlb	0	; () banked
 26652  0112D0  5175               	movf	(___flmul@a+3)& (0+255),w,b
 26653  0112D2  0B80               	andlw	128
 26654  0112D4  0100               	movlb	0	; () banked
 26655  0112D6  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 26656                           
 26657                           ; BSR set to: 0
 26658  0112D8  0100               	movlb	0	; () banked
 26659  0112DA  5175               	movf	(___flmul@a+3)& (0+255),w,b
 26660  0112DC  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 26661  0112DE  0100               	movlb	0	; () banked
 26662  0112E0  6F7B               	movwf	___flmul@aexp& (0+255),b
 26663                           
 26664                           ; BSR set to: 0
 26665  0112E2  0100               	movlb	0	; () banked
 26666  0112E4  AF74               	btfss	(___flmul@a+2)& (0+255),7,b
 26667  0112E6  D002               	goto	l2794
 26668                           
 26669                           ; BSR set to: 0
 26670  0112E8  0100               	movlb	0	; () banked
 26671  0112EA  817B               	bsf	___flmul@aexp& (0+255),0,b
 26672  0112EC                     l2794:
 26673                           
 26674                           ; BSR set to: 0
 26675                           
 26676                           ; BSR set to: 0
 26677  0112EC  0100               	movlb	0	; () banked
 26678  0112EE  517B               	movf	___flmul@aexp& (0+255),w,b
 26679  0112F0  0100               	movlb	0	; () banked
 26680  0112F2  B4D8               	btfsc	status,2,c
 26681  0112F4  D010               	goto	l2795
 26682                           
 26683                           ; BSR set to: 0
 26684  0112F6  0100               	movlb	0	; () banked
 26685  0112F8  297B               	incf	___flmul@aexp& (0+255),w,b
 26686  0112FA  A4D8               	btfss	status,2,c
 26687  0112FC  D009               	goto	l2796
 26688                           
 26689                           ; BSR set to: 0
 26690  0112FE  0E00               	movlw	0
 26691  011300  0100               	movlb	0	; () banked
 26692  011302  6F72               	movwf	___flmul@a& (0+255),b
 26693  011304  0E00               	movlw	0
 26694  011306  6F73               	movwf	(___flmul@a+1)& (0+255),b
 26695  011308  0E00               	movlw	0
 26696  01130A  6F74               	movwf	(___flmul@a+2)& (0+255),b
 26697  01130C  0E00               	movlw	0
 26698  01130E  6F75               	movwf	(___flmul@a+3)& (0+255),b
 26699  011310                     l2796:
 26700                           
 26701                           ; BSR set to: 0
 26702                           
 26703                           ; BSR set to: 0
 26704  011310  0100               	movlb	0	; () banked
 26705  011312  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 26706  011314  D009               	goto	l2797
 26707  011316                     l2795:
 26708                           
 26709                           ; BSR set to: 0
 26710                           
 26711                           ; BSR set to: 0
 26712  011316  0E00               	movlw	0
 26713  011318  0100               	movlb	0	; () banked
 26714  01131A  6F72               	movwf	___flmul@a& (0+255),b
 26715  01131C  0E00               	movlw	0
 26716  01131E  6F73               	movwf	(___flmul@a+1)& (0+255),b
 26717  011320  0E00               	movlw	0
 26718  011322  6F74               	movwf	(___flmul@a+2)& (0+255),b
 26719  011324  0E00               	movlw	0
 26720  011326  6F75               	movwf	(___flmul@a+3)& (0+255),b
 26721  011328                     l2797:
 26722                           
 26723                           ; BSR set to: 0
 26724  011328  0100               	movlb	0	; () banked
 26725  01132A  517B               	movf	___flmul@aexp& (0+255),w,b
 26726  01132C  0100               	movlb	0	; () banked
 26727  01132E  B4D8               	btfsc	status,2,c
 26728  011330  D005               	goto	u11350
 26729                           
 26730                           ; BSR set to: 0
 26731  011332  0100               	movlb	0	; () banked
 26732  011334  5180               	movf	___flmul@bexp& (0+255),w,b
 26733  011336  0100               	movlb	0	; () banked
 26734  011338  A4D8               	btfss	status,2,c
 26735  01133A  D00A               	goto	l2798
 26736  01133C                     u11350:
 26737                           
 26738                           ; BSR set to: 0
 26739                           
 26740                           ; BSR set to: 0
 26741  01133C  0E00               	movlw	0
 26742  01133E  0100               	movlb	0	; () banked
 26743  011340  6F6E               	movwf	?___flmul& (0+255),b
 26744  011342  0E00               	movlw	0
 26745  011344  6F6F               	movwf	(?___flmul+1)& (0+255),b
 26746  011346  0E00               	movlw	0
 26747  011348  6F70               	movwf	(?___flmul+2)& (0+255),b
 26748  01134A  0E00               	movlw	0
 26749  01134C  6F71               	movwf	(?___flmul+3)& (0+255),b
 26750                           
 26751                           ; BSR set to: 0
 26752  01134E  0012               	return	
 26753  011350                     l2798:
 26754                           
 26755                           ; BSR set to: 0
 26756                           
 26757                           ; BSR set to: 0
 26758  011350  0100               	movlb	0	; () banked
 26759  011352  5174               	movf	(___flmul@a+2)& (0+255),w,b
 26760  011354  0100               	movlb	0	; () banked
 26761  011356  036E               	mulwf	___flmul@b& (0+255),b
 26762  011358  CFF3 F085          	movff	prodl,___flmul@temp
 26763  01135C  CFF4 F086          	movff	prodh,___flmul@temp+1
 26764                           
 26765                           ; BSR set to: 0
 26766  011360  0100               	movlb	0	; () banked
 26767  011362  5185               	movf	___flmul@temp& (0+255),w,b
 26768  011364  0100               	movlb	0	; () banked
 26769  011366  6F7C               	movwf	___flmul@grs& (0+255),b
 26770  011368  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 26771  01136A  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 26772  01136C  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 26773                           
 26774                           ; BSR set to: 0
 26775  01136E  0100               	movlb	0	; () banked
 26776  011370  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26777  011372  0100               	movlb	0	; () banked
 26778  011374  6F81               	movwf	___flmul@prod& (0+255),b
 26779  011376  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 26780  011378  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 26781  01137A  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 26782  01137C  0100               	movlb	0	; () banked
 26783  01137E  5173               	movf	(___flmul@a+1)& (0+255),w,b
 26784  011380  0100               	movlb	0	; () banked
 26785  011382  036F               	mulwf	(___flmul@b+1)& (0+255),b
 26786  011384  CFF3 F085          	movff	prodl,___flmul@temp
 26787  011388  CFF4 F086          	movff	prodh,___flmul@temp+1
 26788                           
 26789                           ; BSR set to: 0
 26790  01138C  0100               	movlb	0	; () banked
 26791  01138E  5185               	movf	___flmul@temp& (0+255),w,b
 26792  011390  0100               	movlb	0	; () banked
 26793  011392  277C               	addwf	___flmul@grs& (0+255),f,b
 26794  011394  0E00               	movlw	0
 26795  011396  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 26796  011398  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 26797  01139A  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 26798                           
 26799                           ; BSR set to: 0
 26800  01139C  0100               	movlb	0	; () banked
 26801  01139E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26802  0113A0  0100               	movlb	0	; () banked
 26803  0113A2  2781               	addwf	___flmul@prod& (0+255),f,b
 26804  0113A4  0E00               	movlw	0
 26805  0113A6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 26806  0113A8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 26807  0113AA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 26808  0113AC  0100               	movlb	0	; () banked
 26809  0113AE  5172               	movf	___flmul@a& (0+255),w,b
 26810  0113B0  0100               	movlb	0	; () banked
 26811  0113B2  0370               	mulwf	(___flmul@b+2)& (0+255),b
 26812  0113B4  CFF3 F085          	movff	prodl,___flmul@temp
 26813  0113B8  CFF4 F086          	movff	prodh,___flmul@temp+1
 26814                           
 26815                           ; BSR set to: 0
 26816  0113BC  0100               	movlb	0	; () banked
 26817  0113BE  5185               	movf	___flmul@temp& (0+255),w,b
 26818  0113C0  0100               	movlb	0	; () banked
 26819  0113C2  277C               	addwf	___flmul@grs& (0+255),f,b
 26820  0113C4  0E00               	movlw	0
 26821  0113C6  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 26822  0113C8  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 26823  0113CA  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 26824                           
 26825                           ; BSR set to: 0
 26826  0113CC  0100               	movlb	0	; () banked
 26827  0113CE  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26828  0113D0  0100               	movlb	0	; () banked
 26829  0113D2  2781               	addwf	___flmul@prod& (0+255),f,b
 26830  0113D4  0E00               	movlw	0
 26831  0113D6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 26832  0113D8  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 26833  0113DA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 26834                           
 26835                           ; BSR set to: 0
 26836  0113DC  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 26837  0113E0  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 26838  0113E4  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 26839  0113E8  0100               	movlb	0	; () banked
 26840  0113EA  6B7C               	clrf	___flmul@grs& (0+255),b
 26841                           
 26842                           ; BSR set to: 0
 26843  0113EC  0100               	movlb	0	; () banked
 26844  0113EE  5172               	movf	___flmul@a& (0+255),w,b
 26845  0113F0  0100               	movlb	0	; () banked
 26846  0113F2  036F               	mulwf	(___flmul@b+1)& (0+255),b
 26847  0113F4  CFF3 F085          	movff	prodl,___flmul@temp
 26848  0113F8  CFF4 F086          	movff	prodh,___flmul@temp+1
 26849                           
 26850                           ; BSR set to: 0
 26851  0113FC  0100               	movlb	0	; () banked
 26852  0113FE  5185               	movf	___flmul@temp& (0+255),w,b
 26853  011400  0100               	movlb	0	; () banked
 26854  011402  277C               	addwf	___flmul@grs& (0+255),f,b
 26855  011404  0100               	movlb	0	; () banked
 26856  011406  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26857  011408  0100               	movlb	0	; () banked
 26858  01140A  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 26859  01140C  0E00               	movlw	0
 26860  01140E  0100               	movlb	0	; () banked
 26861  011410  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 26862  011412  0E00               	movlw	0
 26863  011414  0100               	movlb	0	; () banked
 26864  011416  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 26865                           
 26866                           ; BSR set to: 0
 26867  011418  0100               	movlb	0	; () banked
 26868  01141A  5173               	movf	(___flmul@a+1)& (0+255),w,b
 26869  01141C  0100               	movlb	0	; () banked
 26870  01141E  036E               	mulwf	___flmul@b& (0+255),b
 26871  011420  CFF3 F085          	movff	prodl,___flmul@temp
 26872  011424  CFF4 F086          	movff	prodh,___flmul@temp+1
 26873                           
 26874                           ; BSR set to: 0
 26875  011428  0100               	movlb	0	; () banked
 26876  01142A  5185               	movf	___flmul@temp& (0+255),w,b
 26877  01142C  0100               	movlb	0	; () banked
 26878  01142E  277C               	addwf	___flmul@grs& (0+255),f,b
 26879  011430  0100               	movlb	0	; () banked
 26880  011432  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26881  011434  0100               	movlb	0	; () banked
 26882  011436  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 26883  011438  0E00               	movlw	0
 26884  01143A  0100               	movlb	0	; () banked
 26885  01143C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 26886  01143E  0E00               	movlw	0
 26887  011440  0100               	movlb	0	; () banked
 26888  011442  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 26889                           
 26890                           ; BSR set to: 0
 26891  011444  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 26892  011448  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 26893  01144C  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 26894  011450  0100               	movlb	0	; () banked
 26895  011452  6B7C               	clrf	___flmul@grs& (0+255),b
 26896  011454  0100               	movlb	0	; () banked
 26897  011456  5172               	movf	___flmul@a& (0+255),w,b
 26898  011458  0100               	movlb	0	; () banked
 26899  01145A  036E               	mulwf	___flmul@b& (0+255),b
 26900  01145C  CFF3 F085          	movff	prodl,___flmul@temp
 26901  011460  CFF4 F086          	movff	prodh,___flmul@temp+1
 26902                           
 26903                           ; BSR set to: 0
 26904  011464  0100               	movlb	0	; () banked
 26905  011466  5185               	movf	___flmul@temp& (0+255),w,b
 26906  011468  0100               	movlb	0	; () banked
 26907  01146A  277C               	addwf	___flmul@grs& (0+255),f,b
 26908  01146C  0100               	movlb	0	; () banked
 26909  01146E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26910  011470  0100               	movlb	0	; () banked
 26911  011472  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 26912  011474  0E00               	movlw	0
 26913  011476  0100               	movlb	0	; () banked
 26914  011478  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 26915  01147A  0E00               	movlw	0
 26916  01147C  0100               	movlb	0	; () banked
 26917  01147E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 26918                           
 26919                           ; BSR set to: 0
 26920  011480  0100               	movlb	0	; () banked
 26921  011482  5174               	movf	(___flmul@a+2)& (0+255),w,b
 26922  011484  0100               	movlb	0	; () banked
 26923  011486  036F               	mulwf	(___flmul@b+1)& (0+255),b
 26924  011488  CFF3 F085          	movff	prodl,___flmul@temp
 26925  01148C  CFF4 F086          	movff	prodh,___flmul@temp+1
 26926  011490  0100               	movlb	0	; () banked
 26927  011492  5185               	movf	___flmul@temp& (0+255),w,b
 26928  011494  0100               	movlb	0	; () banked
 26929  011496  2781               	addwf	___flmul@prod& (0+255),f,b
 26930  011498  0100               	movlb	0	; () banked
 26931  01149A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26932  01149C  0100               	movlb	0	; () banked
 26933  01149E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 26934  0114A0  0E00               	movlw	0
 26935  0114A2  0100               	movlb	0	; () banked
 26936  0114A4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 26937  0114A6  0E00               	movlw	0
 26938  0114A8  0100               	movlb	0	; () banked
 26939  0114AA  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 26940                           
 26941                           ; BSR set to: 0
 26942  0114AC  0100               	movlb	0	; () banked
 26943  0114AE  5173               	movf	(___flmul@a+1)& (0+255),w,b
 26944  0114B0  0100               	movlb	0	; () banked
 26945  0114B2  0370               	mulwf	(___flmul@b+2)& (0+255),b
 26946  0114B4  CFF3 F085          	movff	prodl,___flmul@temp
 26947  0114B8  CFF4 F086          	movff	prodh,___flmul@temp+1
 26948                           
 26949                           ; BSR set to: 0
 26950  0114BC  0100               	movlb	0	; () banked
 26951  0114BE  5185               	movf	___flmul@temp& (0+255),w,b
 26952  0114C0  0100               	movlb	0	; () banked
 26953  0114C2  2781               	addwf	___flmul@prod& (0+255),f,b
 26954  0114C4  0100               	movlb	0	; () banked
 26955  0114C6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26956  0114C8  0100               	movlb	0	; () banked
 26957  0114CA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 26958  0114CC  0E00               	movlw	0
 26959  0114CE  0100               	movlb	0	; () banked
 26960  0114D0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 26961  0114D2  0E00               	movlw	0
 26962  0114D4  0100               	movlb	0	; () banked
 26963  0114D6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 26964  0114D8  0100               	movlb	0	; () banked
 26965  0114DA  5174               	movf	(___flmul@a+2)& (0+255),w,b
 26966  0114DC  0100               	movlb	0	; () banked
 26967  0114DE  0370               	mulwf	(___flmul@b+2)& (0+255),b
 26968  0114E0  CFF3 F085          	movff	prodl,___flmul@temp
 26969  0114E4  CFF4 F086          	movff	prodh,___flmul@temp+1
 26970                           
 26971                           ; BSR set to: 0
 26972  0114E8  0100               	movlb	0	; () banked
 26973  0114EA  5185               	movf	___flmul@temp& (0+255),w,b
 26974  0114EC  0100               	movlb	0	; () banked
 26975  0114EE  6F76               	movwf	??___flmul& (0+255),b
 26976  0114F0  0100               	movlb	0	; () banked
 26977  0114F2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 26978  0114F4  0100               	movlb	0	; () banked
 26979  0114F6  6F77               	movwf	(??___flmul+1)& (0+255),b
 26980  0114F8  0100               	movlb	0	; () banked
 26981  0114FA  6B78               	clrf	(??___flmul+2)& (0+255),b
 26982  0114FC  0100               	movlb	0	; () banked
 26983  0114FE  6B79               	clrf	(??___flmul+3)& (0+255),b
 26984  011500  C078  F079         	movff	??___flmul+2,??___flmul+3
 26985  011504  C077  F078         	movff	??___flmul+1,??___flmul+2
 26986  011508  C076  F077         	movff	??___flmul,??___flmul+1
 26987  01150C  0100               	movlb	0	; () banked
 26988  01150E  6B76               	clrf	??___flmul& (0+255),b
 26989  011510  0100               	movlb	0	; () banked
 26990  011512  5176               	movf	??___flmul& (0+255),w,b
 26991  011514  0100               	movlb	0	; () banked
 26992  011516  2781               	addwf	___flmul@prod& (0+255),f,b
 26993  011518  0100               	movlb	0	; () banked
 26994  01151A  5177               	movf	(??___flmul+1)& (0+255),w,b
 26995  01151C  0100               	movlb	0	; () banked
 26996  01151E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 26997  011520  0100               	movlb	0	; () banked
 26998  011522  5178               	movf	(??___flmul+2)& (0+255),w,b
 26999  011524  0100               	movlb	0	; () banked
 27000  011526  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27001  011528  0100               	movlb	0	; () banked
 27002  01152A  5179               	movf	(??___flmul+3)& (0+255),w,b
 27003  01152C  0100               	movlb	0	; () banked
 27004  01152E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27005                           
 27006                           ; BSR set to: 0
 27007  011530  C07C  F076         	movff	___flmul@grs,??___flmul
 27008  011534  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 27009  011538  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 27010  01153C  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 27011  011540  0E19               	movlw	25
 27012  011542  D006               	goto	u11360
 27013  011544                     u11365:
 27014  011544  0100               	movlb	0	; () banked
 27015  011546  90D8               	bcf	status,0,c
 27016  011548  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 27017  01154A  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 27018  01154C  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 27019  01154E  3376               	rrcf	??___flmul& (0+255),f,b
 27020  011550                     u11360:
 27021  011550  2EE8               	decfsz	wreg,f,c
 27022  011552  D7F8               	goto	u11365
 27023  011554  0100               	movlb	0	; () banked
 27024  011556  5176               	movf	??___flmul& (0+255),w,b
 27025  011558  0100               	movlb	0	; () banked
 27026  01155A  2781               	addwf	___flmul@prod& (0+255),f,b
 27027  01155C  0100               	movlb	0	; () banked
 27028  01155E  5177               	movf	(??___flmul+1)& (0+255),w,b
 27029  011560  0100               	movlb	0	; () banked
 27030  011562  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27031  011564  0100               	movlb	0	; () banked
 27032  011566  5178               	movf	(??___flmul+2)& (0+255),w,b
 27033  011568  0100               	movlb	0	; () banked
 27034  01156A  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27035  01156C  0100               	movlb	0	; () banked
 27036  01156E  5179               	movf	(??___flmul+3)& (0+255),w,b
 27037  011570  0100               	movlb	0	; () banked
 27038  011572  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27039                           
 27040                           ; BSR set to: 0
 27041  011574  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 27042  011578  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 27043  01157C  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 27044  011580  0100               	movlb	0	; () banked
 27045  011582  6B7C               	clrf	___flmul@grs& (0+255),b
 27046                           
 27047                           ; BSR set to: 0
 27048  011584  0100               	movlb	0	; () banked
 27049  011586  517B               	movf	___flmul@aexp& (0+255),w,b
 27050  011588  C080  F076         	movff	___flmul@bexp,??___flmul
 27051  01158C  0100               	movlb	0	; () banked
 27052  01158E  6B77               	clrf	(??___flmul+1)& (0+255),b
 27053  011590  0100               	movlb	0	; () banked
 27054  011592  2776               	addwf	??___flmul& (0+255),f,b
 27055  011594  0E00               	movlw	0
 27056  011596  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 27057  011598  0E82               	movlw	130
 27058  01159A  0100               	movlb	0	; () banked
 27059  01159C  2576               	addwf	??___flmul& (0+255),w,b
 27060  01159E  0100               	movlb	0	; () banked
 27061  0115A0  6F85               	movwf	___flmul@temp& (0+255),b
 27062  0115A2  0EFF               	movlw	255
 27063  0115A4  0100               	movlb	0	; () banked
 27064  0115A6  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 27065  0115A8  0100               	movlb	0	; () banked
 27066  0115AA  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 27067  0115AC  D015               	goto	l2802
 27068  0115AE                     
 27069                           ; BSR set to: 0
 27070                           
 27071                           ; BSR set to: 0
 27072  0115AE  0100               	movlb	0	; () banked
 27073  0115B0  90D8               	bcf	status,0,c
 27074  0115B2  3781               	rlcf	___flmul@prod& (0+255),f,b
 27075  0115B4  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 27076  0115B6  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 27077  0115B8  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 27078                           
 27079                           ; BSR set to: 0
 27080  0115BA  0100               	movlb	0	; () banked
 27081  0115BC  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 27082  0115BE  D002               	goto	l2804
 27083                           
 27084                           ; BSR set to: 0
 27085  0115C0  0100               	movlb	0	; () banked
 27086  0115C2  8181               	bsf	___flmul@prod& (0+255),0,b
 27087  0115C4                     l2804:
 27088                           
 27089                           ; BSR set to: 0
 27090  0115C4  0100               	movlb	0	; () banked
 27091  0115C6  90D8               	bcf	status,0,c
 27092  0115C8  377C               	rlcf	___flmul@grs& (0+255),f,b
 27093  0115CA  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 27094  0115CC  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 27095  0115CE  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 27096  0115D0  0100               	movlb	0	; () banked
 27097  0115D2  0785               	decf	___flmul@temp& (0+255),f,b
 27098  0115D4  A0D8               	btfss	status,0,c
 27099  0115D6  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 27100  0115D8                     l2802:
 27101                           
 27102                           ; BSR set to: 0
 27103                           
 27104                           ; BSR set to: 0
 27105  0115D8  0100               	movlb	0	; () banked
 27106  0115DA  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 27107  0115DC  D7E8               	goto	l2803
 27108                           
 27109                           ; BSR set to: 0
 27110                           
 27111                           ; BSR set to: 0
 27112  0115DE  0E00               	movlw	0
 27113  0115E0  0100               	movlb	0	; () banked
 27114  0115E2  6F7B               	movwf	___flmul@aexp& (0+255),b
 27115                           
 27116                           ; BSR set to: 0
 27117  0115E4  0100               	movlb	0	; () banked
 27118  0115E6  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 27119  0115E8  D024               	goto	l2809
 27120                           
 27121                           ; BSR set to: 0
 27122  0115EA  0EFF               	movlw	255
 27123  0115EC  0100               	movlb	0	; () banked
 27124  0115EE  157C               	andwf	___flmul@grs& (0+255),w,b
 27125  0115F0  0100               	movlb	0	; () banked
 27126  0115F2  6F76               	movwf	??___flmul& (0+255),b
 27127  0115F4  0EFF               	movlw	255
 27128  0115F6  0100               	movlb	0	; () banked
 27129  0115F8  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 27130  0115FA  0100               	movlb	0	; () banked
 27131  0115FC  6F77               	movwf	(??___flmul+1)& (0+255),b
 27132  0115FE  0EFF               	movlw	255
 27133  011600  0100               	movlb	0	; () banked
 27134  011602  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 27135  011604  0100               	movlb	0	; () banked
 27136  011606  6F78               	movwf	(??___flmul+2)& (0+255),b
 27137  011608  0E7F               	movlw	127
 27138  01160A  0100               	movlb	0	; () banked
 27139  01160C  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 27140  01160E  0100               	movlb	0	; () banked
 27141  011610  6F79               	movwf	(??___flmul+3)& (0+255),b
 27142  011612  0100               	movlb	0	; () banked
 27143  011614  5176               	movf	??___flmul& (0+255),w,b
 27144  011616  0100               	movlb	0	; () banked
 27145  011618  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 27146  01161A  0100               	movlb	0	; () banked
 27147  01161C  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 27148  01161E  0100               	movlb	0	; () banked
 27149  011620  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 27150  011622  A4D8               	btfss	status,2,c
 27151  011624  D003               	goto	u11410
 27152                           
 27153                           ; BSR set to: 0
 27154                           
 27155                           ; BSR set to: 0
 27156  011626  0100               	movlb	0	; () banked
 27157  011628  A181               	btfss	___flmul@prod& (0+255),0,b
 27158  01162A  D003               	goto	l2809
 27159  01162C                     u11410:
 27160                           
 27161                           ; BSR set to: 0
 27162  01162C  0E01               	movlw	1
 27163  01162E  0100               	movlb	0	; () banked
 27164  011630  6F7B               	movwf	___flmul@aexp& (0+255),b
 27165  011632                     l2809:
 27166                           
 27167                           ; BSR set to: 0
 27168                           
 27169                           ; BSR set to: 0
 27170                           
 27171                           ; BSR set to: 0
 27172  011632  0100               	movlb	0	; () banked
 27173  011634  517B               	movf	___flmul@aexp& (0+255),w,b
 27174  011636  0100               	movlb	0	; () banked
 27175  011638  B4D8               	btfsc	status,2,c
 27176  01163A  D023               	goto	l2811
 27177                           
 27178                           ; BSR set to: 0
 27179  01163C  0E01               	movlw	1
 27180  01163E  0100               	movlb	0	; () banked
 27181  011640  2781               	addwf	___flmul@prod& (0+255),f,b
 27182  011642  0E00               	movlw	0
 27183  011644  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27184  011646  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27185  011648  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27186                           
 27187                           ; BSR set to: 0
 27188  01164A  0100               	movlb	0	; () banked
 27189  01164C  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 27190  01164E  D019               	goto	l2811
 27191                           
 27192                           ; BSR set to: 0
 27193  011650  C081  F076         	movff	___flmul@prod,??___flmul
 27194  011654  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 27195  011658  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 27196  01165C  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 27197  011660  0100               	movlb	0	; () banked
 27198  011662  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 27199  011664  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 27200  011666  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 27201  011668  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 27202  01166A  3376               	rrcf	??___flmul& (0+255),f,b
 27203  01166C  C076  F081         	movff	??___flmul,___flmul@prod
 27204  011670  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 27205  011674  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 27206  011678  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 27207                           
 27208                           ; BSR set to: 0
 27209  01167C  0100               	movlb	0	; () banked
 27210  01167E  4B85               	infsnz	___flmul@temp& (0+255),f,b
 27211  011680  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 27212  011682                     l2811:
 27213                           
 27214                           ; BSR set to: 0
 27215                           
 27216                           ; BSR set to: 0
 27217                           
 27218                           ; BSR set to: 0
 27219  011682  0100               	movlb	0	; () banked
 27220  011684  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 27221  011686  D010               	goto	l2812
 27222  011688  0100               	movlb	0	; () banked
 27223  01168A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27224  01168C  E104               	bnz	u11440
 27225  01168E  0100               	movlb	0	; () banked
 27226  011690  2985               	incf	___flmul@temp& (0+255),w,b
 27227  011692  A0D8               	btfss	status,0,c
 27228  011694  D009               	goto	l2812
 27229  011696                     u11440:
 27230                           
 27231                           ; BSR set to: 0
 27232  011696  0E00               	movlw	0
 27233  011698  0100               	movlb	0	; () banked
 27234  01169A  6F81               	movwf	___flmul@prod& (0+255),b
 27235  01169C  0E00               	movlw	0
 27236  01169E  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 27237  0116A0  0E80               	movlw	128
 27238  0116A2  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 27239  0116A4  0E7F               	movlw	127
 27240  0116A6  D02B               	goto	L18
 27241  0116A8                     l2812:
 27242                           
 27243                           ; BSR set to: 0
 27244                           
 27245                           ; BSR set to: 0
 27246  0116A8  0100               	movlb	0	; () banked
 27247  0116AA  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 27248  0116AC  D007               	goto	u11450
 27249  0116AE  0100               	movlb	0	; () banked
 27250  0116B0  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27251  0116B2  E111               	bnz	l2814
 27252  0116B4  0100               	movlb	0	; () banked
 27253  0116B6  0585               	decf	___flmul@temp& (0+255),w,b
 27254  0116B8  B0D8               	btfsc	status,0,c
 27255  0116BA  D00D               	goto	l2814
 27256  0116BC                     u11450:
 27257                           
 27258                           ; BSR set to: 0
 27259  0116BC  0E00               	movlw	0
 27260  0116BE  0100               	movlb	0	; () banked
 27261  0116C0  6F81               	movwf	___flmul@prod& (0+255),b
 27262  0116C2  0E00               	movlw	0
 27263  0116C4  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 27264  0116C6  0E00               	movlw	0
 27265  0116C8  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 27266  0116CA  0E00               	movlw	0
 27267  0116CC  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 27268  0116CE  0E00               	movlw	0
 27269  0116D0  0100               	movlb	0	; () banked
 27270  0116D2  6F7A               	movwf	___flmul@sign& (0+255),b
 27271  0116D4  D015               	goto	l2815
 27272  0116D6                     l2814:
 27273                           
 27274                           ; BSR set to: 0
 27275  0116D6  C085  F080         	movff	___flmul@temp,___flmul@bexp
 27276                           
 27277                           ; BSR set to: 0
 27278  0116DA  0EFF               	movlw	255
 27279  0116DC  0100               	movlb	0	; () banked
 27280  0116DE  1781               	andwf	___flmul@prod& (0+255),f,b
 27281  0116E0  0EFF               	movlw	255
 27282  0116E2  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 27283  0116E4  0E7F               	movlw	127
 27284  0116E6  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 27285  0116E8  0E00               	movlw	0
 27286  0116EA  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 27287                           
 27288                           ; BSR set to: 0
 27289  0116EC  0100               	movlb	0	; () banked
 27290  0116EE  A180               	btfss	___flmul@bexp& (0+255),0,b
 27291  0116F0  D002               	goto	l2816
 27292                           
 27293                           ; BSR set to: 0
 27294  0116F2  0100               	movlb	0	; () banked
 27295  0116F4  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 27296  0116F6                     l2816:
 27297                           
 27298                           ; BSR set to: 0
 27299                           
 27300                           ; BSR set to: 0
 27301  0116F6  0100               	movlb	0	; () banked
 27302  0116F8  90D8               	bcf	status,0,c
 27303  0116FA  3180               	rrcf	___flmul@bexp& (0+255),w,b
 27304  0116FC  0100               	movlb	0	; () banked
 27305  0116FE                     L18:
 27306  0116FE  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 27307  011700                     l2815:
 27308                           
 27309                           ; BSR set to: 0
 27310                           
 27311                           ; BSR set to: 0
 27312                           
 27313                           ; BSR set to: 0
 27314  011700  0100               	movlb	0	; () banked
 27315  011702  517A               	movf	___flmul@sign& (0+255),w,b
 27316  011704  0100               	movlb	0	; () banked
 27317  011706  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 27318                           
 27319                           ; BSR set to: 0
 27320  011708  C081  F06E         	movff	___flmul@prod,?___flmul
 27321  01170C  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 27322  011710  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 27323  011714  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 27324  011718  0012               	return	
 27325  01171A                     __end_of___flmul:
 27326                           	opt stack 0
 27327                           tosu	equ	0xFFF
 27328                           tosh	equ	0xFFE
 27329                           tosl	equ	0xFFD
 27330                           pclath	equ	0xFFA
 27331                           tblptru	equ	0xFF8
 27332                           tblptrh	equ	0xFF7
 27333                           tblptrl	equ	0xFF6
 27334                           tablat	equ	0xFF5
 27335                           prodh	equ	0xFF4
 27336                           prodl	equ	0xFF3
 27337                           intcon	equ	0xFF2
 27338                           indf0	equ	0xFEF
 27339                           postinc0	equ	0xFEE
 27340                           fsr0h	equ	0xFEA
 27341                           fsr0l	equ	0xFE9
 27342                           wreg	equ	0xFE8
 27343                           indf1	equ	0xFE7
 27344                           postdec1	equ	0xFE5
 27345                           fsr1h	equ	0xFE2
 27346                           fsr1l	equ	0xFE1
 27347                           indf2	equ	0xFDF
 27348                           postinc2	equ	0xFDE
 27349                           postdec2	equ	0xFDD
 27350                           plusw2	equ	0xFDB
 27351                           fsr2h	equ	0xFDA
 27352                           fsr2l	equ	0xFD9
 27353                           status	equ	0xFD8
 27354                           
 27355 ;; *************** function ___awmod *****************
 27356 ;; Defined at:
 27357 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awmod.c"
 27358 ;; Parameters:    Size  Location     Type
 27359 ;;  dividend        2    0[BANK0 ] int 
 27360 ;;  divisor         2    2[BANK0 ] int 
 27361 ;; Auto vars:     Size  Location     Type
 27362 ;;  sign            1    5[BANK0 ] unsigned char 
 27363 ;;  counter         1    4[BANK0 ] unsigned char 
 27364 ;; Return value:  Size  Location     Type
 27365 ;;                  2    0[BANK0 ] int 
 27366 ;; Registers used:
 27367 ;;		wreg, status,2, status,0
 27368 ;; Tracked objects:
 27369 ;;		On entry : 0/0
 27370 ;;		On exit  : 0/0
 27371 ;;		Unchanged: 0/0
 27372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27373 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27376 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27377 ;;Total ram usage:        6 bytes
 27378 ;; Hardware stack levels used:    1
 27379 ;; Hardware stack levels required when called:    7
 27380 ;; This function calls:
 27381 ;;		Nothing
 27382 ;; This function is called by:
 27383 ;;		_fround
 27384 ;;		_scale
 27385 ;; This function uses a non-reentrant model
 27386 ;;
 27387                           
 27388                           	psect	text131
 27389  0164D0                     __ptext131:
 27390                           	opt stack 0
 27391  0164D0                     ___awmod:
 27392                           	opt stack 21
 27393                           
 27394                           ; BSR set to: 0
 27395                           ;incstack = 0
 27396  0164D0  0E00               	movlw	0
 27397  0164D2  0100               	movlb	0	; () banked
 27398  0164D4  6F65               	movwf	___awmod@sign& (0+255),b
 27399                           
 27400                           ; BSR set to: 0
 27401  0164D6  0100               	movlb	0	; () banked
 27402  0164D8  AF61               	btfss	(___awmod@dividend+1)& (0+255),7,b
 27403  0164DA  D008               	goto	l2399
 27404                           
 27405                           ; BSR set to: 0
 27406  0164DC  0100               	movlb	0	; () banked
 27407  0164DE  6D60               	negf	___awmod@dividend& (0+255),b
 27408  0164E0  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 27409  0164E2  B0D8               	btfsc	status,0,c
 27410  0164E4  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 27411                           
 27412                           ; BSR set to: 0
 27413  0164E6  0E01               	movlw	1
 27414  0164E8  0100               	movlb	0	; () banked
 27415  0164EA  6F65               	movwf	___awmod@sign& (0+255),b
 27416  0164EC                     l2399:
 27417                           
 27418                           ; BSR set to: 0
 27419                           
 27420                           ; BSR set to: 0
 27421  0164EC  0100               	movlb	0	; () banked
 27422  0164EE  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 27423  0164F0  D005               	goto	l2400
 27424                           
 27425                           ; BSR set to: 0
 27426  0164F2  0100               	movlb	0	; () banked
 27427  0164F4  6D62               	negf	___awmod@divisor& (0+255),b
 27428  0164F6  1F63               	comf	(___awmod@divisor+1)& (0+255),f,b
 27429  0164F8  B0D8               	btfsc	status,0,c
 27430  0164FA  2B63               	incf	(___awmod@divisor+1)& (0+255),f,b
 27431  0164FC                     l2400:
 27432                           
 27433                           ; BSR set to: 0
 27434                           
 27435                           ; BSR set to: 0
 27436  0164FC  0100               	movlb	0	; () banked
 27437  0164FE  5162               	movf	___awmod@divisor& (0+255),w,b
 27438  016500  0100               	movlb	0	; () banked
 27439  016502  1163               	iorwf	(___awmod@divisor+1)& (0+255),w,b
 27440  016504  B4D8               	btfsc	status,2,c
 27441  016506  D026               	goto	l2407
 27442                           
 27443                           ; BSR set to: 0
 27444  016508  0E01               	movlw	1
 27445  01650A  0100               	movlb	0	; () banked
 27446  01650C  6F64               	movwf	___awmod@counter& (0+255),b
 27447  01650E  D006               	goto	l2402
 27448  016510                     
 27449                           ; BSR set to: 0
 27450                           
 27451                           ; BSR set to: 0
 27452  016510  0100               	movlb	0	; () banked
 27453  016512  90D8               	bcf	status,0,c
 27454  016514  3762               	rlcf	___awmod@divisor& (0+255),f,b
 27455  016516  3763               	rlcf	(___awmod@divisor+1)& (0+255),f,b
 27456  016518  0100               	movlb	0	; () banked
 27457  01651A  2B64               	incf	___awmod@counter& (0+255),f,b
 27458  01651C                     l2402:
 27459                           
 27460                           ; BSR set to: 0
 27461                           
 27462                           ; BSR set to: 0
 27463  01651C  0100               	movlb	0	; () banked
 27464  01651E  AF63               	btfss	(___awmod@divisor+1)& (0+255),7,b
 27465  016520  D7F7               	goto	l2403
 27466  016522                     u12230:
 27467                           
 27468                           ; BSR set to: 0
 27469                           
 27470                           ; BSR set to: 0
 27471                           
 27472                           ; BSR set to: 0
 27473  016522  0100               	movlb	0	; () banked
 27474  016524  5162               	movf	___awmod@divisor& (0+255),w,b
 27475  016526  0100               	movlb	0	; () banked
 27476  016528  5D60               	subwf	___awmod@dividend& (0+255),w,b
 27477  01652A  0100               	movlb	0	; () banked
 27478  01652C  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 27479  01652E  0100               	movlb	0	; () banked
 27480  016530  5961               	subwfb	(___awmod@dividend+1)& (0+255),w,b
 27481  016532  A0D8               	btfss	status,0,c
 27482  016534  D008               	goto	l2406
 27483                           
 27484                           ; BSR set to: 0
 27485  016536  0100               	movlb	0	; () banked
 27486  016538  5162               	movf	___awmod@divisor& (0+255),w,b
 27487  01653A  0100               	movlb	0	; () banked
 27488  01653C  5F60               	subwf	___awmod@dividend& (0+255),f,b
 27489  01653E  0100               	movlb	0	; () banked
 27490  016540  5163               	movf	(___awmod@divisor+1)& (0+255),w,b
 27491  016542  0100               	movlb	0	; () banked
 27492  016544  5B61               	subwfb	(___awmod@dividend+1)& (0+255),f,b
 27493  016546                     l2406:
 27494                           
 27495                           ; BSR set to: 0
 27496                           
 27497                           ; BSR set to: 0
 27498  016546  0100               	movlb	0	; () banked
 27499  016548  90D8               	bcf	status,0,c
 27500  01654A  3363               	rrcf	(___awmod@divisor+1)& (0+255),f,b
 27501  01654C  3362               	rrcf	___awmod@divisor& (0+255),f,b
 27502                           
 27503                           ; BSR set to: 0
 27504  01654E  0100               	movlb	0	; () banked
 27505  016550  2F64               	decfsz	___awmod@counter& (0+255),f,b
 27506  016552  D7E7               	goto	u12230
 27507  016554                     l2407:
 27508                           
 27509                           ; BSR set to: 0
 27510                           
 27511                           ; BSR set to: 0
 27512                           
 27513                           ; BSR set to: 0
 27514  016554  0100               	movlb	0	; () banked
 27515  016556  5165               	movf	___awmod@sign& (0+255),w,b
 27516  016558  0100               	movlb	0	; () banked
 27517  01655A  B4D8               	btfsc	status,2,c
 27518  01655C  D005               	goto	l2408
 27519                           
 27520                           ; BSR set to: 0
 27521  01655E  0100               	movlb	0	; () banked
 27522  016560  6D60               	negf	___awmod@dividend& (0+255),b
 27523  016562  1F61               	comf	(___awmod@dividend+1)& (0+255),f,b
 27524  016564  B0D8               	btfsc	status,0,c
 27525  016566  2B61               	incf	(___awmod@dividend+1)& (0+255),f,b
 27526  016568                     l2408:
 27527                           
 27528                           ; BSR set to: 0
 27529                           
 27530                           ; BSR set to: 0
 27531  016568  C060  F060         	movff	___awmod@dividend,?___awmod
 27532  01656C  C061  F061         	movff	___awmod@dividend+1,?___awmod+1
 27533  016570  0012               	return	
 27534  016572                     __end_of___awmod:
 27535                           	opt stack 0
 27536                           tosu	equ	0xFFF
 27537                           tosh	equ	0xFFE
 27538                           tosl	equ	0xFFD
 27539                           pclath	equ	0xFFA
 27540                           tblptru	equ	0xFF8
 27541                           tblptrh	equ	0xFF7
 27542                           tblptrl	equ	0xFF6
 27543                           tablat	equ	0xFF5
 27544                           prodh	equ	0xFF4
 27545                           prodl	equ	0xFF3
 27546                           intcon	equ	0xFF2
 27547                           indf0	equ	0xFEF
 27548                           postinc0	equ	0xFEE
 27549                           fsr0h	equ	0xFEA
 27550                           fsr0l	equ	0xFE9
 27551                           wreg	equ	0xFE8
 27552                           indf1	equ	0xFE7
 27553                           postdec1	equ	0xFE5
 27554                           fsr1h	equ	0xFE2
 27555                           fsr1l	equ	0xFE1
 27556                           indf2	equ	0xFDF
 27557                           postinc2	equ	0xFDE
 27558                           postdec2	equ	0xFDD
 27559                           plusw2	equ	0xFDB
 27560                           fsr2h	equ	0xFDA
 27561                           fsr2l	equ	0xFD9
 27562                           status	equ	0xFD8
 27563                           
 27564 ;; *************** function ___awdiv *****************
 27565 ;; Defined at:
 27566 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 27567 ;; Parameters:    Size  Location     Type
 27568 ;;  dividend        2    6[BANK0 ] int 
 27569 ;;  divisor         2    8[BANK0 ] int 
 27570 ;; Auto vars:     Size  Location     Type
 27571 ;;  quotient        2   12[BANK0 ] int 
 27572 ;;  sign            1   11[BANK0 ] unsigned char 
 27573 ;;  counter         1   10[BANK0 ] unsigned char 
 27574 ;; Return value:  Size  Location     Type
 27575 ;;                  2    6[BANK0 ] int 
 27576 ;; Registers used:
 27577 ;;		wreg, status,2, status,0
 27578 ;; Tracked objects:
 27579 ;;		On entry : 0/0
 27580 ;;		On exit  : 0/0
 27581 ;;		Unchanged: 0/0
 27582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27583 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27584 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27586 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27587 ;;Total ram usage:        8 bytes
 27588 ;; Hardware stack levels used:    1
 27589 ;; Hardware stack levels required when called:    7
 27590 ;; This function calls:
 27591 ;;		Nothing
 27592 ;; This function is called by:
 27593 ;;		_Console_Tab
 27594 ;;		_displayPositionMode
 27595 ;;		_fround
 27596 ;;		_scale
 27597 ;;		_printf
 27598 ;; This function uses a non-reentrant model
 27599 ;;
 27600                           
 27601                           	psect	text132
 27602  0159F4                     __ptext132:
 27603                           	opt stack 0
 27604  0159F4                     ___awdiv:
 27605                           	opt stack 21
 27606                           
 27607                           ; BSR set to: 0
 27608                           ;incstack = 0
 27609  0159F4  0E00               	movlw	0
 27610  0159F6  0100               	movlb	0	; () banked
 27611  0159F8  6F6B               	movwf	___awdiv@sign& (0+255),b
 27612                           
 27613                           ; BSR set to: 0
 27614  0159FA  0100               	movlb	0	; () banked
 27615  0159FC  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 27616  0159FE  D008               	goto	l2386
 27617                           
 27618                           ; BSR set to: 0
 27619  015A00  0100               	movlb	0	; () banked
 27620  015A02  6D68               	negf	___awdiv@divisor& (0+255),b
 27621  015A04  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 27622  015A06  B0D8               	btfsc	status,0,c
 27623  015A08  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 27624                           
 27625                           ; BSR set to: 0
 27626  015A0A  0E01               	movlw	1
 27627  015A0C  0100               	movlb	0	; () banked
 27628  015A0E  6F6B               	movwf	___awdiv@sign& (0+255),b
 27629  015A10                     l2386:
 27630                           
 27631                           ; BSR set to: 0
 27632                           
 27633                           ; BSR set to: 0
 27634  015A10  0100               	movlb	0	; () banked
 27635  015A12  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 27636  015A14  D008               	goto	l2387
 27637                           
 27638                           ; BSR set to: 0
 27639  015A16  0100               	movlb	0	; () banked
 27640  015A18  6D66               	negf	___awdiv@dividend& (0+255),b
 27641  015A1A  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 27642  015A1C  B0D8               	btfsc	status,0,c
 27643  015A1E  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 27644                           
 27645                           ; BSR set to: 0
 27646  015A20  0E01               	movlw	1
 27647  015A22  0100               	movlb	0	; () banked
 27648  015A24  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 27649  015A26                     l2387:
 27650                           
 27651                           ; BSR set to: 0
 27652                           
 27653                           ; BSR set to: 0
 27654  015A26  0E00               	movlw	0
 27655  015A28  0100               	movlb	0	; () banked
 27656  015A2A  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 27657  015A2C  0E00               	movlw	0
 27658  015A2E  6F6C               	movwf	___awdiv@quotient& (0+255),b
 27659                           
 27660                           ; BSR set to: 0
 27661  015A30  0100               	movlb	0	; () banked
 27662  015A32  5168               	movf	___awdiv@divisor& (0+255),w,b
 27663  015A34  0100               	movlb	0	; () banked
 27664  015A36  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 27665  015A38  B4D8               	btfsc	status,2,c
 27666  015A3A  D02C               	goto	l2394
 27667                           
 27668                           ; BSR set to: 0
 27669  015A3C  0E01               	movlw	1
 27670  015A3E  0100               	movlb	0	; () banked
 27671  015A40  6F6A               	movwf	___awdiv@counter& (0+255),b
 27672  015A42  D006               	goto	l2389
 27673  015A44                     
 27674                           ; BSR set to: 0
 27675                           
 27676                           ; BSR set to: 0
 27677  015A44  0100               	movlb	0	; () banked
 27678  015A46  90D8               	bcf	status,0,c
 27679  015A48  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 27680  015A4A  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 27681  015A4C  0100               	movlb	0	; () banked
 27682  015A4E  2B6A               	incf	___awdiv@counter& (0+255),f,b
 27683  015A50                     l2389:
 27684                           
 27685                           ; BSR set to: 0
 27686                           
 27687                           ; BSR set to: 0
 27688  015A50  0100               	movlb	0	; () banked
 27689  015A52  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 27690  015A54  D7F7               	goto	l2390
 27691  015A56                     u10610:
 27692                           
 27693                           ; BSR set to: 0
 27694                           
 27695                           ; BSR set to: 0
 27696                           
 27697                           ; BSR set to: 0
 27698  015A56  0100               	movlb	0	; () banked
 27699  015A58  90D8               	bcf	status,0,c
 27700  015A5A  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 27701  015A5C  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 27702                           
 27703                           ; BSR set to: 0
 27704  015A5E  0100               	movlb	0	; () banked
 27705  015A60  5168               	movf	___awdiv@divisor& (0+255),w,b
 27706  015A62  0100               	movlb	0	; () banked
 27707  015A64  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 27708  015A66  0100               	movlb	0	; () banked
 27709  015A68  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 27710  015A6A  0100               	movlb	0	; () banked
 27711  015A6C  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 27712  015A6E  A0D8               	btfss	status,0,c
 27713  015A70  D00A               	goto	l2393
 27714                           
 27715                           ; BSR set to: 0
 27716  015A72  0100               	movlb	0	; () banked
 27717  015A74  5168               	movf	___awdiv@divisor& (0+255),w,b
 27718  015A76  0100               	movlb	0	; () banked
 27719  015A78  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 27720  015A7A  0100               	movlb	0	; () banked
 27721  015A7C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 27722  015A7E  0100               	movlb	0	; () banked
 27723  015A80  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 27724                           
 27725                           ; BSR set to: 0
 27726  015A82  0100               	movlb	0	; () banked
 27727  015A84  816C               	bsf	___awdiv@quotient& (0+255),0,b
 27728  015A86                     l2393:
 27729                           
 27730                           ; BSR set to: 0
 27731                           
 27732                           ; BSR set to: 0
 27733  015A86  0100               	movlb	0	; () banked
 27734  015A88  90D8               	bcf	status,0,c
 27735  015A8A  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 27736  015A8C  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 27737                           
 27738                           ; BSR set to: 0
 27739  015A8E  0100               	movlb	0	; () banked
 27740  015A90  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 27741  015A92  D7E1               	goto	u10610
 27742  015A94                     l2394:
 27743                           
 27744                           ; BSR set to: 0
 27745                           
 27746                           ; BSR set to: 0
 27747                           
 27748                           ; BSR set to: 0
 27749  015A94  0100               	movlb	0	; () banked
 27750  015A96  516B               	movf	___awdiv@sign& (0+255),w,b
 27751  015A98  0100               	movlb	0	; () banked
 27752  015A9A  B4D8               	btfsc	status,2,c
 27753  015A9C  D005               	goto	l2395
 27754                           
 27755                           ; BSR set to: 0
 27756  015A9E  0100               	movlb	0	; () banked
 27757  015AA0  6D6C               	negf	___awdiv@quotient& (0+255),b
 27758  015AA2  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 27759  015AA4  B0D8               	btfsc	status,0,c
 27760  015AA6  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 27761  015AA8                     l2395:
 27762                           
 27763                           ; BSR set to: 0
 27764                           
 27765                           ; BSR set to: 0
 27766  015AA8  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 27767  015AAC  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 27768  015AB0  0012               	return	
 27769  015AB2                     __end_of___awdiv:
 27770                           	opt stack 0
 27771                           tosu	equ	0xFFF
 27772                           tosh	equ	0xFFE
 27773                           tosl	equ	0xFFD
 27774                           pclath	equ	0xFFA
 27775                           tblptru	equ	0xFF8
 27776                           tblptrh	equ	0xFF7
 27777                           tblptrl	equ	0xFF6
 27778                           tablat	equ	0xFF5
 27779                           prodh	equ	0xFF4
 27780                           prodl	equ	0xFF3
 27781                           intcon	equ	0xFF2
 27782                           indf0	equ	0xFEF
 27783                           postinc0	equ	0xFEE
 27784                           fsr0h	equ	0xFEA
 27785                           fsr0l	equ	0xFE9
 27786                           wreg	equ	0xFE8
 27787                           indf1	equ	0xFE7
 27788                           postdec1	equ	0xFE5
 27789                           fsr1h	equ	0xFE2
 27790                           fsr1l	equ	0xFE1
 27791                           indf2	equ	0xFDF
 27792                           postinc2	equ	0xFDE
 27793                           postdec2	equ	0xFDD
 27794                           plusw2	equ	0xFDB
 27795                           fsr2h	equ	0xFDA
 27796                           fsr2l	equ	0xFD9
 27797                           status	equ	0xFD8
 27798                           
 27799 ;; *************** function __tdiv_to_l_ *****************
 27800 ;; Defined at:
 27801 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\ftdivl.c"
 27802 ;; Parameters:    Size  Location     Type
 27803 ;;  f1              4    0[BANK0 ] float 
 27804 ;;  f2              4    4[BANK0 ] float 
 27805 ;; Auto vars:     Size  Location     Type
 27806 ;;  quot            4   11[BANK0 ] unsigned long 
 27807 ;;  exp1            1   16[BANK0 ] unsigned char 
 27808 ;;  cntr            1   15[BANK0 ] unsigned char 
 27809 ;; Return value:  Size  Location     Type
 27810 ;;                  4    0[BANK0 ] unsigned long 
 27811 ;; Registers used:
 27812 ;;		wreg, status,2, status,0
 27813 ;; Tracked objects:
 27814 ;;		On entry : 0/0
 27815 ;;		On exit  : 0/0
 27816 ;;		Unchanged: 0/0
 27817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27818 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27819 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27820 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27821 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27822 ;;Total ram usage:       17 bytes
 27823 ;; Hardware stack levels used:    1
 27824 ;; Hardware stack levels required when called:    7
 27825 ;; This function calls:
 27826 ;;		Nothing
 27827 ;; This function is called by:
 27828 ;;		_printf
 27829 ;; This function uses a non-reentrant model
 27830 ;;
 27831                           
 27832                           	psect	text133
 27833  013A8C                     __ptext133:
 27834                           	opt stack 0
 27835  013A8C                     __tdiv_to_l_:
 27836                           	opt stack 22
 27837                           
 27838                           ; BSR set to: 0
 27839                           ;incstack = 0
 27840  013A8C  C062  F068         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
 27841  013A90  0100               	movlb	0	; () banked
 27842  013A92  6B69               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 27843  013A94  6B6A               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 27844  013A96  0100               	movlb	0	; () banked
 27845  013A98  3561               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),w,b
 27846  013A9A  0100               	movlb	0	; () banked
 27847  013A9C  3768               	rlcf	??__tdiv_to_l_& (0+255),f,b
 27848  013A9E  E301               	bnc	u12781
 27849  013AA0  8169               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 27850  013AA2                     u12781:
 27851  013AA2  0100               	movlb	0	; () banked
 27852  013AA4  5168               	movf	??__tdiv_to_l_& (0+255),w,b
 27853  013AA6  0100               	movlb	0	; () banked
 27854  013AA8  6F70               	movwf	__tdiv_to_l_@exp1& (0+255),b
 27855  013AAA  0100               	movlb	0	; () banked
 27856  013AAC  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 27857  013AAE  A4D8               	btfss	status,2,c
 27858  013AB0  D00A               	goto	l2522
 27859                           
 27860                           ; BSR set to: 0
 27861  013AB2  0E00               	movlw	0
 27862  013AB4  0100               	movlb	0	; () banked
 27863  013AB6  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 27864  013AB8  0E00               	movlw	0
 27865  013ABA  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 27866  013ABC  0E00               	movlw	0
 27867  013ABE  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 27868  013AC0  0E00               	movlw	0
 27869  013AC2  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 27870                           
 27871                           ; BSR set to: 0
 27872  013AC4  0012               	return	
 27873  013AC6                     l2522:
 27874                           
 27875                           ; BSR set to: 0
 27876                           
 27877                           ; BSR set to: 0
 27878  013AC6  C066  F068         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
 27879  013ACA  0100               	movlb	0	; () banked
 27880  013ACC  6B69               	clrf	(??__tdiv_to_l_+1)& (0+255),b
 27881  013ACE  6B6A               	clrf	(??__tdiv_to_l_+2)& (0+255),b
 27882  013AD0  0100               	movlb	0	; () banked
 27883  013AD2  3565               	rlcf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 27884  013AD4  0100               	movlb	0	; () banked
 27885  013AD6  3768               	rlcf	??__tdiv_to_l_& (0+255),f,b
 27886  013AD8  E301               	bnc	u12801
 27887  013ADA  8169               	bsf	(??__tdiv_to_l_+1)& (0+255),0,b
 27888  013ADC                     u12801:
 27889  013ADC  0100               	movlb	0	; () banked
 27890  013ADE  5168               	movf	??__tdiv_to_l_& (0+255),w,b
 27891  013AE0  0100               	movlb	0	; () banked
 27892  013AE2  6F6F               	movwf	__tdiv_to_l_@cntr& (0+255),b
 27893  013AE4  0100               	movlb	0	; () banked
 27894  013AE6  516F               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 27895  013AE8  A4D8               	btfss	status,2,c
 27896  013AEA  D00A               	goto	l2524
 27897                           
 27898                           ; BSR set to: 0
 27899  013AEC  0E00               	movlw	0
 27900  013AEE  0100               	movlb	0	; () banked
 27901  013AF0  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 27902  013AF2  0E00               	movlw	0
 27903  013AF4  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 27904  013AF6  0E00               	movlw	0
 27905  013AF8  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 27906  013AFA  0E00               	movlw	0
 27907  013AFC  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 27908                           
 27909                           ; BSR set to: 0
 27910  013AFE  0012               	return	
 27911  013B00                     l2524:
 27912                           
 27913                           ; BSR set to: 0
 27914                           
 27915                           ; BSR set to: 0
 27916  013B00  0100               	movlb	0	; () banked
 27917  013B02  8F61               	bsf	(__tdiv_to_l_@f1+1)& (0+255),7,b
 27918                           
 27919                           ; BSR set to: 0
 27920  013B04  0EFF               	movlw	255
 27921  013B06  0100               	movlb	0	; () banked
 27922  013B08  1760               	andwf	__tdiv_to_l_@f1& (0+255),f,b
 27923  013B0A  0EFF               	movlw	255
 27924  013B0C  0100               	movlb	0	; () banked
 27925  013B0E  1761               	andwf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 27926  013B10  0E00               	movlw	0
 27927  013B12  0100               	movlb	0	; () banked
 27928  013B14  1762               	andwf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 27929  013B16  0100               	movlb	0	; () banked
 27930  013B18  8F65               	bsf	(__tdiv_to_l_@f2+1)& (0+255),7,b
 27931                           
 27932                           ; BSR set to: 0
 27933  013B1A  0EFF               	movlw	255
 27934  013B1C  0100               	movlb	0	; () banked
 27935  013B1E  1764               	andwf	__tdiv_to_l_@f2& (0+255),f,b
 27936  013B20  0EFF               	movlw	255
 27937  013B22  0100               	movlb	0	; () banked
 27938  013B24  1765               	andwf	(__tdiv_to_l_@f2+1)& (0+255),f,b
 27939  013B26  0E00               	movlw	0
 27940  013B28  0100               	movlb	0	; () banked
 27941  013B2A  1766               	andwf	(__tdiv_to_l_@f2+2)& (0+255),f,b
 27942                           
 27943                           ; BSR set to: 0
 27944  013B2C  0E00               	movlw	0
 27945  013B2E  0100               	movlb	0	; () banked
 27946  013B30  6F6B               	movwf	__tdiv_to_l_@quot& (0+255),b
 27947  013B32  0E00               	movlw	0
 27948  013B34  6F6C               	movwf	(__tdiv_to_l_@quot+1)& (0+255),b
 27949  013B36  0E00               	movlw	0
 27950  013B38  6F6D               	movwf	(__tdiv_to_l_@quot+2)& (0+255),b
 27951  013B3A  0E00               	movlw	0
 27952  013B3C  6F6E               	movwf	(__tdiv_to_l_@quot+3)& (0+255),b
 27953                           
 27954                           ; BSR set to: 0
 27955  013B3E  0E7F               	movlw	127
 27956  013B40  0100               	movlb	0	; () banked
 27957  013B42  5F70               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 27958                           
 27959                           ; BSR set to: 0
 27960  013B44  0100               	movlb	0	; () banked
 27961  013B46  516F               	movf	__tdiv_to_l_@cntr& (0+255),w,b
 27962  013B48  0F98               	addlw	152
 27963  013B4A  0100               	movlb	0	; () banked
 27964  013B4C  5F70               	subwf	__tdiv_to_l_@exp1& (0+255),f,b
 27965                           
 27966                           ; BSR set to: 0
 27967  013B4E  0E18               	movlw	24
 27968  013B50  0100               	movlb	0	; () banked
 27969  013B52  6F6F               	movwf	__tdiv_to_l_@cntr& (0+255),b
 27970  013B54                     l2525:
 27971                           
 27972                           ; BSR set to: 0
 27973  013B54  0100               	movlb	0	; () banked
 27974  013B56  90D8               	bcf	status,0,c
 27975  013B58  376B               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 27976  013B5A  376C               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 27977  013B5C  376D               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 27978  013B5E  376E               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 27979                           
 27980                           ; BSR set to: 0
 27981  013B60  0100               	movlb	0	; () banked
 27982  013B62  5164               	movf	__tdiv_to_l_@f2& (0+255),w,b
 27983  013B64  0100               	movlb	0	; () banked
 27984  013B66  5D60               	subwf	__tdiv_to_l_@f1& (0+255),w,b
 27985  013B68  0100               	movlb	0	; () banked
 27986  013B6A  5165               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 27987  013B6C  0100               	movlb	0	; () banked
 27988  013B6E  5961               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),w,b
 27989  013B70  0100               	movlb	0	; () banked
 27990  013B72  5166               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 27991  013B74  0100               	movlb	0	; () banked
 27992  013B76  5962               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),w,b
 27993  013B78  A0D8               	btfss	status,0,c
 27994  013B7A  D00E               	goto	l2526
 27995                           
 27996                           ; BSR set to: 0
 27997  013B7C  0100               	movlb	0	; () banked
 27998  013B7E  5164               	movf	__tdiv_to_l_@f2& (0+255),w,b
 27999  013B80  0100               	movlb	0	; () banked
 28000  013B82  5F60               	subwf	__tdiv_to_l_@f1& (0+255),f,b
 28001  013B84  0100               	movlb	0	; () banked
 28002  013B86  5165               	movf	(__tdiv_to_l_@f2+1)& (0+255),w,b
 28003  013B88  0100               	movlb	0	; () banked
 28004  013B8A  5B61               	subwfb	(__tdiv_to_l_@f1+1)& (0+255),f,b
 28005  013B8C  0100               	movlb	0	; () banked
 28006  013B8E  5166               	movf	(__tdiv_to_l_@f2+2)& (0+255),w,b
 28007  013B90  0100               	movlb	0	; () banked
 28008  013B92  5B62               	subwfb	(__tdiv_to_l_@f1+2)& (0+255),f,b
 28009                           
 28010                           ; BSR set to: 0
 28011  013B94  0100               	movlb	0	; () banked
 28012  013B96  816B               	bsf	__tdiv_to_l_@quot& (0+255),0,b
 28013  013B98                     l2526:
 28014                           
 28015                           ; BSR set to: 0
 28016  013B98  0100               	movlb	0	; () banked
 28017  013B9A  90D8               	bcf	status,0,c
 28018  013B9C  3760               	rlcf	__tdiv_to_l_@f1& (0+255),f,b
 28019  013B9E  3761               	rlcf	(__tdiv_to_l_@f1+1)& (0+255),f,b
 28020  013BA0  3762               	rlcf	(__tdiv_to_l_@f1+2)& (0+255),f,b
 28021                           
 28022                           ; BSR set to: 0
 28023  013BA2  0100               	movlb	0	; () banked
 28024  013BA4  2F6F               	decfsz	__tdiv_to_l_@cntr& (0+255),f,b
 28025  013BA6  D7D6               	goto	l2525
 28026                           
 28027                           ; BSR set to: 0
 28028                           
 28029                           ; BSR set to: 0
 28030  013BA8  0100               	movlb	0	; () banked
 28031  013BAA  AF70               	btfss	__tdiv_to_l_@exp1& (0+255),7,b
 28032  013BAC  D01A               	goto	l2528
 28033                           
 28034                           ; BSR set to: 0
 28035  013BAE  0100               	movlb	0	; () banked
 28036  013BB0  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 28037  013BB2  0A80               	xorlw	128
 28038  013BB4  0F97               	addlw	151
 28039  013BB6  B0D8               	btfsc	status,0,c
 28040  013BB8  D00A               	goto	l2529
 28041                           
 28042                           ; BSR set to: 0
 28043  013BBA  0E00               	movlw	0
 28044  013BBC  0100               	movlb	0	; () banked
 28045  013BBE  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 28046  013BC0  0E00               	movlw	0
 28047  013BC2  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 28048  013BC4  0E00               	movlw	0
 28049  013BC6  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 28050  013BC8  0E00               	movlw	0
 28051  013BCA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 28052                           
 28053                           ; BSR set to: 0
 28054  013BCC  0012               	return	
 28055  013BCE                     l2529:
 28056                           
 28057                           ; BSR set to: 0
 28058                           
 28059                           ; BSR set to: 0
 28060                           
 28061                           ; BSR set to: 0
 28062  013BCE  0100               	movlb	0	; () banked
 28063  013BD0  90D8               	bcf	status,0,c
 28064  013BD2  336E               	rrcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 28065  013BD4  336D               	rrcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 28066  013BD6  336C               	rrcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 28067  013BD8  336B               	rrcf	__tdiv_to_l_@quot& (0+255),f,b
 28068                           
 28069                           ; BSR set to: 0
 28070  013BDA  0100               	movlb	0	; () banked
 28071  013BDC  3F70               	incfsz	__tdiv_to_l_@exp1& (0+255),f,b
 28072  013BDE  D7F7               	goto	l2529
 28073                           
 28074                           ; BSR set to: 0
 28075  013BE0  D01B               	goto	u12860
 28076  013BE2                     l2528:
 28077                           
 28078                           ; BSR set to: 0
 28079                           
 28080                           ; BSR set to: 0
 28081  013BE2  0E17               	movlw	23
 28082  013BE4  0100               	movlb	0	; () banked
 28083  013BE6  6570               	cpfsgt	__tdiv_to_l_@exp1& (0+255),b
 28084  013BE8  D012               	goto	l2534
 28085                           
 28086                           ; BSR set to: 0
 28087  013BEA  0E00               	movlw	0
 28088  013BEC  0100               	movlb	0	; () banked
 28089  013BEE  6F60               	movwf	?__tdiv_to_l_& (0+255),b
 28090  013BF0  0E00               	movlw	0
 28091  013BF2  6F61               	movwf	(?__tdiv_to_l_+1)& (0+255),b
 28092  013BF4  0E00               	movlw	0
 28093  013BF6  6F62               	movwf	(?__tdiv_to_l_+2)& (0+255),b
 28094  013BF8  0E00               	movlw	0
 28095  013BFA  6F63               	movwf	(?__tdiv_to_l_+3)& (0+255),b
 28096                           
 28097                           ; BSR set to: 0
 28098  013BFC  0012               	return	
 28099  013BFE                     
 28100                           ; BSR set to: 0
 28101                           
 28102                           ; BSR set to: 0
 28103  013BFE  0100               	movlb	0	; () banked
 28104  013C00  90D8               	bcf	status,0,c
 28105  013C02  376B               	rlcf	__tdiv_to_l_@quot& (0+255),f,b
 28106  013C04  376C               	rlcf	(__tdiv_to_l_@quot+1)& (0+255),f,b
 28107  013C06  376D               	rlcf	(__tdiv_to_l_@quot+2)& (0+255),f,b
 28108  013C08  376E               	rlcf	(__tdiv_to_l_@quot+3)& (0+255),f,b
 28109  013C0A  0100               	movlb	0	; () banked
 28110  013C0C  0770               	decf	__tdiv_to_l_@exp1& (0+255),f,b
 28111  013C0E                     l2534:
 28112                           
 28113                           ; BSR set to: 0
 28114                           
 28115                           ; BSR set to: 0
 28116  013C0E  0100               	movlb	0	; () banked
 28117  013C10  5170               	movf	__tdiv_to_l_@exp1& (0+255),w,b
 28118  013C12  0100               	movlb	0	; () banked
 28119  013C14  A4D8               	btfss	status,2,c
 28120  013C16  D7F3               	goto	l2535
 28121  013C18                     u12860:
 28122                           
 28123                           ; BSR set to: 0
 28124                           
 28125                           ; BSR set to: 0
 28126  013C18  C06B  F060         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
 28127  013C1C  C06C  F061         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
 28128  013C20  C06D  F062         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
 28129  013C24  C06E  F063         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
 28130                           
 28131                           ; BSR set to: 0
 28132  013C28  0012               	return		;funcret
 28133  013C2A                     __end_of__tdiv_to_l_:
 28134                           	opt stack 0
 28135                           tosu	equ	0xFFF
 28136                           tosh	equ	0xFFE
 28137                           tosl	equ	0xFFD
 28138                           pclath	equ	0xFFA
 28139                           tblptru	equ	0xFF8
 28140                           tblptrh	equ	0xFF7
 28141                           tblptrl	equ	0xFF6
 28142                           tablat	equ	0xFF5
 28143                           prodh	equ	0xFF4
 28144                           prodl	equ	0xFF3
 28145                           intcon	equ	0xFF2
 28146                           indf0	equ	0xFEF
 28147                           postinc0	equ	0xFEE
 28148                           fsr0h	equ	0xFEA
 28149                           fsr0l	equ	0xFE9
 28150                           wreg	equ	0xFE8
 28151                           indf1	equ	0xFE7
 28152                           postdec1	equ	0xFE5
 28153                           fsr1h	equ	0xFE2
 28154                           fsr1l	equ	0xFE1
 28155                           indf2	equ	0xFDF
 28156                           postinc2	equ	0xFDE
 28157                           postdec2	equ	0xFDD
 28158                           plusw2	equ	0xFDB
 28159                           fsr2h	equ	0xFDA
 28160                           fsr2l	equ	0xFD9
 28161                           status	equ	0xFD8
 28162                           
 28163 ;; *************** function __div_to_l_ *****************
 28164 ;; Defined at:
 28165 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fldivl.c"
 28166 ;; Parameters:    Size  Location     Type
 28167 ;;  f1              4    0[BANK0 ] unsigned long 
 28168 ;;  f2              4    4[BANK0 ] unsigned long 
 28169 ;; Auto vars:     Size  Location     Type
 28170 ;;  quot            4    8[BANK0 ] unsigned long 
 28171 ;;  exp1            1   13[BANK0 ] unsigned char 
 28172 ;;  cntr            1   12[BANK0 ] unsigned char 
 28173 ;; Return value:  Size  Location     Type
 28174 ;;                  4    0[BANK0 ] unsigned long 
 28175 ;; Registers used:
 28176 ;;		wreg, status,2, status,0
 28177 ;; Tracked objects:
 28178 ;;		On entry : 0/0
 28179 ;;		On exit  : 0/0
 28180 ;;		Unchanged: 0/0
 28181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28182 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28183 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28185 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28186 ;;Total ram usage:       14 bytes
 28187 ;; Hardware stack levels used:    1
 28188 ;; Hardware stack levels required when called:    7
 28189 ;; This function calls:
 28190 ;;		Nothing
 28191 ;; This function is called by:
 28192 ;;		_printf
 28193 ;; This function uses a non-reentrant model
 28194 ;;
 28195                           
 28196                           	psect	text134
 28197  014260                     __ptext134:
 28198                           	opt stack 0
 28199  014260                     __div_to_l_:
 28200                           	opt stack 22
 28201                           
 28202                           ; BSR set to: 0
 28203                           ;incstack = 0
 28204  014260  0100               	movlb	0	; () banked
 28205  014262  3562               	rlcf	(__div_to_l_@f1+2)& (0+255),w,b
 28206  014264  3563               	rlcf	(__div_to_l_@f1+3)& (0+255),w,b
 28207  014266  0100               	movlb	0	; () banked
 28208  014268  6F6D               	movwf	__div_to_l_@exp1& (0+255),b
 28209  01426A  0100               	movlb	0	; () banked
 28210  01426C  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 28211  01426E  A4D8               	btfss	status,2,c
 28212  014270  D00A               	goto	l2418
 28213                           
 28214                           ; BSR set to: 0
 28215  014272  0E00               	movlw	0
 28216  014274  0100               	movlb	0	; () banked
 28217  014276  6F60               	movwf	?__div_to_l_& (0+255),b
 28218  014278  0E00               	movlw	0
 28219  01427A  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 28220  01427C  0E00               	movlw	0
 28221  01427E  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 28222  014280  0E00               	movlw	0
 28223  014282  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 28224                           
 28225                           ; BSR set to: 0
 28226  014284  0012               	return	
 28227  014286                     l2418:
 28228                           
 28229                           ; BSR set to: 0
 28230                           
 28231                           ; BSR set to: 0
 28232  014286  0100               	movlb	0	; () banked
 28233  014288  3566               	rlcf	(__div_to_l_@f2+2)& (0+255),w,b
 28234  01428A  3567               	rlcf	(__div_to_l_@f2+3)& (0+255),w,b
 28235  01428C  0100               	movlb	0	; () banked
 28236  01428E  6F6C               	movwf	__div_to_l_@cntr& (0+255),b
 28237  014290  0100               	movlb	0	; () banked
 28238  014292  516C               	movf	__div_to_l_@cntr& (0+255),w,b
 28239  014294  A4D8               	btfss	status,2,c
 28240  014296  D00A               	goto	l2420
 28241                           
 28242                           ; BSR set to: 0
 28243  014298  0E00               	movlw	0
 28244  01429A  0100               	movlb	0	; () banked
 28245  01429C  6F60               	movwf	?__div_to_l_& (0+255),b
 28246  01429E  0E00               	movlw	0
 28247  0142A0  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 28248  0142A2  0E00               	movlw	0
 28249  0142A4  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 28250  0142A6  0E00               	movlw	0
 28251  0142A8  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 28252                           
 28253                           ; BSR set to: 0
 28254  0142AA  0012               	return	
 28255  0142AC                     l2420:
 28256                           
 28257                           ; BSR set to: 0
 28258                           
 28259                           ; BSR set to: 0
 28260  0142AC  0100               	movlb	0	; () banked
 28261  0142AE  8F62               	bsf	(__div_to_l_@f1+2)& (0+255),7,b
 28262                           
 28263                           ; BSR set to: 0
 28264  0142B0  0EFF               	movlw	255
 28265  0142B2  0100               	movlb	0	; () banked
 28266  0142B4  1760               	andwf	__div_to_l_@f1& (0+255),f,b
 28267  0142B6  0EFF               	movlw	255
 28268  0142B8  1761               	andwf	(__div_to_l_@f1+1)& (0+255),f,b
 28269  0142BA  0EFF               	movlw	255
 28270  0142BC  1762               	andwf	(__div_to_l_@f1+2)& (0+255),f,b
 28271  0142BE  0E00               	movlw	0
 28272  0142C0  1763               	andwf	(__div_to_l_@f1+3)& (0+255),f,b
 28273                           
 28274                           ; BSR set to: 0
 28275  0142C2  0100               	movlb	0	; () banked
 28276  0142C4  8F66               	bsf	(__div_to_l_@f2+2)& (0+255),7,b
 28277  0142C6  0EFF               	movlw	255
 28278  0142C8  0100               	movlb	0	; () banked
 28279  0142CA  1764               	andwf	__div_to_l_@f2& (0+255),f,b
 28280  0142CC  0EFF               	movlw	255
 28281  0142CE  1765               	andwf	(__div_to_l_@f2+1)& (0+255),f,b
 28282  0142D0  0EFF               	movlw	255
 28283  0142D2  1766               	andwf	(__div_to_l_@f2+2)& (0+255),f,b
 28284  0142D4  0E00               	movlw	0
 28285  0142D6  1767               	andwf	(__div_to_l_@f2+3)& (0+255),f,b
 28286                           
 28287                           ; BSR set to: 0
 28288  0142D8  0E00               	movlw	0
 28289  0142DA  0100               	movlb	0	; () banked
 28290  0142DC  6F68               	movwf	__div_to_l_@quot& (0+255),b
 28291  0142DE  0E00               	movlw	0
 28292  0142E0  6F69               	movwf	(__div_to_l_@quot+1)& (0+255),b
 28293  0142E2  0E00               	movlw	0
 28294  0142E4  6F6A               	movwf	(__div_to_l_@quot+2)& (0+255),b
 28295  0142E6  0E00               	movlw	0
 28296  0142E8  6F6B               	movwf	(__div_to_l_@quot+3)& (0+255),b
 28297                           
 28298                           ; BSR set to: 0
 28299  0142EA  0E7F               	movlw	127
 28300  0142EC  0100               	movlb	0	; () banked
 28301  0142EE  5F6D               	subwf	__div_to_l_@exp1& (0+255),f,b
 28302                           
 28303                           ; BSR set to: 0
 28304  0142F0  0100               	movlb	0	; () banked
 28305  0142F2  516C               	movf	__div_to_l_@cntr& (0+255),w,b
 28306  0142F4  0FA0               	addlw	160
 28307  0142F6  0100               	movlb	0	; () banked
 28308  0142F8  5F6D               	subwf	__div_to_l_@exp1& (0+255),f,b
 28309                           
 28310                           ; BSR set to: 0
 28311  0142FA  0E20               	movlw	32
 28312  0142FC  0100               	movlb	0	; () banked
 28313  0142FE  6F6C               	movwf	__div_to_l_@cntr& (0+255),b
 28314  014300                     
 28315                           ; BSR set to: 0
 28316                           
 28317                           ; BSR set to: 0
 28318  014300  0100               	movlb	0	; () banked
 28319  014302  90D8               	bcf	status,0,c
 28320  014304  3768               	rlcf	__div_to_l_@quot& (0+255),f,b
 28321  014306  3769               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 28322  014308  376A               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 28323  01430A  376B               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 28324                           
 28325                           ; BSR set to: 0
 28326  01430C  0100               	movlb	0	; () banked
 28327  01430E  5164               	movf	__div_to_l_@f2& (0+255),w,b
 28328  014310  0100               	movlb	0	; () banked
 28329  014312  5D60               	subwf	__div_to_l_@f1& (0+255),w,b
 28330  014314  0100               	movlb	0	; () banked
 28331  014316  5165               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 28332  014318  0100               	movlb	0	; () banked
 28333  01431A  5961               	subwfb	(__div_to_l_@f1+1)& (0+255),w,b
 28334  01431C  0100               	movlb	0	; () banked
 28335  01431E  5166               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 28336  014320  0100               	movlb	0	; () banked
 28337  014322  5962               	subwfb	(__div_to_l_@f1+2)& (0+255),w,b
 28338  014324  0100               	movlb	0	; () banked
 28339  014326  5167               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 28340  014328  0100               	movlb	0	; () banked
 28341  01432A  5963               	subwfb	(__div_to_l_@f1+3)& (0+255),w,b
 28342  01432C  A0D8               	btfss	status,0,c
 28343  01432E  D012               	goto	l2422
 28344                           
 28345                           ; BSR set to: 0
 28346  014330  0100               	movlb	0	; () banked
 28347  014332  5164               	movf	__div_to_l_@f2& (0+255),w,b
 28348  014334  0100               	movlb	0	; () banked
 28349  014336  5F60               	subwf	__div_to_l_@f1& (0+255),f,b
 28350  014338  0100               	movlb	0	; () banked
 28351  01433A  5165               	movf	(__div_to_l_@f2+1)& (0+255),w,b
 28352  01433C  0100               	movlb	0	; () banked
 28353  01433E  5B61               	subwfb	(__div_to_l_@f1+1)& (0+255),f,b
 28354  014340  0100               	movlb	0	; () banked
 28355  014342  5166               	movf	(__div_to_l_@f2+2)& (0+255),w,b
 28356  014344  0100               	movlb	0	; () banked
 28357  014346  5B62               	subwfb	(__div_to_l_@f1+2)& (0+255),f,b
 28358  014348  0100               	movlb	0	; () banked
 28359  01434A  5167               	movf	(__div_to_l_@f2+3)& (0+255),w,b
 28360  01434C  0100               	movlb	0	; () banked
 28361  01434E  5B63               	subwfb	(__div_to_l_@f1+3)& (0+255),f,b
 28362                           
 28363                           ; BSR set to: 0
 28364  014350  0100               	movlb	0	; () banked
 28365  014352  8168               	bsf	__div_to_l_@quot& (0+255),0,b
 28366  014354                     l2422:
 28367                           
 28368                           ; BSR set to: 0
 28369                           
 28370                           ; BSR set to: 0
 28371  014354  0100               	movlb	0	; () banked
 28372  014356  90D8               	bcf	status,0,c
 28373  014358  3760               	rlcf	__div_to_l_@f1& (0+255),f,b
 28374  01435A  3761               	rlcf	(__div_to_l_@f1+1)& (0+255),f,b
 28375  01435C  3762               	rlcf	(__div_to_l_@f1+2)& (0+255),f,b
 28376  01435E  3763               	rlcf	(__div_to_l_@f1+3)& (0+255),f,b
 28377                           
 28378                           ; BSR set to: 0
 28379  014360  0100               	movlb	0	; () banked
 28380  014362  2F6C               	decfsz	__div_to_l_@cntr& (0+255),f,b
 28381  014364  D7CD               	goto	l2421
 28382                           
 28383                           ; BSR set to: 0
 28384                           
 28385                           ; BSR set to: 0
 28386  014366  0100               	movlb	0	; () banked
 28387  014368  AF6D               	btfss	__div_to_l_@exp1& (0+255),7,b
 28388  01436A  D01A               	goto	l2424
 28389                           
 28390                           ; BSR set to: 0
 28391  01436C  0100               	movlb	0	; () banked
 28392  01436E  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 28393  014370  0A80               	xorlw	128
 28394  014372  0F9F               	addlw	159
 28395  014374  B0D8               	btfsc	status,0,c
 28396  014376  D00A               	goto	l2425
 28397                           
 28398                           ; BSR set to: 0
 28399  014378  0E00               	movlw	0
 28400  01437A  0100               	movlb	0	; () banked
 28401  01437C  6F60               	movwf	?__div_to_l_& (0+255),b
 28402  01437E  0E00               	movlw	0
 28403  014380  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 28404  014382  0E00               	movlw	0
 28405  014384  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 28406  014386  0E00               	movlw	0
 28407  014388  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 28408                           
 28409                           ; BSR set to: 0
 28410  01438A  0012               	return	
 28411  01438C                     l2425:
 28412                           
 28413                           ; BSR set to: 0
 28414                           
 28415                           ; BSR set to: 0
 28416                           
 28417                           ; BSR set to: 0
 28418  01438C  0100               	movlb	0	; () banked
 28419  01438E  90D8               	bcf	status,0,c
 28420  014390  336B               	rrcf	(__div_to_l_@quot+3)& (0+255),f,b
 28421  014392  336A               	rrcf	(__div_to_l_@quot+2)& (0+255),f,b
 28422  014394  3369               	rrcf	(__div_to_l_@quot+1)& (0+255),f,b
 28423  014396  3368               	rrcf	__div_to_l_@quot& (0+255),f,b
 28424                           
 28425                           ; BSR set to: 0
 28426  014398  0100               	movlb	0	; () banked
 28427  01439A  3F6D               	incfsz	__div_to_l_@exp1& (0+255),f,b
 28428  01439C  D7F7               	goto	l2425
 28429                           
 28430                           ; BSR set to: 0
 28431  01439E  D01B               	goto	u12930
 28432  0143A0                     l2424:
 28433                           
 28434                           ; BSR set to: 0
 28435                           
 28436                           ; BSR set to: 0
 28437  0143A0  0E1F               	movlw	31
 28438  0143A2  0100               	movlb	0	; () banked
 28439  0143A4  656D               	cpfsgt	__div_to_l_@exp1& (0+255),b
 28440  0143A6  D012               	goto	l2430
 28441                           
 28442                           ; BSR set to: 0
 28443  0143A8  0E00               	movlw	0
 28444  0143AA  0100               	movlb	0	; () banked
 28445  0143AC  6F60               	movwf	?__div_to_l_& (0+255),b
 28446  0143AE  0E00               	movlw	0
 28447  0143B0  6F61               	movwf	(?__div_to_l_+1)& (0+255),b
 28448  0143B2  0E00               	movlw	0
 28449  0143B4  6F62               	movwf	(?__div_to_l_+2)& (0+255),b
 28450  0143B6  0E00               	movlw	0
 28451  0143B8  6F63               	movwf	(?__div_to_l_+3)& (0+255),b
 28452                           
 28453                           ; BSR set to: 0
 28454  0143BA  0012               	return	
 28455  0143BC                     
 28456                           ; BSR set to: 0
 28457                           
 28458                           ; BSR set to: 0
 28459  0143BC  0100               	movlb	0	; () banked
 28460  0143BE  90D8               	bcf	status,0,c
 28461  0143C0  3768               	rlcf	__div_to_l_@quot& (0+255),f,b
 28462  0143C2  3769               	rlcf	(__div_to_l_@quot+1)& (0+255),f,b
 28463  0143C4  376A               	rlcf	(__div_to_l_@quot+2)& (0+255),f,b
 28464  0143C6  376B               	rlcf	(__div_to_l_@quot+3)& (0+255),f,b
 28465  0143C8  0100               	movlb	0	; () banked
 28466  0143CA  076D               	decf	__div_to_l_@exp1& (0+255),f,b
 28467  0143CC                     l2430:
 28468                           
 28469                           ; BSR set to: 0
 28470                           
 28471                           ; BSR set to: 0
 28472  0143CC  0100               	movlb	0	; () banked
 28473  0143CE  516D               	movf	__div_to_l_@exp1& (0+255),w,b
 28474  0143D0  0100               	movlb	0	; () banked
 28475  0143D2  A4D8               	btfss	status,2,c
 28476  0143D4  D7F3               	goto	l2431
 28477  0143D6                     u12930:
 28478                           
 28479                           ; BSR set to: 0
 28480                           
 28481                           ; BSR set to: 0
 28482  0143D6  C068  F060         	movff	__div_to_l_@quot,?__div_to_l_
 28483  0143DA  C069  F061         	movff	__div_to_l_@quot+1,?__div_to_l_+1
 28484  0143DE  C06A  F062         	movff	__div_to_l_@quot+2,?__div_to_l_+2
 28485  0143E2  C06B  F063         	movff	__div_to_l_@quot+3,?__div_to_l_+3
 28486                           
 28487                           ; BSR set to: 0
 28488  0143E6  0012               	return		;funcret
 28489  0143E8                     __end_of__div_to_l_:
 28490                           	opt stack 0
 28491                           tosu	equ	0xFFF
 28492                           tosh	equ	0xFFE
 28493                           tosl	equ	0xFFD
 28494                           pclath	equ	0xFFA
 28495                           tblptru	equ	0xFF8
 28496                           tblptrh	equ	0xFF7
 28497                           tblptrl	equ	0xFF6
 28498                           tablat	equ	0xFF5
 28499                           prodh	equ	0xFF4
 28500                           prodl	equ	0xFF3
 28501                           intcon	equ	0xFF2
 28502                           indf0	equ	0xFEF
 28503                           postinc0	equ	0xFEE
 28504                           fsr0h	equ	0xFEA
 28505                           fsr0l	equ	0xFE9
 28506                           wreg	equ	0xFE8
 28507                           indf1	equ	0xFE7
 28508                           postdec1	equ	0xFE5
 28509                           fsr1h	equ	0xFE2
 28510                           fsr1l	equ	0xFE1
 28511                           indf2	equ	0xFDF
 28512                           postinc2	equ	0xFDE
 28513                           postdec2	equ	0xFDD
 28514                           plusw2	equ	0xFDB
 28515                           fsr2h	equ	0xFDA
 28516                           fsr2l	equ	0xFD9
 28517                           status	equ	0xFD8
 28518                           
 28519 ;; *************** function ___xxtofl *****************
 28520 ;; Defined at:
 28521 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 28522 ;; Parameters:    Size  Location     Type
 28523 ;;  sign            1    wreg     unsigned char 
 28524 ;;  val             4    0[BANK0 ] long 
 28525 ;; Auto vars:     Size  Location     Type
 28526 ;;  sign            1    8[BANK0 ] unsigned char 
 28527 ;;  arg             4   10[BANK0 ] unsigned long 
 28528 ;;  exp             1    9[BANK0 ] unsigned char 
 28529 ;; Return value:  Size  Location     Type
 28530 ;;                  4    0[BANK0 ] unsigned char 
 28531 ;; Registers used:
 28532 ;;		wreg, status,2, status,0
 28533 ;; Tracked objects:
 28534 ;;		On entry : 0/0
 28535 ;;		On exit  : 0/0
 28536 ;;		Unchanged: 0/0
 28537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28538 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28539 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28540 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28541 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28542 ;;Total ram usage:       14 bytes
 28543 ;; Hardware stack levels used:    1
 28544 ;; Hardware stack levels required when called:    7
 28545 ;; This function calls:
 28546 ;;		Nothing
 28547 ;; This function is called by:
 28548 ;;		_ADC_Voltage
 28549 ;;		_displayPositionMode
 28550 ;;		_printf
 28551 ;;		_pow
 28552 ;;		_exp
 28553 ;;		_floor
 28554 ;;		_log
 28555 ;; This function uses a non-reentrant model
 28556 ;;
 28557                           
 28558                           	psect	text135
 28559  013560                     __ptext135:
 28560                           	opt stack 0
 28561  013560                     ___xxtofl:
 28562                           	opt stack 22
 28563                           
 28564                           ; BSR set to: 0
 28565                           ;incstack = 0
 28566                           ;___xxtofl@sign stored from wreg
 28567  013560  0100               	movlb	0	; () banked
 28568  013562  6F68               	movwf	___xxtofl@sign& (0+255),b
 28569  013564  0100               	movlb	0	; () banked
 28570  013566  5168               	movf	___xxtofl@sign& (0+255),w,b
 28571  013568  0100               	movlb	0	; () banked
 28572  01356A  B4D8               	btfsc	status,2,c
 28573  01356C  D01E               	goto	l2819
 28574                           
 28575                           ; BSR set to: 0
 28576  01356E  0100               	movlb	0	; () banked
 28577  013570  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 28578  013572  D01B               	goto	l2819
 28579                           
 28580                           ; BSR set to: 0
 28581  013574  C060  F064         	movff	___xxtofl@val,??___xxtofl
 28582  013578  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 28583  01357C  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 28584  013580  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 28585  013584  0100               	movlb	0	; () banked
 28586  013586  1F64               	comf	??___xxtofl& (0+255),f,b
 28587  013588  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 28588  01358A  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 28589  01358C  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 28590  01358E  2B64               	incf	??___xxtofl& (0+255),f,b
 28591  013590  0E00               	movlw	0
 28592  013592  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 28593  013594  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 28594  013596  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 28595  013598  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 28596  01359C  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 28597  0135A0  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 28598  0135A4  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 28599  0135A8  D008               	goto	l2820
 28600  0135AA                     l2819:
 28601                           
 28602                           ; BSR set to: 0
 28603  0135AA  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 28604  0135AE  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 28605  0135B2  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 28606  0135B6  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 28607  0135BA                     l2820:
 28608                           
 28609                           ; BSR set to: 0
 28610                           
 28611                           ; BSR set to: 0
 28612  0135BA  0100               	movlb	0	; () banked
 28613  0135BC  5160               	movf	___xxtofl@val& (0+255),w,b
 28614  0135BE  0100               	movlb	0	; () banked
 28615  0135C0  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 28616  0135C2  0100               	movlb	0	; () banked
 28617  0135C4  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 28618  0135C6  0100               	movlb	0	; () banked
 28619  0135C8  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 28620  0135CA  A4D8               	btfss	status,2,c
 28621  0135CC  D00A               	goto	l2821
 28622                           
 28623                           ; BSR set to: 0
 28624  0135CE  0E00               	movlw	0
 28625  0135D0  0100               	movlb	0	; () banked
 28626  0135D2  6F60               	movwf	?___xxtofl& (0+255),b
 28627  0135D4  0E00               	movlw	0
 28628  0135D6  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 28629  0135D8  0E00               	movlw	0
 28630  0135DA  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 28631  0135DC  0E00               	movlw	0
 28632  0135DE  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 28633                           
 28634                           ; BSR set to: 0
 28635  0135E0  0012               	return	
 28636  0135E2                     l2821:
 28637                           
 28638                           ; BSR set to: 0
 28639                           
 28640                           ; BSR set to: 0
 28641  0135E2  0E96               	movlw	150
 28642  0135E4  0100               	movlb	0	; () banked
 28643  0135E6  6F69               	movwf	___xxtofl@exp& (0+255),b
 28644  0135E8  D008               	goto	l2823
 28645  0135EA                     
 28646                           ; BSR set to: 0
 28647                           
 28648                           ; BSR set to: 0
 28649  0135EA  0100               	movlb	0	; () banked
 28650  0135EC  2B69               	incf	___xxtofl@exp& (0+255),f,b
 28651  0135EE  0100               	movlb	0	; () banked
 28652  0135F0  90D8               	bcf	status,0,c
 28653  0135F2  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 28654  0135F4  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 28655  0135F6  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 28656  0135F8  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 28657  0135FA                     l2823:
 28658                           
 28659                           ; BSR set to: 0
 28660                           
 28661                           ; BSR set to: 0
 28662  0135FA  0E00               	movlw	0
 28663  0135FC  0100               	movlb	0	; () banked
 28664  0135FE  156A               	andwf	___xxtofl@arg& (0+255),w,b
 28665  013600  0100               	movlb	0	; () banked
 28666  013602  6F64               	movwf	??___xxtofl& (0+255),b
 28667  013604  0E00               	movlw	0
 28668  013606  0100               	movlb	0	; () banked
 28669  013608  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 28670  01360A  0100               	movlb	0	; () banked
 28671  01360C  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 28672  01360E  0E00               	movlw	0
 28673  013610  0100               	movlb	0	; () banked
 28674  013612  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 28675  013614  0100               	movlb	0	; () banked
 28676  013616  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 28677  013618  0EFE               	movlw	254
 28678  01361A  0100               	movlb	0	; () banked
 28679  01361C  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 28680  01361E  0100               	movlb	0	; () banked
 28681  013620  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 28682  013622  0100               	movlb	0	; () banked
 28683  013624  5164               	movf	??___xxtofl& (0+255),w,b
 28684  013626  0100               	movlb	0	; () banked
 28685  013628  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 28686  01362A  0100               	movlb	0	; () banked
 28687  01362C  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 28688  01362E  0100               	movlb	0	; () banked
 28689  013630  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 28690  013632  B4D8               	btfsc	status,2,c
 28691  013634  D010               	goto	l2826
 28692  013636  D7D9               	goto	l2824
 28693  013638                     
 28694                           ; BSR set to: 0
 28695                           
 28696                           ; BSR set to: 0
 28697  013638  0100               	movlb	0	; () banked
 28698  01363A  2B69               	incf	___xxtofl@exp& (0+255),f,b
 28699                           
 28700                           ; BSR set to: 0
 28701  01363C  0E01               	movlw	1
 28702  01363E  0100               	movlb	0	; () banked
 28703  013640  276A               	addwf	___xxtofl@arg& (0+255),f,b
 28704  013642  0E00               	movlw	0
 28705  013644  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 28706  013646  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 28707  013648  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 28708                           
 28709                           ; BSR set to: 0
 28710  01364A  0100               	movlb	0	; () banked
 28711  01364C  90D8               	bcf	status,0,c
 28712  01364E  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 28713  013650  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 28714  013652  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 28715  013654  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 28716  013656                     l2826:
 28717                           
 28718                           ; BSR set to: 0
 28719  013656  0E00               	movlw	0
 28720  013658  0100               	movlb	0	; () banked
 28721  01365A  156A               	andwf	___xxtofl@arg& (0+255),w,b
 28722  01365C  0100               	movlb	0	; () banked
 28723  01365E  6F64               	movwf	??___xxtofl& (0+255),b
 28724  013660  0E00               	movlw	0
 28725  013662  0100               	movlb	0	; () banked
 28726  013664  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 28727  013666  0100               	movlb	0	; () banked
 28728  013668  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 28729  01366A  0E00               	movlw	0
 28730  01366C  0100               	movlb	0	; () banked
 28731  01366E  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 28732  013670  0100               	movlb	0	; () banked
 28733  013672  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 28734  013674  0EFF               	movlw	255
 28735  013676  0100               	movlb	0	; () banked
 28736  013678  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 28737  01367A  0100               	movlb	0	; () banked
 28738  01367C  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 28739  01367E  0100               	movlb	0	; () banked
 28740  013680  5164               	movf	??___xxtofl& (0+255),w,b
 28741  013682  0100               	movlb	0	; () banked
 28742  013684  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 28743  013686  0100               	movlb	0	; () banked
 28744  013688  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 28745  01368A  0100               	movlb	0	; () banked
 28746  01368C  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 28747  01368E  B4D8               	btfsc	status,2,c
 28748  013690  D009               	goto	l2829
 28749  013692  D7D2               	goto	l2827
 28750  013694                     
 28751                           ; BSR set to: 0
 28752                           
 28753                           ; BSR set to: 0
 28754  013694  0100               	movlb	0	; () banked
 28755  013696  0769               	decf	___xxtofl@exp& (0+255),f,b
 28756  013698  0100               	movlb	0	; () banked
 28757  01369A  90D8               	bcf	status,0,c
 28758  01369C  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 28759  01369E  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 28760  0136A0  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 28761  0136A2  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 28762  0136A4                     l2829:
 28763                           
 28764                           ; BSR set to: 0
 28765                           
 28766                           ; BSR set to: 0
 28767  0136A4  0100               	movlb	0	; () banked
 28768  0136A6  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 28769  0136A8  D004               	goto	u11650
 28770                           
 28771                           ; BSR set to: 0
 28772  0136AA  0E02               	movlw	2
 28773  0136AC  0100               	movlb	0	; () banked
 28774  0136AE  6169               	cpfslt	___xxtofl@exp& (0+255),b
 28775  0136B0  D7F1               	goto	l2830
 28776  0136B2                     u11650:
 28777                           
 28778                           ; BSR set to: 0
 28779                           
 28780                           ; BSR set to: 0
 28781  0136B2  0100               	movlb	0	; () banked
 28782  0136B4  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 28783  0136B6  D009               	goto	l2834
 28784                           
 28785                           ; BSR set to: 0
 28786  0136B8  0EFF               	movlw	255
 28787  0136BA  0100               	movlb	0	; () banked
 28788  0136BC  176A               	andwf	___xxtofl@arg& (0+255),f,b
 28789  0136BE  0EFF               	movlw	255
 28790  0136C0  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 28791  0136C2  0E7F               	movlw	127
 28792  0136C4  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 28793  0136C6  0EFF               	movlw	255
 28794  0136C8  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 28795  0136CA                     l2834:
 28796                           
 28797                           ; BSR set to: 0
 28798  0136CA  0100               	movlb	0	; () banked
 28799  0136CC  90D8               	bcf	status,0,c
 28800  0136CE  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 28801  0136D0  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 28802  0136D4  0100               	movlb	0	; () banked
 28803  0136D6  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 28804  0136D8  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 28805  0136DA  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 28806  0136DC  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 28807  0136E0  0100               	movlb	0	; () banked
 28808  0136E2  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 28809  0136E4  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 28810  0136E6  6B64               	clrf	??___xxtofl& (0+255),b
 28811  0136E8  0100               	movlb	0	; () banked
 28812  0136EA  5164               	movf	??___xxtofl& (0+255),w,b
 28813  0136EC  0100               	movlb	0	; () banked
 28814  0136EE  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 28815  0136F0  0100               	movlb	0	; () banked
 28816  0136F2  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 28817  0136F4  0100               	movlb	0	; () banked
 28818  0136F6  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 28819  0136F8  0100               	movlb	0	; () banked
 28820  0136FA  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 28821  0136FC  0100               	movlb	0	; () banked
 28822  0136FE  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 28823  013700  0100               	movlb	0	; () banked
 28824  013702  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 28825  013704  0100               	movlb	0	; () banked
 28826  013706  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 28827                           
 28828                           ; BSR set to: 0
 28829  013708  0100               	movlb	0	; () banked
 28830  01370A  5168               	movf	___xxtofl@sign& (0+255),w,b
 28831  01370C  0100               	movlb	0	; () banked
 28832  01370E  B4D8               	btfsc	status,2,c
 28833  013710  D005               	goto	l2835
 28834                           
 28835                           ; BSR set to: 0
 28836  013712  0100               	movlb	0	; () banked
 28837  013714  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 28838  013716  D002               	goto	l2835
 28839                           
 28840                           ; BSR set to: 0
 28841  013718  0100               	movlb	0	; () banked
 28842  01371A  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 28843  01371C                     l2835:
 28844                           
 28845                           ; BSR set to: 0
 28846                           
 28847                           ; BSR set to: 0
 28848  01371C  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 28849  013720  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 28850  013724  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 28851  013728  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 28852  01372C  0012               	return	
 28853  01372E                     __end_of___xxtofl:
 28854                           	opt stack 0
 28855                           tosu	equ	0xFFF
 28856                           tosh	equ	0xFFE
 28857                           tosl	equ	0xFFD
 28858                           pclath	equ	0xFFA
 28859                           tblptru	equ	0xFF8
 28860                           tblptrh	equ	0xFF7
 28861                           tblptrl	equ	0xFF6
 28862                           tablat	equ	0xFF5
 28863                           prodh	equ	0xFF4
 28864                           prodl	equ	0xFF3
 28865                           intcon	equ	0xFF2
 28866                           indf0	equ	0xFEF
 28867                           postinc0	equ	0xFEE
 28868                           fsr0h	equ	0xFEA
 28869                           fsr0l	equ	0xFE9
 28870                           wreg	equ	0xFE8
 28871                           indf1	equ	0xFE7
 28872                           postdec1	equ	0xFE5
 28873                           fsr1h	equ	0xFE2
 28874                           fsr1l	equ	0xFE1
 28875                           indf2	equ	0xFDF
 28876                           postinc2	equ	0xFDE
 28877                           postdec2	equ	0xFDD
 28878                           plusw2	equ	0xFDB
 28879                           fsr2h	equ	0xFDA
 28880                           fsr2l	equ	0xFD9
 28881                           status	equ	0xFD8
 28882                           
 28883 ;; *************** function ___llmod *****************
 28884 ;; Defined at:
 28885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
 28886 ;; Parameters:    Size  Location     Type
 28887 ;;  dividend        4   13[BANK0 ] unsigned long 
 28888 ;;  divisor         4   17[BANK0 ] unsigned long 
 28889 ;; Auto vars:     Size  Location     Type
 28890 ;;  counter         1   21[BANK0 ] unsigned char 
 28891 ;; Return value:  Size  Location     Type
 28892 ;;                  4   13[BANK0 ] unsigned long 
 28893 ;; Registers used:
 28894 ;;		wreg, status,2, status,0
 28895 ;; Tracked objects:
 28896 ;;		On entry : 0/0
 28897 ;;		On exit  : 0/0
 28898 ;;		Unchanged: 0/0
 28899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28900 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28903 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28904 ;;Total ram usage:        9 bytes
 28905 ;; Hardware stack levels used:    1
 28906 ;; Hardware stack levels required when called:    7
 28907 ;; This function calls:
 28908 ;;		Nothing
 28909 ;; This function is called by:
 28910 ;;		_printf
 28911 ;;		_rand_between
 28912 ;; This function uses a non-reentrant model
 28913 ;;
 28914                           
 28915                           	psect	text136
 28916  01660E                     __ptext136:
 28917                           	opt stack 0
 28918  01660E                     ___llmod:
 28919                           	opt stack 22
 28920                           
 28921                           ; BSR set to: 0
 28922                           ;incstack = 0
 28923  01660E  0100               	movlb	0	; () banked
 28924  016610  5171               	movf	___llmod@divisor& (0+255),w,b
 28925  016612  0100               	movlb	0	; () banked
 28926  016614  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 28927  016616  0100               	movlb	0	; () banked
 28928  016618  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 28929  01661A  0100               	movlb	0	; () banked
 28930  01661C  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
 28931  01661E  B4D8               	btfsc	status,2,c
 28932  016620  D03A               	goto	l2618
 28933                           
 28934                           ; BSR set to: 0
 28935  016622  0E01               	movlw	1
 28936  016624  0100               	movlb	0	; () banked
 28937  016626  6F75               	movwf	___llmod@counter& (0+255),b
 28938  016628  D008               	goto	l2613
 28939  01662A                     
 28940                           ; BSR set to: 0
 28941                           
 28942                           ; BSR set to: 0
 28943  01662A  0100               	movlb	0	; () banked
 28944  01662C  90D8               	bcf	status,0,c
 28945  01662E  3771               	rlcf	___llmod@divisor& (0+255),f,b
 28946  016630  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 28947  016632  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 28948  016634  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 28949  016636  0100               	movlb	0	; () banked
 28950  016638  2B75               	incf	___llmod@counter& (0+255),f,b
 28951  01663A                     l2613:
 28952                           
 28953                           ; BSR set to: 0
 28954                           
 28955                           ; BSR set to: 0
 28956  01663A  0100               	movlb	0	; () banked
 28957  01663C  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 28958  01663E  D7F5               	goto	l2614
 28959  016640                     u12950:
 28960                           
 28961                           ; BSR set to: 0
 28962                           
 28963                           ; BSR set to: 0
 28964                           
 28965                           ; BSR set to: 0
 28966  016640  0100               	movlb	0	; () banked
 28967  016642  5171               	movf	___llmod@divisor& (0+255),w,b
 28968  016644  0100               	movlb	0	; () banked
 28969  016646  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 28970  016648  0100               	movlb	0	; () banked
 28971  01664A  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 28972  01664C  0100               	movlb	0	; () banked
 28973  01664E  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 28974  016650  0100               	movlb	0	; () banked
 28975  016652  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 28976  016654  0100               	movlb	0	; () banked
 28977  016656  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 28978  016658  0100               	movlb	0	; () banked
 28979  01665A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 28980  01665C  0100               	movlb	0	; () banked
 28981  01665E  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 28982  016660  A0D8               	btfss	status,0,c
 28983  016662  D010               	goto	l2617
 28984                           
 28985                           ; BSR set to: 0
 28986  016664  0100               	movlb	0	; () banked
 28987  016666  5171               	movf	___llmod@divisor& (0+255),w,b
 28988  016668  0100               	movlb	0	; () banked
 28989  01666A  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 28990  01666C  0100               	movlb	0	; () banked
 28991  01666E  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 28992  016670  0100               	movlb	0	; () banked
 28993  016672  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 28994  016674  0100               	movlb	0	; () banked
 28995  016676  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 28996  016678  0100               	movlb	0	; () banked
 28997  01667A  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 28998  01667C  0100               	movlb	0	; () banked
 28999  01667E  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 29000  016680  0100               	movlb	0	; () banked
 29001  016682  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 29002  016684                     l2617:
 29003                           
 29004                           ; BSR set to: 0
 29005                           
 29006                           ; BSR set to: 0
 29007  016684  0100               	movlb	0	; () banked
 29008  016686  90D8               	bcf	status,0,c
 29009  016688  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 29010  01668A  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 29011  01668C  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 29012  01668E  3371               	rrcf	___llmod@divisor& (0+255),f,b
 29013                           
 29014                           ; BSR set to: 0
 29015  016690  0100               	movlb	0	; () banked
 29016  016692  2F75               	decfsz	___llmod@counter& (0+255),f,b
 29017  016694  D7D5               	goto	u12950
 29018  016696                     l2618:
 29019                           
 29020                           ; BSR set to: 0
 29021                           
 29022                           ; BSR set to: 0
 29023  016696  C06D  F06D         	movff	___llmod@dividend,?___llmod
 29024  01669A  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 29025  01669E  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 29026  0166A2  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 29027                           
 29028                           ; BSR set to: 0
 29029  0166A6  0012               	return		;funcret
 29030  0166A8                     __end_of___llmod:
 29031                           	opt stack 0
 29032                           tosu	equ	0xFFF
 29033                           tosh	equ	0xFFE
 29034                           tosl	equ	0xFFD
 29035                           pclath	equ	0xFFA
 29036                           tblptru	equ	0xFF8
 29037                           tblptrh	equ	0xFF7
 29038                           tblptrl	equ	0xFF6
 29039                           tablat	equ	0xFF5
 29040                           prodh	equ	0xFF4
 29041                           prodl	equ	0xFF3
 29042                           intcon	equ	0xFF2
 29043                           indf0	equ	0xFEF
 29044                           postinc0	equ	0xFEE
 29045                           fsr0h	equ	0xFEA
 29046                           fsr0l	equ	0xFE9
 29047                           wreg	equ	0xFE8
 29048                           indf1	equ	0xFE7
 29049                           postdec1	equ	0xFE5
 29050                           fsr1h	equ	0xFE2
 29051                           fsr1l	equ	0xFE1
 29052                           indf2	equ	0xFDF
 29053                           postinc2	equ	0xFDE
 29054                           postdec2	equ	0xFDD
 29055                           plusw2	equ	0xFDB
 29056                           fsr2h	equ	0xFDA
 29057                           fsr2l	equ	0xFD9
 29058                           status	equ	0xFD8
 29059                           
 29060 ;; *************** function ___fltol *****************
 29061 ;; Defined at:
 29062 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
 29063 ;; Parameters:    Size  Location     Type
 29064 ;;  f1              4   39[BANK0 ] unsigned long 
 29065 ;; Auto vars:     Size  Location     Type
 29066 ;;  exp1            1   48[BANK0 ] unsigned char 
 29067 ;;  sign1           1   47[BANK0 ] unsigned char 
 29068 ;; Return value:  Size  Location     Type
 29069 ;;                  4   39[BANK0 ] long 
 29070 ;; Registers used:
 29071 ;;		wreg, status,2, status,0
 29072 ;; Tracked objects:
 29073 ;;		On entry : 0/0
 29074 ;;		On exit  : 0/0
 29075 ;;		Unchanged: 0/0
 29076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29077 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29079 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29080 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29081 ;;Total ram usage:       10 bytes
 29082 ;; Hardware stack levels used:    1
 29083 ;; Hardware stack levels required when called:    7
 29084 ;; This function calls:
 29085 ;;		Nothing
 29086 ;; This function is called by:
 29087 ;;		_displayPositionMode
 29088 ;;		_printf
 29089 ;;		_pow
 29090 ;;		_exp
 29091 ;;		_floor
 29092 ;; This function uses a non-reentrant model
 29093 ;;
 29094                           
 29095                           	psect	text137
 29096  0150AA                     __ptext137:
 29097                           	opt stack 0
 29098  0150AA                     ___fltol:
 29099                           	opt stack 22
 29100                           
 29101                           ; BSR set to: 0
 29102                           ;incstack = 0
 29103  0150AA  0100               	movlb	0	; () banked
 29104  0150AC  3589               	rlcf	(___fltol@f1+2)& (0+255),w,b
 29105  0150AE  358A               	rlcf	(___fltol@f1+3)& (0+255),w,b
 29106  0150B0  0100               	movlb	0	; () banked
 29107  0150B2  6F90               	movwf	___fltol@exp1& (0+255),b
 29108  0150B4  0100               	movlb	0	; () banked
 29109  0150B6  5190               	movf	___fltol@exp1& (0+255),w,b
 29110  0150B8  A4D8               	btfss	status,2,c
 29111  0150BA  D00A               	goto	l2465
 29112                           
 29113                           ; BSR set to: 0
 29114  0150BC  0E00               	movlw	0
 29115  0150BE  0100               	movlb	0	; () banked
 29116  0150C0  6F87               	movwf	?___fltol& (0+255),b
 29117  0150C2  0E00               	movlw	0
 29118  0150C4  6F88               	movwf	(?___fltol+1)& (0+255),b
 29119  0150C6  0E00               	movlw	0
 29120  0150C8  6F89               	movwf	(?___fltol+2)& (0+255),b
 29121  0150CA  0E00               	movlw	0
 29122  0150CC  6F8A               	movwf	(?___fltol+3)& (0+255),b
 29123                           
 29124                           ; BSR set to: 0
 29125  0150CE  0012               	return	
 29126  0150D0                     l2465:
 29127                           
 29128                           ; BSR set to: 0
 29129                           
 29130                           ; BSR set to: 0
 29131  0150D0  C087  F08B         	movff	___fltol@f1,??___fltol
 29132  0150D4  C088  F08C         	movff	___fltol@f1+1,??___fltol+1
 29133  0150D8  C089  F08D         	movff	___fltol@f1+2,??___fltol+2
 29134  0150DC  C08A  F08E         	movff	___fltol@f1+3,??___fltol+3
 29135  0150E0  0E20               	movlw	32
 29136  0150E2  D006               	goto	u11530
 29137  0150E4                     u11535:
 29138  0150E4  0100               	movlb	0	; () banked
 29139  0150E6  90D8               	bcf	status,0,c
 29140  0150E8  338E               	rrcf	(??___fltol+3)& (0+255),f,b
 29141  0150EA  338D               	rrcf	(??___fltol+2)& (0+255),f,b
 29142  0150EC  338C               	rrcf	(??___fltol+1)& (0+255),f,b
 29143  0150EE  338B               	rrcf	??___fltol& (0+255),f,b
 29144  0150F0                     u11530:
 29145  0150F0  2EE8               	decfsz	wreg,f,c
 29146  0150F2  D7F8               	goto	u11535
 29147  0150F4  0100               	movlb	0	; () banked
 29148  0150F6  518B               	movf	??___fltol& (0+255),w,b
 29149  0150F8  0100               	movlb	0	; () banked
 29150  0150FA  6F8F               	movwf	___fltol@sign1& (0+255),b
 29151                           
 29152                           ; BSR set to: 0
 29153  0150FC  0100               	movlb	0	; () banked
 29154  0150FE  8F89               	bsf	(___fltol@f1+2)& (0+255),7,b
 29155                           
 29156                           ; BSR set to: 0
 29157  015100  0EFF               	movlw	255
 29158  015102  0100               	movlb	0	; () banked
 29159  015104  1787               	andwf	___fltol@f1& (0+255),f,b
 29160  015106  0EFF               	movlw	255
 29161  015108  1788               	andwf	(___fltol@f1+1)& (0+255),f,b
 29162  01510A  0EFF               	movlw	255
 29163  01510C  1789               	andwf	(___fltol@f1+2)& (0+255),f,b
 29164  01510E  0E00               	movlw	0
 29165  015110  178A               	andwf	(___fltol@f1+3)& (0+255),f,b
 29166                           
 29167                           ; BSR set to: 0
 29168  015112  0E96               	movlw	150
 29169  015114  0100               	movlb	0	; () banked
 29170  015116  5F90               	subwf	___fltol@exp1& (0+255),f,b
 29171                           
 29172                           ; BSR set to: 0
 29173  015118  0100               	movlb	0	; () banked
 29174  01511A  AF90               	btfss	___fltol@exp1& (0+255),7,b
 29175  01511C  D01A               	goto	l2467
 29176                           
 29177                           ; BSR set to: 0
 29178  01511E  0100               	movlb	0	; () banked
 29179  015120  5190               	movf	___fltol@exp1& (0+255),w,b
 29180  015122  0A80               	xorlw	128
 29181  015124  0F97               	addlw	151
 29182  015126  B0D8               	btfsc	status,0,c
 29183  015128  D00A               	goto	l2468
 29184                           
 29185                           ; BSR set to: 0
 29186  01512A  0E00               	movlw	0
 29187  01512C  0100               	movlb	0	; () banked
 29188  01512E  6F87               	movwf	?___fltol& (0+255),b
 29189  015130  0E00               	movlw	0
 29190  015132  6F88               	movwf	(?___fltol+1)& (0+255),b
 29191  015134  0E00               	movlw	0
 29192  015136  6F89               	movwf	(?___fltol+2)& (0+255),b
 29193  015138  0E00               	movlw	0
 29194  01513A  6F8A               	movwf	(?___fltol+3)& (0+255),b
 29195                           
 29196                           ; BSR set to: 0
 29197  01513C  0012               	return	
 29198  01513E                     l2468:
 29199                           
 29200                           ; BSR set to: 0
 29201                           
 29202                           ; BSR set to: 0
 29203                           
 29204                           ; BSR set to: 0
 29205  01513E  0100               	movlb	0	; () banked
 29206  015140  90D8               	bcf	status,0,c
 29207  015142  338A               	rrcf	(___fltol@f1+3)& (0+255),f,b
 29208  015144  3389               	rrcf	(___fltol@f1+2)& (0+255),f,b
 29209  015146  3388               	rrcf	(___fltol@f1+1)& (0+255),f,b
 29210  015148  3387               	rrcf	___fltol@f1& (0+255),f,b
 29211                           
 29212                           ; BSR set to: 0
 29213  01514A  0100               	movlb	0	; () banked
 29214  01514C  3F90               	incfsz	___fltol@exp1& (0+255),f,b
 29215  01514E  D7F7               	goto	l2468
 29216                           
 29217                           ; BSR set to: 0
 29218  015150  D01B               	goto	u11570
 29219  015152                     l2467:
 29220                           
 29221                           ; BSR set to: 0
 29222                           
 29223                           ; BSR set to: 0
 29224  015152  0E1F               	movlw	31
 29225  015154  0100               	movlb	0	; () banked
 29226  015156  6590               	cpfsgt	___fltol@exp1& (0+255),b
 29227  015158  D012               	goto	l2473
 29228                           
 29229                           ; BSR set to: 0
 29230  01515A  0E00               	movlw	0
 29231  01515C  0100               	movlb	0	; () banked
 29232  01515E  6F87               	movwf	?___fltol& (0+255),b
 29233  015160  0E00               	movlw	0
 29234  015162  6F88               	movwf	(?___fltol+1)& (0+255),b
 29235  015164  0E00               	movlw	0
 29236  015166  6F89               	movwf	(?___fltol+2)& (0+255),b
 29237  015168  0E00               	movlw	0
 29238  01516A  6F8A               	movwf	(?___fltol+3)& (0+255),b
 29239                           
 29240                           ; BSR set to: 0
 29241  01516C  0012               	return	
 29242  01516E                     
 29243                           ; BSR set to: 0
 29244                           
 29245                           ; BSR set to: 0
 29246  01516E  0100               	movlb	0	; () banked
 29247  015170  90D8               	bcf	status,0,c
 29248  015172  3787               	rlcf	___fltol@f1& (0+255),f,b
 29249  015174  3788               	rlcf	(___fltol@f1+1)& (0+255),f,b
 29250  015176  3789               	rlcf	(___fltol@f1+2)& (0+255),f,b
 29251  015178  378A               	rlcf	(___fltol@f1+3)& (0+255),f,b
 29252  01517A  0100               	movlb	0	; () banked
 29253  01517C  0790               	decf	___fltol@exp1& (0+255),f,b
 29254  01517E                     l2473:
 29255                           
 29256                           ; BSR set to: 0
 29257                           
 29258                           ; BSR set to: 0
 29259  01517E  0100               	movlb	0	; () banked
 29260  015180  5190               	movf	___fltol@exp1& (0+255),w,b
 29261  015182  0100               	movlb	0	; () banked
 29262  015184  A4D8               	btfss	status,2,c
 29263  015186  D7F3               	goto	l2474
 29264  015188                     u11570:
 29265                           
 29266                           ; BSR set to: 0
 29267                           
 29268                           ; BSR set to: 0
 29269                           
 29270                           ; BSR set to: 0
 29271  015188  0100               	movlb	0	; () banked
 29272  01518A  518F               	movf	___fltol@sign1& (0+255),w,b
 29273  01518C  0100               	movlb	0	; () banked
 29274  01518E  B4D8               	btfsc	status,2,c
 29275  015190  D009               	goto	l2476
 29276                           
 29277                           ; BSR set to: 0
 29278  015192  0100               	movlb	0	; () banked
 29279  015194  1F8A               	comf	(___fltol@f1+3)& (0+255),f,b
 29280  015196  1F89               	comf	(___fltol@f1+2)& (0+255),f,b
 29281  015198  1F88               	comf	(___fltol@f1+1)& (0+255),f,b
 29282  01519A  6D87               	negf	___fltol@f1& (0+255),b
 29283  01519C  0E00               	movlw	0
 29284  01519E  2388               	addwfc	(___fltol@f1+1)& (0+255),f,b
 29285  0151A0  2389               	addwfc	(___fltol@f1+2)& (0+255),f,b
 29286  0151A2  238A               	addwfc	(___fltol@f1+3)& (0+255),f,b
 29287  0151A4                     l2476:
 29288                           
 29289                           ; BSR set to: 0
 29290                           
 29291                           ; BSR set to: 0
 29292  0151A4  C087  F087         	movff	___fltol@f1,?___fltol
 29293  0151A8  C088  F088         	movff	___fltol@f1+1,?___fltol+1
 29294  0151AC  C089  F089         	movff	___fltol@f1+2,?___fltol+2
 29295  0151B0  C08A  F08A         	movff	___fltol@f1+3,?___fltol+3
 29296  0151B4  0012               	return	
 29297  0151B6                     __end_of___fltol:
 29298                           	opt stack 0
 29299                           tosu	equ	0xFFF
 29300                           tosh	equ	0xFFE
 29301                           tosl	equ	0xFFD
 29302                           pclath	equ	0xFFA
 29303                           tblptru	equ	0xFF8
 29304                           tblptrh	equ	0xFF7
 29305                           tblptrl	equ	0xFF6
 29306                           tablat	equ	0xFF5
 29307                           prodh	equ	0xFF4
 29308                           prodl	equ	0xFF3
 29309                           intcon	equ	0xFF2
 29310                           indf0	equ	0xFEF
 29311                           postinc0	equ	0xFEE
 29312                           fsr0h	equ	0xFEA
 29313                           fsr0l	equ	0xFE9
 29314                           wreg	equ	0xFE8
 29315                           indf1	equ	0xFE7
 29316                           postdec1	equ	0xFE5
 29317                           fsr1h	equ	0xFE2
 29318                           fsr1l	equ	0xFE1
 29319                           indf2	equ	0xFDF
 29320                           postinc2	equ	0xFDE
 29321                           postdec2	equ	0xFDD
 29322                           plusw2	equ	0xFDB
 29323                           fsr2h	equ	0xFDA
 29324                           fsr2l	equ	0xFD9
 29325                           status	equ	0xFD8
 29326                           
 29327 ;; *************** function ___flsub *****************
 29328 ;; Defined at:
 29329 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
 29330 ;; Parameters:    Size  Location     Type
 29331 ;;  b               4   72[BANK0 ] long 
 29332 ;;  a               4   76[BANK0 ] long 
 29333 ;; Auto vars:     Size  Location     Type
 29334 ;;		None
 29335 ;; Return value:  Size  Location     Type
 29336 ;;                  4   72[BANK0 ] long 
 29337 ;; Registers used:
 29338 ;;		wreg, status,2, status,0, cstack
 29339 ;; Tracked objects:
 29340 ;;		On entry : 0/0
 29341 ;;		On exit  : 0/0
 29342 ;;		Unchanged: 0/0
 29343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29344 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29347 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29348 ;;Total ram usage:        8 bytes
 29349 ;; Hardware stack levels used:    1
 29350 ;; Hardware stack levels required when called:    8
 29351 ;; This function calls:
 29352 ;;		___fladd
 29353 ;; This function is called by:
 29354 ;;		_printf
 29355 ;;		_exp
 29356 ;; This function uses a non-reentrant model
 29357 ;;
 29358                           
 29359                           	psect	text138
 29360  0176E6                     __ptext138:
 29361                           	opt stack 0
 29362  0176E6                     ___flsub:
 29363                           	opt stack 21
 29364                           
 29365                           ; BSR set to: 0
 29366                           ;incstack = 0
 29367  0176E6  0E00               	movlw	0
 29368  0176E8  0100               	movlb	0	; () banked
 29369  0176EA  1BAC               	xorwf	___flsub@a& (0+255),f,b
 29370  0176EC  0E00               	movlw	0
 29371  0176EE  1BAD               	xorwf	(___flsub@a+1)& (0+255),f,b
 29372  0176F0  0E00               	movlw	0
 29373  0176F2  1BAE               	xorwf	(___flsub@a+2)& (0+255),f,b
 29374  0176F4  0E80               	movlw	128
 29375  0176F6  1BAF               	xorwf	(___flsub@a+3)& (0+255),f,b
 29376                           
 29377                           ; BSR set to: 0
 29378  0176F8  C0A8  F094         	movff	___flsub@b,___fladd@b
 29379  0176FC  C0A9  F095         	movff	___flsub@b+1,___fladd@b+1
 29380  017700  C0AA  F096         	movff	___flsub@b+2,___fladd@b+2
 29381  017704  C0AB  F097         	movff	___flsub@b+3,___fladd@b+3
 29382  017708  C0AC  F098         	movff	___flsub@a,___fladd@a
 29383  01770C  C0AD  F099         	movff	___flsub@a+1,___fladd@a+1
 29384  017710  C0AE  F09A         	movff	___flsub@a+2,___fladd@a+2
 29385  017714  C0AF  F09B         	movff	___flsub@a+3,___fladd@a+3
 29386  017718  ECE6  F086         	call	___fladd	;wreg free
 29387  01771C  C094  F0A8         	movff	?___fladd,?___flsub
 29388  017720  C095  F0A9         	movff	?___fladd+1,?___flsub+1
 29389  017724  C096  F0AA         	movff	?___fladd+2,?___flsub+2
 29390  017728  C097  F0AB         	movff	?___fladd+3,?___flsub+3
 29391  01772C  0012               	return	
 29392  01772E                     __end_of___flsub:
 29393                           	opt stack 0
 29394                           tosu	equ	0xFFF
 29395                           tosh	equ	0xFFE
 29396                           tosl	equ	0xFFD
 29397                           pclath	equ	0xFFA
 29398                           tblptru	equ	0xFF8
 29399                           tblptrh	equ	0xFF7
 29400                           tblptrl	equ	0xFF6
 29401                           tablat	equ	0xFF5
 29402                           prodh	equ	0xFF4
 29403                           prodl	equ	0xFF3
 29404                           intcon	equ	0xFF2
 29405                           indf0	equ	0xFEF
 29406                           postinc0	equ	0xFEE
 29407                           fsr0h	equ	0xFEA
 29408                           fsr0l	equ	0xFE9
 29409                           wreg	equ	0xFE8
 29410                           indf1	equ	0xFE7
 29411                           postdec1	equ	0xFE5
 29412                           fsr1h	equ	0xFE2
 29413                           fsr1l	equ	0xFE1
 29414                           indf2	equ	0xFDF
 29415                           postinc2	equ	0xFDE
 29416                           postdec2	equ	0xFDD
 29417                           plusw2	equ	0xFDB
 29418                           fsr2h	equ	0xFDA
 29419                           fsr2l	equ	0xFD9
 29420                           status	equ	0xFD8
 29421                           
 29422 ;; *************** function ___fladd *****************
 29423 ;; Defined at:
 29424 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
 29425 ;; Parameters:    Size  Location     Type
 29426 ;;  b               4   52[BANK0 ] long 
 29427 ;;  a               4   56[BANK0 ] long 
 29428 ;; Auto vars:     Size  Location     Type
 29429 ;;  grs             1   71[BANK0 ] unsigned char 
 29430 ;;  bexp            1   70[BANK0 ] unsigned char 
 29431 ;;  aexp            1   69[BANK0 ] unsigned char 
 29432 ;;  signs           1   68[BANK0 ] unsigned char 
 29433 ;; Return value:  Size  Location     Type
 29434 ;;                  4   52[BANK0 ] unsigned char 
 29435 ;; Registers used:
 29436 ;;		wreg, status,2, status,0
 29437 ;; Tracked objects:
 29438 ;;		On entry : 0/0
 29439 ;;		On exit  : 0/0
 29440 ;;		Unchanged: 0/0
 29441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29442 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29443 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29444 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29445 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29446 ;;Total ram usage:       20 bytes
 29447 ;; Hardware stack levels used:    1
 29448 ;; Hardware stack levels required when called:    7
 29449 ;; This function calls:
 29450 ;;		Nothing
 29451 ;; This function is called by:
 29452 ;;		_printf
 29453 ;;		___flsub
 29454 ;;		_floor
 29455 ;;		_log
 29456 ;;		_eval_poly
 29457 ;; This function uses a non-reentrant model
 29458 ;;
 29459                           
 29460                           	psect	text139
 29461  010DCC                     __ptext139:
 29462                           	opt stack 0
 29463  010DCC                     ___fladd:
 29464                           	opt stack 21
 29465                           
 29466                           ;incstack = 0
 29467  010DCC  0100               	movlb	0	; () banked
 29468  010DCE  5197               	movf	(___fladd@b+3)& (0+255),w,b
 29469  010DD0  0B80               	andlw	128
 29470  010DD2  0100               	movlb	0	; () banked
 29471  010DD4  6FA4               	movwf	___fladd@signs& (0+255),b
 29472  010DD6  0100               	movlb	0	; () banked
 29473  010DD8  5197               	movf	(___fladd@b+3)& (0+255),w,b
 29474  010DDA  2597               	addwf	(___fladd@b+3)& (0+255),w,b
 29475  010DDC  0100               	movlb	0	; () banked
 29476  010DDE  6FA6               	movwf	___fladd@bexp& (0+255),b
 29477                           
 29478                           ; BSR set to: 0
 29479  010DE0  0100               	movlb	0	; () banked
 29480  010DE2  AF96               	btfss	(___fladd@b+2)& (0+255),7,b
 29481  010DE4  D002               	goto	l2699
 29482                           
 29483                           ; BSR set to: 0
 29484  010DE6  0100               	movlb	0	; () banked
 29485  010DE8  81A6               	bsf	___fladd@bexp& (0+255),0,b
 29486  010DEA                     l2699:
 29487                           
 29488                           ; BSR set to: 0
 29489                           
 29490                           ; BSR set to: 0
 29491  010DEA  0100               	movlb	0	; () banked
 29492  010DEC  51A6               	movf	___fladd@bexp& (0+255),w,b
 29493  010DEE  0100               	movlb	0	; () banked
 29494  010DF0  B4D8               	btfsc	status,2,c
 29495  010DF2  D012               	goto	l2700
 29496                           
 29497                           ; BSR set to: 0
 29498  010DF4  0100               	movlb	0	; () banked
 29499  010DF6  29A6               	incf	___fladd@bexp& (0+255),w,b
 29500  010DF8  A4D8               	btfss	status,2,c
 29501  010DFA  D009               	goto	l2701
 29502                           
 29503                           ; BSR set to: 0
 29504  010DFC  0E00               	movlw	0
 29505  010DFE  0100               	movlb	0	; () banked
 29506  010E00  6F94               	movwf	___fladd@b& (0+255),b
 29507  010E02  0E00               	movlw	0
 29508  010E04  6F95               	movwf	(___fladd@b+1)& (0+255),b
 29509  010E06  0E00               	movlw	0
 29510  010E08  6F96               	movwf	(___fladd@b+2)& (0+255),b
 29511  010E0A  0E00               	movlw	0
 29512  010E0C  6F97               	movwf	(___fladd@b+3)& (0+255),b
 29513  010E0E                     l2701:
 29514                           
 29515                           ; BSR set to: 0
 29516                           
 29517                           ; BSR set to: 0
 29518  010E0E  0100               	movlb	0	; () banked
 29519  010E10  8F96               	bsf	(___fladd@b+2)& (0+255),7,b
 29520                           
 29521                           ; BSR set to: 0
 29522  010E12  0E00               	movlw	0
 29523  010E14  0100               	movlb	0	; () banked
 29524  010E16  D008               	goto	L19
 29525  010E18                     l2700:
 29526                           
 29527                           ; BSR set to: 0
 29528                           
 29529                           ; BSR set to: 0
 29530  010E18  0E00               	movlw	0
 29531  010E1A  0100               	movlb	0	; () banked
 29532  010E1C  6F94               	movwf	___fladd@b& (0+255),b
 29533  010E1E  0E00               	movlw	0
 29534  010E20  6F95               	movwf	(___fladd@b+1)& (0+255),b
 29535  010E22  0E00               	movlw	0
 29536  010E24  6F96               	movwf	(___fladd@b+2)& (0+255),b
 29537  010E26  0E00               	movlw	0
 29538  010E28                     L19:
 29539  010E28  6F97               	movwf	(___fladd@b+3)& (0+255),b
 29540                           
 29541                           ; BSR set to: 0
 29542                           
 29543                           ; BSR set to: 0
 29544  010E2A  0100               	movlb	0	; () banked
 29545  010E2C  519B               	movf	(___fladd@a+3)& (0+255),w,b
 29546  010E2E  0B80               	andlw	128
 29547  010E30  0100               	movlb	0	; () banked
 29548  010E32  6FA5               	movwf	___fladd@aexp& (0+255),b
 29549                           
 29550                           ; BSR set to: 0
 29551  010E34  0100               	movlb	0	; () banked
 29552  010E36  51A4               	movf	___fladd@signs& (0+255),w,b
 29553  010E38  0100               	movlb	0	; () banked
 29554  010E3A  19A5               	xorwf	___fladd@aexp& (0+255),w,b
 29555  010E3C  B4D8               	btfsc	status,2,c
 29556  010E3E  D002               	goto	l2703
 29557                           
 29558                           ; BSR set to: 0
 29559  010E40  0100               	movlb	0	; () banked
 29560  010E42  8DA4               	bsf	___fladd@signs& (0+255),6,b
 29561  010E44                     l2703:
 29562                           
 29563                           ; BSR set to: 0
 29564                           
 29565                           ; BSR set to: 0
 29566  010E44  0100               	movlb	0	; () banked
 29567  010E46  519B               	movf	(___fladd@a+3)& (0+255),w,b
 29568  010E48  259B               	addwf	(___fladd@a+3)& (0+255),w,b
 29569  010E4A  0100               	movlb	0	; () banked
 29570  010E4C  6FA5               	movwf	___fladd@aexp& (0+255),b
 29571                           
 29572                           ; BSR set to: 0
 29573  010E4E  0100               	movlb	0	; () banked
 29574  010E50  AF9A               	btfss	(___fladd@a+2)& (0+255),7,b
 29575  010E52  D002               	goto	l2704
 29576                           
 29577                           ; BSR set to: 0
 29578  010E54  0100               	movlb	0	; () banked
 29579  010E56  81A5               	bsf	___fladd@aexp& (0+255),0,b
 29580  010E58                     l2704:
 29581                           
 29582                           ; BSR set to: 0
 29583                           
 29584                           ; BSR set to: 0
 29585  010E58  0100               	movlb	0	; () banked
 29586  010E5A  51A5               	movf	___fladd@aexp& (0+255),w,b
 29587  010E5C  0100               	movlb	0	; () banked
 29588  010E5E  B4D8               	btfsc	status,2,c
 29589  010E60  D012               	goto	l2705
 29590                           
 29591                           ; BSR set to: 0
 29592  010E62  0100               	movlb	0	; () banked
 29593  010E64  29A5               	incf	___fladd@aexp& (0+255),w,b
 29594  010E66  A4D8               	btfss	status,2,c
 29595  010E68  D009               	goto	l2706
 29596                           
 29597                           ; BSR set to: 0
 29598  010E6A  0E00               	movlw	0
 29599  010E6C  0100               	movlb	0	; () banked
 29600  010E6E  6F98               	movwf	___fladd@a& (0+255),b
 29601  010E70  0E00               	movlw	0
 29602  010E72  6F99               	movwf	(___fladd@a+1)& (0+255),b
 29603  010E74  0E00               	movlw	0
 29604  010E76  6F9A               	movwf	(___fladd@a+2)& (0+255),b
 29605  010E78  0E00               	movlw	0
 29606  010E7A  6F9B               	movwf	(___fladd@a+3)& (0+255),b
 29607  010E7C                     l2706:
 29608                           
 29609                           ; BSR set to: 0
 29610                           
 29611                           ; BSR set to: 0
 29612  010E7C  0100               	movlb	0	; () banked
 29613  010E7E  8F9A               	bsf	(___fladd@a+2)& (0+255),7,b
 29614                           
 29615                           ; BSR set to: 0
 29616  010E80  0E00               	movlw	0
 29617  010E82  0100               	movlb	0	; () banked
 29618  010E84  D008               	goto	L20
 29619  010E86                     l2705:
 29620                           
 29621                           ; BSR set to: 0
 29622                           
 29623                           ; BSR set to: 0
 29624  010E86  0E00               	movlw	0
 29625  010E88  0100               	movlb	0	; () banked
 29626  010E8A  6F98               	movwf	___fladd@a& (0+255),b
 29627  010E8C  0E00               	movlw	0
 29628  010E8E  6F99               	movwf	(___fladd@a+1)& (0+255),b
 29629  010E90  0E00               	movlw	0
 29630  010E92  6F9A               	movwf	(___fladd@a+2)& (0+255),b
 29631  010E94  0E00               	movlw	0
 29632  010E96                     L20:
 29633  010E96  6F9B               	movwf	(___fladd@a+3)& (0+255),b
 29634                           
 29635                           ; BSR set to: 0
 29636                           
 29637                           ; BSR set to: 0
 29638  010E98  0100               	movlb	0	; () banked
 29639  010E9A  51A6               	movf	___fladd@bexp& (0+255),w,b
 29640  010E9C  0100               	movlb	0	; () banked
 29641  010E9E  5DA5               	subwf	___fladd@aexp& (0+255),w,b
 29642  010EA0  B0D8               	btfsc	status,0,c
 29643  010EA2  D024               	goto	l2708
 29644                           
 29645                           ; BSR set to: 0
 29646  010EA4  0100               	movlb	0	; () banked
 29647  010EA6  ADA4               	btfss	___fladd@signs& (0+255),6,b
 29648  010EA8  D003               	goto	l2709
 29649                           
 29650                           ; BSR set to: 0
 29651  010EAA  0E80               	movlw	128
 29652  010EAC  0100               	movlb	0	; () banked
 29653  010EAE  1BA4               	xorwf	___fladd@signs& (0+255),f,b
 29654  010EB0                     l2709:
 29655                           
 29656                           ; BSR set to: 0
 29657                           
 29658                           ; BSR set to: 0
 29659  010EB0  C0A6  F0A7         	movff	___fladd@bexp,___fladd@grs
 29660                           
 29661                           ; BSR set to: 0
 29662  010EB4  C0A5  F0A6         	movff	___fladd@aexp,___fladd@bexp
 29663                           
 29664                           ; BSR set to: 0
 29665  010EB8  C0A7  F0A5         	movff	___fladd@grs,___fladd@aexp
 29666                           
 29667                           ; BSR set to: 0
 29668  010EBC  C094  F0A7         	movff	___fladd@b,___fladd@grs
 29669                           
 29670                           ; BSR set to: 0
 29671  010EC0  C098  F094         	movff	___fladd@a,___fladd@b
 29672                           
 29673                           ; BSR set to: 0
 29674  010EC4  C0A7  F098         	movff	___fladd@grs,___fladd@a
 29675                           
 29676                           ; BSR set to: 0
 29677  010EC8  C095  F0A7         	movff	___fladd@b+1,___fladd@grs
 29678                           
 29679                           ; BSR set to: 0
 29680  010ECC  C099  F095         	movff	___fladd@a+1,___fladd@b+1
 29681                           
 29682                           ; BSR set to: 0
 29683  010ED0  C0A7  F099         	movff	___fladd@grs,___fladd@a+1
 29684                           
 29685                           ; BSR set to: 0
 29686  010ED4  C096  F0A7         	movff	___fladd@b+2,___fladd@grs
 29687                           
 29688                           ; BSR set to: 0
 29689  010ED8  C09A  F096         	movff	___fladd@a+2,___fladd@b+2
 29690                           
 29691                           ; BSR set to: 0
 29692  010EDC  C0A7  F09A         	movff	___fladd@grs,___fladd@a+2
 29693                           
 29694                           ; BSR set to: 0
 29695  010EE0  C097  F0A7         	movff	___fladd@b+3,___fladd@grs
 29696                           
 29697                           ; BSR set to: 0
 29698  010EE4  C09B  F097         	movff	___fladd@a+3,___fladd@b+3
 29699                           
 29700                           ; BSR set to: 0
 29701  010EE8  C0A7  F09B         	movff	___fladd@grs,___fladd@a+3
 29702  010EEC                     l2708:
 29703                           
 29704                           ; BSR set to: 0
 29705                           
 29706                           ; BSR set to: 0
 29707  010EEC  0E00               	movlw	0
 29708  010EEE  0100               	movlb	0	; () banked
 29709  010EF0  6FA7               	movwf	___fladd@grs& (0+255),b
 29710                           
 29711                           ; BSR set to: 0
 29712  010EF2  0100               	movlb	0	; () banked
 29713  010EF4  51A6               	movf	___fladd@bexp& (0+255),w,b
 29714  010EF6  0100               	movlb	0	; () banked
 29715  010EF8  6F9C               	movwf	??___fladd& (0+255),b
 29716  010EFA  6B9D               	clrf	(??___fladd+1)& (0+255),b
 29717  010EFC  0100               	movlb	0	; () banked
 29718  010EFE  1F9C               	comf	??___fladd& (0+255),f,b
 29719  010F00  1F9D               	comf	(??___fladd+1)& (0+255),f,b
 29720  010F02  4B9C               	infsnz	??___fladd& (0+255),f,b
 29721  010F04  2B9D               	incf	(??___fladd+1)& (0+255),f,b
 29722  010F06  0100               	movlb	0	; () banked
 29723  010F08  51A5               	movf	___fladd@aexp& (0+255),w,b
 29724  010F0A  0100               	movlb	0	; () banked
 29725  010F0C  6F9E               	movwf	(??___fladd+2)& (0+255),b
 29726  010F0E  6B9F               	clrf	(??___fladd+3)& (0+255),b
 29727  010F10  0100               	movlb	0	; () banked
 29728  010F12  519C               	movf	??___fladd& (0+255),w,b
 29729  010F14  0100               	movlb	0	; () banked
 29730  010F16  279E               	addwf	(??___fladd+2)& (0+255),f,b
 29731  010F18  0100               	movlb	0	; () banked
 29732  010F1A  519D               	movf	(??___fladd+1)& (0+255),w,b
 29733  010F1C  0100               	movlb	0	; () banked
 29734  010F1E  239F               	addwfc	(??___fladd+3)& (0+255),f,b
 29735  010F20  0100               	movlb	0	; () banked
 29736  010F22  BF9F               	btfsc	(??___fladd+3)& (0+255),7,b
 29737  010F24  D03D               	goto	l2712
 29738  010F26  0100               	movlb	0	; () banked
 29739  010F28  519F               	movf	(??___fladd+3)& (0+255),w,b
 29740  010F2A  E105               	bnz	u10980
 29741  010F2C  0E1A               	movlw	26
 29742  010F2E  0100               	movlb	0	; () banked
 29743  010F30  5D9E               	subwf	(??___fladd+2)& (0+255),w,b
 29744  010F32  A0D8               	btfss	status,0,c
 29745  010F34  D035               	goto	l2712
 29746  010F36                     u10980:
 29747                           
 29748                           ; BSR set to: 0
 29749  010F36  0100               	movlb	0	; () banked
 29750  010F38  5194               	movf	___fladd@b& (0+255),w,b
 29751  010F3A  0100               	movlb	0	; () banked
 29752  010F3C  1195               	iorwf	(___fladd@b+1)& (0+255),w,b
 29753  010F3E  0100               	movlb	0	; () banked
 29754  010F40  1196               	iorwf	(___fladd@b+2)& (0+255),w,b
 29755  010F42  0100               	movlb	0	; () banked
 29756  010F44  1197               	iorwf	(___fladd@b+3)& (0+255),w,b
 29757  010F46  B4D8               	btfsc	status,2,c
 29758  010F48  D002               	goto	u10990
 29759  010F4A  0E01               	movlw	1
 29760  010F4C  D001               	goto	u11000
 29761  010F4E                     u10990:
 29762  010F4E  0E00               	movlw	0
 29763  010F50                     u11000:
 29764  010F50  0100               	movlb	0	; () banked
 29765  010F52  6FA7               	movwf	___fladd@grs& (0+255),b
 29766                           
 29767                           ; BSR set to: 0
 29768  010F54  0E00               	movlw	0
 29769  010F56  0100               	movlb	0	; () banked
 29770  010F58  6F94               	movwf	___fladd@b& (0+255),b
 29771  010F5A  0E00               	movlw	0
 29772  010F5C  6F95               	movwf	(___fladd@b+1)& (0+255),b
 29773  010F5E  0E00               	movlw	0
 29774  010F60  6F96               	movwf	(___fladd@b+2)& (0+255),b
 29775  010F62  0E00               	movlw	0
 29776  010F64  6F97               	movwf	(___fladd@b+3)& (0+255),b
 29777                           
 29778                           ; BSR set to: 0
 29779  010F66  C0A5  F0A6         	movff	___fladd@aexp,___fladd@bexp
 29780  010F6A  D020               	goto	u11030
 29781  010F6C                     l2713:
 29782                           
 29783                           ; BSR set to: 0
 29784  010F6C  0100               	movlb	0	; () banked
 29785  010F6E  A1A7               	btfss	___fladd@grs& (0+255),0,b
 29786  010F70  D007               	goto	l2714
 29787                           
 29788                           ; BSR set to: 0
 29789  010F72  0100               	movlb	0	; () banked
 29790  010F74  90D8               	bcf	status,0,c
 29791  010F76  31A7               	rrcf	___fladd@grs& (0+255),w,b
 29792  010F78  0901               	iorlw	1
 29793  010F7A  0100               	movlb	0	; () banked
 29794  010F7C  6FA7               	movwf	___fladd@grs& (0+255),b
 29795  010F7E  D003               	goto	l2715
 29796  010F80                     l2714:
 29797                           
 29798                           ; BSR set to: 0
 29799                           
 29800                           ; BSR set to: 0
 29801  010F80  0100               	movlb	0	; () banked
 29802  010F82  90D8               	bcf	status,0,c
 29803  010F84  33A7               	rrcf	___fladd@grs& (0+255),f,b
 29804  010F86                     l2715:
 29805                           
 29806                           ; BSR set to: 0
 29807                           
 29808                           ; BSR set to: 0
 29809  010F86  0100               	movlb	0	; () banked
 29810  010F88  A194               	btfss	___fladd@b& (0+255),0,b
 29811  010F8A  D002               	goto	l2716
 29812                           
 29813                           ; BSR set to: 0
 29814  010F8C  0100               	movlb	0	; () banked
 29815  010F8E  8FA7               	bsf	___fladd@grs& (0+255),7,b
 29816  010F90                     l2716:
 29817                           
 29818                           ; BSR set to: 0
 29819                           
 29820                           ; BSR set to: 0
 29821  010F90  0100               	movlb	0	; () banked
 29822  010F92  3597               	rlcf	(___fladd@b+3)& (0+255),w,b
 29823  010F94  3397               	rrcf	(___fladd@b+3)& (0+255),f,b
 29824  010F96  3396               	rrcf	(___fladd@b+2)& (0+255),f,b
 29825  010F98  3395               	rrcf	(___fladd@b+1)& (0+255),f,b
 29826  010F9A  3394               	rrcf	___fladd@b& (0+255),f,b
 29827                           
 29828                           ; BSR set to: 0
 29829  010F9C  0100               	movlb	0	; () banked
 29830  010F9E  2BA6               	incf	___fladd@bexp& (0+255),f,b
 29831  010FA0                     l2712:
 29832                           
 29833                           ; BSR set to: 0
 29834  010FA0  0100               	movlb	0	; () banked
 29835  010FA2  51A5               	movf	___fladd@aexp& (0+255),w,b
 29836  010FA4  0100               	movlb	0	; () banked
 29837  010FA6  5DA6               	subwf	___fladd@bexp& (0+255),w,b
 29838  010FA8  A0D8               	btfss	status,0,c
 29839  010FAA  D7E0               	goto	l2713
 29840  010FAC                     u11030:
 29841                           
 29842                           ; BSR set to: 0
 29843                           
 29844                           ; BSR set to: 0
 29845  010FAC  0100               	movlb	0	; () banked
 29846  010FAE  BDA4               	btfsc	___fladd@signs& (0+255),6,b
 29847  010FB0  D03F               	goto	l2718
 29848                           
 29849                           ; BSR set to: 0
 29850  010FB2  0100               	movlb	0	; () banked
 29851  010FB4  51A6               	movf	___fladd@bexp& (0+255),w,b
 29852  010FB6  0100               	movlb	0	; () banked
 29853  010FB8  A4D8               	btfss	status,2,c
 29854  010FBA  D00A               	goto	l2719
 29855                           
 29856                           ; BSR set to: 0
 29857  010FBC  0E00               	movlw	0
 29858  010FBE  0100               	movlb	0	; () banked
 29859  010FC0  6F94               	movwf	?___fladd& (0+255),b
 29860  010FC2  0E00               	movlw	0
 29861  010FC4  6F95               	movwf	(?___fladd+1)& (0+255),b
 29862  010FC6  0E00               	movlw	0
 29863  010FC8  6F96               	movwf	(?___fladd+2)& (0+255),b
 29864  010FCA  0E00               	movlw	0
 29865  010FCC  6F97               	movwf	(?___fladd+3)& (0+255),b
 29866                           
 29867                           ; BSR set to: 0
 29868  010FCE  0012               	return	
 29869  010FD0                     l2719:
 29870                           
 29871                           ; BSR set to: 0
 29872                           
 29873                           ; BSR set to: 0
 29874  010FD0  0100               	movlb	0	; () banked
 29875  010FD2  5198               	movf	___fladd@a& (0+255),w,b
 29876  010FD4  0100               	movlb	0	; () banked
 29877  010FD6  2794               	addwf	___fladd@b& (0+255),f,b
 29878  010FD8  0100               	movlb	0	; () banked
 29879  010FDA  5199               	movf	(___fladd@a+1)& (0+255),w,b
 29880  010FDC  0100               	movlb	0	; () banked
 29881  010FDE  2395               	addwfc	(___fladd@b+1)& (0+255),f,b
 29882  010FE0  0100               	movlb	0	; () banked
 29883  010FE2  519A               	movf	(___fladd@a+2)& (0+255),w,b
 29884  010FE4  0100               	movlb	0	; () banked
 29885  010FE6  2396               	addwfc	(___fladd@b+2)& (0+255),f,b
 29886  010FE8  0100               	movlb	0	; () banked
 29887  010FEA  519B               	movf	(___fladd@a+3)& (0+255),w,b
 29888  010FEC  0100               	movlb	0	; () banked
 29889  010FEE  2397               	addwfc	(___fladd@b+3)& (0+255),f,b
 29890                           
 29891                           ; BSR set to: 0
 29892  010FF0  0100               	movlb	0	; () banked
 29893  010FF2  A197               	btfss	(___fladd@b+3)& (0+255),0,b
 29894  010FF4  D0CC               	goto	u11160
 29895                           
 29896                           ; BSR set to: 0
 29897  010FF6  0100               	movlb	0	; () banked
 29898  010FF8  A1A7               	btfss	___fladd@grs& (0+255),0,b
 29899  010FFA  D009               	goto	l2722
 29900                           
 29901                           ; BSR set to: 0
 29902  010FFC  0100               	movlb	0	; () banked
 29903  010FFE  90D8               	bcf	status,0,c
 29904  011000  33A7               	rrcf	___fladd@grs& (0+255),f,b
 29905  011002  0100               	movlb	0	; () banked
 29906  011004  51A7               	movf	___fladd@grs& (0+255),w,b
 29907  011006  0901               	iorlw	1
 29908  011008  0100               	movlb	0	; () banked
 29909  01100A  6FA7               	movwf	___fladd@grs& (0+255),b
 29910  01100C  D003               	goto	l2723
 29911  01100E                     l2722:
 29912                           
 29913                           ; BSR set to: 0
 29914                           
 29915                           ; BSR set to: 0
 29916  01100E  0100               	movlb	0	; () banked
 29917  011010  90D8               	bcf	status,0,c
 29918  011012  33A7               	rrcf	___fladd@grs& (0+255),f,b
 29919  011014                     l2723:
 29920                           
 29921                           ; BSR set to: 0
 29922                           
 29923                           ; BSR set to: 0
 29924  011014  0100               	movlb	0	; () banked
 29925  011016  A194               	btfss	___fladd@b& (0+255),0,b
 29926  011018  D002               	goto	l2724
 29927                           
 29928                           ; BSR set to: 0
 29929  01101A  0100               	movlb	0	; () banked
 29930  01101C  8FA7               	bsf	___fladd@grs& (0+255),7,b
 29931  01101E                     l2724:
 29932                           
 29933                           ; BSR set to: 0
 29934                           
 29935                           ; BSR set to: 0
 29936  01101E  0100               	movlb	0	; () banked
 29937  011020  3597               	rlcf	(___fladd@b+3)& (0+255),w,b
 29938  011022  3397               	rrcf	(___fladd@b+3)& (0+255),f,b
 29939  011024  3396               	rrcf	(___fladd@b+2)& (0+255),f,b
 29940  011026  3395               	rrcf	(___fladd@b+1)& (0+255),f,b
 29941  011028  3394               	rrcf	___fladd@b& (0+255),f,b
 29942                           
 29943                           ; BSR set to: 0
 29944  01102A  0100               	movlb	0	; () banked
 29945  01102C  2BA6               	incf	___fladd@bexp& (0+255),f,b
 29946                           
 29947                           ; BSR set to: 0
 29948  01102E  D0AF               	goto	u11160
 29949  011030                     l2718:
 29950                           
 29951                           ; BSR set to: 0
 29952                           
 29953                           ; BSR set to: 0
 29954  011030  0100               	movlb	0	; () banked
 29955  011032  5198               	movf	___fladd@a& (0+255),w,b
 29956  011034  0100               	movlb	0	; () banked
 29957  011036  5D94               	subwf	___fladd@b& (0+255),w,b
 29958  011038  0100               	movlb	0	; () banked
 29959  01103A  5199               	movf	(___fladd@a+1)& (0+255),w,b
 29960  01103C  0100               	movlb	0	; () banked
 29961  01103E  5995               	subwfb	(___fladd@b+1)& (0+255),w,b
 29962  011040  0100               	movlb	0	; () banked
 29963  011042  519A               	movf	(___fladd@a+2)& (0+255),w,b
 29964  011044  0100               	movlb	0	; () banked
 29965  011046  5996               	subwfb	(___fladd@b+2)& (0+255),w,b
 29966  011048  0100               	movlb	0	; () banked
 29967  01104A  5197               	movf	(___fladd@b+3)& (0+255),w,b
 29968  01104C  0A80               	xorlw	128
 29969  01104E  0100               	movlb	0	; () banked
 29970  011050  6F9C               	movwf	??___fladd& (0+255),b
 29971  011052  0100               	movlb	0	; () banked
 29972  011054  519B               	movf	(___fladd@a+3)& (0+255),w,b
 29973  011056  0A80               	xorlw	128
 29974  011058  0100               	movlb	0	; () banked
 29975  01105A  599C               	subwfb	??___fladd& (0+255),w,b
 29976  01105C  B0D8               	btfsc	status,0,c
 29977  01105E  D050               	goto	l2726
 29978                           
 29979                           ; BSR set to: 0
 29980  011060  C094  F09C         	movff	___fladd@b,??___fladd
 29981  011064  C095  F09D         	movff	___fladd@b+1,??___fladd+1
 29982  011068  C096  F09E         	movff	___fladd@b+2,??___fladd+2
 29983  01106C  C097  F09F         	movff	___fladd@b+3,??___fladd+3
 29984  011070  0100               	movlb	0	; () banked
 29985  011072  1F9C               	comf	??___fladd& (0+255),f,b
 29986  011074  1F9D               	comf	(??___fladd+1)& (0+255),f,b
 29987  011076  1F9E               	comf	(??___fladd+2)& (0+255),f,b
 29988  011078  1F9F               	comf	(??___fladd+3)& (0+255),f,b
 29989  01107A  2B9C               	incf	??___fladd& (0+255),f,b
 29990  01107C  0E00               	movlw	0
 29991  01107E  239D               	addwfc	(??___fladd+1)& (0+255),f,b
 29992  011080  239E               	addwfc	(??___fladd+2)& (0+255),f,b
 29993  011082  239F               	addwfc	(??___fladd+3)& (0+255),f,b
 29994  011084  0100               	movlb	0	; () banked
 29995  011086  5198               	movf	___fladd@a& (0+255),w,b
 29996  011088  0100               	movlb	0	; () banked
 29997  01108A  259C               	addwf	??___fladd& (0+255),w,b
 29998  01108C  0100               	movlb	0	; () banked
 29999  01108E  6FA0               	movwf	(??___fladd+4)& (0+255),b
 30000  011090  0100               	movlb	0	; () banked
 30001  011092  5199               	movf	(___fladd@a+1)& (0+255),w,b
 30002  011094  0100               	movlb	0	; () banked
 30003  011096  219D               	addwfc	(??___fladd+1)& (0+255),w,b
 30004  011098  0100               	movlb	0	; () banked
 30005  01109A  6FA1               	movwf	(??___fladd+5)& (0+255),b
 30006  01109C  0100               	movlb	0	; () banked
 30007  01109E  519A               	movf	(___fladd@a+2)& (0+255),w,b
 30008  0110A0  0100               	movlb	0	; () banked
 30009  0110A2  219E               	addwfc	(??___fladd+2)& (0+255),w,b
 30010  0110A4  0100               	movlb	0	; () banked
 30011  0110A6  6FA2               	movwf	(??___fladd+6)& (0+255),b
 30012  0110A8  0100               	movlb	0	; () banked
 30013  0110AA  519B               	movf	(___fladd@a+3)& (0+255),w,b
 30014  0110AC  0100               	movlb	0	; () banked
 30015  0110AE  219F               	addwfc	(??___fladd+3)& (0+255),w,b
 30016  0110B0  0100               	movlb	0	; () banked
 30017  0110B2  6FA3               	movwf	(??___fladd+7)& (0+255),b
 30018  0110B4  0EFF               	movlw	255
 30019  0110B6  0100               	movlb	0	; () banked
 30020  0110B8  25A0               	addwf	(??___fladd+4)& (0+255),w,b
 30021  0110BA  0100               	movlb	0	; () banked
 30022  0110BC  6F94               	movwf	___fladd@b& (0+255),b
 30023  0110BE  0EFF               	movlw	255
 30024  0110C0  0100               	movlb	0	; () banked
 30025  0110C2  21A1               	addwfc	(??___fladd+5)& (0+255),w,b
 30026  0110C4  0100               	movlb	0	; () banked
 30027  0110C6  6F95               	movwf	(___fladd@b+1)& (0+255),b
 30028  0110C8  0EFF               	movlw	255
 30029  0110CA  0100               	movlb	0	; () banked
 30030  0110CC  21A2               	addwfc	(??___fladd+6)& (0+255),w,b
 30031  0110CE  0100               	movlb	0	; () banked
 30032  0110D0  6F96               	movwf	(___fladd@b+2)& (0+255),b
 30033  0110D2  0EFF               	movlw	255
 30034  0110D4  0100               	movlb	0	; () banked
 30035  0110D6  21A3               	addwfc	(??___fladd+7)& (0+255),w,b
 30036  0110D8  0100               	movlb	0	; () banked
 30037  0110DA  6F97               	movwf	(___fladd@b+3)& (0+255),b
 30038  0110DC  0E80               	movlw	128
 30039  0110DE  0100               	movlb	0	; () banked
 30040  0110E0  1BA4               	xorwf	___fladd@signs& (0+255),f,b
 30041                           
 30042                           ; BSR set to: 0
 30043  0110E2  0100               	movlb	0	; () banked
 30044  0110E4  6DA7               	negf	___fladd@grs& (0+255),b
 30045                           
 30046                           ; BSR set to: 0
 30047  0110E6  0100               	movlb	0	; () banked
 30048  0110E8  51A7               	movf	___fladd@grs& (0+255),w,b
 30049  0110EA  0100               	movlb	0	; () banked
 30050  0110EC  A4D8               	btfss	status,2,c
 30051  0110EE  D018               	goto	l2728
 30052                           
 30053                           ; BSR set to: 0
 30054  0110F0  0E01               	movlw	1
 30055  0110F2  0100               	movlb	0	; () banked
 30056  0110F4  2794               	addwf	___fladd@b& (0+255),f,b
 30057  0110F6  0E00               	movlw	0
 30058  0110F8  2395               	addwfc	(___fladd@b+1)& (0+255),f,b
 30059  0110FA  2396               	addwfc	(___fladd@b+2)& (0+255),f,b
 30060  0110FC  2397               	addwfc	(___fladd@b+3)& (0+255),f,b
 30061                           
 30062                           ; BSR set to: 0
 30063  0110FE  D010               	goto	l2728
 30064  011100                     l2726:
 30065                           
 30066                           ; BSR set to: 0
 30067                           
 30068                           ; BSR set to: 0
 30069  011100  0100               	movlb	0	; () banked
 30070  011102  5198               	movf	___fladd@a& (0+255),w,b
 30071  011104  0100               	movlb	0	; () banked
 30072  011106  5F94               	subwf	___fladd@b& (0+255),f,b
 30073  011108  0100               	movlb	0	; () banked
 30074  01110A  5199               	movf	(___fladd@a+1)& (0+255),w,b
 30075  01110C  0100               	movlb	0	; () banked
 30076  01110E  5B95               	subwfb	(___fladd@b+1)& (0+255),f,b
 30077  011110  0100               	movlb	0	; () banked
 30078  011112  519A               	movf	(___fladd@a+2)& (0+255),w,b
 30079  011114  0100               	movlb	0	; () banked
 30080  011116  5B96               	subwfb	(___fladd@b+2)& (0+255),f,b
 30081  011118  0100               	movlb	0	; () banked
 30082  01111A  519B               	movf	(___fladd@a+3)& (0+255),w,b
 30083  01111C  0100               	movlb	0	; () banked
 30084  01111E  5B97               	subwfb	(___fladd@b+3)& (0+255),f,b
 30085  011120                     l2728:
 30086                           
 30087                           ; BSR set to: 0
 30088  011120  0100               	movlb	0	; () banked
 30089  011122  5194               	movf	___fladd@b& (0+255),w,b
 30090  011124  0100               	movlb	0	; () banked
 30091  011126  1195               	iorwf	(___fladd@b+1)& (0+255),w,b
 30092  011128  0100               	movlb	0	; () banked
 30093  01112A  1196               	iorwf	(___fladd@b+2)& (0+255),w,b
 30094  01112C  0100               	movlb	0	; () banked
 30095  01112E  1197               	iorwf	(___fladd@b+3)& (0+255),w,b
 30096  011130  A4D8               	btfss	status,2,c
 30097  011132  D02A               	goto	l2735
 30098                           
 30099                           ; BSR set to: 0
 30100  011134  0100               	movlb	0	; () banked
 30101  011136  51A7               	movf	___fladd@grs& (0+255),w,b
 30102  011138  0100               	movlb	0	; () banked
 30103  01113A  A4D8               	btfss	status,2,c
 30104  01113C  D025               	goto	l2735
 30105                           
 30106                           ; BSR set to: 0
 30107  01113E  0E00               	movlw	0
 30108  011140  0100               	movlb	0	; () banked
 30109  011142  6F94               	movwf	?___fladd& (0+255),b
 30110  011144  0E00               	movlw	0
 30111  011146  6F95               	movwf	(?___fladd+1)& (0+255),b
 30112  011148  0E00               	movlw	0
 30113  01114A  6F96               	movwf	(?___fladd+2)& (0+255),b
 30114  01114C  0E00               	movlw	0
 30115  01114E  6F97               	movwf	(?___fladd+3)& (0+255),b
 30116                           
 30117                           ; BSR set to: 0
 30118  011150  0012               	return	
 30119  011152                     
 30120                           ; BSR set to: 0
 30121                           
 30122                           ; BSR set to: 0
 30123  011152  0100               	movlb	0	; () banked
 30124  011154  90D8               	bcf	status,0,c
 30125  011156  3794               	rlcf	___fladd@b& (0+255),f,b
 30126  011158  3795               	rlcf	(___fladd@b+1)& (0+255),f,b
 30127  01115A  3796               	rlcf	(___fladd@b+2)& (0+255),f,b
 30128  01115C  3797               	rlcf	(___fladd@b+3)& (0+255),f,b
 30129                           
 30130                           ; BSR set to: 0
 30131  01115E  0100               	movlb	0	; () banked
 30132  011160  AFA7               	btfss	___fladd@grs& (0+255),7,b
 30133  011162  D002               	goto	l2732
 30134                           
 30135                           ; BSR set to: 0
 30136  011164  0100               	movlb	0	; () banked
 30137  011166  8194               	bsf	___fladd@b& (0+255),0,b
 30138  011168                     l2732:
 30139                           
 30140                           ; BSR set to: 0
 30141                           
 30142                           ; BSR set to: 0
 30143  011168  0100               	movlb	0	; () banked
 30144  01116A  A1A7               	btfss	___fladd@grs& (0+255),0,b
 30145  01116C  D003               	goto	l2733
 30146                           
 30147                           ; BSR set to: 0
 30148  01116E  80D8               	bsf	status,0,c
 30149  011170  0100               	movlb	0	; () banked
 30150  011172  D002               	goto	L21
 30151  011174                     l2733:
 30152                           
 30153                           ; BSR set to: 0
 30154                           
 30155                           ; BSR set to: 0
 30156  011174  0100               	movlb	0	; () banked
 30157  011176  90D8               	bcf	status,0,c
 30158  011178                     L21:
 30159  011178  37A7               	rlcf	___fladd@grs& (0+255),f,b
 30160                           
 30161                           ; BSR set to: 0
 30162                           
 30163                           ; BSR set to: 0
 30164  01117A  0100               	movlb	0	; () banked
 30165  01117C  51A6               	movf	___fladd@bexp& (0+255),w,b
 30166  01117E  0100               	movlb	0	; () banked
 30167  011180  B4D8               	btfsc	status,2,c
 30168  011182  D002               	goto	l2735
 30169                           
 30170                           ; BSR set to: 0
 30171  011184  0100               	movlb	0	; () banked
 30172  011186  07A6               	decf	___fladd@bexp& (0+255),f,b
 30173  011188                     l2735:
 30174                           
 30175                           ; BSR set to: 0
 30176                           
 30177                           ; BSR set to: 0
 30178                           
 30179                           ; BSR set to: 0
 30180  011188  0100               	movlb	0	; () banked
 30181  01118A  AF96               	btfss	(___fladd@b+2)& (0+255),7,b
 30182  01118C  D7E2               	goto	l2731
 30183  01118E                     u11160:
 30184                           
 30185                           ; BSR set to: 0
 30186                           
 30187                           ; BSR set to: 0
 30188                           
 30189                           ; BSR set to: 0
 30190  01118E  0E00               	movlw	0
 30191  011190  0100               	movlb	0	; () banked
 30192  011192  6FA5               	movwf	___fladd@aexp& (0+255),b
 30193                           
 30194                           ; BSR set to: 0
 30195  011194  0100               	movlb	0	; () banked
 30196  011196  AFA7               	btfss	___fladd@grs& (0+255),7,b
 30197  011198  D00D               	goto	l2740
 30198                           
 30199                           ; BSR set to: 0
 30200  01119A  C0A7  F09C         	movff	___fladd@grs,??___fladd
 30201  01119E  0E7F               	movlw	127
 30202  0111A0  0100               	movlb	0	; () banked
 30203  0111A2  179C               	andwf	??___fladd& (0+255),f,b
 30204  0111A4  A4D8               	btfss	status,2,c
 30205  0111A6  D003               	goto	u11190
 30206                           
 30207                           ; BSR set to: 0
 30208                           
 30209                           ; BSR set to: 0
 30210  0111A8  0100               	movlb	0	; () banked
 30211  0111AA  A194               	btfss	___fladd@b& (0+255),0,b
 30212  0111AC  D003               	goto	l2740
 30213  0111AE                     u11190:
 30214                           
 30215                           ; BSR set to: 0
 30216  0111AE  0E01               	movlw	1
 30217  0111B0  0100               	movlb	0	; () banked
 30218  0111B2  6FA5               	movwf	___fladd@aexp& (0+255),b
 30219  0111B4                     l2740:
 30220                           
 30221                           ; BSR set to: 0
 30222                           
 30223                           ; BSR set to: 0
 30224                           
 30225                           ; BSR set to: 0
 30226  0111B4  0100               	movlb	0	; () banked
 30227  0111B6  51A5               	movf	___fladd@aexp& (0+255),w,b
 30228  0111B8  0100               	movlb	0	; () banked
 30229  0111BA  B4D8               	btfsc	status,2,c
 30230  0111BC  D026               	goto	l2743
 30231                           
 30232                           ; BSR set to: 0
 30233  0111BE  0E01               	movlw	1
 30234  0111C0  0100               	movlb	0	; () banked
 30235  0111C2  2794               	addwf	___fladd@b& (0+255),f,b
 30236  0111C4  0E00               	movlw	0
 30237  0111C6  2395               	addwfc	(___fladd@b+1)& (0+255),f,b
 30238  0111C8  2396               	addwfc	(___fladd@b+2)& (0+255),f,b
 30239  0111CA  2397               	addwfc	(___fladd@b+3)& (0+255),f,b
 30240                           
 30241                           ; BSR set to: 0
 30242  0111CC  0100               	movlb	0	; () banked
 30243  0111CE  A197               	btfss	(___fladd@b+3)& (0+255),0,b
 30244  0111D0  D01C               	goto	l2743
 30245                           
 30246                           ; BSR set to: 0
 30247  0111D2  C094  F09C         	movff	___fladd@b,??___fladd
 30248  0111D6  C095  F09D         	movff	___fladd@b+1,??___fladd+1
 30249  0111DA  C096  F09E         	movff	___fladd@b+2,??___fladd+2
 30250  0111DE  C097  F09F         	movff	___fladd@b+3,??___fladd+3
 30251  0111E2  0100               	movlb	0	; () banked
 30252  0111E4  359F               	rlcf	(??___fladd+3)& (0+255),w,b
 30253  0111E6  339F               	rrcf	(??___fladd+3)& (0+255),f,b
 30254  0111E8  339E               	rrcf	(??___fladd+2)& (0+255),f,b
 30255  0111EA  339D               	rrcf	(??___fladd+1)& (0+255),f,b
 30256  0111EC  339C               	rrcf	??___fladd& (0+255),f,b
 30257  0111EE  C09C  F094         	movff	??___fladd,___fladd@b
 30258  0111F2  C09D  F095         	movff	??___fladd+1,___fladd@b+1
 30259  0111F6  C09E  F096         	movff	??___fladd+2,___fladd@b+2
 30260  0111FA  C09F  F097         	movff	??___fladd+3,___fladd@b+3
 30261  0111FE  0100               	movlb	0	; () banked
 30262  011200  29A6               	incf	___fladd@bexp& (0+255),w,b
 30263  011202  B4D8               	btfsc	status,2,c
 30264  011204  D002               	goto	l2743
 30265                           
 30266                           ; BSR set to: 0
 30267  011206  0100               	movlb	0	; () banked
 30268  011208  2BA6               	incf	___fladd@bexp& (0+255),f,b
 30269  01120A                     l2743:
 30270                           
 30271                           ; BSR set to: 0
 30272                           
 30273                           ; BSR set to: 0
 30274                           
 30275                           ; BSR set to: 0
 30276                           
 30277                           ; BSR set to: 0
 30278  01120A  0100               	movlb	0	; () banked
 30279  01120C  29A6               	incf	___fladd@bexp& (0+255),w,b
 30280  01120E  B4D8               	btfsc	status,2,c
 30281  011210  D005               	goto	u11240
 30282                           
 30283                           ; BSR set to: 0
 30284  011212  0100               	movlb	0	; () banked
 30285  011214  51A6               	movf	___fladd@bexp& (0+255),w,b
 30286  011216  0100               	movlb	0	; () banked
 30287  011218  A4D8               	btfss	status,2,c
 30288  01121A  D011               	goto	l2747
 30289  01121C                     u11240:
 30290                           
 30291                           ; BSR set to: 0
 30292                           
 30293                           ; BSR set to: 0
 30294  01121C  0E00               	movlw	0
 30295  01121E  0100               	movlb	0	; () banked
 30296  011220  6F94               	movwf	___fladd@b& (0+255),b
 30297  011222  0E00               	movlw	0
 30298  011224  6F95               	movwf	(___fladd@b+1)& (0+255),b
 30299  011226  0E00               	movlw	0
 30300  011228  6F96               	movwf	(___fladd@b+2)& (0+255),b
 30301  01122A  0E00               	movlw	0
 30302  01122C  6F97               	movwf	(___fladd@b+3)& (0+255),b
 30303  01122E  0100               	movlb	0	; () banked
 30304  011230  51A6               	movf	___fladd@bexp& (0+255),w,b
 30305  011232  0100               	movlb	0	; () banked
 30306  011234  A4D8               	btfss	status,2,c
 30307  011236  D003               	goto	l2747
 30308                           
 30309                           ; BSR set to: 0
 30310  011238  0E00               	movlw	0
 30311  01123A  0100               	movlb	0	; () banked
 30312  01123C  6FA4               	movwf	___fladd@signs& (0+255),b
 30313  01123E                     l2747:
 30314                           
 30315                           ; BSR set to: 0
 30316                           
 30317                           ; BSR set to: 0
 30318                           
 30319                           ; BSR set to: 0
 30320  01123E  0100               	movlb	0	; () banked
 30321  011240  A1A6               	btfss	___fladd@bexp& (0+255),0,b
 30322  011242  D003               	goto	l2748
 30323                           
 30324                           ; BSR set to: 0
 30325  011244  0100               	movlb	0	; () banked
 30326  011246  8F96               	bsf	(___fladd@b+2)& (0+255),7,b
 30327  011248  D002               	goto	l2749
 30328  01124A                     l2748:
 30329                           
 30330                           ; BSR set to: 0
 30331                           
 30332                           ; BSR set to: 0
 30333  01124A  0100               	movlb	0	; () banked
 30334  01124C  9F96               	bcf	(___fladd@b+2)& (0+255),7,b
 30335  01124E                     l2749:
 30336                           
 30337                           ; BSR set to: 0
 30338                           
 30339                           ; BSR set to: 0
 30340  01124E  0100               	movlb	0	; () banked
 30341  011250  90D8               	bcf	status,0,c
 30342  011252  31A6               	rrcf	___fladd@bexp& (0+255),w,b
 30343  011254  0100               	movlb	0	; () banked
 30344  011256  6F97               	movwf	(___fladd@b+3)& (0+255),b
 30345                           
 30346                           ; BSR set to: 0
 30347  011258  0100               	movlb	0	; () banked
 30348  01125A  AFA4               	btfss	___fladd@signs& (0+255),7,b
 30349  01125C  D002               	goto	l2750
 30350                           
 30351                           ; BSR set to: 0
 30352  01125E  0100               	movlb	0	; () banked
 30353  011260  8F97               	bsf	(___fladd@b+3)& (0+255),7,b
 30354  011262                     l2750:
 30355                           
 30356                           ; BSR set to: 0
 30357                           
 30358                           ; BSR set to: 0
 30359  011262  C094  F094         	movff	___fladd@b,?___fladd
 30360  011266  C095  F095         	movff	___fladd@b+1,?___fladd+1
 30361  01126A  C096  F096         	movff	___fladd@b+2,?___fladd+2
 30362  01126E  C097  F097         	movff	___fladd@b+3,?___fladd+3
 30363  011272  0012               	return	
 30364  011274                     __end_of___fladd:
 30365                           	opt stack 0
 30366                           tosu	equ	0xFFF
 30367                           tosh	equ	0xFFE
 30368                           tosl	equ	0xFFD
 30369                           pclath	equ	0xFFA
 30370                           tblptru	equ	0xFF8
 30371                           tblptrh	equ	0xFF7
 30372                           tblptrl	equ	0xFF6
 30373                           tablat	equ	0xFF5
 30374                           prodh	equ	0xFF4
 30375                           prodl	equ	0xFF3
 30376                           intcon	equ	0xFF2
 30377                           indf0	equ	0xFEF
 30378                           postinc0	equ	0xFEE
 30379                           fsr0h	equ	0xFEA
 30380                           fsr0l	equ	0xFE9
 30381                           wreg	equ	0xFE8
 30382                           indf1	equ	0xFE7
 30383                           postdec1	equ	0xFE5
 30384                           fsr1h	equ	0xFE2
 30385                           fsr1l	equ	0xFE1
 30386                           indf2	equ	0xFDF
 30387                           postinc2	equ	0xFDE
 30388                           postdec2	equ	0xFDD
 30389                           plusw2	equ	0xFDB
 30390                           fsr2h	equ	0xFDA
 30391                           fsr2l	equ	0xFD9
 30392                           status	equ	0xFD8
 30393                           
 30394 ;; *************** function ___flneg *****************
 30395 ;; Defined at:
 30396 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flneg.c"
 30397 ;; Parameters:    Size  Location     Type
 30398 ;;  f1              4    0[BANK0 ] unsigned char 
 30399 ;; Auto vars:     Size  Location     Type
 30400 ;;		None
 30401 ;; Return value:  Size  Location     Type
 30402 ;;                  4    0[BANK0 ] unsigned char 
 30403 ;; Registers used:
 30404 ;;		wreg, status,2, status,0
 30405 ;; Tracked objects:
 30406 ;;		On entry : 0/0
 30407 ;;		On exit  : 0/0
 30408 ;;		Unchanged: 0/0
 30409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30410 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30413 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30414 ;;Total ram usage:        4 bytes
 30415 ;; Hardware stack levels used:    1
 30416 ;; Hardware stack levels required when called:    7
 30417 ;; This function calls:
 30418 ;;		Nothing
 30419 ;; This function is called by:
 30420 ;;		_printf
 30421 ;;		_pow
 30422 ;;		_exp
 30423 ;; This function uses a non-reentrant model
 30424 ;;
 30425                           
 30426                           	psect	text140
 30427  017A72                     __ptext140:
 30428                           	opt stack 0
 30429  017A72                     ___flneg:
 30430                           	opt stack 22
 30431                           
 30432                           ; BSR set to: 0
 30433                           ;incstack = 0
 30434  017A72  0100               	movlb	0	; () banked
 30435  017A74  5160               	movf	___flneg@f1& (0+255),w,b
 30436  017A76  0100               	movlb	0	; () banked
 30437  017A78  1161               	iorwf	(___flneg@f1+1)& (0+255),w,b
 30438  017A7A  0100               	movlb	0	; () banked
 30439  017A7C  1162               	iorwf	(___flneg@f1+2)& (0+255),w,b
 30440  017A7E  0100               	movlb	0	; () banked
 30441  017A80  1163               	iorwf	(___flneg@f1+3)& (0+255),w,b
 30442  017A82  B4D8               	btfsc	status,2,c
 30443  017A84  D009               	goto	l2442
 30444                           
 30445                           ; BSR set to: 0
 30446  017A86  0E00               	movlw	0
 30447  017A88  0100               	movlb	0	; () banked
 30448  017A8A  1B60               	xorwf	___flneg@f1& (0+255),f,b
 30449  017A8C  0E00               	movlw	0
 30450  017A8E  1B61               	xorwf	(___flneg@f1+1)& (0+255),f,b
 30451  017A90  0E00               	movlw	0
 30452  017A92  1B62               	xorwf	(___flneg@f1+2)& (0+255),f,b
 30453  017A94  0E80               	movlw	128
 30454  017A96  1B63               	xorwf	(___flneg@f1+3)& (0+255),f,b
 30455  017A98                     l2442:
 30456                           
 30457                           ; BSR set to: 0
 30458                           
 30459                           ; BSR set to: 0
 30460  017A98  C060  F060         	movff	___flneg@f1,?___flneg
 30461  017A9C  C061  F061         	movff	___flneg@f1+1,?___flneg+1
 30462  017AA0  C062  F062         	movff	___flneg@f1+2,?___flneg+2
 30463  017AA4  C063  F063         	movff	___flneg@f1+3,?___flneg+3
 30464  017AA8  0012               	return	
 30465  017AAA                     __end_of___flneg:
 30466                           	opt stack 0
 30467                           tosu	equ	0xFFF
 30468                           tosh	equ	0xFFE
 30469                           tosl	equ	0xFFD
 30470                           pclath	equ	0xFFA
 30471                           tblptru	equ	0xFF8
 30472                           tblptrh	equ	0xFF7
 30473                           tblptrl	equ	0xFF6
 30474                           tablat	equ	0xFF5
 30475                           prodh	equ	0xFF4
 30476                           prodl	equ	0xFF3
 30477                           intcon	equ	0xFF2
 30478                           indf0	equ	0xFEF
 30479                           postinc0	equ	0xFEE
 30480                           fsr0h	equ	0xFEA
 30481                           fsr0l	equ	0xFE9
 30482                           wreg	equ	0xFE8
 30483                           indf1	equ	0xFE7
 30484                           postdec1	equ	0xFE5
 30485                           fsr1h	equ	0xFE2
 30486                           fsr1l	equ	0xFE1
 30487                           indf2	equ	0xFDF
 30488                           postinc2	equ	0xFDE
 30489                           postdec2	equ	0xFDD
 30490                           plusw2	equ	0xFDB
 30491                           fsr2h	equ	0xFDA
 30492                           fsr2l	equ	0xFD9
 30493                           status	equ	0xFD8
 30494                           
 30495 ;; *************** function ___flge *****************
 30496 ;; Defined at:
 30497 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flge.c"
 30498 ;; Parameters:    Size  Location     Type
 30499 ;;  ff1             4    0[BANK0 ] unsigned char 
 30500 ;;  ff2             4    4[BANK0 ] unsigned char 
 30501 ;; Auto vars:     Size  Location     Type
 30502 ;;		None
 30503 ;; Return value:  Size  Location     Type
 30504 ;;		None               void
 30505 ;; Registers used:
 30506 ;;		wreg, status,2, status,0
 30507 ;; Tracked objects:
 30508 ;;		On entry : 0/0
 30509 ;;		On exit  : 0/0
 30510 ;;		Unchanged: 0/0
 30511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30512 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30514 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30515 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30516 ;;Total ram usage:       12 bytes
 30517 ;; Hardware stack levels used:    1
 30518 ;; Hardware stack levels required when called:    7
 30519 ;; This function calls:
 30520 ;;		Nothing
 30521 ;; This function is called by:
 30522 ;;		_printf
 30523 ;;		_pow
 30524 ;;		_exp
 30525 ;;		_floor
 30526 ;; This function uses a non-reentrant model
 30527 ;;
 30528                           
 30529                           	psect	text141
 30530  013DBC                     __ptext141:
 30531                           	opt stack 0
 30532  013DBC                     ___flge:
 30533                           	opt stack 22
 30534                           
 30535                           ; BSR set to: 0
 30536                           ;incstack = 0
 30537  013DBC  0E00               	movlw	0
 30538  013DBE  0100               	movlb	0	; () banked
 30539  013DC0  1560               	andwf	___flge@ff1& (0+255),w,b
 30540  013DC2  0100               	movlb	0	; () banked
 30541  013DC4  6F68               	movwf	??___flge& (0+255),b
 30542  013DC6  0E00               	movlw	0
 30543  013DC8  0100               	movlb	0	; () banked
 30544  013DCA  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 30545  013DCC  0100               	movlb	0	; () banked
 30546  013DCE  6F69               	movwf	(??___flge+1)& (0+255),b
 30547  013DD0  0E80               	movlw	128
 30548  013DD2  0100               	movlb	0	; () banked
 30549  013DD4  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 30550  013DD6  0100               	movlb	0	; () banked
 30551  013DD8  6F6A               	movwf	(??___flge+2)& (0+255),b
 30552  013DDA  0E7F               	movlw	127
 30553  013DDC  0100               	movlb	0	; () banked
 30554  013DDE  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 30555  013DE0  0100               	movlb	0	; () banked
 30556  013DE2  6F6B               	movwf	(??___flge+3)& (0+255),b
 30557  013DE4  0100               	movlb	0	; () banked
 30558  013DE6  5168               	movf	??___flge& (0+255),w,b
 30559  013DE8  0100               	movlb	0	; () banked
 30560  013DEA  1169               	iorwf	(??___flge+1)& (0+255),w,b
 30561  013DEC  0100               	movlb	0	; () banked
 30562  013DEE  116A               	iorwf	(??___flge+2)& (0+255),w,b
 30563  013DF0  0100               	movlb	0	; () banked
 30564  013DF2  116B               	iorwf	(??___flge+3)& (0+255),w,b
 30565  013DF4  A4D8               	btfss	status,2,c
 30566  013DF6  D009               	goto	l2435
 30567                           
 30568                           ; BSR set to: 0
 30569  013DF8  0E00               	movlw	0
 30570  013DFA  0100               	movlb	0	; () banked
 30571  013DFC  6F60               	movwf	___flge@ff1& (0+255),b
 30572  013DFE  0E00               	movlw	0
 30573  013E00  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 30574  013E02  0E00               	movlw	0
 30575  013E04  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 30576  013E06  0E00               	movlw	0
 30577  013E08  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 30578  013E0A                     l2435:
 30579                           
 30580                           ; BSR set to: 0
 30581                           
 30582                           ; BSR set to: 0
 30583  013E0A  0E00               	movlw	0
 30584  013E0C  0100               	movlb	0	; () banked
 30585  013E0E  1564               	andwf	___flge@ff2& (0+255),w,b
 30586  013E10  0100               	movlb	0	; () banked
 30587  013E12  6F68               	movwf	??___flge& (0+255),b
 30588  013E14  0E00               	movlw	0
 30589  013E16  0100               	movlb	0	; () banked
 30590  013E18  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 30591  013E1A  0100               	movlb	0	; () banked
 30592  013E1C  6F69               	movwf	(??___flge+1)& (0+255),b
 30593  013E1E  0E80               	movlw	128
 30594  013E20  0100               	movlb	0	; () banked
 30595  013E22  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 30596  013E24  0100               	movlb	0	; () banked
 30597  013E26  6F6A               	movwf	(??___flge+2)& (0+255),b
 30598  013E28  0E7F               	movlw	127
 30599  013E2A  0100               	movlb	0	; () banked
 30600  013E2C  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 30601  013E2E  0100               	movlb	0	; () banked
 30602  013E30  6F6B               	movwf	(??___flge+3)& (0+255),b
 30603  013E32  0100               	movlb	0	; () banked
 30604  013E34  5168               	movf	??___flge& (0+255),w,b
 30605  013E36  0100               	movlb	0	; () banked
 30606  013E38  1169               	iorwf	(??___flge+1)& (0+255),w,b
 30607  013E3A  0100               	movlb	0	; () banked
 30608  013E3C  116A               	iorwf	(??___flge+2)& (0+255),w,b
 30609  013E3E  0100               	movlb	0	; () banked
 30610  013E40  116B               	iorwf	(??___flge+3)& (0+255),w,b
 30611  013E42  A4D8               	btfss	status,2,c
 30612  013E44  D009               	goto	l2436
 30613                           
 30614                           ; BSR set to: 0
 30615  013E46  0E00               	movlw	0
 30616  013E48  0100               	movlb	0	; () banked
 30617  013E4A  6F64               	movwf	___flge@ff2& (0+255),b
 30618  013E4C  0E00               	movlw	0
 30619  013E4E  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 30620  013E50  0E00               	movlw	0
 30621  013E52  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 30622  013E54  0E00               	movlw	0
 30623  013E56  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 30624  013E58                     l2436:
 30625                           
 30626                           ; BSR set to: 0
 30627                           
 30628                           ; BSR set to: 0
 30629  013E58  0100               	movlb	0	; () banked
 30630  013E5A  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 30631  013E5C  D026               	goto	l2437
 30632                           
 30633                           ; BSR set to: 0
 30634  013E5E  C060  F068         	movff	___flge@ff1,??___flge
 30635  013E62  C061  F069         	movff	___flge@ff1+1,??___flge+1
 30636  013E66  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 30637  013E6A  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 30638  013E6E  0100               	movlb	0	; () banked
 30639  013E70  1F68               	comf	??___flge& (0+255),f,b
 30640  013E72  1F69               	comf	(??___flge+1)& (0+255),f,b
 30641  013E74  1F6A               	comf	(??___flge+2)& (0+255),f,b
 30642  013E76  1F6B               	comf	(??___flge+3)& (0+255),f,b
 30643  013E78  2B68               	incf	??___flge& (0+255),f,b
 30644  013E7A  0E00               	movlw	0
 30645  013E7C  2369               	addwfc	(??___flge+1)& (0+255),f,b
 30646  013E7E  236A               	addwfc	(??___flge+2)& (0+255),f,b
 30647  013E80  236B               	addwfc	(??___flge+3)& (0+255),f,b
 30648  013E82  0E00               	movlw	0
 30649  013E84  0100               	movlb	0	; () banked
 30650  013E86  2568               	addwf	??___flge& (0+255),w,b
 30651  013E88  0100               	movlb	0	; () banked
 30652  013E8A  6F60               	movwf	___flge@ff1& (0+255),b
 30653  013E8C  0E00               	movlw	0
 30654  013E8E  0100               	movlb	0	; () banked
 30655  013E90  2169               	addwfc	(??___flge+1)& (0+255),w,b
 30656  013E92  0100               	movlb	0	; () banked
 30657  013E94  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 30658  013E96  0E00               	movlw	0
 30659  013E98  0100               	movlb	0	; () banked
 30660  013E9A  216A               	addwfc	(??___flge+2)& (0+255),w,b
 30661  013E9C  0100               	movlb	0	; () banked
 30662  013E9E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 30663  013EA0  0E80               	movlw	128
 30664  013EA2  0100               	movlb	0	; () banked
 30665  013EA4  216B               	addwfc	(??___flge+3)& (0+255),w,b
 30666  013EA6  0100               	movlb	0	; () banked
 30667  013EA8  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 30668  013EAA                     l2437:
 30669                           
 30670                           ; BSR set to: 0
 30671                           
 30672                           ; BSR set to: 0
 30673  013EAA  0100               	movlb	0	; () banked
 30674  013EAC  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 30675  013EAE  D026               	goto	l2438
 30676                           
 30677                           ; BSR set to: 0
 30678  013EB0  C064  F068         	movff	___flge@ff2,??___flge
 30679  013EB4  C065  F069         	movff	___flge@ff2+1,??___flge+1
 30680  013EB8  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 30681  013EBC  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 30682  013EC0  0100               	movlb	0	; () banked
 30683  013EC2  1F68               	comf	??___flge& (0+255),f,b
 30684  013EC4  1F69               	comf	(??___flge+1)& (0+255),f,b
 30685  013EC6  1F6A               	comf	(??___flge+2)& (0+255),f,b
 30686  013EC8  1F6B               	comf	(??___flge+3)& (0+255),f,b
 30687  013ECA  2B68               	incf	??___flge& (0+255),f,b
 30688  013ECC  0E00               	movlw	0
 30689  013ECE  2369               	addwfc	(??___flge+1)& (0+255),f,b
 30690  013ED0  236A               	addwfc	(??___flge+2)& (0+255),f,b
 30691  013ED2  236B               	addwfc	(??___flge+3)& (0+255),f,b
 30692  013ED4  0E00               	movlw	0
 30693  013ED6  0100               	movlb	0	; () banked
 30694  013ED8  2568               	addwf	??___flge& (0+255),w,b
 30695  013EDA  0100               	movlb	0	; () banked
 30696  013EDC  6F64               	movwf	___flge@ff2& (0+255),b
 30697  013EDE  0E00               	movlw	0
 30698  013EE0  0100               	movlb	0	; () banked
 30699  013EE2  2169               	addwfc	(??___flge+1)& (0+255),w,b
 30700  013EE4  0100               	movlb	0	; () banked
 30701  013EE6  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 30702  013EE8  0E00               	movlw	0
 30703  013EEA  0100               	movlb	0	; () banked
 30704  013EEC  216A               	addwfc	(??___flge+2)& (0+255),w,b
 30705  013EEE  0100               	movlb	0	; () banked
 30706  013EF0  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 30707  013EF2  0E80               	movlw	128
 30708  013EF4  0100               	movlb	0	; () banked
 30709  013EF6  216B               	addwfc	(??___flge+3)& (0+255),w,b
 30710  013EF8  0100               	movlb	0	; () banked
 30711  013EFA  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 30712  013EFC                     l2438:
 30713                           
 30714                           ; BSR set to: 0
 30715  013EFC  0E00               	movlw	0
 30716  013EFE  0100               	movlb	0	; () banked
 30717  013F00  1B60               	xorwf	___flge@ff1& (0+255),f,b
 30718  013F02  0E00               	movlw	0
 30719  013F04  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 30720  013F06  0E00               	movlw	0
 30721  013F08  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 30722  013F0A  0E80               	movlw	128
 30723  013F0C  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 30724  013F0E  0E00               	movlw	0
 30725  013F10  0100               	movlb	0	; () banked
 30726  013F12  1B64               	xorwf	___flge@ff2& (0+255),f,b
 30727  013F14  0E00               	movlw	0
 30728  013F16  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 30729  013F18  0E00               	movlw	0
 30730  013F1A  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 30731  013F1C  0E80               	movlw	128
 30732  013F1E  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 30733  013F20  0100               	movlb	0	; () banked
 30734  013F22  5164               	movf	___flge@ff2& (0+255),w,b
 30735  013F24  0100               	movlb	0	; () banked
 30736  013F26  5D60               	subwf	___flge@ff1& (0+255),w,b
 30737  013F28  0100               	movlb	0	; () banked
 30738  013F2A  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 30739  013F2C  0100               	movlb	0	; () banked
 30740  013F2E  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 30741  013F30  0100               	movlb	0	; () banked
 30742  013F32  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 30743  013F34  0100               	movlb	0	; () banked
 30744  013F36  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 30745  013F38  0100               	movlb	0	; () banked
 30746  013F3A  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 30747  013F3C  0100               	movlb	0	; () banked
 30748  013F3E  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 30749  013F40  B0D8               	btfsc	status,0,c
 30750  013F42  D002               	goto	l12501
 30751                           
 30752                           ; BSR set to: 0
 30753  013F44  90D8               	bcf	status,0,c
 30754  013F46  0012               	return	
 30755  013F48                     l12501:
 30756                           
 30757                           ; BSR set to: 0
 30758                           
 30759                           ; BSR set to: 0
 30760  013F48  80D8               	bsf	status,0,c
 30761                           
 30762                           ; BSR set to: 0
 30763  013F4A  0012               	return	
 30764  013F4C                     __end_of___flge:
 30765                           	opt stack 0
 30766                           tosu	equ	0xFFF
 30767                           tosh	equ	0xFFE
 30768                           tosl	equ	0xFFD
 30769                           pclath	equ	0xFFA
 30770                           tblptru	equ	0xFF8
 30771                           tblptrh	equ	0xFF7
 30772                           tblptrl	equ	0xFF6
 30773                           tablat	equ	0xFF5
 30774                           prodh	equ	0xFF4
 30775                           prodl	equ	0xFF3
 30776                           intcon	equ	0xFF2
 30777                           indf0	equ	0xFEF
 30778                           postinc0	equ	0xFEE
 30779                           fsr0h	equ	0xFEA
 30780                           fsr0l	equ	0xFE9
 30781                           wreg	equ	0xFE8
 30782                           indf1	equ	0xFE7
 30783                           postdec1	equ	0xFE5
 30784                           fsr1h	equ	0xFE2
 30785                           fsr1l	equ	0xFE1
 30786                           indf2	equ	0xFDF
 30787                           postinc2	equ	0xFDE
 30788                           postdec2	equ	0xFDD
 30789                           plusw2	equ	0xFDB
 30790                           fsr2h	equ	0xFDA
 30791                           fsr2l	equ	0xFD9
 30792                           status	equ	0xFD8
 30793                           
 30794 ;; *************** function _continuousMode *****************
 30795 ;; Defined at:
 30796 ;;		line 226 in file "main.c"
 30797 ;; Parameters:    Size  Location     Type
 30798 ;;		None
 30799 ;; Auto vars:     Size  Location     Type
 30800 ;;		None
 30801 ;; Return value:  Size  Location     Type
 30802 ;;                  1    wreg      void 
 30803 ;; Registers used:
 30804 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30805 ;; Tracked objects:
 30806 ;;		On entry : 0/0
 30807 ;;		On exit  : 0/0
 30808 ;;		Unchanged: 0/0
 30809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30814 ;;Total ram usage:        0 bytes
 30815 ;; Hardware stack levels used:    1
 30816 ;; Hardware stack levels required when called:   10
 30817 ;; This function calls:
 30818 ;;		_Motor_Move
 30819 ;;		_Motor_Speed
 30820 ;; This function is called by:
 30821 ;;		_main
 30822 ;; This function uses a non-reentrant model
 30823 ;;
 30824                           
 30825                           	psect	text142
 30826  017B7C                     __ptext142:
 30827                           	opt stack 0
 30828  017B7C                     _continuousMode:
 30829                           	opt stack 20
 30830                           
 30831                           ;main.c: 227: Motor_Speed(&Stepper, speed);
 30832                           
 30833                           ; BSR set to: 0
 30834                           ;incstack = 0
 30835  017B7C  0E41               	movlw	low _Stepper
 30836  017B7E  0100               	movlb	0	; () banked
 30837  017B80  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
 30838  017B82  0E00               	movlw	high _Stepper
 30839  017B84  0100               	movlb	0	; () banked
 30840  017B86  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
 30841  017B88  C0E2  F07D         	movff	_speed,Motor_Speed@pFrequency
 30842  017B8C  C0E3  F07E         	movff	_speed+1,Motor_Speed@pFrequency+1
 30843  017B90  EC62  F0BE         	call	_Motor_Speed	;wreg free
 30844                           
 30845                           ;main.c: 228: Motor_Move(&Stepper, direction);
 30846  017B94  0E41               	movlw	low _Stepper
 30847  017B96  0100               	movlb	0	; () banked
 30848  017B98  6F63               	movwf	Motor_Move@pMotor& (0+255),b
 30849  017B9A  0E00               	movlw	high _Stepper
 30850  017B9C  0100               	movlb	0	; () banked
 30851  017B9E  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
 30852  017BA0  C1F8  F065         	movff	_direction,Motor_Move@pDelta
 30853  017BA4  C1F9  F066         	movff	_direction+1,Motor_Move@pDelta+1
 30854  017BA8  EC1C  F0BD         	call	_Motor_Move	;wreg free
 30855  017BAC  0012               	return		;funcret
 30856  017BAE                     __end_of_continuousMode:
 30857                           	opt stack 0
 30858                           tosu	equ	0xFFF
 30859                           tosh	equ	0xFFE
 30860                           tosl	equ	0xFFD
 30861                           pclath	equ	0xFFA
 30862                           tblptru	equ	0xFF8
 30863                           tblptrh	equ	0xFF7
 30864                           tblptrl	equ	0xFF6
 30865                           tablat	equ	0xFF5
 30866                           prodh	equ	0xFF4
 30867                           prodl	equ	0xFF3
 30868                           intcon	equ	0xFF2
 30869                           indf0	equ	0xFEF
 30870                           postinc0	equ	0xFEE
 30871                           fsr0h	equ	0xFEA
 30872                           fsr0l	equ	0xFE9
 30873                           wreg	equ	0xFE8
 30874                           indf1	equ	0xFE7
 30875                           postdec1	equ	0xFE5
 30876                           fsr1h	equ	0xFE2
 30877                           fsr1l	equ	0xFE1
 30878                           indf2	equ	0xFDF
 30879                           postinc2	equ	0xFDE
 30880                           postdec2	equ	0xFDD
 30881                           plusw2	equ	0xFDB
 30882                           fsr2h	equ	0xFDA
 30883                           fsr2l	equ	0xFD9
 30884                           status	equ	0xFD8
 30885                           
 30886 ;; *************** function _Motor_Speed *****************
 30887 ;; Defined at:
 30888 ;;		line 117 in file "Library/Motor.c"
 30889 ;; Parameters:    Size  Location     Type
 30890 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 30891 ;;		 -> Stepper(6), 
 30892 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 30893 ;; Auto vars:     Size  Location     Type
 30894 ;;		None
 30895 ;; Return value:  Size  Location     Type
 30896 ;;                  1    wreg      unsigned char 
 30897 ;; Registers used:
 30898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30899 ;; Tracked objects:
 30900 ;;		On entry : 0/0
 30901 ;;		On exit  : 0/0
 30902 ;;		Unchanged: 0/0
 30903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30904 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30907 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30908 ;;Total ram usage:        4 bytes
 30909 ;; Hardware stack levels used:    1
 30910 ;; Hardware stack levels required when called:    9
 30911 ;; This function calls:
 30912 ;;		_Timer0_Init
 30913 ;; This function is called by:
 30914 ;;		_continuousMode
 30915 ;;		_stepMode
 30916 ;;		_positionMode
 30917 ;; This function uses a non-reentrant model
 30918 ;;
 30919                           
 30920                           	psect	text143
 30921  017CC4                     __ptext143:
 30922                           	opt stack 0
 30923  017CC4                     _Motor_Speed:
 30924                           	opt stack 20
 30925                           
 30926                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 30927                           
 30928                           ;incstack = 0
 30929  017CC4  0100               	movlb	0	; () banked
 30930  017CC6  EE20 F002          	lfsr	2,2
 30931  017CCA  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
 30932  017CCC  26D9               	addwf	fsr2l,f,c
 30933  017CCE  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 30934  017CD0  22DA               	addwfc	fsr2h,f,c
 30935  017CD2  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 30936  017CD6  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 30937                           
 30938                           ; BSR set to: 0
 30939                           ;Motor.c: 120: Timer0_Init(pFrequency);
 30940  017CDA  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 30941  017CDE  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 30942  017CE2  0100               	movlb	0	; () banked
 30943  017CE4  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 30944  017CE6  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 30945  017CE8  ECD0  F0A4         	call	_Timer0_Init	;wreg free
 30946  017CEC  0012               	return	
 30947  017CEE                     __end_of_Motor_Speed:
 30948                           	opt stack 0
 30949                           tosu	equ	0xFFF
 30950                           tosh	equ	0xFFE
 30951                           tosl	equ	0xFFD
 30952                           pclath	equ	0xFFA
 30953                           tblptru	equ	0xFF8
 30954                           tblptrh	equ	0xFF7
 30955                           tblptrl	equ	0xFF6
 30956                           tablat	equ	0xFF5
 30957                           prodh	equ	0xFF4
 30958                           prodl	equ	0xFF3
 30959                           intcon	equ	0xFF2
 30960                           indf0	equ	0xFEF
 30961                           postinc0	equ	0xFEE
 30962                           fsr0h	equ	0xFEA
 30963                           fsr0l	equ	0xFE9
 30964                           wreg	equ	0xFE8
 30965                           indf1	equ	0xFE7
 30966                           postdec1	equ	0xFE5
 30967                           fsr1h	equ	0xFE2
 30968                           fsr1l	equ	0xFE1
 30969                           indf2	equ	0xFDF
 30970                           postinc2	equ	0xFDE
 30971                           postdec2	equ	0xFDD
 30972                           plusw2	equ	0xFDB
 30973                           fsr2h	equ	0xFDA
 30974                           fsr2l	equ	0xFD9
 30975                           status	equ	0xFD8
 30976                           
 30977 ;; *************** function _Timer0_Init *****************
 30978 ;; Defined at:
 30979 ;;		line 25 in file "Library/Timer0.c"
 30980 ;; Parameters:    Size  Location     Type
 30981 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 30982 ;; Auto vars:     Size  Location     Type
 30983 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 30984 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 30985 ;; Return value:  Size  Location     Type
 30986 ;;                  1    wreg      void 
 30987 ;; Registers used:
 30988 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30989 ;; Tracked objects:
 30990 ;;		On entry : 0/0
 30991 ;;		On exit  : 0/0
 30992 ;;		Unchanged: 0/0
 30993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30994 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30995 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30997 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30998 ;;Total ram usage:       14 bytes
 30999 ;; Hardware stack levels used:    1
 31000 ;; Hardware stack levels required when called:    8
 31001 ;; This function calls:
 31002 ;;		_Timer0_Clear
 31003 ;;		___lldiv
 31004 ;; This function is called by:
 31005 ;;		_Motor_Init
 31006 ;;		_Motor_Speed
 31007 ;; This function uses a non-reentrant model
 31008 ;;
 31009                           
 31010                           	psect	text144
 31011  0149A0                     __ptext144:
 31012                           	opt stack 0
 31013  0149A0                     _Timer0_Init:
 31014                           	opt stack 20
 31015                           
 31016                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 31017                           
 31018                           ;incstack = 0
 31019  0149A0  0E80               	movlw	128
 31020  0149A2  0100               	movlb	0	; () banked
 31021  0149A4  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 31022  0149A6  0E8D               	movlw	141
 31023  0149A8  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 31024  0149AA  0E5B               	movlw	91
 31025  0149AC  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 31026  0149AE  0E00               	movlw	0
 31027  0149B0  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 31028                           
 31029                           ; BSR set to: 0
 31030                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 31031                           ;Timer0.c: 31: static UINT8 PRE = 0;
 31032                           ;Timer0.c: 32: static UINT32 DIV = 0;
 31033                           ;Timer0.c: 34: UINT32 DIVIDE;
 31034                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 31035  0149B2  9ED5               	bcf	4053,7,c	;volatile
 31036                           
 31037                           ; BSR set to: 0
 31038                           ;Timer0.c: 38: if (pFrequency == 0)
 31039  0149B4  0100               	movlb	0	; () banked
 31040  0149B6  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 31041  0149B8  0100               	movlb	0	; () banked
 31042  0149BA  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 31043  0149BC  0100               	movlb	0	; () banked
 31044  0149BE  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 31045  0149C0  0100               	movlb	0	; () banked
 31046  0149C2  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 31047  0149C4  B4D8               	btfsc	status,2,c
 31048  0149C6  0012               	return	
 31049                           
 31050                           ; BSR set to: 0
 31051                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 31052                           
 31053                           ; BSR set to: 0
 31054                           ;Timer0.c: 39: return;
 31055  0149C8  96D5               	bcf	4053,3,c	;volatile
 31056                           
 31057                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 31058  0149CA  9CD5               	bcf	4053,6,c	;volatile
 31059                           
 31060                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 31061  0149CC  9AD5               	bcf	4053,5,c	;volatile
 31062                           
 31063                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 31064  0149CE  98D5               	bcf	4053,4,c	;volatile
 31065                           
 31066                           ; BSR set to: 0
 31067                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 31068  0149D0  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 31069  0149D4  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 31070  0149D8  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 31071  0149DC  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 31072  0149E0  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 31073  0149E4  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 31074  0149E8  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 31075  0149EC  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 31076  0149F0  EC59  F0AD         	call	___lldiv	;wreg free
 31077  0149F4  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 31078  0149F8  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 31079  0149FC  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 31080  014A00  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 31081                           
 31082                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 31083  014A04  D00C               	goto	l1787
 31084  014A06                     l14859:
 31085                           
 31086                           ;Timer0.c: 50: {
 31087                           ;Timer0.c: 51: INDEX ++;
 31088  014A06  0100               	movlb	0	; () banked
 31089  014A08  2BF8               	incf	_INDEX& (0+255),f,b
 31090                           
 31091                           ; BSR set to: 0
 31092                           ;Timer0.c: 52: if (INDEX >= 3)
 31093  014A0A  0E02               	movlw	2
 31094  014A0C  0100               	movlb	0	; () banked
 31095  014A0E  65F8               	cpfsgt	_INDEX& (0+255),b
 31096  014A10  D001               	goto	l1785
 31097  014A12  D02F               	goto	u12650
 31098  014A14                     l1785:
 31099                           
 31100                           ; BSR set to: 0
 31101                           ;Timer0.c: 56: if (INDEX >= 8)
 31102                           
 31103                           ; BSR set to: 0
 31104  014A14  0E07               	movlw	7
 31105  014A16  0100               	movlb	0	; () banked
 31106  014A18  65F8               	cpfsgt	_INDEX& (0+255),b
 31107  014A1A  D001               	goto	l1787
 31108  014A1C  0012               	return	
 31109  014A1E                     l1787:
 31110                           
 31111                           ; BSR set to: 0
 31112                           
 31113                           ; BSR set to: 0
 31114  014A1E  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 31115  014A22  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 31116  014A26  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 31117  014A2A  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 31118  014A2E  0100               	movlb	0	; () banked
 31119  014A30  51F8               	movf	_INDEX& (0+255),w,b
 31120  014A32  0D02               	mullw	2
 31121  014A34  0E9F               	movlw	low Timer0_Init@PRESCALE
 31122  014A36  24F3               	addwf	prodl,w,c
 31123  014A38  6EF6               	movwf	tblptrl,c
 31124  014A3A  0EFC               	movlw	high Timer0_Init@PRESCALE
 31125  014A3C  20F4               	addwfc	prodh,w,c
 31126  014A3E  6EF7               	movwf	tblptrh,c
 31127  014A40                     	if	1	;There are 3 active tblptr bytes
 31128  014A40  6AF8               	clrf	tblptru,c
 31129  014A42  0E00               	movlw	low (__mediumconst shr (0+16))
 31130  014A44  22F8               	addwfc	tblptru,f,c
 31131  014A46                     	endif
 31132  014A46  0009               	tblrd		*+
 31133  014A48  CFF5 F071          	movff	tablat,??_Timer0_Init
 31134  014A4C  0009               	tblrd		*+
 31135  014A4E  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 31136  014A52  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 31137  014A56  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 31138  014A5A  0100               	movlb	0	; () banked
 31139  014A5C  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 31140  014A5E  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 31141  014A60  EC59  F0AD         	call	___lldiv	;wreg free
 31142  014A64  0100               	movlb	0	; () banked
 31143  014A66  5163               	movf	(?___lldiv+3)& (0+255),w,b
 31144  014A68  E1CE               	bnz	l14859
 31145  014A6A  0100               	movlb	0	; () banked
 31146  014A6C  0562               	decf	(?___lldiv+2)& (0+255),w,b
 31147  014A6E  B0D8               	btfsc	status,0,c
 31148  014A70  D7CA               	goto	l1784
 31149  014A72                     u12650:
 31150                           
 31151                           ; BSR set to: 0
 31152                           ;Timer0.c: 58: }
 31153                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 31154                           
 31155                           ; BSR set to: 0
 31156  014A72  0100               	movlb	0	; () banked
 31157  014A74  51F8               	movf	_INDEX& (0+255),w,b
 31158  014A76  0D02               	mullw	2
 31159  014A78  0E9F               	movlw	low Timer0_Init@PRESCALE
 31160  014A7A  24F3               	addwf	prodl,w,c
 31161  014A7C  6EF6               	movwf	tblptrl,c
 31162  014A7E  0EFC               	movlw	high Timer0_Init@PRESCALE
 31163  014A80  20F4               	addwfc	prodh,w,c
 31164  014A82  6EF7               	movwf	tblptrh,c
 31165  014A84                     	if	1	;There are 3 active tblptr bytes
 31166  014A84  6AF8               	clrf	tblptru,c
 31167  014A86  0E00               	movlw	low (__mediumconst shr (0+16))
 31168  014A88  22F8               	addwfc	tblptru,f,c
 31169  014A8A                     	endif
 31170  014A8A  0008               	tblrd		*
 31171  014A8C  CFF5 F0F7          	movff	tablat,Timer0_Init@PRE
 31172                           
 31173                           ; BSR set to: 0
 31174                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 31175  014A90  0EFF               	movlw	255
 31176  014A92  0100               	movlb	0	; () banked
 31177  014A94  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 31178  014A96  0101               	movlb	1	; () banked
 31179  014A98  6F08               	movwf	Timer0_Init@DIV& (0+255),b
 31180  014A9A  0EFF               	movlw	255
 31181  014A9C  0100               	movlb	0	; () banked
 31182  014A9E  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 31183  014AA0  0101               	movlb	1	; () banked
 31184  014AA2  6F09               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 31185  014AA4  0EFF               	movlw	255
 31186  014AA6  0100               	movlb	0	; () banked
 31187  014AA8  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 31188  014AAA  0101               	movlb	1	; () banked
 31189  014AAC  6F0A               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 31190  014AAE  0EFF               	movlw	255
 31191  014AB0  0100               	movlb	0	; () banked
 31192  014AB2  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 31193  014AB4  0101               	movlb	1	; () banked
 31194  014AB6  6F0B               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 31195                           
 31196                           ; BSR set to: 1
 31197                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 31198  014AB8  C108  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 31199  014ABC  C109  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 31200  014AC0  C10A  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 31201  014AC4  C10B  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 31202  014AC8  0100               	movlb	0	; () banked
 31203  014ACA  51F7               	movf	Timer0_Init@PRE& (0+255),w,b
 31204  014ACC  0100               	movlb	0	; () banked
 31205  014ACE  6F64               	movwf	___lldiv@divisor& (0+255),b
 31206  014AD0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 31207  014AD2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 31208  014AD4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 31209  014AD6  EC59  F0AD         	call	___lldiv	;wreg free
 31210  014ADA  0100               	movlb	0	; () banked
 31211  014ADC  1F60               	comf	?___lldiv& (0+255),f,b
 31212  014ADE  0100               	movlb	0	; () banked
 31213  014AE0  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 31214  014AE2  0100               	movlb	0	; () banked
 31215  014AE4  4B60               	infsnz	?___lldiv& (0+255),f,b
 31216  014AE6  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 31217  014AE8  0EFF               	movlw	255
 31218  014AEA  0100               	movlb	0	; () banked
 31219  014AEC  2560               	addwf	?___lldiv& (0+255),w,b
 31220  014AEE  6E2E               	movwf	_COUNTER,c
 31221  014AF0  0EFF               	movlw	255
 31222  014AF2  0100               	movlb	0	; () banked
 31223  014AF4  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 31224  014AF6  6E2F               	movwf	_COUNTER+1,c
 31225                           
 31226                           ; BSR set to: 0
 31227                           ;Timer0.c: 68: Timer0_Clear();
 31228  014AF8  EC0D  F0C0         	call	_Timer0_Clear	;wreg free
 31229                           
 31230                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 31231  014AFC  8ED5               	bsf	4053,7,c	;volatile
 31232  014AFE  0012               	return		;funcret
 31233  014B00                     __end_of_Timer0_Init:
 31234                           	opt stack 0
 31235                           tosu	equ	0xFFF
 31236                           tosh	equ	0xFFE
 31237                           tosl	equ	0xFFD
 31238                           pclath	equ	0xFFA
 31239                           tblptru	equ	0xFF8
 31240                           tblptrh	equ	0xFF7
 31241                           tblptrl	equ	0xFF6
 31242                           tablat	equ	0xFF5
 31243                           prodh	equ	0xFF4
 31244                           prodl	equ	0xFF3
 31245                           intcon	equ	0xFF2
 31246                           indf0	equ	0xFEF
 31247                           postinc0	equ	0xFEE
 31248                           fsr0h	equ	0xFEA
 31249                           fsr0l	equ	0xFE9
 31250                           wreg	equ	0xFE8
 31251                           indf1	equ	0xFE7
 31252                           postdec1	equ	0xFE5
 31253                           fsr1h	equ	0xFE2
 31254                           fsr1l	equ	0xFE1
 31255                           indf2	equ	0xFDF
 31256                           postinc2	equ	0xFDE
 31257                           postdec2	equ	0xFDD
 31258                           plusw2	equ	0xFDB
 31259                           fsr2h	equ	0xFDA
 31260                           fsr2l	equ	0xFD9
 31261                           status	equ	0xFD8
 31262                           
 31263 ;; *************** function ___lldiv *****************
 31264 ;; Defined at:
 31265 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 31266 ;; Parameters:    Size  Location     Type
 31267 ;;  dividend        4    0[BANK0 ] unsigned long 
 31268 ;;  divisor         4    4[BANK0 ] unsigned long 
 31269 ;; Auto vars:     Size  Location     Type
 31270 ;;  quotient        4    8[BANK0 ] unsigned long 
 31271 ;;  counter         1   12[BANK0 ] unsigned char 
 31272 ;; Return value:  Size  Location     Type
 31273 ;;                  4    0[BANK0 ] unsigned long 
 31274 ;; Registers used:
 31275 ;;		wreg, status,2, status,0
 31276 ;; Tracked objects:
 31277 ;;		On entry : 0/0
 31278 ;;		On exit  : 0/0
 31279 ;;		Unchanged: 0/0
 31280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31281 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31282 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31284 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31285 ;;Total ram usage:       13 bytes
 31286 ;; Hardware stack levels used:    1
 31287 ;; Hardware stack levels required when called:    7
 31288 ;; This function calls:
 31289 ;;		Nothing
 31290 ;; This function is called by:
 31291 ;;		_Timer0_Init
 31292 ;;		_Timer2_Init
 31293 ;;		_printf
 31294 ;;		_rand_between
 31295 ;;		_I2C_Init
 31296 ;; This function uses a non-reentrant model
 31297 ;;
 31298                           
 31299                           	psect	text145
 31300  015AB2                     __ptext145:
 31301                           	opt stack 0
 31302  015AB2                     ___lldiv:
 31303                           	opt stack 20
 31304                           
 31305                           ;incstack = 0
 31306  015AB2  0E00               	movlw	0
 31307  015AB4  0100               	movlb	0	; () banked
 31308  015AB6  6F68               	movwf	___lldiv@quotient& (0+255),b
 31309  015AB8  0E00               	movlw	0
 31310  015ABA  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 31311  015ABC  0E00               	movlw	0
 31312  015ABE  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 31313  015AC0  0E00               	movlw	0
 31314  015AC2  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 31315                           
 31316                           ; BSR set to: 0
 31317  015AC4  0100               	movlb	0	; () banked
 31318  015AC6  5164               	movf	___lldiv@divisor& (0+255),w,b
 31319  015AC8  0100               	movlb	0	; () banked
 31320  015ACA  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 31321  015ACC  0100               	movlb	0	; () banked
 31322  015ACE  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 31323  015AD0  0100               	movlb	0	; () banked
 31324  015AD2  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 31325  015AD4  B4D8               	btfsc	status,2,c
 31326  015AD6  D042               	goto	l2608
 31327                           
 31328                           ; BSR set to: 0
 31329  015AD8  0E01               	movlw	1
 31330  015ADA  0100               	movlb	0	; () banked
 31331  015ADC  6F6C               	movwf	___lldiv@counter& (0+255),b
 31332  015ADE  D008               	goto	l2603
 31333  015AE0                     
 31334                           ; BSR set to: 0
 31335                           
 31336                           ; BSR set to: 0
 31337  015AE0  0100               	movlb	0	; () banked
 31338  015AE2  90D8               	bcf	status,0,c
 31339  015AE4  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 31340  015AE6  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 31341  015AE8  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 31342  015AEA  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 31343  015AEC  0100               	movlb	0	; () banked
 31344  015AEE  2B6C               	incf	___lldiv@counter& (0+255),f,b
 31345  015AF0                     l2603:
 31346                           
 31347                           ; BSR set to: 0
 31348                           
 31349                           ; BSR set to: 0
 31350  015AF0  0100               	movlb	0	; () banked
 31351  015AF2  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 31352  015AF4  D7F5               	goto	l2604
 31353  015AF6                     u10650:
 31354                           
 31355                           ; BSR set to: 0
 31356                           
 31357                           ; BSR set to: 0
 31358                           
 31359                           ; BSR set to: 0
 31360  015AF6  0100               	movlb	0	; () banked
 31361  015AF8  90D8               	bcf	status,0,c
 31362  015AFA  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 31363  015AFC  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 31364  015AFE  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 31365  015B00  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 31366                           
 31367                           ; BSR set to: 0
 31368  015B02  0100               	movlb	0	; () banked
 31369  015B04  5164               	movf	___lldiv@divisor& (0+255),w,b
 31370  015B06  0100               	movlb	0	; () banked
 31371  015B08  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 31372  015B0A  0100               	movlb	0	; () banked
 31373  015B0C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 31374  015B0E  0100               	movlb	0	; () banked
 31375  015B10  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 31376  015B12  0100               	movlb	0	; () banked
 31377  015B14  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 31378  015B16  0100               	movlb	0	; () banked
 31379  015B18  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 31380  015B1A  0100               	movlb	0	; () banked
 31381  015B1C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 31382  015B1E  0100               	movlb	0	; () banked
 31383  015B20  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 31384  015B22  A0D8               	btfss	status,0,c
 31385  015B24  D012               	goto	l2607
 31386                           
 31387                           ; BSR set to: 0
 31388  015B26  0100               	movlb	0	; () banked
 31389  015B28  5164               	movf	___lldiv@divisor& (0+255),w,b
 31390  015B2A  0100               	movlb	0	; () banked
 31391  015B2C  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 31392  015B2E  0100               	movlb	0	; () banked
 31393  015B30  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 31394  015B32  0100               	movlb	0	; () banked
 31395  015B34  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 31396  015B36  0100               	movlb	0	; () banked
 31397  015B38  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 31398  015B3A  0100               	movlb	0	; () banked
 31399  015B3C  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 31400  015B3E  0100               	movlb	0	; () banked
 31401  015B40  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 31402  015B42  0100               	movlb	0	; () banked
 31403  015B44  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 31404                           
 31405                           ; BSR set to: 0
 31406  015B46  0100               	movlb	0	; () banked
 31407  015B48  8168               	bsf	___lldiv@quotient& (0+255),0,b
 31408  015B4A                     l2607:
 31409                           
 31410                           ; BSR set to: 0
 31411                           
 31412                           ; BSR set to: 0
 31413  015B4A  0100               	movlb	0	; () banked
 31414  015B4C  90D8               	bcf	status,0,c
 31415  015B4E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 31416  015B50  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 31417  015B52  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 31418  015B54  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 31419                           
 31420                           ; BSR set to: 0
 31421  015B56  0100               	movlb	0	; () banked
 31422  015B58  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 31423  015B5A  D7CD               	goto	u10650
 31424  015B5C                     l2608:
 31425                           
 31426                           ; BSR set to: 0
 31427                           
 31428                           ; BSR set to: 0
 31429  015B5C  C068  F060         	movff	___lldiv@quotient,?___lldiv
 31430  015B60  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 31431  015B64  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 31432  015B68  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 31433                           
 31434                           ; BSR set to: 0
 31435  015B6C  0012               	return		;funcret
 31436  015B6E                     __end_of___lldiv:
 31437                           	opt stack 0
 31438                           tosu	equ	0xFFF
 31439                           tosh	equ	0xFFE
 31440                           tosl	equ	0xFFD
 31441                           pclath	equ	0xFFA
 31442                           tblptru	equ	0xFF8
 31443                           tblptrh	equ	0xFF7
 31444                           tblptrl	equ	0xFF6
 31445                           tablat	equ	0xFF5
 31446                           prodh	equ	0xFF4
 31447                           prodl	equ	0xFF3
 31448                           intcon	equ	0xFF2
 31449                           indf0	equ	0xFEF
 31450                           postinc0	equ	0xFEE
 31451                           fsr0h	equ	0xFEA
 31452                           fsr0l	equ	0xFE9
 31453                           wreg	equ	0xFE8
 31454                           indf1	equ	0xFE7
 31455                           postdec1	equ	0xFE5
 31456                           fsr1h	equ	0xFE2
 31457                           fsr1l	equ	0xFE1
 31458                           indf2	equ	0xFDF
 31459                           postinc2	equ	0xFDE
 31460                           postdec2	equ	0xFDD
 31461                           plusw2	equ	0xFDB
 31462                           fsr2h	equ	0xFDA
 31463                           fsr2l	equ	0xFD9
 31464                           status	equ	0xFD8
 31465                           
 31466 ;; *************** function _Timer0_Clear *****************
 31467 ;; Defined at:
 31468 ;;		line 20 in file "Library/Timer0.c"
 31469 ;; Parameters:    Size  Location     Type
 31470 ;;		None
 31471 ;; Auto vars:     Size  Location     Type
 31472 ;;		None
 31473 ;; Return value:  Size  Location     Type
 31474 ;;                  1    wreg      void 
 31475 ;; Registers used:
 31476 ;;		None
 31477 ;; Tracked objects:
 31478 ;;		On entry : 0/0
 31479 ;;		On exit  : 0/0
 31480 ;;		Unchanged: 0/0
 31481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31486 ;;Total ram usage:        0 bytes
 31487 ;; Hardware stack levels used:    1
 31488 ;; Hardware stack levels required when called:    7
 31489 ;; This function calls:
 31490 ;;		Nothing
 31491 ;; This function is called by:
 31492 ;;		_Timer0_Init
 31493 ;; This function uses a non-reentrant model
 31494 ;;
 31495                           
 31496                           	psect	text146
 31497  01801A                     __ptext146:
 31498                           	opt stack 0
 31499  01801A                     _Timer0_Clear:
 31500                           	opt stack 20
 31501                           
 31502                           ;Timer0.c: 22: TMR0 = COUNTER;
 31503                           
 31504                           ; BSR set to: 0
 31505                           ;incstack = 0
 31506  01801A  C02E  FFD6         	movff	_COUNTER,4054	;volatile
 31507  01801E  C02F  FFD7         	movff	_COUNTER+1,4055	;volatile
 31508                           
 31509                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 31510  018022  94F2               	bcf	intcon,2,c	;volatile
 31511  018024  0012               	return		;funcret
 31512  018026                     __end_of_Timer0_Clear:
 31513                           	opt stack 0
 31514                           tosu	equ	0xFFF
 31515                           tosh	equ	0xFFE
 31516                           tosl	equ	0xFFD
 31517                           pclath	equ	0xFFA
 31518                           tblptru	equ	0xFF8
 31519                           tblptrh	equ	0xFF7
 31520                           tblptrl	equ	0xFF6
 31521                           tablat	equ	0xFF5
 31522                           prodh	equ	0xFF4
 31523                           prodl	equ	0xFF3
 31524                           intcon	equ	0xFF2
 31525                           indf0	equ	0xFEF
 31526                           postinc0	equ	0xFEE
 31527                           fsr0h	equ	0xFEA
 31528                           fsr0l	equ	0xFE9
 31529                           wreg	equ	0xFE8
 31530                           indf1	equ	0xFE7
 31531                           postdec1	equ	0xFE5
 31532                           fsr1h	equ	0xFE2
 31533                           fsr1l	equ	0xFE1
 31534                           indf2	equ	0xFDF
 31535                           postinc2	equ	0xFDE
 31536                           postdec2	equ	0xFDD
 31537                           plusw2	equ	0xFDB
 31538                           fsr2h	equ	0xFDA
 31539                           fsr2l	equ	0xFD9
 31540                           status	equ	0xFD8
 31541                           
 31542 ;; *************** function _Motor_Move *****************
 31543 ;; Defined at:
 31544 ;;		line 51 in file "Library/Motor.c"
 31545 ;; Parameters:    Size  Location     Type
 31546 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 31547 ;;		 -> Stepper(6), 
 31548 ;;  pDelta          2    5[BANK0 ] short 
 31549 ;; Auto vars:     Size  Location     Type
 31550 ;;		None
 31551 ;; Return value:  Size  Location     Type
 31552 ;;                  1    wreg      unsigned char 
 31553 ;; Registers used:
 31554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 31555 ;; Tracked objects:
 31556 ;;		On entry : 0/0
 31557 ;;		On exit  : 0/0
 31558 ;;		Unchanged: 0/0
 31559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31560 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31562 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31563 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31564 ;;Total ram usage:        6 bytes
 31565 ;; Hardware stack levels used:    1
 31566 ;; Hardware stack levels required when called:    8
 31567 ;; This function calls:
 31568 ;;		_Timer0_Start
 31569 ;; This function is called by:
 31570 ;;		_continuousMode
 31571 ;;		_stepMode
 31572 ;;		_positionMode
 31573 ;; This function uses a non-reentrant model
 31574 ;;
 31575                           
 31576                           	psect	text147
 31577  017A38                     __ptext147:
 31578                           	opt stack 0
 31579  017A38                     _Motor_Move:
 31580                           	opt stack 21
 31581                           
 31582                           ;Motor.c: 54: lMotor = pMotor;
 31583                           
 31584                           ;incstack = 0
 31585  017A38  C063  F0EA         	movff	Motor_Move@pMotor,_lMotor
 31586  017A3C  C064  F0EB         	movff	Motor_Move@pMotor+1,_lMotor+1
 31587                           
 31588                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 31589  017A40  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 31590  017A44  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 31591  017A48  50DE               	movf	postinc2,w,c
 31592  017A4A  10DE               	iorwf	postinc2,w,c
 31593  017A4C  A4D8               	btfss	status,2,c
 31594  017A4E  0012               	return	
 31595                           
 31596                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 31597                           
 31598                           ;Motor.c: 59: return 0;
 31599                           ;	Return value of _Motor_Move is never used
 31600  017A50  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 31601  017A54  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 31602  017A58  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
 31603  017A5C  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 31604                           
 31605                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 31606  017A60  C029  F060         	movff	_lStepFunction,Timer0_Start@pFunction
 31607  017A64  C02A  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 31608  017A68  C02B  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 31609  017A6C  EC8B  F0BE         	call	_Timer0_Start	;wreg free
 31610  017A70  0012               	return	
 31611  017A72                     __end_of_Motor_Move:
 31612                           	opt stack 0
 31613                           tosu	equ	0xFFF
 31614                           tosh	equ	0xFFE
 31615                           tosl	equ	0xFFD
 31616                           pclath	equ	0xFFA
 31617                           tblptru	equ	0xFF8
 31618                           tblptrh	equ	0xFF7
 31619                           tblptrl	equ	0xFF6
 31620                           tablat	equ	0xFF5
 31621                           prodh	equ	0xFF4
 31622                           prodl	equ	0xFF3
 31623                           intcon	equ	0xFF2
 31624                           indf0	equ	0xFEF
 31625                           postinc0	equ	0xFEE
 31626                           fsr0h	equ	0xFEA
 31627                           fsr0l	equ	0xFE9
 31628                           wreg	equ	0xFE8
 31629                           indf1	equ	0xFE7
 31630                           postdec1	equ	0xFE5
 31631                           fsr1h	equ	0xFE2
 31632                           fsr1l	equ	0xFE1
 31633                           indf2	equ	0xFDF
 31634                           postinc2	equ	0xFDE
 31635                           postdec2	equ	0xFDD
 31636                           plusw2	equ	0xFDB
 31637                           fsr2h	equ	0xFDA
 31638                           fsr2l	equ	0xFD9
 31639                           status	equ	0xFD8
 31640                           
 31641 ;; *************** function _Timer0_Start *****************
 31642 ;; Defined at:
 31643 ;;		line 75 in file "Library/Timer0.c"
 31644 ;; Parameters:    Size  Location     Type
 31645 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 31646 ;;		 -> Absolute function(1), Motor_Step(1), 
 31647 ;; Auto vars:     Size  Location     Type
 31648 ;;		None
 31649 ;; Return value:  Size  Location     Type
 31650 ;;                  1    wreg      void 
 31651 ;; Registers used:
 31652 ;;		wreg, status,2, status,0
 31653 ;; Tracked objects:
 31654 ;;		On entry : 0/0
 31655 ;;		On exit  : 0/0
 31656 ;;		Unchanged: 0/0
 31657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31658 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31661 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31662 ;;Total ram usage:        3 bytes
 31663 ;; Hardware stack levels used:    1
 31664 ;; Hardware stack levels required when called:    7
 31665 ;; This function calls:
 31666 ;;		Nothing
 31667 ;; This function is called by:
 31668 ;;		_Motor_Move
 31669 ;; This function uses a non-reentrant model
 31670 ;;
 31671                           
 31672                           	psect	text148
 31673  017D16                     __ptext148:
 31674                           	opt stack 0
 31675  017D16                     _Timer0_Start:
 31676                           	opt stack 21
 31677                           
 31678                           ;Timer0.c: 77: gISR = pFunction;
 31679                           
 31680                           ;incstack = 0
 31681  017D16  C060  F10C         	movff	Timer0_Start@pFunction,_gISR
 31682  017D1A  C061  F10D         	movff	Timer0_Start@pFunction+1,_gISR+1
 31683  017D1E  C062  F10E         	movff	Timer0_Start@pFunction+2,_gISR+2
 31684                           
 31685                           ;Timer0.c: 78: TMR0 = COUNTER;
 31686  017D22  C02E  FFD6         	movff	_COUNTER,4054	;volatile
 31687  017D26  C02F  FFD7         	movff	_COUNTER+1,4055	;volatile
 31688                           
 31689                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 31690  017D2A  50D5               	movf	4053,w,c	;volatile
 31691  017D2C  0100               	movlb	0	; () banked
 31692  017D2E  19F8               	xorwf	_INDEX& (0+255),w,b
 31693  017D30  0BF8               	andlw	-8
 31694  017D32  19F8               	xorwf	_INDEX& (0+255),w,b
 31695  017D34  6ED5               	movwf	4053,c	;volatile
 31696                           
 31697                           ; BSR set to: 0
 31698                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 31699  017D36  94F2               	bcf	intcon,2,c	;volatile
 31700                           
 31701                           ; BSR set to: 0
 31702                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 31703  017D38  8AF2               	bsf	intcon,5,c	;volatile
 31704                           
 31705                           ; BSR set to: 0
 31706  017D3A  0012               	return		;funcret
 31707  017D3C                     __end_of_Timer0_Start:
 31708                           	opt stack 0
 31709                           tosu	equ	0xFFF
 31710                           tosh	equ	0xFFE
 31711                           tosl	equ	0xFFD
 31712                           pclath	equ	0xFFA
 31713                           tblptru	equ	0xFF8
 31714                           tblptrh	equ	0xFF7
 31715                           tblptrl	equ	0xFF6
 31716                           tablat	equ	0xFF5
 31717                           prodh	equ	0xFF4
 31718                           prodl	equ	0xFF3
 31719                           intcon	equ	0xFF2
 31720                           indf0	equ	0xFEF
 31721                           postinc0	equ	0xFEE
 31722                           fsr0h	equ	0xFEA
 31723                           fsr0l	equ	0xFE9
 31724                           wreg	equ	0xFE8
 31725                           indf1	equ	0xFE7
 31726                           postdec1	equ	0xFE5
 31727                           fsr1h	equ	0xFE2
 31728                           fsr1l	equ	0xFE1
 31729                           indf2	equ	0xFDF
 31730                           postinc2	equ	0xFDE
 31731                           postdec2	equ	0xFDD
 31732                           plusw2	equ	0xFDB
 31733                           fsr2h	equ	0xFDA
 31734                           fsr2l	equ	0xFD9
 31735                           status	equ	0xFD8
 31736                           
 31737 ;; *************** function _HMI_Render *****************
 31738 ;; Defined at:
 31739 ;;		line 138 in file "HMI.c"
 31740 ;; Parameters:    Size  Location     Type
 31741 ;;		None
 31742 ;; Auto vars:     Size  Location     Type
 31743 ;;  a               2    8[BANK0 ] unsigned short 
 31744 ;; Return value:  Size  Location     Type
 31745 ;;                  1    wreg      void 
 31746 ;; Registers used:
 31747 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 31748 ;; Tracked objects:
 31749 ;;		On entry : 0/0
 31750 ;;		On exit  : 0/0
 31751 ;;		Unchanged: 0/0
 31752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31754 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31756 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31757 ;;Total ram usage:        2 bytes
 31758 ;; Hardware stack levels used:    1
 31759 ;; Hardware stack levels required when called:    9
 31760 ;; This function calls:
 31761 ;;		_OutSeg
 31762 ;; This function is called by:
 31763 ;;		_main
 31764 ;; This function uses a non-reentrant model
 31765 ;;
 31766                           
 31767                           	psect	text149
 31768  0179BE                     __ptext149:
 31769                           	opt stack 0
 31770  0179BE                     _HMI_Render:
 31771                           	opt stack 21
 31772                           
 31773                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 31774                           
 31775                           ; BSR set to: 0
 31776                           ;incstack = 0
 31777  0179BE  0E00               	movlw	0
 31778  0179C0  0100               	movlb	0	; () banked
 31779  0179C2  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 31780  0179C4  0E00               	movlw	0
 31781  0179C6  6F68               	movwf	HMI_Render@a& (0+255),b
 31782  0179C8                     l15933:
 31783                           
 31784                           ; BSR set to: 0
 31785  0179C8  0100               	movlb	0	; () banked
 31786  0179CA  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 31787  0179CC  E116               	bnz	l1158
 31788  0179CE  0E08               	movlw	8
 31789  0179D0  0100               	movlb	0	; () banked
 31790  0179D2  5D68               	subwf	HMI_Render@a& (0+255),w,b
 31791  0179D4  B0D8               	btfsc	status,0,c
 31792  0179D6  0012               	return	
 31793                           
 31794                           ; BSR set to: 0
 31795                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 31796                           
 31797                           ; BSR set to: 0
 31798                           
 31799                           ; BSR set to: 0
 31800  0179D8  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 31801  0179DC  0E27               	movlw	low _HMIBoard
 31802  0179DE  0100               	movlb	0	; () banked
 31803  0179E0  2568               	addwf	HMI_Render@a& (0+255),w,b
 31804  0179E2  6ED9               	movwf	fsr2l,c
 31805  0179E4  0E01               	movlw	high _HMIBoard
 31806  0179E6  0100               	movlb	0	; () banked
 31807  0179E8  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 31808  0179EA  6EDA               	movwf	fsr2h,c
 31809  0179EC  50DF               	movf	indf2,w,c
 31810  0179EE  EC40  F0B5         	call	_OutSeg
 31811  0179F2  0100               	movlb	0	; () banked
 31812  0179F4  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 31813  0179F6  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 31814  0179F8  D7E7               	goto	l15933
 31815  0179FA                     l1158:
 31816                           
 31817                           ; BSR set to: 0
 31818  0179FA  0012               	return		;funcret
 31819  0179FC                     __end_of_HMI_Render:
 31820                           	opt stack 0
 31821                           tosu	equ	0xFFF
 31822                           tosh	equ	0xFFE
 31823                           tosl	equ	0xFFD
 31824                           pclath	equ	0xFFA
 31825                           tblptru	equ	0xFF8
 31826                           tblptrh	equ	0xFF7
 31827                           tblptrl	equ	0xFF6
 31828                           tablat	equ	0xFF5
 31829                           prodh	equ	0xFF4
 31830                           prodl	equ	0xFF3
 31831                           intcon	equ	0xFF2
 31832                           indf0	equ	0xFEF
 31833                           postinc0	equ	0xFEE
 31834                           fsr0h	equ	0xFEA
 31835                           fsr0l	equ	0xFE9
 31836                           wreg	equ	0xFE8
 31837                           indf1	equ	0xFE7
 31838                           postdec1	equ	0xFE5
 31839                           fsr1h	equ	0xFE2
 31840                           fsr1l	equ	0xFE1
 31841                           indf2	equ	0xFDF
 31842                           postinc2	equ	0xFDE
 31843                           postdec2	equ	0xFDD
 31844                           plusw2	equ	0xFDB
 31845                           fsr2h	equ	0xFDA
 31846                           fsr2l	equ	0xFD9
 31847                           status	equ	0xFD8
 31848                           
 31849 ;; *************** function _OutSeg *****************
 31850 ;; Defined at:
 31851 ;;		line 54 in file "HMI.c"
 31852 ;; Parameters:    Size  Location     Type
 31853 ;;  pInput          1    wreg     unsigned char 
 31854 ;;  pSegment        1    3[BANK0 ] unsigned char 
 31855 ;; Auto vars:     Size  Location     Type
 31856 ;;  pInput          1    6[BANK0 ] unsigned char 
 31857 ;;  out             1    7[BANK0 ] volatile unsigned char 
 31858 ;; Return value:  Size  Location     Type
 31859 ;;                  1    wreg      void 
 31860 ;; Registers used:
 31861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 31862 ;; Tracked objects:
 31863 ;;		On entry : 0/0
 31864 ;;		On exit  : 0/0
 31865 ;;		Unchanged: 0/0
 31866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31867 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31868 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31869 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31870 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31871 ;;Total ram usage:        5 bytes
 31872 ;; Hardware stack levels used:    1
 31873 ;; Hardware stack levels required when called:    8
 31874 ;; This function calls:
 31875 ;;		_SPI_Send
 31876 ;; This function is called by:
 31877 ;;		_HMI_Render
 31878 ;;		_HMI_GRender
 31879 ;; This function uses a non-reentrant model
 31880 ;;
 31881                           
 31882                           	psect	text150
 31883  016A80                     __ptext150:
 31884                           	opt stack 0
 31885  016A80                     _OutSeg:
 31886                           	opt stack 21
 31887                           
 31888                           ; BSR set to: 0
 31889                           ;incstack = 0
 31890                           ;OutSeg@pInput stored from wreg
 31891  016A80  0100               	movlb	0	; () banked
 31892  016A82  6F66               	movwf	OutSeg@pInput& (0+255),b
 31893                           
 31894                           ;HMI.c: 58: static UINT8 cur;
 31895                           ;HMI.c: 59: volatile UINT8 out;
 31896                           ;HMI.c: 60: static UINT8 segset;
 31897                           ;HMI.c: 61: static UINT8 a;
 31898                           ;HMI.c: 83: if (pSegment <= 8)
 31899  016A84  0E09               	movlw	9
 31900  016A86  0100               	movlb	0	; () banked
 31901  016A88  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 31902  016A8A  0012               	return	
 31903                           
 31904                           ; BSR set to: 0
 31905                           ;HMI.c: 84: {
 31906                           ;HMI.c: 85: cur = pInput;
 31907  016A8C  C066  F039         	movff	OutSeg@pInput,OutSeg@cur
 31908                           
 31909                           ; BSR set to: 0
 31910                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 31911  016A90  0E00               	movlw	0
 31912  016A92  6E37               	movwf	OutSeg@a,c
 31913  016A94                     l15333:
 31914                           
 31915                           ; BSR set to: 0
 31916  016A94  0E07               	movlw	7
 31917  016A96  6437               	cpfsgt	OutSeg@a,c
 31918  016A98  D001               	goto	l1146
 31919  016A9A  D027               	goto	u13290
 31920  016A9C                     l1146:
 31921                           
 31922                           ;HMI.c: 87: {
 31923                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 31924                           
 31925                           ; BSR set to: 0
 31926  016A9C  C039  F064         	movff	OutSeg@cur,??_OutSeg
 31927  016AA0  0E01               	movlw	1
 31928  016AA2  0100               	movlb	0	; () banked
 31929  016AA4  1764               	andwf	??_OutSeg& (0+255),f,b
 31930  016AA6  0E06               	movlw	6
 31931  016AA8  0100               	movlb	0	; () banked
 31932  016AAA  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 31933  016AAC                     u13285:
 31934  016AAC  0100               	movlb	0	; () banked
 31935  016AAE  90D8               	bcf	status,0,c
 31936  016AB0  3764               	rlcf	??_OutSeg& (0+255),f,b
 31937  016AB2  0100               	movlb	0	; () banked
 31938  016AB4  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 31939  016AB6  D7FA               	goto	u13285
 31940  016AB8  0100               	movlb	0	; () banked
 31941  016ABA  5164               	movf	??_OutSeg& (0+255),w,b
 31942  016ABC  6E38               	movwf	OutSeg@segset,c
 31943                           
 31944                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 31945  016ABE  0100               	movlb	0	; () banked
 31946  016AC0  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 31947  016AC2  42E8               	rrncf	wreg,f,c
 31948  016AC4  0BF8               	andlw	248
 31949  016AC6  1037               	iorwf	OutSeg@a,w,c
 31950  016AC8  1038               	iorwf	OutSeg@segset,w,c
 31951  016ACA  0100               	movlb	0	; () banked
 31952  016ACC  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 31953                           
 31954                           ;HMI.c: 90: cur >>= 1;
 31955  016ACE  90D8               	bcf	status,0,c
 31956  016AD0  3239               	rrcf	OutSeg@cur,f,c
 31957                           
 31958                           ; BSR set to: 0
 31959                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 31960  016AD2  0E61               	movlw	low _SPI1
 31961  016AD4  0100               	movlb	0	; () banked
 31962  016AD6  6F60               	movwf	SPI_Send@pInput& (0+255),b
 31963  016AD8  0E01               	movlw	high _SPI1
 31964  016ADA  0100               	movlb	0	; () banked
 31965  016ADC  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 31966  016ADE  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 31967  016AE2  ECC9  F0B7         	call	_SPI_Send	;wreg free
 31968  016AE6  2A37               	incf	OutSeg@a,f,c
 31969  016AE8  D7D5               	goto	l15333
 31970  016AEA                     u13290:
 31971                           
 31972                           ;HMI.c: 96: }
 31973                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 31974  016AEA  0E61               	movlw	low _SPI1
 31975  016AEC  0100               	movlb	0	; () banked
 31976  016AEE  6F60               	movwf	SPI_Send@pInput& (0+255),b
 31977  016AF0  0E01               	movlw	high _SPI1
 31978  016AF2  0100               	movlb	0	; () banked
 31979  016AF4  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 31980  016AF6  0E00               	movlw	0
 31981  016AF8  0100               	movlb	0	; () banked
 31982  016AFA  6F62               	movwf	SPI_Send@pData& (0+255),b
 31983  016AFC  ECC9  F0B7         	call	_SPI_Send	;wreg free
 31984  016B00  0012               	return	
 31985  016B02                     __end_of_OutSeg:
 31986                           	opt stack 0
 31987                           tosu	equ	0xFFF
 31988                           tosh	equ	0xFFE
 31989                           tosl	equ	0xFFD
 31990                           pclath	equ	0xFFA
 31991                           tblptru	equ	0xFF8
 31992                           tblptrh	equ	0xFF7
 31993                           tblptrl	equ	0xFF6
 31994                           tablat	equ	0xFF5
 31995                           prodh	equ	0xFF4
 31996                           prodl	equ	0xFF3
 31997                           intcon	equ	0xFF2
 31998                           indf0	equ	0xFEF
 31999                           postinc0	equ	0xFEE
 32000                           fsr0h	equ	0xFEA
 32001                           fsr0l	equ	0xFE9
 32002                           wreg	equ	0xFE8
 32003                           indf1	equ	0xFE7
 32004                           postdec1	equ	0xFE5
 32005                           fsr1h	equ	0xFE2
 32006                           fsr1l	equ	0xFE1
 32007                           indf2	equ	0xFDF
 32008                           postinc2	equ	0xFDE
 32009                           postdec2	equ	0xFDD
 32010                           plusw2	equ	0xFDB
 32011                           fsr2h	equ	0xFDA
 32012                           fsr2l	equ	0xFD9
 32013                           status	equ	0xFD8
 32014                           
 32015 ;; *************** function _Console_Render *****************
 32016 ;; Defined at:
 32017 ;;		line 377 in file "Library/Console.c"
 32018 ;; Parameters:    Size  Location     Type
 32019 ;;		None
 32020 ;; Auto vars:     Size  Location     Type
 32021 ;;  lCursor         4   38[BANK0 ] struct Point
 32022 ;;  y               1   43[BANK0 ] unsigned char 
 32023 ;;  x               1   42[BANK0 ] unsigned char 
 32024 ;;  temp            1   37[BANK0 ] unsigned char 
 32025 ;;  Temp            2    0        unsigned short 
 32026 ;; Return value:  Size  Location     Type
 32027 ;;                  1    wreg      void 
 32028 ;; Registers used:
 32029 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 32030 ;; Tracked objects:
 32031 ;;		On entry : 0/0
 32032 ;;		On exit  : 0/0
 32033 ;;		Unchanged: 0/0
 32034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32036 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32037 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32038 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32039 ;;Total ram usage:        9 bytes
 32040 ;; Hardware stack levels used:    1
 32041 ;; Hardware stack levels required when called:   11
 32042 ;; This function calls:
 32043 ;;		_Console_MakeField
 32044 ;;		_LCD_DrawField
 32045 ;;		_LCD_FillRectangle
 32046 ;; This function is called by:
 32047 ;;		_main
 32048 ;; This function uses a non-reentrant model
 32049 ;;
 32050                           
 32051                           	psect	text151
 32052  012F56                     __ptext151:
 32053                           	opt stack 0
 32054  012F56                     _Console_Render:
 32055                           	opt stack 19
 32056                           
 32057                           ;Console.c: 379: Colour Temp;
 32058                           ;Console.c: 380: if (change)
 32059                           
 32060                           ;incstack = 0
 32061  012F56  0100               	movlb	0	; () banked
 32062  012F58  51FE               	movf	_change& (0+255),w,b
 32063  012F5A  B4D8               	btfsc	status,2,c
 32064  012F5C  0012               	return	
 32065                           
 32066                           ; BSR set to: 0
 32067                           ;Console.c: 381: {
 32068                           ;Console.c: 382: UINT8 x, y, temp;
 32069                           ;Console.c: 383: Point lCursor = {6,6};
 32070  012F5E  C1EA  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 32071  012F62  C1EB  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 32072  012F66  C1EC  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 32073  012F6A  C1ED  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 32074                           
 32075                           ; BSR set to: 0
 32076                           ;Console.c: 385: if (clearall)
 32077  012F6E  0100               	movlb	0	; () banked
 32078  012F70  51FB               	movf	_clearall& (0+255),w,b
 32079  012F72  B4D8               	btfsc	status,2,c
 32080  012F74  D005               	goto	l1056
 32081                           
 32082                           ; BSR set to: 0
 32083                           ;Console.c: 386: {
 32084                           ;Console.c: 389: temp = lBufferY;
 32085  012F76  C0F9  F085         	movff	_lBufferY,Console_Render@temp
 32086                           
 32087                           ; BSR set to: 0
 32088                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 32089  012F7A  0E0F               	movlw	15
 32090  012F7C  0100               	movlb	0	; () banked
 32091  012F7E  6FF9               	movwf	_lBufferY& (0+255),b
 32092  012F80                     l1056:
 32093                           
 32094                           ; BSR set to: 0
 32095                           ;Console.c: 391: }
 32096                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 32097  012F80  0E00               	movlw	0
 32098  012F82  0100               	movlb	0	; () banked
 32099  012F84  6F8B               	movwf	Console_Render@y& (0+255),b
 32100  012F86  D0DF               	goto	l1057
 32101  012F88                     
 32102                           ; BSR set to: 0
 32103                           ;Console.c: 394: {
 32104                           ;Console.c: 395: gForecolour = lCBuffer[y];
 32105                           
 32106                           ; BSR set to: 0
 32107  012F88  0100               	movlb	0	; () banked
 32108  012F8A  518B               	movf	Console_Render@y& (0+255),w,b
 32109  012F8C  0D02               	mullw	2
 32110  012F8E  0E00               	movlw	low _lCBuffer
 32111  012F90  24F3               	addwf	prodl,w,c
 32112  012F92  6ED9               	movwf	fsr2l,c
 32113  012F94  0E02               	movlw	high _lCBuffer
 32114  012F96  20F4               	addwfc	prodh,w,c
 32115  012F98  6EDA               	movwf	fsr2h,c
 32116  012F9A  CFDE F0FC          	movff	postinc2,_gForecolour
 32117  012F9E  CFDD F0FD          	movff	postdec2,_gForecolour+1
 32118                           
 32119                           ; BSR set to: 0
 32120                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 32121  012FA2  0E00               	movlw	0
 32122  012FA4  0100               	movlb	0	; () banked
 32123  012FA6  6F8A               	movwf	Console_Render@x& (0+255),b
 32124  012FA8                     l15897:
 32125                           
 32126                           ; BSR set to: 0
 32127  012FA8  0E13               	movlw	19
 32128  012FAA  0100               	movlb	0	; () banked
 32129  012FAC  658A               	cpfsgt	Console_Render@x& (0+255),b
 32130  012FAE  D001               	goto	l1059
 32131  012FB0  D0BE               	goto	u13980
 32132  012FB2                     l1059:
 32133                           
 32134                           ; BSR set to: 0
 32135                           ;Console.c: 397: {
 32136                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 32137                           
 32138                           ; BSR set to: 0
 32139  012FB2  0100               	movlb	0	; () banked
 32140  012FB4  518B               	movf	Console_Render@y& (0+255),w,b
 32141  012FB6  0D14               	mullw	20
 32142  012FB8  0E7B               	movlw	low _lBuffer
 32143  012FBA  0100               	movlb	0	; () banked
 32144  012FBC  6F83               	movwf	??_Console_Render& (0+255),b
 32145  012FBE  0E02               	movlw	high _lBuffer
 32146  012FC0  0100               	movlb	0	; () banked
 32147  012FC2  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 32148  012FC4  50F3               	movf	prodl,w,c
 32149  012FC6  0100               	movlb	0	; () banked
 32150  012FC8  2783               	addwf	??_Console_Render& (0+255),f,b
 32151  012FCA  50F4               	movf	prodh,w,c
 32152  012FCC  0100               	movlb	0	; () banked
 32153  012FCE  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 32154  012FD0  0100               	movlb	0	; () banked
 32155  012FD2  518A               	movf	Console_Render@x& (0+255),w,b
 32156  012FD4  0D01               	mullw	1
 32157  012FD6  50F3               	movf	prodl,w,c
 32158  012FD8  0100               	movlb	0	; () banked
 32159  012FDA  2583               	addwf	??_Console_Render& (0+255),w,b
 32160  012FDC  6ED9               	movwf	fsr2l,c
 32161  012FDE  50F4               	movf	prodh,w,c
 32162  012FE0  0100               	movlb	0	; () banked
 32163  012FE2  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 32164  012FE4  6EDA               	movwf	fsr2h,c
 32165  012FE6  AEDF               	btfss	indf2,7,c
 32166  012FE8  D09A               	goto	l1063
 32167                           
 32168                           ; BSR set to: 0
 32169                           ;Console.c: 399: {
 32170                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 32171  012FEA  0100               	movlb	0	; () banked
 32172  012FEC  518B               	movf	Console_Render@y& (0+255),w,b
 32173  012FEE  0D14               	mullw	20
 32174  012FF0  0E7B               	movlw	low _lBuffer
 32175  012FF2  0100               	movlb	0	; () banked
 32176  012FF4  6F83               	movwf	??_Console_Render& (0+255),b
 32177  012FF6  0E02               	movlw	high _lBuffer
 32178  012FF8  0100               	movlb	0	; () banked
 32179  012FFA  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 32180  012FFC  50F3               	movf	prodl,w,c
 32181  012FFE  0100               	movlb	0	; () banked
 32182  013000  2783               	addwf	??_Console_Render& (0+255),f,b
 32183  013002  50F4               	movf	prodh,w,c
 32184  013004  0100               	movlb	0	; () banked
 32185  013006  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 32186  013008  0100               	movlb	0	; () banked
 32187  01300A  518A               	movf	Console_Render@x& (0+255),w,b
 32188  01300C  0D01               	mullw	1
 32189  01300E  50F3               	movf	prodl,w,c
 32190  013010  0100               	movlb	0	; () banked
 32191  013012  2583               	addwf	??_Console_Render& (0+255),w,b
 32192  013014  6ED9               	movwf	fsr2l,c
 32193  013016  50F4               	movf	prodh,w,c
 32194  013018  0100               	movlb	0	; () banked
 32195  01301A  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 32196  01301C  6EDA               	movwf	fsr2h,c
 32197  01301E  0E7F               	movlw	127
 32198  013020  16DF               	andwf	indf2,f,c
 32199                           
 32200                           ;Console.c: 401: if (lBuffer[y][x])
 32201  013022  0100               	movlb	0	; () banked
 32202  013024  518B               	movf	Console_Render@y& (0+255),w,b
 32203  013026  0D14               	mullw	20
 32204  013028  0E7B               	movlw	low _lBuffer
 32205  01302A  0100               	movlb	0	; () banked
 32206  01302C  6F83               	movwf	??_Console_Render& (0+255),b
 32207  01302E  0E02               	movlw	high _lBuffer
 32208  013030  0100               	movlb	0	; () banked
 32209  013032  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 32210  013034  50F3               	movf	prodl,w,c
 32211  013036  0100               	movlb	0	; () banked
 32212  013038  2783               	addwf	??_Console_Render& (0+255),f,b
 32213  01303A  50F4               	movf	prodh,w,c
 32214  01303C  0100               	movlb	0	; () banked
 32215  01303E  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 32216  013040  0100               	movlb	0	; () banked
 32217  013042  518A               	movf	Console_Render@x& (0+255),w,b
 32218  013044  0D01               	mullw	1
 32219  013046  50F3               	movf	prodl,w,c
 32220  013048  0100               	movlb	0	; () banked
 32221  01304A  2583               	addwf	??_Console_Render& (0+255),w,b
 32222  01304C  6ED9               	movwf	fsr2l,c
 32223  01304E  50F4               	movf	prodh,w,c
 32224  013050  0100               	movlb	0	; () banked
 32225  013052  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 32226  013054  6EDA               	movwf	fsr2h,c
 32227  013056  50DF               	movf	indf2,w,c
 32228  013058  B4D8               	btfsc	status,2,c
 32229  01305A  D04A               	goto	l1062
 32230                           
 32231                           ; BSR set to: 0
 32232                           ;Console.c: 402: {
 32233                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 32234  01305C  C0EE  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 32235  013060  C0EF  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 32236  013064  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 32237  013068  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 32238  01306C  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 32239  013070  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 32240  013074  C1F2  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 32241  013078  C1F3  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 32242  01307C  C1F4  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 32243  013080  C1F5  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 32244  013084  EC21  F0B7         	call	_LCD_FillRectangle	;wreg free
 32245                           
 32246                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 32247  013088  0100               	movlb	0	; () banked
 32248  01308A  518B               	movf	Console_Render@y& (0+255),w,b
 32249  01308C  0D14               	mullw	20
 32250  01308E  0E7B               	movlw	low _lBuffer
 32251  013090  0100               	movlb	0	; () banked
 32252  013092  6F83               	movwf	??_Console_Render& (0+255),b
 32253  013094  0E02               	movlw	high _lBuffer
 32254  013096  0100               	movlb	0	; () banked
 32255  013098  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 32256  01309A  50F3               	movf	prodl,w,c
 32257  01309C  0100               	movlb	0	; () banked
 32258  01309E  2783               	addwf	??_Console_Render& (0+255),f,b
 32259  0130A0  50F4               	movf	prodh,w,c
 32260  0130A2  0100               	movlb	0	; () banked
 32261  0130A4  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 32262  0130A6  0100               	movlb	0	; () banked
 32263  0130A8  518A               	movf	Console_Render@x& (0+255),w,b
 32264  0130AA  0D01               	mullw	1
 32265  0130AC  50F3               	movf	prodl,w,c
 32266  0130AE  0100               	movlb	0	; () banked
 32267  0130B0  2583               	addwf	??_Console_Render& (0+255),w,b
 32268  0130B2  6ED9               	movwf	fsr2l,c
 32269  0130B4  50F4               	movf	prodh,w,c
 32270  0130B6  0100               	movlb	0	; () banked
 32271  0130B8  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 32272  0130BA  6EDA               	movwf	fsr2h,c
 32273  0130BC  50DF               	movf	indf2,w,c
 32274  0130BE  EC05  F0AB         	call	_Console_MakeField
 32275  0130C2  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 32276  0130C6  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 32277  0130CA  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 32278  0130CE  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 32279  0130D2  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 32280  0130D6  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 32281  0130DA  C1F2  F078         	movff	_gCharSize,LCD_DrawField@pSize
 32282  0130DE  C1F3  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 32283  0130E2  C1F4  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 32284  0130E6  C1F5  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 32285  0130EA  EC74  F0B1         	call	_LCD_DrawField	;wreg free
 32286                           
 32287                           ;Console.c: 405: }
 32288  0130EE  D017               	goto	l1063
 32289  0130F0                     l1062:
 32290                           
 32291                           ;Console.c: 406: else
 32292                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 32293  0130F0  0E00               	movlw	0
 32294  0130F2  0100               	movlb	0	; () banked
 32295  0130F4  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 32296  0130F6  0E00               	movlw	0
 32297  0130F8  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 32298  0130FA  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 32299  0130FE  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 32300  013102  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 32301  013106  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 32302  01310A  C1F2  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 32303  01310E  C1F3  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 32304  013112  C1F4  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 32305  013116  C1F5  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 32306  01311A  EC21  F0B7         	call	_LCD_FillRectangle	;wreg free
 32307  01311E                     l1063:
 32308                           
 32309                           ;Console.c: 408: }
 32310                           ;Console.c: 409: lCursor.x += (5 + 1);
 32311  01311E  0E06               	movlw	6
 32312  013120  0100               	movlb	0	; () banked
 32313  013122  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 32314  013124  0E00               	movlw	0
 32315  013126  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 32316                           
 32317                           ; BSR set to: 0
 32318  013128  0100               	movlb	0	; () banked
 32319  01312A  2B8A               	incf	Console_Render@x& (0+255),f,b
 32320  01312C  D73D               	goto	l15897
 32321  01312E                     u13980:
 32322                           
 32323                           ; BSR set to: 0
 32324                           ;Console.c: 410: }
 32325                           ;Console.c: 411: lCursor.y += (7 + 1);
 32326                           
 32327                           ; BSR set to: 0
 32328  01312E  0E08               	movlw	8
 32329  013130  0100               	movlb	0	; () banked
 32330  013132  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 32331  013134  0E00               	movlw	0
 32332  013136  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 32333                           
 32334                           ; BSR set to: 0
 32335                           ;Console.c: 412: lCursor.x = 6;
 32336  013138  0E00               	movlw	0
 32337  01313A  0100               	movlb	0	; () banked
 32338  01313C  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 32339  01313E  0E06               	movlw	6
 32340  013140  6F86               	movwf	Console_Render@lCursor& (0+255),b
 32341                           
 32342                           ; BSR set to: 0
 32343  013142  0100               	movlb	0	; () banked
 32344  013144  2B8B               	incf	Console_Render@y& (0+255),f,b
 32345  013146                     l1057:
 32346                           
 32347                           ; BSR set to: 0
 32348                           
 32349                           ; BSR set to: 0
 32350  013146  0100               	movlb	0	; () banked
 32351  013148  518B               	movf	Console_Render@y& (0+255),w,b
 32352  01314A  0100               	movlb	0	; () banked
 32353  01314C  5DF9               	subwf	_lBufferY& (0+255),w,b
 32354  01314E  B0D8               	btfsc	status,0,c
 32355  013150  D71B               	goto	l1058
 32356                           
 32357                           ; BSR set to: 0
 32358                           ;Console.c: 413: }
 32359                           ;Console.c: 415: if (clearall)
 32360                           
 32361                           ; BSR set to: 0
 32362  013152  0100               	movlb	0	; () banked
 32363  013154  51FB               	movf	_clearall& (0+255),w,b
 32364  013156  B4D8               	btfsc	status,2,c
 32365  013158  0012               	return	
 32366                           
 32367                           ; BSR set to: 0
 32368                           ;Console.c: 416: {
 32369                           ;Console.c: 417: clearall = 0;
 32370  01315A  0E00               	movlw	0
 32371  01315C  0100               	movlb	0	; () banked
 32372  01315E  6FFB               	movwf	_clearall& (0+255),b
 32373                           
 32374                           ; BSR set to: 0
 32375                           ;Console.c: 418: lBufferY = temp;
 32376  013160  C085  F0F9         	movff	Console_Render@temp,_lBufferY
 32377                           
 32378                           ; BSR set to: 0
 32379  013164  0012               	return	
 32380  013166                     __end_of_Console_Render:
 32381                           	opt stack 0
 32382                           tosu	equ	0xFFF
 32383                           tosh	equ	0xFFE
 32384                           tosl	equ	0xFFD
 32385                           pclath	equ	0xFFA
 32386                           tblptru	equ	0xFF8
 32387                           tblptrh	equ	0xFF7
 32388                           tblptrl	equ	0xFF6
 32389                           tablat	equ	0xFF5
 32390                           prodh	equ	0xFF4
 32391                           prodl	equ	0xFF3
 32392                           intcon	equ	0xFF2
 32393                           indf0	equ	0xFEF
 32394                           postinc0	equ	0xFEE
 32395                           fsr0h	equ	0xFEA
 32396                           fsr0l	equ	0xFE9
 32397                           wreg	equ	0xFE8
 32398                           indf1	equ	0xFE7
 32399                           postdec1	equ	0xFE5
 32400                           fsr1h	equ	0xFE2
 32401                           fsr1l	equ	0xFE1
 32402                           indf2	equ	0xFDF
 32403                           postinc2	equ	0xFDE
 32404                           postdec2	equ	0xFDD
 32405                           plusw2	equ	0xFDB
 32406                           fsr2h	equ	0xFDA
 32407                           fsr2l	equ	0xFD9
 32408                           status	equ	0xFD8
 32409                           
 32410 ;; *************** function _LCD_FillRectangle *****************
 32411 ;; Defined at:
 32412 ;;		line 318 in file "Library/LCD.c"
 32413 ;; Parameters:    Size  Location     Type
 32414 ;;  pColour         2    9[BANK0 ] unsigned short 
 32415 ;;  pPoint          4   11[BANK0 ] struct Point
 32416 ;;  pSize           4   15[BANK0 ] struct Point
 32417 ;; Auto vars:     Size  Location     Type
 32418 ;;  j               1   22[BANK0 ] unsigned char 
 32419 ;;  i               1   21[BANK0 ] unsigned char 
 32420 ;; Return value:  Size  Location     Type
 32421 ;;                  1    wreg      void 
 32422 ;; Registers used:
 32423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 32424 ;; Tracked objects:
 32425 ;;		On entry : 0/0
 32426 ;;		On exit  : 0/0
 32427 ;;		Unchanged: 0/0
 32428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32429 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32430 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32431 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32432 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32433 ;;Total ram usage:       14 bytes
 32434 ;; Hardware stack levels used:    1
 32435 ;; Hardware stack levels required when called:   10
 32436 ;; This function calls:
 32437 ;;		_LCD_Word_Write
 32438 ;;		_Set_Addr_Window
 32439 ;; This function is called by:
 32440 ;;		_Console_Render
 32441 ;;		_Console_ClearLine
 32442 ;; This function uses a non-reentrant model
 32443 ;;
 32444                           
 32445                           	psect	text152
 32446  016E42                     __ptext152:
 32447                           	opt stack 0
 32448  016E42                     _LCD_FillRectangle:
 32449                           	opt stack 19
 32450                           
 32451                           ;LCD.c: 320: UINT8 i = 0x00;
 32452                           
 32453                           ; BSR set to: 0
 32454                           ;incstack = 0
 32455  016E42  0E00               	movlw	0
 32456  016E44  0100               	movlb	0	; () banked
 32457  016E46  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 32458                           
 32459                           ;LCD.c: 321: UINT8 j = 0x00;
 32460  016E48  0E00               	movlw	0
 32461  016E4A  0100               	movlb	0	; () banked
 32462  016E4C  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 32463                           
 32464                           ; BSR set to: 0
 32465                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 32466  016E4E  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 32467  016E52  0100               	movlb	0	; () banked
 32468  016E54  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 32469  016E56  0100               	movlb	0	; () banked
 32470  016E58  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 32471  016E5A  0100               	movlb	0	; () banked
 32472  016E5C  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 32473  016E5E  0100               	movlb	0	; () banked
 32474  016E60  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 32475  016E62  0100               	movlb	0	; () banked
 32476  016E64  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 32477  016E66  0100               	movlb	0	; () banked
 32478  016E68  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 32479  016E6A  0100               	movlb	0	; () banked
 32480  016E6C  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 32481  016E6E  0100               	movlb	0	; () banked
 32482  016E70  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 32483  016E72  0100               	movlb	0	; () banked
 32484  016E74  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 32485  016E76  0100               	movlb	0	; () banked
 32486  016E78  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 32487  016E7A  0100               	movlb	0	; () banked
 32488  016E7C  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 32489  016E7E  ECD1  F0AF         	call	_Set_Addr_Window
 32490                           
 32491                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 32492  016E82  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 32493  016E86                     l15229:
 32494  016E86  0100               	movlb	0	; () banked
 32495  016E88  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 32496  016E8A  0100               	movlb	0	; () banked
 32497  016E8C  B4D8               	btfsc	status,2,c
 32498  016E8E  0012               	return	
 32499                           
 32500                           ; BSR set to: 0
 32501                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 32502                           
 32503                           ; BSR set to: 0
 32504  016E90  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 32505  016E94                     l15233:
 32506                           
 32507                           ; BSR set to: 0
 32508  016E94  0100               	movlb	0	; () banked
 32509  016E96  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 32510  016E98  0100               	movlb	0	; () banked
 32511  016E9A  B4D8               	btfsc	status,2,c
 32512  016E9C  D009               	goto	u13140
 32513                           
 32514                           ; BSR set to: 0
 32515                           ;LCD.c: 333: LCD_Word_Write(pColour);
 32516                           
 32517                           ; BSR set to: 0
 32518                           
 32519                           ; BSR set to: 0
 32520  016E9E  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 32521  016EA2  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 32522  016EA6  EC3B  F0BF         	call	_LCD_Word_Write	;wreg free
 32523  016EAA  0100               	movlb	0	; () banked
 32524  016EAC  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 32525  016EAE  D7F2               	goto	l15233
 32526  016EB0                     u13140:
 32527                           
 32528                           ; BSR set to: 0
 32529                           
 32530                           ; BSR set to: 0
 32531  016EB0  0100               	movlb	0	; () banked
 32532  016EB2  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 32533  016EB4  D7E8               	goto	l15229
 32534  016EB6                     __end_of_LCD_FillRectangle:
 32535                           	opt stack 0
 32536                           tosu	equ	0xFFF
 32537                           tosh	equ	0xFFE
 32538                           tosl	equ	0xFFD
 32539                           pclath	equ	0xFFA
 32540                           tblptru	equ	0xFF8
 32541                           tblptrh	equ	0xFF7
 32542                           tblptrl	equ	0xFF6
 32543                           tablat	equ	0xFF5
 32544                           prodh	equ	0xFF4
 32545                           prodl	equ	0xFF3
 32546                           intcon	equ	0xFF2
 32547                           indf0	equ	0xFEF
 32548                           postinc0	equ	0xFEE
 32549                           fsr0h	equ	0xFEA
 32550                           fsr0l	equ	0xFE9
 32551                           wreg	equ	0xFE8
 32552                           indf1	equ	0xFE7
 32553                           postdec1	equ	0xFE5
 32554                           fsr1h	equ	0xFE2
 32555                           fsr1l	equ	0xFE1
 32556                           indf2	equ	0xFDF
 32557                           postinc2	equ	0xFDE
 32558                           postdec2	equ	0xFDD
 32559                           plusw2	equ	0xFDB
 32560                           fsr2h	equ	0xFDA
 32561                           fsr2l	equ	0xFD9
 32562                           status	equ	0xFD8
 32563                           
 32564 ;; *************** function _LCD_DrawField *****************
 32565 ;; Defined at:
 32566 ;;		line 393 in file "Library/LCD.c"
 32567 ;; Parameters:    Size  Location     Type
 32568 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 32569 ;;		 -> Console_MakeField@Fill(70), 
 32570 ;;  pPoint          4   20[BANK0 ] struct Point
 32571 ;;  pSize           4   24[BANK0 ] struct Point
 32572 ;; Auto vars:     Size  Location     Type
 32573 ;;  count           2   30[BANK0 ] unsigned short 
 32574 ;;  i               1   34[BANK0 ] unsigned char 
 32575 ;;  ymax            1   33[BANK0 ] unsigned char 
 32576 ;;  xmax            1   32[BANK0 ] unsigned char 
 32577 ;; Return value:  Size  Location     Type
 32578 ;;                  1    wreg      void 
 32579 ;; Registers used:
 32580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 32581 ;; Tracked objects:
 32582 ;;		On entry : 0/0
 32583 ;;		On exit  : 0/0
 32584 ;;		Unchanged: 0/0
 32585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32586 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32587 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32588 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32589 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32590 ;;Total ram usage:       17 bytes
 32591 ;; Hardware stack levels used:    1
 32592 ;; Hardware stack levels required when called:   10
 32593 ;; This function calls:
 32594 ;;		_LCD_Word_Write
 32595 ;;		_Set_Addr_Window
 32596 ;;		___wmul
 32597 ;; This function is called by:
 32598 ;;		_Console_Render
 32599 ;; This function uses a non-reentrant model
 32600 ;;
 32601                           
 32602                           	psect	text153
 32603  0162E8                     __ptext153:
 32604                           	opt stack 0
 32605  0162E8                     _LCD_DrawField:
 32606                           	opt stack 19
 32607                           
 32608                           ;LCD.c: 396: UINT8 i = 0x00;
 32609                           
 32610                           ; BSR set to: 0
 32611                           ;incstack = 0
 32612  0162E8  0E00               	movlw	0
 32613  0162EA  0100               	movlb	0	; () banked
 32614  0162EC  6F82               	movwf	LCD_DrawField@i& (0+255),b
 32615                           
 32616                           ; BSR set to: 0
 32617                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 32618  0162EE  0100               	movlb	0	; () banked
 32619  0162F0  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 32620  0162F2  0100               	movlb	0	; () banked
 32621  0162F4  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 32622  0162F6  0100               	movlb	0	; () banked
 32623  0162F8  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 32624                           
 32625                           ; BSR set to: 0
 32626                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 32627  0162FA  0100               	movlb	0	; () banked
 32628  0162FC  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 32629  0162FE  0100               	movlb	0	; () banked
 32630  016300  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 32631  016302  0100               	movlb	0	; () banked
 32632  016304  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 32633                           
 32634                           ; BSR set to: 0
 32635                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 32636  016306  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 32637  01630A  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 32638  01630E  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 32639  016312  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 32640  016316  EC55  F0BD         	call	___wmul	;wreg free
 32641  01631A  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 32642  01631E  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 32643                           
 32644                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 32645  016322  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 32646  016326  0100               	movlb	0	; () banked
 32647  016328  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 32648  01632A  0100               	movlb	0	; () banked
 32649  01632C  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 32650  01632E  0100               	movlb	0	; () banked
 32651  016330  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 32652  016332  0100               	movlb	0	; () banked
 32653  016334  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 32654  016336  0100               	movlb	0	; () banked
 32655  016338  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 32656  01633A  ECD1  F0AF         	call	_Set_Addr_Window
 32657                           
 32658                           ;LCD.c: 403: for(i = 0; i < count; i++)
 32659  01633E  0E00               	movlw	0
 32660  016340  0100               	movlb	0	; () banked
 32661  016342  6F82               	movwf	LCD_DrawField@i& (0+255),b
 32662  016344  D013               	goto	l183
 32663  016346                     
 32664                           ; BSR set to: 0
 32665                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 32666                           
 32667                           ; BSR set to: 0
 32668  016346  0100               	movlb	0	; () banked
 32669  016348  5182               	movf	LCD_DrawField@i& (0+255),w,b
 32670  01634A  0D02               	mullw	2
 32671  01634C  50F3               	movf	prodl,w,c
 32672  01634E  0100               	movlb	0	; () banked
 32673  016350  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 32674  016352  6ED9               	movwf	fsr2l,c
 32675  016354  50F4               	movf	prodh,w,c
 32676  016356  0100               	movlb	0	; () banked
 32677  016358  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 32678  01635A  6EDA               	movwf	fsr2h,c
 32679  01635C  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 32680  016360  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 32681  016364  EC3B  F0BF         	call	_LCD_Word_Write	;wreg free
 32682  016368  0100               	movlb	0	; () banked
 32683  01636A  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 32684  01636C                     l183:
 32685                           
 32686                           ; BSR set to: 0
 32687                           
 32688                           ; BSR set to: 0
 32689  01636C  0100               	movlb	0	; () banked
 32690  01636E  5182               	movf	LCD_DrawField@i& (0+255),w,b
 32691  016370  0100               	movlb	0	; () banked
 32692  016372  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 32693  016374  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 32694  016376  0100               	movlb	0	; () banked
 32695  016378  517E               	movf	LCD_DrawField@count& (0+255),w,b
 32696  01637A  0100               	movlb	0	; () banked
 32697  01637C  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 32698  01637E  0100               	movlb	0	; () banked
 32699  016380  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 32700  016382  0100               	movlb	0	; () banked
 32701  016384  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 32702  016386  B0D8               	btfsc	status,0,c
 32703  016388  0012               	return	
 32704  01638A  D7DD               	goto	l184
 32705  01638C                     __end_of_LCD_DrawField:
 32706                           	opt stack 0
 32707                           tosu	equ	0xFFF
 32708                           tosh	equ	0xFFE
 32709                           tosl	equ	0xFFD
 32710                           pclath	equ	0xFFA
 32711                           tblptru	equ	0xFF8
 32712                           tblptrh	equ	0xFF7
 32713                           tblptrl	equ	0xFF6
 32714                           tablat	equ	0xFF5
 32715                           prodh	equ	0xFF4
 32716                           prodl	equ	0xFF3
 32717                           intcon	equ	0xFF2
 32718                           indf0	equ	0xFEF
 32719                           postinc0	equ	0xFEE
 32720                           fsr0h	equ	0xFEA
 32721                           fsr0l	equ	0xFE9
 32722                           wreg	equ	0xFE8
 32723                           indf1	equ	0xFE7
 32724                           postdec1	equ	0xFE5
 32725                           fsr1h	equ	0xFE2
 32726                           fsr1l	equ	0xFE1
 32727                           indf2	equ	0xFDF
 32728                           postinc2	equ	0xFDE
 32729                           postdec2	equ	0xFDD
 32730                           plusw2	equ	0xFDB
 32731                           fsr2h	equ	0xFDA
 32732                           fsr2l	equ	0xFD9
 32733                           status	equ	0xFD8
 32734                           
 32735 ;; *************** function ___wmul *****************
 32736 ;; Defined at:
 32737 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 32738 ;; Parameters:    Size  Location     Type
 32739 ;;  multiplier      2    0[BANK0 ] unsigned int 
 32740 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 32741 ;; Auto vars:     Size  Location     Type
 32742 ;;  product         2    4[BANK0 ] unsigned int 
 32743 ;; Return value:  Size  Location     Type
 32744 ;;                  2    0[BANK0 ] unsigned int 
 32745 ;; Registers used:
 32746 ;;		wreg, status,2, status,0, prodl, prodh
 32747 ;; Tracked objects:
 32748 ;;		On entry : 0/0
 32749 ;;		On exit  : 0/0
 32750 ;;		Unchanged: 0/0
 32751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32752 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32753 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32755 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32756 ;;Total ram usage:        6 bytes
 32757 ;; Hardware stack levels used:    1
 32758 ;; Hardware stack levels required when called:    7
 32759 ;; This function calls:
 32760 ;;		Nothing
 32761 ;; This function is called by:
 32762 ;;		_LCD_DrawField
 32763 ;;		_displayPositionMode
 32764 ;;		_printf
 32765 ;; This function uses a non-reentrant model
 32766 ;;
 32767                           
 32768                           	psect	text154
 32769  017AAA                     __ptext154:
 32770                           	opt stack 0
 32771  017AAA                     ___wmul:
 32772                           	opt stack 22
 32773                           
 32774                           ; BSR set to: 0
 32775                           ;incstack = 0
 32776  017AAA  0100               	movlb	0	; () banked
 32777  017AAC  5160               	movf	___wmul@multiplier& (0+255),w,b
 32778  017AAE  0100               	movlb	0	; () banked
 32779  017AB0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 32780  017AB2  CFF3 F064          	movff	prodl,___wmul@product
 32781  017AB6  CFF4 F065          	movff	prodh,___wmul@product+1
 32782  017ABA  0100               	movlb	0	; () banked
 32783  017ABC  5160               	movf	___wmul@multiplier& (0+255),w,b
 32784  017ABE  0100               	movlb	0	; () banked
 32785  017AC0  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 32786  017AC2  50F3               	movf	prodl,w,c
 32787  017AC4  0100               	movlb	0	; () banked
 32788  017AC6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 32789  017AC8  0100               	movlb	0	; () banked
 32790  017ACA  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 32791  017ACC  0100               	movlb	0	; () banked
 32792  017ACE  0362               	mulwf	___wmul@multiplicand& (0+255),b
 32793  017AD0  50F3               	movf	prodl,w,c
 32794  017AD2  0100               	movlb	0	; () banked
 32795  017AD4  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 32796                           
 32797                           ; BSR set to: 0
 32798  017AD6  C064  F060         	movff	___wmul@product,?___wmul
 32799  017ADA  C065  F061         	movff	___wmul@product+1,?___wmul+1
 32800  017ADE  0012               	return	
 32801  017AE0                     __end_of___wmul:
 32802                           	opt stack 0
 32803                           tosu	equ	0xFFF
 32804                           tosh	equ	0xFFE
 32805                           tosl	equ	0xFFD
 32806                           pclath	equ	0xFFA
 32807                           tblptru	equ	0xFF8
 32808                           tblptrh	equ	0xFF7
 32809                           tblptrl	equ	0xFF6
 32810                           tablat	equ	0xFF5
 32811                           prodh	equ	0xFF4
 32812                           prodl	equ	0xFF3
 32813                           intcon	equ	0xFF2
 32814                           indf0	equ	0xFEF
 32815                           postinc0	equ	0xFEE
 32816                           fsr0h	equ	0xFEA
 32817                           fsr0l	equ	0xFE9
 32818                           wreg	equ	0xFE8
 32819                           indf1	equ	0xFE7
 32820                           postdec1	equ	0xFE5
 32821                           fsr1h	equ	0xFE2
 32822                           fsr1l	equ	0xFE1
 32823                           indf2	equ	0xFDF
 32824                           postinc2	equ	0xFDE
 32825                           postdec2	equ	0xFDD
 32826                           plusw2	equ	0xFDB
 32827                           fsr2h	equ	0xFDA
 32828                           fsr2l	equ	0xFD9
 32829                           status	equ	0xFD8
 32830                           
 32831 ;; *************** function _Set_Addr_Window *****************
 32832 ;; Defined at:
 32833 ;;		line 214 in file "Library/LCD.c"
 32834 ;; Parameters:    Size  Location     Type
 32835 ;;  xs              1    wreg     unsigned char 
 32836 ;;  ys              1    5[BANK0 ] unsigned char 
 32837 ;;  xe              1    6[BANK0 ] unsigned char 
 32838 ;;  ye              1    7[BANK0 ] unsigned char 
 32839 ;; Auto vars:     Size  Location     Type
 32840 ;;  xs              1    8[BANK0 ] unsigned char 
 32841 ;; Return value:  Size  Location     Type
 32842 ;;                  1    wreg      void 
 32843 ;; Registers used:
 32844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 32845 ;; Tracked objects:
 32846 ;;		On entry : 0/0
 32847 ;;		On exit  : 0/0
 32848 ;;		Unchanged: 0/0
 32849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32850 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32851 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32854 ;;Total ram usage:        4 bytes
 32855 ;; Hardware stack levels used:    1
 32856 ;; Hardware stack levels required when called:    9
 32857 ;; This function calls:
 32858 ;;		_LCD_Write
 32859 ;; This function is called by:
 32860 ;;		_LCD_Fill
 32861 ;;		_LCD_FillRectangle
 32862 ;;		_LCD_DrawField
 32863 ;;		_RAM_Address_Set
 32864 ;;		_LCD_DrawPixel
 32865 ;; This function uses a non-reentrant model
 32866 ;;
 32867                           
 32868                           	psect	text155
 32869  015FA2                     __ptext155:
 32870                           	opt stack 0
 32871  015FA2                     _Set_Addr_Window:
 32872                           	opt stack 18
 32873                           
 32874                           ; BSR set to: 0
 32875                           ;incstack = 0
 32876                           ;Set_Addr_Window@xs stored from wreg
 32877  015FA2  0100               	movlb	0	; () banked
 32878  015FA4  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 32879                           
 32880                           ;LCD.c: 216: ys+=2;
 32881  015FA6  0E02               	movlw	2
 32882  015FA8  0100               	movlb	0	; () banked
 32883  015FAA  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 32884                           
 32885                           ;LCD.c: 217: ye+=2;
 32886  015FAC  0E02               	movlw	2
 32887  015FAE  0100               	movlb	0	; () banked
 32888  015FB0  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 32889                           
 32890                           ;LCD.c: 218: xs+=3;
 32891  015FB2  0E03               	movlw	3
 32892  015FB4  0100               	movlb	0	; () banked
 32893  015FB6  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 32894                           
 32895                           ;LCD.c: 219: xe+=3;
 32896  015FB8  0E03               	movlw	3
 32897  015FBA  0100               	movlb	0	; () banked
 32898  015FBC  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 32899                           
 32900                           ; BSR set to: 0
 32901                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 32902  015FBE  0E00               	movlw	0
 32903  015FC0  0100               	movlb	0	; () banked
 32904  015FC2  6F63               	movwf	LCD_Write@mode& (0+255),b
 32905  015FC4  0E2A               	movlw	42
 32906  015FC6  ECC0  F0BE         	call	_LCD_Write
 32907                           
 32908                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 32909  015FCA  0E01               	movlw	1
 32910  015FCC  0100               	movlb	0	; () banked
 32911  015FCE  6F63               	movwf	LCD_Write@mode& (0+255),b
 32912  015FD0  0E00               	movlw	0
 32913  015FD2  ECC0  F0BE         	call	_LCD_Write
 32914                           
 32915                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 32916  015FD6  0E01               	movlw	1
 32917  015FD8  0100               	movlb	0	; () banked
 32918  015FDA  6F63               	movwf	LCD_Write@mode& (0+255),b
 32919  015FDC  0100               	movlb	0	; () banked
 32920  015FDE  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 32921  015FE0  ECC0  F0BE         	call	_LCD_Write
 32922                           
 32923                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 32924  015FE4  0E01               	movlw	1
 32925  015FE6  0100               	movlb	0	; () banked
 32926  015FE8  6F63               	movwf	LCD_Write@mode& (0+255),b
 32927  015FEA  0E00               	movlw	0
 32928  015FEC  ECC0  F0BE         	call	_LCD_Write
 32929                           
 32930                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 32931  015FF0  0E01               	movlw	1
 32932  015FF2  0100               	movlb	0	; () banked
 32933  015FF4  6F63               	movwf	LCD_Write@mode& (0+255),b
 32934  015FF6  0100               	movlb	0	; () banked
 32935  015FF8  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 32936  015FFA  ECC0  F0BE         	call	_LCD_Write
 32937                           
 32938                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 32939  015FFE  0E00               	movlw	0
 32940  016000  0100               	movlb	0	; () banked
 32941  016002  6F63               	movwf	LCD_Write@mode& (0+255),b
 32942  016004  0E2B               	movlw	43
 32943  016006  ECC0  F0BE         	call	_LCD_Write
 32944                           
 32945                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 32946  01600A  0E01               	movlw	1
 32947  01600C  0100               	movlb	0	; () banked
 32948  01600E  6F63               	movwf	LCD_Write@mode& (0+255),b
 32949  016010  0E00               	movlw	0
 32950  016012  ECC0  F0BE         	call	_LCD_Write
 32951                           
 32952                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 32953  016016  0E01               	movlw	1
 32954  016018  0100               	movlb	0	; () banked
 32955  01601A  6F63               	movwf	LCD_Write@mode& (0+255),b
 32956  01601C  0100               	movlb	0	; () banked
 32957  01601E  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 32958  016020  ECC0  F0BE         	call	_LCD_Write
 32959                           
 32960                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 32961  016024  0E01               	movlw	1
 32962  016026  0100               	movlb	0	; () banked
 32963  016028  6F63               	movwf	LCD_Write@mode& (0+255),b
 32964  01602A  0E00               	movlw	0
 32965  01602C  ECC0  F0BE         	call	_LCD_Write
 32966                           
 32967                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 32968  016030  0E01               	movlw	1
 32969  016032  0100               	movlb	0	; () banked
 32970  016034  6F63               	movwf	LCD_Write@mode& (0+255),b
 32971  016036  0100               	movlb	0	; () banked
 32972  016038  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 32973  01603A  ECC0  F0BE         	call	_LCD_Write
 32974                           
 32975                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 32976  01603E  0E00               	movlw	0
 32977  016040  0100               	movlb	0	; () banked
 32978  016042  6F63               	movwf	LCD_Write@mode& (0+255),b
 32979  016044  0E2C               	movlw	44
 32980  016046  ECC0  F0BE         	call	_LCD_Write
 32981  01604A  0012               	return		;funcret
 32982  01604C                     __end_of_Set_Addr_Window:
 32983                           	opt stack 0
 32984                           tosu	equ	0xFFF
 32985                           tosh	equ	0xFFE
 32986                           tosl	equ	0xFFD
 32987                           pclath	equ	0xFFA
 32988                           tblptru	equ	0xFF8
 32989                           tblptrh	equ	0xFF7
 32990                           tblptrl	equ	0xFF6
 32991                           tablat	equ	0xFF5
 32992                           prodh	equ	0xFF4
 32993                           prodl	equ	0xFF3
 32994                           intcon	equ	0xFF2
 32995                           indf0	equ	0xFEF
 32996                           postinc0	equ	0xFEE
 32997                           fsr0h	equ	0xFEA
 32998                           fsr0l	equ	0xFE9
 32999                           wreg	equ	0xFE8
 33000                           indf1	equ	0xFE7
 33001                           postdec1	equ	0xFE5
 33002                           fsr1h	equ	0xFE2
 33003                           fsr1l	equ	0xFE1
 33004                           indf2	equ	0xFDF
 33005                           postinc2	equ	0xFDE
 33006                           postdec2	equ	0xFDD
 33007                           plusw2	equ	0xFDB
 33008                           fsr2h	equ	0xFDA
 33009                           fsr2l	equ	0xFD9
 33010                           status	equ	0xFD8
 33011                           
 33012 ;; *************** function _LCD_Word_Write *****************
 33013 ;; Defined at:
 33014 ;;		line 198 in file "Library/LCD.c"
 33015 ;; Parameters:    Size  Location     Type
 33016 ;;  value           2    5[BANK0 ] unsigned short 
 33017 ;; Auto vars:     Size  Location     Type
 33018 ;;		None
 33019 ;; Return value:  Size  Location     Type
 33020 ;;                  1    wreg      void 
 33021 ;; Registers used:
 33022 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 33023 ;; Tracked objects:
 33024 ;;		On entry : 0/0
 33025 ;;		On exit  : 0/0
 33026 ;;		Unchanged: 0/0
 33027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33028 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33031 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33032 ;;Total ram usage:        2 bytes
 33033 ;; Hardware stack levels used:    1
 33034 ;; Hardware stack levels required when called:    9
 33035 ;; This function calls:
 33036 ;;		_LCD_Write
 33037 ;; This function is called by:
 33038 ;;		_LCD_Fill
 33039 ;;		_LCD_FillRectangle
 33040 ;;		_LCD_DrawField
 33041 ;;		_LCD_DrawPixel
 33042 ;; This function uses a non-reentrant model
 33043 ;;
 33044                           
 33045                           	psect	text156
 33046  017E76                     __ptext156:
 33047                           	opt stack 0
 33048  017E76                     _LCD_Word_Write:
 33049                           	opt stack 18
 33050                           
 33051                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 33052                           
 33053                           ;incstack = 0
 33054  017E76  0E01               	movlw	1
 33055  017E78  0100               	movlb	0	; () banked
 33056  017E7A  6F63               	movwf	LCD_Write@mode& (0+255),b
 33057  017E7C  0100               	movlb	0	; () banked
 33058  017E7E  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 33059  017E80  ECC0  F0BE         	call	_LCD_Write
 33060                           
 33061                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 33062  017E84  0E01               	movlw	1
 33063  017E86  0100               	movlb	0	; () banked
 33064  017E88  6F63               	movwf	LCD_Write@mode& (0+255),b
 33065  017E8A  0100               	movlb	0	; () banked
 33066  017E8C  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 33067  017E8E  ECC0  F0BE         	call	_LCD_Write
 33068  017E92  0012               	return		;funcret
 33069  017E94                     __end_of_LCD_Word_Write:
 33070                           	opt stack 0
 33071                           tosu	equ	0xFFF
 33072                           tosh	equ	0xFFE
 33073                           tosl	equ	0xFFD
 33074                           pclath	equ	0xFFA
 33075                           tblptru	equ	0xFF8
 33076                           tblptrh	equ	0xFF7
 33077                           tblptrl	equ	0xFF6
 33078                           tablat	equ	0xFF5
 33079                           prodh	equ	0xFF4
 33080                           prodl	equ	0xFF3
 33081                           intcon	equ	0xFF2
 33082                           indf0	equ	0xFEF
 33083                           postinc0	equ	0xFEE
 33084                           fsr0h	equ	0xFEA
 33085                           fsr0l	equ	0xFE9
 33086                           wreg	equ	0xFE8
 33087                           indf1	equ	0xFE7
 33088                           postdec1	equ	0xFE5
 33089                           fsr1h	equ	0xFE2
 33090                           fsr1l	equ	0xFE1
 33091                           indf2	equ	0xFDF
 33092                           postinc2	equ	0xFDE
 33093                           postdec2	equ	0xFDD
 33094                           plusw2	equ	0xFDB
 33095                           fsr2h	equ	0xFDA
 33096                           fsr2l	equ	0xFD9
 33097                           status	equ	0xFD8
 33098                           
 33099 ;; *************** function _LCD_Write *****************
 33100 ;; Defined at:
 33101 ;;		line 67 in file "Library/LCD.c"
 33102 ;; Parameters:    Size  Location     Type
 33103 ;;  value           1    wreg     unsigned char 
 33104 ;;  mode            1    3[BANK0 ] enum E6761
 33105 ;; Auto vars:     Size  Location     Type
 33106 ;;  value           1    4[BANK0 ] unsigned char 
 33107 ;; Return value:  Size  Location     Type
 33108 ;;                  1    wreg      void 
 33109 ;; Registers used:
 33110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 33111 ;; Tracked objects:
 33112 ;;		On entry : 0/0
 33113 ;;		On exit  : 0/0
 33114 ;;		Unchanged: 0/0
 33115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33116 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33117 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33119 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33120 ;;Total ram usage:        2 bytes
 33121 ;; Hardware stack levels used:    1
 33122 ;; Hardware stack levels required when called:    8
 33123 ;; This function calls:
 33124 ;;		_Mode_Set
 33125 ;;		_SPI_Send
 33126 ;; This function is called by:
 33127 ;;		_LCD_Init
 33128 ;;		_LCD_Word_Write
 33129 ;;		_Set_Addr_Window
 33130 ;;		_Set_Rotation
 33131 ;;		_LCD_WriteCMD
 33132 ;;		_LCD_WriteData
 33133 ;;		_LCD_Data_Write
 33134 ;;		_LCD_Data_Write_4k
 33135 ;;		_Invert_Display
 33136 ;; This function uses a non-reentrant model
 33137 ;;
 33138                           
 33139                           	psect	text157
 33140  017D80                     __ptext157:
 33141                           	opt stack 0
 33142  017D80                     _LCD_Write:
 33143                           	opt stack 19
 33144                           
 33145                           ;incstack = 0
 33146                           ;LCD_Write@value stored from wreg
 33147  017D80  0100               	movlb	0	; () banked
 33148  017D82  6F64               	movwf	LCD_Write@value& (0+255),b
 33149                           
 33150                           ;LCD.c: 89: Mode_Set(mode);
 33151  017D84  0100               	movlb	0	; () banked
 33152  017D86  5163               	movf	LCD_Write@mode& (0+255),w,b
 33153  017D88  ECDA  F0BF         	call	_Mode_Set
 33154                           
 33155                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 33156  017D8C  0E6C               	movlw	low _SPI2
 33157  017D8E  0100               	movlb	0	; () banked
 33158  017D90  6F60               	movwf	SPI_Send@pInput& (0+255),b
 33159  017D92  0E01               	movlw	high _SPI2
 33160  017D94  0100               	movlb	0	; () banked
 33161  017D96  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 33162  017D98  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 33163  017D9C  ECC9  F0B7         	call	_SPI_Send	;wreg free
 33164  017DA0  0012               	return		;funcret
 33165  017DA2                     __end_of_LCD_Write:
 33166                           	opt stack 0
 33167                           tosu	equ	0xFFF
 33168                           tosh	equ	0xFFE
 33169                           tosl	equ	0xFFD
 33170                           pclath	equ	0xFFA
 33171                           tblptru	equ	0xFF8
 33172                           tblptrh	equ	0xFF7
 33173                           tblptrl	equ	0xFF6
 33174                           tablat	equ	0xFF5
 33175                           prodh	equ	0xFF4
 33176                           prodl	equ	0xFF3
 33177                           intcon	equ	0xFF2
 33178                           indf0	equ	0xFEF
 33179                           postinc0	equ	0xFEE
 33180                           fsr0h	equ	0xFEA
 33181                           fsr0l	equ	0xFE9
 33182                           wreg	equ	0xFE8
 33183                           indf1	equ	0xFE7
 33184                           postdec1	equ	0xFE5
 33185                           fsr1h	equ	0xFE2
 33186                           fsr1l	equ	0xFE1
 33187                           indf2	equ	0xFDF
 33188                           postinc2	equ	0xFDE
 33189                           postdec2	equ	0xFDD
 33190                           plusw2	equ	0xFDB
 33191                           fsr2h	equ	0xFDA
 33192                           fsr2l	equ	0xFD9
 33193                           status	equ	0xFD8
 33194                           
 33195 ;; *************** function _SPI_Send *****************
 33196 ;; Defined at:
 33197 ;;		line 226 in file "Library/SPI.c"
 33198 ;; Parameters:    Size  Location     Type
 33199 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 33200 ;;		 -> SPI1(11), SPI2(11), 
 33201 ;;  pData           1    2[BANK0 ] unsigned char 
 33202 ;; Auto vars:     Size  Location     Type
 33203 ;;		None
 33204 ;; Return value:  Size  Location     Type
 33205 ;;                  1    wreg      unsigned char 
 33206 ;; Registers used:
 33207 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 33208 ;; Tracked objects:
 33209 ;;		On entry : 0/0
 33210 ;;		On exit  : 0/0
 33211 ;;		Unchanged: 0/0
 33212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33213 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33217 ;;Total ram usage:        3 bytes
 33218 ;; Hardware stack levels used:    1
 33219 ;; Hardware stack levels required when called:    7
 33220 ;; This function calls:
 33221 ;;		Nothing
 33222 ;; This function is called by:
 33223 ;;		_LCD_Write
 33224 ;;		_OutSeg
 33225 ;; This function uses a non-reentrant model
 33226 ;;
 33227                           
 33228                           	psect	text158
 33229  016F92                     __ptext158:
 33230                           	opt stack 0
 33231  016F92                     _SPI_Send:
 33232                           	opt stack 19
 33233                           
 33234                           ;SPI.c: 253: switch (pInput->mChannel)
 33235                           
 33236                           ;incstack = 0
 33237  016F92  D026               	goto	l678
 33238  016F94                     
 33239                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 33240  016F94  C1B7  FFD9         	movff	_PortC+4,fsr2l
 33241  016F98  C1B8  FFDA         	movff	_PortC+5,fsr2h
 33242  016F9C  0101               	movlb	1	; () banked
 33243  016F9E  94DF               	bcf	indf2,2,c
 33244                           
 33245                           ; BSR set to: 1
 33246                           ;SPI.c: 257: SSP1BUF = pData;
 33247  016FA0  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 33248  016FA4                     
 33249                           ; BSR set to: 1
 33250  016FA4  A0C7               	btfss	4039,0,c	;volatile
 33251  016FA6  D7FE               	goto	l681
 33252                           
 33253                           ;SPI.c: 259: pData = SSP1BUF;
 33254  016FA8  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 33255                           
 33256                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 33257  016FAC  C1B7  FFD9         	movff	_PortC+4,fsr2l
 33258  016FB0  C1B8  FFDA         	movff	_PortC+5,fsr2h
 33259  016FB4  0101               	movlb	1	; () banked
 33260  016FB6  84DF               	bsf	indf2,2,c
 33261                           
 33262                           ; BSR set to: 1
 33263                           ;SPI.c: 261: return pData;
 33264                           ;	Return value of _SPI_Send is never used
 33265  016FB8  0012               	return	
 33266  016FBA                     
 33267                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 33268                           
 33269                           ; BSR set to: 1
 33270  016FBA  C1A3  FFD9         	movff	_PortD+4,fsr2l
 33271  016FBE  C1A4  FFDA         	movff	_PortD+5,fsr2h
 33272  016FC2  0101               	movlb	1	; () banked
 33273  016FC4  9EDF               	bcf	indf2,7,c
 33274                           
 33275                           ; BSR set to: 1
 33276                           ;SPI.c: 264: SSP2BUF = pData;
 33277  016FC6  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 33278  016FCA                     
 33279                           ; BSR set to: 1
 33280  016FCA  A06D               	btfss	3949,0,c	;volatile
 33281  016FCC  D7FE               	goto	l686
 33282                           
 33283                           ;SPI.c: 266: pData = SSP2BUF;
 33284  016FCE  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 33285                           
 33286                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 33287  016FD2  C1A3  FFD9         	movff	_PortD+4,fsr2l
 33288  016FD6  C1A4  FFDA         	movff	_PortD+5,fsr2h
 33289  016FDA  0101               	movlb	1	; () banked
 33290  016FDC  8EDF               	bsf	indf2,7,c
 33291                           
 33292                           ; BSR set to: 1
 33293                           ;SPI.c: 269: };
 33294                           
 33295                           ; BSR set to: 1
 33296                           ;SPI.c: 268: return pData;
 33297                           ;	Return value of _SPI_Send is never used
 33298  016FDE  0012               	return	
 33299  016FE0                     l678:
 33300                           
 33301                           ; BSR set to: 1
 33302  016FE0  0100               	movlb	0	; () banked
 33303  016FE2  EE20 F002          	lfsr	2,2
 33304  016FE6  5160               	movf	SPI_Send@pInput& (0+255),w,b
 33305  016FE8  26D9               	addwf	fsr2l,f,c
 33306  016FEA  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 33307  016FEC  22DA               	addwfc	fsr2h,f,c
 33308  016FEE  50DF               	movf	indf2,w,c
 33309                           
 33310                           ; Switch size 1, requested type "space"
 33311                           ; Number of cases is 2, Range of values is 0 to 1
 33312                           ; switch strategies available:
 33313                           ; Name         Instructions Cycles
 33314                           ; simple_byte            7     4 (average)
 33315                           ;	Chosen strategy is simple_byte
 33316  016FF0  0A00               	xorlw	0	; case 0
 33317  016FF2  B4D8               	btfsc	status,2,c
 33318  016FF4  D7CF               	goto	l679
 33319  016FF6  0A01               	xorlw	1	; case 1
 33320  016FF8  A4D8               	btfss	status,2,c
 33321  016FFA  0012               	return	
 33322  016FFC  D7DE               	goto	l684
 33323  016FFE                     __end_of_SPI_Send:
 33324                           	opt stack 0
 33325                           tosu	equ	0xFFF
 33326                           tosh	equ	0xFFE
 33327                           tosl	equ	0xFFD
 33328                           pclath	equ	0xFFA
 33329                           tblptru	equ	0xFF8
 33330                           tblptrh	equ	0xFF7
 33331                           tblptrl	equ	0xFF6
 33332                           tablat	equ	0xFF5
 33333                           prodh	equ	0xFF4
 33334                           prodl	equ	0xFF3
 33335                           intcon	equ	0xFF2
 33336                           indf0	equ	0xFEF
 33337                           postinc0	equ	0xFEE
 33338                           fsr0h	equ	0xFEA
 33339                           fsr0l	equ	0xFE9
 33340                           wreg	equ	0xFE8
 33341                           indf1	equ	0xFE7
 33342                           postdec1	equ	0xFE5
 33343                           fsr1h	equ	0xFE2
 33344                           fsr1l	equ	0xFE1
 33345                           indf2	equ	0xFDF
 33346                           postinc2	equ	0xFDE
 33347                           postdec2	equ	0xFDD
 33348                           plusw2	equ	0xFDB
 33349                           fsr2h	equ	0xFDA
 33350                           fsr2l	equ	0xFD9
 33351                           status	equ	0xFD8
 33352                           
 33353 ;; *************** function _Mode_Set *****************
 33354 ;; Defined at:
 33355 ;;		line 40 in file "Library/LCD.c"
 33356 ;; Parameters:    Size  Location     Type
 33357 ;;  pMode           1    wreg     enum E6761
 33358 ;; Auto vars:     Size  Location     Type
 33359 ;;  pMode           1    0[BANK0 ] enum E6761
 33360 ;; Return value:  Size  Location     Type
 33361 ;;                  1    wreg      void 
 33362 ;; Registers used:
 33363 ;;		wreg
 33364 ;; Tracked objects:
 33365 ;;		On entry : 0/0
 33366 ;;		On exit  : 0/0
 33367 ;;		Unchanged: 0/0
 33368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33373 ;;Total ram usage:        1 bytes
 33374 ;; Hardware stack levels used:    1
 33375 ;; Hardware stack levels required when called:    7
 33376 ;; This function calls:
 33377 ;;		Nothing
 33378 ;; This function is called by:
 33379 ;;		_LCD_Write
 33380 ;; This function uses a non-reentrant model
 33381 ;;
 33382                           
 33383                           	psect	text159
 33384  017FB4                     __ptext159:
 33385                           	opt stack 0
 33386  017FB4                     _Mode_Set:
 33387                           	opt stack 19
 33388                           
 33389                           ;incstack = 0
 33390                           ;Mode_Set@pMode stored from wreg
 33391  017FB4  0100               	movlb	0	; () banked
 33392  017FB6  6F60               	movwf	Mode_Set@pMode& (0+255),b
 33393                           
 33394                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 33395  017FB8  0100               	movlb	0	; () banked
 33396  017FBA  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 33397  017FBC  D002               	bra	u10445
 33398  017FBE  9E85               	bcf	3973,7,c	;volatile
 33399  017FC0  D001               	bra	u10446
 33400  017FC2                     u10445:
 33401  017FC2  8E85               	bsf	3973,7,c	;volatile
 33402  017FC4                     u10446:
 33403  017FC4  0012               	return		;funcret
 33404  017FC6                     __end_of_Mode_Set:
 33405                           	opt stack 0
 33406                           tosu	equ	0xFFF
 33407                           tosh	equ	0xFFE
 33408                           tosl	equ	0xFFD
 33409                           pclath	equ	0xFFA
 33410                           tblptru	equ	0xFF8
 33411                           tblptrh	equ	0xFF7
 33412                           tblptrl	equ	0xFF6
 33413                           tablat	equ	0xFF5
 33414                           prodh	equ	0xFF4
 33415                           prodl	equ	0xFF3
 33416                           intcon	equ	0xFF2
 33417                           indf0	equ	0xFEF
 33418                           postinc0	equ	0xFEE
 33419                           fsr0h	equ	0xFEA
 33420                           fsr0l	equ	0xFE9
 33421                           wreg	equ	0xFE8
 33422                           indf1	equ	0xFE7
 33423                           postdec1	equ	0xFE5
 33424                           fsr1h	equ	0xFE2
 33425                           fsr1l	equ	0xFE1
 33426                           indf2	equ	0xFDF
 33427                           postinc2	equ	0xFDE
 33428                           postdec2	equ	0xFDD
 33429                           plusw2	equ	0xFDB
 33430                           fsr2h	equ	0xFDA
 33431                           fsr2l	equ	0xFD9
 33432                           status	equ	0xFD8
 33433                           
 33434 ;; *************** function _Console_MakeField *****************
 33435 ;; Defined at:
 33436 ;;		line 435 in file "Library/Console.c"
 33437 ;; Parameters:    Size  Location     Type
 33438 ;;  pInput          1    wreg     unsigned char 
 33439 ;; Auto vars:     Size  Location     Type
 33440 ;;  pInput          1   11[BANK0 ] unsigned char 
 33441 ;;  y               1   17[BANK0 ] unsigned char 
 33442 ;;  x               1   16[BANK0 ] unsigned char 
 33443 ;;  Column          2   12[BANK0 ] PTR struct Byte
 33444 ;;		 -> Font5x7(480), 
 33445 ;;  Index           2    9[BANK0 ] unsigned short 
 33446 ;; Return value:  Size  Location     Type
 33447 ;;                  2    5[BANK0 ] PTR unsigned short 
 33448 ;; Registers used:
 33449 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33450 ;; Tracked objects:
 33451 ;;		On entry : 0/0
 33452 ;;		On exit  : 0/0
 33453 ;;		Unchanged: 0/0
 33454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33455 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33456 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33457 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33458 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33459 ;;Total ram usage:       13 bytes
 33460 ;; Hardware stack levels used:    1
 33461 ;; Hardware stack levels required when called:    8
 33462 ;; This function calls:
 33463 ;;		_Byte_GetBit
 33464 ;; This function is called by:
 33465 ;;		_Console_Render
 33466 ;; This function uses a non-reentrant model
 33467 ;;
 33468                           
 33469                           	psect	text160
 33470  01560A                     __ptext160:
 33471                           	opt stack 0
 33472  01560A                     _Console_MakeField:
 33473                           	opt stack 21
 33474                           
 33475                           ;incstack = 0
 33476                           ;Console_MakeField@pInput stored from wreg
 33477  01560A  0100               	movlb	0	; () banked
 33478  01560C  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 33479                           
 33480                           ;Console.c: 437: static Colour Fill[7][5];
 33481                           ;Console.c: 438: pInput -= 32;
 33482  01560E  0E20               	movlw	32
 33483  015610  0100               	movlb	0	; () banked
 33484  015612  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 33485                           
 33486                           ; BSR set to: 0
 33487                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 33488  015614  0100               	movlb	0	; () banked
 33489  015616  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 33490  015618  0D05               	mullw	5
 33491  01561A  CFF3 F069          	movff	prodl,Console_MakeField@Index
 33492  01561E  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 33493                           
 33494                           ; BSR set to: 0
 33495                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 33496  015622  0ECF               	movlw	low _Font5x7
 33497  015624  0100               	movlb	0	; () banked
 33498  015626  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 33499  015628  0100               	movlb	0	; () banked
 33500  01562A  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 33501  01562C  0EFC               	movlw	high _Font5x7
 33502  01562E  0100               	movlb	0	; () banked
 33503  015630  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 33504  015632  0100               	movlb	0	; () banked
 33505  015634  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 33506                           
 33507                           ; BSR set to: 0
 33508                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 33509  015636  0E00               	movlw	0
 33510  015638  0100               	movlb	0	; () banked
 33511  01563A  6F70               	movwf	Console_MakeField@x& (0+255),b
 33512  01563C                     l15299:
 33513                           
 33514                           ; BSR set to: 0
 33515  01563C  0E04               	movlw	4
 33516  01563E  0100               	movlb	0	; () banked
 33517  015640  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 33518  015642  D001               	goto	l1077
 33519  015644  D043               	goto	u13250
 33520  015646                     l1077:
 33521                           
 33522                           ; BSR set to: 0
 33523                           ;Console.c: 444: {
 33524                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 33525                           
 33526                           ; BSR set to: 0
 33527  015646  0E00               	movlw	0
 33528  015648  0100               	movlb	0	; () banked
 33529  01564A  6F71               	movwf	Console_MakeField@y& (0+255),b
 33530  01564C                     l15305:
 33531                           
 33532                           ; BSR set to: 0
 33533  01564C  0E06               	movlw	6
 33534  01564E  0100               	movlb	0	; () banked
 33535  015650  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 33536  015652  D001               	goto	l1079
 33537  015654  D035               	goto	u13240
 33538  015656                     l1079:
 33539                           
 33540                           ; BSR set to: 0
 33541                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 33542                           
 33543                           ; BSR set to: 0
 33544  015656  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 33545  01565A  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 33546  01565E  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 33547  015662  EC8B  F0BD         	call	_Byte_GetBit	;wreg free
 33548  015666  0900               	iorlw	0
 33549  015668  A4D8               	btfss	status,2,c
 33550  01566A  D005               	goto	l1082
 33551  01566C  C0EE  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 33552  015670  C0EF  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 33553  015674  D004               	goto	l1084
 33554  015676                     l1082:
 33555  015676  C0FC  F06E         	movff	_gForecolour,_Console_MakeField$10974
 33556  01567A  C0FD  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 33557  01567E                     l1084:
 33558  01567E  0100               	movlb	0	; () banked
 33559  015680  5171               	movf	Console_MakeField@y& (0+255),w,b
 33560  015682  0D0A               	mullw	10
 33561  015684  0E1E               	movlw	low Console_MakeField@Fill
 33562  015686  0100               	movlb	0	; () banked
 33563  015688  6F67               	movwf	??_Console_MakeField& (0+255),b
 33564  01568A  0E02               	movlw	high Console_MakeField@Fill
 33565  01568C  0100               	movlb	0	; () banked
 33566  01568E  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 33567  015690  50F3               	movf	prodl,w,c
 33568  015692  0100               	movlb	0	; () banked
 33569  015694  2767               	addwf	??_Console_MakeField& (0+255),f,b
 33570  015696  50F4               	movf	prodh,w,c
 33571  015698  0100               	movlb	0	; () banked
 33572  01569A  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 33573  01569C  0100               	movlb	0	; () banked
 33574  01569E  5170               	movf	Console_MakeField@x& (0+255),w,b
 33575  0156A0  0D02               	mullw	2
 33576  0156A2  50F3               	movf	prodl,w,c
 33577  0156A4  0100               	movlb	0	; () banked
 33578  0156A6  2567               	addwf	??_Console_MakeField& (0+255),w,b
 33579  0156A8  6ED9               	movwf	fsr2l,c
 33580  0156AA  50F4               	movf	prodh,w,c
 33581  0156AC  0100               	movlb	0	; () banked
 33582  0156AE  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 33583  0156B0  6EDA               	movwf	fsr2h,c
 33584  0156B2  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 33585  0156B6  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 33586                           
 33587                           ; BSR set to: 0
 33588  0156BA  0100               	movlb	0	; () banked
 33589  0156BC  2B71               	incf	Console_MakeField@y& (0+255),f,b
 33590  0156BE  D7C6               	goto	l15305
 33591  0156C0                     u13240:
 33592                           
 33593                           ; BSR set to: 0
 33594                           ;Console.c: 447: Column += 1;
 33595                           
 33596                           ; BSR set to: 0
 33597  0156C0  0100               	movlb	0	; () banked
 33598  0156C2  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 33599  0156C4  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 33600  0156C6  0100               	movlb	0	; () banked
 33601  0156C8  2B70               	incf	Console_MakeField@x& (0+255),f,b
 33602  0156CA  D7B8               	goto	l15299
 33603  0156CC                     u13250:
 33604                           
 33605                           ; BSR set to: 0
 33606                           ;Console.c: 448: }
 33607                           ;Console.c: 449: return (ColourPtr)Fill;
 33608                           
 33609                           ; BSR set to: 0
 33610  0156CC  0E1E               	movlw	low Console_MakeField@Fill
 33611  0156CE  0100               	movlb	0	; () banked
 33612  0156D0  6F65               	movwf	?_Console_MakeField& (0+255),b
 33613  0156D2  0E02               	movlw	high Console_MakeField@Fill
 33614  0156D4  0100               	movlb	0	; () banked
 33615  0156D6  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 33616  0156D8  0012               	return	
 33617  0156DA                     __end_of_Console_MakeField:
 33618                           	opt stack 0
 33619                           tosu	equ	0xFFF
 33620                           tosh	equ	0xFFE
 33621                           tosl	equ	0xFFD
 33622                           pclath	equ	0xFFA
 33623                           tblptru	equ	0xFF8
 33624                           tblptrh	equ	0xFF7
 33625                           tblptrl	equ	0xFF6
 33626                           tablat	equ	0xFF5
 33627                           prodh	equ	0xFF4
 33628                           prodl	equ	0xFF3
 33629                           intcon	equ	0xFF2
 33630                           indf0	equ	0xFEF
 33631                           postinc0	equ	0xFEE
 33632                           fsr0h	equ	0xFEA
 33633                           fsr0l	equ	0xFE9
 33634                           wreg	equ	0xFE8
 33635                           indf1	equ	0xFE7
 33636                           postdec1	equ	0xFE5
 33637                           fsr1h	equ	0xFE2
 33638                           fsr1l	equ	0xFE1
 33639                           indf2	equ	0xFDF
 33640                           postinc2	equ	0xFDE
 33641                           postdec2	equ	0xFDD
 33642                           plusw2	equ	0xFDB
 33643                           fsr2h	equ	0xFDA
 33644                           fsr2l	equ	0xFD9
 33645                           status	equ	0xFD8
 33646                           
 33647 ;; *************** function _Byte_GetBit *****************
 33648 ;; Defined at:
 33649 ;;		line 38 in file "Library/Types.c"
 33650 ;; Parameters:    Size  Location     Type
 33651 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 33652 ;;		 -> Font5x7(480), 
 33653 ;;  pBit            1    2[BANK0 ] unsigned char 
 33654 ;; Auto vars:     Size  Location     Type
 33655 ;;  Output          1    4[BANK0 ] unsigned char 
 33656 ;; Return value:  Size  Location     Type
 33657 ;;                  1    wreg      unsigned char 
 33658 ;; Registers used:
 33659 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 33660 ;; Tracked objects:
 33661 ;;		On entry : 0/0
 33662 ;;		On exit  : 0/0
 33663 ;;		Unchanged: 0/0
 33664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33665 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33668 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33669 ;;Total ram usage:        5 bytes
 33670 ;; Hardware stack levels used:    1
 33671 ;; Hardware stack levels required when called:    7
 33672 ;; This function calls:
 33673 ;;		Nothing
 33674 ;; This function is called by:
 33675 ;;		_Console_MakeField
 33676 ;;		_Word_GetBit
 33677 ;; This function uses a non-reentrant model
 33678 ;;
 33679                           
 33680                           	psect	text161
 33681  017B16                     __ptext161:
 33682                           	opt stack 0
 33683  017B16                     _Byte_GetBit:
 33684                           	opt stack 21
 33685                           
 33686                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 33687                           
 33688                           ; BSR set to: 0
 33689                           ;incstack = 0
 33690  017B16  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 33691  017B1A  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 33692  017B1E                     	if	0	;tblptru may be non-zero
 33693  017B1E                     	endif
 33694  017B1E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 33695  017B1E  0E00               	movlw	low (__mediumconst shr (0+16))
 33696  017B20  6EF8               	movwf	tblptru,c
 33697  017B22                     	endif
 33698  017B22  0008               	tblrd		*
 33699  017B24  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 33700                           
 33701                           ;Types.c: 42: Output >>= pBit;
 33702  017B28  0100               	movlb	0	; () banked
 33703  017B2A  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 33704  017B2C  0100               	movlb	0	; () banked
 33705  017B2E  6F63               	movwf	??_Byte_GetBit& (0+255),b
 33706  017B30  D003               	goto	u12550
 33707  017B32                     u12555:
 33708  017B32  0100               	movlb	0	; () banked
 33709  017B34  90D8               	bcf	status,0,c
 33710  017B36  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 33711  017B38                     u12550:
 33712  017B38  0100               	movlb	0	; () banked
 33713  017B3A  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 33714  017B3C  D7FA               	goto	u12555
 33715                           
 33716                           ;Types.c: 43: Output &= 1;
 33717  017B3E  0E01               	movlw	1
 33718  017B40  0100               	movlb	0	; () banked
 33719  017B42  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 33720                           
 33721                           ; BSR set to: 0
 33722                           ;Types.c: 44: return Output;
 33723  017B44  0100               	movlb	0	; () banked
 33724  017B46  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 33725  017B48  0012               	return	
 33726  017B4A                     __end_of_Byte_GetBit:
 33727                           	opt stack 0
 33728                           tosu	equ	0xFFF
 33729                           tosh	equ	0xFFE
 33730                           tosl	equ	0xFFD
 33731                           pclath	equ	0xFFA
 33732                           tblptru	equ	0xFF8
 33733                           tblptrh	equ	0xFF7
 33734                           tblptrl	equ	0xFF6
 33735                           tablat	equ	0xFF5
 33736                           prodh	equ	0xFF4
 33737                           prodl	equ	0xFF3
 33738                           intcon	equ	0xFF2
 33739                           indf0	equ	0xFEF
 33740                           postinc0	equ	0xFEE
 33741                           fsr0h	equ	0xFEA
 33742                           fsr0l	equ	0xFE9
 33743                           wreg	equ	0xFE8
 33744                           indf1	equ	0xFE7
 33745                           postdec1	equ	0xFE5
 33746                           fsr1h	equ	0xFE2
 33747                           fsr1l	equ	0xFE1
 33748                           indf2	equ	0xFDF
 33749                           postinc2	equ	0xFDE
 33750                           postdec2	equ	0xFDD
 33751                           plusw2	equ	0xFDB
 33752                           fsr2h	equ	0xFDA
 33753                           fsr2l	equ	0xFD9
 33754                           status	equ	0xFD8
 33755                           
 33756 ;; *************** function _ISR_Function *****************
 33757 ;; Defined at:
 33758 ;;		line 38 in file "Library/ISR.c"
 33759 ;; Parameters:    Size  Location     Type
 33760 ;;		None
 33761 ;; Auto vars:     Size  Location     Type
 33762 ;;		None
 33763 ;; Return value:  Size  Location     Type
 33764 ;;                  1    wreg      void 
 33765 ;; Registers used:
 33766 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33767 ;; Tracked objects:
 33768 ;;		On entry : 0/0
 33769 ;;		On exit  : 0/0
 33770 ;;		Unchanged: 0/0
 33771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33774 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33775 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33776 ;;Total ram usage:       18 bytes
 33777 ;; Hardware stack levels used:    1
 33778 ;; Hardware stack levels required when called:    6
 33779 ;; This function calls:
 33780 ;;		_Timer0_ISR
 33781 ;; This function is called by:
 33782 ;;		Interrupt level 2
 33783 ;; This function uses a non-reentrant model
 33784 ;;
 33785                           
 33786                           	psect	intcode
 33787  001408                     __pintcode:
 33788                           	opt stack 0
 33789  001408                     _ISR_Function:
 33790                           	opt stack 13
 33791                           
 33792                           ; BSR set to: 0
 33793                           ;incstack = 0
 33794  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 33795  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 33796  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 33797  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 33798  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 33799  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 33800  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 33801  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 33802  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 33803  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 33804  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 33805  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 33806  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 33807  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 33808  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 33809  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 33810  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 33811  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 33812  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 33813                           
 33814                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 33815  001452  92F2               	bcf	intcon,1,c	;volatile
 33816                           
 33817                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 33818  001454  B4F2               	btfsc	intcon,2,c	;volatile
 33819  001456  AAF2               	btfss	intcon,5,c	;volatile
 33820  001458  D002               	goto	i2l1590
 33821                           
 33822                           ;ISR.c: 68: Timer0_ISR();
 33823  00145A  EC36  F0BE         	call	_Timer0_ISR	;wreg free
 33824  00145E                     i2l1590:
 33825  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 33826  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 33827  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 33828  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 33829  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 33830  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 33831  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 33832  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 33833  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 33834  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 33835  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 33836  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 33837  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 33838  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 33839  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 33840  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 33841  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 33842  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 33843  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 33844  0014A8  0011               	retfie		f
 33845  0014AA                     __end_of_ISR_Function:
 33846                           	opt stack 0
 33847                           tosu	equ	0xFFF
 33848                           tosh	equ	0xFFE
 33849                           tosl	equ	0xFFD
 33850                           pclatu	equ	0xFFB
 33851                           pclath	equ	0xFFA
 33852                           tblptru	equ	0xFF8
 33853                           tblptrh	equ	0xFF7
 33854                           tblptrl	equ	0xFF6
 33855                           tablat	equ	0xFF5
 33856                           prodh	equ	0xFF4
 33857                           prodl	equ	0xFF3
 33858                           intcon	equ	0xFF2
 33859                           indf0	equ	0xFEF
 33860                           postinc0	equ	0xFEE
 33861                           fsr0h	equ	0xFEA
 33862                           fsr0l	equ	0xFE9
 33863                           wreg	equ	0xFE8
 33864                           indf1	equ	0xFE7
 33865                           postdec1	equ	0xFE5
 33866                           fsr1h	equ	0xFE2
 33867                           fsr1l	equ	0xFE1
 33868                           indf2	equ	0xFDF
 33869                           postinc2	equ	0xFDE
 33870                           postdec2	equ	0xFDD
 33871                           plusw2	equ	0xFDB
 33872                           fsr2h	equ	0xFDA
 33873                           fsr2l	equ	0xFD9
 33874                           status	equ	0xFD8
 33875                           
 33876 ;; *************** function _Timer0_ISR *****************
 33877 ;; Defined at:
 33878 ;;		line 94 in file "Library/Timer0.c"
 33879 ;; Parameters:    Size  Location     Type
 33880 ;;		None
 33881 ;; Auto vars:     Size  Location     Type
 33882 ;;		None
 33883 ;; Return value:  Size  Location     Type
 33884 ;;                  1    wreg      void 
 33885 ;; Registers used:
 33886 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33887 ;; Tracked objects:
 33888 ;;		On entry : 0/0
 33889 ;;		On exit  : 0/0
 33890 ;;		Unchanged: 0/0
 33891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33896 ;;Total ram usage:        0 bytes
 33897 ;; Hardware stack levels used:    1
 33898 ;; Hardware stack levels required when called:    5
 33899 ;; This function calls:
 33900 ;;		Absolute function
 33901 ;;		i2_Motor_Step
 33902 ;;		i2_Timer0_Stop
 33903 ;; This function is called by:
 33904 ;;		_ISR_Function
 33905 ;; This function uses a non-reentrant model
 33906 ;;
 33907                           
 33908                           	psect	text163
 33909  017C6C                     __ptext163:
 33910                           	opt stack 0
 33911  017C6C                     _Timer0_ISR:
 33912                           	opt stack 13
 33913                           
 33914                           ;Timer0.c: 96: Timer0_Stop();
 33915                           
 33916                           ;incstack = 0
 33917  017C6C  EC41  F0C0         	call	i2_Timer0_Stop	;wreg free
 33918                           
 33919                           ;Timer0.c: 99: if (gISR != 0)
 33920  017C70  0101               	movlb	1	; () banked
 33921  017C72  510C               	movf	_gISR& (0+255),w,b
 33922  017C74  0101               	movlb	1	; () banked
 33923  017C76  110D               	iorwf	(_gISR+1)& (0+255),w,b
 33924  017C78  0101               	movlb	1	; () banked
 33925  017C7A  110E               	iorwf	(_gISR+2)& (0+255),w,b
 33926  017C7C  B4D8               	btfsc	status,2,c
 33927  017C7E  0012               	return	
 33928                           
 33929                           ; BSR set to: 1
 33930                           ;Timer0.c: 100: gISR();
 33931  017C80  D801               	call	i2u1497_48
 33932  017C82  0012               	return	
 33933  017C84                     i2u1497_48:
 33934  017C84  0005               	push	
 33935  017C86  6EFA               	movwf	pclath,c
 33936  017C88  0101               	movlb	1	; () banked
 33937  017C8A  510C               	movf	_gISR& (0+255),w,b
 33938  017C8C  6EFD               	movwf	tosl,c
 33939  017C8E  510D               	movf	(_gISR+1)& (0+255),w,b
 33940  017C90  6EFE               	movwf	tosh,c
 33941  017C92  510E               	movf	(_gISR+2)& (0+255),w,b
 33942  017C94  6EFF               	movwf	tosu,c
 33943  017C96  50FA               	movf	pclath,w,c
 33944  017C98  0012               	return		;indir
 33945  017C9A                     __end_of_Timer0_ISR:
 33946                           	opt stack 0
 33947                           tosu	equ	0xFFF
 33948                           tosh	equ	0xFFE
 33949                           tosl	equ	0xFFD
 33950                           pclatu	equ	0xFFB
 33951                           pclath	equ	0xFFA
 33952                           tblptru	equ	0xFF8
 33953                           tblptrh	equ	0xFF7
 33954                           tblptrl	equ	0xFF6
 33955                           tablat	equ	0xFF5
 33956                           prodh	equ	0xFF4
 33957                           prodl	equ	0xFF3
 33958                           intcon	equ	0xFF2
 33959                           indf0	equ	0xFEF
 33960                           postinc0	equ	0xFEE
 33961                           fsr0h	equ	0xFEA
 33962                           fsr0l	equ	0xFE9
 33963                           wreg	equ	0xFE8
 33964                           indf1	equ	0xFE7
 33965                           postdec1	equ	0xFE5
 33966                           fsr1h	equ	0xFE2
 33967                           fsr1l	equ	0xFE1
 33968                           indf2	equ	0xFDF
 33969                           postinc2	equ	0xFDE
 33970                           postdec2	equ	0xFDD
 33971                           plusw2	equ	0xFDB
 33972                           fsr2h	equ	0xFDA
 33973                           fsr2l	equ	0xFD9
 33974                           status	equ	0xFD8
 33975                           
 33976 ;; *************** function i2_Motor_Step *****************
 33977 ;; Defined at:
 33978 ;;		line 75 in file "Library/Motor.c"
 33979 ;; Parameters:    Size  Location     Type
 33980 ;;		None
 33981 ;; Auto vars:     Size  Location     Type
 33982 ;;		None
 33983 ;; Return value:  Size  Location     Type
 33984 ;;                  1    wreg      void 
 33985 ;; Registers used:
 33986 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 33987 ;; Tracked objects:
 33988 ;;		On entry : 0/0
 33989 ;;		On exit  : 0/0
 33990 ;;		Unchanged: 0/0
 33991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 33992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33994 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 33996 ;;Total ram usage:        2 bytes
 33997 ;; Hardware stack levels used:    1
 33998 ;; Hardware stack levels required when called:    4
 33999 ;; This function calls:
 34000 ;;		i2_MXK_Queue
 34001 ;;		i2_MXK_Release
 34002 ;;		i2_MXK_SwitchTo
 34003 ;;		i2_Port_SetPin
 34004 ;;		i2_Timer0_Restart
 34005 ;;		i2_Timer0_Stop
 34006 ;; This function is called by:
 34007 ;; This function uses a non-reentrant model
 34008 ;;
 34009                           
 34010                           	psect	text164
 34011  0151B6                     __ptext164:
 34012                           	opt stack 0
 34013  0151B6                     i2_Motor_Step:
 34014                           	opt stack 13
 34015                           
 34016                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 34017                           
 34018                           ;incstack = 0
 34019  0151B6  0100               	movlb	0	; () banked
 34020  0151B8  EE20 F004          	lfsr	2,4
 34021  0151BC  51EA               	movf	_lMotor& (0+255),w,b
 34022  0151BE  26D9               	addwf	fsr2l,f,c
 34023  0151C0  51EB               	movf	(_lMotor+1)& (0+255),w,b
 34024  0151C2  22DA               	addwfc	fsr2h,f,c
 34025  0151C4  50DF               	movf	indf2,w,c
 34026  0151C6  EC70  F0BD         	call	i2_MXK_SwitchTo
 34027  0151CA  0900               	iorlw	0
 34028  0151CC  B4D8               	btfsc	status,2,c
 34029  0151CE  D06A               	goto	i2l1627
 34030                           
 34031                           ;Motor.c: 78: {
 34032                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 34033  0151D0  C0EA  FFD9         	movff	_lMotor,fsr2l
 34034  0151D4  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34035  0151D8  50DE               	movf	postinc2,w,c
 34036  0151DA  10DE               	iorwf	postinc2,w,c
 34037  0151DC  B4D8               	btfsc	status,2,c
 34038  0151DE  D05D               	goto	i2l1628
 34039                           
 34040                           ;Motor.c: 80: {
 34041                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 34042  0151E0  C0EA  FFD9         	movff	_lMotor,fsr2l
 34043  0151E4  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34044  0151E8  0E01               	movlw	1
 34045  0151EA  BEDB               	btfsc	plusw2,7,c
 34046  0151EC  D022               	goto	i2l1629
 34047  0151EE  0E01               	movlw	1
 34048  0151F0  50DB               	movf	plusw2,w,c
 34049  0151F2  E103               	bnz	i2u885_40
 34050  0151F4  04DE               	decf	postinc2,w,c
 34051  0151F6  A0D8               	btfss	status,0,c
 34052  0151F8  D01C               	goto	i2l1629
 34053  0151FA                     i2u885_40:
 34054                           
 34055                           ;Motor.c: 83: {
 34056                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 34057  0151FA  C0EA  FFD9         	movff	_lMotor,fsr2l
 34058  0151FE  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34059  015202  28DE               	incf	postinc2,w,c
 34060  015204  E104               	bnz	i2u886_40
 34061  015206  0E7F               	movlw	127
 34062  015208  18DE               	xorwf	postinc2,w,c
 34063  01520A  B4D8               	btfsc	status,2,c
 34064  01520C  D007               	goto	i2l1630
 34065  01520E                     i2u886_40:
 34066                           
 34067                           ;Motor.c: 85: lMotor->mDelta --;
 34068  01520E  C0EA  FFD9         	movff	_lMotor,fsr2l
 34069  015212  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34070  015216  06DE               	decf	postinc2,f,c
 34071  015218  0E00               	movlw	0
 34072  01521A  5ADD               	subwfb	postdec2,f,c
 34073  01521C                     i2l1630:
 34074                           
 34075                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 34076  01521C  0E95               	movlw	low _PortE
 34077  01521E  6E10               	movwf	i2Port_SetPin@pInput,c
 34078  015220  0E01               	movlw	high _PortE
 34079  015222  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34080  015224  0E00               	movlw	0
 34081  015226  6E12               	movwf	i2Port_SetPin@pPin,c
 34082  015228  0E01               	movlw	1
 34083  01522A  6E13               	movwf	i2Port_SetPin@pValue,c
 34084  01522C  EC26  F0B0         	call	i2_Port_SetPin	;wreg free
 34085                           
 34086                           ;Motor.c: 88: }
 34087  015230  D01B               	goto	i2l1631
 34088  015232                     i2l1629:
 34089                           
 34090                           ;Motor.c: 89: else
 34091                           ;Motor.c: 90: {
 34092                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 34093  015232  C0EA  FFD9         	movff	_lMotor,fsr2l
 34094  015236  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34095  01523A  04DE               	decf	postinc2,w,c
 34096  01523C  E104               	bnz	i2u887_40
 34097  01523E  0E80               	movlw	128
 34098  015240  18DE               	xorwf	postinc2,w,c
 34099  015242  B4D8               	btfsc	status,2,c
 34100  015244  D007               	goto	i2l1632
 34101  015246                     i2u887_40:
 34102                           
 34103                           ;Motor.c: 92: lMotor->mDelta ++;
 34104  015246  C0EA  FFD9         	movff	_lMotor,fsr2l
 34105  01524A  C0EB  FFDA         	movff	_lMotor+1,fsr2h
 34106  01524E  2ADE               	incf	postinc2,f,c
 34107  015250  0E00               	movlw	0
 34108  015252  22DD               	addwfc	postdec2,f,c
 34109  015254                     i2l1632:
 34110                           
 34111                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 34112  015254  0E95               	movlw	low _PortE
 34113  015256  6E10               	movwf	i2Port_SetPin@pInput,c
 34114  015258  0E01               	movlw	high _PortE
 34115  01525A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34116  01525C  0E00               	movlw	0
 34117  01525E  6E12               	movwf	i2Port_SetPin@pPin,c
 34118  015260  0E00               	movlw	0
 34119  015262  6E13               	movwf	i2Port_SetPin@pValue,c
 34120  015264  EC26  F0B0         	call	i2_Port_SetPin	;wreg free
 34121  015268                     i2l1631:
 34122                           
 34123                           ;Motor.c: 95: }
 34124                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 34125  015268  0E95               	movlw	low _PortE
 34126  01526A  6E10               	movwf	i2Port_SetPin@pInput,c
 34127  01526C  0E01               	movlw	high _PortE
 34128  01526E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34129  015270  0E01               	movlw	1
 34130  015272  6E12               	movwf	i2Port_SetPin@pPin,c
 34131  015274  0E01               	movlw	1
 34132  015276  6E13               	movwf	i2Port_SetPin@pValue,c
 34133  015278  EC26  F0B0         	call	i2_Port_SetPin	;wreg free
 34134                           
 34135                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 34136  01527C  0E95               	movlw	low _PortE
 34137  01527E  6E10               	movwf	i2Port_SetPin@pInput,c
 34138  015280  0E01               	movlw	high _PortE
 34139  015282  6E11               	movwf	i2Port_SetPin@pInput+1,c
 34140  015284  0E01               	movlw	1
 34141  015286  6E12               	movwf	i2Port_SetPin@pPin,c
 34142  015288  0E00               	movlw	0
 34143  01528A  6E13               	movwf	i2Port_SetPin@pValue,c
 34144  01528C  EC26  F0B0         	call	i2_Port_SetPin	;wreg free
 34145                           
 34146                           ;Motor.c: 101: MXK_Release();
 34147  015290  EC44  F0C0         	call	i2_MXK_Release	;wreg free
 34148                           
 34149                           ;Motor.c: 102: Timer0_Restart();
 34150  015294  EC13  F0C0         	call	i2_Timer0_Restart	;wreg free
 34151                           
 34152                           ;Motor.c: 103: return;
 34153  015298  0012               	return	
 34154  01529A                     i2l1628:
 34155                           
 34156                           ;Motor.c: 104: }
 34157                           ;Motor.c: 105: MXK_Release();
 34158  01529A  EC44  F0C0         	call	i2_MXK_Release	;wreg free
 34159                           
 34160                           ;Motor.c: 106: Timer0_Stop();
 34161  01529E  EC41  F0C0         	call	i2_Timer0_Stop	;wreg free
 34162                           
 34163                           ;Motor.c: 107: return;
 34164  0152A2  0012               	return	
 34165  0152A4                     i2l1627:
 34166                           
 34167                           ;Motor.c: 108: }
 34168                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 34169  0152A4  C029  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 34170  0152A8  C02A  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 34171  0152AC  C02B  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 34172  0152B0  EC00  F0C0         	call	i2_MXK_Queue	;wreg free
 34173  0152B4  0012               	return		;funcret
 34174  0152B6                     __end_ofi2_Motor_Step:
 34175                           	opt stack 0
 34176                           tosu	equ	0xFFF
 34177                           tosh	equ	0xFFE
 34178                           tosl	equ	0xFFD
 34179                           pclatu	equ	0xFFB
 34180                           pclath	equ	0xFFA
 34181                           tblptru	equ	0xFF8
 34182                           tblptrh	equ	0xFF7
 34183                           tblptrl	equ	0xFF6
 34184                           tablat	equ	0xFF5
 34185                           prodh	equ	0xFF4
 34186                           prodl	equ	0xFF3
 34187                           intcon	equ	0xFF2
 34188                           indf0	equ	0xFEF
 34189                           postinc0	equ	0xFEE
 34190                           fsr0h	equ	0xFEA
 34191                           fsr0l	equ	0xFE9
 34192                           wreg	equ	0xFE8
 34193                           indf1	equ	0xFE7
 34194                           postdec1	equ	0xFE5
 34195                           fsr1h	equ	0xFE2
 34196                           fsr1l	equ	0xFE1
 34197                           indf2	equ	0xFDF
 34198                           postinc2	equ	0xFDE
 34199                           postdec2	equ	0xFDD
 34200                           plusw2	equ	0xFDB
 34201                           fsr2h	equ	0xFDA
 34202                           fsr2l	equ	0xFD9
 34203                           status	equ	0xFD8
 34204                           
 34205 ;; *************** function i2_Timer0_Stop *****************
 34206 ;; Defined at:
 34207 ;;		line 89 in file "Library/Timer0.c"
 34208 ;; Parameters:    Size  Location     Type
 34209 ;;		None
 34210 ;; Auto vars:     Size  Location     Type
 34211 ;;		None
 34212 ;; Return value:  Size  Location     Type
 34213 ;;                  1    wreg      void 
 34214 ;; Registers used:
 34215 ;;		None
 34216 ;; Tracked objects:
 34217 ;;		On entry : 0/0
 34218 ;;		On exit  : 0/0
 34219 ;;		Unchanged: 0/0
 34220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34224 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34225 ;;Total ram usage:        0 bytes
 34226 ;; Hardware stack levels used:    1
 34227 ;; This function calls:
 34228 ;;		Nothing
 34229 ;; This function is called by:
 34230 ;;		_Timer0_ISR
 34231 ;;		i2_Motor_Step
 34232 ;; This function uses a non-reentrant model
 34233 ;;
 34234                           
 34235                           	psect	text165
 34236  018082                     __ptext165:
 34237                           	opt stack 0
 34238  018082                     i2_Timer0_Stop:
 34239                           	opt stack 17
 34240                           
 34241                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 34242                           
 34243                           ;incstack = 0
 34244  018082  9AF2               	bcf	intcon,5,c	;volatile
 34245                           
 34246                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 34247  018084  94F2               	bcf	intcon,2,c	;volatile
 34248  018086  0012               	return		;funcret
 34249  018088                     __end_ofi2_Timer0_Stop:
 34250                           	opt stack 0
 34251                           tosu	equ	0xFFF
 34252                           tosh	equ	0xFFE
 34253                           tosl	equ	0xFFD
 34254                           pclatu	equ	0xFFB
 34255                           pclath	equ	0xFFA
 34256                           tblptru	equ	0xFF8
 34257                           tblptrh	equ	0xFF7
 34258                           tblptrl	equ	0xFF6
 34259                           tablat	equ	0xFF5
 34260                           prodh	equ	0xFF4
 34261                           prodl	equ	0xFF3
 34262                           intcon	equ	0xFF2
 34263                           indf0	equ	0xFEF
 34264                           postinc0	equ	0xFEE
 34265                           fsr0h	equ	0xFEA
 34266                           fsr0l	equ	0xFE9
 34267                           wreg	equ	0xFE8
 34268                           indf1	equ	0xFE7
 34269                           postdec1	equ	0xFE5
 34270                           fsr1h	equ	0xFE2
 34271                           fsr1l	equ	0xFE1
 34272                           indf2	equ	0xFDF
 34273                           postinc2	equ	0xFDE
 34274                           postdec2	equ	0xFDD
 34275                           plusw2	equ	0xFDB
 34276                           fsr2h	equ	0xFDA
 34277                           fsr2l	equ	0xFD9
 34278                           status	equ	0xFD8
 34279                           
 34280 ;; *************** function i2_Timer0_Restart *****************
 34281 ;; Defined at:
 34282 ;;		line 83 in file "Library/Timer0.c"
 34283 ;; Parameters:    Size  Location     Type
 34284 ;;		None
 34285 ;; Auto vars:     Size  Location     Type
 34286 ;;		None
 34287 ;; Return value:  Size  Location     Type
 34288 ;;                  1    wreg      void 
 34289 ;; Registers used:
 34290 ;;		None
 34291 ;; Tracked objects:
 34292 ;;		On entry : 0/0
 34293 ;;		On exit  : 0/0
 34294 ;;		Unchanged: 0/0
 34295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34296 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34297 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34298 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34299 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34300 ;;Total ram usage:        0 bytes
 34301 ;; Hardware stack levels used:    1
 34302 ;; This function calls:
 34303 ;;		Nothing
 34304 ;; This function is called by:
 34305 ;;		i2_Motor_Step
 34306 ;; This function uses a non-reentrant model
 34307 ;;
 34308                           
 34309                           	psect	text166
 34310  018026                     __ptext166:
 34311                           	opt stack 0
 34312  018026                     i2_Timer0_Restart:
 34313                           	opt stack 16
 34314                           
 34315                           ;Timer0.c: 85: TMR0 = COUNTER;
 34316                           
 34317                           ;incstack = 0
 34318  018026  C02E  FFD6         	movff	_COUNTER,4054	;volatile
 34319  01802A  C02F  FFD7         	movff	_COUNTER+1,4055	;volatile
 34320                           
 34321                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 34322  01802E  8AF2               	bsf	intcon,5,c	;volatile
 34323  018030  0012               	return		;funcret
 34324  018032                     __end_ofi2_Timer0_Restart:
 34325                           	opt stack 0
 34326                           tosu	equ	0xFFF
 34327                           tosh	equ	0xFFE
 34328                           tosl	equ	0xFFD
 34329                           pclatu	equ	0xFFB
 34330                           pclath	equ	0xFFA
 34331                           tblptru	equ	0xFF8
 34332                           tblptrh	equ	0xFF7
 34333                           tblptrl	equ	0xFF6
 34334                           tablat	equ	0xFF5
 34335                           prodh	equ	0xFF4
 34336                           prodl	equ	0xFF3
 34337                           intcon	equ	0xFF2
 34338                           indf0	equ	0xFEF
 34339                           postinc0	equ	0xFEE
 34340                           fsr0h	equ	0xFEA
 34341                           fsr0l	equ	0xFE9
 34342                           wreg	equ	0xFE8
 34343                           indf1	equ	0xFE7
 34344                           postdec1	equ	0xFE5
 34345                           fsr1h	equ	0xFE2
 34346                           fsr1l	equ	0xFE1
 34347                           indf2	equ	0xFDF
 34348                           postinc2	equ	0xFDE
 34349                           postdec2	equ	0xFDD
 34350                           plusw2	equ	0xFDB
 34351                           fsr2h	equ	0xFDA
 34352                           fsr2l	equ	0xFD9
 34353                           status	equ	0xFD8
 34354                           
 34355 ;; *************** function i2_Port_SetPin *****************
 34356 ;; Defined at:
 34357 ;;		line 247 in file "Library/Port.c"
 34358 ;; Parameters:    Size  Location     Type
 34359 ;;  pInput          2   15[COMRAM] const PTR struct Port
 34360 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 34361 ;;  pPin            1   17[COMRAM] enum E6750
 34362 ;;  pValue          1   18[COMRAM] unsigned char 
 34363 ;; Auto vars:     Size  Location     Type
 34364 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 34365 ;; Return value:  Size  Location     Type
 34366 ;;                  1    wreg      void 
 34367 ;; Registers used:
 34368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34369 ;; Tracked objects:
 34370 ;;		On entry : 0/0
 34371 ;;		On exit  : 0/0
 34372 ;;		Unchanged: 0/0
 34373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34374 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34377 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34378 ;;Total ram usage:        5 bytes
 34379 ;; Hardware stack levels used:    1
 34380 ;; Hardware stack levels required when called:    3
 34381 ;; This function calls:
 34382 ;;		i2_Byte_SetBit
 34383 ;;		i2_Word_GetPair
 34384 ;; This function is called by:
 34385 ;;		i2_Motor_Step
 34386 ;; This function uses a non-reentrant model
 34387 ;;
 34388                           
 34389                           	psect	text167
 34390  01604C                     __ptext167:
 34391                           	opt stack 0
 34392  01604C                     i2_Port_SetPin:
 34393                           	opt stack 13
 34394                           
 34395                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 34396                           
 34397                           ;incstack = 0
 34398  01604C  0E08               	movlw	8
 34399  01604E  2410               	addwf	i2Port_SetPin@pInput,w,c
 34400  016050  6E0D               	movwf	i2Word_GetPair@pInput,c
 34401  016052  0E00               	movlw	0
 34402  016054  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 34403  016056  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 34404  016058  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 34405  01605C  EC07  F0BE         	call	i2_Word_GetPair	;wreg free
 34406  016060  6E14               	movwf	i2Port_SetPin@Type,c
 34407                           
 34408                           ;Port.c: 250: switch (Type)
 34409  016062  D03B               	goto	i2l427
 34410  016064                     
 34411                           ;Port.c: 256: pValue &= 1;
 34412  016064  0E01               	movlw	1
 34413  016066  1613               	andwf	i2Port_SetPin@pValue,f,c
 34414                           
 34415                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 34416  016068  EE20 F002          	lfsr	2,2
 34417  01606C  5010               	movf	i2Port_SetPin@pInput,w,c
 34418  01606E  26D9               	addwf	fsr2l,f,c
 34419  016070  5011               	movf	i2Port_SetPin@pInput+1,w,c
 34420  016072  22DA               	addwfc	fsr2h,f,c
 34421  016074  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 34422  016078  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 34423  01607C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 34424  016080  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 34425  016084  ECBC  F0BA         	call	i2_Byte_SetBit	;wreg free
 34426                           
 34427                           ;Port.c: 258: break;
 34428  016088  0012               	return	
 34429  01608A                     
 34430                           ;Port.c: 261: pValue &= 1;
 34431  01608A  0E01               	movlw	1
 34432  01608C  1613               	andwf	i2Port_SetPin@pValue,f,c
 34433                           
 34434                           ;Port.c: 262: pValue ^= 1;
 34435  01608E  0E01               	movlw	1
 34436  016090  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 34437                           
 34438                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 34439  016092  EE20 F002          	lfsr	2,2
 34440  016096  5010               	movf	i2Port_SetPin@pInput,w,c
 34441  016098  26D9               	addwf	fsr2l,f,c
 34442  01609A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 34443  01609C  22DA               	addwfc	fsr2h,f,c
 34444  01609E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 34445  0160A2  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 34446  0160A6  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 34447  0160AA  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 34448  0160AE  ECBC  F0BA         	call	i2_Byte_SetBit	;wreg free
 34449                           
 34450                           ;Port.c: 264: break;
 34451  0160B2  0012               	return	
 34452  0160B4                     
 34453                           ;Port.c: 266: pValue &= 1;
 34454  0160B4  0E01               	movlw	1
 34455  0160B6  1613               	andwf	i2Port_SetPin@pValue,f,c
 34456                           
 34457                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 34458  0160B8  EE20 F004          	lfsr	2,4
 34459  0160BC  5010               	movf	i2Port_SetPin@pInput,w,c
 34460  0160BE  26D9               	addwf	fsr2l,f,c
 34461  0160C0  5011               	movf	i2Port_SetPin@pInput+1,w,c
 34462  0160C2  22DA               	addwfc	fsr2h,f,c
 34463  0160C4  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 34464  0160C8  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 34465  0160CC  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 34466  0160D0  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 34467  0160D4  ECBC  F0BA         	call	i2_Byte_SetBit	;wreg free
 34468                           
 34469                           ;Port.c: 269: }
 34470                           
 34471                           ;Port.c: 268: break;
 34472  0160D8  0012               	return	
 34473  0160DA                     i2l427:
 34474  0160DA  5014               	movf	i2Port_SetPin@Type,w,c
 34475                           
 34476                           ; Switch size 1, requested type "space"
 34477                           ; Number of cases is 4, Range of values is 0 to 3
 34478                           ; switch strategies available:
 34479                           ; Name         Instructions Cycles
 34480                           ; simple_byte           13     7 (average)
 34481                           ;	Chosen strategy is simple_byte
 34482  0160DC  0A00               	xorlw	0	; case 0
 34483  0160DE  B4D8               	btfsc	status,2,c
 34484  0160E0  0012               	return	
 34485  0160E2  0A01               	xorlw	1	; case 1
 34486  0160E4  B4D8               	btfsc	status,2,c
 34487  0160E6  D7BE               	goto	i2l430
 34488  0160E8  0A03               	xorlw	3	; case 2
 34489  0160EA  B4D8               	btfsc	status,2,c
 34490  0160EC  D7CE               	goto	i2l432
 34491  0160EE  0A01               	xorlw	1	; case 3
 34492  0160F0  A4D8               	btfss	status,2,c
 34493  0160F2  0012               	return	
 34494  0160F4  D7DF               	goto	i2l433
 34495  0160F6                     __end_ofi2_Port_SetPin:
 34496                           	opt stack 0
 34497                           tosu	equ	0xFFF
 34498                           tosh	equ	0xFFE
 34499                           tosl	equ	0xFFD
 34500                           pclatu	equ	0xFFB
 34501                           pclath	equ	0xFFA
 34502                           tblptru	equ	0xFF8
 34503                           tblptrh	equ	0xFF7
 34504                           tblptrl	equ	0xFF6
 34505                           tablat	equ	0xFF5
 34506                           prodh	equ	0xFF4
 34507                           prodl	equ	0xFF3
 34508                           intcon	equ	0xFF2
 34509                           indf0	equ	0xFEF
 34510                           postinc0	equ	0xFEE
 34511                           fsr0h	equ	0xFEA
 34512                           fsr0l	equ	0xFE9
 34513                           wreg	equ	0xFE8
 34514                           indf1	equ	0xFE7
 34515                           postdec1	equ	0xFE5
 34516                           fsr1h	equ	0xFE2
 34517                           fsr1l	equ	0xFE1
 34518                           indf2	equ	0xFDF
 34519                           postinc2	equ	0xFDE
 34520                           postdec2	equ	0xFDD
 34521                           plusw2	equ	0xFDB
 34522                           fsr2h	equ	0xFDA
 34523                           fsr2l	equ	0xFD9
 34524                           status	equ	0xFD8
 34525                           
 34526 ;; *************** function i2_Word_GetPair *****************
 34527 ;; Defined at:
 34528 ;;		line 156 in file "Library/Types.c"
 34529 ;; Parameters:    Size  Location     Type
 34530 ;;  pInput          2   12[COMRAM] PTR struct Word
 34531 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 34532 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 34533 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 34534 ;;		 -> PortC(10), PortF(10), NULL(0), 
 34535 ;;  pPair           1   14[COMRAM] unsigned char 
 34536 ;; Auto vars:     Size  Location     Type
 34537 ;;		None
 34538 ;; Return value:  Size  Location     Type
 34539 ;;                  1    wreg      unsigned char 
 34540 ;; Registers used:
 34541 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34542 ;; Tracked objects:
 34543 ;;		On entry : 0/0
 34544 ;;		On exit  : 0/0
 34545 ;;		Unchanged: 0/0
 34546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34547 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34550 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34551 ;;Total ram usage:        3 bytes
 34552 ;; Hardware stack levels used:    1
 34553 ;; Hardware stack levels required when called:    2
 34554 ;; This function calls:
 34555 ;;		i2_Byte_GetPair
 34556 ;; This function is called by:
 34557 ;;		i2_Port_SetPin
 34558 ;; This function uses a non-reentrant model
 34559 ;;
 34560                           
 34561                           	psect	text168
 34562  017C0E                     __ptext168:
 34563                           	opt stack 0
 34564  017C0E                     i2_Word_GetPair:
 34565                           	opt stack 13
 34566                           
 34567                           ;Types.c: 158: if (pPair >= 4)
 34568                           
 34569                           ;incstack = 0
 34570  017C0E  0E03               	movlw	3
 34571  017C10  640F               	cpfsgt	i2Word_GetPair@pPair,c
 34572  017C12  D00C               	goto	i2l781
 34573                           
 34574                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 34575  017C14  0E01               	movlw	1
 34576  017C16  240D               	addwf	i2Word_GetPair@pInput,w,c
 34577  017C18  6E0A               	movwf	i2Byte_GetPair@pInput,c
 34578  017C1A  0E00               	movlw	0
 34579  017C1C  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 34580  017C1E  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 34581  017C20  500F               	movf	i2Word_GetPair@pPair,w,c
 34582  017C22  0FFC               	addlw	252
 34583  017C24  6E0C               	movwf	i2Byte_GetPair@pPair,c
 34584  017C26  EC66  F0BF         	call	i2_Byte_GetPair	;wreg free
 34585  017C2A  0012               	return	
 34586  017C2C                     i2l781:
 34587                           
 34588                           ;Types.c: 160: else
 34589                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 34590  017C2C  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 34591  017C30  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 34592  017C34  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 34593  017C38  EC66  F0BF         	call	i2_Byte_GetPair	;wreg free
 34594  017C3C  0012               	return	
 34595  017C3E                     __end_ofi2_Word_GetPair:
 34596                           	opt stack 0
 34597                           tosu	equ	0xFFF
 34598                           tosh	equ	0xFFE
 34599                           tosl	equ	0xFFD
 34600                           pclatu	equ	0xFFB
 34601                           pclath	equ	0xFFA
 34602                           tblptru	equ	0xFF8
 34603                           tblptrh	equ	0xFF7
 34604                           tblptrl	equ	0xFF6
 34605                           tablat	equ	0xFF5
 34606                           prodh	equ	0xFF4
 34607                           prodl	equ	0xFF3
 34608                           intcon	equ	0xFF2
 34609                           indf0	equ	0xFEF
 34610                           postinc0	equ	0xFEE
 34611                           fsr0h	equ	0xFEA
 34612                           fsr0l	equ	0xFE9
 34613                           wreg	equ	0xFE8
 34614                           indf1	equ	0xFE7
 34615                           postdec1	equ	0xFE5
 34616                           fsr1h	equ	0xFE2
 34617                           fsr1l	equ	0xFE1
 34618                           indf2	equ	0xFDF
 34619                           postinc2	equ	0xFDE
 34620                           postdec2	equ	0xFDD
 34621                           plusw2	equ	0xFDB
 34622                           fsr2h	equ	0xFDA
 34623                           fsr2l	equ	0xFD9
 34624                           status	equ	0xFD8
 34625                           
 34626 ;; *************** function i2_Byte_GetPair *****************
 34627 ;; Defined at:
 34628 ;;		line 87 in file "Library/Types.c"
 34629 ;; Parameters:    Size  Location     Type
 34630 ;;  pInput          2    9[COMRAM] PTR struct Byte
 34631 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 34632 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 34633 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 34634 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 34635 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 34636 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 34637 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 34638 ;;		 -> NULL(0), 
 34639 ;;  pPair           1   11[COMRAM] unsigned char 
 34640 ;; Auto vars:     Size  Location     Type
 34641 ;;		None
 34642 ;; Return value:  Size  Location     Type
 34643 ;;                  1    wreg      unsigned char 
 34644 ;; Registers used:
 34645 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 34646 ;; Tracked objects:
 34647 ;;		On entry : 0/0
 34648 ;;		On exit  : 0/0
 34649 ;;		Unchanged: 0/0
 34650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34651 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34654 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34655 ;;Total ram usage:        3 bytes
 34656 ;; Hardware stack levels used:    1
 34657 ;; Hardware stack levels required when called:    1
 34658 ;; This function calls:
 34659 ;;		i2_Byte_GetZone
 34660 ;; This function is called by:
 34661 ;;		i2_Word_GetPair
 34662 ;; This function uses a non-reentrant model
 34663 ;;
 34664                           
 34665                           	psect	text169
 34666  017ECC                     __ptext169:
 34667                           	opt stack 0
 34668  017ECC                     i2_Byte_GetPair:
 34669                           	opt stack 13
 34670                           
 34671                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 34672                           
 34673                           ;incstack = 0
 34674  017ECC  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 34675  017ED0  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 34676  017ED4  0E04               	movlw	4
 34677  017ED6  6E03               	movwf	i2Byte_GetZone@pMax,c
 34678  017ED8  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 34679  017EDC  0E02               	movlw	2
 34680  017EDE  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 34681  017EE0  EC38  F0B6         	call	i2_Byte_GetZone	;wreg free
 34682  017EE4  0012               	return	
 34683  017EE6                     __end_ofi2_Byte_GetPair:
 34684                           	opt stack 0
 34685                           tosu	equ	0xFFF
 34686                           tosh	equ	0xFFE
 34687                           tosl	equ	0xFFD
 34688                           pclatu	equ	0xFFB
 34689                           pclath	equ	0xFFA
 34690                           tblptru	equ	0xFF8
 34691                           tblptrh	equ	0xFF7
 34692                           tblptrl	equ	0xFF6
 34693                           tablat	equ	0xFF5
 34694                           prodh	equ	0xFF4
 34695                           prodl	equ	0xFF3
 34696                           intcon	equ	0xFF2
 34697                           indf0	equ	0xFEF
 34698                           postinc0	equ	0xFEE
 34699                           fsr0h	equ	0xFEA
 34700                           fsr0l	equ	0xFE9
 34701                           wreg	equ	0xFE8
 34702                           indf1	equ	0xFE7
 34703                           postdec1	equ	0xFE5
 34704                           fsr1h	equ	0xFE2
 34705                           fsr1l	equ	0xFE1
 34706                           indf2	equ	0xFDF
 34707                           postinc2	equ	0xFDE
 34708                           postdec2	equ	0xFDD
 34709                           plusw2	equ	0xFDB
 34710                           fsr2h	equ	0xFDA
 34711                           fsr2l	equ	0xFD9
 34712                           status	equ	0xFD8
 34713                           
 34714 ;; *************** function i2_Byte_GetZone *****************
 34715 ;; Defined at:
 34716 ;;		line 64 in file "Library/Types.c"
 34717 ;; Parameters:    Size  Location     Type
 34718 ;;  pInput          2    0[COMRAM] PTR struct Byte
 34719 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 34720 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 34721 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 34722 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 34723 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 34724 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 34725 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 34726 ;;		 -> NULL(0), 
 34727 ;;  pMax            1    2[COMRAM] unsigned char 
 34728 ;;  pChunk          1    3[COMRAM] unsigned char 
 34729 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 34730 ;; Auto vars:     Size  Location     Type
 34731 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 34732 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 34733 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 34734 ;; Return value:  Size  Location     Type
 34735 ;;                  1    wreg      unsigned char 
 34736 ;; Registers used:
 34737 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 34738 ;; Tracked objects:
 34739 ;;		On entry : 0/0
 34740 ;;		On exit  : 0/0
 34741 ;;		Unchanged: 0/0
 34742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34743 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34744 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34745 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34746 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34747 ;;Total ram usage:        9 bytes
 34748 ;; Hardware stack levels used:    1
 34749 ;; This function calls:
 34750 ;;		Nothing
 34751 ;; This function is called by:
 34752 ;;		i2_Byte_GetPair
 34753 ;; This function uses a non-reentrant model
 34754 ;;
 34755                           
 34756                           	psect	text170
 34757  016C70                     __ptext170:
 34758                           	opt stack 0
 34759  016C70                     i2_Byte_GetZone:
 34760                           	opt stack 13
 34761                           
 34762                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 34763                           
 34764                           ;incstack = 0
 34765  016C70  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 34766  016C74  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 34767  016C78  0E00               	movlw	low (__mediumconst shr (0+16))
 34768  016C7A  6EF8               	movwf	tblptru,c
 34769  016C7C  0E0F               	movlw	(high __ramtop+-1)
 34770  016C7E  64F7               	cpfsgt	tblptrh,c
 34771  016C80  D003               	bra	i2u563_47
 34772  016C82  0008               	tblrd		*
 34773  016C84  50F5               	movf	tablat,w,c
 34774  016C86  D005               	bra	i2u563_40
 34775  016C88                     i2u563_47:
 34776  016C88  CFF6 FFE9          	movff	tblptrl,fsr0l
 34777  016C8C  CFF7 FFEA          	movff	tblptrh,fsr0h
 34778  016C90  50EF               	movf	indf0,w,c
 34779  016C92                     i2u563_40:
 34780  016C92  6E09               	movwf	i2Byte_GetZone@Output,c
 34781                           
 34782                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 34783  016C94  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 34784  016C96  0D01               	mullw	1
 34785  016C98  0EBF               	movlw	low _MASKS
 34786  016C9A  24F3               	addwf	prodl,w,c
 34787  016C9C  6EF6               	movwf	tblptrl,c
 34788  016C9E  0EFC               	movlw	high _MASKS
 34789  016CA0  20F4               	addwfc	prodh,w,c
 34790  016CA2  6EF7               	movwf	tblptrh,c
 34791  016CA4                     	if	1	;There are 3 active tblptr bytes
 34792  016CA4  6AF8               	clrf	tblptru,c
 34793  016CA6  0E00               	movlw	low (__mediumconst shr (0+16))
 34794  016CA8  22F8               	addwfc	tblptru,f,c
 34795  016CAA                     	endif
 34796  016CAA  0008               	tblrd		*
 34797  016CAC  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 34798                           
 34799                           ;Types.c: 68: UINT8 Offset = 0;
 34800  016CB0  0E00               	movlw	0
 34801  016CB2  6E08               	movwf	i2Byte_GetZone@Offset,c
 34802                           
 34803                           ;Types.c: 70: while (pChunk >= pMax)
 34804  016CB4  D003               	goto	i2l732
 34805  016CB6                     
 34806                           ;Types.c: 71: {
 34807                           ;Types.c: 72: pChunk -= pMax;
 34808  016CB6  5003               	movf	i2Byte_GetZone@pMax,w,c
 34809  016CB8  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 34810                           
 34811                           ;Types.c: 73: Offset += 1;
 34812  016CBA  2A08               	incf	i2Byte_GetZone@Offset,f,c
 34813  016CBC                     i2l732:
 34814  016CBC  5003               	movf	i2Byte_GetZone@pMax,w,c
 34815  016CBE  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 34816  016CC0  B0D8               	btfsc	status,0,c
 34817  016CC2  D7F9               	goto	i2l733
 34818                           
 34819                           ;Types.c: 74: }
 34820                           ;Types.c: 75: pChunk *= pChunkSize;
 34821  016CC4  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 34822  016CC6  0204               	mulwf	i2Byte_GetZone@pChunk,c
 34823  016CC8  50F3               	movf	prodl,w,c
 34824  016CCA  6E04               	movwf	i2Byte_GetZone@pChunk,c
 34825                           
 34826                           ;Types.c: 76: pChunk += Offset;
 34827  016CCC  5008               	movf	i2Byte_GetZone@Offset,w,c
 34828  016CCE  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 34829                           
 34830                           ;Types.c: 78: Output >>= pChunk;
 34831  016CD0  2804               	incf	i2Byte_GetZone@pChunk,w,c
 34832  016CD2  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 34833  016CD4  D002               	goto	i2u565_40
 34834  016CD6                     i2u565_45:
 34835  016CD6  90D8               	bcf	status,0,c
 34836  016CD8  3209               	rrcf	i2Byte_GetZone@Output,f,c
 34837  016CDA                     i2u565_40:
 34838  016CDA  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 34839  016CDC  D7FC               	goto	i2u565_45
 34840                           
 34841                           ;Types.c: 79: Output &= MASK;
 34842  016CDE  5007               	movf	i2Byte_GetZone@MASK,w,c
 34843  016CE0  1609               	andwf	i2Byte_GetZone@Output,f,c
 34844                           
 34845                           ;Types.c: 80: return Output;
 34846  016CE2  5009               	movf	i2Byte_GetZone@Output,w,c
 34847  016CE4  0012               	return	
 34848  016CE6                     __end_ofi2_Byte_GetZone:
 34849                           	opt stack 0
 34850                           tosu	equ	0xFFF
 34851                           tosh	equ	0xFFE
 34852                           tosl	equ	0xFFD
 34853                           pclatu	equ	0xFFB
 34854                           pclath	equ	0xFFA
 34855                           tblptru	equ	0xFF8
 34856                           tblptrh	equ	0xFF7
 34857                           tblptrl	equ	0xFF6
 34858                           tablat	equ	0xFF5
 34859                           prodh	equ	0xFF4
 34860                           prodl	equ	0xFF3
 34861                           intcon	equ	0xFF2
 34862                           indf0	equ	0xFEF
 34863                           postinc0	equ	0xFEE
 34864                           fsr0h	equ	0xFEA
 34865                           fsr0l	equ	0xFE9
 34866                           wreg	equ	0xFE8
 34867                           indf1	equ	0xFE7
 34868                           postdec1	equ	0xFE5
 34869                           fsr1h	equ	0xFE2
 34870                           fsr1l	equ	0xFE1
 34871                           indf2	equ	0xFDF
 34872                           postinc2	equ	0xFDE
 34873                           postdec2	equ	0xFDD
 34874                           plusw2	equ	0xFDB
 34875                           fsr2h	equ	0xFDA
 34876                           fsr2l	equ	0xFD9
 34877                           status	equ	0xFD8
 34878                           
 34879 ;; *************** function i2_Byte_SetBit *****************
 34880 ;; Defined at:
 34881 ;;		line 32 in file "Library/Types.c"
 34882 ;; Parameters:    Size  Location     Type
 34883 ;;  pInput          2    0[COMRAM] PTR struct Byte
 34884 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 34885 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 34886 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 34887 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 34888 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 34889 ;;		 -> NULL(0), 
 34890 ;;  pBit            1    2[COMRAM] unsigned char 
 34891 ;;  pValue          1    3[COMRAM] unsigned char 
 34892 ;; Auto vars:     Size  Location     Type
 34893 ;;		None
 34894 ;; Return value:  Size  Location     Type
 34895 ;;                  1    wreg      void 
 34896 ;; Registers used:
 34897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 34898 ;; Tracked objects:
 34899 ;;		On entry : 0/0
 34900 ;;		On exit  : 0/0
 34901 ;;		Unchanged: 0/0
 34902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 34903 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34905 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34906 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 34907 ;;Total ram usage:        7 bytes
 34908 ;; Hardware stack levels used:    1
 34909 ;; This function calls:
 34910 ;;		Nothing
 34911 ;; This function is called by:
 34912 ;;		i2_Port_SetPin
 34913 ;; This function uses a non-reentrant model
 34914 ;;
 34915                           
 34916                           	psect	text171
 34917  017578                     __ptext171:
 34918                           	opt stack 0
 34919  017578                     i2_Byte_SetBit:
 34920                           	opt stack 15
 34921                           
 34922                           ;Types.c: 34: pValue &= 1;
 34923                           
 34924                           ;incstack = 0
 34925  017578  0E01               	movlw	1
 34926  01757A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 34927                           
 34928                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 34929  01757C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 34930  017580  0E01               	movlw	1
 34931  017582  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 34932  017584  2A05               	incf	??i2_Byte_SetBit,f,c
 34933  017586  D002               	goto	i2u736_44
 34934  017588                     i2u736_45:
 34935  017588  90D8               	bcf	status,0,c
 34936  01758A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 34937  01758C                     i2u736_44:
 34938  01758C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 34939  01758E  D7FC               	goto	i2u736_45
 34940  017590  5006               	movf	??i2_Byte_SetBit+1,w,c
 34941  017592  0AFF               	xorlw	255
 34942  017594  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 34943  017596  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 34944  01759A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 34945  01759E  5007               	movf	??i2_Byte_SetBit+2,w,c
 34946  0175A0  16DF               	andwf	indf2,f,c
 34947                           
 34948                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 34949  0175A2  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 34950  0175A6  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 34951  0175AA  2A05               	incf	??i2_Byte_SetBit,f,c
 34952  0175AC  D002               	goto	i2u737_44
 34953  0175AE                     i2u737_45:
 34954  0175AE  90D8               	bcf	status,0,c
 34955  0175B0  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 34956  0175B2                     i2u737_44:
 34957  0175B2  2E05               	decfsz	??i2_Byte_SetBit,f,c
 34958  0175B4  D7FC               	goto	i2u737_45
 34959  0175B6  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 34960  0175BA  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 34961  0175BE  5006               	movf	??i2_Byte_SetBit+1,w,c
 34962  0175C0  12DF               	iorwf	indf2,f,c
 34963  0175C2  0012               	return		;funcret
 34964  0175C4                     __end_ofi2_Byte_SetBit:
 34965                           	opt stack 0
 34966                           tosu	equ	0xFFF
 34967                           tosh	equ	0xFFE
 34968                           tosl	equ	0xFFD
 34969                           pclatu	equ	0xFFB
 34970                           pclath	equ	0xFFA
 34971                           tblptru	equ	0xFF8
 34972                           tblptrh	equ	0xFF7
 34973                           tblptrl	equ	0xFF6
 34974                           tablat	equ	0xFF5
 34975                           prodh	equ	0xFF4
 34976                           prodl	equ	0xFF3
 34977                           intcon	equ	0xFF2
 34978                           indf0	equ	0xFEF
 34979                           postinc0	equ	0xFEE
 34980                           fsr0h	equ	0xFEA
 34981                           fsr0l	equ	0xFE9
 34982                           wreg	equ	0xFE8
 34983                           indf1	equ	0xFE7
 34984                           postdec1	equ	0xFE5
 34985                           fsr1h	equ	0xFE2
 34986                           fsr1l	equ	0xFE1
 34987                           indf2	equ	0xFDF
 34988                           postinc2	equ	0xFDE
 34989                           postdec2	equ	0xFDD
 34990                           plusw2	equ	0xFDB
 34991                           fsr2h	equ	0xFDA
 34992                           fsr2l	equ	0xFD9
 34993                           status	equ	0xFD8
 34994                           
 34995 ;; *************** function i2_MXK_SwitchTo *****************
 34996 ;; Defined at:
 34997 ;;		line 105 in file "Library/MXK.c"
 34998 ;; Parameters:    Size  Location     Type
 34999 ;;  pModule         1    wreg     enum E6927
 35000 ;; Auto vars:     Size  Location     Type
 35001 ;;  pModule         1    7[COMRAM] enum E6927
 35002 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 35003 ;; Return value:  Size  Location     Type
 35004 ;;                  1    wreg      unsigned char 
 35005 ;; Registers used:
 35006 ;;		wreg, status,2, status,0, cstack
 35007 ;; Tracked objects:
 35008 ;;		On entry : 0/0
 35009 ;;		On exit  : 0/0
 35010 ;;		Unchanged: 0/0
 35011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35013 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35015 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35016 ;;Total ram usage:        2 bytes
 35017 ;; Hardware stack levels used:    1
 35018 ;; Hardware stack levels required when called:    1
 35019 ;; This function calls:
 35020 ;;		i2_delay_us
 35021 ;; This function is called by:
 35022 ;;		i2_Motor_Step
 35023 ;; This function uses a non-reentrant model
 35024 ;;
 35025                           
 35026                           	psect	text172
 35027  017AE0                     __ptext172:
 35028                           	opt stack 0
 35029  017AE0                     i2_MXK_SwitchTo:
 35030                           	opt stack 15
 35031                           
 35032                           ;incstack = 0
 35033                           ;i2MXK_SwitchTo@pModule stored from wreg
 35034  017AE0  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 35035                           
 35036                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 35037  017AE2  5086               	movf	3974,w,c	;volatile
 35038  017AE4  0B0F               	andlw	15
 35039  017AE6  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 35040                           
 35041                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 35042  017AE8  504B               	movf	_Bus_State,w,c
 35043  017AEA  A4D8               	btfss	status,2,c
 35044  017AEC  D002               	goto	i2l1730
 35045                           
 35046                           ;MXK.c: 110: return 0;
 35047  017AEE  0E00               	movlw	0
 35048  017AF0  0012               	return	
 35049  017AF2                     i2l1730:
 35050                           
 35051                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 35052  017AF2  0E00               	movlw	0
 35053  017AF4  6E4B               	movwf	_Bus_State,c
 35054                           
 35055                           ;MXK.c: 114: if (CUR != pModule)
 35056  017AF6  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 35057  017AF8  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 35058  017AFA  B4D8               	btfsc	status,2,c
 35059  017AFC  D00A               	goto	i2l1732
 35060                           
 35061                           ;MXK.c: 115: {
 35062                           ;MXK.c: 116: PORTG &= ~(0xF);
 35063  017AFE  0EF0               	movlw	240
 35064  017B00  1686               	andwf	3974,f,c	;volatile
 35065                           
 35066                           ;MXK.c: 117: PORTG |= pModule;
 35067  017B02  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 35068  017B04  1286               	iorwf	3974,f,c	;volatile
 35069                           
 35070                           ;MXK.c: 120: delay_us(10);
 35071  017B06  0E00               	movlw	0
 35072  017B08  6E02               	movwf	i2delay_us@us+1,c
 35073  017B0A  0E0A               	movlw	10
 35074  017B0C  6E01               	movwf	i2delay_us@us,c
 35075  017B0E  EC62  F0BC         	call	i2_delay_us	;wreg free
 35076  017B12                     i2l1732:
 35077                           
 35078                           ;MXK.c: 121: }
 35079                           ;MXK.c: 122: return 1;
 35080  017B12  0E01               	movlw	1
 35081  017B14  0012               	return	
 35082  017B16                     __end_ofi2_MXK_SwitchTo:
 35083                           	opt stack 0
 35084                           tosu	equ	0xFFF
 35085                           tosh	equ	0xFFE
 35086                           tosl	equ	0xFFD
 35087                           pclatu	equ	0xFFB
 35088                           pclath	equ	0xFFA
 35089                           tblptru	equ	0xFF8
 35090                           tblptrh	equ	0xFF7
 35091                           tblptrl	equ	0xFF6
 35092                           tablat	equ	0xFF5
 35093                           prodh	equ	0xFF4
 35094                           prodl	equ	0xFF3
 35095                           intcon	equ	0xFF2
 35096                           indf0	equ	0xFEF
 35097                           postinc0	equ	0xFEE
 35098                           fsr0h	equ	0xFEA
 35099                           fsr0l	equ	0xFE9
 35100                           wreg	equ	0xFE8
 35101                           indf1	equ	0xFE7
 35102                           postdec1	equ	0xFE5
 35103                           fsr1h	equ	0xFE2
 35104                           fsr1l	equ	0xFE1
 35105                           indf2	equ	0xFDF
 35106                           postinc2	equ	0xFDE
 35107                           postdec2	equ	0xFDD
 35108                           plusw2	equ	0xFDB
 35109                           fsr2h	equ	0xFDA
 35110                           fsr2l	equ	0xFD9
 35111                           status	equ	0xFD8
 35112                           
 35113 ;; *************** function i2_delay_us *****************
 35114 ;; Defined at:
 35115 ;;		line 255 in file "Library/Types.c"
 35116 ;; Parameters:    Size  Location     Type
 35117 ;;  us              2    0[COMRAM] unsigned short 
 35118 ;; Auto vars:     Size  Location     Type
 35119 ;;  delay_us        4    2[COMRAM] unsigned long 
 35120 ;; Return value:  Size  Location     Type
 35121 ;;                  1    wreg      void 
 35122 ;; Registers used:
 35123 ;;		wreg, status,2, status,0
 35124 ;; Tracked objects:
 35125 ;;		On entry : 0/0
 35126 ;;		On exit  : 0/0
 35127 ;;		Unchanged: 0/0
 35128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35129 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35130 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35132 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35133 ;;Total ram usage:        6 bytes
 35134 ;; Hardware stack levels used:    1
 35135 ;; This function calls:
 35136 ;;		Nothing
 35137 ;; This function is called by:
 35138 ;;		i2_MXK_SwitchTo
 35139 ;; This function uses a non-reentrant model
 35140 ;;
 35141                           
 35142                           	psect	text173
 35143  0178C4                     __ptext173:
 35144                           	opt stack 0
 35145  0178C4                     i2_delay_us:
 35146                           	opt stack 15
 35147                           
 35148                           ;Types.c: 256: unsigned long u;
 35149                           ;Types.c: 257: while (us--) {
 35150                           
 35151                           ;incstack = 0
 35152  0178C4  D016               	goto	i2u740_40
 35153  0178C6                     i2l10001:
 35154                           
 35155                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 35156  0178C6  0E00               	movlw	0
 35157  0178C8  6E03               	movwf	i2delay_us@u,c
 35158  0178CA  0E00               	movlw	0
 35159  0178CC  6E04               	movwf	i2delay_us@u+1,c
 35160  0178CE  0E00               	movlw	0
 35161  0178D0  6E05               	movwf	i2delay_us@u+2,c
 35162  0178D2  0E00               	movlw	0
 35163  0178D4  6E06               	movwf	i2delay_us@u+3,c
 35164  0178D6                     i2l10003:
 35165  0178D6  5003               	movf	i2delay_us@u,w,c
 35166  0178D8  1004               	iorwf	i2delay_us@u+1,w,c
 35167  0178DA  1005               	iorwf	i2delay_us@u+2,w,c
 35168  0178DC  1006               	iorwf	i2delay_us@u+3,w,c
 35169  0178DE  A4D8               	btfss	status,2,c
 35170  0178E0  D008               	goto	i2u740_40
 35171  0178E2  F000               	nop		; ;# 
 35172  0178E4  0E01               	movlw	1
 35173  0178E6  2603               	addwf	i2delay_us@u,f,c
 35174  0178E8  0E00               	movlw	0
 35175  0178EA  2204               	addwfc	i2delay_us@u+1,f,c
 35176  0178EC  2205               	addwfc	i2delay_us@u+2,f,c
 35177  0178EE  2206               	addwfc	i2delay_us@u+3,f,c
 35178  0178F0  D7F2               	goto	i2l10003
 35179  0178F2                     i2u740_40:
 35180  0178F2  0601               	decf	i2delay_us@us,f,c
 35181  0178F4  A0D8               	btfss	status,0,c
 35182  0178F6  0602               	decf	i2delay_us@us+1,f,c
 35183  0178F8  2801               	incf	i2delay_us@us,w,c
 35184  0178FA  E1E5               	bnz	i2l10001
 35185  0178FC  2802               	incf	i2delay_us@us+1,w,c
 35186  0178FE  B4D8               	btfsc	status,2,c
 35187  017900  0012               	return	
 35188  017902  D7E1               	goto	i2l832
 35189  017904                     __end_ofi2_delay_us:
 35190                           	opt stack 0
 35191                           tosu	equ	0xFFF
 35192                           tosh	equ	0xFFE
 35193                           tosl	equ	0xFFD
 35194                           pclatu	equ	0xFFB
 35195                           pclath	equ	0xFFA
 35196                           tblptru	equ	0xFF8
 35197                           tblptrh	equ	0xFF7
 35198                           tblptrl	equ	0xFF6
 35199                           tablat	equ	0xFF5
 35200                           prodh	equ	0xFF4
 35201                           prodl	equ	0xFF3
 35202                           intcon	equ	0xFF2
 35203                           indf0	equ	0xFEF
 35204                           postinc0	equ	0xFEE
 35205                           fsr0h	equ	0xFEA
 35206                           fsr0l	equ	0xFE9
 35207                           wreg	equ	0xFE8
 35208                           indf1	equ	0xFE7
 35209                           postdec1	equ	0xFE5
 35210                           fsr1h	equ	0xFE2
 35211                           fsr1l	equ	0xFE1
 35212                           indf2	equ	0xFDF
 35213                           postinc2	equ	0xFDE
 35214                           postdec2	equ	0xFDD
 35215                           plusw2	equ	0xFDB
 35216                           fsr2h	equ	0xFDA
 35217                           fsr2l	equ	0xFD9
 35218                           status	equ	0xFD8
 35219                           
 35220 ;; *************** function i2_MXK_Release *****************
 35221 ;; Defined at:
 35222 ;;		line 130 in file "Library/MXK.c"
 35223 ;; Parameters:    Size  Location     Type
 35224 ;;		None
 35225 ;; Auto vars:     Size  Location     Type
 35226 ;;		None
 35227 ;; Return value:  Size  Location     Type
 35228 ;;                  1    wreg      unsigned char 
 35229 ;; Registers used:
 35230 ;;		wreg, status,2, status,0
 35231 ;; Tracked objects:
 35232 ;;		On entry : 0/0
 35233 ;;		On exit  : 0/0
 35234 ;;		Unchanged: 0/0
 35235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35240 ;;Total ram usage:        0 bytes
 35241 ;; Hardware stack levels used:    1
 35242 ;; This function calls:
 35243 ;;		Nothing
 35244 ;; This function is called by:
 35245 ;;		i2_Motor_Step
 35246 ;; This function uses a non-reentrant model
 35247 ;;
 35248                           
 35249                           	psect	text174
 35250  018088                     __ptext174:
 35251                           	opt stack 0
 35252  018088                     i2_MXK_Release:
 35253                           	opt stack 16
 35254                           
 35255                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 35256                           
 35257                           ;incstack = 0
 35258  018088  0E01               	movlw	1
 35259  01808A  6E4B               	movwf	_Bus_State,c
 35260                           
 35261                           ;MXK.c: 135: return 1;
 35262                           ;	Return value of i2_MXK_Release is never used
 35263  01808C  0012               	return	
 35264  01808E                     __end_ofi2_MXK_Release:
 35265                           	opt stack 0
 35266                           tosu	equ	0xFFF
 35267                           tosh	equ	0xFFE
 35268                           tosl	equ	0xFFD
 35269                           pclatu	equ	0xFFB
 35270                           pclath	equ	0xFFA
 35271                           tblptru	equ	0xFF8
 35272                           tblptrh	equ	0xFF7
 35273                           tblptrl	equ	0xFF6
 35274                           tablat	equ	0xFF5
 35275                           prodh	equ	0xFF4
 35276                           prodl	equ	0xFF3
 35277                           intcon	equ	0xFF2
 35278                           indf0	equ	0xFEF
 35279                           postinc0	equ	0xFEE
 35280                           fsr0h	equ	0xFEA
 35281                           fsr0l	equ	0xFE9
 35282                           wreg	equ	0xFE8
 35283                           indf1	equ	0xFE7
 35284                           postdec1	equ	0xFE5
 35285                           fsr1h	equ	0xFE2
 35286                           fsr1l	equ	0xFE1
 35287                           indf2	equ	0xFDF
 35288                           postinc2	equ	0xFDE
 35289                           postdec2	equ	0xFDD
 35290                           plusw2	equ	0xFDB
 35291                           fsr2h	equ	0xFDA
 35292                           fsr2l	equ	0xFD9
 35293                           status	equ	0xFD8
 35294                           
 35295 ;; *************** function i2_MXK_Queue *****************
 35296 ;; Defined at:
 35297 ;;		line 144 in file "Library/MXK.c"
 35298 ;; Parameters:    Size  Location     Type
 35299 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 35300 ;;		 -> Absolute function(1), Motor_Step(1), 
 35301 ;; Auto vars:     Size  Location     Type
 35302 ;;		None
 35303 ;; Return value:  Size  Location     Type
 35304 ;;                  1    wreg      void 
 35305 ;; Registers used:
 35306 ;;		wreg, status,2, status,0
 35307 ;; Tracked objects:
 35308 ;;		On entry : 0/0
 35309 ;;		On exit  : 0/0
 35310 ;;		Unchanged: 0/0
 35311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 35312 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35315 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 35316 ;;Total ram usage:        3 bytes
 35317 ;; Hardware stack levels used:    1
 35318 ;; This function calls:
 35319 ;;		Nothing
 35320 ;; This function is called by:
 35321 ;;		i2_Motor_Step
 35322 ;; This function uses a non-reentrant model
 35323 ;;
 35324                           
 35325                           	psect	text175
 35326  018000                     __ptext175:
 35327                           	opt stack 0
 35328  018000                     i2_MXK_Queue:
 35329                           	opt stack 16
 35330                           
 35331                           ;MXK.c: 146: lQueue = pCallback;
 35332                           
 35333                           ;incstack = 0
 35334  018000  C001  F0DB         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 35335  018004  C002  F0DC         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 35336  018008  C003  F0DD         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 35337  01800C  0012               	return		;funcret
 35338  01800E                     __end_ofi2_MXK_Queue:
 35339                           	opt stack 0
 35340                           tosu	equ	0xFFF
 35341                           tosh	equ	0xFFE
 35342                           tosl	equ	0xFFD
 35343                           pclatu	equ	0xFFB
 35344                           pclath	equ	0xFFA
 35345                           tblptru	equ	0xFF8
 35346                           tblptrh	equ	0xFF7
 35347                           tblptrl	equ	0xFF6
 35348                           tablat	equ	0xFF5
 35349                           prodh	equ	0xFF4
 35350                           prodl	equ	0xFF3
 35351                           intcon	equ	0xFF2
 35352                           indf0	equ	0xFEF
 35353                           postinc0	equ	0xFEE
 35354                           fsr0h	equ	0xFEA
 35355                           fsr0l	equ	0xFE9
 35356                           wreg	equ	0xFE8
 35357                           indf1	equ	0xFE7
 35358                           postdec1	equ	0xFE5
 35359                           fsr1h	equ	0xFE2
 35360                           fsr1l	equ	0xFE1
 35361                           indf2	equ	0xFDF
 35362                           postinc2	equ	0xFDE
 35363                           postdec2	equ	0xFDD
 35364                           plusw2	equ	0xFDB
 35365                           fsr2h	equ	0xFDA
 35366                           fsr2l	equ	0xFD9
 35367                           status	equ	0xFD8
 35368                           tosu	equ	0xFFF
 35369                           tosh	equ	0xFFE
 35370                           tosl	equ	0xFFD
 35371                           pclatu	equ	0xFFB
 35372                           pclath	equ	0xFFA
 35373                           tblptru	equ	0xFF8
 35374                           tblptrh	equ	0xFF7
 35375                           tblptrl	equ	0xFF6
 35376                           tablat	equ	0xFF5
 35377                           prodh	equ	0xFF4
 35378                           prodl	equ	0xFF3
 35379                           intcon	equ	0xFF2
 35380                           indf0	equ	0xFEF
 35381                           postinc0	equ	0xFEE
 35382                           fsr0h	equ	0xFEA
 35383                           fsr0l	equ	0xFE9
 35384                           wreg	equ	0xFE8
 35385                           indf1	equ	0xFE7
 35386                           postdec1	equ	0xFE5
 35387                           fsr1h	equ	0xFE2
 35388                           fsr1l	equ	0xFE1
 35389                           indf2	equ	0xFDF
 35390                           postinc2	equ	0xFDE
 35391                           postdec2	equ	0xFDD
 35392                           plusw2	equ	0xFDB
 35393                           fsr2h	equ	0xFDA
 35394                           fsr2l	equ	0xFD9
 35395                           status	equ	0xFD8
 35396                           
 35397                           	psect	text176
 35398  000000                     __ptext176:
 35399                           	opt stack 0
 35400                           tosu	equ	0xFFF
 35401                           tosh	equ	0xFFE
 35402                           tosl	equ	0xFFD
 35403                           pclatu	equ	0xFFB
 35404                           pclath	equ	0xFFA
 35405                           tblptru	equ	0xFF8
 35406                           tblptrh	equ	0xFF7
 35407                           tblptrl	equ	0xFF6
 35408                           tablat	equ	0xFF5
 35409                           prodh	equ	0xFF4
 35410                           prodl	equ	0xFF3
 35411                           intcon	equ	0xFF2
 35412                           indf0	equ	0xFEF
 35413                           postinc0	equ	0xFEE
 35414                           fsr0h	equ	0xFEA
 35415                           fsr0l	equ	0xFE9
 35416                           wreg	equ	0xFE8
 35417                           indf1	equ	0xFE7
 35418                           postdec1	equ	0xFE5
 35419                           fsr1h	equ	0xFE2
 35420                           fsr1l	equ	0xFE1
 35421                           indf2	equ	0xFDF
 35422                           postinc2	equ	0xFDE
 35423                           postdec2	equ	0xFDD
 35424                           plusw2	equ	0xFDB
 35425                           fsr2h	equ	0xFDA
 35426                           fsr2l	equ	0xFD9
 35427                           status	equ	0xFD8
 35428                           
 35429                           	psect	rparam
 35430  0000                     tosu	equ	0xFFF
 35431                           tosh	equ	0xFFE
 35432                           tosl	equ	0xFFD
 35433                           pclatu	equ	0xFFB
 35434                           pclath	equ	0xFFA
 35435                           tblptru	equ	0xFF8
 35436                           tblptrh	equ	0xFF7
 35437                           tblptrl	equ	0xFF6
 35438                           tablat	equ	0xFF5
 35439                           prodh	equ	0xFF4
 35440                           prodl	equ	0xFF3
 35441                           intcon	equ	0xFF2
 35442                           indf0	equ	0xFEF
 35443                           postinc0	equ	0xFEE
 35444                           fsr0h	equ	0xFEA
 35445                           fsr0l	equ	0xFE9
 35446                           wreg	equ	0xFE8
 35447                           indf1	equ	0xFE7
 35448                           postdec1	equ	0xFE5
 35449                           fsr1h	equ	0xFE2
 35450                           fsr1l	equ	0xFE1
 35451                           indf2	equ	0xFDF
 35452                           postinc2	equ	0xFDE
 35453                           postdec2	equ	0xFDD
 35454                           plusw2	equ	0xFDB
 35455                           fsr2h	equ	0xFDA
 35456                           fsr2l	equ	0xFD9
 35457                           status	equ	0xFD8
 35458                           
 35459                           	psect	temp
 35460  000051                     btemp:
 35461                           	opt stack 0
 35462  000051                     	ds	1
 35463  0000                     int$flags	set	btemp
 35464  0000                     wtemp6	set	btemp+1
 35465                           tosu	equ	0xFFF
 35466                           tosh	equ	0xFFE
 35467                           tosl	equ	0xFFD
 35468                           pclatu	equ	0xFFB
 35469                           pclath	equ	0xFFA
 35470                           tblptru	equ	0xFF8
 35471                           tblptrh	equ	0xFF7
 35472                           tblptrl	equ	0xFF6
 35473                           tablat	equ	0xFF5
 35474                           prodh	equ	0xFF4
 35475                           prodl	equ	0xFF3
 35476                           intcon	equ	0xFF2
 35477                           indf0	equ	0xFEF
 35478                           postinc0	equ	0xFEE
 35479                           fsr0h	equ	0xFEA
 35480                           fsr0l	equ	0xFE9
 35481                           wreg	equ	0xFE8
 35482                           indf1	equ	0xFE7
 35483                           postdec1	equ	0xFE5
 35484                           fsr1h	equ	0xFE2
 35485                           fsr1l	equ	0xFE1
 35486                           indf2	equ	0xFDF
 35487                           postinc2	equ	0xFDE
 35488                           postdec2	equ	0xFDD
 35489                           plusw2	equ	0xFDB
 35490                           fsr2h	equ	0xFDA
 35491                           fsr2l	equ	0xFD9
 35492                           status	equ	0xFD8


Data Sizes:
    Strings     246
    Constant    940
    Data        29
    BSS         707
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    123     159
    BANK1           256      2     252
    BANK2           256     13     123
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_17(CODE[4]), STR_16(CODE[3]), STR_15(CODE[24]), STR_14(CODE[24]), 
		 -> STR_13(CODE[24]), STR_12(CODE[26]), STR_11(CODE[20]), STR_10(CODE[31]), 
		 -> STR_9(CODE[22]), STR_8(CODE[11]), STR_7(CODE[26]), STR_6(CODE[11]), 
		 -> STR_5(CODE[5]), STR_4(CODE[4]), STR_3(CODE[12]), STR_2(CODE[32]), 
		 -> STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(COMRAM[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(COMRAM[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(COMRAM[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(COMRAM[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK1[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), 

    ADC_Sequence@pItemA	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_displayPositionMode
    _stepMode->_Motor_Speed
    _positionMode->_Motor_Speed
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _FunctADC->_ADC_Start
    _ADC_Start->_ADC_SetChannel
    _initialise->_HMI_Init
    _Motor_Init->_Port_SetPinType
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _FunctInitADC->_ADC_Init
    _ADC_Init->_ADC_SetupIO
    _displayStepMode->_printf
    _displaySID->_printf
    _displayPositionMode->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fladd
    _eval_poly->___fladd
    _ADC_Voltage->___flmul
    _displayNullMode->_printf
    _displayContinuousMode->_printf
    _printf->___flsub
    _scale->___flmul
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _fround->___flmul
    ___flmul->___awdiv
    ___flmul->___xxtofl
    ___awdiv->___awmod
    ___awdiv->___wmul
    ___llmod->___lldiv
    ___fltol->___flmul
    ___flsub->___fladd
    ___fladd->_fround
    _continuousMode->_Motor_Speed
    _Motor_Speed->_Timer0_Init
    _Timer0_Init->___lldiv
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _displayPositionMode->_pow

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1929273
                                              0 BANK1      2     2      0
                     _Console_Render
              _Console_SetForecolour
                         _HMI_Render
                      _HMI_SetNumber
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                     _continuousMode
              _displayContinuousMode
                    _displayNullMode
                _displayPositionMode
                         _displaySID
                    _displayStepMode
                            _getMode
                         _initialise
                           _inputVar
                           _nullMode
                       _positionMode
                             _printf
                           _stepMode
 ---------------------------------------------------------------------------------
 (1) _stepMode                                             0     0      0    6882
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (1) _positionMode                                         2     2      0    6882
                                             31 BANK0      2     2      0
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (1) _nullMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inputVar                                             1     1      0   95917
                                             36 BANK0      1     1      0
                           _FunctADC
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   83949
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   83949
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   36581
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    3486
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    2401
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) ___lwmod                                              5     1      4     536
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (7) ___lwdiv                                              7     3      4     545
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (7) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctADC                                             0     0      0     310
                          _ADC_Start
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2     310
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0 1101474
                       _Console_Init
                       _FunctInitADC
                    _FunctInitButton
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   89390
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291428
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262573
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (7) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  218813
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   87051
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    3876
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (8) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (9) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (10) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctInitADC                                         0     0      0    2935
                           _ADC_Init
                       _ADC_Sequence
 ---------------------------------------------------------------------------------
 (3) _ADC_Sequence                                         4     0      4    1067
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             3     0      3    1868
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (4) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStepMode                                      0     0      0   84176
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displaySID                                           0     0      0   84511
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Console_SetForecolour                                2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _displayPositionMode                                  8     8      0  217360
                                            115 BANK0      8     8      0
                        _ADC_Voltage
                            ___awdiv
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _pow
                             _printf
 ---------------------------------------------------------------------------------
 (2) _pow                                                 21    13      8  101604
                                            107 BANK0      8     0      8
                                              0 BANK2     13    13      0
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (3) _log                                                  6     2      4   32964
                                             88 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _exp                                                 11     7      4   52486
                                             96 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (4) _ldexp                                                8     2      6     663
                                             88 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (4) _floor                                               10     6      4   11731
                                             72 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) _eval_poly                                           16     8      8   15605
                                             72 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4   13705
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (4) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _displayNullMode                                      0     0      0   84176
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayContinuousMode                                0     0      0   84176
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              41    35      6   84176
                                             80 BANK0     33    27      6
                            ___awdiv
                            ___fladd
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                            ___lldiv
                            ___llmod
                             ___wmul
                           ___xxtofl
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               13     9      4   17672
                                             39 BANK0      9     5      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    5316
                                             26 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    5285
                                             22 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    4734
                                             14 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    13      4   17393
                                             39 BANK0     13     9      4
                            ___awdiv
                            ___awmod
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    9409
                                             14 BANK0     25    17      8
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    3169
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    4397
                                              6 BANK0      8     4      4
                            ___awmod (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         17     9      8     758
                                              0 BANK0     17     9      8
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          14     6      8     758
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1456
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8    1752
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4    1401
                                             39 BANK0     10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flsub                                              8     0      8    5967
                                             72 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8    5030
                                             52 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flneg                                              4     0      4     673
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    2394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _continuousMode                                       0     0      0    6882
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    5359
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    4050
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    3585
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1523
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35935
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   17128
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1144
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Console_SetForecolour
   _HMI_Render
     _OutSeg
       _SPI_Send
   _HMI_SetNumber
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
       _reverse
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _continuousMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _displayContinuousMode
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displayNullMode
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displayPositionMode
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___wmul
     ___xxtofl
     _pow
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _exp
         ___fldiv
         ___flge
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg
         ___flsub
           ___fladd
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
           ___xxtofl (ARG)
         ___fltol
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
         _floor
           ___fladd
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
           ___flge
           ___fltol
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___fladd
               ___flmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod
                 ___flmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                     ___wmul (ARG)
                   ___awmod (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
       _log
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl
         _eval_poly
           ___fladd
             ___flmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod
               ___flmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                   ___wmul (ARG)
                 ___awmod (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
         _frexp
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displaySID
     _Console_SetForecolour
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _displayStepMode
     _printf
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___flge
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod
             ___flmul
               ___awdiv (ARG)
                 ___awmod (ARG)
                 ___wmul (ARG)
               ___awmod (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
       ___xxtofl
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___awmod (ARG)
               ___wmul (ARG)
       _scale
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _getMode
   _initialise
     _Console_Init
     _FunctInitADC
       _ADC_Init
         _ADC_Calibrate
           _ADC_Off
           _ADC_On
         _ADC_ClockDivision
         _ADC_ConversionTime
         _ADC_SetChannel
         _ADC_SetupIO
       _ADC_Sequence
     _FunctInitButton
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _inputVar
     _FunctADC
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _nullMode
   _positionMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _printf
     ___awdiv
       ___awmod (ARG)
       ___wmul (ARG)
     ___fladd
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod
         ___flmul
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
     ___flge
     ___flmul
       ___awdiv (ARG)
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
     ___flsub
       ___fladd
         ___flmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
           ___awmod
           ___flmul
             ___awdiv (ARG)
               ___awmod (ARG)
               ___wmul (ARG)
             ___awmod (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       ___xxtofl (ARG)
     ___fltol
       ___flmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___wmul
     ___xxtofl
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
             ___awmod (ARG)
             ___wmul (ARG)
     _scale
       ___awdiv
         ___awmod (ARG)
         ___wmul (ARG)
       ___awmod
       ___flmul
         ___awdiv (ARG)
           ___awmod (ARG)
           ___wmul (ARG)
         ___awmod (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
   _stepMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      D      7B       9       48.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      2      FC       7       98.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7B      9F       5       99.4%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     266      12        0.0%
DATA                 0      0     392       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Aug 25 12:09:56 2017

                   i2_Timer0_Stop 8082                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 51B6  
                               _A 004C                                 l8 54B8  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 004D                                 _i 0034  
                               _j 0033                                 _l 004F  
                               _u 0032                                 _w 0050  
                    ___fldiv@sign 006C                                l11 4758  
                              l12 4742                                l90 468E  
                              l85 458A                                l87 45F8  
                              l89 4664                      ___awdiv@sign 006B  
              __size_of_ADC_Start 0084               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 7EFE                LCD_DrawField@pSize 0078  
         __end_of_displayNullMode 7884                LCD_DrawField@count 007E  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 8026  
            ADC_ClockDivision@reg 0061                               l120 66E0  
                             l121 66F6                               l122 670C  
                             l220 72A8                               l117 6722  
                             l221 726C                               l118 66CA  
                             l230 74FA                               l222 72B8  
                             l223 728A                       ?_LED_Toggle 0001  
                             l234 768C                               l235 765C  
                             l227 7516                               l403 3D72  
                             l412 38B0                               l228 74DE  
                             l340 61B0                               l404 3D12  
                             l421 3844                               l413 3746  
                             l237 7674                               l341 61BE  
                             l405 3DA2                     ??_Console_Tab 006E  
                             l414 38CC                               l430 5890  
                             l350 62B8                               l342 61CC  
                             l510 2D34                               l406 3D2A  
                             l183 636C                               l415 376C  
                             l351 6248                               l343 61DA  
                             l511 2E44                               l407 3D42  
                             l184 6346                               l600 1726  
                             l432 58BA                               l344 61E8  
                             l512 2D56                               l408 3D5A  
                             l417 37D8                               l601 18BA  
                             l433 58EA                               l353 6256  
                             l337 6212                               l345 61F6  
                             l610 1942                               l602 1758  
                             l354 6264                               l346 6204  
                             l338 61A2                               l370 6142  
                             l611 1990                               l603 18CC  
                             l427 5914                               l355 6272  
                             l363 616C                               l371 6150  
                             l531 224E                       ?_HMI_GetBar 0001  
                             l612 19DE                               l604 1806  
                             l356 6280                               l372 615E  
                             l364 60FC                               l532 2272  
                             l516 2D9E                               l357 628E  
                             l509 2E28                               l614 1AC0  
                             l358 629C                               l366 610A  
                             l526 2292                               l615 1AB8  
                             l607 1A2C                               l359 62AA  
                             l367 6118                               l519 2DE6  
                             l616 1AD2                               l608 18F4  
                             l368 6126                               l528 22B0  
                             l393 73D4                               l617 1ABC  
                             l609 1A4A                               l369 6134  
                             l529 222E                               l483 2B94  
                             l732 65CA                               l476 2C6C  
                             l900 290C                               l733 65BE  
                             l389 70CC                               l477 2ADE  
                             l397 7650                               l901 2910  
                             l726 5C5A                               l478 2C88  
                             l486 2C00                               l654 7CF8  
                             l910 2934                               l902 2914  
                             l727 5C4E                               l479 2B28  
                             l655 7CF0                               l911 2938  
                             l903 2918                               l824 7000  
                             l832 7488                               l912 293C  
                             l904 291C                               l681 6FA4  
                             l673 7C00                               l657 7CF4  
                             l913 2940                               l905 2920  
                             l921 6F74                               l914 2944  
                             l906 2924                               l922 6F40  
                             l930 52F4                               l819 6B7A  
                             l915 2948                               l907 2928  
                             l684 6FBA                               l916 294C  
                             l908 292C                               l860 286C  
                             l781 79AC                               l597 1734  
                             l853 2954                               l917 2950  
                             l909 2930                               l861 2870  
                             l678 6FE0                               l686 6FCA  
                             l598 171C                               l870 2894  
                             l862 2874                               l854 2858  
                             l679 6F94                               l599 1744  
                             l871 2898                               l863 2878  
                             l776 77A4                               l880 28BC  
                             l872 289C                               l864 287C  
                             l856 285C                               l928 5374  
                             l881 28C0                               l873 28A0  
                             l865 2880                               l857 2860  
                             l929 5344                               l890 28E4  
                             l882 28C4                               l874 28A4  
                             l866 2884                               l858 2864  
                             l891 28E8                               l883 28C8  
                             l875 28A8                               l867 2888  
                             l859 2868                               l892 28EC  
                             l884 28CC                               l876 28AC  
                             l868 288C                               l893 28F0  
                             l885 28D0                               l877 28B0  
                             l869 2890                               l990 67EC  
                             l894 28F4                               l886 28D4  
                             l878 28B4                               l983 64AC  
                             l895 28F8                               l887 28D8  
                             l879 28B8                               l992 67FC  
                             l984 6430                               l976 6904  
                             l896 28FC                               l888 28DC  
                             l985 64A8                               l897 2900  
                             l889 28E0                               l978 6914  
                             l898 2904                               l899 2908  
                             l997 733A                               l999 735E  
                             _PR2 000FCB           __end_of_displayStepMode 69FC  
                             _dip 0123                               _exp 25B8  
                             _log 40D6                               _val 00E8  
                             _pow 3166                   __end_of_ADC_Off 806A  
                     ?_HMI_SetBar 0001                      ___awmod@sign 0065  
              ??_Event_TestButton 0079                      _Word_GetPair 7980  
                             prod 000FF3                       ?_HMI_Render 0001  
             MXK_SwitchTo@pModule 0067        __end_of_ADC_ConversionTime 76E6  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                    Console_Tab@c 0075                      Console_Tab@i 0074  
             LCD_DrawField@pField 0072                      Console_Tab@t 0073  
      __size_of_ADC_ClockDivision 008A                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 78C4  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 7528           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 604C                      ___fltol@exp1 0090  
                    _Word_SetPair 7774                              l1000 737A  
                            l1010 5984                              l1004 716E  
                   ?_Byte_GetZone 0060                              l1005 719C  
                            l1040 38FA                              l1200 5B7A  
                            l1009 5990                              l1041 3900  
                            l1201 5BCE                              l1042 3906  
                            l1202 5BEA                              l1043 390C  
                            l1036 3A56                              l1044 3912  
                            l1300 6882                              l1204 5C14  
                            l2100 5826                              l1045 3918  
                            l1037 38F4                              l1301 6886  
                            l1205 5BFA                              l1062 30F0  
                            l1302 6890                              l2110 4C84  
                            l1063 311E                              l1047 39BE  
                            l1303 689E                              l1207 5C26  
                            l2111 4CC6                              l1056 2F80  
                            l2200 0560                              l2040 70FA  
                            l2120 4CFA                              l2112 4C8A  
                            l1057 3146                              l2201 0564  
                            l1313 76C6                              l1153 355E  
                            l2121 4D00                              l2113 4C90  
                            l1082 5676                              l1058 2F88  
                            l1146 6A9C                              l2202 0588  
                            l2050 7434                              l2042 712C  
                            l2122 4D06                              l2114 4C96  
                            l1059 2FB2                              l2203 06D2  
                            l2115 4CE6                              l2107 4C2A  
                            l1084 567E                              l2204 05EA  
                            l2052 743E                              l1077 5646  
                            l2213 07B8                              l2061 5720  
                            l2053 7448                              l2117 4D0C  
                            l2109 4C9C                              l1158 79FA  
                            l2150 0B36                              l2214 0858  
                            l2206 06EE                              l2062 5730  
                            l2054 7452                              l1254 7F96  
                            l2118 4CF4                              l1079 5656  
                            l2151 0A22                              l2215 07C8  
                            l2207 06E0                              l2063 575C  
                            l2119 4D3A                              l2400 64FC  
                            l2144 2458                              l1280 6A18  
                            l2209 0740                              l2161 0010  
                            l2065 5770                              l2081 4044  
                            l2073 69D8                              l2049 745C  
                            l2402 651C                              l2154 0B04  
                            l2170 0038                              l2162 0026  
                            l2082 4054                              l2403 6510  
                            l2147 2560                              l2155 0CB8  
                            l2163 005C                              l2171 0050  
                            l2067 5780                              l2075 69E8  
                            l1283 6A7A                              l2420 42AC  
                            l2172 06FC                              l2180 038C  
                            l1276 6A00                              l2421 4300  
                            l2157 0D9A                              l2173 00FC  
                            l2430 43CC                              l2422 4354  
                            l2406 6546                              l2166 0032  
                            l1294 68A6                              l1630 4B6C  
                            l2431 43BC                              l2407 6554  
                            l2183 0322                              l2175 0180  
                            l2167 0096                              l1295 686C  
                            l1631 4BC8                              l2095 7312  
                            l2424 43A0                              l2408 6568  
                            l2176 0204                              l1296 68D0  
                            l1632 4BAC                              l2425 438C  
                            l1297 6876                              l2442 7A98  
                            l2418 4286                              l2522 3AC6  
                            l2194 0512                              l2178 0236  
                            l1298 687A                              l1730 7816  
                            l2603 5AF0                              l2435 3E0A  
                            l2195 047E                              l2179 0288  
                            l1299 687E                              l1627 4C14  
                            l2604 5AE0                              l2436 3E58  
                            l2700 0E18                              l2524 3B00  
                            l1724 794E                              l1732 783E  
                            l1628 4C0A                              l2437 3EAA  
                            l2701 0E0E                              l2613 663A  
                            l2525 3B54                              l2197 052E  
                            l2189 0404                              l1629 4B8A  
                            l2438 3EFC                              l2614 662A  
                            l2534 3C0E                              l2526 3B98  
                            l2390 5A44                              l2198 0520  
                            l1726 797C                              l2607 5B4A  
                            l2703 0E44                              l2535 3BFE  
                            l1735 7EAC                              l2608 5B5C  
                            l2712 0FA0                              l2704 0E58  
                            l2528 3BE2                              l2713 0F6C  
                            l2705 0E86                              l2473 517E  
                            l2465 50D0                              l2617 6684  
                            l2529 3BCE                              l2393 5A86  
                            l2722 100E                              l2714 0F80  
                            l2706 0E7C                              l2474 516E  
                            l2618 6696                              l2394 5A94  
                            l2386 5A10                              l2802 15D8  
                            l2731 1152                              l2723 1014  
                            l2715 0F86                              l2467 5152  
                            l2395 5AA8                              l2387 5A26  
                            l2811 1682                              l2803 15AE  
                            l1827 48AC                              l2740 11B4  
                            l2732 1168                              l2724 101E  
                            l2716 0F90                              l2708 0EEC  
                            l2476 51A4                              l2468 513E  
                            l2820 35BA                              l2812 16A8  
                            l2804 15C4                              l2900 508C  
                            l1828 48CC                              l2660 6C58  
                            l2733 1174                              l2709 0EB0  
                            l2821 35E2                              l2389 5A50  
                            l2901 4FE8                              l2661 6C66  
                            l2750 1262                              l2726 1100  
                            l2718 1030                              l2830 3694  
                            l2814 16D6                              l2670 724E  
                            l2743 120A                              l2735 1188  
                            l2719 0FD0                              l2823 35FA  
                            l2399 64EC                              l2815 1700  
                            l2671 725C                              l1784 4A06  
                            l2728 1120                              l2824 35EA  
                            l2816 16F6                              l2760 1BB4  
                            l2656 6C22                              l1785 4A14  
                            l2809 1632                              l2761 1BE2  
                            l2657 6C16                              l1873 7A30  
                            l2834 36CA                              l2826 3656  
                            l2770 1D0E                              l2762 1BD8  
                            l2850 25E0                              l2690 32A8  
                            l2666 7224                              l1787 4A1E  
                            l2747 123E                              l2835 371C  
                            l2827 3638                              l2819 35AA  
                            l2771 1D62                              l2691 327A  
                            l2667 7218                              l2748 124A  
                            l2764 1C36                              l2756 1B56  
                            l2852 262A                              l2692 3354  
                            l2749 124E                              l2829 36A4  
                            l2781 1E0C                              l2757 1B84  
                            l2861 4EC2                              l2853 2674  
                            l2790 1292                              l2774 1DB2  
                            l2766 1C64                              l2758 1B7A  
                            l2870 5D16                              l2862 4EAE  
                            l2854 26B2                              l2686 31CA  
                            l2791 12BC                              l2783 1E5C  
                            l2775 1D88                              l2767 1D66  
                            l2855 2840                              l2687 31B6  
                            l2792 12B6                              l2784 1E8A  
                            l2776 1D9E                              l2768 1CE2  
                            l2864 4EE4                              l2856 2808  
                            l2793 12CE                              l2785 1EC0  
                            l2769 1D1A                              l2865 4F80  
                            l2689 31F2                              l2794 12EC  
                            l2786 1ED0                              l2874 4D72  
                            l2699 0DEA                              l2795 1316  
                            l2787 1ED4                              l2796 1310  
                            l2876 4DD8                              l2892 40FA  
                            l2797 1328                              l2798 1350  
                            l2878 4E1A                              l2894 412C  
                            l2879 4E08                              ?_exp 00C0  
                            ?_log 00B8                    ??_Console_Init 0060  
           Port_SetPinType@pInput 0086                              ?_pow 00CB  
                            STR_1 FF94                              STR_2 FF09  
                            STR_3 FFD5                              STR_4 FFF8  
                            STR_5 FFF7                              STR_6 FFE1  
                            STR_7 FF62                              STR_8 FFEC  
                            STR_9 FFAB                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 001E  
                            _LATG 000F8F                      printf@tmpval 00C8  
             __end_of_GetPortPORT 62E8                              _PIR1 000F9E  
                            _PIR2 000FA1                              _PIR3 000FA4  
             __end_of_GetPortTRIS 619C                              _SPI1 0161  
                            _SPI2 016C                              _TMR0 000FD6  
                            _gISR 010C                Event_DIPSwitch@Bar 007A  
                   ??_Byte_GetBit 0063                              _diff 00E4  
            __size_of_ADC_SetupIO 0032                SPI_MaxSpeed@pInput 006F  
                   ?_Byte_SetByte 0060                     ?_Byte_SetPair 006B  
                 __end_of_SPI_DCS 7C0E                              _main 4C26  
                            _mode 002C                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 006B                              _itos 52B6  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     ?_Byte_SetZone 0060  
                            btemp 0051                              _zero 004E  
                            exp@x 00C0                              log@x 00B8  
                __end_of_ADC_Init 6BF8                     ??_Byte_SetBit 0064  
                            pow@x 00CB                              pow@y 00CF  
              __size_of_LCD_Reset 0050              __size_of_ADC_Voltage 00D8  
                            prodh 000FF4                              prodl 000FF3  
                Motor_Move@pDelta 0065                              start 14AA  
              __size_of_LCD_Write 0022                     __CFG_IESO$OFF 000000  
                 ___fldiv@new_exp 0071                 Timer0_Init@DIVIDE 0077  
                 ?_SPI_DisableISR 0060                  Motor_Move@pMotor 0063  
             HMI_SetButton@pValue 0066                     Console_Init@x 0062  
                   Console_Init@y 0063                    ?i2_Timer0_Stop 0001  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FEAF              Set_Rotation@rotation 0066  
          __size_of_HMI_SetButton 0090            __size_of_HMI_SetNumber 002A  
                     ?_ISR_Enable 0001                             ??_exp 00C4  
                           ??_log 00BC                             ??_pow 00D3  
    __size_of_Console_ClearCursor 0040                  __end_of_LCD_Fill 7432  
                __end_of_LCD_Init 46DA                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 72C8  
                   ??_Button_Init 00A8           GetPortProperties@pInput 0062  
                   ??_Button_Poll 007E                  __end_of_HMI_Init 3560  
                           l12501 3F48                             l13119 5C14  
                           l13305 48AC                             l13241 7012  
                           l13067 5360                             l13239 7000  
                           l13247 703E                             l13343 7488  
                           l13345 749A                             l15205 45F8  
                           l15215 469C                             l15305 564C  
                           l15233 6E94                             l15229 6E86  
                           l15333 6A94                             l12935 67F2  
                           l14711 7402                             l12929 67E2  
                           l15187 2808                             l15275 690A  
                           l15355 3532                             l14715 7410  
                           l15269 68FA                  __end_of_HMI_Poll 6D5A  
                           l14479 1EC0                             l14751 3D08  
                           l15633 0520                             l15609 040A  
                           l15299 563C                             l15581 0288  
                           l15681 0746                             l14859 4A06  
                           l15933 79C8                             l15589 02F0  
                           l15699 07C8                             l15897 2FA8  
                           _I2C1T 003A                             _I2C2T 01C7  
                   ___fltol@sign1 008F                   __end_of___fladd 1274  
                           ?_main 0001                   __end_of___fldiv 1EF8  
                 __end_of___awdiv 5AB2                   __end_of___flneg 7AAA  
                           ?_itos 0067                             STR_10 FF29  
                           STR_11 FFC1                             STR_12 FF48  
                           STR_13 FF7C                             STR_14 FF7C  
                           STR_15 FF7C                             STR_16 FFFC  
                           STR_17 FFE8                   __end_of___awmod 6572  
                 __end_of___flmul 171A                   __end_of___flsub 772E  
                 __end_of___fltol 51B6                   _Event_DIPSwitch 7C3E  
                 __end_of___lldiv 5B6E                             u11000 0F50  
                           u10210 6B14                             u10300 7762  
                           u11030 0FAC                             u10305 775C  
                           u10170 6594                             u10244 71BC  
                           u10420 722A                             u10245 71B6  
                           u10190 65FA                             u10254 71EE  
                           u10510 5360                             u10255 71E8  
                           u11240 121C                             u11160 118E  
                           u10360 6840                             u10520 716A  
                           u10177 658A                             u10610 5A56  
                           u11410 162C                             u10370 6846  
                           u10530 7194                             u10274 5C96  
                           u10275 5C90                             u10195 65F4  
                           u12140 1E06                             u13020 267E  
                           u10284 5CC8           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 0068                             u10445 7FC2  
                           u10285 5CC2                             u10446 7FC4  
                           u11190 11AE                             u12230 6522  
                           u11350 133C                             u13030 2680  
                           u10710 703E                             u13110 469C  
                           u10390 6C28                             u11440 1696  
                           u11360 1550                             u10800 4918  
                 __end_of___llmod 66A8                             u10650 5AF6  
                           u11530 50F0                             u11450 16BC  
                           u12170 1E70                             u12330 4DA4  
                           u13140 6EB0                             u12180 1E9E  
                           u11700 5D48                             u11365 1544  
                           u12510 742C                             u13070 4588  
                           u10830 74C0                             u11535 50E4  
                           u13240 56C0                             u13250 56CC  
                           u11570 5188                             u11650 36B2  
                           u14210 579C                             u12290 4ED2  
                           u12338 4DA8                             u10770 75FC  
                           u11708 5D4C                             u12428 5524  
                           u12700 4B9E                             u12540 3DA8  
                           u11805 21B8                             u12550 7B38  
                           u14230 69CE                             u13190 696C  
                           u12438 46EC                             u14118 5DA4  
                           u11815 21FA                             u10775 75F6  
                           u12439 4700                             u14119 5DB8  
                           u14160 570E                             u14128 5DCE  
                           u14320 57EC                             u12801 3ADC  
                           u10785 4864                             u11745 1F26  
                           u14129 5DE2                             u13290 6AEA  
                           u12650 4A72                             u13530 0456  
                           u13450 024C                             u11914 7B64  
                           u14138 5DEE                             u12555 7B32  
                           u11915 7B5E                             u11755 1F3E  
                           u14139 5E02                             u10980 0F36  
                           u13460 029E                             u14260 403A  
                           u10884 679C                             u14148 5E0E  
                           u13285 6AAC                             u11765 1F56  
                           u10885 6796                             u14149 5E22  
                           u10990 0F4E                             u14158 5E2E  
                           u11775 1F78                             u14159 5E42  
                           u13640 0792                             u13560 0542  
                           u13720 325C                             u11880 76C0  
                           u12680 4B4A                             u12488 4828  
                           u11785 20F8                             u12930 43D6  
                           u13570 0558                             u13490 02F0  
                           u12690 4B5E                             u11795 2176  
                           u12860 3C18                             u13660 086E  
                           u12781 3AA2                             u12950 6640  
                           u13980 312E                             _INDEX 00F8  
                           u14958 7918                             u14959 792E  
                 __end_of___lwdiv 6C70                             _MASKS FCBF  
                 __end_of___lwmod 7266                             i2l430 6064  
                           i2l432 608A                             i2l433 60B4  
                           i2l427 60DA                             i2l732 6CBC  
                           i2l733 6CB6                             i2l832 78C6  
                           i2l781 7C2C                   ___awdiv@counter 006A  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0018  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                   ?_FunctInitADC 0001                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 0076                   __end_of_getMode 7486  
                  __CFG_FCMEN$OFF 000000                             _PortA 0264  
                           _PortB 01A9                             _PortC 01B3  
                           _PortD 019F                             _PortE 0195  
                           _PortF 01BD                             _PortG 018B  
         __end_of_Port_SetPinType 38EE                   _ADC_Initialised 0036  
                  ??_Byte_GetPair 006C                             _angle 00DE  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 0075  
           __size_of_ADC_Sequence 0046                   __end_of_dpowers FC9F  
                  ??_Byte_GetZone 0065                             _floor 4E6E  
                           _ldexp 4D4A                    Button_Poll@Pin 0083  
                           _frexp 5CDE                             _errno 011B  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 59F4  
                           _scale 0892                  __end_of_MXK_Init 4568  
                           _speed 00E2              i2Byte_GetPair@pInput 000A  
                           _putch 7FF2                             _steps 00E0  
                __end_of_SPI_Init 1B38                  __end_of_SPI_Send 6FFE  
           __end_ofi2_MXK_Release 808E                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 6F92  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 0063  
               __end_of_ADC_Start 6A80                    ??_Byte_SetPair 006F  
                           pow@yi 0277                    ??_Byte_SetQuad 006F  
                           plusw2 000FDB                    ??_Byte_SetZone 0066  
                           status 000FD8                             wtemp6 0052  
          __size_of_ADC_Calibrate 0014                   _Configure_GPIOs 6EB6  
            i2MXK_Queue@pCallback 0001                       i2delay_us@u 0003  
                  _LCD_Word_Write 7E76               __size_of_LED_Toggle 0048  
             __size_of_HMI_GetBar 0006                     ?_HMI_UpSwitch 0001  
                     exp@exponent 00C8                        _Event_NULL 8092  
     __size_of_Port_CheckPairType 006A                       ldexp@newexp 00BC  
             __size_of_HMI_SetBar 000A                   __initialization 5EF6  
             __size_of_HMI_Render 003E                       log@exponent 00BC  
             __end_of_Byte_GetBit 7B4A                    _remainingSteps 011F  
                    __end_of_main 4D4A                      __end_of_itos 538E  
            HMI_SetButton@reindex 0062                      SPI_Send9@dat 0125  
             __end_of_Byte_SetBit 7204                  __end_of_FunctADC 7FB4  
                __end_of_InitList FC0F       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 7FC6                         ??_ADC_Off 0060  
     __size_of_Port_CheckPortType 0048                       HMI_Render@a 0068  
                          ??_main 01FA                  ?_displayNullMode 0001  
                    _ADC_Sequence 77BA                            ??_itos 006B  
        __size_of_FunctInitButton 00A2           _Console_MakeField$10974 006E  
                   __activetblptr 000003                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 7578                 Port_SetPin@pValue 0072  
                ?_displayStepMode 0001              __size_of__tdiv_to_l_ 019E  
                  ??_FunctInitADC 0067                         ??_LED_Set 0075  
               _MXK_InitDIPSwitch 7DFE                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 7DA2                       _GetPortPORT 6242  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 60F6  
                 ??_LCD_DrawField 007C        __end_of_PortProperty_Valid 6B7E  
                __end_of_Port_Set 22B2                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0066               __end_of_Button_Init 553A  
             __end_of_Button_Poll 4840                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 6740                         ??_SPI_DCS 0062  
                          ?_floor 00A8                            ?_ldexp 00B8  
                          ?_frexp 0060                  ___llmod@dividend 006D  
                          ?_scale 0087                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _ADC_On 807C  
                   _HMI_SetNumber 7C9A            Port_SetQuadType@Output 009A  
                          _ANCON0 000FC1                  ___awdiv@dividend 0066  
                  _continuousMode 7B7C                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
           _Console_SetForecolour 8050                  _Console_FormFeed 67D0  
          Port_SetQuadType@pInput 0096                            i2l1630 521C  
                          i2l1631 5268                            i2l1632 5254  
                          i2l1730 7AF2                            i2l1627 52A4  
                          i2l1732 7B12                            i2l1628 529A  
                          i2l1629 5232                            i2l1590 145E  
                  __CFG_WDTEN$OFF 000000               __size_of_ISR_Enable 000A  
          __end_of_LCD_Word_Write 7E94                    _Timer0_Restart 800E  
             ??_MXK_InitDIPSwitch 009B                  __end_of___xxtofl 372E  
                  i2_MXK_SwitchTo 7AE0                   Byte_GetBit@pBit 0062  
    Console_SetForecolour@pColour 0060                        _Reset_High 7DE0  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077            ADC_SetChannel@pChannel 0061  
                __end_of_delay_ms 7068                      LED_Init@pLED 008D  
                __end_of_delay_us 74D8                     ??_Timer0_Init 0071  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
                      _Timer0_ISR 7C6C          __size_of_Console_NewLine 00A2  
               Timer2_Init@DIVIDE 007A                    __CFG_XINST$OFF 000000  
                __end_of__powers_ FC43                            _OutSeg 6A80  
        __size_of_HMI_InitButtons 0006                        _Motor_Init 553A  
                      _Motor_Move 7A38                     ??_Motor_Speed 007F  
                          ___flge 3DBC                        _Motor_Step 4B00  
         __end_of_Event_DIPSwitch 7C6C                         ??___fladd 009C  
                          ___wmul 7AAA                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 006A  
                       ??___flneg 0064                    __CFG_STVREN$ON 000000  
                       ??___awmod 0064                            _change 00FE  
                       ??___flmul 0076                            _lMotor 00EA  
                       ??___flsub 00B0                         ??___fltol 008B  
                       ??___lldiv 0068                            _lQueue 00DB  
                      _TestButton 0181                         ??___llmod 0075  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 0064          __end_of_Port_SetQuadType 2D2C  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0030  
            __end_of_Console_Init 6972                            _locked 011D  
                          _fround 22B2                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 001E                            clear_0 5F5C  
                          clear_1 5F6E                            clear_2 5F7A  
                          clear_3 5F86                            clear_4 5F92  
                ___awdiv@quotient 006C                   ___awmod@divisor 0062  
                      Port_Init@i 00A5                 __end_of_MXK_Queue 7FF2  
      __end_ofHMI_SetButton@F7213 FCCC                   ___awmod@counter 0064  
                       ??_getMode 0060                            _printf 0000  
                __end_of_inputVar 5E48         __end_of_MXK_InitDIPSwitch 7E1C  
                   _ADC_Calibrate 7F8E                    HMI_SetButton@v 0067  
                          floor@i 00AC                            floor@x 00A8  
          HMI_SetSegments@pString 0061                       _Console_Tab 5932  
             LCD_Word_Write@value 0065                      __pdataCOMRAM 0047  
              __size_of_Port_Init 0192                     ??_Port_GetPin 0063  
        Port_CheckPortType@Output 0099                  __end_of_nullMode 1406  
                       ?_ADC_Init 0064                   ??i2_Port_SetPin 0014  
                    __mediumconst FB5C       __end_ofTimer2_Init@PRESCALE FCCF  
        Port_CheckPortType@pDrive 0098                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 0096                     ??_Port_SetPin 0073  
                       ??_reverse 0064            __end_of_continuousMode 7BAE  
                __end_of_stepMode 7324             Console_MakeField@Fill 021E  
                ?_Port_SetPinType 0086                            putch@c 007A  
               Motor_Speed@pMotor 007B                    ?_HMI_SetNumber 0071  
                  i2_Word_GetPair 7C0E           __end_of_Configure_GPIOs 6F26  
                ??_MXK_TestButton 0066            __end_of_Timer0_Restart 801A  
                   Set_Rotation@m 0065                      ?_MXK_Release 0001  
                      ___flge@ff1 0060                        ___flge@ff2 0064  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 7B16  
                    ___xxtofl@arg 006A                  __end_ofexp@coeff FED7  
                    i2delay_us@us 0001                      ___xxtofl@exp 0069  
                    ___xxtofl@val 0060                  __end_oflog@coeff FEFB  
                 ?_LCD_Word_Write 0065                        __accesstop 0060  
         __end_of__initialization 5F98                         ?_LCD_Fill 0069  
                       ?_LCD_Init 0001                     SPI_Init@pMode 0092  
                      ___flneg@f1 0060                       _Byte_GetBit 7B16  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 8032  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 0068  
                       ?_HMI_Poll 0001                      eval_poly@res 00B4  
                   ___rparam_used 000001                        ___fltol@f1 0087  
                     _Byte_SetBit 71A0                     __end_of_MASKS FCC8  
                  _PortA_Property FF07                       ?_Event_NULL 0001  
                       LCD_Fill@i 006B                         LCD_Fill@j 006C  
                       LCD_Init@i 0097                    __pcstackCOMRAM 0001  
                  _PortB_Property FF05               __size_ofi2_delay_us 0040  
                    __pidataBANK0 808E                      __pidataBANK1 7FC6  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 7E58  
                 Console_Render@x 008A                   Console_Render@y 008B  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FC9F              __end_of_Byte_GetZone 660E  
              ADC_Sequence@pItemA 0060                ADC_Sequence@pItemB 0062  
                   __end_of_floor 4F92                     __end_of_ldexp 4E6E  
                   __end_of_frexp 5D94                     __end_of_scale 0DCC  
                  _PortC_Property FF03               __end_of_Timer0_Init 4B00  
                   __end_of_putch 8000                         ?_MXK_Init 0001  
             __end_of_Timer2_Init 49A0               __end_of_Timer0_Stop 8076  
                  ?_ADC_Calibrate 0001                         ?_SPI_Init 008D  
                       ?_SPI_Send 0060                       _Button_Init 5466  
    __size_of_displayPositionMode 018A                 Port_SetType@pType 009C  
                     _Button_Poll 46DA              __end_of_Byte_SetByte 7FE4  
            __end_of_Byte_SetPair 7D5E                    _HMI_LeftSwitch 7F5E  
                  _PortD_Property FF01              __end_of_Byte_SetQuad 7D80  
                    ??_LED_Toggle 0078                      ??_HMI_GetBar 0060  
            __end_of_Byte_SetZone 5CDE               __end_of_Motor_Speed 7CEE  
                  _HMI_DownSwitch 7F16                     SPI_Send@pData 0062  
                      __div_to_l_ 4260             __end_of_MXK_DIPSwitch 7EFE  
           _displayContinuousMode 56DA                      ??_HMI_SetBar 0060  
                    ??_HMI_Render 0068                    _PortE_Property FEFF  
                      ??_ADC_Init 0067          __size_of_HMI_SetSegments 00BA  
          __end_ofi2_Word_GetPair 7C3E                   ?_continuousMode 0001  
                  _PortF_Property FEFD           Port_CheckQuadType@Pair1 0093  
         Port_CheckQuadType@Pair2 0094          MXK_BlockSwitchTo@pModule 0067  
                 __div_to_l_@exp1 006D                           ??_floor 00AC  
                         ??_ldexp 00BE                   __div_to_l_@cntr 006C  
                         ??_frexp 0066            ?_Console_SetForecolour 0060  
               ??_FunctInitButton 00A8                           ??_scale 008B  
                         ?_ADC_On 0001                 _Console_Backspace 7324  
                 __div_to_l_@quot 0068                   ?_Timer0_Restart 0001  
                         ??_putch 007A          __size_of_HMI_RightSwitch 0018  
             _Console_ClearCursor 7884                 __end_of_ToSegment 2AD6  
                  _PortG_Property FEFB                        __pbssBANK0 00DB  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 7774           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                __size_of_eval_poly 0118  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 7DE0  
                       ?_FunctADC 0001         __size_of_Event_TestButton 003C  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 006B  
                      ??_LCD_Init 0095               __end_of_Port_SetPin 5932  
          __end_of_PortA_Property FF09                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 0060                        ??_LED_Init 008D  
        ADC_ClockDivision@pDivide 0060                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
              _ADC_ConversionTime 769E                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00A8                        ??_HMI_Poll 0084  
                   ?_Timer2_Clear 0001                     __div_to_l_@f1 0060  
                   __div_to_l_@f2 0064           Port_CheckPairType@Props 008D  
          __end_of_PortB_Property FF07                     ?_Timer0_Start 0060  
               __end_of_Port_Init 3DBC                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 0088                __end_of_LED_Toggle 769E  
              __end_of_HMI_GetBar 8070              __end_of_FunctInitADC 5EF6  
        LCD_FillRectangle@pColour 0069               ??_Console_Backspace 0062  
               Set_Addr_Window@xe 0066                 Set_Addr_Window@ye 0067  
               Set_Addr_Window@xs 0068                 Set_Addr_Window@ys 0065  
                         ?_OutSeg 0063                       ?_Motor_Init 008D  
              Byte_SetPair@pInput 006B                       ?_Motor_Move 0063  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 006E  
                         ?___flge 0060                __end_of_HMI_SetBar 8046  
          __end_of_PortC_Property FF05                Word_GetPair@pInput 006C  
              __end_of_HMI_Render 79FC                    ??_Set_Rotation 0065  
                       ?_Port_Set 006F               ?_ADC_ConversionTime 0001  
                         ?___wmul 0060                  ?_Event_DIPSwitch 0001  
               Port_GetPin@Output 0065                      ??_ISR_Enable 0060  
    __size_of_Console_ResetCursor 001E              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 7F76            __end_of_PortD_Property FF03  
                         _ADC_AN0 01DD                           _ADC_AN1 01D8  
                         _ADC_AN2 01D3                           _ADC_AN3 01CE  
                      ??_MXK_Init 00A6                 Port_GetPin@pInput 0060  
               _Console_MakeField 560A                           ?_fround 0087  
                         _ADC_Off 8062                 ??_Console_NewLine 0060  
        ADC_ClockDivision@unfound 0062            __end_of_HMI_DownSwitch 7F2E  
                      ??_SPI_Init 0093            Event_TestButton@pState 0079  
                      ??_SPI_Send 0063                           ?_printf 00B0  
               ??_HMI_InitButtons 0060        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FF01               Console_Render@F6956 01EA  
              ?_Console_MakeField 0065                           _COUNTER 002E  
                         i2l10001 78C6                           i2l10003 78D6  
                 ??_HMI_SetButton 0060              __end_of_HMI_UpSwitch 7F46  
                         _LED_Set 74D8           _Console_IncrementCursor 713A  
                       ?___xxtofl 0060            __end_of_PortF_Property FEFF  
                     _gBackcolour 00EE                   ??_HMI_SetNumber 0073  
                       _I2C1_Done 0118                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0115                         _I2C1_More 0112  
                       _I2C2_More 010F                         ?_delay_ms 0060  
       __end_of_Console_Backspace 7380                         ?_delay_us 0060  
             __size_of_Event_NULL 0002        __end_of_MXK_InitTestButton 7E3A  
                         _SSP1ADD 000FC8                        _displaySID 7DA2  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
            ??_ADC_ConversionTime 0060            __end_of_PortG_Property FEFD  
             ??_Console_MakeField 0067           __size_of_ADC_SetChannel 001C  
                         _SPI_DCS 7BDE              __size_ofi2_MXK_Queue 000E  
                   ??_ADC_SetupIO 0060                  ?_Configure_GPIOs 0001  
                 __size_of_ADC_On 0006                  ADC_Init@pChannel 0066  
            i2Byte_GetZone@Offset 0008                     ??_ADC_Voltage 008B  
                      ??_FunctADC 0066                __end_of_ISR_Enable 8050  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
                  ??_Timer0_Clear 0060                 Event_TestButton@j 00F4  
                      ??_Mode_Set 0060                    ??_Timer2_Clear 0060  
                         _Font5x7 FCCF              i2Byte_GetZone@pChunk 0004  
        ADC_ConversionTime@pCount 0061              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 0063                         ?_inputVar 0001  
            SPI_DisableISR@pInput 0060                     ?_Port_GetQuad 0060  
                 Byte_SetBit@pBit 0062              Port_TogglePin@pInput 0074  
           __end_ofi2_Byte_SetBit 75C4                         _ADC_Start 69FC  
               __end_of__npowers_ FC77                           __Hparam 0000  
               Port_GetQuad@pQuad 0062                       _Timer0_Init 49A0  
                     _Timer2_Init 4840                           __Lparam 0000  
                     _Timer0_Stop 8070             __size_of_Console_Init 008A  
                         OutSeg@a 0037   __end_ofPortProperty_Valid@F6830 FCBF  
                   LCD_Write@mode 0063                         ?_nullMode 0001  
                 __size_of_OutSeg 0082                        ??_Port_Set 0072  
                 __size_of___flge 0190         __end_of_Console_MakeField 56DA  
               _Console_PrintChar 38EE                       _Motor_Speed 7CC4  
                         _Stepper 0041                           ___fladd 0DCC  
                   ?_Port_SetType 009A                           _gCursor 0047  
                         ___fldiv 1B38                           ___awdiv 59F4  
                         ___flneg 7A72             ??_Console_ClearCursor 0060  
                         ___awmod 64D0                           ___flmul 1274  
                         ___flsub 76E6                           ___fltol 50AA  
                         _lBuffer 027B                           ___lldiv 5AB2  
                 __size_of___wmul 0036                         ?_stepMode 0001  
                 ??_ADC_Calibrate 0060                           ___llmod 660E  
                         ___lwdiv 6BF8                           ___lwmod 7204  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 685E  
                      _currentPos 01F6                ?_Console_PrintChar 0001  
                         __pcinit 5EF6                 __end_of_eval_poly 50AA  
                 __size_of_fround 0306                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                        _initialise 70D2  
                         _getMode 7432                           __ptext0 4C26  
                         __ptext1 72C8                           __ptext2 57A6  
                         __ptext3 1404                           __ptext4 5D94  
                         __ptext5 6CE6                           __ptext6 46DA  
                         __ptext7 7EE6                           __ptext8 7EFE  
                         __ptext9 7F16            ?_displayContinuousMode 0001  
                 __size_of_printf 0892                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                       ?__div_to_l_ 0060  
                         _dpowers FC77                         _T2CONbits 000FCA  
                   LED_Set@pValue 0074                      __size_of_exp 029A  
                    __size_of_log 018A               __size_of_Reset_High 001E  
           Event_DIPSwitch@pState 0079                      __size_of_pow 0200  
                      ??___xxtofl 0064                      ?_GetPortPORT 0060  
                ___awmod@dividend 0060                      ?_GetPortTRIS 0060  
             ??_Console_PrintChar 0076                       _Port_GetPin 772E  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 01E6  
             LCD_DrawRectangle@p4 01E2                      ??i2_delay_us 0003  
                      ??_delay_ms 0062                        ??_delay_us 0062  
                         _reverse 6F26                         _DIPSwitch 0177  
             __size_of_Timer0_ISR 002E                           _upState 00F3  
                     _Port_SetPin 586E                    LCD_DrawField@i 0082  
                       _LCD_Reset 7528               __size_of_Motor_Init 00D0  
             __size_of_Motor_Move 003A               __size_of_Motor_Step 0126  
                       _LCD_Write 7D80              __size_of_MXK_Dequeue 003E  
                      delay_ms@ms 0060              end_of_initialization 5F98  
             ADC_SetupIO@pChannel 0062                           exp@sign 00CA  
                      delay_us@us 0060                 ??_HMI_SetSegments 0063  
         Console_PrintChar@pInput 0079                      _Console_Init 68E8  
            __size_of_MXK_Release 001C        __end_of_Port_CheckPairType 70D2  
                         itos@Out 006F                    ??_Port_GetQuad 0063  
              _PortProperty_Valid 6B02                        _rightState 00F0  
              Byte_SetQuad@pInput 006B                        ??_inputVar 0084  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
             __end_of_ADC_SetupIO 7B7C             __size_of_Byte_GetPair 001E  
                       i2u1497_48 7C84                   ___lldiv@divisor 0064  
           __size_of_Byte_GetZone 009C                        ?_ADC_Start 0062  
               ??_HMI_RightSwitch 0066                           pow@sign 0276  
                 ___lldiv@counter 006C         __end_of_Console_PrintChar 3A8C  
             __end_of_ADC_Voltage 5466                        ??_nullMode 0060  
                  ??_Port_SetType 009D        __end_of_Port_CheckQuadType 73DA  
                         printf@c 00D0                           printf@f 00B0  
                  Port_Init@pPort 00A2                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 0069  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 006F             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 7656             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 7904                        ??_stepMode 007F  
              Button_Init@pInitIO 009F                    __tdiv_to_l_@f1 0060  
                  __tdiv_to_l_@f2 0064             Timer0_Init@pFrequency 006D  
               ?_Port_SetQuadType 0096                       _gForecolour 00FC  
                   ??__tdiv_to_l_ 0068         ??_Console_IncrementCursor 0064  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 009A                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 0066                       ___fladd@grs 00A7  
           Console_Render@lCursor 0086                         _MXK_Queue 7FE4  
                __CFG_CPUDIV$OSC1 000000                     ___xxtofl@sign 0068  
                Byte_GetZone@pMax 0062        __size_of_Console_Backspace 005C  
                 _Set_Addr_Window 5FA2                    SPI_Init@pClock 008D  
                ??_LCD_Word_Write 0067                       ?_displaySID 0001  
                     ___fldiv@grs 0073                       ___fldiv@rem 006D  
           __end_of_LCD_DrawField 638C                    Port_Set@pInput 006F  
                  SPI_Init@pInput 0093              ??_PortProperty_Valid 0073  
               __size_of_ADC_Init 007A                    Port_Set@pValue 0071  
                      ?_LCD_Reset 0001          __size_of_displayNullMode 0042  
            __end_of_Set_Rotation 6740                        ?_LCD_Write 0063  
                    _Byte_GetPair 7E3A                HMI_SetButton@F7213 FCC8  
                    _Byte_GetZone 6572                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 0080                 LCD_DrawField@ymax 0081  
        __size_of_displayStepMode 008A                    __end_of_ADC_On 8082  
                  _Port_TogglePin 7BAE                  _Event_TestButton 79FC  
           __size_of_FunctInitADC 00AE                       ___flmul@grs 007C  
             _displayPositionMode 3F4C              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060           __size_ofi2_Byte_GetPair 001A  
                   ?_positionMode 0001                      _Byte_SetByte 7FD6  
                    _Byte_SetPair 7D3C                   ADC_SetupIO@MASK 0063  
                    _Byte_SetQuad 7D5E           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 5C28              Port_SetPinType@pType 0089  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 0060  
                   ?_SPI_MaxSpeed 006F                 __size_of_LCD_Fill 0058  
                    ??_Event_NULL 0060                 __size_of_LCD_Init 0172  
             __size_of__div_to_l_ 0188                 __size_of_LED_Init 0062  
                   ?_SPI_MinSpeed 006F             __end_ofi2_Timer0_Stop 8088  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 01FA  
               __size_of_HMI_Poll 0074                     ?i2_Motor_Step 0001  
      __size_of_Console_MakeField 00D0                    __end_of_OutSeg 6B02  
                  __end_of___flge 3F4C             __size_of_HMI_UpSwitch 0018  
                  __end_of___wmul 7AE0             __end_of_HMI_DIPSwitch 7F16  
                   __pidataCOMRAM 8032                       ?_initialise 0001  
                    ?_Button_Init 009B              ?_displayPositionMode 0001  
                 _FunctInitButton 638C                      ?_Button_Poll 007B  
                       _Bus_State 004B                  ??_continuousMode 007F  
                  __end_of_fround 25B8               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA              __end_of_Timer0_Clear 8026  
               __size_of_MXK_Init 0180                        floor@expon 00B0  
            __end_of_Timer2_Clear 8062                    __end_of_printf 0892  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 006C                  ??_Timer0_Restart 0060  
            __end_of_Timer0_Start 7D3C           ??_Console_SetForecolour 0062  
              Port_SetType@Output 009F               start_initialization 5EF6  
                      ?_MXK_Queue 0060                        eval_poly@d 00AC  
                      eval_poly@n 00AE                        eval_poly@x 00A8  
                    _FunctInitADC 5E48                        ldexp@value 00B8  
        PortProperty_Valid@Errors 0075                  ??i2_MXK_SwitchTo 0007  
             __end_of__tdiv_to_l_ 3C2A                 _LCD_FillRectangle 6E42  
              Port_SetType@pInput 009A                    _ADC_SetChannel 7EB0  
                     __end_of_exp 2852                       __end_of_log 4260  
                     __end_of_pow 3366                        HMI_Init@in 00A8  
             HMI_SetNumber@pInput 0071             __end_ofi2_Port_SetPin 60F6  
              __end_of_Event_NULL 8094            __end_of_Port_TogglePin 7BDE  
                   ?_Word_SetPair 006F                 Byte_SetBit@pInput 0060  
                        ??_ADC_On 0060                    ??_MXK_SwitchTo 0066  
               Byte_SetBit@pValue 0063                ?_LCD_FillRectangle 0069  
             _Console_ResetCursor 7E58       PortProperty_Valid@pPinDrive 0071  
                     _ADC_SetupIO 7B4A              MXK_BlockSwitchTo@CUR 0066  
        PortProperty_Valid@pInput 006F                     i2_MXK_Release 8088  
                     _ADC_Voltage 538E                        frexp@value 0060  
                  ??_positionMode 007F            LCD_FillRectangle@pSize 006F  
                  SPI_Send@pInput 0060                      ??_Reset_High 0074  
                 ___llmod@divisor 0071          __size_of_Port_SetPinType 01C0  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                 ___llmod@counter 0075                         _ToSegment 2852  
             ??_LCD_FillRectangle 0073             Port_SetQuadType@pType 0099  
                 _Console_NewLine 642E                 __size_of_FunctADC 0012  
                  ??_SPI_MinSpeed 0071                       ??_ADC_Start 0064  
                    _HMI_UpSwitch 7F2E                         _Reset_Low 7DC2  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 8076  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 019E  
                  ADC_Init@pInput 0064                         _gCharSize 01F2  
                Timer2_Init@INDEX 00F6                         OutSeg@cur 0039  
                  ??i2_Motor_Step 0015                      ??_Motor_Init 0091  
                        ??_OutSeg 0064                         OutSeg@out 0067  
         __size_of_Console_Render 0210                      ??_Motor_Move 0067  
                    ??_Motor_Step 0074                          ??___flge 0068  
              Byte_SetZone@Offset 0069                          ??___wmul 0064  
             __size_of_displaySID 0020              ?_Console_ResetCursor 0001  
                       _Port_Init 3C2A                       __pdataBANK0 00FC  
                     __pdataBANK1 01EA                          ??_fround 008B  
               __size_of_Port_Set 03BA                Byte_SetZone@pChunk 0063  
           ??_displayPositionMode 00D3                          ?_ADC_Off 0001  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 0060  
              Byte_SetZone@pValue 0065                     Mode_Set@pMode 0060  
                        ??_printf 00B6           __end_of_Set_Addr_Window 604C  
        Port_CheckQuadType@Output 0095                         _gLineSize 01EE  
        Port_CheckQuadType@pDrive 0092                         ___fladd@a 0098  
                       ___fladd@b 0094                    ??_Word_GetPair 006F  
                      fround@prec 0093          Port_CheckQuadType@pInput 008F  
            __end_of_Port_GetQuad 760E                         ___fldiv@a 0064  
                       ___fldiv@b 0060         __end_of_LCD_FillRectangle 6EB6  
                     __pbssBIGRAM 027B            __end_of_ADC_SetChannel 7ECC  
                        ?_LED_Set 0074                         ___flmul@a 0072  
                       ___flmul@b 006E                       __pbssCOMRAM 0029  
                       ___flsub@a 00AC                         ___flsub@b 00A8  
                 ADC_Start@pInput 0062                __end_of_Reset_High 7DFE  
                   __pcstackBANK0 0060                     __pcstackBANK1 01FA  
                   __pcstackBANK2 026E                      _fround$15264 008F  
                    _fround$15265 008B                        itos@Length 006D  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 01CE  
              __end_of_Timer0_ISR 7C9A              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 2F56                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
              __end_of_Motor_Init 560A               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Move 7A72                __end_of_Motor_Step 4C26  
           Timer2_Init@pFrequency 006D                    ?i2_MXK_Release 0001  
                       _exp$15270 00C4               __size_of_initialise 0068  
        Port_CheckPairType@Output 008C                 ??_displayNullMode 00D1  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 0089  
        Port_CheckPairType@pInput 0086                    reverse@tempVar 0064  
              _MXK_InitTestButton 7E1C                        ?_Reset_Low 0001  
                    ?_Timer0_Init 006D            __size_of_MXK_DIPSwitch 0018  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
               ??_displayStepMode 00D1                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 0060                     _lStepFunction 0029  
         __size_of_MXK_TestButton 0018                 Byte_SetPair@pPair 006D  
         __end_of_FunctInitButton 642E                 __size_of_inputVar 00B4  
                ??_HMI_DownSwitch 0066                         __pintcode 1408  
                   __pmediumconst FB5C                      ?_Motor_Speed 007B  
           ??_Console_ResetCursor 0060                          ?___fladd 0094  
                        ?___fldiv 0060                          ?___awdiv 0066  
                       __ptext100 8062                         __ptext101 68E8  
                       __ptext110 4D4A                         __ptext102 7432  
                        ?___flneg 0060                         __ptext111 4E6E  
                       __ptext103 6972                         __ptext120 7FF2  
                       __ptext112 5CDE                         __ptext104 7DA2  
                       __ptext121 38EE                         __ptext113 4F92  
                       __ptext105 8050                         __ptext130 1274  
                       __ptext122 5932                         __ptext114 538E  
                       __ptext106 3F4C                         __ptext131 64D0  
                       __ptext123 713A                         __ptext115 1B38  
                       __ptext107 3166                         __ptext140 7A72  
                       __ptext132 59F4                         __ptext124 642E  
                       __ptext116 7842                         __ptext108 40D6  
                       __ptext141 3DBC                         __ptext133 3A8C  
                       __ptext125 67D0                         __ptext117 56DA  
                       __ptext109 25B8                         __ptext150 6A80  
                       __ptext142 7B7C                         __ptext134 4260  
                       __ptext126 7E58                         __ptext118 0000  
                       __ptext151 2F56                         __ptext143 7CC4  
                       __ptext135 3560                         __ptext127 7324  
                       __ptext119 0892                         __ptext160 560A  
                       __ptext152 6E42                         __ptext144 49A0  
                       __ptext136 660E                         __ptext128 7884  
                       __ptext161 7B16                         __ptext153 62E8  
                       __ptext145 5AB2                         __ptext137 50AA  
                       __ptext129 22B2                         __ptext170 6C70  
                       __ptext154 7AAA                         __ptext146 801A  
                       __ptext138 76E6                         __ptext171 7578  
                       __ptext163 7C6C                         __ptext155 5FA2  
                       __ptext147 7A38                         __ptext139 0DCC  
                       __ptext172 7AE0                         __ptext164 51B6  
                       __ptext156 7E76                         __ptext148 7D16  
                       __ptext173 78C4                         __ptext165 8082  
                       __ptext157 7D80                         __ptext149 79BE  
                       __ptext174 8088                         __ptext166 8026  
                       __ptext158 6F92                         _pShiftVal 00E6  
                       __ptext175 8000                         __ptext167 604C  
                       __ptext159 7FB4                         __ptext176 0000  
                       __ptext168 7C0E                         __ptext169 7ECC  
                        ?___awmod 0060                          ?___flmul 006E  
                        ?___flsub 00A8                          ?___fltol 0087  
                        ?___lldiv 0060                        ?_Port_Init 00A0  
                        ?___llmod 006D                         __npowers_ FC43  
            Timer0_Init@pCPUClock 0073           ??_displayContinuousMode 00D1  
                        ?___lwdiv 0060                          ?___lwmod 0060  
             ?_MXK_InitTestButton 0001                 __size_of_nullMode 0002  
                       _direction 01F8                 ?_Console_FormFeed 0001  
               _GetPortProperties 619C                 __size_of_stepMode 005C  
                        ?_getMode 0001                       __tdiv_to_l_ 3A8C  
                   ?_ADC_Sequence 0060                         _pow$15268 026E  
                       _pow$15269 0272       __end_ofTimer0_Init@PRESCALE FCAF  
                    ??__div_to_l_ 0068                ??_Console_FormFeed 0060  
                 _HMI_SetSegments 5B6E                ?_GetPortProperties 0060  
                Event_NULL@pState 0001          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                   ?_ADC_SetChannel 0001  
                   ??i2_MXK_Queue 0004                         _leftState 00F1  
                       _eval_poly 4F92                       ??_MXK_Queue 0063  
                    ?_Port_GetPin 0060                          _ADC_Init 6B7E  
                       _downState 00F2             __end_of_HMI_SetButton 67D0  
            __size_of_Console_Tab 00C2                          ?_reverse 0060  
                    ?_Port_SetPin 006F             __end_of_HMI_SetNumber 7CC4  
                ___lwdiv@quotient 0065                   _HMI_RightSwitch 7F46  
     __size_of_ADC_ConversionTime 0048                    __size_of_floor 0124  
                  __size_of_ldexp 0124                    __size_of_frexp 00B6  
             ??_GetPortProperties 0062                    __size_of_scale 053A  
         __end_of_Console_NewLine 64D0              ??_MXK_InitTestButton 008D  
              Byte_GetPair@pInput 0069                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 807C                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 7ECC  
                        _LCD_Fill 73DA                          _LCD_Init 4568  
                  ___wmul@product 0064                          _HMIBoard 0127  
                  i2_Byte_GetZone 6C70                          _LED_Init 7266  
                       delay_ms@u 0062                Button_Poll@pButton 007B  
                       delay_us@u 0062                          _HMI_Init 3366  
                        _HMI_Poll 6CE6                MXK_Queue@pCallback 0060  
                        _IPR1bits 000F9F         _displayPositionMode$15263 00D7  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 78C4  
        __size_of_Configure_GPIOs 0070              __size_of_Byte_GetBit 0034  
               Byte_SetQuad@pQuad 006D                          _PIR1bits 000F9E  
              __end_of__div_to_l_ 43E8                          _PIR3bits 000FA4  
                        i2u563_40 6C92                          i2u563_47 6C88  
                        i2u740_40 78F2                          i2u565_40 6CDA  
                        i2u565_45 6CD6                          i2u736_44 758C  
                        i2u736_45 7588                          i2u737_44 75B2  
                        i2u737_45 75AE              __size_of_Byte_SetBit 0064  
                        i2u885_40 51FA                          i2u886_40 520E  
                        i2u887_40 5246                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
                HMI_SetBar@pValue 0060                 Button_Init@pInput 009B  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 008A                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 6242  
                        _SSP2STAT 000F6D                      _Set_Rotation 66A8  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 7842  
              _Port_CheckPairType 7068                          _MXK_Init 43E8  
           __size_of_Timer0_Start 0026                    ??_ADC_Sequence 0064  
                 MXK_SwitchTo@CUR 0066             __end_of_ADC_Calibrate 7FA2  
                        _SPI_Init 171A          __end_of_Event_TestButton 7A38  
                        _SPI_Send 6F92                        _ADCON0bits 000FC2  
                __size_of_ADC_Off 0008                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 0065                 ___wmul@multiplier 0060  
            __end_of_positionMode 586E                 Byte_GetBit@Output 0064  
                      printf@flag 00BE              Timer2_Init@pCPUClock 0076  
      __size_of_LCD_FillRectangle 0074                        printf@fval 00CC  
            __size_of_Button_Init 00D4              __end_of_SPI_MaxSpeed 6DCE  
                      printf@prec 00C0             Motor_Speed@pFrequency 007D  
               Byte_GetBit@pInput 0060               Port_SetPinType@pPin 0088  
            __size_of_Button_Poll 0166                        ?_eval_poly 00A8  
              _Port_CheckQuadType 7380                     _MXK_DIPSwitch 7EE6  
             ?_Port_CheckPairType 0086              __end_of_SPI_MinSpeed 6E42  
                   ??_MXK_Dequeue 0076                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 760E  
           Button_Poll@pIncrement 007D                      ??_displaySID 00D1  
         PortProperty_Valid@F6830 FCAF              __end_ofi2_Motor_Step 52B6  
                 ??i2_MXK_Release 0001                         copy_data0 5F0A  
                       copy_data1 5F48                     ??_MXK_Release 0060  
          __end_ofi2_Byte_GetPair 7EE6         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 6CE6               __end_ofi2_MXK_Queue 800E  
             ?_Port_CheckPortType 0096                          _FunctADC 7FA2  
                 itos@destination 0069                          _InitList FB5D  
            _Motor_Step$intlevel0 4B06                          _Mode_Set 7FB4  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
                    _Timer0_Clear 801A                Port_GetQuad@pInput 0060  
                     _scale$15266 008B                      _Timer2_Clear 805A  
            __end_of_Word_GetPair 79BE                          _lCBuffer 0200  
            ??_Port_CheckPairType 008A                        _ADCVoltage 0100  
                     ??_Reset_Low 0074                          __Hrparam 0000  
                    _Timer0_Start 7D16                      OutSeg@pInput 0066  
                  _Console_Render 2F56                          __Lrparam 0000  
                 Timer2_Init@RDIV 0072                  ?_FunctInitButton 0001  
                  LCD_Write@value 0064                          _Port_Set 1EF8  
                    OutSeg@segset 0038                         rand@screw 0035  
            __end_of_Word_SetPair 77BA                       ??_Port_Init 00A3  
         __end_of_HMI_SetSegments 5C28              ??_Port_CheckQuadType 0093  
                __size_of___fladd 04A8                __end_of_displaySID 7DC2  
                __size_of___fldiv 03C0             __size_of_Port_GetQuad 004A  
                __size_of___awdiv 00BE                  __size_of___flneg 0038  
                __size_of___awmod 00A2                  __size_of___flmul 04A6  
                __size_of___flsub 0048                  __size_of___fltol 010C  
                __size_of___lldiv 00BC                 _MXK_BlockSwitchTo 7942  
                __size_of___llmod 009A                  __size_of___lwdiv 0078  
            ??_Port_CheckPortType 0099                  __size_of___lwmod 0062  
                    ??_initialise 00AA                          _lBufferX 00FA  
                        _lBufferY 00F9               Timer2_Init@PRESCALE FCCC  
                 LCD_Fill@pColour 0069                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 00EC  
                __size_of_getMode 0054           __end_of_HMI_RightSwitch 7F5E  
          Byte_GetZone@pChunkSize 0064                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 0064             __size_of_Port_SetType 022A  
                   reverse@length 0062                         itos@input 0067  
           i2MXK_SwitchTo@pModule 0008                          ___xxtofl 3560  
              Motor_Init@pAddress 008F                          _delay_ms 6FFE  
                        _delay_us 7486                          _clearall 00FB  
                 ___lwdiv@divisor 0062    __size_of_Console_SetForecolour 000A  
                 ___lwdiv@counter 0064     __end_of_Console_SetForecolour 805A  
                 Port_GetPin@pPin 0062                          __ptext10 7F2E  
                        __ptext11 7F46                          __ptext20 6F26  
                        __ptext12 7F5E                          __ptext21 7204  
                        __ptext13 7F76                          __ptext30 70D2  
                        __ptext22 6BF8                          __ptext14 75C4  
                        __ptext31 553A                          __ptext23 5B6E  
                        __ptext15 7C3E                          __ptext40 6242  
                        __ptext32 43E8                          __ptext24 2852  
                        __ptext16 8092                          __ptext41 7266  
                        __ptext33 3C2A                          __ptext25 6740  
                        __ptext17 79FC                          __ptext50 7942  
                        __ptext42 74D8                          __ptext34 2D2C  
                        __ptext26 803C                          __ptext18 7C9A  
                        __ptext51 7486                          __ptext43 7904  
                        __ptext35 760E                          __ptext27 806A  
                        __ptext19 52B6                          __ptext60 7DE0  
                        __ptext52 4568                          __ptext44 4B00  
                        __ptext36 1EF8                          __ptext28 7FA2  
                        __ptext61 7656                          __ptext53 66A8  
                        __ptext45 8070                          __ptext37 7FD6  
                        __ptext29 69FC                          __ptext70 805A  
                        __ptext62 7BAE                          __ptext54 73DA  
                        __ptext46 800E                          __ptext38 60F6  
                        __ptext71 7CEE                          __ptext63 586E  
                        __ptext55 6EB6                          __ptext47 7800  
                        __ptext39 619C               ??_MXK_BlockSwitchTo 0066  
                        __ptext80 2AD6                          __ptext72 7BDE  
                        __ptext64 772E                          __ptext56 6D5A  
                        __ptext48 7E94                          __ptext81 7774  
                        __ptext73 638C                          __ptext65 8046  
                        __ptext57 7528                          __ptext49 7FE4  
                        __ptext90 5C28                          __ptext82 7D3C  
                        __ptext74 5466                          __ptext66 3366  
                        __ptext58 6FFE                          __ptext91 5E48  
                        __ptext83 7380                          __ptext75 7DFE  
                        __ptext67 6DCE                          __ptext59 7DC2  
                        __ptext92 77BA                          __ptext84 7068  
                        __ptext76 8076                          __ptext68 171A  
                        __ptext93 6B7E                          __ptext85 6B02  
                        __ptext77 7E1C                          __ptext69 4840  
                        __ptext94 7B4A                          __ptext86 7980  
                        __ptext78 372E                          __ptext95 7EB0  
                        __ptext87 7E3A                          __ptext79 71A0  
                        __ptext96 769E                          __ptext88 6572  
                        __ptext97 685E                          __ptext89 7D5E  
                        __ptext98 7F8E                          __ptext99 807C  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 006C  
                    _SSP1CON2bits 000FC5                          __powers_ FC0F  
     __size_of_PortProperty_Valid 007C                i2Byte_GetZone@MASK 0007  
               _ADC_ClockDivision 685E                      ?_ADC_SetupIO 0001  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 0079                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
              ?_ADC_ClockDivision 0001                      ?_ADC_Voltage 0087  
             __end_of_MXK_Dequeue 7942                 HMI_SetSegments@in 0064  
           Button_Init@pThreshold 009D                     __size_of_main 0124  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 006B  
          __end_of_Console_Render 3166                __end_of_initialise 713A  
                        _inputVar 5D94               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                      _Port_GetQuad 75C4  
             __end_of_MXK_Release 7EB0                    _MXK_TestButton 7F76  
                   i2_Byte_SetBit 7578               ??_ADC_ClockDivision 0060  
             i2Word_GetPair@pPair 000F                          _nullMode 1404  
                  ADC_Voltage@max 008D                    ADC_Voltage@ref 0091  
       __end_of_MXK_BlockSwitchTo 7980          ?_Console_IncrementCursor 0001  
            __size_of_Timer0_Init 0160              __size_of_Timer2_Init 0160  
                        int$flags 0051              __size_of_Timer0_Stop 0006  
                    _Port_SetType 2D2C                      Port_Set@Type 0086  
                        _stepMode 72C8        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 0095  
                       printf@exp 00C6                         printf@val 00C2  
                    _SSP1STATbits 000FC7              __size_of_Motor_Speed 002A  
                  Timer0_Init@DIV 0108                    Timer0_Init@PRE 00F7  
                    _SSP2STATbits 000F6D                          exp@coeff FEAF  
                      _LED_Toggle 7656                          log@coeff FED7  
                      _HMI_GetBar 806A              Button_Init@pGetState 00A2  
          PortProperty_Valid@Pair 0085                  ??_Port_TogglePin 0077  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 0072                       ??_eval_poly 00B0  
                      _HMI_SetBar 803C                        _HMI_Render 79BE  
                Byte_SetZone@MASK 006A                       i2_MXK_Queue 8000  
       __end_of_ADC_ClockDivision 68E8                    Timer2_Init@DIV 0104  
                  Timer2_Init@PRE 00F5                   _displayNullMode 7842  
                Byte_SetZone@pMax 0062            __size_ofi2_Timer0_Stop 0006  
                        scale@scl 008F              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 00A5                          itos@Data 006B  
                    _printf$15267 00B8                   _displayStepMode 6972  
              LCD_FillRectangle@i 0075                LCD_FillRectangle@j 0076  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                __tdiv_to_l_@exp1 0070                  __tdiv_to_l_@cntr 006F  
                    reverse@input 0060                  __tdiv_to_l_@quot 006B  
            __end_of_ADC_Sequence 7800            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 0060                  ___lldiv@dividend 0060  
          __end_of_MXK_TestButton 7F8E                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042       __end_of_displayPositionMode 40D6  
                  _SPI_DisableISR 7CEE   displayPositionMode@angleDegrees 00D3  
                 Port_Init@pInput 00A0                          printf@ap 00BC  
           __size_of_positionMode 00C8            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 8046                  ?_HMI_SetSegments 0061  
         Console_MakeField@Column 006C                        _IRDistance 0121  
           __size_of_SPI_MaxSpeed 0074                  ??_ADC_SetChannel 0060  
                   SPI_DCS@pInput 0060    __size_of_displayContinuousMode 00CC  
           __size_of_SPI_MinSpeed 0074     __end_of_displayContinuousMode 57A6  
                    ?__tdiv_to_l_ 0060                   ??_MXK_DIPSwitch 0066  
           __size_ofi2_Motor_Step 0100                 ADC_Voltage@pInput 0087  
         Console_MakeField@pInput 006B                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 0068                     ??_GetPortPORT 0062  
                 ___lwmod@divisor 0062                     ??_GetPortTRIS 0062  
           Timer0_Start@pFunction 0060                Word_SetPair@pInput 006F  
                 ___lwmod@counter 0064                Word_SetPair@pValue 0072  
                Motor_Init@pMotor 008D                       _MXK_Dequeue 7904  
               ADC_Voltage@output 0095                    LED_Toggle@pLED 0078  
                   ___fladd@signs 00A4                     _LCD_DrawField 62E8  
                _Port_SetQuadType 2AD6           __size_of_continuousMode 0032  
                     _MXK_Release 7E94         __size_of_Console_FormFeed 008E  
                    _MXK_SwitchTo 7800             __size_of_Word_GetPair 003E  
              Byte_GetZone@Offset 0067                     ?_Console_Init 0001  
               Word_SetPair@pPair 0071                   _Port_SetPinType 372E  
                    ___fladd@aexp 00A5                      ___fladd@bexp 00A6  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 0068  
              Byte_GetZone@pChunk 0063                      _positionMode 57A6  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 7E76  
              Byte_GetZone@pInput 0060           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 71A0             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 7D16                      _SPI_MaxSpeed 6D5A  
                    _SPI_MinSpeed 6DCE                Port_Set@TypeActual 0084  
