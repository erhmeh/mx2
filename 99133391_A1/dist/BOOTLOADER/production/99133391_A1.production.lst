

Microchip Technology PIC18 LITE Macro Assembler V1.42 build -159332390 
                                                                                               Mon Aug 14 16:07:39 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1,inline
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1,inline
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1,inline
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   170                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   171  0000                     
   172                           ; Version 1.42
   173                           ; Generated 13/04/2017 GMT
   174                           ; 
   175                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   176                           ; All rights reserved.
   177                           ; 
   178                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   179                           ; 
   180                           ; Redistribution and use in source and binary forms, with or without modification, are
   181                           ; permitted provided that the following conditions are met:
   182                           ; 
   183                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   184                           ;        conditions and the following disclaimer.
   185                           ; 
   186                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   187                           ;        of conditions and the following disclaimer in the documentation and/or other
   188                           ;        materials provided with the distribution.
   189                           ; 
   190                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   191                           ;        software without specific prior written permission.
   192                           ; 
   193                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   194                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   195                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   196                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   197                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   198                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   199                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   200                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   201                           ; 
   202                           ; 
   203                           ; Code-generator required, PIC18F67J50 Definitions
   204                           ; 
   205                           ; SFR Addresses
   206  0000                     
   207                           	psect	idataCOMRAM
   208  014B06                     __pidataCOMRAM:
   209                           	opt stack 0
   210                           
   211                           ;initializer for _gCursor
   212  014B06  0006               	dw	6
   213  014B08  0006               	dw	6
   214                           
   215                           ;initializer for _Bus_State
   216  014B0A  01                 	db	1
   217                           
   218                           ;initializer for _A
   219  014B0B  41                 	db	65
   220                           
   221                           ;initializer for _a
   222  014B0C  61                 	db	97
   223                           
   224                           ;initializer for _zero
   225  014B0D  30                 	db	48
   226                           
   227                           ;initializer for _l
   228  014B0E  80                 	db	128
   229                           
   230                           ;initializer for _w
   231  014B0F  80                 	db	128
   232                           
   233                           	psect	idataBANK0
   234  014B3E                     __pidataBANK0:
   235                           	opt stack 0
   236                           
   237                           ;initializer for _gCharSize
   238  014B3E  0005               	dw	5
   239  014B40  0007               	dw	7
   240                           
   241                           ;initializer for _gForecolour
   242  014B42  FFFF               	dw	65535
   243                           
   244                           ;initializer for _change
   245  014B44  01                 	db	1
   246                           
   247                           	psect	idataBANK1
   248  014B2E                     __pidataBANK1:
   249                           	opt stack 0
   250                           
   251                           ;initializer for Console_Render@F6956
   252  014B2E  0006               	dw	6
   253  014B30  0006               	dw	6
   254                           
   255                           ;initializer for _gLineSize
   256  014B32  0080               	dw	128
   257  014B34  0007               	dw	7
   258                           
   259                           	psect	mediumconst
   260  00FC70                     __pmediumconst:
   261                           	opt stack 0
   262  00FC70  00                 	db	0
   263  00FC71                     _InitList:
   264                           	opt stack 0
   265  00FC71  1100               	dw	4352
   266  00FC73  0080               	dw	128
   267  00FC75  012C               	dw	300
   268  00FC77  B100               	dw	45312
   269  00FC79  0002               	dw	2
   270  00FC7B  0035               	dw	53
   271  00FC7D  0036               	dw	54
   272  00FC7F  B200               	dw	45568
   273  00FC81  0002               	dw	2
   274  00FC83  0035               	dw	53
   275  00FC85  0036               	dw	54
   276  00FC87  B300               	dw	45824
   277  00FC89  0002               	dw	2
   278  00FC8B  0035               	dw	53
   279  00FC8D  0036               	dw	54
   280  00FC8F  0002               	dw	2
   281  00FC91  0035               	dw	53
   282  00FC93  0036               	dw	54
   283  00FC95  B400               	dw	46080
   284  00FC97  0000               	dw	0
   285  00FC99  C000               	dw	49152
   286  00FC9B  00A2               	dw	162
   287  00FC9D  0002               	dw	2
   288  00FC9F  0084               	dw	132
   289  00FCA1  C100               	dw	49408
   290  00FCA3  00C5               	dw	197
   291  00FCA5  C200               	dw	49664
   292  00FCA7  000D               	dw	13
   293  00FCA9  0000               	dw	0
   294  00FCAB  C300               	dw	49920
   295  00FCAD  008D               	dw	141
   296  00FCAF  002A               	dw	42
   297  00FCB1  C400               	dw	50176
   298  00FCB3  008D               	dw	141
   299  00FCB5  00EE               	dw	238
   300  00FCB7  C500               	dw	50432
   301  00FCB9  000A               	dw	10
   302  00FCBB  3600               	dw	13824
   303  00FCBD  00C8               	dw	200
   304  00FCBF  E000               	dw	57344
   305  00FCC1  0012               	dw	18
   306  00FCC3  001C               	dw	28
   307  00FCC5  0010               	dw	16
   308  00FCC7  0018               	dw	24
   309  00FCC9  0033               	dw	51
   310  00FCCB  002C               	dw	44
   311  00FCCD  0025               	dw	37
   312  00FCCF  0028               	dw	40
   313  00FCD1  0028               	dw	40
   314  00FCD3  0027               	dw	39
   315  00FCD5  002F               	dw	47
   316  00FCD7  003C               	dw	60
   317  00FCD9  0000               	dw	0
   318  00FCDB  0003               	dw	3
   319  00FCDD  0003               	dw	3
   320  00FCDF  0010               	dw	16
   321  00FCE1  0080               	dw	128
   322  00FCE3  0078               	dw	120
   323  00FCE5  E100               	dw	57600
   324  00FCE7  0012               	dw	18
   325  00FCE9  001C               	dw	28
   326  00FCEB  0010               	dw	16
   327  00FCED  0018               	dw	24
   328  00FCEF  002D               	dw	45
   329  00FCF1  0028               	dw	40
   330  00FCF3  0023               	dw	35
   331  00FCF5  0028               	dw	40
   332  00FCF7  0028               	dw	40
   333  00FCF9  0026               	dw	38
   334  00FCFB  002F               	dw	47
   335  00FCFD  003B               	dw	59
   336  00FCFF  0000               	dw	0
   337  00FD01  0003               	dw	3
   338  00FD03  0003               	dw	3
   339  00FD05  0010               	dw	16
   340  00FD07  3A00               	dw	14848
   341  00FD09  0005               	dw	5
   342  00FD0B  2A00               	dw	10752
   343  00FD0D  0000               	dw	0
   344  00FD0F  0002               	dw	2
   345  00FD11  0000               	dw	0
   346  00FD13  0081               	dw	129
   347  00FD15  2B00               	dw	11008
   348  00FD17  0000               	dw	0
   349  00FD19  0003               	dw	3
   350  00FD1B  0000               	dw	0
   351  00FD1D  00A2               	dw	162
   352  00FD1F  2900               	dw	10496
   353  00FD21  2C00               	dw	11264
   354  00FD23                     __end_of_InitList:
   355                           	opt stack 0
   356  00FD23                     _dpowers:
   357                           	opt stack 0
   358  00FD23  0001               	dw	1
   359  00FD25  0000               	dw	0
   360  00FD27  000A               	dw	10
   361  00FD29  0000               	dw	0
   362  00FD2B  0064               	dw	100
   363  00FD2D  0000               	dw	0
   364  00FD2F  03E8               	dw	1000
   365  00FD31  0000               	dw	0
   366  00FD33  2710               	dw	10000
   367  00FD35  0000               	dw	0
   368  00FD37  86A0               	dw	34464
   369  00FD39  0001               	dw	1
   370  00FD3B  4240               	dw	16960
   371  00FD3D  000F               	dw	15
   372  00FD3F  9680               	dw	38528
   373  00FD41  0098               	dw	152
   374  00FD43  E100               	dw	57600
   375  00FD45  05F5               	dw	1525
   376  00FD47  CA00               	dw	51712
   377  00FD49  3B9A               	dw	15258
   378  00FD4B                     __end_of_dpowers:
   379                           	opt stack 0
   380  00FD4B                     Timer0_Init@PRESCALE:
   381                           	opt stack 0
   382  00FD4B  0002               	dw	2
   383  00FD4D  0004               	dw	4
   384  00FD4F  0008               	dw	8
   385  00FD51  0010               	dw	16
   386  00FD53  0020               	dw	32
   387  00FD55  0040               	dw	64
   388  00FD57  0080               	dw	128
   389  00FD59  0100               	dw	256
   390  00FD5B                     __end_ofTimer0_Init@PRESCALE:
   391                           	opt stack 0
   392  00FD5B                     PortProperty_Valid@F6830:
   393                           	opt stack 0
   394  00FD5B  00                 	db	0
   395  00FD5C  01                 	db	1
   396  00FD5D  02                 	db	2
   397  00FD5E  00                 	db	0
   398  00FD5F  01                 	db	1
   399  00FD60  00                 	db	0
   400  00FD61  01                 	db	1
   401  00FD62  00                 	db	0
   402  00FD63  02                 	db	2
   403  00FD64  02                 	db	2
   404  00FD65  00                 	db	0
   405  00FD66  00                 	db	0
   406  00FD67  03                 	db	3
   407  00FD68  03                 	db	3
   408  00FD69  03                 	db	3
   409  00FD6A  00                 	db	0
   410  00FD6B                     __end_ofPortProperty_Valid@F6830:
   411                           	opt stack 0
   412  00FD6B                     _MASKS:
   413                           	opt stack 0
   414  00FD6B  00                 	db	0
   415  00FD6C  01                 	db	1
   416  00FD6D  03                 	db	3
   417  00FD6E  07                 	db	7
   418  00FD6F  0F                 	db	15
   419  00FD70  1F                 	db	31
   420  00FD71  3F                 	db	63
   421  00FD72  7F                 	db	127
   422  00FD73  FF                 	db	255
   423  00FD74                     __end_of_MASKS:
   424                           	opt stack 0
   425  00FD74                     HMI_SetButton@F7211:
   426                           	opt stack 0
   427  00FD74  00                 	db	0
   428  00FD75  02                 	db	2
   429  00FD76  01                 	db	1
   430  00FD77  03                 	db	3
   431  00FD78                     __end_ofHMI_SetButton@F7211:
   432                           	opt stack 0
   433  00FD78                     Timer2_Init@PRESCALE:
   434                           	opt stack 0
   435  00FD78  01                 	db	1
   436  00FD79  04                 	db	4
   437  00FD7A  10                 	db	16
   438  00FD7B                     __end_ofTimer2_Init@PRESCALE:
   439                           	opt stack 0
   440  00FD7B                     _Font5x7:
   441                           	opt stack 0
   442  00FD7B  00                 	db	0
   443  00FD7C  00                 	db	0
   444  00FD7D  00                 	db	0
   445  00FD7E  00                 	db	0
   446  00FD7F  00                 	db	0
   447  00FD80  00                 	db	0
   448  00FD81  00                 	db	0
   449  00FD82  5F                 	db	95
   450  00FD83  00                 	db	0
   451  00FD84  00                 	db	0
   452  00FD85  00                 	db	0
   453  00FD86  07                 	db	7
   454  00FD87  00                 	db	0
   455  00FD88  07                 	db	7
   456  00FD89  00                 	db	0
   457  00FD8A  14                 	db	20
   458  00FD8B  7F                 	db	127
   459  00FD8C  14                 	db	20
   460  00FD8D  7F                 	db	127
   461  00FD8E  14                 	db	20
   462  00FD8F  24                 	db	36
   463  00FD90  2A                 	db	42
   464  00FD91  7F                 	db	127
   465  00FD92  2A                 	db	42
   466  00FD93  12                 	db	18
   467  00FD94  23                 	db	35
   468  00FD95  13                 	db	19
   469  00FD96  08                 	db	8
   470  00FD97  64                 	db	100
   471  00FD98  62                 	db	98
   472  00FD99  36                 	db	54
   473  00FD9A  49                 	db	73
   474  00FD9B  55                 	db	85
   475  00FD9C  22                 	db	34
   476  00FD9D  50                 	db	80
   477  00FD9E  00                 	db	0
   478  00FD9F  05                 	db	5
   479  00FDA0  03                 	db	3
   480  00FDA1  00                 	db	0
   481  00FDA2  00                 	db	0
   482  00FDA3  00                 	db	0
   483  00FDA4  1C                 	db	28
   484  00FDA5  22                 	db	34
   485  00FDA6  41                 	db	65
   486  00FDA7  00                 	db	0
   487  00FDA8  00                 	db	0
   488  00FDA9  41                 	db	65
   489  00FDAA  22                 	db	34
   490  00FDAB  1C                 	db	28
   491  00FDAC  00                 	db	0
   492  00FDAD  08                 	db	8
   493  00FDAE  2A                 	db	42
   494  00FDAF  1C                 	db	28
   495  00FDB0  2A                 	db	42
   496  00FDB1  08                 	db	8
   497  00FDB2  08                 	db	8
   498  00FDB3  08                 	db	8
   499  00FDB4  3E                 	db	62
   500  00FDB5  08                 	db	8
   501  00FDB6  08                 	db	8
   502  00FDB7  00                 	db	0
   503  00FDB8  50                 	db	80
   504  00FDB9  30                 	db	48
   505  00FDBA  00                 	db	0
   506  00FDBB  00                 	db	0
   507  00FDBC  08                 	db	8
   508  00FDBD  08                 	db	8
   509  00FDBE  08                 	db	8
   510  00FDBF  08                 	db	8
   511  00FDC0  08                 	db	8
   512  00FDC1  00                 	db	0
   513  00FDC2  60                 	db	96
   514  00FDC3  60                 	db	96
   515  00FDC4  00                 	db	0
   516  00FDC5  00                 	db	0
   517  00FDC6  20                 	db	32
   518  00FDC7  10                 	db	16
   519  00FDC8  08                 	db	8
   520  00FDC9  04                 	db	4
   521  00FDCA  02                 	db	2
   522  00FDCB  3E                 	db	62
   523  00FDCC  51                 	db	81
   524  00FDCD  49                 	db	73
   525  00FDCE  45                 	db	69
   526  00FDCF  3E                 	db	62
   527  00FDD0  00                 	db	0
   528  00FDD1  42                 	db	66
   529  00FDD2  7F                 	db	127
   530  00FDD3  40                 	db	64
   531  00FDD4  00                 	db	0
   532  00FDD5  42                 	db	66
   533  00FDD6  61                 	db	97
   534  00FDD7  51                 	db	81
   535  00FDD8  49                 	db	73
   536  00FDD9  46                 	db	70
   537  00FDDA  21                 	db	33
   538  00FDDB  41                 	db	65
   539  00FDDC  45                 	db	69
   540  00FDDD  4B                 	db	75
   541  00FDDE  31                 	db	49
   542  00FDDF  18                 	db	24
   543  00FDE0  14                 	db	20
   544  00FDE1  12                 	db	18
   545  00FDE2  7F                 	db	127
   546  00FDE3  10                 	db	16
   547  00FDE4  27                 	db	39
   548  00FDE5  45                 	db	69
   549  00FDE6  45                 	db	69
   550  00FDE7  45                 	db	69
   551  00FDE8  39                 	db	57
   552  00FDE9  3C                 	db	60
   553  00FDEA  4A                 	db	74
   554  00FDEB  49                 	db	73
   555  00FDEC  49                 	db	73
   556  00FDED  30                 	db	48
   557  00FDEE  01                 	db	1
   558  00FDEF  71                 	db	113
   559  00FDF0  09                 	db	9
   560  00FDF1  05                 	db	5
   561  00FDF2  03                 	db	3
   562  00FDF3  36                 	db	54
   563  00FDF4  49                 	db	73
   564  00FDF5  49                 	db	73
   565  00FDF6  49                 	db	73
   566  00FDF7  36                 	db	54
   567  00FDF8  06                 	db	6
   568  00FDF9  49                 	db	73
   569  00FDFA  49                 	db	73
   570  00FDFB  29                 	db	41
   571  00FDFC  1E                 	db	30
   572  00FDFD  00                 	db	0
   573  00FDFE  36                 	db	54
   574  00FDFF  36                 	db	54
   575  00FE00  00                 	db	0
   576  00FE01  00                 	db	0
   577  00FE02  00                 	db	0
   578  00FE03  56                 	db	86
   579  00FE04  36                 	db	54
   580  00FE05  00                 	db	0
   581  00FE06  00                 	db	0
   582  00FE07  00                 	db	0
   583  00FE08  08                 	db	8
   584  00FE09  14                 	db	20
   585  00FE0A  22                 	db	34
   586  00FE0B  41                 	db	65
   587  00FE0C  14                 	db	20
   588  00FE0D  14                 	db	20
   589  00FE0E  14                 	db	20
   590  00FE0F  14                 	db	20
   591  00FE10  14                 	db	20
   592  00FE11  41                 	db	65
   593  00FE12  22                 	db	34
   594  00FE13  14                 	db	20
   595  00FE14  08                 	db	8
   596  00FE15  00                 	db	0
   597  00FE16  02                 	db	2
   598  00FE17  01                 	db	1
   599  00FE18  51                 	db	81
   600  00FE19  09                 	db	9
   601  00FE1A  06                 	db	6
   602  00FE1B  32                 	db	50
   603  00FE1C  49                 	db	73
   604  00FE1D  79                 	db	121
   605  00FE1E  41                 	db	65
   606  00FE1F  3E                 	db	62
   607  00FE20  7E                 	db	126
   608  00FE21  11                 	db	17
   609  00FE22  11                 	db	17
   610  00FE23  11                 	db	17
   611  00FE24  7E                 	db	126
   612  00FE25  7F                 	db	127
   613  00FE26  49                 	db	73
   614  00FE27  49                 	db	73
   615  00FE28  49                 	db	73
   616  00FE29  36                 	db	54
   617  00FE2A  3E                 	db	62
   618  00FE2B  41                 	db	65
   619  00FE2C  41                 	db	65
   620  00FE2D  41                 	db	65
   621  00FE2E  22                 	db	34
   622  00FE2F  7F                 	db	127
   623  00FE30  41                 	db	65
   624  00FE31  41                 	db	65
   625  00FE32  22                 	db	34
   626  00FE33  1C                 	db	28
   627  00FE34  7F                 	db	127
   628  00FE35  49                 	db	73
   629  00FE36  49                 	db	73
   630  00FE37  49                 	db	73
   631  00FE38  41                 	db	65
   632  00FE39  7F                 	db	127
   633  00FE3A  09                 	db	9
   634  00FE3B  09                 	db	9
   635  00FE3C  01                 	db	1
   636  00FE3D  01                 	db	1
   637  00FE3E  3E                 	db	62
   638  00FE3F  41                 	db	65
   639  00FE40  41                 	db	65
   640  00FE41  51                 	db	81
   641  00FE42  32                 	db	50
   642  00FE43  7F                 	db	127
   643  00FE44  08                 	db	8
   644  00FE45  08                 	db	8
   645  00FE46  08                 	db	8
   646  00FE47  7F                 	db	127
   647  00FE48  00                 	db	0
   648  00FE49  41                 	db	65
   649  00FE4A  7F                 	db	127
   650  00FE4B  41                 	db	65
   651  00FE4C  00                 	db	0
   652  00FE4D  20                 	db	32
   653  00FE4E  40                 	db	64
   654  00FE4F  41                 	db	65
   655  00FE50  3F                 	db	63
   656  00FE51  01                 	db	1
   657  00FE52  7F                 	db	127
   658  00FE53  08                 	db	8
   659  00FE54  14                 	db	20
   660  00FE55  22                 	db	34
   661  00FE56  41                 	db	65
   662  00FE57  7F                 	db	127
   663  00FE58  40                 	db	64
   664  00FE59  40                 	db	64
   665  00FE5A  40                 	db	64
   666  00FE5B  40                 	db	64
   667  00FE5C  7F                 	db	127
   668  00FE5D  02                 	db	2
   669  00FE5E  04                 	db	4
   670  00FE5F  02                 	db	2
   671  00FE60  7F                 	db	127
   672  00FE61  7F                 	db	127
   673  00FE62  04                 	db	4
   674  00FE63  08                 	db	8
   675  00FE64  10                 	db	16
   676  00FE65  7F                 	db	127
   677  00FE66  3E                 	db	62
   678  00FE67  41                 	db	65
   679  00FE68  41                 	db	65
   680  00FE69  41                 	db	65
   681  00FE6A  3E                 	db	62
   682  00FE6B  7F                 	db	127
   683  00FE6C  09                 	db	9
   684  00FE6D  09                 	db	9
   685  00FE6E  09                 	db	9
   686  00FE6F  06                 	db	6
   687  00FE70  3E                 	db	62
   688  00FE71  41                 	db	65
   689  00FE72  51                 	db	81
   690  00FE73  21                 	db	33
   691  00FE74  5E                 	db	94
   692  00FE75  7F                 	db	127
   693  00FE76  09                 	db	9
   694  00FE77  19                 	db	25
   695  00FE78  29                 	db	41
   696  00FE79  46                 	db	70
   697  00FE7A  46                 	db	70
   698  00FE7B  49                 	db	73
   699  00FE7C  49                 	db	73
   700  00FE7D  49                 	db	73
   701  00FE7E  31                 	db	49
   702  00FE7F  01                 	db	1
   703  00FE80  01                 	db	1
   704  00FE81  7F                 	db	127
   705  00FE82  01                 	db	1
   706  00FE83  01                 	db	1
   707  00FE84  3F                 	db	63
   708  00FE85  40                 	db	64
   709  00FE86  40                 	db	64
   710  00FE87  40                 	db	64
   711  00FE88  3F                 	db	63
   712  00FE89  1F                 	db	31
   713  00FE8A  20                 	db	32
   714  00FE8B  40                 	db	64
   715  00FE8C  20                 	db	32
   716  00FE8D  1F                 	db	31
   717  00FE8E  7F                 	db	127
   718  00FE8F  20                 	db	32
   719  00FE90  18                 	db	24
   720  00FE91  20                 	db	32
   721  00FE92  7F                 	db	127
   722  00FE93  63                 	db	99
   723  00FE94  14                 	db	20
   724  00FE95  08                 	db	8
   725  00FE96  14                 	db	20
   726  00FE97  63                 	db	99
   727  00FE98  03                 	db	3
   728  00FE99  04                 	db	4
   729  00FE9A  78                 	db	120
   730  00FE9B  04                 	db	4
   731  00FE9C  03                 	db	3
   732  00FE9D  61                 	db	97
   733  00FE9E  51                 	db	81
   734  00FE9F  49                 	db	73
   735  00FEA0  45                 	db	69
   736  00FEA1  43                 	db	67
   737  00FEA2  00                 	db	0
   738  00FEA3  00                 	db	0
   739  00FEA4  7F                 	db	127
   740  00FEA5  41                 	db	65
   741  00FEA6  41                 	db	65
   742  00FEA7  02                 	db	2
   743  00FEA8  04                 	db	4
   744  00FEA9  08                 	db	8
   745  00FEAA  10                 	db	16
   746  00FEAB  20                 	db	32
   747  00FEAC  41                 	db	65
   748  00FEAD  41                 	db	65
   749  00FEAE  7F                 	db	127
   750  00FEAF  00                 	db	0
   751  00FEB0  00                 	db	0
   752  00FEB1  04                 	db	4
   753  00FEB2  02                 	db	2
   754  00FEB3  01                 	db	1
   755  00FEB4  02                 	db	2
   756  00FEB5  04                 	db	4
   757  00FEB6  40                 	db	64
   758  00FEB7  40                 	db	64
   759  00FEB8  40                 	db	64
   760  00FEB9  40                 	db	64
   761  00FEBA  40                 	db	64
   762  00FEBB  00                 	db	0
   763  00FEBC  01                 	db	1
   764  00FEBD  02                 	db	2
   765  00FEBE  04                 	db	4
   766  00FEBF  00                 	db	0
   767  00FEC0  20                 	db	32
   768  00FEC1  54                 	db	84
   769  00FEC2  54                 	db	84
   770  00FEC3  54                 	db	84
   771  00FEC4  78                 	db	120
   772  00FEC5  7F                 	db	127
   773  00FEC6  48                 	db	72
   774  00FEC7  44                 	db	68
   775  00FEC8  44                 	db	68
   776  00FEC9  38                 	db	56
   777  00FECA  38                 	db	56
   778  00FECB  44                 	db	68
   779  00FECC  44                 	db	68
   780  00FECD  44                 	db	68
   781  00FECE  20                 	db	32
   782  00FECF  38                 	db	56
   783  00FED0  44                 	db	68
   784  00FED1  44                 	db	68
   785  00FED2  48                 	db	72
   786  00FED3  7F                 	db	127
   787  00FED4  38                 	db	56
   788  00FED5  54                 	db	84
   789  00FED6  54                 	db	84
   790  00FED7  54                 	db	84
   791  00FED8  18                 	db	24
   792  00FED9  08                 	db	8
   793  00FEDA  7E                 	db	126
   794  00FEDB  09                 	db	9
   795  00FEDC  01                 	db	1
   796  00FEDD  02                 	db	2
   797  00FEDE  08                 	db	8
   798  00FEDF  14                 	db	20
   799  00FEE0  54                 	db	84
   800  00FEE1  54                 	db	84
   801  00FEE2  3C                 	db	60
   802  00FEE3  7F                 	db	127
   803  00FEE4  08                 	db	8
   804  00FEE5  04                 	db	4
   805  00FEE6  04                 	db	4
   806  00FEE7  78                 	db	120
   807  00FEE8  00                 	db	0
   808  00FEE9  44                 	db	68
   809  00FEEA  7D                 	db	125
   810  00FEEB  40                 	db	64
   811  00FEEC  00                 	db	0
   812  00FEED  20                 	db	32
   813  00FEEE  40                 	db	64
   814  00FEEF  44                 	db	68
   815  00FEF0  3D                 	db	61
   816  00FEF1  00                 	db	0
   817  00FEF2  00                 	db	0
   818  00FEF3  7F                 	db	127
   819  00FEF4  10                 	db	16
   820  00FEF5  28                 	db	40
   821  00FEF6  44                 	db	68
   822  00FEF7  00                 	db	0
   823  00FEF8  41                 	db	65
   824  00FEF9  7F                 	db	127
   825  00FEFA  40                 	db	64
   826  00FEFB  00                 	db	0
   827  00FEFC  7C                 	db	124
   828  00FEFD  04                 	db	4
   829  00FEFE  18                 	db	24
   830  00FEFF  04                 	db	4
   831  00FF00  78                 	db	120
   832  00FF01  7C                 	db	124
   833  00FF02  08                 	db	8
   834  00FF03  04                 	db	4
   835  00FF04  04                 	db	4
   836  00FF05  78                 	db	120
   837  00FF06  38                 	db	56
   838  00FF07  44                 	db	68
   839  00FF08  44                 	db	68
   840  00FF09  44                 	db	68
   841  00FF0A  38                 	db	56
   842  00FF0B  7C                 	db	124
   843  00FF0C  14                 	db	20
   844  00FF0D  14                 	db	20
   845  00FF0E  14                 	db	20
   846  00FF0F  08                 	db	8
   847  00FF10  08                 	db	8
   848  00FF11  14                 	db	20
   849  00FF12  14                 	db	20
   850  00FF13  18                 	db	24
   851  00FF14  7C                 	db	124
   852  00FF15  7C                 	db	124
   853  00FF16  08                 	db	8
   854  00FF17  04                 	db	4
   855  00FF18  04                 	db	4
   856  00FF19  08                 	db	8
   857  00FF1A  48                 	db	72
   858  00FF1B  54                 	db	84
   859  00FF1C  54                 	db	84
   860  00FF1D  54                 	db	84
   861  00FF1E  20                 	db	32
   862  00FF1F  04                 	db	4
   863  00FF20  3F                 	db	63
   864  00FF21  44                 	db	68
   865  00FF22  40                 	db	64
   866  00FF23  20                 	db	32
   867  00FF24  3C                 	db	60
   868  00FF25  40                 	db	64
   869  00FF26  40                 	db	64
   870  00FF27  20                 	db	32
   871  00FF28  7C                 	db	124
   872  00FF29  1C                 	db	28
   873  00FF2A  20                 	db	32
   874  00FF2B  40                 	db	64
   875  00FF2C  20                 	db	32
   876  00FF2D  1C                 	db	28
   877  00FF2E  3C                 	db	60
   878  00FF2F  40                 	db	64
   879  00FF30  30                 	db	48
   880  00FF31  40                 	db	64
   881  00FF32  3C                 	db	60
   882  00FF33  44                 	db	68
   883  00FF34  28                 	db	40
   884  00FF35  10                 	db	16
   885  00FF36  28                 	db	40
   886  00FF37  44                 	db	68
   887  00FF38  0C                 	db	12
   888  00FF39  50                 	db	80
   889  00FF3A  50                 	db	80
   890  00FF3B  50                 	db	80
   891  00FF3C  3C                 	db	60
   892  00FF3D  44                 	db	68
   893  00FF3E  64                 	db	100
   894  00FF3F  54                 	db	84
   895  00FF40  4C                 	db	76
   896  00FF41  44                 	db	68
   897  00FF42  00                 	db	0
   898  00FF43  08                 	db	8
   899  00FF44  36                 	db	54
   900  00FF45  41                 	db	65
   901  00FF46  00                 	db	0
   902  00FF47  00                 	db	0
   903  00FF48  00                 	db	0
   904  00FF49  7F                 	db	127
   905  00FF4A  00                 	db	0
   906  00FF4B  00                 	db	0
   907  00FF4C  00                 	db	0
   908  00FF4D  41                 	db	65
   909  00FF4E  36                 	db	54
   910  00FF4F  08                 	db	8
   911  00FF50  00                 	db	0
   912  00FF51  08                 	db	8
   913  00FF52  08                 	db	8
   914  00FF53  2A                 	db	42
   915  00FF54  1C                 	db	28
   916  00FF55  08                 	db	8
   917  00FF56  08                 	db	8
   918  00FF57  1C                 	db	28
   919  00FF58  2A                 	db	42
   920  00FF59  08                 	db	8
   921  00FF5A  08                 	db	8
   922  00FF5B                     __end_of_Font5x7:
   923                           	opt stack 0
   924  00FF5B                     _PortG_Property:
   925                           	opt stack 0
   926  00FF5B  FC00               	dw	64512
   927  00FF5D                     __end_of_PortG_Property:
   928                           	opt stack 0
   929  00FF5D                     _PortF_Property:
   930                           	opt stack 0
   931  00FF5D  0FFF               	dw	4095
   932  00FF5F                     __end_of_PortF_Property:
   933                           	opt stack 0
   934  00FF5F                     _PortE_Property:
   935                           	opt stack 0
   936  00FF5F  0000               	dw	0
   937  00FF61                     __end_of_PortE_Property:
   938                           	opt stack 0
   939  00FF61                     _PortD_Property:
   940                           	opt stack 0
   941  00FF61  FFFF               	dw	65535
   942  00FF63                     __end_of_PortD_Property:
   943                           	opt stack 0
   944  00FF63                     _PortC_Property:
   945                           	opt stack 0
   946  00FF63  FFF0               	dw	65520
   947  00FF65                     __end_of_PortC_Property:
   948                           	opt stack 0
   949  00FF65                     _PortB_Property:
   950                           	opt stack 0
   951  00FF65  FF00               	dw	65280
   952  00FF67                     __end_of_PortB_Property:
   953                           	opt stack 0
   954  00FF67                     _PortA_Property:
   955                           	opt stack 0
   956  00FF67  00FF               	dw	255
   957  00FF69                     __end_of_PortA_Property:
   958                           	opt stack 0
   959  0000                     _TMR0	set	4054
   960  0000                     _PR2	set	4043
   961  0000                     _T2CONbits	set	4042
   962  0000                     _T0CONbits	set	4053
   963  0000                     _RCONbits	set	4048
   964  0000                     _OSCTUNEbits	set	3995
   965  0000                     _PIR3	set	4004
   966  0000                     _PIR2	set	4001
   967  0000                     _PIR1	set	3998
   968  0000                     _INTCONbits	set	4082
   969  0000                     _SSP2CON2bits	set	3947
   970  0000                     _SSP1CON2bits	set	4037
   971  0000                     _SSP1ADD	set	4040
   972  0000                     _ANCON0	set	4033
   973  0000                     _ADRESL	set	4035
   974  0000                     _ADRESH	set	4036
   975  0000                     _ADCON1bits	set	4033
   976  0000                     _ADCON0bits	set	4034
   977  0000                     _SSP2CON1bits	set	3948
   978  0000                     _SSP1CON1bits	set	4038
   979  0000                     _SSP2STATbits	set	3949
   980  0000                     _SSP1STATbits	set	4039
   981  0000                     _PIE3bits	set	4003
   982  0000                     _PIE1bits	set	3997
   983  0000                     _PIR3bits	set	4004
   984  0000                     _PIR1bits	set	3998
   985  0000                     _IPR3bits	set	4005
   986  0000                     _IPR1bits	set	3999
   987  0000                     _PORTFbits	set	3973
   988  0000                     _SSP2CON2	set	3947
   989  0000                     _SSP1CON2	set	4037
   990  0000                     _SSP2BUF	set	3951
   991  0000                     _SSP2CON1	set	3948
   992  0000                     _SSP2STAT	set	3949
   993  0000                     _SSP1BUF	set	4041
   994  0000                     _SSP1CON1	set	4038
   995  0000                     _SSP1STAT	set	4039
   996  0000                     _LATG	set	3983
   997  0000                     _LATF	set	3982
   998  0000                     _LATE	set	3981
   999  0000                     _LATD	set	3980
  1000  0000                     _LATC	set	3979
  1001  0000                     _LATB	set	3978
  1002  0000                     _LATA	set	3977
  1003  0000                     _TRISG	set	3992
  1004  0000                     _TRISF	set	3991
  1005  0000                     _TRISE	set	3990
  1006  0000                     _TRISD	set	3989
  1007  0000                     _TRISC	set	3988
  1008  0000                     _TRISB	set	3987
  1009  0000                     _TRISA	set	3986
  1010  0000                     _PORTG	set	3974
  1011  0000                     _PORTF	set	3973
  1012  0000                     _PORTE	set	3972
  1013  0000                     _PORTD	set	3971
  1014  0000                     _PORTC	set	3970
  1015  0000                     _PORTB	set	3969
  1016  0000                     _PORTA	set	3968
  1017  00FF69                     STR_11:
  1018  00FF69  20                 	db	32
  1019  00FF6A  20                 	db	32
  1020  00FF6B  20                 	db	32
  1021  00FF6C  20                 	db	32
  1022  00FF6D  20                 	db	32
  1023  00FF6E  20                 	db	32
  1024  00FF6F  20                 	db	32
  1025  00FF70  20                 	db	32
  1026  00FF71  20                 	db	32
  1027  00FF72  20                 	db	32
  1028  00FF73  20                 	db	32
  1029  00FF74  20                 	db	32
  1030  00FF75  20                 	db	32
  1031  00FF76  20                 	db	32
  1032  00FF77  20                 	db	32
  1033  00FF78  20                 	db	32
  1034  00FF79  20                 	db	32
  1035  00FF7A  20                 	db	32
  1036  00FF7B  20                 	db	32
  1037  00FF7C  20                 	db	32
  1038  00FF7D  20                 	db	32
  1039  00FF7E  20                 	db	32
  1040  00FF7F  0A                 	db	10
  1041  00FF80  00                 	db	0
  1042  00FF81                     STR_1:
  1043  00FF81  4A                 	db	74	;'J'
  1044  00FF82  61                 	db	97	;'a'
  1045  00FF83  6D                 	db	109	;'m'
  1046  00FF84  69                 	db	105	;'i'
  1047  00FF85  6E                 	db	110	;'n'
  1048  00FF86  20                 	db	32
  1049  00FF87  45                 	db	69	;'E'
  1050  00FF88  61                 	db	97	;'a'
  1051  00FF89  72                 	db	114	;'r'
  1052  00FF8A  6C                 	db	108	;'l'
  1053  00FF8B  79                 	db	121	;'y'
  1054  00FF8C  20                 	db	32
  1055  00FF8D  39                 	db	57	;'9'
  1056  00FF8E  39                 	db	57	;'9'
  1057  00FF8F  31                 	db	49	;'1'
  1058  00FF90  33                 	db	51	;'3'
  1059  00FF91  33                 	db	51	;'3'
  1060  00FF92  33                 	db	51	;'3'
  1061  00FF93  39                 	db	57	;'9'
  1062  00FF94  31                 	db	49	;'1'
  1063  00FF95  0A                 	db	10
  1064  00FF96  00                 	db	0
  1065  00FF97                     STR_3:
  1066  00FF97  43                 	db	67	;'C'
  1067  00FF98  75                 	db	117	;'u'
  1068  00FF99  72                 	db	114	;'r'
  1069  00FF9A  72                 	db	114	;'r'
  1070  00FF9B  65                 	db	101	;'e'
  1071  00FF9C  6E                 	db	110	;'n'
  1072  00FF9D  74                 	db	116	;'t'
  1073  00FF9E  20                 	db	32
  1074  00FF9F  4D                 	db	77	;'M'
  1075  00FFA0  6F                 	db	111	;'o'
  1076  00FFA1  64                 	db	100	;'d'
  1077  00FFA2  65                 	db	101	;'e'
  1078  00FFA3  3A                 	db	58	;':'
  1079  00FFA4  0A                 	db	10
  1080  00FFA5  00                 	db	0
  1081  00FFA6                     STR_9:
  1082  00FFA6  44                 	db	68	;'D'
  1083  00FFA7  69                 	db	105	;'i'
  1084  00FFA8  72                 	db	114	;'r'
  1085  00FFA9  65                 	db	101	;'e'
  1086  00FFAA  63                 	db	99	;'c'
  1087  00FFAB  74                 	db	116	;'t'
  1088  00FFAC  69                 	db	105	;'i'
  1089  00FFAD  6F                 	db	111	;'o'
  1090  00FFAE  6E                 	db	110	;'n'
  1091  00FFAF  3A                 	db	58	;':'
  1092  00FFB0  20                 	db	32
  1093  00FFB1  25                 	db	37
  1094  00FFB2  64                 	db	100	;'d'
  1095  00FFB3  0A                 	db	10
  1096  00FFB4  00                 	db	0
  1097  00FFB5                     STR_6:
  1098  00FFB5  20                 	db	32
  1099  00FFB6  43                 	db	67	;'C'
  1100  00FFB7  6F                 	db	111	;'o'
  1101  00FFB8  6E                 	db	110	;'n'
  1102  00FFB9  74                 	db	116	;'t'
  1103  00FFBA  69                 	db	105	;'i'
  1104  00FFBB  6E                 	db	110	;'n'
  1105  00FFBC  75                 	db	117	;'u'
  1106  00FFBD  6F                 	db	111	;'o'
  1107  00FFBE  75                 	db	117	;'u'
  1108  00FFBF  73                 	db	115	;'s'
  1109  00FFC0  0A                 	db	10
  1110  00FFC1  0A                 	db	10
  1111  00FFC2  00                 	db	0
  1112  00FFC3                     STR_7:
  1113  00FFC3  20                 	db	32
  1114  00FFC4  55                 	db	85	;'U'
  1115  00FFC5  6E                 	db	110	;'n'
  1116  00FFC6  64                 	db	100	;'d'
  1117  00FFC7  65                 	db	101	;'e'
  1118  00FFC8  66                 	db	102	;'f'
  1119  00FFC9  69                 	db	105	;'i'
  1120  00FFCA  6E                 	db	110	;'n'
  1121  00FFCB  65                 	db	101	;'e'
  1122  00FFCC  64                 	db	100	;'d'
  1123  00FFCD  0A                 	db	10
  1124  00FFCE  0A                 	db	10
  1125  00FFCF  00                 	db	0
  1126  00FFD0                     STR_10:
  1127  00FFD0  6D                 	db	109	;'m'
  1128  00FFD1  44                 	db	68	;'D'
  1129  00FFD2  65                 	db	101	;'e'
  1130  00FFD3  6C                 	db	108	;'l'
  1131  00FFD4  74                 	db	116	;'t'
  1132  00FFD5  61                 	db	97	;'a'
  1133  00FFD6  3A                 	db	58	;':'
  1134  00FFD7  20                 	db	32
  1135  00FFD8  25                 	db	37
  1136  00FFD9  6C                 	db	108	;'l'
  1137  00FFDA  64                 	db	100	;'d'
  1138  00FFDB  0A                 	db	10
  1139  00FFDC  00                 	db	0
  1140  00FFDD                     STR_4:
  1141  00FFDD  20                 	db	32
  1142  00FFDE  50                 	db	80	;'P'
  1143  00FFDF  6F                 	db	111	;'o'
  1144  00FFE0  73                 	db	115	;'s'
  1145  00FFE1  69                 	db	105	;'i'
  1146  00FFE2  74                 	db	116	;'t'
  1147  00FFE3  69                 	db	105	;'i'
  1148  00FFE4  6F                 	db	111	;'o'
  1149  00FFE5  6E                 	db	110	;'n'
  1150  00FFE6  0A                 	db	10
  1151  00FFE7  0A                 	db	10
  1152  00FFE8  00                 	db	0
  1153  00FFE9                     STR_8:
  1154  00FFE9  53                 	db	83	;'S'
  1155  00FFEA  70                 	db	112	;'p'
  1156  00FFEB  65                 	db	101	;'e'
  1157  00FFEC  65                 	db	101	;'e'
  1158  00FFED  64                 	db	100	;'d'
  1159  00FFEE  3A                 	db	58	;':'
  1160  00FFEF  20                 	db	32
  1161  00FFF0  25                 	db	37
  1162  00FFF1  64                 	db	100	;'d'
  1163  00FFF2  0A                 	db	10
  1164  00FFF3  00                 	db	0
  1165  00FFF4                     STR_5:
  1166  00FFF4  20                 	db	32
  1167  00FFF5  53                 	db	83	;'S'
  1168  00FFF6  74                 	db	116	;'t'
  1169  00FFF7  65                 	db	101	;'e'
  1170  00FFF8  70                 	db	112	;'p'
  1171  00FFF9  0A                 	db	10
  1172  00FFFA  0A                 	db	10
  1173  00FFFB  00                 	db	0
  1174  00FFFC                     STR_2:
  1175  00FFFC  25                 	db	37
  1176  00FFFD  63                 	db	99	;'c'
  1177  00FFFE  00                 	db	0
  1178  0000                     
  1179                           ; #config settings
  1180  00FFFF  00                 	db	0	; dummy byte at the end
  1181  0000                     
  1182                           	psect	cinit
  1183  012D70                     __pcinit:
  1184                           	opt stack 0
  1185  012D70                     start_initialization:
  1186                           	opt stack 0
  1187  012D70                     __initialization:
  1188                           	opt stack 0
  1189                           
  1190                           ; Initialize objects allocated to BANK1 (8 bytes)
  1191                           ; load TBLPTR registers with __pidataBANK1
  1192  012D70  0E2E               	movlw	low __pidataBANK1
  1193  012D72  6EF6               	movwf	tblptrl,c
  1194  012D74  0E4B               	movlw	high __pidataBANK1
  1195  012D76  6EF7               	movwf	tblptrh,c
  1196  012D78  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1197  012D7A  6EF8               	movwf	tblptru,c
  1198  012D7C  EE01  F0CC         	lfsr	0,__pdataBANK1
  1199  012D80  EE10 F008          	lfsr	1,8
  1200  012D84                     copy_data0:
  1201  012D84  0009               	tblrd		*+
  1202  012D86  CFF5 FFEE          	movff	tablat,postinc0
  1203  012D8A  50E5               	movf	postdec1,w,c
  1204  012D8C  50E1               	movf	fsr1l,w,c
  1205  012D8E  E1FA               	bnz	copy_data0
  1206                           
  1207                           ; Initialize objects allocated to BANK0 (7 bytes)
  1208                           ; load TBLPTR registers with __pidataBANK0
  1209  012D90  0E3E               	movlw	low __pidataBANK0
  1210  012D92  6EF6               	movwf	tblptrl,c
  1211  012D94  0E4B               	movlw	high __pidataBANK0
  1212  012D96  6EF7               	movwf	tblptrh,c
  1213  012D98  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1214  012D9A  6EF8               	movwf	tblptru,c
  1215  012D9C  EE00  F0F9         	lfsr	0,__pdataBANK0
  1216  012DA0  EE10 F007          	lfsr	1,7
  1217  012DA4                     copy_data1:
  1218  012DA4  0009               	tblrd		*+
  1219  012DA6  CFF5 FFEE          	movff	tablat,postinc0
  1220  012DAA  50E5               	movf	postdec1,w,c
  1221  012DAC  50E1               	movf	fsr1l,w,c
  1222  012DAE  E1FA               	bnz	copy_data1
  1223                           
  1224                           ; Initialize objects allocated to COMRAM (10 bytes)
  1225                           ; load TBLPTR registers with __pidataCOMRAM
  1226  012DB0  0E06               	movlw	low __pidataCOMRAM
  1227  012DB2  6EF6               	movwf	tblptrl,c
  1228  012DB4  0E4B               	movlw	high __pidataCOMRAM
  1229  012DB6  6EF7               	movwf	tblptrh,c
  1230  012DB8  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1231  012DBA  6EF8               	movwf	tblptru,c
  1232  012DBC  EE00  F03F         	lfsr	0,__pdataCOMRAM
  1233  012DC0  EE10 F00A          	lfsr	1,10
  1234  012DC4                     copy_data2:
  1235  012DC4  0009               	tblrd		*+
  1236  012DC6  CFF5 FFEE          	movff	tablat,postinc0
  1237  012DCA  50E5               	movf	postdec1,w,c
  1238  012DCC  50E1               	movf	fsr1l,w,c
  1239  012DCE  E1FA               	bnz	copy_data2
  1240                           
  1241                           ; Clear objects allocated to BIGRAM (300 bytes)
  1242  012DD0  EE02  F046         	lfsr	0,__pbssBIGRAM
  1243  012DD4  EE11 F02C          	lfsr	1,300
  1244  012DD8                     clear_0:
  1245  012DD8  6AEE               	clrf	postinc0,c
  1246  012DDA  50E5               	movf	postdec1,w,c
  1247  012DDC  50E1               	movf	fsr1l,w,c
  1248  012DDE  E1FC               	bnz	clear_0
  1249  012DE0  50E2               	movf	fsr1h,w,c
  1250  012DE2  E1FA               	bnz	clear_0
  1251                           
  1252                           ; Clear objects allocated to BANK2 (70 bytes)
  1253  012DE4  EE02  F000         	lfsr	0,__pbssBANK2
  1254  012DE8  0E46               	movlw	70
  1255  012DEA                     clear_1:
  1256  012DEA  6AEE               	clrf	postinc0,c
  1257  012DEC  06E8               	decf	wreg,f,c
  1258  012DEE  E1FD               	bnz	clear_1
  1259                           
  1260                           ; Clear objects allocated to BANK1 (182 bytes)
  1261  012DF0  EE01  F000         	lfsr	0,__pbssBANK1
  1262  012DF4  0EB6               	movlw	182
  1263  012DF6                     clear_2:
  1264  012DF6  6AEE               	clrf	postinc0,c
  1265  012DF8  06E8               	decf	wreg,f,c
  1266  012DFA  E1FD               	bnz	clear_2
  1267                           
  1268                           ; Clear objects allocated to BANK0 (101 bytes)
  1269  012DFC  EE00  F060         	lfsr	0,__pbssBANK0
  1270  012E00  0E65               	movlw	101
  1271  012E02                     clear_3:
  1272  012E02  6AEE               	clrf	postinc0,c
  1273  012E04  06E8               	decf	wreg,f,c
  1274  012E06  E1FD               	bnz	clear_3
  1275                           
  1276                           ; Clear objects allocated to COMRAM (26 bytes)
  1277  012E08  EE00  F025         	lfsr	0,__pbssCOMRAM
  1278  012E0C  0E1A               	movlw	26
  1279  012E0E                     clear_4:
  1280  012E0E  6AEE               	clrf	postinc0,c
  1281  012E10  06E8               	decf	wreg,f,c
  1282  012E12  E1FD               	bnz	clear_4
  1283  012E14                     end_of_initialization:
  1284                           	opt stack 0
  1285  012E14                     __end_of__initialization:
  1286                           	opt stack 0
  1287  012E14  9049               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1288  012E16  9249               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1289  012E18  0100               	movlb	0
  1290  012E1A  EFBC  F0A3         	goto	_main	;jump to C main() function
  1291                           tblptru	equ	0xFF8
  1292                           tblptrh	equ	0xFF7
  1293                           tblptrl	equ	0xFF6
  1294                           tablat	equ	0xFF5
  1295                           postinc0	equ	0xFEE
  1296                           wreg	equ	0xFE8
  1297                           postdec1	equ	0xFE5
  1298                           fsr1h	equ	0xFE2
  1299                           fsr1l	equ	0xFE1
  1300                           
  1301                           	psect	bssCOMRAM
  1302  000025                     __pbssCOMRAM:
  1303                           	opt stack 0
  1304  000025                     _lQueue:
  1305                           	opt stack 0
  1306  000025                     	ds	3
  1307  000028                     _COUNTER:
  1308                           	opt stack 0
  1309  000028                     	ds	2
  1310  00002A                     _lMotor:
  1311                           	opt stack 0
  1312  00002A                     	ds	2
  1313  00002C                     HMI_GRender@a:
  1314                           	opt stack 0
  1315  00002C                     	ds	2
  1316  00002E                     Timer2_Init@PRE:
  1317                           	opt stack 0
  1318  00002E                     	ds	1
  1319  00002F                     Timer2_Init@INDEX:
  1320                           	opt stack 0
  1321  00002F                     	ds	1
  1322  000030                     Timer0_Init@PRE:
  1323                           	opt stack 0
  1324  000030                     	ds	1
  1325  000031                     _INDEX:
  1326                           	opt stack 0
  1327  000031                     	ds	1
  1328  000032                     rand@screw:
  1329                           	opt stack 0
  1330  000032                     	ds	1
  1331  000033                     OutSeg@a:
  1332                           	opt stack 0
  1333  000033                     	ds	1
  1334  000034                     OutSeg@segset:
  1335                           	opt stack 0
  1336  000034                     	ds	1
  1337  000035                     OutSeg@cur:
  1338                           	opt stack 0
  1339  000035                     	ds	1
  1340  000036                     _lBufferY:
  1341                           	opt stack 0
  1342  000036                     	ds	1
  1343  000037                     _lBufferX:
  1344                           	opt stack 0
  1345  000037                     	ds	1
  1346  000038                     _I2C1T:
  1347                           	opt stack 0
  1348  000038                     	ds	7
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           postinc0	equ	0xFEE
  1354                           wreg	equ	0xFE8
  1355                           postdec1	equ	0xFE5
  1356                           fsr1h	equ	0xFE2
  1357                           fsr1l	equ	0xFE1
  1358                           
  1359                           	psect	dataCOMRAM
  1360  00003F                     __pdataCOMRAM:
  1361                           	opt stack 0
  1362  00003F                     _gCursor:
  1363                           	opt stack 0
  1364  00003F                     	ds	4
  1365  000043                     _Bus_State:
  1366                           	opt stack 0
  1367  000043                     	ds	1
  1368  000044                     	ds	1
  1369  000045                     	ds	1
  1370  000046                     	ds	1
  1371  000047                     _l:
  1372                           	opt stack 0
  1373  000047                     	ds	1
  1374  000048                     _w:
  1375                           	opt stack 0
  1376  000048                     	ds	1
  1377                           tblptru	equ	0xFF8
  1378                           tblptrh	equ	0xFF7
  1379                           tblptrl	equ	0xFF6
  1380                           tablat	equ	0xFF5
  1381                           postinc0	equ	0xFEE
  1382                           wreg	equ	0xFE8
  1383                           postdec1	equ	0xFE5
  1384                           fsr1h	equ	0xFE2
  1385                           fsr1l	equ	0xFE1
  1386                           
  1387                           	psect	bssBANK0
  1388  000060                     __pbssBANK0:
  1389                           	opt stack 0
  1390  000060                     Timer2_Init@DIV:
  1391                           	opt stack 0
  1392  000060                     	ds	4
  1393  000064                     Timer0_Init@DIV:
  1394                           	opt stack 0
  1395  000064                     	ds	4
  1396  000068                     _gISR:
  1397                           	opt stack 0
  1398  000068                     	ds	3
  1399  00006B                     _lStepFunction:
  1400                           	opt stack 0
  1401  00006B                     	ds	3
  1402  00006E                     _pShiftVal:
  1403                           	opt stack 0
  1404  00006E                     	ds	2
  1405  000070                     _val:
  1406                           	opt stack 0
  1407  000070                     	ds	2
  1408  000072                     _lCurrent:
  1409                           	opt stack 0
  1410  000072                     	ds	2
  1411  000074                     _gBackcolour:
  1412                           	opt stack 0
  1413  000074                     	ds	2
  1414  000076                     SPI_Send9@dat:
  1415                           	opt stack 0
  1416  000076                     	ds	2
  1417  000078                     Event_TestButton@j:
  1418                           	opt stack 0
  1419  000078                     	ds	1
  1420  000079                     _u:
  1421                           	opt stack 0
  1422  000079                     	ds	1
  1423  00007A                     _j:
  1424                           	opt stack 0
  1425  00007A                     	ds	1
  1426  00007B                     _i:
  1427                           	opt stack 0
  1428  00007B                     	ds	1
  1429  00007C                     _ADC_Initialised:
  1430                           	opt stack 0
  1431  00007C                     	ds	1
  1432  00007D                     _clearall:
  1433                           	opt stack 0
  1434  00007D                     	ds	1
  1435  00007E                     _PortE:
  1436                           	opt stack 0
  1437  00007E                     	ds	10
  1438  000088                     _PortD:
  1439                           	opt stack 0
  1440  000088                     	ds	10
  1441  000092                     _PortC:
  1442                           	opt stack 0
  1443  000092                     	ds	10
  1444  00009C                     _I2C2T:
  1445                           	opt stack 0
  1446  00009C                     	ds	7
  1447  0000A3                     _Stepper:
  1448                           	opt stack 0
  1449  0000A3                     	ds	6
  1450  0000A9                     _ADC_AN3:
  1451                           	opt stack 0
  1452  0000A9                     	ds	5
  1453  0000AE                     _ADC_AN2:
  1454                           	opt stack 0
  1455  0000AE                     	ds	5
  1456  0000B3                     _ADC_AN1:
  1457                           	opt stack 0
  1458  0000B3                     	ds	5
  1459  0000B8                     _ADC_AN0:
  1460                           	opt stack 0
  1461  0000B8                     	ds	5
  1462  0000BD                     LCD_DrawRectangle@p4:
  1463                           	opt stack 0
  1464  0000BD                     	ds	4
  1465  0000C1                     LCD_DrawRectangle@p2:
  1466                           	opt stack 0
  1467  0000C1                     	ds	4
  1468                           tblptru	equ	0xFF8
  1469                           tblptrh	equ	0xFF7
  1470                           tblptrl	equ	0xFF6
  1471                           tablat	equ	0xFF5
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           postdec1	equ	0xFE5
  1475                           fsr1h	equ	0xFE2
  1476                           fsr1l	equ	0xFE1
  1477                           
  1478                           	psect	dataBANK0
  1479  0000F9                     __pdataBANK0:
  1480                           	opt stack 0
  1481  0000F9                     _gCharSize:
  1482                           	opt stack 0
  1483  0000F9                     	ds	4
  1484  0000FD                     _gForecolour:
  1485                           	opt stack 0
  1486  0000FD                     	ds	2
  1487  0000FF                     _change:
  1488                           	opt stack 0
  1489  0000FF                     	ds	1
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1h	equ	0xFE2
  1498                           fsr1l	equ	0xFE1
  1499                           
  1500                           	psect	bssBANK1
  1501  000100                     __pbssBANK1:
  1502                           	opt stack 0
  1503  000100                     _lCBuffer:
  1504                           	opt stack 0
  1505  000100                     	ds	30
  1506  00011E                     _I2C2_More:
  1507                           	opt stack 0
  1508  00011E                     	ds	3
  1509  000121                     _I2C1_More:
  1510                           	opt stack 0
  1511  000121                     	ds	3
  1512  000124                     _I2C2_Done:
  1513                           	opt stack 0
  1514  000124                     	ds	3
  1515  000127                     _I2C1_Done:
  1516                           	opt stack 0
  1517  000127                     	ds	3
  1518  00012A                     _HMIBoard:
  1519                           	opt stack 0
  1520  00012A                     	ds	58
  1521  000164                     _SPI1:
  1522                           	opt stack 0
  1523  000164                     	ds	11
  1524  00016F                     _SPI2:
  1525                           	opt stack 0
  1526  00016F                     	ds	11
  1527  00017A                     _DIPSwitch:
  1528                           	opt stack 0
  1529  00017A                     	ds	10
  1530  000184                     _TestButton:
  1531                           	opt stack 0
  1532  000184                     	ds	10
  1533  00018E                     _PortG:
  1534                           	opt stack 0
  1535  00018E                     	ds	10
  1536  000198                     _PortB:
  1537                           	opt stack 0
  1538  000198                     	ds	10
  1539  0001A2                     _PortA:
  1540                           	opt stack 0
  1541  0001A2                     	ds	10
  1542  0001AC                     _PortF:
  1543                           	opt stack 0
  1544  0001AC                     	ds	10
  1545                           tblptru	equ	0xFF8
  1546                           tblptrh	equ	0xFF7
  1547                           tblptrl	equ	0xFF6
  1548                           tablat	equ	0xFF5
  1549                           postinc0	equ	0xFEE
  1550                           wreg	equ	0xFE8
  1551                           postdec1	equ	0xFE5
  1552                           fsr1h	equ	0xFE2
  1553                           fsr1l	equ	0xFE1
  1554                           
  1555                           	psect	dataBANK1
  1556  0001CC                     __pdataBANK1:
  1557                           	opt stack 0
  1558  0001CC                     Console_Render@F6956:
  1559                           	opt stack 0
  1560  0001CC                     	ds	4
  1561  0001D0                     _gLineSize:
  1562                           	opt stack 0
  1563  0001D0                     	ds	4
  1564                           tblptru	equ	0xFF8
  1565                           tblptrh	equ	0xFF7
  1566                           tblptrl	equ	0xFF6
  1567                           tablat	equ	0xFF5
  1568                           postinc0	equ	0xFEE
  1569                           wreg	equ	0xFE8
  1570                           postdec1	equ	0xFE5
  1571                           fsr1h	equ	0xFE2
  1572                           fsr1l	equ	0xFE1
  1573                           
  1574                           	psect	bssBANK2
  1575  000200                     __pbssBANK2:
  1576                           	opt stack 0
  1577  000200                     Console_MakeField@Fill:
  1578                           	opt stack 0
  1579  000200                     	ds	70
  1580                           tblptru	equ	0xFF8
  1581                           tblptrh	equ	0xFF7
  1582                           tblptrl	equ	0xFF6
  1583                           tablat	equ	0xFF5
  1584                           postinc0	equ	0xFEE
  1585                           wreg	equ	0xFE8
  1586                           postdec1	equ	0xFE5
  1587                           fsr1h	equ	0xFE2
  1588                           fsr1l	equ	0xFE1
  1589                           
  1590                           	psect	bssBIGRAM
  1591  000246                     __pbssBIGRAM:
  1592                           	opt stack 0
  1593  000246                     _lBuffer:
  1594                           	opt stack 0
  1595  000246                     	ds	300
  1596                           tblptru	equ	0xFF8
  1597                           tblptrh	equ	0xFF7
  1598                           tblptrl	equ	0xFF6
  1599                           tablat	equ	0xFF5
  1600                           postinc0	equ	0xFEE
  1601                           wreg	equ	0xFE8
  1602                           postdec1	equ	0xFE5
  1603                           fsr1h	equ	0xFE2
  1604                           fsr1l	equ	0xFE1
  1605                           
  1606                           	psect	cstackBANK1
  1607  0001B6                     __pcstackBANK1:
  1608                           	opt stack 0
  1609  0001B6                     Port_CheckQuadType@Pair1:
  1610                           	opt stack 0
  1611  0001B6                     SPI_Init@pInput:
  1612                           	opt stack 0
  1613  0001B6                     setMode@mode:
  1614                           	opt stack 0
  1615                           
  1616                           ; 2 bytes @ 0x0
  1617  0001B6                     	ds	1
  1618  0001B7                     Port_CheckQuadType@Pair2:
  1619                           	opt stack 0
  1620                           
  1621                           ; 1 bytes @ 0x1
  1622  0001B7                     	ds	1
  1623  0001B8                     ??_LCD_Init:
  1624  0001B8                     Port_CheckQuadType@Output:
  1625                           	opt stack 0
  1626                           
  1627                           ; 1 bytes @ 0x2
  1628  0001B8                     	ds	1
  1629  0001B9                     Port_CheckPortType@pInput:
  1630                           	opt stack 0
  1631  0001B9                     Port_SetQuadType@pInput:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x3
  1635  0001B9                     	ds	1
  1636  0001BA                     LCD_Init@i:
  1637                           	opt stack 0
  1638                           
  1639                           ; 2 bytes @ 0x4
  1640  0001BA                     	ds	1
  1641  0001BB                     Port_CheckPortType@pDrive:
  1642                           	opt stack 0
  1643  0001BB                     Port_SetQuadType@pQuad:
  1644                           	opt stack 0
  1645                           
  1646                           ; 1 bytes @ 0x5
  1647  0001BB                     	ds	1
  1648  0001BC                     Port_SetQuadType@pType:
  1649                           	opt stack 0
  1650  0001BC                     Port_SetType@pInput:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0x6
  1654  0001BC                     	ds	1
  1655  0001BD                     Button_Init@pInput:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x7
  1659  0001BD                     	ds	1
  1660  0001BE                     Port_SetType@pType:
  1661                           	opt stack 0
  1662                           
  1663                           ; 1 bytes @ 0x8
  1664  0001BE                     	ds	1
  1665  0001BF                     ??_Port_SetType:
  1666  0001BF                     Button_Init@pThreshold:
  1667                           	opt stack 0
  1668                           
  1669                           ; 2 bytes @ 0x9
  1670  0001BF                     	ds	2
  1671  0001C1                     Port_SetType@Output:
  1672                           	opt stack 0
  1673  0001C1                     Button_Init@pInitIO:
  1674                           	opt stack 0
  1675                           
  1676                           ; 3 bytes @ 0xB
  1677  0001C1                     	ds	1
  1678  0001C2                     Port_Init@pInput:
  1679                           	opt stack 0
  1680                           
  1681                           ; 2 bytes @ 0xC
  1682  0001C2                     	ds	2
  1683  0001C4                     Port_Init@pPort:
  1684                           	opt stack 0
  1685  0001C4                     Button_Init@pGetState:
  1686                           	opt stack 0
  1687                           
  1688                           ; 3 bytes @ 0xE
  1689  0001C4                     	ds	1
  1690  0001C5                     ??_Port_Init:
  1691                           
  1692                           ; 1 bytes @ 0xF
  1693  0001C5                     	ds	2
  1694  0001C7                     Port_Init@i:
  1695                           	opt stack 0
  1696  0001C7                     Button_Init@pFunction:
  1697                           	opt stack 0
  1698                           
  1699                           ; 3 bytes @ 0x11
  1700  0001C7                     	ds	3
  1701  0001CA                     HMI_Init@in:
  1702                           	opt stack 0
  1703                           
  1704                           ; 2 bytes @ 0x14
  1705  0001CA                     	ds	2
  1706                           tblptru	equ	0xFF8
  1707                           tblptrh	equ	0xFF7
  1708                           tblptrl	equ	0xFF6
  1709                           tablat	equ	0xFF5
  1710                           postinc0	equ	0xFEE
  1711                           wreg	equ	0xFE8
  1712                           postdec1	equ	0xFE5
  1713                           fsr1h	equ	0xFE2
  1714                           fsr1l	equ	0xFE1
  1715                           
  1716                           	psect	cstackBANK0
  1717  0000C5                     __pcstackBANK0:
  1718                           	opt stack 0
  1719  0000C5                     ??_Console_ClearCursor:
  1720  0000C5                     ??_Console_Init:
  1721  0000C5                     ??_Console_NewLine:
  1722  0000C5                     ??_Console_FormFeed:
  1723  0000C5                     ??_HMI_SetButton:
  1724  0000C5                     ?_GetPortProperties:
  1725                           	opt stack 0
  1726  0000C5                     ?_GetPortPORT:
  1727                           	opt stack 0
  1728  0000C5                     ?_GetPortTRIS:
  1729                           	opt stack 0
  1730  0000C5                     ?___wmul:
  1731                           	opt stack 0
  1732  0000C5                     ?___awdiv:
  1733                           	opt stack 0
  1734  0000C5                     ?___lwdiv:
  1735                           	opt stack 0
  1736  0000C5                     ?___lwmod:
  1737                           	opt stack 0
  1738  0000C5                     ?___lldiv:
  1739                           	opt stack 0
  1740  0000C5                     Mode_Set@pMode:
  1741                           	opt stack 0
  1742  0000C5                     ToSegment@pCHR:
  1743                           	opt stack 0
  1744  0000C5                     HMI_SetLeft@pValue:
  1745                           	opt stack 0
  1746  0000C5                     HMI_SetRight@pValue:
  1747                           	opt stack 0
  1748  0000C5                     HMI_SetUp@pValue:
  1749                           	opt stack 0
  1750  0000C5                     HMI_SetDown@pValue:
  1751                           	opt stack 0
  1752  0000C5                     HMI_SetBar@pValue:
  1753                           	opt stack 0
  1754  0000C5                     Port_GetPin@pInput:
  1755                           	opt stack 0
  1756  0000C5                     Port_GetQuad@pInput:
  1757                           	opt stack 0
  1758  0000C5                     SPI_DisableISR@pInput:
  1759                           	opt stack 0
  1760  0000C5                     SPI_DCS@pInput:
  1761                           	opt stack 0
  1762  0000C5                     SPI_Send@pInput:
  1763                           	opt stack 0
  1764  0000C5                     Byte_SetBit@pInput:
  1765                           	opt stack 0
  1766  0000C5                     Byte_GetBit@pInput:
  1767                           	opt stack 0
  1768  0000C5                     Byte_SetZone@pInput:
  1769                           	opt stack 0
  1770  0000C5                     Byte_GetZone@pInput:
  1771                           	opt stack 0
  1772  0000C5                     Byte_SetByte@pInput:
  1773                           	opt stack 0
  1774  0000C5                     delay_ms@ms:
  1775                           	opt stack 0
  1776  0000C5                     delay_us@us:
  1777                           	opt stack 0
  1778  0000C5                     reverse@input:
  1779                           	opt stack 0
  1780  0000C5                     Console_SetForecolour@pColour:
  1781                           	opt stack 0
  1782  0000C5                     ___wmul@multiplier:
  1783                           	opt stack 0
  1784  0000C5                     ___awdiv@dividend:
  1785                           	opt stack 0
  1786  0000C5                     ___lwdiv@dividend:
  1787                           	opt stack 0
  1788  0000C5                     ___lwmod@dividend:
  1789                           	opt stack 0
  1790  0000C5                     MXK_Queue@pCallback:
  1791                           	opt stack 0
  1792  0000C5                     Timer0_Start@pFunction:
  1793                           	opt stack 0
  1794  0000C5                     ___lldiv@dividend:
  1795                           	opt stack 0
  1796                           
  1797                           ; 4 bytes @ 0x0
  1798  0000C5                     	ds	1
  1799  0000C6                     HMI_SetSegments@pString:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x1
  1803  0000C6                     	ds	1
  1804  0000C7                     GetPortProperties@pInput:
  1805                           	opt stack 0
  1806  0000C7                     GetPortPORT@pInput:
  1807                           	opt stack 0
  1808  0000C7                     GetPortTRIS@pInput:
  1809                           	opt stack 0
  1810  0000C7                     Port_GetPin@pPin:
  1811                           	opt stack 0
  1812  0000C7                     Port_GetQuad@pQuad:
  1813                           	opt stack 0
  1814  0000C7                     SPI_Send@pData:
  1815                           	opt stack 0
  1816  0000C7                     Byte_SetBit@pBit:
  1817                           	opt stack 0
  1818  0000C7                     Byte_GetBit@pBit:
  1819                           	opt stack 0
  1820  0000C7                     Byte_SetZone@pMax:
  1821                           	opt stack 0
  1822  0000C7                     Byte_GetZone@pMax:
  1823                           	opt stack 0
  1824  0000C7                     Byte_SetByte@pValue:
  1825                           	opt stack 0
  1826  0000C7                     Console_Init@x:
  1827                           	opt stack 0
  1828  0000C7                     Console_FormFeed@x:
  1829                           	opt stack 0
  1830  0000C7                     reverse@length:
  1831                           	opt stack 0
  1832  0000C7                     ___wmul@multiplicand:
  1833                           	opt stack 0
  1834  0000C7                     ___awdiv@divisor:
  1835                           	opt stack 0
  1836  0000C7                     ___lwdiv@divisor:
  1837                           	opt stack 0
  1838  0000C7                     ___lwmod@divisor:
  1839                           	opt stack 0
  1840  0000C7                     delay_ms@u:
  1841                           	opt stack 0
  1842  0000C7                     delay_us@u:
  1843                           	opt stack 0
  1844  0000C7                     HMI_SetButton@reindex:
  1845                           	opt stack 0
  1846                           
  1847                           ; 4 bytes @ 0x2
  1848  0000C7                     	ds	1
  1849  0000C8                     ??_Port_GetPin:
  1850  0000C8                     ??_Port_GetQuad:
  1851  0000C8                     ??_Byte_GetBit:
  1852  0000C8                     LCD_Write@mode:
  1853                           	opt stack 0
  1854  0000C8                     Byte_SetBit@pValue:
  1855                           	opt stack 0
  1856  0000C8                     Byte_SetZone@pChunk:
  1857                           	opt stack 0
  1858  0000C8                     Byte_GetZone@pChunk:
  1859                           	opt stack 0
  1860  0000C8                     Console_Init@y:
  1861                           	opt stack 0
  1862  0000C8                     Console_FormFeed@y:
  1863                           	opt stack 0
  1864  0000C8                     Motor_Move@pMotor:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x3
  1868  0000C8                     	ds	1
  1869  0000C9                     ??_Byte_SetBit:
  1870  0000C9                     ??_Console_IncrementCursor:
  1871  0000C9                     LCD_Write@value:
  1872                           	opt stack 0
  1873  0000C9                     Byte_GetBit@Output:
  1874                           	opt stack 0
  1875  0000C9                     Byte_SetZone@pChunkSize:
  1876                           	opt stack 0
  1877  0000C9                     Byte_GetZone@pChunkSize:
  1878                           	opt stack 0
  1879  0000C9                     reverse@tempVar:
  1880                           	opt stack 0
  1881  0000C9                     ___awdiv@counter:
  1882                           	opt stack 0
  1883  0000C9                     ___lwdiv@counter:
  1884                           	opt stack 0
  1885  0000C9                     ___lwmod@counter:
  1886                           	opt stack 0
  1887  0000C9                     HMI_SetSegments@in:
  1888                           	opt stack 0
  1889  0000C9                     ___wmul@product:
  1890                           	opt stack 0
  1891  0000C9                     ___lldiv@divisor:
  1892                           	opt stack 0
  1893                           
  1894                           ; 4 bytes @ 0x4
  1895  0000C9                     	ds	1
  1896  0000CA                     ??_Byte_GetZone:
  1897  0000CA                     ?_Console_MakeField:
  1898                           	opt stack 0
  1899  0000CA                     Set_Addr_Window@ys:
  1900                           	opt stack 0
  1901  0000CA                     Set_Rotation@m:
  1902                           	opt stack 0
  1903  0000CA                     Port_GetPin@Output:
  1904                           	opt stack 0
  1905  0000CA                     Port_GetQuad@Output:
  1906                           	opt stack 0
  1907  0000CA                     Byte_SetZone@pValue:
  1908                           	opt stack 0
  1909  0000CA                     ___awdiv@sign:
  1910                           	opt stack 0
  1911  0000CA                     LCD_Word_Write@value:
  1912                           	opt stack 0
  1913  0000CA                     reverse@iterator:
  1914                           	opt stack 0
  1915  0000CA                     Motor_Move@pDelta:
  1916                           	opt stack 0
  1917  0000CA                     ___lwdiv@quotient:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x5
  1921  0000CA                     	ds	1
  1922  0000CB                     ??_Byte_SetZone:
  1923  0000CB                     Set_Addr_Window@xe:
  1924                           	opt stack 0
  1925  0000CB                     Set_Rotation@rotation:
  1926                           	opt stack 0
  1927  0000CB                     Byte_GetZone@MASK:
  1928                           	opt stack 0
  1929  0000CB                     HMI_SetButton@pValue:
  1930                           	opt stack 0
  1931  0000CB                     MXK_BlockSwitchTo@CUR:
  1932                           	opt stack 0
  1933  0000CB                     MXK_SwitchTo@CUR:
  1934                           	opt stack 0
  1935  0000CB                     ___awdiv@quotient:
  1936                           	opt stack 0
  1937                           
  1938                           ; 2 bytes @ 0x6
  1939  0000CB                     	ds	1
  1940  0000CC                     ??_Console_MakeField:
  1941  0000CC                     Set_Addr_Window@ye:
  1942                           	opt stack 0
  1943  0000CC                     Byte_GetZone@Offset:
  1944                           	opt stack 0
  1945  0000CC                     HMI_SetButton@v:
  1946                           	opt stack 0
  1947  0000CC                     MXK_BlockSwitchTo@pModule:
  1948                           	opt stack 0
  1949  0000CC                     MXK_SwitchTo@pModule:
  1950                           	opt stack 0
  1951  0000CC                     itos@input:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x7
  1955  0000CC                     	ds	1
  1956  0000CD                     ??_Console_Tab:
  1957  0000CD                     Set_Addr_Window@xs:
  1958                           	opt stack 0
  1959  0000CD                     Byte_GetZone@Output:
  1960                           	opt stack 0
  1961  0000CD                     ___lldiv@quotient:
  1962                           	opt stack 0
  1963                           
  1964                           ; 4 bytes @ 0x8
  1965  0000CD                     	ds	1
  1966  0000CE                     Byte_SetZone@Offset:
  1967                           	opt stack 0
  1968  0000CE                     LCD_Fill@pColour:
  1969                           	opt stack 0
  1970  0000CE                     LCD_FillRectangle@pColour:
  1971                           	opt stack 0
  1972  0000CE                     Byte_GetPair@pInput:
  1973                           	opt stack 0
  1974  0000CE                     itos@destination:
  1975                           	opt stack 0
  1976  0000CE                     Console_MakeField@Index:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x9
  1980  0000CE                     	ds	1
  1981  0000CF                     Byte_SetZone@MASK:
  1982                           	opt stack 0
  1983                           
  1984                           ; 1 bytes @ 0xA
  1985  0000CF                     	ds	1
  1986  0000D0                     LCD_Fill@i:
  1987                           	opt stack 0
  1988  0000D0                     Byte_GetPair@pPair:
  1989                           	opt stack 0
  1990  0000D0                     Console_MakeField@pInput:
  1991                           	opt stack 0
  1992  0000D0                     Byte_SetPair@pInput:
  1993                           	opt stack 0
  1994  0000D0                     Byte_SetQuad@pInput:
  1995                           	opt stack 0
  1996  0000D0                     itos@Data:
  1997                           	opt stack 0
  1998  0000D0                     LCD_FillRectangle@pPoint:
  1999                           	opt stack 0
  2000                           
  2001                           ; 4 bytes @ 0xB
  2002  0000D0                     	ds	1
  2003  0000D1                     LCD_Fill@j:
  2004                           	opt stack 0
  2005  0000D1                     ___lldiv@counter:
  2006                           	opt stack 0
  2007  0000D1                     Word_GetPair@pInput:
  2008                           	opt stack 0
  2009  0000D1                     Console_MakeField@Column:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0xC
  2013  0000D1                     	ds	1
  2014  0000D2                     ?___llmod:
  2015                           	opt stack 0
  2016  0000D2                     Byte_SetPair@pPair:
  2017                           	opt stack 0
  2018  0000D2                     Byte_SetQuad@pQuad:
  2019                           	opt stack 0
  2020  0000D2                     Console_Tab@t:
  2021                           	opt stack 0
  2022  0000D2                     itos@Length:
  2023                           	opt stack 0
  2024  0000D2                     Timer0_Init@pFrequency:
  2025                           	opt stack 0
  2026  0000D2                     Timer2_Init@pFrequency:
  2027                           	opt stack 0
  2028  0000D2                     ___llmod@dividend:
  2029                           	opt stack 0
  2030                           
  2031                           ; 4 bytes @ 0xD
  2032  0000D2                     	ds	1
  2033  0000D3                     Byte_SetPair@pValue:
  2034                           	opt stack 0
  2035  0000D3                     Byte_SetQuad@pValue:
  2036                           	opt stack 0
  2037  0000D3                     Word_GetPair@pPair:
  2038                           	opt stack 0
  2039  0000D3                     Console_Tab@i:
  2040                           	opt stack 0
  2041  0000D3                     _Console_MakeField$10974:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0xE
  2045  0000D3                     	ds	1
  2046  0000D4                     Console_Tab@c:
  2047                           	opt stack 0
  2048  0000D4                     Port_SetPin@pInput:
  2049                           	opt stack 0
  2050  0000D4                     Port_Set@pInput:
  2051                           	opt stack 0
  2052  0000D4                     SPI_MinSpeed@pInput:
  2053                           	opt stack 0
  2054  0000D4                     SPI_MaxSpeed@pInput:
  2055                           	opt stack 0
  2056  0000D4                     Word_SetPair@pInput:
  2057                           	opt stack 0
  2058  0000D4                     PortProperty_Valid@pInput:
  2059                           	opt stack 0
  2060  0000D4                     itos@Out:
  2061                           	opt stack 0
  2062  0000D4                     LCD_FillRectangle@pSize:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0xF
  2066  0000D4                     	ds	1
  2067  0000D5                     ??_Console_PrintChar:
  2068  0000D5                     Console_MakeField@x:
  2069                           	opt stack 0
  2070                           
  2071                           ; 1 bytes @ 0x10
  2072  0000D5                     	ds	1
  2073  0000D6                     ??_Timer2_Init:
  2074  0000D6                     ??_Timer0_Init:
  2075  0000D6                     Port_SetPin@pPin:
  2076                           	opt stack 0
  2077  0000D6                     Port_Set@pValue:
  2078                           	opt stack 0
  2079  0000D6                     Word_SetPair@pPair:
  2080                           	opt stack 0
  2081  0000D6                     PortProperty_Valid@pPinDrive:
  2082                           	opt stack 0
  2083  0000D6                     Console_MakeField@y:
  2084                           	opt stack 0
  2085  0000D6                     HMI_SetNumber@pInput:
  2086                           	opt stack 0
  2087  0000D6                     ___llmod@divisor:
  2088                           	opt stack 0
  2089                           
  2090                           ; 4 bytes @ 0x11
  2091  0000D6                     	ds	1
  2092  0000D7                     ??_Port_Set:
  2093  0000D7                     Port_SetPin@pValue:
  2094                           	opt stack 0
  2095  0000D7                     Word_SetPair@pValue:
  2096                           	opt stack 0
  2097  0000D7                     PortProperty_Valid@pPin:
  2098                           	opt stack 0
  2099  0000D7                     LCD_DrawField@pField:
  2100                           	opt stack 0
  2101  0000D7                     Timer2_Init@RDIV:
  2102                           	opt stack 0
  2103                           
  2104                           ; 4 bytes @ 0x12
  2105  0000D7                     	ds	1
  2106  0000D8                     ??_PortProperty_Valid:
  2107  0000D8                     ??_LCD_FillRectangle:
  2108  0000D8                     Port_SetPin@Type:
  2109                           	opt stack 0
  2110  0000D8                     Console_PrintChar@pInput:
  2111                           	opt stack 0
  2112  0000D8                     Timer0_Init@pCPUClock:
  2113                           	opt stack 0
  2114                           
  2115                           ; 4 bytes @ 0x13
  2116  0000D8                     	ds	1
  2117  0000D9                     LED_Set@pValue:
  2118                           	opt stack 0
  2119  0000D9                     putch@c:
  2120                           	opt stack 0
  2121  0000D9                     Port_TogglePin@pInput:
  2122                           	opt stack 0
  2123  0000D9                     LCD_DrawField@pPoint:
  2124                           	opt stack 0
  2125                           
  2126                           ; 4 bytes @ 0x14
  2127  0000D9                     	ds	1
  2128  0000DA                     LCD_FillRectangle@i:
  2129                           	opt stack 0
  2130  0000DA                     LED_Set@pLED:
  2131                           	opt stack 0
  2132  0000DA                     ___llmod@counter:
  2133                           	opt stack 0
  2134  0000DA                     PortProperty_Valid@Errors:
  2135                           	opt stack 0
  2136                           
  2137                           ; 16 bytes @ 0x15
  2138  0000DA                     	ds	1
  2139  0000DB                     ?_printf:
  2140                           	opt stack 0
  2141  0000DB                     LCD_FillRectangle@j:
  2142                           	opt stack 0
  2143  0000DB                     Port_TogglePin@pPin:
  2144                           	opt stack 0
  2145  0000DB                     printf@f:
  2146                           	opt stack 0
  2147  0000DB                     Timer2_Init@pCPUClock:
  2148                           	opt stack 0
  2149                           
  2150                           ; 4 bytes @ 0x16
  2151  0000DB                     	ds	1
  2152  0000DC                     Port_TogglePin@Value:
  2153                           	opt stack 0
  2154  0000DC                     Timer0_Init@DIVIDE:
  2155                           	opt stack 0
  2156                           
  2157                           ; 4 bytes @ 0x17
  2158  0000DC                     	ds	1
  2159  0000DD                     LED_Toggle@pLED:
  2160                           	opt stack 0
  2161  0000DD                     LCD_DrawField@pSize:
  2162                           	opt stack 0
  2163                           
  2164                           ; 4 bytes @ 0x18
  2165  0000DD                     	ds	1
  2166  0000DE                     Event_DIPSwitch@pState:
  2167                           	opt stack 0
  2168  0000DE                     Event_HMI_DIPSwitch@pState:
  2169                           	opt stack 0
  2170  0000DE                     Event_TestButton@pState:
  2171                           	opt stack 0
  2172  0000DE                     Event_HMI_LeftButton@pState:
  2173                           	opt stack 0
  2174  0000DE                     Event_HMI_RightButton@pState:
  2175                           	opt stack 0
  2176  0000DE                     Event_HMI_UpButton@pState:
  2177                           	opt stack 0
  2178  0000DE                     Event_HMI_DownButton@pState:
  2179                           	opt stack 0
  2180                           
  2181                           ; 1 bytes @ 0x19
  2182  0000DE                     	ds	1
  2183  0000DF                     Event_DIPSwitch@Bar:
  2184                           	opt stack 0
  2185  0000DF                     Event_HMI_DIPSwitch@Bar:
  2186                           	opt stack 0
  2187  0000DF                     Timer2_Init@DIVIDE:
  2188                           	opt stack 0
  2189                           
  2190                           ; 4 bytes @ 0x1A
  2191  0000DF                     	ds	1
  2192  0000E0                     Button_Poll@pButton:
  2193                           	opt stack 0
  2194  0000E0                     Motor_Speed@pMotor:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x1B
  2198  0000E0                     	ds	1
  2199  0000E1                     ??_printf:
  2200  0000E1                     ??_LCD_DrawField:
  2201                           
  2202                           ; 1 bytes @ 0x1C
  2203  0000E1                     	ds	1
  2204  0000E2                     Button_Poll@pIncrement:
  2205                           	opt stack 0
  2206  0000E2                     Motor_Speed@pFrequency:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x1D
  2210  0000E2                     	ds	1
  2211  0000E3                     ??_Button_Poll:
  2212  0000E3                     LCD_DrawField@count:
  2213                           	opt stack 0
  2214  0000E3                     printf@prec:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x1E
  2218  0000E3                     	ds	1
  2219  0000E4                     
  2220                           ; 1 bytes @ 0x1F
  2221  0000E4                     	ds	1
  2222  0000E5                     LCD_DrawField@xmax:
  2223                           	opt stack 0
  2224  0000E5                     printf@flag:
  2225                           	opt stack 0
  2226                           
  2227                           ; 1 bytes @ 0x20
  2228  0000E5                     	ds	1
  2229  0000E6                     LCD_DrawField@ymax:
  2230                           	opt stack 0
  2231  0000E6                     printf@ap:
  2232                           	opt stack 0
  2233                           
  2234                           ; 2 bytes @ 0x21
  2235  0000E6                     	ds	1
  2236  0000E7                     LCD_DrawField@i:
  2237                           	opt stack 0
  2238  0000E7                     Port_Set@TypeRequired:
  2239                           	opt stack 0
  2240                           
  2241                           ; 2 bytes @ 0x22
  2242  0000E7                     	ds	1
  2243  0000E8                     ??_Console_Render:
  2244  0000E8                     Button_Poll@Pin:
  2245                           	opt stack 0
  2246  0000E8                     printf@val:
  2247                           	opt stack 0
  2248                           
  2249                           ; 4 bytes @ 0x23
  2250  0000E8                     	ds	1
  2251  0000E9                     ?_getMode:
  2252                           	opt stack 0
  2253  0000E9                     Port_Set@TypeActual:
  2254                           	opt stack 0
  2255                           
  2256                           ; 2 bytes @ 0x24
  2257  0000E9                     	ds	1
  2258  0000EA                     PortProperty_Valid@Pair:
  2259                           	opt stack 0
  2260  0000EA                     Console_Render@temp:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x25
  2264  0000EA                     	ds	1
  2265  0000EB                     ??_getMode:
  2266  0000EB                     Port_Set@Type:
  2267                           	opt stack 0
  2268  0000EB                     Port_CheckPairType@pInput:
  2269                           	opt stack 0
  2270  0000EB                     Port_SetPinType@pInput:
  2271                           	opt stack 0
  2272  0000EB                     Console_Render@lCursor:
  2273                           	opt stack 0
  2274                           
  2275                           ; 4 bytes @ 0x26
  2276  0000EB                     	ds	1
  2277  0000EC                     printf@c:
  2278                           	opt stack 0
  2279                           
  2280                           ; 1 bytes @ 0x27
  2281  0000EC                     	ds	1
  2282  0000ED                     Port_CheckPairType@pPair:
  2283                           	opt stack 0
  2284  0000ED                     Port_SetPinType@pPin:
  2285                           	opt stack 0
  2286  0000ED                     getMode@dipState:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x28
  2290  0000ED                     	ds	1
  2291  0000EE                     Port_CheckPairType@pDrive:
  2292                           	opt stack 0
  2293  0000EE                     Port_SetPinType@pType:
  2294                           	opt stack 0
  2295                           
  2296                           ; 1 bytes @ 0x29
  2297  0000EE                     	ds	1
  2298  0000EF                     Port_CheckPairType@Pin1:
  2299                           	opt stack 0
  2300  0000EF                     Port_SetPinType@Output:
  2301                           	opt stack 0
  2302  0000EF                     Console_Render@x:
  2303                           	opt stack 0
  2304                           
  2305                           ; 1 bytes @ 0x2A
  2306  0000EF                     	ds	1
  2307  0000F0                     Port_CheckPairType@Pin2:
  2308                           	opt stack 0
  2309  0000F0                     Console_Render@y:
  2310                           	opt stack 0
  2311  0000F0                     Port_SetPinType@Props:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x2B
  2315  0000F0                     	ds	1
  2316  0000F1                     Port_CheckPairType@Output:
  2317                           	opt stack 0
  2318  0000F1                     continuousMode@mode:
  2319                           	opt stack 0
  2320                           
  2321                           ; 2 bytes @ 0x2C
  2322  0000F1                     	ds	1
  2323  0000F2                     LED_Init@pLED:
  2324                           	opt stack 0
  2325  0000F2                     Port_CheckPairType@Props:
  2326                           	opt stack 0
  2327  0000F2                     Motor_Init@pMotor:
  2328                           	opt stack 0
  2329  0000F2                     SPI_Init@pClock:
  2330                           	opt stack 0
  2331                           
  2332                           ; 4 bytes @ 0x2D
  2333  0000F2                     	ds	1
  2334  0000F3                     continuousMode@direction:
  2335                           	opt stack 0
  2336                           
  2337                           ; 2 bytes @ 0x2E
  2338  0000F3                     	ds	1
  2339  0000F4                     Port_CheckQuadType@pInput:
  2340                           	opt stack 0
  2341  0000F4                     Motor_Init@pAddress:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x2F
  2345  0000F4                     	ds	1
  2346  0000F5                     continuousMode@speed:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x30
  2350  0000F5                     	ds	1
  2351  0000F6                     Port_CheckQuadType@pQuad:
  2352                           	opt stack 0
  2353  0000F6                     SPI_Init@pChannel:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x31
  2357  0000F6                     	ds	1
  2358  0000F7                     ??_setMode:
  2359  0000F7                     Port_CheckQuadType@pDrive:
  2360                           	opt stack 0
  2361  0000F7                     SPI_Init@pMode:
  2362                           	opt stack 0
  2363                           
  2364                           ; 1 bytes @ 0x32
  2365  0000F7                     	ds	1
  2366  0000F8                     Port_CheckPortType@Output:
  2367                           	opt stack 0
  2368  0000F8                     Port_SetQuadType@Output:
  2369                           	opt stack 0
  2370                           
  2371                           ; 1 bytes @ 0x33
  2372  0000F8                     	ds	1
  2373  0000F9                     tblptru	equ	0xFF8
  2374                           tblptrh	equ	0xFF7
  2375                           tblptrl	equ	0xFF6
  2376                           tablat	equ	0xFF5
  2377                           postinc0	equ	0xFEE
  2378                           wreg	equ	0xFE8
  2379                           postdec1	equ	0xFE5
  2380                           fsr1h	equ	0xFE2
  2381                           fsr1l	equ	0xFE1
  2382                           
  2383                           ; 1 bytes @ 0x34
  2384                           
  2385                           	psect	cstackCOMRAM
  2386  000001                     __pcstackCOMRAM:
  2387                           	opt stack 0
  2388  000001                     i2Byte_SetBit@pInput:
  2389                           	opt stack 0
  2390  000001                     i2Byte_GetZone@pInput:
  2391                           	opt stack 0
  2392  000001                     i2delay_us@us:
  2393                           	opt stack 0
  2394  000001                     i2MXK_Queue@pCallback:
  2395                           	opt stack 0
  2396                           
  2397                           ; 3 bytes @ 0x0
  2398  000001                     	ds	2
  2399  000003                     i2Byte_SetBit@pBit:
  2400                           	opt stack 0
  2401  000003                     i2Byte_GetZone@pMax:
  2402                           	opt stack 0
  2403  000003                     i2delay_us@u:
  2404                           	opt stack 0
  2405                           
  2406                           ; 4 bytes @ 0x2
  2407  000003                     	ds	1
  2408  000004                     i2Byte_SetBit@pValue:
  2409                           	opt stack 0
  2410  000004                     i2Byte_GetZone@pChunk:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x3
  2414  000004                     	ds	1
  2415  000005                     ??i2_Byte_SetBit:
  2416  000005                     i2Byte_GetZone@pChunkSize:
  2417                           	opt stack 0
  2418                           
  2419                           ; 1 bytes @ 0x4
  2420  000005                     	ds	1
  2421  000006                     ??i2_Byte_GetZone:
  2422                           
  2423                           ; 1 bytes @ 0x5
  2424  000006                     	ds	1
  2425  000007                     i2Byte_GetZone@MASK:
  2426                           	opt stack 0
  2427  000007                     i2MXK_SwitchTo@CUR:
  2428                           	opt stack 0
  2429                           
  2430                           ; 1 bytes @ 0x6
  2431  000007                     	ds	1
  2432  000008                     i2Byte_GetZone@Offset:
  2433                           	opt stack 0
  2434  000008                     i2MXK_SwitchTo@pModule:
  2435                           	opt stack 0
  2436                           
  2437                           ; 1 bytes @ 0x7
  2438  000008                     	ds	1
  2439  000009                     i2Byte_GetZone@Output:
  2440                           	opt stack 0
  2441                           
  2442                           ; 1 bytes @ 0x8
  2443  000009                     	ds	1
  2444  00000A                     i2Byte_GetPair@pInput:
  2445                           	opt stack 0
  2446                           
  2447                           ; 2 bytes @ 0x9
  2448  00000A                     	ds	2
  2449  00000C                     i2Byte_GetPair@pPair:
  2450                           	opt stack 0
  2451                           
  2452                           ; 1 bytes @ 0xB
  2453  00000C                     	ds	1
  2454  00000D                     i2Word_GetPair@pInput:
  2455                           	opt stack 0
  2456                           
  2457                           ; 2 bytes @ 0xC
  2458  00000D                     	ds	2
  2459  00000F                     i2Word_GetPair@pPair:
  2460                           	opt stack 0
  2461                           
  2462                           ; 1 bytes @ 0xE
  2463  00000F                     	ds	1
  2464  000010                     i2Port_SetPin@pInput:
  2465                           	opt stack 0
  2466                           
  2467                           ; 2 bytes @ 0xF
  2468  000010                     	ds	2
  2469  000012                     i2Port_SetPin@pPin:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x11
  2473  000012                     	ds	1
  2474  000013                     i2Port_SetPin@pValue:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x12
  2478  000013                     	ds	1
  2479  000014                     i2Port_SetPin@Type:
  2480                           	opt stack 0
  2481                           
  2482                           ; 1 bytes @ 0x13
  2483  000014                     	ds	1
  2484  000015                     
  2485                           ; 1 bytes @ 0x14
  2486  000015                     	ds	2
  2487  000017                     ??_ISR_Function:
  2488                           
  2489                           ; 1 bytes @ 0x16
  2490  000017                     	ds	14
  2491                           tblptru	equ	0xFF8
  2492                           tblptrh	equ	0xFF7
  2493                           tblptrl	equ	0xFF6
  2494                           tablat	equ	0xFF5
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           fsr1h	equ	0xFE2
  2499                           fsr1l	equ	0xFE1
  2500                           
  2501 ;;
  2502 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2503 ;;
  2504 ;; *************** function _main *****************
  2505 ;; Defined at:
  2506 ;;		line 218 in file "main.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;                  1    wreg      void 
  2513 ;; Registers used:
  2514 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 0/0
  2518 ;;		Unchanged: 0/0
  2519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;Total ram usage:        0 bytes
  2525 ;; Hardware stack levels required when called:   21
  2526 ;; This function calls:
  2527 ;;		_MXK_BlockSwitchTo
  2528 ;;		_MXK_Dequeue
  2529 ;;		_MXK_Release
  2530 ;;		_displayText
  2531 ;;		_initialise
  2532 ;;		_setMode
  2533 ;; This function is called by:
  2534 ;;		Startup code after reset
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           	psect	text0
  2539  014778                     __ptext0:
  2540                           	opt stack 0
  2541  014778                     _main:
  2542                           	opt stack 10
  2543                           
  2544                           ;main.c: 219: initialise();
  2545                           
  2546                           ;incstack = 0
  2547  014778  EC00  F09F         	call	_initialise	;wreg free
  2548  01477C                     l13132:
  2549                           
  2550                           ;main.c: 223: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2551  01477C  0E01               	movlw	1
  2552  01477E  ECB9  F0A1         	call	_MXK_BlockSwitchTo
  2553  014782  0900               	iorlw	0
  2554  014784  B4D8               	btfsc	status,2,c
  2555  014786  D7FA               	goto	l13132
  2556                           
  2557                           ;main.c: 225: displayText();
  2558  014788  ECD0  F0A3         	call	_displayText	;wreg free
  2559                           
  2560                           ;main.c: 228: setMode();
  2561  01478C  ECDE  F09F         	call	_setMode	;wreg free
  2562                           
  2563                           ;main.c: 230: if (MXK_Release())
  2564  014790  EC41  F0A5         	call	_MXK_Release	;wreg free
  2565  014794  0900               	iorlw	0
  2566  014796  B4D8               	btfsc	status,2,c
  2567  014798  D7F1               	goto	l13132
  2568                           
  2569                           ;main.c: 231: MXK_Dequeue();
  2570  01479A  ECEE  F0A2         	call	_MXK_Dequeue	;wreg free
  2571                           
  2572                           ;main.c: 232: }
  2573                           ;main.c: 251: }
  2574  01479E  D7EE               	goto	l13132
  2575  0147A0                     __end_of_main:
  2576                           	opt stack 0
  2577                           tblptru	equ	0xFF8
  2578                           tblptrh	equ	0xFF7
  2579                           tblptrl	equ	0xFF6
  2580                           tablat	equ	0xFF5
  2581                           postinc0	equ	0xFEE
  2582                           wreg	equ	0xFE8
  2583                           postdec1	equ	0xFE5
  2584                           fsr1h	equ	0xFE2
  2585                           fsr1l	equ	0xFE1
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function _setMode *****************
  2589 ;; Defined at:
  2590 ;;		line 200 in file "main.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;		None
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  mode            2    0[BANK1 ] int 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2605 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Totals:         0       2       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;Total ram usage:        4 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:   20
  2611 ;; This function calls:
  2612 ;;		_continuousMode
  2613 ;;		_getMode
  2614 ;;		_nullMode
  2615 ;;		_positionMode
  2616 ;;		_stepMode
  2617 ;; This function is called by:
  2618 ;;		_main
  2619 ;; This function uses a non-reentrant model
  2620 ;;
  2621                           
  2622                           	psect	text1
  2623  013FBC                     __ptext1:
  2624                           	opt stack 0
  2625  013FBC                     _setMode:
  2626                           	opt stack 10
  2627                           
  2628                           ;main.c: 201: int mode = getMode();
  2629                           
  2630                           ;incstack = 0
  2631  013FBC  EC08  F09B         	call	_getMode	;wreg free
  2632  013FC0  C0E9  F1B6         	movff	?_getMode,setMode@mode
  2633  013FC4  C0EA  F1B7         	movff	?_getMode+1,setMode@mode+1
  2634                           
  2635                           ;main.c: 202: switch (mode) {
  2636  013FC8  D00C               	goto	l13118
  2637  013FCA                     l13108:
  2638                           
  2639                           ;main.c: 204: continuousMode();
  2640  013FCA  ECEC  F083         	call	_continuousMode	;wreg free
  2641                           
  2642                           ;main.c: 205: break;
  2643  013FCE  0012               	return	
  2644  013FD0                     l13110:
  2645                           
  2646                           ;main.c: 207: stepMode();
  2647  013FD0  EC02  F00A         	call	_stepMode	;wreg free
  2648                           
  2649                           ;main.c: 208: break;
  2650  013FD4  0012               	return	
  2651  013FD6                     l13112:
  2652                           
  2653                           ;main.c: 210: positionMode();
  2654  013FD6  ECB1  F0A5         	call	_positionMode	;wreg free
  2655                           
  2656                           ;main.c: 211: break;
  2657  013FDA  0012               	return	
  2658  013FDC                     l13114:
  2659                           
  2660                           ;main.c: 213: nullMode();
  2661  013FDC  EC33  F0A2         	call	_nullMode	;wreg free
  2662                           
  2663                           ;main.c: 215: }
  2664                           
  2665                           ;main.c: 214: break;
  2666  013FE0  0012               	return	
  2667  013FE2                     l13118:
  2668  013FE2  C1B6  F0F7         	movff	setMode@mode,??_setMode
  2669  013FE6  C1B7  F0F8         	movff	setMode@mode+1,??_setMode+1
  2670                           
  2671                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2672                           ; Switch size 1, requested type "space"
  2673                           ; Number of cases is 1, Range of values is 0 to 0
  2674                           ; switch strategies available:
  2675                           ; Name         Instructions Cycles
  2676                           ; simple_byte            4     3 (average)
  2677                           ;	Chosen strategy is simple_byte
  2678  013FEA  0100               	movlb	0	; () banked
  2679  013FEC  51F8               	movf	(??_setMode+1)& (0+255),w,b
  2680  013FEE  0A00               	xorlw	0	; case 0
  2681  013FF0  A4D8               	btfss	status,2,c
  2682  013FF2  D7F4               	goto	l13114
  2683                           
  2684                           ; BSR set to: 0
  2685                           ; Switch size 1, requested type "space"
  2686                           ; Number of cases is 3, Range of values is 1 to 3
  2687                           ; switch strategies available:
  2688                           ; Name         Instructions Cycles
  2689                           ; simple_byte           10     6 (average)
  2690                           ;	Chosen strategy is simple_byte
  2691  013FF4  0100               	movlb	0	; () banked
  2692  013FF6  51F7               	movf	??_setMode& (0+255),w,b
  2693  013FF8  0A01               	xorlw	1	; case 1
  2694  013FFA  B4D8               	btfsc	status,2,c
  2695  013FFC  D7E6               	goto	l13108
  2696  013FFE  0A03               	xorlw	3	; case 2
  2697  014000  B4D8               	btfsc	status,2,c
  2698  014002  D7E6               	goto	l13110
  2699  014004  0A01               	xorlw	1	; case 3
  2700  014006  B4D8               	btfsc	status,2,c
  2701  014008  D7E6               	goto	l13112
  2702  01400A  D7E8               	goto	l13114
  2703  01400C                     __end_of_setMode:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           tblptrh	equ	0xFF7
  2707                           tblptrl	equ	0xFF6
  2708                           tablat	equ	0xFF5
  2709                           postinc0	equ	0xFEE
  2710                           wreg	equ	0xFE8
  2711                           postdec1	equ	0xFE5
  2712                           fsr1h	equ	0xFE2
  2713                           fsr1l	equ	0xFE1
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _stepMode *****************
  2717 ;; Defined at:
  2718 ;;		line 184 in file "main.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		None
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2732 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;Total ram usage:        0 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    7
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_setMode
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text2
  2747  001404                     __ptext2:
  2748                           	opt stack 0
  2749  001404                     _stepMode:
  2750                           	opt stack 22
  2751                           
  2752                           ;incstack = 0
  2753  001404  0012               	return		;funcret
  2754  001406                     __end_of_stepMode:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           postinc0	equ	0xFEE
  2761                           wreg	equ	0xFE8
  2762                           postdec1	equ	0xFE5
  2763                           fsr1h	equ	0xFE2
  2764                           fsr1l	equ	0xFE1
  2765                           status	equ	0xFD8
  2766                           
  2767 ;; *************** function _positionMode *****************
  2768 ;; Defined at:
  2769 ;;		line 188 in file "main.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;		None
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		None
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2787 ;;Total ram usage:        0 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    7
  2790 ;; This function calls:
  2791 ;;		Nothing
  2792 ;; This function is called by:
  2793 ;;		_setMode
  2794 ;; This function uses a non-reentrant model
  2795 ;;
  2796                           
  2797                           	psect	text3
  2798  014B62                     __ptext3:
  2799                           	opt stack 0
  2800  014B62                     _positionMode:
  2801                           	opt stack 22
  2802                           
  2803                           ;incstack = 0
  2804  014B62  0012               	return		;funcret
  2805  014B64                     __end_of_positionMode:
  2806                           	opt stack 0
  2807                           tblptru	equ	0xFF8
  2808                           tblptrh	equ	0xFF7
  2809                           tblptrl	equ	0xFF6
  2810                           tablat	equ	0xFF5
  2811                           postinc0	equ	0xFEE
  2812                           wreg	equ	0xFE8
  2813                           postdec1	equ	0xFE5
  2814                           fsr1h	equ	0xFE2
  2815                           fsr1l	equ	0xFE1
  2816                           status	equ	0xFD8
  2817                           
  2818 ;; *************** function _nullMode *****************
  2819 ;; Defined at:
  2820 ;;		line 192 in file "main.c"
  2821 ;; Parameters:    Size  Location     Type
  2822 ;;		None
  2823 ;; Auto vars:     Size  Location     Type
  2824 ;;		None
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  1    wreg      void 
  2827 ;; Registers used:
  2828 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2838 ;;Total ram usage:        0 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:   19
  2841 ;; This function calls:
  2842 ;;		_Console_Render
  2843 ;;		_displayText
  2844 ;;		_printf
  2845 ;; This function is called by:
  2846 ;;		_setMode
  2847 ;; This function uses a non-reentrant model
  2848 ;;
  2849                           
  2850                           	psect	text4
  2851  014466                     __ptext4:
  2852                           	opt stack 0
  2853  014466                     _nullMode:
  2854                           	opt stack 10
  2855                           
  2856                           ;main.c: 193: displayText();
  2857                           
  2858                           ;incstack = 0
  2859  014466  ECD0  F0A3         	call	_displayText	;wreg free
  2860                           
  2861                           ;main.c: 194: printf("                      \n");
  2862  01446A  0E69               	movlw	low STR_11
  2863  01446C  0100               	movlb	0	; () banked
  2864  01446E  6FDB               	movwf	printf@f& (0+255),b
  2865  014470  0EFF               	movlw	high STR_11
  2866  014472  0100               	movlb	0	; () banked
  2867  014474  6FDC               	movwf	(printf@f+1)& (0+255),b
  2868  014476  ECAA  F087         	call	_printf	;wreg free
  2869                           
  2870                           ;main.c: 195: printf("                      \n");
  2871  01447A  0E69               	movlw	low STR_11
  2872  01447C  0100               	movlb	0	; () banked
  2873  01447E  6FDB               	movwf	printf@f& (0+255),b
  2874  014480  0EFF               	movlw	high STR_11
  2875  014482  0100               	movlb	0	; () banked
  2876  014484  6FDC               	movwf	(printf@f+1)& (0+255),b
  2877  014486  ECAA  F087         	call	_printf	;wreg free
  2878                           
  2879                           ;main.c: 196: printf("                      \n");
  2880  01448A  0E69               	movlw	low STR_11
  2881  01448C  0100               	movlb	0	; () banked
  2882  01448E  6FDB               	movwf	printf@f& (0+255),b
  2883  014490  0EFF               	movlw	high STR_11
  2884  014492  0100               	movlb	0	; () banked
  2885  014494  6FDC               	movwf	(printf@f+1)& (0+255),b
  2886  014496  ECAA  F087         	call	_printf	;wreg free
  2887                           
  2888                           ;main.c: 197: Console_Render();
  2889  01449A  ECD8  F089         	call	_Console_Render	;wreg free
  2890  01449E  0012               	return		;funcret
  2891  0144A0                     __end_of_nullMode:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1h	equ	0xFE2
  2901                           fsr1l	equ	0xFE1
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _continuousMode *****************
  2905 ;; Defined at:
  2906 ;;		line 130 in file "main.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;  speed           2   48[BANK0 ] int 
  2911 ;;  direction       2   46[BANK0 ] int 
  2912 ;;  mode            2   44[BANK0 ] int 
  2913 ;; Return value:  Size  Location     Type
  2914 ;;                  1    wreg      void 
  2915 ;; Registers used:
  2916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2917 ;; Tracked objects:
  2918 ;;		On entry : 0/0
  2919 ;;		On exit  : 0/0
  2920 ;;		Unchanged: 0/0
  2921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;Total ram usage:        6 bytes
  2927 ;; Hardware stack levels used:    1
  2928 ;; Hardware stack levels required when called:   19
  2929 ;; This function calls:
  2930 ;;		_Console_Render
  2931 ;;		_Console_SetForecolour
  2932 ;;		_HMI_DIPSwitch
  2933 ;;		_HMI_DownSwitch
  2934 ;;		_HMI_LeftSwitch
  2935 ;;		_HMI_Poll
  2936 ;;		_HMI_RightSwitch
  2937 ;;		_HMI_UpSwitch
  2938 ;;		_MXK_BlockSwitchTo
  2939 ;;		_MXK_DIPSwitch
  2940 ;;		_MXK_Dequeue
  2941 ;;		_MXK_Release
  2942 ;;		_MXK_TestButton
  2943 ;;		_Motor_Move
  2944 ;;		_Motor_Speed
  2945 ;;		___wmul
  2946 ;;		_displayText
  2947 ;;		_getMode
  2948 ;;		_printf
  2949 ;; This function is called by:
  2950 ;;		_setMode
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text5
  2955  0107D8                     __ptext5:
  2956                           	opt stack 0
  2957  0107D8                     _continuousMode:
  2958                           	opt stack 10
  2959                           
  2960                           ;main.c: 132: int speed = 0;
  2961                           
  2962                           ;incstack = 0
  2963  0107D8  0E00               	movlw	0
  2964  0107DA  0100               	movlb	0	; () banked
  2965  0107DC  6FF6               	movwf	(continuousMode@speed+1)& (0+255),b
  2966  0107DE  0E00               	movlw	0
  2967  0107E0  6FF5               	movwf	continuousMode@speed& (0+255),b
  2968                           
  2969                           ;main.c: 135: int direction = 0;
  2970  0107E2  0E00               	movlw	0
  2971  0107E4  0100               	movlb	0	; () banked
  2972  0107E6  6FF4               	movwf	(continuousMode@direction+1)& (0+255),b
  2973  0107E8  0E00               	movlw	0
  2974  0107EA  6FF3               	movwf	continuousMode@direction& (0+255),b
  2975                           
  2976                           ;main.c: 137: int mode = 1;
  2977  0107EC  0E00               	movlw	0
  2978  0107EE  0100               	movlb	0	; () banked
  2979  0107F0  6FF2               	movwf	(continuousMode@mode+1)& (0+255),b
  2980  0107F2  0E01               	movlw	1
  2981  0107F4  6FF1               	movwf	continuousMode@mode& (0+255),b
  2982                           
  2983                           ;main.c: 140: while (mode == 1) {
  2984  0107F6  D13A               	goto	l13074
  2985  0107F8                     l13012:
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;main.c: 143: if ((int) HMIBoard.mUp.mGetState() == 1 && (int) HMIBoard.mDown.mGetState(
      +                          ) == 0 & speed <= 9) {
  2989  0107F8  EE21  F04D         	lfsr	2,_HMIBoard+35
  2990  0107FC  D801               	call	u9848
  2991  0107FE  D00A               	goto	u9849
  2992  010800                     u9848:
  2993  010800  0005               	push	
  2994  010802  6EFA               	movwf	pclath,c
  2995  010804  50DE               	movf	postinc2,w,c
  2996  010806  6EFD               	movwf	tosl,c
  2997  010808  50DE               	movf	postinc2,w,c
  2998  01080A  6EFE               	movwf	tosh,c
  2999  01080C  50DE               	movf	postinc2,w,c
  3000  01080E  6EFF               	movwf	tosu,c
  3001  010810  50FA               	movf	pclath,w,c
  3002  010812  0012               	return		;indir
  3003  010814                     u9849:
  3004  010814  06E8               	decf	wreg,f,c
  3005  010816  A4D8               	btfss	status,2,c
  3006  010818  D030               	goto	l13024
  3007  01081A  EE21  F057         	lfsr	2,_HMIBoard+45
  3008  01081E  D801               	call	u9868
  3009  010820  D00A               	goto	u9869
  3010  010822                     u9868:
  3011  010822  0005               	push	
  3012  010824  6EFA               	movwf	pclath,c
  3013  010826  50DE               	movf	postinc2,w,c
  3014  010828  6EFD               	movwf	tosl,c
  3015  01082A  50DE               	movf	postinc2,w,c
  3016  01082C  6EFE               	movwf	tosh,c
  3017  01082E  50DE               	movf	postinc2,w,c
  3018  010830  6EFF               	movwf	tosu,c
  3019  010832  50FA               	movf	pclath,w,c
  3020  010834  0012               	return		;indir
  3021  010836                     u9869:
  3022  010836  0900               	iorlw	0
  3023  010838  A4D8               	btfss	status,2,c
  3024  01083A  D01F               	goto	l13024
  3025  01083C  0100               	movlb	0	; () banked
  3026  01083E  BFF6               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3027  010840  D008               	goto	l13020
  3028  010842  0100               	movlb	0	; () banked
  3029  010844  51F6               	movf	(continuousMode@speed+1)& (0+255),w,b
  3030  010846  E119               	bnz	l13024
  3031  010848  0E0A               	movlw	10
  3032  01084A  0100               	movlb	0	; () banked
  3033  01084C  5DF5               	subwf	continuousMode@speed& (0+255),w,b
  3034  01084E  B0D8               	btfsc	status,0,c
  3035  010850  D014               	goto	l13024
  3036  010852                     l13020:
  3037  010852  EE21  F04D         	lfsr	2,_HMIBoard+35
  3038  010856  D801               	call	u9898
  3039  010858  D00A               	goto	u9899
  3040  01085A                     u9898:
  3041  01085A  0005               	push	
  3042  01085C  6EFA               	movwf	pclath,c
  3043  01085E  50DE               	movf	postinc2,w,c
  3044  010860  6EFD               	movwf	tosl,c
  3045  010862  50DE               	movf	postinc2,w,c
  3046  010864  6EFE               	movwf	tosh,c
  3047  010866  50DE               	movf	postinc2,w,c
  3048  010868  6EFF               	movwf	tosu,c
  3049  01086A  50FA               	movf	pclath,w,c
  3050  01086C  0012               	return		;indir
  3051  01086E                     u9899:
  3052  01086E  06E8               	decf	wreg,f,c
  3053  010870  B4D8               	btfsc	status,2,c
  3054  010872  D7EF               	goto	l13020
  3055                           
  3056                           ;main.c: 145: }
  3057                           ;main.c: 146: speed++;
  3058  010874  0100               	movlb	0	; () banked
  3059  010876  4BF5               	infsnz	continuousMode@speed& (0+255),f,b
  3060  010878  2BF6               	incf	(continuousMode@speed+1)& (0+255),f,b
  3061  01087A                     l13024:
  3062                           
  3063                           ;main.c: 147: }
  3064                           ;main.c: 149: if ((int) HMIBoard.mDown.mGetState() == 1 && (int) HMIBoard.mUp.mGetState(
      +                          ) == 0 & speed > 0) {
  3065  01087A  EE21  F057         	lfsr	2,_HMIBoard+45
  3066  01087E  D801               	call	u9918
  3067  010880  D00A               	goto	u9919
  3068  010882                     u9918:
  3069  010882  0005               	push	
  3070  010884  6EFA               	movwf	pclath,c
  3071  010886  50DE               	movf	postinc2,w,c
  3072  010888  6EFD               	movwf	tosl,c
  3073  01088A  50DE               	movf	postinc2,w,c
  3074  01088C  6EFE               	movwf	tosh,c
  3075  01088E  50DE               	movf	postinc2,w,c
  3076  010890  6EFF               	movwf	tosu,c
  3077  010892  50FA               	movf	pclath,w,c
  3078  010894  0012               	return		;indir
  3079  010896                     u9919:
  3080  010896  06E8               	decf	wreg,f,c
  3081  010898  A4D8               	btfss	status,2,c
  3082  01089A  D030               	goto	l13036
  3083  01089C  EE21  F04D         	lfsr	2,_HMIBoard+35
  3084  0108A0  D801               	call	u9938
  3085  0108A2  D00A               	goto	u9939
  3086  0108A4                     u9938:
  3087  0108A4  0005               	push	
  3088  0108A6  6EFA               	movwf	pclath,c
  3089  0108A8  50DE               	movf	postinc2,w,c
  3090  0108AA  6EFD               	movwf	tosl,c
  3091  0108AC  50DE               	movf	postinc2,w,c
  3092  0108AE  6EFE               	movwf	tosh,c
  3093  0108B0  50DE               	movf	postinc2,w,c
  3094  0108B2  6EFF               	movwf	tosu,c
  3095  0108B4  50FA               	movf	pclath,w,c
  3096  0108B6  0012               	return		;indir
  3097  0108B8                     u9939:
  3098  0108B8  0900               	iorlw	0
  3099  0108BA  A4D8               	btfss	status,2,c
  3100  0108BC  D01F               	goto	l13036
  3101  0108BE  0100               	movlb	0	; () banked
  3102  0108C0  BFF6               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3103  0108C2  D01C               	goto	l13036
  3104  0108C4  0100               	movlb	0	; () banked
  3105  0108C6  51F6               	movf	(continuousMode@speed+1)& (0+255),w,b
  3106  0108C8  E104               	bnz	l13032
  3107  0108CA  0100               	movlb	0	; () banked
  3108  0108CC  05F5               	decf	continuousMode@speed& (0+255),w,b
  3109  0108CE  A0D8               	btfss	status,0,c
  3110  0108D0  D015               	goto	l13036
  3111  0108D2                     l13032:
  3112  0108D2  EE21  F057         	lfsr	2,_HMIBoard+45
  3113  0108D6  D801               	call	u9968
  3114  0108D8  D00A               	goto	u9969
  3115  0108DA                     u9968:
  3116  0108DA  0005               	push	
  3117  0108DC  6EFA               	movwf	pclath,c
  3118  0108DE  50DE               	movf	postinc2,w,c
  3119  0108E0  6EFD               	movwf	tosl,c
  3120  0108E2  50DE               	movf	postinc2,w,c
  3121  0108E4  6EFE               	movwf	tosh,c
  3122  0108E6  50DE               	movf	postinc2,w,c
  3123  0108E8  6EFF               	movwf	tosu,c
  3124  0108EA  50FA               	movf	pclath,w,c
  3125  0108EC  0012               	return		;indir
  3126  0108EE                     u9969:
  3127  0108EE  06E8               	decf	wreg,f,c
  3128  0108F0  B4D8               	btfsc	status,2,c
  3129  0108F2  D7EF               	goto	l13032
  3130                           
  3131                           ;main.c: 151: }
  3132                           ;main.c: 152: speed--;
  3133  0108F4  0100               	movlb	0	; () banked
  3134  0108F6  07F5               	decf	continuousMode@speed& (0+255),f,b
  3135  0108F8  A0D8               	btfss	status,0,c
  3136  0108FA  07F6               	decf	(continuousMode@speed+1)& (0+255),f,b
  3137  0108FC                     l13036:
  3138                           
  3139                           ;main.c: 153: }
  3140                           ;main.c: 155: if ((int) HMIBoard.mLeft.mGetState() == 1 && (int) HMIBoard.mRight.mGetSta
      +                          te() == 0) {
  3141  0108FC  EE21  F043         	lfsr	2,_HMIBoard+25
  3142  010900  D801               	call	u9988
  3143  010902  D00A               	goto	u9989
  3144  010904                     u9988:
  3145  010904  0005               	push	
  3146  010906  6EFA               	movwf	pclath,c
  3147  010908  50DE               	movf	postinc2,w,c
  3148  01090A  6EFD               	movwf	tosl,c
  3149  01090C  50DE               	movf	postinc2,w,c
  3150  01090E  6EFE               	movwf	tosh,c
  3151  010910  50DE               	movf	postinc2,w,c
  3152  010912  6EFF               	movwf	tosu,c
  3153  010914  50FA               	movf	pclath,w,c
  3154  010916  0012               	return		;indir
  3155  010918                     u9989:
  3156  010918  06E8               	decf	wreg,f,c
  3157  01091A  A4D8               	btfss	status,2,c
  3158  01091C  D016               	goto	l13042
  3159  01091E  EE21  F039         	lfsr	2,_HMIBoard+15
  3160  010922  D801               	call	u10008
  3161  010924  D00A               	goto	u10009
  3162  010926                     u10008:
  3163  010926  0005               	push	
  3164  010928  6EFA               	movwf	pclath,c
  3165  01092A  50DE               	movf	postinc2,w,c
  3166  01092C  6EFD               	movwf	tosl,c
  3167  01092E  50DE               	movf	postinc2,w,c
  3168  010930  6EFE               	movwf	tosh,c
  3169  010932  50DE               	movf	postinc2,w,c
  3170  010934  6EFF               	movwf	tosu,c
  3171  010936  50FA               	movf	pclath,w,c
  3172  010938  0012               	return		;indir
  3173  01093A                     u10009:
  3174  01093A  0900               	iorlw	0
  3175  01093C  A4D8               	btfss	status,2,c
  3176  01093E  D005               	goto	l13042
  3177                           
  3178                           ;main.c: 156: direction = 1;
  3179  010940  0E00               	movlw	0
  3180  010942  0100               	movlb	0	; () banked
  3181  010944  6FF4               	movwf	(continuousMode@direction+1)& (0+255),b
  3182  010946  0E01               	movlw	1
  3183  010948  6FF3               	movwf	continuousMode@direction& (0+255),b
  3184  01094A                     l13042:
  3185                           
  3186                           ;main.c: 157: }
  3187                           ;main.c: 159: if ((int) HMIBoard.mRight.mGetState() == 1 && (int) HMIBoard.mLeft.mGetSta
      +                          te() == 0) {
  3188  01094A  EE21  F039         	lfsr	2,_HMIBoard+15
  3189  01094E  D801               	call	u10028
  3190  010950  D00A               	goto	u10029
  3191  010952                     u10028:
  3192  010952  0005               	push	
  3193  010954  6EFA               	movwf	pclath,c
  3194  010956  50DE               	movf	postinc2,w,c
  3195  010958  6EFD               	movwf	tosl,c
  3196  01095A  50DE               	movf	postinc2,w,c
  3197  01095C  6EFE               	movwf	tosh,c
  3198  01095E  50DE               	movf	postinc2,w,c
  3199  010960  6EFF               	movwf	tosu,c
  3200  010962  50FA               	movf	pclath,w,c
  3201  010964  0012               	return		;indir
  3202  010966                     u10029:
  3203  010966  06E8               	decf	wreg,f,c
  3204  010968  A4D8               	btfss	status,2,c
  3205  01096A  D014               	goto	l13048
  3206  01096C  EE21  F043         	lfsr	2,_HMIBoard+25
  3207  010970  D801               	call	u10048
  3208  010972  D00A               	goto	u10049
  3209  010974                     u10048:
  3210  010974  0005               	push	
  3211  010976  6EFA               	movwf	pclath,c
  3212  010978  50DE               	movf	postinc2,w,c
  3213  01097A  6EFD               	movwf	tosl,c
  3214  01097C  50DE               	movf	postinc2,w,c
  3215  01097E  6EFE               	movwf	tosh,c
  3216  010980  50DE               	movf	postinc2,w,c
  3217  010982  6EFF               	movwf	tosu,c
  3218  010984  50FA               	movf	pclath,w,c
  3219  010986  0012               	return		;indir
  3220  010988                     u10049:
  3221  010988  0900               	iorlw	0
  3222  01098A  A4D8               	btfss	status,2,c
  3223  01098C  D003               	goto	l13048
  3224                           
  3225                           ;main.c: 160: direction = -1;
  3226  01098E  0100               	movlb	0	; () banked
  3227  010990  69F3               	setf	continuousMode@direction& (0+255),b
  3228  010992  69F4               	setf	(continuousMode@direction+1)& (0+255),b
  3229  010994                     l13048:
  3230                           
  3231                           ;main.c: 161: }
  3232                           ;main.c: 163: displayText();
  3233  010994  ECD0  F0A3         	call	_displayText	;wreg free
  3234                           
  3235                           ;main.c: 164: Console_SetForecolour(0xFFE0);
  3236  010998  0EFF               	movlw	255
  3237  01099A  0100               	movlb	0	; () banked
  3238  01099C  6FC6               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3239  01099E  0EE0               	movlw	224
  3240  0109A0  6FC5               	movwf	Console_SetForecolour@pColour& (0+255),b
  3241  0109A2  EC8D  F0A5         	call	_Console_SetForecolour	;wreg free
  3242                           
  3243                           ;main.c: 165: printf("Speed: %d\n", speed);
  3244  0109A6  0EE9               	movlw	low STR_8
  3245  0109A8  0100               	movlb	0	; () banked
  3246  0109AA  6FDB               	movwf	printf@f& (0+255),b
  3247  0109AC  0EFF               	movlw	high STR_8
  3248  0109AE  0100               	movlb	0	; () banked
  3249  0109B0  6FDC               	movwf	(printf@f+1)& (0+255),b
  3250  0109B2  C0F5  F0DD         	movff	continuousMode@speed,?_printf+2
  3251  0109B6  C0F6  F0DE         	movff	continuousMode@speed+1,?_printf+3
  3252  0109BA  ECAA  F087         	call	_printf	;wreg free
  3253                           
  3254                           ;main.c: 166: printf("Direction: %d\n", direction);
  3255  0109BE  0EA6               	movlw	low STR_9
  3256  0109C0  0100               	movlb	0	; () banked
  3257  0109C2  6FDB               	movwf	printf@f& (0+255),b
  3258  0109C4  0EFF               	movlw	high STR_9
  3259  0109C6  0100               	movlb	0	; () banked
  3260  0109C8  6FDC               	movwf	(printf@f+1)& (0+255),b
  3261  0109CA  C0F3  F0DD         	movff	continuousMode@direction,?_printf+2
  3262  0109CE  C0F4  F0DE         	movff	continuousMode@direction+1,?_printf+3
  3263  0109D2  ECAA  F087         	call	_printf	;wreg free
  3264                           
  3265                           ;main.c: 167: printf("mDelta: %ld\n", (long) Stepper.mDelta);
  3266  0109D6  0ED0               	movlw	low STR_10
  3267  0109D8  0100               	movlb	0	; () banked
  3268  0109DA  6FDB               	movwf	printf@f& (0+255),b
  3269  0109DC  0EFF               	movlw	high STR_10
  3270  0109DE  0100               	movlb	0	; () banked
  3271  0109E0  6FDC               	movwf	(printf@f+1)& (0+255),b
  3272  0109E2  C0A3  F0DD         	movff	_Stepper,?_printf+2
  3273  0109E6  C0A4  F0DE         	movff	_Stepper+1,?_printf+3
  3274  0109EA  0100               	movlb	0	; () banked
  3275  0109EC  0E00               	movlw	0
  3276  0109EE  BFDE               	btfsc	(?_printf+3)& (0+255),7,b
  3277  0109F0  0EFF               	movlw	-1
  3278  0109F2  6FDF               	movwf	(?_printf+4)& (0+255),b
  3279  0109F4  6FE0               	movwf	(?_printf+5)& (0+255),b
  3280  0109F6  ECAA  F087         	call	_printf	;wreg free
  3281                           
  3282                           ;main.c: 168: Console_Render();
  3283  0109FA  ECD8  F089         	call	_Console_Render	;wreg free
  3284                           
  3285                           ;main.c: 169: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  3286  0109FE  0E08               	movlw	8
  3287  010A00  ECB9  F0A1         	call	_MXK_BlockSwitchTo
  3288  010A04  0900               	iorlw	0
  3289  010A06  B4D8               	btfsc	status,2,c
  3290  010A08  D029               	goto	l13070
  3291                           
  3292                           ;main.c: 170: Motor_Speed(&Stepper, (speed*1000000L));
  3293  010A0A  0EA3               	movlw	low _Stepper
  3294  010A0C  0100               	movlb	0	; () banked
  3295  010A0E  6FE0               	movwf	Motor_Speed@pMotor& (0+255),b
  3296  010A10  0E00               	movlw	high _Stepper
  3297  010A12  0100               	movlb	0	; () banked
  3298  010A14  6FE1               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3299  010A16  C0F5  F0C5         	movff	continuousMode@speed,___wmul@multiplier
  3300  010A1A  C0F6  F0C6         	movff	continuousMode@speed+1,___wmul@multiplier+1
  3301  010A1E  0E42               	movlw	66
  3302  010A20  0100               	movlb	0	; () banked
  3303  010A22  6FC8               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3304  010A24  0E40               	movlw	64
  3305  010A26  6FC7               	movwf	___wmul@multiplicand& (0+255),b
  3306  010A28  EC6D  F0A2         	call	___wmul	;wreg free
  3307  010A2C  C0C5  F0E2         	movff	?___wmul,Motor_Speed@pFrequency
  3308  010A30  C0C6  F0E3         	movff	?___wmul+1,Motor_Speed@pFrequency+1
  3309  010A34  ECA7  F0A3         	call	_Motor_Speed	;wreg free
  3310                           
  3311                           ;main.c: 171: Motor_Move(&Stepper, direction);
  3312  010A38  0EA3               	movlw	low _Stepper
  3313  010A3A  0100               	movlb	0	; () banked
  3314  010A3C  6FC8               	movwf	Motor_Move@pMotor& (0+255),b
  3315  010A3E  0E00               	movlw	high _Stepper
  3316  010A40  0100               	movlb	0	; () banked
  3317  010A42  6FC9               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3318  010A44  C0F3  F0CA         	movff	continuousMode@direction,Motor_Move@pDelta
  3319  010A48  C0F4  F0CB         	movff	continuousMode@direction+1,Motor_Move@pDelta+1
  3320  010A4C  EC50  F0A2         	call	_Motor_Move	;wreg free
  3321                           
  3322                           ;main.c: 172: if (MXK_Release())
  3323  010A50  EC41  F0A5         	call	_MXK_Release	;wreg free
  3324  010A54  0900               	iorlw	0
  3325  010A56  A4D8               	btfss	status,2,c
  3326                           
  3327                           ;main.c: 173: MXK_Dequeue();
  3328  010A58  ECEE  F0A2         	call	_MXK_Dequeue	;wreg free
  3329  010A5C                     l13070:
  3330                           
  3331                           ;main.c: 174: }
  3332                           ;main.c: 177: HMI_Poll();
  3333  010A5C  ECF3  F09C         	call	_HMI_Poll	;wreg free
  3334                           
  3335                           ;main.c: 179: mode = getMode();
  3336  010A60  EC08  F09B         	call	_getMode	;wreg free
  3337  010A64  C0E9  F0F1         	movff	?_getMode,continuousMode@mode
  3338  010A68  C0EA  F0F2         	movff	?_getMode+1,continuousMode@mode+1
  3339  010A6C                     l13074:
  3340  010A6C  0100               	movlb	0	; () banked
  3341  010A6E  05F1               	decf	continuousMode@mode& (0+255),w,b
  3342  010A70  0100               	movlb	0	; () banked
  3343  010A72  11F2               	iorwf	(continuousMode@mode+1)& (0+255),w,b
  3344  010A74  A4D8               	btfss	status,2,c
  3345  010A76  0012               	return	
  3346  010A78  D6BF               	goto	l13012
  3347  010A7A                     __end_of_continuousMode:
  3348                           	opt stack 0
  3349                           tosu	equ	0xFFF
  3350                           tosh	equ	0xFFE
  3351                           tosl	equ	0xFFD
  3352                           pclath	equ	0xFFA
  3353                           tblptru	equ	0xFF8
  3354                           tblptrh	equ	0xFF7
  3355                           tblptrl	equ	0xFF6
  3356                           tablat	equ	0xFF5
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postdec1	equ	0xFE5
  3360                           fsr1h	equ	0xFE2
  3361                           fsr1l	equ	0xFE1
  3362                           postinc2	equ	0xFDE
  3363                           status	equ	0xFD8
  3364                           
  3365 ;; *************** function _displayText *****************
  3366 ;; Defined at:
  3367 ;;		line 70 in file "main.c"
  3368 ;; Parameters:    Size  Location     Type
  3369 ;;		None
  3370 ;; Auto vars:     Size  Location     Type
  3371 ;;		None
  3372 ;; Return value:  Size  Location     Type
  3373 ;;                  1    wreg      void 
  3374 ;; Registers used:
  3375 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3376 ;; Tracked objects:
  3377 ;;		On entry : 0/0
  3378 ;;		On exit  : 0/0
  3379 ;;		Unchanged: 0/0
  3380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3384 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3385 ;;Total ram usage:        0 bytes
  3386 ;; Hardware stack levels used:    1
  3387 ;; Hardware stack levels required when called:   18
  3388 ;; This function calls:
  3389 ;;		_Console_Render
  3390 ;;		_displayMode
  3391 ;;		_displaySID
  3392 ;;		_printf
  3393 ;; This function is called by:
  3394 ;;		_continuousMode
  3395 ;;		_nullMode
  3396 ;;		_main
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text6
  3401  0147A0                     __ptext6:
  3402                           	opt stack 0
  3403  0147A0                     _displayText:
  3404                           	opt stack 10
  3405                           
  3406                           ;main.c: 72: printf("%c", (char)35);
  3407                           
  3408                           ; BSR set to: 0
  3409                           ;incstack = 0
  3410  0147A0  0EFC               	movlw	low STR_2
  3411  0147A2  0100               	movlb	0	; () banked
  3412  0147A4  6FDB               	movwf	printf@f& (0+255),b
  3413  0147A6  0EFF               	movlw	high STR_2
  3414  0147A8  0100               	movlb	0	; () banked
  3415  0147AA  6FDC               	movwf	(printf@f+1)& (0+255),b
  3416  0147AC  0E00               	movlw	0
  3417  0147AE  0100               	movlb	0	; () banked
  3418  0147B0  6FDE               	movwf	(?_printf+3)& (0+255),b
  3419  0147B2  0E23               	movlw	35
  3420  0147B4  6FDD               	movwf	(?_printf+2)& (0+255),b
  3421  0147B6  ECAA  F087         	call	_printf	;wreg free
  3422                           
  3423                           ;main.c: 75: displaySID();
  3424  0147BA  EC3D  F0A4         	call	_displaySID	;wreg free
  3425                           
  3426                           ;main.c: 78: displayMode();
  3427  0147BE  EC7C  F09A         	call	_displayMode	;wreg free
  3428                           
  3429                           ;main.c: 81: Console_Render();
  3430  0147C2  ECD8  F089         	call	_Console_Render	;wreg free
  3431  0147C6  0012               	return		;funcret
  3432  0147C8                     __end_of_displayText:
  3433                           	opt stack 0
  3434                           tosu	equ	0xFFF
  3435                           tosh	equ	0xFFE
  3436                           tosl	equ	0xFFD
  3437                           pclath	equ	0xFFA
  3438                           tblptru	equ	0xFF8
  3439                           tblptrh	equ	0xFF7
  3440                           tblptrl	equ	0xFF6
  3441                           tablat	equ	0xFF5
  3442                           postinc0	equ	0xFEE
  3443                           wreg	equ	0xFE8
  3444                           postdec1	equ	0xFE5
  3445                           fsr1h	equ	0xFE2
  3446                           fsr1l	equ	0xFE1
  3447                           postinc2	equ	0xFDE
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _displaySID *****************
  3451 ;; Defined at:
  3452 ;;		line 64 in file "main.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;                  1    wreg      void 
  3459 ;; Registers used:
  3460 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3466 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3469 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:   13
  3473 ;; This function calls:
  3474 ;;		_Console_SetForecolour
  3475 ;;		_printf
  3476 ;; This function is called by:
  3477 ;;		_displayText
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text7
  3482  01487A                     __ptext7:
  3483                           	opt stack 0
  3484  01487A                     _displaySID:
  3485                           	opt stack 14
  3486                           
  3487                           ;main.c: 65: Console_SetForecolour(0x07E0);
  3488                           
  3489                           ;incstack = 0
  3490  01487A  0E07               	movlw	7
  3491  01487C  0100               	movlb	0	; () banked
  3492  01487E  6FC6               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3493  014880  0EE0               	movlw	224
  3494  014882  6FC5               	movwf	Console_SetForecolour@pColour& (0+255),b
  3495  014884  EC8D  F0A5         	call	_Console_SetForecolour	;wreg free
  3496                           
  3497                           ;main.c: 66: printf("Jamin Early 99133391\n");
  3498  014888  0E81               	movlw	low STR_1
  3499  01488A  0100               	movlb	0	; () banked
  3500  01488C  6FDB               	movwf	printf@f& (0+255),b
  3501  01488E  0EFF               	movlw	high STR_1
  3502  014890  0100               	movlb	0	; () banked
  3503  014892  6FDC               	movwf	(printf@f+1)& (0+255),b
  3504  014894  ECAA  F087         	call	_printf	;wreg free
  3505  014898  0012               	return		;funcret
  3506  01489A                     __end_of_displaySID:
  3507                           	opt stack 0
  3508                           tosu	equ	0xFFF
  3509                           tosh	equ	0xFFE
  3510                           tosl	equ	0xFFD
  3511                           pclath	equ	0xFFA
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           postinc0	equ	0xFEE
  3517                           wreg	equ	0xFE8
  3518                           postdec1	equ	0xFE5
  3519                           fsr1h	equ	0xFE2
  3520                           fsr1l	equ	0xFE1
  3521                           postinc2	equ	0xFDE
  3522                           status	equ	0xFD8
  3523                           
  3524 ;; *************** function _displayMode *****************
  3525 ;; Defined at:
  3526 ;;		line 110 in file "main.c"
  3527 ;; Parameters:    Size  Location     Type
  3528 ;;		None
  3529 ;; Auto vars:     Size  Location     Type
  3530 ;;		None
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  1    wreg      void 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3540 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;Total ram usage:        0 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:   17
  3547 ;; This function calls:
  3548 ;;		_Console_SetForecolour
  3549 ;;		_getMode
  3550 ;;		_printf
  3551 ;; This function is called by:
  3552 ;;		_displayText
  3553 ;; This function uses a non-reentrant model
  3554 ;;
  3555                           
  3556                           	psect	text8
  3557  0134F8                     __ptext8:
  3558                           	opt stack 0
  3559  0134F8                     _displayMode:
  3560                           	opt stack 10
  3561                           
  3562                           ;main.c: 111: Console_SetForecolour(0xF800);
  3563                           
  3564                           ;incstack = 0
  3565  0134F8  0EF8               	movlw	248
  3566  0134FA  0100               	movlb	0	; () banked
  3567  0134FC  6FC6               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3568  0134FE  0E00               	movlw	0
  3569  013500  6FC5               	movwf	Console_SetForecolour@pColour& (0+255),b
  3570  013502  EC8D  F0A5         	call	_Console_SetForecolour	;wreg free
  3571                           
  3572                           ;main.c: 112: printf("Current Mode:\n");
  3573  013506  0E97               	movlw	low STR_3
  3574  013508  0100               	movlb	0	; () banked
  3575  01350A  6FDB               	movwf	printf@f& (0+255),b
  3576  01350C  0EFF               	movlw	high STR_3
  3577  01350E  0100               	movlb	0	; () banked
  3578  013510  6FDC               	movwf	(printf@f+1)& (0+255),b
  3579  013512  ECAA  F087         	call	_printf	;wreg free
  3580                           
  3581                           ;main.c: 113: switch (getMode()) {
  3582  013516  D024               	goto	l11632
  3583  013518                     l11622:
  3584                           
  3585                           ;main.c: 115: printf(" Position\n\n");
  3586  013518  0EDD               	movlw	low STR_4
  3587  01351A  0100               	movlb	0	; () banked
  3588  01351C  6FDB               	movwf	printf@f& (0+255),b
  3589  01351E  0EFF               	movlw	high STR_4
  3590  013520  0100               	movlb	0	; () banked
  3591  013522  6FDC               	movwf	(printf@f+1)& (0+255),b
  3592  013524  ECAA  F087         	call	_printf	;wreg free
  3593                           
  3594                           ;main.c: 116: break;
  3595  013528  0012               	return	
  3596  01352A                     l11624:
  3597                           
  3598                           ;main.c: 118: printf(" Step\n\n");
  3599  01352A  0EF4               	movlw	low STR_5
  3600  01352C  0100               	movlb	0	; () banked
  3601  01352E  6FDB               	movwf	printf@f& (0+255),b
  3602  013530  0EFF               	movlw	high STR_5
  3603  013532  0100               	movlb	0	; () banked
  3604  013534  6FDC               	movwf	(printf@f+1)& (0+255),b
  3605  013536  ECAA  F087         	call	_printf	;wreg free
  3606                           
  3607                           ;main.c: 119: break;
  3608  01353A  0012               	return	
  3609  01353C                     l11626:
  3610                           
  3611                           ;main.c: 121: printf(" Continuous\n\n");
  3612  01353C  0EB5               	movlw	low STR_6
  3613  01353E  0100               	movlb	0	; () banked
  3614  013540  6FDB               	movwf	printf@f& (0+255),b
  3615  013542  0EFF               	movlw	high STR_6
  3616  013544  0100               	movlb	0	; () banked
  3617  013546  6FDC               	movwf	(printf@f+1)& (0+255),b
  3618  013548  ECAA  F087         	call	_printf	;wreg free
  3619                           
  3620                           ;main.c: 122: break;
  3621  01354C  0012               	return	
  3622  01354E                     l11628:
  3623                           
  3624                           ;main.c: 124: printf(" Undefined\n\n");
  3625  01354E  0EC3               	movlw	low STR_7
  3626  013550  0100               	movlb	0	; () banked
  3627  013552  6FDB               	movwf	printf@f& (0+255),b
  3628  013554  0EFF               	movlw	high STR_7
  3629  013556  0100               	movlb	0	; () banked
  3630  013558  6FDC               	movwf	(printf@f+1)& (0+255),b
  3631  01355A  ECAA  F087         	call	_printf	;wreg free
  3632                           
  3633                           ;main.c: 126: }
  3634                           
  3635                           ;main.c: 125: break;
  3636  01355E  0012               	return	
  3637  013560                     l11632:
  3638  013560  EC08  F09B         	call	_getMode	;wreg free
  3639                           
  3640                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3641                           ; Switch size 1, requested type "space"
  3642                           ; Number of cases is 1, Range of values is 0 to 0
  3643                           ; switch strategies available:
  3644                           ; Name         Instructions Cycles
  3645                           ; simple_byte            4     3 (average)
  3646                           ;	Chosen strategy is simple_byte
  3647  013564  0100               	movlb	0	; () banked
  3648  013566  51EA               	movf	(?_getMode+1)& (0+255),w,b
  3649  013568  0A00               	xorlw	0	; case 0
  3650  01356A  A4D8               	btfss	status,2,c
  3651  01356C  D7F0               	goto	l11628
  3652                           
  3653                           ; BSR set to: 0
  3654                           ; Switch size 1, requested type "space"
  3655                           ; Number of cases is 3, Range of values is 1 to 3
  3656                           ; switch strategies available:
  3657                           ; Name         Instructions Cycles
  3658                           ; simple_byte           10     6 (average)
  3659                           ;	Chosen strategy is simple_byte
  3660  01356E  0100               	movlb	0	; () banked
  3661  013570  51E9               	movf	?_getMode& (0+255),w,b
  3662  013572  0A01               	xorlw	1	; case 1
  3663  013574  B4D8               	btfsc	status,2,c
  3664  013576  D7E2               	goto	l11626
  3665  013578  0A03               	xorlw	3	; case 2
  3666  01357A  B4D8               	btfsc	status,2,c
  3667  01357C  D7D6               	goto	l11624
  3668  01357E  0A01               	xorlw	1	; case 3
  3669  013580  B4D8               	btfsc	status,2,c
  3670  013582  D7CA               	goto	l11622
  3671  013584  D7E4               	goto	l11628
  3672  013586                     __end_of_displayMode:
  3673                           	opt stack 0
  3674                           tosu	equ	0xFFF
  3675                           tosh	equ	0xFFE
  3676                           tosl	equ	0xFFD
  3677                           pclath	equ	0xFFA
  3678                           tblptru	equ	0xFF8
  3679                           tblptrh	equ	0xFF7
  3680                           tblptrl	equ	0xFF6
  3681                           tablat	equ	0xFF5
  3682                           postinc0	equ	0xFEE
  3683                           wreg	equ	0xFE8
  3684                           postdec1	equ	0xFE5
  3685                           fsr1h	equ	0xFE2
  3686                           fsr1l	equ	0xFE1
  3687                           postinc2	equ	0xFDE
  3688                           status	equ	0xFD8
  3689                           
  3690 ;; *************** function _printf *****************
  3691 ;; Defined at:
  3692 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\doprnt.c"
  3693 ;; Parameters:    Size  Location     Type
  3694 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  3695 ;;		 -> STR_13(24), STR_12(24), STR_11(24), STR_10(13), 
  3696 ;;		 -> STR_9(15), STR_8(11), STR_7(13), STR_6(14), 
  3697 ;;		 -> STR_5(8), STR_4(12), STR_3(15), STR_2(3), 
  3698 ;;		 -> STR_1(22), 
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  val             4   35[BANK0 ] unsigned long 
  3701 ;;  tmpval          4    0        struct .
  3702 ;;  cp              3    0        PTR const unsigned char 
  3703 ;;  ap              2   33[BANK0 ] PTR void [1]
  3704 ;;		 -> ?_printf(2), 
  3705 ;;  prec            2   30[BANK0 ] int 
  3706 ;;  len             2    0        unsigned int 
  3707 ;;  c               1   39[BANK0 ] char 
  3708 ;;  flag            1   32[BANK0 ] unsigned char 
  3709 ;; Return value:  Size  Location     Type
  3710 ;;                  2   22[BANK0 ] int 
  3711 ;; Registers used:
  3712 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3713 ;; Tracked objects:
  3714 ;;		On entry : 0/0
  3715 ;;		On exit  : 0/0
  3716 ;;		Unchanged: 0/0
  3717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3718 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3722 ;;Total ram usage:       18 bytes
  3723 ;; Hardware stack levels used:    1
  3724 ;; Hardware stack levels required when called:   12
  3725 ;; This function calls:
  3726 ;;		___lldiv
  3727 ;;		___llmod
  3728 ;;		_putch
  3729 ;; This function is called by:
  3730 ;;		_displaySID
  3731 ;;		_displayText
  3732 ;;		_displayMode
  3733 ;;		_continuousMode
  3734 ;;		_nullMode
  3735 ;; This function uses a non-reentrant model
  3736 ;;
  3737                           
  3738                           	psect	text9
  3739  010F54                     __ptext9:
  3740                           	opt stack 0
  3741  010F54                     _printf:
  3742                           	opt stack 16
  3743                           
  3744                           ;doprnt.c: 466: va_list ap;
  3745                           ;doprnt.c: 499: signed char c;
  3746                           ;doprnt.c: 504: int prec;
  3747                           ;doprnt.c: 508: unsigned char flag;
  3748                           ;doprnt.c: 523: union {
  3749                           ;doprnt.c: 524: unsigned long vd;
  3750                           ;doprnt.c: 525: double integ;
  3751                           ;doprnt.c: 526: } tmpval;
  3752                           ;doprnt.c: 528: unsigned long val;
  3753                           ;doprnt.c: 529: unsigned len;
  3754                           ;doprnt.c: 530: const char * cp;
  3755                           ;doprnt.c: 533: *ap = __va_start();
  3756                           
  3757                           ;incstack = 0
  3758  010F54  0EDD               	movlw	low (?_printf+2)
  3759  010F56  0100               	movlb	0	; () banked
  3760  010F58  6FE6               	movwf	printf@ap& (0+255),b
  3761  010F5A  0E00               	movlw	high (?_printf+2)
  3762  010F5C  0100               	movlb	0	; () banked
  3763  010F5E  6FE7               	movwf	(printf@ap+1)& (0+255),b
  3764                           
  3765                           ;doprnt.c: 536: while(c = *f++) {
  3766  010F60  D101               	goto	l11188
  3767  010F62                     l11130:
  3768                           
  3769                           ; BSR set to: 0
  3770                           ;doprnt.c: 538: if(c != '%')
  3771  010F62  0E25               	movlw	37
  3772  010F64  0100               	movlb	0	; () banked
  3773  010F66  19EC               	xorwf	printf@c& (0+255),w,b
  3774  010F68  B4D8               	btfsc	status,2,c
  3775  010F6A  D005               	goto	l11134
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;doprnt.c: 540: {
  3779                           ;doprnt.c: 541: (putch(c) );
  3780  010F6C  0100               	movlb	0	; () banked
  3781  010F6E  51EC               	movf	printf@c& (0+255),w,b
  3782  010F70  EC55  F0A5         	call	_putch
  3783                           
  3784                           ;doprnt.c: 542: continue;
  3785  010F74  D0F7               	goto	l11188
  3786  010F76                     l11134:
  3787                           
  3788                           ;doprnt.c: 543: }
  3789                           ;doprnt.c: 548: flag = 0;
  3790  010F76  0E00               	movlw	0
  3791  010F78  0100               	movlb	0	; () banked
  3792  010F7A  6FE5               	movwf	printf@flag& (0+255),b
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;doprnt.c: 635: switch(c = *f++) {
  3796                           
  3797                           ;doprnt.c: 633: loop:
  3798  010F7C  D014               	goto	l11146
  3799  010F7E                     l11136:
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;doprnt.c: 643: flag |= 0x10;
  3803  010F7E  0100               	movlb	0	; () banked
  3804  010F80  89E5               	bsf	printf@flag& (0+255),4,b
  3805                           
  3806                           ;doprnt.c: 644: goto loop;
  3807  010F82  D011               	goto	l11146
  3808  010F84                     l11138:
  3809                           
  3810                           ; BSR set to: 0
  3811                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3812  010F84  C0E6  FFD9         	movff	printf@ap,fsr2l
  3813  010F88  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  3814  010F8C  50DF               	movf	indf2,w,c
  3815  010F8E  0100               	movlb	0	; () banked
  3816  010F90  6FEC               	movwf	printf@c& (0+255),b
  3817                           
  3818                           ; BSR set to: 0
  3819  010F92  0E02               	movlw	2
  3820  010F94  0100               	movlb	0	; () banked
  3821  010F96  27E6               	addwf	printf@ap& (0+255),f,b
  3822  010F98  0E00               	movlw	0
  3823  010F9A  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  3824  010F9C                     l11142:
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;doprnt.c: 809: (putch(c) );
  3828  010F9C  0100               	movlb	0	; () banked
  3829  010F9E  51EC               	movf	printf@c& (0+255),w,b
  3830  010FA0  EC55  F0A5         	call	_putch
  3831                           
  3832                           ;doprnt.c: 810: continue;
  3833  010FA4  D0DF               	goto	l11188
  3834  010FA6                     l11146:
  3835  010FA6  C0DB  FFF6         	movff	printf@f,tblptrl
  3836  010FAA  C0DC  FFF7         	movff	printf@f+1,tblptrh
  3837  010FAE  0100               	movlb	0	; () banked
  3838  010FB0  4BDB               	infsnz	printf@f& (0+255),f,b
  3839  010FB2  2BDC               	incf	(printf@f+1)& (0+255),f,b
  3840  010FB4                     	if	0	;tblptru may be non-zero
  3841  010FB4                     	endif
  3842  010FB4                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3843  010FB4  0E00               	movlw	low (__mediumconst shr (0+16))
  3844  010FB6  6EF8               	movwf	tblptru,c
  3845  010FB8                     	endif
  3846  010FB8  0008               	tblrd		*
  3847  010FBA  CFF5 F0EC          	movff	tablat,printf@c
  3848  010FBE  0100               	movlb	0	; () banked
  3849  010FC0  51EC               	movf	printf@c& (0+255),w,b
  3850                           
  3851                           ; Switch size 1, requested type "space"
  3852                           ; Number of cases is 5, Range of values is 0 to 108
  3853                           ; switch strategies available:
  3854                           ; Name         Instructions Cycles
  3855                           ; simple_byte           16     9 (average)
  3856                           ;	Chosen strategy is simple_byte
  3857  010FC2  0A00               	xorlw	0	; case 0
  3858  010FC4  B4D8               	btfsc	status,2,c
  3859  010FC6  0012               	return	
  3860  010FC8  0A63               	xorlw	99	; case 99
  3861  010FCA  B4D8               	btfsc	status,2,c
  3862  010FCC  D7DB               	goto	l11138
  3863  010FCE  0A07               	xorlw	7	; case 100
  3864  010FD0  B4D8               	btfsc	status,2,c
  3865  010FD2  D007               	goto	l2090
  3866  010FD4  0A0D               	xorlw	13	; case 105
  3867  010FD6  B4D8               	btfsc	status,2,c
  3868  010FD8  D004               	goto	l2090
  3869  010FDA  0A05               	xorlw	5	; case 108
  3870  010FDC  B4D8               	btfsc	status,2,c
  3871  010FDE  D7CF               	goto	l11136
  3872  010FE0  D7DD               	goto	l11142
  3873  010FE2                     l2090:
  3874                           
  3875                           ;doprnt.c: 1253: {
  3876                           ;doprnt.c: 1255: if(flag & 0x10)
  3877  010FE2  0100               	movlb	0	; () banked
  3878  010FE4  A9E5               	btfss	printf@flag& (0+255),4,b
  3879  010FE6  D00E               	goto	l11152
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3883  010FE8  C0E6  FFD9         	movff	printf@ap,fsr2l
  3884  010FEC  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  3885  010FF0  CFDE F0E8          	movff	postinc2,printf@val
  3886  010FF4  CFDE F0E9          	movff	postinc2,printf@val+1
  3887  010FF8  CFDE F0EA          	movff	postinc2,printf@val+2
  3888  010FFC  CFDE F0EB          	movff	postinc2,printf@val+3
  3889                           
  3890                           ; BSR set to: 0
  3891  011000  0E04               	movlw	4
  3892  011002  D00F               	goto	L1
  3893  011004                     l11152:
  3894                           
  3895                           ; BSR set to: 0
  3896                           ;doprnt.c: 1257: else
  3897                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3898  011004  C0E6  FFD9         	movff	printf@ap,fsr2l
  3899  011008  C0E7  FFDA         	movff	printf@ap+1,fsr2h
  3900  01100C  CFDE F0E8          	movff	postinc2,printf@val
  3901  011010  CFDD F0E9          	movff	postdec2,printf@val+1
  3902  011014  0100               	movlb	0	; () banked
  3903  011016  0E00               	movlw	0
  3904  011018  BFE9               	btfsc	(printf@val+1)& (0+255),7,b
  3905  01101A  0EFF               	movlw	-1
  3906  01101C  6FEA               	movwf	(printf@val+2)& (0+255),b
  3907  01101E  6FEB               	movwf	(printf@val+3)& (0+255),b
  3908                           
  3909                           ; BSR set to: 0
  3910  011020  0E02               	movlw	2
  3911  011022                     L1:
  3912  011022  0100               	movlb	0	; () banked
  3913  011024  27E6               	addwf	printf@ap& (0+255),f,b
  3914  011026  0E00               	movlw	0
  3915  011028  23E7               	addwfc	(printf@ap+1)& (0+255),f,b
  3916                           
  3917                           ; BSR set to: 0
  3918                           ;doprnt.c: 1261: if((long)val < 0) {
  3919                           
  3920                           ; BSR set to: 0
  3921  01102A  0100               	movlb	0	; () banked
  3922  01102C  AFEB               	btfss	(printf@val+3)& (0+255),7,b
  3923  01102E  D00C               	goto	l11162
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1262: flag |= 0x03;
  3927  011030  0E03               	movlw	3
  3928  011032  0100               	movlb	0	; () banked
  3929  011034  13E5               	iorwf	printf@flag& (0+255),f,b
  3930                           
  3931                           ; BSR set to: 0
  3932                           ;doprnt.c: 1263: val = -val;
  3933  011036  0100               	movlb	0	; () banked
  3934  011038  1FEB               	comf	(printf@val+3)& (0+255),f,b
  3935  01103A  1FEA               	comf	(printf@val+2)& (0+255),f,b
  3936  01103C  1FE9               	comf	(printf@val+1)& (0+255),f,b
  3937  01103E  6DE8               	negf	printf@val& (0+255),b
  3938  011040  0E00               	movlw	0
  3939  011042  23E9               	addwfc	(printf@val+1)& (0+255),f,b
  3940  011044  23EA               	addwfc	(printf@val+2)& (0+255),f,b
  3941  011046  23EB               	addwfc	(printf@val+3)& (0+255),f,b
  3942  011048                     l11162:
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;doprnt.c: 1264: }
  3946                           ;doprnt.c: 1266: }
  3947                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3948  011048  0E01               	movlw	1
  3949  01104A  0100               	movlb	0	; () banked
  3950  01104C  6FEC               	movwf	printf@c& (0+255),b
  3951  01104E                     l11164:
  3952                           
  3953                           ; BSR set to: 0
  3954  01104E  0E0A               	movlw	10
  3955  011050  0100               	movlb	0	; () banked
  3956  011052  19EC               	xorwf	printf@c& (0+255),w,b
  3957  011054  B4D8               	btfsc	status,2,c
  3958  011056  D021               	goto	l11176
  3959                           
  3960                           ; BSR set to: 0
  3961                           ;doprnt.c: 1306: if(val < dpowers[c])
  3962                           
  3963                           ; BSR set to: 0
  3964                           
  3965                           ; BSR set to: 0
  3966  011058  0100               	movlb	0	; () banked
  3967  01105A  51EC               	movf	printf@c& (0+255),w,b
  3968  01105C  0D04               	mullw	4
  3969  01105E  0E23               	movlw	low _dpowers
  3970  011060  24F3               	addwf	prodl,w,c
  3971  011062  6EF6               	movwf	tblptrl,c
  3972  011064  0EFD               	movlw	high _dpowers
  3973  011066  20F4               	addwfc	prodh,w,c
  3974  011068  6EF7               	movwf	tblptrh,c
  3975  01106A                     	if	1	;There are 3 active tblptr bytes
  3976  01106A  6AF8               	clrf	tblptru,c
  3977  01106C  0E00               	movlw	low (__mediumconst shr (0+16))
  3978  01106E  22F8               	addwfc	tblptru,f,c
  3979  011070                     	endif
  3980  011070  0009               	tblrd		*+
  3981  011072  50F5               	movf	tablat,w,c
  3982  011074  0100               	movlb	0	; () banked
  3983  011076  5DE8               	subwf	printf@val& (0+255),w,b
  3984  011078  0009               	tblrd		*+
  3985  01107A  50F5               	movf	tablat,w,c
  3986  01107C  0100               	movlb	0	; () banked
  3987  01107E  59E9               	subwfb	(printf@val+1)& (0+255),w,b
  3988  011080  0009               	tblrd		*+
  3989  011082  50F5               	movf	tablat,w,c
  3990  011084  0100               	movlb	0	; () banked
  3991  011086  59EA               	subwfb	(printf@val+2)& (0+255),w,b
  3992  011088  0009               	tblrd		*+
  3993  01108A  50F5               	movf	tablat,w,c
  3994  01108C  0100               	movlb	0	; () banked
  3995  01108E  59EB               	subwfb	(printf@val+3)& (0+255),w,b
  3996  011090  A0D8               	btfss	status,0,c
  3997  011092  D003               	goto	l11176
  3998                           
  3999                           ; BSR set to: 0
  4000                           
  4001                           ; BSR set to: 0
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;doprnt.c: 1307: break;
  4005  011094  0100               	movlb	0	; () banked
  4006  011096  2BEC               	incf	printf@c& (0+255),f,b
  4007  011098  D7DA               	goto	l11164
  4008  01109A                     l11176:
  4009                           
  4010                           ; BSR set to: 0
  4011                           ;doprnt.c: 1422: {
  4012                           ;doprnt.c: 1438: if(flag & 0x03)
  4013  01109A  C0E5  F0E1         	movff	printf@flag,??_printf
  4014  01109E  0E03               	movlw	3
  4015  0110A0  0100               	movlb	0	; () banked
  4016  0110A2  17E1               	andwf	??_printf& (0+255),f,b
  4017  0110A4  B4D8               	btfsc	status,2,c
  4018  0110A6  D003               	goto	l11180
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;doprnt.c: 1439: (putch('-') );
  4022  0110A8  0E2D               	movlw	45
  4023  0110AA  EC55  F0A5         	call	_putch
  4024  0110AE                     l11180:
  4025                           
  4026                           ;doprnt.c: 1469: }
  4027                           ;doprnt.c: 1472: prec = c;
  4028  0110AE  0100               	movlb	0	; () banked
  4029  0110B0  51EC               	movf	printf@c& (0+255),w,b
  4030  0110B2  0100               	movlb	0	; () banked
  4031  0110B4  6FE3               	movwf	printf@prec& (0+255),b
  4032  0110B6  6BE4               	clrf	(printf@prec+1)& (0+255),b
  4033  0110B8  BFE3               	btfsc	printf@prec& (0+255),7,b
  4034  0110BA  07E4               	decf	(printf@prec+1)& (0+255),f,b
  4035                           
  4036                           ;doprnt.c: 1474: while(prec--) {
  4037  0110BC  D048               	goto	l11186
  4038  0110BE                     l11182:
  4039                           
  4040                           ; BSR set to: 0
  4041                           ;doprnt.c: 1478: {
  4042                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4043  0110BE  C0E3  F0E1         	movff	printf@prec,??_printf
  4044  0110C2  C0E4  F0E2         	movff	printf@prec+1,??_printf+1
  4045  0110C6  0100               	movlb	0	; () banked
  4046  0110C8  90D8               	bcf	status,0,c
  4047  0110CA  37E1               	rlcf	??_printf& (0+255),f,b
  4048  0110CC  37E2               	rlcf	(??_printf+1)& (0+255),f,b
  4049  0110CE  0100               	movlb	0	; () banked
  4050  0110D0  90D8               	bcf	status,0,c
  4051  0110D2  37E1               	rlcf	??_printf& (0+255),f,b
  4052  0110D4  37E2               	rlcf	(??_printf+1)& (0+255),f,b
  4053  0110D6  0E23               	movlw	low _dpowers
  4054  0110D8  0100               	movlb	0	; () banked
  4055  0110DA  25E1               	addwf	??_printf& (0+255),w,b
  4056  0110DC  6EF6               	movwf	tblptrl,c
  4057  0110DE  0EFD               	movlw	high _dpowers
  4058  0110E0  21E2               	addwfc	(??_printf+1)& (0+255),w,b
  4059  0110E2  6EF7               	movwf	tblptrh,c
  4060  0110E4                     	if	1	;There are 3 active tblptr bytes
  4061  0110E4  6AF8               	clrf	tblptru,c
  4062  0110E6  0E00               	movlw	low (__mediumconst shr (0+16))
  4063  0110E8  22F8               	addwfc	tblptru,f,c
  4064  0110EA                     	endif
  4065  0110EA  0009               	tblrd		*+
  4066  0110EC  CFF5 F0C9          	movff	tablat,___lldiv@divisor
  4067  0110F0  0009               	tblrd		*+
  4068  0110F2  CFF5 F0CA          	movff	tablat,___lldiv@divisor+1
  4069  0110F6  0009               	tblrd		*+
  4070  0110F8  CFF5 F0CB          	movff	tablat,___lldiv@divisor+2
  4071  0110FC  000A               	tblrd		*-
  4072  0110FE  CFF5 F0CC          	movff	tablat,___lldiv@divisor+3
  4073  011102  C0E8  F0C5         	movff	printf@val,___lldiv@dividend
  4074  011106  C0E9  F0C6         	movff	printf@val+1,___lldiv@dividend+1
  4075  01110A  C0EA  F0C7         	movff	printf@val+2,___lldiv@dividend+2
  4076  01110E  C0EB  F0C8         	movff	printf@val+3,___lldiv@dividend+3
  4077  011112  ECA2  F095         	call	___lldiv	;wreg free
  4078  011116  C0C5  F0D2         	movff	?___lldiv,___llmod@dividend
  4079  01111A  C0C6  F0D3         	movff	?___lldiv+1,___llmod@dividend+1
  4080  01111E  C0C7  F0D4         	movff	?___lldiv+2,___llmod@dividend+2
  4081  011122  C0C8  F0D5         	movff	?___lldiv+3,___llmod@dividend+3
  4082  011126  0E0A               	movlw	10
  4083  011128  0100               	movlb	0	; () banked
  4084  01112A  6FD6               	movwf	___llmod@divisor& (0+255),b
  4085  01112C  0E00               	movlw	0
  4086  01112E  6FD7               	movwf	(___llmod@divisor+1)& (0+255),b
  4087  011130  0E00               	movlw	0
  4088  011132  6FD8               	movwf	(___llmod@divisor+2)& (0+255),b
  4089  011134  0E00               	movlw	0
  4090  011136  6FD9               	movwf	(___llmod@divisor+3)& (0+255),b
  4091  011138  EC52  F099         	call	___llmod	;wreg free
  4092  01113C  0100               	movlb	0	; () banked
  4093  01113E  51D2               	movf	?___llmod& (0+255),w,b
  4094  011140  0F30               	addlw	48
  4095  011142  0100               	movlb	0	; () banked
  4096  011144  6FEC               	movwf	printf@c& (0+255),b
  4097                           
  4098                           ; BSR set to: 0
  4099                           ;doprnt.c: 1523: }
  4100                           ;doprnt.c: 1524: (putch(c) );
  4101  011146  0100               	movlb	0	; () banked
  4102  011148  51EC               	movf	printf@c& (0+255),w,b
  4103  01114A  EC55  F0A5         	call	_putch
  4104  01114E                     l11186:
  4105  01114E  0100               	movlb	0	; () banked
  4106  011150  07E3               	decf	printf@prec& (0+255),f,b
  4107  011152  A0D8               	btfss	status,0,c
  4108  011154  07E4               	decf	(printf@prec+1)& (0+255),f,b
  4109  011156  0100               	movlb	0	; () banked
  4110  011158  29E3               	incf	printf@prec& (0+255),w,b
  4111  01115A  E1B1               	bnz	l11182
  4112  01115C  0100               	movlb	0	; () banked
  4113  01115E  29E4               	incf	(printf@prec+1)& (0+255),w,b
  4114  011160  A4D8               	btfss	status,2,c
  4115  011162  D7AD               	goto	l11182
  4116  011164                     l11188:
  4117  011164  C0DB  FFF6         	movff	printf@f,tblptrl
  4118  011168  C0DC  FFF7         	movff	printf@f+1,tblptrh
  4119  01116C  0100               	movlb	0	; () banked
  4120  01116E  4BDB               	infsnz	printf@f& (0+255),f,b
  4121  011170  2BDC               	incf	(printf@f+1)& (0+255),f,b
  4122  011172                     	if	0	;tblptru may be non-zero
  4123  011172                     	endif
  4124  011172                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4125  011172  0E00               	movlw	low (__mediumconst shr (0+16))
  4126  011174  6EF8               	movwf	tblptru,c
  4127  011176                     	endif
  4128  011176  0008               	tblrd		*
  4129  011178  CFF5 F0EC          	movff	tablat,printf@c
  4130  01117C  0100               	movlb	0	; () banked
  4131  01117E  51EC               	movf	printf@c& (0+255),w,b
  4132  011180  B4D8               	btfsc	status,2,c
  4133  011182  0012               	return	
  4134  011184  D6EE               	goto	l11130
  4135  011186                     __end_of_printf:
  4136                           	opt stack 0
  4137                           tosu	equ	0xFFF
  4138                           tosh	equ	0xFFE
  4139                           tosl	equ	0xFFD
  4140                           pclath	equ	0xFFA
  4141                           tblptru	equ	0xFF8
  4142                           tblptrh	equ	0xFF7
  4143                           tblptrl	equ	0xFF6
  4144                           tablat	equ	0xFF5
  4145                           prodh	equ	0xFF4
  4146                           prodl	equ	0xFF3
  4147                           postinc0	equ	0xFEE
  4148                           wreg	equ	0xFE8
  4149                           postdec1	equ	0xFE5
  4150                           fsr1h	equ	0xFE2
  4151                           fsr1l	equ	0xFE1
  4152                           indf2	equ	0xFDF
  4153                           postinc2	equ	0xFDE
  4154                           postdec2	equ	0xFDD
  4155                           fsr2h	equ	0xFDA
  4156                           fsr2l	equ	0xFD9
  4157                           status	equ	0xFD8
  4158                           
  4159 ;; *************** function _putch *****************
  4160 ;; Defined at:
  4161 ;;		line 454 in file "Library/Console.c"
  4162 ;; Parameters:    Size  Location     Type
  4163 ;;  c               1    wreg     unsigned char 
  4164 ;; Auto vars:     Size  Location     Type
  4165 ;;  c               1   20[BANK0 ] unsigned char 
  4166 ;; Return value:  Size  Location     Type
  4167 ;;                  1    wreg      void 
  4168 ;; Registers used:
  4169 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4170 ;; Tracked objects:
  4171 ;;		On entry : 0/0
  4172 ;;		On exit  : 0/0
  4173 ;;		Unchanged: 0/0
  4174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;Total ram usage:        1 bytes
  4180 ;; Hardware stack levels used:    1
  4181 ;; Hardware stack levels required when called:   11
  4182 ;; This function calls:
  4183 ;;		_Console_PrintChar
  4184 ;; This function is called by:
  4185 ;;		_printf
  4186 ;; This function uses a non-reentrant model
  4187 ;;
  4188                           
  4189                           	psect	text10
  4190  014AAA                     __ptext10:
  4191                           	opt stack 0
  4192  014AAA                     _putch:
  4193                           	opt stack 16
  4194                           
  4195                           ; BSR set to: 0
  4196                           ;incstack = 0
  4197                           ;putch@c stored from wreg
  4198  014AAA  0100               	movlb	0	; () banked
  4199  014AAC  6FD9               	movwf	putch@c& (0+255),b
  4200                           
  4201                           ;Console.c: 456: Console_PrintChar(c);
  4202  014AAE  0100               	movlb	0	; () banked
  4203  014AB0  51D9               	movf	putch@c& (0+255),w,b
  4204  014AB2  EC84  F08D         	call	_Console_PrintChar
  4205  014AB6  0012               	return		;funcret
  4206  014AB8                     __end_of_putch:
  4207                           	opt stack 0
  4208                           tosu	equ	0xFFF
  4209                           tosh	equ	0xFFE
  4210                           tosl	equ	0xFFD
  4211                           pclath	equ	0xFFA
  4212                           tblptru	equ	0xFF8
  4213                           tblptrh	equ	0xFF7
  4214                           tblptrl	equ	0xFF6
  4215                           tablat	equ	0xFF5
  4216                           prodh	equ	0xFF4
  4217                           prodl	equ	0xFF3
  4218                           postinc0	equ	0xFEE
  4219                           wreg	equ	0xFE8
  4220                           postdec1	equ	0xFE5
  4221                           fsr1h	equ	0xFE2
  4222                           fsr1l	equ	0xFE1
  4223                           indf2	equ	0xFDF
  4224                           postinc2	equ	0xFDE
  4225                           postdec2	equ	0xFDD
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _Console_PrintChar *****************
  4231 ;; Defined at:
  4232 ;;		line 322 in file "Library/Console.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  pInput          1    wreg     unsigned char 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;  pInput          1   19[BANK0 ] unsigned char 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      void 
  4239 ;; Registers used:
  4240 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;Total ram usage:        4 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; Hardware stack levels required when called:   10
  4253 ;; This function calls:
  4254 ;;		_Console_Backspace
  4255 ;;		_Console_FormFeed
  4256 ;;		_Console_IncrementCursor
  4257 ;;		_Console_NewLine
  4258 ;;		_Console_ResetCursor
  4259 ;;		_Console_Tab
  4260 ;; This function is called by:
  4261 ;;		_putch
  4262 ;;		_Console_PrintString
  4263 ;; This function uses a non-reentrant model
  4264 ;;
  4265                           
  4266                           	psect	text11
  4267  011B08                     __ptext11:
  4268                           	opt stack 0
  4269  011B08                     _Console_PrintChar:
  4270                           	opt stack 16
  4271                           
  4272                           ;incstack = 0
  4273                           ;Console_PrintChar@pInput stored from wreg
  4274  011B08  0100               	movlb	0	; () banked
  4275  011B0A  6FD8               	movwf	Console_PrintChar@pInput& (0+255),b
  4276                           
  4277                           ;Console.c: 324: switch(pInput)
  4278  011B0C  D0A8               	goto	l10756
  4279  011B0E                     l10712:
  4280                           
  4281                           ;Console.c: 327: case '\n':
  4282                           ;Console.c: 328: Console_NewLine();
  4283  011B0E  ECEB  F099         	call	_Console_NewLine	;wreg free
  4284                           
  4285                           ;Console.c: 329: return;
  4286  011B12  0012               	return	
  4287  011B14                     l10716:
  4288                           
  4289                           ;Console.c: 331: Console_Backspace();
  4290  011B14  EC56  F0A0         	call	_Console_Backspace	;wreg free
  4291                           
  4292                           ;Console.c: 332: return;
  4293  011B18  0012               	return	
  4294  011B1A                     l10720:
  4295                           
  4296                           ;Console.c: 334: Console_FormFeed();
  4297  011B1A  ECC3  F09A         	call	_Console_FormFeed	;wreg free
  4298                           
  4299                           ;Console.c: 335: return;
  4300  011B1E  0012               	return	
  4301  011B20                     l10724:
  4302                           
  4303                           ;Console.c: 337: Console_Tab();
  4304  011B20  ECE2  F094         	call	_Console_Tab	;wreg free
  4305                           
  4306                           ;Console.c: 338: return;
  4307  011B24  0012               	return	
  4308  011B26                     l10728:
  4309                           
  4310                           ;Console.c: 340: Console_IncrementCursor();
  4311  011B26  EC3A  F09E         	call	_Console_IncrementCursor	;wreg free
  4312                           
  4313                           ;Console.c: 341: return;
  4314  011B2A  0012               	return	
  4315  011B2C                     l10732:
  4316                           
  4317                           ;Console.c: 343: Console_ResetCursor();
  4318  011B2C  ECA7  F0A4         	call	_Console_ResetCursor	;wreg free
  4319                           
  4320                           ;Console.c: 344: return;
  4321  011B30  0012               	return	
  4322  011B32                     l10736:
  4323                           
  4324                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4325  011B32  C0D8  F0D5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4326  011B36  0E7F               	movlw	127
  4327  011B38  0100               	movlb	0	; () banked
  4328  011B3A  17D5               	andwf	??_Console_PrintChar& (0+255),f,b
  4329  011B3C  5036               	movf	_lBufferY,w,c
  4330  011B3E  0D14               	mullw	20
  4331  011B40  0E46               	movlw	low _lBuffer
  4332  011B42  0100               	movlb	0	; () banked
  4333  011B44  6FD6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4334  011B46  0E02               	movlw	high _lBuffer
  4335  011B48  0100               	movlb	0	; () banked
  4336  011B4A  6FD7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4337  011B4C  50F3               	movf	prodl,w,c
  4338  011B4E  0100               	movlb	0	; () banked
  4339  011B50  27D6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4340  011B52  50F4               	movf	prodh,w,c
  4341  011B54  0100               	movlb	0	; () banked
  4342  011B56  23D7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4343  011B58  5037               	movf	_lBufferX,w,c
  4344  011B5A  0D01               	mullw	1
  4345  011B5C  50F3               	movf	prodl,w,c
  4346  011B5E  0100               	movlb	0	; () banked
  4347  011B60  25D6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4348  011B62  6ED9               	movwf	fsr2l,c
  4349  011B64  50F4               	movf	prodh,w,c
  4350  011B66  0100               	movlb	0	; () banked
  4351  011B68  21D7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4352  011B6A  6EDA               	movwf	fsr2h,c
  4353  011B6C  50DF               	movf	indf2,w,c
  4354  011B6E  0B7F               	andlw	127
  4355  011B70  0100               	movlb	0	; () banked
  4356  011B72  19D5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4357  011B74  B4D8               	btfsc	status,2,c
  4358  011B76  D02B               	goto	l10744
  4359                           
  4360                           ; BSR set to: 0
  4361                           ;Console.c: 351: {
  4362                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4363  011B78  0E01               	movlw	1
  4364  011B7A  0100               	movlb	0	; () banked
  4365  011B7C  6FFF               	movwf	_change& (0+255),b
  4366                           
  4367                           ; BSR set to: 0
  4368  011B7E  5036               	movf	_lBufferY,w,c
  4369  011B80  0D14               	mullw	20
  4370  011B82  0E46               	movlw	low _lBuffer
  4371  011B84  0100               	movlb	0	; () banked
  4372  011B86  6FD5               	movwf	??_Console_PrintChar& (0+255),b
  4373  011B88  0E02               	movlw	high _lBuffer
  4374  011B8A  0100               	movlb	0	; () banked
  4375  011B8C  6FD6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4376  011B8E  50F3               	movf	prodl,w,c
  4377  011B90  0100               	movlb	0	; () banked
  4378  011B92  27D5               	addwf	??_Console_PrintChar& (0+255),f,b
  4379  011B94  50F4               	movf	prodh,w,c
  4380  011B96  0100               	movlb	0	; () banked
  4381  011B98  23D6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4382  011B9A  5037               	movf	_lBufferX,w,c
  4383  011B9C  0D01               	mullw	1
  4384  011B9E  50F3               	movf	prodl,w,c
  4385  011BA0  0100               	movlb	0	; () banked
  4386  011BA2  25D5               	addwf	??_Console_PrintChar& (0+255),w,b
  4387  011BA4  6ED9               	movwf	fsr2l,c
  4388  011BA6  50F4               	movf	prodh,w,c
  4389  011BA8  0100               	movlb	0	; () banked
  4390  011BAA  21D6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4391  011BAC  6EDA               	movwf	fsr2h,c
  4392  011BAE  0100               	movlb	0	; () banked
  4393  011BB0  51D8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4394  011BB2  0980               	iorlw	128
  4395  011BB4  6EDF               	movwf	indf2,c
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4399  011BB6  5036               	movf	_lBufferY,w,c
  4400  011BB8  0D02               	mullw	2
  4401  011BBA  0E00               	movlw	low _lCBuffer
  4402  011BBC  24F3               	addwf	prodl,w,c
  4403  011BBE  6ED9               	movwf	fsr2l,c
  4404  011BC0  0E01               	movlw	high _lCBuffer
  4405  011BC2  20F4               	addwfc	prodh,w,c
  4406  011BC4  6EDA               	movwf	fsr2h,c
  4407  011BC6  C0FD  FFDE         	movff	_gForecolour,postinc2
  4408  011BCA  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4409  011BCE                     l10744:
  4410                           
  4411                           ; BSR set to: 0
  4412                           ;Console.c: 354: }
  4413                           ;Console.c: 368: if(Console_IncrementCursor())
  4414  011BCE  EC3A  F09E         	call	_Console_IncrementCursor	;wreg free
  4415  011BD2  0900               	iorlw	0
  4416  011BD4  B4D8               	btfsc	status,2,c
  4417  011BD6  0012               	return	
  4418                           
  4419                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4420  011BD8  C0D8  F0D5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4421  011BDC  0E7F               	movlw	127
  4422  011BDE  0100               	movlb	0	; () banked
  4423  011BE0  17D5               	andwf	??_Console_PrintChar& (0+255),f,b
  4424  011BE2  5036               	movf	_lBufferY,w,c
  4425  011BE4  0D14               	mullw	20
  4426  011BE6  0E46               	movlw	low _lBuffer
  4427  011BE8  0100               	movlb	0	; () banked
  4428  011BEA  6FD6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4429  011BEC  0E02               	movlw	high _lBuffer
  4430  011BEE  0100               	movlb	0	; () banked
  4431  011BF0  6FD7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4432  011BF2  50F3               	movf	prodl,w,c
  4433  011BF4  0100               	movlb	0	; () banked
  4434  011BF6  27D6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4435  011BF8  50F4               	movf	prodh,w,c
  4436  011BFA  0100               	movlb	0	; () banked
  4437  011BFC  23D7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4438  011BFE  5037               	movf	_lBufferX,w,c
  4439  011C00  0D01               	mullw	1
  4440  011C02  50F3               	movf	prodl,w,c
  4441  011C04  0100               	movlb	0	; () banked
  4442  011C06  25D6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4443  011C08  6ED9               	movwf	fsr2l,c
  4444  011C0A  50F4               	movf	prodh,w,c
  4445  011C0C  0100               	movlb	0	; () banked
  4446  011C0E  21D7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4447  011C10  6EDA               	movwf	fsr2h,c
  4448  011C12  50DF               	movf	indf2,w,c
  4449  011C14  0B7F               	andlw	127
  4450  011C16  0100               	movlb	0	; () banked
  4451  011C18  19D5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4452  011C1A  B4D8               	btfsc	status,2,c
  4453  011C1C  0012               	return	
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4457  011C1E  0E01               	movlw	1
  4458  011C20  0100               	movlb	0	; () banked
  4459  011C22  6FFF               	movwf	_change& (0+255),b
  4460                           
  4461                           ; BSR set to: 0
  4462  011C24  5036               	movf	_lBufferY,w,c
  4463  011C26  0D14               	mullw	20
  4464  011C28  0E46               	movlw	low _lBuffer
  4465  011C2A  0100               	movlb	0	; () banked
  4466  011C2C  6FD5               	movwf	??_Console_PrintChar& (0+255),b
  4467  011C2E  0E02               	movlw	high _lBuffer
  4468  011C30  0100               	movlb	0	; () banked
  4469  011C32  6FD6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4470  011C34  50F3               	movf	prodl,w,c
  4471  011C36  0100               	movlb	0	; () banked
  4472  011C38  27D5               	addwf	??_Console_PrintChar& (0+255),f,b
  4473  011C3A  50F4               	movf	prodh,w,c
  4474  011C3C  0100               	movlb	0	; () banked
  4475  011C3E  23D6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4476  011C40  5037               	movf	_lBufferX,w,c
  4477  011C42  0D01               	mullw	1
  4478  011C44  50F3               	movf	prodl,w,c
  4479  011C46  0100               	movlb	0	; () banked
  4480  011C48  25D5               	addwf	??_Console_PrintChar& (0+255),w,b
  4481  011C4A  6ED9               	movwf	fsr2l,c
  4482  011C4C  50F4               	movf	prodh,w,c
  4483  011C4E  0100               	movlb	0	; () banked
  4484  011C50  21D6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4485  011C52  6EDA               	movwf	fsr2h,c
  4486  011C54  0100               	movlb	0	; () banked
  4487  011C56  51D8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4488  011C58  0980               	iorlw	128
  4489  011C5A  6EDF               	movwf	indf2,c
  4490                           
  4491                           ; BSR set to: 0
  4492                           ;Console.c: 372: };
  4493                           
  4494                           ; BSR set to: 0
  4495                           ;Console.c: 371: return;
  4496                           
  4497                           ; BSR set to: 0
  4498                           
  4499                           ; BSR set to: 0
  4500  011C5C  0012               	return	
  4501  011C5E                     l10756:
  4502  011C5E  0100               	movlb	0	; () banked
  4503  011C60  51D8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4504                           
  4505                           ; Switch size 1, requested type "space"
  4506                           ; Number of cases is 8, Range of values is 7 to 35
  4507                           ; switch strategies available:
  4508                           ; Name         Instructions Cycles
  4509                           ; simple_byte           25    13 (average)
  4510                           ;	Chosen strategy is simple_byte
  4511  011C62  0A07               	xorlw	7	; case 7
  4512  011C64  B4D8               	btfsc	status,2,c
  4513  011C66  D75F               	goto	l10728
  4514  011C68  0A0F               	xorlw	15	; case 8
  4515  011C6A  B4D8               	btfsc	status,2,c
  4516  011C6C  D753               	goto	l10716
  4517  011C6E  0A01               	xorlw	1	; case 9
  4518  011C70  B4D8               	btfsc	status,2,c
  4519  011C72  D756               	goto	l10724
  4520  011C74  0A03               	xorlw	3	; case 10
  4521  011C76  B4D8               	btfsc	status,2,c
  4522  011C78  D74A               	goto	l10712
  4523  011C7A  0A06               	xorlw	6	; case 12
  4524  011C7C  B4D8               	btfsc	status,2,c
  4525  011C7E  D74D               	goto	l10720
  4526  011C80  0A01               	xorlw	1	; case 13
  4527  011C82  B4D8               	btfsc	status,2,c
  4528  011C84  D744               	goto	l10712
  4529  011C86  0A2D               	xorlw	45	; case 32
  4530  011C88  B4D8               	btfsc	status,2,c
  4531  011C8A  D753               	goto	l10736
  4532  011C8C  0A03               	xorlw	3	; case 35
  4533  011C8E  B4D8               	btfsc	status,2,c
  4534  011C90  D74D               	goto	l10732
  4535  011C92  D74F               	goto	l10736
  4536  011C94                     __end_of_Console_PrintChar:
  4537                           	opt stack 0
  4538                           tosu	equ	0xFFF
  4539                           tosh	equ	0xFFE
  4540                           tosl	equ	0xFFD
  4541                           pclath	equ	0xFFA
  4542                           tblptru	equ	0xFF8
  4543                           tblptrh	equ	0xFF7
  4544                           tblptrl	equ	0xFF6
  4545                           tablat	equ	0xFF5
  4546                           prodh	equ	0xFF4
  4547                           prodl	equ	0xFF3
  4548                           postinc0	equ	0xFEE
  4549                           wreg	equ	0xFE8
  4550                           postdec1	equ	0xFE5
  4551                           fsr1h	equ	0xFE2
  4552                           fsr1l	equ	0xFE1
  4553                           indf2	equ	0xFDF
  4554                           postinc2	equ	0xFDE
  4555                           postdec2	equ	0xFDD
  4556                           fsr2h	equ	0xFDA
  4557                           fsr2l	equ	0xFD9
  4558                           status	equ	0xFD8
  4559                           
  4560 ;; *************** function _Console_Tab *****************
  4561 ;; Defined at:
  4562 ;;		line 260 in file "Library/Console.c"
  4563 ;; Parameters:    Size  Location     Type
  4564 ;;		None
  4565 ;; Auto vars:     Size  Location     Type
  4566 ;;  c               1   15[BANK0 ] unsigned char 
  4567 ;;  i               1   14[BANK0 ] unsigned char 
  4568 ;;  t               1   13[BANK0 ] unsigned char 
  4569 ;; Return value:  Size  Location     Type
  4570 ;;                  1    wreg      void 
  4571 ;; Registers used:
  4572 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4573 ;; Tracked objects:
  4574 ;;		On entry : 0/0
  4575 ;;		On exit  : 0/0
  4576 ;;		Unchanged: 0/0
  4577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4579 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4580 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4581 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4582 ;;Total ram usage:        8 bytes
  4583 ;; Hardware stack levels used:    1
  4584 ;; Hardware stack levels required when called:    9
  4585 ;; This function calls:
  4586 ;;		_Console_ClearCursor
  4587 ;;		_Console_IncrementCursor
  4588 ;;		___awdiv
  4589 ;; This function is called by:
  4590 ;;		_Console_PrintChar
  4591 ;; This function uses a non-reentrant model
  4592 ;;
  4593                           
  4594                           	psect	text12
  4595  0129C4                     __ptext12:
  4596                           	opt stack 0
  4597  0129C4                     _Console_Tab:
  4598                           	opt stack 16
  4599                           
  4600                           ;Console.c: 262: UINT8 i = 0;
  4601                           
  4602                           ;incstack = 0
  4603  0129C4  0E00               	movlw	0
  4604  0129C6  0100               	movlb	0	; () banked
  4605  0129C8  6FD3               	movwf	Console_Tab@i& (0+255),b
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4609  0129CA  0EFA               	movlw	250
  4610  0129CC  243F               	addwf	_gCursor,w,c
  4611  0129CE  0100               	movlb	0	; () banked
  4612  0129D0  6FC5               	movwf	___awdiv@dividend& (0+255),b
  4613  0129D2  0EFF               	movlw	255
  4614  0129D4  2040               	addwfc	_gCursor+1,w,c
  4615  0129D6  0100               	movlb	0	; () banked
  4616  0129D8  6FC6               	movwf	(___awdiv@dividend+1)& (0+255),b
  4617  0129DA  0E00               	movlw	0
  4618  0129DC  0100               	movlb	0	; () banked
  4619  0129DE  6FC8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4620  0129E0  0E06               	movlw	6
  4621  0129E2  6FC7               	movwf	___awdiv@divisor& (0+255),b
  4622  0129E4  EC43  F095         	call	___awdiv	;wreg free
  4623  0129E8  0100               	movlb	0	; () banked
  4624  0129EA  51C5               	movf	?___awdiv& (0+255),w,b
  4625  0129EC  0100               	movlb	0	; () banked
  4626  0129EE  6FD4               	movwf	Console_Tab@c& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;Console.c: 264: UINT8 t = c/4;
  4630  0129F0  C0D4  F0C5         	movff	Console_Tab@c,___awdiv@dividend
  4631  0129F4  0100               	movlb	0	; () banked
  4632  0129F6  6BC6               	clrf	(___awdiv@dividend+1)& (0+255),b
  4633  0129F8  0E00               	movlw	0
  4634  0129FA  0100               	movlb	0	; () banked
  4635  0129FC  6FC8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4636  0129FE  0E04               	movlw	4
  4637  012A00  6FC7               	movwf	___awdiv@divisor& (0+255),b
  4638  012A02  EC43  F095         	call	___awdiv	;wreg free
  4639  012A06  0100               	movlb	0	; () banked
  4640  012A08  51C5               	movf	?___awdiv& (0+255),w,b
  4641  012A0A  0100               	movlb	0	; () banked
  4642  012A0C  6FD2               	movwf	Console_Tab@t& (0+255),b
  4643                           
  4644                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4645  012A0E  0E00               	movlw	0
  4646  012A10  0100               	movlb	0	; () banked
  4647  012A12  6FD3               	movwf	Console_Tab@i& (0+255),b
  4648  012A14  D006               	goto	l10548
  4649  012A16                     l10544:
  4650                           
  4651                           ; BSR set to: 0
  4652                           ;Console.c: 266: {
  4653                           ;Console.c: 267: Console_ClearCursor();
  4654  012A16  ECF7  F0A1         	call	_Console_ClearCursor	;wreg free
  4655                           
  4656                           ;Console.c: 268: Console_IncrementCursor();
  4657  012A1A  EC3A  F09E         	call	_Console_IncrementCursor	;wreg free
  4658  012A1E  0100               	movlb	0	; () banked
  4659  012A20  2BD3               	incf	Console_Tab@i& (0+255),f,b
  4660  012A22                     l10548:
  4661                           
  4662                           ; BSR set to: 0
  4663  012A22  0100               	movlb	0	; () banked
  4664  012A24  51D2               	movf	Console_Tab@t& (0+255),w,b
  4665  012A26  0D04               	mullw	4
  4666  012A28  1EF3               	comf	prodl,f,c
  4667  012A2A  1EF4               	comf	prodh,f,c
  4668  012A2C  4AF3               	infsnz	prodl,f,c
  4669  012A2E  2AF4               	incf	prodh,f,c
  4670  012A30  0100               	movlb	0	; () banked
  4671  012A32  51D4               	movf	Console_Tab@c& (0+255),w,b
  4672  012A34  0100               	movlb	0	; () banked
  4673  012A36  6FCD               	movwf	??_Console_Tab& (0+255),b
  4674  012A38  6BCE               	clrf	(??_Console_Tab+1)& (0+255),b
  4675  012A3A  50F3               	movf	prodl,w,c
  4676  012A3C  0100               	movlb	0	; () banked
  4677  012A3E  27CD               	addwf	??_Console_Tab& (0+255),f,b
  4678  012A40  50F4               	movf	prodh,w,c
  4679  012A42  0100               	movlb	0	; () banked
  4680  012A44  23CE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4681  012A46  0100               	movlb	0	; () banked
  4682  012A48  1FCD               	comf	??_Console_Tab& (0+255),f,b
  4683  012A4A  1FCE               	comf	(??_Console_Tab+1)& (0+255),f,b
  4684  012A4C  4BCD               	infsnz	??_Console_Tab& (0+255),f,b
  4685  012A4E  2BCE               	incf	(??_Console_Tab+1)& (0+255),f,b
  4686  012A50  0E04               	movlw	4
  4687  012A52  0100               	movlb	0	; () banked
  4688  012A54  27CD               	addwf	??_Console_Tab& (0+255),f,b
  4689  012A56  0E00               	movlw	0
  4690  012A58  23CE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4691  012A5A  0100               	movlb	0	; () banked
  4692  012A5C  51D3               	movf	Console_Tab@i& (0+255),w,b
  4693  012A5E  0100               	movlb	0	; () banked
  4694  012A60  6FCF               	movwf	(??_Console_Tab+2)& (0+255),b
  4695  012A62  6BD0               	clrf	(??_Console_Tab+3)& (0+255),b
  4696  012A64  0100               	movlb	0	; () banked
  4697  012A66  51CD               	movf	??_Console_Tab& (0+255),w,b
  4698  012A68  0100               	movlb	0	; () banked
  4699  012A6A  5DCF               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4700  012A6C  0100               	movlb	0	; () banked
  4701  012A6E  51D0               	movf	(??_Console_Tab+3)& (0+255),w,b
  4702  012A70  0A80               	xorlw	128
  4703  012A72  0100               	movlb	0	; () banked
  4704  012A74  6FD1               	movwf	(??_Console_Tab+4)& (0+255),b
  4705  012A76  0100               	movlb	0	; () banked
  4706  012A78  51CE               	movf	(??_Console_Tab+1)& (0+255),w,b
  4707  012A7A  0A80               	xorlw	128
  4708  012A7C  0100               	movlb	0	; () banked
  4709  012A7E  59D1               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4710  012A80  B0D8               	btfsc	status,0,c
  4711  012A82  0012               	return	
  4712  012A84  D7C8               	goto	l10544
  4713  012A86                     __end_of_Console_Tab:
  4714                           	opt stack 0
  4715                           tosu	equ	0xFFF
  4716                           tosh	equ	0xFFE
  4717                           tosl	equ	0xFFD
  4718                           pclath	equ	0xFFA
  4719                           tblptru	equ	0xFF8
  4720                           tblptrh	equ	0xFF7
  4721                           tblptrl	equ	0xFF6
  4722                           tablat	equ	0xFF5
  4723                           prodh	equ	0xFF4
  4724                           prodl	equ	0xFF3
  4725                           postinc0	equ	0xFEE
  4726                           wreg	equ	0xFE8
  4727                           postdec1	equ	0xFE5
  4728                           fsr1h	equ	0xFE2
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           fsr2h	equ	0xFDA
  4734                           fsr2l	equ	0xFD9
  4735                           status	equ	0xFD8
  4736                           
  4737 ;; *************** function ___awdiv *****************
  4738 ;; Defined at:
  4739 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\awdiv.c"
  4740 ;; Parameters:    Size  Location     Type
  4741 ;;  dividend        2    0[BANK0 ] int 
  4742 ;;  divisor         2    2[BANK0 ] int 
  4743 ;; Auto vars:     Size  Location     Type
  4744 ;;  quotient        2    6[BANK0 ] int 
  4745 ;;  sign            1    5[BANK0 ] unsigned char 
  4746 ;;  counter         1    4[BANK0 ] unsigned char 
  4747 ;; Return value:  Size  Location     Type
  4748 ;;                  2    0[BANK0 ] int 
  4749 ;; Registers used:
  4750 ;;		wreg, status,2, status,0
  4751 ;; Tracked objects:
  4752 ;;		On entry : 0/0
  4753 ;;		On exit  : 0/0
  4754 ;;		Unchanged: 0/0
  4755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4757 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4759 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4760 ;;Total ram usage:        8 bytes
  4761 ;; Hardware stack levels used:    1
  4762 ;; Hardware stack levels required when called:    7
  4763 ;; This function calls:
  4764 ;;		Nothing
  4765 ;; This function is called by:
  4766 ;;		_Console_Tab
  4767 ;; This function uses a non-reentrant model
  4768 ;;
  4769                           
  4770                           	psect	text13
  4771  012A86                     __ptext13:
  4772                           	opt stack 0
  4773  012A86                     ___awdiv:
  4774                           	opt stack 17
  4775                           
  4776                           ; BSR set to: 0
  4777                           ;incstack = 0
  4778  012A86  0E00               	movlw	0
  4779  012A88  0100               	movlb	0	; () banked
  4780  012A8A  6FCA               	movwf	___awdiv@sign& (0+255),b
  4781                           
  4782                           ; BSR set to: 0
  4783  012A8C  0100               	movlb	0	; () banked
  4784  012A8E  AFC8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4785  012A90  D008               	goto	l10422
  4786                           
  4787                           ; BSR set to: 0
  4788  012A92  0100               	movlb	0	; () banked
  4789  012A94  6DC7               	negf	___awdiv@divisor& (0+255),b
  4790  012A96  1FC8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4791  012A98  B0D8               	btfsc	status,0,c
  4792  012A9A  2BC8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4793                           
  4794                           ; BSR set to: 0
  4795  012A9C  0E01               	movlw	1
  4796  012A9E  0100               	movlb	0	; () banked
  4797  012AA0  6FCA               	movwf	___awdiv@sign& (0+255),b
  4798  012AA2                     l10422:
  4799                           
  4800                           ; BSR set to: 0
  4801  012AA2  0100               	movlb	0	; () banked
  4802  012AA4  AFC6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4803  012AA6  D008               	goto	l10428
  4804                           
  4805                           ; BSR set to: 0
  4806  012AA8  0100               	movlb	0	; () banked
  4807  012AAA  6DC5               	negf	___awdiv@dividend& (0+255),b
  4808  012AAC  1FC6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4809  012AAE  B0D8               	btfsc	status,0,c
  4810  012AB0  2BC6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4811                           
  4812                           ; BSR set to: 0
  4813  012AB2  0E01               	movlw	1
  4814  012AB4  0100               	movlb	0	; () banked
  4815  012AB6  1BCA               	xorwf	___awdiv@sign& (0+255),f,b
  4816  012AB8                     l10428:
  4817                           
  4818                           ; BSR set to: 0
  4819  012AB8  0E00               	movlw	0
  4820  012ABA  0100               	movlb	0	; () banked
  4821  012ABC  6FCC               	movwf	(___awdiv@quotient+1)& (0+255),b
  4822  012ABE  0E00               	movlw	0
  4823  012AC0  6FCB               	movwf	___awdiv@quotient& (0+255),b
  4824                           
  4825                           ; BSR set to: 0
  4826  012AC2  0100               	movlb	0	; () banked
  4827  012AC4  51C7               	movf	___awdiv@divisor& (0+255),w,b
  4828  012AC6  0100               	movlb	0	; () banked
  4829  012AC8  11C8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4830  012ACA  B4D8               	btfsc	status,2,c
  4831  012ACC  D02C               	goto	l10450
  4832                           
  4833                           ; BSR set to: 0
  4834  012ACE  0E01               	movlw	1
  4835  012AD0  0100               	movlb	0	; () banked
  4836  012AD2  6FC9               	movwf	___awdiv@counter& (0+255),b
  4837  012AD4  D006               	goto	l10436
  4838  012AD6                     l10434:
  4839                           
  4840                           ; BSR set to: 0
  4841  012AD6  0100               	movlb	0	; () banked
  4842  012AD8  90D8               	bcf	status,0,c
  4843  012ADA  37C7               	rlcf	___awdiv@divisor& (0+255),f,b
  4844  012ADC  37C8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4845  012ADE  0100               	movlb	0	; () banked
  4846  012AE0  2BC9               	incf	___awdiv@counter& (0+255),f,b
  4847  012AE2                     l10436:
  4848                           
  4849                           ; BSR set to: 0
  4850  012AE2  0100               	movlb	0	; () banked
  4851  012AE4  AFC8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4852  012AE6  D7F7               	goto	l10434
  4853  012AE8                     l10438:
  4854                           
  4855                           ; BSR set to: 0
  4856  012AE8  0100               	movlb	0	; () banked
  4857  012AEA  90D8               	bcf	status,0,c
  4858  012AEC  37CB               	rlcf	___awdiv@quotient& (0+255),f,b
  4859  012AEE  37CC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4860                           
  4861                           ; BSR set to: 0
  4862  012AF0  0100               	movlb	0	; () banked
  4863  012AF2  51C7               	movf	___awdiv@divisor& (0+255),w,b
  4864  012AF4  0100               	movlb	0	; () banked
  4865  012AF6  5DC5               	subwf	___awdiv@dividend& (0+255),w,b
  4866  012AF8  0100               	movlb	0	; () banked
  4867  012AFA  51C8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4868  012AFC  0100               	movlb	0	; () banked
  4869  012AFE  59C6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4870  012B00  A0D8               	btfss	status,0,c
  4871  012B02  D00A               	goto	l10446
  4872                           
  4873                           ; BSR set to: 0
  4874  012B04  0100               	movlb	0	; () banked
  4875  012B06  51C7               	movf	___awdiv@divisor& (0+255),w,b
  4876  012B08  0100               	movlb	0	; () banked
  4877  012B0A  5FC5               	subwf	___awdiv@dividend& (0+255),f,b
  4878  012B0C  0100               	movlb	0	; () banked
  4879  012B0E  51C8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4880  012B10  0100               	movlb	0	; () banked
  4881  012B12  5BC6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4882                           
  4883                           ; BSR set to: 0
  4884  012B14  0100               	movlb	0	; () banked
  4885  012B16  81CB               	bsf	___awdiv@quotient& (0+255),0,b
  4886  012B18                     l10446:
  4887                           
  4888                           ; BSR set to: 0
  4889  012B18  0100               	movlb	0	; () banked
  4890  012B1A  90D8               	bcf	status,0,c
  4891  012B1C  33C8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4892  012B1E  33C7               	rrcf	___awdiv@divisor& (0+255),f,b
  4893                           
  4894                           ; BSR set to: 0
  4895  012B20  0100               	movlb	0	; () banked
  4896  012B22  2FC9               	decfsz	___awdiv@counter& (0+255),f,b
  4897  012B24  D7E1               	goto	l10438
  4898  012B26                     l10450:
  4899                           
  4900                           ; BSR set to: 0
  4901  012B26  0100               	movlb	0	; () banked
  4902  012B28  51CA               	movf	___awdiv@sign& (0+255),w,b
  4903  012B2A  0100               	movlb	0	; () banked
  4904  012B2C  B4D8               	btfsc	status,2,c
  4905  012B2E  D005               	goto	l10454
  4906                           
  4907                           ; BSR set to: 0
  4908  012B30  0100               	movlb	0	; () banked
  4909  012B32  6DCB               	negf	___awdiv@quotient& (0+255),b
  4910  012B34  1FCC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4911  012B36  B0D8               	btfsc	status,0,c
  4912  012B38  2BCC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4913  012B3A                     l10454:
  4914                           
  4915                           ; BSR set to: 0
  4916  012B3A  C0CB  F0C5         	movff	___awdiv@quotient,?___awdiv
  4917  012B3E  C0CC  F0C6         	movff	___awdiv@quotient+1,?___awdiv+1
  4918  012B42  0012               	return	
  4919  012B44                     __end_of___awdiv:
  4920                           	opt stack 0
  4921                           tosu	equ	0xFFF
  4922                           tosh	equ	0xFFE
  4923                           tosl	equ	0xFFD
  4924                           pclath	equ	0xFFA
  4925                           tblptru	equ	0xFF8
  4926                           tblptrh	equ	0xFF7
  4927                           tblptrl	equ	0xFF6
  4928                           tablat	equ	0xFF5
  4929                           prodh	equ	0xFF4
  4930                           prodl	equ	0xFF3
  4931                           postinc0	equ	0xFEE
  4932                           wreg	equ	0xFE8
  4933                           postdec1	equ	0xFE5
  4934                           fsr1h	equ	0xFE2
  4935                           fsr1l	equ	0xFE1
  4936                           indf2	equ	0xFDF
  4937                           postinc2	equ	0xFDE
  4938                           postdec2	equ	0xFDD
  4939                           fsr2h	equ	0xFDA
  4940                           fsr2l	equ	0xFD9
  4941                           status	equ	0xFD8
  4942                           
  4943 ;; *************** function _Console_IncrementCursor *****************
  4944 ;; Defined at:
  4945 ;;		line 243 in file "Library/Console.c"
  4946 ;; Parameters:    Size  Location     Type
  4947 ;;		None
  4948 ;; Auto vars:     Size  Location     Type
  4949 ;;		None
  4950 ;; Return value:  Size  Location     Type
  4951 ;;                  1    wreg      unsigned char 
  4952 ;; Registers used:
  4953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4954 ;; Tracked objects:
  4955 ;;		On entry : 0/0
  4956 ;;		On exit  : 0/0
  4957 ;;		Unchanged: 0/0
  4958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4961 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4962 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4963 ;;Total ram usage:        2 bytes
  4964 ;; Hardware stack levels used:    1
  4965 ;; Hardware stack levels required when called:    8
  4966 ;; This function calls:
  4967 ;;		_Console_FormFeed
  4968 ;;		_Console_NewLine
  4969 ;; This function is called by:
  4970 ;;		_Console_Tab
  4971 ;;		_Console_PrintChar
  4972 ;; This function uses a non-reentrant model
  4973 ;;
  4974                           
  4975                           	psect	text14
  4976  013C74                     __ptext14:
  4977                           	opt stack 0
  4978  013C74                     _Console_IncrementCursor:
  4979                           	opt stack 16
  4980                           
  4981                           ;Console.c: 246: lBufferX += 1;
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;incstack = 0
  4985  013C74  2A37               	incf	_lBufferX,f,c
  4986                           
  4987                           ;Console.c: 248: gCursor.x += 6;
  4988  013C76  0E06               	movlw	6
  4989  013C78  263F               	addwf	_gCursor,f,c
  4990  013C7A  0E00               	movlw	0
  4991  013C7C  2240               	addwfc	_gCursor+1,f,c
  4992                           
  4993                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  4994  013C7E  0E06               	movlw	6
  4995  013C80  243F               	addwf	_gCursor,w,c
  4996  013C82  0100               	movlb	0	; () banked
  4997  013C84  6FC9               	movwf	??_Console_IncrementCursor& (0+255),b
  4998  013C86  0E00               	movlw	0
  4999  013C88  2040               	addwfc	_gCursor+1,w,c
  5000  013C8A  0100               	movlb	0	; () banked
  5001  013C8C  6FCA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5002  013C8E  0100               	movlb	0	; () banked
  5003  013C90  BFCA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5004  013C92  D009               	goto	l10372
  5005  013C94  0100               	movlb	0	; () banked
  5006  013C96  51CA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5007  013C98  E104               	bnz	u6810
  5008  013C9A  0E80               	movlw	128
  5009  013C9C  0100               	movlb	0	; () banked
  5010  013C9E  5DC9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5011  013CA0  B0D8               	btfsc	status,0,c
  5012  013CA2                     u6810:
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;Console.c: 250: Console_NewLine();
  5016  013CA2  ECEB  F099         	call	_Console_NewLine	;wreg free
  5017  013CA6                     l10372:
  5018                           
  5019                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5020  013CA6  0E08               	movlw	8
  5021  013CA8  2441               	addwf	_gCursor+2,w,c
  5022  013CAA  0100               	movlb	0	; () banked
  5023  013CAC  6FC9               	movwf	??_Console_IncrementCursor& (0+255),b
  5024  013CAE  0E00               	movlw	0
  5025  013CB0  2042               	addwfc	_gCursor+3,w,c
  5026  013CB2  0100               	movlb	0	; () banked
  5027  013CB4  6FCA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5028  013CB6  0100               	movlb	0	; () banked
  5029  013CB8  BFCA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5030  013CBA  D00C               	goto	l10380
  5031  013CBC  0100               	movlb	0	; () banked
  5032  013CBE  51CA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5033  013CC0  E105               	bnz	u6820
  5034  013CC2  0E80               	movlw	128
  5035  013CC4  0100               	movlb	0	; () banked
  5036  013CC6  5DC9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5037  013CC8  A0D8               	btfss	status,0,c
  5038  013CCA  D004               	goto	l10380
  5039  013CCC                     u6820:
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;Console.c: 252: {
  5043                           ;Console.c: 253: Console_FormFeed();
  5044  013CCC  ECC3  F09A         	call	_Console_FormFeed	;wreg free
  5045                           
  5046                           ;Console.c: 254: return 1;
  5047  013CD0  0E01               	movlw	1
  5048  013CD2  0012               	return	
  5049  013CD4                     l10380:
  5050                           
  5051                           ;Console.c: 255: }
  5052                           ;Console.c: 257: return 0;
  5053  013CD4  0E00               	movlw	0
  5054  013CD6  0012               	return	
  5055  013CD8                     __end_of_Console_IncrementCursor:
  5056                           	opt stack 0
  5057                           tosu	equ	0xFFF
  5058                           tosh	equ	0xFFE
  5059                           tosl	equ	0xFFD
  5060                           pclath	equ	0xFFA
  5061                           tblptru	equ	0xFF8
  5062                           tblptrh	equ	0xFF7
  5063                           tblptrl	equ	0xFF6
  5064                           tablat	equ	0xFF5
  5065                           prodh	equ	0xFF4
  5066                           prodl	equ	0xFF3
  5067                           postinc0	equ	0xFEE
  5068                           wreg	equ	0xFE8
  5069                           postdec1	equ	0xFE5
  5070                           fsr1h	equ	0xFE2
  5071                           fsr1l	equ	0xFE1
  5072                           indf2	equ	0xFDF
  5073                           postinc2	equ	0xFDE
  5074                           postdec2	equ	0xFDD
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           
  5079 ;; *************** function _Console_NewLine *****************
  5080 ;; Defined at:
  5081 ;;		line 175 in file "Library/Console.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      void 
  5088 ;; Registers used:
  5089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;Total ram usage:        2 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    7
  5102 ;; This function calls:
  5103 ;;		Nothing
  5104 ;; This function is called by:
  5105 ;;		_Console_IncrementCursor
  5106 ;;		_Console_PrintChar
  5107 ;; This function uses a non-reentrant model
  5108 ;;
  5109                           
  5110                           	psect	text15
  5111  0133D6                     __ptext15:
  5112                           	opt stack 0
  5113  0133D6                     _Console_NewLine:
  5114                           	opt stack 16
  5115                           
  5116                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5117                           
  5118                           ;incstack = 0
  5119  0133D6  D039               	goto	l10278
  5120  0133D8                     l10270:
  5121                           
  5122                           ;Console.c: 179: {
  5123                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5124  0133D8  5036               	movf	_lBufferY,w,c
  5125  0133DA  0D14               	mullw	20
  5126  0133DC  0E46               	movlw	low _lBuffer
  5127  0133DE  0100               	movlb	0	; () banked
  5128  0133E0  6FC5               	movwf	??_Console_NewLine& (0+255),b
  5129  0133E2  0E02               	movlw	high _lBuffer
  5130  0133E4  0100               	movlb	0	; () banked
  5131  0133E6  6FC6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5132  0133E8  50F3               	movf	prodl,w,c
  5133  0133EA  0100               	movlb	0	; () banked
  5134  0133EC  27C5               	addwf	??_Console_NewLine& (0+255),f,b
  5135  0133EE  50F4               	movf	prodh,w,c
  5136  0133F0  0100               	movlb	0	; () banked
  5137  0133F2  23C6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5138  0133F4  5037               	movf	_lBufferX,w,c
  5139  0133F6  0D01               	mullw	1
  5140  0133F8  50F3               	movf	prodl,w,c
  5141  0133FA  0100               	movlb	0	; () banked
  5142  0133FC  25C5               	addwf	??_Console_NewLine& (0+255),w,b
  5143  0133FE  6ED9               	movwf	fsr2l,c
  5144  013400  50F4               	movf	prodh,w,c
  5145  013402  0100               	movlb	0	; () banked
  5146  013404  21C6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5147  013406  6EDA               	movwf	fsr2h,c
  5148  013408  50DF               	movf	indf2,w,c
  5149  01340A  B4D8               	btfsc	status,2,c
  5150  01340C  D01D               	goto	l10276
  5151                           
  5152                           ; BSR set to: 0
  5153                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5154  01340E  0E01               	movlw	1
  5155  013410  0100               	movlb	0	; () banked
  5156  013412  6FFF               	movwf	_change& (0+255),b
  5157                           
  5158                           ; BSR set to: 0
  5159  013414  5036               	movf	_lBufferY,w,c
  5160  013416  0D14               	mullw	20
  5161  013418  0E46               	movlw	low _lBuffer
  5162  01341A  0100               	movlb	0	; () banked
  5163  01341C  6FC5               	movwf	??_Console_NewLine& (0+255),b
  5164  01341E  0E02               	movlw	high _lBuffer
  5165  013420  0100               	movlb	0	; () banked
  5166  013422  6FC6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5167  013424  50F3               	movf	prodl,w,c
  5168  013426  0100               	movlb	0	; () banked
  5169  013428  27C5               	addwf	??_Console_NewLine& (0+255),f,b
  5170  01342A  50F4               	movf	prodh,w,c
  5171  01342C  0100               	movlb	0	; () banked
  5172  01342E  23C6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5173  013430  5037               	movf	_lBufferX,w,c
  5174  013432  0D01               	mullw	1
  5175  013434  50F3               	movf	prodl,w,c
  5176  013436  0100               	movlb	0	; () banked
  5177  013438  25C5               	addwf	??_Console_NewLine& (0+255),w,b
  5178  01343A  6ED9               	movwf	fsr2l,c
  5179  01343C  50F4               	movf	prodh,w,c
  5180  01343E  0100               	movlb	0	; () banked
  5181  013440  21C6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5182  013442  6EDA               	movwf	fsr2h,c
  5183  013444  0E80               	movlw	128
  5184  013446  6EDF               	movwf	indf2,c
  5185  013448                     l10276:
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;Console.c: 182: lBufferX ++;
  5189  013448  2A37               	incf	_lBufferX,f,c
  5190  01344A                     l10278:
  5191  01344A  0E13               	movlw	19
  5192  01344C  6437               	cpfsgt	_lBufferX,c
  5193  01344E  D7C4               	goto	l10270
  5194                           
  5195                           ;Console.c: 183: }
  5196                           ;Console.c: 185: lBufferX = 0;
  5197  013450  0E00               	movlw	0
  5198  013452  6E37               	movwf	_lBufferX,c
  5199                           
  5200                           ;Console.c: 186: lBufferY ++;
  5201  013454  2A36               	incf	_lBufferY,f,c
  5202                           
  5203                           ;Console.c: 188: gCursor.y += 8;
  5204  013456  0E08               	movlw	8
  5205  013458  2641               	addwf	_gCursor+2,f,c
  5206  01345A  0E00               	movlw	0
  5207  01345C  2242               	addwfc	_gCursor+3,f,c
  5208                           
  5209                           ;Console.c: 189: gCursor.x = 6;
  5210  01345E  0E00               	movlw	0
  5211  013460  6E40               	movwf	_gCursor+1,c
  5212  013462  0E06               	movlw	6
  5213  013464  6E3F               	movwf	_gCursor,c
  5214  013466  0012               	return		;funcret
  5215  013468                     __end_of_Console_NewLine:
  5216                           	opt stack 0
  5217                           tosu	equ	0xFFF
  5218                           tosh	equ	0xFFE
  5219                           tosl	equ	0xFFD
  5220                           pclath	equ	0xFFA
  5221                           tblptru	equ	0xFF8
  5222                           tblptrh	equ	0xFF7
  5223                           tblptrl	equ	0xFF6
  5224                           tablat	equ	0xFF5
  5225                           prodh	equ	0xFF4
  5226                           prodl	equ	0xFF3
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           fsr1h	equ	0xFE2
  5231                           fsr1l	equ	0xFE1
  5232                           indf2	equ	0xFDF
  5233                           postinc2	equ	0xFDE
  5234                           postdec2	equ	0xFDD
  5235                           fsr2h	equ	0xFDA
  5236                           fsr2l	equ	0xFD9
  5237                           status	equ	0xFD8
  5238                           
  5239 ;; *************** function _Console_FormFeed *****************
  5240 ;; Defined at:
  5241 ;;		line 192 in file "Library/Console.c"
  5242 ;; Parameters:    Size  Location     Type
  5243 ;;		None
  5244 ;; Auto vars:     Size  Location     Type
  5245 ;;  y               1    3[BANK0 ] unsigned char 
  5246 ;;  x               1    2[BANK0 ] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;                  1    wreg      void 
  5249 ;; Registers used:
  5250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5257 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;Total ram usage:        4 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:    7
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_Console_IncrementCursor
  5267 ;;		_Console_PrintChar
  5268 ;; This function uses a non-reentrant model
  5269 ;;
  5270                           
  5271                           	psect	text16
  5272  013586                     __ptext16:
  5273                           	opt stack 0
  5274  013586                     _Console_FormFeed:
  5275                           	opt stack 16
  5276                           
  5277                           ;Console.c: 195: lBufferX = 0;
  5278                           
  5279                           ;incstack = 0
  5280  013586  0E00               	movlw	0
  5281  013588  6E37               	movwf	_lBufferX,c
  5282                           
  5283                           ;Console.c: 196: lBufferY = 0;
  5284  01358A  0E00               	movlw	0
  5285  01358C  6E36               	movwf	_lBufferY,c
  5286                           
  5287                           ;Console.c: 197: UINT8 x, y;
  5288                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5289  01358E  0E00               	movlw	0
  5290  013590  0100               	movlb	0	; () banked
  5291  013592  6FC8               	movwf	Console_FormFeed@y& (0+255),b
  5292  013594                     l10290:
  5293                           
  5294                           ; BSR set to: 0
  5295  013594  0E0E               	movlw	14
  5296  013596  0100               	movlb	0	; () banked
  5297  013598  65C8               	cpfsgt	Console_FormFeed@y& (0+255),b
  5298  01359A  D001               	goto	l10294
  5299  01359C  D02D               	goto	l10312
  5300  01359E                     l10294:
  5301                           
  5302                           ; BSR set to: 0
  5303                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5304  01359E  0E00               	movlw	0
  5305  0135A0  0100               	movlb	0	; () banked
  5306  0135A2  6FC7               	movwf	Console_FormFeed@x& (0+255),b
  5307  0135A4                     l10296:
  5308                           
  5309                           ; BSR set to: 0
  5310  0135A4  0E13               	movlw	19
  5311  0135A6  0100               	movlb	0	; () banked
  5312  0135A8  65C7               	cpfsgt	Console_FormFeed@x& (0+255),b
  5313  0135AA  D001               	goto	l10300
  5314  0135AC  D022               	goto	l10308
  5315  0135AE                     l10300:
  5316                           
  5317                           ; BSR set to: 0
  5318                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5319  0135AE  0E01               	movlw	1
  5320  0135B0  0100               	movlb	0	; () banked
  5321  0135B2  6FFF               	movwf	_change& (0+255),b
  5322                           
  5323                           ; BSR set to: 0
  5324  0135B4  0100               	movlb	0	; () banked
  5325  0135B6  51C8               	movf	Console_FormFeed@y& (0+255),w,b
  5326  0135B8  0D14               	mullw	20
  5327  0135BA  0E46               	movlw	low _lBuffer
  5328  0135BC  0100               	movlb	0	; () banked
  5329  0135BE  6FC5               	movwf	??_Console_FormFeed& (0+255),b
  5330  0135C0  0E02               	movlw	high _lBuffer
  5331  0135C2  0100               	movlb	0	; () banked
  5332  0135C4  6FC6               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5333  0135C6  50F3               	movf	prodl,w,c
  5334  0135C8  0100               	movlb	0	; () banked
  5335  0135CA  27C5               	addwf	??_Console_FormFeed& (0+255),f,b
  5336  0135CC  50F4               	movf	prodh,w,c
  5337  0135CE  0100               	movlb	0	; () banked
  5338  0135D0  23C6               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5339  0135D2  0100               	movlb	0	; () banked
  5340  0135D4  51C7               	movf	Console_FormFeed@x& (0+255),w,b
  5341  0135D6  0D01               	mullw	1
  5342  0135D8  50F3               	movf	prodl,w,c
  5343  0135DA  0100               	movlb	0	; () banked
  5344  0135DC  25C5               	addwf	??_Console_FormFeed& (0+255),w,b
  5345  0135DE  6ED9               	movwf	fsr2l,c
  5346  0135E0  50F4               	movf	prodh,w,c
  5347  0135E2  0100               	movlb	0	; () banked
  5348  0135E4  21C6               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5349  0135E6  6EDA               	movwf	fsr2h,c
  5350  0135E8  0E80               	movlw	128
  5351  0135EA  6EDF               	movwf	indf2,c
  5352                           
  5353                           ; BSR set to: 0
  5354  0135EC  0100               	movlb	0	; () banked
  5355  0135EE  2BC7               	incf	Console_FormFeed@x& (0+255),f,b
  5356  0135F0  D7D9               	goto	l10296
  5357  0135F2                     l10308:
  5358                           
  5359                           ; BSR set to: 0
  5360  0135F2  0100               	movlb	0	; () banked
  5361  0135F4  2BC8               	incf	Console_FormFeed@y& (0+255),f,b
  5362  0135F6  D7CE               	goto	l10290
  5363  0135F8                     l10312:
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;Console.c: 204: clearall = 1;
  5367  0135F8  0E01               	movlw	1
  5368  0135FA  0100               	movlb	0	; () banked
  5369  0135FC  6F7D               	movwf	_clearall& (0+255),b
  5370                           
  5371                           ;Console.c: 205: gCursor.x = 6;
  5372  0135FE  0E00               	movlw	0
  5373  013600  6E40               	movwf	_gCursor+1,c
  5374  013602  0E06               	movlw	6
  5375  013604  6E3F               	movwf	_gCursor,c
  5376                           
  5377                           ;Console.c: 206: gCursor.y = 6;
  5378  013606  0E00               	movlw	0
  5379  013608  6E42               	movwf	_gCursor+3,c
  5380  01360A  0E06               	movlw	6
  5381  01360C  6E41               	movwf	_gCursor+2,c
  5382                           
  5383                           ; BSR set to: 0
  5384  01360E  0012               	return		;funcret
  5385  013610                     __end_of_Console_FormFeed:
  5386                           	opt stack 0
  5387                           tosu	equ	0xFFF
  5388                           tosh	equ	0xFFE
  5389                           tosl	equ	0xFFD
  5390                           pclath	equ	0xFFA
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           postinc0	equ	0xFEE
  5398                           wreg	equ	0xFE8
  5399                           postdec1	equ	0xFE5
  5400                           fsr1h	equ	0xFE2
  5401                           fsr1l	equ	0xFE1
  5402                           indf2	equ	0xFDF
  5403                           postinc2	equ	0xFDE
  5404                           postdec2	equ	0xFDD
  5405                           fsr2h	equ	0xFDA
  5406                           fsr2l	equ	0xFD9
  5407                           status	equ	0xFD8
  5408                           
  5409 ;; *************** function _Console_ResetCursor *****************
  5410 ;; Defined at:
  5411 ;;		line 297 in file "Library/Console.c"
  5412 ;; Parameters:    Size  Location     Type
  5413 ;;		None
  5414 ;; Auto vars:     Size  Location     Type
  5415 ;;		None
  5416 ;; Return value:  Size  Location     Type
  5417 ;;                  1    wreg      void 
  5418 ;; Registers used:
  5419 ;;		wreg, status,2
  5420 ;; Tracked objects:
  5421 ;;		On entry : 0/0
  5422 ;;		On exit  : 0/0
  5423 ;;		Unchanged: 0/0
  5424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;Total ram usage:        0 bytes
  5430 ;; Hardware stack levels used:    1
  5431 ;; Hardware stack levels required when called:    7
  5432 ;; This function calls:
  5433 ;;		Nothing
  5434 ;; This function is called by:
  5435 ;;		_Console_PrintChar
  5436 ;; This function uses a non-reentrant model
  5437 ;;
  5438                           
  5439                           	psect	text17
  5440  01494E                     __ptext17:
  5441                           	opt stack 0
  5442  01494E                     _Console_ResetCursor:
  5443                           	opt stack 18
  5444                           
  5445                           ;Console.c: 299: gCursor.x = 6;
  5446                           
  5447                           ; BSR set to: 0
  5448                           ;incstack = 0
  5449  01494E  0E00               	movlw	0
  5450  014950  6E40               	movwf	_gCursor+1,c
  5451  014952  0E06               	movlw	6
  5452  014954  6E3F               	movwf	_gCursor,c
  5453                           
  5454                           ;Console.c: 300: gCursor.y = 6;
  5455  014956  0E00               	movlw	0
  5456  014958  6E42               	movwf	_gCursor+3,c
  5457  01495A  0E06               	movlw	6
  5458  01495C  6E41               	movwf	_gCursor+2,c
  5459                           
  5460                           ;Console.c: 303: lBufferX = 0;
  5461  01495E  0E00               	movlw	0
  5462  014960  6E37               	movwf	_lBufferX,c
  5463                           
  5464                           ;Console.c: 304: lBufferY = 0;
  5465  014962  0E00               	movlw	0
  5466  014964  6E36               	movwf	_lBufferY,c
  5467  014966  0012               	return		;funcret
  5468  014968                     __end_of_Console_ResetCursor:
  5469                           	opt stack 0
  5470                           tosu	equ	0xFFF
  5471                           tosh	equ	0xFFE
  5472                           tosl	equ	0xFFD
  5473                           pclath	equ	0xFFA
  5474                           tblptru	equ	0xFF8
  5475                           tblptrh	equ	0xFF7
  5476                           tblptrl	equ	0xFF6
  5477                           tablat	equ	0xFF5
  5478                           prodh	equ	0xFF4
  5479                           prodl	equ	0xFF3
  5480                           postinc0	equ	0xFEE
  5481                           wreg	equ	0xFE8
  5482                           postdec1	equ	0xFE5
  5483                           fsr1h	equ	0xFE2
  5484                           fsr1l	equ	0xFE1
  5485                           indf2	equ	0xFDF
  5486                           postinc2	equ	0xFDE
  5487                           postdec2	equ	0xFDD
  5488                           fsr2h	equ	0xFDA
  5489                           fsr2l	equ	0xFD9
  5490                           status	equ	0xFD8
  5491                           
  5492 ;; *************** function _Console_Backspace *****************
  5493 ;; Defined at:
  5494 ;;		line 209 in file "Library/Console.c"
  5495 ;; Parameters:    Size  Location     Type
  5496 ;;		None
  5497 ;; Auto vars:     Size  Location     Type
  5498 ;;		None
  5499 ;; Return value:  Size  Location     Type
  5500 ;;                  1    wreg      void 
  5501 ;; Registers used:
  5502 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5503 ;; Tracked objects:
  5504 ;;		On entry : 0/0
  5505 ;;		On exit  : 0/0
  5506 ;;		Unchanged: 0/0
  5507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5511 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5512 ;;Total ram usage:        0 bytes
  5513 ;; Hardware stack levels used:    1
  5514 ;; Hardware stack levels required when called:    8
  5515 ;; This function calls:
  5516 ;;		_Console_ClearCursor
  5517 ;; This function is called by:
  5518 ;;		_Console_PrintChar
  5519 ;; This function uses a non-reentrant model
  5520 ;;
  5521                           
  5522                           	psect	text18
  5523  0140AC                     __ptext18:
  5524                           	opt stack 0
  5525  0140AC                     _Console_Backspace:
  5526                           	opt stack 17
  5527                           
  5528                           ;Console.c: 211: if (lBufferX > 0)
  5529                           
  5530                           ;incstack = 0
  5531  0140AC  5037               	movf	_lBufferX,w,c
  5532  0140AE  B4D8               	btfsc	status,2,c
  5533  0140B0  D006               	goto	l10524
  5534                           
  5535                           ;Console.c: 212: {
  5536                           ;Console.c: 213: gCursor.x -= 6;
  5537  0140B2  0EFA               	movlw	250
  5538  0140B4  263F               	addwf	_gCursor,f,c
  5539  0140B6  0EFF               	movlw	255
  5540  0140B8  2240               	addwfc	_gCursor+1,f,c
  5541                           
  5542                           ;Console.c: 216: lBufferX --;
  5543  0140BA  0637               	decf	_lBufferX,f,c
  5544                           
  5545                           ;Console.c: 218: }
  5546  0140BC  D01B               	goto	l10536
  5547  0140BE                     l10524:
  5548                           
  5549                           ;Console.c: 219: else if (lBufferY > 0)
  5550  0140BE  5036               	movf	_lBufferY,w,c
  5551  0140C0  B4D8               	btfsc	status,2,c
  5552  0140C2  D00C               	goto	l10534
  5553                           
  5554                           ;Console.c: 220: {
  5555                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5556  0140C4  0E00               	movlw	0
  5557  0140C6  6E40               	movwf	_gCursor+1,c
  5558  0140C8  0E72               	movlw	114
  5559  0140CA  6E3F               	movwf	_gCursor,c
  5560                           
  5561                           ;Console.c: 222: gCursor.y -= 8;
  5562  0140CC  0EF8               	movlw	248
  5563  0140CE  2641               	addwf	_gCursor+2,f,c
  5564  0140D0  0EFF               	movlw	255
  5565  0140D2  2242               	addwfc	_gCursor+3,f,c
  5566                           
  5567                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5568  0140D4  0E13               	movlw	19
  5569  0140D6  6E37               	movwf	_lBufferX,c
  5570                           
  5571                           ;Console.c: 226: lBufferY --;
  5572  0140D8  0636               	decf	_lBufferY,f,c
  5573                           
  5574                           ;Console.c: 228: }
  5575  0140DA  D00C               	goto	l10536
  5576  0140DC                     l10534:
  5577                           
  5578                           ;Console.c: 229: else
  5579                           ;Console.c: 230: {
  5580                           ;Console.c: 231: gCursor.x = 6;
  5581  0140DC  0E00               	movlw	0
  5582  0140DE  6E40               	movwf	_gCursor+1,c
  5583  0140E0  0E06               	movlw	6
  5584  0140E2  6E3F               	movwf	_gCursor,c
  5585                           
  5586                           ;Console.c: 232: gCursor.y = 6;
  5587  0140E4  0E00               	movlw	0
  5588  0140E6  6E42               	movwf	_gCursor+3,c
  5589  0140E8  0E06               	movlw	6
  5590  0140EA  6E41               	movwf	_gCursor+2,c
  5591                           
  5592                           ;Console.c: 235: lBufferX = 0;
  5593  0140EC  0E00               	movlw	0
  5594  0140EE  6E37               	movwf	_lBufferX,c
  5595                           
  5596                           ;Console.c: 236: lBufferY = 0;
  5597  0140F0  0E00               	movlw	0
  5598  0140F2  6E36               	movwf	_lBufferY,c
  5599  0140F4                     l10536:
  5600                           
  5601                           ;Console.c: 238: }
  5602                           ;Console.c: 240: Console_ClearCursor();
  5603  0140F4  ECF7  F0A1         	call	_Console_ClearCursor	;wreg free
  5604  0140F8  0012               	return		;funcret
  5605  0140FA                     __end_of_Console_Backspace:
  5606                           	opt stack 0
  5607                           tosu	equ	0xFFF
  5608                           tosh	equ	0xFFE
  5609                           tosl	equ	0xFFD
  5610                           pclath	equ	0xFFA
  5611                           tblptru	equ	0xFF8
  5612                           tblptrh	equ	0xFF7
  5613                           tblptrl	equ	0xFF6
  5614                           tablat	equ	0xFF5
  5615                           prodh	equ	0xFF4
  5616                           prodl	equ	0xFF3
  5617                           postinc0	equ	0xFEE
  5618                           wreg	equ	0xFE8
  5619                           postdec1	equ	0xFE5
  5620                           fsr1h	equ	0xFE2
  5621                           fsr1l	equ	0xFE1
  5622                           indf2	equ	0xFDF
  5623                           postinc2	equ	0xFDE
  5624                           postdec2	equ	0xFDD
  5625                           fsr2h	equ	0xFDA
  5626                           fsr2l	equ	0xFD9
  5627                           status	equ	0xFD8
  5628                           
  5629 ;; *************** function _Console_ClearCursor *****************
  5630 ;; Defined at:
  5631 ;;		line 308 in file "Library/Console.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;		None
  5634 ;; Auto vars:     Size  Location     Type
  5635 ;;		None
  5636 ;; Return value:  Size  Location     Type
  5637 ;;                  1    wreg      void 
  5638 ;; Registers used:
  5639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5640 ;; Tracked objects:
  5641 ;;		On entry : 0/0
  5642 ;;		On exit  : 0/0
  5643 ;;		Unchanged: 0/0
  5644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5647 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5648 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;Total ram usage:        2 bytes
  5650 ;; Hardware stack levels used:    1
  5651 ;; Hardware stack levels required when called:    7
  5652 ;; This function calls:
  5653 ;;		Nothing
  5654 ;; This function is called by:
  5655 ;;		_Console_Backspace
  5656 ;;		_Console_Tab
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text19
  5661  0143EE                     __ptext19:
  5662                           	opt stack 0
  5663  0143EE                     _Console_ClearCursor:
  5664                           	opt stack 17
  5665                           
  5666                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5667                           
  5668                           ;incstack = 0
  5669  0143EE  0E01               	movlw	1
  5670  0143F0  0100               	movlb	0	; () banked
  5671  0143F2  6FFF               	movwf	_change& (0+255),b
  5672                           
  5673                           ; BSR set to: 0
  5674  0143F4  5036               	movf	_lBufferY,w,c
  5675  0143F6  0D14               	mullw	20
  5676  0143F8  0E46               	movlw	low _lBuffer
  5677  0143FA  0100               	movlb	0	; () banked
  5678  0143FC  6FC5               	movwf	??_Console_ClearCursor& (0+255),b
  5679  0143FE  0E02               	movlw	high _lBuffer
  5680  014400  0100               	movlb	0	; () banked
  5681  014402  6FC6               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5682  014404  50F3               	movf	prodl,w,c
  5683  014406  0100               	movlb	0	; () banked
  5684  014408  27C5               	addwf	??_Console_ClearCursor& (0+255),f,b
  5685  01440A  50F4               	movf	prodh,w,c
  5686  01440C  0100               	movlb	0	; () banked
  5687  01440E  23C6               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5688  014410  5037               	movf	_lBufferX,w,c
  5689  014412  0D01               	mullw	1
  5690  014414  50F3               	movf	prodl,w,c
  5691  014416  0100               	movlb	0	; () banked
  5692  014418  25C5               	addwf	??_Console_ClearCursor& (0+255),w,b
  5693  01441A  6ED9               	movwf	fsr2l,c
  5694  01441C  50F4               	movf	prodh,w,c
  5695  01441E  0100               	movlb	0	; () banked
  5696  014420  21C6               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5697  014422  6EDA               	movwf	fsr2h,c
  5698  014424  0E80               	movlw	128
  5699  014426  6EDF               	movwf	indf2,c
  5700                           
  5701                           ; BSR set to: 0
  5702  014428  0012               	return		;funcret
  5703  01442A                     __end_of_Console_ClearCursor:
  5704                           	opt stack 0
  5705                           tosu	equ	0xFFF
  5706                           tosh	equ	0xFFE
  5707                           tosl	equ	0xFFD
  5708                           pclath	equ	0xFFA
  5709                           tblptru	equ	0xFF8
  5710                           tblptrh	equ	0xFF7
  5711                           tblptrl	equ	0xFF6
  5712                           tablat	equ	0xFF5
  5713                           prodh	equ	0xFF4
  5714                           prodl	equ	0xFF3
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           postdec1	equ	0xFE5
  5718                           fsr1h	equ	0xFE2
  5719                           fsr1l	equ	0xFE1
  5720                           indf2	equ	0xFDF
  5721                           postinc2	equ	0xFDE
  5722                           postdec2	equ	0xFDD
  5723                           fsr2h	equ	0xFDA
  5724                           fsr2l	equ	0xFD9
  5725                           status	equ	0xFD8
  5726                           
  5727 ;; *************** function ___llmod *****************
  5728 ;; Defined at:
  5729 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\llmod.c"
  5730 ;; Parameters:    Size  Location     Type
  5731 ;;  dividend        4   13[BANK0 ] unsigned long 
  5732 ;;  divisor         4   17[BANK0 ] unsigned long 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  counter         1   21[BANK0 ] unsigned char 
  5735 ;; Return value:  Size  Location     Type
  5736 ;;                  4   13[BANK0 ] unsigned long 
  5737 ;; Registers used:
  5738 ;;		wreg, status,2, status,0
  5739 ;; Tracked objects:
  5740 ;;		On entry : 0/0
  5741 ;;		On exit  : 0/0
  5742 ;;		Unchanged: 0/0
  5743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5744 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5745 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5747 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5748 ;;Total ram usage:        9 bytes
  5749 ;; Hardware stack levels used:    1
  5750 ;; Hardware stack levels required when called:    7
  5751 ;; This function calls:
  5752 ;;		Nothing
  5753 ;; This function is called by:
  5754 ;;		_printf
  5755 ;;		_rand_between
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           	psect	text20
  5760  0132A4                     __ptext20:
  5761                           	opt stack 0
  5762  0132A4                     ___llmod:
  5763                           	opt stack 20
  5764                           
  5765                           ; BSR set to: 0
  5766                           ;incstack = 0
  5767  0132A4  0100               	movlb	0	; () banked
  5768  0132A6  51D6               	movf	___llmod@divisor& (0+255),w,b
  5769  0132A8  0100               	movlb	0	; () banked
  5770  0132AA  11D7               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5771  0132AC  0100               	movlb	0	; () banked
  5772  0132AE  11D8               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5773  0132B0  0100               	movlb	0	; () banked
  5774  0132B2  11D9               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5775  0132B4  B4D8               	btfsc	status,2,c
  5776  0132B6  D03A               	goto	l2464
  5777                           
  5778                           ; BSR set to: 0
  5779  0132B8  0E01               	movlw	1
  5780  0132BA  0100               	movlb	0	; () banked
  5781  0132BC  6FDA               	movwf	___llmod@counter& (0+255),b
  5782  0132BE  D008               	goto	l10870
  5783  0132C0                     l10868:
  5784                           
  5785                           ; BSR set to: 0
  5786  0132C0  0100               	movlb	0	; () banked
  5787  0132C2  90D8               	bcf	status,0,c
  5788  0132C4  37D6               	rlcf	___llmod@divisor& (0+255),f,b
  5789  0132C6  37D7               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5790  0132C8  37D8               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5791  0132CA  37D9               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5792  0132CC  0100               	movlb	0	; () banked
  5793  0132CE  2BDA               	incf	___llmod@counter& (0+255),f,b
  5794  0132D0                     l10870:
  5795                           
  5796                           ; BSR set to: 0
  5797  0132D0  0100               	movlb	0	; () banked
  5798  0132D2  AFD9               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5799  0132D4  D7F5               	goto	l10868
  5800  0132D6                     l10872:
  5801                           
  5802                           ; BSR set to: 0
  5803  0132D6  0100               	movlb	0	; () banked
  5804  0132D8  51D6               	movf	___llmod@divisor& (0+255),w,b
  5805  0132DA  0100               	movlb	0	; () banked
  5806  0132DC  5DD2               	subwf	___llmod@dividend& (0+255),w,b
  5807  0132DE  0100               	movlb	0	; () banked
  5808  0132E0  51D7               	movf	(___llmod@divisor+1)& (0+255),w,b
  5809  0132E2  0100               	movlb	0	; () banked
  5810  0132E4  59D3               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5811  0132E6  0100               	movlb	0	; () banked
  5812  0132E8  51D8               	movf	(___llmod@divisor+2)& (0+255),w,b
  5813  0132EA  0100               	movlb	0	; () banked
  5814  0132EC  59D4               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5815  0132EE  0100               	movlb	0	; () banked
  5816  0132F0  51D9               	movf	(___llmod@divisor+3)& (0+255),w,b
  5817  0132F2  0100               	movlb	0	; () banked
  5818  0132F4  59D5               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5819  0132F6  A0D8               	btfss	status,0,c
  5820  0132F8  D010               	goto	l10876
  5821                           
  5822                           ; BSR set to: 0
  5823  0132FA  0100               	movlb	0	; () banked
  5824  0132FC  51D6               	movf	___llmod@divisor& (0+255),w,b
  5825  0132FE  0100               	movlb	0	; () banked
  5826  013300  5FD2               	subwf	___llmod@dividend& (0+255),f,b
  5827  013302  0100               	movlb	0	; () banked
  5828  013304  51D7               	movf	(___llmod@divisor+1)& (0+255),w,b
  5829  013306  0100               	movlb	0	; () banked
  5830  013308  5BD3               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5831  01330A  0100               	movlb	0	; () banked
  5832  01330C  51D8               	movf	(___llmod@divisor+2)& (0+255),w,b
  5833  01330E  0100               	movlb	0	; () banked
  5834  013310  5BD4               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5835  013312  0100               	movlb	0	; () banked
  5836  013314  51D9               	movf	(___llmod@divisor+3)& (0+255),w,b
  5837  013316  0100               	movlb	0	; () banked
  5838  013318  5BD5               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  5839  01331A                     l10876:
  5840                           
  5841                           ; BSR set to: 0
  5842  01331A  0100               	movlb	0	; () banked
  5843  01331C  90D8               	bcf	status,0,c
  5844  01331E  33D9               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  5845  013320  33D8               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  5846  013322  33D7               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  5847  013324  33D6               	rrcf	___llmod@divisor& (0+255),f,b
  5848                           
  5849                           ; BSR set to: 0
  5850  013326  0100               	movlb	0	; () banked
  5851  013328  2FDA               	decfsz	___llmod@counter& (0+255),f,b
  5852  01332A  D7D5               	goto	l10872
  5853  01332C                     l2464:
  5854                           
  5855                           ; BSR set to: 0
  5856  01332C  C0D2  F0D2         	movff	___llmod@dividend,?___llmod
  5857  013330  C0D3  F0D3         	movff	___llmod@dividend+1,?___llmod+1
  5858  013334  C0D4  F0D4         	movff	___llmod@dividend+2,?___llmod+2
  5859  013338  C0D5  F0D5         	movff	___llmod@dividend+3,?___llmod+3
  5860                           
  5861                           ; BSR set to: 0
  5862  01333C  0012               	return		;funcret
  5863  01333E                     __end_of___llmod:
  5864                           	opt stack 0
  5865                           tosu	equ	0xFFF
  5866                           tosh	equ	0xFFE
  5867                           tosl	equ	0xFFD
  5868                           pclath	equ	0xFFA
  5869                           tblptru	equ	0xFF8
  5870                           tblptrh	equ	0xFF7
  5871                           tblptrl	equ	0xFF6
  5872                           tablat	equ	0xFF5
  5873                           prodh	equ	0xFF4
  5874                           prodl	equ	0xFF3
  5875                           postinc0	equ	0xFEE
  5876                           wreg	equ	0xFE8
  5877                           postdec1	equ	0xFE5
  5878                           fsr1h	equ	0xFE2
  5879                           fsr1l	equ	0xFE1
  5880                           indf2	equ	0xFDF
  5881                           postinc2	equ	0xFDE
  5882                           postdec2	equ	0xFDD
  5883                           fsr2h	equ	0xFDA
  5884                           fsr2l	equ	0xFD9
  5885                           status	equ	0xFD8
  5886                           
  5887 ;; *************** function _getMode *****************
  5888 ;; Defined at:
  5889 ;;		line 95 in file "main.c"
  5890 ;; Parameters:    Size  Location     Type
  5891 ;;		None
  5892 ;; Auto vars:     Size  Location     Type
  5893 ;;  dipState        2   40[BANK0 ] int 
  5894 ;; Return value:  Size  Location     Type
  5895 ;;                  2   36[BANK0 ] int 
  5896 ;; Registers used:
  5897 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5898 ;; Tracked objects:
  5899 ;;		On entry : 0/0
  5900 ;;		On exit  : 0/0
  5901 ;;		Unchanged: 0/0
  5902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5903 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;Total ram usage:        6 bytes
  5908 ;; Hardware stack levels used:    1
  5909 ;; Hardware stack levels required when called:   16
  5910 ;; This function calls:
  5911 ;;		_HMI_DIPSwitch
  5912 ;;		_HMI_DownSwitch
  5913 ;;		_HMI_LeftSwitch
  5914 ;;		_HMI_Poll
  5915 ;;		_HMI_RightSwitch
  5916 ;;		_HMI_UpSwitch
  5917 ;;		_MXK_DIPSwitch
  5918 ;;		_MXK_TestButton
  5919 ;; This function is called by:
  5920 ;;		_displayMode
  5921 ;;		_continuousMode
  5922 ;;		_setMode
  5923 ;; This function uses a non-reentrant model
  5924 ;;
  5925                           
  5926                           	psect	text21
  5927  013610                     __ptext21:
  5928                           	opt stack 0
  5929  013610                     _getMode:
  5930                           	opt stack 10
  5931                           
  5932                           ;main.c: 96: HMI_Poll();
  5933                           
  5934                           ; BSR set to: 0
  5935                           ;incstack = 0
  5936  013610  ECF3  F09C         	call	_HMI_Poll	;wreg free
  5937                           
  5938                           ;main.c: 97: int dipState = HMIBoard.mDIP.mGetState();
  5939  013614  EE21  F061         	lfsr	2,_HMIBoard+55
  5940  013618  D801               	call	u7728
  5941  01361A  D00A               	goto	u7729
  5942  01361C                     u7728:
  5943  01361C  0005               	push	
  5944  01361E  6EFA               	movwf	pclath,c
  5945  013620  50DE               	movf	postinc2,w,c
  5946  013622  6EFD               	movwf	tosl,c
  5947  013624  50DE               	movf	postinc2,w,c
  5948  013626  6EFE               	movwf	tosh,c
  5949  013628  50DE               	movf	postinc2,w,c
  5950  01362A  6EFF               	movwf	tosu,c
  5951  01362C  50FA               	movf	pclath,w,c
  5952  01362E  0012               	return		;indir
  5953  013630                     u7729:
  5954  013630  0100               	movlb	0	; () banked
  5955  013632  6FEB               	movwf	??_getMode& (0+255),b
  5956  013634  0100               	movlb	0	; () banked
  5957  013636  51EB               	movf	??_getMode& (0+255),w,b
  5958  013638  0100               	movlb	0	; () banked
  5959  01363A  6FED               	movwf	getMode@dipState& (0+255),b
  5960  01363C  6BEE               	clrf	(getMode@dipState+1)& (0+255),b
  5961                           
  5962                           ;main.c: 98: switch (dipState) {
  5963  01363E  D018               	goto	l11212
  5964  013640                     l11194:
  5965                           
  5966                           ; BSR set to: 0
  5967                           ;main.c: 100: return 3;
  5968  013640  0E00               	movlw	0
  5969  013642  0100               	movlb	0	; () banked
  5970  013644  6FEA               	movwf	(?_getMode+1)& (0+255),b
  5971  013646  0E03               	movlw	3
  5972  013648  6FE9               	movwf	?_getMode& (0+255),b
  5973                           
  5974                           ; BSR set to: 0
  5975  01364A  0012               	return	
  5976  01364C                     l11198:
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;main.c: 102: return 2;
  5980  01364C  0E00               	movlw	0
  5981  01364E  0100               	movlb	0	; () banked
  5982  013650  6FEA               	movwf	(?_getMode+1)& (0+255),b
  5983  013652  0E02               	movlw	2
  5984  013654  6FE9               	movwf	?_getMode& (0+255),b
  5985                           
  5986                           ; BSR set to: 0
  5987  013656  0012               	return	
  5988  013658                     l11202:
  5989                           
  5990                           ; BSR set to: 0
  5991                           ;main.c: 104: return 1;
  5992  013658  0E00               	movlw	0
  5993  01365A  0100               	movlb	0	; () banked
  5994  01365C  6FEA               	movwf	(?_getMode+1)& (0+255),b
  5995  01365E  0E01               	movlw	1
  5996  013660  6FE9               	movwf	?_getMode& (0+255),b
  5997                           
  5998                           ; BSR set to: 0
  5999  013662  0012               	return	
  6000  013664                     l11206:
  6001                           
  6002                           ; BSR set to: 0
  6003                           ;main.c: 106: return 0;
  6004  013664  0E00               	movlw	0
  6005  013666  0100               	movlb	0	; () banked
  6006  013668  6FEA               	movwf	(?_getMode+1)& (0+255),b
  6007  01366A  0E00               	movlw	0
  6008  01366C  6FE9               	movwf	?_getMode& (0+255),b
  6009                           
  6010                           ; BSR set to: 0
  6011                           ;main.c: 107: }
  6012                           
  6013                           ; BSR set to: 0
  6014  01366E  0012               	return	
  6015  013670                     l11212:
  6016                           
  6017                           ; BSR set to: 0
  6018  013670  C0ED  F0EB         	movff	getMode@dipState,??_getMode
  6019  013674  C0EE  F0EC         	movff	getMode@dipState+1,??_getMode+1
  6020                           
  6021                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6022                           ; Switch size 1, requested type "space"
  6023                           ; Number of cases is 1, Range of values is 0 to 0
  6024                           ; switch strategies available:
  6025                           ; Name         Instructions Cycles
  6026                           ; simple_byte            4     3 (average)
  6027                           ;	Chosen strategy is simple_byte
  6028  013678  0100               	movlb	0	; () banked
  6029  01367A  51EC               	movf	(??_getMode+1)& (0+255),w,b
  6030  01367C  0A00               	xorlw	0	; case 0
  6031  01367E  A4D8               	btfss	status,2,c
  6032  013680  D7F1               	goto	l11206
  6033                           
  6034                           ; BSR set to: 0
  6035                           ; Switch size 1, requested type "space"
  6036                           ; Number of cases is 3, Range of values is 2 to 8
  6037                           ; switch strategies available:
  6038                           ; Name         Instructions Cycles
  6039                           ; simple_byte           10     6 (average)
  6040                           ;	Chosen strategy is simple_byte
  6041  013682  0100               	movlb	0	; () banked
  6042  013684  51EB               	movf	??_getMode& (0+255),w,b
  6043  013686  0A02               	xorlw	2	; case 2
  6044  013688  B4D8               	btfsc	status,2,c
  6045  01368A  D7DA               	goto	l11194
  6046  01368C  0A06               	xorlw	6	; case 4
  6047  01368E  B4D8               	btfsc	status,2,c
  6048  013690  D7DD               	goto	l11198
  6049  013692  0A0C               	xorlw	12	; case 8
  6050  013694  B4D8               	btfsc	status,2,c
  6051  013696  D7E0               	goto	l11202
  6052  013698  D7E5               	goto	l11206
  6053  01369A                     __end_of_getMode:
  6054                           	opt stack 0
  6055                           tosu	equ	0xFFF
  6056                           tosh	equ	0xFFE
  6057                           tosl	equ	0xFFD
  6058                           pclath	equ	0xFFA
  6059                           tblptru	equ	0xFF8
  6060                           tblptrh	equ	0xFF7
  6061                           tblptrl	equ	0xFF6
  6062                           tablat	equ	0xFF5
  6063                           prodh	equ	0xFF4
  6064                           prodl	equ	0xFF3
  6065                           postinc0	equ	0xFEE
  6066                           wreg	equ	0xFE8
  6067                           postdec1	equ	0xFE5
  6068                           fsr1h	equ	0xFE2
  6069                           fsr1l	equ	0xFE1
  6070                           indf2	equ	0xFDF
  6071                           postinc2	equ	0xFDE
  6072                           postdec2	equ	0xFDD
  6073                           fsr2h	equ	0xFDA
  6074                           fsr2l	equ	0xFD9
  6075                           status	equ	0xFD8
  6076                           
  6077 ;; *************** function _HMI_Poll *****************
  6078 ;; Defined at:
  6079 ;;		line 252 in file "HMI.c"
  6080 ;; Parameters:    Size  Location     Type
  6081 ;;		None
  6082 ;; Auto vars:     Size  Location     Type
  6083 ;;		None
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  1    wreg      void 
  6086 ;; Registers used:
  6087 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6096 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6097 ;;Total ram usage:        0 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:   15
  6100 ;; This function calls:
  6101 ;;		_Button_Poll
  6102 ;; This function is called by:
  6103 ;;		_getMode
  6104 ;;		_continuousMode
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           	psect	text22
  6109  0139E6                     __ptext22:
  6110                           	opt stack 0
  6111  0139E6                     _HMI_Poll:
  6112                           	opt stack 10
  6113                           
  6114                           ;HMI.c: 254: TRISE = 0xFF;
  6115                           
  6116                           ; BSR set to: 0
  6117                           ;incstack = 0
  6118  0139E6  6896               	setf	3990,c	;volatile
  6119                           
  6120                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  6121  0139E8  0E5A               	movlw	low (_HMIBoard+48)
  6122  0139EA  0100               	movlb	0	; () banked
  6123  0139EC  6FE0               	movwf	Button_Poll@pButton& (0+255),b
  6124  0139EE  0E01               	movlw	high (_HMIBoard+48)
  6125  0139F0  0100               	movlb	0	; () banked
  6126  0139F2  6FE1               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6127  0139F4  0E01               	movlw	1
  6128  0139F6  0100               	movlb	0	; () banked
  6129  0139F8  6FE2               	movwf	Button_Poll@pIncrement& (0+255),b
  6130  0139FA  ECC0  F08F         	call	_Button_Poll	;wreg free
  6131                           
  6132                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  6133  0139FE  0E3C               	movlw	low (_HMIBoard+18)
  6134  013A00  0100               	movlb	0	; () banked
  6135  013A02  6FE0               	movwf	Button_Poll@pButton& (0+255),b
  6136  013A04  0E01               	movlw	high (_HMIBoard+18)
  6137  013A06  0100               	movlb	0	; () banked
  6138  013A08  6FE1               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6139  013A0A  0E01               	movlw	1
  6140  013A0C  0100               	movlb	0	; () banked
  6141  013A0E  6FE2               	movwf	Button_Poll@pIncrement& (0+255),b
  6142  013A10  ECC0  F08F         	call	_Button_Poll	;wreg free
  6143                           
  6144                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  6145  013A14  0E32               	movlw	low (_HMIBoard+8)
  6146  013A16  0100               	movlb	0	; () banked
  6147  013A18  6FE0               	movwf	Button_Poll@pButton& (0+255),b
  6148  013A1A  0E01               	movlw	high (_HMIBoard+8)
  6149  013A1C  0100               	movlb	0	; () banked
  6150  013A1E  6FE1               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6151  013A20  0E01               	movlw	1
  6152  013A22  0100               	movlb	0	; () banked
  6153  013A24  6FE2               	movwf	Button_Poll@pIncrement& (0+255),b
  6154  013A26  ECC0  F08F         	call	_Button_Poll	;wreg free
  6155                           
  6156                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  6157  013A2A  0E46               	movlw	low (_HMIBoard+28)
  6158  013A2C  0100               	movlb	0	; () banked
  6159  013A2E  6FE0               	movwf	Button_Poll@pButton& (0+255),b
  6160  013A30  0E01               	movlw	high (_HMIBoard+28)
  6161  013A32  0100               	movlb	0	; () banked
  6162  013A34  6FE1               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6163  013A36  0E01               	movlw	1
  6164  013A38  0100               	movlb	0	; () banked
  6165  013A3A  6FE2               	movwf	Button_Poll@pIncrement& (0+255),b
  6166  013A3C  ECC0  F08F         	call	_Button_Poll	;wreg free
  6167                           
  6168                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  6169  013A40  0E50               	movlw	low (_HMIBoard+38)
  6170  013A42  0100               	movlb	0	; () banked
  6171  013A44  6FE0               	movwf	Button_Poll@pButton& (0+255),b
  6172  013A46  0E01               	movlw	high (_HMIBoard+38)
  6173  013A48  0100               	movlb	0	; () banked
  6174  013A4A  6FE1               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6175  013A4C  0E01               	movlw	1
  6176  013A4E  0100               	movlb	0	; () banked
  6177  013A50  6FE2               	movwf	Button_Poll@pIncrement& (0+255),b
  6178  013A52  ECC0  F08F         	call	_Button_Poll	;wreg free
  6179  013A56  0012               	return		;funcret
  6180  013A58                     __end_of_HMI_Poll:
  6181                           	opt stack 0
  6182                           tosu	equ	0xFFF
  6183                           tosh	equ	0xFFE
  6184                           tosl	equ	0xFFD
  6185                           pclath	equ	0xFFA
  6186                           tblptru	equ	0xFF8
  6187                           tblptrh	equ	0xFF7
  6188                           tblptrl	equ	0xFF6
  6189                           tablat	equ	0xFF5
  6190                           prodh	equ	0xFF4
  6191                           prodl	equ	0xFF3
  6192                           postinc0	equ	0xFEE
  6193                           wreg	equ	0xFE8
  6194                           postdec1	equ	0xFE5
  6195                           fsr1h	equ	0xFE2
  6196                           fsr1l	equ	0xFE1
  6197                           indf2	equ	0xFDF
  6198                           postinc2	equ	0xFDE
  6199                           postdec2	equ	0xFDD
  6200                           fsr2h	equ	0xFDA
  6201                           fsr2l	equ	0xFD9
  6202                           status	equ	0xFD8
  6203                           
  6204 ;; *************** function _Button_Poll *****************
  6205 ;; Defined at:
  6206 ;;		line 57 in file "Library/Button.c"
  6207 ;; Parameters:    Size  Location     Type
  6208 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  6209 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  6210 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  6211 ;; Auto vars:     Size  Location     Type
  6212 ;;  Pin             1   35[BANK0 ] unsigned char 
  6213 ;; Return value:  Size  Location     Type
  6214 ;;                  1    wreg      unsigned char 
  6215 ;; Registers used:
  6216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6217 ;; Tracked objects:
  6218 ;;		On entry : 0/0
  6219 ;;		On exit  : 0/0
  6220 ;;		Unchanged: 0/0
  6221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6222 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6225 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6226 ;;Total ram usage:        9 bytes
  6227 ;; Hardware stack levels used:    1
  6228 ;; Hardware stack levels required when called:   14
  6229 ;; This function calls:
  6230 ;;		_Event_DIPSwitch
  6231 ;;		_Event_HMI_DIPSwitch
  6232 ;;		_Event_HMI_DownButton
  6233 ;;		_Event_HMI_LeftButton
  6234 ;;		_Event_HMI_RightButton
  6235 ;;		_Event_HMI_UpButton
  6236 ;;		_Event_TestButton
  6237 ;;		_HMI_DIPSwitch
  6238 ;;		_HMI_DownSwitch
  6239 ;;		_HMI_LeftSwitch
  6240 ;;		_HMI_RightSwitch
  6241 ;;		_HMI_UpSwitch
  6242 ;;		_MXK_DIPSwitch
  6243 ;;		_MXK_TestButton
  6244 ;; This function is called by:
  6245 ;;		_HMI_Poll
  6246 ;;		_MXK_Poll
  6247 ;; This function uses a non-reentrant model
  6248 ;;
  6249                           
  6250                           	psect	text23
  6251  011F80                     __ptext23:
  6252                           	opt stack 0
  6253  011F80                     _Button_Poll:
  6254                           	opt stack 10
  6255                           
  6256                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  6257                           
  6258                           ;incstack = 0
  6259  011F80  0100               	movlb	0	; () banked
  6260  011F82  EE20 F007          	lfsr	2,7
  6261  011F86  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6262  011F88  26D9               	addwf	fsr2l,f,c
  6263  011F8A  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6264  011F8C  22DA               	addwfc	fsr2h,f,c
  6265  011F8E  D801               	call	u7148
  6266  011F90  D00A               	goto	u7149
  6267  011F92                     u7148:
  6268  011F92  0005               	push	
  6269  011F94  6EFA               	movwf	pclath,c
  6270  011F96  50DE               	movf	postinc2,w,c
  6271  011F98  6EFD               	movwf	tosl,c
  6272  011F9A  50DE               	movf	postinc2,w,c
  6273  011F9C  6EFE               	movwf	tosh,c
  6274  011F9E  50DE               	movf	postinc2,w,c
  6275  011FA0  6EFF               	movwf	tosu,c
  6276  011FA2  50FA               	movf	pclath,w,c
  6277  011FA4  0012               	return		;indir
  6278  011FA6                     u7149:
  6279  011FA6  0100               	movlb	0	; () banked
  6280  011FA8  6FE8               	movwf	Button_Poll@Pin& (0+255),b
  6281                           
  6282                           ; BSR set to: 0
  6283                           ;Button.c: 61: if (pButton->mState == Pin)
  6284  011FAA  C0E0  FFD9         	movff	Button_Poll@pButton,fsr2l
  6285  011FAE  C0E1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6286  011FB2  0100               	movlb	0	; () banked
  6287  011FB4  51E8               	movf	Button_Poll@Pin& (0+255),w,b
  6288  011FB6  18DE               	xorwf	postinc2,w,c
  6289  011FB8  A4D8               	btfss	status,2,c
  6290  011FBA  D021               	goto	l10674
  6291                           
  6292                           ; BSR set to: 0
  6293                           ;Button.c: 62: {
  6294                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  6295  011FBC  0100               	movlb	0	; () banked
  6296  011FBE  EE20 F001          	lfsr	2,1
  6297  011FC2  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6298  011FC4  26D9               	addwf	fsr2l,f,c
  6299  011FC6  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6300  011FC8  22DA               	addwfc	fsr2h,f,c
  6301  011FCA  0100               	movlb	0	; () banked
  6302  011FCC  51E2               	movf	Button_Poll@pIncrement& (0+255),w,b
  6303  011FCE  5CDE               	subwf	postinc2,w,c
  6304  011FD0  B0D8               	btfsc	status,0,c
  6305  011FD2  D00A               	goto	l10672
  6306                           
  6307                           ; BSR set to: 0
  6308                           ;Button.c: 66: pButton->mCount = 0;
  6309  011FD4  0100               	movlb	0	; () banked
  6310  011FD6  EE20 F001          	lfsr	2,1
  6311  011FDA  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6312  011FDC  26D9               	addwf	fsr2l,f,c
  6313  011FDE  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6314  011FE0  22DA               	addwfc	fsr2h,f,c
  6315  011FE2  0E00               	movlw	0
  6316  011FE4  6EDF               	movwf	indf2,c
  6317  011FE6  0012               	return	
  6318  011FE8                     l10672:
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;Button.c: 67: else
  6322                           ;Button.c: 68: pButton->mCount -= pIncrement;
  6323  011FE8  0100               	movlb	0	; () banked
  6324  011FEA  EE20 F001          	lfsr	2,1
  6325  011FEE  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6326  011FF0  26D9               	addwf	fsr2l,f,c
  6327  011FF2  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6328  011FF4  22DA               	addwfc	fsr2h,f,c
  6329  011FF6  0100               	movlb	0	; () banked
  6330  011FF8  51E2               	movf	Button_Poll@pIncrement& (0+255),w,b
  6331  011FFA  5EDF               	subwf	indf2,f,c
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;Button.c: 69: }
  6335  011FFC  0012               	return	
  6336  011FFE                     l10674:
  6337                           
  6338                           ; BSR set to: 0
  6339                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  6340  011FFE  0100               	movlb	0	; () banked
  6341  012000  EE20 F001          	lfsr	2,1
  6342  012004  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6343  012006  26D9               	addwf	fsr2l,f,c
  6344  012008  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6345  01200A  22DA               	addwfc	fsr2h,f,c
  6346  01200C  50DF               	movf	indf2,w,c
  6347  01200E  0100               	movlb	0	; () banked
  6348  012010  6FE3               	movwf	??_Button_Poll& (0+255),b
  6349  012012  6BE4               	clrf	(??_Button_Poll+1)& (0+255),b
  6350  012014  0100               	movlb	0	; () banked
  6351  012016  51E2               	movf	Button_Poll@pIncrement& (0+255),w,b
  6352  012018  0100               	movlb	0	; () banked
  6353  01201A  27E3               	addwf	??_Button_Poll& (0+255),f,b
  6354  01201C  0E00               	movlw	0
  6355  01201E  23E4               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  6356  012020  0100               	movlb	0	; () banked
  6357  012022  EE20 F001          	lfsr	2,1
  6358  012026  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6359  012028  26D9               	addwf	fsr2l,f,c
  6360  01202A  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6361  01202C  22DA               	addwfc	fsr2h,f,c
  6362  01202E  50DF               	movf	indf2,w,c
  6363  012030  0100               	movlb	0	; () banked
  6364  012032  6FE5               	movwf	(??_Button_Poll+2)& (0+255),b
  6365  012034  6BE6               	clrf	(??_Button_Poll+3)& (0+255),b
  6366  012036  0100               	movlb	0	; () banked
  6367  012038  51E3               	movf	??_Button_Poll& (0+255),w,b
  6368  01203A  0100               	movlb	0	; () banked
  6369  01203C  5DE5               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6370  01203E  0100               	movlb	0	; () banked
  6371  012040  51E6               	movf	(??_Button_Poll+3)& (0+255),w,b
  6372  012042  0A80               	xorlw	128
  6373  012044  0100               	movlb	0	; () banked
  6374  012046  6FE7               	movwf	(??_Button_Poll+4)& (0+255),b
  6375  012048  0100               	movlb	0	; () banked
  6376  01204A  51E4               	movf	(??_Button_Poll+1)& (0+255),w,b
  6377  01204C  0A80               	xorlw	128
  6378  01204E  0100               	movlb	0	; () banked
  6379  012050  59E7               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  6380  012052  B0D8               	btfsc	status,0,c
  6381  012054  0012               	return	
  6382                           
  6383                           ; BSR set to: 0
  6384                           ;Button.c: 73: {
  6385                           ;Button.c: 75: pButton->mCount += pIncrement;
  6386  012056  0100               	movlb	0	; () banked
  6387  012058  EE20 F001          	lfsr	2,1
  6388  01205C  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6389  01205E  26D9               	addwf	fsr2l,f,c
  6390  012060  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6391  012062  22DA               	addwfc	fsr2h,f,c
  6392  012064  0100               	movlb	0	; () banked
  6393  012066  51E2               	movf	Button_Poll@pIncrement& (0+255),w,b
  6394  012068  26DF               	addwf	indf2,f,c
  6395                           
  6396                           ; BSR set to: 0
  6397                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6398  01206A  0100               	movlb	0	; () banked
  6399  01206C  EE20 F002          	lfsr	2,2
  6400  012070  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6401  012072  26D9               	addwf	fsr2l,f,c
  6402  012074  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6403  012076  22DA               	addwfc	fsr2h,f,c
  6404  012078  0100               	movlb	0	; () banked
  6405  01207A  EE10 F001          	lfsr	1,1
  6406  01207E  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6407  012080  26E1               	addwf	fsr1l,f,c
  6408  012082  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6409  012084  22E2               	addwfc	fsr1h,f,c
  6410  012086  50E7               	movf	indf1,w,c
  6411  012088  0100               	movlb	0	; () banked
  6412  01208A  6FE5               	movwf	(??_Button_Poll+2)& (0+255),b
  6413  01208C  6BE6               	clrf	(??_Button_Poll+3)& (0+255),b
  6414  01208E  50DE               	movf	postinc2,w,c
  6415  012090  0100               	movlb	0	; () banked
  6416  012092  5DE5               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6417  012094  50DE               	movf	postinc2,w,c
  6418  012096  0100               	movlb	0	; () banked
  6419  012098  59E6               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6420  01209A  A0D8               	btfss	status,0,c
  6421  01209C  0012               	return	
  6422                           
  6423                           ; BSR set to: 0
  6424                           ;Button.c: 77: {
  6425                           ;Button.c: 79: pButton->mState = Pin;
  6426  01209E  C0E0  FFD9         	movff	Button_Poll@pButton,fsr2l
  6427  0120A2  C0E1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6428  0120A6  C0E8  FFDF         	movff	Button_Poll@Pin,indf2
  6429                           
  6430                           ; BSR set to: 0
  6431                           ;Button.c: 80: pButton->mCount = 0;
  6432  0120AA  0100               	movlb	0	; () banked
  6433  0120AC  EE20 F001          	lfsr	2,1
  6434  0120B0  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6435  0120B2  26D9               	addwf	fsr2l,f,c
  6436  0120B4  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6437  0120B6  22DA               	addwfc	fsr2h,f,c
  6438  0120B8  0E00               	movlw	0
  6439  0120BA  6EDF               	movwf	indf2,c
  6440                           
  6441                           ; BSR set to: 0
  6442                           ;Button.c: 83: pButton->mFunction(Pin);
  6443  0120BC  0100               	movlb	0	; () banked
  6444  0120BE  EE20 F004          	lfsr	2,4
  6445  0120C2  51E0               	movf	Button_Poll@pButton& (0+255),w,b
  6446  0120C4  26D9               	addwf	fsr2l,f,c
  6447  0120C6  51E1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6448  0120C8  22DA               	addwfc	fsr2h,f,c
  6449  0120CA  D801               	call	u7198
  6450  0120CC  0012               	return	
  6451  0120CE                     u7198:
  6452  0120CE  0005               	push	
  6453  0120D0  6EFA               	movwf	pclath,c
  6454  0120D2  50DE               	movf	postinc2,w,c
  6455  0120D4  6EFD               	movwf	tosl,c
  6456  0120D6  50DE               	movf	postinc2,w,c
  6457  0120D8  6EFE               	movwf	tosh,c
  6458  0120DA  50DE               	movf	postinc2,w,c
  6459  0120DC  6EFF               	movwf	tosu,c
  6460  0120DE  50FA               	movf	pclath,w,c
  6461  0120E0  0100               	movlb	0	; () banked
  6462  0120E2  51E8               	movf	Button_Poll@Pin& (0+255),w,b
  6463  0120E4  0012               	return		;indir
  6464  0120E6                     __end_of_Button_Poll:
  6465                           	opt stack 0
  6466                           tosu	equ	0xFFF
  6467                           tosh	equ	0xFFE
  6468                           tosl	equ	0xFFD
  6469                           pclath	equ	0xFFA
  6470                           tblptru	equ	0xFF8
  6471                           tblptrh	equ	0xFF7
  6472                           tblptrl	equ	0xFF6
  6473                           tablat	equ	0xFF5
  6474                           prodh	equ	0xFF4
  6475                           prodl	equ	0xFF3
  6476                           postinc0	equ	0xFEE
  6477                           wreg	equ	0xFE8
  6478                           indf1	equ	0xFE7
  6479                           postdec1	equ	0xFE5
  6480                           fsr1h	equ	0xFE2
  6481                           fsr1l	equ	0xFE1
  6482                           indf2	equ	0xFDF
  6483                           postinc2	equ	0xFDE
  6484                           postdec2	equ	0xFDD
  6485                           fsr2h	equ	0xFDA
  6486                           fsr2l	equ	0xFD9
  6487                           status	equ	0xFD8
  6488                           
  6489 ;; *************** function _MXK_DIPSwitch *****************
  6490 ;; Defined at:
  6491 ;;		line 24 in file "Library/MXK.c"
  6492 ;; Parameters:    Size  Location     Type
  6493 ;;		None
  6494 ;; Auto vars:     Size  Location     Type
  6495 ;;		None
  6496 ;; Return value:  Size  Location     Type
  6497 ;;                  1    wreg      unsigned char 
  6498 ;; Registers used:
  6499 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6500 ;; Tracked objects:
  6501 ;;		On entry : 0/0
  6502 ;;		On exit  : 0/0
  6503 ;;		Unchanged: 0/0
  6504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6509 ;;Total ram usage:        0 bytes
  6510 ;; Hardware stack levels used:    1
  6511 ;; Hardware stack levels required when called:    8
  6512 ;; This function calls:
  6513 ;;		_Port_GetQuad
  6514 ;; This function is called by:
  6515 ;;		_FunctInitButton
  6516 ;;		_Button_Poll
  6517 ;;		_getMode
  6518 ;;		_continuousMode
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           	psect	text24
  6523  014982                     __ptext24:
  6524                           	opt stack 0
  6525  014982                     _MXK_DIPSwitch:
  6526                           	opt stack 17
  6527                           
  6528                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  6529                           
  6530                           ;incstack = 0
  6531  014982  0E88               	movlw	low _PortD
  6532  014984  0100               	movlb	0	; () banked
  6533  014986  6FC5               	movwf	Port_GetQuad@pInput& (0+255),b
  6534  014988  0E00               	movlw	high _PortD
  6535  01498A  0100               	movlb	0	; () banked
  6536  01498C  6FC6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6537  01498E  0E00               	movlw	0
  6538  014990  0100               	movlb	0	; () banked
  6539  014992  6FC7               	movwf	Port_GetQuad@pQuad& (0+255),b
  6540  014994  ECA3  F0A0         	call	_Port_GetQuad
  6541  014998  0012               	return	
  6542  01499A                     __end_of_MXK_DIPSwitch:
  6543                           	opt stack 0
  6544                           tosu	equ	0xFFF
  6545                           tosh	equ	0xFFE
  6546                           tosl	equ	0xFFD
  6547                           pclath	equ	0xFFA
  6548                           tblptru	equ	0xFF8
  6549                           tblptrh	equ	0xFF7
  6550                           tblptrl	equ	0xFF6
  6551                           tablat	equ	0xFF5
  6552                           prodh	equ	0xFF4
  6553                           prodl	equ	0xFF3
  6554                           postinc0	equ	0xFEE
  6555                           wreg	equ	0xFE8
  6556                           indf1	equ	0xFE7
  6557                           postdec1	equ	0xFE5
  6558                           fsr1h	equ	0xFE2
  6559                           fsr1l	equ	0xFE1
  6560                           indf2	equ	0xFDF
  6561                           postinc2	equ	0xFDE
  6562                           postdec2	equ	0xFDD
  6563                           fsr2h	equ	0xFDA
  6564                           fsr2l	equ	0xFD9
  6565                           status	equ	0xFD8
  6566                           
  6567 ;; *************** function _HMI_DIPSwitch *****************
  6568 ;; Defined at:
  6569 ;;		line 47 in file "HMI.c"
  6570 ;; Parameters:    Size  Location     Type
  6571 ;;		None
  6572 ;; Auto vars:     Size  Location     Type
  6573 ;;		None
  6574 ;; Return value:  Size  Location     Type
  6575 ;;                  1    wreg      unsigned char 
  6576 ;; Registers used:
  6577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6578 ;; Tracked objects:
  6579 ;;		On entry : 0/0
  6580 ;;		On exit  : 0/0
  6581 ;;		Unchanged: 0/0
  6582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6587 ;;Total ram usage:        0 bytes
  6588 ;; Hardware stack levels used:    1
  6589 ;; Hardware stack levels required when called:    8
  6590 ;; This function calls:
  6591 ;;		_Port_GetQuad
  6592 ;; This function is called by:
  6593 ;;		_HMI_Init
  6594 ;;		_Button_Poll
  6595 ;;		_getMode
  6596 ;;		_continuousMode
  6597 ;; This function uses a non-reentrant model
  6598 ;;
  6599                           
  6600                           	psect	text25
  6601  01499A                     __ptext25:
  6602                           	opt stack 0
  6603  01499A                     _HMI_DIPSwitch:
  6604                           	opt stack 15
  6605                           
  6606                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  6607                           
  6608                           ;incstack = 0
  6609  01499A  0E7E               	movlw	low _PortE
  6610  01499C  0100               	movlb	0	; () banked
  6611  01499E  6FC5               	movwf	Port_GetQuad@pInput& (0+255),b
  6612  0149A0  0E00               	movlw	high _PortE
  6613  0149A2  0100               	movlb	0	; () banked
  6614  0149A4  6FC6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6615  0149A6  0E00               	movlw	0
  6616  0149A8  0100               	movlb	0	; () banked
  6617  0149AA  6FC7               	movwf	Port_GetQuad@pQuad& (0+255),b
  6618  0149AC  ECA3  F0A0         	call	_Port_GetQuad	;wreg free
  6619  0149B0  0012               	return	
  6620  0149B2                     __end_of_HMI_DIPSwitch:
  6621                           	opt stack 0
  6622                           tosu	equ	0xFFF
  6623                           tosh	equ	0xFFE
  6624                           tosl	equ	0xFFD
  6625                           pclath	equ	0xFFA
  6626                           tblptru	equ	0xFF8
  6627                           tblptrh	equ	0xFF7
  6628                           tblptrl	equ	0xFF6
  6629                           tablat	equ	0xFF5
  6630                           prodh	equ	0xFF4
  6631                           prodl	equ	0xFF3
  6632                           postinc0	equ	0xFEE
  6633                           wreg	equ	0xFE8
  6634                           indf1	equ	0xFE7
  6635                           postdec1	equ	0xFE5
  6636                           fsr1h	equ	0xFE2
  6637                           fsr1l	equ	0xFE1
  6638                           indf2	equ	0xFDF
  6639                           postinc2	equ	0xFDE
  6640                           postdec2	equ	0xFDD
  6641                           fsr2h	equ	0xFDA
  6642                           fsr2l	equ	0xFD9
  6643                           status	equ	0xFD8
  6644                           
  6645 ;; *************** function _HMI_DownSwitch *****************
  6646 ;; Defined at:
  6647 ;;		line 42 in file "HMI.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;		None
  6652 ;; Return value:  Size  Location     Type
  6653 ;;                  1    wreg      unsigned char 
  6654 ;; Registers used:
  6655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6665 ;;Total ram usage:        0 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    8
  6668 ;; This function calls:
  6669 ;;		_Port_GetPin
  6670 ;; This function is called by:
  6671 ;;		_HMI_Init
  6672 ;;		_Button_Poll
  6673 ;;		_getMode
  6674 ;;		_continuousMode
  6675 ;; This function uses a non-reentrant model
  6676 ;;
  6677                           
  6678                           	psect	text26
  6679  0149B2                     __ptext26:
  6680                           	opt stack 0
  6681  0149B2                     _HMI_DownSwitch:
  6682                           	opt stack 15
  6683                           
  6684                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  6685                           
  6686                           ;incstack = 0
  6687  0149B2  0E7E               	movlw	low _PortE
  6688  0149B4  0100               	movlb	0	; () banked
  6689  0149B6  6FC5               	movwf	Port_GetPin@pInput& (0+255),b
  6690  0149B8  0E00               	movlw	high _PortE
  6691  0149BA  0100               	movlb	0	; () banked
  6692  0149BC  6FC6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6693  0149BE  0E06               	movlw	6
  6694  0149C0  0100               	movlb	0	; () banked
  6695  0149C2  6FC7               	movwf	Port_GetPin@pPin& (0+255),b
  6696  0149C4  EC10  F0A1         	call	_Port_GetPin	;wreg free
  6697  0149C8  0012               	return	
  6698  0149CA                     __end_of_HMI_DownSwitch:
  6699                           	opt stack 0
  6700                           tosu	equ	0xFFF
  6701                           tosh	equ	0xFFE
  6702                           tosl	equ	0xFFD
  6703                           pclath	equ	0xFFA
  6704                           tblptru	equ	0xFF8
  6705                           tblptrh	equ	0xFF7
  6706                           tblptrl	equ	0xFF6
  6707                           tablat	equ	0xFF5
  6708                           prodh	equ	0xFF4
  6709                           prodl	equ	0xFF3
  6710                           postinc0	equ	0xFEE
  6711                           wreg	equ	0xFE8
  6712                           indf1	equ	0xFE7
  6713                           postdec1	equ	0xFE5
  6714                           fsr1h	equ	0xFE2
  6715                           fsr1l	equ	0xFE1
  6716                           indf2	equ	0xFDF
  6717                           postinc2	equ	0xFDE
  6718                           postdec2	equ	0xFDD
  6719                           fsr2h	equ	0xFDA
  6720                           fsr2l	equ	0xFD9
  6721                           status	equ	0xFD8
  6722                           
  6723 ;; *************** function _HMI_UpSwitch *****************
  6724 ;; Defined at:
  6725 ;;		line 37 in file "HMI.c"
  6726 ;; Parameters:    Size  Location     Type
  6727 ;;		None
  6728 ;; Auto vars:     Size  Location     Type
  6729 ;;		None
  6730 ;; Return value:  Size  Location     Type
  6731 ;;                  1    wreg      unsigned char 
  6732 ;; Registers used:
  6733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6734 ;; Tracked objects:
  6735 ;;		On entry : 0/0
  6736 ;;		On exit  : 0/0
  6737 ;;		Unchanged: 0/0
  6738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6743 ;;Total ram usage:        0 bytes
  6744 ;; Hardware stack levels used:    1
  6745 ;; Hardware stack levels required when called:    8
  6746 ;; This function calls:
  6747 ;;		_Port_GetPin
  6748 ;; This function is called by:
  6749 ;;		_HMI_Init
  6750 ;;		_Button_Poll
  6751 ;;		_getMode
  6752 ;;		_continuousMode
  6753 ;; This function uses a non-reentrant model
  6754 ;;
  6755                           
  6756                           	psect	text27
  6757  0149CA                     __ptext27:
  6758                           	opt stack 0
  6759  0149CA                     _HMI_UpSwitch:
  6760                           	opt stack 17
  6761                           
  6762                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  6763                           
  6764                           ;incstack = 0
  6765  0149CA  0E7E               	movlw	low _PortE
  6766  0149CC  0100               	movlb	0	; () banked
  6767  0149CE  6FC5               	movwf	Port_GetPin@pInput& (0+255),b
  6768  0149D0  0E00               	movlw	high _PortE
  6769  0149D2  0100               	movlb	0	; () banked
  6770  0149D4  6FC6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6771  0149D6  0E07               	movlw	7
  6772  0149D8  0100               	movlb	0	; () banked
  6773  0149DA  6FC7               	movwf	Port_GetPin@pPin& (0+255),b
  6774  0149DC  EC10  F0A1         	call	_Port_GetPin	;wreg free
  6775  0149E0  0012               	return	
  6776  0149E2                     __end_of_HMI_UpSwitch:
  6777                           	opt stack 0
  6778                           tosu	equ	0xFFF
  6779                           tosh	equ	0xFFE
  6780                           tosl	equ	0xFFD
  6781                           pclath	equ	0xFFA
  6782                           tblptru	equ	0xFF8
  6783                           tblptrh	equ	0xFF7
  6784                           tblptrl	equ	0xFF6
  6785                           tablat	equ	0xFF5
  6786                           prodh	equ	0xFF4
  6787                           prodl	equ	0xFF3
  6788                           postinc0	equ	0xFEE
  6789                           wreg	equ	0xFE8
  6790                           indf1	equ	0xFE7
  6791                           postdec1	equ	0xFE5
  6792                           fsr1h	equ	0xFE2
  6793                           fsr1l	equ	0xFE1
  6794                           indf2	equ	0xFDF
  6795                           postinc2	equ	0xFDE
  6796                           postdec2	equ	0xFDD
  6797                           fsr2h	equ	0xFDA
  6798                           fsr2l	equ	0xFD9
  6799                           status	equ	0xFD8
  6800                           
  6801 ;; *************** function _HMI_RightSwitch *****************
  6802 ;; Defined at:
  6803 ;;		line 32 in file "HMI.c"
  6804 ;; Parameters:    Size  Location     Type
  6805 ;;		None
  6806 ;; Auto vars:     Size  Location     Type
  6807 ;;		None
  6808 ;; Return value:  Size  Location     Type
  6809 ;;                  1    wreg      unsigned char 
  6810 ;; Registers used:
  6811 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6812 ;; Tracked objects:
  6813 ;;		On entry : 0/0
  6814 ;;		On exit  : 0/0
  6815 ;;		Unchanged: 0/0
  6816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6820 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;Total ram usage:        0 bytes
  6822 ;; Hardware stack levels used:    1
  6823 ;; Hardware stack levels required when called:    8
  6824 ;; This function calls:
  6825 ;;		_Port_GetPin
  6826 ;; This function is called by:
  6827 ;;		_HMI_Init
  6828 ;;		_Button_Poll
  6829 ;;		_getMode
  6830 ;;		_continuousMode
  6831 ;; This function uses a non-reentrant model
  6832 ;;
  6833                           
  6834                           	psect	text28
  6835  0149E2                     __ptext28:
  6836                           	opt stack 0
  6837  0149E2                     _HMI_RightSwitch:
  6838                           	opt stack 17
  6839                           
  6840                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  6841                           
  6842                           ;incstack = 0
  6843  0149E2  0E7E               	movlw	low _PortE
  6844  0149E4  0100               	movlb	0	; () banked
  6845  0149E6  6FC5               	movwf	Port_GetPin@pInput& (0+255),b
  6846  0149E8  0E00               	movlw	high _PortE
  6847  0149EA  0100               	movlb	0	; () banked
  6848  0149EC  6FC6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6849  0149EE  0E04               	movlw	4
  6850  0149F0  0100               	movlb	0	; () banked
  6851  0149F2  6FC7               	movwf	Port_GetPin@pPin& (0+255),b
  6852  0149F4  EC10  F0A1         	call	_Port_GetPin	;wreg free
  6853  0149F8  0012               	return	
  6854  0149FA                     __end_of_HMI_RightSwitch:
  6855                           	opt stack 0
  6856                           tosu	equ	0xFFF
  6857                           tosh	equ	0xFFE
  6858                           tosl	equ	0xFFD
  6859                           pclath	equ	0xFFA
  6860                           tblptru	equ	0xFF8
  6861                           tblptrh	equ	0xFF7
  6862                           tblptrl	equ	0xFF6
  6863                           tablat	equ	0xFF5
  6864                           prodh	equ	0xFF4
  6865                           prodl	equ	0xFF3
  6866                           postinc0	equ	0xFEE
  6867                           wreg	equ	0xFE8
  6868                           indf1	equ	0xFE7
  6869                           postdec1	equ	0xFE5
  6870                           fsr1h	equ	0xFE2
  6871                           fsr1l	equ	0xFE1
  6872                           indf2	equ	0xFDF
  6873                           postinc2	equ	0xFDE
  6874                           postdec2	equ	0xFDD
  6875                           fsr2h	equ	0xFDA
  6876                           fsr2l	equ	0xFD9
  6877                           status	equ	0xFD8
  6878                           
  6879 ;; *************** function _HMI_LeftSwitch *****************
  6880 ;; Defined at:
  6881 ;;		line 27 in file "HMI.c"
  6882 ;; Parameters:    Size  Location     Type
  6883 ;;		None
  6884 ;; Auto vars:     Size  Location     Type
  6885 ;;		None
  6886 ;; Return value:  Size  Location     Type
  6887 ;;                  1    wreg      unsigned char 
  6888 ;; Registers used:
  6889 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6890 ;; Tracked objects:
  6891 ;;		On entry : 0/0
  6892 ;;		On exit  : 0/0
  6893 ;;		Unchanged: 0/0
  6894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6898 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6899 ;;Total ram usage:        0 bytes
  6900 ;; Hardware stack levels used:    1
  6901 ;; Hardware stack levels required when called:    8
  6902 ;; This function calls:
  6903 ;;		_Port_GetPin
  6904 ;; This function is called by:
  6905 ;;		_HMI_Init
  6906 ;;		_Button_Poll
  6907 ;;		_getMode
  6908 ;;		_continuousMode
  6909 ;; This function uses a non-reentrant model
  6910 ;;
  6911                           
  6912                           	psect	text29
  6913  0149FA                     __ptext29:
  6914                           	opt stack 0
  6915  0149FA                     _HMI_LeftSwitch:
  6916                           	opt stack 15
  6917                           
  6918                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  6919                           
  6920                           ;incstack = 0
  6921  0149FA  0E7E               	movlw	low _PortE
  6922  0149FC  0100               	movlb	0	; () banked
  6923  0149FE  6FC5               	movwf	Port_GetPin@pInput& (0+255),b
  6924  014A00  0E00               	movlw	high _PortE
  6925  014A02  0100               	movlb	0	; () banked
  6926  014A04  6FC6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6927  014A06  0E05               	movlw	5
  6928  014A08  0100               	movlb	0	; () banked
  6929  014A0A  6FC7               	movwf	Port_GetPin@pPin& (0+255),b
  6930  014A0C  EC10  F0A1         	call	_Port_GetPin	;wreg free
  6931  014A10  0012               	return	
  6932  014A12                     __end_of_HMI_LeftSwitch:
  6933                           	opt stack 0
  6934                           tosu	equ	0xFFF
  6935                           tosh	equ	0xFFE
  6936                           tosl	equ	0xFFD
  6937                           pclath	equ	0xFFA
  6938                           tblptru	equ	0xFF8
  6939                           tblptrh	equ	0xFF7
  6940                           tblptrl	equ	0xFF6
  6941                           tablat	equ	0xFF5
  6942                           prodh	equ	0xFF4
  6943                           prodl	equ	0xFF3
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           indf1	equ	0xFE7
  6947                           postdec1	equ	0xFE5
  6948                           fsr1h	equ	0xFE2
  6949                           fsr1l	equ	0xFE1
  6950                           indf2	equ	0xFDF
  6951                           postinc2	equ	0xFDE
  6952                           postdec2	equ	0xFDD
  6953                           fsr2h	equ	0xFDA
  6954                           fsr2l	equ	0xFD9
  6955                           status	equ	0xFD8
  6956                           
  6957 ;; *************** function _MXK_TestButton *****************
  6958 ;; Defined at:
  6959 ;;		line 14 in file "Library/MXK.c"
  6960 ;; Parameters:    Size  Location     Type
  6961 ;;		None
  6962 ;; Auto vars:     Size  Location     Type
  6963 ;;		None
  6964 ;; Return value:  Size  Location     Type
  6965 ;;                  1    wreg      unsigned char 
  6966 ;; Registers used:
  6967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6968 ;; Tracked objects:
  6969 ;;		On entry : 0/0
  6970 ;;		On exit  : 0/0
  6971 ;;		Unchanged: 0/0
  6972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6977 ;;Total ram usage:        0 bytes
  6978 ;; Hardware stack levels used:    1
  6979 ;; Hardware stack levels required when called:    8
  6980 ;; This function calls:
  6981 ;;		_Port_GetPin
  6982 ;; This function is called by:
  6983 ;;		_FunctInitButton
  6984 ;;		_Button_Poll
  6985 ;;		_getMode
  6986 ;;		_continuousMode
  6987 ;; This function uses a non-reentrant model
  6988 ;;
  6989                           
  6990                           	psect	text30
  6991  014A12                     __ptext30:
  6992                           	opt stack 0
  6993  014A12                     _MXK_TestButton:
  6994                           	opt stack 17
  6995                           
  6996                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  6997                           
  6998                           ;incstack = 0
  6999  014A12  0E98               	movlw	low _PortB
  7000  014A14  0100               	movlb	0	; () banked
  7001  014A16  6FC5               	movwf	Port_GetPin@pInput& (0+255),b
  7002  014A18  0E01               	movlw	high _PortB
  7003  014A1A  0100               	movlb	0	; () banked
  7004  014A1C  6FC6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7005  014A1E  0E04               	movlw	4
  7006  014A20  0100               	movlb	0	; () banked
  7007  014A22  6FC7               	movwf	Port_GetPin@pPin& (0+255),b
  7008  014A24  EC10  F0A1         	call	_Port_GetPin	;wreg free
  7009  014A28  0012               	return	
  7010  014A2A                     __end_of_MXK_TestButton:
  7011                           	opt stack 0
  7012                           tosu	equ	0xFFF
  7013                           tosh	equ	0xFFE
  7014                           tosl	equ	0xFFD
  7015                           pclath	equ	0xFFA
  7016                           tblptru	equ	0xFF8
  7017                           tblptrh	equ	0xFF7
  7018                           tblptrl	equ	0xFF6
  7019                           tablat	equ	0xFF5
  7020                           prodh	equ	0xFF4
  7021                           prodl	equ	0xFF3
  7022                           postinc0	equ	0xFEE
  7023                           wreg	equ	0xFE8
  7024                           indf1	equ	0xFE7
  7025                           postdec1	equ	0xFE5
  7026                           fsr1h	equ	0xFE2
  7027                           fsr1l	equ	0xFE1
  7028                           indf2	equ	0xFDF
  7029                           postinc2	equ	0xFDE
  7030                           postdec2	equ	0xFDD
  7031                           fsr2h	equ	0xFDA
  7032                           fsr2l	equ	0xFD9
  7033                           status	equ	0xFD8
  7034                           
  7035 ;; *************** function _Port_GetQuad *****************
  7036 ;; Defined at:
  7037 ;;		line 498 in file "Library/Port.c"
  7038 ;; Parameters:    Size  Location     Type
  7039 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  7040 ;;		 -> PortE(10), PortD(10), 
  7041 ;;  pQuad           1    2[BANK0 ] enum E6776
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  Output          1    5[BANK0 ] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      unsigned char 
  7046 ;; Registers used:
  7047 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7053 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;Total ram usage:        6 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    7
  7060 ;; This function calls:
  7061 ;;		Nothing
  7062 ;; This function is called by:
  7063 ;;		_HMI_DIPSwitch
  7064 ;;		_MXK_DIPSwitch
  7065 ;;		_Port_ToggleQuad
  7066 ;; This function uses a non-reentrant model
  7067 ;;
  7068                           
  7069                           	psect	text31
  7070  014146                     __ptext31:
  7071                           	opt stack 0
  7072  014146                     _Port_GetQuad:
  7073                           	opt stack 17
  7074                           
  7075                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  7076                           
  7077                           ;incstack = 0
  7078  014146  0100               	movlb	0	; () banked
  7079  014148  EE20 F006          	lfsr	2,6
  7080  01414C  51C5               	movf	Port_GetQuad@pInput& (0+255),w,b
  7081  01414E  26D9               	addwf	fsr2l,f,c
  7082  014150  51C6               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  7083  014152  22DA               	addwfc	fsr2h,f,c
  7084  014154  CFDE F0C8          	movff	postinc2,??_Port_GetQuad
  7085  014158  CFDD F0C9          	movff	postdec2,??_Port_GetQuad+1
  7086  01415C  C0C8  FFD9         	movff	??_Port_GetQuad,fsr2l
  7087  014160  C0C9  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  7088  014164  50DF               	movf	indf2,w,c
  7089  014166  0100               	movlb	0	; () banked
  7090  014168  6FCA               	movwf	Port_GetQuad@Output& (0+255),b
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  7094  01416A  0100               	movlb	0	; () banked
  7095  01416C  51C7               	movf	Port_GetQuad@pQuad& (0+255),w,b
  7096  01416E  0D04               	mullw	4
  7097  014170  28F3               	incf	prodl,w,c
  7098  014172  0100               	movlb	0	; () banked
  7099  014174  6FC8               	movwf	??_Port_GetQuad& (0+255),b
  7100  014176  D003               	goto	u6800
  7101  014178                     u6805:
  7102  014178  0100               	movlb	0	; () banked
  7103  01417A  90D8               	bcf	status,0,c
  7104  01417C  33CA               	rrcf	Port_GetQuad@Output& (0+255),f,b
  7105  01417E                     u6800:
  7106  01417E  0100               	movlb	0	; () banked
  7107  014180  2FC8               	decfsz	??_Port_GetQuad& (0+255),f,b
  7108  014182  D7FA               	goto	u6805
  7109                           
  7110                           ;Port.c: 502: Output &= 0xF;
  7111  014184  0E0F               	movlw	15
  7112  014186  0100               	movlb	0	; () banked
  7113  014188  17CA               	andwf	Port_GetQuad@Output& (0+255),f,b
  7114                           
  7115                           ; BSR set to: 0
  7116                           ;Port.c: 503: return Output;
  7117  01418A  0100               	movlb	0	; () banked
  7118  01418C  51CA               	movf	Port_GetQuad@Output& (0+255),w,b
  7119  01418E  0012               	return	
  7120  014190                     __end_of_Port_GetQuad:
  7121                           	opt stack 0
  7122                           tosu	equ	0xFFF
  7123                           tosh	equ	0xFFE
  7124                           tosl	equ	0xFFD
  7125                           pclath	equ	0xFFA
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodh	equ	0xFF4
  7131                           prodl	equ	0xFF3
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           indf1	equ	0xFE7
  7135                           postdec1	equ	0xFE5
  7136                           fsr1h	equ	0xFE2
  7137                           fsr1l	equ	0xFE1
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function _Event_DIPSwitch *****************
  7146 ;; Defined at:
  7147 ;;		line 17 in file "Events.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  pState          1    wreg     unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  pState          1   25[BANK0 ] unsigned char 
  7152 ;;  Bar             1   26[BANK0 ] unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 0/0
  7159 ;;		On exit  : 0/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7166 ;;Total ram usage:        2 bytes
  7167 ;; Hardware stack levels used:    1
  7168 ;; Hardware stack levels required when called:   13
  7169 ;; This function calls:
  7170 ;;		_HMI_GetBar
  7171 ;;		_HMI_SetBar
  7172 ;;		_LED_Toggle
  7173 ;; This function is called by:
  7174 ;;		_FunctInitButton
  7175 ;;		_Button_Poll
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text32
  7180  01469C                     __ptext32:
  7181                           	opt stack 0
  7182  01469C                     _Event_DIPSwitch:
  7183                           	opt stack 10
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;incstack = 0
  7187                           ;Event_DIPSwitch@pState stored from wreg
  7188  01469C  0100               	movlb	0	; () banked
  7189  01469E  6FDE               	movwf	Event_DIPSwitch@pState& (0+255),b
  7190                           
  7191                           ;Events.c: 19: UINT8 Bar = HMI_GetBar();
  7192  0146A0  ECA3  F0A5         	call	_HMI_GetBar	;wreg free
  7193  0146A4  0100               	movlb	0	; () banked
  7194  0146A6  6FDF               	movwf	Event_DIPSwitch@Bar& (0+255),b
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;Events.c: 20: Bar &= 0x0F;
  7198  0146A8  0E0F               	movlw	15
  7199  0146AA  0100               	movlb	0	; () banked
  7200  0146AC  17DF               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;Events.c: 21: pState <<= 4;
  7204  0146AE  0100               	movlb	0	; () banked
  7205  0146B0  3BDE               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  7206  0146B2  0EF0               	movlw	240
  7207  0146B4  17DE               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;Events.c: 24: HMI_SetBar(pState | Bar);
  7211  0146B6  0100               	movlb	0	; () banked
  7212  0146B8  51DE               	movf	Event_DIPSwitch@pState& (0+255),w,b
  7213  0146BA  0100               	movlb	0	; () banked
  7214  0146BC  11DF               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  7215  0146BE  EC88  F0A5         	call	_HMI_SetBar
  7216                           
  7217                           ;Events.c: 27: LED_Toggle(eLED1);
  7218  0146C2  0E00               	movlw	0
  7219  0146C4  ECEC  F0A0         	call	_LED_Toggle
  7220  0146C8  0012               	return		;funcret
  7221  0146CA                     __end_of_Event_DIPSwitch:
  7222                           	opt stack 0
  7223                           tosu	equ	0xFFF
  7224                           tosh	equ	0xFFE
  7225                           tosl	equ	0xFFD
  7226                           pclath	equ	0xFFA
  7227                           tblptru	equ	0xFF8
  7228                           tblptrh	equ	0xFF7
  7229                           tblptrl	equ	0xFF6
  7230                           tablat	equ	0xFF5
  7231                           prodh	equ	0xFF4
  7232                           prodl	equ	0xFF3
  7233                           postinc0	equ	0xFEE
  7234                           wreg	equ	0xFE8
  7235                           indf1	equ	0xFE7
  7236                           postdec1	equ	0xFE5
  7237                           fsr1h	equ	0xFE2
  7238                           fsr1l	equ	0xFE1
  7239                           indf2	equ	0xFDF
  7240                           postinc2	equ	0xFDE
  7241                           postdec2	equ	0xFDD
  7242                           fsr2h	equ	0xFDA
  7243                           fsr2l	equ	0xFD9
  7244                           status	equ	0xFD8
  7245                           
  7246 ;; *************** function _Event_HMI_DownButton *****************
  7247 ;; Defined at:
  7248 ;;		line 123 in file "Events.c"
  7249 ;; Parameters:    Size  Location     Type
  7250 ;;  pState          1    wreg     unsigned char 
  7251 ;; Auto vars:     Size  Location     Type
  7252 ;;  pState          1   25[BANK0 ] unsigned char 
  7253 ;; Return value:  Size  Location     Type
  7254 ;;                  1    wreg      void 
  7255 ;; Registers used:
  7256 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7257 ;; Tracked objects:
  7258 ;;		On entry : 0/0
  7259 ;;		On exit  : 0/0
  7260 ;;		Unchanged: 0/0
  7261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7266 ;;Total ram usage:        1 bytes
  7267 ;; Hardware stack levels used:    1
  7268 ;; Hardware stack levels required when called:   13
  7269 ;; This function calls:
  7270 ;;		_HMI_SetDown
  7271 ;;		_HMI_SetNumber
  7272 ;;		_LED_Toggle
  7273 ;; This function is called by:
  7274 ;;		_HMI_Init
  7275 ;;		_Button_Poll
  7276 ;; This function uses a non-reentrant model
  7277 ;;
  7278                           
  7279                           	psect	text33
  7280  01457A                     __ptext33:
  7281                           	opt stack 0
  7282  01457A                     _Event_HMI_DownButton:
  7283                           	opt stack 10
  7284                           
  7285                           ;incstack = 0
  7286                           ;Event_HMI_DownButton@pState stored from wreg
  7287  01457A  0100               	movlb	0	; () banked
  7288  01457C  6FDE               	movwf	Event_HMI_DownButton@pState& (0+255),b
  7289                           
  7290                           ;Events.c: 126: HMI_SetDown(pState);
  7291  01457E  0100               	movlb	0	; () banked
  7292  014580  51DE               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7293  014582  EC36  F0A5         	call	_HMI_SetDown
  7294                           
  7295                           ;Events.c: 128: if (pState == 0)
  7296  014586  0100               	movlb	0	; () banked
  7297  014588  51DE               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7298  01458A  0100               	movlb	0	; () banked
  7299  01458C  A4D8               	btfss	status,2,c
  7300  01458E  D00A               	goto	l10662
  7301                           
  7302                           ; BSR set to: 0
  7303                           ;Events.c: 129: {
  7304                           ;Events.c: 130: val -= 1;
  7305  014590  0100               	movlb	0	; () banked
  7306  014592  0770               	decf	_val& (0+255),f,b
  7307  014594  A0D8               	btfss	status,0,c
  7308  014596  0771               	decf	(_val+1)& (0+255),f,b
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;Events.c: 131: HMI_SetNumber(val);
  7312  014598  C070  F0D6         	movff	_val,HMI_SetNumber@pInput
  7313  01459C  C071  F0D7         	movff	_val+1,HMI_SetNumber@pInput+1
  7314  0145A0  EC92  F0A3         	call	_HMI_SetNumber	;wreg free
  7315  0145A4                     l10662:
  7316                           
  7317                           ;Events.c: 132: }
  7318                           ;Events.c: 135: LED_Toggle(eLED1);
  7319  0145A4  0E00               	movlw	0
  7320  0145A6  ECEC  F0A0         	call	_LED_Toggle
  7321  0145AA  0012               	return		;funcret
  7322  0145AC                     __end_of_Event_HMI_DownButton:
  7323                           	opt stack 0
  7324                           tosu	equ	0xFFF
  7325                           tosh	equ	0xFFE
  7326                           tosl	equ	0xFFD
  7327                           pclath	equ	0xFFA
  7328                           tblptru	equ	0xFF8
  7329                           tblptrh	equ	0xFF7
  7330                           tblptrl	equ	0xFF6
  7331                           tablat	equ	0xFF5
  7332                           prodh	equ	0xFF4
  7333                           prodl	equ	0xFF3
  7334                           postinc0	equ	0xFEE
  7335                           wreg	equ	0xFE8
  7336                           indf1	equ	0xFE7
  7337                           postdec1	equ	0xFE5
  7338                           fsr1h	equ	0xFE2
  7339                           fsr1l	equ	0xFE1
  7340                           indf2	equ	0xFDF
  7341                           postinc2	equ	0xFDE
  7342                           postdec2	equ	0xFDD
  7343                           fsr2h	equ	0xFDA
  7344                           fsr2l	equ	0xFD9
  7345                           status	equ	0xFD8
  7346                           
  7347 ;; *************** function _Event_HMI_UpButton *****************
  7348 ;; Defined at:
  7349 ;;		line 108 in file "Events.c"
  7350 ;; Parameters:    Size  Location     Type
  7351 ;;  pState          1    wreg     unsigned char 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  pState          1   25[BANK0 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        1 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:   13
  7370 ;; This function calls:
  7371 ;;		_HMI_SetNumber
  7372 ;;		_HMI_SetUp
  7373 ;;		_LED_Toggle
  7374 ;; This function is called by:
  7375 ;;		_HMI_Init
  7376 ;;		_Button_Poll
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text34
  7381  0145AC                     __ptext34:
  7382                           	opt stack 0
  7383  0145AC                     _Event_HMI_UpButton:
  7384                           	opt stack 10
  7385                           
  7386                           ;incstack = 0
  7387                           ;Event_HMI_UpButton@pState stored from wreg
  7388  0145AC  0100               	movlb	0	; () banked
  7389  0145AE  6FDE               	movwf	Event_HMI_UpButton@pState& (0+255),b
  7390                           
  7391                           ;Events.c: 111: HMI_SetUp(pState);
  7392  0145B0  0100               	movlb	0	; () banked
  7393  0145B2  51DE               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7394  0145B4  EC15  F0A5         	call	_HMI_SetUp
  7395                           
  7396                           ;Events.c: 113: if (pState == 0)
  7397  0145B8  0100               	movlb	0	; () banked
  7398  0145BA  51DE               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7399  0145BC  0100               	movlb	0	; () banked
  7400  0145BE  A4D8               	btfss	status,2,c
  7401  0145C0  D009               	goto	l10652
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;Events.c: 114: {
  7405                           ;Events.c: 115: val += 1;
  7406  0145C2  0100               	movlb	0	; () banked
  7407  0145C4  4B70               	infsnz	_val& (0+255),f,b
  7408  0145C6  2B71               	incf	(_val+1)& (0+255),f,b
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;Events.c: 116: HMI_SetNumber(val);
  7412  0145C8  C070  F0D6         	movff	_val,HMI_SetNumber@pInput
  7413  0145CC  C071  F0D7         	movff	_val+1,HMI_SetNumber@pInput+1
  7414  0145D0  EC92  F0A3         	call	_HMI_SetNumber	;wreg free
  7415  0145D4                     l10652:
  7416                           
  7417                           ;Events.c: 117: }
  7418                           ;Events.c: 120: LED_Toggle(eLED1);
  7419  0145D4  0E00               	movlw	0
  7420  0145D6  ECEC  F0A0         	call	_LED_Toggle
  7421  0145DA  0012               	return		;funcret
  7422  0145DC                     __end_of_Event_HMI_UpButton:
  7423                           	opt stack 0
  7424                           tosu	equ	0xFFF
  7425                           tosh	equ	0xFFE
  7426                           tosl	equ	0xFFD
  7427                           pclath	equ	0xFFA
  7428                           tblptru	equ	0xFF8
  7429                           tblptrh	equ	0xFF7
  7430                           tblptrl	equ	0xFF6
  7431                           tablat	equ	0xFF5
  7432                           prodh	equ	0xFF4
  7433                           prodl	equ	0xFF3
  7434                           postinc0	equ	0xFEE
  7435                           wreg	equ	0xFE8
  7436                           indf1	equ	0xFE7
  7437                           postdec1	equ	0xFE5
  7438                           fsr1h	equ	0xFE2
  7439                           fsr1l	equ	0xFE1
  7440                           indf2	equ	0xFDF
  7441                           postinc2	equ	0xFDE
  7442                           postdec2	equ	0xFDD
  7443                           fsr2h	equ	0xFDA
  7444                           fsr2l	equ	0xFD9
  7445                           status	equ	0xFD8
  7446                           
  7447 ;; *************** function _Event_HMI_RightButton *****************
  7448 ;; Defined at:
  7449 ;;		line 91 in file "Events.c"
  7450 ;; Parameters:    Size  Location     Type
  7451 ;;  pState          1    wreg     unsigned char 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;  pState          1   25[BANK0 ] unsigned char 
  7454 ;; Return value:  Size  Location     Type
  7455 ;;                  1    wreg      void 
  7456 ;; Registers used:
  7457 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7458 ;; Tracked objects:
  7459 ;;		On entry : 0/0
  7460 ;;		On exit  : 0/0
  7461 ;;		Unchanged: 0/0
  7462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;Total ram usage:        1 bytes
  7468 ;; Hardware stack levels used:    1
  7469 ;; Hardware stack levels required when called:   13
  7470 ;; This function calls:
  7471 ;;		_HMI_SetBar
  7472 ;;		_HMI_SetRight
  7473 ;;		_LED_Toggle
  7474 ;; This function is called by:
  7475 ;;		_HMI_Init
  7476 ;;		_Button_Poll
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           	psect	text35
  7481  0142AC                     __ptext35:
  7482                           	opt stack 0
  7483  0142AC                     _Event_HMI_RightButton:
  7484                           	opt stack 10
  7485                           
  7486                           ;incstack = 0
  7487                           ;Event_HMI_RightButton@pState stored from wreg
  7488  0142AC  0100               	movlb	0	; () banked
  7489  0142AE  6FDE               	movwf	Event_HMI_RightButton@pState& (0+255),b
  7490                           
  7491                           ;Events.c: 94: HMI_SetRight(pState);
  7492  0142B0  0100               	movlb	0	; () banked
  7493  0142B2  51DE               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7494  0142B4  EC20  F0A5         	call	_HMI_SetRight
  7495                           
  7496                           ;Events.c: 96: if (pState == 0)
  7497  0142B8  0100               	movlb	0	; () banked
  7498  0142BA  51DE               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7499  0142BC  0100               	movlb	0	; () banked
  7500  0142BE  A4D8               	btfss	status,2,c
  7501  0142C0  D013               	goto	l10642
  7502                           
  7503                           ; BSR set to: 0
  7504                           ;Events.c: 97: {
  7505                           ;Events.c: 98: if (pShiftVal == 0)
  7506  0142C2  0100               	movlb	0	; () banked
  7507  0142C4  516E               	movf	_pShiftVal& (0+255),w,b
  7508  0142C6  0100               	movlb	0	; () banked
  7509  0142C8  116F               	iorwf	(_pShiftVal+1)& (0+255),w,b
  7510  0142CA  A4D8               	btfss	status,2,c
  7511  0142CC  D005               	goto	l10638
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;Events.c: 99: pShiftVal = 0xFF00;
  7515  0142CE  0EFF               	movlw	255
  7516  0142D0  0100               	movlb	0	; () banked
  7517  0142D2  6F6F               	movwf	(_pShiftVal+1)& (0+255),b
  7518  0142D4  0E00               	movlw	0
  7519  0142D6  6F6E               	movwf	_pShiftVal& (0+255),b
  7520  0142D8                     l10638:
  7521                           
  7522                           ; BSR set to: 0
  7523                           ;Events.c: 100: pShiftVal >>= 1;
  7524  0142D8  0100               	movlb	0	; () banked
  7525  0142DA  90D8               	bcf	status,0,c
  7526  0142DC  336F               	rrcf	(_pShiftVal+1)& (0+255),f,b
  7527  0142DE  336E               	rrcf	_pShiftVal& (0+255),f,b
  7528                           
  7529                           ; BSR set to: 0
  7530                           ;Events.c: 102: HMI_SetBar(pShiftVal & 0xFF);
  7531  0142E0  0100               	movlb	0	; () banked
  7532  0142E2  516E               	movf	_pShiftVal& (0+255),w,b
  7533  0142E4  EC88  F0A5         	call	_HMI_SetBar
  7534  0142E8                     l10642:
  7535                           
  7536                           ;Events.c: 103: }
  7537                           ;Events.c: 105: LED_Toggle(eLED1);
  7538  0142E8  0E00               	movlw	0
  7539  0142EA  ECEC  F0A0         	call	_LED_Toggle
  7540  0142EE  0012               	return		;funcret
  7541  0142F0                     __end_of_Event_HMI_RightButton:
  7542                           	opt stack 0
  7543                           tosu	equ	0xFFF
  7544                           tosh	equ	0xFFE
  7545                           tosl	equ	0xFFD
  7546                           pclath	equ	0xFFA
  7547                           tblptru	equ	0xFF8
  7548                           tblptrh	equ	0xFF7
  7549                           tblptrl	equ	0xFF6
  7550                           tablat	equ	0xFF5
  7551                           prodh	equ	0xFF4
  7552                           prodl	equ	0xFF3
  7553                           postinc0	equ	0xFEE
  7554                           wreg	equ	0xFE8
  7555                           indf1	equ	0xFE7
  7556                           postdec1	equ	0xFE5
  7557                           fsr1h	equ	0xFE2
  7558                           fsr1l	equ	0xFE1
  7559                           indf2	equ	0xFDF
  7560                           postinc2	equ	0xFDE
  7561                           postdec2	equ	0xFDD
  7562                           fsr2h	equ	0xFDA
  7563                           fsr2l	equ	0xFD9
  7564                           status	equ	0xFD8
  7565                           
  7566 ;; *************** function _Event_HMI_LeftButton *****************
  7567 ;; Defined at:
  7568 ;;		line 71 in file "Events.c"
  7569 ;; Parameters:    Size  Location     Type
  7570 ;;  pState          1    wreg     unsigned char 
  7571 ;; Auto vars:     Size  Location     Type
  7572 ;;  pState          1   25[BANK0 ] unsigned char 
  7573 ;; Return value:  Size  Location     Type
  7574 ;;                  1    wreg      void 
  7575 ;; Registers used:
  7576 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7577 ;; Tracked objects:
  7578 ;;		On entry : 0/0
  7579 ;;		On exit  : 0/0
  7580 ;;		Unchanged: 0/0
  7581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7583 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7584 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7585 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7586 ;;Total ram usage:        1 bytes
  7587 ;; Hardware stack levels used:    1
  7588 ;; Hardware stack levels required when called:   13
  7589 ;; This function calls:
  7590 ;;		_HMI_SetBar
  7591 ;;		_HMI_SetLeft
  7592 ;;		_LED_Toggle
  7593 ;; This function is called by:
  7594 ;;		_HMI_Init
  7595 ;;		_Button_Poll
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	text36
  7600  013EBA                     __ptext36:
  7601                           	opt stack 0
  7602  013EBA                     _Event_HMI_LeftButton:
  7603                           	opt stack 10
  7604                           
  7605                           ;incstack = 0
  7606                           ;Event_HMI_LeftButton@pState stored from wreg
  7607  013EBA  0100               	movlb	0	; () banked
  7608  013EBC  6FDE               	movwf	Event_HMI_LeftButton@pState& (0+255),b
  7609                           
  7610                           ;Events.c: 74: HMI_SetLeft(pState);
  7611  013EBE  0100               	movlb	0	; () banked
  7612  013EC0  51DE               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7613  013EC2  EC2B  F0A5         	call	_HMI_SetLeft
  7614                           
  7615                           ;Events.c: 76: if (pState == 0)
  7616  013EC6  0100               	movlb	0	; () banked
  7617  013EC8  51DE               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7618  013ECA  0100               	movlb	0	; () banked
  7619  013ECC  A4D8               	btfss	status,2,c
  7620  013ECE  D01D               	goto	l10628
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;Events.c: 77: {
  7624                           ;Events.c: 78: pShiftVal <<= 1;
  7625  013ED0  0100               	movlb	0	; () banked
  7626  013ED2  90D8               	bcf	status,0,c
  7627  013ED4  376E               	rlcf	_pShiftVal& (0+255),f,b
  7628  013ED6  376F               	rlcf	(_pShiftVal+1)& (0+255),f,b
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;Events.c: 79: if (pShiftVal == 0xFF00)
  7632  013ED8  0100               	movlb	0	; () banked
  7633  013EDA  296F               	incf	(_pShiftVal+1)& (0+255),w,b
  7634  013EDC  0100               	movlb	0	; () banked
  7635  013EDE  116E               	iorwf	_pShiftVal& (0+255),w,b
  7636  013EE0  A4D8               	btfss	status,2,c
  7637  013EE2  D006               	goto	l10622
  7638                           
  7639                           ; BSR set to: 0
  7640                           ;Events.c: 80: pShiftVal = 0;
  7641  013EE4  0E00               	movlw	0
  7642  013EE6  0100               	movlb	0	; () banked
  7643  013EE8  6F6F               	movwf	(_pShiftVal+1)& (0+255),b
  7644  013EEA  0E00               	movlw	0
  7645  013EEC  6F6E               	movwf	_pShiftVal& (0+255),b
  7646  013EEE  D009               	goto	l10626
  7647  013EF0                     l10622:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;Events.c: 81: else if (pShiftVal < 0xFF)
  7651  013EF0  0100               	movlb	0	; () banked
  7652  013EF2  516F               	movf	(_pShiftVal+1)& (0+255),w,b
  7653  013EF4  E106               	bnz	l10626
  7654  013EF6  0100               	movlb	0	; () banked
  7655  013EF8  296E               	incf	_pShiftVal& (0+255),w,b
  7656  013EFA  B0D8               	btfsc	status,0,c
  7657  013EFC  D002               	goto	l10626
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;Events.c: 82: pShiftVal |= 1;
  7661  013EFE  0100               	movlb	0	; () banked
  7662  013F00  816E               	bsf	_pShiftVal& (0+255),0,b
  7663  013F02                     l10626:
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;Events.c: 84: HMI_SetBar(pShiftVal & 0xFF);
  7667  013F02  0100               	movlb	0	; () banked
  7668  013F04  516E               	movf	_pShiftVal& (0+255),w,b
  7669  013F06  EC88  F0A5         	call	_HMI_SetBar
  7670  013F0A                     l10628:
  7671                           
  7672                           ;Events.c: 85: }
  7673                           ;Events.c: 88: LED_Toggle(eLED1);
  7674  013F0A  0E00               	movlw	0
  7675  013F0C  ECEC  F0A0         	call	_LED_Toggle
  7676  013F10  0012               	return		;funcret
  7677  013F12                     __end_of_Event_HMI_LeftButton:
  7678                           	opt stack 0
  7679                           tosu	equ	0xFFF
  7680                           tosh	equ	0xFFE
  7681                           tosl	equ	0xFFD
  7682                           pclath	equ	0xFFA
  7683                           tblptru	equ	0xFF8
  7684                           tblptrh	equ	0xFF7
  7685                           tblptrl	equ	0xFF6
  7686                           tablat	equ	0xFF5
  7687                           prodh	equ	0xFF4
  7688                           prodl	equ	0xFF3
  7689                           postinc0	equ	0xFEE
  7690                           wreg	equ	0xFE8
  7691                           indf1	equ	0xFE7
  7692                           postdec1	equ	0xFE5
  7693                           fsr1h	equ	0xFE2
  7694                           fsr1l	equ	0xFE1
  7695                           indf2	equ	0xFDF
  7696                           postinc2	equ	0xFDE
  7697                           postdec2	equ	0xFDD
  7698                           fsr2h	equ	0xFDA
  7699                           fsr2l	equ	0xFD9
  7700                           status	equ	0xFD8
  7701                           
  7702 ;; *************** function _Event_HMI_DIPSwitch *****************
  7703 ;; Defined at:
  7704 ;;		line 30 in file "Events.c"
  7705 ;; Parameters:    Size  Location     Type
  7706 ;;  pState          1    wreg     unsigned char 
  7707 ;; Auto vars:     Size  Location     Type
  7708 ;;  pState          1   25[BANK0 ] unsigned char 
  7709 ;;  Bar             1   26[BANK0 ] unsigned char 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;                  1    wreg      void 
  7712 ;; Registers used:
  7713 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7720 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;Total ram usage:        2 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:   13
  7726 ;; This function calls:
  7727 ;;		_HMI_GetBar
  7728 ;;		_HMI_SetBar
  7729 ;;		_LED_Toggle
  7730 ;; This function is called by:
  7731 ;;		_HMI_Init
  7732 ;;		_Button_Poll
  7733 ;; This function uses a non-reentrant model
  7734 ;;
  7735                           
  7736                           	psect	text37
  7737  0146F8                     __ptext37:
  7738                           	opt stack 0
  7739  0146F8                     _Event_HMI_DIPSwitch:
  7740                           	opt stack 10
  7741                           
  7742                           ;incstack = 0
  7743                           ;Event_HMI_DIPSwitch@pState stored from wreg
  7744  0146F8  0100               	movlb	0	; () banked
  7745  0146FA  6FDE               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
  7746                           
  7747                           ;Events.c: 32: UINT8 Bar = HMI_GetBar();
  7748  0146FC  ECA3  F0A5         	call	_HMI_GetBar	;wreg free
  7749  014700  0100               	movlb	0	; () banked
  7750  014702  6FDF               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;Events.c: 33: HMI_SetBar(pState | Bar);
  7754  014704  0100               	movlb	0	; () banked
  7755  014706  51DE               	movf	Event_HMI_DIPSwitch@pState& (0+255),w,b
  7756  014708  0100               	movlb	0	; () banked
  7757  01470A  11DF               	iorwf	Event_HMI_DIPSwitch@Bar& (0+255),w,b
  7758  01470C  EC88  F0A5         	call	_HMI_SetBar
  7759                           
  7760                           ;Events.c: 35: Bar &= 0xF0;
  7761  014710  0EF0               	movlw	240
  7762  014712  0100               	movlb	0	; () banked
  7763  014714  17DF               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;Events.c: 36: pState &= 0x0F;
  7767  014716  0E0F               	movlw	15
  7768  014718  0100               	movlb	0	; () banked
  7769  01471A  17DE               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;Events.c: 42: LED_Toggle(eLED1);
  7773  01471C  0E00               	movlw	0
  7774  01471E  ECEC  F0A0         	call	_LED_Toggle
  7775  014722  0012               	return		;funcret
  7776  014724                     __end_of_Event_HMI_DIPSwitch:
  7777                           	opt stack 0
  7778                           tosu	equ	0xFFF
  7779                           tosh	equ	0xFFE
  7780                           tosl	equ	0xFFD
  7781                           pclath	equ	0xFFA
  7782                           tblptru	equ	0xFF8
  7783                           tblptrh	equ	0xFF7
  7784                           tblptrl	equ	0xFF6
  7785                           tablat	equ	0xFF5
  7786                           prodh	equ	0xFF4
  7787                           prodl	equ	0xFF3
  7788                           postinc0	equ	0xFEE
  7789                           wreg	equ	0xFE8
  7790                           indf1	equ	0xFE7
  7791                           postdec1	equ	0xFE5
  7792                           fsr1h	equ	0xFE2
  7793                           fsr1l	equ	0xFE1
  7794                           indf2	equ	0xFDF
  7795                           postinc2	equ	0xFDE
  7796                           postdec2	equ	0xFDD
  7797                           fsr2h	equ	0xFDA
  7798                           fsr2l	equ	0xFD9
  7799                           status	equ	0xFD8
  7800                           
  7801 ;; *************** function _Event_TestButton *****************
  7802 ;; Defined at:
  7803 ;;		line 47 in file "Events.c"
  7804 ;; Parameters:    Size  Location     Type
  7805 ;;  pState          1    wreg     unsigned char 
  7806 ;; Auto vars:     Size  Location     Type
  7807 ;;  pState          1   25[BANK0 ] unsigned char 
  7808 ;; Return value:  Size  Location     Type
  7809 ;;                  1    wreg      void 
  7810 ;; Registers used:
  7811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7812 ;; Tracked objects:
  7813 ;;		On entry : 0/0
  7814 ;;		On exit  : 0/0
  7815 ;;		Unchanged: 0/0
  7816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7818 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;Total ram usage:        1 bytes
  7822 ;; Hardware stack levels used:    1
  7823 ;; Hardware stack levels required when called:   13
  7824 ;; This function calls:
  7825 ;;		_HMI_SetButton
  7826 ;;		_HMI_SetNumber
  7827 ;;		_LED_Toggle
  7828 ;; This function is called by:
  7829 ;;		_FunctInitButton
  7830 ;;		_Button_Poll
  7831 ;; This function uses a non-reentrant model
  7832 ;;
  7833                           
  7834                           	psect	text38
  7835  01442A                     __ptext38:
  7836                           	opt stack 0
  7837  01442A                     _Event_TestButton:
  7838                           	opt stack 10
  7839                           
  7840                           ;incstack = 0
  7841                           ;Event_TestButton@pState stored from wreg
  7842  01442A  0100               	movlb	0	; () banked
  7843  01442C  6FDE               	movwf	Event_TestButton@pState& (0+255),b
  7844                           
  7845                           ;Events.c: 51: static UINT8 j = 0;
  7846                           ;Events.c: 55: if (pState == 0)
  7847  01442E  0100               	movlb	0	; () banked
  7848  014430  51DE               	movf	Event_TestButton@pState& (0+255),w,b
  7849  014432  0100               	movlb	0	; () banked
  7850  014434  A4D8               	btfss	status,2,c
  7851  014436  D013               	goto	l10610
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;Events.c: 56: {
  7855                           ;Events.c: 57: j++;
  7856  014438  0100               	movlb	0	; () banked
  7857  01443A  2B78               	incf	Event_TestButton@j& (0+255),f,b
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;Events.c: 58: val += j;
  7861  01443C  0100               	movlb	0	; () banked
  7862  01443E  5178               	movf	Event_TestButton@j& (0+255),w,b
  7863  014440  0100               	movlb	0	; () banked
  7864  014442  2770               	addwf	_val& (0+255),f,b
  7865  014444  0E00               	movlw	0
  7866  014446  2371               	addwfc	(_val+1)& (0+255),f,b
  7867                           
  7868                           ; BSR set to: 0
  7869                           ;Events.c: 59: HMI_SetNumber( val );
  7870  014448  C070  F0D6         	movff	_val,HMI_SetNumber@pInput
  7871  01444C  C071  F0D7         	movff	_val+1,HMI_SetNumber@pInput+1
  7872  014450  EC92  F0A3         	call	_HMI_SetNumber	;wreg free
  7873                           
  7874                           ;Events.c: 62: HMI_SetButton( j & 3 );
  7875  014454  0100               	movlb	0	; () banked
  7876  014456  5178               	movf	Event_TestButton@j& (0+255),w,b
  7877  014458  0B03               	andlw	3
  7878  01445A  EC34  F09A         	call	_HMI_SetButton
  7879  01445E                     l10610:
  7880                           
  7881                           ;Events.c: 63: }
  7882                           ;Events.c: 67: LED_Toggle(eLED1);
  7883  01445E  0E00               	movlw	0
  7884  014460  ECEC  F0A0         	call	_LED_Toggle
  7885  014464  0012               	return		;funcret
  7886  014466                     __end_of_Event_TestButton:
  7887                           	opt stack 0
  7888                           tosu	equ	0xFFF
  7889                           tosh	equ	0xFFE
  7890                           tosl	equ	0xFFD
  7891                           pclath	equ	0xFFA
  7892                           tblptru	equ	0xFF8
  7893                           tblptrh	equ	0xFF7
  7894                           tblptrl	equ	0xFF6
  7895                           tablat	equ	0xFF5
  7896                           prodh	equ	0xFF4
  7897                           prodl	equ	0xFF3
  7898                           postinc0	equ	0xFEE
  7899                           wreg	equ	0xFE8
  7900                           indf1	equ	0xFE7
  7901                           postdec1	equ	0xFE5
  7902                           fsr1h	equ	0xFE2
  7903                           fsr1l	equ	0xFE1
  7904                           indf2	equ	0xFDF
  7905                           postinc2	equ	0xFDE
  7906                           postdec2	equ	0xFDD
  7907                           fsr2h	equ	0xFDA
  7908                           fsr2l	equ	0xFD9
  7909                           status	equ	0xFD8
  7910                           
  7911 ;; *************** function _HMI_SetButton *****************
  7912 ;; Defined at:
  7913 ;;		line 186 in file "HMI.c"
  7914 ;; Parameters:    Size  Location     Type
  7915 ;;  pValue          1    wreg     unsigned char 
  7916 ;; Auto vars:     Size  Location     Type
  7917 ;;  pValue          1    6[BANK0 ] unsigned char 
  7918 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  7919 ;;  v               1    7[BANK0 ] unsigned char 
  7920 ;; Return value:  Size  Location     Type
  7921 ;;                  1    wreg      void 
  7922 ;; Registers used:
  7923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  7924 ;; Tracked objects:
  7925 ;;		On entry : 0/0
  7926 ;;		On exit  : 0/0
  7927 ;;		Unchanged: 0/0
  7928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7930 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7931 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7932 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7933 ;;Total ram usage:        8 bytes
  7934 ;; Hardware stack levels used:    1
  7935 ;; Hardware stack levels required when called:    7
  7936 ;; This function calls:
  7937 ;;		Nothing
  7938 ;; This function is called by:
  7939 ;;		_Event_TestButton
  7940 ;; This function uses a non-reentrant model
  7941 ;;
  7942                           
  7943                           	psect	text39
  7944  013468                     __ptext39:
  7945                           	opt stack 0
  7946  013468                     _HMI_SetButton:
  7947                           	opt stack 15
  7948                           
  7949                           ;incstack = 0
  7950                           ;HMI_SetButton@pValue stored from wreg
  7951  013468  0100               	movlb	0	; () banked
  7952  01346A  6FCB               	movwf	HMI_SetButton@pValue& (0+255),b
  7953                           
  7954                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  7955  01346C  0E74               	movlw	low HMI_SetButton@F7211
  7956  01346E  6EF6               	movwf	tblptrl,c
  7957  013470                     	if	1	;There is more than 1 active tblptr byte
  7958  013470  0EFD               	movlw	high HMI_SetButton@F7211
  7959  013472  6EF7               	movwf	tblptrh,c
  7960  013474                     	endif
  7961  013474                     	if	1	;There are 3 active tblptr bytes
  7962  013474  0E00               	movlw	low (HMI_SetButton@F7211 shr (0+16))
  7963  013476  6EF8               	movwf	tblptru,c
  7964  013478                     	endif
  7965  013478  0009               	tblrd		*+
  7966  01347A  CFF5 F0C7          	movff	tablat,HMI_SetButton@reindex
  7967  01347E  0009               	tblrd		*+
  7968  013480  CFF5 F0C8          	movff	tablat,HMI_SetButton@reindex+1
  7969  013484  0009               	tblrd		*+
  7970  013486  CFF5 F0C9          	movff	tablat,HMI_SetButton@reindex+2
  7971  01348A  000A               	tblrd		*-
  7972  01348C  CFF5 F0CA          	movff	tablat,HMI_SetButton@reindex+3
  7973                           
  7974                           ;HMI.c: 189: UINT8 v = 0b00010001;
  7975  013490  0E11               	movlw	17
  7976  013492  0100               	movlb	0	; () banked
  7977  013494  6FCC               	movwf	HMI_SetButton@v& (0+255),b
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;HMI.c: 190: pValue &= 3;
  7981  013496  0E03               	movlw	3
  7982  013498  0100               	movlb	0	; () banked
  7983  01349A  17CB               	andwf	HMI_SetButton@pValue& (0+255),f,b
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;HMI.c: 191: v = v << reindex[pValue];
  7987  01349C  0100               	movlb	0	; () banked
  7988  01349E  51CB               	movf	HMI_SetButton@pValue& (0+255),w,b
  7989  0134A0  0D01               	mullw	1
  7990  0134A2  0EC7               	movlw	low HMI_SetButton@reindex
  7991  0134A4  24F3               	addwf	prodl,w,c
  7992  0134A6  6ED9               	movwf	fsr2l,c
  7993  0134A8  0E00               	movlw	high HMI_SetButton@reindex
  7994  0134AA  20F4               	addwfc	prodh,w,c
  7995  0134AC  6EDA               	movwf	fsr2h,c
  7996  0134AE  50DF               	movf	indf2,w,c
  7997  0134B0  0100               	movlb	0	; () banked
  7998  0134B2  6FC5               	movwf	??_HMI_SetButton& (0+255),b
  7999  0134B4  C0CC  F0C6         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  8000  0134B8  0100               	movlb	0	; () banked
  8001  0134BA  2BC5               	incf	??_HMI_SetButton& (0+255),f,b
  8002  0134BC  D003               	goto	u6874
  8003  0134BE                     u6875:
  8004  0134BE  0100               	movlb	0	; () banked
  8005  0134C0  90D8               	bcf	status,0,c
  8006  0134C2  37C6               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  8007  0134C4                     u6874:
  8008  0134C4  0100               	movlb	0	; () banked
  8009  0134C6  2FC5               	decfsz	??_HMI_SetButton& (0+255),f,b
  8010  0134C8  D7FA               	goto	u6875
  8011  0134CA  0100               	movlb	0	; () banked
  8012  0134CC  51C6               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  8013  0134CE  0100               	movlb	0	; () banked
  8014  0134D0  6FCC               	movwf	HMI_SetButton@v& (0+255),b
  8015                           
  8016                           ; BSR set to: 0
  8017                           ;HMI.c: 192: v = v >> 4;
  8018  0134D2  0100               	movlb	0	; () banked
  8019  0134D4  39CC               	swapf	HMI_SetButton@v& (0+255),w,b
  8020  0134D6  0B0F               	andlw	15
  8021  0134D8  0100               	movlb	0	; () banked
  8022  0134DA  6FCC               	movwf	HMI_SetButton@v& (0+255),b
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;HMI.c: 193: v = v & 0x0F;
  8026  0134DC  0100               	movlb	0	; () banked
  8027  0134DE  51CC               	movf	HMI_SetButton@v& (0+255),w,b
  8028  0134E0  0B0F               	andlw	15
  8029  0134E2  0100               	movlb	0	; () banked
  8030  0134E4  6FCC               	movwf	HMI_SetButton@v& (0+255),b
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;HMI.c: 194: HMIBoard.pButton = v;
  8034  0134E6  0101               	movlb	1	; () banked
  8035  0134E8  5130               	movf	(_HMIBoard+6)& (0+255),w,b
  8036  0134EA  0100               	movlb	0	; () banked
  8037  0134EC  19CC               	xorwf	HMI_SetButton@v& (0+255),w,b
  8038  0134EE  0BF0               	andlw	-16
  8039  0134F0  19CC               	xorwf	HMI_SetButton@v& (0+255),w,b
  8040  0134F2  0101               	movlb	1	; () banked
  8041  0134F4  6F30               	movwf	(_HMIBoard+6)& (0+255),b
  8042                           
  8043                           ; BSR set to: 1
  8044  0134F6  0012               	return		;funcret
  8045  0134F8                     __end_of_HMI_SetButton:
  8046                           	opt stack 0
  8047                           tosu	equ	0xFFF
  8048                           tosh	equ	0xFFE
  8049                           tosl	equ	0xFFD
  8050                           pclath	equ	0xFFA
  8051                           tblptru	equ	0xFF8
  8052                           tblptrh	equ	0xFF7
  8053                           tblptrl	equ	0xFF6
  8054                           tablat	equ	0xFF5
  8055                           prodh	equ	0xFF4
  8056                           prodl	equ	0xFF3
  8057                           postinc0	equ	0xFEE
  8058                           wreg	equ	0xFE8
  8059                           indf1	equ	0xFE7
  8060                           postdec1	equ	0xFE5
  8061                           fsr1h	equ	0xFE2
  8062                           fsr1l	equ	0xFE1
  8063                           indf2	equ	0xFDF
  8064                           postinc2	equ	0xFDE
  8065                           postdec2	equ	0xFDD
  8066                           fsr2h	equ	0xFDA
  8067                           fsr2l	equ	0xFD9
  8068                           status	equ	0xFD8
  8069                           
  8070 ;; *************** function _HMI_SetUp *****************
  8071 ;; Defined at:
  8072 ;;		line 174 in file "HMI.c"
  8073 ;; Parameters:    Size  Location     Type
  8074 ;;  pValue          1    wreg     unsigned char 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  pValue          1    0[BANK0 ] unsigned char 
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  1    wreg      void 
  8079 ;; Registers used:
  8080 ;;		wreg
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8090 ;;Total ram usage:        1 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    7
  8093 ;; This function calls:
  8094 ;;		Nothing
  8095 ;; This function is called by:
  8096 ;;		_Event_HMI_UpButton
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           	psect	text40
  8101  014A2A                     __ptext40:
  8102                           	opt stack 0
  8103  014A2A                     _HMI_SetUp:
  8104                           	opt stack 15
  8105                           
  8106                           ; BSR set to: 1
  8107                           ;incstack = 0
  8108                           ;HMI_SetUp@pValue stored from wreg
  8109  014A2A  0100               	movlb	0	; () banked
  8110  014A2C  6FC5               	movwf	HMI_SetUp@pValue& (0+255),b
  8111                           
  8112                           ;HMI.c: 176: HMIBoard.UPLED = pValue;
  8113  014A2E  0100               	movlb	0	; () banked
  8114  014A30  B1C5               	btfsc	HMI_SetUp@pValue& (0+255),0,b
  8115  014A32  D003               	bra	u6855
  8116  014A34  0101               	movlb	1	; () banked
  8117  014A36  9130               	bcf	(_HMIBoard+6)& (0+255),0,b
  8118  014A38  D002               	bra	u6856
  8119  014A3A                     u6855:
  8120  014A3A  0101               	movlb	1	; () banked
  8121  014A3C  8130               	bsf	(_HMIBoard+6)& (0+255),0,b
  8122  014A3E                     u6856:
  8123                           
  8124                           ; BSR set to: 1
  8125  014A3E  0012               	return		;funcret
  8126  014A40                     __end_of_HMI_SetUp:
  8127                           	opt stack 0
  8128                           tosu	equ	0xFFF
  8129                           tosh	equ	0xFFE
  8130                           tosl	equ	0xFFD
  8131                           pclath	equ	0xFFA
  8132                           tblptru	equ	0xFF8
  8133                           tblptrh	equ	0xFF7
  8134                           tblptrl	equ	0xFF6
  8135                           tablat	equ	0xFF5
  8136                           prodh	equ	0xFF4
  8137                           prodl	equ	0xFF3
  8138                           postinc0	equ	0xFEE
  8139                           wreg	equ	0xFE8
  8140                           indf1	equ	0xFE7
  8141                           postdec1	equ	0xFE5
  8142                           fsr1h	equ	0xFE2
  8143                           fsr1l	equ	0xFE1
  8144                           indf2	equ	0xFDF
  8145                           postinc2	equ	0xFDE
  8146                           postdec2	equ	0xFDD
  8147                           fsr2h	equ	0xFDA
  8148                           fsr2l	equ	0xFD9
  8149                           status	equ	0xFD8
  8150                           
  8151 ;; *************** function _HMI_SetRight *****************
  8152 ;; Defined at:
  8153 ;;		line 168 in file "HMI.c"
  8154 ;; Parameters:    Size  Location     Type
  8155 ;;  pValue          1    wreg     unsigned char 
  8156 ;; Auto vars:     Size  Location     Type
  8157 ;;  pValue          1    0[BANK0 ] unsigned char 
  8158 ;; Return value:  Size  Location     Type
  8159 ;;                  1    wreg      void 
  8160 ;; Registers used:
  8161 ;;		wreg
  8162 ;; Tracked objects:
  8163 ;;		On entry : 0/0
  8164 ;;		On exit  : 0/0
  8165 ;;		Unchanged: 0/0
  8166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8168 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8170 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8171 ;;Total ram usage:        1 bytes
  8172 ;; Hardware stack levels used:    1
  8173 ;; Hardware stack levels required when called:    7
  8174 ;; This function calls:
  8175 ;;		Nothing
  8176 ;; This function is called by:
  8177 ;;		_Event_HMI_RightButton
  8178 ;; This function uses a non-reentrant model
  8179 ;;
  8180                           
  8181                           	psect	text41
  8182  014A40                     __ptext41:
  8183                           	opt stack 0
  8184  014A40                     _HMI_SetRight:
  8185                           	opt stack 15
  8186                           
  8187                           ; BSR set to: 1
  8188                           ;incstack = 0
  8189                           ;HMI_SetRight@pValue stored from wreg
  8190  014A40  0100               	movlb	0	; () banked
  8191  014A42  6FC5               	movwf	HMI_SetRight@pValue& (0+255),b
  8192                           
  8193                           ;HMI.c: 170: HMIBoard.RIGHTLED = pValue;
  8194  014A44  0100               	movlb	0	; () banked
  8195  014A46  B1C5               	btfsc	HMI_SetRight@pValue& (0+255),0,b
  8196  014A48  D003               	bra	u6845
  8197  014A4A  0101               	movlb	1	; () banked
  8198  014A4C  9730               	bcf	(_HMIBoard+6)& (0+255),3,b
  8199  014A4E  D002               	bra	u6846
  8200  014A50                     u6845:
  8201  014A50  0101               	movlb	1	; () banked
  8202  014A52  8730               	bsf	(_HMIBoard+6)& (0+255),3,b
  8203  014A54                     u6846:
  8204                           
  8205                           ; BSR set to: 1
  8206  014A54  0012               	return		;funcret
  8207  014A56                     __end_of_HMI_SetRight:
  8208                           	opt stack 0
  8209                           tosu	equ	0xFFF
  8210                           tosh	equ	0xFFE
  8211                           tosl	equ	0xFFD
  8212                           pclath	equ	0xFFA
  8213                           tblptru	equ	0xFF8
  8214                           tblptrh	equ	0xFF7
  8215                           tblptrl	equ	0xFF6
  8216                           tablat	equ	0xFF5
  8217                           prodh	equ	0xFF4
  8218                           prodl	equ	0xFF3
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           indf1	equ	0xFE7
  8222                           postdec1	equ	0xFE5
  8223                           fsr1h	equ	0xFE2
  8224                           fsr1l	equ	0xFE1
  8225                           indf2	equ	0xFDF
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _HMI_SetLeft *****************
  8233 ;; Defined at:
  8234 ;;		line 162 in file "HMI.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;  pValue          1    wreg     unsigned char 
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;  pValue          1    0[BANK0 ] unsigned char 
  8239 ;; Return value:  Size  Location     Type
  8240 ;;                  1    wreg      void 
  8241 ;; Registers used:
  8242 ;;		wreg
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8249 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8250 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8252 ;;Total ram usage:        1 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:    7
  8255 ;; This function calls:
  8256 ;;		Nothing
  8257 ;; This function is called by:
  8258 ;;		_Event_HMI_LeftButton
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           	psect	text42
  8263  014A56                     __ptext42:
  8264                           	opt stack 0
  8265  014A56                     _HMI_SetLeft:
  8266                           	opt stack 15
  8267                           
  8268                           ; BSR set to: 1
  8269                           ;incstack = 0
  8270                           ;HMI_SetLeft@pValue stored from wreg
  8271  014A56  0100               	movlb	0	; () banked
  8272  014A58  6FC5               	movwf	HMI_SetLeft@pValue& (0+255),b
  8273                           
  8274                           ;HMI.c: 164: HMIBoard.LEFTLED = pValue;
  8275  014A5A  0100               	movlb	0	; () banked
  8276  014A5C  B1C5               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
  8277  014A5E  D003               	bra	u6835
  8278  014A60  0101               	movlb	1	; () banked
  8279  014A62  9530               	bcf	(_HMIBoard+6)& (0+255),2,b
  8280  014A64  D002               	bra	u6836
  8281  014A66                     u6835:
  8282  014A66  0101               	movlb	1	; () banked
  8283  014A68  8530               	bsf	(_HMIBoard+6)& (0+255),2,b
  8284  014A6A                     u6836:
  8285                           
  8286                           ; BSR set to: 1
  8287  014A6A  0012               	return		;funcret
  8288  014A6C                     __end_of_HMI_SetLeft:
  8289                           	opt stack 0
  8290                           tosu	equ	0xFFF
  8291                           tosh	equ	0xFFE
  8292                           tosl	equ	0xFFD
  8293                           pclath	equ	0xFFA
  8294                           tblptru	equ	0xFF8
  8295                           tblptrh	equ	0xFF7
  8296                           tblptrl	equ	0xFF6
  8297                           tablat	equ	0xFF5
  8298                           prodh	equ	0xFF4
  8299                           prodl	equ	0xFF3
  8300                           postinc0	equ	0xFEE
  8301                           wreg	equ	0xFE8
  8302                           indf1	equ	0xFE7
  8303                           postdec1	equ	0xFE5
  8304                           fsr1h	equ	0xFE2
  8305                           fsr1l	equ	0xFE1
  8306                           indf2	equ	0xFDF
  8307                           postinc2	equ	0xFDE
  8308                           postdec2	equ	0xFDD
  8309                           fsr2h	equ	0xFDA
  8310                           fsr2l	equ	0xFD9
  8311                           status	equ	0xFD8
  8312                           
  8313 ;; *************** function _HMI_SetNumber *****************
  8314 ;; Defined at:
  8315 ;;		line 221 in file "HMI.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;  pInput          2   17[BANK0 ] int 
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;		None
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      void 
  8322 ;; Registers used:
  8323 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8333 ;;Total ram usage:        2 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    9
  8336 ;; This function calls:
  8337 ;;		_HMI_SetSegments
  8338 ;;		_itos
  8339 ;; This function is called by:
  8340 ;;		_Event_TestButton
  8341 ;;		_Event_HMI_UpButton
  8342 ;;		_Event_HMI_DownButton
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           	psect	text43
  8347  014724                     __ptext43:
  8348                           	opt stack 0
  8349  014724                     _HMI_SetNumber:
  8350                           	opt stack 13
  8351                           
  8352                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  8353                           
  8354                           ; BSR set to: 1
  8355                           ;incstack = 0
  8356  014724  C0D6  F0CC         	movff	HMI_SetNumber@pInput,itos@input
  8357  014728  C0D7  F0CD         	movff	HMI_SetNumber@pInput+1,itos@input+1
  8358  01472C  0E2A               	movlw	low _HMIBoard
  8359  01472E  0100               	movlb	0	; () banked
  8360  014730  6FCE               	movwf	itos@destination& (0+255),b
  8361  014732  0E01               	movlw	high _HMIBoard
  8362  014734  0100               	movlb	0	; () banked
  8363  014736  6FCF               	movwf	(itos@destination+1)& (0+255),b
  8364  014738  ECD7  F092         	call	_itos	;wreg free
  8365                           
  8366                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  8367  01473C  0E2A               	movlw	low _HMIBoard
  8368  01473E  0100               	movlb	0	; () banked
  8369  014740  6FC6               	movwf	HMI_SetSegments@pString& (0+255),b
  8370  014742  0E01               	movlw	high _HMIBoard
  8371  014744  0100               	movlb	0	; () banked
  8372  014746  6FC7               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  8373  014748  EC00  F096         	call	_HMI_SetSegments	;wreg free
  8374  01474C  0012               	return		;funcret
  8375  01474E                     __end_of_HMI_SetNumber:
  8376                           	opt stack 0
  8377                           tosu	equ	0xFFF
  8378                           tosh	equ	0xFFE
  8379                           tosl	equ	0xFFD
  8380                           pclath	equ	0xFFA
  8381                           tblptru	equ	0xFF8
  8382                           tblptrh	equ	0xFF7
  8383                           tblptrl	equ	0xFF6
  8384                           tablat	equ	0xFF5
  8385                           prodh	equ	0xFF4
  8386                           prodl	equ	0xFF3
  8387                           postinc0	equ	0xFEE
  8388                           wreg	equ	0xFE8
  8389                           indf1	equ	0xFE7
  8390                           postdec1	equ	0xFE5
  8391                           fsr1h	equ	0xFE2
  8392                           fsr1l	equ	0xFE1
  8393                           indf2	equ	0xFDF
  8394                           postinc2	equ	0xFDE
  8395                           postdec2	equ	0xFDD
  8396                           fsr2h	equ	0xFDA
  8397                           fsr2l	equ	0xFD9
  8398                           status	equ	0xFD8
  8399                           
  8400 ;; *************** function _itos *****************
  8401 ;; Defined at:
  8402 ;;		line 369 in file "Library/Types.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;  input           2    7[BANK0 ] unsigned short 
  8405 ;;  destination     2    9[BANK0 ] PTR unsigned char 
  8406 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  Out             2   15[BANK0 ] unsigned short 
  8409 ;;  Length          2   13[BANK0 ] unsigned short 
  8410 ;;  Data            2   11[BANK0 ] PTR unsigned char 
  8411 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8412 ;; Return value:  Size  Location     Type
  8413 ;;                  1    wreg      void 
  8414 ;; Registers used:
  8415 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8416 ;; Tracked objects:
  8417 ;;		On entry : 0/0
  8418 ;;		On exit  : 0/0
  8419 ;;		Unchanged: 0/0
  8420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8421 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8422 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8424 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8425 ;;Total ram usage:       10 bytes
  8426 ;; Hardware stack levels used:    1
  8427 ;; Hardware stack levels required when called:    8
  8428 ;; This function calls:
  8429 ;;		___lwdiv
  8430 ;;		___lwmod
  8431 ;;		_reverse
  8432 ;; This function is called by:
  8433 ;;		_HMI_SetNumber
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           	psect	text44
  8438  0125AE                     __ptext44:
  8439                           	opt stack 0
  8440  0125AE                     _itos:
  8441                           	opt stack 13
  8442                           
  8443                           ;Types.c: 371: UINT16 Out = input;
  8444                           
  8445                           ;incstack = 0
  8446  0125AE  C0CC  F0D4         	movff	itos@input,itos@Out
  8447  0125B2  C0CD  F0D5         	movff	itos@input+1,itos@Out+1
  8448                           
  8449                           ;Types.c: 372: UINT16 Length = 0;
  8450  0125B6  0E00               	movlw	0
  8451  0125B8  0100               	movlb	0	; () banked
  8452  0125BA  6FD3               	movwf	(itos@Length+1)& (0+255),b
  8453  0125BC  0E00               	movlw	0
  8454  0125BE  6FD2               	movwf	itos@Length& (0+255),b
  8455                           
  8456                           ; BSR set to: 0
  8457                           ;Types.c: 373: char *Data = destination;
  8458  0125C0  C0CE  F0D0         	movff	itos@destination,itos@Data
  8459  0125C4  C0CF  F0D1         	movff	itos@destination+1,itos@Data+1
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;Types.c: 374: if(Out == 0)
  8463  0125C8  0100               	movlb	0	; () banked
  8464  0125CA  51D4               	movf	itos@Out& (0+255),w,b
  8465  0125CC  0100               	movlb	0	; () banked
  8466  0125CE  11D5               	iorwf	(itos@Out+1)& (0+255),w,b
  8467  0125D0  A4D8               	btfss	status,2,c
  8468  0125D2  D034               	goto	l10260
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;Types.c: 375: {
  8472                           ;Types.c: 376: Data[0] = (UINT16)'0';
  8473  0125D4  C0D0  FFD9         	movff	itos@Data,fsr2l
  8474  0125D8  C0D1  FFDA         	movff	itos@Data+1,fsr2h
  8475  0125DC  0E30               	movlw	48
  8476  0125DE  6EDF               	movwf	indf2,c
  8477                           
  8478                           ; BSR set to: 0
  8479                           ;Types.c: 377: Length = 1;
  8480  0125E0  0E00               	movlw	0
  8481  0125E2  0100               	movlb	0	; () banked
  8482  0125E4  6FD3               	movwf	(itos@Length+1)& (0+255),b
  8483  0125E6  0E01               	movlw	1
  8484  0125E8  6FD2               	movwf	itos@Length& (0+255),b
  8485                           
  8486                           ;Types.c: 378: }
  8487  0125EA  D040               	goto	l10266
  8488  0125EC                     l10252:
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;Types.c: 382: {
  8492                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  8493  0125EC  C0D4  F0C5         	movff	itos@Out,___lwmod@dividend
  8494  0125F0  C0D5  F0C6         	movff	itos@Out+1,___lwmod@dividend+1
  8495  0125F4  0E00               	movlw	0
  8496  0125F6  0100               	movlb	0	; () banked
  8497  0125F8  6FC8               	movwf	(___lwmod@divisor+1)& (0+255),b
  8498  0125FA  0E0A               	movlw	10
  8499  0125FC  6FC7               	movwf	___lwmod@divisor& (0+255),b
  8500  0125FE  EC9E  F09E         	call	___lwmod	;wreg free
  8501  012602  0100               	movlb	0	; () banked
  8502  012604  51C5               	movf	?___lwmod& (0+255),w,b
  8503  012606  0F30               	addlw	48
  8504  012608  C0D0  FFD9         	movff	itos@Data,fsr2l
  8505  01260C  C0D1  FFDA         	movff	itos@Data+1,fsr2h
  8506  012610  6EDF               	movwf	indf2,c
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;Types.c: 384: Out /= 10;
  8510  012612  C0D4  F0C5         	movff	itos@Out,___lwdiv@dividend
  8511  012616  C0D5  F0C6         	movff	itos@Out+1,___lwdiv@dividend+1
  8512  01261A  0E00               	movlw	0
  8513  01261C  0100               	movlb	0	; () banked
  8514  01261E  6FC8               	movwf	(___lwdiv@divisor+1)& (0+255),b
  8515  012620  0E0A               	movlw	10
  8516  012622  6FC7               	movwf	___lwdiv@divisor& (0+255),b
  8517  012624  ECCE  F09B         	call	___lwdiv	;wreg free
  8518  012628  C0C5  F0D4         	movff	?___lwdiv,itos@Out
  8519  01262C  C0C6  F0D5         	movff	?___lwdiv+1,itos@Out+1
  8520                           
  8521                           ;Types.c: 385: Length ++;
  8522  012630  0100               	movlb	0	; () banked
  8523  012632  4BD2               	infsnz	itos@Length& (0+255),f,b
  8524  012634  2BD3               	incf	(itos@Length+1)& (0+255),f,b
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;Types.c: 386: Data++;
  8528  012636  0100               	movlb	0	; () banked
  8529  012638  4BD0               	infsnz	itos@Data& (0+255),f,b
  8530  01263A  2BD1               	incf	(itos@Data+1)& (0+255),f,b
  8531  01263C                     l10260:
  8532                           
  8533                           ; BSR set to: 0
  8534  01263C  0100               	movlb	0	; () banked
  8535  01263E  51D4               	movf	itos@Out& (0+255),w,b
  8536  012640  0100               	movlb	0	; () banked
  8537  012642  11D5               	iorwf	(itos@Out+1)& (0+255),w,b
  8538  012644  B4D8               	btfsc	status,2,c
  8539  012646  D008               	goto	l10264
  8540                           
  8541                           ; BSR set to: 0
  8542  012648  0100               	movlb	0	; () banked
  8543  01264A  51D3               	movf	(itos@Length+1)& (0+255),w,b
  8544  01264C  E105               	bnz	l10264
  8545  01264E  0E06               	movlw	6
  8546  012650  0100               	movlb	0	; () banked
  8547  012652  5DD2               	subwf	itos@Length& (0+255),w,b
  8548  012654  A0D8               	btfss	status,0,c
  8549  012656  D7CA               	goto	l10252
  8550  012658                     l10264:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;Types.c: 387: }
  8554                           ;Types.c: 388: reverse(destination, Length);
  8555  012658  C0CE  F0C5         	movff	itos@destination,reverse@input
  8556  01265C  C0CF  F0C6         	movff	itos@destination+1,reverse@input+1
  8557  012660  C0D2  F0C7         	movff	itos@Length,reverse@length
  8558  012664  C0D3  F0C8         	movff	itos@Length+1,reverse@length+1
  8559  012668  EC64  F09D         	call	_reverse	;wreg free
  8560  01266C                     l10266:
  8561                           
  8562                           ;Types.c: 389: }
  8563                           ;Types.c: 390: destination[Length] = '\0';
  8564  01266C  0100               	movlb	0	; () banked
  8565  01266E  51D2               	movf	itos@Length& (0+255),w,b
  8566  012670  0100               	movlb	0	; () banked
  8567  012672  25CE               	addwf	itos@destination& (0+255),w,b
  8568  012674  6ED9               	movwf	fsr2l,c
  8569  012676  0100               	movlb	0	; () banked
  8570  012678  51D3               	movf	(itos@Length+1)& (0+255),w,b
  8571  01267A  0100               	movlb	0	; () banked
  8572  01267C  21CF               	addwfc	(itos@destination+1)& (0+255),w,b
  8573  01267E  6EDA               	movwf	fsr2h,c
  8574  012680  0E00               	movlw	0
  8575  012682  6EDF               	movwf	indf2,c
  8576                           
  8577                           ; BSR set to: 0
  8578  012684  0012               	return		;funcret
  8579  012686                     __end_of_itos:
  8580                           	opt stack 0
  8581                           tosu	equ	0xFFF
  8582                           tosh	equ	0xFFE
  8583                           tosl	equ	0xFFD
  8584                           pclath	equ	0xFFA
  8585                           tblptru	equ	0xFF8
  8586                           tblptrh	equ	0xFF7
  8587                           tblptrl	equ	0xFF6
  8588                           tablat	equ	0xFF5
  8589                           prodh	equ	0xFF4
  8590                           prodl	equ	0xFF3
  8591                           postinc0	equ	0xFEE
  8592                           wreg	equ	0xFE8
  8593                           indf1	equ	0xFE7
  8594                           postdec1	equ	0xFE5
  8595                           fsr1h	equ	0xFE2
  8596                           fsr1l	equ	0xFE1
  8597                           indf2	equ	0xFDF
  8598                           postinc2	equ	0xFDE
  8599                           postdec2	equ	0xFDD
  8600                           fsr2h	equ	0xFDA
  8601                           fsr2l	equ	0xFD9
  8602                           status	equ	0xFD8
  8603                           
  8604 ;; *************** function _reverse *****************
  8605 ;; Defined at:
  8606 ;;		line 357 in file "Library/Types.c"
  8607 ;; Parameters:    Size  Location     Type
  8608 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8609 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8610 ;;  length          2    2[BANK0 ] unsigned short 
  8611 ;; Auto vars:     Size  Location     Type
  8612 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8613 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8614 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8615 ;; Return value:  Size  Location     Type
  8616 ;;                  1    wreg      void 
  8617 ;; Registers used:
  8618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8619 ;; Tracked objects:
  8620 ;;		On entry : 0/0
  8621 ;;		On exit  : 0/0
  8622 ;;		Unchanged: 0/0
  8623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8624 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;Total ram usage:        7 bytes
  8629 ;; Hardware stack levels used:    1
  8630 ;; Hardware stack levels required when called:    7
  8631 ;; This function calls:
  8632 ;;		Nothing
  8633 ;; This function is called by:
  8634 ;;		_itos
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           	psect	text45
  8639  013AC8                     __ptext45:
  8640                           	opt stack 0
  8641  013AC8                     _reverse:
  8642                           	opt stack 13
  8643                           
  8644                           ;Types.c: 359: char tempVar,
  8645                           ;Types.c: 360: *iterator = input + length;
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;incstack = 0
  8649  013AC8  0100               	movlb	0	; () banked
  8650  013ACA  51C7               	movf	reverse@length& (0+255),w,b
  8651  013ACC  0100               	movlb	0	; () banked
  8652  013ACE  25C5               	addwf	reverse@input& (0+255),w,b
  8653  013AD0  0100               	movlb	0	; () banked
  8654  013AD2  6FCA               	movwf	reverse@iterator& (0+255),b
  8655  013AD4  0100               	movlb	0	; () banked
  8656  013AD6  51C8               	movf	(reverse@length+1)& (0+255),w,b
  8657  013AD8  0100               	movlb	0	; () banked
  8658  013ADA  21C6               	addwfc	(reverse@input+1)& (0+255),w,b
  8659  013ADC  0100               	movlb	0	; () banked
  8660  013ADE  6FCB               	movwf	(reverse@iterator+1)& (0+255),b
  8661                           
  8662                           ;Types.c: 362: while ( --iterator > input )
  8663  013AE0  D01A               	goto	l10194
  8664  013AE2                     l10186:
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;Types.c: 363: {
  8668                           ;Types.c: 364: tempVar = *input;
  8669  013AE2  C0C5  FFD9         	movff	reverse@input,fsr2l
  8670  013AE6  C0C6  FFDA         	movff	reverse@input+1,fsr2h
  8671  013AEA  50DF               	movf	indf2,w,c
  8672  013AEC  0100               	movlb	0	; () banked
  8673  013AEE  6FC9               	movwf	reverse@tempVar& (0+255),b
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;Types.c: 365: *input++=*iterator;
  8677  013AF0  C0CA  FFD9         	movff	reverse@iterator,fsr2l
  8678  013AF4  C0CB  FFDA         	movff	reverse@iterator+1,fsr2h
  8679  013AF8  C0C5  FFE1         	movff	reverse@input,fsr1l
  8680  013AFC  C0C6  FFE2         	movff	reverse@input+1,fsr1h
  8681  013B00  CFDF FFE7          	movff	indf2,indf1
  8682                           
  8683                           ; BSR set to: 0
  8684  013B04  0100               	movlb	0	; () banked
  8685  013B06  4BC5               	infsnz	reverse@input& (0+255),f,b
  8686  013B08  2BC6               	incf	(reverse@input+1)& (0+255),f,b
  8687                           
  8688                           ; BSR set to: 0
  8689                           ;Types.c: 366: *iterator=tempVar;
  8690  013B0A  C0CA  FFD9         	movff	reverse@iterator,fsr2l
  8691  013B0E  C0CB  FFDA         	movff	reverse@iterator+1,fsr2h
  8692  013B12  C0C9  FFDF         	movff	reverse@tempVar,indf2
  8693  013B16                     l10194:
  8694                           
  8695                           ; BSR set to: 0
  8696  013B16  0100               	movlb	0	; () banked
  8697  013B18  07CA               	decf	reverse@iterator& (0+255),f,b
  8698  013B1A  A0D8               	btfss	status,0,c
  8699  013B1C  07CB               	decf	(reverse@iterator+1)& (0+255),f,b
  8700  013B1E  0100               	movlb	0	; () banked
  8701  013B20  51CA               	movf	reverse@iterator& (0+255),w,b
  8702  013B22  0100               	movlb	0	; () banked
  8703  013B24  5DC5               	subwf	reverse@input& (0+255),w,b
  8704  013B26  0100               	movlb	0	; () banked
  8705  013B28  51CB               	movf	(reverse@iterator+1)& (0+255),w,b
  8706  013B2A  0100               	movlb	0	; () banked
  8707  013B2C  59C6               	subwfb	(reverse@input+1)& (0+255),w,b
  8708  013B2E  B0D8               	btfsc	status,0,c
  8709  013B30  0012               	return	
  8710  013B32  D7D7               	goto	l10186
  8711  013B34                     __end_of_reverse:
  8712                           	opt stack 0
  8713                           tosu	equ	0xFFF
  8714                           tosh	equ	0xFFE
  8715                           tosl	equ	0xFFD
  8716                           pclath	equ	0xFFA
  8717                           tblptru	equ	0xFF8
  8718                           tblptrh	equ	0xFF7
  8719                           tblptrl	equ	0xFF6
  8720                           tablat	equ	0xFF5
  8721                           prodh	equ	0xFF4
  8722                           prodl	equ	0xFF3
  8723                           postinc0	equ	0xFEE
  8724                           wreg	equ	0xFE8
  8725                           indf1	equ	0xFE7
  8726                           postdec1	equ	0xFE5
  8727                           fsr1h	equ	0xFE2
  8728                           fsr1l	equ	0xFE1
  8729                           indf2	equ	0xFDF
  8730                           postinc2	equ	0xFDE
  8731                           postdec2	equ	0xFDD
  8732                           fsr2h	equ	0xFDA
  8733                           fsr2l	equ	0xFD9
  8734                           status	equ	0xFD8
  8735                           
  8736 ;; *************** function ___lwmod *****************
  8737 ;; Defined at:
  8738 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwmod.c"
  8739 ;; Parameters:    Size  Location     Type
  8740 ;;  dividend        2    0[BANK0 ] unsigned int 
  8741 ;;  divisor         2    2[BANK0 ] unsigned int 
  8742 ;; Auto vars:     Size  Location     Type
  8743 ;;  counter         1    4[BANK0 ] unsigned char 
  8744 ;; Return value:  Size  Location     Type
  8745 ;;                  2    0[BANK0 ] unsigned int 
  8746 ;; Registers used:
  8747 ;;		wreg, status,2, status,0
  8748 ;; Tracked objects:
  8749 ;;		On entry : 0/0
  8750 ;;		On exit  : 0/0
  8751 ;;		Unchanged: 0/0
  8752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8753 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8754 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8756 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8757 ;;Total ram usage:        5 bytes
  8758 ;; Hardware stack levels used:    1
  8759 ;; Hardware stack levels required when called:    7
  8760 ;; This function calls:
  8761 ;;		Nothing
  8762 ;; This function is called by:
  8763 ;;		_itos
  8764 ;; This function uses a non-reentrant model
  8765 ;;
  8766                           
  8767                           	psect	text46
  8768  013D3C                     __ptext46:
  8769                           	opt stack 0
  8770  013D3C                     ___lwmod:
  8771                           	opt stack 13
  8772                           
  8773                           ; BSR set to: 0
  8774                           ;incstack = 0
  8775  013D3C  0100               	movlb	0	; () banked
  8776  013D3E  51C7               	movf	___lwmod@divisor& (0+255),w,b
  8777  013D40  0100               	movlb	0	; () banked
  8778  013D42  11C8               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  8779  013D44  B4D8               	btfsc	status,2,c
  8780  013D46  D026               	goto	l2517
  8781                           
  8782                           ; BSR set to: 0
  8783  013D48  0E01               	movlw	1
  8784  013D4A  0100               	movlb	0	; () banked
  8785  013D4C  6FC9               	movwf	___lwmod@counter& (0+255),b
  8786  013D4E  D006               	goto	l10224
  8787  013D50                     l10222:
  8788                           
  8789                           ; BSR set to: 0
  8790  013D50  0100               	movlb	0	; () banked
  8791  013D52  90D8               	bcf	status,0,c
  8792  013D54  37C7               	rlcf	___lwmod@divisor& (0+255),f,b
  8793  013D56  37C8               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  8794  013D58  0100               	movlb	0	; () banked
  8795  013D5A  2BC9               	incf	___lwmod@counter& (0+255),f,b
  8796  013D5C                     l10224:
  8797                           
  8798                           ; BSR set to: 0
  8799  013D5C  0100               	movlb	0	; () banked
  8800  013D5E  AFC8               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  8801  013D60  D7F7               	goto	l10222
  8802  013D62                     l10226:
  8803                           
  8804                           ; BSR set to: 0
  8805  013D62  0100               	movlb	0	; () banked
  8806  013D64  51C7               	movf	___lwmod@divisor& (0+255),w,b
  8807  013D66  0100               	movlb	0	; () banked
  8808  013D68  5DC5               	subwf	___lwmod@dividend& (0+255),w,b
  8809  013D6A  0100               	movlb	0	; () banked
  8810  013D6C  51C8               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8811  013D6E  0100               	movlb	0	; () banked
  8812  013D70  59C6               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  8813  013D72  A0D8               	btfss	status,0,c
  8814  013D74  D008               	goto	l10230
  8815                           
  8816                           ; BSR set to: 0
  8817  013D76  0100               	movlb	0	; () banked
  8818  013D78  51C7               	movf	___lwmod@divisor& (0+255),w,b
  8819  013D7A  0100               	movlb	0	; () banked
  8820  013D7C  5FC5               	subwf	___lwmod@dividend& (0+255),f,b
  8821  013D7E  0100               	movlb	0	; () banked
  8822  013D80  51C8               	movf	(___lwmod@divisor+1)& (0+255),w,b
  8823  013D82  0100               	movlb	0	; () banked
  8824  013D84  5BC6               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  8825  013D86                     l10230:
  8826                           
  8827                           ; BSR set to: 0
  8828  013D86  0100               	movlb	0	; () banked
  8829  013D88  90D8               	bcf	status,0,c
  8830  013D8A  33C8               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  8831  013D8C  33C7               	rrcf	___lwmod@divisor& (0+255),f,b
  8832                           
  8833                           ; BSR set to: 0
  8834  013D8E  0100               	movlb	0	; () banked
  8835  013D90  2FC9               	decfsz	___lwmod@counter& (0+255),f,b
  8836  013D92  D7E7               	goto	l10226
  8837  013D94                     l2517:
  8838                           
  8839                           ; BSR set to: 0
  8840  013D94  C0C5  F0C5         	movff	___lwmod@dividend,?___lwmod
  8841  013D98  C0C6  F0C6         	movff	___lwmod@dividend+1,?___lwmod+1
  8842                           
  8843                           ; BSR set to: 0
  8844  013D9C  0012               	return		;funcret
  8845  013D9E                     __end_of___lwmod:
  8846                           	opt stack 0
  8847                           tosu	equ	0xFFF
  8848                           tosh	equ	0xFFE
  8849                           tosl	equ	0xFFD
  8850                           pclath	equ	0xFFA
  8851                           tblptru	equ	0xFF8
  8852                           tblptrh	equ	0xFF7
  8853                           tblptrl	equ	0xFF6
  8854                           tablat	equ	0xFF5
  8855                           prodh	equ	0xFF4
  8856                           prodl	equ	0xFF3
  8857                           postinc0	equ	0xFEE
  8858                           wreg	equ	0xFE8
  8859                           indf1	equ	0xFE7
  8860                           postdec1	equ	0xFE5
  8861                           fsr1h	equ	0xFE2
  8862                           fsr1l	equ	0xFE1
  8863                           indf2	equ	0xFDF
  8864                           postinc2	equ	0xFDE
  8865                           postdec2	equ	0xFDD
  8866                           fsr2h	equ	0xFDA
  8867                           fsr2l	equ	0xFD9
  8868                           status	equ	0xFD8
  8869                           
  8870 ;; *************** function ___lwdiv *****************
  8871 ;; Defined at:
  8872 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  8873 ;; Parameters:    Size  Location     Type
  8874 ;;  dividend        2    0[BANK0 ] unsigned int 
  8875 ;;  divisor         2    2[BANK0 ] unsigned int 
  8876 ;; Auto vars:     Size  Location     Type
  8877 ;;  quotient        2    5[BANK0 ] unsigned int 
  8878 ;;  counter         1    4[BANK0 ] unsigned char 
  8879 ;; Return value:  Size  Location     Type
  8880 ;;                  2    0[BANK0 ] unsigned int 
  8881 ;; Registers used:
  8882 ;;		wreg, status,2, status,0
  8883 ;; Tracked objects:
  8884 ;;		On entry : 0/0
  8885 ;;		On exit  : 0/0
  8886 ;;		Unchanged: 0/0
  8887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8888 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8889 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8891 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8892 ;;Total ram usage:        7 bytes
  8893 ;; Hardware stack levels used:    1
  8894 ;; Hardware stack levels required when called:    7
  8895 ;; This function calls:
  8896 ;;		Nothing
  8897 ;; This function is called by:
  8898 ;;		_itos
  8899 ;; This function uses a non-reentrant model
  8900 ;;
  8901                           
  8902                           	psect	text47
  8903  01379C                     __ptext47:
  8904                           	opt stack 0
  8905  01379C                     ___lwdiv:
  8906                           	opt stack 13
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;incstack = 0
  8910  01379C  0E00               	movlw	0
  8911  01379E  0100               	movlb	0	; () banked
  8912  0137A0  6FCB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  8913  0137A2  0E00               	movlw	0
  8914  0137A4  6FCA               	movwf	___lwdiv@quotient& (0+255),b
  8915                           
  8916                           ; BSR set to: 0
  8917  0137A6  0100               	movlb	0	; () banked
  8918  0137A8  51C7               	movf	___lwdiv@divisor& (0+255),w,b
  8919  0137AA  0100               	movlb	0	; () banked
  8920  0137AC  11C8               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  8921  0137AE  B4D8               	btfsc	status,2,c
  8922  0137B0  D02C               	goto	l2507
  8923                           
  8924                           ; BSR set to: 0
  8925  0137B2  0E01               	movlw	1
  8926  0137B4  0100               	movlb	0	; () banked
  8927  0137B6  6FC9               	movwf	___lwdiv@counter& (0+255),b
  8928  0137B8  D006               	goto	l10204
  8929  0137BA                     l10202:
  8930                           
  8931                           ; BSR set to: 0
  8932  0137BA  0100               	movlb	0	; () banked
  8933  0137BC  90D8               	bcf	status,0,c
  8934  0137BE  37C7               	rlcf	___lwdiv@divisor& (0+255),f,b
  8935  0137C0  37C8               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  8936  0137C2  0100               	movlb	0	; () banked
  8937  0137C4  2BC9               	incf	___lwdiv@counter& (0+255),f,b
  8938  0137C6                     l10204:
  8939                           
  8940                           ; BSR set to: 0
  8941  0137C6  0100               	movlb	0	; () banked
  8942  0137C8  AFC8               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  8943  0137CA  D7F7               	goto	l10202
  8944  0137CC                     l10206:
  8945                           
  8946                           ; BSR set to: 0
  8947  0137CC  0100               	movlb	0	; () banked
  8948  0137CE  90D8               	bcf	status,0,c
  8949  0137D0  37CA               	rlcf	___lwdiv@quotient& (0+255),f,b
  8950  0137D2  37CB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  8951                           
  8952                           ; BSR set to: 0
  8953  0137D4  0100               	movlb	0	; () banked
  8954  0137D6  51C7               	movf	___lwdiv@divisor& (0+255),w,b
  8955  0137D8  0100               	movlb	0	; () banked
  8956  0137DA  5DC5               	subwf	___lwdiv@dividend& (0+255),w,b
  8957  0137DC  0100               	movlb	0	; () banked
  8958  0137DE  51C8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8959  0137E0  0100               	movlb	0	; () banked
  8960  0137E2  59C6               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  8961  0137E4  A0D8               	btfss	status,0,c
  8962  0137E6  D00A               	goto	l10214
  8963                           
  8964                           ; BSR set to: 0
  8965  0137E8  0100               	movlb	0	; () banked
  8966  0137EA  51C7               	movf	___lwdiv@divisor& (0+255),w,b
  8967  0137EC  0100               	movlb	0	; () banked
  8968  0137EE  5FC5               	subwf	___lwdiv@dividend& (0+255),f,b
  8969  0137F0  0100               	movlb	0	; () banked
  8970  0137F2  51C8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  8971  0137F4  0100               	movlb	0	; () banked
  8972  0137F6  5BC6               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  8973                           
  8974                           ; BSR set to: 0
  8975  0137F8  0100               	movlb	0	; () banked
  8976  0137FA  81CA               	bsf	___lwdiv@quotient& (0+255),0,b
  8977  0137FC                     l10214:
  8978                           
  8979                           ; BSR set to: 0
  8980  0137FC  0100               	movlb	0	; () banked
  8981  0137FE  90D8               	bcf	status,0,c
  8982  013800  33C8               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  8983  013802  33C7               	rrcf	___lwdiv@divisor& (0+255),f,b
  8984                           
  8985                           ; BSR set to: 0
  8986  013804  0100               	movlb	0	; () banked
  8987  013806  2FC9               	decfsz	___lwdiv@counter& (0+255),f,b
  8988  013808  D7E1               	goto	l10206
  8989  01380A                     l2507:
  8990                           
  8991                           ; BSR set to: 0
  8992  01380A  C0CA  F0C5         	movff	___lwdiv@quotient,?___lwdiv
  8993  01380E  C0CB  F0C6         	movff	___lwdiv@quotient+1,?___lwdiv+1
  8994                           
  8995                           ; BSR set to: 0
  8996  013812  0012               	return		;funcret
  8997  013814                     __end_of___lwdiv:
  8998                           	opt stack 0
  8999                           tosu	equ	0xFFF
  9000                           tosh	equ	0xFFE
  9001                           tosl	equ	0xFFD
  9002                           pclath	equ	0xFFA
  9003                           tblptru	equ	0xFF8
  9004                           tblptrh	equ	0xFF7
  9005                           tblptrl	equ	0xFF6
  9006                           tablat	equ	0xFF5
  9007                           prodh	equ	0xFF4
  9008                           prodl	equ	0xFF3
  9009                           postinc0	equ	0xFEE
  9010                           wreg	equ	0xFE8
  9011                           indf1	equ	0xFE7
  9012                           postdec1	equ	0xFE5
  9013                           fsr1h	equ	0xFE2
  9014                           fsr1l	equ	0xFE1
  9015                           indf2	equ	0xFDF
  9016                           postinc2	equ	0xFDE
  9017                           postdec2	equ	0xFDD
  9018                           fsr2h	equ	0xFDA
  9019                           fsr2l	equ	0xFD9
  9020                           status	equ	0xFD8
  9021                           
  9022 ;; *************** function _HMI_SetSegments *****************
  9023 ;; Defined at:
  9024 ;;		line 226 in file "HMI.c"
  9025 ;; Parameters:    Size  Location     Type
  9026 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  9027 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9028 ;; Auto vars:     Size  Location     Type
  9029 ;;  in              2    4[BANK0 ] unsigned short 
  9030 ;; Return value:  Size  Location     Type
  9031 ;;                  1    wreg      void 
  9032 ;; Registers used:
  9033 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9034 ;; Tracked objects:
  9035 ;;		On entry : 0/0
  9036 ;;		On exit  : 0/0
  9037 ;;		Unchanged: 0/0
  9038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9039 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9040 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9041 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9042 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9043 ;;Total ram usage:        5 bytes
  9044 ;; Hardware stack levels used:    1
  9045 ;; Hardware stack levels required when called:    8
  9046 ;; This function calls:
  9047 ;;		_ToSegment
  9048 ;; This function is called by:
  9049 ;;		_HMI_SetNumber
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           	psect	text48
  9054  012C00                     __ptext48:
  9055                           	opt stack 0
  9056  012C00                     _HMI_SetSegments:
  9057                           	opt stack 13
  9058                           
  9059                           ;HMI.c: 228: UINT16 in=0;
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;incstack = 0
  9063  012C00  0E00               	movlw	0
  9064  012C02  0100               	movlb	0	; () banked
  9065  012C04  6FCA               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  9066  012C06  0E00               	movlw	0
  9067  012C08  6FC9               	movwf	HMI_SetSegments@in& (0+255),b
  9068                           
  9069                           ;HMI.c: 229: while(*pString)
  9070  012C0A  D038               	goto	l10332
  9071  012C0C                     l10316:
  9072                           
  9073                           ; BSR set to: 0
  9074                           ;HMI.c: 230: {
  9075                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  9076  012C0C  0E2A               	movlw	low _HMIBoard
  9077  012C0E  0100               	movlb	0	; () banked
  9078  012C10  25C9               	addwf	HMI_SetSegments@in& (0+255),w,b
  9079  012C12  6ED9               	movwf	fsr2l,c
  9080  012C14  0E01               	movlw	high _HMIBoard
  9081  012C16  0100               	movlb	0	; () banked
  9082  012C18  21CA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9083  012C1A  6EDA               	movwf	fsr2h,c
  9084  012C1C  C0C6  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  9085  012C20  C0C7  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  9086  012C24  50E7               	movf	indf1,w,c
  9087  012C26  EC3D  F085         	call	_ToSegment
  9088  012C2A  6EDF               	movwf	indf2,c
  9089                           
  9090                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  9091  012C2C  0E2A               	movlw	low _HMIBoard
  9092  012C2E  0100               	movlb	0	; () banked
  9093  012C30  25C9               	addwf	HMI_SetSegments@in& (0+255),w,b
  9094  012C32  6ED9               	movwf	fsr2l,c
  9095  012C34  0E01               	movlw	high _HMIBoard
  9096  012C36  0100               	movlb	0	; () banked
  9097  012C38  21CA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9098  012C3A  6EDA               	movwf	fsr2h,c
  9099  012C3C  0E80               	movlw	128
  9100  012C3E  18DE               	xorwf	postinc2,w,c
  9101  012C40  A4D8               	btfss	status,2,c
  9102  012C42  D00E               	goto	l10324
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;HMI.c: 234: {
  9106                           ;HMI.c: 235: in--;
  9107  012C44  0100               	movlb	0	; () banked
  9108  012C46  07C9               	decf	HMI_SetSegments@in& (0+255),f,b
  9109  012C48  A0D8               	btfss	status,0,c
  9110  012C4A  07CA               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  9114  012C4C  0E2A               	movlw	low _HMIBoard
  9115  012C4E  0100               	movlb	0	; () banked
  9116  012C50  25C9               	addwf	HMI_SetSegments@in& (0+255),w,b
  9117  012C52  6ED9               	movwf	fsr2l,c
  9118  012C54  0E01               	movlw	high _HMIBoard
  9119  012C56  0100               	movlb	0	; () banked
  9120  012C58  21CA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9121  012C5A  6EDA               	movwf	fsr2h,c
  9122  012C5C  0E00               	movlw	0
  9123  012C5E  8EDB               	bsf	plusw2,7,c
  9124  012C60                     l10324:
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;HMI.c: 237: }
  9128                           ;HMI.c: 239: pString++;
  9129  012C60  0100               	movlb	0	; () banked
  9130  012C62  4BC6               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  9131  012C64  2BC7               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  9132                           
  9133                           ; BSR set to: 0
  9134                           ;HMI.c: 240: in++;
  9135  012C66  0100               	movlb	0	; () banked
  9136  012C68  4BC9               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9137  012C6A  2BCA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9138                           
  9139                           ; BSR set to: 0
  9140                           ;HMI.c: 241: if (in>=6)
  9141  012C6C  0100               	movlb	0	; () banked
  9142  012C6E  51CA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9143  012C70  E11A               	bnz	l10338
  9144  012C72  0E06               	movlw	6
  9145  012C74  0100               	movlb	0	; () banked
  9146  012C76  5DC9               	subwf	HMI_SetSegments@in& (0+255),w,b
  9147  012C78  B0D8               	btfsc	status,0,c
  9148  012C7A  D015               	goto	l10338
  9149  012C7C                     l10332:
  9150                           
  9151                           ; BSR set to: 0
  9152  012C7C  C0C6  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  9153  012C80  C0C7  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  9154  012C84  50DF               	movf	indf2,w,c
  9155  012C86  B4D8               	btfsc	status,2,c
  9156  012C88  D00E               	goto	l10338
  9157  012C8A  D7C0               	goto	l10316
  9158  012C8C                     l10334:
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;HMI.c: 245: {
  9162                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  9163  012C8C  0E2A               	movlw	low _HMIBoard
  9164  012C8E  0100               	movlb	0	; () banked
  9165  012C90  25C9               	addwf	HMI_SetSegments@in& (0+255),w,b
  9166  012C92  6ED9               	movwf	fsr2l,c
  9167  012C94  0E01               	movlw	high _HMIBoard
  9168  012C96  0100               	movlb	0	; () banked
  9169  012C98  21CA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9170  012C9A  6EDA               	movwf	fsr2h,c
  9171  012C9C  0E00               	movlw	0
  9172  012C9E  6EDF               	movwf	indf2,c
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;HMI.c: 247: in++;
  9176  012CA0  0100               	movlb	0	; () banked
  9177  012CA2  4BC9               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9178  012CA4  2BCA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9179  012CA6                     l10338:
  9180                           
  9181                           ; BSR set to: 0
  9182  012CA6  0100               	movlb	0	; () banked
  9183  012CA8  51CA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9184  012CAA  E106               	bnz	l1215
  9185  012CAC  0E06               	movlw	6
  9186  012CAE  0100               	movlb	0	; () banked
  9187  012CB0  5DC9               	subwf	HMI_SetSegments@in& (0+255),w,b
  9188  012CB2  B0D8               	btfsc	status,0,c
  9189  012CB4  0012               	return	
  9190  012CB6  D7EA               	goto	l10334
  9191  012CB8                     l1215:
  9192                           
  9193                           ; BSR set to: 0
  9194  012CB8  0012               	return		;funcret
  9195  012CBA                     __end_of_HMI_SetSegments:
  9196                           	opt stack 0
  9197                           tosu	equ	0xFFF
  9198                           tosh	equ	0xFFE
  9199                           tosl	equ	0xFFD
  9200                           pclath	equ	0xFFA
  9201                           tblptru	equ	0xFF8
  9202                           tblptrh	equ	0xFF7
  9203                           tblptrl	equ	0xFF6
  9204                           tablat	equ	0xFF5
  9205                           prodh	equ	0xFF4
  9206                           prodl	equ	0xFF3
  9207                           postinc0	equ	0xFEE
  9208                           wreg	equ	0xFE8
  9209                           indf1	equ	0xFE7
  9210                           postdec1	equ	0xFE5
  9211                           fsr1h	equ	0xFE2
  9212                           fsr1l	equ	0xFE1
  9213                           indf2	equ	0xFDF
  9214                           postinc2	equ	0xFDE
  9215                           postdec2	equ	0xFDD
  9216                           plusw2	equ	0xFDB
  9217                           fsr2h	equ	0xFDA
  9218                           fsr2l	equ	0xFD9
  9219                           status	equ	0xFD8
  9220                           
  9221 ;; *************** function _ToSegment *****************
  9222 ;; Defined at:
  9223 ;;		line 284 in file "Library/Types.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  pCHR            1    wreg     unsigned char 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;  pCHR            1    0[BANK0 ] unsigned char 
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  1    wreg      unsigned char 
  9230 ;; Registers used:
  9231 ;;		wreg, status,2, status,0
  9232 ;; Tracked objects:
  9233 ;;		On entry : 0/0
  9234 ;;		On exit  : 0/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9240 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9241 ;;Total ram usage:        1 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    7
  9244 ;; This function calls:
  9245 ;;		Nothing
  9246 ;; This function is called by:
  9247 ;;		_HMI_SetSegments
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           	psect	text49
  9252  010A7A                     __ptext49:
  9253                           	opt stack 0
  9254  010A7A                     _ToSegment:
  9255                           	opt stack 13
  9256                           
  9257                           ; BSR set to: 0
  9258                           ;incstack = 0
  9259                           ;ToSegment@pCHR stored from wreg
  9260  010A7A  0100               	movlb	0	; () banked
  9261  010A7C  6FC5               	movwf	ToSegment@pCHR& (0+255),b
  9262                           
  9263                           ;Types.c: 286: switch(pCHR)
  9264  010A7E  D07E               	goto	l10178
  9265  010A80                     l9924:
  9266  010A80  0E3F               	movlw	63
  9267  010A82  0012               	return	
  9268  010A84                     l9928:
  9269  010A84  0E06               	movlw	6
  9270  010A86  0012               	return	
  9271  010A88                     l9932:
  9272  010A88  0E5B               	movlw	91
  9273  010A8A  0012               	return	
  9274  010A8C                     l9936:
  9275  010A8C  0E4F               	movlw	79
  9276  010A8E  0012               	return	
  9277  010A90                     l9940:
  9278  010A90  0E66               	movlw	102
  9279  010A92  0012               	return	
  9280  010A94                     l9944:
  9281  010A94  0E6D               	movlw	109
  9282  010A96  0012               	return	
  9283  010A98                     l9948:
  9284  010A98  0E7D               	movlw	125
  9285  010A9A  0012               	return	
  9286  010A9C                     l9952:
  9287  010A9C  0E07               	movlw	7
  9288  010A9E  0012               	return	
  9289  010AA0                     l9956:
  9290  010AA0  0E7F               	movlw	127
  9291  010AA2  0012               	return	
  9292  010AA4                     l9960:
  9293  010AA4  0E6F               	movlw	111
  9294  010AA6  0012               	return	
  9295  010AA8                     l9964:
  9296  010AA8  0E5F               	movlw	95
  9297  010AAA  0012               	return	
  9298  010AAC                     l9968:
  9299  010AAC  0E7C               	movlw	124
  9300  010AAE  0012               	return	
  9301  010AB0                     l9972:
  9302  010AB0  0E58               	movlw	88
  9303  010AB2  0012               	return	
  9304  010AB4                     l9976:
  9305  010AB4  0E5E               	movlw	94
  9306  010AB6  0012               	return	
  9307  010AB8                     l9980:
  9308  010AB8  0E7B               	movlw	123
  9309  010ABA  0012               	return	
  9310  010ABC                     l9984:
  9311  010ABC  0E71               	movlw	113
  9312  010ABE  0012               	return	
  9313  010AC0                     l9988:
  9314  010AC0  0E6F               	movlw	111
  9315  010AC2  0012               	return	
  9316  010AC4                     l9992:
  9317  010AC4  0E74               	movlw	116
  9318  010AC6  0012               	return	
  9319  010AC8                     l9996:
  9320  010AC8  0E04               	movlw	4
  9321  010ACA  0012               	return	
  9322  010ACC                     l10000:
  9323  010ACC  0E0E               	movlw	14
  9324  010ACE  0012               	return	
  9325  010AD0                     l10004:
  9326  010AD0  0E7A               	movlw	122
  9327  010AD2  0012               	return	
  9328  010AD4                     l10008:
  9329  010AD4  0E06               	movlw	6
  9330  010AD6  0012               	return	
  9331  010AD8                     l10012:
  9332  010AD8  0E14               	movlw	20
  9333  010ADA  0012               	return	
  9334  010ADC                     l10016:
  9335  010ADC  0E54               	movlw	84
  9336  010ADE  0012               	return	
  9337  010AE0                     l10020:
  9338  010AE0  0E5C               	movlw	92
  9339  010AE2  0012               	return	
  9340  010AE4                     l10024:
  9341  010AE4  0E73               	movlw	115
  9342  010AE6  0012               	return	
  9343  010AE8                     l10028:
  9344  010AE8  0E67               	movlw	103
  9345  010AEA  0012               	return	
  9346  010AEC                     l10032:
  9347  010AEC  0E50               	movlw	80
  9348  010AEE  0012               	return	
  9349  010AF0                     l10036:
  9350  010AF0  0E6D               	movlw	109
  9351  010AF2  0012               	return	
  9352  010AF4                     l10040:
  9353  010AF4  0E78               	movlw	120
  9354  010AF6  0012               	return	
  9355  010AF8                     l10044:
  9356  010AF8  0E1C               	movlw	28
  9357  010AFA  0012               	return	
  9358  010AFC                     l10048:
  9359  010AFC  0E62               	movlw	98
  9360  010AFE  0012               	return	
  9361  010B00                     l10052:
  9362  010B00  0E2A               	movlw	42
  9363  010B02  0012               	return	
  9364  010B04                     l10056:
  9365  010B04  0E64               	movlw	100
  9366  010B06  0012               	return	
  9367  010B08                     l10060:
  9368  010B08  0E6E               	movlw	110
  9369  010B0A  0012               	return	
  9370  010B0C                     l10064:
  9371  010B0C  0E5B               	movlw	91
  9372  010B0E  0012               	return	
  9373  010B10                     l10068:
  9374  010B10  0E77               	movlw	119
  9375  010B12  0012               	return	
  9376  010B14                     l10072:
  9377  010B14  0E7F               	movlw	127
  9378  010B16  0012               	return	
  9379  010B18                     l10076:
  9380  010B18  0E39               	movlw	57
  9381  010B1A  0012               	return	
  9382  010B1C                     l10080:
  9383  010B1C  0E3F               	movlw	63
  9384  010B1E  0012               	return	
  9385  010B20                     l10084:
  9386  010B20  0E79               	movlw	121
  9387  010B22  0012               	return	
  9388  010B24                     l10088:
  9389  010B24  0E71               	movlw	113
  9390  010B26  0012               	return	
  9391  010B28                     l10092:
  9392  010B28  0E3D               	movlw	61
  9393  010B2A  0012               	return	
  9394  010B2C                     l10096:
  9395  010B2C  0E76               	movlw	118
  9396  010B2E  0012               	return	
  9397  010B30                     l10100:
  9398  010B30  0E06               	movlw	6
  9399  010B32  0012               	return	
  9400  010B34                     l10104:
  9401  010B34  0E1E               	movlw	30
  9402  010B36  0012               	return	
  9403  010B38                     l10108:
  9404  010B38  0E57               	movlw	87
  9405  010B3A  0012               	return	
  9406  010B3C                     l10112:
  9407  010B3C  0E38               	movlw	56
  9408  010B3E  0012               	return	
  9409  010B40                     l10116:
  9410  010B40  0E76               	movlw	118
  9411  010B42  0012               	return	
  9412  010B44                     l10120:
  9413  010B44  0E76               	movlw	118
  9414  010B46  0012               	return	
  9415  010B48                     l10124:
  9416  010B48  0E3F               	movlw	63
  9417  010B4A  0012               	return	
  9418  010B4C                     l10128:
  9419  010B4C  0E73               	movlw	115
  9420  010B4E  0012               	return	
  9421  010B50                     l10132:
  9422  010B50  0E3F               	movlw	63
  9423  010B52  0012               	return	
  9424  010B54                     l10136:
  9425  010B54  0E77               	movlw	119
  9426  010B56  0012               	return	
  9427  010B58                     l10140:
  9428  010B58  0E6D               	movlw	109
  9429  010B5A  0012               	return	
  9430  010B5C                     l10144:
  9431  010B5C  0E31               	movlw	49
  9432  010B5E  0012               	return	
  9433  010B60                     l10148:
  9434  010B60  0E3E               	movlw	62
  9435  010B62  0012               	return	
  9436  010B64                     l10152:
  9437  010B64  0E3E               	movlw	62
  9438  010B66  0012               	return	
  9439  010B68                     l10156:
  9440  010B68  0E7E               	movlw	126
  9441  010B6A  0012               	return	
  9442  010B6C                     l10160:
  9443  010B6C  0E76               	movlw	118
  9444  010B6E  0012               	return	
  9445  010B70                     l10164:
  9446  010B70  0E66               	movlw	102
  9447  010B72  0012               	return	
  9448  010B74                     l10168:
  9449  010B74  0E5B               	movlw	91
  9450  010B76  0012               	return	
  9451  010B78                     l10172:
  9452  010B78  0E80               	movlw	128
  9453  010B7A  0012               	return	
  9454  010B7C                     l10178:
  9455  010B7C  0100               	movlb	0	; () banked
  9456  010B7E  51C5               	movf	ToSegment@pCHR& (0+255),w,b
  9457                           
  9458                           ; Switch size 1, requested type "space"
  9459                           ; Number of cases is 63, Range of values is 46 to 122
  9460                           ; switch strategies available:
  9461                           ; Name         Instructions Cycles
  9462                           ; simple_byte          190    96 (average)
  9463                           ;	Chosen strategy is simple_byte
  9464  010B80  0A2E               	xorlw	46	; case 46
  9465  010B82  B4D8               	btfsc	status,2,c
  9466  010B84  D7F9               	goto	l10172
  9467  010B86  0A1E               	xorlw	30	; case 48
  9468  010B88  B4D8               	btfsc	status,2,c
  9469  010B8A  D77A               	goto	l9924
  9470  010B8C  0A01               	xorlw	1	; case 49
  9471  010B8E  B4D8               	btfsc	status,2,c
  9472  010B90  D779               	goto	l9928
  9473  010B92  0A03               	xorlw	3	; case 50
  9474  010B94  B4D8               	btfsc	status,2,c
  9475  010B96  D778               	goto	l9932
  9476  010B98  0A01               	xorlw	1	; case 51
  9477  010B9A  B4D8               	btfsc	status,2,c
  9478  010B9C  D777               	goto	l9936
  9479  010B9E  0A07               	xorlw	7	; case 52
  9480  010BA0  B4D8               	btfsc	status,2,c
  9481  010BA2  D776               	goto	l9940
  9482  010BA4  0A01               	xorlw	1	; case 53
  9483  010BA6  B4D8               	btfsc	status,2,c
  9484  010BA8  D775               	goto	l9944
  9485  010BAA  0A03               	xorlw	3	; case 54
  9486  010BAC  B4D8               	btfsc	status,2,c
  9487  010BAE  D774               	goto	l9948
  9488  010BB0  0A01               	xorlw	1	; case 55
  9489  010BB2  B4D8               	btfsc	status,2,c
  9490  010BB4  D773               	goto	l9952
  9491  010BB6  0A0F               	xorlw	15	; case 56
  9492  010BB8  B4D8               	btfsc	status,2,c
  9493  010BBA  D772               	goto	l9956
  9494  010BBC  0A01               	xorlw	1	; case 57
  9495  010BBE  B4D8               	btfsc	status,2,c
  9496  010BC0  D771               	goto	l9960
  9497  010BC2  0A78               	xorlw	120	; case 65
  9498  010BC4  B4D8               	btfsc	status,2,c
  9499  010BC6  D7A4               	goto	l10068
  9500  010BC8  0A03               	xorlw	3	; case 66
  9501  010BCA  B4D8               	btfsc	status,2,c
  9502  010BCC  D7A3               	goto	l10072
  9503  010BCE  0A01               	xorlw	1	; case 67
  9504  010BD0  B4D8               	btfsc	status,2,c
  9505  010BD2  D7A2               	goto	l10076
  9506  010BD4  0A07               	xorlw	7	; case 68
  9507  010BD6  B4D8               	btfsc	status,2,c
  9508  010BD8  D7A1               	goto	l10080
  9509  010BDA  0A01               	xorlw	1	; case 69
  9510  010BDC  B4D8               	btfsc	status,2,c
  9511  010BDE  D7A0               	goto	l10084
  9512  010BE0  0A03               	xorlw	3	; case 70
  9513  010BE2  B4D8               	btfsc	status,2,c
  9514  010BE4  D79F               	goto	l10088
  9515  010BE6  0A01               	xorlw	1	; case 71
  9516  010BE8  B4D8               	btfsc	status,2,c
  9517  010BEA  D79E               	goto	l10092
  9518  010BEC  0A0F               	xorlw	15	; case 72
  9519  010BEE  B4D8               	btfsc	status,2,c
  9520  010BF0  D79D               	goto	l10096
  9521  010BF2  0A01               	xorlw	1	; case 73
  9522  010BF4  B4D8               	btfsc	status,2,c
  9523  010BF6  D79C               	goto	l10100
  9524  010BF8  0A03               	xorlw	3	; case 74
  9525  010BFA  B4D8               	btfsc	status,2,c
  9526  010BFC  D79B               	goto	l10104
  9527  010BFE  0A01               	xorlw	1	; case 75
  9528  010C00  B4D8               	btfsc	status,2,c
  9529  010C02  D79A               	goto	l10108
  9530  010C04  0A07               	xorlw	7	; case 76
  9531  010C06  B4D8               	btfsc	status,2,c
  9532  010C08  D799               	goto	l10112
  9533  010C0A  0A01               	xorlw	1	; case 77
  9534  010C0C  B4D8               	btfsc	status,2,c
  9535  010C0E  D798               	goto	l10116
  9536  010C10  0A03               	xorlw	3	; case 78
  9537  010C12  B4D8               	btfsc	status,2,c
  9538  010C14  D797               	goto	l10120
  9539  010C16  0A01               	xorlw	1	; case 79
  9540  010C18  B4D8               	btfsc	status,2,c
  9541  010C1A  D796               	goto	l10124
  9542  010C1C  0A1F               	xorlw	31	; case 80
  9543  010C1E  B4D8               	btfsc	status,2,c
  9544  010C20  D795               	goto	l10128
  9545  010C22  0A01               	xorlw	1	; case 81
  9546  010C24  B4D8               	btfsc	status,2,c
  9547  010C26  D794               	goto	l10132
  9548  010C28  0A03               	xorlw	3	; case 82
  9549  010C2A  B4D8               	btfsc	status,2,c
  9550  010C2C  D793               	goto	l10136
  9551  010C2E  0A01               	xorlw	1	; case 83
  9552  010C30  B4D8               	btfsc	status,2,c
  9553  010C32  D792               	goto	l10140
  9554  010C34  0A07               	xorlw	7	; case 84
  9555  010C36  B4D8               	btfsc	status,2,c
  9556  010C38  D791               	goto	l10144
  9557  010C3A  0A01               	xorlw	1	; case 85
  9558  010C3C  B4D8               	btfsc	status,2,c
  9559  010C3E  D790               	goto	l10148
  9560  010C40  0A03               	xorlw	3	; case 86
  9561  010C42  B4D8               	btfsc	status,2,c
  9562  010C44  D78F               	goto	l10152
  9563  010C46  0A01               	xorlw	1	; case 87
  9564  010C48  B4D8               	btfsc	status,2,c
  9565  010C4A  D78E               	goto	l10156
  9566  010C4C  0A0F               	xorlw	15	; case 88
  9567  010C4E  B4D8               	btfsc	status,2,c
  9568  010C50  D78D               	goto	l10160
  9569  010C52  0A01               	xorlw	1	; case 89
  9570  010C54  B4D8               	btfsc	status,2,c
  9571  010C56  D78C               	goto	l10164
  9572  010C58  0A03               	xorlw	3	; case 90
  9573  010C5A  B4D8               	btfsc	status,2,c
  9574  010C5C  D78B               	goto	l10168
  9575  010C5E  0A3B               	xorlw	59	; case 97
  9576  010C60  B4D8               	btfsc	status,2,c
  9577  010C62  D722               	goto	l9964
  9578  010C64  0A03               	xorlw	3	; case 98
  9579  010C66  B4D8               	btfsc	status,2,c
  9580  010C68  D721               	goto	l9968
  9581  010C6A  0A01               	xorlw	1	; case 99
  9582  010C6C  B4D8               	btfsc	status,2,c
  9583  010C6E  D720               	goto	l9972
  9584  010C70  0A07               	xorlw	7	; case 100
  9585  010C72  B4D8               	btfsc	status,2,c
  9586  010C74  D71F               	goto	l9976
  9587  010C76  0A01               	xorlw	1	; case 101
  9588  010C78  B4D8               	btfsc	status,2,c
  9589  010C7A  D71E               	goto	l9980
  9590  010C7C  0A03               	xorlw	3	; case 102
  9591  010C7E  B4D8               	btfsc	status,2,c
  9592  010C80  D71D               	goto	l9984
  9593  010C82  0A01               	xorlw	1	; case 103
  9594  010C84  B4D8               	btfsc	status,2,c
  9595  010C86  D71C               	goto	l9988
  9596  010C88  0A0F               	xorlw	15	; case 104
  9597  010C8A  B4D8               	btfsc	status,2,c
  9598  010C8C  D71B               	goto	l9992
  9599  010C8E  0A01               	xorlw	1	; case 105
  9600  010C90  B4D8               	btfsc	status,2,c
  9601  010C92  D71A               	goto	l9996
  9602  010C94  0A03               	xorlw	3	; case 106
  9603  010C96  B4D8               	btfsc	status,2,c
  9604  010C98  D719               	goto	l10000
  9605  010C9A  0A01               	xorlw	1	; case 107
  9606  010C9C  B4D8               	btfsc	status,2,c
  9607  010C9E  D718               	goto	l10004
  9608  010CA0  0A07               	xorlw	7	; case 108
  9609  010CA2  B4D8               	btfsc	status,2,c
  9610  010CA4  D717               	goto	l10008
  9611  010CA6  0A01               	xorlw	1	; case 109
  9612  010CA8  B4D8               	btfsc	status,2,c
  9613  010CAA  D716               	goto	l10012
  9614  010CAC  0A03               	xorlw	3	; case 110
  9615  010CAE  B4D8               	btfsc	status,2,c
  9616  010CB0  D715               	goto	l10016
  9617  010CB2  0A01               	xorlw	1	; case 111
  9618  010CB4  B4D8               	btfsc	status,2,c
  9619  010CB6  D714               	goto	l10020
  9620  010CB8  0A1F               	xorlw	31	; case 112
  9621  010CBA  B4D8               	btfsc	status,2,c
  9622  010CBC  D713               	goto	l10024
  9623  010CBE  0A01               	xorlw	1	; case 113
  9624  010CC0  B4D8               	btfsc	status,2,c
  9625  010CC2  D712               	goto	l10028
  9626  010CC4  0A03               	xorlw	3	; case 114
  9627  010CC6  B4D8               	btfsc	status,2,c
  9628  010CC8  D711               	goto	l10032
  9629  010CCA  0A01               	xorlw	1	; case 115
  9630  010CCC  B4D8               	btfsc	status,2,c
  9631  010CCE  D710               	goto	l10036
  9632  010CD0  0A07               	xorlw	7	; case 116
  9633  010CD2  B4D8               	btfsc	status,2,c
  9634  010CD4  D70F               	goto	l10040
  9635  010CD6  0A01               	xorlw	1	; case 117
  9636  010CD8  B4D8               	btfsc	status,2,c
  9637  010CDA  D70E               	goto	l10044
  9638  010CDC  0A03               	xorlw	3	; case 118
  9639  010CDE  B4D8               	btfsc	status,2,c
  9640  010CE0  D70D               	goto	l10048
  9641  010CE2  0A01               	xorlw	1	; case 119
  9642  010CE4  B4D8               	btfsc	status,2,c
  9643  010CE6  D70C               	goto	l10052
  9644  010CE8  0A0F               	xorlw	15	; case 120
  9645  010CEA  B4D8               	btfsc	status,2,c
  9646  010CEC  D70B               	goto	l10056
  9647  010CEE  0A01               	xorlw	1	; case 121
  9648  010CF0  B4D8               	btfsc	status,2,c
  9649  010CF2  D70A               	goto	l10060
  9650  010CF4  0A03               	xorlw	3	; case 122
  9651  010CF6  B4D8               	btfsc	status,2,c
  9652  010CF8  D709               	goto	l10064
  9653                           
  9654                           ;Types.c: 354: return 0;
  9655                           
  9656                           ; BSR set to: 0
  9657  010CFA  0E00               	movlw	0
  9658  010CFC  0012               	return	
  9659  010CFE                     __end_of_ToSegment:
  9660                           	opt stack 0
  9661                           tosu	equ	0xFFF
  9662                           tosh	equ	0xFFE
  9663                           tosl	equ	0xFFD
  9664                           pclath	equ	0xFFA
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           postinc0	equ	0xFEE
  9672                           wreg	equ	0xFE8
  9673                           indf1	equ	0xFE7
  9674                           postdec1	equ	0xFE5
  9675                           fsr1h	equ	0xFE2
  9676                           fsr1l	equ	0xFE1
  9677                           indf2	equ	0xFDF
  9678                           postinc2	equ	0xFDE
  9679                           postdec2	equ	0xFDD
  9680                           plusw2	equ	0xFDB
  9681                           fsr2h	equ	0xFDA
  9682                           fsr2l	equ	0xFD9
  9683                           status	equ	0xFD8
  9684                           
  9685 ;; *************** function _HMI_SetDown *****************
  9686 ;; Defined at:
  9687 ;;		line 180 in file "HMI.c"
  9688 ;; Parameters:    Size  Location     Type
  9689 ;;  pValue          1    wreg     unsigned char 
  9690 ;; Auto vars:     Size  Location     Type
  9691 ;;  pValue          1    0[BANK0 ] unsigned char 
  9692 ;; Return value:  Size  Location     Type
  9693 ;;                  1    wreg      void 
  9694 ;; Registers used:
  9695 ;;		wreg
  9696 ;; Tracked objects:
  9697 ;;		On entry : 0/0
  9698 ;;		On exit  : 0/0
  9699 ;;		Unchanged: 0/0
  9700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9704 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9705 ;;Total ram usage:        1 bytes
  9706 ;; Hardware stack levels used:    1
  9707 ;; Hardware stack levels required when called:    7
  9708 ;; This function calls:
  9709 ;;		Nothing
  9710 ;; This function is called by:
  9711 ;;		_Event_HMI_DownButton
  9712 ;; This function uses a non-reentrant model
  9713 ;;
  9714                           
  9715                           	psect	text50
  9716  014A6C                     __ptext50:
  9717                           	opt stack 0
  9718  014A6C                     _HMI_SetDown:
  9719                           	opt stack 15
  9720                           
  9721                           ;incstack = 0
  9722                           ;HMI_SetDown@pValue stored from wreg
  9723  014A6C  0100               	movlb	0	; () banked
  9724  014A6E  6FC5               	movwf	HMI_SetDown@pValue& (0+255),b
  9725                           
  9726                           ;HMI.c: 182: HMIBoard.DOWNLED = pValue;
  9727  014A70  0100               	movlb	0	; () banked
  9728  014A72  B1C5               	btfsc	HMI_SetDown@pValue& (0+255),0,b
  9729  014A74  D003               	bra	u6865
  9730  014A76  0101               	movlb	1	; () banked
  9731  014A78  9330               	bcf	(_HMIBoard+6)& (0+255),1,b
  9732  014A7A  D002               	bra	u6866
  9733  014A7C                     u6865:
  9734  014A7C  0101               	movlb	1	; () banked
  9735  014A7E  8330               	bsf	(_HMIBoard+6)& (0+255),1,b
  9736  014A80                     u6866:
  9737                           
  9738                           ; BSR set to: 1
  9739  014A80  0012               	return		;funcret
  9740  014A82                     __end_of_HMI_SetDown:
  9741                           	opt stack 0
  9742                           tosu	equ	0xFFF
  9743                           tosh	equ	0xFFE
  9744                           tosl	equ	0xFFD
  9745                           pclath	equ	0xFFA
  9746                           tblptru	equ	0xFF8
  9747                           tblptrh	equ	0xFF7
  9748                           tblptrl	equ	0xFF6
  9749                           tablat	equ	0xFF5
  9750                           prodh	equ	0xFF4
  9751                           prodl	equ	0xFF3
  9752                           postinc0	equ	0xFEE
  9753                           wreg	equ	0xFE8
  9754                           indf1	equ	0xFE7
  9755                           postdec1	equ	0xFE5
  9756                           fsr1h	equ	0xFE2
  9757                           fsr1l	equ	0xFE1
  9758                           indf2	equ	0xFDF
  9759                           postinc2	equ	0xFDE
  9760                           postdec2	equ	0xFDD
  9761                           plusw2	equ	0xFDB
  9762                           fsr2h	equ	0xFDA
  9763                           fsr2l	equ	0xFD9
  9764                           status	equ	0xFD8
  9765                           
  9766 ;; *************** function _HMI_SetBar *****************
  9767 ;; Defined at:
  9768 ;;		line 205 in file "HMI.c"
  9769 ;; Parameters:    Size  Location     Type
  9770 ;;  pValue          1    wreg     unsigned char 
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;  pValue          1    0[BANK0 ] unsigned char 
  9773 ;; Return value:  Size  Location     Type
  9774 ;;                  1    wreg      void 
  9775 ;; Registers used:
  9776 ;;		wreg
  9777 ;; Tracked objects:
  9778 ;;		On entry : 0/0
  9779 ;;		On exit  : 0/0
  9780 ;;		Unchanged: 0/0
  9781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9782 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9783 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;Total ram usage:        1 bytes
  9787 ;; Hardware stack levels used:    1
  9788 ;; Hardware stack levels required when called:    7
  9789 ;; This function calls:
  9790 ;;		Nothing
  9791 ;; This function is called by:
  9792 ;;		_Event_DIPSwitch
  9793 ;;		_Event_HMI_DIPSwitch
  9794 ;;		_Event_HMI_LeftButton
  9795 ;;		_Event_HMI_RightButton
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           	psect	text51
  9800  014B10                     __ptext51:
  9801                           	opt stack 0
  9802  014B10                     _HMI_SetBar:
  9803                           	opt stack 15
  9804                           
  9805                           ; BSR set to: 1
  9806                           ;incstack = 0
  9807                           ;HMI_SetBar@pValue stored from wreg
  9808  014B10  0100               	movlb	0	; () banked
  9809  014B12  6FC5               	movwf	HMI_SetBar@pValue& (0+255),b
  9810                           
  9811                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
  9812  014B14  C0C5  F131         	movff	HMI_SetBar@pValue,_HMIBoard+7
  9813  014B18  0012               	return		;funcret
  9814  014B1A                     __end_of_HMI_SetBar:
  9815                           	opt stack 0
  9816                           tosu	equ	0xFFF
  9817                           tosh	equ	0xFFE
  9818                           tosl	equ	0xFFD
  9819                           pclath	equ	0xFFA
  9820                           tblptru	equ	0xFF8
  9821                           tblptrh	equ	0xFF7
  9822                           tblptrl	equ	0xFF6
  9823                           tablat	equ	0xFF5
  9824                           prodh	equ	0xFF4
  9825                           prodl	equ	0xFF3
  9826                           postinc0	equ	0xFEE
  9827                           wreg	equ	0xFE8
  9828                           indf1	equ	0xFE7
  9829                           postdec1	equ	0xFE5
  9830                           fsr1h	equ	0xFE2
  9831                           fsr1l	equ	0xFE1
  9832                           indf2	equ	0xFDF
  9833                           postinc2	equ	0xFDE
  9834                           postdec2	equ	0xFDD
  9835                           plusw2	equ	0xFDB
  9836                           fsr2h	equ	0xFDA
  9837                           fsr2l	equ	0xFD9
  9838                           status	equ	0xFD8
  9839                           
  9840 ;; *************** function _HMI_GetBar *****************
  9841 ;; Defined at:
  9842 ;;		line 209 in file "HMI.c"
  9843 ;; Parameters:    Size  Location     Type
  9844 ;;		None
  9845 ;; Auto vars:     Size  Location     Type
  9846 ;;		None
  9847 ;; Return value:  Size  Location     Type
  9848 ;;                  1    wreg      unsigned char 
  9849 ;; Registers used:
  9850 ;;		wreg, status,2
  9851 ;; Tracked objects:
  9852 ;;		On entry : 0/0
  9853 ;;		On exit  : 0/0
  9854 ;;		Unchanged: 0/0
  9855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9860 ;;Total ram usage:        0 bytes
  9861 ;; Hardware stack levels used:    1
  9862 ;; Hardware stack levels required when called:    7
  9863 ;; This function calls:
  9864 ;;		Nothing
  9865 ;; This function is called by:
  9866 ;;		_Event_DIPSwitch
  9867 ;;		_Event_HMI_DIPSwitch
  9868 ;; This function uses a non-reentrant model
  9869 ;;
  9870                           
  9871                           	psect	text52
  9872  014B46                     __ptext52:
  9873                           	opt stack 0
  9874  014B46                     _HMI_GetBar:
  9875                           	opt stack 15
  9876                           
  9877                           ;HMI.c: 211: return HMIBoard.pBarGraph;
  9878                           
  9879                           ;incstack = 0
  9880  014B46  0101               	movlb	1	; () banked
  9881  014B48  5131               	movf	(_HMIBoard+7)& (0+255),w,b
  9882  014B4A  0012               	return	
  9883  014B4C                     __end_of_HMI_GetBar:
  9884                           	opt stack 0
  9885                           tosu	equ	0xFFF
  9886                           tosh	equ	0xFFE
  9887                           tosl	equ	0xFFD
  9888                           pclath	equ	0xFFA
  9889                           tblptru	equ	0xFF8
  9890                           tblptrh	equ	0xFF7
  9891                           tblptrl	equ	0xFF6
  9892                           tablat	equ	0xFF5
  9893                           prodh	equ	0xFF4
  9894                           prodl	equ	0xFF3
  9895                           postinc0	equ	0xFEE
  9896                           wreg	equ	0xFE8
  9897                           indf1	equ	0xFE7
  9898                           postdec1	equ	0xFE5
  9899                           fsr1h	equ	0xFE2
  9900                           fsr1l	equ	0xFE1
  9901                           indf2	equ	0xFDF
  9902                           postinc2	equ	0xFDE
  9903                           postdec2	equ	0xFDD
  9904                           plusw2	equ	0xFDB
  9905                           fsr2h	equ	0xFDA
  9906                           fsr2l	equ	0xFD9
  9907                           status	equ	0xFD8
  9908                           
  9909 ;; *************** function _Console_SetForecolour *****************
  9910 ;; Defined at:
  9911 ;;		line 286 in file "Library/Console.c"
  9912 ;; Parameters:    Size  Location     Type
  9913 ;;  pColour         2    0[BANK0 ] unsigned short 
  9914 ;; Auto vars:     Size  Location     Type
  9915 ;;		None
  9916 ;; Return value:  Size  Location     Type
  9917 ;;                  1    wreg      void 
  9918 ;; Registers used:
  9919 ;;		None
  9920 ;; Tracked objects:
  9921 ;;		On entry : 0/0
  9922 ;;		On exit  : 0/0
  9923 ;;		Unchanged: 0/0
  9924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9925 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9929 ;;Total ram usage:        2 bytes
  9930 ;; Hardware stack levels used:    1
  9931 ;; Hardware stack levels required when called:    7
  9932 ;; This function calls:
  9933 ;;		Nothing
  9934 ;; This function is called by:
  9935 ;;		_displaySID
  9936 ;;		_displayMode
  9937 ;;		_continuousMode
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           	psect	text53
  9942  014B1A                     __ptext53:
  9943                           	opt stack 0
  9944  014B1A                     _Console_SetForecolour:
  9945                           	opt stack 19
  9946                           
  9947                           ;Console.c: 289: gForecolour = pColour;
  9948                           
  9949                           ; BSR set to: 1
  9950                           ;incstack = 0
  9951  014B1A  C0C5  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
  9952  014B1E  C0C6  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
  9953  014B22  0012               	return		;funcret
  9954  014B24                     __end_of_Console_SetForecolour:
  9955                           	opt stack 0
  9956                           tosu	equ	0xFFF
  9957                           tosh	equ	0xFFE
  9958                           tosl	equ	0xFFD
  9959                           pclath	equ	0xFFA
  9960                           tblptru	equ	0xFF8
  9961                           tblptrh	equ	0xFF7
  9962                           tblptrl	equ	0xFF6
  9963                           tablat	equ	0xFF5
  9964                           prodh	equ	0xFF4
  9965                           prodl	equ	0xFF3
  9966                           postinc0	equ	0xFEE
  9967                           wreg	equ	0xFE8
  9968                           indf1	equ	0xFE7
  9969                           postdec1	equ	0xFE5
  9970                           fsr1h	equ	0xFE2
  9971                           fsr1l	equ	0xFE1
  9972                           indf2	equ	0xFDF
  9973                           postinc2	equ	0xFDE
  9974                           postdec2	equ	0xFDD
  9975                           plusw2	equ	0xFDB
  9976                           fsr2h	equ	0xFDA
  9977                           fsr2l	equ	0xFD9
  9978                           status	equ	0xFD8
  9979                           
  9980 ;; *************** function _Console_Render *****************
  9981 ;; Defined at:
  9982 ;;		line 377 in file "Library/Console.c"
  9983 ;; Parameters:    Size  Location     Type
  9984 ;;		None
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;  lCursor         4   38[BANK0 ] struct Point
  9987 ;;  y               1   43[BANK0 ] unsigned char 
  9988 ;;  x               1   42[BANK0 ] unsigned char 
  9989 ;;  temp            1   37[BANK0 ] unsigned char 
  9990 ;;  Temp            2    0        unsigned short 
  9991 ;; Return value:  Size  Location     Type
  9992 ;;                  1    wreg      void 
  9993 ;; Registers used:
  9994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9995 ;; Tracked objects:
  9996 ;;		On entry : 0/0
  9997 ;;		On exit  : 0/0
  9998 ;;		Unchanged: 0/0
  9999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10003 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10004 ;;Total ram usage:        9 bytes
 10005 ;; Hardware stack levels used:    1
 10006 ;; Hardware stack levels required when called:   11
 10007 ;; This function calls:
 10008 ;;		_Console_MakeField
 10009 ;;		_LCD_DrawField
 10010 ;;		_LCD_FillRectangle
 10011 ;; This function is called by:
 10012 ;;		_displayText
 10013 ;;		_continuousMode
 10014 ;;		_nullMode
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           	psect	text54
 10019  0113B0                     __ptext54:
 10020                           	opt stack 0
 10021  0113B0                     _Console_Render:
 10022                           	opt stack 16
 10023                           
 10024                           ;Console.c: 379: Colour Temp;
 10025                           ;Console.c: 380: if (change)
 10026                           
 10027                           ;incstack = 0
 10028  0113B0  0100               	movlb	0	; () banked
 10029  0113B2  51FF               	movf	_change& (0+255),w,b
 10030  0113B4  B4D8               	btfsc	status,2,c
 10031  0113B6  0012               	return	
 10032                           
 10033                           ; BSR set to: 0
 10034                           ;Console.c: 381: {
 10035                           ;Console.c: 382: UINT8 x, y, temp;
 10036                           ;Console.c: 383: Point lCursor = {6,6};
 10037  0113B8  C1CC  F0EB         	movff	Console_Render@F6956,Console_Render@lCursor
 10038  0113BC  C1CD  F0EC         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10039  0113C0  C1CE  F0ED         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10040  0113C4  C1CF  F0EE         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10041                           
 10042                           ; BSR set to: 0
 10043                           ;Console.c: 385: if (clearall)
 10044  0113C8  0100               	movlb	0	; () banked
 10045  0113CA  517D               	movf	_clearall& (0+255),w,b
 10046  0113CC  B4D8               	btfsc	status,2,c
 10047  0113CE  D004               	goto	l1056
 10048                           
 10049                           ; BSR set to: 0
 10050                           ;Console.c: 386: {
 10051                           ;Console.c: 389: temp = lBufferY;
 10052  0113D0  C036  F0EA         	movff	_lBufferY,Console_Render@temp
 10053                           
 10054                           ; BSR set to: 0
 10055                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10056  0113D4  0E0F               	movlw	15
 10057  0113D6  6E36               	movwf	_lBufferY,c
 10058  0113D8                     l1056:
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;Console.c: 391: }
 10062                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10063  0113D8  0E00               	movlw	0
 10064  0113DA  0100               	movlb	0	; () banked
 10065  0113DC  6FF0               	movwf	Console_Render@y& (0+255),b
 10066  0113DE  D0DF               	goto	l11524
 10067  0113E0                     l11494:
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;Console.c: 394: {
 10071                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10072  0113E0  0100               	movlb	0	; () banked
 10073  0113E2  51F0               	movf	Console_Render@y& (0+255),w,b
 10074  0113E4  0D02               	mullw	2
 10075  0113E6  0E00               	movlw	low _lCBuffer
 10076  0113E8  24F3               	addwf	prodl,w,c
 10077  0113EA  6ED9               	movwf	fsr2l,c
 10078  0113EC  0E01               	movlw	high _lCBuffer
 10079  0113EE  20F4               	addwfc	prodh,w,c
 10080  0113F0  6EDA               	movwf	fsr2h,c
 10081  0113F2  CFDE F0FD          	movff	postinc2,_gForecolour
 10082  0113F6  CFDD F0FE          	movff	postdec2,_gForecolour+1
 10083                           
 10084                           ; BSR set to: 0
 10085                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10086  0113FA  0E00               	movlw	0
 10087  0113FC  0100               	movlb	0	; () banked
 10088  0113FE  6FEF               	movwf	Console_Render@x& (0+255),b
 10089  011400                     l11498:
 10090                           
 10091                           ; BSR set to: 0
 10092  011400  0E13               	movlw	19
 10093  011402  0100               	movlb	0	; () banked
 10094  011404  65EF               	cpfsgt	Console_Render@x& (0+255),b
 10095  011406  D001               	goto	l11502
 10096  011408  D0BE               	goto	l11518
 10097  01140A                     l11502:
 10098                           
 10099                           ; BSR set to: 0
 10100                           ;Console.c: 397: {
 10101                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10102  01140A  0100               	movlb	0	; () banked
 10103  01140C  51F0               	movf	Console_Render@y& (0+255),w,b
 10104  01140E  0D14               	mullw	20
 10105  011410  0E46               	movlw	low _lBuffer
 10106  011412  0100               	movlb	0	; () banked
 10107  011414  6FE8               	movwf	??_Console_Render& (0+255),b
 10108  011416  0E02               	movlw	high _lBuffer
 10109  011418  0100               	movlb	0	; () banked
 10110  01141A  6FE9               	movwf	(??_Console_Render+1)& (0+255),b
 10111  01141C  50F3               	movf	prodl,w,c
 10112  01141E  0100               	movlb	0	; () banked
 10113  011420  27E8               	addwf	??_Console_Render& (0+255),f,b
 10114  011422  50F4               	movf	prodh,w,c
 10115  011424  0100               	movlb	0	; () banked
 10116  011426  23E9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10117  011428  0100               	movlb	0	; () banked
 10118  01142A  51EF               	movf	Console_Render@x& (0+255),w,b
 10119  01142C  0D01               	mullw	1
 10120  01142E  50F3               	movf	prodl,w,c
 10121  011430  0100               	movlb	0	; () banked
 10122  011432  25E8               	addwf	??_Console_Render& (0+255),w,b
 10123  011434  6ED9               	movwf	fsr2l,c
 10124  011436  50F4               	movf	prodh,w,c
 10125  011438  0100               	movlb	0	; () banked
 10126  01143A  21E9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10127  01143C  6EDA               	movwf	fsr2h,c
 10128  01143E  AEDF               	btfss	indf2,7,c
 10129  011440  D09A               	goto	l11512
 10130                           
 10131                           ; BSR set to: 0
 10132                           ;Console.c: 399: {
 10133                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10134  011442  0100               	movlb	0	; () banked
 10135  011444  51F0               	movf	Console_Render@y& (0+255),w,b
 10136  011446  0D14               	mullw	20
 10137  011448  0E46               	movlw	low _lBuffer
 10138  01144A  0100               	movlb	0	; () banked
 10139  01144C  6FE8               	movwf	??_Console_Render& (0+255),b
 10140  01144E  0E02               	movlw	high _lBuffer
 10141  011450  0100               	movlb	0	; () banked
 10142  011452  6FE9               	movwf	(??_Console_Render+1)& (0+255),b
 10143  011454  50F3               	movf	prodl,w,c
 10144  011456  0100               	movlb	0	; () banked
 10145  011458  27E8               	addwf	??_Console_Render& (0+255),f,b
 10146  01145A  50F4               	movf	prodh,w,c
 10147  01145C  0100               	movlb	0	; () banked
 10148  01145E  23E9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10149  011460  0100               	movlb	0	; () banked
 10150  011462  51EF               	movf	Console_Render@x& (0+255),w,b
 10151  011464  0D01               	mullw	1
 10152  011466  50F3               	movf	prodl,w,c
 10153  011468  0100               	movlb	0	; () banked
 10154  01146A  25E8               	addwf	??_Console_Render& (0+255),w,b
 10155  01146C  6ED9               	movwf	fsr2l,c
 10156  01146E  50F4               	movf	prodh,w,c
 10157  011470  0100               	movlb	0	; () banked
 10158  011472  21E9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10159  011474  6EDA               	movwf	fsr2h,c
 10160  011476  0E7F               	movlw	127
 10161  011478  16DF               	andwf	indf2,f,c
 10162                           
 10163                           ;Console.c: 401: if (lBuffer[y][x])
 10164  01147A  0100               	movlb	0	; () banked
 10165  01147C  51F0               	movf	Console_Render@y& (0+255),w,b
 10166  01147E  0D14               	mullw	20
 10167  011480  0E46               	movlw	low _lBuffer
 10168  011482  0100               	movlb	0	; () banked
 10169  011484  6FE8               	movwf	??_Console_Render& (0+255),b
 10170  011486  0E02               	movlw	high _lBuffer
 10171  011488  0100               	movlb	0	; () banked
 10172  01148A  6FE9               	movwf	(??_Console_Render+1)& (0+255),b
 10173  01148C  50F3               	movf	prodl,w,c
 10174  01148E  0100               	movlb	0	; () banked
 10175  011490  27E8               	addwf	??_Console_Render& (0+255),f,b
 10176  011492  50F4               	movf	prodh,w,c
 10177  011494  0100               	movlb	0	; () banked
 10178  011496  23E9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10179  011498  0100               	movlb	0	; () banked
 10180  01149A  51EF               	movf	Console_Render@x& (0+255),w,b
 10181  01149C  0D01               	mullw	1
 10182  01149E  50F3               	movf	prodl,w,c
 10183  0114A0  0100               	movlb	0	; () banked
 10184  0114A2  25E8               	addwf	??_Console_Render& (0+255),w,b
 10185  0114A4  6ED9               	movwf	fsr2l,c
 10186  0114A6  50F4               	movf	prodh,w,c
 10187  0114A8  0100               	movlb	0	; () banked
 10188  0114AA  21E9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10189  0114AC  6EDA               	movwf	fsr2h,c
 10190  0114AE  50DF               	movf	indf2,w,c
 10191  0114B0  B4D8               	btfsc	status,2,c
 10192  0114B2  D04A               	goto	l11510
 10193                           
 10194                           ; BSR set to: 0
 10195                           ;Console.c: 402: {
 10196                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10197  0114B4  C074  F0CE         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10198  0114B8  C075  F0CF         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10199  0114BC  C0EB  F0D0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10200  0114C0  C0EC  F0D1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10201  0114C4  C0ED  F0D2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10202  0114C8  C0EE  F0D3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10203  0114CC  C0F9  F0D4         	movff	_gCharSize,LCD_FillRectangle@pSize
 10204  0114D0  C0FA  F0D5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10205  0114D4  C0FB  F0D6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10206  0114D8  C0FC  F0D7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10207  0114DC  EC45  F09C         	call	_LCD_FillRectangle	;wreg free
 10208                           
 10209                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10210  0114E0  0100               	movlb	0	; () banked
 10211  0114E2  51F0               	movf	Console_Render@y& (0+255),w,b
 10212  0114E4  0D14               	mullw	20
 10213  0114E6  0E46               	movlw	low _lBuffer
 10214  0114E8  0100               	movlb	0	; () banked
 10215  0114EA  6FE8               	movwf	??_Console_Render& (0+255),b
 10216  0114EC  0E02               	movlw	high _lBuffer
 10217  0114EE  0100               	movlb	0	; () banked
 10218  0114F0  6FE9               	movwf	(??_Console_Render+1)& (0+255),b
 10219  0114F2  50F3               	movf	prodl,w,c
 10220  0114F4  0100               	movlb	0	; () banked
 10221  0114F6  27E8               	addwf	??_Console_Render& (0+255),f,b
 10222  0114F8  50F4               	movf	prodh,w,c
 10223  0114FA  0100               	movlb	0	; () banked
 10224  0114FC  23E9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10225  0114FE  0100               	movlb	0	; () banked
 10226  011500  51EF               	movf	Console_Render@x& (0+255),w,b
 10227  011502  0D01               	mullw	1
 10228  011504  50F3               	movf	prodl,w,c
 10229  011506  0100               	movlb	0	; () banked
 10230  011508  25E8               	addwf	??_Console_Render& (0+255),w,b
 10231  01150A  6ED9               	movwf	fsr2l,c
 10232  01150C  50F4               	movf	prodh,w,c
 10233  01150E  0100               	movlb	0	; () banked
 10234  011510  21E9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10235  011512  6EDA               	movwf	fsr2h,c
 10236  011514  50DF               	movf	indf2,w,c
 10237  011516  EC18  F094         	call	_Console_MakeField
 10238  01151A  C0CA  F0D7         	movff	?_Console_MakeField,LCD_DrawField@pField
 10239  01151E  C0CB  F0D8         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10240  011522  C0EB  F0D9         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10241  011526  C0EC  F0DA         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10242  01152A  C0ED  F0DB         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10243  01152E  C0EE  F0DC         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10244  011532  C0F9  F0DD         	movff	_gCharSize,LCD_DrawField@pSize
 10245  011536  C0FA  F0DE         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10246  01153A  C0FB  F0DF         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10247  01153E  C0FC  F0E0         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10248  011542  ECB2  F098         	call	_LCD_DrawField	;wreg free
 10249                           
 10250                           ;Console.c: 405: }
 10251  011546  D017               	goto	l11512
 10252  011548                     l11510:
 10253                           
 10254                           ;Console.c: 406: else
 10255                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10256  011548  0E00               	movlw	0
 10257  01154A  0100               	movlb	0	; () banked
 10258  01154C  6FCF               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10259  01154E  0E00               	movlw	0
 10260  011550  6FCE               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10261  011552  C0EB  F0D0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10262  011556  C0EC  F0D1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10263  01155A  C0ED  F0D2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10264  01155E  C0EE  F0D3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10265  011562  C0F9  F0D4         	movff	_gCharSize,LCD_FillRectangle@pSize
 10266  011566  C0FA  F0D5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10267  01156A  C0FB  F0D6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10268  01156E  C0FC  F0D7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10269  011572  EC45  F09C         	call	_LCD_FillRectangle	;wreg free
 10270  011576                     l11512:
 10271                           
 10272                           ;Console.c: 408: }
 10273                           ;Console.c: 409: lCursor.x += (5 + 1);
 10274  011576  0E06               	movlw	6
 10275  011578  0100               	movlb	0	; () banked
 10276  01157A  27EB               	addwf	Console_Render@lCursor& (0+255),f,b
 10277  01157C  0E00               	movlw	0
 10278  01157E  23EC               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10279                           
 10280                           ; BSR set to: 0
 10281  011580  0100               	movlb	0	; () banked
 10282  011582  2BEF               	incf	Console_Render@x& (0+255),f,b
 10283  011584  D73D               	goto	l11498
 10284  011586                     l11518:
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;Console.c: 410: }
 10288                           ;Console.c: 411: lCursor.y += (7 + 1);
 10289  011586  0E08               	movlw	8
 10290  011588  0100               	movlb	0	; () banked
 10291  01158A  27ED               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10292  01158C  0E00               	movlw	0
 10293  01158E  23EE               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10294                           
 10295                           ; BSR set to: 0
 10296                           ;Console.c: 412: lCursor.x = 6;
 10297  011590  0E00               	movlw	0
 10298  011592  0100               	movlb	0	; () banked
 10299  011594  6FEC               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10300  011596  0E06               	movlw	6
 10301  011598  6FEB               	movwf	Console_Render@lCursor& (0+255),b
 10302                           
 10303                           ; BSR set to: 0
 10304  01159A  0100               	movlb	0	; () banked
 10305  01159C  2BF0               	incf	Console_Render@y& (0+255),f,b
 10306  01159E                     l11524:
 10307                           
 10308                           ; BSR set to: 0
 10309  01159E  0100               	movlb	0	; () banked
 10310  0115A0  51F0               	movf	Console_Render@y& (0+255),w,b
 10311  0115A2  5C36               	subwf	_lBufferY,w,c
 10312  0115A4  B0D8               	btfsc	status,0,c
 10313  0115A6  D71C               	goto	l11494
 10314                           
 10315                           ; BSR set to: 0
 10316                           ;Console.c: 413: }
 10317                           ;Console.c: 415: if (clearall)
 10318                           
 10319                           ; BSR set to: 0
 10320  0115A8  0100               	movlb	0	; () banked
 10321  0115AA  517D               	movf	_clearall& (0+255),w,b
 10322  0115AC  B4D8               	btfsc	status,2,c
 10323  0115AE  0012               	return	
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;Console.c: 416: {
 10327                           ;Console.c: 417: clearall = 0;
 10328  0115B0  0E00               	movlw	0
 10329  0115B2  0100               	movlb	0	; () banked
 10330  0115B4  6F7D               	movwf	_clearall& (0+255),b
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;Console.c: 418: lBufferY = temp;
 10334  0115B6  C0EA  F036         	movff	Console_Render@temp,_lBufferY
 10335                           
 10336                           ; BSR set to: 0
 10337  0115BA  0012               	return	
 10338  0115BC                     __end_of_Console_Render:
 10339                           	opt stack 0
 10340                           tosu	equ	0xFFF
 10341                           tosh	equ	0xFFE
 10342                           tosl	equ	0xFFD
 10343                           pclath	equ	0xFFA
 10344                           tblptru	equ	0xFF8
 10345                           tblptrh	equ	0xFF7
 10346                           tblptrl	equ	0xFF6
 10347                           tablat	equ	0xFF5
 10348                           prodh	equ	0xFF4
 10349                           prodl	equ	0xFF3
 10350                           postinc0	equ	0xFEE
 10351                           wreg	equ	0xFE8
 10352                           indf1	equ	0xFE7
 10353                           postdec1	equ	0xFE5
 10354                           fsr1h	equ	0xFE2
 10355                           fsr1l	equ	0xFE1
 10356                           indf2	equ	0xFDF
 10357                           postinc2	equ	0xFDE
 10358                           postdec2	equ	0xFDD
 10359                           plusw2	equ	0xFDB
 10360                           fsr2h	equ	0xFDA
 10361                           fsr2l	equ	0xFD9
 10362                           status	equ	0xFD8
 10363                           
 10364 ;; *************** function _LCD_FillRectangle *****************
 10365 ;; Defined at:
 10366 ;;		line 318 in file "Library/LCD.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  pColour         2    9[BANK0 ] unsigned short 
 10369 ;;  pPoint          4   11[BANK0 ] struct Point
 10370 ;;  pSize           4   15[BANK0 ] struct Point
 10371 ;; Auto vars:     Size  Location     Type
 10372 ;;  j               1   22[BANK0 ] unsigned char 
 10373 ;;  i               1   21[BANK0 ] unsigned char 
 10374 ;; Return value:  Size  Location     Type
 10375 ;;                  1    wreg      void 
 10376 ;; Registers used:
 10377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10378 ;; Tracked objects:
 10379 ;;		On entry : 0/0
 10380 ;;		On exit  : 0/0
 10381 ;;		Unchanged: 0/0
 10382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10383 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10384 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;Total ram usage:       14 bytes
 10388 ;; Hardware stack levels used:    1
 10389 ;; Hardware stack levels required when called:   10
 10390 ;; This function calls:
 10391 ;;		_LCD_Word_Write
 10392 ;;		_Set_Addr_Window
 10393 ;; This function is called by:
 10394 ;;		_Console_Render
 10395 ;;		_Console_ClearLine
 10396 ;; This function uses a non-reentrant model
 10397 ;;
 10398                           
 10399                           	psect	text55
 10400  01388A                     __ptext55:
 10401                           	opt stack 0
 10402  01388A                     _LCD_FillRectangle:
 10403                           	opt stack 16
 10404                           
 10405                           ;LCD.c: 320: UINT8 i = 0x00;
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;incstack = 0
 10409  01388A  0E00               	movlw	0
 10410  01388C  0100               	movlb	0	; () banked
 10411  01388E  6FDA               	movwf	LCD_FillRectangle@i& (0+255),b
 10412                           
 10413                           ;LCD.c: 321: UINT8 j = 0x00;
 10414  013890  0E00               	movlw	0
 10415  013892  0100               	movlb	0	; () banked
 10416  013894  6FDB               	movwf	LCD_FillRectangle@j& (0+255),b
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10420  013896  C0D2  F0CA         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10421  01389A  0100               	movlb	0	; () banked
 10422  01389C  51D0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10423  01389E  0100               	movlb	0	; () banked
 10424  0138A0  25D4               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10425  0138A2  0100               	movlb	0	; () banked
 10426  0138A4  6FD8               	movwf	??_LCD_FillRectangle& (0+255),b
 10427  0138A6  0100               	movlb	0	; () banked
 10428  0138A8  05D8               	decf	??_LCD_FillRectangle& (0+255),w,b
 10429  0138AA  0100               	movlb	0	; () banked
 10430  0138AC  6FCB               	movwf	Set_Addr_Window@xe& (0+255),b
 10431  0138AE  0100               	movlb	0	; () banked
 10432  0138B0  51D2               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10433  0138B2  0100               	movlb	0	; () banked
 10434  0138B4  25D6               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10435  0138B6  0100               	movlb	0	; () banked
 10436  0138B8  6FD9               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10437  0138BA  0100               	movlb	0	; () banked
 10438  0138BC  05D9               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10439  0138BE  0100               	movlb	0	; () banked
 10440  0138C0  6FCC               	movwf	Set_Addr_Window@ye& (0+255),b
 10441  0138C2  0100               	movlb	0	; () banked
 10442  0138C4  51D0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10443  0138C6  EC0F  F097         	call	_Set_Addr_Window
 10444                           
 10445                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10446  0138CA  C0D6  F0DB         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10447  0138CE                     l10934:
 10448  0138CE  0100               	movlb	0	; () banked
 10449  0138D0  51DB               	movf	LCD_FillRectangle@j& (0+255),w,b
 10450  0138D2  0100               	movlb	0	; () banked
 10451  0138D4  B4D8               	btfsc	status,2,c
 10452  0138D6  0012               	return	
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10456                           
 10457                           ; BSR set to: 0
 10458  0138D8  C0D4  F0DA         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10459  0138DC                     l10938:
 10460                           
 10461                           ; BSR set to: 0
 10462  0138DC  0100               	movlb	0	; () banked
 10463  0138DE  51DA               	movf	LCD_FillRectangle@i& (0+255),w,b
 10464  0138E0  0100               	movlb	0	; () banked
 10465  0138E2  B4D8               	btfsc	status,2,c
 10466  0138E4  D009               	goto	l10948
 10467                           
 10468                           ; BSR set to: 0
 10469                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10470                           
 10471                           ; BSR set to: 0
 10472                           
 10473                           ; BSR set to: 0
 10474  0138E6  C0CE  F0CA         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10475  0138EA  C0CF  F0CB         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10476  0138EE  EC4D  F0A4         	call	_LCD_Word_Write	;wreg free
 10477  0138F2  0100               	movlb	0	; () banked
 10478  0138F4  07DA               	decf	LCD_FillRectangle@i& (0+255),f,b
 10479  0138F6  D7F2               	goto	l10938
 10480  0138F8                     l10948:
 10481                           
 10482                           ; BSR set to: 0
 10483  0138F8  0100               	movlb	0	; () banked
 10484  0138FA  07DB               	decf	LCD_FillRectangle@j& (0+255),f,b
 10485  0138FC  D7E8               	goto	l10934
 10486  0138FE                     __end_of_LCD_FillRectangle:
 10487                           	opt stack 0
 10488                           tosu	equ	0xFFF
 10489                           tosh	equ	0xFFE
 10490                           tosl	equ	0xFFD
 10491                           pclath	equ	0xFFA
 10492                           tblptru	equ	0xFF8
 10493                           tblptrh	equ	0xFF7
 10494                           tblptrl	equ	0xFF6
 10495                           tablat	equ	0xFF5
 10496                           prodh	equ	0xFF4
 10497                           prodl	equ	0xFF3
 10498                           postinc0	equ	0xFEE
 10499                           wreg	equ	0xFE8
 10500                           indf1	equ	0xFE7
 10501                           postdec1	equ	0xFE5
 10502                           fsr1h	equ	0xFE2
 10503                           fsr1l	equ	0xFE1
 10504                           indf2	equ	0xFDF
 10505                           postinc2	equ	0xFDE
 10506                           postdec2	equ	0xFDD
 10507                           plusw2	equ	0xFDB
 10508                           fsr2h	equ	0xFDA
 10509                           fsr2l	equ	0xFD9
 10510                           status	equ	0xFD8
 10511                           
 10512 ;; *************** function _LCD_DrawField *****************
 10513 ;; Defined at:
 10514 ;;		line 393 in file "Library/LCD.c"
 10515 ;; Parameters:    Size  Location     Type
 10516 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10517 ;;		 -> Console_MakeField@Fill(70), 
 10518 ;;  pPoint          4   20[BANK0 ] struct Point
 10519 ;;  pSize           4   24[BANK0 ] struct Point
 10520 ;; Auto vars:     Size  Location     Type
 10521 ;;  count           2   30[BANK0 ] unsigned short 
 10522 ;;  i               1   34[BANK0 ] unsigned char 
 10523 ;;  ymax            1   33[BANK0 ] unsigned char 
 10524 ;;  xmax            1   32[BANK0 ] unsigned char 
 10525 ;; Return value:  Size  Location     Type
 10526 ;;                  1    wreg      void 
 10527 ;; Registers used:
 10528 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10529 ;; Tracked objects:
 10530 ;;		On entry : 0/0
 10531 ;;		On exit  : 0/0
 10532 ;;		Unchanged: 0/0
 10533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10534 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10535 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10536 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10537 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;Total ram usage:       17 bytes
 10539 ;; Hardware stack levels used:    1
 10540 ;; Hardware stack levels required when called:   10
 10541 ;; This function calls:
 10542 ;;		_LCD_Word_Write
 10543 ;;		_Set_Addr_Window
 10544 ;;		___wmul
 10545 ;; This function is called by:
 10546 ;;		_Console_Render
 10547 ;; This function uses a non-reentrant model
 10548 ;;
 10549                           
 10550                           	psect	text56
 10551  013164                     __ptext56:
 10552                           	opt stack 0
 10553  013164                     _LCD_DrawField:
 10554                           	opt stack 16
 10555                           
 10556                           ;LCD.c: 396: UINT8 i = 0x00;
 10557                           
 10558                           ; BSR set to: 0
 10559                           ;incstack = 0
 10560  013164  0E00               	movlw	0
 10561  013166  0100               	movlb	0	; () banked
 10562  013168  6FE7               	movwf	LCD_DrawField@i& (0+255),b
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10566  01316A  0100               	movlb	0	; () banked
 10567  01316C  51D9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10568  01316E  0100               	movlb	0	; () banked
 10569  013170  25DD               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10570  013172  0100               	movlb	0	; () banked
 10571  013174  6FE5               	movwf	LCD_DrawField@xmax& (0+255),b
 10572                           
 10573                           ; BSR set to: 0
 10574                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10575  013176  0100               	movlb	0	; () banked
 10576  013178  51DB               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10577  01317A  0100               	movlb	0	; () banked
 10578  01317C  25DF               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10579  01317E  0100               	movlb	0	; () banked
 10580  013180  6FE6               	movwf	LCD_DrawField@ymax& (0+255),b
 10581                           
 10582                           ; BSR set to: 0
 10583                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10584  013182  C0DF  F0C5         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10585  013186  C0E0  F0C6         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10586  01318A  C0DD  F0C7         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10587  01318E  C0DE  F0C8         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10588  013192  EC6D  F0A2         	call	___wmul	;wreg free
 10589  013196  C0C5  F0E3         	movff	?___wmul,LCD_DrawField@count
 10590  01319A  C0C6  F0E4         	movff	?___wmul+1,LCD_DrawField@count+1
 10591                           
 10592                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10593  01319E  C0DB  F0CA         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10594  0131A2  0100               	movlb	0	; () banked
 10595  0131A4  05E5               	decf	LCD_DrawField@xmax& (0+255),w,b
 10596  0131A6  0100               	movlb	0	; () banked
 10597  0131A8  6FCB               	movwf	Set_Addr_Window@xe& (0+255),b
 10598  0131AA  0100               	movlb	0	; () banked
 10599  0131AC  05E6               	decf	LCD_DrawField@ymax& (0+255),w,b
 10600  0131AE  0100               	movlb	0	; () banked
 10601  0131B0  6FCC               	movwf	Set_Addr_Window@ye& (0+255),b
 10602  0131B2  0100               	movlb	0	; () banked
 10603  0131B4  51D9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10604  0131B6  EC0F  F097         	call	_Set_Addr_Window
 10605                           
 10606                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10607  0131BA  0E00               	movlw	0
 10608  0131BC  0100               	movlb	0	; () banked
 10609  0131BE  6FE7               	movwf	LCD_DrawField@i& (0+255),b
 10610  0131C0  D013               	goto	l10968
 10611  0131C2                     l10964:
 10612                           
 10613                           ; BSR set to: 0
 10614                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10615  0131C2  0100               	movlb	0	; () banked
 10616  0131C4  51E7               	movf	LCD_DrawField@i& (0+255),w,b
 10617  0131C6  0D02               	mullw	2
 10618  0131C8  50F3               	movf	prodl,w,c
 10619  0131CA  0100               	movlb	0	; () banked
 10620  0131CC  25D7               	addwf	LCD_DrawField@pField& (0+255),w,b
 10621  0131CE  6ED9               	movwf	fsr2l,c
 10622  0131D0  50F4               	movf	prodh,w,c
 10623  0131D2  0100               	movlb	0	; () banked
 10624  0131D4  21D8               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10625  0131D6  6EDA               	movwf	fsr2h,c
 10626  0131D8  CFDE F0CA          	movff	postinc2,LCD_Word_Write@value
 10627  0131DC  CFDD F0CB          	movff	postdec2,LCD_Word_Write@value+1
 10628  0131E0  EC4D  F0A4         	call	_LCD_Word_Write	;wreg free
 10629  0131E4  0100               	movlb	0	; () banked
 10630  0131E6  2BE7               	incf	LCD_DrawField@i& (0+255),f,b
 10631  0131E8                     l10968:
 10632                           
 10633                           ; BSR set to: 0
 10634  0131E8  0100               	movlb	0	; () banked
 10635  0131EA  51E7               	movf	LCD_DrawField@i& (0+255),w,b
 10636  0131EC  0100               	movlb	0	; () banked
 10637  0131EE  6FE1               	movwf	??_LCD_DrawField& (0+255),b
 10638  0131F0  6BE2               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10639  0131F2  0100               	movlb	0	; () banked
 10640  0131F4  51E3               	movf	LCD_DrawField@count& (0+255),w,b
 10641  0131F6  0100               	movlb	0	; () banked
 10642  0131F8  5DE1               	subwf	??_LCD_DrawField& (0+255),w,b
 10643  0131FA  0100               	movlb	0	; () banked
 10644  0131FC  51E4               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10645  0131FE  0100               	movlb	0	; () banked
 10646  013200  59E2               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10647  013202  B0D8               	btfsc	status,0,c
 10648  013204  0012               	return	
 10649  013206  D7DD               	goto	l10964
 10650  013208                     __end_of_LCD_DrawField:
 10651                           	opt stack 0
 10652                           tosu	equ	0xFFF
 10653                           tosh	equ	0xFFE
 10654                           tosl	equ	0xFFD
 10655                           pclath	equ	0xFFA
 10656                           tblptru	equ	0xFF8
 10657                           tblptrh	equ	0xFF7
 10658                           tblptrl	equ	0xFF6
 10659                           tablat	equ	0xFF5
 10660                           prodh	equ	0xFF4
 10661                           prodl	equ	0xFF3
 10662                           postinc0	equ	0xFEE
 10663                           wreg	equ	0xFE8
 10664                           indf1	equ	0xFE7
 10665                           postdec1	equ	0xFE5
 10666                           fsr1h	equ	0xFE2
 10667                           fsr1l	equ	0xFE1
 10668                           indf2	equ	0xFDF
 10669                           postinc2	equ	0xFDE
 10670                           postdec2	equ	0xFDD
 10671                           plusw2	equ	0xFDB
 10672                           fsr2h	equ	0xFDA
 10673                           fsr2l	equ	0xFD9
 10674                           status	equ	0xFD8
 10675                           
 10676 ;; *************** function ___wmul *****************
 10677 ;; Defined at:
 10678 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\Umul16.c"
 10679 ;; Parameters:    Size  Location     Type
 10680 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10681 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10682 ;; Auto vars:     Size  Location     Type
 10683 ;;  product         2    4[BANK0 ] unsigned int 
 10684 ;; Return value:  Size  Location     Type
 10685 ;;                  2    0[BANK0 ] unsigned int 
 10686 ;; Registers used:
 10687 ;;		wreg, status,2, status,0, prodl, prodh
 10688 ;; Tracked objects:
 10689 ;;		On entry : 0/0
 10690 ;;		On exit  : 0/0
 10691 ;;		Unchanged: 0/0
 10692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10693 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10694 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10695 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10696 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10697 ;;Total ram usage:        6 bytes
 10698 ;; Hardware stack levels used:    1
 10699 ;; Hardware stack levels required when called:    7
 10700 ;; This function calls:
 10701 ;;		Nothing
 10702 ;; This function is called by:
 10703 ;;		_LCD_DrawField
 10704 ;;		_continuousMode
 10705 ;; This function uses a non-reentrant model
 10706 ;;
 10707                           
 10708                           	psect	text57
 10709  0144DA                     __ptext57:
 10710                           	opt stack 0
 10711  0144DA                     ___wmul:
 10712                           	opt stack 18
 10713                           
 10714                           ; BSR set to: 0
 10715                           ;incstack = 0
 10716  0144DA  0100               	movlb	0	; () banked
 10717  0144DC  51C5               	movf	___wmul@multiplier& (0+255),w,b
 10718  0144DE  0100               	movlb	0	; () banked
 10719  0144E0  03C7               	mulwf	___wmul@multiplicand& (0+255),b
 10720  0144E2  CFF3 F0C9          	movff	prodl,___wmul@product
 10721  0144E6  CFF4 F0CA          	movff	prodh,___wmul@product+1
 10722  0144EA  0100               	movlb	0	; () banked
 10723  0144EC  51C5               	movf	___wmul@multiplier& (0+255),w,b
 10724  0144EE  0100               	movlb	0	; () banked
 10725  0144F0  03C8               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10726  0144F2  50F3               	movf	prodl,w,c
 10727  0144F4  0100               	movlb	0	; () banked
 10728  0144F6  27CA               	addwf	(___wmul@product+1)& (0+255),f,b
 10729  0144F8  0100               	movlb	0	; () banked
 10730  0144FA  51C6               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10731  0144FC  0100               	movlb	0	; () banked
 10732  0144FE  03C7               	mulwf	___wmul@multiplicand& (0+255),b
 10733  014500  50F3               	movf	prodl,w,c
 10734  014502  0100               	movlb	0	; () banked
 10735  014504  27CA               	addwf	(___wmul@product+1)& (0+255),f,b
 10736                           
 10737                           ; BSR set to: 0
 10738  014506  C0C9  F0C5         	movff	___wmul@product,?___wmul
 10739  01450A  C0CA  F0C6         	movff	___wmul@product+1,?___wmul+1
 10740  01450E  0012               	return	
 10741  014510                     __end_of___wmul:
 10742                           	opt stack 0
 10743                           tosu	equ	0xFFF
 10744                           tosh	equ	0xFFE
 10745                           tosl	equ	0xFFD
 10746                           pclath	equ	0xFFA
 10747                           tblptru	equ	0xFF8
 10748                           tblptrh	equ	0xFF7
 10749                           tblptrl	equ	0xFF6
 10750                           tablat	equ	0xFF5
 10751                           prodh	equ	0xFF4
 10752                           prodl	equ	0xFF3
 10753                           postinc0	equ	0xFEE
 10754                           wreg	equ	0xFE8
 10755                           indf1	equ	0xFE7
 10756                           postdec1	equ	0xFE5
 10757                           fsr1h	equ	0xFE2
 10758                           fsr1l	equ	0xFE1
 10759                           indf2	equ	0xFDF
 10760                           postinc2	equ	0xFDE
 10761                           postdec2	equ	0xFDD
 10762                           plusw2	equ	0xFDB
 10763                           fsr2h	equ	0xFDA
 10764                           fsr2l	equ	0xFD9
 10765                           status	equ	0xFD8
 10766                           
 10767 ;; *************** function _Console_MakeField *****************
 10768 ;; Defined at:
 10769 ;;		line 435 in file "Library/Console.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;  pInput          1    wreg     unsigned char 
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;  pInput          1   11[BANK0 ] unsigned char 
 10774 ;;  y               1   17[BANK0 ] unsigned char 
 10775 ;;  x               1   16[BANK0 ] unsigned char 
 10776 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10777 ;;		 -> Font5x7(480), 
 10778 ;;  Index           2    9[BANK0 ] unsigned short 
 10779 ;; Return value:  Size  Location     Type
 10780 ;;                  2    5[BANK0 ] PTR unsigned short 
 10781 ;; Registers used:
 10782 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10783 ;; Tracked objects:
 10784 ;;		On entry : 0/0
 10785 ;;		On exit  : 0/0
 10786 ;;		Unchanged: 0/0
 10787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10788 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10789 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10790 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10791 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10792 ;;Total ram usage:       13 bytes
 10793 ;; Hardware stack levels used:    1
 10794 ;; Hardware stack levels required when called:    8
 10795 ;; This function calls:
 10796 ;;		_Byte_GetBit
 10797 ;; This function is called by:
 10798 ;;		_Console_Render
 10799 ;; This function uses a non-reentrant model
 10800 ;;
 10801                           
 10802                           	psect	text58
 10803  012830                     __ptext58:
 10804                           	opt stack 0
 10805  012830                     _Console_MakeField:
 10806                           	opt stack 18
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;incstack = 0
 10810                           ;Console_MakeField@pInput stored from wreg
 10811  012830  0100               	movlb	0	; () banked
 10812  012832  6FD0               	movwf	Console_MakeField@pInput& (0+255),b
 10813                           
 10814                           ;Console.c: 437: static Colour Fill[7][5];
 10815                           ;Console.c: 438: pInput -= 32;
 10816  012834  0E20               	movlw	32
 10817  012836  0100               	movlb	0	; () banked
 10818  012838  5FD0               	subwf	Console_MakeField@pInput& (0+255),f,b
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10822  01283A  0100               	movlb	0	; () banked
 10823  01283C  51D0               	movf	Console_MakeField@pInput& (0+255),w,b
 10824  01283E  0D05               	mullw	5
 10825  012840  CFF3 F0CE          	movff	prodl,Console_MakeField@Index
 10826  012844  CFF4 F0CF          	movff	prodh,Console_MakeField@Index+1
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10830  012848  0E7B               	movlw	low _Font5x7
 10831  01284A  0100               	movlb	0	; () banked
 10832  01284C  25CE               	addwf	Console_MakeField@Index& (0+255),w,b
 10833  01284E  0100               	movlb	0	; () banked
 10834  012850  6FD1               	movwf	Console_MakeField@Column& (0+255),b
 10835  012852  0EFD               	movlw	high _Font5x7
 10836  012854  0100               	movlb	0	; () banked
 10837  012856  21CF               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10838  012858  0100               	movlb	0	; () banked
 10839  01285A  6FD2               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10840                           
 10841                           ; BSR set to: 0
 10842                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10843  01285C  0E00               	movlw	0
 10844  01285E  0100               	movlb	0	; () banked
 10845  012860  6FD5               	movwf	Console_MakeField@x& (0+255),b
 10846  012862                     l11060:
 10847                           
 10848                           ; BSR set to: 0
 10849  012862  0E04               	movlw	4
 10850  012864  0100               	movlb	0	; () banked
 10851  012866  65D5               	cpfsgt	Console_MakeField@x& (0+255),b
 10852  012868  D001               	goto	l11064
 10853  01286A  D043               	goto	l11084
 10854  01286C                     l11064:
 10855                           
 10856                           ; BSR set to: 0
 10857                           ;Console.c: 444: {
 10858                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10859  01286C  0E00               	movlw	0
 10860  01286E  0100               	movlb	0	; () banked
 10861  012870  6FD6               	movwf	Console_MakeField@y& (0+255),b
 10862  012872                     l11066:
 10863                           
 10864                           ; BSR set to: 0
 10865  012872  0E06               	movlw	6
 10866  012874  0100               	movlb	0	; () banked
 10867  012876  65D6               	cpfsgt	Console_MakeField@y& (0+255),b
 10868  012878  D001               	goto	l11070
 10869  01287A  D035               	goto	l11080
 10870  01287C                     l11070:
 10871                           
 10872                           ; BSR set to: 0
 10873                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10874  01287C  C0D1  F0C5         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10875  012880  C0D2  F0C6         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10876  012884  C0D6  F0C7         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10877  012888  ECA3  F0A2         	call	_Byte_GetBit	;wreg free
 10878  01288C  0900               	iorlw	0
 10879  01288E  A4D8               	btfss	status,2,c
 10880  012890  D005               	goto	l1082
 10881  012892  C074  F0D3         	movff	_gBackcolour,_Console_MakeField$10974
 10882  012896  C075  F0D4         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10883  01289A  D004               	goto	l11074
 10884  01289C                     l1082:
 10885  01289C  C0FD  F0D3         	movff	_gForecolour,_Console_MakeField$10974
 10886  0128A0  C0FE  F0D4         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10887  0128A4                     l11074:
 10888  0128A4  0100               	movlb	0	; () banked
 10889  0128A6  51D6               	movf	Console_MakeField@y& (0+255),w,b
 10890  0128A8  0D0A               	mullw	10
 10891  0128AA  0E00               	movlw	low Console_MakeField@Fill
 10892  0128AC  0100               	movlb	0	; () banked
 10893  0128AE  6FCC               	movwf	??_Console_MakeField& (0+255),b
 10894  0128B0  0E02               	movlw	high Console_MakeField@Fill
 10895  0128B2  0100               	movlb	0	; () banked
 10896  0128B4  6FCD               	movwf	(??_Console_MakeField+1)& (0+255),b
 10897  0128B6  50F3               	movf	prodl,w,c
 10898  0128B8  0100               	movlb	0	; () banked
 10899  0128BA  27CC               	addwf	??_Console_MakeField& (0+255),f,b
 10900  0128BC  50F4               	movf	prodh,w,c
 10901  0128BE  0100               	movlb	0	; () banked
 10902  0128C0  23CD               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10903  0128C2  0100               	movlb	0	; () banked
 10904  0128C4  51D5               	movf	Console_MakeField@x& (0+255),w,b
 10905  0128C6  0D02               	mullw	2
 10906  0128C8  50F3               	movf	prodl,w,c
 10907  0128CA  0100               	movlb	0	; () banked
 10908  0128CC  25CC               	addwf	??_Console_MakeField& (0+255),w,b
 10909  0128CE  6ED9               	movwf	fsr2l,c
 10910  0128D0  50F4               	movf	prodh,w,c
 10911  0128D2  0100               	movlb	0	; () banked
 10912  0128D4  21CD               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10913  0128D6  6EDA               	movwf	fsr2h,c
 10914  0128D8  C0D3  FFDE         	movff	_Console_MakeField$10974,postinc2
 10915  0128DC  C0D4  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10916                           
 10917                           ; BSR set to: 0
 10918  0128E0  0100               	movlb	0	; () banked
 10919  0128E2  2BD6               	incf	Console_MakeField@y& (0+255),f,b
 10920  0128E4  D7C6               	goto	l11066
 10921  0128E6                     l11080:
 10922                           
 10923                           ; BSR set to: 0
 10924                           ;Console.c: 447: Column += 1;
 10925  0128E6  0100               	movlb	0	; () banked
 10926  0128E8  4BD1               	infsnz	Console_MakeField@Column& (0+255),f,b
 10927  0128EA  2BD2               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10928  0128EC  0100               	movlb	0	; () banked
 10929  0128EE  2BD5               	incf	Console_MakeField@x& (0+255),f,b
 10930  0128F0  D7B8               	goto	l11060
 10931  0128F2                     l11084:
 10932                           
 10933                           ; BSR set to: 0
 10934                           ;Console.c: 448: }
 10935                           ;Console.c: 449: return (ColourPtr)Fill;
 10936  0128F2  0E00               	movlw	low Console_MakeField@Fill
 10937  0128F4  0100               	movlb	0	; () banked
 10938  0128F6  6FCA               	movwf	?_Console_MakeField& (0+255),b
 10939  0128F8  0E02               	movlw	high Console_MakeField@Fill
 10940  0128FA  0100               	movlb	0	; () banked
 10941  0128FC  6FCB               	movwf	(?_Console_MakeField+1)& (0+255),b
 10942  0128FE  0012               	return	
 10943  012900                     __end_of_Console_MakeField:
 10944                           	opt stack 0
 10945                           tosu	equ	0xFFF
 10946                           tosh	equ	0xFFE
 10947                           tosl	equ	0xFFD
 10948                           pclath	equ	0xFFA
 10949                           tblptru	equ	0xFF8
 10950                           tblptrh	equ	0xFF7
 10951                           tblptrl	equ	0xFF6
 10952                           tablat	equ	0xFF5
 10953                           prodh	equ	0xFF4
 10954                           prodl	equ	0xFF3
 10955                           postinc0	equ	0xFEE
 10956                           wreg	equ	0xFE8
 10957                           indf1	equ	0xFE7
 10958                           postdec1	equ	0xFE5
 10959                           fsr1h	equ	0xFE2
 10960                           fsr1l	equ	0xFE1
 10961                           indf2	equ	0xFDF
 10962                           postinc2	equ	0xFDE
 10963                           postdec2	equ	0xFDD
 10964                           plusw2	equ	0xFDB
 10965                           fsr2h	equ	0xFDA
 10966                           fsr2l	equ	0xFD9
 10967                           status	equ	0xFD8
 10968                           
 10969 ;; *************** function _Byte_GetBit *****************
 10970 ;; Defined at:
 10971 ;;		line 38 in file "Library/Types.c"
 10972 ;; Parameters:    Size  Location     Type
 10973 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10974 ;;		 -> Font5x7(480), 
 10975 ;;  pBit            1    2[BANK0 ] unsigned char 
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;  Output          1    4[BANK0 ] unsigned char 
 10978 ;; Return value:  Size  Location     Type
 10979 ;;                  1    wreg      unsigned char 
 10980 ;; Registers used:
 10981 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10987 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10990 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;Total ram usage:        5 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; Hardware stack levels required when called:    7
 10994 ;; This function calls:
 10995 ;;		Nothing
 10996 ;; This function is called by:
 10997 ;;		_Console_MakeField
 10998 ;;		_Word_GetBit
 10999 ;; This function uses a non-reentrant model
 11000 ;;
 11001                           
 11002                           	psect	text59
 11003  014546                     __ptext59:
 11004                           	opt stack 0
 11005  014546                     _Byte_GetBit:
 11006                           	opt stack 18
 11007                           
 11008                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11009                           
 11010                           ; BSR set to: 0
 11011                           ;incstack = 0
 11012  014546  C0C5  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11013  01454A  C0C6  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11014  01454E                     	if	0	;tblptru may be non-zero
 11015  01454E                     	endif
 11016  01454E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11017  01454E  0E00               	movlw	low (__mediumconst shr (0+16))
 11018  014550  6EF8               	movwf	tblptru,c
 11019  014552                     	endif
 11020  014552  0008               	tblrd		*
 11021  014554  CFF5 F0C9          	movff	tablat,Byte_GetBit@Output
 11022                           
 11023                           ;Types.c: 42: Output >>= pBit;
 11024  014558  0100               	movlb	0	; () banked
 11025  01455A  29C7               	incf	Byte_GetBit@pBit& (0+255),w,b
 11026  01455C  0100               	movlb	0	; () banked
 11027  01455E  6FC8               	movwf	??_Byte_GetBit& (0+255),b
 11028  014560  D003               	goto	u7260
 11029  014562                     u7265:
 11030  014562  0100               	movlb	0	; () banked
 11031  014564  90D8               	bcf	status,0,c
 11032  014566  33C9               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11033  014568                     u7260:
 11034  014568  0100               	movlb	0	; () banked
 11035  01456A  2FC8               	decfsz	??_Byte_GetBit& (0+255),f,b
 11036  01456C  D7FA               	goto	u7265
 11037                           
 11038                           ;Types.c: 43: Output &= 1;
 11039  01456E  0E01               	movlw	1
 11040  014570  0100               	movlb	0	; () banked
 11041  014572  17C9               	andwf	Byte_GetBit@Output& (0+255),f,b
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;Types.c: 44: return Output;
 11045  014574  0100               	movlb	0	; () banked
 11046  014576  51C9               	movf	Byte_GetBit@Output& (0+255),w,b
 11047  014578  0012               	return	
 11048  01457A                     __end_of_Byte_GetBit:
 11049                           	opt stack 0
 11050                           tosu	equ	0xFFF
 11051                           tosh	equ	0xFFE
 11052                           tosl	equ	0xFFD
 11053                           pclath	equ	0xFFA
 11054                           tblptru	equ	0xFF8
 11055                           tblptrh	equ	0xFF7
 11056                           tblptrl	equ	0xFF6
 11057                           tablat	equ	0xFF5
 11058                           prodh	equ	0xFF4
 11059                           prodl	equ	0xFF3
 11060                           postinc0	equ	0xFEE
 11061                           wreg	equ	0xFE8
 11062                           indf1	equ	0xFE7
 11063                           postdec1	equ	0xFE5
 11064                           fsr1h	equ	0xFE2
 11065                           fsr1l	equ	0xFE1
 11066                           indf2	equ	0xFDF
 11067                           postinc2	equ	0xFDE
 11068                           postdec2	equ	0xFDD
 11069                           plusw2	equ	0xFDB
 11070                           fsr2h	equ	0xFDA
 11071                           fsr2l	equ	0xFD9
 11072                           status	equ	0xFD8
 11073                           
 11074 ;; *************** function _Motor_Speed *****************
 11075 ;; Defined at:
 11076 ;;		line 117 in file "Library/Motor.c"
 11077 ;; Parameters:    Size  Location     Type
 11078 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 11079 ;;		 -> Stepper(6), 
 11080 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 11081 ;; Auto vars:     Size  Location     Type
 11082 ;;		None
 11083 ;; Return value:  Size  Location     Type
 11084 ;;                  1    wreg      unsigned char 
 11085 ;; Registers used:
 11086 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11087 ;; Tracked objects:
 11088 ;;		On entry : 0/0
 11089 ;;		On exit  : 0/0
 11090 ;;		Unchanged: 0/0
 11091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11092 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11093 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;Total ram usage:        4 bytes
 11097 ;; Hardware stack levels used:    1
 11098 ;; Hardware stack levels required when called:    9
 11099 ;; This function calls:
 11100 ;;		_Timer0_Init
 11101 ;; This function is called by:
 11102 ;;		_continuousMode
 11103 ;; This function uses a non-reentrant model
 11104 ;;
 11105                           
 11106                           	psect	text60
 11107  01474E                     __ptext60:
 11108                           	opt stack 0
 11109  01474E                     _Motor_Speed:
 11110                           	opt stack 19
 11111                           
 11112                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 11113                           
 11114                           ; BSR set to: 0
 11115                           ;incstack = 0
 11116  01474E  0100               	movlb	0	; () banked
 11117  014750  EE20 F002          	lfsr	2,2
 11118  014754  51E0               	movf	Motor_Speed@pMotor& (0+255),w,b
 11119  014756  26D9               	addwf	fsr2l,f,c
 11120  014758  51E1               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 11121  01475A  22DA               	addwfc	fsr2h,f,c
 11122  01475C  C0E2  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 11123  014760  C0E3  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 11124                           
 11125                           ; BSR set to: 0
 11126                           ;Motor.c: 120: Timer0_Init(pFrequency);
 11127  014764  C0E2  F0D2         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 11128  014768  C0E3  F0D3         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 11129  01476C  0100               	movlb	0	; () banked
 11130  01476E  6BD4               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 11131  014770  6BD5               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 11132  014772  EC73  F090         	call	_Timer0_Init	;wreg free
 11133  014776  0012               	return	
 11134  014778                     __end_of_Motor_Speed:
 11135                           	opt stack 0
 11136                           tosu	equ	0xFFF
 11137                           tosh	equ	0xFFE
 11138                           tosl	equ	0xFFD
 11139                           pclath	equ	0xFFA
 11140                           tblptru	equ	0xFF8
 11141                           tblptrh	equ	0xFF7
 11142                           tblptrl	equ	0xFF6
 11143                           tablat	equ	0xFF5
 11144                           prodh	equ	0xFF4
 11145                           prodl	equ	0xFF3
 11146                           postinc0	equ	0xFEE
 11147                           wreg	equ	0xFE8
 11148                           indf1	equ	0xFE7
 11149                           postdec1	equ	0xFE5
 11150                           fsr1h	equ	0xFE2
 11151                           fsr1l	equ	0xFE1
 11152                           indf2	equ	0xFDF
 11153                           postinc2	equ	0xFDE
 11154                           postdec2	equ	0xFDD
 11155                           plusw2	equ	0xFDB
 11156                           fsr2h	equ	0xFDA
 11157                           fsr2l	equ	0xFD9
 11158                           status	equ	0xFD8
 11159                           
 11160 ;; *************** function _Motor_Move *****************
 11161 ;; Defined at:
 11162 ;;		line 51 in file "Library/Motor.c"
 11163 ;; Parameters:    Size  Location     Type
 11164 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 11165 ;;		 -> Stepper(6), 
 11166 ;;  pDelta          2    5[BANK0 ] short 
 11167 ;; Auto vars:     Size  Location     Type
 11168 ;;		None
 11169 ;; Return value:  Size  Location     Type
 11170 ;;                  1    wreg      unsigned char 
 11171 ;; Registers used:
 11172 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11173 ;; Tracked objects:
 11174 ;;		On entry : 0/0
 11175 ;;		On exit  : 0/0
 11176 ;;		Unchanged: 0/0
 11177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11178 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11179 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11180 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11181 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11182 ;;Total ram usage:        6 bytes
 11183 ;; Hardware stack levels used:    1
 11184 ;; Hardware stack levels required when called:    8
 11185 ;; This function calls:
 11186 ;;		_Timer0_Start
 11187 ;; This function is called by:
 11188 ;;		_continuousMode
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           	psect	text61
 11193  0144A0                     __ptext61:
 11194                           	opt stack 0
 11195  0144A0                     _Motor_Move:
 11196                           	opt stack 20
 11197                           
 11198                           ;Motor.c: 54: lMotor = pMotor;
 11199                           
 11200                           ;incstack = 0
 11201  0144A0  C0C8  F02A         	movff	Motor_Move@pMotor,_lMotor
 11202  0144A4  C0C9  F02B         	movff	Motor_Move@pMotor+1,_lMotor+1
 11203                           
 11204                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 11205  0144A8  C0C8  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11206  0144AC  C0C9  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11207  0144B0  50DE               	movf	postinc2,w,c
 11208  0144B2  10DE               	iorwf	postinc2,w,c
 11209  0144B4  A4D8               	btfss	status,2,c
 11210  0144B6  0012               	return	
 11211                           
 11212                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 11213                           
 11214                           ;Motor.c: 59: return 0;
 11215                           ;	Return value of _Motor_Move is never used
 11216  0144B8  C0C8  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11217  0144BC  C0C9  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11218  0144C0  C0CA  FFDE         	movff	Motor_Move@pDelta,postinc2
 11219  0144C4  C0CB  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 11220                           
 11221                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 11222  0144C8  C06B  F0C5         	movff	_lStepFunction,Timer0_Start@pFunction
 11223  0144CC  C06C  F0C6         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 11224  0144D0  C06D  F0C7         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 11225  0144D4  ECF8  F0A3         	call	_Timer0_Start	;wreg free
 11226  0144D8  0012               	return	
 11227  0144DA                     __end_of_Motor_Move:
 11228                           	opt stack 0
 11229                           tosu	equ	0xFFF
 11230                           tosh	equ	0xFFE
 11231                           tosl	equ	0xFFD
 11232                           pclath	equ	0xFFA
 11233                           tblptru	equ	0xFF8
 11234                           tblptrh	equ	0xFF7
 11235                           tblptrl	equ	0xFF6
 11236                           tablat	equ	0xFF5
 11237                           prodh	equ	0xFF4
 11238                           prodl	equ	0xFF3
 11239                           postinc0	equ	0xFEE
 11240                           wreg	equ	0xFE8
 11241                           indf1	equ	0xFE7
 11242                           postdec1	equ	0xFE5
 11243                           fsr1h	equ	0xFE2
 11244                           fsr1l	equ	0xFE1
 11245                           indf2	equ	0xFDF
 11246                           postinc2	equ	0xFDE
 11247                           postdec2	equ	0xFDD
 11248                           plusw2	equ	0xFDB
 11249                           fsr2h	equ	0xFDA
 11250                           fsr2l	equ	0xFD9
 11251                           status	equ	0xFD8
 11252                           
 11253 ;; *************** function _Timer0_Start *****************
 11254 ;; Defined at:
 11255 ;;		line 75 in file "Library/Timer0.c"
 11256 ;; Parameters:    Size  Location     Type
 11257 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 11258 ;;		 -> Absolute function(1), Motor_Step(1), 
 11259 ;; Auto vars:     Size  Location     Type
 11260 ;;		None
 11261 ;; Return value:  Size  Location     Type
 11262 ;;                  1    wreg      void 
 11263 ;; Registers used:
 11264 ;;		wreg, status,2, status,0
 11265 ;; Tracked objects:
 11266 ;;		On entry : 0/0
 11267 ;;		On exit  : 0/0
 11268 ;;		Unchanged: 0/0
 11269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11270 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11273 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11274 ;;Total ram usage:        3 bytes
 11275 ;; Hardware stack levels used:    1
 11276 ;; Hardware stack levels required when called:    7
 11277 ;; This function calls:
 11278 ;;		Nothing
 11279 ;; This function is called by:
 11280 ;;		_Motor_Move
 11281 ;; This function uses a non-reentrant model
 11282 ;;
 11283                           
 11284                           	psect	text62
 11285  0147F0                     __ptext62:
 11286                           	opt stack 0
 11287  0147F0                     _Timer0_Start:
 11288                           	opt stack 20
 11289                           
 11290                           ;Timer0.c: 77: gISR = pFunction;
 11291                           
 11292                           ;incstack = 0
 11293  0147F0  C0C5  F068         	movff	Timer0_Start@pFunction,_gISR
 11294  0147F4  C0C6  F069         	movff	Timer0_Start@pFunction+1,_gISR+1
 11295  0147F8  C0C7  F06A         	movff	Timer0_Start@pFunction+2,_gISR+2
 11296                           
 11297                           ;Timer0.c: 78: TMR0 = COUNTER;
 11298  0147FC  C028  FFD6         	movff	_COUNTER,4054	;volatile
 11299  014800  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 11300                           
 11301                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 11302  014804  50D5               	movf	4053,w,c	;volatile
 11303  014806  1831               	xorwf	_INDEX,w,c
 11304  014808  0BF8               	andlw	-8
 11305  01480A  1831               	xorwf	_INDEX,w,c
 11306  01480C  6ED5               	movwf	4053,c	;volatile
 11307                           
 11308                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 11309  01480E  94F2               	bcf	intcon,2,c	;volatile
 11310                           
 11311                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 11312  014810  8AF2               	bsf	intcon,5,c	;volatile
 11313  014812  0012               	return		;funcret
 11314  014814                     __end_of_Timer0_Start:
 11315                           	opt stack 0
 11316                           tosu	equ	0xFFF
 11317                           tosh	equ	0xFFE
 11318                           tosl	equ	0xFFD
 11319                           pclath	equ	0xFFA
 11320                           tblptru	equ	0xFF8
 11321                           tblptrh	equ	0xFF7
 11322                           tblptrl	equ	0xFF6
 11323                           tablat	equ	0xFF5
 11324                           prodh	equ	0xFF4
 11325                           prodl	equ	0xFF3
 11326                           intcon	equ	0xFF2
 11327                           postinc0	equ	0xFEE
 11328                           wreg	equ	0xFE8
 11329                           indf1	equ	0xFE7
 11330                           postdec1	equ	0xFE5
 11331                           fsr1h	equ	0xFE2
 11332                           fsr1l	equ	0xFE1
 11333                           indf2	equ	0xFDF
 11334                           postinc2	equ	0xFDE
 11335                           postdec2	equ	0xFDD
 11336                           plusw2	equ	0xFDB
 11337                           fsr2h	equ	0xFDA
 11338                           fsr2l	equ	0xFD9
 11339                           status	equ	0xFD8
 11340                           
 11341 ;; *************** function _initialise *****************
 11342 ;; Defined at:
 11343 ;;		line 37 in file "main.c"
 11344 ;; Parameters:    Size  Location     Type
 11345 ;;		None
 11346 ;; Auto vars:     Size  Location     Type
 11347 ;;		None
 11348 ;; Return value:  Size  Location     Type
 11349 ;;                  1    wreg      void 
 11350 ;; Registers used:
 11351 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11352 ;; Tracked objects:
 11353 ;;		On entry : 0/0
 11354 ;;		On exit  : 0/0
 11355 ;;		Unchanged: 0/0
 11356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11360 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11361 ;;Total ram usage:        0 bytes
 11362 ;; Hardware stack levels used:    1
 11363 ;; Hardware stack levels required when called:   17
 11364 ;; This function calls:
 11365 ;;		_Console_Init
 11366 ;;		_HMI_Init
 11367 ;;		_ISR_Enable
 11368 ;;		_LCD_Init
 11369 ;;		_MXK_BlockSwitchTo
 11370 ;;		_MXK_Dequeue
 11371 ;;		_MXK_Init
 11372 ;;		_MXK_Release
 11373 ;;		_Motor_Init
 11374 ;; This function is called by:
 11375 ;;		_main
 11376 ;; This function uses a non-reentrant model
 11377 ;;
 11378                           
 11379                           	psect	text63
 11380  013E00                     __ptext63:
 11381                           	opt stack 0
 11382  013E00                     _initialise:
 11383                           	opt stack 13
 11384                           
 11385                           ;main.c: 39: MXK_Init();
 11386                           
 11387                           ;incstack = 0
 11388  013E00  EC4A  F08E         	call	_MXK_Init	;wreg free
 11389                           
 11390                           ;main.c: 42: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 11391  013E04  0E01               	movlw	1
 11392  013E06  ECB9  F0A1         	call	_MXK_BlockSwitchTo
 11393  013E0A  0900               	iorlw	0
 11394  013E0C  B4D8               	btfsc	status,2,c
 11395  013E0E  D00C               	goto	l13096
 11396                           
 11397                           ;main.c: 44: LCD_Init();
 11398  013E10  EC07  F08F         	call	_LCD_Init	;wreg free
 11399                           
 11400                           ;main.c: 45: Console_Init();
 11401  013E14  EC4D  F09B         	call	_Console_Init	;wreg free
 11402                           
 11403                           ;main.c: 46: HMI_Init();
 11404  013E18  ECDE  F08A         	call	_HMI_Init	;wreg free
 11405                           
 11406                           ;main.c: 47: if (MXK_Release())
 11407  013E1C  EC41  F0A5         	call	_MXK_Release	;wreg free
 11408  013E20  0900               	iorlw	0
 11409  013E22  A4D8               	btfss	status,2,c
 11410                           
 11411                           ;main.c: 48: MXK_Dequeue();
 11412  013E24  ECEE  F0A2         	call	_MXK_Dequeue	;wreg free
 11413  013E28                     l13096:
 11414                           
 11415                           ;main.c: 49: }
 11416                           ;main.c: 52: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 11417  013E28  0E08               	movlw	8
 11418  013E2A  ECB9  F0A1         	call	_MXK_BlockSwitchTo
 11419  013E2E  0900               	iorlw	0
 11420  013E30  B4D8               	btfsc	status,2,c
 11421  013E32  D013               	goto	l13104
 11422                           
 11423                           ;main.c: 53: Motor_Init(&Stepper, 0b1000);
 11424  013E34  0EA3               	movlw	low _Stepper
 11425  013E36  0100               	movlb	0	; () banked
 11426  013E38  6FF2               	movwf	Motor_Init@pMotor& (0+255),b
 11427  013E3A  0E00               	movlw	high _Stepper
 11428  013E3C  0100               	movlb	0	; () banked
 11429  013E3E  6FF3               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 11430  013E40  0E00               	movlw	0
 11431  013E42  0100               	movlb	0	; () banked
 11432  013E44  6FF5               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 11433  013E46  0E08               	movlw	8
 11434  013E48  6FF4               	movwf	Motor_Init@pAddress& (0+255),b
 11435  013E4A  EC43  F093         	call	_Motor_Init	;wreg free
 11436                           
 11437                           ;main.c: 54: if (MXK_Release())
 11438  013E4E  EC41  F0A5         	call	_MXK_Release	;wreg free
 11439  013E52  0900               	iorlw	0
 11440  013E54  A4D8               	btfss	status,2,c
 11441                           
 11442                           ;main.c: 55: MXK_Dequeue();
 11443  013E56  ECEE  F0A2         	call	_MXK_Dequeue	;wreg free
 11444  013E5A                     l13104:
 11445                           
 11446                           ;main.c: 56: }
 11447                           ;main.c: 59: ISR_Enable();
 11448  013E5A  EC92  F0A5         	call	_ISR_Enable	;wreg free
 11449  013E5E  0012               	return		;funcret
 11450  013E60                     __end_of_initialise:
 11451                           	opt stack 0
 11452                           tosu	equ	0xFFF
 11453                           tosh	equ	0xFFE
 11454                           tosl	equ	0xFFD
 11455                           pclath	equ	0xFFA
 11456                           tblptru	equ	0xFF8
 11457                           tblptrh	equ	0xFF7
 11458                           tblptrl	equ	0xFF6
 11459                           tablat	equ	0xFF5
 11460                           prodh	equ	0xFF4
 11461                           prodl	equ	0xFF3
 11462                           intcon	equ	0xFF2
 11463                           postinc0	equ	0xFEE
 11464                           wreg	equ	0xFE8
 11465                           indf1	equ	0xFE7
 11466                           postdec1	equ	0xFE5
 11467                           fsr1h	equ	0xFE2
 11468                           fsr1l	equ	0xFE1
 11469                           indf2	equ	0xFDF
 11470                           postinc2	equ	0xFDE
 11471                           postdec2	equ	0xFDD
 11472                           plusw2	equ	0xFDB
 11473                           fsr2h	equ	0xFDA
 11474                           fsr2l	equ	0xFD9
 11475                           status	equ	0xFD8
 11476                           
 11477 ;; *************** function _Motor_Init *****************
 11478 ;; Defined at:
 11479 ;;		line 26 in file "Library/Motor.c"
 11480 ;; Parameters:    Size  Location     Type
 11481 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 11482 ;;		 -> Stepper(6), 
 11483 ;;  pAddress        2   47[BANK0 ] unsigned short 
 11484 ;; Auto vars:     Size  Location     Type
 11485 ;;		None
 11486 ;; Return value:  Size  Location     Type
 11487 ;;                  1    wreg      void 
 11488 ;; Registers used:
 11489 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11490 ;; Tracked objects:
 11491 ;;		On entry : 0/0
 11492 ;;		On exit  : 0/0
 11493 ;;		Unchanged: 0/0
 11494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11498 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11499 ;;Total ram usage:        4 bytes
 11500 ;; Hardware stack levels used:    1
 11501 ;; Hardware stack levels required when called:   12
 11502 ;; This function calls:
 11503 ;;		_Port_SetPin
 11504 ;;		_Port_SetPinType
 11505 ;;		_Timer0_Init
 11506 ;; This function is called by:
 11507 ;;		_initialise
 11508 ;; This function uses a non-reentrant model
 11509 ;;
 11510                           
 11511                           	psect	text64
 11512  012686                     __ptext64:
 11513                           	opt stack 0
 11514  012686                     _Motor_Init:
 11515                           	opt stack 17
 11516                           
 11517                           ;Motor.c: 28: pMotor->mDelta = 0;
 11518                           
 11519                           ;incstack = 0
 11520  012686  C0F2  FFD9         	movff	Motor_Init@pMotor,fsr2l
 11521  01268A  C0F3  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 11522  01268E  0E00               	movlw	0
 11523  012690  6EDE               	movwf	postinc2,c
 11524  012692  0E00               	movlw	0
 11525  012694  6EDD               	movwf	postdec2,c
 11526                           
 11527                           ;Motor.c: 29: pMotor->mFrequency = 0;
 11528  012696  0100               	movlb	0	; () banked
 11529  012698  EE20 F002          	lfsr	2,2
 11530  01269C  51F2               	movf	Motor_Init@pMotor& (0+255),w,b
 11531  01269E  26D9               	addwf	fsr2l,f,c
 11532  0126A0  51F3               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11533  0126A2  22DA               	addwfc	fsr2h,f,c
 11534  0126A4  0E00               	movlw	0
 11535  0126A6  6EDE               	movwf	postinc2,c
 11536  0126A8  0E00               	movlw	0
 11537  0126AA  6EDD               	movwf	postdec2,c
 11538                           
 11539                           ; BSR set to: 0
 11540                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 11541  0126AC  0100               	movlb	0	; () banked
 11542  0126AE  EE20 F004          	lfsr	2,4
 11543  0126B2  51F2               	movf	Motor_Init@pMotor& (0+255),w,b
 11544  0126B4  26D9               	addwf	fsr2l,f,c
 11545  0126B6  51F3               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11546  0126B8  22DA               	addwfc	fsr2h,f,c
 11547  0126BA  C0F4  FFDE         	movff	Motor_Init@pAddress,postinc2
 11548  0126BE  C0F5  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 11552  0126C2  0E7E               	movlw	low _PortE
 11553  0126C4  0100               	movlb	0	; () banked
 11554  0126C6  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 11555  0126C8  0E00               	movlw	high _PortE
 11556  0126CA  0100               	movlb	0	; () banked
 11557  0126CC  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11558  0126CE  0E00               	movlw	0
 11559  0126D0  0100               	movlb	0	; () banked
 11560  0126D2  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 11561  0126D4  0E03               	movlw	3
 11562  0126D6  0100               	movlb	0	; () banked
 11563  0126D8  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 11564  0126DA  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 11565                           
 11566                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 11567  0126DE  0E7E               	movlw	low _PortE
 11568  0126E0  0100               	movlb	0	; () banked
 11569  0126E2  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 11570  0126E4  0E00               	movlw	high _PortE
 11571  0126E6  0100               	movlb	0	; () banked
 11572  0126E8  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11573  0126EA  0E01               	movlw	1
 11574  0126EC  0100               	movlb	0	; () banked
 11575  0126EE  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 11576  0126F0  0E03               	movlw	3
 11577  0126F2  0100               	movlb	0	; () banked
 11578  0126F4  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 11579  0126F6  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 11580                           
 11581                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 11582  0126FA  0E7E               	movlw	low _PortE
 11583  0126FC  0100               	movlb	0	; () banked
 11584  0126FE  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 11585  012700  0E00               	movlw	high _PortE
 11586  012702  0100               	movlb	0	; () banked
 11587  012704  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11588  012706  0E00               	movlw	0
 11589  012708  0100               	movlb	0	; () banked
 11590  01270A  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 11591  01270C  0E00               	movlw	0
 11592  01270E  0100               	movlb	0	; () banked
 11593  012710  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 11594  012712  EC80  F094         	call	_Port_SetPin	;wreg free
 11595                           
 11596                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 11597  012716  0E7E               	movlw	low _PortE
 11598  012718  0100               	movlb	0	; () banked
 11599  01271A  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 11600  01271C  0E00               	movlw	high _PortE
 11601  01271E  0100               	movlb	0	; () banked
 11602  012720  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11603  012722  0E01               	movlw	1
 11604  012724  0100               	movlb	0	; () banked
 11605  012726  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 11606  012728  0E00               	movlw	0
 11607  01272A  0100               	movlb	0	; () banked
 11608  01272C  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 11609  01272E  EC80  F094         	call	_Port_SetPin	;wreg free
 11610                           
 11611                           ;Motor.c: 38: lStepFunction = Motor_Step;
 11612  012732  0E8C               	movlw	low _Motor_Step
 11613  012734  0100               	movlb	0	; () banked
 11614  012736  6F6B               	movwf	_lStepFunction& (0+255),b
 11615  012738  0E23               	movlw	high _Motor_Step
 11616  01273A  0100               	movlb	0	; () banked
 11617  01273C  6F6C               	movwf	(_lStepFunction+1)& (0+255),b
 11618  01273E  0E01               	movlw	low (_Motor_Step shr (0+16))
 11619  012740  0100               	movlb	0	; () banked
 11620  012742  6F6D               	movwf	(_lStepFunction+2)& (0+255),b
 11621                           
 11622                           ; BSR set to: 0
 11623                           ;Motor.c: 39: Timer0_Init(1000);
 11624  012744  0EE8               	movlw	232
 11625  012746  0100               	movlb	0	; () banked
 11626  012748  6FD2               	movwf	Timer0_Init@pFrequency& (0+255),b
 11627  01274A  0E03               	movlw	3
 11628  01274C  6FD3               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 11629  01274E  0E00               	movlw	0
 11630  012750  6FD4               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 11631  012752  0E00               	movlw	0
 11632  012754  6FD5               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 11633  012756  EC73  F090         	call	_Timer0_Init	;wreg free
 11634  01275A  0012               	return		;funcret
 11635  01275C                     __end_of_Motor_Init:
 11636                           	opt stack 0
 11637                           tosu	equ	0xFFF
 11638                           tosh	equ	0xFFE
 11639                           tosl	equ	0xFFD
 11640                           pclath	equ	0xFFA
 11641                           tblptru	equ	0xFF8
 11642                           tblptrh	equ	0xFF7
 11643                           tblptrl	equ	0xFF6
 11644                           tablat	equ	0xFF5
 11645                           prodh	equ	0xFF4
 11646                           prodl	equ	0xFF3
 11647                           intcon	equ	0xFF2
 11648                           postinc0	equ	0xFEE
 11649                           wreg	equ	0xFE8
 11650                           indf1	equ	0xFE7
 11651                           postdec1	equ	0xFE5
 11652                           fsr1h	equ	0xFE2
 11653                           fsr1l	equ	0xFE1
 11654                           indf2	equ	0xFDF
 11655                           postinc2	equ	0xFDE
 11656                           postdec2	equ	0xFDD
 11657                           plusw2	equ	0xFDB
 11658                           fsr2h	equ	0xFDA
 11659                           fsr2l	equ	0xFD9
 11660                           status	equ	0xFD8
 11661                           
 11662 ;; *************** function _Timer0_Init *****************
 11663 ;; Defined at:
 11664 ;;		line 25 in file "Library/Timer0.c"
 11665 ;; Parameters:    Size  Location     Type
 11666 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 11667 ;; Auto vars:     Size  Location     Type
 11668 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 11669 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 11670 ;; Return value:  Size  Location     Type
 11671 ;;                  1    wreg      void 
 11672 ;; Registers used:
 11673 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11674 ;; Tracked objects:
 11675 ;;		On entry : 0/0
 11676 ;;		On exit  : 0/0
 11677 ;;		Unchanged: 0/0
 11678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11679 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11680 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11682 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11683 ;;Total ram usage:       14 bytes
 11684 ;; Hardware stack levels used:    1
 11685 ;; Hardware stack levels required when called:    8
 11686 ;; This function calls:
 11687 ;;		_Timer0_Clear
 11688 ;;		___lldiv
 11689 ;; This function is called by:
 11690 ;;		_Motor_Init
 11691 ;;		_Motor_Speed
 11692 ;; This function uses a non-reentrant model
 11693 ;;
 11694                           
 11695                           	psect	text65
 11696  0120E6                     __ptext65:
 11697                           	opt stack 0
 11698  0120E6                     _Timer0_Init:
 11699                           	opt stack 19
 11700                           
 11701                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 11702                           
 11703                           ;incstack = 0
 11704  0120E6  0E80               	movlw	128
 11705  0120E8  0100               	movlb	0	; () banked
 11706  0120EA  6FD8               	movwf	Timer0_Init@pCPUClock& (0+255),b
 11707  0120EC  0E8D               	movlw	141
 11708  0120EE  6FD9               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 11709  0120F0  0E5B               	movlw	91
 11710  0120F2  6FDA               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 11711  0120F4  0E00               	movlw	0
 11712  0120F6  6FDB               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 11713                           
 11714                           ; BSR set to: 0
 11715                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 11716                           ;Timer0.c: 31: static UINT8 PRE = 0;
 11717                           ;Timer0.c: 32: static UINT32 DIV = 0;
 11718                           ;Timer0.c: 34: UINT32 DIVIDE;
 11719                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 11720  0120F8  9ED5               	bcf	4053,7,c	;volatile
 11721                           
 11722                           ; BSR set to: 0
 11723                           ;Timer0.c: 38: if (pFrequency == 0)
 11724  0120FA  0100               	movlb	0	; () banked
 11725  0120FC  51D2               	movf	Timer0_Init@pFrequency& (0+255),w,b
 11726  0120FE  0100               	movlb	0	; () banked
 11727  012100  11D3               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 11728  012102  0100               	movlb	0	; () banked
 11729  012104  11D4               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 11730  012106  0100               	movlb	0	; () banked
 11731  012108  11D5               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 11732  01210A  B4D8               	btfsc	status,2,c
 11733  01210C  0012               	return	
 11734                           
 11735                           ; BSR set to: 0
 11736                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 11737                           
 11738                           ; BSR set to: 0
 11739                           ;Timer0.c: 39: return;
 11740  01210E  96D5               	bcf	4053,3,c	;volatile
 11741                           
 11742                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 11743  012110  9CD5               	bcf	4053,6,c	;volatile
 11744                           
 11745                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 11746  012112  9AD5               	bcf	4053,5,c	;volatile
 11747                           
 11748                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 11749  012114  98D5               	bcf	4053,4,c	;volatile
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 11753  012116  C0D8  F0C5         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 11754  01211A  C0D9  F0C6         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 11755  01211E  C0DA  F0C7         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 11756  012122  C0DB  F0C8         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 11757  012126  C0D2  F0C9         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 11758  01212A  C0D3  F0CA         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 11759  01212E  C0D4  F0CB         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 11760  012132  C0D5  F0CC         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 11761  012136  ECA2  F095         	call	___lldiv	;wreg free
 11762  01213A  C0C5  F0DC         	movff	?___lldiv,Timer0_Init@DIVIDE
 11763  01213E  C0C6  F0DD         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 11764  012142  C0C7  F0DE         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 11765  012146  C0C8  F0DF         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 11766                           
 11767                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 11768  01214A  D009               	goto	l11554
 11769  01214C                     l11544:
 11770                           
 11771                           ;Timer0.c: 50: {
 11772                           ;Timer0.c: 51: INDEX ++;
 11773  01214C  2A31               	incf	_INDEX,f,c
 11774                           
 11775                           ;Timer0.c: 52: if (INDEX >= 3)
 11776  01214E  0E02               	movlw	2
 11777  012150  6431               	cpfsgt	_INDEX,c
 11778  012152  D001               	goto	l11550
 11779  012154  D02D               	goto	l11556
 11780  012156                     l11550:
 11781                           
 11782                           ;Timer0.c: 56: if (INDEX >= 8)
 11783  012156  0E07               	movlw	7
 11784  012158  6431               	cpfsgt	_INDEX,c
 11785  01215A  D001               	goto	l11554
 11786  01215C  0012               	return	
 11787  01215E                     l11554:
 11788  01215E  C0DC  F0C5         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 11789  012162  C0DD  F0C6         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 11790  012166  C0DE  F0C7         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 11791  01216A  C0DF  F0C8         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 11792  01216E  5031               	movf	_INDEX,w,c
 11793  012170  0D02               	mullw	2
 11794  012172  0E4B               	movlw	low Timer0_Init@PRESCALE
 11795  012174  24F3               	addwf	prodl,w,c
 11796  012176  6EF6               	movwf	tblptrl,c
 11797  012178  0EFD               	movlw	high Timer0_Init@PRESCALE
 11798  01217A  20F4               	addwfc	prodh,w,c
 11799  01217C  6EF7               	movwf	tblptrh,c
 11800  01217E                     	if	1	;There are 3 active tblptr bytes
 11801  01217E  6AF8               	clrf	tblptru,c
 11802  012180  0E00               	movlw	low (__mediumconst shr (0+16))
 11803  012182  22F8               	addwfc	tblptru,f,c
 11804  012184                     	endif
 11805  012184  0009               	tblrd		*+
 11806  012186  CFF5 F0D6          	movff	tablat,??_Timer0_Init
 11807  01218A  0009               	tblrd		*+
 11808  01218C  CFF5 F0D7          	movff	tablat,??_Timer0_Init+1
 11809  012190  C0D6  F0C9         	movff	??_Timer0_Init,___lldiv@divisor
 11810  012194  C0D7  F0CA         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 11811  012198  0100               	movlb	0	; () banked
 11812  01219A  6BCB               	clrf	(___lldiv@divisor+2)& (0+255),b
 11813  01219C  6BCC               	clrf	(___lldiv@divisor+3)& (0+255),b
 11814  01219E  ECA2  F095         	call	___lldiv	;wreg free
 11815  0121A2  0100               	movlb	0	; () banked
 11816  0121A4  51C8               	movf	(?___lldiv+3)& (0+255),w,b
 11817  0121A6  E1D2               	bnz	l11544
 11818  0121A8  0100               	movlb	0	; () banked
 11819  0121AA  05C7               	decf	(?___lldiv+2)& (0+255),w,b
 11820  0121AC  B0D8               	btfsc	status,0,c
 11821  0121AE  D7CE               	goto	l11544
 11822  0121B0                     l11556:
 11823                           
 11824                           ;Timer0.c: 58: }
 11825                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 11826  0121B0  5031               	movf	_INDEX,w,c
 11827  0121B2  0D02               	mullw	2
 11828  0121B4  0E4B               	movlw	low Timer0_Init@PRESCALE
 11829  0121B6  24F3               	addwf	prodl,w,c
 11830  0121B8  6EF6               	movwf	tblptrl,c
 11831  0121BA  0EFD               	movlw	high Timer0_Init@PRESCALE
 11832  0121BC  20F4               	addwfc	prodh,w,c
 11833  0121BE  6EF7               	movwf	tblptrh,c
 11834  0121C0                     	if	1	;There are 3 active tblptr bytes
 11835  0121C0  6AF8               	clrf	tblptru,c
 11836  0121C2  0E00               	movlw	low (__mediumconst shr (0+16))
 11837  0121C4  22F8               	addwfc	tblptru,f,c
 11838  0121C6                     	endif
 11839  0121C6  0008               	tblrd		*
 11840  0121C8  CFF5 F030          	movff	tablat,Timer0_Init@PRE
 11841                           
 11842                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 11843  0121CC  0EFF               	movlw	255
 11844  0121CE  0100               	movlb	0	; () banked
 11845  0121D0  25DC               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 11846  0121D2  0100               	movlb	0	; () banked
 11847  0121D4  6F64               	movwf	Timer0_Init@DIV& (0+255),b
 11848  0121D6  0EFF               	movlw	255
 11849  0121D8  0100               	movlb	0	; () banked
 11850  0121DA  21DD               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 11851  0121DC  0100               	movlb	0	; () banked
 11852  0121DE  6F65               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 11853  0121E0  0EFF               	movlw	255
 11854  0121E2  0100               	movlb	0	; () banked
 11855  0121E4  21DE               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 11856  0121E6  0100               	movlb	0	; () banked
 11857  0121E8  6F66               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 11858  0121EA  0EFF               	movlw	255
 11859  0121EC  0100               	movlb	0	; () banked
 11860  0121EE  21DF               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 11861  0121F0  0100               	movlb	0	; () banked
 11862  0121F2  6F67               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 11863                           
 11864                           ; BSR set to: 0
 11865                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 11866  0121F4  C064  F0C5         	movff	Timer0_Init@DIV,___lldiv@dividend
 11867  0121F8  C065  F0C6         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 11868  0121FC  C066  F0C7         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 11869  012200  C067  F0C8         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 11870  012204  5030               	movf	Timer0_Init@PRE,w,c
 11871  012206  0100               	movlb	0	; () banked
 11872  012208  6FC9               	movwf	___lldiv@divisor& (0+255),b
 11873  01220A  6BCA               	clrf	(___lldiv@divisor+1)& (0+255),b
 11874  01220C  6BCB               	clrf	(___lldiv@divisor+2)& (0+255),b
 11875  01220E  6BCC               	clrf	(___lldiv@divisor+3)& (0+255),b
 11876  012210  ECA2  F095         	call	___lldiv	;wreg free
 11877  012214  0100               	movlb	0	; () banked
 11878  012216  1FC5               	comf	?___lldiv& (0+255),f,b
 11879  012218  0100               	movlb	0	; () banked
 11880  01221A  1FC6               	comf	(?___lldiv+1)& (0+255),f,b
 11881  01221C  0100               	movlb	0	; () banked
 11882  01221E  4BC5               	infsnz	?___lldiv& (0+255),f,b
 11883  012220  2BC6               	incf	(?___lldiv+1)& (0+255),f,b
 11884  012222  0EFF               	movlw	255
 11885  012224  0100               	movlb	0	; () banked
 11886  012226  25C5               	addwf	?___lldiv& (0+255),w,b
 11887  012228  6E28               	movwf	_COUNTER,c
 11888  01222A  0EFF               	movlw	255
 11889  01222C  0100               	movlb	0	; () banked
 11890  01222E  21C6               	addwfc	(?___lldiv+1)& (0+255),w,b
 11891  012230  6E29               	movwf	_COUNTER+1,c
 11892                           
 11893                           ; BSR set to: 0
 11894                           ;Timer0.c: 68: Timer0_Clear();
 11895  012232  EC71  F0A5         	call	_Timer0_Clear	;wreg free
 11896                           
 11897                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 11898  012236  8ED5               	bsf	4053,7,c	;volatile
 11899  012238  0012               	return		;funcret
 11900  01223A                     __end_of_Timer0_Init:
 11901                           	opt stack 0
 11902                           tosu	equ	0xFFF
 11903                           tosh	equ	0xFFE
 11904                           tosl	equ	0xFFD
 11905                           pclath	equ	0xFFA
 11906                           tblptru	equ	0xFF8
 11907                           tblptrh	equ	0xFF7
 11908                           tblptrl	equ	0xFF6
 11909                           tablat	equ	0xFF5
 11910                           prodh	equ	0xFF4
 11911                           prodl	equ	0xFF3
 11912                           intcon	equ	0xFF2
 11913                           postinc0	equ	0xFEE
 11914                           wreg	equ	0xFE8
 11915                           indf1	equ	0xFE7
 11916                           postdec1	equ	0xFE5
 11917                           fsr1h	equ	0xFE2
 11918                           fsr1l	equ	0xFE1
 11919                           indf2	equ	0xFDF
 11920                           postinc2	equ	0xFDE
 11921                           postdec2	equ	0xFDD
 11922                           plusw2	equ	0xFDB
 11923                           fsr2h	equ	0xFDA
 11924                           fsr2l	equ	0xFD9
 11925                           status	equ	0xFD8
 11926                           
 11927 ;; *************** function _Timer0_Clear *****************
 11928 ;; Defined at:
 11929 ;;		line 20 in file "Library/Timer0.c"
 11930 ;; Parameters:    Size  Location     Type
 11931 ;;		None
 11932 ;; Auto vars:     Size  Location     Type
 11933 ;;		None
 11934 ;; Return value:  Size  Location     Type
 11935 ;;                  1    wreg      void 
 11936 ;; Registers used:
 11937 ;;		None
 11938 ;; Tracked objects:
 11939 ;;		On entry : 0/0
 11940 ;;		On exit  : 0/0
 11941 ;;		Unchanged: 0/0
 11942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11947 ;;Total ram usage:        0 bytes
 11948 ;; Hardware stack levels used:    1
 11949 ;; Hardware stack levels required when called:    7
 11950 ;; This function calls:
 11951 ;;		Nothing
 11952 ;; This function is called by:
 11953 ;;		_Timer0_Init
 11954 ;; This function uses a non-reentrant model
 11955 ;;
 11956                           
 11957                           	psect	text66
 11958  014AE2                     __ptext66:
 11959                           	opt stack 0
 11960  014AE2                     _Timer0_Clear:
 11961                           	opt stack 19
 11962                           
 11963                           ;Timer0.c: 22: TMR0 = COUNTER;
 11964                           
 11965                           ;incstack = 0
 11966  014AE2  C028  FFD6         	movff	_COUNTER,4054	;volatile
 11967  014AE6  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 11968                           
 11969                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 11970  014AEA  94F2               	bcf	intcon,2,c	;volatile
 11971  014AEC  0012               	return		;funcret
 11972  014AEE                     __end_of_Timer0_Clear:
 11973                           	opt stack 0
 11974                           tosu	equ	0xFFF
 11975                           tosh	equ	0xFFE
 11976                           tosl	equ	0xFFD
 11977                           pclath	equ	0xFFA
 11978                           tblptru	equ	0xFF8
 11979                           tblptrh	equ	0xFF7
 11980                           tblptrl	equ	0xFF6
 11981                           tablat	equ	0xFF5
 11982                           prodh	equ	0xFF4
 11983                           prodl	equ	0xFF3
 11984                           intcon	equ	0xFF2
 11985                           postinc0	equ	0xFEE
 11986                           wreg	equ	0xFE8
 11987                           indf1	equ	0xFE7
 11988                           postdec1	equ	0xFE5
 11989                           fsr1h	equ	0xFE2
 11990                           fsr1l	equ	0xFE1
 11991                           indf2	equ	0xFDF
 11992                           postinc2	equ	0xFDE
 11993                           postdec2	equ	0xFDD
 11994                           plusw2	equ	0xFDB
 11995                           fsr2h	equ	0xFDA
 11996                           fsr2l	equ	0xFD9
 11997                           status	equ	0xFD8
 11998                           
 11999 ;; *************** function _MXK_Init *****************
 12000 ;; Defined at:
 12001 ;;		line 33 in file "Library/MXK.c"
 12002 ;; Parameters:    Size  Location     Type
 12003 ;;		None
 12004 ;; Auto vars:     Size  Location     Type
 12005 ;;		None
 12006 ;; Return value:  Size  Location     Type
 12007 ;;                  1    wreg      void 
 12008 ;; Registers used:
 12009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12010 ;; Tracked objects:
 12011 ;;		On entry : 0/0
 12012 ;;		On exit  : 0/0
 12013 ;;		Unchanged: 0/0
 12014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12015 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12016 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12018 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12019 ;;Total ram usage:        0 bytes
 12020 ;; Hardware stack levels used:    1
 12021 ;; Hardware stack levels required when called:   16
 12022 ;; This function calls:
 12023 ;;		_LED_Init
 12024 ;;		_Port_Init
 12025 ;;		_Port_SetPin
 12026 ;;		_Port_SetPinType
 12027 ;;		_Port_SetQuadType
 12028 ;;		_Port_SetType
 12029 ;;		_delay_ms
 12030 ;; This function is called by:
 12031 ;;		_initialise
 12032 ;; This function uses a non-reentrant model
 12033 ;;
 12034                           
 12035                           	psect	text67
 12036  011C94                     __ptext67:
 12037                           	opt stack 0
 12038  011C94                     _MXK_Init:
 12039                           	opt stack 13
 12040                           
 12041                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 12042                           
 12043                           ;incstack = 0
 12044  011C94  0E01               	movlw	1
 12045  011C96  6E43               	movwf	_Bus_State,c
 12046                           
 12047                           ;MXK.c: 36: lQueue = (Function)0;
 12048  011C98  0E00               	movlw	0
 12049  011C9A  6E25               	movwf	_lQueue,c	;volatile
 12050  011C9C  0E00               	movlw	0
 12051  011C9E  6E26               	movwf	_lQueue+1,c	;volatile
 12052  011CA0  0E00               	movlw	0
 12053  011CA2  6E27               	movwf	_lQueue+2,c	;volatile
 12054                           
 12055                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 12056  011CA4  0EA2               	movlw	low _PortA
 12057  011CA6  0101               	movlb	1	; () banked
 12058  011CA8  6FC2               	movwf	Port_Init@pInput& (0+255),b
 12059  011CAA  0E01               	movlw	high _PortA
 12060  011CAC  0101               	movlb	1	; () banked
 12061  011CAE  6FC3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12062  011CB0  0E00               	movlw	0
 12063  011CB2  0101               	movlb	1	; () banked
 12064  011CB4  6FC4               	movwf	Port_Init@pPort& (0+255),b
 12065  011CB6  ECBB  F08C         	call	_Port_Init	;wreg free
 12066                           
 12067                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 12068  011CBA  0E98               	movlw	low _PortB
 12069  011CBC  0101               	movlb	1	; () banked
 12070  011CBE  6FC2               	movwf	Port_Init@pInput& (0+255),b
 12071  011CC0  0E01               	movlw	high _PortB
 12072  011CC2  0101               	movlb	1	; () banked
 12073  011CC4  6FC3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12074  011CC6  0E01               	movlw	1
 12075  011CC8  0101               	movlb	1	; () banked
 12076  011CCA  6FC4               	movwf	Port_Init@pPort& (0+255),b
 12077  011CCC  ECBB  F08C         	call	_Port_Init	;wreg free
 12078                           
 12079                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 12080  011CD0  0E92               	movlw	low _PortC
 12081  011CD2  0101               	movlb	1	; () banked
 12082  011CD4  6FC2               	movwf	Port_Init@pInput& (0+255),b
 12083  011CD6  0E00               	movlw	high _PortC
 12084  011CD8  0101               	movlb	1	; () banked
 12085  011CDA  6FC3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12086  011CDC  0E02               	movlw	2
 12087  011CDE  0101               	movlb	1	; () banked
 12088  011CE0  6FC4               	movwf	Port_Init@pPort& (0+255),b
 12089  011CE2  ECBB  F08C         	call	_Port_Init	;wreg free
 12090                           
 12091                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 12092  011CE6  0E88               	movlw	low _PortD
 12093  011CE8  0101               	movlb	1	; () banked
 12094  011CEA  6FC2               	movwf	Port_Init@pInput& (0+255),b
 12095  011CEC  0E00               	movlw	high _PortD
 12096  011CEE  0101               	movlb	1	; () banked
 12097  011CF0  6FC3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12098  011CF2  0E03               	movlw	3
 12099  011CF4  0101               	movlb	1	; () banked
 12100  011CF6  6FC4               	movwf	Port_Init@pPort& (0+255),b
 12101  011CF8  ECBB  F08C         	call	_Port_Init	;wreg free
 12102                           
 12103                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 12104  011CFC  0E7E               	movlw	low _PortE
 12105  011CFE  0101               	movlb	1	; () banked
 12106  011D00  6FC2               	movwf	Port_Init@pInput& (0+255),b
 12107  011D02  0E00               	movlw	high _PortE
 12108  011D04  0101               	movlb	1	; () banked
 12109  011D06  6FC3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12110  011D08  0E04               	movlw	4
 12111  011D0A  0101               	movlb	1	; () banked
 12112  011D0C  6FC4               	movwf	Port_Init@pPort& (0+255),b
 12113  011D0E  ECBB  F08C         	call	_Port_Init	;wreg free
 12114                           
 12115                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 12116  011D12  0EAC               	movlw	low _PortF
 12117  011D14  0101               	movlb	1	; () banked
 12118  011D16  6FC2               	movwf	Port_Init@pInput& (0+255),b
 12119  011D18  0E01               	movlw	high _PortF
 12120  011D1A  0101               	movlb	1	; () banked
 12121  011D1C  6FC3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12122  011D1E  0E05               	movlw	5
 12123  011D20  0101               	movlb	1	; () banked
 12124  011D22  6FC4               	movwf	Port_Init@pPort& (0+255),b
 12125  011D24  ECBB  F08C         	call	_Port_Init	;wreg free
 12126                           
 12127                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 12128  011D28  0E8E               	movlw	low _PortG
 12129  011D2A  0101               	movlb	1	; () banked
 12130  011D2C  6FC2               	movwf	Port_Init@pInput& (0+255),b
 12131  011D2E  0E01               	movlw	high _PortG
 12132  011D30  0101               	movlb	1	; () banked
 12133  011D32  6FC3               	movwf	(Port_Init@pInput+1)& (0+255),b
 12134  011D34  0E06               	movlw	6
 12135  011D36  0101               	movlb	1	; () banked
 12136  011D38  6FC4               	movwf	Port_Init@pPort& (0+255),b
 12137  011D3A  ECBB  F08C         	call	_Port_Init	;wreg free
 12138                           
 12139                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 12140  011D3E  0EAC               	movlw	low _PortF
 12141  011D40  0100               	movlb	0	; () banked
 12142  011D42  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 12143  011D44  0E01               	movlw	high _PortF
 12144  011D46  0100               	movlb	0	; () banked
 12145  011D48  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12146  011D4A  0E05               	movlw	5
 12147  011D4C  0100               	movlb	0	; () banked
 12148  011D4E  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 12149  011D50  0E00               	movlw	0
 12150  011D52  0100               	movlb	0	; () banked
 12151  011D54  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 12152  011D56  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 12153                           
 12154                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 12155  011D5A  0E98               	movlw	low _PortB
 12156  011D5C  0101               	movlb	1	; () banked
 12157  011D5E  6FB9               	movwf	Port_SetQuadType@pInput& (0+255),b
 12158  011D60  0E01               	movlw	high _PortB
 12159  011D62  0101               	movlb	1	; () banked
 12160  011D64  6FBA               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 12161  011D66  0E00               	movlw	0
 12162  011D68  0101               	movlb	1	; () banked
 12163  011D6A  6FBB               	movwf	Port_SetQuadType@pQuad& (0+255),b
 12164  011D6C  0E00               	movlw	0
 12165  011D6E  0101               	movlb	1	; () banked
 12166  011D70  6FBC               	movwf	Port_SetQuadType@pType& (0+255),b
 12167  011D72  EC7F  F086         	call	_Port_SetQuadType	;wreg free
 12168                           
 12169                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 12170  011D76  0EAC               	movlw	low _PortF
 12171  011D78  0100               	movlb	0	; () banked
 12172  011D7A  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 12173  011D7C  0E01               	movlw	high _PortF
 12174  011D7E  0100               	movlb	0	; () banked
 12175  011D80  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12176  011D82  0E06               	movlw	6
 12177  011D84  0100               	movlb	0	; () banked
 12178  011D86  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 12179  011D88  0E03               	movlw	3
 12180  011D8A  0100               	movlb	0	; () banked
 12181  011D8C  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 12182  011D8E  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 12183                           
 12184                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 12185  011D92  0E8E               	movlw	low _PortG
 12186  011D94  0101               	movlb	1	; () banked
 12187  011D96  6FBC               	movwf	Port_SetType@pInput& (0+255),b
 12188  011D98  0E01               	movlw	high _PortG
 12189  011D9A  0101               	movlb	1	; () banked
 12190  011D9C  6FBD               	movwf	(Port_SetType@pInput+1)& (0+255),b
 12191  011D9E  0E03               	movlw	3
 12192  011DA0  0101               	movlb	1	; () banked
 12193  011DA2  6FBE               	movwf	Port_SetType@pType& (0+255),b
 12194  011DA4  ECC3  F088         	call	_Port_SetType	;wreg free
 12195                           
 12196                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 12197  011DA8  0E8E               	movlw	low _PortG
 12198  011DAA  0100               	movlb	0	; () banked
 12199  011DAC  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 12200  011DAE  0E01               	movlw	high _PortG
 12201  011DB0  0100               	movlb	0	; () banked
 12202  011DB2  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12203  011DB4  0E04               	movlw	4
 12204  011DB6  0100               	movlb	0	; () banked
 12205  011DB8  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 12206  011DBA  0E00               	movlw	0
 12207  011DBC  0100               	movlb	0	; () banked
 12208  011DBE  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 12209  011DC0  EC80  F094         	call	_Port_SetPin	;wreg free
 12210                           
 12211                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 12212  011DC4  0EAC               	movlw	low _PortF
 12213  011DC6  0100               	movlb	0	; () banked
 12214  011DC8  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 12215  011DCA  0E01               	movlw	high _PortF
 12216  011DCC  0100               	movlb	0	; () banked
 12217  011DCE  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12218  011DD0  0E06               	movlw	6
 12219  011DD2  0100               	movlb	0	; () banked
 12220  011DD4  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 12221  011DD6  0E01               	movlw	1
 12222  011DD8  0100               	movlb	0	; () banked
 12223  011DDA  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 12224  011DDC  EC80  F094         	call	_Port_SetPin	;wreg free
 12225                           
 12226                           ;MXK.c: 55: LED_Init(eLED1);
 12227  011DE0  0E00               	movlw	0
 12228  011DE2  ECCF  F09E         	call	_LED_Init
 12229                           
 12230                           ;MXK.c: 56: LED_Init(eLED2);
 12231  011DE6  0E01               	movlw	1
 12232  011DE8  ECCF  F09E         	call	_LED_Init
 12233                           
 12234                           ;MXK.c: 58: PIR1 = 0;
 12235  011DEC  0E00               	movlw	0
 12236  011DEE  6E9E               	movwf	3998,c	;volatile
 12237                           
 12238                           ;MXK.c: 59: PIR2 = 0;
 12239  011DF0  0E00               	movlw	0
 12240  011DF2  6EA1               	movwf	4001,c	;volatile
 12241                           
 12242                           ;MXK.c: 60: PIR3 = 0;
 12243  011DF4  0E00               	movlw	0
 12244  011DF6  6EA4               	movwf	4004,c	;volatile
 12245                           
 12246                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 12247  011DF8  8E9B               	bsf	3995,7,c	;volatile
 12248                           
 12249                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 12250  011DFA  8C9B               	bsf	3995,6,c	;volatile
 12251                           
 12252                           ;MXK.c: 66: delay_ms(100);
 12253  011DFC  0E00               	movlw	0
 12254  011DFE  0100               	movlb	0	; () banked
 12255  011E00  6FC6               	movwf	(delay_ms@ms+1)& (0+255),b
 12256  011E02  0E64               	movlw	100
 12257  011E04  6FC5               	movwf	delay_ms@ms& (0+255),b
 12258  011E06  ECD0  F09D         	call	_delay_ms	;wreg free
 12259                           
 12260                           ;MXK.c: 68: RCONbits.IPEN = 1;
 12261  011E0A  8ED0               	bsf	4048,7,c	;volatile
 12262  011E0C  0012               	return		;funcret
 12263  011E0E                     __end_of_MXK_Init:
 12264                           	opt stack 0
 12265                           tosu	equ	0xFFF
 12266                           tosh	equ	0xFFE
 12267                           tosl	equ	0xFFD
 12268                           pclath	equ	0xFFA
 12269                           tblptru	equ	0xFF8
 12270                           tblptrh	equ	0xFF7
 12271                           tblptrl	equ	0xFF6
 12272                           tablat	equ	0xFF5
 12273                           prodh	equ	0xFF4
 12274                           prodl	equ	0xFF3
 12275                           intcon	equ	0xFF2
 12276                           postinc0	equ	0xFEE
 12277                           wreg	equ	0xFE8
 12278                           indf1	equ	0xFE7
 12279                           postdec1	equ	0xFE5
 12280                           fsr1h	equ	0xFE2
 12281                           fsr1l	equ	0xFE1
 12282                           indf2	equ	0xFDF
 12283                           postinc2	equ	0xFDE
 12284                           postdec2	equ	0xFDD
 12285                           plusw2	equ	0xFDB
 12286                           fsr2h	equ	0xFDA
 12287                           fsr2l	equ	0xFD9
 12288                           status	equ	0xFD8
 12289                           
 12290 ;; *************** function _Port_Init *****************
 12291 ;; Defined at:
 12292 ;;		line 150 in file "Library/Port.c"
 12293 ;; Parameters:    Size  Location     Type
 12294 ;;  pInput          2   12[BANK1 ] const PTR struct Port
 12295 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12296 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12297 ;;  pPort           1   14[BANK1 ] enum E6786
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;  i               1   17[BANK1 ] unsigned char 
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  1    wreg      void 
 12302 ;; Registers used:
 12303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12309 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12310 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12311 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12312 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12313 ;;Total ram usage:        6 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:   15
 12316 ;; This function calls:
 12317 ;;		_GetPortPORT
 12318 ;;		_GetPortProperties
 12319 ;;		_GetPortTRIS
 12320 ;;		_Port_Set
 12321 ;;		_Port_SetPinType
 12322 ;;		_Port_SetType
 12323 ;;		_Word_GetPair
 12324 ;; This function is called by:
 12325 ;;		_MXK_Init
 12326 ;; This function uses a non-reentrant model
 12327 ;;
 12328                           
 12329                           	psect	text68
 12330  011976                     __ptext68:
 12331                           	opt stack 0
 12332  011976                     _Port_Init:
 12333                           	opt stack 13
 12334                           
 12335                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 12336                           
 12337                           ;incstack = 0
 12338  011976  0101               	movlb	1	; () banked
 12339  011978  51C4               	movf	Port_Init@pPort& (0+255),w,b
 12340  01197A  EC0C  F098         	call	_GetPortProperties
 12341  01197E  C1C2  FFD9         	movff	Port_Init@pInput,fsr2l
 12342  011982  C1C3  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12343  011986  0100               	movlb	0	; () banked
 12344  011988  C0C5  FFDE         	movff	?_GetPortProperties,postinc2
 12345  01198C  0100               	movlb	0	; () banked
 12346  01198E  C0C6  FFDD         	movff	?_GetPortProperties+1,postdec2
 12347                           
 12348                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 12349  011992  0101               	movlb	1	; () banked
 12350  011994  51C4               	movf	Port_Init@pPort& (0+255),w,b
 12351  011996  EC5F  F098         	call	_GetPortPORT
 12352  01199A  0101               	movlb	1	; () banked
 12353  01199C  EE20 F006          	lfsr	2,6
 12354  0119A0  51C2               	movf	Port_Init@pInput& (0+255),w,b
 12355  0119A2  26D9               	addwf	fsr2l,f,c
 12356  0119A4  51C3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12357  0119A6  22DA               	addwfc	fsr2h,f,c
 12358  0119A8  0100               	movlb	0	; () banked
 12359  0119AA  C0C5  FFDE         	movff	?_GetPortPORT,postinc2
 12360  0119AE  0100               	movlb	0	; () banked
 12361  0119B0  C0C6  FFDD         	movff	?_GetPortPORT+1,postdec2
 12362                           
 12363                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 12364  0119B4  0101               	movlb	1	; () banked
 12365  0119B6  51C4               	movf	Port_Init@pPort& (0+255),w,b
 12366  0119B8  EC5F  F098         	call	_GetPortPORT
 12367  0119BC  0101               	movlb	1	; () banked
 12368  0119BE  EE20 F004          	lfsr	2,4
 12369  0119C2  51C2               	movf	Port_Init@pInput& (0+255),w,b
 12370  0119C4  26D9               	addwf	fsr2l,f,c
 12371  0119C6  51C3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12372  0119C8  22DA               	addwfc	fsr2h,f,c
 12373  0119CA  0100               	movlb	0	; () banked
 12374  0119CC  C0C5  FFDE         	movff	?_GetPortPORT,postinc2
 12375  0119D0  0100               	movlb	0	; () banked
 12376  0119D2  C0C6  FFDD         	movff	?_GetPortPORT+1,postdec2
 12377                           
 12378                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 12379  0119D6  0101               	movlb	1	; () banked
 12380  0119D8  51C4               	movf	Port_Init@pPort& (0+255),w,b
 12381  0119DA  ECB9  F097         	call	_GetPortTRIS
 12382  0119DE  0101               	movlb	1	; () banked
 12383  0119E0  EE20 F002          	lfsr	2,2
 12384  0119E4  51C2               	movf	Port_Init@pInput& (0+255),w,b
 12385  0119E6  26D9               	addwf	fsr2l,f,c
 12386  0119E8  51C3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12387  0119EA  22DA               	addwfc	fsr2h,f,c
 12388  0119EC  0100               	movlb	0	; () banked
 12389  0119EE  C0C5  FFDE         	movff	?_GetPortTRIS,postinc2
 12390  0119F2  0100               	movlb	0	; () banked
 12391  0119F4  C0C6  FFDD         	movff	?_GetPortTRIS+1,postdec2
 12392                           
 12393                           ; BSR set to: 0
 12394                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 12395  0119F8  0101               	movlb	1	; () banked
 12396  0119FA  EE20 F004          	lfsr	2,4
 12397  0119FE  51C2               	movf	Port_Init@pInput& (0+255),w,b
 12398  011A00  26D9               	addwf	fsr2l,f,c
 12399  011A02  51C3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12400  011A04  22DA               	addwfc	fsr2h,f,c
 12401  011A06  CFDE F1C5          	movff	postinc2,??_Port_Init
 12402  011A0A  CFDD F1C6          	movff	postdec2,??_Port_Init+1
 12403  011A0E  C1C5  FFD9         	movff	??_Port_Init,fsr2l
 12404  011A12  C1C6  FFDA         	movff	??_Port_Init+1,fsr2h
 12405  011A16  0E00               	movlw	0
 12406  011A18  6EDF               	movwf	indf2,c
 12407                           
 12408                           ; BSR set to: 1
 12409                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 12410  011A1A  0101               	movlb	1	; () banked
 12411  011A1C  EE20 F002          	lfsr	2,2
 12412  011A20  51C2               	movf	Port_Init@pInput& (0+255),w,b
 12413  011A22  26D9               	addwf	fsr2l,f,c
 12414  011A24  51C3               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12415  011A26  22DA               	addwfc	fsr2h,f,c
 12416  011A28  CFDE F1C5          	movff	postinc2,??_Port_Init
 12417  011A2C  CFDD F1C6          	movff	postdec2,??_Port_Init+1
 12418  011A30  C1C5  FFD9         	movff	??_Port_Init,fsr2l
 12419  011A34  C1C6  FFDA         	movff	??_Port_Init+1,fsr2h
 12420  011A38  0EFF               	movlw	255
 12421  011A3A  6EDF               	movwf	indf2,c
 12422                           
 12423                           ; BSR set to: 1
 12424                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 12425  011A3C  C1C2  F1BC         	movff	Port_Init@pInput,Port_SetType@pInput
 12426  011A40  C1C3  F1BD         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 12427  011A44  0E00               	movlw	0
 12428  011A46  0101               	movlb	1	; () banked
 12429  011A48  6FBE               	movwf	Port_SetType@pType& (0+255),b
 12430  011A4A  ECC3  F088         	call	_Port_SetType	;wreg free
 12431                           
 12432                           ;Port.c: 166: UINT8 i;
 12433                           ;Port.c: 167: for (i=0; i<8; i++)
 12434  011A4E  0E00               	movlw	0
 12435  011A50  0101               	movlb	1	; () banked
 12436  011A52  6FC7               	movwf	Port_Init@i& (0+255),b
 12437  011A54                     l11754:
 12438                           
 12439                           ; BSR set to: 1
 12440  011A54  0E07               	movlw	7
 12441  011A56  0101               	movlb	1	; () banked
 12442  011A58  65C7               	cpfsgt	Port_Init@i& (0+255),b
 12443  011A5A  D031               	goto	l11768
 12444  011A5C  D04B               	goto	l11774
 12445  011A5E                     l11758:
 12446                           
 12447                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 12448  011A5E  C1C2  F0EB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12449  011A62  C1C3  F0EC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12450  011A66  C1C7  F0ED         	movff	Port_Init@i,Port_SetPinType@pPin
 12451  011A6A  0E03               	movlw	3
 12452  011A6C  0100               	movlb	0	; () banked
 12453  011A6E  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 12454  011A70  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 12455                           
 12456                           ;Port.c: 173: break;
 12457  011A74  D03C               	goto	l11770
 12458  011A76                     l11760:
 12459                           
 12460                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 12461  011A76  C1C2  F0EB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12462  011A7A  C1C3  F0EC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12463  011A7E  C1C7  F0ED         	movff	Port_Init@i,Port_SetPinType@pPin
 12464  011A82  0E02               	movlw	2
 12465  011A84  0100               	movlb	0	; () banked
 12466  011A86  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 12467  011A88  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 12468                           
 12469                           ;Port.c: 176: break;
 12470  011A8C  D030               	goto	l11770
 12471  011A8E                     l11762:
 12472                           
 12473                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 12474  011A8E  C1C2  F0EB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12475  011A92  C1C3  F0EC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12476  011A96  C1C7  F0ED         	movff	Port_Init@i,Port_SetPinType@pPin
 12477  011A9A  0E01               	movlw	1
 12478  011A9C  0100               	movlb	0	; () banked
 12479  011A9E  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 12480  011AA0  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 12481                           
 12482                           ;Port.c: 179: break;
 12483  011AA4  D024               	goto	l11770
 12484  011AA6                     l11764:
 12485                           
 12486                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 12487  011AA6  C1C2  F0EB         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12488  011AAA  C1C3  F0EC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12489  011AAE  C1C7  F0ED         	movff	Port_Init@i,Port_SetPinType@pPin
 12490  011AB2  0E00               	movlw	0
 12491  011AB4  0100               	movlb	0	; () banked
 12492  011AB6  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 12493  011AB8  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 12494                           
 12495                           ;Port.c: 183: }
 12496                           
 12497                           ;Port.c: 182: break;
 12498  011ABC  D018               	goto	l11770
 12499  011ABE                     l11768:
 12500  011ABE  C1C2  FFD9         	movff	Port_Init@pInput,fsr2l
 12501  011AC2  C1C3  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12502  011AC6  CFDE F0D1          	movff	postinc2,Word_GetPair@pInput
 12503  011ACA  CFDD F0D2          	movff	postdec2,Word_GetPair@pInput+1
 12504  011ACE  C1C7  F0D3         	movff	Port_Init@i,Word_GetPair@pPair
 12505  011AD2  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 12506                           
 12507                           ; Switch size 1, requested type "space"
 12508                           ; Number of cases is 4, Range of values is 0 to 3
 12509                           ; switch strategies available:
 12510                           ; Name         Instructions Cycles
 12511                           ; simple_byte           13     7 (average)
 12512                           ;	Chosen strategy is simple_byte
 12513  011AD6  0A00               	xorlw	0	; case 0
 12514  011AD8  B4D8               	btfsc	status,2,c
 12515  011ADA  D7C1               	goto	l11758
 12516  011ADC  0A01               	xorlw	1	; case 1
 12517  011ADE  B4D8               	btfsc	status,2,c
 12518  011AE0  D7D6               	goto	l11762
 12519  011AE2  0A03               	xorlw	3	; case 2
 12520  011AE4  B4D8               	btfsc	status,2,c
 12521  011AE6  D7C7               	goto	l11760
 12522  011AE8  0A01               	xorlw	1	; case 3
 12523  011AEA  B4D8               	btfsc	status,2,c
 12524  011AEC  D7DC               	goto	l11764
 12525  011AEE                     l11770:
 12526  011AEE  0101               	movlb	1	; () banked
 12527  011AF0  2BC7               	incf	Port_Init@i& (0+255),f,b
 12528  011AF2  D7B0               	goto	l11754
 12529  011AF4                     l11774:
 12530                           
 12531                           ; BSR set to: 1
 12532                           ;Port.c: 184: }
 12533                           ;Port.c: 185: Port_Set(pInput, 0x00);
 12534  011AF4  C1C2  F0D4         	movff	Port_Init@pInput,Port_Set@pInput
 12535  011AF8  C1C3  F0D5         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 12536  011AFC  0E00               	movlw	0
 12537  011AFE  0100               	movlb	0	; () banked
 12538  011B00  6FD6               	movwf	Port_Set@pValue& (0+255),b
 12539  011B02  EC0F  F082         	call	_Port_Set	;wreg free
 12540  011B06  0012               	return		;funcret
 12541  011B08                     __end_of_Port_Init:
 12542                           	opt stack 0
 12543                           tosu	equ	0xFFF
 12544                           tosh	equ	0xFFE
 12545                           tosl	equ	0xFFD
 12546                           pclath	equ	0xFFA
 12547                           tblptru	equ	0xFF8
 12548                           tblptrh	equ	0xFF7
 12549                           tblptrl	equ	0xFF6
 12550                           tablat	equ	0xFF5
 12551                           prodh	equ	0xFF4
 12552                           prodl	equ	0xFF3
 12553                           intcon	equ	0xFF2
 12554                           postinc0	equ	0xFEE
 12555                           wreg	equ	0xFE8
 12556                           indf1	equ	0xFE7
 12557                           postdec1	equ	0xFE5
 12558                           fsr1h	equ	0xFE2
 12559                           fsr1l	equ	0xFE1
 12560                           indf2	equ	0xFDF
 12561                           postinc2	equ	0xFDE
 12562                           postdec2	equ	0xFDD
 12563                           plusw2	equ	0xFDB
 12564                           fsr2h	equ	0xFDA
 12565                           fsr2l	equ	0xFD9
 12566                           status	equ	0xFD8
 12567                           
 12568 ;; *************** function _Port_SetType *****************
 12569 ;; Defined at:
 12570 ;;		line 513 in file "Library/Port.c"
 12571 ;; Parameters:    Size  Location     Type
 12572 ;;  pInput          2    6[BANK1 ] const PTR struct Port
 12573 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12574 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12575 ;;  pType           1    8[BANK1 ] enum E6795
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;  Output          1   11[BANK1 ] enum E6475
 12578 ;; Return value:  Size  Location     Type
 12579 ;;                  1    wreg      enum E6475
 12580 ;; Registers used:
 12581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12587 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12591 ;;Total ram usage:        6 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; Hardware stack levels required when called:   14
 12594 ;; This function calls:
 12595 ;;		_Port_CheckPortType
 12596 ;;		_Word_SetPair
 12597 ;; This function is called by:
 12598 ;;		_Port_Init
 12599 ;;		_MXK_Init
 12600 ;; This function uses a non-reentrant model
 12601 ;;
 12602                           
 12603                           	psect	text69
 12604  011186                     __ptext69:
 12605                           	opt stack 0
 12606  011186                     _Port_SetType:
 12607                           	opt stack 14
 12608                           
 12609                           ;Port.c: 515: ePinError Output = ePinErrorState;
 12610                           
 12611                           ;incstack = 0
 12612  011186  0E05               	movlw	5
 12613  011188  0101               	movlb	1	; () banked
 12614  01118A  6FC1               	movwf	Port_SetType@Output& (0+255),b
 12615                           
 12616                           ;Port.c: 517: switch (pType)
 12617  01118C  D07A               	goto	l11444
 12618  01118E                     l11428:
 12619                           
 12620                           ; BSR set to: 1
 12621                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 12622  01118E  0101               	movlb	1	; () banked
 12623  011190  EE20 F002          	lfsr	2,2
 12624  011194  51BC               	movf	Port_SetType@pInput& (0+255),w,b
 12625  011196  26D9               	addwf	fsr2l,f,c
 12626  011198  51BD               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12627  01119A  22DA               	addwfc	fsr2h,f,c
 12628  01119C  CFDE F1BF          	movff	postinc2,??_Port_SetType
 12629  0111A0  CFDD F1C0          	movff	postdec2,??_Port_SetType+1
 12630  0111A4  C1BF  FFD9         	movff	??_Port_SetType,fsr2l
 12631  0111A8  C1C0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12632  0111AC  0EFF               	movlw	255
 12633  0111AE  D067               	goto	L4
 12634  0111B0                     l11430:
 12635                           
 12636                           ; BSR set to: 1
 12637                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 12638  0111B0  C1BC  F1B9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12639  0111B4  C1BD  F1BA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12640  0111B8  0E01               	movlw	1
 12641  0111BA  0101               	movlb	1	; () banked
 12642  0111BC  6FBB               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12643  0111BE  ECC8  F0A0         	call	_Port_CheckPortType	;wreg free
 12644  0111C2  0101               	movlb	1	; () banked
 12645  0111C4  6FC1               	movwf	Port_SetType@Output& (0+255),b
 12646  0111C6  0101               	movlb	1	; () banked
 12647  0111C8  51C1               	movf	Port_SetType@Output& (0+255),w,b
 12648  0111CA  A4D8               	btfss	status,2,c
 12649  0111CC  0012               	return	
 12650                           
 12651                           ; BSR set to: 1
 12652                           ;Port.c: 527: {
 12653                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 12654  0111CE  0101               	movlb	1	; () banked
 12655  0111D0  EE20 F002          	lfsr	2,2
 12656  0111D4  51BC               	movf	Port_SetType@pInput& (0+255),w,b
 12657  0111D6  26D9               	addwf	fsr2l,f,c
 12658  0111D8  51BD               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12659  0111DA  22DA               	addwfc	fsr2h,f,c
 12660  0111DC  CFDE F1BF          	movff	postinc2,??_Port_SetType
 12661  0111E0  CFDD F1C0          	movff	postdec2,??_Port_SetType+1
 12662  0111E4  C1BF  FFD9         	movff	??_Port_SetType,fsr2l
 12663  0111E8  C1C0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12664  0111EC  0E00               	movlw	0
 12665  0111EE  6EDF               	movwf	indf2,c
 12666                           
 12667                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 12668  0111F0  0101               	movlb	1	; () banked
 12669  0111F2  EE20 F004          	lfsr	2,4
 12670  0111F6  D036               	goto	L9
 12671  0111F8                     l11434:
 12672                           
 12673                           ; BSR set to: 1
 12674                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 12675  0111F8  C1BC  F1B9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12676  0111FC  C1BD  F1BA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12677  011200  0E02               	movlw	2
 12678  011202  0101               	movlb	1	; () banked
 12679  011204  6FBB               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12680  011206  ECC8  F0A0         	call	_Port_CheckPortType	;wreg free
 12681  01120A  0101               	movlb	1	; () banked
 12682  01120C  6FC1               	movwf	Port_SetType@Output& (0+255),b
 12683  01120E  0101               	movlb	1	; () banked
 12684  011210  51C1               	movf	Port_SetType@Output& (0+255),w,b
 12685  011212  A4D8               	btfss	status,2,c
 12686  011214  0012               	return	
 12687                           
 12688                           ; BSR set to: 1
 12689                           ;Port.c: 538: {
 12690                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 12691  011216  0101               	movlb	1	; () banked
 12692  011218  EE20 F002          	lfsr	2,2
 12693  01121C  51BC               	movf	Port_SetType@pInput& (0+255),w,b
 12694  01121E  26D9               	addwf	fsr2l,f,c
 12695  011220  51BD               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12696  011222  22DA               	addwfc	fsr2h,f,c
 12697  011224  CFDE F1BF          	movff	postinc2,??_Port_SetType
 12698  011228  CFDD F1C0          	movff	postdec2,??_Port_SetType+1
 12699  01122C  C1BF  FFD9         	movff	??_Port_SetType,fsr2l
 12700  011230  C1C0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12701  011234  0EFF               	movlw	255
 12702  011236  6EDF               	movwf	indf2,c
 12703                           
 12704                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 12705  011238  0101               	movlb	1	; () banked
 12706  01123A  EE20 F004          	lfsr	2,4
 12707  01123E  D7AA               	goto	L5
 12708  011240                     l11438:
 12709                           
 12710                           ; BSR set to: 1
 12711                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 12712  011240  C1BC  F1B9         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 12713  011244  C1BD  F1BA         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 12714  011248  0E00               	movlw	0
 12715  01124A  0101               	movlb	1	; () banked
 12716  01124C  6FBB               	movwf	Port_CheckPortType@pDrive& (0+255),b
 12717  01124E  ECC8  F0A0         	call	_Port_CheckPortType	;wreg free
 12718  011252  0101               	movlb	1	; () banked
 12719  011254  6FC1               	movwf	Port_SetType@Output& (0+255),b
 12720  011256  0101               	movlb	1	; () banked
 12721  011258  51C1               	movf	Port_SetType@Output& (0+255),w,b
 12722  01125A  A4D8               	btfss	status,2,c
 12723  01125C  0012               	return	
 12724                           
 12725                           ; BSR set to: 1
 12726                           ;Port.c: 549: {
 12727                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 12728  01125E  0101               	movlb	1	; () banked
 12729  011260  EE20 F002          	lfsr	2,2
 12730  011264                     L9:
 12731  011264  51BC               	movf	Port_SetType@pInput& (0+255),w,b
 12732  011266  26D9               	addwf	fsr2l,f,c
 12733  011268  51BD               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 12734  01126A  22DA               	addwfc	fsr2h,f,c
 12735  01126C  CFDE F1BF          	movff	postinc2,??_Port_SetType
 12736  011270  CFDD F1C0          	movff	postdec2,??_Port_SetType+1
 12737  011274  C1BF  FFD9         	movff	??_Port_SetType,fsr2l
 12738  011278  C1C0  FFDA         	movff	??_Port_SetType+1,fsr2h
 12739  01127C  0E00               	movlw	0
 12740  01127E                     L4:
 12741  01127E  6EDF               	movwf	indf2,c
 12742                           
 12743                           ;Port.c: 552: }
 12744  011280  D00E               	goto	l11446
 12745  011282                     l11444:
 12746                           
 12747                           ; BSR set to: 1
 12748  011282  0101               	movlb	1	; () banked
 12749  011284  51BE               	movf	Port_SetType@pType& (0+255),w,b
 12750                           
 12751                           ; Switch size 1, requested type "space"
 12752                           ; Number of cases is 4, Range of values is 0 to 3
 12753                           ; switch strategies available:
 12754                           ; Name         Instructions Cycles
 12755                           ; simple_byte           13     7 (average)
 12756                           ;	Chosen strategy is simple_byte
 12757  011286  0A00               	xorlw	0	; case 0
 12758  011288  B4D8               	btfsc	status,2,c
 12759  01128A  D781               	goto	l11428
 12760  01128C  0A01               	xorlw	1	; case 1
 12761  01128E  B4D8               	btfsc	status,2,c
 12762  011290  D78F               	goto	l11430
 12763  011292  0A03               	xorlw	3	; case 2
 12764  011294  B4D8               	btfsc	status,2,c
 12765  011296  D7B0               	goto	l11434
 12766  011298  0A01               	xorlw	1	; case 3
 12767  01129A  B4D8               	btfsc	status,2,c
 12768  01129C  D7D1               	goto	l11438
 12769  01129E                     l11446:
 12770                           
 12771                           ; BSR set to: 1
 12772                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 12773  01129E  0E08               	movlw	8
 12774  0112A0  0101               	movlb	1	; () banked
 12775  0112A2  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12776  0112A4  0100               	movlb	0	; () banked
 12777  0112A6  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12778  0112A8  0E00               	movlw	0
 12779  0112AA  0101               	movlb	1	; () banked
 12780  0112AC  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12781  0112AE  0100               	movlb	0	; () banked
 12782  0112B0  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12783  0112B2  0E00               	movlw	0
 12784  0112B4  0100               	movlb	0	; () banked
 12785  0112B6  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12786  0112B8  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12787  0112BC  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12788                           
 12789                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 12790  0112C0  0E08               	movlw	8
 12791  0112C2  0101               	movlb	1	; () banked
 12792  0112C4  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12793  0112C6  0100               	movlb	0	; () banked
 12794  0112C8  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12795  0112CA  0E00               	movlw	0
 12796  0112CC  0101               	movlb	1	; () banked
 12797  0112CE  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12798  0112D0  0100               	movlb	0	; () banked
 12799  0112D2  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12800  0112D4  0E01               	movlw	1
 12801  0112D6  0100               	movlb	0	; () banked
 12802  0112D8  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12803  0112DA  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12804  0112DE  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12805                           
 12806                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 12807  0112E2  0E08               	movlw	8
 12808  0112E4  0101               	movlb	1	; () banked
 12809  0112E6  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12810  0112E8  0100               	movlb	0	; () banked
 12811  0112EA  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12812  0112EC  0E00               	movlw	0
 12813  0112EE  0101               	movlb	1	; () banked
 12814  0112F0  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12815  0112F2  0100               	movlb	0	; () banked
 12816  0112F4  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12817  0112F6  0E02               	movlw	2
 12818  0112F8  0100               	movlb	0	; () banked
 12819  0112FA  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12820  0112FC  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12821  011300  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12822                           
 12823                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 12824  011304  0E08               	movlw	8
 12825  011306  0101               	movlb	1	; () banked
 12826  011308  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12827  01130A  0100               	movlb	0	; () banked
 12828  01130C  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12829  01130E  0E00               	movlw	0
 12830  011310  0101               	movlb	1	; () banked
 12831  011312  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12832  011314  0100               	movlb	0	; () banked
 12833  011316  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12834  011318  0E03               	movlw	3
 12835  01131A  0100               	movlb	0	; () banked
 12836  01131C  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12837  01131E  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12838  011322  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12839                           
 12840                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 12841  011326  0E08               	movlw	8
 12842  011328  0101               	movlb	1	; () banked
 12843  01132A  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12844  01132C  0100               	movlb	0	; () banked
 12845  01132E  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12846  011330  0E00               	movlw	0
 12847  011332  0101               	movlb	1	; () banked
 12848  011334  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12849  011336  0100               	movlb	0	; () banked
 12850  011338  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12851  01133A  0E04               	movlw	4
 12852  01133C  0100               	movlb	0	; () banked
 12853  01133E  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12854  011340  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12855  011344  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12856                           
 12857                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 12858  011348  0E08               	movlw	8
 12859  01134A  0101               	movlb	1	; () banked
 12860  01134C  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12861  01134E  0100               	movlb	0	; () banked
 12862  011350  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12863  011352  0E00               	movlw	0
 12864  011354  0101               	movlb	1	; () banked
 12865  011356  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12866  011358  0100               	movlb	0	; () banked
 12867  01135A  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12868  01135C  0E05               	movlw	5
 12869  01135E  0100               	movlb	0	; () banked
 12870  011360  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12871  011362  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12872  011366  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12873                           
 12874                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 12875  01136A  0E08               	movlw	8
 12876  01136C  0101               	movlb	1	; () banked
 12877  01136E  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12878  011370  0100               	movlb	0	; () banked
 12879  011372  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12880  011374  0E00               	movlw	0
 12881  011376  0101               	movlb	1	; () banked
 12882  011378  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12883  01137A  0100               	movlb	0	; () banked
 12884  01137C  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12885  01137E  0E06               	movlw	6
 12886  011380  0100               	movlb	0	; () banked
 12887  011382  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12888  011384  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12889  011388  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12890                           
 12891                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 12892  01138C  0E08               	movlw	8
 12893  01138E  0101               	movlb	1	; () banked
 12894  011390  25BC               	addwf	Port_SetType@pInput& (0+255),w,b
 12895  011392  0100               	movlb	0	; () banked
 12896  011394  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 12897  011396  0E00               	movlw	0
 12898  011398  0101               	movlb	1	; () banked
 12899  01139A  21BD               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 12900  01139C  0100               	movlb	0	; () banked
 12901  01139E  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 12902  0113A0  0E07               	movlw	7
 12903  0113A2  0100               	movlb	0	; () banked
 12904  0113A4  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 12905  0113A6  C1BE  F0D7         	movff	Port_SetType@pType,Word_SetPair@pValue
 12906  0113AA  EC33  F0A1         	call	_Word_SetPair	;wreg free
 12907  0113AE  0012               	return	
 12908  0113B0                     __end_of_Port_SetType:
 12909                           	opt stack 0
 12910                           tosu	equ	0xFFF
 12911                           tosh	equ	0xFFE
 12912                           tosl	equ	0xFFD
 12913                           pclath	equ	0xFFA
 12914                           tblptru	equ	0xFF8
 12915                           tblptrh	equ	0xFF7
 12916                           tblptrl	equ	0xFF6
 12917                           tablat	equ	0xFF5
 12918                           prodh	equ	0xFF4
 12919                           prodl	equ	0xFF3
 12920                           intcon	equ	0xFF2
 12921                           postinc0	equ	0xFEE
 12922                           wreg	equ	0xFE8
 12923                           indf1	equ	0xFE7
 12924                           postdec1	equ	0xFE5
 12925                           fsr1h	equ	0xFE2
 12926                           fsr1l	equ	0xFE1
 12927                           indf2	equ	0xFDF
 12928                           postinc2	equ	0xFDE
 12929                           postdec2	equ	0xFDD
 12930                           plusw2	equ	0xFDB
 12931                           fsr2h	equ	0xFDA
 12932                           fsr2l	equ	0xFD9
 12933                           status	equ	0xFD8
 12934                           
 12935 ;; *************** function _Port_CheckPortType *****************
 12936 ;; Defined at:
 12937 ;;		line 138 in file "Library/Port.c"
 12938 ;; Parameters:    Size  Location     Type
 12939 ;;  pInput          2    3[BANK1 ] const PTR struct Port
 12940 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12941 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12942 ;;  pDrive          1    5[BANK1 ] enum E6469
 12943 ;; Auto vars:     Size  Location     Type
 12944 ;;  Output          1   51[BANK0 ] enum E6475
 12945 ;; Return value:  Size  Location     Type
 12946 ;;                  1    wreg      enum E6475
 12947 ;; Registers used:
 12948 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12949 ;; Tracked objects:
 12950 ;;		On entry : 0/0
 12951 ;;		On exit  : 0/0
 12952 ;;		Unchanged: 0/0
 12953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12954 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12957 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12958 ;;Total ram usage:        4 bytes
 12959 ;; Hardware stack levels used:    1
 12960 ;; Hardware stack levels required when called:   13
 12961 ;; This function calls:
 12962 ;;		_Port_CheckQuadType
 12963 ;; This function is called by:
 12964 ;;		_Port_SetType
 12965 ;; This function uses a non-reentrant model
 12966 ;;
 12967                           
 12968                           	psect	text70
 12969  014190                     __ptext70:
 12970                           	opt stack 0
 12971  014190                     _Port_CheckPortType:
 12972                           	opt stack 14
 12973                           
 12974                           ;Port.c: 140: ePinError Output = ePinErrorState;
 12975                           
 12976                           ;incstack = 0
 12977  014190  0E05               	movlw	5
 12978  014192  0100               	movlb	0	; () banked
 12979  014194  6FF8               	movwf	Port_CheckPortType@Output& (0+255),b
 12980                           
 12981                           ; BSR set to: 0
 12982                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 12983  014196  C1B9  F0F4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 12984  01419A  C1BA  F0F5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 12985  01419E  0E00               	movlw	0
 12986  0141A0  0100               	movlb	0	; () banked
 12987  0141A2  6FF6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 12988  0141A4  C1BB  F0F7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 12989  0141A8  EC30  F09F         	call	_Port_CheckQuadType	;wreg free
 12990  0141AC  0100               	movlb	0	; () banked
 12991  0141AE  6FF8               	movwf	Port_CheckPortType@Output& (0+255),b
 12992  0141B0  0100               	movlb	0	; () banked
 12993  0141B2  51F8               	movf	Port_CheckPortType@Output& (0+255),w,b
 12994  0141B4  A4D8               	btfss	status,2,c
 12995  0141B6  D00D               	goto	l10976
 12996                           
 12997                           ; BSR set to: 0
 12998                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 12999  0141B8  C1B9  F0F4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 13000  0141BC  C1BA  F0F5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 13001  0141C0  0E01               	movlw	1
 13002  0141C2  0100               	movlb	0	; () banked
 13003  0141C4  6FF6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 13004  0141C6  C1BB  F0F7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 13005  0141CA  EC30  F09F         	call	_Port_CheckQuadType	;wreg free
 13006  0141CE  0100               	movlb	0	; () banked
 13007  0141D0  6FF8               	movwf	Port_CheckPortType@Output& (0+255),b
 13008  0141D2                     l10976:
 13009                           
 13010                           ; BSR set to: 0
 13011                           ;Port.c: 146: return Output;
 13012  0141D2  0100               	movlb	0	; () banked
 13013  0141D4  51F8               	movf	Port_CheckPortType@Output& (0+255),w,b
 13014  0141D6  0012               	return	
 13015  0141D8                     __end_of_Port_CheckPortType:
 13016                           	opt stack 0
 13017                           tosu	equ	0xFFF
 13018                           tosh	equ	0xFFE
 13019                           tosl	equ	0xFFD
 13020                           pclath	equ	0xFFA
 13021                           tblptru	equ	0xFF8
 13022                           tblptrh	equ	0xFF7
 13023                           tblptrl	equ	0xFF6
 13024                           tablat	equ	0xFF5
 13025                           prodh	equ	0xFF4
 13026                           prodl	equ	0xFF3
 13027                           intcon	equ	0xFF2
 13028                           postinc0	equ	0xFEE
 13029                           wreg	equ	0xFE8
 13030                           indf1	equ	0xFE7
 13031                           postdec1	equ	0xFE5
 13032                           fsr1h	equ	0xFE2
 13033                           fsr1l	equ	0xFE1
 13034                           indf2	equ	0xFDF
 13035                           postinc2	equ	0xFDE
 13036                           postdec2	equ	0xFDD
 13037                           plusw2	equ	0xFDB
 13038                           fsr2h	equ	0xFDA
 13039                           fsr2l	equ	0xFD9
 13040                           status	equ	0xFD8
 13041                           
 13042 ;; *************** function _Port_Set *****************
 13043 ;; Defined at:
 13044 ;;		line 570 in file "Library/Port.c"
 13045 ;; Parameters:    Size  Location     Type
 13046 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13047 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13048 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13049 ;;  pValue          1   17[BANK0 ] unsigned char 
 13050 ;; Auto vars:     Size  Location     Type
 13051 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 13052 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 13053 ;;  Type            1   38[BANK0 ] enum E6795
 13054 ;; Return value:  Size  Location     Type
 13055 ;;                  1    wreg      void 
 13056 ;; Registers used:
 13057 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13058 ;; Tracked objects:
 13059 ;;		On entry : 0/0
 13060 ;;		On exit  : 0/0
 13061 ;;		Unchanged: 0/0
 13062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13063 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13064 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13065 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13066 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13067 ;;Total ram usage:       24 bytes
 13068 ;; Hardware stack levels used:    1
 13069 ;; Hardware stack levels required when called:   10
 13070 ;; This function calls:
 13071 ;;		_Byte_SetByte
 13072 ;;		_Word_GetPair
 13073 ;; This function is called by:
 13074 ;;		_Port_Init
 13075 ;;		_Port_Toggle
 13076 ;; This function uses a non-reentrant model
 13077 ;;
 13078                           
 13079                           	psect	text71
 13080  01041E                     __ptext71:
 13081                           	opt stack 0
 13082  01041E                     _Port_Set:
 13083                           	opt stack 17
 13084                           
 13085                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 13086                           
 13087                           ; BSR set to: 0
 13088                           ;incstack = 0
 13089  01041E  0E08               	movlw	8
 13090  010420  0100               	movlb	0	; () banked
 13091  010422  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13092  010424  0100               	movlb	0	; () banked
 13093  010426  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13094  010428  0E00               	movlw	0
 13095  01042A  0100               	movlb	0	; () banked
 13096  01042C  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13097  01042E  0100               	movlb	0	; () banked
 13098  010430  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13099  010432  0E00               	movlw	0
 13100  010434  0100               	movlb	0	; () banked
 13101  010436  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13102  010438  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13103  01043C  0100               	movlb	0	; () banked
 13104  01043E  6FEB               	movwf	Port_Set@Type& (0+255),b
 13105                           
 13106                           ; BSR set to: 0
 13107                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 13108  010440  0100               	movlb	0	; () banked
 13109  010442  51EB               	movf	Port_Set@Type& (0+255),w,b
 13110  010444  0100               	movlb	0	; () banked
 13111  010446  6FD7               	movwf	??_Port_Set& (0+255),b
 13112  010448  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13113  01044A  0E0E               	movlw	14
 13114  01044C                     u7765:
 13115  01044C  90D8               	bcf	status,0,c
 13116  01044E  0100               	movlb	0	; () banked
 13117  010450  37D7               	rlcf	??_Port_Set& (0+255),f,b
 13118  010452  37D8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13119  010454  2EE8               	decfsz	wreg,f,c
 13120  010456  D7FA               	goto	u7765
 13121  010458  0100               	movlb	0	; () banked
 13122  01045A  51EB               	movf	Port_Set@Type& (0+255),w,b
 13123  01045C  0100               	movlb	0	; () banked
 13124  01045E  6FD9               	movwf	(??_Port_Set+2)& (0+255),b
 13125  010460  6BDA               	clrf	(??_Port_Set+3)& (0+255),b
 13126  010462  0E0C               	movlw	12
 13127  010464                     u7775:
 13128  010464  90D8               	bcf	status,0,c
 13129  010466  0100               	movlb	0	; () banked
 13130  010468  37D9               	rlcf	(??_Port_Set+2)& (0+255),f,b
 13131  01046A  37DA               	rlcf	(??_Port_Set+3)& (0+255),f,b
 13132  01046C  2EE8               	decfsz	wreg,f,c
 13133  01046E  D7FA               	goto	u7775
 13134  010470  0100               	movlb	0	; () banked
 13135  010472  51EB               	movf	Port_Set@Type& (0+255),w,b
 13136  010474  0100               	movlb	0	; () banked
 13137  010476  6FDB               	movwf	(??_Port_Set+4)& (0+255),b
 13138  010478  6BDC               	clrf	(??_Port_Set+5)& (0+255),b
 13139  01047A  0E0A               	movlw	10
 13140  01047C                     u7785:
 13141  01047C  90D8               	bcf	status,0,c
 13142  01047E  0100               	movlb	0	; () banked
 13143  010480  37DB               	rlcf	(??_Port_Set+4)& (0+255),f,b
 13144  010482  37DC               	rlcf	(??_Port_Set+5)& (0+255),f,b
 13145  010484  2EE8               	decfsz	wreg,f,c
 13146  010486  D7FA               	goto	u7785
 13147  010488  0100               	movlb	0	; () banked
 13148  01048A  51EB               	movf	Port_Set@Type& (0+255),w,b
 13149  01048C  0100               	movlb	0	; () banked
 13150  01048E  6FDE               	movwf	(??_Port_Set+7)& (0+255),b
 13151  010490  6BDD               	clrf	(??_Port_Set+6)& (0+255),b
 13152  010492  0100               	movlb	0	; () banked
 13153  010494  51EB               	movf	Port_Set@Type& (0+255),w,b
 13154  010496  0100               	movlb	0	; () banked
 13155  010498  6FDF               	movwf	(??_Port_Set+8)& (0+255),b
 13156  01049A  6BE0               	clrf	(??_Port_Set+9)& (0+255),b
 13157  01049C  0E06               	movlw	6
 13158  01049E                     u7795:
 13159  01049E  90D8               	bcf	status,0,c
 13160  0104A0  0100               	movlb	0	; () banked
 13161  0104A2  37DF               	rlcf	(??_Port_Set+8)& (0+255),f,b
 13162  0104A4  37E0               	rlcf	(??_Port_Set+9)& (0+255),f,b
 13163  0104A6  2EE8               	decfsz	wreg,f,c
 13164  0104A8  D7FA               	goto	u7795
 13165  0104AA  0100               	movlb	0	; () banked
 13166  0104AC  51EB               	movf	Port_Set@Type& (0+255),w,b
 13167  0104AE  0100               	movlb	0	; () banked
 13168  0104B0  6FE1               	movwf	(??_Port_Set+10)& (0+255),b
 13169  0104B2  6BE2               	clrf	(??_Port_Set+11)& (0+255),b
 13170  0104B4  0100               	movlb	0	; () banked
 13171  0104B6  3BE1               	swapf	(??_Port_Set+10)& (0+255),f,b
 13172  0104B8  3BE2               	swapf	(??_Port_Set+11)& (0+255),f,b
 13173  0104BA  0EF0               	movlw	240
 13174  0104BC  17E2               	andwf	(??_Port_Set+11)& (0+255),f,b
 13175  0104BE  51E1               	movf	(??_Port_Set+10)& (0+255),w,b
 13176  0104C0  0B0F               	andlw	15
 13177  0104C2  13E2               	iorwf	(??_Port_Set+11)& (0+255),f,b
 13178  0104C4  0EF0               	movlw	240
 13179  0104C6  17E1               	andwf	(??_Port_Set+10)& (0+255),f,b
 13180  0104C8  0100               	movlb	0	; () banked
 13181  0104CA  51EB               	movf	Port_Set@Type& (0+255),w,b
 13182  0104CC  0100               	movlb	0	; () banked
 13183  0104CE  6FE3               	movwf	(??_Port_Set+12)& (0+255),b
 13184  0104D0  6BE4               	clrf	(??_Port_Set+13)& (0+255),b
 13185  0104D2  0100               	movlb	0	; () banked
 13186  0104D4  90D8               	bcf	status,0,c
 13187  0104D6  37E3               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13188  0104D8  37E4               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13189  0104DA  0100               	movlb	0	; () banked
 13190  0104DC  90D8               	bcf	status,0,c
 13191  0104DE  37E3               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13192  0104E0  37E4               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13193  0104E2  0100               	movlb	0	; () banked
 13194  0104E4  51EB               	movf	Port_Set@Type& (0+255),w,b
 13195  0104E6  0100               	movlb	0	; () banked
 13196  0104E8  6FE5               	movwf	(??_Port_Set+14)& (0+255),b
 13197  0104EA  6BE6               	clrf	(??_Port_Set+15)& (0+255),b
 13198  0104EC  0100               	movlb	0	; () banked
 13199  0104EE  51E3               	movf	(??_Port_Set+12)& (0+255),w,b
 13200  0104F0  0100               	movlb	0	; () banked
 13201  0104F2  13E5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13202  0104F4  0100               	movlb	0	; () banked
 13203  0104F6  51E4               	movf	(??_Port_Set+13)& (0+255),w,b
 13204  0104F8  0100               	movlb	0	; () banked
 13205  0104FA  13E6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13206  0104FC  0100               	movlb	0	; () banked
 13207  0104FE  51E1               	movf	(??_Port_Set+10)& (0+255),w,b
 13208  010500  0100               	movlb	0	; () banked
 13209  010502  13E5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13210  010504  0100               	movlb	0	; () banked
 13211  010506  51E2               	movf	(??_Port_Set+11)& (0+255),w,b
 13212  010508  0100               	movlb	0	; () banked
 13213  01050A  13E6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13214  01050C  0100               	movlb	0	; () banked
 13215  01050E  51DF               	movf	(??_Port_Set+8)& (0+255),w,b
 13216  010510  0100               	movlb	0	; () banked
 13217  010512  13E5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13218  010514  0100               	movlb	0	; () banked
 13219  010516  51E0               	movf	(??_Port_Set+9)& (0+255),w,b
 13220  010518  0100               	movlb	0	; () banked
 13221  01051A  13E6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13222  01051C  0100               	movlb	0	; () banked
 13223  01051E  51DD               	movf	(??_Port_Set+6)& (0+255),w,b
 13224  010520  0100               	movlb	0	; () banked
 13225  010522  13E5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13226  010524  0100               	movlb	0	; () banked
 13227  010526  51DE               	movf	(??_Port_Set+7)& (0+255),w,b
 13228  010528  0100               	movlb	0	; () banked
 13229  01052A  13E6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13230  01052C  0100               	movlb	0	; () banked
 13231  01052E  51DB               	movf	(??_Port_Set+4)& (0+255),w,b
 13232  010530  0100               	movlb	0	; () banked
 13233  010532  13E5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13234  010534  0100               	movlb	0	; () banked
 13235  010536  51DC               	movf	(??_Port_Set+5)& (0+255),w,b
 13236  010538  0100               	movlb	0	; () banked
 13237  01053A  13E6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13238  01053C  0100               	movlb	0	; () banked
 13239  01053E  51D9               	movf	(??_Port_Set+2)& (0+255),w,b
 13240  010540  0100               	movlb	0	; () banked
 13241  010542  13E5               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13242  010544  0100               	movlb	0	; () banked
 13243  010546  51DA               	movf	(??_Port_Set+3)& (0+255),w,b
 13244  010548  0100               	movlb	0	; () banked
 13245  01054A  13E6               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13246  01054C  0100               	movlb	0	; () banked
 13247  01054E  51D7               	movf	??_Port_Set& (0+255),w,b
 13248  010550  0100               	movlb	0	; () banked
 13249  010552  11E5               	iorwf	(??_Port_Set+14)& (0+255),w,b
 13250  010554  0100               	movlb	0	; () banked
 13251  010556  6FE7               	movwf	Port_Set@TypeRequired& (0+255),b
 13252  010558  0100               	movlb	0	; () banked
 13253  01055A  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13254  01055C  0100               	movlb	0	; () banked
 13255  01055E  11E6               	iorwf	(??_Port_Set+15)& (0+255),w,b
 13256  010560  0100               	movlb	0	; () banked
 13257  010562  6FE8               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 13258                           
 13259                           ; BSR set to: 0
 13260                           ;Port.c: 574: UINT16 TypeActual = Type;
 13261  010564  C0EB  F0E9         	movff	Port_Set@Type,Port_Set@TypeActual
 13262  010568  0100               	movlb	0	; () banked
 13263  01056A  6BEA               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 13264                           
 13265                           ; BSR set to: 0
 13266                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 13267  01056C  0E08               	movlw	8
 13268  01056E  0100               	movlb	0	; () banked
 13269  010570  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13270  010572  0100               	movlb	0	; () banked
 13271  010574  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13272  010576  0E00               	movlw	0
 13273  010578  0100               	movlb	0	; () banked
 13274  01057A  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13275  01057C  0100               	movlb	0	; () banked
 13276  01057E  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13277  010580  0E01               	movlw	1
 13278  010582  0100               	movlb	0	; () banked
 13279  010584  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13280  010586  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13281  01058A  0100               	movlb	0	; () banked
 13282  01058C  6FD7               	movwf	??_Port_Set& (0+255),b
 13283  01058E  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13284  010590  0100               	movlb	0	; () banked
 13285  010592  90D8               	bcf	status,0,c
 13286  010594  37D7               	rlcf	??_Port_Set& (0+255),f,b
 13287  010596  37D8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13288  010598  0100               	movlb	0	; () banked
 13289  01059A  90D8               	bcf	status,0,c
 13290  01059C  37D7               	rlcf	??_Port_Set& (0+255),f,b
 13291  01059E  37D8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13292  0105A0  0100               	movlb	0	; () banked
 13293  0105A2  51D7               	movf	??_Port_Set& (0+255),w,b
 13294  0105A4  0100               	movlb	0	; () banked
 13295  0105A6  13E9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13296  0105A8  0100               	movlb	0	; () banked
 13297  0105AA  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13298  0105AC  0100               	movlb	0	; () banked
 13299  0105AE  13EA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13300                           
 13301                           ; BSR set to: 0
 13302                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 13303  0105B0  0E08               	movlw	8
 13304  0105B2  0100               	movlb	0	; () banked
 13305  0105B4  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13306  0105B6  0100               	movlb	0	; () banked
 13307  0105B8  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13308  0105BA  0E00               	movlw	0
 13309  0105BC  0100               	movlb	0	; () banked
 13310  0105BE  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13311  0105C0  0100               	movlb	0	; () banked
 13312  0105C2  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13313  0105C4  0E02               	movlw	2
 13314  0105C6  0100               	movlb	0	; () banked
 13315  0105C8  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13316  0105CA  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13317  0105CE  0100               	movlb	0	; () banked
 13318  0105D0  6FD7               	movwf	??_Port_Set& (0+255),b
 13319  0105D2  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13320  0105D4  0100               	movlb	0	; () banked
 13321  0105D6  3BD7               	swapf	??_Port_Set& (0+255),f,b
 13322  0105D8  3BD8               	swapf	(??_Port_Set+1)& (0+255),f,b
 13323  0105DA  0EF0               	movlw	240
 13324  0105DC  17D8               	andwf	(??_Port_Set+1)& (0+255),f,b
 13325  0105DE  51D7               	movf	??_Port_Set& (0+255),w,b
 13326  0105E0  0B0F               	andlw	15
 13327  0105E2  13D8               	iorwf	(??_Port_Set+1)& (0+255),f,b
 13328  0105E4  0EF0               	movlw	240
 13329  0105E6  17D7               	andwf	??_Port_Set& (0+255),f,b
 13330  0105E8  0100               	movlb	0	; () banked
 13331  0105EA  51D7               	movf	??_Port_Set& (0+255),w,b
 13332  0105EC  0100               	movlb	0	; () banked
 13333  0105EE  13E9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13334  0105F0  0100               	movlb	0	; () banked
 13335  0105F2  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13336  0105F4  0100               	movlb	0	; () banked
 13337  0105F6  13EA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13338                           
 13339                           ; BSR set to: 0
 13340                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 13341  0105F8  0E08               	movlw	8
 13342  0105FA  0100               	movlb	0	; () banked
 13343  0105FC  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13344  0105FE  0100               	movlb	0	; () banked
 13345  010600  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13346  010602  0E00               	movlw	0
 13347  010604  0100               	movlb	0	; () banked
 13348  010606  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13349  010608  0100               	movlb	0	; () banked
 13350  01060A  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13351  01060C  0E03               	movlw	3
 13352  01060E  0100               	movlb	0	; () banked
 13353  010610  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13354  010612  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13355  010616  0100               	movlb	0	; () banked
 13356  010618  6FD7               	movwf	??_Port_Set& (0+255),b
 13357  01061A  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13358  01061C  0E06               	movlw	6
 13359  01061E                     u7805:
 13360  01061E  90D8               	bcf	status,0,c
 13361  010620  0100               	movlb	0	; () banked
 13362  010622  37D7               	rlcf	??_Port_Set& (0+255),f,b
 13363  010624  37D8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13364  010626  2EE8               	decfsz	wreg,f,c
 13365  010628  D7FA               	goto	u7805
 13366  01062A  0100               	movlb	0	; () banked
 13367  01062C  51D7               	movf	??_Port_Set& (0+255),w,b
 13368  01062E  0100               	movlb	0	; () banked
 13369  010630  13E9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13370  010632  0100               	movlb	0	; () banked
 13371  010634  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13372  010636  0100               	movlb	0	; () banked
 13373  010638  13EA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13374                           
 13375                           ; BSR set to: 0
 13376                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 13377  01063A  0E08               	movlw	8
 13378  01063C  0100               	movlb	0	; () banked
 13379  01063E  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13380  010640  0100               	movlb	0	; () banked
 13381  010642  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13382  010644  0E00               	movlw	0
 13383  010646  0100               	movlb	0	; () banked
 13384  010648  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13385  01064A  0100               	movlb	0	; () banked
 13386  01064C  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13387  01064E  0E04               	movlw	4
 13388  010650  0100               	movlb	0	; () banked
 13389  010652  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13390  010654  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13391  010658  0100               	movlb	0	; () banked
 13392  01065A  6FD7               	movwf	??_Port_Set& (0+255),b
 13393  01065C  0100               	movlb	0	; () banked
 13394  01065E  51D7               	movf	??_Port_Set& (0+255),w,b
 13395  010660  0100               	movlb	0	; () banked
 13396  010662  6FD9               	movwf	(??_Port_Set+2)& (0+255),b
 13397  010664  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13398  010666  0100               	movlb	0	; () banked
 13399  010668  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13400  01066A  0100               	movlb	0	; () banked
 13401  01066C  13E9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13402  01066E  0100               	movlb	0	; () banked
 13403  010670  51D9               	movf	(??_Port_Set+2)& (0+255),w,b
 13404  010672  0100               	movlb	0	; () banked
 13405  010674  13EA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13406                           
 13407                           ; BSR set to: 0
 13408                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 13409  010676  0E08               	movlw	8
 13410  010678  0100               	movlb	0	; () banked
 13411  01067A  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13412  01067C  0100               	movlb	0	; () banked
 13413  01067E  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13414  010680  0E00               	movlw	0
 13415  010682  0100               	movlb	0	; () banked
 13416  010684  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13417  010686  0100               	movlb	0	; () banked
 13418  010688  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13419  01068A  0E05               	movlw	5
 13420  01068C  0100               	movlb	0	; () banked
 13421  01068E  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13422  010690  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13423  010694  0100               	movlb	0	; () banked
 13424  010696  6FD7               	movwf	??_Port_Set& (0+255),b
 13425  010698  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13426  01069A  0E0A               	movlw	10
 13427  01069C                     u7815:
 13428  01069C  90D8               	bcf	status,0,c
 13429  01069E  0100               	movlb	0	; () banked
 13430  0106A0  37D7               	rlcf	??_Port_Set& (0+255),f,b
 13431  0106A2  37D8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13432  0106A4  2EE8               	decfsz	wreg,f,c
 13433  0106A6  D7FA               	goto	u7815
 13434  0106A8  0100               	movlb	0	; () banked
 13435  0106AA  51D7               	movf	??_Port_Set& (0+255),w,b
 13436  0106AC  0100               	movlb	0	; () banked
 13437  0106AE  13E9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13438  0106B0  0100               	movlb	0	; () banked
 13439  0106B2  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13440  0106B4  0100               	movlb	0	; () banked
 13441  0106B6  13EA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13442                           
 13443                           ; BSR set to: 0
 13444                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 13445  0106B8  0E08               	movlw	8
 13446  0106BA  0100               	movlb	0	; () banked
 13447  0106BC  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13448  0106BE  0100               	movlb	0	; () banked
 13449  0106C0  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13450  0106C2  0E00               	movlw	0
 13451  0106C4  0100               	movlb	0	; () banked
 13452  0106C6  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13453  0106C8  0100               	movlb	0	; () banked
 13454  0106CA  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13455  0106CC  0E06               	movlw	6
 13456  0106CE  0100               	movlb	0	; () banked
 13457  0106D0  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13458  0106D2  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13459  0106D6  0100               	movlb	0	; () banked
 13460  0106D8  6FD7               	movwf	??_Port_Set& (0+255),b
 13461  0106DA  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13462  0106DC  0E0C               	movlw	12
 13463  0106DE                     u7825:
 13464  0106DE  90D8               	bcf	status,0,c
 13465  0106E0  0100               	movlb	0	; () banked
 13466  0106E2  37D7               	rlcf	??_Port_Set& (0+255),f,b
 13467  0106E4  37D8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13468  0106E6  2EE8               	decfsz	wreg,f,c
 13469  0106E8  D7FA               	goto	u7825
 13470  0106EA  0100               	movlb	0	; () banked
 13471  0106EC  51D7               	movf	??_Port_Set& (0+255),w,b
 13472  0106EE  0100               	movlb	0	; () banked
 13473  0106F0  13E9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13474  0106F2  0100               	movlb	0	; () banked
 13475  0106F4  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13476  0106F6  0100               	movlb	0	; () banked
 13477  0106F8  13EA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 13481  0106FA  0E08               	movlw	8
 13482  0106FC  0100               	movlb	0	; () banked
 13483  0106FE  25D4               	addwf	Port_Set@pInput& (0+255),w,b
 13484  010700  0100               	movlb	0	; () banked
 13485  010702  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 13486  010704  0E00               	movlw	0
 13487  010706  0100               	movlb	0	; () banked
 13488  010708  21D5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13489  01070A  0100               	movlb	0	; () banked
 13490  01070C  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13491  01070E  0E07               	movlw	7
 13492  010710  0100               	movlb	0	; () banked
 13493  010712  6FD3               	movwf	Word_GetPair@pPair& (0+255),b
 13494  010714  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 13495  010718  0100               	movlb	0	; () banked
 13496  01071A  6FD7               	movwf	??_Port_Set& (0+255),b
 13497  01071C  6BD8               	clrf	(??_Port_Set+1)& (0+255),b
 13498  01071E  0E0E               	movlw	14
 13499  010720                     u7835:
 13500  010720  90D8               	bcf	status,0,c
 13501  010722  0100               	movlb	0	; () banked
 13502  010724  37D7               	rlcf	??_Port_Set& (0+255),f,b
 13503  010726  37D8               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13504  010728  2EE8               	decfsz	wreg,f,c
 13505  01072A  D7FA               	goto	u7835
 13506  01072C  0100               	movlb	0	; () banked
 13507  01072E  51D7               	movf	??_Port_Set& (0+255),w,b
 13508  010730  0100               	movlb	0	; () banked
 13509  010732  13E9               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13510  010734  0100               	movlb	0	; () banked
 13511  010736  51D8               	movf	(??_Port_Set+1)& (0+255),w,b
 13512  010738  0100               	movlb	0	; () banked
 13513  01073A  13EA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13514                           
 13515                           ;Port.c: 584: if (TypeRequired == TypeActual)
 13516  01073C  0100               	movlb	0	; () banked
 13517  01073E  51E9               	movf	Port_Set@TypeActual& (0+255),w,b
 13518  010740  0100               	movlb	0	; () banked
 13519  010742  19E7               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 13520  010744  E148               	bnz	l528
 13521  010746  0100               	movlb	0	; () banked
 13522  010748  51EA               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 13523  01074A  0100               	movlb	0	; () banked
 13524  01074C  19E8               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 13525  01074E  A4D8               	btfss	status,2,c
 13526  010750  0012               	return	
 13527  010752  D032               	goto	l11482
 13528  010754                     l11472:
 13529                           
 13530                           ; BSR set to: 0
 13531                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 13532  010754  0100               	movlb	0	; () banked
 13533  010756  EE20 F002          	lfsr	2,2
 13534  01075A  51D4               	movf	Port_Set@pInput& (0+255),w,b
 13535  01075C  26D9               	addwf	fsr2l,f,c
 13536  01075E  51D5               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13537  010760  22DA               	addwfc	fsr2h,f,c
 13538  010762  CFDE F0C5          	movff	postinc2,Byte_SetByte@pInput
 13539  010766  CFDD F0C6          	movff	postdec2,Byte_SetByte@pInput+1
 13540  01076A  C0D6  F0C7         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13541  01076E  EC5C  F0A5         	call	_Byte_SetByte	;wreg free
 13542                           
 13543                           ;Port.c: 594: break;
 13544  010772  0012               	return	
 13545  010774                     l11474:
 13546                           
 13547                           ;Port.c: 597: pValue = ~pValue;
 13548  010774  0100               	movlb	0	; () banked
 13549  010776  1FD6               	comf	Port_Set@pValue& (0+255),f,b
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 13553  010778  0100               	movlb	0	; () banked
 13554  01077A  EE20 F002          	lfsr	2,2
 13555  01077E  51D4               	movf	Port_Set@pInput& (0+255),w,b
 13556  010780  26D9               	addwf	fsr2l,f,c
 13557  010782  51D5               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13558  010784  22DA               	addwfc	fsr2h,f,c
 13559  010786  CFDE F0C5          	movff	postinc2,Byte_SetByte@pInput
 13560  01078A  CFDD F0C6          	movff	postdec2,Byte_SetByte@pInput+1
 13561  01078E  C0D6  F0C7         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13562  010792  EC5C  F0A5         	call	_Byte_SetByte	;wreg free
 13563                           
 13564                           ;Port.c: 599: break;
 13565  010796  0012               	return	
 13566  010798                     l11478:
 13567                           
 13568                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 13569  010798  0100               	movlb	0	; () banked
 13570  01079A  EE20 F004          	lfsr	2,4
 13571  01079E  51D4               	movf	Port_Set@pInput& (0+255),w,b
 13572  0107A0  26D9               	addwf	fsr2l,f,c
 13573  0107A2  51D5               	movf	(Port_Set@pInput+1)& (0+255),w,b
 13574  0107A4  22DA               	addwfc	fsr2h,f,c
 13575  0107A6  CFDE F0C5          	movff	postinc2,Byte_SetByte@pInput
 13576  0107AA  CFDD F0C6          	movff	postdec2,Byte_SetByte@pInput+1
 13577  0107AE  C0D6  F0C7         	movff	Port_Set@pValue,Byte_SetByte@pValue
 13578  0107B2  EC5C  F0A5         	call	_Byte_SetByte	;wreg free
 13579                           
 13580                           ;Port.c: 606: }
 13581                           
 13582                           ;Port.c: 605: break;
 13583                           
 13584                           ;Port.c: 604: default:
 13585                           
 13586                           ;Port.c: 603: break;
 13587  0107B6  0012               	return	
 13588  0107B8                     l11482:
 13589  0107B8  0100               	movlb	0	; () banked
 13590  0107BA  51EB               	movf	Port_Set@Type& (0+255),w,b
 13591                           
 13592                           ; Switch size 1, requested type "space"
 13593                           ; Number of cases is 4, Range of values is 0 to 3
 13594                           ; switch strategies available:
 13595                           ; Name         Instructions Cycles
 13596                           ; simple_byte           13     7 (average)
 13597                           ;	Chosen strategy is simple_byte
 13598  0107BC  0A00               	xorlw	0	; case 0
 13599  0107BE  B4D8               	btfsc	status,2,c
 13600  0107C0  0012               	return	
 13601  0107C2  0A01               	xorlw	1	; case 1
 13602  0107C4  B4D8               	btfsc	status,2,c
 13603  0107C6  D7C6               	goto	l11472
 13604  0107C8  0A03               	xorlw	3	; case 2
 13605  0107CA  B4D8               	btfsc	status,2,c
 13606  0107CC  D7D3               	goto	l11474
 13607  0107CE  0A01               	xorlw	1	; case 3
 13608  0107D0  A4D8               	btfss	status,2,c
 13609                           
 13610                           ; BSR set to: 0
 13611                           
 13612                           ; BSR set to: 0
 13613                           ;Port.c: 607: }
 13614  0107D2  0012               	return	
 13615  0107D4  D7E1               	goto	l11478
 13616  0107D6                     l528:
 13617  0107D6  0012               	return		;funcret
 13618  0107D8                     __end_of_Port_Set:
 13619                           	opt stack 0
 13620                           tosu	equ	0xFFF
 13621                           tosh	equ	0xFFE
 13622                           tosl	equ	0xFFD
 13623                           pclath	equ	0xFFA
 13624                           tblptru	equ	0xFF8
 13625                           tblptrh	equ	0xFF7
 13626                           tblptrl	equ	0xFF6
 13627                           tablat	equ	0xFF5
 13628                           prodh	equ	0xFF4
 13629                           prodl	equ	0xFF3
 13630                           intcon	equ	0xFF2
 13631                           postinc0	equ	0xFEE
 13632                           wreg	equ	0xFE8
 13633                           indf1	equ	0xFE7
 13634                           postdec1	equ	0xFE5
 13635                           fsr1h	equ	0xFE2
 13636                           fsr1l	equ	0xFE1
 13637                           indf2	equ	0xFDF
 13638                           postinc2	equ	0xFDE
 13639                           postdec2	equ	0xFDD
 13640                           plusw2	equ	0xFDB
 13641                           fsr2h	equ	0xFDA
 13642                           fsr2l	equ	0xFD9
 13643                           status	equ	0xFD8
 13644                           
 13645 ;; *************** function _Byte_SetByte *****************
 13646 ;; Defined at:
 13647 ;;		line 110 in file "Library/Types.c"
 13648 ;; Parameters:    Size  Location     Type
 13649 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 13650 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 13651 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 13652 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 13653 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 13654 ;;		 -> NULL(0), 
 13655 ;;  pValue          1    2[BANK0 ] unsigned char 
 13656 ;; Auto vars:     Size  Location     Type
 13657 ;;		None
 13658 ;; Return value:  Size  Location     Type
 13659 ;;                  1    wreg      void 
 13660 ;; Registers used:
 13661 ;;		fsr2l, fsr2h
 13662 ;; Tracked objects:
 13663 ;;		On entry : 0/0
 13664 ;;		On exit  : 0/0
 13665 ;;		Unchanged: 0/0
 13666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13667 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13668 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13669 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13670 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13671 ;;Total ram usage:        3 bytes
 13672 ;; Hardware stack levels used:    1
 13673 ;; Hardware stack levels required when called:    7
 13674 ;; This function calls:
 13675 ;;		Nothing
 13676 ;; This function is called by:
 13677 ;;		_Port_Set
 13678 ;;		_I2C_Init
 13679 ;; This function uses a non-reentrant model
 13680 ;;
 13681                           
 13682                           	psect	text72
 13683  014AB8                     __ptext72:
 13684                           	opt stack 0
 13685  014AB8                     _Byte_SetByte:
 13686                           	opt stack 19
 13687                           
 13688                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 13689                           
 13690                           ;incstack = 0
 13691  014AB8  C0C5  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 13692  014ABC  C0C6  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 13693  014AC0  C0C7  FFDF         	movff	Byte_SetByte@pValue,indf2
 13694  014AC4  0012               	return		;funcret
 13695  014AC6                     __end_of_Byte_SetByte:
 13696                           	opt stack 0
 13697                           tosu	equ	0xFFF
 13698                           tosh	equ	0xFFE
 13699                           tosl	equ	0xFFD
 13700                           pclath	equ	0xFFA
 13701                           tblptru	equ	0xFF8
 13702                           tblptrh	equ	0xFF7
 13703                           tblptrl	equ	0xFF6
 13704                           tablat	equ	0xFF5
 13705                           prodh	equ	0xFF4
 13706                           prodl	equ	0xFF3
 13707                           intcon	equ	0xFF2
 13708                           postinc0	equ	0xFEE
 13709                           wreg	equ	0xFE8
 13710                           indf1	equ	0xFE7
 13711                           postdec1	equ	0xFE5
 13712                           fsr1h	equ	0xFE2
 13713                           fsr1l	equ	0xFE1
 13714                           indf2	equ	0xFDF
 13715                           postinc2	equ	0xFDE
 13716                           postdec2	equ	0xFDD
 13717                           plusw2	equ	0xFDB
 13718                           fsr2h	equ	0xFDA
 13719                           fsr2l	equ	0xFD9
 13720                           status	equ	0xFD8
 13721                           
 13722 ;; *************** function _GetPortTRIS *****************
 13723 ;; Defined at:
 13724 ;;		line 67 in file "Library/Port.c"
 13725 ;; Parameters:    Size  Location     Type
 13726 ;;  pInput          1    wreg     enum E6786
 13727 ;; Auto vars:     Size  Location     Type
 13728 ;;  pInput          1    2[BANK0 ] enum E6786
 13729 ;; Return value:  Size  Location     Type
 13730 ;;                  2    0[BANK0 ] PTR struct Byte
 13731 ;; Registers used:
 13732 ;;		wreg, status,2, status,0
 13733 ;; Tracked objects:
 13734 ;;		On entry : 0/0
 13735 ;;		On exit  : 0/0
 13736 ;;		Unchanged: 0/0
 13737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13738 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13739 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13741 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13742 ;;Total ram usage:        3 bytes
 13743 ;; Hardware stack levels used:    1
 13744 ;; Hardware stack levels required when called:    7
 13745 ;; This function calls:
 13746 ;;		Nothing
 13747 ;; This function is called by:
 13748 ;;		_Port_Init
 13749 ;; This function uses a non-reentrant model
 13750 ;;
 13751                           
 13752                           	psect	text73
 13753  012F72                     __ptext73:
 13754                           	opt stack 0
 13755  012F72                     _GetPortTRIS:
 13756                           	opt stack 20
 13757                           
 13758                           ;incstack = 0
 13759                           ;GetPortTRIS@pInput stored from wreg
 13760  012F72  0100               	movlb	0	; () banked
 13761  012F74  6FC7               	movwf	GetPortTRIS@pInput& (0+255),b
 13762                           
 13763                           ;Port.c: 69: switch (pInput)
 13764  012F76  D038               	goto	l11424
 13765  012F78                     l11390:
 13766                           
 13767                           ;Port.c: 72: return (BytePtr)&TRISA;
 13768  012F78  0E92               	movlw	146
 13769  012F7A  0100               	movlb	0	; () banked
 13770  012F7C  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13771  012F7E  0E0F               	movlw	15
 13772  012F80  0100               	movlb	0	; () banked
 13773  012F82  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13774                           
 13775                           ; BSR set to: 0
 13776  012F84  0012               	return	
 13777  012F86                     l11394:
 13778                           
 13779                           ; BSR set to: 0
 13780                           ;Port.c: 74: return (BytePtr)&TRISB;
 13781  012F86  0E93               	movlw	147
 13782  012F88  0100               	movlb	0	; () banked
 13783  012F8A  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13784  012F8C  0E0F               	movlw	15
 13785  012F8E  0100               	movlb	0	; () banked
 13786  012F90  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13787                           
 13788                           ; BSR set to: 0
 13789  012F92  0012               	return	
 13790  012F94                     l11398:
 13791                           
 13792                           ; BSR set to: 0
 13793                           ;Port.c: 76: return (BytePtr)&TRISC;
 13794  012F94  0E94               	movlw	148
 13795  012F96  0100               	movlb	0	; () banked
 13796  012F98  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13797  012F9A  0E0F               	movlw	15
 13798  012F9C  0100               	movlb	0	; () banked
 13799  012F9E  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13800                           
 13801                           ; BSR set to: 0
 13802  012FA0  0012               	return	
 13803  012FA2                     l11402:
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;Port.c: 78: return (BytePtr)&TRISD;
 13807  012FA2  0E95               	movlw	149
 13808  012FA4  0100               	movlb	0	; () banked
 13809  012FA6  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13810  012FA8  0E0F               	movlw	15
 13811  012FAA  0100               	movlb	0	; () banked
 13812  012FAC  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13813                           
 13814                           ; BSR set to: 0
 13815  012FAE  0012               	return	
 13816  012FB0                     l11406:
 13817                           
 13818                           ; BSR set to: 0
 13819                           ;Port.c: 80: return (BytePtr)&TRISE;
 13820  012FB0  0E96               	movlw	150
 13821  012FB2  0100               	movlb	0	; () banked
 13822  012FB4  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13823  012FB6  0E0F               	movlw	15
 13824  012FB8  0100               	movlb	0	; () banked
 13825  012FBA  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13826                           
 13827                           ; BSR set to: 0
 13828  012FBC  0012               	return	
 13829  012FBE                     l11410:
 13830                           
 13831                           ; BSR set to: 0
 13832                           ;Port.c: 82: return (BytePtr)&TRISF;
 13833  012FBE  0E97               	movlw	151
 13834  012FC0  0100               	movlb	0	; () banked
 13835  012FC2  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13836  012FC4  0E0F               	movlw	15
 13837  012FC6  0100               	movlb	0	; () banked
 13838  012FC8  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13839                           
 13840                           ; BSR set to: 0
 13841  012FCA  0012               	return	
 13842  012FCC                     l11414:
 13843                           
 13844                           ; BSR set to: 0
 13845                           ;Port.c: 84: return (BytePtr)&TRISG;
 13846  012FCC  0E98               	movlw	152
 13847  012FCE  0100               	movlb	0	; () banked
 13848  012FD0  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13849  012FD2  0E0F               	movlw	15
 13850  012FD4  0100               	movlb	0	; () banked
 13851  012FD6  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13852                           
 13853                           ; BSR set to: 0
 13854  012FD8  0012               	return	
 13855  012FDA                     l11418:
 13856                           
 13857                           ; BSR set to: 0
 13858                           ;Port.c: 86: return (void*)0;
 13859  012FDA  0E00               	movlw	0
 13860  012FDC  0100               	movlb	0	; () banked
 13861  012FDE  6FC5               	movwf	?_GetPortTRIS& (0+255),b
 13862  012FE0  0E00               	movlw	0
 13863  012FE2  0100               	movlb	0	; () banked
 13864  012FE4  6FC6               	movwf	(?_GetPortTRIS+1)& (0+255),b
 13865                           
 13866                           ; BSR set to: 0
 13867                           ;Port.c: 87: }
 13868                           
 13869                           ; BSR set to: 0
 13870  012FE6  0012               	return	
 13871  012FE8                     l11424:
 13872  012FE8  0100               	movlb	0	; () banked
 13873  012FEA  51C7               	movf	GetPortTRIS@pInput& (0+255),w,b
 13874                           
 13875                           ; Switch size 1, requested type "space"
 13876                           ; Number of cases is 7, Range of values is 0 to 6
 13877                           ; switch strategies available:
 13878                           ; Name         Instructions Cycles
 13879                           ; simple_byte           22    12 (average)
 13880                           ;	Chosen strategy is simple_byte
 13881  012FEC  0A00               	xorlw	0	; case 0
 13882  012FEE  B4D8               	btfsc	status,2,c
 13883  012FF0  D7C3               	goto	l11390
 13884  012FF2  0A01               	xorlw	1	; case 1
 13885  012FF4  B4D8               	btfsc	status,2,c
 13886  012FF6  D7C7               	goto	l11394
 13887  012FF8  0A03               	xorlw	3	; case 2
 13888  012FFA  B4D8               	btfsc	status,2,c
 13889  012FFC  D7CB               	goto	l11398
 13890  012FFE  0A01               	xorlw	1	; case 3
 13891  013000  B4D8               	btfsc	status,2,c
 13892  013002  D7CF               	goto	l11402
 13893  013004  0A07               	xorlw	7	; case 4
 13894  013006  B4D8               	btfsc	status,2,c
 13895  013008  D7D3               	goto	l11406
 13896  01300A  0A01               	xorlw	1	; case 5
 13897  01300C  B4D8               	btfsc	status,2,c
 13898  01300E  D7D7               	goto	l11410
 13899  013010  0A03               	xorlw	3	; case 6
 13900  013012  B4D8               	btfsc	status,2,c
 13901  013014  D7DB               	goto	l11414
 13902  013016  D7E1               	goto	l11418
 13903  013018                     __end_of_GetPortTRIS:
 13904                           	opt stack 0
 13905                           tosu	equ	0xFFF
 13906                           tosh	equ	0xFFE
 13907                           tosl	equ	0xFFD
 13908                           pclath	equ	0xFFA
 13909                           tblptru	equ	0xFF8
 13910                           tblptrh	equ	0xFF7
 13911                           tblptrl	equ	0xFF6
 13912                           tablat	equ	0xFF5
 13913                           prodh	equ	0xFF4
 13914                           prodl	equ	0xFF3
 13915                           intcon	equ	0xFF2
 13916                           postinc0	equ	0xFEE
 13917                           wreg	equ	0xFE8
 13918                           indf1	equ	0xFE7
 13919                           postdec1	equ	0xFE5
 13920                           fsr1h	equ	0xFE2
 13921                           fsr1l	equ	0xFE1
 13922                           indf2	equ	0xFDF
 13923                           postinc2	equ	0xFDE
 13924                           postdec2	equ	0xFDD
 13925                           plusw2	equ	0xFDB
 13926                           fsr2h	equ	0xFDA
 13927                           fsr2l	equ	0xFD9
 13928                           status	equ	0xFD8
 13929                           
 13930 ;; *************** function _GetPortProperties *****************
 13931 ;; Defined at:
 13932 ;;		line 21 in file "Library/Port.c"
 13933 ;; Parameters:    Size  Location     Type
 13934 ;;  pInput          1    wreg     enum E6786
 13935 ;; Auto vars:     Size  Location     Type
 13936 ;;  pInput          1    2[BANK0 ] enum E6786
 13937 ;; Return value:  Size  Location     Type
 13938 ;;                  2    0[BANK0 ] PTR struct PortProperty
 13939 ;; Registers used:
 13940 ;;		wreg, status,2, status,0
 13941 ;; Tracked objects:
 13942 ;;		On entry : 0/0
 13943 ;;		On exit  : 0/0
 13944 ;;		Unchanged: 0/0
 13945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13946 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13947 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13949 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;Total ram usage:        3 bytes
 13951 ;; Hardware stack levels used:    1
 13952 ;; Hardware stack levels required when called:    7
 13953 ;; This function calls:
 13954 ;;		Nothing
 13955 ;; This function is called by:
 13956 ;;		_Port_Init
 13957 ;; This function uses a non-reentrant model
 13958 ;;
 13959                           
 13960                           	psect	text74
 13961  013018                     __ptext74:
 13962                           	opt stack 0
 13963  013018                     _GetPortProperties:
 13964                           	opt stack 20
 13965                           
 13966                           ; BSR set to: 0
 13967                           ;incstack = 0
 13968                           ;GetPortProperties@pInput stored from wreg
 13969  013018  0100               	movlb	0	; () banked
 13970  01301A  6FC7               	movwf	GetPortProperties@pInput& (0+255),b
 13971                           
 13972                           ;Port.c: 23: switch (pInput)
 13973  01301C  D038               	goto	l11348
 13974  01301E                     l11314:
 13975                           
 13976                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 13977  01301E  0E67               	movlw	low _PortA_Property
 13978  013020  0100               	movlb	0	; () banked
 13979  013022  6FC5               	movwf	?_GetPortProperties& (0+255),b
 13980  013024  0EFF               	movlw	high _PortA_Property
 13981  013026  0100               	movlb	0	; () banked
 13982  013028  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 13983                           
 13984                           ; BSR set to: 0
 13985  01302A  0012               	return	
 13986  01302C                     l11318:
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 13990  01302C  0E65               	movlw	low _PortB_Property
 13991  01302E  0100               	movlb	0	; () banked
 13992  013030  6FC5               	movwf	?_GetPortProperties& (0+255),b
 13993  013032  0EFF               	movlw	high _PortB_Property
 13994  013034  0100               	movlb	0	; () banked
 13995  013036  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 13996                           
 13997                           ; BSR set to: 0
 13998  013038  0012               	return	
 13999  01303A                     l11322:
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 14003  01303A  0E63               	movlw	low _PortC_Property
 14004  01303C  0100               	movlb	0	; () banked
 14005  01303E  6FC5               	movwf	?_GetPortProperties& (0+255),b
 14006  013040  0EFF               	movlw	high _PortC_Property
 14007  013042  0100               	movlb	0	; () banked
 14008  013044  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 14009                           
 14010                           ; BSR set to: 0
 14011  013046  0012               	return	
 14012  013048                     l11326:
 14013                           
 14014                           ; BSR set to: 0
 14015                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 14016  013048  0E61               	movlw	low _PortD_Property
 14017  01304A  0100               	movlb	0	; () banked
 14018  01304C  6FC5               	movwf	?_GetPortProperties& (0+255),b
 14019  01304E  0EFF               	movlw	high _PortD_Property
 14020  013050  0100               	movlb	0	; () banked
 14021  013052  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 14022                           
 14023                           ; BSR set to: 0
 14024  013054  0012               	return	
 14025  013056                     l11330:
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 14029  013056  0E5F               	movlw	low _PortE_Property
 14030  013058  0100               	movlb	0	; () banked
 14031  01305A  6FC5               	movwf	?_GetPortProperties& (0+255),b
 14032  01305C  0EFF               	movlw	high _PortE_Property
 14033  01305E  0100               	movlb	0	; () banked
 14034  013060  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 14035                           
 14036                           ; BSR set to: 0
 14037  013062  0012               	return	
 14038  013064                     l11334:
 14039                           
 14040                           ; BSR set to: 0
 14041                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 14042  013064  0E5D               	movlw	low _PortF_Property
 14043  013066  0100               	movlb	0	; () banked
 14044  013068  6FC5               	movwf	?_GetPortProperties& (0+255),b
 14045  01306A  0EFF               	movlw	high _PortF_Property
 14046  01306C  0100               	movlb	0	; () banked
 14047  01306E  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 14048                           
 14049                           ; BSR set to: 0
 14050  013070  0012               	return	
 14051  013072                     l11338:
 14052                           
 14053                           ; BSR set to: 0
 14054                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 14055  013072  0E5B               	movlw	low _PortG_Property
 14056  013074  0100               	movlb	0	; () banked
 14057  013076  6FC5               	movwf	?_GetPortProperties& (0+255),b
 14058  013078  0EFF               	movlw	high _PortG_Property
 14059  01307A  0100               	movlb	0	; () banked
 14060  01307C  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 14061                           
 14062                           ; BSR set to: 0
 14063  01307E  0012               	return	
 14064  013080                     l11342:
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;Port.c: 40: return (void*)0;
 14068  013080  0E00               	movlw	0
 14069  013082  0100               	movlb	0	; () banked
 14070  013084  6FC5               	movwf	?_GetPortProperties& (0+255),b
 14071  013086  0E00               	movlw	0
 14072  013088  0100               	movlb	0	; () banked
 14073  01308A  6FC6               	movwf	(?_GetPortProperties+1)& (0+255),b
 14074                           
 14075                           ; BSR set to: 0
 14076                           ;Port.c: 41: }
 14077                           
 14078                           ; BSR set to: 0
 14079  01308C  0012               	return	
 14080  01308E                     l11348:
 14081  01308E  0100               	movlb	0	; () banked
 14082  013090  51C7               	movf	GetPortProperties@pInput& (0+255),w,b
 14083                           
 14084                           ; Switch size 1, requested type "space"
 14085                           ; Number of cases is 7, Range of values is 0 to 6
 14086                           ; switch strategies available:
 14087                           ; Name         Instructions Cycles
 14088                           ; simple_byte           22    12 (average)
 14089                           ;	Chosen strategy is simple_byte
 14090  013092  0A00               	xorlw	0	; case 0
 14091  013094  B4D8               	btfsc	status,2,c
 14092  013096  D7C3               	goto	l11314
 14093  013098  0A01               	xorlw	1	; case 1
 14094  01309A  B4D8               	btfsc	status,2,c
 14095  01309C  D7C7               	goto	l11318
 14096  01309E  0A03               	xorlw	3	; case 2
 14097  0130A0  B4D8               	btfsc	status,2,c
 14098  0130A2  D7CB               	goto	l11322
 14099  0130A4  0A01               	xorlw	1	; case 3
 14100  0130A6  B4D8               	btfsc	status,2,c
 14101  0130A8  D7CF               	goto	l11326
 14102  0130AA  0A07               	xorlw	7	; case 4
 14103  0130AC  B4D8               	btfsc	status,2,c
 14104  0130AE  D7D3               	goto	l11330
 14105  0130B0  0A01               	xorlw	1	; case 5
 14106  0130B2  B4D8               	btfsc	status,2,c
 14107  0130B4  D7D7               	goto	l11334
 14108  0130B6  0A03               	xorlw	3	; case 6
 14109  0130B8  B4D8               	btfsc	status,2,c
 14110  0130BA  D7DB               	goto	l11338
 14111  0130BC  D7E1               	goto	l11342
 14112  0130BE                     __end_of_GetPortProperties:
 14113                           	opt stack 0
 14114                           tosu	equ	0xFFF
 14115                           tosh	equ	0xFFE
 14116                           tosl	equ	0xFFD
 14117                           pclath	equ	0xFFA
 14118                           tblptru	equ	0xFF8
 14119                           tblptrh	equ	0xFF7
 14120                           tblptrl	equ	0xFF6
 14121                           tablat	equ	0xFF5
 14122                           prodh	equ	0xFF4
 14123                           prodl	equ	0xFF3
 14124                           intcon	equ	0xFF2
 14125                           postinc0	equ	0xFEE
 14126                           wreg	equ	0xFE8
 14127                           indf1	equ	0xFE7
 14128                           postdec1	equ	0xFE5
 14129                           fsr1h	equ	0xFE2
 14130                           fsr1l	equ	0xFE1
 14131                           indf2	equ	0xFDF
 14132                           postinc2	equ	0xFDE
 14133                           postdec2	equ	0xFDD
 14134                           plusw2	equ	0xFDB
 14135                           fsr2h	equ	0xFDA
 14136                           fsr2l	equ	0xFD9
 14137                           status	equ	0xFD8
 14138                           
 14139 ;; *************** function _GetPortPORT *****************
 14140 ;; Defined at:
 14141 ;;		line 44 in file "Library/Port.c"
 14142 ;; Parameters:    Size  Location     Type
 14143 ;;  pInput          1    wreg     enum E6786
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;  pInput          1    2[BANK0 ] enum E6786
 14146 ;; Return value:  Size  Location     Type
 14147 ;;                  2    0[BANK0 ] PTR struct Byte
 14148 ;; Registers used:
 14149 ;;		wreg, status,2, status,0
 14150 ;; Tracked objects:
 14151 ;;		On entry : 0/0
 14152 ;;		On exit  : 0/0
 14153 ;;		Unchanged: 0/0
 14154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14155 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14158 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14159 ;;Total ram usage:        3 bytes
 14160 ;; Hardware stack levels used:    1
 14161 ;; Hardware stack levels required when called:    7
 14162 ;; This function calls:
 14163 ;;		Nothing
 14164 ;; This function is called by:
 14165 ;;		_Port_Init
 14166 ;; This function uses a non-reentrant model
 14167 ;;
 14168                           
 14169                           	psect	text75
 14170  0130BE                     __ptext75:
 14171                           	opt stack 0
 14172  0130BE                     _GetPortPORT:
 14173                           	opt stack 20
 14174                           
 14175                           ; BSR set to: 0
 14176                           ;incstack = 0
 14177                           ;GetPortPORT@pInput stored from wreg
 14178  0130BE  0100               	movlb	0	; () banked
 14179  0130C0  6FC7               	movwf	GetPortPORT@pInput& (0+255),b
 14180                           
 14181                           ;Port.c: 46: switch (pInput)
 14182  0130C2  D038               	goto	l11386
 14183  0130C4                     l11352:
 14184                           
 14185                           ;Port.c: 49: return (BytePtr)&PORTA;
 14186  0130C4  0E80               	movlw	128
 14187  0130C6  0100               	movlb	0	; () banked
 14188  0130C8  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14189  0130CA  0E0F               	movlw	15
 14190  0130CC  0100               	movlb	0	; () banked
 14191  0130CE  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14192                           
 14193                           ; BSR set to: 0
 14194  0130D0  0012               	return	
 14195  0130D2                     l11356:
 14196                           
 14197                           ; BSR set to: 0
 14198                           ;Port.c: 51: return (BytePtr)&PORTB;
 14199  0130D2  0E81               	movlw	129
 14200  0130D4  0100               	movlb	0	; () banked
 14201  0130D6  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14202  0130D8  0E0F               	movlw	15
 14203  0130DA  0100               	movlb	0	; () banked
 14204  0130DC  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14205                           
 14206                           ; BSR set to: 0
 14207  0130DE  0012               	return	
 14208  0130E0                     l11360:
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;Port.c: 53: return (BytePtr)&PORTC;
 14212  0130E0  0E82               	movlw	130
 14213  0130E2  0100               	movlb	0	; () banked
 14214  0130E4  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14215  0130E6  0E0F               	movlw	15
 14216  0130E8  0100               	movlb	0	; () banked
 14217  0130EA  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14218                           
 14219                           ; BSR set to: 0
 14220  0130EC  0012               	return	
 14221  0130EE                     l11364:
 14222                           
 14223                           ; BSR set to: 0
 14224                           ;Port.c: 55: return (BytePtr)&PORTD;
 14225  0130EE  0E83               	movlw	131
 14226  0130F0  0100               	movlb	0	; () banked
 14227  0130F2  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14228  0130F4  0E0F               	movlw	15
 14229  0130F6  0100               	movlb	0	; () banked
 14230  0130F8  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14231                           
 14232                           ; BSR set to: 0
 14233  0130FA  0012               	return	
 14234  0130FC                     l11368:
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;Port.c: 57: return (BytePtr)&PORTE;
 14238  0130FC  0E84               	movlw	132
 14239  0130FE  0100               	movlb	0	; () banked
 14240  013100  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14241  013102  0E0F               	movlw	15
 14242  013104  0100               	movlb	0	; () banked
 14243  013106  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14244                           
 14245                           ; BSR set to: 0
 14246  013108  0012               	return	
 14247  01310A                     l11372:
 14248                           
 14249                           ; BSR set to: 0
 14250                           ;Port.c: 59: return (BytePtr)&PORTF;
 14251  01310A  0E85               	movlw	133
 14252  01310C  0100               	movlb	0	; () banked
 14253  01310E  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14254  013110  0E0F               	movlw	15
 14255  013112  0100               	movlb	0	; () banked
 14256  013114  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14257                           
 14258                           ; BSR set to: 0
 14259  013116  0012               	return	
 14260  013118                     l11376:
 14261                           
 14262                           ; BSR set to: 0
 14263                           ;Port.c: 61: return (BytePtr)&PORTG;
 14264  013118  0E86               	movlw	134
 14265  01311A  0100               	movlb	0	; () banked
 14266  01311C  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14267  01311E  0E0F               	movlw	15
 14268  013120  0100               	movlb	0	; () banked
 14269  013122  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14270                           
 14271                           ; BSR set to: 0
 14272  013124  0012               	return	
 14273  013126                     l11380:
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;Port.c: 63: return (void*)0;
 14277  013126  0E00               	movlw	0
 14278  013128  0100               	movlb	0	; () banked
 14279  01312A  6FC5               	movwf	?_GetPortPORT& (0+255),b
 14280  01312C  0E00               	movlw	0
 14281  01312E  0100               	movlb	0	; () banked
 14282  013130  6FC6               	movwf	(?_GetPortPORT+1)& (0+255),b
 14283                           
 14284                           ; BSR set to: 0
 14285                           ;Port.c: 64: }
 14286                           
 14287                           ; BSR set to: 0
 14288  013132  0012               	return	
 14289  013134                     l11386:
 14290  013134  0100               	movlb	0	; () banked
 14291  013136  51C7               	movf	GetPortPORT@pInput& (0+255),w,b
 14292                           
 14293                           ; Switch size 1, requested type "space"
 14294                           ; Number of cases is 7, Range of values is 0 to 6
 14295                           ; switch strategies available:
 14296                           ; Name         Instructions Cycles
 14297                           ; simple_byte           22    12 (average)
 14298                           ;	Chosen strategy is simple_byte
 14299  013138  0A00               	xorlw	0	; case 0
 14300  01313A  B4D8               	btfsc	status,2,c
 14301  01313C  D7C3               	goto	l11352
 14302  01313E  0A01               	xorlw	1	; case 1
 14303  013140  B4D8               	btfsc	status,2,c
 14304  013142  D7C7               	goto	l11356
 14305  013144  0A03               	xorlw	3	; case 2
 14306  013146  B4D8               	btfsc	status,2,c
 14307  013148  D7CB               	goto	l11360
 14308  01314A  0A01               	xorlw	1	; case 3
 14309  01314C  B4D8               	btfsc	status,2,c
 14310  01314E  D7CF               	goto	l11364
 14311  013150  0A07               	xorlw	7	; case 4
 14312  013152  B4D8               	btfsc	status,2,c
 14313  013154  D7D3               	goto	l11368
 14314  013156  0A01               	xorlw	1	; case 5
 14315  013158  B4D8               	btfsc	status,2,c
 14316  01315A  D7D7               	goto	l11372
 14317  01315C  0A03               	xorlw	3	; case 6
 14318  01315E  B4D8               	btfsc	status,2,c
 14319  013160  D7DB               	goto	l11376
 14320  013162  D7E1               	goto	l11380
 14321  013164                     __end_of_GetPortPORT:
 14322                           	opt stack 0
 14323                           tosu	equ	0xFFF
 14324                           tosh	equ	0xFFE
 14325                           tosl	equ	0xFFD
 14326                           pclath	equ	0xFFA
 14327                           tblptru	equ	0xFF8
 14328                           tblptrh	equ	0xFF7
 14329                           tblptrl	equ	0xFF6
 14330                           tablat	equ	0xFF5
 14331                           prodh	equ	0xFF4
 14332                           prodl	equ	0xFF3
 14333                           intcon	equ	0xFF2
 14334                           postinc0	equ	0xFEE
 14335                           wreg	equ	0xFE8
 14336                           indf1	equ	0xFE7
 14337                           postdec1	equ	0xFE5
 14338                           fsr1h	equ	0xFE2
 14339                           fsr1l	equ	0xFE1
 14340                           indf2	equ	0xFDF
 14341                           postinc2	equ	0xFDE
 14342                           postdec2	equ	0xFDD
 14343                           plusw2	equ	0xFDB
 14344                           fsr2h	equ	0xFDA
 14345                           fsr2l	equ	0xFD9
 14346                           status	equ	0xFD8
 14347                           
 14348 ;; *************** function _LED_Init *****************
 14349 ;; Defined at:
 14350 ;;		line 15 in file "Library/LED.c"
 14351 ;; Parameters:    Size  Location     Type
 14352 ;;  pLED            1    wreg     enum E6739
 14353 ;; Auto vars:     Size  Location     Type
 14354 ;;  pLED            1   45[BANK0 ] enum E6739
 14355 ;; Return value:  Size  Location     Type
 14356 ;;                  1    wreg      void 
 14357 ;; Registers used:
 14358 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14359 ;; Tracked objects:
 14360 ;;		On entry : 0/0
 14361 ;;		On exit  : 0/0
 14362 ;;		Unchanged: 0/0
 14363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14368 ;;Total ram usage:        1 bytes
 14369 ;; Hardware stack levels used:    1
 14370 ;; Hardware stack levels required when called:   12
 14371 ;; This function calls:
 14372 ;;		_LED_Set
 14373 ;;		_Port_SetPinType
 14374 ;; This function is called by:
 14375 ;;		_MXK_Init
 14376 ;; This function uses a non-reentrant model
 14377 ;;
 14378                           
 14379                           	psect	text76
 14380  013D9E                     __ptext76:
 14381                           	opt stack 0
 14382  013D9E                     _LED_Init:
 14383                           	opt stack 16
 14384                           
 14385                           ; BSR set to: 0
 14386                           ;incstack = 0
 14387                           ;LED_Init@pLED stored from wreg
 14388  013D9E  0100               	movlb	0	; () banked
 14389  013DA0  6FF2               	movwf	LED_Init@pLED& (0+255),b
 14390                           
 14391                           ;LED.c: 17: switch (pLED)
 14392  013DA2  D01E               	goto	l11740
 14393  013DA4                     l11734:
 14394                           
 14395                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 14396  013DA4  0E92               	movlw	low _PortC
 14397  013DA6  0100               	movlb	0	; () banked
 14398  013DA8  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 14399  013DAA  0E00               	movlw	high _PortC
 14400  013DAC  0100               	movlb	0	; () banked
 14401  013DAE  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14402  013DB0  0E00               	movlw	0
 14403  013DB2  0100               	movlb	0	; () banked
 14404  013DB4  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 14405  013DB6  0E03               	movlw	3
 14406  013DB8  0100               	movlb	0	; () banked
 14407  013DBA  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 14408  013DBC  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 14409                           
 14410                           ;LED.c: 21: break;
 14411  013DC0  D017               	goto	l11742
 14412  013DC2                     l11736:
 14413                           
 14414                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 14415  013DC2  0E92               	movlw	low _PortC
 14416  013DC4  0100               	movlb	0	; () banked
 14417  013DC6  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 14418  013DC8  0E00               	movlw	high _PortC
 14419  013DCA  0100               	movlb	0	; () banked
 14420  013DCC  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14421  013DCE  0E01               	movlw	1
 14422  013DD0  0100               	movlb	0	; () banked
 14423  013DD2  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 14424  013DD4  0E03               	movlw	3
 14425  013DD6  0100               	movlb	0	; () banked
 14426  013DD8  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 14427  013DDA  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 14428                           
 14429                           ;LED.c: 25: }
 14430                           
 14431                           ;LED.c: 24: break;
 14432  013DDE  D008               	goto	l11742
 14433  013DE0                     l11740:
 14434  013DE0  0100               	movlb	0	; () banked
 14435  013DE2  51F2               	movf	LED_Init@pLED& (0+255),w,b
 14436                           
 14437                           ; Switch size 1, requested type "space"
 14438                           ; Number of cases is 2, Range of values is 0 to 1
 14439                           ; switch strategies available:
 14440                           ; Name         Instructions Cycles
 14441                           ; simple_byte            7     4 (average)
 14442                           ;	Chosen strategy is simple_byte
 14443  013DE4  0A00               	xorlw	0	; case 0
 14444  013DE6  B4D8               	btfsc	status,2,c
 14445  013DE8  D7DD               	goto	l11734
 14446  013DEA  0A01               	xorlw	1	; case 1
 14447  013DEC  B4D8               	btfsc	status,2,c
 14448  013DEE  D7E9               	goto	l11736
 14449  013DF0                     l11742:
 14450                           
 14451                           ;LED.c: 26: LED_Set(pLED, 0);
 14452  013DF0  0E00               	movlw	0
 14453  013DF2  0100               	movlb	0	; () banked
 14454  013DF4  6FD9               	movwf	LED_Set@pValue& (0+255),b
 14455  013DF6  0100               	movlb	0	; () banked
 14456  013DF8  51F2               	movf	LED_Init@pLED& (0+255),w,b
 14457  013DFA  EC06  F0A0         	call	_LED_Set
 14458  013DFE  0012               	return		;funcret
 14459  013E00                     __end_of_LED_Init:
 14460                           	opt stack 0
 14461                           tosu	equ	0xFFF
 14462                           tosh	equ	0xFFE
 14463                           tosl	equ	0xFFD
 14464                           pclath	equ	0xFFA
 14465                           tblptru	equ	0xFF8
 14466                           tblptrh	equ	0xFF7
 14467                           tblptrl	equ	0xFF6
 14468                           tablat	equ	0xFF5
 14469                           prodh	equ	0xFF4
 14470                           prodl	equ	0xFF3
 14471                           intcon	equ	0xFF2
 14472                           postinc0	equ	0xFEE
 14473                           wreg	equ	0xFE8
 14474                           indf1	equ	0xFE7
 14475                           postdec1	equ	0xFE5
 14476                           fsr1h	equ	0xFE2
 14477                           fsr1l	equ	0xFE1
 14478                           indf2	equ	0xFDF
 14479                           postinc2	equ	0xFDE
 14480                           postdec2	equ	0xFDD
 14481                           plusw2	equ	0xFDB
 14482                           fsr2h	equ	0xFDA
 14483                           fsr2l	equ	0xFD9
 14484                           status	equ	0xFD8
 14485                           
 14486 ;; *************** function _LED_Set *****************
 14487 ;; Defined at:
 14488 ;;		line 33 in file "Library/LED.c"
 14489 ;; Parameters:    Size  Location     Type
 14490 ;;  pLED            1    wreg     enum E6739
 14491 ;;  pValue          1   20[BANK0 ] unsigned char 
 14492 ;; Auto vars:     Size  Location     Type
 14493 ;;  pLED            1   21[BANK0 ] enum E6739
 14494 ;; Return value:  Size  Location     Type
 14495 ;;                  1    wreg      void 
 14496 ;; Registers used:
 14497 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14498 ;; Tracked objects:
 14499 ;;		On entry : 0/0
 14500 ;;		On exit  : 0/0
 14501 ;;		Unchanged: 0/0
 14502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14503 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14506 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14507 ;;Total ram usage:        2 bytes
 14508 ;; Hardware stack levels used:    1
 14509 ;; Hardware stack levels required when called:   11
 14510 ;; This function calls:
 14511 ;;		_Port_SetPin
 14512 ;; This function is called by:
 14513 ;;		_LED_Init
 14514 ;;		_SYSTEM_Initialize
 14515 ;; This function uses a non-reentrant model
 14516 ;;
 14517                           
 14518                           	psect	text77
 14519  01400C                     __ptext77:
 14520                           	opt stack 0
 14521  01400C                     _LED_Set:
 14522                           	opt stack 16
 14523                           
 14524                           ;incstack = 0
 14525                           ;LED_Set@pLED stored from wreg
 14526  01400C  0100               	movlb	0	; () banked
 14527  01400E  6FDA               	movwf	LED_Set@pLED& (0+255),b
 14528                           
 14529                           ;LED.c: 35: switch (pLED)
 14530  014010  D01C               	goto	l11310
 14531  014012                     l11304:
 14532                           
 14533                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 14534  014012  0E92               	movlw	low _PortC
 14535  014014  0100               	movlb	0	; () banked
 14536  014016  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 14537  014018  0E00               	movlw	high _PortC
 14538  01401A  0100               	movlb	0	; () banked
 14539  01401C  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14540  01401E  0E00               	movlw	0
 14541  014020  0100               	movlb	0	; () banked
 14542  014022  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 14543  014024  C0D9  F0D7         	movff	LED_Set@pValue,Port_SetPin@pValue
 14544  014028  EC80  F094         	call	_Port_SetPin	;wreg free
 14545                           
 14546                           ;LED.c: 39: break;
 14547  01402C  0012               	return	
 14548  01402E                     l11306:
 14549                           
 14550                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 14551  01402E  0E92               	movlw	low _PortC
 14552  014030  0100               	movlb	0	; () banked
 14553  014032  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 14554  014034  0E00               	movlw	high _PortC
 14555  014036  0100               	movlb	0	; () banked
 14556  014038  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14557  01403A  0E01               	movlw	1
 14558  01403C  0100               	movlb	0	; () banked
 14559  01403E  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 14560  014040  C0D9  F0D7         	movff	LED_Set@pValue,Port_SetPin@pValue
 14561  014044  EC80  F094         	call	_Port_SetPin	;wreg free
 14562                           
 14563                           ;LED.c: 43: }
 14564                           
 14565                           ;LED.c: 42: break;
 14566  014048  0012               	return	
 14567  01404A                     l11310:
 14568  01404A  0100               	movlb	0	; () banked
 14569  01404C  51DA               	movf	LED_Set@pLED& (0+255),w,b
 14570                           
 14571                           ; Switch size 1, requested type "space"
 14572                           ; Number of cases is 2, Range of values is 0 to 1
 14573                           ; switch strategies available:
 14574                           ; Name         Instructions Cycles
 14575                           ; simple_byte            7     4 (average)
 14576                           ;	Chosen strategy is simple_byte
 14577  01404E  0A00               	xorlw	0	; case 0
 14578  014050  B4D8               	btfsc	status,2,c
 14579  014052  D7DF               	goto	l11304
 14580  014054  0A01               	xorlw	1	; case 1
 14581  014056  A4D8               	btfss	status,2,c
 14582  014058  0012               	return	
 14583  01405A  D7E9               	goto	l11306
 14584  01405C                     __end_of_LED_Set:
 14585                           	opt stack 0
 14586                           tosu	equ	0xFFF
 14587                           tosh	equ	0xFFE
 14588                           tosl	equ	0xFFD
 14589                           pclath	equ	0xFFA
 14590                           tblptru	equ	0xFF8
 14591                           tblptrh	equ	0xFF7
 14592                           tblptrl	equ	0xFF6
 14593                           tablat	equ	0xFF5
 14594                           prodh	equ	0xFF4
 14595                           prodl	equ	0xFF3
 14596                           intcon	equ	0xFF2
 14597                           postinc0	equ	0xFEE
 14598                           wreg	equ	0xFE8
 14599                           indf1	equ	0xFE7
 14600                           postdec1	equ	0xFE5
 14601                           fsr1h	equ	0xFE2
 14602                           fsr1l	equ	0xFE1
 14603                           indf2	equ	0xFDF
 14604                           postinc2	equ	0xFDE
 14605                           postdec2	equ	0xFDD
 14606                           plusw2	equ	0xFDB
 14607                           fsr2h	equ	0xFDA
 14608                           fsr2l	equ	0xFD9
 14609                           status	equ	0xFD8
 14610                           
 14611 ;; *************** function _MXK_Dequeue *****************
 14612 ;; Defined at:
 14613 ;;		line 153 in file "Library/MXK.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;		None
 14616 ;; Auto vars:     Size  Location     Type
 14617 ;;		None
 14618 ;; Return value:  Size  Location     Type
 14619 ;;                  1    wreg      void 
 14620 ;; Registers used:
 14621 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14622 ;; Tracked objects:
 14623 ;;		On entry : 0/0
 14624 ;;		On exit  : 0/0
 14625 ;;		Unchanged: 0/0
 14626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14631 ;;Total ram usage:        0 bytes
 14632 ;; Hardware stack levels used:    1
 14633 ;; Hardware stack levels required when called:   12
 14634 ;; This function calls:
 14635 ;;		Absolute function
 14636 ;;		_Motor_Step
 14637 ;; This function is called by:
 14638 ;;		_initialise
 14639 ;;		_continuousMode
 14640 ;;		_main
 14641 ;; This function uses a non-reentrant model
 14642 ;;
 14643                           
 14644                           	psect	text78
 14645  0145DC                     __ptext78:
 14646                           	opt stack 0
 14647  0145DC                     _MXK_Dequeue:
 14648                           	opt stack 16
 14649                           
 14650                           ;MXK.c: 155: if (lQueue)
 14651                           
 14652                           ;incstack = 0
 14653  0145DC  5025               	movf	_lQueue,w,c	;volatile
 14654  0145DE  1026               	iorwf	_lQueue+1,w,c	;volatile
 14655  0145E0  1027               	iorwf	_lQueue+2,w,c	;volatile
 14656  0145E2  B4D8               	btfsc	status,2,c
 14657  0145E4  D00C               	goto	l13008
 14658                           
 14659                           ;MXK.c: 156: lQueue();
 14660  0145E6  D801               	call	u9838
 14661  0145E8  D00A               	goto	l13008
 14662  0145EA                     u9838:
 14663  0145EA  0005               	push	
 14664  0145EC  6EFA               	movwf	pclath,c
 14665  0145EE  5025               	movf	_lQueue,w,c	;volatile
 14666  0145F0  6EFD               	movwf	tosl,c
 14667  0145F2  5026               	movf	_lQueue+1,w,c	;volatile
 14668  0145F4  6EFE               	movwf	tosh,c
 14669  0145F6  5027               	movf	_lQueue+2,w,c	;volatile
 14670  0145F8  6EFF               	movwf	tosu,c
 14671  0145FA  50FA               	movf	pclath,w,c
 14672  0145FC  0012               	return		;indir
 14673  0145FE                     l13008:
 14674                           
 14675                           ;MXK.c: 157: lQueue = 0;
 14676  0145FE  0E00               	movlw	0
 14677  014600  6E25               	movwf	_lQueue,c	;volatile
 14678  014602  0E00               	movlw	0
 14679  014604  6E26               	movwf	_lQueue+1,c	;volatile
 14680  014606  0E00               	movlw	0
 14681  014608  6E27               	movwf	_lQueue+2,c	;volatile
 14682  01460A  0012               	return		;funcret
 14683  01460C                     __end_of_MXK_Dequeue:
 14684                           	opt stack 0
 14685                           tosu	equ	0xFFF
 14686                           tosh	equ	0xFFE
 14687                           tosl	equ	0xFFD
 14688                           pclath	equ	0xFFA
 14689                           tblptru	equ	0xFF8
 14690                           tblptrh	equ	0xFF7
 14691                           tblptrl	equ	0xFF6
 14692                           tablat	equ	0xFF5
 14693                           prodh	equ	0xFF4
 14694                           prodl	equ	0xFF3
 14695                           intcon	equ	0xFF2
 14696                           postinc0	equ	0xFEE
 14697                           wreg	equ	0xFE8
 14698                           indf1	equ	0xFE7
 14699                           postdec1	equ	0xFE5
 14700                           fsr1h	equ	0xFE2
 14701                           fsr1l	equ	0xFE1
 14702                           indf2	equ	0xFDF
 14703                           postinc2	equ	0xFDE
 14704                           postdec2	equ	0xFDD
 14705                           plusw2	equ	0xFDB
 14706                           fsr2h	equ	0xFDA
 14707                           fsr2l	equ	0xFD9
 14708                           status	equ	0xFD8
 14709                           
 14710 ;; *************** function _Motor_Step *****************
 14711 ;; Defined at:
 14712 ;;		line 75 in file "Library/Motor.c"
 14713 ;; Parameters:    Size  Location     Type
 14714 ;;		None
 14715 ;; Auto vars:     Size  Location     Type
 14716 ;;		None
 14717 ;; Return value:  Size  Location     Type
 14718 ;;                  1    wreg      void 
 14719 ;; Registers used:
 14720 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14721 ;; Tracked objects:
 14722 ;;		On entry : 0/0
 14723 ;;		On exit  : 0/0
 14724 ;;		Unchanged: 0/0
 14725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14726 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14727 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14728 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14729 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14730 ;;Total ram usage:        2 bytes
 14731 ;; Hardware stack levels used:    1
 14732 ;; Hardware stack levels required when called:   11
 14733 ;; This function calls:
 14734 ;;		_MXK_Queue
 14735 ;;		_MXK_Release
 14736 ;;		_MXK_SwitchTo
 14737 ;;		_Port_SetPin
 14738 ;;		_Timer0_Restart
 14739 ;;		_Timer0_Stop
 14740 ;; This function is called by:
 14741 ;;		_Motor_Init
 14742 ;;		_MXK_Dequeue
 14743 ;;		_Timer0_ISR
 14744 ;; This function uses a non-reentrant model
 14745 ;;
 14746                           
 14747                           	psect	text79
 14748  01238C                     __ptext79:
 14749                           	opt stack 0
 14750  01238C                     _Motor_Step:
 14751                           	opt stack 0
 14752                           
 14753                           ;Skip over the trampoline to the duplicate function for level 2
 14754  01238C  B249               	btfsc	btemp,1,c
 14755  01238E  EF58  F092         	goto	i2_Motor_Step
 14756  012392                     _Motor_Step$intlevel0:
 14757                           	opt stack 16
 14758                           
 14759                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 14760                           
 14761                           ;incstack = 0
 14762  012392  EE20 F004          	lfsr	2,4
 14763  012396  502A               	movf	_lMotor,w,c
 14764  012398  26D9               	addwf	fsr2l,f,c
 14765  01239A  502B               	movf	_lMotor+1,w,c
 14766  01239C  22DA               	addwfc	fsr2h,f,c
 14767  01239E  50DF               	movf	indf2,w,c
 14768  0123A0  EC78  F0A1         	call	_MXK_SwitchTo
 14769  0123A4  0900               	iorlw	0
 14770  0123A6  B4D8               	btfsc	status,2,c
 14771  0123A8  D07A               	goto	l11608
 14772                           
 14773                           ;Motor.c: 78: {
 14774                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 14775  0123AA  C02A  FFD9         	movff	_lMotor,fsr2l
 14776  0123AE  C02B  FFDA         	movff	_lMotor+1,fsr2h
 14777  0123B2  50DE               	movf	postinc2,w,c
 14778  0123B4  10DE               	iorwf	postinc2,w,c
 14779  0123B6  B4D8               	btfsc	status,2,c
 14780  0123B8  D06D               	goto	l11602
 14781                           
 14782                           ;Motor.c: 80: {
 14783                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 14784  0123BA  C02A  FFD9         	movff	_lMotor,fsr2l
 14785  0123BE  C02B  FFDA         	movff	_lMotor+1,fsr2h
 14786  0123C2  0E01               	movlw	1
 14787  0123C4  BEDB               	btfsc	plusw2,7,c
 14788  0123C6  D026               	goto	l11586
 14789  0123C8  0E01               	movlw	1
 14790  0123CA  50DB               	movf	plusw2,w,c
 14791  0123CC  E103               	bnz	u7990
 14792  0123CE  04DE               	decf	postinc2,w,c
 14793  0123D0  A0D8               	btfss	status,0,c
 14794  0123D2  D020               	goto	l11586
 14795  0123D4                     u7990:
 14796                           
 14797                           ;Motor.c: 83: {
 14798                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 14799  0123D4  C02A  FFD9         	movff	_lMotor,fsr2l
 14800  0123D8  C02B  FFDA         	movff	_lMotor+1,fsr2h
 14801  0123DC  28DE               	incf	postinc2,w,c
 14802  0123DE  E104               	bnz	u8000
 14803  0123E0  0E7F               	movlw	127
 14804  0123E2  18DE               	xorwf	postinc2,w,c
 14805  0123E4  B4D8               	btfsc	status,2,c
 14806  0123E6  D007               	goto	l11584
 14807  0123E8                     u8000:
 14808                           
 14809                           ;Motor.c: 85: lMotor->mDelta --;
 14810  0123E8  C02A  FFD9         	movff	_lMotor,fsr2l
 14811  0123EC  C02B  FFDA         	movff	_lMotor+1,fsr2h
 14812  0123F0  06DE               	decf	postinc2,f,c
 14813  0123F2  0E00               	movlw	0
 14814  0123F4  5ADD               	subwfb	postdec2,f,c
 14815  0123F6                     l11584:
 14816                           
 14817                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 14818  0123F6  0E7E               	movlw	low _PortE
 14819  0123F8  0100               	movlb	0	; () banked
 14820  0123FA  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 14821  0123FC  0E00               	movlw	high _PortE
 14822  0123FE  0100               	movlb	0	; () banked
 14823  012400  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14824  012402  0E00               	movlw	0
 14825  012404  0100               	movlb	0	; () banked
 14826  012406  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 14827  012408  0E01               	movlw	1
 14828  01240A  0100               	movlb	0	; () banked
 14829  01240C  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 14830  01240E  EC80  F094         	call	_Port_SetPin	;wreg free
 14831                           
 14832                           ;Motor.c: 88: }
 14833  012412  D01F               	goto	l11592
 14834  012414                     l11586:
 14835                           
 14836                           ;Motor.c: 89: else
 14837                           ;Motor.c: 90: {
 14838                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 14839  012414  C02A  FFD9         	movff	_lMotor,fsr2l
 14840  012418  C02B  FFDA         	movff	_lMotor+1,fsr2h
 14841  01241C  04DE               	decf	postinc2,w,c
 14842  01241E  E104               	bnz	u8010
 14843  012420  0E80               	movlw	128
 14844  012422  18DE               	xorwf	postinc2,w,c
 14845  012424  B4D8               	btfsc	status,2,c
 14846  012426  D007               	goto	l11590
 14847  012428                     u8010:
 14848                           
 14849                           ;Motor.c: 92: lMotor->mDelta ++;
 14850  012428  C02A  FFD9         	movff	_lMotor,fsr2l
 14851  01242C  C02B  FFDA         	movff	_lMotor+1,fsr2h
 14852  012430  2ADE               	incf	postinc2,f,c
 14853  012432  0E00               	movlw	0
 14854  012434  22DD               	addwfc	postdec2,f,c
 14855  012436                     l11590:
 14856                           
 14857                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 14858  012436  0E7E               	movlw	low _PortE
 14859  012438  0100               	movlb	0	; () banked
 14860  01243A  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 14861  01243C  0E00               	movlw	high _PortE
 14862  01243E  0100               	movlb	0	; () banked
 14863  012440  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14864  012442  0E00               	movlw	0
 14865  012444  0100               	movlb	0	; () banked
 14866  012446  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 14867  012448  0E00               	movlw	0
 14868  01244A  0100               	movlb	0	; () banked
 14869  01244C  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 14870  01244E  EC80  F094         	call	_Port_SetPin	;wreg free
 14871  012452                     l11592:
 14872                           
 14873                           ;Motor.c: 95: }
 14874                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 14875  012452  0E7E               	movlw	low _PortE
 14876  012454  0100               	movlb	0	; () banked
 14877  012456  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 14878  012458  0E00               	movlw	high _PortE
 14879  01245A  0100               	movlb	0	; () banked
 14880  01245C  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14881  01245E  0E01               	movlw	1
 14882  012460  0100               	movlb	0	; () banked
 14883  012462  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 14884  012464  0E01               	movlw	1
 14885  012466  0100               	movlb	0	; () banked
 14886  012468  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 14887  01246A  EC80  F094         	call	_Port_SetPin	;wreg free
 14888                           
 14889                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 14890  01246E  0E7E               	movlw	low _PortE
 14891  012470  0100               	movlb	0	; () banked
 14892  012472  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 14893  012474  0E00               	movlw	high _PortE
 14894  012476  0100               	movlb	0	; () banked
 14895  012478  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14896  01247A  0E01               	movlw	1
 14897  01247C  0100               	movlb	0	; () banked
 14898  01247E  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 14899  012480  0E00               	movlw	0
 14900  012482  0100               	movlb	0	; () banked
 14901  012484  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 14902  012486  EC80  F094         	call	_Port_SetPin	;wreg free
 14903                           
 14904                           ;Motor.c: 101: MXK_Release();
 14905  01248A  EC41  F0A5         	call	_MXK_Release	;wreg free
 14906                           
 14907                           ;Motor.c: 102: Timer0_Restart();
 14908  01248E  EC77  F0A5         	call	_Timer0_Restart	;wreg free
 14909                           
 14910                           ;Motor.c: 103: return;
 14911  012492  0012               	return	
 14912  012494                     l11602:
 14913                           
 14914                           ;Motor.c: 104: }
 14915                           ;Motor.c: 105: MXK_Release();
 14916  012494  EC41  F0A5         	call	_MXK_Release	;wreg free
 14917                           
 14918                           ;Motor.c: 106: Timer0_Stop();
 14919  012498  ECA6  F0A5         	call	_Timer0_Stop	;wreg free
 14920                           
 14921                           ;Motor.c: 107: return;
 14922  01249C  0012               	return	
 14923  01249E                     l11608:
 14924                           
 14925                           ;Motor.c: 108: }
 14926                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 14927  01249E  C06B  F0C5         	movff	_lStepFunction,MXK_Queue@pCallback
 14928  0124A2  C06C  F0C6         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 14929  0124A6  C06D  F0C7         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 14930  0124AA  EC63  F0A5         	call	_MXK_Queue	;wreg free
 14931  0124AE  0012               	return		;funcret
 14932  0124B0                     __end_of_Motor_Step:
 14933                           	opt stack 0
 14934                           tosu	equ	0xFFF
 14935                           tosh	equ	0xFFE
 14936                           tosl	equ	0xFFD
 14937                           pclath	equ	0xFFA
 14938                           tblptru	equ	0xFF8
 14939                           tblptrh	equ	0xFF7
 14940                           tblptrl	equ	0xFF6
 14941                           tablat	equ	0xFF5
 14942                           prodh	equ	0xFF4
 14943                           prodl	equ	0xFF3
 14944                           intcon	equ	0xFF2
 14945                           postinc0	equ	0xFEE
 14946                           wreg	equ	0xFE8
 14947                           indf1	equ	0xFE7
 14948                           postdec1	equ	0xFE5
 14949                           fsr1h	equ	0xFE2
 14950                           fsr1l	equ	0xFE1
 14951                           indf2	equ	0xFDF
 14952                           postinc2	equ	0xFDE
 14953                           postdec2	equ	0xFDD
 14954                           plusw2	equ	0xFDB
 14955                           fsr2h	equ	0xFDA
 14956                           fsr2l	equ	0xFD9
 14957                           status	equ	0xFD8
 14958                           
 14959 ;; *************** function _Timer0_Stop *****************
 14960 ;; Defined at:
 14961 ;;		line 89 in file "Library/Timer0.c"
 14962 ;; Parameters:    Size  Location     Type
 14963 ;;		None
 14964 ;; Auto vars:     Size  Location     Type
 14965 ;;		None
 14966 ;; Return value:  Size  Location     Type
 14967 ;;                  1    wreg      void 
 14968 ;; Registers used:
 14969 ;;		None
 14970 ;; Tracked objects:
 14971 ;;		On entry : 0/0
 14972 ;;		On exit  : 0/0
 14973 ;;		Unchanged: 0/0
 14974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14979 ;;Total ram usage:        0 bytes
 14980 ;; Hardware stack levels used:    1
 14981 ;; Hardware stack levels required when called:    7
 14982 ;; This function calls:
 14983 ;;		Nothing
 14984 ;; This function is called by:
 14985 ;;		_Motor_Step
 14986 ;; This function uses a non-reentrant model
 14987 ;;
 14988                           
 14989                           	psect	text80
 14990  014B4C                     __ptext80:
 14991                           	opt stack 0
 14992  014B4C                     _Timer0_Stop:
 14993                           	opt stack 19
 14994                           
 14995                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 14996                           
 14997                           ;incstack = 0
 14998  014B4C  9AF2               	bcf	intcon,5,c	;volatile
 14999                           
 15000                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 15001  014B4E  94F2               	bcf	intcon,2,c	;volatile
 15002  014B50  0012               	return		;funcret
 15003  014B52                     __end_of_Timer0_Stop:
 15004                           	opt stack 0
 15005                           tosu	equ	0xFFF
 15006                           tosh	equ	0xFFE
 15007                           tosl	equ	0xFFD
 15008                           pclath	equ	0xFFA
 15009                           tblptru	equ	0xFF8
 15010                           tblptrh	equ	0xFF7
 15011                           tblptrl	equ	0xFF6
 15012                           tablat	equ	0xFF5
 15013                           prodh	equ	0xFF4
 15014                           prodl	equ	0xFF3
 15015                           intcon	equ	0xFF2
 15016                           postinc0	equ	0xFEE
 15017                           wreg	equ	0xFE8
 15018                           indf1	equ	0xFE7
 15019                           postdec1	equ	0xFE5
 15020                           fsr1h	equ	0xFE2
 15021                           fsr1l	equ	0xFE1
 15022                           indf2	equ	0xFDF
 15023                           postinc2	equ	0xFDE
 15024                           postdec2	equ	0xFDD
 15025                           plusw2	equ	0xFDB
 15026                           fsr2h	equ	0xFDA
 15027                           fsr2l	equ	0xFD9
 15028                           status	equ	0xFD8
 15029                           
 15030 ;; *************** function _Timer0_Restart *****************
 15031 ;; Defined at:
 15032 ;;		line 83 in file "Library/Timer0.c"
 15033 ;; Parameters:    Size  Location     Type
 15034 ;;		None
 15035 ;; Auto vars:     Size  Location     Type
 15036 ;;		None
 15037 ;; Return value:  Size  Location     Type
 15038 ;;                  1    wreg      void 
 15039 ;; Registers used:
 15040 ;;		None
 15041 ;; Tracked objects:
 15042 ;;		On entry : 0/0
 15043 ;;		On exit  : 0/0
 15044 ;;		Unchanged: 0/0
 15045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15046 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15047 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15048 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15049 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15050 ;;Total ram usage:        0 bytes
 15051 ;; Hardware stack levels used:    1
 15052 ;; Hardware stack levels required when called:    7
 15053 ;; This function calls:
 15054 ;;		Nothing
 15055 ;; This function is called by:
 15056 ;;		_Motor_Step
 15057 ;; This function uses a non-reentrant model
 15058 ;;
 15059                           
 15060                           	psect	text81
 15061  014AEE                     __ptext81:
 15062                           	opt stack 0
 15063  014AEE                     _Timer0_Restart:
 15064                           	opt stack 19
 15065                           
 15066                           ;Timer0.c: 85: TMR0 = COUNTER;
 15067                           
 15068                           ;incstack = 0
 15069  014AEE  C028  FFD6         	movff	_COUNTER,4054	;volatile
 15070  014AF2  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 15071                           
 15072                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 15073  014AF6  8AF2               	bsf	intcon,5,c	;volatile
 15074  014AF8  0012               	return		;funcret
 15075  014AFA                     __end_of_Timer0_Restart:
 15076                           	opt stack 0
 15077                           tosu	equ	0xFFF
 15078                           tosh	equ	0xFFE
 15079                           tosl	equ	0xFFD
 15080                           pclath	equ	0xFFA
 15081                           tblptru	equ	0xFF8
 15082                           tblptrh	equ	0xFF7
 15083                           tblptrl	equ	0xFF6
 15084                           tablat	equ	0xFF5
 15085                           prodh	equ	0xFF4
 15086                           prodl	equ	0xFF3
 15087                           intcon	equ	0xFF2
 15088                           postinc0	equ	0xFEE
 15089                           wreg	equ	0xFE8
 15090                           indf1	equ	0xFE7
 15091                           postdec1	equ	0xFE5
 15092                           fsr1h	equ	0xFE2
 15093                           fsr1l	equ	0xFE1
 15094                           indf2	equ	0xFDF
 15095                           postinc2	equ	0xFDE
 15096                           postdec2	equ	0xFDD
 15097                           plusw2	equ	0xFDB
 15098                           fsr2h	equ	0xFDA
 15099                           fsr2l	equ	0xFD9
 15100                           status	equ	0xFD8
 15101                           
 15102 ;; *************** function _MXK_SwitchTo *****************
 15103 ;; Defined at:
 15104 ;;		line 105 in file "Library/MXK.c"
 15105 ;; Parameters:    Size  Location     Type
 15106 ;;  pModule         1    wreg     enum E6925
 15107 ;; Auto vars:     Size  Location     Type
 15108 ;;  pModule         1    7[BANK0 ] enum E6925
 15109 ;;  CUR             1    6[BANK0 ] unsigned char 
 15110 ;; Return value:  Size  Location     Type
 15111 ;;                  1    wreg      unsigned char 
 15112 ;; Registers used:
 15113 ;;		wreg, status,2, status,0, cstack
 15114 ;; Tracked objects:
 15115 ;;		On entry : 0/0
 15116 ;;		On exit  : 0/0
 15117 ;;		Unchanged: 0/0
 15118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15120 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15123 ;;Total ram usage:        2 bytes
 15124 ;; Hardware stack levels used:    1
 15125 ;; Hardware stack levels required when called:    8
 15126 ;; This function calls:
 15127 ;;		_delay_us
 15128 ;; This function is called by:
 15129 ;;		_Motor_Step
 15130 ;; This function uses a non-reentrant model
 15131 ;;
 15132                           
 15133                           	psect	text82
 15134  0142F0                     __ptext82:
 15135                           	opt stack 0
 15136  0142F0                     _MXK_SwitchTo:
 15137                           	opt stack 18
 15138                           
 15139                           ;incstack = 0
 15140                           ;MXK_SwitchTo@pModule stored from wreg
 15141  0142F0  0100               	movlb	0	; () banked
 15142  0142F2  6FCC               	movwf	MXK_SwitchTo@pModule& (0+255),b
 15143                           
 15144                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 15145  0142F4  5086               	movf	3974,w,c	;volatile
 15146  0142F6  0B0F               	andlw	15
 15147  0142F8  0100               	movlb	0	; () banked
 15148  0142FA  6FCB               	movwf	MXK_SwitchTo@CUR& (0+255),b
 15149                           
 15150                           ; BSR set to: 0
 15151                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 15152  0142FC  5043               	movf	_Bus_State,w,c
 15153  0142FE  A4D8               	btfss	status,2,c
 15154  014300  D002               	goto	l11096
 15155                           
 15156                           ; BSR set to: 0
 15157                           ;MXK.c: 110: return 0;
 15158  014302  0E00               	movlw	0
 15159                           
 15160                           ; BSR set to: 0
 15161  014304  0012               	return	
 15162  014306                     l11096:
 15163                           
 15164                           ; BSR set to: 0
 15165                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 15166  014306  0E00               	movlw	0
 15167  014308  6E43               	movwf	_Bus_State,c
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;MXK.c: 114: if (CUR != pModule)
 15171  01430A  0100               	movlb	0	; () banked
 15172  01430C  51CC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15173  01430E  0100               	movlb	0	; () banked
 15174  014310  19CB               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 15175  014312  B4D8               	btfsc	status,2,c
 15176  014314  D00C               	goto	l11104
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;MXK.c: 115: {
 15180                           ;MXK.c: 116: PORTG &= ~(0xF);
 15181  014316  0EF0               	movlw	240
 15182  014318  1686               	andwf	3974,f,c	;volatile
 15183                           
 15184                           ;MXK.c: 117: PORTG |= pModule;
 15185  01431A  0100               	movlb	0	; () banked
 15186  01431C  51CC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15187  01431E  1286               	iorwf	3974,f,c	;volatile
 15188                           
 15189                           ; BSR set to: 0
 15190                           ;MXK.c: 120: delay_us(10);
 15191  014320  0E00               	movlw	0
 15192  014322  0100               	movlb	0	; () banked
 15193  014324  6FC6               	movwf	(delay_us@us+1)& (0+255),b
 15194  014326  0E0A               	movlw	10
 15195  014328  6FC5               	movwf	delay_us@us& (0+255),b
 15196  01432A  ECB5  F09F         	call	_delay_us	;wreg free
 15197  01432E                     l11104:
 15198                           
 15199                           ;MXK.c: 121: }
 15200                           ;MXK.c: 122: return 1;
 15201  01432E  0E01               	movlw	1
 15202  014330  0012               	return	
 15203  014332                     __end_of_MXK_SwitchTo:
 15204                           	opt stack 0
 15205                           tosu	equ	0xFFF
 15206                           tosh	equ	0xFFE
 15207                           tosl	equ	0xFFD
 15208                           pclath	equ	0xFFA
 15209                           tblptru	equ	0xFF8
 15210                           tblptrh	equ	0xFF7
 15211                           tblptrl	equ	0xFF6
 15212                           tablat	equ	0xFF5
 15213                           prodh	equ	0xFF4
 15214                           prodl	equ	0xFF3
 15215                           intcon	equ	0xFF2
 15216                           postinc0	equ	0xFEE
 15217                           wreg	equ	0xFE8
 15218                           indf1	equ	0xFE7
 15219                           postdec1	equ	0xFE5
 15220                           fsr1h	equ	0xFE2
 15221                           fsr1l	equ	0xFE1
 15222                           indf2	equ	0xFDF
 15223                           postinc2	equ	0xFDE
 15224                           postdec2	equ	0xFDD
 15225                           plusw2	equ	0xFDB
 15226                           fsr2h	equ	0xFDA
 15227                           fsr2l	equ	0xFD9
 15228                           status	equ	0xFD8
 15229                           
 15230 ;; *************** function _MXK_Release *****************
 15231 ;; Defined at:
 15232 ;;		line 130 in file "Library/MXK.c"
 15233 ;; Parameters:    Size  Location     Type
 15234 ;;		None
 15235 ;; Auto vars:     Size  Location     Type
 15236 ;;		None
 15237 ;; Return value:  Size  Location     Type
 15238 ;;                  1    wreg      unsigned char 
 15239 ;; Registers used:
 15240 ;;		wreg, status,2, status,0
 15241 ;; Tracked objects:
 15242 ;;		On entry : 0/0
 15243 ;;		On exit  : 0/0
 15244 ;;		Unchanged: 0/0
 15245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15249 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15250 ;;Total ram usage:        0 bytes
 15251 ;; Hardware stack levels used:    1
 15252 ;; Hardware stack levels required when called:    7
 15253 ;; This function calls:
 15254 ;;		Nothing
 15255 ;; This function is called by:
 15256 ;;		_Motor_Step
 15257 ;;		_initialise
 15258 ;;		_continuousMode
 15259 ;;		_main
 15260 ;; This function uses a non-reentrant model
 15261 ;;
 15262                           
 15263                           	psect	text83
 15264  014A82                     __ptext83:
 15265                           	opt stack 0
 15266  014A82                     _MXK_Release:
 15267                           	opt stack 21
 15268                           
 15269                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 15270                           
 15271                           ;incstack = 0
 15272  014A82  0E01               	movlw	1
 15273  014A84  6E43               	movwf	_Bus_State,c
 15274                           
 15275                           ;MXK.c: 134: if (lQueue != 0)
 15276  014A86  5025               	movf	_lQueue,w,c	;volatile
 15277  014A88  1026               	iorwf	_lQueue+1,w,c	;volatile
 15278  014A8A  1027               	iorwf	_lQueue+2,w,c	;volatile
 15279  014A8C  B4D8               	btfsc	status,2,c
 15280  014A8E  D002               	goto	l11116
 15281                           
 15282                           ;MXK.c: 135: return 1;
 15283  014A90  0E01               	movlw	1
 15284  014A92  0012               	return	
 15285  014A94                     l11116:
 15286                           
 15287                           ;MXK.c: 137: return 0;
 15288  014A94  0E00               	movlw	0
 15289  014A96  0012               	return	
 15290  014A98                     __end_of_MXK_Release:
 15291                           	opt stack 0
 15292                           tosu	equ	0xFFF
 15293                           tosh	equ	0xFFE
 15294                           tosl	equ	0xFFD
 15295                           pclath	equ	0xFFA
 15296                           tblptru	equ	0xFF8
 15297                           tblptrh	equ	0xFF7
 15298                           tblptrl	equ	0xFF6
 15299                           tablat	equ	0xFF5
 15300                           prodh	equ	0xFF4
 15301                           prodl	equ	0xFF3
 15302                           intcon	equ	0xFF2
 15303                           postinc0	equ	0xFEE
 15304                           wreg	equ	0xFE8
 15305                           indf1	equ	0xFE7
 15306                           postdec1	equ	0xFE5
 15307                           fsr1h	equ	0xFE2
 15308                           fsr1l	equ	0xFE1
 15309                           indf2	equ	0xFDF
 15310                           postinc2	equ	0xFDE
 15311                           postdec2	equ	0xFDD
 15312                           plusw2	equ	0xFDB
 15313                           fsr2h	equ	0xFDA
 15314                           fsr2l	equ	0xFD9
 15315                           status	equ	0xFD8
 15316                           
 15317 ;; *************** function _MXK_Queue *****************
 15318 ;; Defined at:
 15319 ;;		line 144 in file "Library/MXK.c"
 15320 ;; Parameters:    Size  Location     Type
 15321 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 15322 ;;		 -> Absolute function(1), Motor_Step(1), 
 15323 ;; Auto vars:     Size  Location     Type
 15324 ;;		None
 15325 ;; Return value:  Size  Location     Type
 15326 ;;                  1    wreg      void 
 15327 ;; Registers used:
 15328 ;;		wreg, status,2, status,0
 15329 ;; Tracked objects:
 15330 ;;		On entry : 0/0
 15331 ;;		On exit  : 0/0
 15332 ;;		Unchanged: 0/0
 15333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15334 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15335 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15336 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15337 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15338 ;;Total ram usage:        3 bytes
 15339 ;; Hardware stack levels used:    1
 15340 ;; Hardware stack levels required when called:    7
 15341 ;; This function calls:
 15342 ;;		Nothing
 15343 ;; This function is called by:
 15344 ;;		_Motor_Step
 15345 ;; This function uses a non-reentrant model
 15346 ;;
 15347                           
 15348                           	psect	text84
 15349  014AC6                     __ptext84:
 15350                           	opt stack 0
 15351  014AC6                     _MXK_Queue:
 15352                           	opt stack 19
 15353                           
 15354                           ;MXK.c: 146: lQueue = pCallback;
 15355                           
 15356                           ;incstack = 0
 15357  014AC6  C0C5  F025         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 15358  014ACA  C0C6  F026         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 15359  014ACE  C0C7  F027         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 15360  014AD2  0012               	return		;funcret
 15361  014AD4                     __end_of_MXK_Queue:
 15362                           	opt stack 0
 15363                           tosu	equ	0xFFF
 15364                           tosh	equ	0xFFE
 15365                           tosl	equ	0xFFD
 15366                           pclath	equ	0xFFA
 15367                           tblptru	equ	0xFF8
 15368                           tblptrh	equ	0xFF7
 15369                           tblptrl	equ	0xFF6
 15370                           tablat	equ	0xFF5
 15371                           prodh	equ	0xFF4
 15372                           prodl	equ	0xFF3
 15373                           intcon	equ	0xFF2
 15374                           postinc0	equ	0xFEE
 15375                           wreg	equ	0xFE8
 15376                           indf1	equ	0xFE7
 15377                           postdec1	equ	0xFE5
 15378                           fsr1h	equ	0xFE2
 15379                           fsr1l	equ	0xFE1
 15380                           indf2	equ	0xFDF
 15381                           postinc2	equ	0xFDE
 15382                           postdec2	equ	0xFDD
 15383                           plusw2	equ	0xFDB
 15384                           fsr2h	equ	0xFDA
 15385                           fsr2l	equ	0xFD9
 15386                           status	equ	0xFD8
 15387                           
 15388 ;; *************** function _MXK_BlockSwitchTo *****************
 15389 ;; Defined at:
 15390 ;;		line 82 in file "Library/MXK.c"
 15391 ;; Parameters:    Size  Location     Type
 15392 ;;  pModule         1    wreg     enum E6925
 15393 ;; Auto vars:     Size  Location     Type
 15394 ;;  pModule         1    7[BANK0 ] enum E6925
 15395 ;;  CUR             1    6[BANK0 ] unsigned char 
 15396 ;; Return value:  Size  Location     Type
 15397 ;;                  1    wreg      unsigned char 
 15398 ;; Registers used:
 15399 ;;		wreg, status,2, status,0, cstack
 15400 ;; Tracked objects:
 15401 ;;		On entry : 0/0
 15402 ;;		On exit  : 0/0
 15403 ;;		Unchanged: 0/0
 15404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15406 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15409 ;;Total ram usage:        2 bytes
 15410 ;; Hardware stack levels used:    1
 15411 ;; Hardware stack levels required when called:    8
 15412 ;; This function calls:
 15413 ;;		_delay_us
 15414 ;; This function is called by:
 15415 ;;		_initialise
 15416 ;;		_continuousMode
 15417 ;;		_main
 15418 ;; This function uses a non-reentrant model
 15419 ;;
 15420                           
 15421                           	psect	text85
 15422  014372                     __ptext85:
 15423                           	opt stack 0
 15424  014372                     _MXK_BlockSwitchTo:
 15425                           	opt stack 20
 15426                           
 15427                           ;incstack = 0
 15428                           ;MXK_BlockSwitchTo@pModule stored from wreg
 15429  014372  0100               	movlb	0	; () banked
 15430  014374  6FCC               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 15431                           
 15432                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 15433  014376  5086               	movf	3974,w,c	;volatile
 15434  014378  0B0F               	andlw	15
 15435  01437A  0100               	movlb	0	; () banked
 15436  01437C  6FCB               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 15437  01437E                     l11802:
 15438  01437E  5043               	movf	_Bus_State,w,c
 15439  014380  B4D8               	btfsc	status,2,c
 15440  014382  D7FD               	goto	l11802
 15441                           
 15442                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 15443  014384  0E00               	movlw	0
 15444  014386  6E43               	movwf	_Bus_State,c
 15445                           
 15446                           ;MXK.c: 90: if (CUR != pModule)
 15447  014388  0100               	movlb	0	; () banked
 15448  01438A  51CC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15449  01438C  0100               	movlb	0	; () banked
 15450  01438E  19CB               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 15451  014390  B4D8               	btfsc	status,2,c
 15452  014392  D00C               	goto	l11812
 15453                           
 15454                           ; BSR set to: 0
 15455                           ;MXK.c: 91: {
 15456                           ;MXK.c: 92: PORTG &= ~(0xF);
 15457  014394  0EF0               	movlw	240
 15458  014396  1686               	andwf	3974,f,c	;volatile
 15459                           
 15460                           ;MXK.c: 93: PORTG |= pModule;
 15461  014398  0100               	movlb	0	; () banked
 15462  01439A  51CC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15463  01439C  1286               	iorwf	3974,f,c	;volatile
 15464                           
 15465                           ; BSR set to: 0
 15466                           ;MXK.c: 96: delay_us(10);
 15467  01439E  0E00               	movlw	0
 15468  0143A0  0100               	movlb	0	; () banked
 15469  0143A2  6FC6               	movwf	(delay_us@us+1)& (0+255),b
 15470  0143A4  0E0A               	movlw	10
 15471  0143A6  6FC5               	movwf	delay_us@us& (0+255),b
 15472  0143A8  ECB5  F09F         	call	_delay_us	;wreg free
 15473  0143AC                     l11812:
 15474                           
 15475                           ;MXK.c: 97: }
 15476                           ;MXK.c: 98: return 1;
 15477  0143AC  0E01               	movlw	1
 15478  0143AE  0012               	return	
 15479  0143B0                     __end_of_MXK_BlockSwitchTo:
 15480                           	opt stack 0
 15481                           tosu	equ	0xFFF
 15482                           tosh	equ	0xFFE
 15483                           tosl	equ	0xFFD
 15484                           pclath	equ	0xFFA
 15485                           tblptru	equ	0xFF8
 15486                           tblptrh	equ	0xFF7
 15487                           tblptrl	equ	0xFF6
 15488                           tablat	equ	0xFF5
 15489                           prodh	equ	0xFF4
 15490                           prodl	equ	0xFF3
 15491                           intcon	equ	0xFF2
 15492                           postinc0	equ	0xFEE
 15493                           wreg	equ	0xFE8
 15494                           indf1	equ	0xFE7
 15495                           postdec1	equ	0xFE5
 15496                           fsr1h	equ	0xFE2
 15497                           fsr1l	equ	0xFE1
 15498                           indf2	equ	0xFDF
 15499                           postinc2	equ	0xFDE
 15500                           postdec2	equ	0xFDD
 15501                           plusw2	equ	0xFDB
 15502                           fsr2h	equ	0xFDA
 15503                           fsr2l	equ	0xFD9
 15504                           status	equ	0xFD8
 15505                           
 15506 ;; *************** function _delay_us *****************
 15507 ;; Defined at:
 15508 ;;		line 255 in file "Library/Types.c"
 15509 ;; Parameters:    Size  Location     Type
 15510 ;;  us              2    0[BANK0 ] unsigned short 
 15511 ;; Auto vars:     Size  Location     Type
 15512 ;;  u               4    2[BANK0 ] unsigned long 
 15513 ;; Return value:  Size  Location     Type
 15514 ;;                  1    wreg      void 
 15515 ;; Registers used:
 15516 ;;		wreg, status,2, status,0
 15517 ;; Tracked objects:
 15518 ;;		On entry : 0/0
 15519 ;;		On exit  : 0/0
 15520 ;;		Unchanged: 0/0
 15521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15522 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15523 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15525 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15526 ;;Total ram usage:        6 bytes
 15527 ;; Hardware stack levels used:    1
 15528 ;; Hardware stack levels required when called:    7
 15529 ;; This function calls:
 15530 ;;		Nothing
 15531 ;; This function is called by:
 15532 ;;		_MXK_BlockSwitchTo
 15533 ;;		_MXK_SwitchTo
 15534 ;; This function uses a non-reentrant model
 15535 ;;
 15536                           
 15537                           	psect	text86
 15538  013F6A                     __ptext86:
 15539                           	opt stack 0
 15540  013F6A                     _delay_us:
 15541                           	opt stack 18
 15542                           
 15543                           ;Types.c: 256: unsigned long u;
 15544                           ;Types.c: 257: while (us--) {
 15545                           
 15546                           ;incstack = 0
 15547  013F6A  D01C               	goto	l10826
 15548  013F6C                     l10818:
 15549                           
 15550                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 15551  013F6C  0E00               	movlw	0
 15552  013F6E  0100               	movlb	0	; () banked
 15553  013F70  6FC7               	movwf	delay_us@u& (0+255),b
 15554  013F72  0E00               	movlw	0
 15555  013F74  6FC8               	movwf	(delay_us@u+1)& (0+255),b
 15556  013F76  0E00               	movlw	0
 15557  013F78  6FC9               	movwf	(delay_us@u+2)& (0+255),b
 15558  013F7A  0E00               	movlw	0
 15559  013F7C  6FCA               	movwf	(delay_us@u+3)& (0+255),b
 15560  013F7E                     l10820:
 15561                           
 15562                           ; BSR set to: 0
 15563  013F7E  0100               	movlb	0	; () banked
 15564  013F80  51C7               	movf	delay_us@u& (0+255),w,b
 15565  013F82  0100               	movlb	0	; () banked
 15566  013F84  11C8               	iorwf	(delay_us@u+1)& (0+255),w,b
 15567  013F86  0100               	movlb	0	; () banked
 15568  013F88  11C9               	iorwf	(delay_us@u+2)& (0+255),w,b
 15569  013F8A  0100               	movlb	0	; () banked
 15570  013F8C  11CA               	iorwf	(delay_us@u+3)& (0+255),w,b
 15571  013F8E  A4D8               	btfss	status,2,c
 15572  013F90  D009               	goto	l10826
 15573                           
 15574                           ; BSR set to: 0
 15575                           
 15576                           ; BSR set to: 0
 15577  013F92  F000               	nop		; ;# 
 15578  013F94  0E01               	movlw	1
 15579  013F96  0100               	movlb	0	; () banked
 15580  013F98  27C7               	addwf	delay_us@u& (0+255),f,b
 15581  013F9A  0E00               	movlw	0
 15582  013F9C  23C8               	addwfc	(delay_us@u+1)& (0+255),f,b
 15583  013F9E  23C9               	addwfc	(delay_us@u+2)& (0+255),f,b
 15584  013FA0  23CA               	addwfc	(delay_us@u+3)& (0+255),f,b
 15585  013FA2  D7ED               	goto	l10820
 15586  013FA4                     l10826:
 15587  013FA4  0100               	movlb	0	; () banked
 15588  013FA6  07C5               	decf	delay_us@us& (0+255),f,b
 15589  013FA8  A0D8               	btfss	status,0,c
 15590  013FAA  07C6               	decf	(delay_us@us+1)& (0+255),f,b
 15591  013FAC  0100               	movlb	0	; () banked
 15592  013FAE  29C5               	incf	delay_us@us& (0+255),w,b
 15593  013FB0  E1DD               	bnz	l10818
 15594  013FB2  0100               	movlb	0	; () banked
 15595  013FB4  29C6               	incf	(delay_us@us+1)& (0+255),w,b
 15596  013FB6  B4D8               	btfsc	status,2,c
 15597  013FB8  0012               	return	
 15598  013FBA  D7D8               	goto	l10818
 15599  013FBC                     __end_of_delay_us:
 15600                           	opt stack 0
 15601                           tosu	equ	0xFFF
 15602                           tosh	equ	0xFFE
 15603                           tosl	equ	0xFFD
 15604                           pclath	equ	0xFFA
 15605                           tblptru	equ	0xFF8
 15606                           tblptrh	equ	0xFF7
 15607                           tblptrl	equ	0xFF6
 15608                           tablat	equ	0xFF5
 15609                           prodh	equ	0xFF4
 15610                           prodl	equ	0xFF3
 15611                           intcon	equ	0xFF2
 15612                           postinc0	equ	0xFEE
 15613                           wreg	equ	0xFE8
 15614                           indf1	equ	0xFE7
 15615                           postdec1	equ	0xFE5
 15616                           fsr1h	equ	0xFE2
 15617                           fsr1l	equ	0xFE1
 15618                           indf2	equ	0xFDF
 15619                           postinc2	equ	0xFDE
 15620                           postdec2	equ	0xFDD
 15621                           plusw2	equ	0xFDB
 15622                           fsr2h	equ	0xFDA
 15623                           fsr2l	equ	0xFD9
 15624                           status	equ	0xFD8
 15625                           
 15626 ;; *************** function _LCD_Init *****************
 15627 ;; Defined at:
 15628 ;;		line 172 in file "Library/LCD.c"
 15629 ;; Parameters:    Size  Location     Type
 15630 ;;		None
 15631 ;; Auto vars:     Size  Location     Type
 15632 ;;  i               2    4[BANK1 ] unsigned short 
 15633 ;; Return value:  Size  Location     Type
 15634 ;;                  1    wreg      void 
 15635 ;; Registers used:
 15636 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15637 ;; Tracked objects:
 15638 ;;		On entry : 0/0
 15639 ;;		On exit  : 0/0
 15640 ;;		Unchanged: 0/0
 15641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15643 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15644 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15645 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15646 ;;Total ram usage:        4 bytes
 15647 ;; Hardware stack levels used:    1
 15648 ;; Hardware stack levels required when called:   15
 15649 ;; This function calls:
 15650 ;;		_Configure_GPIOs
 15651 ;;		_LCD_Fill
 15652 ;;		_LCD_Write
 15653 ;;		_Set_Rotation
 15654 ;;		_delay_ms
 15655 ;; This function is called by:
 15656 ;;		_initialise
 15657 ;; This function uses a non-reentrant model
 15658 ;;
 15659                           
 15660                           	psect	text87
 15661  011E0E                     __ptext87:
 15662                           	opt stack 0
 15663  011E0E                     _LCD_Init:
 15664                           	opt stack 14
 15665                           
 15666                           ;LCD.c: 174: UINT16 i;
 15667                           ;LCD.c: 175: Configure_GPIOs();
 15668                           
 15669                           ; BSR set to: 0
 15670                           ;incstack = 0
 15671  011E0E  EC2C  F09D         	call	_Configure_GPIOs	;wreg free
 15672                           
 15673                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 15674  011E12  0E00               	movlw	0
 15675  011E14  0101               	movlb	1	; () banked
 15676  011E16  6FBB               	movwf	(LCD_Init@i+1)& (0+255),b
 15677  011E18  0E00               	movlw	0
 15678  011E1A  6FBA               	movwf	LCD_Init@i& (0+255),b
 15679                           
 15680                           ; BSR set to: 1
 15681  011E1C  0101               	movlb	1	; () banked
 15682  011E1E  51BB               	movf	(LCD_Init@i+1)& (0+255),w,b
 15683  011E20  E106               	bnz	u8190
 15684  011E22  0E59               	movlw	89
 15685  011E24  0101               	movlb	1	; () banked
 15686  011E26  5DBA               	subwf	LCD_Init@i& (0+255),w,b
 15687  011E28  B0D8               	btfsc	status,0,c
 15688  011E2A  D08B               	goto	l11852
 15689  011E2C  D001               	goto	l11836
 15690  011E2E                     u8190:
 15691                           
 15692                           ; BSR set to: 1
 15693  011E2E  D089               	goto	l11852
 15694  011E30                     l11836:
 15695                           
 15696                           ; BSR set to: 1
 15697                           ;LCD.c: 178: {
 15698                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 15699  011E30  90D8               	bcf	status,0,c
 15700  011E32  0101               	movlb	1	; () banked
 15701  011E34  35BA               	rlcf	LCD_Init@i& (0+255),w,b
 15702  011E36  6EF6               	movwf	tblptrl,c
 15703  011E38  0101               	movlb	1	; () banked
 15704  011E3A  35BB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15705  011E3C  6EF7               	movwf	tblptrh,c
 15706  011E3E  0E71               	movlw	low _InitList
 15707  011E40  26F6               	addwf	tblptrl,f,c
 15708  011E42  0EFC               	movlw	high _InitList
 15709  011E44  22F7               	addwfc	tblptrh,f,c
 15710  011E46                     	if	1	;There are 3 active tblptr bytes
 15711  011E46  6AF8               	clrf	tblptru,c
 15712  011E48  0E00               	movlw	low (__mediumconst shr (0+16))
 15713  011E4A  22F8               	addwfc	tblptru,f,c
 15714  011E4C                     	endif
 15715  011E4C  0009               	tblrd		*+
 15716  011E4E  0E80               	movlw	128
 15717  011E50  18F5               	xorwf	tablat,w,c
 15718  011E52  0009               	tblrd		*+
 15719  011E54  10F5               	iorwf	tablat,w,c
 15720  011E56  A4D8               	btfss	status,2,c
 15721  011E58  D022               	goto	l11842
 15722                           
 15723                           ; BSR set to: 1
 15724  011E5A  0101               	movlb	1	; () banked
 15725  011E5C  51BB               	movf	(LCD_Init@i+1)& (0+255),w,b
 15726  011E5E  E11F               	bnz	l11842
 15727  011E60  0E58               	movlw	88
 15728  011E62  0101               	movlb	1	; () banked
 15729  011E64  5DBA               	subwf	LCD_Init@i& (0+255),w,b
 15730  011E66  B0D8               	btfsc	status,0,c
 15731  011E68  D01A               	goto	l11842
 15732                           
 15733                           ; BSR set to: 1
 15734                           ;LCD.c: 180: delay_ms(InitList[++i]);
 15735  011E6A  0101               	movlb	1	; () banked
 15736  011E6C  4BBA               	infsnz	LCD_Init@i& (0+255),f,b
 15737  011E6E  2BBB               	incf	(LCD_Init@i+1)& (0+255),f,b
 15738  011E70  90D8               	bcf	status,0,c
 15739  011E72  0101               	movlb	1	; () banked
 15740  011E74  35BA               	rlcf	LCD_Init@i& (0+255),w,b
 15741  011E76  6EF6               	movwf	tblptrl,c
 15742  011E78  0101               	movlb	1	; () banked
 15743  011E7A  35BB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15744  011E7C  6EF7               	movwf	tblptrh,c
 15745  011E7E  0E71               	movlw	low _InitList
 15746  011E80  26F6               	addwf	tblptrl,f,c
 15747  011E82  0EFC               	movlw	high _InitList
 15748  011E84  22F7               	addwfc	tblptrh,f,c
 15749  011E86                     	if	1	;There are 3 active tblptr bytes
 15750  011E86  6AF8               	clrf	tblptru,c
 15751  011E88  0E00               	movlw	low (__mediumconst shr (0+16))
 15752  011E8A  22F8               	addwfc	tblptru,f,c
 15753  011E8C                     	endif
 15754  011E8C  0009               	tblrd		*+
 15755  011E8E  CFF5 F0C5          	movff	tablat,delay_ms@ms
 15756  011E92  000A               	tblrd		*-
 15757  011E94  CFF5 F0C6          	movff	tablat,delay_ms@ms+1
 15758  011E98  ECD0  F09D         	call	_delay_ms	;wreg free
 15759  011E9C  D04B               	goto	l11848
 15760  011E9E                     l11842:
 15761                           
 15762                           ;LCD.c: 181: else
 15763                           ;LCD.c: 182: {
 15764                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 15765  011E9E  90D8               	bcf	status,0,c
 15766  011EA0  0101               	movlb	1	; () banked
 15767  011EA2  35BA               	rlcf	LCD_Init@i& (0+255),w,b
 15768  011EA4  6EF6               	movwf	tblptrl,c
 15769  011EA6  0101               	movlb	1	; () banked
 15770  011EA8  35BB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15771  011EAA  6EF7               	movwf	tblptrh,c
 15772  011EAC  0E71               	movlw	low _InitList
 15773  011EAE  26F6               	addwf	tblptrl,f,c
 15774  011EB0  0EFC               	movlw	high _InitList
 15775  011EB2  22F7               	addwfc	tblptrh,f,c
 15776  011EB4                     	if	1	;There are 3 active tblptr bytes
 15777  011EB4  6AF8               	clrf	tblptru,c
 15778  011EB6  0E00               	movlw	low (__mediumconst shr (0+16))
 15779  011EB8  22F8               	addwfc	tblptru,f,c
 15780  011EBA                     	endif
 15781  011EBA  0009               	tblrd		*+
 15782  011EBC  0E00               	movlw	0
 15783  011EBE  5EF5               	subwf	tablat,f,c
 15784  011EC0  0009               	tblrd		*+
 15785  011EC2  0E01               	movlw	1
 15786  011EC4  5AF5               	subwfb	tablat,f,c
 15787  011EC6  A0D8               	btfss	status,0,c
 15788  011EC8  D020               	goto	l11846
 15789                           
 15790                           ; BSR set to: 1
 15791  011ECA  0E00               	movlw	0
 15792  011ECC  0100               	movlb	0	; () banked
 15793  011ECE  6FC8               	movwf	LCD_Write@mode& (0+255),b
 15794  011ED0  90D8               	bcf	status,0,c
 15795  011ED2  0101               	movlb	1	; () banked
 15796  011ED4  35BA               	rlcf	LCD_Init@i& (0+255),w,b
 15797  011ED6  6EF6               	movwf	tblptrl,c
 15798  011ED8  0101               	movlb	1	; () banked
 15799  011EDA  35BB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15800  011EDC  6EF7               	movwf	tblptrh,c
 15801  011EDE  0E71               	movlw	low _InitList
 15802  011EE0  26F6               	addwf	tblptrl,f,c
 15803  011EE2  0EFC               	movlw	high _InitList
 15804  011EE4  22F7               	addwfc	tblptrh,f,c
 15805  011EE6                     	if	1	;There are 3 active tblptr bytes
 15806  011EE6  6AF8               	clrf	tblptru,c
 15807  011EE8  0E00               	movlw	low (__mediumconst shr (0+16))
 15808  011EEA  22F8               	addwfc	tblptru,f,c
 15809  011EEC                     	endif
 15810  011EEC  0009               	tblrd		*+
 15811  011EEE  CFF5 F1B8          	movff	tablat,??_LCD_Init
 15812  011EF2  0009               	tblrd		*+
 15813  011EF4  CFF5 F1B9          	movff	tablat,??_LCD_Init+1
 15814  011EF8  C1B9  F1B8         	movff	??_LCD_Init+1,??_LCD_Init
 15815  011EFC  0101               	movlb	1	; () banked
 15816  011EFE  6BB9               	clrf	(??_LCD_Init+1)& (0+255),b
 15817  011F00  0101               	movlb	1	; () banked
 15818  011F02  51B8               	movf	??_LCD_Init& (0+255),w,b
 15819  011F04  EC0A  F0A4         	call	_LCD_Write
 15820  011F08  D015               	goto	l11848
 15821  011F0A                     l11846:
 15822                           
 15823                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 15824  011F0A  0E01               	movlw	1
 15825  011F0C  0100               	movlb	0	; () banked
 15826  011F0E  6FC8               	movwf	LCD_Write@mode& (0+255),b
 15827  011F10  90D8               	bcf	status,0,c
 15828  011F12  0101               	movlb	1	; () banked
 15829  011F14  35BA               	rlcf	LCD_Init@i& (0+255),w,b
 15830  011F16  6EF6               	movwf	tblptrl,c
 15831  011F18  0101               	movlb	1	; () banked
 15832  011F1A  35BB               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 15833  011F1C  6EF7               	movwf	tblptrh,c
 15834  011F1E  0E71               	movlw	low _InitList
 15835  011F20  26F6               	addwf	tblptrl,f,c
 15836  011F22  0EFC               	movlw	high _InitList
 15837  011F24  22F7               	addwfc	tblptrh,f,c
 15838  011F26                     	if	1	;There are 3 active tblptr bytes
 15839  011F26  6AF8               	clrf	tblptru,c
 15840  011F28  0E00               	movlw	low (__mediumconst shr (0+16))
 15841  011F2A  22F8               	addwfc	tblptru,f,c
 15842  011F2C                     	endif
 15843  011F2C  0008               	tblrd		*
 15844  011F2E  50F5               	movf	tablat,w,c
 15845  011F30  EC0A  F0A4         	call	_LCD_Write
 15846  011F34                     l11848:
 15847  011F34  0101               	movlb	1	; () banked
 15848  011F36  4BBA               	infsnz	LCD_Init@i& (0+255),f,b
 15849  011F38  2BBB               	incf	(LCD_Init@i+1)& (0+255),f,b
 15850                           
 15851                           ; BSR set to: 1
 15852  011F3A  0101               	movlb	1	; () banked
 15853  011F3C  51BB               	movf	(LCD_Init@i+1)& (0+255),w,b
 15854  011F3E  E101               	bnz	l11852
 15855  011F40  D770               	goto	L6
 15856  011F42                     l11852:
 15857                           
 15858                           ; BSR set to: 1
 15859                           ;LCD.c: 185: }
 15860                           ;LCD.c: 186: }
 15861                           ;LCD.c: 187: delay_ms(100);
 15862  011F42  0E00               	movlw	0
 15863  011F44  0100               	movlb	0	; () banked
 15864  011F46  6FC6               	movwf	(delay_ms@ms+1)& (0+255),b
 15865  011F48  0E64               	movlw	100
 15866  011F4A  6FC5               	movwf	delay_ms@ms& (0+255),b
 15867  011F4C  ECD0  F09D         	call	_delay_ms	;wreg free
 15868                           
 15869                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 15870  011F50  0E00               	movlw	0
 15871  011F52  0100               	movlb	0	; () banked
 15872  011F54  6FC8               	movwf	LCD_Write@mode& (0+255),b
 15873  011F56  0E29               	movlw	41
 15874  011F58  EC0A  F0A4         	call	_LCD_Write
 15875                           
 15876                           ;LCD.c: 189: Set_Rotation(1);
 15877  011F5C  0E01               	movlw	1
 15878  011F5E  EC9F  F099         	call	_Set_Rotation
 15879                           
 15880                           ;LCD.c: 191: delay_ms(100);
 15881  011F62  0E00               	movlw	0
 15882  011F64  0100               	movlb	0	; () banked
 15883  011F66  6FC6               	movwf	(delay_ms@ms+1)& (0+255),b
 15884  011F68  0E64               	movlw	100
 15885  011F6A  6FC5               	movwf	delay_ms@ms& (0+255),b
 15886  011F6C  ECD0  F09D         	call	_delay_ms	;wreg free
 15887                           
 15888                           ;LCD.c: 192: LCD_Fill(0x0000);
 15889  011F70  0E00               	movlw	0
 15890  011F72  0100               	movlb	0	; () banked
 15891  011F74  6FCF               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 15892  011F76  0E00               	movlw	0
 15893  011F78  6FCE               	movwf	LCD_Fill@pColour& (0+255),b
 15894  011F7A  EC89  F09F         	call	_LCD_Fill	;wreg free
 15895  011F7E  0012               	return		;funcret
 15896  011F80                     __end_of_LCD_Init:
 15897                           	opt stack 0
 15898                           tosu	equ	0xFFF
 15899                           tosh	equ	0xFFE
 15900                           tosl	equ	0xFFD
 15901                           pclath	equ	0xFFA
 15902                           tblptru	equ	0xFF8
 15903                           tblptrh	equ	0xFF7
 15904                           tblptrl	equ	0xFF6
 15905                           tablat	equ	0xFF5
 15906                           prodh	equ	0xFF4
 15907                           prodl	equ	0xFF3
 15908                           intcon	equ	0xFF2
 15909                           postinc0	equ	0xFEE
 15910                           wreg	equ	0xFE8
 15911                           indf1	equ	0xFE7
 15912                           postdec1	equ	0xFE5
 15913                           fsr1h	equ	0xFE2
 15914                           fsr1l	equ	0xFE1
 15915                           indf2	equ	0xFDF
 15916                           postinc2	equ	0xFDE
 15917                           postdec2	equ	0xFDD
 15918                           plusw2	equ	0xFDB
 15919                           fsr2h	equ	0xFDA
 15920                           fsr2l	equ	0xFD9
 15921                           status	equ	0xFD8
 15922                           
 15923 ;; *************** function _Set_Rotation *****************
 15924 ;; Defined at:
 15925 ;;		line 248 in file "Library/LCD.c"
 15926 ;; Parameters:    Size  Location     Type
 15927 ;;  m               1    wreg     unsigned char 
 15928 ;; Auto vars:     Size  Location     Type
 15929 ;;  m               1    5[BANK0 ] unsigned char 
 15930 ;;  rotation        1    6[BANK0 ] unsigned char 
 15931 ;; Return value:  Size  Location     Type
 15932 ;;                  1    wreg      void 
 15933 ;; Registers used:
 15934 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15935 ;; Tracked objects:
 15936 ;;		On entry : 0/0
 15937 ;;		On exit  : 0/0
 15938 ;;		Unchanged: 0/0
 15939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15941 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15943 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15944 ;;Total ram usage:        2 bytes
 15945 ;; Hardware stack levels used:    1
 15946 ;; Hardware stack levels required when called:    9
 15947 ;; This function calls:
 15948 ;;		_LCD_Write
 15949 ;; This function is called by:
 15950 ;;		_LCD_Init
 15951 ;; This function uses a non-reentrant model
 15952 ;;
 15953                           
 15954                           	psect	text88
 15955  01333E                     __ptext88:
 15956                           	opt stack 0
 15957  01333E                     _Set_Rotation:
 15958                           	opt stack 19
 15959                           
 15960                           ;incstack = 0
 15961                           ;Set_Rotation@m stored from wreg
 15962  01333E  0100               	movlb	0	; () banked
 15963  013340  6FCA               	movwf	Set_Rotation@m& (0+255),b
 15964                           
 15965                           ;LCD.c: 250: UINT8 rotation = 0x00;
 15966  013342  0E00               	movlw	0
 15967  013344  0100               	movlb	0	; () banked
 15968  013346  6FCB               	movwf	Set_Rotation@rotation& (0+255),b
 15969                           
 15970                           ; BSR set to: 0
 15971                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 15972  013348  0E00               	movlw	0
 15973  01334A  0100               	movlb	0	; () banked
 15974  01334C  6FC8               	movwf	LCD_Write@mode& (0+255),b
 15975  01334E  0E36               	movlw	54
 15976  013350  EC0A  F0A4         	call	_LCD_Write
 15977                           
 15978                           ;LCD.c: 253: rotation = (m % 4);
 15979  013354  0100               	movlb	0	; () banked
 15980  013356  51CA               	movf	Set_Rotation@m& (0+255),w,b
 15981  013358  0B03               	andlw	3
 15982  01335A  0100               	movlb	0	; () banked
 15983  01335C  6FCB               	movwf	Set_Rotation@rotation& (0+255),b
 15984                           
 15985                           ;LCD.c: 255: switch(rotation)
 15986  01335E  D02C               	goto	l11706
 15987  013360                     l11680:
 15988                           
 15989                           ; BSR set to: 0
 15990                           ;LCD.c: 258: {
 15991                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 15992  013360  0E01               	movlw	1
 15993  013362  0100               	movlb	0	; () banked
 15994  013364  6FC8               	movwf	LCD_Write@mode& (0+255),b
 15995  013366  0EC8               	movlw	200
 15996  013368  EC0A  F0A4         	call	_LCD_Write
 15997                           
 15998                           ;LCD.c: 260: w = 128;
 15999  01336C  0E80               	movlw	128
 16000  01336E  6E48               	movwf	_w,c
 16001                           
 16002                           ;LCD.c: 261: l = 128;
 16003  013370  0E80               	movlw	128
 16004  013372  6E47               	movwf	_l,c
 16005                           
 16006                           ;LCD.c: 262: break;
 16007  013374  0012               	return	
 16008  013376                     l11686:
 16009                           
 16010                           ;LCD.c: 265: {
 16011                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 16012  013376  0E01               	movlw	1
 16013  013378  0100               	movlb	0	; () banked
 16014  01337A  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16015  01337C  0EA8               	movlw	168
 16016  01337E  EC0A  F0A4         	call	_LCD_Write
 16017                           
 16018                           ;LCD.c: 267: w = 128;
 16019  013382  0E80               	movlw	128
 16020  013384  6E48               	movwf	_w,c
 16021                           
 16022                           ;LCD.c: 268: l = 128;
 16023  013386  0E80               	movlw	128
 16024  013388  6E47               	movwf	_l,c
 16025                           
 16026                           ;LCD.c: 269: break;
 16027  01338A  0012               	return	
 16028  01338C                     l11692:
 16029                           
 16030                           ;LCD.c: 272: {
 16031                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 16032  01338C  0E01               	movlw	1
 16033  01338E  0100               	movlb	0	; () banked
 16034  013390  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16035  013392  0E08               	movlw	8
 16036  013394  EC0A  F0A4         	call	_LCD_Write
 16037                           
 16038                           ;LCD.c: 274: w = 128;
 16039  013398  0E80               	movlw	128
 16040  01339A  6E48               	movwf	_w,c
 16041                           
 16042                           ;LCD.c: 275: l = 128;
 16043  01339C  0E80               	movlw	128
 16044  01339E  6E47               	movwf	_l,c
 16045                           
 16046                           ;LCD.c: 276: break;
 16047  0133A0  0012               	return	
 16048  0133A2                     l11698:
 16049                           
 16050                           ;LCD.c: 279: {
 16051                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 16052  0133A2  0E01               	movlw	1
 16053  0133A4  0100               	movlb	0	; () banked
 16054  0133A6  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16055  0133A8  0E68               	movlw	104
 16056  0133AA  EC0A  F0A4         	call	_LCD_Write
 16057                           
 16058                           ;LCD.c: 281: w = 128;
 16059  0133AE  0E80               	movlw	128
 16060  0133B0  6E48               	movwf	_w,c
 16061                           
 16062                           ;LCD.c: 282: l = 128;
 16063  0133B2  0E80               	movlw	128
 16064  0133B4  6E47               	movwf	_l,c
 16065                           
 16066                           ;LCD.c: 284: }
 16067                           ;LCD.c: 285: }
 16068                           
 16069                           ;LCD.c: 283: break;
 16070  0133B6  0012               	return	
 16071  0133B8                     l11706:
 16072  0133B8  0100               	movlb	0	; () banked
 16073  0133BA  51CB               	movf	Set_Rotation@rotation& (0+255),w,b
 16074                           
 16075                           ; Switch size 1, requested type "space"
 16076                           ; Number of cases is 4, Range of values is 0 to 3
 16077                           ; switch strategies available:
 16078                           ; Name         Instructions Cycles
 16079                           ; simple_byte           13     7 (average)
 16080                           ;	Chosen strategy is simple_byte
 16081  0133BC  0A00               	xorlw	0	; case 0
 16082  0133BE  B4D8               	btfsc	status,2,c
 16083  0133C0  D7CF               	goto	l11680
 16084  0133C2  0A01               	xorlw	1	; case 1
 16085  0133C4  B4D8               	btfsc	status,2,c
 16086  0133C6  D7D7               	goto	l11686
 16087  0133C8  0A03               	xorlw	3	; case 2
 16088  0133CA  B4D8               	btfsc	status,2,c
 16089  0133CC  D7DF               	goto	l11692
 16090  0133CE  0A01               	xorlw	1	; case 3
 16091  0133D0  A4D8               	btfss	status,2,c
 16092  0133D2  0012               	return	
 16093  0133D4  D7E6               	goto	l11698
 16094  0133D6                     __end_of_Set_Rotation:
 16095                           	opt stack 0
 16096                           tosu	equ	0xFFF
 16097                           tosh	equ	0xFFE
 16098                           tosl	equ	0xFFD
 16099                           pclath	equ	0xFFA
 16100                           tblptru	equ	0xFF8
 16101                           tblptrh	equ	0xFF7
 16102                           tblptrl	equ	0xFF6
 16103                           tablat	equ	0xFF5
 16104                           prodh	equ	0xFF4
 16105                           prodl	equ	0xFF3
 16106                           intcon	equ	0xFF2
 16107                           postinc0	equ	0xFEE
 16108                           wreg	equ	0xFE8
 16109                           indf1	equ	0xFE7
 16110                           postdec1	equ	0xFE5
 16111                           fsr1h	equ	0xFE2
 16112                           fsr1l	equ	0xFE1
 16113                           indf2	equ	0xFDF
 16114                           postinc2	equ	0xFDE
 16115                           postdec2	equ	0xFDD
 16116                           plusw2	equ	0xFDB
 16117                           fsr2h	equ	0xFDA
 16118                           fsr2l	equ	0xFD9
 16119                           status	equ	0xFD8
 16120                           
 16121 ;; *************** function _LCD_Fill *****************
 16122 ;; Defined at:
 16123 ;;		line 287 in file "Library/LCD.c"
 16124 ;; Parameters:    Size  Location     Type
 16125 ;;  pColour         2    9[BANK0 ] unsigned short 
 16126 ;; Auto vars:     Size  Location     Type
 16127 ;;  j               1   12[BANK0 ] unsigned char 
 16128 ;;  i               1   11[BANK0 ] unsigned char 
 16129 ;; Return value:  Size  Location     Type
 16130 ;;                  1    wreg      void 
 16131 ;; Registers used:
 16132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16133 ;; Tracked objects:
 16134 ;;		On entry : 0/0
 16135 ;;		On exit  : 0/0
 16136 ;;		Unchanged: 0/0
 16137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16138 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16139 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16141 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16142 ;;Total ram usage:        4 bytes
 16143 ;; Hardware stack levels used:    1
 16144 ;; Hardware stack levels required when called:   10
 16145 ;; This function calls:
 16146 ;;		_LCD_Word_Write
 16147 ;;		_Set_Addr_Window
 16148 ;; This function is called by:
 16149 ;;		_LCD_Init
 16150 ;; This function uses a non-reentrant model
 16151 ;;
 16152                           
 16153                           	psect	text89
 16154  013F12                     __ptext89:
 16155                           	opt stack 0
 16156  013F12                     _LCD_Fill:
 16157                           	opt stack 18
 16158                           
 16159                           ;LCD.c: 296: UINT8 i = 0x00;
 16160                           
 16161                           ;incstack = 0
 16162  013F12  0E00               	movlw	0
 16163  013F14  0100               	movlb	0	; () banked
 16164  013F16  6FD0               	movwf	LCD_Fill@i& (0+255),b
 16165                           
 16166                           ;LCD.c: 297: UINT8 j = 0x00;
 16167  013F18  0E00               	movlw	0
 16168  013F1A  0100               	movlb	0	; () banked
 16169  013F1C  6FD1               	movwf	LCD_Fill@j& (0+255),b
 16170                           
 16171                           ; BSR set to: 0
 16172                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 16173  013F1E  0E00               	movlw	0
 16174  013F20  0100               	movlb	0	; () banked
 16175  013F22  6FCA               	movwf	Set_Addr_Window@ys& (0+255),b
 16176  013F24  0448               	decf	_w,w,c
 16177  013F26  0100               	movlb	0	; () banked
 16178  013F28  6FCB               	movwf	Set_Addr_Window@xe& (0+255),b
 16179  013F2A  0447               	decf	_l,w,c
 16180  013F2C  0100               	movlb	0	; () banked
 16181  013F2E  6FCC               	movwf	Set_Addr_Window@ye& (0+255),b
 16182  013F30  0E00               	movlw	0
 16183  013F32  EC0F  F097         	call	_Set_Addr_Window
 16184                           
 16185                           ;LCD.c: 299: for (j = l; j > 0; j--)
 16186  013F36  C047  F0D1         	movff	_l,LCD_Fill@j
 16187  013F3A                     l11714:
 16188  013F3A  0100               	movlb	0	; () banked
 16189  013F3C  51D1               	movf	LCD_Fill@j& (0+255),w,b
 16190  013F3E  0100               	movlb	0	; () banked
 16191  013F40  B4D8               	btfsc	status,2,c
 16192  013F42  0012               	return	
 16193                           
 16194                           ; BSR set to: 0
 16195                           ;LCD.c: 300: for (i = w; i > 0; i--)
 16196                           
 16197                           ; BSR set to: 0
 16198  013F44  C048  F0D0         	movff	_w,LCD_Fill@i
 16199  013F48                     l11718:
 16200                           
 16201                           ; BSR set to: 0
 16202  013F48  0100               	movlb	0	; () banked
 16203  013F4A  51D0               	movf	LCD_Fill@i& (0+255),w,b
 16204  013F4C  0100               	movlb	0	; () banked
 16205  013F4E  B4D8               	btfsc	status,2,c
 16206  013F50  D009               	goto	l11728
 16207                           
 16208                           ; BSR set to: 0
 16209                           ;LCD.c: 301: LCD_Word_Write(pColour);
 16210                           
 16211                           ; BSR set to: 0
 16212                           
 16213                           ; BSR set to: 0
 16214  013F52  C0CE  F0CA         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 16215  013F56  C0CF  F0CB         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 16216  013F5A  EC4D  F0A4         	call	_LCD_Word_Write	;wreg free
 16217  013F5E  0100               	movlb	0	; () banked
 16218  013F60  07D0               	decf	LCD_Fill@i& (0+255),f,b
 16219  013F62  D7F2               	goto	l11718
 16220  013F64                     l11728:
 16221                           
 16222                           ; BSR set to: 0
 16223  013F64  0100               	movlb	0	; () banked
 16224  013F66  07D1               	decf	LCD_Fill@j& (0+255),f,b
 16225  013F68  D7E8               	goto	l11714
 16226  013F6A                     __end_of_LCD_Fill:
 16227                           	opt stack 0
 16228                           tosu	equ	0xFFF
 16229                           tosh	equ	0xFFE
 16230                           tosl	equ	0xFFD
 16231                           pclath	equ	0xFFA
 16232                           tblptru	equ	0xFF8
 16233                           tblptrh	equ	0xFF7
 16234                           tblptrl	equ	0xFF6
 16235                           tablat	equ	0xFF5
 16236                           prodh	equ	0xFF4
 16237                           prodl	equ	0xFF3
 16238                           intcon	equ	0xFF2
 16239                           postinc0	equ	0xFEE
 16240                           wreg	equ	0xFE8
 16241                           indf1	equ	0xFE7
 16242                           postdec1	equ	0xFE5
 16243                           fsr1h	equ	0xFE2
 16244                           fsr1l	equ	0xFE1
 16245                           indf2	equ	0xFDF
 16246                           postinc2	equ	0xFDE
 16247                           postdec2	equ	0xFDD
 16248                           plusw2	equ	0xFDB
 16249                           fsr2h	equ	0xFDA
 16250                           fsr2l	equ	0xFD9
 16251                           status	equ	0xFD8
 16252                           
 16253 ;; *************** function _Set_Addr_Window *****************
 16254 ;; Defined at:
 16255 ;;		line 214 in file "Library/LCD.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;  xs              1    wreg     unsigned char 
 16258 ;;  ys              1    5[BANK0 ] unsigned char 
 16259 ;;  xe              1    6[BANK0 ] unsigned char 
 16260 ;;  ye              1    7[BANK0 ] unsigned char 
 16261 ;; Auto vars:     Size  Location     Type
 16262 ;;  xs              1    8[BANK0 ] unsigned char 
 16263 ;; Return value:  Size  Location     Type
 16264 ;;                  1    wreg      void 
 16265 ;; Registers used:
 16266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16267 ;; Tracked objects:
 16268 ;;		On entry : 0/0
 16269 ;;		On exit  : 0/0
 16270 ;;		Unchanged: 0/0
 16271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16272 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16275 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16276 ;;Total ram usage:        4 bytes
 16277 ;; Hardware stack levels used:    1
 16278 ;; Hardware stack levels required when called:    9
 16279 ;; This function calls:
 16280 ;;		_LCD_Write
 16281 ;; This function is called by:
 16282 ;;		_LCD_Fill
 16283 ;;		_LCD_FillRectangle
 16284 ;;		_LCD_DrawField
 16285 ;;		_RAM_Address_Set
 16286 ;;		_LCD_DrawPixel
 16287 ;; This function uses a non-reentrant model
 16288 ;;
 16289                           
 16290                           	psect	text90
 16291  012E1E                     __ptext90:
 16292                           	opt stack 0
 16293  012E1E                     _Set_Addr_Window:
 16294                           	opt stack 16
 16295                           
 16296                           ; BSR set to: 0
 16297                           ;incstack = 0
 16298                           ;Set_Addr_Window@xs stored from wreg
 16299  012E1E  0100               	movlb	0	; () banked
 16300  012E20  6FCD               	movwf	Set_Addr_Window@xs& (0+255),b
 16301                           
 16302                           ;LCD.c: 216: ys+=2;
 16303  012E22  0E02               	movlw	2
 16304  012E24  0100               	movlb	0	; () banked
 16305  012E26  27CA               	addwf	Set_Addr_Window@ys& (0+255),f,b
 16306                           
 16307                           ;LCD.c: 217: ye+=2;
 16308  012E28  0E02               	movlw	2
 16309  012E2A  0100               	movlb	0	; () banked
 16310  012E2C  27CC               	addwf	Set_Addr_Window@ye& (0+255),f,b
 16311                           
 16312                           ;LCD.c: 218: xs+=3;
 16313  012E2E  0E03               	movlw	3
 16314  012E30  0100               	movlb	0	; () banked
 16315  012E32  27CD               	addwf	Set_Addr_Window@xs& (0+255),f,b
 16316                           
 16317                           ;LCD.c: 219: xe+=3;
 16318  012E34  0E03               	movlw	3
 16319  012E36  0100               	movlb	0	; () banked
 16320  012E38  27CB               	addwf	Set_Addr_Window@xe& (0+255),f,b
 16321                           
 16322                           ; BSR set to: 0
 16323                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 16324  012E3A  0E00               	movlw	0
 16325  012E3C  0100               	movlb	0	; () banked
 16326  012E3E  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16327  012E40  0E2A               	movlw	42
 16328  012E42  EC0A  F0A4         	call	_LCD_Write
 16329                           
 16330                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 16331  012E46  0E01               	movlw	1
 16332  012E48  0100               	movlb	0	; () banked
 16333  012E4A  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16334  012E4C  0E00               	movlw	0
 16335  012E4E  EC0A  F0A4         	call	_LCD_Write
 16336                           
 16337                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 16338  012E52  0E01               	movlw	1
 16339  012E54  0100               	movlb	0	; () banked
 16340  012E56  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16341  012E58  0100               	movlb	0	; () banked
 16342  012E5A  51CD               	movf	Set_Addr_Window@xs& (0+255),w,b
 16343  012E5C  EC0A  F0A4         	call	_LCD_Write
 16344                           
 16345                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 16346  012E60  0E01               	movlw	1
 16347  012E62  0100               	movlb	0	; () banked
 16348  012E64  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16349  012E66  0E00               	movlw	0
 16350  012E68  EC0A  F0A4         	call	_LCD_Write
 16351                           
 16352                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 16353  012E6C  0E01               	movlw	1
 16354  012E6E  0100               	movlb	0	; () banked
 16355  012E70  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16356  012E72  0100               	movlb	0	; () banked
 16357  012E74  51CB               	movf	Set_Addr_Window@xe& (0+255),w,b
 16358  012E76  EC0A  F0A4         	call	_LCD_Write
 16359                           
 16360                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 16361  012E7A  0E00               	movlw	0
 16362  012E7C  0100               	movlb	0	; () banked
 16363  012E7E  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16364  012E80  0E2B               	movlw	43
 16365  012E82  EC0A  F0A4         	call	_LCD_Write
 16366                           
 16367                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 16368  012E86  0E01               	movlw	1
 16369  012E88  0100               	movlb	0	; () banked
 16370  012E8A  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16371  012E8C  0E00               	movlw	0
 16372  012E8E  EC0A  F0A4         	call	_LCD_Write
 16373                           
 16374                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 16375  012E92  0E01               	movlw	1
 16376  012E94  0100               	movlb	0	; () banked
 16377  012E96  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16378  012E98  0100               	movlb	0	; () banked
 16379  012E9A  51CA               	movf	Set_Addr_Window@ys& (0+255),w,b
 16380  012E9C  EC0A  F0A4         	call	_LCD_Write
 16381                           
 16382                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 16383  012EA0  0E01               	movlw	1
 16384  012EA2  0100               	movlb	0	; () banked
 16385  012EA4  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16386  012EA6  0E00               	movlw	0
 16387  012EA8  EC0A  F0A4         	call	_LCD_Write
 16388                           
 16389                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 16390  012EAC  0E01               	movlw	1
 16391  012EAE  0100               	movlb	0	; () banked
 16392  012EB0  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16393  012EB2  0100               	movlb	0	; () banked
 16394  012EB4  51CC               	movf	Set_Addr_Window@ye& (0+255),w,b
 16395  012EB6  EC0A  F0A4         	call	_LCD_Write
 16396                           
 16397                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 16398  012EBA  0E00               	movlw	0
 16399  012EBC  0100               	movlb	0	; () banked
 16400  012EBE  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16401  012EC0  0E2C               	movlw	44
 16402  012EC2  EC0A  F0A4         	call	_LCD_Write
 16403  012EC6  0012               	return		;funcret
 16404  012EC8                     __end_of_Set_Addr_Window:
 16405                           	opt stack 0
 16406                           tosu	equ	0xFFF
 16407                           tosh	equ	0xFFE
 16408                           tosl	equ	0xFFD
 16409                           pclath	equ	0xFFA
 16410                           tblptru	equ	0xFF8
 16411                           tblptrh	equ	0xFF7
 16412                           tblptrl	equ	0xFF6
 16413                           tablat	equ	0xFF5
 16414                           prodh	equ	0xFF4
 16415                           prodl	equ	0xFF3
 16416                           intcon	equ	0xFF2
 16417                           postinc0	equ	0xFEE
 16418                           wreg	equ	0xFE8
 16419                           indf1	equ	0xFE7
 16420                           postdec1	equ	0xFE5
 16421                           fsr1h	equ	0xFE2
 16422                           fsr1l	equ	0xFE1
 16423                           indf2	equ	0xFDF
 16424                           postinc2	equ	0xFDE
 16425                           postdec2	equ	0xFDD
 16426                           plusw2	equ	0xFDB
 16427                           fsr2h	equ	0xFDA
 16428                           fsr2l	equ	0xFD9
 16429                           status	equ	0xFD8
 16430                           
 16431 ;; *************** function _LCD_Word_Write *****************
 16432 ;; Defined at:
 16433 ;;		line 198 in file "Library/LCD.c"
 16434 ;; Parameters:    Size  Location     Type
 16435 ;;  value           2    5[BANK0 ] unsigned short 
 16436 ;; Auto vars:     Size  Location     Type
 16437 ;;		None
 16438 ;; Return value:  Size  Location     Type
 16439 ;;                  1    wreg      void 
 16440 ;; Registers used:
 16441 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16442 ;; Tracked objects:
 16443 ;;		On entry : 0/0
 16444 ;;		On exit  : 0/0
 16445 ;;		Unchanged: 0/0
 16446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16447 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16450 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16451 ;;Total ram usage:        2 bytes
 16452 ;; Hardware stack levels used:    1
 16453 ;; Hardware stack levels required when called:    9
 16454 ;; This function calls:
 16455 ;;		_LCD_Write
 16456 ;; This function is called by:
 16457 ;;		_LCD_Fill
 16458 ;;		_LCD_FillRectangle
 16459 ;;		_LCD_DrawField
 16460 ;;		_LCD_DrawPixel
 16461 ;; This function uses a non-reentrant model
 16462 ;;
 16463                           
 16464                           	psect	text91
 16465  01489A                     __ptext91:
 16466                           	opt stack 0
 16467  01489A                     _LCD_Word_Write:
 16468                           	opt stack 16
 16469                           
 16470                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 16471                           
 16472                           ;incstack = 0
 16473  01489A  0E01               	movlw	1
 16474  01489C  0100               	movlb	0	; () banked
 16475  01489E  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16476  0148A0  0100               	movlb	0	; () banked
 16477  0148A2  51CB               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 16478  0148A4  EC0A  F0A4         	call	_LCD_Write
 16479                           
 16480                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 16481  0148A8  0E01               	movlw	1
 16482  0148AA  0100               	movlb	0	; () banked
 16483  0148AC  6FC8               	movwf	LCD_Write@mode& (0+255),b
 16484  0148AE  0100               	movlb	0	; () banked
 16485  0148B0  51CA               	movf	LCD_Word_Write@value& (0+255),w,b
 16486  0148B2  EC0A  F0A4         	call	_LCD_Write
 16487  0148B6  0012               	return		;funcret
 16488  0148B8                     __end_of_LCD_Word_Write:
 16489                           	opt stack 0
 16490                           tosu	equ	0xFFF
 16491                           tosh	equ	0xFFE
 16492                           tosl	equ	0xFFD
 16493                           pclath	equ	0xFFA
 16494                           tblptru	equ	0xFF8
 16495                           tblptrh	equ	0xFF7
 16496                           tblptrl	equ	0xFF6
 16497                           tablat	equ	0xFF5
 16498                           prodh	equ	0xFF4
 16499                           prodl	equ	0xFF3
 16500                           intcon	equ	0xFF2
 16501                           postinc0	equ	0xFEE
 16502                           wreg	equ	0xFE8
 16503                           indf1	equ	0xFE7
 16504                           postdec1	equ	0xFE5
 16505                           fsr1h	equ	0xFE2
 16506                           fsr1l	equ	0xFE1
 16507                           indf2	equ	0xFDF
 16508                           postinc2	equ	0xFDE
 16509                           postdec2	equ	0xFDD
 16510                           plusw2	equ	0xFDB
 16511                           fsr2h	equ	0xFDA
 16512                           fsr2l	equ	0xFD9
 16513                           status	equ	0xFD8
 16514                           
 16515 ;; *************** function _LCD_Write *****************
 16516 ;; Defined at:
 16517 ;;		line 67 in file "Library/LCD.c"
 16518 ;; Parameters:    Size  Location     Type
 16519 ;;  value           1    wreg     unsigned char 
 16520 ;;  mode            1    3[BANK0 ] enum E6761
 16521 ;; Auto vars:     Size  Location     Type
 16522 ;;  value           1    4[BANK0 ] unsigned char 
 16523 ;; Return value:  Size  Location     Type
 16524 ;;                  1    wreg      void 
 16525 ;; Registers used:
 16526 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16527 ;; Tracked objects:
 16528 ;;		On entry : 0/0
 16529 ;;		On exit  : 0/0
 16530 ;;		Unchanged: 0/0
 16531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16532 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16533 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16535 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16536 ;;Total ram usage:        2 bytes
 16537 ;; Hardware stack levels used:    1
 16538 ;; Hardware stack levels required when called:    8
 16539 ;; This function calls:
 16540 ;;		_Mode_Set
 16541 ;;		_SPI_Send
 16542 ;; This function is called by:
 16543 ;;		_LCD_Init
 16544 ;;		_LCD_Word_Write
 16545 ;;		_Set_Addr_Window
 16546 ;;		_Set_Rotation
 16547 ;;		_LCD_WriteCMD
 16548 ;;		_LCD_WriteData
 16549 ;;		_LCD_Data_Write
 16550 ;;		_LCD_Data_Write_4k
 16551 ;;		_Invert_Display
 16552 ;; This function uses a non-reentrant model
 16553 ;;
 16554                           
 16555                           	psect	text92
 16556  014814                     __ptext92:
 16557                           	opt stack 0
 16558  014814                     _LCD_Write:
 16559                           	opt stack 16
 16560                           
 16561                           ;incstack = 0
 16562                           ;LCD_Write@value stored from wreg
 16563  014814  0100               	movlb	0	; () banked
 16564  014816  6FC9               	movwf	LCD_Write@value& (0+255),b
 16565                           
 16566                           ;LCD.c: 89: Mode_Set(mode);
 16567  014818  0100               	movlb	0	; () banked
 16568  01481A  51C8               	movf	LCD_Write@mode& (0+255),w,b
 16569  01481C  EC4C  F0A5         	call	_Mode_Set
 16570                           
 16571                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 16572  014820  0E6F               	movlw	low _SPI2
 16573  014822  0100               	movlb	0	; () banked
 16574  014824  6FC5               	movwf	SPI_Send@pInput& (0+255),b
 16575  014826  0E01               	movlw	high _SPI2
 16576  014828  0100               	movlb	0	; () banked
 16577  01482A  6FC6               	movwf	(SPI_Send@pInput+1)& (0+255),b
 16578  01482C  C0C9  F0C7         	movff	LCD_Write@value,SPI_Send@pData
 16579  014830  EC9A  F09D         	call	_SPI_Send	;wreg free
 16580  014834  0012               	return		;funcret
 16581  014836                     __end_of_LCD_Write:
 16582                           	opt stack 0
 16583                           tosu	equ	0xFFF
 16584                           tosh	equ	0xFFE
 16585                           tosl	equ	0xFFD
 16586                           pclath	equ	0xFFA
 16587                           tblptru	equ	0xFF8
 16588                           tblptrh	equ	0xFF7
 16589                           tblptrl	equ	0xFF6
 16590                           tablat	equ	0xFF5
 16591                           prodh	equ	0xFF4
 16592                           prodl	equ	0xFF3
 16593                           intcon	equ	0xFF2
 16594                           postinc0	equ	0xFEE
 16595                           wreg	equ	0xFE8
 16596                           indf1	equ	0xFE7
 16597                           postdec1	equ	0xFE5
 16598                           fsr1h	equ	0xFE2
 16599                           fsr1l	equ	0xFE1
 16600                           indf2	equ	0xFDF
 16601                           postinc2	equ	0xFDE
 16602                           postdec2	equ	0xFDD
 16603                           plusw2	equ	0xFDB
 16604                           fsr2h	equ	0xFDA
 16605                           fsr2l	equ	0xFD9
 16606                           status	equ	0xFD8
 16607                           
 16608 ;; *************** function _SPI_Send *****************
 16609 ;; Defined at:
 16610 ;;		line 226 in file "Library/SPI.c"
 16611 ;; Parameters:    Size  Location     Type
 16612 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 16613 ;;		 -> SPI1(11), SPI2(11), 
 16614 ;;  pData           1    2[BANK0 ] unsigned char 
 16615 ;; Auto vars:     Size  Location     Type
 16616 ;;		None
 16617 ;; Return value:  Size  Location     Type
 16618 ;;                  1    wreg      unsigned char 
 16619 ;; Registers used:
 16620 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16621 ;; Tracked objects:
 16622 ;;		On entry : 0/0
 16623 ;;		On exit  : 0/0
 16624 ;;		Unchanged: 0/0
 16625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16626 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16629 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16630 ;;Total ram usage:        3 bytes
 16631 ;; Hardware stack levels used:    1
 16632 ;; Hardware stack levels required when called:    7
 16633 ;; This function calls:
 16634 ;;		Nothing
 16635 ;; This function is called by:
 16636 ;;		_LCD_Write
 16637 ;;		_OutSeg
 16638 ;; This function uses a non-reentrant model
 16639 ;;
 16640                           
 16641                           	psect	text93
 16642  013B34                     __ptext93:
 16643                           	opt stack 0
 16644  013B34                     _SPI_Send:
 16645                           	opt stack 16
 16646                           
 16647                           ;SPI.c: 253: switch (pInput->mChannel)
 16648                           
 16649                           ;incstack = 0
 16650  013B34  D026               	goto	l10480
 16651  013B36                     l10462:
 16652                           
 16653                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 16654  013B36  C096  FFD9         	movff	_PortC+4,fsr2l
 16655  013B3A  C097  FFDA         	movff	_PortC+5,fsr2h
 16656  013B3E  0100               	movlb	0	; () banked
 16657  013B40  94DF               	bcf	indf2,2,c
 16658                           
 16659                           ; BSR set to: 0
 16660                           ;SPI.c: 257: SSP1BUF = pData;
 16661  013B42  C0C7  FFC9         	movff	SPI_Send@pData,4041	;volatile
 16662  013B46                     l680:
 16663  013B46  A0C7               	btfss	4039,0,c	;volatile
 16664  013B48  D7FE               	goto	l680
 16665                           
 16666                           ;SPI.c: 259: pData = SSP1BUF;
 16667  013B4A  CFC9 F0C7          	movff	4041,SPI_Send@pData	;volatile
 16668                           
 16669                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 16670  013B4E  C096  FFD9         	movff	_PortC+4,fsr2l
 16671  013B52  C097  FFDA         	movff	_PortC+5,fsr2h
 16672  013B56  0100               	movlb	0	; () banked
 16673  013B58  84DF               	bsf	indf2,2,c
 16674                           
 16675                           ; BSR set to: 0
 16676                           ;SPI.c: 261: return pData;
 16677                           ;	Return value of _SPI_Send is never used
 16678  013B5A  0012               	return	
 16679  013B5C                     l10470:
 16680                           
 16681                           ; BSR set to: 0
 16682                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 16683  013B5C  C08C  FFD9         	movff	_PortD+4,fsr2l
 16684  013B60  C08D  FFDA         	movff	_PortD+5,fsr2h
 16685  013B64  0100               	movlb	0	; () banked
 16686  013B66  9EDF               	bcf	indf2,7,c
 16687                           
 16688                           ; BSR set to: 0
 16689                           ;SPI.c: 264: SSP2BUF = pData;
 16690  013B68  C0C7  FF6F         	movff	SPI_Send@pData,3951	;volatile
 16691  013B6C                     l685:
 16692  013B6C  A06D               	btfss	3949,0,c	;volatile
 16693  013B6E  D7FE               	goto	l685
 16694                           
 16695                           ;SPI.c: 266: pData = SSP2BUF;
 16696  013B70  CF6F F0C7          	movff	3951,SPI_Send@pData	;volatile
 16697                           
 16698                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 16699  013B74  C08C  FFD9         	movff	_PortD+4,fsr2l
 16700  013B78  C08D  FFDA         	movff	_PortD+5,fsr2h
 16701  013B7C  0100               	movlb	0	; () banked
 16702  013B7E  8EDF               	bsf	indf2,7,c
 16703                           
 16704                           ; BSR set to: 0
 16705                           ;SPI.c: 269: };
 16706                           
 16707                           ; BSR set to: 0
 16708                           ;SPI.c: 268: return pData;
 16709                           ;	Return value of _SPI_Send is never used
 16710  013B80  0012               	return	
 16711  013B82                     l10480:
 16712  013B82  0100               	movlb	0	; () banked
 16713  013B84  EE20 F002          	lfsr	2,2
 16714  013B88  51C5               	movf	SPI_Send@pInput& (0+255),w,b
 16715  013B8A  26D9               	addwf	fsr2l,f,c
 16716  013B8C  51C6               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 16717  013B8E  22DA               	addwfc	fsr2h,f,c
 16718  013B90  50DF               	movf	indf2,w,c
 16719                           
 16720                           ; Switch size 1, requested type "space"
 16721                           ; Number of cases is 2, Range of values is 0 to 1
 16722                           ; switch strategies available:
 16723                           ; Name         Instructions Cycles
 16724                           ; simple_byte            7     4 (average)
 16725                           ;	Chosen strategy is simple_byte
 16726  013B92  0A00               	xorlw	0	; case 0
 16727  013B94  B4D8               	btfsc	status,2,c
 16728  013B96  D7CF               	goto	l10462
 16729  013B98  0A01               	xorlw	1	; case 1
 16730  013B9A  A4D8               	btfss	status,2,c
 16731  013B9C  0012               	return	
 16732  013B9E  D7DE               	goto	l10470
 16733  013BA0                     __end_of_SPI_Send:
 16734                           	opt stack 0
 16735                           tosu	equ	0xFFF
 16736                           tosh	equ	0xFFE
 16737                           tosl	equ	0xFFD
 16738                           pclath	equ	0xFFA
 16739                           tblptru	equ	0xFF8
 16740                           tblptrh	equ	0xFF7
 16741                           tblptrl	equ	0xFF6
 16742                           tablat	equ	0xFF5
 16743                           prodh	equ	0xFF4
 16744                           prodl	equ	0xFF3
 16745                           intcon	equ	0xFF2
 16746                           postinc0	equ	0xFEE
 16747                           wreg	equ	0xFE8
 16748                           indf1	equ	0xFE7
 16749                           postdec1	equ	0xFE5
 16750                           fsr1h	equ	0xFE2
 16751                           fsr1l	equ	0xFE1
 16752                           indf2	equ	0xFDF
 16753                           postinc2	equ	0xFDE
 16754                           postdec2	equ	0xFDD
 16755                           plusw2	equ	0xFDB
 16756                           fsr2h	equ	0xFDA
 16757                           fsr2l	equ	0xFD9
 16758                           status	equ	0xFD8
 16759                           
 16760 ;; *************** function _Mode_Set *****************
 16761 ;; Defined at:
 16762 ;;		line 40 in file "Library/LCD.c"
 16763 ;; Parameters:    Size  Location     Type
 16764 ;;  pMode           1    wreg     enum E6761
 16765 ;; Auto vars:     Size  Location     Type
 16766 ;;  pMode           1    0[BANK0 ] enum E6761
 16767 ;; Return value:  Size  Location     Type
 16768 ;;                  1    wreg      void 
 16769 ;; Registers used:
 16770 ;;		wreg
 16771 ;; Tracked objects:
 16772 ;;		On entry : 0/0
 16773 ;;		On exit  : 0/0
 16774 ;;		Unchanged: 0/0
 16775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16779 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16780 ;;Total ram usage:        1 bytes
 16781 ;; Hardware stack levels used:    1
 16782 ;; Hardware stack levels required when called:    7
 16783 ;; This function calls:
 16784 ;;		Nothing
 16785 ;; This function is called by:
 16786 ;;		_LCD_Write
 16787 ;; This function uses a non-reentrant model
 16788 ;;
 16789                           
 16790                           	psect	text94
 16791  014A98                     __ptext94:
 16792                           	opt stack 0
 16793  014A98                     _Mode_Set:
 16794                           	opt stack 16
 16795                           
 16796                           ; BSR set to: 0
 16797                           ;incstack = 0
 16798                           ;Mode_Set@pMode stored from wreg
 16799  014A98  0100               	movlb	0	; () banked
 16800  014A9A  6FC5               	movwf	Mode_Set@pMode& (0+255),b
 16801                           
 16802                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 16803  014A9C  0100               	movlb	0	; () banked
 16804  014A9E  B1C5               	btfsc	Mode_Set@pMode& (0+255),0,b
 16805  014AA0  D002               	bra	u6945
 16806  014AA2  9E85               	bcf	3973,7,c	;volatile
 16807  014AA4  D001               	bra	u6946
 16808  014AA6                     u6945:
 16809  014AA6  8E85               	bsf	3973,7,c	;volatile
 16810  014AA8                     u6946:
 16811  014AA8  0012               	return		;funcret
 16812  014AAA                     __end_of_Mode_Set:
 16813                           	opt stack 0
 16814                           tosu	equ	0xFFF
 16815                           tosh	equ	0xFFE
 16816                           tosl	equ	0xFFD
 16817                           pclath	equ	0xFFA
 16818                           tblptru	equ	0xFF8
 16819                           tblptrh	equ	0xFF7
 16820                           tblptrl	equ	0xFF6
 16821                           tablat	equ	0xFF5
 16822                           prodh	equ	0xFF4
 16823                           prodl	equ	0xFF3
 16824                           intcon	equ	0xFF2
 16825                           postinc0	equ	0xFEE
 16826                           wreg	equ	0xFE8
 16827                           indf1	equ	0xFE7
 16828                           postdec1	equ	0xFE5
 16829                           fsr1h	equ	0xFE2
 16830                           fsr1l	equ	0xFE1
 16831                           indf2	equ	0xFDF
 16832                           postinc2	equ	0xFDE
 16833                           postdec2	equ	0xFDD
 16834                           plusw2	equ	0xFDB
 16835                           fsr2h	equ	0xFDA
 16836                           fsr2l	equ	0xFD9
 16837                           status	equ	0xFD8
 16838                           
 16839 ;; *************** function _Configure_GPIOs *****************
 16840 ;; Defined at:
 16841 ;;		line 46 in file "Library/LCD.c"
 16842 ;; Parameters:    Size  Location     Type
 16843 ;;		None
 16844 ;; Auto vars:     Size  Location     Type
 16845 ;;		None
 16846 ;; Return value:  Size  Location     Type
 16847 ;;                  1    wreg      void 
 16848 ;; Registers used:
 16849 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16850 ;; Tracked objects:
 16851 ;;		On entry : 0/0
 16852 ;;		On exit  : 0/0
 16853 ;;		Unchanged: 0/0
 16854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16856 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16858 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16859 ;;Total ram usage:        0 bytes
 16860 ;; Hardware stack levels used:    1
 16861 ;; Hardware stack levels required when called:   14
 16862 ;; This function calls:
 16863 ;;		_LCD_Reset
 16864 ;;		_Port_SetPinType
 16865 ;;		_SPI_Init
 16866 ;;		_SPI_MaxSpeed
 16867 ;; This function is called by:
 16868 ;;		_LCD_Init
 16869 ;; This function uses a non-reentrant model
 16870 ;;
 16871                           
 16872                           	psect	text95
 16873  013A58                     __ptext95:
 16874                           	opt stack 0
 16875  013A58                     _Configure_GPIOs:
 16876                           	opt stack 14
 16877                           
 16878                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 16879                           
 16880                           ;incstack = 0
 16881  013A58  0EAC               	movlw	low _PortF
 16882  013A5A  0100               	movlb	0	; () banked
 16883  013A5C  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 16884  013A5E  0E01               	movlw	high _PortF
 16885  013A60  0100               	movlb	0	; () banked
 16886  013A62  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16887  013A64  0E07               	movlw	7
 16888  013A66  0100               	movlb	0	; () banked
 16889  013A68  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 16890  013A6A  0E03               	movlw	3
 16891  013A6C  0100               	movlb	0	; () banked
 16892  013A6E  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 16893  013A70  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 16894                           
 16895                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 16896  013A74  0EAC               	movlw	low _PortF
 16897  013A76  0100               	movlb	0	; () banked
 16898  013A78  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 16899  013A7A  0E01               	movlw	high _PortF
 16900  013A7C  0100               	movlb	0	; () banked
 16901  013A7E  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16902  013A80  0E06               	movlw	6
 16903  013A82  0100               	movlb	0	; () banked
 16904  013A84  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 16905  013A86  0E03               	movlw	3
 16906  013A88  0100               	movlb	0	; () banked
 16907  013A8A  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 16908  013A8C  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 16909                           
 16910                           ;LCD.c: 55: LCD_Reset();
 16911  013A90  EC2E  F0A0         	call	_LCD_Reset	;wreg free
 16912                           
 16913                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 16914  013A94  0EC0               	movlw	192
 16915  013A96  0100               	movlb	0	; () banked
 16916  013A98  6FF2               	movwf	SPI_Init@pClock& (0+255),b
 16917  013A9A  0EC6               	movlw	198
 16918  013A9C  6FF3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 16919  013A9E  0E2D               	movlw	45
 16920  013AA0  6FF4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 16921  013AA2  0E00               	movlw	0
 16922  013AA4  6FF5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 16923  013AA6  0E01               	movlw	1
 16924  013AA8  0100               	movlb	0	; () banked
 16925  013AAA  6FF6               	movwf	SPI_Init@pChannel& (0+255),b
 16926  013AAC  0E01               	movlw	1
 16927  013AAE  0100               	movlb	0	; () banked
 16928  013AB0  6FF7               	movwf	SPI_Init@pMode& (0+255),b
 16929  013AB2  EC00  F080         	call	_SPI_Init	;wreg free
 16930                           
 16931                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 16932  013AB6  0E6F               	movlw	low _SPI2
 16933  013AB8  0100               	movlb	0	; () banked
 16934  013ABA  6FD4               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 16935  013ABC  0E01               	movlw	high _SPI2
 16936  013ABE  0100               	movlb	0	; () banked
 16937  013AC0  6FD5               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 16938  013AC2  EC7F  F09C         	call	_SPI_MaxSpeed	;wreg free
 16939  013AC6  0012               	return		;funcret
 16940  013AC8                     __end_of_Configure_GPIOs:
 16941                           	opt stack 0
 16942                           tosu	equ	0xFFF
 16943                           tosh	equ	0xFFE
 16944                           tosl	equ	0xFFD
 16945                           pclath	equ	0xFFA
 16946                           tblptru	equ	0xFF8
 16947                           tblptrh	equ	0xFF7
 16948                           tblptrl	equ	0xFF6
 16949                           tablat	equ	0xFF5
 16950                           prodh	equ	0xFF4
 16951                           prodl	equ	0xFF3
 16952                           intcon	equ	0xFF2
 16953                           postinc0	equ	0xFEE
 16954                           wreg	equ	0xFE8
 16955                           indf1	equ	0xFE7
 16956                           postdec1	equ	0xFE5
 16957                           fsr1h	equ	0xFE2
 16958                           fsr1l	equ	0xFE1
 16959                           indf2	equ	0xFDF
 16960                           postinc2	equ	0xFDE
 16961                           postdec2	equ	0xFDD
 16962                           plusw2	equ	0xFDB
 16963                           fsr2h	equ	0xFDA
 16964                           fsr2l	equ	0xFD9
 16965                           status	equ	0xFD8
 16966                           
 16967 ;; *************** function _SPI_MaxSpeed *****************
 16968 ;; Defined at:
 16969 ;;		line 201 in file "Library/SPI.c"
 16970 ;; Parameters:    Size  Location     Type
 16971 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 16972 ;;		 -> SPI2(11), 
 16973 ;; Auto vars:     Size  Location     Type
 16974 ;;		None
 16975 ;; Return value:  Size  Location     Type
 16976 ;;                  1    wreg      void 
 16977 ;; Registers used:
 16978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16979 ;; Tracked objects:
 16980 ;;		On entry : 0/0
 16981 ;;		On exit  : 0/0
 16982 ;;		Unchanged: 0/0
 16983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16984 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16987 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16988 ;;Total ram usage:        2 bytes
 16989 ;; Hardware stack levels used:    1
 16990 ;; Hardware stack levels required when called:    9
 16991 ;; This function calls:
 16992 ;;		_Byte_SetBit
 16993 ;;		_Byte_SetQuad
 16994 ;; This function is called by:
 16995 ;;		_Configure_GPIOs
 16996 ;; This function uses a non-reentrant model
 16997 ;;
 16998                           
 16999                           	psect	text96
 17000  0138FE                     __ptext96:
 17001                           	opt stack 0
 17002  0138FE                     _SPI_MaxSpeed:
 17003                           	opt stack 18
 17004                           
 17005                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17006                           
 17007                           ;incstack = 0
 17008  0138FE  0100               	movlb	0	; () banked
 17009  013900  EE20 F006          	lfsr	2,6
 17010  013904  51D4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17011  013906  26D9               	addwf	fsr2l,f,c
 17012  013908  51D5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17013  01390A  22DA               	addwfc	fsr2h,f,c
 17014  01390C  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 17015  013910  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 17016  013914  0E05               	movlw	5
 17017  013916  0100               	movlb	0	; () banked
 17018  013918  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 17019  01391A  0E00               	movlw	0
 17020  01391C  0100               	movlb	0	; () banked
 17021  01391E  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 17022  013920  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 17023                           
 17024                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 17025  013924  0100               	movlb	0	; () banked
 17026  013926  EE20 F006          	lfsr	2,6
 17027  01392A  51D4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17028  01392C  26D9               	addwf	fsr2l,f,c
 17029  01392E  51D5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17030  013930  22DA               	addwfc	fsr2h,f,c
 17031  013932  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 17032  013936  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 17033  01393A  0E00               	movlw	0
 17034  01393C  0100               	movlb	0	; () banked
 17035  01393E  6FD2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17036  013940  0E00               	movlw	0
 17037  013942  0100               	movlb	0	; () banked
 17038  013944  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 17039  013946  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 17040                           
 17041                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17042  01394A  0100               	movlb	0	; () banked
 17043  01394C  EE20 F006          	lfsr	2,6
 17044  013950  51D4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17045  013952  26D9               	addwf	fsr2l,f,c
 17046  013954  51D5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17047  013956  22DA               	addwfc	fsr2h,f,c
 17048  013958  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 17049  01395C  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 17050  013960  0E05               	movlw	5
 17051  013962  0100               	movlb	0	; () banked
 17052  013964  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 17053  013966  0E01               	movlw	1
 17054  013968  0100               	movlb	0	; () banked
 17055  01396A  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 17056  01396C  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 17057  013970  0012               	return		;funcret
 17058  013972                     __end_of_SPI_MaxSpeed:
 17059                           	opt stack 0
 17060                           tosu	equ	0xFFF
 17061                           tosh	equ	0xFFE
 17062                           tosl	equ	0xFFD
 17063                           pclath	equ	0xFFA
 17064                           tblptru	equ	0xFF8
 17065                           tblptrh	equ	0xFF7
 17066                           tblptrl	equ	0xFF6
 17067                           tablat	equ	0xFF5
 17068                           prodh	equ	0xFF4
 17069                           prodl	equ	0xFF3
 17070                           intcon	equ	0xFF2
 17071                           postinc0	equ	0xFEE
 17072                           wreg	equ	0xFE8
 17073                           indf1	equ	0xFE7
 17074                           postdec1	equ	0xFE5
 17075                           fsr1h	equ	0xFE2
 17076                           fsr1l	equ	0xFE1
 17077                           indf2	equ	0xFDF
 17078                           postinc2	equ	0xFDE
 17079                           postdec2	equ	0xFDD
 17080                           plusw2	equ	0xFDB
 17081                           fsr2h	equ	0xFDA
 17082                           fsr2l	equ	0xFD9
 17083                           status	equ	0xFD8
 17084                           
 17085 ;; *************** function _LCD_Reset *****************
 17086 ;; Defined at:
 17087 ;;		line 95 in file "Library/LCD.c"
 17088 ;; Parameters:    Size  Location     Type
 17089 ;;		None
 17090 ;; Auto vars:     Size  Location     Type
 17091 ;;		None
 17092 ;; Return value:  Size  Location     Type
 17093 ;;                  1    wreg      void 
 17094 ;; Registers used:
 17095 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17096 ;; Tracked objects:
 17097 ;;		On entry : 0/0
 17098 ;;		On exit  : 0/0
 17099 ;;		Unchanged: 0/0
 17100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17105 ;;Total ram usage:        0 bytes
 17106 ;; Hardware stack levels used:    1
 17107 ;; Hardware stack levels required when called:   13
 17108 ;; This function calls:
 17109 ;;		_LED_Toggle
 17110 ;;		_Reset_High
 17111 ;;		_Reset_Low
 17112 ;;		_delay_ms
 17113 ;; This function is called by:
 17114 ;;		_Configure_GPIOs
 17115 ;; This function uses a non-reentrant model
 17116 ;;
 17117                           
 17118                           	psect	text97
 17119  01405C                     __ptext97:
 17120                           	opt stack 0
 17121  01405C                     _LCD_Reset:
 17122                           	opt stack 14
 17123                           
 17124                           ;LCD.c: 97: Reset_High();
 17125                           
 17126                           ;incstack = 0
 17127  01405C  EC6B  F0A4         	call	_Reset_High	;wreg free
 17128                           
 17129                           ;LCD.c: 98: LED_Toggle(eLED2);
 17130  014060  0E01               	movlw	1
 17131  014062  ECEC  F0A0         	call	_LED_Toggle
 17132                           
 17133                           ;LCD.c: 99: delay_ms(0x80);
 17134  014066  0E00               	movlw	0
 17135  014068  0100               	movlb	0	; () banked
 17136  01406A  6FC6               	movwf	(delay_ms@ms+1)& (0+255),b
 17137  01406C  0E80               	movlw	128
 17138  01406E  6FC5               	movwf	delay_ms@ms& (0+255),b
 17139  014070  ECD0  F09D         	call	_delay_ms	;wreg free
 17140                           
 17141                           ;LCD.c: 100: LED_Toggle(eLED2);
 17142  014074  0E01               	movlw	1
 17143  014076  ECEC  F0A0         	call	_LED_Toggle
 17144                           
 17145                           ;LCD.c: 101: Reset_Low();
 17146  01407A  EC5C  F0A4         	call	_Reset_Low	;wreg free
 17147                           
 17148                           ;LCD.c: 102: delay_ms(0x80);
 17149  01407E  0E00               	movlw	0
 17150  014080  0100               	movlb	0	; () banked
 17151  014082  6FC6               	movwf	(delay_ms@ms+1)& (0+255),b
 17152  014084  0E80               	movlw	128
 17153  014086  6FC5               	movwf	delay_ms@ms& (0+255),b
 17154  014088  ECD0  F09D         	call	_delay_ms	;wreg free
 17155                           
 17156                           ;LCD.c: 103: LED_Toggle(eLED2);
 17157  01408C  0E01               	movlw	1
 17158  01408E  ECEC  F0A0         	call	_LED_Toggle
 17159                           
 17160                           ;LCD.c: 104: Reset_High();
 17161  014092  EC6B  F0A4         	call	_Reset_High	;wreg free
 17162                           
 17163                           ;LCD.c: 105: delay_ms(0x80);
 17164  014096  0E00               	movlw	0
 17165  014098  0100               	movlb	0	; () banked
 17166  01409A  6FC6               	movwf	(delay_ms@ms+1)& (0+255),b
 17167  01409C  0E80               	movlw	128
 17168  01409E  6FC5               	movwf	delay_ms@ms& (0+255),b
 17169  0140A0  ECD0  F09D         	call	_delay_ms	;wreg free
 17170                           
 17171                           ;LCD.c: 106: LED_Toggle(eLED2);
 17172  0140A4  0E01               	movlw	1
 17173  0140A6  ECEC  F0A0         	call	_LED_Toggle
 17174  0140AA  0012               	return		;funcret
 17175  0140AC                     __end_of_LCD_Reset:
 17176                           	opt stack 0
 17177                           tosu	equ	0xFFF
 17178                           tosh	equ	0xFFE
 17179                           tosl	equ	0xFFD
 17180                           pclath	equ	0xFFA
 17181                           tblptru	equ	0xFF8
 17182                           tblptrh	equ	0xFF7
 17183                           tblptrl	equ	0xFF6
 17184                           tablat	equ	0xFF5
 17185                           prodh	equ	0xFF4
 17186                           prodl	equ	0xFF3
 17187                           intcon	equ	0xFF2
 17188                           postinc0	equ	0xFEE
 17189                           wreg	equ	0xFE8
 17190                           indf1	equ	0xFE7
 17191                           postdec1	equ	0xFE5
 17192                           fsr1h	equ	0xFE2
 17193                           fsr1l	equ	0xFE1
 17194                           indf2	equ	0xFDF
 17195                           postinc2	equ	0xFDE
 17196                           postdec2	equ	0xFDD
 17197                           plusw2	equ	0xFDB
 17198                           fsr2h	equ	0xFDA
 17199                           fsr2l	equ	0xFD9
 17200                           status	equ	0xFD8
 17201                           
 17202 ;; *************** function _delay_ms *****************
 17203 ;; Defined at:
 17204 ;;		line 240 in file "Library/Types.c"
 17205 ;; Parameters:    Size  Location     Type
 17206 ;;  ms              2    0[BANK0 ] unsigned short 
 17207 ;; Auto vars:     Size  Location     Type
 17208 ;;  u               4    2[BANK0 ] volatile unsigned long 
 17209 ;; Return value:  Size  Location     Type
 17210 ;;                  1    wreg      void 
 17211 ;; Registers used:
 17212 ;;		wreg, status,2, status,0
 17213 ;; Tracked objects:
 17214 ;;		On entry : 0/0
 17215 ;;		On exit  : 0/0
 17216 ;;		Unchanged: 0/0
 17217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17218 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17219 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17221 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17222 ;;Total ram usage:        6 bytes
 17223 ;; Hardware stack levels used:    1
 17224 ;; Hardware stack levels required when called:    7
 17225 ;; This function calls:
 17226 ;;		Nothing
 17227 ;; This function is called by:
 17228 ;;		_LCD_Reset
 17229 ;;		_LCD_Init
 17230 ;;		_MXK_Init
 17231 ;; This function uses a non-reentrant model
 17232 ;;
 17233                           
 17234                           	psect	text98
 17235  013BA0                     __ptext98:
 17236                           	opt stack 0
 17237  013BA0                     _delay_ms:
 17238                           	opt stack 21
 17239                           
 17240                           ;Types.c: 242: volatile unsigned long u;
 17241                           ;Types.c: 243: while (ms--)
 17242                           
 17243                           ;incstack = 0
 17244  013BA0  D01F               	goto	l10924
 17245  013BA2                     l10916:
 17246                           
 17247                           ;Types.c: 244: {
 17248                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 17249  013BA2  0E00               	movlw	0
 17250  013BA4  0100               	movlb	0	; () banked
 17251  013BA6  6FC7               	movwf	delay_ms@u& (0+255),b	;volatile
 17252  013BA8  0E00               	movlw	0
 17253  013BAA  6FC8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17254  013BAC  0E00               	movlw	0
 17255  013BAE  6FC9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17256  013BB0  0E00               	movlw	0
 17257  013BB2  6FCA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17258  013BB4                     l10918:
 17259                           
 17260                           ; BSR set to: 0
 17261  013BB4  0100               	movlb	0	; () banked
 17262  013BB6  51CA               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 17263  013BB8  0100               	movlb	0	; () banked
 17264  013BBA  11C9               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 17265  013BBC  E111               	bnz	l10924
 17266  013BBE  0EB0               	movlw	176
 17267  013BC0  0100               	movlb	0	; () banked
 17268  013BC2  5DC7               	subwf	delay_ms@u& (0+255),w,b	;volatile
 17269  013BC4  0E04               	movlw	4
 17270  013BC6  0100               	movlb	0	; () banked
 17271  013BC8  59C8               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 17272  013BCA  B0D8               	btfsc	status,0,c
 17273  013BCC  D009               	goto	l10924
 17274                           
 17275                           ; BSR set to: 0
 17276                           
 17277                           ; BSR set to: 0
 17278  013BCE  F000               	nop		; ;# 
 17279  013BD0  0E01               	movlw	1
 17280  013BD2  0100               	movlb	0	; () banked
 17281  013BD4  27C7               	addwf	delay_ms@u& (0+255),f,b	;volatile
 17282  013BD6  0E00               	movlw	0
 17283  013BD8  23C8               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 17284  013BDA  23C9               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 17285  013BDC  23CA               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 17286  013BDE  D7EA               	goto	l10918
 17287  013BE0                     l10924:
 17288  013BE0  0100               	movlb	0	; () banked
 17289  013BE2  07C5               	decf	delay_ms@ms& (0+255),f,b
 17290  013BE4  A0D8               	btfss	status,0,c
 17291  013BE6  07C6               	decf	(delay_ms@ms+1)& (0+255),f,b
 17292  013BE8  0100               	movlb	0	; () banked
 17293  013BEA  29C5               	incf	delay_ms@ms& (0+255),w,b
 17294  013BEC  E1DA               	bnz	l10916
 17295  013BEE  0100               	movlb	0	; () banked
 17296  013BF0  29C6               	incf	(delay_ms@ms+1)& (0+255),w,b
 17297  013BF2  A4D8               	btfss	status,2,c
 17298  013BF4  D7D6               	goto	l10916
 17299                           
 17300                           ; BSR set to: 0
 17301                           ;Types.c: 251: }
 17302                           ;Types.c: 252: }
 17303                           ;Types.c: 253: u = 0x8008;
 17304                           
 17305                           ; BSR set to: 0
 17306  013BF6  0E08               	movlw	8
 17307  013BF8  0100               	movlb	0	; () banked
 17308  013BFA  6FC7               	movwf	delay_ms@u& (0+255),b	;volatile
 17309  013BFC  0E80               	movlw	128
 17310  013BFE  6FC8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17311  013C00  0E00               	movlw	0
 17312  013C02  6FC9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17313  013C04  0E00               	movlw	0
 17314  013C06  6FCA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17315                           
 17316                           ; BSR set to: 0
 17317  013C08  0012               	return		;funcret
 17318  013C0A                     __end_of_delay_ms:
 17319                           	opt stack 0
 17320                           tosu	equ	0xFFF
 17321                           tosh	equ	0xFFE
 17322                           tosl	equ	0xFFD
 17323                           pclath	equ	0xFFA
 17324                           tblptru	equ	0xFF8
 17325                           tblptrh	equ	0xFF7
 17326                           tblptrl	equ	0xFF6
 17327                           tablat	equ	0xFF5
 17328                           prodh	equ	0xFF4
 17329                           prodl	equ	0xFF3
 17330                           intcon	equ	0xFF2
 17331                           postinc0	equ	0xFEE
 17332                           wreg	equ	0xFE8
 17333                           indf1	equ	0xFE7
 17334                           postdec1	equ	0xFE5
 17335                           fsr1h	equ	0xFE2
 17336                           fsr1l	equ	0xFE1
 17337                           indf2	equ	0xFDF
 17338                           postinc2	equ	0xFDE
 17339                           postdec2	equ	0xFDD
 17340                           plusw2	equ	0xFDB
 17341                           fsr2h	equ	0xFDA
 17342                           fsr2l	equ	0xFD9
 17343                           status	equ	0xFD8
 17344                           
 17345 ;; *************** function _Reset_Low *****************
 17346 ;; Defined at:
 17347 ;;		line 32 in file "Library/LCD.c"
 17348 ;; Parameters:    Size  Location     Type
 17349 ;;		None
 17350 ;; Auto vars:     Size  Location     Type
 17351 ;;		None
 17352 ;; Return value:  Size  Location     Type
 17353 ;;                  1    wreg      void 
 17354 ;; Registers used:
 17355 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17356 ;; Tracked objects:
 17357 ;;		On entry : 0/0
 17358 ;;		On exit  : 0/0
 17359 ;;		Unchanged: 0/0
 17360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17365 ;;Total ram usage:        0 bytes
 17366 ;; Hardware stack levels used:    1
 17367 ;; Hardware stack levels required when called:   11
 17368 ;; This function calls:
 17369 ;;		_Port_SetPin
 17370 ;; This function is called by:
 17371 ;;		_LCD_Reset
 17372 ;; This function uses a non-reentrant model
 17373 ;;
 17374                           
 17375                           	psect	text99
 17376  0148B8                     __ptext99:
 17377                           	opt stack 0
 17378  0148B8                     _Reset_Low:
 17379                           	opt stack 15
 17380                           
 17381                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 17382                           
 17383                           ; BSR set to: 0
 17384                           ;incstack = 0
 17385  0148B8  0EAC               	movlw	low _PortF
 17386  0148BA  0100               	movlb	0	; () banked
 17387  0148BC  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 17388  0148BE  0E01               	movlw	high _PortF
 17389  0148C0  0100               	movlb	0	; () banked
 17390  0148C2  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17391  0148C4  0E06               	movlw	6
 17392  0148C6  0100               	movlb	0	; () banked
 17393  0148C8  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 17394  0148CA  0E01               	movlw	1
 17395  0148CC  0100               	movlb	0	; () banked
 17396  0148CE  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 17397  0148D0  EC80  F094         	call	_Port_SetPin	;wreg free
 17398  0148D4  0012               	return		;funcret
 17399  0148D6                     __end_of_Reset_Low:
 17400                           	opt stack 0
 17401                           tosu	equ	0xFFF
 17402                           tosh	equ	0xFFE
 17403                           tosl	equ	0xFFD
 17404                           pclath	equ	0xFFA
 17405                           tblptru	equ	0xFF8
 17406                           tblptrh	equ	0xFF7
 17407                           tblptrl	equ	0xFF6
 17408                           tablat	equ	0xFF5
 17409                           prodh	equ	0xFF4
 17410                           prodl	equ	0xFF3
 17411                           intcon	equ	0xFF2
 17412                           postinc0	equ	0xFEE
 17413                           wreg	equ	0xFE8
 17414                           indf1	equ	0xFE7
 17415                           postdec1	equ	0xFE5
 17416                           fsr1h	equ	0xFE2
 17417                           fsr1l	equ	0xFE1
 17418                           indf2	equ	0xFDF
 17419                           postinc2	equ	0xFDE
 17420                           postdec2	equ	0xFDD
 17421                           plusw2	equ	0xFDB
 17422                           fsr2h	equ	0xFDA
 17423                           fsr2l	equ	0xFD9
 17424                           status	equ	0xFD8
 17425                           
 17426 ;; *************** function _Reset_High *****************
 17427 ;; Defined at:
 17428 ;;		line 36 in file "Library/LCD.c"
 17429 ;; Parameters:    Size  Location     Type
 17430 ;;		None
 17431 ;; Auto vars:     Size  Location     Type
 17432 ;;		None
 17433 ;; Return value:  Size  Location     Type
 17434 ;;                  1    wreg      void 
 17435 ;; Registers used:
 17436 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17437 ;; Tracked objects:
 17438 ;;		On entry : 0/0
 17439 ;;		On exit  : 0/0
 17440 ;;		Unchanged: 0/0
 17441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17446 ;;Total ram usage:        0 bytes
 17447 ;; Hardware stack levels used:    1
 17448 ;; Hardware stack levels required when called:   11
 17449 ;; This function calls:
 17450 ;;		_Port_SetPin
 17451 ;; This function is called by:
 17452 ;;		_LCD_Reset
 17453 ;; This function uses a non-reentrant model
 17454 ;;
 17455                           
 17456                           	psect	text100
 17457  0148D6                     __ptext100:
 17458                           	opt stack 0
 17459  0148D6                     _Reset_High:
 17460                           	opt stack 15
 17461                           
 17462                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 17463                           
 17464                           ;incstack = 0
 17465  0148D6  0EAC               	movlw	low _PortF
 17466  0148D8  0100               	movlb	0	; () banked
 17467  0148DA  6FD4               	movwf	Port_SetPin@pInput& (0+255),b
 17468  0148DC  0E01               	movlw	high _PortF
 17469  0148DE  0100               	movlb	0	; () banked
 17470  0148E0  6FD5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17471  0148E2  0E06               	movlw	6
 17472  0148E4  0100               	movlb	0	; () banked
 17473  0148E6  6FD6               	movwf	Port_SetPin@pPin& (0+255),b
 17474  0148E8  0E00               	movlw	0
 17475  0148EA  0100               	movlb	0	; () banked
 17476  0148EC  6FD7               	movwf	Port_SetPin@pValue& (0+255),b
 17477  0148EE  EC80  F094         	call	_Port_SetPin	;wreg free
 17478  0148F2  0012               	return		;funcret
 17479  0148F4                     __end_of_Reset_High:
 17480                           	opt stack 0
 17481                           tosu	equ	0xFFF
 17482                           tosh	equ	0xFFE
 17483                           tosl	equ	0xFFD
 17484                           pclath	equ	0xFFA
 17485                           tblptru	equ	0xFF8
 17486                           tblptrh	equ	0xFF7
 17487                           tblptrl	equ	0xFF6
 17488                           tablat	equ	0xFF5
 17489                           prodh	equ	0xFF4
 17490                           prodl	equ	0xFF3
 17491                           intcon	equ	0xFF2
 17492                           postinc0	equ	0xFEE
 17493                           wreg	equ	0xFE8
 17494                           indf1	equ	0xFE7
 17495                           postdec1	equ	0xFE5
 17496                           fsr1h	equ	0xFE2
 17497                           fsr1l	equ	0xFE1
 17498                           indf2	equ	0xFDF
 17499                           postinc2	equ	0xFDE
 17500                           postdec2	equ	0xFDD
 17501                           plusw2	equ	0xFDB
 17502                           fsr2h	equ	0xFDA
 17503                           fsr2l	equ	0xFD9
 17504                           status	equ	0xFD8
 17505                           
 17506 ;; *************** function _LED_Toggle *****************
 17507 ;; Defined at:
 17508 ;;		line 50 in file "Library/LED.c"
 17509 ;; Parameters:    Size  Location     Type
 17510 ;;  pLED            1    wreg     enum E6739
 17511 ;; Auto vars:     Size  Location     Type
 17512 ;;  pLED            1   24[BANK0 ] enum E6739
 17513 ;; Return value:  Size  Location     Type
 17514 ;;                  1    wreg      void 
 17515 ;; Registers used:
 17516 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17517 ;; Tracked objects:
 17518 ;;		On entry : 0/0
 17519 ;;		On exit  : 0/0
 17520 ;;		Unchanged: 0/0
 17521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17523 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17525 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17526 ;;Total ram usage:        1 bytes
 17527 ;; Hardware stack levels used:    1
 17528 ;; Hardware stack levels required when called:   12
 17529 ;; This function calls:
 17530 ;;		_Port_TogglePin
 17531 ;; This function is called by:
 17532 ;;		_LCD_Reset
 17533 ;;		_Event_DIPSwitch
 17534 ;;		_Event_HMI_DIPSwitch
 17535 ;;		_Event_TestButton
 17536 ;;		_Event_HMI_LeftButton
 17537 ;;		_Event_HMI_RightButton
 17538 ;;		_Event_HMI_UpButton
 17539 ;;		_Event_HMI_DownButton
 17540 ;;		_Event_ADCSequenceComplete
 17541 ;; This function uses a non-reentrant model
 17542 ;;
 17543                           
 17544                           	psect	text101
 17545  0141D8                     __ptext101:
 17546                           	opt stack 0
 17547  0141D8                     _LED_Toggle:
 17548                           	opt stack 10
 17549                           
 17550                           ;incstack = 0
 17551                           ;LED_Toggle@pLED stored from wreg
 17552  0141D8  0100               	movlb	0	; () banked
 17553  0141DA  6FDD               	movwf	LED_Toggle@pLED& (0+255),b
 17554                           
 17555                           ;LED.c: 52: switch (pLED)
 17556  0141DC  D018               	goto	l10348
 17557  0141DE                     l10342:
 17558                           
 17559                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 17560  0141DE  0E92               	movlw	low _PortC
 17561  0141E0  0100               	movlb	0	; () banked
 17562  0141E2  6FD9               	movwf	Port_TogglePin@pInput& (0+255),b
 17563  0141E4  0E00               	movlw	high _PortC
 17564  0141E6  0100               	movlb	0	; () banked
 17565  0141E8  6FDA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17566  0141EA  0E00               	movlw	0
 17567  0141EC  0100               	movlb	0	; () banked
 17568  0141EE  6FDB               	movwf	Port_TogglePin@pPin& (0+255),b
 17569  0141F0  EC06  F0A3         	call	_Port_TogglePin	;wreg free
 17570                           
 17571                           ;LED.c: 56: break;
 17572  0141F4  0012               	return	
 17573  0141F6                     l10344:
 17574                           
 17575                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 17576  0141F6  0E92               	movlw	low _PortC
 17577  0141F8  0100               	movlb	0	; () banked
 17578  0141FA  6FD9               	movwf	Port_TogglePin@pInput& (0+255),b
 17579  0141FC  0E00               	movlw	high _PortC
 17580  0141FE  0100               	movlb	0	; () banked
 17581  014200  6FDA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 17582  014202  0E01               	movlw	1
 17583  014204  0100               	movlb	0	; () banked
 17584  014206  6FDB               	movwf	Port_TogglePin@pPin& (0+255),b
 17585  014208  EC06  F0A3         	call	_Port_TogglePin	;wreg free
 17586                           
 17587                           ;LED.c: 60: }
 17588                           
 17589                           ;LED.c: 59: break;
 17590  01420C  0012               	return	
 17591  01420E                     l10348:
 17592  01420E  0100               	movlb	0	; () banked
 17593  014210  51DD               	movf	LED_Toggle@pLED& (0+255),w,b
 17594                           
 17595                           ; Switch size 1, requested type "space"
 17596                           ; Number of cases is 2, Range of values is 0 to 1
 17597                           ; switch strategies available:
 17598                           ; Name         Instructions Cycles
 17599                           ; simple_byte            7     4 (average)
 17600                           ;	Chosen strategy is simple_byte
 17601  014212  0A00               	xorlw	0	; case 0
 17602  014214  B4D8               	btfsc	status,2,c
 17603  014216  D7E3               	goto	l10342
 17604  014218  0A01               	xorlw	1	; case 1
 17605  01421A  A4D8               	btfss	status,2,c
 17606  01421C  0012               	return	
 17607  01421E  D7EB               	goto	l10344
 17608  014220                     __end_of_LED_Toggle:
 17609                           	opt stack 0
 17610                           tosu	equ	0xFFF
 17611                           tosh	equ	0xFFE
 17612                           tosl	equ	0xFFD
 17613                           pclath	equ	0xFFA
 17614                           tblptru	equ	0xFF8
 17615                           tblptrh	equ	0xFF7
 17616                           tblptrl	equ	0xFF6
 17617                           tablat	equ	0xFF5
 17618                           prodh	equ	0xFF4
 17619                           prodl	equ	0xFF3
 17620                           intcon	equ	0xFF2
 17621                           postinc0	equ	0xFEE
 17622                           wreg	equ	0xFE8
 17623                           indf1	equ	0xFE7
 17624                           postdec1	equ	0xFE5
 17625                           fsr1h	equ	0xFE2
 17626                           fsr1l	equ	0xFE1
 17627                           indf2	equ	0xFDF
 17628                           postinc2	equ	0xFDE
 17629                           postdec2	equ	0xFDD
 17630                           plusw2	equ	0xFDB
 17631                           fsr2h	equ	0xFDA
 17632                           fsr2l	equ	0xFD9
 17633                           status	equ	0xFD8
 17634                           
 17635 ;; *************** function _Port_TogglePin *****************
 17636 ;; Defined at:
 17637 ;;		line 278 in file "Library/Port.c"
 17638 ;; Parameters:    Size  Location     Type
 17639 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 17640 ;;		 -> PortC(10), 
 17641 ;;  pPin            1   22[BANK0 ] enum E6750
 17642 ;; Auto vars:     Size  Location     Type
 17643 ;;  Value           1   23[BANK0 ] unsigned char 
 17644 ;; Return value:  Size  Location     Type
 17645 ;;                  1    wreg      void 
 17646 ;; Registers used:
 17647 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17648 ;; Tracked objects:
 17649 ;;		On entry : 0/0
 17650 ;;		On exit  : 0/0
 17651 ;;		Unchanged: 0/0
 17652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17653 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17657 ;;Total ram usage:        4 bytes
 17658 ;; Hardware stack levels used:    1
 17659 ;; Hardware stack levels required when called:   11
 17660 ;; This function calls:
 17661 ;;		_Port_GetPin
 17662 ;;		_Port_SetPin
 17663 ;; This function is called by:
 17664 ;;		_LED_Toggle
 17665 ;; This function uses a non-reentrant model
 17666 ;;
 17667                           
 17668                           	psect	text102
 17669  01460C                     __ptext102:
 17670                           	opt stack 0
 17671  01460C                     _Port_TogglePin:
 17672                           	opt stack 10
 17673                           
 17674                           ;Port.c: 280: UINT8 Value;
 17675                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 17676                           
 17677                           ;incstack = 0
 17678  01460C  C0D9  F0C5         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 17679  014610  C0DA  F0C6         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 17680  014614  C0DB  F0C7         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 17681  014618  EC10  F0A1         	call	_Port_GetPin	;wreg free
 17682  01461C  0100               	movlb	0	; () banked
 17683  01461E  6FDC               	movwf	Port_TogglePin@Value& (0+255),b
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;Port.c: 282: Value ^= 0x01;
 17687  014620  0E01               	movlw	1
 17688  014622  0100               	movlb	0	; () banked
 17689  014624  1BDC               	xorwf	Port_TogglePin@Value& (0+255),f,b
 17690                           
 17691                           ; BSR set to: 0
 17692                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 17693  014626  C0D9  F0D4         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 17694  01462A  C0DA  F0D5         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 17695  01462E  C0DB  F0D6         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 17696  014632  C0DC  F0D7         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 17697  014636  EC80  F094         	call	_Port_SetPin	;wreg free
 17698  01463A  0012               	return		;funcret
 17699  01463C                     __end_of_Port_TogglePin:
 17700                           	opt stack 0
 17701                           tosu	equ	0xFFF
 17702                           tosh	equ	0xFFE
 17703                           tosl	equ	0xFFD
 17704                           pclath	equ	0xFFA
 17705                           tblptru	equ	0xFF8
 17706                           tblptrh	equ	0xFF7
 17707                           tblptrl	equ	0xFF6
 17708                           tablat	equ	0xFF5
 17709                           prodh	equ	0xFF4
 17710                           prodl	equ	0xFF3
 17711                           intcon	equ	0xFF2
 17712                           postinc0	equ	0xFEE
 17713                           wreg	equ	0xFE8
 17714                           indf1	equ	0xFE7
 17715                           postdec1	equ	0xFE5
 17716                           fsr1h	equ	0xFE2
 17717                           fsr1l	equ	0xFE1
 17718                           indf2	equ	0xFDF
 17719                           postinc2	equ	0xFDE
 17720                           postdec2	equ	0xFDD
 17721                           plusw2	equ	0xFDB
 17722                           fsr2h	equ	0xFDA
 17723                           fsr2l	equ	0xFD9
 17724                           status	equ	0xFD8
 17725                           
 17726 ;; *************** function _Port_SetPin *****************
 17727 ;; Defined at:
 17728 ;;		line 247 in file "Library/Port.c"
 17729 ;; Parameters:    Size  Location     Type
 17730 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 17731 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 17732 ;;  pPin            1   17[BANK0 ] enum E6750
 17733 ;;  pValue          1   18[BANK0 ] unsigned char 
 17734 ;; Auto vars:     Size  Location     Type
 17735 ;;  Type            1   19[BANK0 ] enum E6795
 17736 ;; Return value:  Size  Location     Type
 17737 ;;                  1    wreg      void 
 17738 ;; Registers used:
 17739 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17740 ;; Tracked objects:
 17741 ;;		On entry : 0/0
 17742 ;;		On exit  : 0/0
 17743 ;;		Unchanged: 0/0
 17744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17745 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17748 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17749 ;;Total ram usage:        5 bytes
 17750 ;; Hardware stack levels used:    1
 17751 ;; Hardware stack levels required when called:   10
 17752 ;; This function calls:
 17753 ;;		_Byte_SetBit
 17754 ;;		_Word_GetPair
 17755 ;; This function is called by:
 17756 ;;		_Reset_Low
 17757 ;;		_Reset_High
 17758 ;;		_LED_Set
 17759 ;;		_Port_TogglePin
 17760 ;;		_Motor_Init
 17761 ;;		_Motor_Step
 17762 ;;		_MXK_Init
 17763 ;; This function uses a non-reentrant model
 17764 ;;
 17765                           
 17766                           	psect	text103
 17767  012900                     __ptext103:
 17768                           	opt stack 0
 17769  012900                     _Port_SetPin:
 17770                           	opt stack 10
 17771                           
 17772                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 17773                           
 17774                           ;incstack = 0
 17775  012900  0E08               	movlw	8
 17776  012902  0100               	movlb	0	; () banked
 17777  012904  25D4               	addwf	Port_SetPin@pInput& (0+255),w,b
 17778  012906  0100               	movlb	0	; () banked
 17779  012908  6FD1               	movwf	Word_GetPair@pInput& (0+255),b
 17780  01290A  0E00               	movlw	0
 17781  01290C  0100               	movlb	0	; () banked
 17782  01290E  21D5               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 17783  012910  0100               	movlb	0	; () banked
 17784  012912  6FD2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 17785  012914  C0D6  F0D3         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 17786  012918  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 17787  01291C  0100               	movlb	0	; () banked
 17788  01291E  6FD8               	movwf	Port_SetPin@Type& (0+255),b
 17789                           
 17790                           ;Port.c: 250: switch (Type)
 17791  012920  D042               	goto	l9910
 17792  012922                     l9896:
 17793                           
 17794                           ; BSR set to: 0
 17795                           ;Port.c: 256: pValue &= 1;
 17796  012922  0E01               	movlw	1
 17797  012924  0100               	movlb	0	; () banked
 17798  012926  17D7               	andwf	Port_SetPin@pValue& (0+255),f,b
 17799                           
 17800                           ; BSR set to: 0
 17801                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17802  012928  0100               	movlb	0	; () banked
 17803  01292A  EE20 F002          	lfsr	2,2
 17804  01292E  51D4               	movf	Port_SetPin@pInput& (0+255),w,b
 17805  012930  26D9               	addwf	fsr2l,f,c
 17806  012932  51D5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17807  012934  22DA               	addwfc	fsr2h,f,c
 17808  012936  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 17809  01293A  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 17810  01293E  C0D6  F0C7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17811  012942  C0D7  F0C8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17812  012946  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 17813                           
 17814                           ;Port.c: 258: break;
 17815  01294A  0012               	return	
 17816  01294C                     l9900:
 17817                           
 17818                           ;Port.c: 261: pValue &= 1;
 17819  01294C  0E01               	movlw	1
 17820  01294E  0100               	movlb	0	; () banked
 17821  012950  17D7               	andwf	Port_SetPin@pValue& (0+255),f,b
 17822                           
 17823                           ;Port.c: 262: pValue ^= 1;
 17824  012952  0E01               	movlw	1
 17825  012954  0100               	movlb	0	; () banked
 17826  012956  1BD7               	xorwf	Port_SetPin@pValue& (0+255),f,b
 17827                           
 17828                           ; BSR set to: 0
 17829                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 17830  012958  0100               	movlb	0	; () banked
 17831  01295A  EE20 F002          	lfsr	2,2
 17832  01295E  51D4               	movf	Port_SetPin@pInput& (0+255),w,b
 17833  012960  26D9               	addwf	fsr2l,f,c
 17834  012962  51D5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17835  012964  22DA               	addwfc	fsr2h,f,c
 17836  012966  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 17837  01296A  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 17838  01296E  C0D6  F0C7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17839  012972  C0D7  F0C8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17840  012976  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 17841                           
 17842                           ;Port.c: 264: break;
 17843  01297A  0012               	return	
 17844  01297C                     l9904:
 17845                           
 17846                           ;Port.c: 266: pValue &= 1;
 17847  01297C  0E01               	movlw	1
 17848  01297E  0100               	movlb	0	; () banked
 17849  012980  17D7               	andwf	Port_SetPin@pValue& (0+255),f,b
 17850                           
 17851                           ; BSR set to: 0
 17852                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 17853  012982  0100               	movlb	0	; () banked
 17854  012984  EE20 F004          	lfsr	2,4
 17855  012988  51D4               	movf	Port_SetPin@pInput& (0+255),w,b
 17856  01298A  26D9               	addwf	fsr2l,f,c
 17857  01298C  51D5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 17858  01298E  22DA               	addwfc	fsr2h,f,c
 17859  012990  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 17860  012994  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 17861  012998  C0D6  F0C7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 17862  01299C  C0D7  F0C8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 17863  0129A0  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 17864                           
 17865                           ;Port.c: 269: }
 17866                           
 17867                           ;Port.c: 268: break;
 17868  0129A4  0012               	return	
 17869  0129A6                     l9910:
 17870  0129A6  0100               	movlb	0	; () banked
 17871  0129A8  51D8               	movf	Port_SetPin@Type& (0+255),w,b
 17872                           
 17873                           ; Switch size 1, requested type "space"
 17874                           ; Number of cases is 4, Range of values is 0 to 3
 17875                           ; switch strategies available:
 17876                           ; Name         Instructions Cycles
 17877                           ; simple_byte           13     7 (average)
 17878                           ;	Chosen strategy is simple_byte
 17879  0129AA  0A00               	xorlw	0	; case 0
 17880  0129AC  B4D8               	btfsc	status,2,c
 17881  0129AE  0012               	return	
 17882  0129B0  0A01               	xorlw	1	; case 1
 17883  0129B2  B4D8               	btfsc	status,2,c
 17884  0129B4  D7B6               	goto	l9896
 17885  0129B6  0A03               	xorlw	3	; case 2
 17886  0129B8  B4D8               	btfsc	status,2,c
 17887  0129BA  D7C8               	goto	l9900
 17888  0129BC  0A01               	xorlw	1	; case 3
 17889  0129BE  A4D8               	btfss	status,2,c
 17890  0129C0  0012               	return	
 17891  0129C2  D7DC               	goto	l9904
 17892  0129C4                     __end_of_Port_SetPin:
 17893                           	opt stack 0
 17894                           tosu	equ	0xFFF
 17895                           tosh	equ	0xFFE
 17896                           tosl	equ	0xFFD
 17897                           pclath	equ	0xFFA
 17898                           tblptru	equ	0xFF8
 17899                           tblptrh	equ	0xFF7
 17900                           tblptrl	equ	0xFF6
 17901                           tablat	equ	0xFF5
 17902                           prodh	equ	0xFF4
 17903                           prodl	equ	0xFF3
 17904                           intcon	equ	0xFF2
 17905                           postinc0	equ	0xFEE
 17906                           wreg	equ	0xFE8
 17907                           indf1	equ	0xFE7
 17908                           postdec1	equ	0xFE5
 17909                           fsr1h	equ	0xFE2
 17910                           fsr1l	equ	0xFE1
 17911                           indf2	equ	0xFDF
 17912                           postinc2	equ	0xFDE
 17913                           postdec2	equ	0xFDD
 17914                           plusw2	equ	0xFDB
 17915                           fsr2h	equ	0xFDA
 17916                           fsr2l	equ	0xFD9
 17917                           status	equ	0xFD8
 17918                           
 17919 ;; *************** function _Port_GetPin *****************
 17920 ;; Defined at:
 17921 ;;		line 271 in file "Library/Port.c"
 17922 ;; Parameters:    Size  Location     Type
 17923 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 17924 ;;		 -> PortB(10), PortE(10), PortC(10), 
 17925 ;;  pPin            1    2[BANK0 ] enum E6750
 17926 ;; Auto vars:     Size  Location     Type
 17927 ;;  Output          1    5[BANK0 ] unsigned char 
 17928 ;; Return value:  Size  Location     Type
 17929 ;;                  1    wreg      unsigned char 
 17930 ;; Registers used:
 17931 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17932 ;; Tracked objects:
 17933 ;;		On entry : 0/0
 17934 ;;		On exit  : 0/0
 17935 ;;		Unchanged: 0/0
 17936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17937 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17940 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17941 ;;Total ram usage:        6 bytes
 17942 ;; Hardware stack levels used:    1
 17943 ;; Hardware stack levels required when called:    7
 17944 ;; This function calls:
 17945 ;;		Nothing
 17946 ;; This function is called by:
 17947 ;;		_Port_TogglePin
 17948 ;;		_HMI_LeftSwitch
 17949 ;;		_HMI_RightSwitch
 17950 ;;		_HMI_UpSwitch
 17951 ;;		_HMI_DownSwitch
 17952 ;;		_MXK_TestButton
 17953 ;; This function uses a non-reentrant model
 17954 ;;
 17955                           
 17956                           	psect	text104
 17957  014220                     __ptext104:
 17958                           	opt stack 0
 17959  014220                     _Port_GetPin:
 17960                           	opt stack 17
 17961                           
 17962                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 17963                           
 17964                           ;incstack = 0
 17965  014220  0100               	movlb	0	; () banked
 17966  014222  EE20 F006          	lfsr	2,6
 17967  014226  51C5               	movf	Port_GetPin@pInput& (0+255),w,b
 17968  014228  26D9               	addwf	fsr2l,f,c
 17969  01422A  51C6               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 17970  01422C  22DA               	addwfc	fsr2h,f,c
 17971  01422E  CFDE F0C8          	movff	postinc2,??_Port_GetPin
 17972  014232  CFDD F0C9          	movff	postdec2,??_Port_GetPin+1
 17973  014236  C0C8  FFD9         	movff	??_Port_GetPin,fsr2l
 17974  01423A  C0C9  FFDA         	movff	??_Port_GetPin+1,fsr2h
 17975  01423E  50DF               	movf	indf2,w,c
 17976  014240  0100               	movlb	0	; () banked
 17977  014242  6FCA               	movwf	Port_GetPin@Output& (0+255),b
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;Port.c: 274: Output >>= (UINT8)pPin;
 17981  014244  0100               	movlb	0	; () banked
 17982  014246  29C7               	incf	Port_GetPin@pPin& (0+255),w,b
 17983  014248  0100               	movlb	0	; () banked
 17984  01424A  6FC8               	movwf	??_Port_GetPin& (0+255),b
 17985  01424C  D003               	goto	u6590
 17986  01424E                     u6595:
 17987  01424E  0100               	movlb	0	; () banked
 17988  014250  90D8               	bcf	status,0,c
 17989  014252  33CA               	rrcf	Port_GetPin@Output& (0+255),f,b
 17990  014254                     u6590:
 17991  014254  0100               	movlb	0	; () banked
 17992  014256  2FC8               	decfsz	??_Port_GetPin& (0+255),f,b
 17993  014258  D7FA               	goto	u6595
 17994                           
 17995                           ;Port.c: 275: Output &= 1;
 17996  01425A  0E01               	movlw	1
 17997  01425C  0100               	movlb	0	; () banked
 17998  01425E  17CA               	andwf	Port_GetPin@Output& (0+255),f,b
 17999                           
 18000                           ; BSR set to: 0
 18001                           ;Port.c: 276: return Output;
 18002  014260  0100               	movlb	0	; () banked
 18003  014262  51CA               	movf	Port_GetPin@Output& (0+255),w,b
 18004  014264  0012               	return	
 18005  014266                     __end_of_Port_GetPin:
 18006                           	opt stack 0
 18007                           tosu	equ	0xFFF
 18008                           tosh	equ	0xFFE
 18009                           tosl	equ	0xFFD
 18010                           pclath	equ	0xFFA
 18011                           tblptru	equ	0xFF8
 18012                           tblptrh	equ	0xFF7
 18013                           tblptrl	equ	0xFF6
 18014                           tablat	equ	0xFF5
 18015                           prodh	equ	0xFF4
 18016                           prodl	equ	0xFF3
 18017                           intcon	equ	0xFF2
 18018                           postinc0	equ	0xFEE
 18019                           wreg	equ	0xFE8
 18020                           indf1	equ	0xFE7
 18021                           postdec1	equ	0xFE5
 18022                           fsr1h	equ	0xFE2
 18023                           fsr1l	equ	0xFE1
 18024                           indf2	equ	0xFDF
 18025                           postinc2	equ	0xFDE
 18026                           postdec2	equ	0xFDD
 18027                           plusw2	equ	0xFDB
 18028                           fsr2h	equ	0xFDA
 18029                           fsr2l	equ	0xFD9
 18030                           status	equ	0xFD8
 18031                           
 18032 ;; *************** function _ISR_Enable *****************
 18033 ;; Defined at:
 18034 ;;		line 27 in file "Library/ISR.c"
 18035 ;; Parameters:    Size  Location     Type
 18036 ;;		None
 18037 ;; Auto vars:     Size  Location     Type
 18038 ;;		None
 18039 ;; Return value:  Size  Location     Type
 18040 ;;                  1    wreg      void 
 18041 ;; Registers used:
 18042 ;;		None
 18043 ;; Tracked objects:
 18044 ;;		On entry : 0/0
 18045 ;;		On exit  : 0/0
 18046 ;;		Unchanged: 0/0
 18047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18052 ;;Total ram usage:        0 bytes
 18053 ;; Hardware stack levels used:    1
 18054 ;; Hardware stack levels required when called:    7
 18055 ;; This function calls:
 18056 ;;		Nothing
 18057 ;; This function is called by:
 18058 ;;		_initialise
 18059 ;; This function uses a non-reentrant model
 18060 ;;
 18061                           
 18062                           	psect	text105
 18063  014B24                     __ptext105:
 18064                           	opt stack 0
 18065  014B24                     _ISR_Enable:
 18066                           	opt stack 22
 18067                           
 18068                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 18069                           
 18070                           ; BSR set to: 0
 18071                           ;incstack = 0
 18072  014B24  8CF2               	bsf	intcon,6,c	;volatile
 18073                           
 18074                           ;ISR.c: 30: INTCONbits.GIE = 1;
 18075  014B26  8EF2               	bsf	intcon,7,c	;volatile
 18076                           
 18077                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 18078  014B28  88F2               	bsf	intcon,4,c	;volatile
 18079                           
 18080                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 18081  014B2A  92F2               	bcf	intcon,1,c	;volatile
 18082  014B2C  0012               	return		;funcret
 18083  014B2E                     __end_of_ISR_Enable:
 18084                           	opt stack 0
 18085                           tosu	equ	0xFFF
 18086                           tosh	equ	0xFFE
 18087                           tosl	equ	0xFFD
 18088                           pclath	equ	0xFFA
 18089                           tblptru	equ	0xFF8
 18090                           tblptrh	equ	0xFF7
 18091                           tblptrl	equ	0xFF6
 18092                           tablat	equ	0xFF5
 18093                           prodh	equ	0xFF4
 18094                           prodl	equ	0xFF3
 18095                           intcon	equ	0xFF2
 18096                           postinc0	equ	0xFEE
 18097                           wreg	equ	0xFE8
 18098                           indf1	equ	0xFE7
 18099                           postdec1	equ	0xFE5
 18100                           fsr1h	equ	0xFE2
 18101                           fsr1l	equ	0xFE1
 18102                           indf2	equ	0xFDF
 18103                           postinc2	equ	0xFDE
 18104                           postdec2	equ	0xFDD
 18105                           plusw2	equ	0xFDB
 18106                           fsr2h	equ	0xFDA
 18107                           fsr2l	equ	0xFD9
 18108                           status	equ	0xFD8
 18109                           
 18110 ;; *************** function _HMI_Init *****************
 18111 ;; Defined at:
 18112 ;;		line 104 in file "HMI.c"
 18113 ;; Parameters:    Size  Location     Type
 18114 ;;		None
 18115 ;; Auto vars:     Size  Location     Type
 18116 ;;  in              2   20[BANK1 ] unsigned short 
 18117 ;; Return value:  Size  Location     Type
 18118 ;;                  1    wreg      void 
 18119 ;; Registers used:
 18120 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18121 ;; Tracked objects:
 18122 ;;		On entry : 0/0
 18123 ;;		On exit  : 0/0
 18124 ;;		Unchanged: 0/0
 18125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18127 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18129 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18130 ;;Total ram usage:        2 bytes
 18131 ;; Hardware stack levels used:    1
 18132 ;; Hardware stack levels required when called:   16
 18133 ;; This function calls:
 18134 ;;		_Button_Init
 18135 ;;		_SPI_Init
 18136 ;;		_SPI_MinSpeed
 18137 ;; This function is called by:
 18138 ;;		_initialise
 18139 ;; This function uses a non-reentrant model
 18140 ;;
 18141                           
 18142                           	psect	text106
 18143  0115BC                     __ptext106:
 18144                           	opt stack 0
 18145  0115BC                     _HMI_Init:
 18146                           	opt stack 13
 18147                           
 18148                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 18149                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
 18150                           
 18151                           ;incstack = 0
 18152  0115BC  0E5A               	movlw	low (_HMIBoard+48)
 18153  0115BE  0101               	movlb	1	; () banked
 18154  0115C0  6FBD               	movwf	Button_Init@pInput& (0+255),b
 18155  0115C2  0E01               	movlw	high (_HMIBoard+48)
 18156  0115C4  0101               	movlb	1	; () banked
 18157  0115C6  6FBE               	movwf	(Button_Init@pInput+1)& (0+255),b
 18158  0115C8  0E00               	movlw	0
 18159  0115CA  0101               	movlb	1	; () banked
 18160  0115CC  6FC0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18161  0115CE  0E02               	movlw	2
 18162  0115D0  6FBF               	movwf	Button_Init@pThreshold& (0+255),b
 18163  0115D2  0E5E               	movlw	low _HMI_InitButtons
 18164  0115D4  0101               	movlb	1	; () banked
 18165  0115D6  6FC1               	movwf	Button_Init@pInitIO& (0+255),b
 18166  0115D8  0E4B               	movlw	high _HMI_InitButtons
 18167  0115DA  0101               	movlb	1	; () banked
 18168  0115DC  6FC2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18169  0115DE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18170  0115E0  0101               	movlb	1	; () banked
 18171  0115E2  6FC3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18172  0115E4  0E9A               	movlw	low _HMI_DIPSwitch
 18173  0115E6  0101               	movlb	1	; () banked
 18174  0115E8  6FC4               	movwf	Button_Init@pGetState& (0+255),b
 18175  0115EA  0E49               	movlw	high _HMI_DIPSwitch
 18176  0115EC  0101               	movlb	1	; () banked
 18177  0115EE  6FC5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18178  0115F0  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 18179  0115F2  0101               	movlb	1	; () banked
 18180  0115F4  6FC6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18181  0115F6  0EF8               	movlw	low _Event_HMI_DIPSwitch
 18182  0115F8  0101               	movlb	1	; () banked
 18183  0115FA  6FC7               	movwf	Button_Init@pFunction& (0+255),b
 18184  0115FC  0E46               	movlw	high _Event_HMI_DIPSwitch
 18185  0115FE  0101               	movlb	1	; () banked
 18186  011600  6FC8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18187  011602  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 18188  011604  0101               	movlb	1	; () banked
 18189  011606  6FC9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18190  011608  ECAE  F093         	call	_Button_Init	;wreg free
 18191                           
 18192                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 18193                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
 18194  01160C  0E3C               	movlw	low (_HMIBoard+18)
 18195  01160E  0101               	movlb	1	; () banked
 18196  011610  6FBD               	movwf	Button_Init@pInput& (0+255),b
 18197  011612  0E01               	movlw	high (_HMIBoard+18)
 18198  011614  0101               	movlb	1	; () banked
 18199  011616  6FBE               	movwf	(Button_Init@pInput+1)& (0+255),b
 18200  011618  0E00               	movlw	0
 18201  01161A  0101               	movlb	1	; () banked
 18202  01161C  6FC0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18203  01161E  0E02               	movlw	2
 18204  011620  6FBF               	movwf	Button_Init@pThreshold& (0+255),b
 18205  011622  0E5E               	movlw	low _HMI_InitButtons
 18206  011624  0101               	movlb	1	; () banked
 18207  011626  6FC1               	movwf	Button_Init@pInitIO& (0+255),b
 18208  011628  0E4B               	movlw	high _HMI_InitButtons
 18209  01162A  0101               	movlb	1	; () banked
 18210  01162C  6FC2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18211  01162E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18212  011630  0101               	movlb	1	; () banked
 18213  011632  6FC3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18214  011634  0EFA               	movlw	low _HMI_LeftSwitch
 18215  011636  0101               	movlb	1	; () banked
 18216  011638  6FC4               	movwf	Button_Init@pGetState& (0+255),b
 18217  01163A  0E49               	movlw	high _HMI_LeftSwitch
 18218  01163C  0101               	movlb	1	; () banked
 18219  01163E  6FC5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18220  011640  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 18221  011642  0101               	movlb	1	; () banked
 18222  011644  6FC6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18223  011646  0EBA               	movlw	low _Event_HMI_LeftButton
 18224  011648  0101               	movlb	1	; () banked
 18225  01164A  6FC7               	movwf	Button_Init@pFunction& (0+255),b
 18226  01164C  0E3E               	movlw	high _Event_HMI_LeftButton
 18227  01164E  0101               	movlb	1	; () banked
 18228  011650  6FC8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18229  011652  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 18230  011654  0101               	movlb	1	; () banked
 18231  011656  6FC9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18232  011658  ECAE  F093         	call	_Button_Init	;wreg free
 18233                           
 18234                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 18235                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
 18236  01165C  0E32               	movlw	low (_HMIBoard+8)
 18237  01165E  0101               	movlb	1	; () banked
 18238  011660  6FBD               	movwf	Button_Init@pInput& (0+255),b
 18239  011662  0E01               	movlw	high (_HMIBoard+8)
 18240  011664  0101               	movlb	1	; () banked
 18241  011666  6FBE               	movwf	(Button_Init@pInput+1)& (0+255),b
 18242  011668  0E00               	movlw	0
 18243  01166A  0101               	movlb	1	; () banked
 18244  01166C  6FC0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18245  01166E  0E02               	movlw	2
 18246  011670  6FBF               	movwf	Button_Init@pThreshold& (0+255),b
 18247  011672  0E5E               	movlw	low _HMI_InitButtons
 18248  011674  0101               	movlb	1	; () banked
 18249  011676  6FC1               	movwf	Button_Init@pInitIO& (0+255),b
 18250  011678  0E4B               	movlw	high _HMI_InitButtons
 18251  01167A  0101               	movlb	1	; () banked
 18252  01167C  6FC2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18253  01167E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18254  011680  0101               	movlb	1	; () banked
 18255  011682  6FC3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18256  011684  0EE2               	movlw	low _HMI_RightSwitch
 18257  011686  0101               	movlb	1	; () banked
 18258  011688  6FC4               	movwf	Button_Init@pGetState& (0+255),b
 18259  01168A  0E49               	movlw	high _HMI_RightSwitch
 18260  01168C  0101               	movlb	1	; () banked
 18261  01168E  6FC5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18262  011690  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 18263  011692  0101               	movlb	1	; () banked
 18264  011694  6FC6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18265  011696  0EAC               	movlw	low _Event_HMI_RightButton
 18266  011698  0101               	movlb	1	; () banked
 18267  01169A  6FC7               	movwf	Button_Init@pFunction& (0+255),b
 18268  01169C  0E42               	movlw	high _Event_HMI_RightButton
 18269  01169E  0101               	movlb	1	; () banked
 18270  0116A0  6FC8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18271  0116A2  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 18272  0116A4  0101               	movlb	1	; () banked
 18273  0116A6  6FC9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18274  0116A8  ECAE  F093         	call	_Button_Init	;wreg free
 18275                           
 18276                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 18277                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
 18278  0116AC  0E46               	movlw	low (_HMIBoard+28)
 18279  0116AE  0101               	movlb	1	; () banked
 18280  0116B0  6FBD               	movwf	Button_Init@pInput& (0+255),b
 18281  0116B2  0E01               	movlw	high (_HMIBoard+28)
 18282  0116B4  0101               	movlb	1	; () banked
 18283  0116B6  6FBE               	movwf	(Button_Init@pInput+1)& (0+255),b
 18284  0116B8  0E00               	movlw	0
 18285  0116BA  0101               	movlb	1	; () banked
 18286  0116BC  6FC0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18287  0116BE  0E02               	movlw	2
 18288  0116C0  6FBF               	movwf	Button_Init@pThreshold& (0+255),b
 18289  0116C2  0E5E               	movlw	low _HMI_InitButtons
 18290  0116C4  0101               	movlb	1	; () banked
 18291  0116C6  6FC1               	movwf	Button_Init@pInitIO& (0+255),b
 18292  0116C8  0E4B               	movlw	high _HMI_InitButtons
 18293  0116CA  0101               	movlb	1	; () banked
 18294  0116CC  6FC2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18295  0116CE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18296  0116D0  0101               	movlb	1	; () banked
 18297  0116D2  6FC3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18298  0116D4  0ECA               	movlw	low _HMI_UpSwitch
 18299  0116D6  0101               	movlb	1	; () banked
 18300  0116D8  6FC4               	movwf	Button_Init@pGetState& (0+255),b
 18301  0116DA  0E49               	movlw	high _HMI_UpSwitch
 18302  0116DC  0101               	movlb	1	; () banked
 18303  0116DE  6FC5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18304  0116E0  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 18305  0116E2  0101               	movlb	1	; () banked
 18306  0116E4  6FC6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18307  0116E6  0EAC               	movlw	low _Event_HMI_UpButton
 18308  0116E8  0101               	movlb	1	; () banked
 18309  0116EA  6FC7               	movwf	Button_Init@pFunction& (0+255),b
 18310  0116EC  0E45               	movlw	high _Event_HMI_UpButton
 18311  0116EE  0101               	movlb	1	; () banked
 18312  0116F0  6FC8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18313  0116F2  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 18314  0116F4  0101               	movlb	1	; () banked
 18315  0116F6  6FC9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18316  0116F8  ECAE  F093         	call	_Button_Init	;wreg free
 18317                           
 18318                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 18319                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
 18320  0116FC  0E50               	movlw	low (_HMIBoard+38)
 18321  0116FE  0101               	movlb	1	; () banked
 18322  011700  6FBD               	movwf	Button_Init@pInput& (0+255),b
 18323  011702  0E01               	movlw	high (_HMIBoard+38)
 18324  011704  0101               	movlb	1	; () banked
 18325  011706  6FBE               	movwf	(Button_Init@pInput+1)& (0+255),b
 18326  011708  0E00               	movlw	0
 18327  01170A  0101               	movlb	1	; () banked
 18328  01170C  6FC0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18329  01170E  0E02               	movlw	2
 18330  011710  6FBF               	movwf	Button_Init@pThreshold& (0+255),b
 18331  011712  0E5E               	movlw	low _HMI_InitButtons
 18332  011714  0101               	movlb	1	; () banked
 18333  011716  6FC1               	movwf	Button_Init@pInitIO& (0+255),b
 18334  011718  0E4B               	movlw	high _HMI_InitButtons
 18335  01171A  0101               	movlb	1	; () banked
 18336  01171C  6FC2               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18337  01171E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18338  011720  0101               	movlb	1	; () banked
 18339  011722  6FC3               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18340  011724  0EB2               	movlw	low _HMI_DownSwitch
 18341  011726  0101               	movlb	1	; () banked
 18342  011728  6FC4               	movwf	Button_Init@pGetState& (0+255),b
 18343  01172A  0E49               	movlw	high _HMI_DownSwitch
 18344  01172C  0101               	movlb	1	; () banked
 18345  01172E  6FC5               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18346  011730  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 18347  011732  0101               	movlb	1	; () banked
 18348  011734  6FC6               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18349  011736  0E7A               	movlw	low _Event_HMI_DownButton
 18350  011738  0101               	movlb	1	; () banked
 18351  01173A  6FC7               	movwf	Button_Init@pFunction& (0+255),b
 18352  01173C  0E45               	movlw	high _Event_HMI_DownButton
 18353  01173E  0101               	movlb	1	; () banked
 18354  011740  6FC8               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18355  011742  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 18356  011744  0101               	movlb	1	; () banked
 18357  011746  6FC9               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18358  011748  ECAE  F093         	call	_Button_Init	;wreg free
 18359                           
 18360                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 18361  01174C  0EA0               	movlw	160
 18362  01174E  0100               	movlb	0	; () banked
 18363  011750  6FF2               	movwf	SPI_Init@pClock& (0+255),b
 18364  011752  0E86               	movlw	134
 18365  011754  6FF3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18366  011756  0E01               	movlw	1
 18367  011758  6FF4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18368  01175A  0E00               	movlw	0
 18369  01175C  6FF5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18370  01175E  0E00               	movlw	0
 18371  011760  0100               	movlb	0	; () banked
 18372  011762  6FF6               	movwf	SPI_Init@pChannel& (0+255),b
 18373  011764  0E02               	movlw	2
 18374  011766  0100               	movlb	0	; () banked
 18375  011768  6FF7               	movwf	SPI_Init@pMode& (0+255),b
 18376  01176A  EC00  F080         	call	_SPI_Init	;wreg free
 18377                           
 18378                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 18379  01176E  0E64               	movlw	low _SPI1
 18380  011770  0100               	movlb	0	; () banked
 18381  011772  6FD4               	movwf	SPI_MinSpeed@pInput& (0+255),b
 18382  011774  0E01               	movlw	high _SPI1
 18383  011776  0100               	movlb	0	; () banked
 18384  011778  6FD5               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 18385  01177A  ECB9  F09C         	call	_SPI_MinSpeed	;wreg free
 18386                           
 18387                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 18388  01177E  0E00               	movlw	0
 18389  011780  0101               	movlb	1	; () banked
 18390  011782  6FCB               	movwf	(HMI_Init@in+1)& (0+255),b
 18391  011784  0E00               	movlw	0
 18392  011786  6FCA               	movwf	HMI_Init@in& (0+255),b
 18393  011788                     l11892:
 18394                           
 18395                           ; BSR set to: 1
 18396  011788  0101               	movlb	1	; () banked
 18397  01178A  51CB               	movf	(HMI_Init@in+1)& (0+255),w,b
 18398  01178C  E113               	bnz	l1161
 18399  01178E  0E08               	movlw	8
 18400  011790  0101               	movlb	1	; () banked
 18401  011792  5DCA               	subwf	HMI_Init@in& (0+255),w,b
 18402  011794  B0D8               	btfsc	status,0,c
 18403  011796  0012               	return	
 18404                           
 18405                           ; BSR set to: 1
 18406                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 18407                           
 18408                           ; BSR set to: 1
 18409                           
 18410                           ; BSR set to: 1
 18411  011798  0E2A               	movlw	low _HMIBoard
 18412  01179A  0101               	movlb	1	; () banked
 18413  01179C  25CA               	addwf	HMI_Init@in& (0+255),w,b
 18414  01179E  6ED9               	movwf	fsr2l,c
 18415  0117A0  0E01               	movlw	high _HMIBoard
 18416  0117A2  0101               	movlb	1	; () banked
 18417  0117A4  21CB               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 18418  0117A6  6EDA               	movwf	fsr2h,c
 18419  0117A8  0E00               	movlw	0
 18420  0117AA  6EDF               	movwf	indf2,c
 18421                           
 18422                           ; BSR set to: 1
 18423  0117AC  0101               	movlb	1	; () banked
 18424  0117AE  4BCA               	infsnz	HMI_Init@in& (0+255),f,b
 18425  0117B0  2BCB               	incf	(HMI_Init@in+1)& (0+255),f,b
 18426  0117B2  D7EA               	goto	l11892
 18427  0117B4                     l1161:
 18428                           
 18429                           ; BSR set to: 1
 18430  0117B4  0012               	return		;funcret
 18431  0117B6                     __end_of_HMI_Init:
 18432                           	opt stack 0
 18433                           tosu	equ	0xFFF
 18434                           tosh	equ	0xFFE
 18435                           tosl	equ	0xFFD
 18436                           pclath	equ	0xFFA
 18437                           tblptru	equ	0xFF8
 18438                           tblptrh	equ	0xFF7
 18439                           tblptrl	equ	0xFF6
 18440                           tablat	equ	0xFF5
 18441                           prodh	equ	0xFF4
 18442                           prodl	equ	0xFF3
 18443                           intcon	equ	0xFF2
 18444                           postinc0	equ	0xFEE
 18445                           wreg	equ	0xFE8
 18446                           indf1	equ	0xFE7
 18447                           postdec1	equ	0xFE5
 18448                           fsr1h	equ	0xFE2
 18449                           fsr1l	equ	0xFE1
 18450                           indf2	equ	0xFDF
 18451                           postinc2	equ	0xFDE
 18452                           postdec2	equ	0xFDD
 18453                           plusw2	equ	0xFDB
 18454                           fsr2h	equ	0xFDA
 18455                           fsr2l	equ	0xFD9
 18456                           status	equ	0xFD8
 18457                           
 18458 ;; *************** function _SPI_MinSpeed *****************
 18459 ;; Defined at:
 18460 ;;		line 190 in file "Library/SPI.c"
 18461 ;; Parameters:    Size  Location     Type
 18462 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18463 ;;		 -> SPI1(11), 
 18464 ;; Auto vars:     Size  Location     Type
 18465 ;;		None
 18466 ;; Return value:  Size  Location     Type
 18467 ;;                  1    wreg      void 
 18468 ;; Registers used:
 18469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18470 ;; Tracked objects:
 18471 ;;		On entry : 0/0
 18472 ;;		On exit  : 0/0
 18473 ;;		Unchanged: 0/0
 18474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18475 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18479 ;;Total ram usage:        2 bytes
 18480 ;; Hardware stack levels used:    1
 18481 ;; Hardware stack levels required when called:    9
 18482 ;; This function calls:
 18483 ;;		_Byte_SetBit
 18484 ;;		_Byte_SetQuad
 18485 ;; This function is called by:
 18486 ;;		_HMI_Init
 18487 ;; This function uses a non-reentrant model
 18488 ;;
 18489                           
 18490                           	psect	text107
 18491  013972                     __ptext107:
 18492                           	opt stack 0
 18493  013972                     _SPI_MinSpeed:
 18494                           	opt stack 19
 18495                           
 18496                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18497                           
 18498                           ; BSR set to: 1
 18499                           ;incstack = 0
 18500  013972  0100               	movlb	0	; () banked
 18501  013974  EE20 F006          	lfsr	2,6
 18502  013978  51D4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18503  01397A  26D9               	addwf	fsr2l,f,c
 18504  01397C  51D5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18505  01397E  22DA               	addwfc	fsr2h,f,c
 18506  013980  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 18507  013984  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 18508  013988  0E05               	movlw	5
 18509  01398A  0100               	movlb	0	; () banked
 18510  01398C  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 18511  01398E  0E00               	movlw	0
 18512  013990  0100               	movlb	0	; () banked
 18513  013992  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 18514  013994  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18515                           
 18516                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 18517  013998  0100               	movlb	0	; () banked
 18518  01399A  EE20 F006          	lfsr	2,6
 18519  01399E  51D4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18520  0139A0  26D9               	addwf	fsr2l,f,c
 18521  0139A2  51D5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18522  0139A4  22DA               	addwfc	fsr2h,f,c
 18523  0139A6  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 18524  0139AA  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 18525  0139AE  0E00               	movlw	0
 18526  0139B0  0100               	movlb	0	; () banked
 18527  0139B2  6FD2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 18528  0139B4  0E02               	movlw	2
 18529  0139B6  0100               	movlb	0	; () banked
 18530  0139B8  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18531  0139BA  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 18532                           
 18533                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 18534  0139BE  0100               	movlb	0	; () banked
 18535  0139C0  EE20 F006          	lfsr	2,6
 18536  0139C4  51D4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18537  0139C6  26D9               	addwf	fsr2l,f,c
 18538  0139C8  51D5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18539  0139CA  22DA               	addwfc	fsr2h,f,c
 18540  0139CC  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 18541  0139D0  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 18542  0139D4  0E05               	movlw	5
 18543  0139D6  0100               	movlb	0	; () banked
 18544  0139D8  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 18545  0139DA  0E01               	movlw	1
 18546  0139DC  0100               	movlb	0	; () banked
 18547  0139DE  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 18548  0139E0  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18549  0139E4  0012               	return		;funcret
 18550  0139E6                     __end_of_SPI_MinSpeed:
 18551                           	opt stack 0
 18552                           tosu	equ	0xFFF
 18553                           tosh	equ	0xFFE
 18554                           tosl	equ	0xFFD
 18555                           pclath	equ	0xFFA
 18556                           tblptru	equ	0xFF8
 18557                           tblptrh	equ	0xFF7
 18558                           tblptrl	equ	0xFF6
 18559                           tablat	equ	0xFF5
 18560                           prodh	equ	0xFF4
 18561                           prodl	equ	0xFF3
 18562                           intcon	equ	0xFF2
 18563                           postinc0	equ	0xFEE
 18564                           wreg	equ	0xFE8
 18565                           indf1	equ	0xFE7
 18566                           postdec1	equ	0xFE5
 18567                           fsr1h	equ	0xFE2
 18568                           fsr1l	equ	0xFE1
 18569                           indf2	equ	0xFDF
 18570                           postinc2	equ	0xFDE
 18571                           postdec2	equ	0xFDD
 18572                           plusw2	equ	0xFDB
 18573                           fsr2h	equ	0xFDA
 18574                           fsr2l	equ	0xFD9
 18575                           status	equ	0xFD8
 18576                           
 18577 ;; *************** function _SPI_Init *****************
 18578 ;; Defined at:
 18579 ;;		line 12 in file "Library/SPI.c"
 18580 ;; Parameters:    Size  Location     Type
 18581 ;;  pClock          4   45[BANK0 ] unsigned long 
 18582 ;;  pChannel        1   49[BANK0 ] enum E6744
 18583 ;;  pMode           1   50[BANK0 ] enum E6748
 18584 ;; Auto vars:     Size  Location     Type
 18585 ;;  pInput          2    0[BANK1 ] PTR struct SPI
 18586 ;;		 -> SPI1(11), SPI2(11), 
 18587 ;; Return value:  Size  Location     Type
 18588 ;;                  1    wreg      void 
 18589 ;; Registers used:
 18590 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18591 ;; Tracked objects:
 18592 ;;		On entry : 0/0
 18593 ;;		On exit  : 0/0
 18594 ;;		Unchanged: 0/0
 18595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18596 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18597 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18599 ;;      Totals:         0       6       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18600 ;;Total ram usage:        8 bytes
 18601 ;; Hardware stack levels used:    1
 18602 ;; Hardware stack levels required when called:   12
 18603 ;; This function calls:
 18604 ;;		_Byte_SetBit
 18605 ;;		_Byte_SetQuad
 18606 ;;		_Port_SetPinType
 18607 ;;		_SPI_DCS
 18608 ;;		_SPI_DisableISR
 18609 ;;		_Timer2_Init
 18610 ;; This function is called by:
 18611 ;;		_Configure_GPIOs
 18612 ;;		_HMI_Init
 18613 ;; This function uses a non-reentrant model
 18614 ;;
 18615                           
 18616                           	psect	text108
 18617  010000                     __ptext108:
 18618                           	opt stack 0
 18619  010000                     _SPI_Init:
 18620                           	opt stack 15
 18621                           
 18622                           ;SPI.c: 14: SPIPtr pInput;
 18623                           ;SPI.c: 16: switch (pChannel)
 18624                           
 18625                           ;incstack = 0
 18626  010000  D00C               	goto	l11240
 18627  010002                     l11234:
 18628                           
 18629                           ;SPI.c: 19: pInput = &SPI1;
 18630  010002  0E64               	movlw	low _SPI1
 18631  010004  0101               	movlb	1	; () banked
 18632  010006  6FB6               	movwf	SPI_Init@pInput& (0+255),b
 18633  010008  0E01               	movlw	high _SPI1
 18634  01000A  D004               	goto	L7
 18635  01000C                     l11236:
 18636                           
 18637                           ;SPI.c: 22: pInput = &SPI2;
 18638  01000C  0E6F               	movlw	low _SPI2
 18639  01000E  0101               	movlb	1	; () banked
 18640  010010  6FB6               	movwf	SPI_Init@pInput& (0+255),b
 18641  010012  0E01               	movlw	high _SPI2
 18642  010014                     L7:
 18643  010014  0101               	movlb	1	; () banked
 18644  010016  6FB7               	movwf	(SPI_Init@pInput+1)& (0+255),b
 18645                           
 18646                           ; BSR set to: 1
 18647                           ;SPI.c: 24: };
 18648                           
 18649                           ;SPI.c: 23: break;
 18650  010018  D008               	goto	l11242
 18651  01001A                     l11240:
 18652  01001A  0100               	movlb	0	; () banked
 18653  01001C  51F6               	movf	SPI_Init@pChannel& (0+255),w,b
 18654                           
 18655                           ; Switch size 1, requested type "space"
 18656                           ; Number of cases is 2, Range of values is 0 to 1
 18657                           ; switch strategies available:
 18658                           ; Name         Instructions Cycles
 18659                           ; simple_byte            7     4 (average)
 18660                           ;	Chosen strategy is simple_byte
 18661  01001E  0A00               	xorlw	0	; case 0
 18662  010020  B4D8               	btfsc	status,2,c
 18663  010022  D7EF               	goto	l11234
 18664  010024  0A01               	xorlw	1	; case 1
 18665  010026  B4D8               	btfsc	status,2,c
 18666  010028  D7F1               	goto	l11236
 18667  01002A                     l11242:
 18668                           
 18669                           ;SPI.c: 26: pInput->mChannel = pChannel;
 18670  01002A  0101               	movlb	1	; () banked
 18671  01002C  EE20 F002          	lfsr	2,2
 18672  010030  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18673  010032  26D9               	addwf	fsr2l,f,c
 18674  010034  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18675  010036  22DA               	addwfc	fsr2h,f,c
 18676  010038  C0F6  FFDF         	movff	SPI_Init@pChannel,indf2
 18677                           
 18678                           ;SPI.c: 35: switch (pChannel)
 18679  01003C  D0B1               	goto	l11262
 18680  01003E                     l11244:
 18681                           
 18682                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 18683  01003E  0E92               	movlw	low _PortC
 18684  010040  0100               	movlb	0	; () banked
 18685  010042  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18686  010044  0E00               	movlw	high _PortC
 18687  010046  0100               	movlb	0	; () banked
 18688  010048  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18689  01004A  0E02               	movlw	2
 18690  01004C  0100               	movlb	0	; () banked
 18691  01004E  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18692  010050  0E03               	movlw	3
 18693  010052  0100               	movlb	0	; () banked
 18694  010054  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18695  010056  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18696                           
 18697                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 18698  01005A  0E92               	movlw	low _PortC
 18699  01005C  0100               	movlb	0	; () banked
 18700  01005E  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18701  010060  0E00               	movlw	high _PortC
 18702  010062  0100               	movlb	0	; () banked
 18703  010064  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18704  010066  0E03               	movlw	3
 18705  010068  0100               	movlb	0	; () banked
 18706  01006A  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18707  01006C  0E03               	movlw	3
 18708  01006E  0100               	movlb	0	; () banked
 18709  010070  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18710  010072  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18711                           
 18712                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 18713  010076  0E92               	movlw	low _PortC
 18714  010078  0100               	movlb	0	; () banked
 18715  01007A  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18716  01007C  0E00               	movlw	high _PortC
 18717  01007E  0100               	movlb	0	; () banked
 18718  010080  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18719  010082  0E05               	movlw	5
 18720  010084  0100               	movlb	0	; () banked
 18721  010086  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18722  010088  0E03               	movlw	3
 18723  01008A  0100               	movlb	0	; () banked
 18724  01008C  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18725  01008E  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18726                           
 18727                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 18728  010092  0E92               	movlw	low _PortC
 18729  010094  0100               	movlb	0	; () banked
 18730  010096  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18731  010098  0E00               	movlw	high _PortC
 18732  01009A  0100               	movlb	0	; () banked
 18733  01009C  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18734  01009E  0E04               	movlw	4
 18735  0100A0  0100               	movlb	0	; () banked
 18736  0100A2  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18737  0100A4  0E00               	movlw	0
 18738  0100A6  0100               	movlb	0	; () banked
 18739  0100A8  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18740  0100AA  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18741                           
 18742                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 18743  0100AE  0101               	movlb	1	; () banked
 18744  0100B0  EE20 F003          	lfsr	2,3
 18745  0100B4  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18746  0100B6  26D9               	addwf	fsr2l,f,c
 18747  0100B8  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18748  0100BA  22DA               	addwfc	fsr2h,f,c
 18749  0100BC  0EC7               	movlw	199
 18750  0100BE  6EDE               	movwf	postinc2,c
 18751  0100C0  0E0F               	movlw	15
 18752  0100C2  6EDD               	movwf	postdec2,c
 18753                           
 18754                           ; BSR set to: 1
 18755                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 18756  0100C4  0101               	movlb	1	; () banked
 18757  0100C6  EE20 F006          	lfsr	2,6
 18758  0100CA  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18759  0100CC  26D9               	addwf	fsr2l,f,c
 18760  0100CE  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18761  0100D0  22DA               	addwfc	fsr2h,f,c
 18762  0100D2  0EC6               	movlw	198
 18763  0100D4  6EDE               	movwf	postinc2,c
 18764  0100D6  0E0F               	movlw	15
 18765  0100D8  6EDD               	movwf	postdec2,c
 18766                           
 18767                           ; BSR set to: 1
 18768                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 18769  0100DA  0101               	movlb	1	; () banked
 18770  0100DC  EE20 F009          	lfsr	2,9
 18771  0100E0  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18772  0100E2  26D9               	addwf	fsr2l,f,c
 18773  0100E4  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18774  0100E6  22DA               	addwfc	fsr2h,f,c
 18775  0100E8  0EC9               	movlw	201
 18776  0100EA  D056               	goto	L8
 18777  0100EC                     l11252:
 18778                           
 18779                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 18780  0100EC  0E88               	movlw	low _PortD
 18781  0100EE  0100               	movlb	0	; () banked
 18782  0100F0  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18783  0100F2  0E00               	movlw	high _PortD
 18784  0100F4  0100               	movlb	0	; () banked
 18785  0100F6  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18786  0100F8  0E07               	movlw	7
 18787  0100FA  0100               	movlb	0	; () banked
 18788  0100FC  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18789  0100FE  0E03               	movlw	3
 18790  010100  0100               	movlb	0	; () banked
 18791  010102  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18792  010104  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18793                           
 18794                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 18795  010108  0E88               	movlw	low _PortD
 18796  01010A  0100               	movlb	0	; () banked
 18797  01010C  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18798  01010E  0E00               	movlw	high _PortD
 18799  010110  0100               	movlb	0	; () banked
 18800  010112  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18801  010114  0E06               	movlw	6
 18802  010116  0100               	movlb	0	; () banked
 18803  010118  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18804  01011A  0E03               	movlw	3
 18805  01011C  0100               	movlb	0	; () banked
 18806  01011E  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18807  010120  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18808                           
 18809                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 18810  010124  0E88               	movlw	low _PortD
 18811  010126  0100               	movlb	0	; () banked
 18812  010128  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18813  01012A  0E00               	movlw	high _PortD
 18814  01012C  0100               	movlb	0	; () banked
 18815  01012E  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18816  010130  0E04               	movlw	4
 18817  010132  0100               	movlb	0	; () banked
 18818  010134  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18819  010136  0E03               	movlw	3
 18820  010138  0100               	movlb	0	; () banked
 18821  01013A  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18822  01013C  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18823                           
 18824                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 18825  010140  0E88               	movlw	low _PortD
 18826  010142  0100               	movlb	0	; () banked
 18827  010144  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 18828  010146  0E00               	movlw	high _PortD
 18829  010148  0100               	movlb	0	; () banked
 18830  01014A  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18831  01014C  0E05               	movlw	5
 18832  01014E  0100               	movlb	0	; () banked
 18833  010150  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 18834  010152  0E00               	movlw	0
 18835  010154  0100               	movlb	0	; () banked
 18836  010156  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 18837  010158  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 18838                           
 18839                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 18840  01015C  0101               	movlb	1	; () banked
 18841  01015E  EE20 F003          	lfsr	2,3
 18842  010162  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18843  010164  26D9               	addwf	fsr2l,f,c
 18844  010166  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18845  010168  22DA               	addwfc	fsr2h,f,c
 18846  01016A  0E6D               	movlw	109
 18847  01016C  6EDE               	movwf	postinc2,c
 18848  01016E  0E0F               	movlw	15
 18849  010170  6EDD               	movwf	postdec2,c
 18850                           
 18851                           ; BSR set to: 1
 18852                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 18853  010172  0101               	movlb	1	; () banked
 18854  010174  EE20 F006          	lfsr	2,6
 18855  010178  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18856  01017A  26D9               	addwf	fsr2l,f,c
 18857  01017C  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18858  01017E  22DA               	addwfc	fsr2h,f,c
 18859  010180  0E6C               	movlw	108
 18860  010182  6EDE               	movwf	postinc2,c
 18861  010184  0E0F               	movlw	15
 18862  010186  6EDD               	movwf	postdec2,c
 18863                           
 18864                           ; BSR set to: 1
 18865                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 18866  010188  0101               	movlb	1	; () banked
 18867  01018A  EE20 F009          	lfsr	2,9
 18868  01018E  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18869  010190  26D9               	addwf	fsr2l,f,c
 18870  010192  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18871  010194  22DA               	addwfc	fsr2h,f,c
 18872  010196  0E6F               	movlw	111
 18873  010198                     L8:
 18874  010198  6EDE               	movwf	postinc2,c
 18875  01019A  0E0F               	movlw	15
 18876  01019C  6EDD               	movwf	postdec2,c
 18877                           
 18878                           ;SPI.c: 68: break;
 18879  01019E  D009               	goto	l11264
 18880  0101A0                     l11262:
 18881                           
 18882                           ; BSR set to: 1
 18883  0101A0  0100               	movlb	0	; () banked
 18884  0101A2  51F6               	movf	SPI_Init@pChannel& (0+255),w,b
 18885                           
 18886                           ; Switch size 1, requested type "space"
 18887                           ; Number of cases is 2, Range of values is 0 to 1
 18888                           ; switch strategies available:
 18889                           ; Name         Instructions Cycles
 18890                           ; simple_byte            7     4 (average)
 18891                           ;	Chosen strategy is simple_byte
 18892  0101A4  0A00               	xorlw	0	; case 0
 18893  0101A6  B4D8               	btfsc	status,2,c
 18894  0101A8  D74A               	goto	l11244
 18895  0101AA  0A01               	xorlw	1	; case 1
 18896  0101AC  A4D8               	btfss	status,2,c
 18897  0101AE  0012               	return	
 18898  0101B0  D79D               	goto	l11252
 18899  0101B2                     l11264:
 18900                           
 18901                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18902  0101B2  0101               	movlb	1	; () banked
 18903  0101B4  EE20 F006          	lfsr	2,6
 18904  0101B8  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18905  0101BA  26D9               	addwf	fsr2l,f,c
 18906  0101BC  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18907  0101BE  22DA               	addwfc	fsr2h,f,c
 18908  0101C0  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 18909  0101C4  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 18910  0101C8  0E05               	movlw	5
 18911  0101CA  0100               	movlb	0	; () banked
 18912  0101CC  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 18913  0101CE  0E00               	movlw	0
 18914  0101D0  0100               	movlb	0	; () banked
 18915  0101D2  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 18916  0101D4  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18917                           
 18918                           ;SPI.c: 77: switch(pMode)
 18919  0101D8  D09C               	goto	l11276
 18920  0101DA                     l11266:
 18921                           
 18922                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 18923  0101DA  0101               	movlb	1	; () banked
 18924  0101DC  EE20 F006          	lfsr	2,6
 18925  0101E0  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18926  0101E2  26D9               	addwf	fsr2l,f,c
 18927  0101E4  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18928  0101E6  22DA               	addwfc	fsr2h,f,c
 18929  0101E8  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 18930  0101EC  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 18931  0101F0  0E04               	movlw	4
 18932  0101F2  0100               	movlb	0	; () banked
 18933  0101F4  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 18934  0101F6  0E00               	movlw	0
 18935  0101F8  0100               	movlb	0	; () banked
 18936  0101FA  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 18937  0101FC  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18938                           
 18939                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 18940  010200  0101               	movlb	1	; () banked
 18941  010202  EE20 F003          	lfsr	2,3
 18942  010206  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18943  010208  26D9               	addwf	fsr2l,f,c
 18944  01020A  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18945  01020C  22DA               	addwfc	fsr2h,f,c
 18946  01020E  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 18947  010212  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 18948  010216  0E06               	movlw	6
 18949  010218  0100               	movlb	0	; () banked
 18950  01021A  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 18951  01021C  0E00               	movlw	0
 18952  01021E  0100               	movlb	0	; () banked
 18953  010220  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 18954  010222  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18955                           
 18956                           ;SPI.c: 82: break;
 18957  010226  D084               	goto	l11278
 18958  010228                     l11268:
 18959                           
 18960                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 18961  010228  0101               	movlb	1	; () banked
 18962  01022A  EE20 F006          	lfsr	2,6
 18963  01022E  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18964  010230  26D9               	addwf	fsr2l,f,c
 18965  010232  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18966  010234  22DA               	addwfc	fsr2h,f,c
 18967  010236  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 18968  01023A  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 18969  01023E  0E04               	movlw	4
 18970  010240  0100               	movlb	0	; () banked
 18971  010242  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 18972  010244  0E00               	movlw	0
 18973  010246  0100               	movlb	0	; () banked
 18974  010248  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 18975  01024A  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18976                           
 18977                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 18978  01024E  0101               	movlb	1	; () banked
 18979  010250  EE20 F003          	lfsr	2,3
 18980  010254  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 18981  010256  26D9               	addwf	fsr2l,f,c
 18982  010258  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 18983  01025A  22DA               	addwfc	fsr2h,f,c
 18984  01025C  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 18985  010260  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 18986  010264  0E06               	movlw	6
 18987  010266  0100               	movlb	0	; () banked
 18988  010268  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 18989  01026A  0E01               	movlw	1
 18990  01026C  0100               	movlb	0	; () banked
 18991  01026E  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 18992  010270  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 18993                           
 18994                           ;SPI.c: 86: break;
 18995  010274  D05D               	goto	l11278
 18996  010276                     l11270:
 18997                           
 18998                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 18999  010276  0101               	movlb	1	; () banked
 19000  010278  EE20 F006          	lfsr	2,6
 19001  01027C  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19002  01027E  26D9               	addwf	fsr2l,f,c
 19003  010280  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19004  010282  22DA               	addwfc	fsr2h,f,c
 19005  010284  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 19006  010288  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 19007  01028C  0E04               	movlw	4
 19008  01028E  0100               	movlb	0	; () banked
 19009  010290  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 19010  010292  0E01               	movlw	1
 19011  010294  0100               	movlb	0	; () banked
 19012  010296  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 19013  010298  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 19014                           
 19015                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19016  01029C  0101               	movlb	1	; () banked
 19017  01029E  EE20 F003          	lfsr	2,3
 19018  0102A2  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19019  0102A4  26D9               	addwf	fsr2l,f,c
 19020  0102A6  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19021  0102A8  22DA               	addwfc	fsr2h,f,c
 19022  0102AA  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 19023  0102AE  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 19024  0102B2  0E06               	movlw	6
 19025  0102B4  0100               	movlb	0	; () banked
 19026  0102B6  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 19027  0102B8  0E00               	movlw	0
 19028  0102BA  0100               	movlb	0	; () banked
 19029  0102BC  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 19030  0102BE  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 19031                           
 19032                           ;SPI.c: 90: break;
 19033  0102C2  D036               	goto	l11278
 19034  0102C4                     l11272:
 19035                           
 19036                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19037  0102C4  0101               	movlb	1	; () banked
 19038  0102C6  EE20 F006          	lfsr	2,6
 19039  0102CA  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19040  0102CC  26D9               	addwf	fsr2l,f,c
 19041  0102CE  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19042  0102D0  22DA               	addwfc	fsr2h,f,c
 19043  0102D2  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 19044  0102D6  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 19045  0102DA  0E04               	movlw	4
 19046  0102DC  0100               	movlb	0	; () banked
 19047  0102DE  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 19048  0102E0  0E01               	movlw	1
 19049  0102E2  0100               	movlb	0	; () banked
 19050  0102E4  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 19051  0102E6  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 19052                           
 19053                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19054  0102EA  0101               	movlb	1	; () banked
 19055  0102EC  EE20 F003          	lfsr	2,3
 19056  0102F0  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19057  0102F2  26D9               	addwf	fsr2l,f,c
 19058  0102F4  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19059  0102F6  22DA               	addwfc	fsr2h,f,c
 19060  0102F8  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 19061  0102FC  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 19062  010300  0E06               	movlw	6
 19063  010302  0100               	movlb	0	; () banked
 19064  010304  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 19065  010306  0E01               	movlw	1
 19066  010308  0100               	movlb	0	; () banked
 19067  01030A  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 19068  01030C  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 19069                           
 19070                           ;SPI.c: 94: break;
 19071  010310  D00F               	goto	l11278
 19072  010312                     l11276:
 19073  010312  0100               	movlb	0	; () banked
 19074  010314  51F7               	movf	SPI_Init@pMode& (0+255),w,b
 19075                           
 19076                           ; Switch size 1, requested type "space"
 19077                           ; Number of cases is 4, Range of values is 0 to 3
 19078                           ; switch strategies available:
 19079                           ; Name         Instructions Cycles
 19080                           ; simple_byte           13     7 (average)
 19081                           ;	Chosen strategy is simple_byte
 19082  010316  0A00               	xorlw	0	; case 0
 19083  010318  B4D8               	btfsc	status,2,c
 19084  01031A  D75F               	goto	l11266
 19085  01031C  0A01               	xorlw	1	; case 1
 19086  01031E  B4D8               	btfsc	status,2,c
 19087  010320  D783               	goto	l11268
 19088  010322  0A03               	xorlw	3	; case 2
 19089  010324  B4D8               	btfsc	status,2,c
 19090  010326  D7A7               	goto	l11270
 19091  010328  0A01               	xorlw	1	; case 3
 19092  01032A  A4D8               	btfss	status,2,c
 19093  01032C  0012               	return	
 19094  01032E  D7CA               	goto	l11272
 19095  010330                     l11278:
 19096                           
 19097                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 19098  010330  0101               	movlb	1	; () banked
 19099  010332  EE20 F006          	lfsr	2,6
 19100  010336  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19101  010338  26D9               	addwf	fsr2l,f,c
 19102  01033A  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19103  01033C  22DA               	addwfc	fsr2h,f,c
 19104  01033E  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 19105  010342  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 19106  010346  0E07               	movlw	7
 19107  010348  0100               	movlb	0	; () banked
 19108  01034A  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 19109  01034C  0E00               	movlw	0
 19110  01034E  0100               	movlb	0	; () banked
 19111  010350  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 19112  010352  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 19113                           
 19114                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 19115  010356  0101               	movlb	1	; () banked
 19116  010358  EE20 F006          	lfsr	2,6
 19117  01035C  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19118  01035E  26D9               	addwf	fsr2l,f,c
 19119  010360  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19120  010362  22DA               	addwfc	fsr2h,f,c
 19121  010364  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 19122  010368  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 19123  01036C  0E06               	movlw	6
 19124  01036E  0100               	movlb	0	; () banked
 19125  010370  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 19126  010372  0E00               	movlw	0
 19127  010374  0100               	movlb	0	; () banked
 19128  010376  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 19129  010378  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 19130                           
 19131                           ;SPI.c: 106: Timer2_Init(pClock);
 19132  01037C  C0F2  F0D2         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 19133  010380  C0F3  F0D3         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 19134  010384  C0F4  F0D4         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 19135  010388  C0F5  F0D5         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 19136  01038C  EC1D  F091         	call	_Timer2_Init	;wreg free
 19137                           
 19138                           ;SPI.c: 112: SPI_DisableISR(pInput);
 19139  010390  C1B6  F0C5         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 19140  010394  C1B7  F0C6         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 19141  010398  ECE4  F0A3         	call	_SPI_DisableISR	;wreg free
 19142                           
 19143                           ;SPI.c: 116: switch (pChannel)
 19144  01039C  D004               	goto	l11286
 19145  01039E                     l615:
 19146                           
 19147                           ; BSR set to: 0
 19148  01039E  869F               	bsf	3999,3,c	;volatile
 19149  0103A0  D00B               	goto	l11288
 19150  0103A2                     l617:
 19151                           
 19152                           ; BSR set to: 0
 19153  0103A2  8EA5               	bsf	4005,7,c	;volatile
 19154  0103A4  D009               	goto	l11288
 19155  0103A6                     l11286:
 19156  0103A6  0100               	movlb	0	; () banked
 19157  0103A8  51F6               	movf	SPI_Init@pChannel& (0+255),w,b
 19158                           
 19159                           ; Switch size 1, requested type "space"
 19160                           ; Number of cases is 2, Range of values is 0 to 1
 19161                           ; switch strategies available:
 19162                           ; Name         Instructions Cycles
 19163                           ; simple_byte            7     4 (average)
 19164                           ;	Chosen strategy is simple_byte
 19165  0103AA  0A00               	xorlw	0	; case 0
 19166  0103AC  B4D8               	btfsc	status,2,c
 19167  0103AE  D7F7               	goto	l615
 19168  0103B0  0A01               	xorlw	1	; case 1
 19169  0103B2  A4D8               	btfss	status,2,c
 19170  0103B4  0012               	return	
 19171  0103B6  D7F5               	goto	l617
 19172  0103B8                     l11288:
 19173                           
 19174                           ; BSR set to: 0
 19175                           ;SPI.c: 124: SPI_DCS(pInput);
 19176  0103B8  C1B6  F0C5         	movff	SPI_Init@pInput,SPI_DCS@pInput
 19177  0103BC  C1B7  F0C6         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 19178  0103C0  EC1E  F0A3         	call	_SPI_DCS	;wreg free
 19179                           
 19180                           ;SPI.c: 126: pInput->mBusy = 0;
 19181  0103C4  C1B6  FFD9         	movff	SPI_Init@pInput,fsr2l
 19182  0103C8  C1B7  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 19183  0103CC  0E00               	movlw	0
 19184  0103CE  6EDF               	movwf	indf2,c
 19185                           
 19186                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 19187  0103D0  0101               	movlb	1	; () banked
 19188  0103D2  EE20 F006          	lfsr	2,6
 19189  0103D6  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19190  0103D8  26D9               	addwf	fsr2l,f,c
 19191  0103DA  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19192  0103DC  22DA               	addwfc	fsr2h,f,c
 19193  0103DE  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 19194  0103E2  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 19195  0103E6  0E00               	movlw	0
 19196  0103E8  0100               	movlb	0	; () banked
 19197  0103EA  6FD2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19198  0103EC  0E03               	movlw	3
 19199  0103EE  0100               	movlb	0	; () banked
 19200  0103F0  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 19201  0103F2  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 19202                           
 19203                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19204  0103F6  0101               	movlb	1	; () banked
 19205  0103F8  EE20 F006          	lfsr	2,6
 19206  0103FC  51B6               	movf	SPI_Init@pInput& (0+255),w,b
 19207  0103FE  26D9               	addwf	fsr2l,f,c
 19208  010400  51B7               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19209  010402  22DA               	addwfc	fsr2h,f,c
 19210  010404  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 19211  010408  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 19212  01040C  0E05               	movlw	5
 19213  01040E  0100               	movlb	0	; () banked
 19214  010410  6FC7               	movwf	Byte_SetBit@pBit& (0+255),b
 19215  010412  0E01               	movlw	1
 19216  010414  0100               	movlb	0	; () banked
 19217  010416  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 19218  010418  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 19219  01041C  0012               	return		;funcret
 19220  01041E                     __end_of_SPI_Init:
 19221                           	opt stack 0
 19222                           tosu	equ	0xFFF
 19223                           tosh	equ	0xFFE
 19224                           tosl	equ	0xFFD
 19225                           pclath	equ	0xFFA
 19226                           tblptru	equ	0xFF8
 19227                           tblptrh	equ	0xFF7
 19228                           tblptrl	equ	0xFF6
 19229                           tablat	equ	0xFF5
 19230                           prodh	equ	0xFF4
 19231                           prodl	equ	0xFF3
 19232                           intcon	equ	0xFF2
 19233                           postinc0	equ	0xFEE
 19234                           wreg	equ	0xFE8
 19235                           indf1	equ	0xFE7
 19236                           postdec1	equ	0xFE5
 19237                           fsr1h	equ	0xFE2
 19238                           fsr1l	equ	0xFE1
 19239                           indf2	equ	0xFDF
 19240                           postinc2	equ	0xFDE
 19241                           postdec2	equ	0xFDD
 19242                           plusw2	equ	0xFDB
 19243                           fsr2h	equ	0xFDA
 19244                           fsr2l	equ	0xFD9
 19245                           status	equ	0xFD8
 19246                           
 19247 ;; *************** function _Timer2_Init *****************
 19248 ;; Defined at:
 19249 ;;		line 10 in file "Library/Timer2.c"
 19250 ;; Parameters:    Size  Location     Type
 19251 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 19252 ;; Auto vars:     Size  Location     Type
 19253 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 19254 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 19255 ;;  RDIV            4   18[BANK0 ] unsigned long 
 19256 ;; Return value:  Size  Location     Type
 19257 ;;                  1    wreg      void 
 19258 ;; Registers used:
 19259 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19260 ;; Tracked objects:
 19261 ;;		On entry : 0/0
 19262 ;;		On exit  : 0/0
 19263 ;;		Unchanged: 0/0
 19264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19265 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19266 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19268 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19269 ;;Total ram usage:       17 bytes
 19270 ;; Hardware stack levels used:    1
 19271 ;; Hardware stack levels required when called:    8
 19272 ;; This function calls:
 19273 ;;		_Timer2_Clear
 19274 ;;		___lldiv
 19275 ;; This function is called by:
 19276 ;;		_SPI_Init
 19277 ;; This function uses a non-reentrant model
 19278 ;;
 19279                           
 19280                           	psect	text109
 19281  01223A                     __ptext109:
 19282                           	opt stack 0
 19283  01223A                     _Timer2_Init:
 19284                           	opt stack 18
 19285                           
 19286                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 19287                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 19288                           ;Timer2.c: 14: static UINT8 PRE = 0;
 19289                           ;Timer2.c: 15: static UINT32 DIV = 0;
 19290                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 19291                           
 19292                           ;incstack = 0
 19293  01223A  0E00               	movlw	0
 19294  01223C  0100               	movlb	0	; () banked
 19295  01223E  6FDB               	movwf	Timer2_Init@pCPUClock& (0+255),b
 19296  012240  0E6C               	movlw	108
 19297  012242  6FDC               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 19298  012244  0EDC               	movlw	220
 19299  012246  6FDD               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 19300  012248  0E02               	movlw	2
 19301  01224A  6FDE               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 19302                           
 19303                           ; BSR set to: 0
 19304                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 19305                           ;Timer2.c: 20: pFrequency *= 2;
 19306  01224C  0100               	movlb	0	; () banked
 19307  01224E  90D8               	bcf	status,0,c
 19308  012250  37D2               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 19309  012252  37D3               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 19310  012254  37D4               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 19311  012256  37D5               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 19312                           
 19313                           ; BSR set to: 0
 19314                           ;Timer2.c: 23: pCPUClock /= 4;
 19315  012258  0E02               	movlw	2
 19316  01225A  0100               	movlb	0	; () banked
 19317  01225C  6FD6               	movwf	??_Timer2_Init& (0+255),b
 19318  01225E                     u7515:
 19319  01225E  90D8               	bcf	status,0,c
 19320  012260  0100               	movlb	0	; () banked
 19321  012262  33DE               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 19322  012264  33DD               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 19323  012266  33DC               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 19324  012268  33DB               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 19325  01226A  0100               	movlb	0	; () banked
 19326  01226C  2FD6               	decfsz	??_Timer2_Init& (0+255),f,b
 19327  01226E  D7F7               	goto	u7515
 19328                           
 19329                           ; BSR set to: 0
 19330                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 19331  012270  C0DB  F0C5         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 19332  012274  C0DC  F0C6         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 19333  012278  C0DD  F0C7         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 19334  01227C  C0DE  F0C8         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 19335  012280  C0D2  F0C9         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 19336  012284  C0D3  F0CA         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 19337  012288  C0D4  F0CB         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 19338  01228C  C0D5  F0CC         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 19339  012290  ECA2  F095         	call	___lldiv	;wreg free
 19340  012294  C0C5  F0DF         	movff	?___lldiv,Timer2_Init@DIVIDE
 19341  012298  C0C6  F0E0         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 19342  01229C  C0C7  F0E1         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 19343  0122A0  C0C8  F0E2         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 19344                           
 19345                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 19346  0122A4  D00E               	goto	l11022
 19347  0122A6                     l11014:
 19348                           
 19349                           ;Timer2.c: 28: {
 19350                           ;Timer2.c: 29: RDIV = 0;
 19351  0122A6  0E00               	movlw	0
 19352  0122A8  0100               	movlb	0	; () banked
 19353  0122AA  6FD7               	movwf	Timer2_Init@RDIV& (0+255),b
 19354  0122AC  0E00               	movlw	0
 19355  0122AE  6FD8               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 19356  0122B0  0E00               	movlw	0
 19357  0122B2  6FD9               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 19358  0122B4  0E00               	movlw	0
 19359  0122B6  6FDA               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 19360                           
 19361                           ; BSR set to: 0
 19362                           ;Timer2.c: 30: INDEX ++;
 19363  0122B8  2A2F               	incf	Timer2_Init@INDEX,f,c
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;Timer2.c: 31: if (INDEX >= 3)
 19367  0122BA  0E02               	movlw	2
 19368  0122BC  642F               	cpfsgt	Timer2_Init@INDEX,c
 19369  0122BE  D001               	goto	l11022
 19370  0122C0  D025               	goto	l11024
 19371  0122C2                     l11022:
 19372  0122C2  C0DF  F0C5         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 19373  0122C6  C0E0  F0C6         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 19374  0122CA  C0E1  F0C7         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 19375  0122CE  C0E2  F0C8         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 19376  0122D2  502F               	movf	Timer2_Init@INDEX,w,c
 19377  0122D4  0D01               	mullw	1
 19378  0122D6  0E78               	movlw	low Timer2_Init@PRESCALE
 19379  0122D8  24F3               	addwf	prodl,w,c
 19380  0122DA  6EF6               	movwf	tblptrl,c
 19381  0122DC  0EFD               	movlw	high Timer2_Init@PRESCALE
 19382  0122DE  20F4               	addwfc	prodh,w,c
 19383  0122E0  6EF7               	movwf	tblptrh,c
 19384  0122E2                     	if	1	;There are 3 active tblptr bytes
 19385  0122E2  6AF8               	clrf	tblptru,c
 19386  0122E4  0E00               	movlw	low (__mediumconst shr (0+16))
 19387  0122E6  22F8               	addwfc	tblptru,f,c
 19388  0122E8                     	endif
 19389  0122E8  0008               	tblrd		*
 19390  0122EA  50F5               	movf	tablat,w,c
 19391  0122EC  0100               	movlb	0	; () banked
 19392  0122EE  6FC9               	movwf	___lldiv@divisor& (0+255),b
 19393  0122F0  6BCA               	clrf	(___lldiv@divisor+1)& (0+255),b
 19394  0122F2  6BCB               	clrf	(___lldiv@divisor+2)& (0+255),b
 19395  0122F4  6BCC               	clrf	(___lldiv@divisor+3)& (0+255),b
 19396  0122F6  ECA2  F095         	call	___lldiv	;wreg free
 19397  0122FA  0100               	movlb	0	; () banked
 19398  0122FC  51C8               	movf	(?___lldiv+3)& (0+255),w,b
 19399  0122FE  0100               	movlb	0	; () banked
 19400  012300  11C7               	iorwf	(?___lldiv+2)& (0+255),w,b
 19401  012302  E1D1               	bnz	l11014
 19402  012304  0100               	movlb	0	; () banked
 19403  012306  05C6               	decf	(?___lldiv+1)& (0+255),w,b
 19404  012308  B0D8               	btfsc	status,0,c
 19405  01230A  D7CD               	goto	l11014
 19406  01230C                     l11024:
 19407                           
 19408                           ; BSR set to: 0
 19409                           ;Timer2.c: 33: }
 19410                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 19411  01230C  50CA               	movf	4042,w,c	;volatile
 19412  01230E  182F               	xorwf	Timer2_Init@INDEX,w,c
 19413  012310  0BFC               	andlw	-4
 19414  012312  182F               	xorwf	Timer2_Init@INDEX,w,c
 19415  012314  6ECA               	movwf	4042,c	;volatile
 19416                           
 19417                           ; BSR set to: 0
 19418                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 19419  012316  84CA               	bsf	4042,2,c	;volatile
 19420                           
 19421                           ; BSR set to: 0
 19422                           ;Timer2.c: 44: Timer2_Clear();
 19423  012318  EC9B  F0A5         	call	_Timer2_Clear	;wreg free
 19424                           
 19425                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 19426  01231C  502F               	movf	Timer2_Init@INDEX,w,c
 19427  01231E  0D01               	mullw	1
 19428  012320  0E78               	movlw	low Timer2_Init@PRESCALE
 19429  012322  24F3               	addwf	prodl,w,c
 19430  012324  6EF6               	movwf	tblptrl,c
 19431  012326  0EFD               	movlw	high Timer2_Init@PRESCALE
 19432  012328  20F4               	addwfc	prodh,w,c
 19433  01232A  6EF7               	movwf	tblptrh,c
 19434  01232C                     	if	1	;There are 3 active tblptr bytes
 19435  01232C  6AF8               	clrf	tblptru,c
 19436  01232E  0E00               	movlw	low (__mediumconst shr (0+16))
 19437  012330  22F8               	addwfc	tblptru,f,c
 19438  012332                     	endif
 19439  012332  0008               	tblrd		*
 19440  012334  CFF5 F02E          	movff	tablat,Timer2_Init@PRE
 19441                           
 19442                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 19443  012338  0EFF               	movlw	255
 19444  01233A  0100               	movlb	0	; () banked
 19445  01233C  25DF               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 19446  01233E  0100               	movlb	0	; () banked
 19447  012340  6F60               	movwf	Timer2_Init@DIV& (0+255),b
 19448  012342  0EFF               	movlw	255
 19449  012344  0100               	movlb	0	; () banked
 19450  012346  21E0               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 19451  012348  0100               	movlb	0	; () banked
 19452  01234A  6F61               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 19453  01234C  0EFF               	movlw	255
 19454  01234E  0100               	movlb	0	; () banked
 19455  012350  21E1               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 19456  012352  0100               	movlb	0	; () banked
 19457  012354  6F62               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 19458  012356  0EFF               	movlw	255
 19459  012358  0100               	movlb	0	; () banked
 19460  01235A  21E2               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 19461  01235C  0100               	movlb	0	; () banked
 19462  01235E  6F63               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 19463                           
 19464                           ; BSR set to: 0
 19465                           ;Timer2.c: 48: INDEX = DIV/PRE;
 19466  012360  C060  F0C5         	movff	Timer2_Init@DIV,___lldiv@dividend
 19467  012364  C061  F0C6         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 19468  012368  C062  F0C7         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 19469  01236C  C063  F0C8         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 19470  012370  502E               	movf	Timer2_Init@PRE,w,c
 19471  012372  0100               	movlb	0	; () banked
 19472  012374  6FC9               	movwf	___lldiv@divisor& (0+255),b
 19473  012376  6BCA               	clrf	(___lldiv@divisor+1)& (0+255),b
 19474  012378  6BCB               	clrf	(___lldiv@divisor+2)& (0+255),b
 19475  01237A  6BCC               	clrf	(___lldiv@divisor+3)& (0+255),b
 19476  01237C  ECA2  F095         	call	___lldiv	;wreg free
 19477  012380  0100               	movlb	0	; () banked
 19478  012382  51C5               	movf	?___lldiv& (0+255),w,b
 19479  012384  6E2F               	movwf	Timer2_Init@INDEX,c
 19480                           
 19481                           ; BSR set to: 0
 19482                           ;Timer2.c: 49: PR2 = INDEX;
 19483  012386  C02F  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 19484                           
 19485                           ; BSR set to: 0
 19486  01238A  0012               	return		;funcret
 19487  01238C                     __end_of_Timer2_Init:
 19488                           	opt stack 0
 19489                           tosu	equ	0xFFF
 19490                           tosh	equ	0xFFE
 19491                           tosl	equ	0xFFD
 19492                           pclath	equ	0xFFA
 19493                           tblptru	equ	0xFF8
 19494                           tblptrh	equ	0xFF7
 19495                           tblptrl	equ	0xFF6
 19496                           tablat	equ	0xFF5
 19497                           prodh	equ	0xFF4
 19498                           prodl	equ	0xFF3
 19499                           intcon	equ	0xFF2
 19500                           postinc0	equ	0xFEE
 19501                           wreg	equ	0xFE8
 19502                           indf1	equ	0xFE7
 19503                           postdec1	equ	0xFE5
 19504                           fsr1h	equ	0xFE2
 19505                           fsr1l	equ	0xFE1
 19506                           indf2	equ	0xFDF
 19507                           postinc2	equ	0xFDE
 19508                           postdec2	equ	0xFDD
 19509                           plusw2	equ	0xFDB
 19510                           fsr2h	equ	0xFDA
 19511                           fsr2l	equ	0xFD9
 19512                           status	equ	0xFD8
 19513                           
 19514 ;; *************** function ___lldiv *****************
 19515 ;; Defined at:
 19516 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
 19517 ;; Parameters:    Size  Location     Type
 19518 ;;  dividend        4    0[BANK0 ] unsigned long 
 19519 ;;  divisor         4    4[BANK0 ] unsigned long 
 19520 ;; Auto vars:     Size  Location     Type
 19521 ;;  quotient        4    8[BANK0 ] unsigned long 
 19522 ;;  counter         1   12[BANK0 ] unsigned char 
 19523 ;; Return value:  Size  Location     Type
 19524 ;;                  4    0[BANK0 ] unsigned long 
 19525 ;; Registers used:
 19526 ;;		wreg, status,2, status,0
 19527 ;; Tracked objects:
 19528 ;;		On entry : 0/0
 19529 ;;		On exit  : 0/0
 19530 ;;		Unchanged: 0/0
 19531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19532 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19533 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19535 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19536 ;;Total ram usage:       13 bytes
 19537 ;; Hardware stack levels used:    1
 19538 ;; Hardware stack levels required when called:    7
 19539 ;; This function calls:
 19540 ;;		Nothing
 19541 ;; This function is called by:
 19542 ;;		_Timer0_Init
 19543 ;;		_Timer2_Init
 19544 ;;		_printf
 19545 ;;		_rand_between
 19546 ;;		_I2C_Init
 19547 ;; This function uses a non-reentrant model
 19548 ;;
 19549                           
 19550                           	psect	text110
 19551  012B44                     __ptext110:
 19552                           	opt stack 0
 19553  012B44                     ___lldiv:
 19554                           	opt stack 20
 19555                           
 19556                           ; BSR set to: 0
 19557                           ;incstack = 0
 19558  012B44  0E00               	movlw	0
 19559  012B46  0100               	movlb	0	; () banked
 19560  012B48  6FCD               	movwf	___lldiv@quotient& (0+255),b
 19561  012B4A  0E00               	movlw	0
 19562  012B4C  6FCE               	movwf	(___lldiv@quotient+1)& (0+255),b
 19563  012B4E  0E00               	movlw	0
 19564  012B50  6FCF               	movwf	(___lldiv@quotient+2)& (0+255),b
 19565  012B52  0E00               	movlw	0
 19566  012B54  6FD0               	movwf	(___lldiv@quotient+3)& (0+255),b
 19567                           
 19568                           ; BSR set to: 0
 19569  012B56  0100               	movlb	0	; () banked
 19570  012B58  51C9               	movf	___lldiv@divisor& (0+255),w,b
 19571  012B5A  0100               	movlb	0	; () banked
 19572  012B5C  11CA               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 19573  012B5E  0100               	movlb	0	; () banked
 19574  012B60  11CB               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 19575  012B62  0100               	movlb	0	; () banked
 19576  012B64  11CC               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 19577  012B66  B4D8               	btfsc	status,2,c
 19578  012B68  D042               	goto	l2454
 19579                           
 19580                           ; BSR set to: 0
 19581  012B6A  0E01               	movlw	1
 19582  012B6C  0100               	movlb	0	; () banked
 19583  012B6E  6FD1               	movwf	___lldiv@counter& (0+255),b
 19584  012B70  D008               	goto	l10850
 19585  012B72                     l10848:
 19586                           
 19587                           ; BSR set to: 0
 19588  012B72  0100               	movlb	0	; () banked
 19589  012B74  90D8               	bcf	status,0,c
 19590  012B76  37C9               	rlcf	___lldiv@divisor& (0+255),f,b
 19591  012B78  37CA               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 19592  012B7A  37CB               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 19593  012B7C  37CC               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 19594  012B7E  0100               	movlb	0	; () banked
 19595  012B80  2BD1               	incf	___lldiv@counter& (0+255),f,b
 19596  012B82                     l10850:
 19597                           
 19598                           ; BSR set to: 0
 19599  012B82  0100               	movlb	0	; () banked
 19600  012B84  AFCC               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 19601  012B86  D7F5               	goto	l10848
 19602  012B88                     l10852:
 19603                           
 19604                           ; BSR set to: 0
 19605  012B88  0100               	movlb	0	; () banked
 19606  012B8A  90D8               	bcf	status,0,c
 19607  012B8C  37CD               	rlcf	___lldiv@quotient& (0+255),f,b
 19608  012B8E  37CE               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 19609  012B90  37CF               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 19610  012B92  37D0               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 19611                           
 19612                           ; BSR set to: 0
 19613  012B94  0100               	movlb	0	; () banked
 19614  012B96  51C9               	movf	___lldiv@divisor& (0+255),w,b
 19615  012B98  0100               	movlb	0	; () banked
 19616  012B9A  5DC5               	subwf	___lldiv@dividend& (0+255),w,b
 19617  012B9C  0100               	movlb	0	; () banked
 19618  012B9E  51CA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19619  012BA0  0100               	movlb	0	; () banked
 19620  012BA2  59C6               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 19621  012BA4  0100               	movlb	0	; () banked
 19622  012BA6  51CB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19623  012BA8  0100               	movlb	0	; () banked
 19624  012BAA  59C7               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 19625  012BAC  0100               	movlb	0	; () banked
 19626  012BAE  51CC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19627  012BB0  0100               	movlb	0	; () banked
 19628  012BB2  59C8               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 19629  012BB4  A0D8               	btfss	status,0,c
 19630  012BB6  D012               	goto	l10860
 19631                           
 19632                           ; BSR set to: 0
 19633  012BB8  0100               	movlb	0	; () banked
 19634  012BBA  51C9               	movf	___lldiv@divisor& (0+255),w,b
 19635  012BBC  0100               	movlb	0	; () banked
 19636  012BBE  5FC5               	subwf	___lldiv@dividend& (0+255),f,b
 19637  012BC0  0100               	movlb	0	; () banked
 19638  012BC2  51CA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 19639  012BC4  0100               	movlb	0	; () banked
 19640  012BC6  5BC6               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 19641  012BC8  0100               	movlb	0	; () banked
 19642  012BCA  51CB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 19643  012BCC  0100               	movlb	0	; () banked
 19644  012BCE  5BC7               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 19645  012BD0  0100               	movlb	0	; () banked
 19646  012BD2  51CC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 19647  012BD4  0100               	movlb	0	; () banked
 19648  012BD6  5BC8               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 19649                           
 19650                           ; BSR set to: 0
 19651  012BD8  0100               	movlb	0	; () banked
 19652  012BDA  81CD               	bsf	___lldiv@quotient& (0+255),0,b
 19653  012BDC                     l10860:
 19654                           
 19655                           ; BSR set to: 0
 19656  012BDC  0100               	movlb	0	; () banked
 19657  012BDE  90D8               	bcf	status,0,c
 19658  012BE0  33CC               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 19659  012BE2  33CB               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 19660  012BE4  33CA               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 19661  012BE6  33C9               	rrcf	___lldiv@divisor& (0+255),f,b
 19662                           
 19663                           ; BSR set to: 0
 19664  012BE8  0100               	movlb	0	; () banked
 19665  012BEA  2FD1               	decfsz	___lldiv@counter& (0+255),f,b
 19666  012BEC  D7CD               	goto	l10852
 19667  012BEE                     l2454:
 19668                           
 19669                           ; BSR set to: 0
 19670  012BEE  C0CD  F0C5         	movff	___lldiv@quotient,?___lldiv
 19671  012BF2  C0CE  F0C6         	movff	___lldiv@quotient+1,?___lldiv+1
 19672  012BF6  C0CF  F0C7         	movff	___lldiv@quotient+2,?___lldiv+2
 19673  012BFA  C0D0  F0C8         	movff	___lldiv@quotient+3,?___lldiv+3
 19674                           
 19675                           ; BSR set to: 0
 19676  012BFE  0012               	return		;funcret
 19677  012C00                     __end_of___lldiv:
 19678                           	opt stack 0
 19679                           tosu	equ	0xFFF
 19680                           tosh	equ	0xFFE
 19681                           tosl	equ	0xFFD
 19682                           pclath	equ	0xFFA
 19683                           tblptru	equ	0xFF8
 19684                           tblptrh	equ	0xFF7
 19685                           tblptrl	equ	0xFF6
 19686                           tablat	equ	0xFF5
 19687                           prodh	equ	0xFF4
 19688                           prodl	equ	0xFF3
 19689                           intcon	equ	0xFF2
 19690                           postinc0	equ	0xFEE
 19691                           wreg	equ	0xFE8
 19692                           indf1	equ	0xFE7
 19693                           postdec1	equ	0xFE5
 19694                           fsr1h	equ	0xFE2
 19695                           fsr1l	equ	0xFE1
 19696                           indf2	equ	0xFDF
 19697                           postinc2	equ	0xFDE
 19698                           postdec2	equ	0xFDD
 19699                           plusw2	equ	0xFDB
 19700                           fsr2h	equ	0xFDA
 19701                           fsr2l	equ	0xFD9
 19702                           status	equ	0xFD8
 19703                           
 19704 ;; *************** function _Timer2_Clear *****************
 19705 ;; Defined at:
 19706 ;;		line 3 in file "Library/Timer2.c"
 19707 ;; Parameters:    Size  Location     Type
 19708 ;;		None
 19709 ;; Auto vars:     Size  Location     Type
 19710 ;;		None
 19711 ;; Return value:  Size  Location     Type
 19712 ;;                  1    wreg      void 
 19713 ;; Registers used:
 19714 ;;		None
 19715 ;; Tracked objects:
 19716 ;;		On entry : 0/0
 19717 ;;		On exit  : 0/0
 19718 ;;		Unchanged: 0/0
 19719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19724 ;;Total ram usage:        0 bytes
 19725 ;; Hardware stack levels used:    1
 19726 ;; Hardware stack levels required when called:    7
 19727 ;; This function calls:
 19728 ;;		Nothing
 19729 ;; This function is called by:
 19730 ;;		_Timer2_Init
 19731 ;; This function uses a non-reentrant model
 19732 ;;
 19733                           
 19734                           	psect	text111
 19735  014B36                     __ptext111:
 19736                           	opt stack 0
 19737  014B36                     _Timer2_Clear:
 19738                           	opt stack 18
 19739                           
 19740                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 19741                           
 19742                           ; BSR set to: 0
 19743                           ;incstack = 0
 19744  014B36  929E               	bcf	3998,1,c	;volatile
 19745                           
 19746                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 19747  014B38  929D               	bcf	3997,1,c	;volatile
 19748                           
 19749                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 19750  014B3A  929F               	bcf	3999,1,c	;volatile
 19751  014B3C  0012               	return		;funcret
 19752  014B3E                     __end_of_Timer2_Clear:
 19753                           	opt stack 0
 19754                           tosu	equ	0xFFF
 19755                           tosh	equ	0xFFE
 19756                           tosl	equ	0xFFD
 19757                           pclath	equ	0xFFA
 19758                           tblptru	equ	0xFF8
 19759                           tblptrh	equ	0xFF7
 19760                           tblptrl	equ	0xFF6
 19761                           tablat	equ	0xFF5
 19762                           prodh	equ	0xFF4
 19763                           prodl	equ	0xFF3
 19764                           intcon	equ	0xFF2
 19765                           postinc0	equ	0xFEE
 19766                           wreg	equ	0xFE8
 19767                           indf1	equ	0xFE7
 19768                           postdec1	equ	0xFE5
 19769                           fsr1h	equ	0xFE2
 19770                           fsr1l	equ	0xFE1
 19771                           indf2	equ	0xFDF
 19772                           postinc2	equ	0xFDE
 19773                           postdec2	equ	0xFDD
 19774                           plusw2	equ	0xFDB
 19775                           fsr2h	equ	0xFDA
 19776                           fsr2l	equ	0xFD9
 19777                           status	equ	0xFD8
 19778                           
 19779 ;; *************** function _SPI_DisableISR *****************
 19780 ;; Defined at:
 19781 ;;		line 181 in file "Library/SPI.c"
 19782 ;; Parameters:    Size  Location     Type
 19783 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19784 ;;		 -> SPI1(11), SPI2(11), 
 19785 ;; Auto vars:     Size  Location     Type
 19786 ;;		None
 19787 ;; Return value:  Size  Location     Type
 19788 ;;                  1    wreg      void 
 19789 ;; Registers used:
 19790 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19791 ;; Tracked objects:
 19792 ;;		On entry : 0/0
 19793 ;;		On exit  : 0/0
 19794 ;;		Unchanged: 0/0
 19795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19796 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19800 ;;Total ram usage:        2 bytes
 19801 ;; Hardware stack levels used:    1
 19802 ;; Hardware stack levels required when called:    7
 19803 ;; This function calls:
 19804 ;;		Nothing
 19805 ;; This function is called by:
 19806 ;;		_SPI_Init
 19807 ;; This function uses a non-reentrant model
 19808 ;;
 19809                           
 19810                           	psect	text112
 19811  0147C8                     __ptext112:
 19812                           	opt stack 0
 19813  0147C8                     _SPI_DisableISR:
 19814                           	opt stack 19
 19815                           
 19816                           ;SPI.c: 183: switch (pInput->mChannel)
 19817                           
 19818                           ;incstack = 0
 19819  0147C8  D004               	goto	l11042
 19820  0147CA                     l655:
 19821                           
 19822                           ; BSR set to: 0
 19823  0147CA  969D               	bcf	3997,3,c	;volatile
 19824  0147CC  0012               	return	
 19825  0147CE                     l657:
 19826                           
 19827                           ; BSR set to: 0
 19828  0147CE  9EA3               	bcf	4003,7,c	;volatile
 19829                           
 19830                           ; BSR set to: 0
 19831                           ;SPI.c: 188: };
 19832                           
 19833                           ; BSR set to: 0
 19834                           
 19835                           ;SPI.c: 187: default: return;
 19836  0147D0  0012               	return	
 19837  0147D2                     l11042:
 19838  0147D2  0100               	movlb	0	; () banked
 19839  0147D4  EE20 F002          	lfsr	2,2
 19840  0147D8  51C5               	movf	SPI_DisableISR@pInput& (0+255),w,b
 19841  0147DA  26D9               	addwf	fsr2l,f,c
 19842  0147DC  51C6               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 19843  0147DE  22DA               	addwfc	fsr2h,f,c
 19844  0147E0  50DF               	movf	indf2,w,c
 19845                           
 19846                           ; Switch size 1, requested type "space"
 19847                           ; Number of cases is 2, Range of values is 0 to 1
 19848                           ; switch strategies available:
 19849                           ; Name         Instructions Cycles
 19850                           ; simple_byte            7     4 (average)
 19851                           ;	Chosen strategy is simple_byte
 19852  0147E2  0A00               	xorlw	0	; case 0
 19853  0147E4  B4D8               	btfsc	status,2,c
 19854  0147E6  D7F1               	goto	l655
 19855  0147E8  0A01               	xorlw	1	; case 1
 19856  0147EA  A4D8               	btfss	status,2,c
 19857  0147EC  0012               	return	
 19858  0147EE  D7EF               	goto	l657
 19859  0147F0                     __end_of_SPI_DisableISR:
 19860                           	opt stack 0
 19861                           tosu	equ	0xFFF
 19862                           tosh	equ	0xFFE
 19863                           tosl	equ	0xFFD
 19864                           pclath	equ	0xFFA
 19865                           tblptru	equ	0xFF8
 19866                           tblptrh	equ	0xFF7
 19867                           tblptrl	equ	0xFF6
 19868                           tablat	equ	0xFF5
 19869                           prodh	equ	0xFF4
 19870                           prodl	equ	0xFF3
 19871                           intcon	equ	0xFF2
 19872                           postinc0	equ	0xFEE
 19873                           wreg	equ	0xFE8
 19874                           indf1	equ	0xFE7
 19875                           postdec1	equ	0xFE5
 19876                           fsr1h	equ	0xFE2
 19877                           fsr1l	equ	0xFE1
 19878                           indf2	equ	0xFDF
 19879                           postinc2	equ	0xFDE
 19880                           postdec2	equ	0xFDD
 19881                           plusw2	equ	0xFDB
 19882                           fsr2h	equ	0xFDA
 19883                           fsr2l	equ	0xFD9
 19884                           status	equ	0xFD8
 19885                           
 19886 ;; *************** function _SPI_DCS *****************
 19887 ;; Defined at:
 19888 ;;		line 219 in file "Library/SPI.c"
 19889 ;; Parameters:    Size  Location     Type
 19890 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 19891 ;;		 -> SPI1(11), SPI2(11), 
 19892 ;; Auto vars:     Size  Location     Type
 19893 ;;		None
 19894 ;; Return value:  Size  Location     Type
 19895 ;;                  1    wreg      void 
 19896 ;; Registers used:
 19897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19898 ;; Tracked objects:
 19899 ;;		On entry : 0/0
 19900 ;;		On exit  : 0/0
 19901 ;;		Unchanged: 0/0
 19902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19903 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19904 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19907 ;;Total ram usage:        2 bytes
 19908 ;; Hardware stack levels used:    1
 19909 ;; Hardware stack levels required when called:    7
 19910 ;; This function calls:
 19911 ;;		Nothing
 19912 ;; This function is called by:
 19913 ;;		_SPI_Init
 19914 ;; This function uses a non-reentrant model
 19915 ;;
 19916                           
 19917                           	psect	text113
 19918  01463C                     __ptext113:
 19919                           	opt stack 0
 19920  01463C                     _SPI_DCS:
 19921                           	opt stack 19
 19922                           
 19923                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 19924                           
 19925                           ; BSR set to: 0
 19926                           ;incstack = 0
 19927  01463C  0100               	movlb	0	; () banked
 19928  01463E  EE20 F002          	lfsr	2,2
 19929  014642  51C5               	movf	SPI_DCS@pInput& (0+255),w,b
 19930  014644  26D9               	addwf	fsr2l,f,c
 19931  014646  51C6               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 19932  014648  22DA               	addwfc	fsr2h,f,c
 19933  01464A  50DF               	movf	indf2,w,c
 19934  01464C  A4D8               	btfss	status,2,c
 19935  01464E  D007               	goto	l11048
 19936                           
 19937                           ; BSR set to: 0
 19938                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 19939  014650  C096  FFD9         	movff	_PortC+4,fsr2l
 19940  014654  C097  FFDA         	movff	_PortC+5,fsr2h
 19941  014658  0100               	movlb	0	; () banked
 19942  01465A  84DF               	bsf	indf2,2,c
 19943  01465C  0012               	return	
 19944  01465E                     l11048:
 19945                           
 19946                           ; BSR set to: 0
 19947                           ;SPI.c: 223: else
 19948                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 19949  01465E  C08C  FFD9         	movff	_PortD+4,fsr2l
 19950  014662  C08D  FFDA         	movff	_PortD+5,fsr2h
 19951  014666  0100               	movlb	0	; () banked
 19952  014668  8EDF               	bsf	indf2,7,c
 19953  01466A  0012               	return	
 19954  01466C                     __end_of_SPI_DCS:
 19955                           	opt stack 0
 19956                           tosu	equ	0xFFF
 19957                           tosh	equ	0xFFE
 19958                           tosl	equ	0xFFD
 19959                           pclath	equ	0xFFA
 19960                           tblptru	equ	0xFF8
 19961                           tblptrh	equ	0xFF7
 19962                           tblptrl	equ	0xFF6
 19963                           tablat	equ	0xFF5
 19964                           prodh	equ	0xFF4
 19965                           prodl	equ	0xFF3
 19966                           intcon	equ	0xFF2
 19967                           postinc0	equ	0xFEE
 19968                           wreg	equ	0xFE8
 19969                           indf1	equ	0xFE7
 19970                           postdec1	equ	0xFE5
 19971                           fsr1h	equ	0xFE2
 19972                           fsr1l	equ	0xFE1
 19973                           indf2	equ	0xFDF
 19974                           postinc2	equ	0xFDE
 19975                           postdec2	equ	0xFDD
 19976                           plusw2	equ	0xFDB
 19977                           fsr2h	equ	0xFDA
 19978                           fsr2l	equ	0xFD9
 19979                           status	equ	0xFD8
 19980                           
 19981 ;; *************** function _Button_Init *****************
 19982 ;; Defined at:
 19983 ;;		line 18 in file "Library/Button.c"
 19984 ;; Parameters:    Size  Location     Type
 19985 ;;  pInput          2    7[BANK1 ] const PTR struct Button
 19986 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 19987 ;;  pThreshold      2    9[BANK1 ] unsigned short 
 19988 ;;  pInitIO         3   11[BANK1 ] PTR FTN()void 
 19989 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 19990 ;;  pGetState       3   14[BANK1 ] PTR FTN()unsigned char 
 19991 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 19992 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 19993 ;;  pFunction       3   17[BANK1 ] PTR FTN(unsigned char ,)
 19994 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 19995 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 19996 ;; Auto vars:     Size  Location     Type
 19997 ;;		None
 19998 ;; Return value:  Size  Location     Type
 19999 ;;                  1    wreg      void 
 20000 ;; Registers used:
 20001 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20002 ;; Tracked objects:
 20003 ;;		On entry : 0/0
 20004 ;;		On exit  : 0/0
 20005 ;;		Unchanged: 0/0
 20006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20007 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20010 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20011 ;;Total ram usage:       13 bytes
 20012 ;; Hardware stack levels used:    1
 20013 ;; Hardware stack levels required when called:   15
 20014 ;; This function calls:
 20015 ;;		_HMI_InitButtons
 20016 ;;		_MXK_InitDIPSwitch
 20017 ;;		_MXK_InitTestButton
 20018 ;; This function is called by:
 20019 ;;		_HMI_Init
 20020 ;;		_FunctInitButton
 20021 ;; This function uses a non-reentrant model
 20022 ;;
 20023                           
 20024                           	psect	text114
 20025  01275C                     __ptext114:
 20026                           	opt stack 0
 20027  01275C                     _Button_Init:
 20028                           	opt stack 13
 20029                           
 20030                           ;Button.c: 21: if(pInput==(void*)0)
 20031                           
 20032                           ; BSR set to: 0
 20033                           ;incstack = 0
 20034  01275C  0101               	movlb	1	; () banked
 20035  01275E  51BD               	movf	Button_Init@pInput& (0+255),w,b
 20036  012760  0101               	movlb	1	; () banked
 20037  012762  11BE               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 20038  012764  B4D8               	btfsc	status,2,c
 20039  012766  0012               	return	
 20040                           
 20041                           ; BSR set to: 1
 20042                           ;Button.c: 23: if(pInitIO==(void*)0)
 20043                           
 20044                           ; BSR set to: 1
 20045                           
 20046                           ; BSR set to: 1
 20047                           ;Button.c: 22: return;
 20048  012768  0101               	movlb	1	; () banked
 20049  01276A  51C1               	movf	Button_Init@pInitIO& (0+255),w,b
 20050  01276C  0101               	movlb	1	; () banked
 20051  01276E  11C2               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 20052  012770  0101               	movlb	1	; () banked
 20053  012772  11C3               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 20054  012774  B4D8               	btfsc	status,2,c
 20055  012776  0012               	return	
 20056                           
 20057                           ; BSR set to: 1
 20058                           ;Button.c: 25: if(pGetState==(void*)0)
 20059                           
 20060                           ; BSR set to: 1
 20061                           
 20062                           ; BSR set to: 1
 20063                           ;Button.c: 24: return;
 20064  012778  0101               	movlb	1	; () banked
 20065  01277A  51C4               	movf	Button_Init@pGetState& (0+255),w,b
 20066  01277C  0101               	movlb	1	; () banked
 20067  01277E  11C5               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 20068  012780  0101               	movlb	1	; () banked
 20069  012782  11C6               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 20070  012784  B4D8               	btfsc	status,2,c
 20071  012786  0012               	return	
 20072                           
 20073                           ; BSR set to: 1
 20074                           ;Button.c: 27: if(pFunction==(void*)0)
 20075                           
 20076                           ; BSR set to: 1
 20077                           
 20078                           ; BSR set to: 1
 20079                           ;Button.c: 26: return;
 20080  012788  0101               	movlb	1	; () banked
 20081  01278A  51C7               	movf	Button_Init@pFunction& (0+255),w,b
 20082  01278C  0101               	movlb	1	; () banked
 20083  01278E  11C8               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 20084  012790  0101               	movlb	1	; () banked
 20085  012792  11C9               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 20086  012794  B4D8               	btfsc	status,2,c
 20087  012796  0012               	return	
 20088                           
 20089                           ; BSR set to: 1
 20090                           ;Button.c: 30: if(pThreshold == 0)
 20091                           
 20092                           ; BSR set to: 1
 20093                           
 20094                           ; BSR set to: 1
 20095                           ;Button.c: 28: return;
 20096  012798  0101               	movlb	1	; () banked
 20097  01279A  51BF               	movf	Button_Init@pThreshold& (0+255),w,b
 20098  01279C  0101               	movlb	1	; () banked
 20099  01279E  11C0               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 20100  0127A0  A4D8               	btfss	status,2,c
 20101  0127A2  D005               	goto	l11658
 20102                           
 20103                           ; BSR set to: 1
 20104                           ;Button.c: 31: pThreshold = 1;
 20105  0127A4  0E00               	movlw	0
 20106  0127A6  0101               	movlb	1	; () banked
 20107  0127A8  6FC0               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20108  0127AA  0E01               	movlw	1
 20109  0127AC  6FBF               	movwf	Button_Init@pThreshold& (0+255),b
 20110  0127AE                     l11658:
 20111                           
 20112                           ; BSR set to: 1
 20113                           ;Button.c: 34: pInput->mState = 0;
 20114  0127AE  C1BD  FFD9         	movff	Button_Init@pInput,fsr2l
 20115  0127B2  C1BE  FFDA         	movff	Button_Init@pInput+1,fsr2h
 20116  0127B6  0E00               	movlw	0
 20117  0127B8  6EDF               	movwf	indf2,c
 20118                           
 20119                           ; BSR set to: 1
 20120                           ;Button.c: 35: pInput->mCount = 0;
 20121  0127BA  0101               	movlb	1	; () banked
 20122  0127BC  EE20 F001          	lfsr	2,1
 20123  0127C0  51BD               	movf	Button_Init@pInput& (0+255),w,b
 20124  0127C2  26D9               	addwf	fsr2l,f,c
 20125  0127C4  51BE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20126  0127C6  22DA               	addwfc	fsr2h,f,c
 20127  0127C8  0E00               	movlw	0
 20128  0127CA  6EDF               	movwf	indf2,c
 20129                           
 20130                           ; BSR set to: 1
 20131                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 20132  0127CC  0101               	movlb	1	; () banked
 20133  0127CE  EE20 F002          	lfsr	2,2
 20134  0127D2  51BD               	movf	Button_Init@pInput& (0+255),w,b
 20135  0127D4  26D9               	addwf	fsr2l,f,c
 20136  0127D6  51BE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20137  0127D8  22DA               	addwfc	fsr2h,f,c
 20138  0127DA  C1BF  FFDE         	movff	Button_Init@pThreshold,postinc2
 20139  0127DE  C1C0  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 20140                           
 20141                           ; BSR set to: 1
 20142                           ;Button.c: 37: pInput->mFunction = pFunction;
 20143  0127E2  0101               	movlb	1	; () banked
 20144  0127E4  EE20 F004          	lfsr	2,4
 20145  0127E8  51BD               	movf	Button_Init@pInput& (0+255),w,b
 20146  0127EA  26D9               	addwf	fsr2l,f,c
 20147  0127EC  51BE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20148  0127EE  22DA               	addwfc	fsr2h,f,c
 20149  0127F0  C1C7  FFDE         	movff	Button_Init@pFunction,postinc2
 20150  0127F4  C1C8  FFDE         	movff	Button_Init@pFunction+1,postinc2
 20151  0127F8  C1C9  FFDE         	movff	Button_Init@pFunction+2,postinc2
 20152                           
 20153                           ; BSR set to: 1
 20154                           ;Button.c: 38: pInput->mGetState = pGetState;
 20155  0127FC  0101               	movlb	1	; () banked
 20156  0127FE  EE20 F007          	lfsr	2,7
 20157  012802  51BD               	movf	Button_Init@pInput& (0+255),w,b
 20158  012804  26D9               	addwf	fsr2l,f,c
 20159  012806  51BE               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20160  012808  22DA               	addwfc	fsr2h,f,c
 20161  01280A  C1C4  FFDE         	movff	Button_Init@pGetState,postinc2
 20162  01280E  C1C5  FFDE         	movff	Button_Init@pGetState+1,postinc2
 20163  012812  C1C6  FFDE         	movff	Button_Init@pGetState+2,postinc2
 20164                           
 20165                           ; BSR set to: 1
 20166                           ;Button.c: 41: pInitIO();
 20167  012816  D801               	call	u8078
 20168  012818  0012               	return	
 20169  01281A                     u8078:
 20170  01281A  0005               	push	
 20171  01281C  6EFA               	movwf	pclath,c
 20172  01281E  0101               	movlb	1	; () banked
 20173  012820  51C1               	movf	Button_Init@pInitIO& (0+255),w,b
 20174  012822  6EFD               	movwf	tosl,c
 20175  012824  51C2               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 20176  012826  6EFE               	movwf	tosh,c
 20177  012828  51C3               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 20178  01282A  6EFF               	movwf	tosu,c
 20179  01282C  50FA               	movf	pclath,w,c
 20180  01282E  0012               	return		;indir
 20181  012830                     __end_of_Button_Init:
 20182                           	opt stack 0
 20183                           tosu	equ	0xFFF
 20184                           tosh	equ	0xFFE
 20185                           tosl	equ	0xFFD
 20186                           pclath	equ	0xFFA
 20187                           tblptru	equ	0xFF8
 20188                           tblptrh	equ	0xFF7
 20189                           tblptrl	equ	0xFF6
 20190                           tablat	equ	0xFF5
 20191                           prodh	equ	0xFF4
 20192                           prodl	equ	0xFF3
 20193                           intcon	equ	0xFF2
 20194                           postinc0	equ	0xFEE
 20195                           wreg	equ	0xFE8
 20196                           indf1	equ	0xFE7
 20197                           postdec1	equ	0xFE5
 20198                           fsr1h	equ	0xFE2
 20199                           fsr1l	equ	0xFE1
 20200                           indf2	equ	0xFDF
 20201                           postinc2	equ	0xFDE
 20202                           postdec2	equ	0xFDD
 20203                           plusw2	equ	0xFDB
 20204                           fsr2h	equ	0xFDA
 20205                           fsr2l	equ	0xFD9
 20206                           status	equ	0xFD8
 20207                           
 20208 ;; *************** function _MXK_InitDIPSwitch *****************
 20209 ;; Defined at:
 20210 ;;		line 20 in file "Library/MXK.c"
 20211 ;; Parameters:    Size  Location     Type
 20212 ;;		None
 20213 ;; Auto vars:     Size  Location     Type
 20214 ;;		None
 20215 ;; Return value:  Size  Location     Type
 20216 ;;                  1    wreg      void 
 20217 ;; Registers used:
 20218 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20219 ;; Tracked objects:
 20220 ;;		On entry : 0/0
 20221 ;;		On exit  : 0/0
 20222 ;;		Unchanged: 0/0
 20223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20225 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20227 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20228 ;;Total ram usage:        0 bytes
 20229 ;; Hardware stack levels used:    1
 20230 ;; Hardware stack levels required when called:   14
 20231 ;; This function calls:
 20232 ;;		_Port_SetQuadType
 20233 ;; This function is called by:
 20234 ;;		_FunctInitButton
 20235 ;;		_Button_Init
 20236 ;; This function uses a non-reentrant model
 20237 ;;
 20238                           
 20239                           	psect	text115
 20240  0148F4                     __ptext115:
 20241                           	opt stack 0
 20242  0148F4                     _MXK_InitDIPSwitch:
 20243                           	opt stack 13
 20244                           
 20245                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 20246                           
 20247                           ;incstack = 0
 20248  0148F4  0E88               	movlw	low _PortD
 20249  0148F6  0101               	movlb	1	; () banked
 20250  0148F8  6FB9               	movwf	Port_SetQuadType@pInput& (0+255),b
 20251  0148FA  0E00               	movlw	high _PortD
 20252  0148FC  0101               	movlb	1	; () banked
 20253  0148FE  6FBA               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 20254  014900  0E00               	movlw	0
 20255  014902  0101               	movlb	1	; () banked
 20256  014904  6FBB               	movwf	Port_SetQuadType@pQuad& (0+255),b
 20257  014906  0E00               	movlw	0
 20258  014908  0101               	movlb	1	; () banked
 20259  01490A  6FBC               	movwf	Port_SetQuadType@pType& (0+255),b
 20260  01490C  EC7F  F086         	call	_Port_SetQuadType	;wreg free
 20261  014910  0012               	return		;funcret
 20262  014912                     __end_of_MXK_InitDIPSwitch:
 20263                           	opt stack 0
 20264                           tosu	equ	0xFFF
 20265                           tosh	equ	0xFFE
 20266                           tosl	equ	0xFFD
 20267                           pclath	equ	0xFFA
 20268                           tblptru	equ	0xFF8
 20269                           tblptrh	equ	0xFF7
 20270                           tblptrl	equ	0xFF6
 20271                           tablat	equ	0xFF5
 20272                           prodh	equ	0xFF4
 20273                           prodl	equ	0xFF3
 20274                           intcon	equ	0xFF2
 20275                           postinc0	equ	0xFEE
 20276                           wreg	equ	0xFE8
 20277                           indf1	equ	0xFE7
 20278                           postdec1	equ	0xFE5
 20279                           fsr1h	equ	0xFE2
 20280                           fsr1l	equ	0xFE1
 20281                           indf2	equ	0xFDF
 20282                           postinc2	equ	0xFDE
 20283                           postdec2	equ	0xFDD
 20284                           plusw2	equ	0xFDB
 20285                           fsr2h	equ	0xFDA
 20286                           fsr2l	equ	0xFD9
 20287                           status	equ	0xFD8
 20288                           
 20289 ;; *************** function _HMI_InitButtons *****************
 20290 ;; Defined at:
 20291 ;;		line 21 in file "HMI.c"
 20292 ;; Parameters:    Size  Location     Type
 20293 ;;		None
 20294 ;; Auto vars:     Size  Location     Type
 20295 ;;		None
 20296 ;; Return value:  Size  Location     Type
 20297 ;;                  1    wreg      void 
 20298 ;; Registers used:
 20299 ;;		None
 20300 ;; Tracked objects:
 20301 ;;		On entry : 0/0
 20302 ;;		On exit  : 0/0
 20303 ;;		Unchanged: 0/0
 20304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20309 ;;Total ram usage:        0 bytes
 20310 ;; Hardware stack levels used:    1
 20311 ;; Hardware stack levels required when called:    7
 20312 ;; This function calls:
 20313 ;;		Nothing
 20314 ;; This function is called by:
 20315 ;;		_HMI_Init
 20316 ;;		_Button_Init
 20317 ;; This function uses a non-reentrant model
 20318 ;;
 20319                           
 20320                           	psect	text116
 20321  014B5E                     __ptext116:
 20322                           	opt stack 0
 20323  014B5E                     _HMI_InitButtons:
 20324                           	opt stack 20
 20325                           
 20326                           ;HMI.c: 23: TRISE = 0xFF;
 20327                           
 20328                           ;incstack = 0
 20329  014B5E  6896               	setf	3990,c	;volatile
 20330  014B60  0012               	return		;funcret
 20331  014B62                     __end_of_HMI_InitButtons:
 20332                           	opt stack 0
 20333                           tosu	equ	0xFFF
 20334                           tosh	equ	0xFFE
 20335                           tosl	equ	0xFFD
 20336                           pclath	equ	0xFFA
 20337                           tblptru	equ	0xFF8
 20338                           tblptrh	equ	0xFF7
 20339                           tblptrl	equ	0xFF6
 20340                           tablat	equ	0xFF5
 20341                           prodh	equ	0xFF4
 20342                           prodl	equ	0xFF3
 20343                           intcon	equ	0xFF2
 20344                           postinc0	equ	0xFEE
 20345                           wreg	equ	0xFE8
 20346                           indf1	equ	0xFE7
 20347                           postdec1	equ	0xFE5
 20348                           fsr1h	equ	0xFE2
 20349                           fsr1l	equ	0xFE1
 20350                           indf2	equ	0xFDF
 20351                           postinc2	equ	0xFDE
 20352                           postdec2	equ	0xFDD
 20353                           plusw2	equ	0xFDB
 20354                           fsr2h	equ	0xFDA
 20355                           fsr2l	equ	0xFD9
 20356                           status	equ	0xFD8
 20357                           
 20358 ;; *************** function _MXK_InitTestButton *****************
 20359 ;; Defined at:
 20360 ;;		line 10 in file "Library/MXK.c"
 20361 ;; Parameters:    Size  Location     Type
 20362 ;;		None
 20363 ;; Auto vars:     Size  Location     Type
 20364 ;;		None
 20365 ;; Return value:  Size  Location     Type
 20366 ;;                  1    wreg      void 
 20367 ;; Registers used:
 20368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20369 ;; Tracked objects:
 20370 ;;		On entry : 0/0
 20371 ;;		On exit  : 0/0
 20372 ;;		Unchanged: 0/0
 20373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20378 ;;Total ram usage:        0 bytes
 20379 ;; Hardware stack levels used:    1
 20380 ;; Hardware stack levels required when called:   12
 20381 ;; This function calls:
 20382 ;;		_Port_SetPinType
 20383 ;; This function is called by:
 20384 ;;		_FunctInitButton
 20385 ;;		_Button_Init
 20386 ;; This function uses a non-reentrant model
 20387 ;;
 20388                           
 20389                           	psect	text117
 20390  014912                     __ptext117:
 20391                           	opt stack 0
 20392  014912                     _MXK_InitTestButton:
 20393                           	opt stack 15
 20394                           
 20395                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 20396                           
 20397                           ;incstack = 0
 20398  014912  0E98               	movlw	low _PortB
 20399  014914  0100               	movlb	0	; () banked
 20400  014916  6FEB               	movwf	Port_SetPinType@pInput& (0+255),b
 20401  014918  0E01               	movlw	high _PortB
 20402  01491A  0100               	movlb	0	; () banked
 20403  01491C  6FEC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20404  01491E  0E04               	movlw	4
 20405  014920  0100               	movlb	0	; () banked
 20406  014922  6FED               	movwf	Port_SetPinType@pPin& (0+255),b
 20407  014924  0E00               	movlw	0
 20408  014926  0100               	movlb	0	; () banked
 20409  014928  6FEE               	movwf	Port_SetPinType@pType& (0+255),b
 20410  01492A  ECDB  F08B         	call	_Port_SetPinType	;wreg free
 20411  01492E  0012               	return		;funcret
 20412  014930                     __end_of_MXK_InitTestButton:
 20413                           	opt stack 0
 20414                           tosu	equ	0xFFF
 20415                           tosh	equ	0xFFE
 20416                           tosl	equ	0xFFD
 20417                           pclath	equ	0xFFA
 20418                           tblptru	equ	0xFF8
 20419                           tblptrh	equ	0xFF7
 20420                           tblptrl	equ	0xFF6
 20421                           tablat	equ	0xFF5
 20422                           prodh	equ	0xFF4
 20423                           prodl	equ	0xFF3
 20424                           intcon	equ	0xFF2
 20425                           postinc0	equ	0xFEE
 20426                           wreg	equ	0xFE8
 20427                           indf1	equ	0xFE7
 20428                           postdec1	equ	0xFE5
 20429                           fsr1h	equ	0xFE2
 20430                           fsr1l	equ	0xFE1
 20431                           indf2	equ	0xFDF
 20432                           postinc2	equ	0xFDE
 20433                           postdec2	equ	0xFDD
 20434                           plusw2	equ	0xFDB
 20435                           fsr2h	equ	0xFDA
 20436                           fsr2l	equ	0xFD9
 20437                           status	equ	0xFD8
 20438                           
 20439 ;; *************** function _Port_SetPinType *****************
 20440 ;; Defined at:
 20441 ;;		line 189 in file "Library/Port.c"
 20442 ;; Parameters:    Size  Location     Type
 20443 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 20444 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20445 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20446 ;;  pPin            1   40[BANK0 ] enum E6750
 20447 ;;  pType           1   41[BANK0 ] enum E6795
 20448 ;; Auto vars:     Size  Location     Type
 20449 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 20450 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 20451 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 20452 ;;  Output          1   42[BANK0 ] enum E6475
 20453 ;; Return value:  Size  Location     Type
 20454 ;;                  1    wreg      enum E6475
 20455 ;; Registers used:
 20456 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20457 ;; Tracked objects:
 20458 ;;		On entry : 0/0
 20459 ;;		On exit  : 0/0
 20460 ;;		Unchanged: 0/0
 20461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20462 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20463 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20465 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20466 ;;Total ram usage:        7 bytes
 20467 ;; Hardware stack levels used:    1
 20468 ;; Hardware stack levels required when called:   11
 20469 ;; This function calls:
 20470 ;;		_Byte_SetBit
 20471 ;;		_PortProperty_Valid
 20472 ;;		_Word_SetPair
 20473 ;; This function is called by:
 20474 ;;		_Configure_GPIOs
 20475 ;;		_LED_Init
 20476 ;;		_Port_Init
 20477 ;;		_SPI_Init
 20478 ;;		_Motor_Init
 20479 ;;		_MXK_InitTestButton
 20480 ;;		_MXK_Init
 20481 ;;		_I2C_Init
 20482 ;; This function uses a non-reentrant model
 20483 ;;
 20484                           
 20485                           	psect	text118
 20486  0117B6                     __ptext118:
 20487                           	opt stack 0
 20488  0117B6                     _Port_SetPinType:
 20489                           	opt stack 17
 20490                           
 20491                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 20492                           
 20493                           ;incstack = 0
 20494  0117B6  C0EB  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 20495  0117BA  C0EC  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 20496  0117BE  CFDE F0F0          	movff	postinc2,Port_SetPinType@Props
 20497  0117C2  CFDD F0F1          	movff	postdec2,Port_SetPinType@Props+1
 20498                           
 20499                           ;Port.c: 192: ePinError Output = ePinErrorState;
 20500  0117C6  0E05               	movlw	5
 20501  0117C8  0100               	movlb	0	; () banked
 20502  0117CA  6FEF               	movwf	Port_SetPinType@Output& (0+255),b
 20503                           
 20504                           ;Port.c: 193: switch (pType)
 20505  0117CC  D0B5               	goto	l10908
 20506  0117CE                     l10888:
 20507                           
 20508                           ; BSR set to: 0
 20509                           ;Port.c: 197: {
 20510                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20511  0117CE  0100               	movlb	0	; () banked
 20512  0117D0  EE20 F002          	lfsr	2,2
 20513  0117D4  51EB               	movf	Port_SetPinType@pInput& (0+255),w,b
 20514  0117D6  26D9               	addwf	fsr2l,f,c
 20515  0117D8  51EC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20516  0117DA  22DA               	addwfc	fsr2h,f,c
 20517  0117DC  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 20518  0117E0  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 20519  0117E4  C0ED  F0C7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20520  0117E8  0E01               	movlw	1
 20521  0117EA  0100               	movlb	0	; () banked
 20522  0117EC  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 20523  0117EE  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 20524                           
 20525                           ;Port.c: 203: break;
 20526  0117F2  D0B0               	goto	l10910
 20527  0117F4                     l10890:
 20528                           
 20529                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 20530  0117F4  C0F0  F0D4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20531  0117F8  C0F1  F0D5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20532  0117FC  0E01               	movlw	1
 20533  0117FE  0100               	movlb	0	; () banked
 20534  011800  6FD6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20535  011802  C0ED  F0D7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20536  011806  EC90  F09B         	call	_PortProperty_Valid	;wreg free
 20537  01180A  0100               	movlb	0	; () banked
 20538  01180C  6FEF               	movwf	Port_SetPinType@Output& (0+255),b
 20539  01180E  0100               	movlb	0	; () banked
 20540  011810  51EF               	movf	Port_SetPinType@Output& (0+255),w,b
 20541  011812  A4D8               	btfss	status,2,c
 20542  011814  0012               	return	
 20543                           
 20544                           ; BSR set to: 0
 20545                           ;Port.c: 208: {
 20546                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20547  011816  0100               	movlb	0	; () banked
 20548  011818  EE20 F002          	lfsr	2,2
 20549  01181C  51EB               	movf	Port_SetPinType@pInput& (0+255),w,b
 20550  01181E  26D9               	addwf	fsr2l,f,c
 20551  011820  51EC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20552  011822  22DA               	addwfc	fsr2h,f,c
 20553  011824  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 20554  011828  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 20555  01182C  C0ED  F0C7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20556  011830  0E00               	movlw	0
 20557  011832  0100               	movlb	0	; () banked
 20558  011834  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 20559  011836  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 20560                           
 20561                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20562  01183A  0100               	movlb	0	; () banked
 20563  01183C  EE20 F004          	lfsr	2,4
 20564  011840  51EB               	movf	Port_SetPinType@pInput& (0+255),w,b
 20565  011842  26D9               	addwf	fsr2l,f,c
 20566  011844  51EC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20567  011846  22DA               	addwfc	fsr2h,f,c
 20568  011848  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 20569  01184C  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 20570  011850  C0ED  F0C7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20571  011854  0E00               	movlw	0
 20572  011856  0100               	movlb	0	; () banked
 20573  011858  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 20574  01185A  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 20575                           
 20576                           ;Port.c: 214: break;
 20577  01185E  D07A               	goto	l10910
 20578  011860                     l10896:
 20579                           
 20580                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 20581  011860  C0F0  F0D4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20582  011864  C0F1  F0D5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20583  011868  0E02               	movlw	2
 20584  01186A  0100               	movlb	0	; () banked
 20585  01186C  6FD6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20586  01186E  C0ED  F0D7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20587  011872  EC90  F09B         	call	_PortProperty_Valid	;wreg free
 20588  011876  0100               	movlb	0	; () banked
 20589  011878  6FEF               	movwf	Port_SetPinType@Output& (0+255),b
 20590  01187A  0100               	movlb	0	; () banked
 20591  01187C  51EF               	movf	Port_SetPinType@Output& (0+255),w,b
 20592  01187E  A4D8               	btfss	status,2,c
 20593  011880  0012               	return	
 20594                           
 20595                           ; BSR set to: 0
 20596                           ;Port.c: 220: {
 20597                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 20598  011882  0100               	movlb	0	; () banked
 20599  011884  EE20 F002          	lfsr	2,2
 20600  011888  51EB               	movf	Port_SetPinType@pInput& (0+255),w,b
 20601  01188A  26D9               	addwf	fsr2l,f,c
 20602  01188C  51EC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20603  01188E  22DA               	addwfc	fsr2h,f,c
 20604  011890  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 20605  011894  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 20606  011898  C0ED  F0C7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20607  01189C  0E01               	movlw	1
 20608  01189E  0100               	movlb	0	; () banked
 20609  0118A0  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 20610  0118A2  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 20611                           
 20612                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 20613  0118A6  0100               	movlb	0	; () banked
 20614  0118A8  EE20 F004          	lfsr	2,4
 20615  0118AC  51EB               	movf	Port_SetPinType@pInput& (0+255),w,b
 20616  0118AE  26D9               	addwf	fsr2l,f,c
 20617  0118B0  51EC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20618  0118B2  22DA               	addwfc	fsr2h,f,c
 20619  0118B4  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 20620  0118B8  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 20621  0118BC  C0ED  F0C7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20622  0118C0  0E01               	movlw	1
 20623  0118C2  0100               	movlb	0	; () banked
 20624  0118C4  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 20625  0118C6  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 20626                           
 20627                           ;Port.c: 226: break;
 20628  0118CA  D044               	goto	l10910
 20629  0118CC                     l10902:
 20630                           
 20631                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 20632  0118CC  C0F0  F0D4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 20633  0118D0  C0F1  F0D5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 20634  0118D4  0E00               	movlw	0
 20635  0118D6  0100               	movlb	0	; () banked
 20636  0118D8  6FD6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 20637  0118DA  C0ED  F0D7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 20638  0118DE  EC90  F09B         	call	_PortProperty_Valid	;wreg free
 20639  0118E2  0100               	movlb	0	; () banked
 20640  0118E4  6FEF               	movwf	Port_SetPinType@Output& (0+255),b
 20641  0118E6  0100               	movlb	0	; () banked
 20642  0118E8  51EF               	movf	Port_SetPinType@Output& (0+255),w,b
 20643  0118EA  A4D8               	btfss	status,2,c
 20644  0118EC  0012               	return	
 20645                           
 20646                           ; BSR set to: 0
 20647                           ;Port.c: 232: {
 20648                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 20649  0118EE  0100               	movlb	0	; () banked
 20650  0118F0  EE20 F002          	lfsr	2,2
 20651  0118F4  51EB               	movf	Port_SetPinType@pInput& (0+255),w,b
 20652  0118F6  26D9               	addwf	fsr2l,f,c
 20653  0118F8  51EC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20654  0118FA  22DA               	addwfc	fsr2h,f,c
 20655  0118FC  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 20656  011900  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 20657  011904  C0ED  F0C7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20658  011908  0E00               	movlw	0
 20659  01190A  0100               	movlb	0	; () banked
 20660  01190C  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 20661  01190E  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 20662                           
 20663                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 20664  011912  0100               	movlb	0	; () banked
 20665  011914  EE20 F004          	lfsr	2,4
 20666  011918  51EB               	movf	Port_SetPinType@pInput& (0+255),w,b
 20667  01191A  26D9               	addwf	fsr2l,f,c
 20668  01191C  51EC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 20669  01191E  22DA               	addwfc	fsr2h,f,c
 20670  011920  CFDE F0C5          	movff	postinc2,Byte_SetBit@pInput
 20671  011924  CFDD F0C6          	movff	postdec2,Byte_SetBit@pInput+1
 20672  011928  C0ED  F0C7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 20673  01192C  0E00               	movlw	0
 20674  01192E  0100               	movlb	0	; () banked
 20675  011930  6FC8               	movwf	Byte_SetBit@pValue& (0+255),b
 20676  011932  EC6C  F09E         	call	_Byte_SetBit	;wreg free
 20677                           
 20678                           ;Port.c: 239: }
 20679                           
 20680                           ;Port.c: 238: break;
 20681  011936  D00E               	goto	l10910
 20682  011938                     l10908:
 20683  011938  0100               	movlb	0	; () banked
 20684  01193A  51EE               	movf	Port_SetPinType@pType& (0+255),w,b
 20685                           
 20686                           ; Switch size 1, requested type "space"
 20687                           ; Number of cases is 4, Range of values is 0 to 3
 20688                           ; switch strategies available:
 20689                           ; Name         Instructions Cycles
 20690                           ; simple_byte           13     7 (average)
 20691                           ;	Chosen strategy is simple_byte
 20692  01193C  0A00               	xorlw	0	; case 0
 20693  01193E  B4D8               	btfsc	status,2,c
 20694  011940  D746               	goto	l10888
 20695  011942  0A01               	xorlw	1	; case 1
 20696  011944  B4D8               	btfsc	status,2,c
 20697  011946  D756               	goto	l10890
 20698  011948  0A03               	xorlw	3	; case 2
 20699  01194A  B4D8               	btfsc	status,2,c
 20700  01194C  D789               	goto	l10896
 20701  01194E  0A01               	xorlw	1	; case 3
 20702  011950  B4D8               	btfsc	status,2,c
 20703  011952  D7BC               	goto	l10902
 20704  011954                     l10910:
 20705                           
 20706                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 20707  011954  0E08               	movlw	8
 20708  011956  0100               	movlb	0	; () banked
 20709  011958  25EB               	addwf	Port_SetPinType@pInput& (0+255),w,b
 20710  01195A  0100               	movlb	0	; () banked
 20711  01195C  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 20712  01195E  0E00               	movlw	0
 20713  011960  0100               	movlb	0	; () banked
 20714  011962  21EC               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 20715  011964  0100               	movlb	0	; () banked
 20716  011966  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 20717  011968  C0ED  F0D6         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 20718  01196C  C0EE  F0D7         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 20719  011970  EC33  F0A1         	call	_Word_SetPair	;wreg free
 20720  011974  0012               	return	
 20721  011976                     __end_of_Port_SetPinType:
 20722                           	opt stack 0
 20723                           tosu	equ	0xFFF
 20724                           tosh	equ	0xFFE
 20725                           tosl	equ	0xFFD
 20726                           pclath	equ	0xFFA
 20727                           tblptru	equ	0xFF8
 20728                           tblptrh	equ	0xFF7
 20729                           tblptrl	equ	0xFF6
 20730                           tablat	equ	0xFF5
 20731                           prodh	equ	0xFF4
 20732                           prodl	equ	0xFF3
 20733                           intcon	equ	0xFF2
 20734                           postinc0	equ	0xFEE
 20735                           wreg	equ	0xFE8
 20736                           indf1	equ	0xFE7
 20737                           postdec1	equ	0xFE5
 20738                           fsr1h	equ	0xFE2
 20739                           fsr1l	equ	0xFE1
 20740                           indf2	equ	0xFDF
 20741                           postinc2	equ	0xFDE
 20742                           postdec2	equ	0xFDD
 20743                           plusw2	equ	0xFDB
 20744                           fsr2h	equ	0xFDA
 20745                           fsr2l	equ	0xFD9
 20746                           status	equ	0xFD8
 20747                           
 20748 ;; *************** function _Byte_SetBit *****************
 20749 ;; Defined at:
 20750 ;;		line 32 in file "Library/Types.c"
 20751 ;; Parameters:    Size  Location     Type
 20752 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20753 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 20754 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 20755 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20756 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20757 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20758 ;;		 -> NULL(0), 
 20759 ;;  pBit            1    2[BANK0 ] unsigned char 
 20760 ;;  pValue          1    3[BANK0 ] unsigned char 
 20761 ;; Auto vars:     Size  Location     Type
 20762 ;;		None
 20763 ;; Return value:  Size  Location     Type
 20764 ;;                  1    wreg      void 
 20765 ;; Registers used:
 20766 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20767 ;; Tracked objects:
 20768 ;;		On entry : 0/0
 20769 ;;		On exit  : 0/0
 20770 ;;		Unchanged: 0/0
 20771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20772 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20774 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20775 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20776 ;;Total ram usage:        7 bytes
 20777 ;; Hardware stack levels used:    1
 20778 ;; Hardware stack levels required when called:    7
 20779 ;; This function calls:
 20780 ;;		Nothing
 20781 ;; This function is called by:
 20782 ;;		_Port_SetPinType
 20783 ;;		_Port_SetPin
 20784 ;;		_SPI_Init
 20785 ;;		_SPI_MinSpeed
 20786 ;;		_SPI_MaxSpeed
 20787 ;;		_Word_SetBit
 20788 ;;		_I2C_Init
 20789 ;; This function uses a non-reentrant model
 20790 ;;
 20791                           
 20792                           	psect	text119
 20793  013CD8                     __ptext119:
 20794                           	opt stack 0
 20795  013CD8                     _Byte_SetBit:
 20796                           	opt stack 12
 20797                           
 20798                           ;Types.c: 34: pValue &= 1;
 20799                           
 20800                           ;incstack = 0
 20801  013CD8  0E01               	movlw	1
 20802  013CDA  0100               	movlb	0	; () banked
 20803  013CDC  17C8               	andwf	Byte_SetBit@pValue& (0+255),f,b
 20804                           
 20805                           ; BSR set to: 0
 20806                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 20807  013CDE  C0C7  F0C9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20808  013CE2  0E01               	movlw	1
 20809  013CE4  0100               	movlb	0	; () banked
 20810  013CE6  6FCA               	movwf	(??_Byte_SetBit+1)& (0+255),b
 20811  013CE8  0100               	movlb	0	; () banked
 20812  013CEA  2BC9               	incf	??_Byte_SetBit& (0+255),f,b
 20813  013CEC  D003               	goto	u6574
 20814  013CEE                     u6575:
 20815  013CEE  0100               	movlb	0	; () banked
 20816  013CF0  90D8               	bcf	status,0,c
 20817  013CF2  37CA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20818  013CF4                     u6574:
 20819  013CF4  0100               	movlb	0	; () banked
 20820  013CF6  2FC9               	decfsz	??_Byte_SetBit& (0+255),f,b
 20821  013CF8  D7FA               	goto	u6575
 20822  013CFA  0100               	movlb	0	; () banked
 20823  013CFC  51CA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20824  013CFE  0AFF               	xorlw	255
 20825  013D00  0100               	movlb	0	; () banked
 20826  013D02  6FCB               	movwf	(??_Byte_SetBit+2)& (0+255),b
 20827  013D04  C0C5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20828  013D08  C0C6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20829  013D0C  0100               	movlb	0	; () banked
 20830  013D0E  51CB               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 20831  013D10  16DF               	andwf	indf2,f,c
 20832                           
 20833                           ; BSR set to: 0
 20834                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 20835  013D12  C0C7  F0C9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 20836  013D16  C0C8  F0CA         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 20837  013D1A  0100               	movlb	0	; () banked
 20838  013D1C  2BC9               	incf	??_Byte_SetBit& (0+255),f,b
 20839  013D1E  D003               	goto	u6584
 20840  013D20                     u6585:
 20841  013D20  0100               	movlb	0	; () banked
 20842  013D22  90D8               	bcf	status,0,c
 20843  013D24  37CA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 20844  013D26                     u6584:
 20845  013D26  0100               	movlb	0	; () banked
 20846  013D28  2FC9               	decfsz	??_Byte_SetBit& (0+255),f,b
 20847  013D2A  D7FA               	goto	u6585
 20848  013D2C  C0C5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 20849  013D30  C0C6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 20850  013D34  0100               	movlb	0	; () banked
 20851  013D36  51CA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 20852  013D38  12DF               	iorwf	indf2,f,c
 20853                           
 20854                           ; BSR set to: 0
 20855  013D3A  0012               	return		;funcret
 20856  013D3C                     __end_of_Byte_SetBit:
 20857                           	opt stack 0
 20858                           tosu	equ	0xFFF
 20859                           tosh	equ	0xFFE
 20860                           tosl	equ	0xFFD
 20861                           pclath	equ	0xFFA
 20862                           tblptru	equ	0xFF8
 20863                           tblptrh	equ	0xFF7
 20864                           tblptrl	equ	0xFF6
 20865                           tablat	equ	0xFF5
 20866                           prodh	equ	0xFF4
 20867                           prodl	equ	0xFF3
 20868                           intcon	equ	0xFF2
 20869                           postinc0	equ	0xFEE
 20870                           wreg	equ	0xFE8
 20871                           indf1	equ	0xFE7
 20872                           postdec1	equ	0xFE5
 20873                           fsr1h	equ	0xFE2
 20874                           fsr1l	equ	0xFE1
 20875                           indf2	equ	0xFDF
 20876                           postinc2	equ	0xFDE
 20877                           postdec2	equ	0xFDD
 20878                           plusw2	equ	0xFDB
 20879                           fsr2h	equ	0xFDA
 20880                           fsr2l	equ	0xFD9
 20881                           status	equ	0xFD8
 20882                           
 20883 ;; *************** function _Port_SetQuadType *****************
 20884 ;; Defined at:
 20885 ;;		line 399 in file "Library/Port.c"
 20886 ;; Parameters:    Size  Location     Type
 20887 ;;  pInput          2    3[BANK1 ] const PTR struct Port
 20888 ;;		 -> PortB(10), PortD(10), 
 20889 ;;  pQuad           1    5[BANK1 ] enum E6776
 20890 ;;  pType           1    6[BANK1 ] enum E6795
 20891 ;; Auto vars:     Size  Location     Type
 20892 ;;  Output          1   51[BANK0 ] enum E6475
 20893 ;; Return value:  Size  Location     Type
 20894 ;;                  1    wreg      enum E6475
 20895 ;; Registers used:
 20896 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20897 ;; Tracked objects:
 20898 ;;		On entry : 0/0
 20899 ;;		On exit  : 0/0
 20900 ;;		Unchanged: 0/0
 20901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20902 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20905 ;;      Totals:         0       1       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20906 ;;Total ram usage:        5 bytes
 20907 ;; Hardware stack levels used:    1
 20908 ;; Hardware stack levels required when called:   13
 20909 ;; This function calls:
 20910 ;;		_Byte_SetQuad
 20911 ;;		_Port_CheckQuadType
 20912 ;;		_Word_SetPair
 20913 ;; This function is called by:
 20914 ;;		_MXK_InitDIPSwitch
 20915 ;;		_MXK_Init
 20916 ;; This function uses a non-reentrant model
 20917 ;;
 20918                           
 20919                           	psect	text120
 20920  010CFE                     __ptext120:
 20921                           	opt stack 0
 20922  010CFE                     _Port_SetQuadType:
 20923                           	opt stack 15
 20924                           
 20925                           ;Port.c: 401: ePinError Output = ePinErrorState;
 20926                           
 20927                           ; BSR set to: 0
 20928                           ;incstack = 0
 20929  010CFE  0E05               	movlw	5
 20930  010D00  0100               	movlb	0	; () banked
 20931  010D02  6FF8               	movwf	Port_SetQuadType@Output& (0+255),b
 20932                           
 20933                           ;Port.c: 403: switch (pType)
 20934  010D04  D0C7               	goto	l10998
 20935  010D06                     l10982:
 20936                           
 20937                           ;Port.c: 407: {
 20938                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 20939  010D06  0101               	movlb	1	; () banked
 20940  010D08  EE20 F002          	lfsr	2,2
 20941  010D0C  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 20942  010D0E  26D9               	addwf	fsr2l,f,c
 20943  010D10  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20944  010D12  22DA               	addwfc	fsr2h,f,c
 20945  010D14  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 20946  010D18  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 20947  010D1C  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20948  010D20  0E0F               	movlw	15
 20949  010D22  0100               	movlb	0	; () banked
 20950  010D24  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 20951  010D26  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 20952                           
 20953                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 20954  010D2A  0101               	movlb	1	; () banked
 20955  010D2C  EE20 F004          	lfsr	2,4
 20956  010D30  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 20957  010D32  26D9               	addwf	fsr2l,f,c
 20958  010D34  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20959  010D36  22DA               	addwfc	fsr2h,f,c
 20960  010D38  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 20961  010D3C  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 20962  010D40  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 20963  010D44  0E00               	movlw	0
 20964  010D46  0100               	movlb	0	; () banked
 20965  010D48  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 20966  010D4A  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 20967                           
 20968                           ;Port.c: 413: }
 20969                           ;Port.c: 415: break;
 20970  010D4E  D0B0               	goto	l11000
 20971  010D50                     l10984:
 20972                           
 20973                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 20974  010D50  C1B9  F0F4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 20975  010D54  C1BA  F0F5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 20976  010D58  C1BB  F0F6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 20977  010D5C  0E03               	movlw	3
 20978  010D5E  0100               	movlb	0	; () banked
 20979  010D60  6FF7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 20980  010D62  EC30  F09F         	call	_Port_CheckQuadType	;wreg free
 20981  010D66  0100               	movlb	0	; () banked
 20982  010D68  6FF8               	movwf	Port_SetQuadType@Output& (0+255),b
 20983  010D6A  0100               	movlb	0	; () banked
 20984  010D6C  51F8               	movf	Port_SetQuadType@Output& (0+255),w,b
 20985  010D6E  A4D8               	btfss	status,2,c
 20986  010D70  0012               	return	
 20987                           
 20988                           ; BSR set to: 0
 20989                           ;Port.c: 418: {
 20990                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 20991  010D72  0101               	movlb	1	; () banked
 20992  010D74  EE20 F002          	lfsr	2,2
 20993  010D78  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 20994  010D7A  26D9               	addwf	fsr2l,f,c
 20995  010D7C  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 20996  010D7E  22DA               	addwfc	fsr2h,f,c
 20997  010D80  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 20998  010D84  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 20999  010D88  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21000  010D8C  0E00               	movlw	0
 21001  010D8E  0100               	movlb	0	; () banked
 21002  010D90  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 21003  010D92  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 21004                           
 21005                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21006  010D96  0101               	movlb	1	; () banked
 21007  010D98  EE20 F004          	lfsr	2,4
 21008  010D9C  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21009  010D9E  26D9               	addwf	fsr2l,f,c
 21010  010DA0  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21011  010DA2  22DA               	addwfc	fsr2h,f,c
 21012  010DA4  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 21013  010DA8  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 21014  010DAC  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21015  010DB0  0E00               	movlw	0
 21016  010DB2  0100               	movlb	0	; () banked
 21017  010DB4  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 21018  010DB6  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 21019                           
 21020                           ;Port.c: 424: }
 21021  010DBA  D07A               	goto	l11000
 21022  010DBC                     l10988:
 21023                           
 21024                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21025  010DBC  C1B9  F0F4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21026  010DC0  C1BA  F0F5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21027  010DC4  C1BB  F0F6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21028  010DC8  0E03               	movlw	3
 21029  010DCA  0100               	movlb	0	; () banked
 21030  010DCC  6FF7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21031  010DCE  EC30  F09F         	call	_Port_CheckQuadType	;wreg free
 21032  010DD2  0100               	movlb	0	; () banked
 21033  010DD4  6FF8               	movwf	Port_SetQuadType@Output& (0+255),b
 21034  010DD6  0100               	movlb	0	; () banked
 21035  010DD8  51F8               	movf	Port_SetQuadType@Output& (0+255),w,b
 21036  010DDA  A4D8               	btfss	status,2,c
 21037  010DDC  0012               	return	
 21038                           
 21039                           ; BSR set to: 0
 21040                           ;Port.c: 429: {
 21041                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21042  010DDE  0101               	movlb	1	; () banked
 21043  010DE0  EE20 F002          	lfsr	2,2
 21044  010DE4  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21045  010DE6  26D9               	addwf	fsr2l,f,c
 21046  010DE8  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21047  010DEA  22DA               	addwfc	fsr2h,f,c
 21048  010DEC  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 21049  010DF0  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 21050  010DF4  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21051  010DF8  0E0F               	movlw	15
 21052  010DFA  0100               	movlb	0	; () banked
 21053  010DFC  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 21054  010DFE  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 21055                           
 21056                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 21057  010E02  0101               	movlb	1	; () banked
 21058  010E04  EE20 F004          	lfsr	2,4
 21059  010E08  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21060  010E0A  26D9               	addwf	fsr2l,f,c
 21061  010E0C  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21062  010E0E  22DA               	addwfc	fsr2h,f,c
 21063  010E10  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 21064  010E14  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 21065  010E18  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21066  010E1C  0E0F               	movlw	15
 21067  010E1E  0100               	movlb	0	; () banked
 21068  010E20  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 21069  010E22  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 21070                           
 21071                           ;Port.c: 435: }
 21072  010E26  D044               	goto	l11000
 21073  010E28                     l10992:
 21074                           
 21075                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21076  010E28  C1B9  F0F4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21077  010E2C  C1BA  F0F5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21078  010E30  C1BB  F0F6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21079  010E34  0E03               	movlw	3
 21080  010E36  0100               	movlb	0	; () banked
 21081  010E38  6FF7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21082  010E3A  EC30  F09F         	call	_Port_CheckQuadType	;wreg free
 21083  010E3E  0100               	movlb	0	; () banked
 21084  010E40  6FF8               	movwf	Port_SetQuadType@Output& (0+255),b
 21085  010E42  0100               	movlb	0	; () banked
 21086  010E44  51F8               	movf	Port_SetQuadType@Output& (0+255),w,b
 21087  010E46  A4D8               	btfss	status,2,c
 21088  010E48  0012               	return	
 21089                           
 21090                           ; BSR set to: 0
 21091                           ;Port.c: 440: {
 21092                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21093  010E4A  0101               	movlb	1	; () banked
 21094  010E4C  EE20 F002          	lfsr	2,2
 21095  010E50  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21096  010E52  26D9               	addwf	fsr2l,f,c
 21097  010E54  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21098  010E56  22DA               	addwfc	fsr2h,f,c
 21099  010E58  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 21100  010E5C  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 21101  010E60  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21102  010E64  0E00               	movlw	0
 21103  010E66  0100               	movlb	0	; () banked
 21104  010E68  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 21105  010E6A  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 21106                           
 21107                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21108  010E6E  0101               	movlb	1	; () banked
 21109  010E70  EE20 F004          	lfsr	2,4
 21110  010E74  51B9               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21111  010E76  26D9               	addwf	fsr2l,f,c
 21112  010E78  51BA               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21113  010E7A  22DA               	addwfc	fsr2h,f,c
 21114  010E7C  CFDE F0D0          	movff	postinc2,Byte_SetQuad@pInput
 21115  010E80  CFDD F0D1          	movff	postdec2,Byte_SetQuad@pInput+1
 21116  010E84  C1BB  F0D2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21117  010E88  0E00               	movlw	0
 21118  010E8A  0100               	movlb	0	; () banked
 21119  010E8C  6FD3               	movwf	Byte_SetQuad@pValue& (0+255),b
 21120  010E8E  EC2C  F0A4         	call	_Byte_SetQuad	;wreg free
 21121                           
 21122                           ;Port.c: 446: }
 21123  010E92  D00E               	goto	l11000
 21124  010E94                     l10998:
 21125  010E94  0101               	movlb	1	; () banked
 21126  010E96  51BC               	movf	Port_SetQuadType@pType& (0+255),w,b
 21127                           
 21128                           ; Switch size 1, requested type "space"
 21129                           ; Number of cases is 4, Range of values is 0 to 3
 21130                           ; switch strategies available:
 21131                           ; Name         Instructions Cycles
 21132                           ; simple_byte           13     7 (average)
 21133                           ;	Chosen strategy is simple_byte
 21134  010E98  0A00               	xorlw	0	; case 0
 21135  010E9A  B4D8               	btfsc	status,2,c
 21136  010E9C  D734               	goto	l10982
 21137  010E9E  0A01               	xorlw	1	; case 1
 21138  010EA0  B4D8               	btfsc	status,2,c
 21139  010EA2  D756               	goto	l10984
 21140  010EA4  0A03               	xorlw	3	; case 2
 21141  010EA6  B4D8               	btfsc	status,2,c
 21142  010EA8  D789               	goto	l10988
 21143  010EAA  0A01               	xorlw	1	; case 3
 21144  010EAC  B4D8               	btfsc	status,2,c
 21145  010EAE  D7BC               	goto	l10992
 21146  010EB0                     l11000:
 21147                           
 21148                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 21149  010EB0  0E08               	movlw	8
 21150  010EB2  0101               	movlb	1	; () banked
 21151  010EB4  25B9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21152  010EB6  0100               	movlb	0	; () banked
 21153  010EB8  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 21154  010EBA  0E00               	movlw	0
 21155  010EBC  0101               	movlb	1	; () banked
 21156  010EBE  21BA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21157  010EC0  0100               	movlb	0	; () banked
 21158  010EC2  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21159  010EC4  0101               	movlb	1	; () banked
 21160  010EC6  51BB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21161  010EC8  0D04               	mullw	4
 21162  010ECA  CFF3 F0D6          	movff	prodl,Word_SetPair@pPair
 21163  010ECE  C1BC  F0D7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21164  010ED2  EC33  F0A1         	call	_Word_SetPair	;wreg free
 21165                           
 21166                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 21167  010ED6  0E08               	movlw	8
 21168  010ED8  0101               	movlb	1	; () banked
 21169  010EDA  25B9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21170  010EDC  0100               	movlb	0	; () banked
 21171  010EDE  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 21172  010EE0  0E00               	movlw	0
 21173  010EE2  0101               	movlb	1	; () banked
 21174  010EE4  21BA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21175  010EE6  0100               	movlb	0	; () banked
 21176  010EE8  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21177  010EEA  0101               	movlb	1	; () banked
 21178  010EEC  51BB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21179  010EEE  0D04               	mullw	4
 21180  010EF0  28F3               	incf	prodl,w,c
 21181  010EF2  0100               	movlb	0	; () banked
 21182  010EF4  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 21183  010EF6  C1BC  F0D7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21184  010EFA  EC33  F0A1         	call	_Word_SetPair	;wreg free
 21185                           
 21186                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 21187  010EFE  0E08               	movlw	8
 21188  010F00  0101               	movlb	1	; () banked
 21189  010F02  25B9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21190  010F04  0100               	movlb	0	; () banked
 21191  010F06  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 21192  010F08  0E00               	movlw	0
 21193  010F0A  0101               	movlb	1	; () banked
 21194  010F0C  21BA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21195  010F0E  0100               	movlb	0	; () banked
 21196  010F10  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21197  010F12  0101               	movlb	1	; () banked
 21198  010F14  51BB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21199  010F16  0D04               	mullw	4
 21200  010F18  50F3               	movf	prodl,w,c
 21201  010F1A  0F02               	addlw	2
 21202  010F1C  0100               	movlb	0	; () banked
 21203  010F1E  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 21204  010F20  C1BC  F0D7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21205  010F24  EC33  F0A1         	call	_Word_SetPair	;wreg free
 21206                           
 21207                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 21208  010F28  0E08               	movlw	8
 21209  010F2A  0101               	movlb	1	; () banked
 21210  010F2C  25B9               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21211  010F2E  0100               	movlb	0	; () banked
 21212  010F30  6FD4               	movwf	Word_SetPair@pInput& (0+255),b
 21213  010F32  0E00               	movlw	0
 21214  010F34  0101               	movlb	1	; () banked
 21215  010F36  21BA               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21216  010F38  0100               	movlb	0	; () banked
 21217  010F3A  6FD5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21218  010F3C  0101               	movlb	1	; () banked
 21219  010F3E  51BB               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21220  010F40  0D04               	mullw	4
 21221  010F42  50F3               	movf	prodl,w,c
 21222  010F44  0F03               	addlw	3
 21223  010F46  0100               	movlb	0	; () banked
 21224  010F48  6FD6               	movwf	Word_SetPair@pPair& (0+255),b
 21225  010F4A  C1BC  F0D7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21226  010F4E  EC33  F0A1         	call	_Word_SetPair	;wreg free
 21227  010F52  0012               	return	
 21228  010F54                     __end_of_Port_SetQuadType:
 21229                           	opt stack 0
 21230                           tosu	equ	0xFFF
 21231                           tosh	equ	0xFFE
 21232                           tosl	equ	0xFFD
 21233                           pclath	equ	0xFFA
 21234                           tblptru	equ	0xFF8
 21235                           tblptrh	equ	0xFF7
 21236                           tblptrl	equ	0xFF6
 21237                           tablat	equ	0xFF5
 21238                           prodh	equ	0xFF4
 21239                           prodl	equ	0xFF3
 21240                           intcon	equ	0xFF2
 21241                           postinc0	equ	0xFEE
 21242                           wreg	equ	0xFE8
 21243                           indf1	equ	0xFE7
 21244                           postdec1	equ	0xFE5
 21245                           fsr1h	equ	0xFE2
 21246                           fsr1l	equ	0xFE1
 21247                           indf2	equ	0xFDF
 21248                           postinc2	equ	0xFDE
 21249                           postdec2	equ	0xFDD
 21250                           plusw2	equ	0xFDB
 21251                           fsr2h	equ	0xFDA
 21252                           fsr2l	equ	0xFD9
 21253                           status	equ	0xFD8
 21254                           
 21255 ;; *************** function _Word_SetPair *****************
 21256 ;; Defined at:
 21257 ;;		line 149 in file "Library/Types.c"
 21258 ;; Parameters:    Size  Location     Type
 21259 ;;  pInput          2   15[BANK0 ] PTR struct Word
 21260 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21261 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21262 ;;  pPair           1   17[BANK0 ] unsigned char 
 21263 ;;  pValue          1   18[BANK0 ] unsigned char 
 21264 ;; Auto vars:     Size  Location     Type
 21265 ;;		None
 21266 ;; Return value:  Size  Location     Type
 21267 ;;                  1    wreg      void 
 21268 ;; Registers used:
 21269 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21270 ;; Tracked objects:
 21271 ;;		On entry : 0/0
 21272 ;;		On exit  : 0/0
 21273 ;;		Unchanged: 0/0
 21274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21275 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21278 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21279 ;;Total ram usage:        4 bytes
 21280 ;; Hardware stack levels used:    1
 21281 ;; Hardware stack levels required when called:    9
 21282 ;; This function calls:
 21283 ;;		_Byte_SetPair
 21284 ;; This function is called by:
 21285 ;;		_Port_SetPinType
 21286 ;;		_Port_SetQuadType
 21287 ;;		_Port_SetType
 21288 ;;		_Port_SetPairType
 21289 ;;		_PortProperty_Init
 21290 ;; This function uses a non-reentrant model
 21291 ;;
 21292                           
 21293                           	psect	text121
 21294  014266                     __ptext121:
 21295                           	opt stack 0
 21296  014266                     _Word_SetPair:
 21297                           	opt stack 18
 21298                           
 21299                           ;Types.c: 151: if (pPair >= 4)
 21300                           
 21301                           ;incstack = 0
 21302  014266  0E03               	movlw	3
 21303  014268  0100               	movlb	0	; () banked
 21304  01426A  65D6               	cpfsgt	Word_SetPair@pPair& (0+255),b
 21305  01426C  D014               	goto	l10802
 21306                           
 21307                           ; BSR set to: 0
 21308                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 21309  01426E  0E01               	movlw	1
 21310  014270  0100               	movlb	0	; () banked
 21311  014272  25D4               	addwf	Word_SetPair@pInput& (0+255),w,b
 21312  014274  0100               	movlb	0	; () banked
 21313  014276  6FD0               	movwf	Byte_SetPair@pInput& (0+255),b
 21314  014278  0E00               	movlw	0
 21315  01427A  0100               	movlb	0	; () banked
 21316  01427C  21D5               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 21317  01427E  0100               	movlb	0	; () banked
 21318  014280  6FD1               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 21319  014282  0100               	movlb	0	; () banked
 21320  014284  51D6               	movf	Word_SetPair@pPair& (0+255),w,b
 21321  014286  0FFC               	addlw	252
 21322  014288  0100               	movlb	0	; () banked
 21323  01428A  6FD2               	movwf	Byte_SetPair@pPair& (0+255),b
 21324  01428C  C0D7  F0D3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21325  014290  EC1B  F0A4         	call	_Byte_SetPair	;wreg free
 21326  014294  0012               	return	
 21327  014296                     l10802:
 21328                           
 21329                           ;Types.c: 153: else
 21330                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 21331  014296  C0D4  F0D0         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 21332  01429A  C0D5  F0D1         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 21333  01429E  C0D6  F0D2         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 21334  0142A2  C0D7  F0D3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21335  0142A6  EC1B  F0A4         	call	_Byte_SetPair	;wreg free
 21336  0142AA  0012               	return	
 21337  0142AC                     __end_of_Word_SetPair:
 21338                           	opt stack 0
 21339                           tosu	equ	0xFFF
 21340                           tosh	equ	0xFFE
 21341                           tosl	equ	0xFFD
 21342                           pclath	equ	0xFFA
 21343                           tblptru	equ	0xFF8
 21344                           tblptrh	equ	0xFF7
 21345                           tblptrl	equ	0xFF6
 21346                           tablat	equ	0xFF5
 21347                           prodh	equ	0xFF4
 21348                           prodl	equ	0xFF3
 21349                           intcon	equ	0xFF2
 21350                           postinc0	equ	0xFEE
 21351                           wreg	equ	0xFE8
 21352                           indf1	equ	0xFE7
 21353                           postdec1	equ	0xFE5
 21354                           fsr1h	equ	0xFE2
 21355                           fsr1l	equ	0xFE1
 21356                           indf2	equ	0xFDF
 21357                           postinc2	equ	0xFDE
 21358                           postdec2	equ	0xFDD
 21359                           plusw2	equ	0xFDB
 21360                           fsr2h	equ	0xFDA
 21361                           fsr2l	equ	0xFD9
 21362                           status	equ	0xFD8
 21363                           
 21364 ;; *************** function _Byte_SetPair *****************
 21365 ;; Defined at:
 21366 ;;		line 83 in file "Library/Types.c"
 21367 ;; Parameters:    Size  Location     Type
 21368 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 21369 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 21370 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 21371 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 21372 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 21373 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 21374 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 21375 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 21376 ;;		 -> NULL(0), 
 21377 ;;  pPair           1   13[BANK0 ] unsigned char 
 21378 ;;  pValue          1   14[BANK0 ] unsigned char 
 21379 ;; Auto vars:     Size  Location     Type
 21380 ;;		None
 21381 ;; Return value:  Size  Location     Type
 21382 ;;                  1    wreg      void 
 21383 ;; Registers used:
 21384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21385 ;; Tracked objects:
 21386 ;;		On entry : 0/0
 21387 ;;		On exit  : 0/0
 21388 ;;		Unchanged: 0/0
 21389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21390 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21393 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21394 ;;Total ram usage:        4 bytes
 21395 ;; Hardware stack levels used:    1
 21396 ;; Hardware stack levels required when called:    8
 21397 ;; This function calls:
 21398 ;;		_Byte_SetZone
 21399 ;; This function is called by:
 21400 ;;		_Word_SetPair
 21401 ;;		_Port_SetPairType
 21402 ;;		_Port_SetPair
 21403 ;; This function uses a non-reentrant model
 21404 ;;
 21405                           
 21406                           	psect	text122
 21407  014836                     __ptext122:
 21408                           	opt stack 0
 21409  014836                     _Byte_SetPair:
 21410                           	opt stack 18
 21411                           
 21412                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 21413                           
 21414                           ;incstack = 0
 21415  014836  C0D0  F0C5         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 21416  01483A  C0D1  F0C6         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 21417  01483E  0E04               	movlw	4
 21418  014840  0100               	movlb	0	; () banked
 21419  014842  6FC7               	movwf	Byte_SetZone@pMax& (0+255),b
 21420  014844  C0D2  F0C8         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 21421  014848  0E02               	movlw	2
 21422  01484A  0100               	movlb	0	; () banked
 21423  01484C  6FC9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 21424  01484E  C0D3  F0CA         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 21425  014852  EC5D  F096         	call	_Byte_SetZone	;wreg free
 21426  014856  0012               	return		;funcret
 21427  014858                     __end_of_Byte_SetPair:
 21428                           	opt stack 0
 21429                           tosu	equ	0xFFF
 21430                           tosh	equ	0xFFE
 21431                           tosl	equ	0xFFD
 21432                           pclath	equ	0xFFA
 21433                           tblptru	equ	0xFF8
 21434                           tblptrh	equ	0xFF7
 21435                           tblptrl	equ	0xFF6
 21436                           tablat	equ	0xFF5
 21437                           prodh	equ	0xFF4
 21438                           prodl	equ	0xFF3
 21439                           intcon	equ	0xFF2
 21440                           postinc0	equ	0xFEE
 21441                           wreg	equ	0xFE8
 21442                           indf1	equ	0xFE7
 21443                           postdec1	equ	0xFE5
 21444                           fsr1h	equ	0xFE2
 21445                           fsr1l	equ	0xFE1
 21446                           indf2	equ	0xFDF
 21447                           postinc2	equ	0xFDE
 21448                           postdec2	equ	0xFDD
 21449                           plusw2	equ	0xFDB
 21450                           fsr2h	equ	0xFDA
 21451                           fsr2l	equ	0xFD9
 21452                           status	equ	0xFD8
 21453                           
 21454 ;; *************** function _Port_CheckQuadType *****************
 21455 ;; Defined at:
 21456 ;;		line 126 in file "Library/Port.c"
 21457 ;; Parameters:    Size  Location     Type
 21458 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 21459 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21460 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21461 ;;  pQuad           1   49[BANK0 ] enum E6776
 21462 ;;  pDrive          1   50[BANK0 ] enum E6469
 21463 ;; Auto vars:     Size  Location     Type
 21464 ;;  Output          1    2[BANK1 ] enum E6475
 21465 ;;  Pair2           1    1[BANK1 ] enum E6760
 21466 ;;  Pair1           1    0[BANK1 ] enum E6760
 21467 ;; Return value:  Size  Location     Type
 21468 ;;                  1    wreg      enum E6475
 21469 ;; Registers used:
 21470 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21471 ;; Tracked objects:
 21472 ;;		On entry : 0/0
 21473 ;;		On exit  : 0/0
 21474 ;;		Unchanged: 0/0
 21475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21476 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21477 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21479 ;;      Totals:         0       4       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21480 ;;Total ram usage:        7 bytes
 21481 ;; Hardware stack levels used:    1
 21482 ;; Hardware stack levels required when called:   12
 21483 ;; This function calls:
 21484 ;;		_Port_CheckPairType
 21485 ;; This function is called by:
 21486 ;;		_Port_CheckPortType
 21487 ;;		_Port_SetQuadType
 21488 ;; This function uses a non-reentrant model
 21489 ;;
 21490                           
 21491                           	psect	text123
 21492  013E60                     __ptext123:
 21493                           	opt stack 0
 21494  013E60                     _Port_CheckQuadType:
 21495                           	opt stack 14
 21496                           
 21497                           ;Port.c: 128: ePinError Output = ePinErrorState;
 21498                           
 21499                           ;incstack = 0
 21500  013E60  0E05               	movlw	5
 21501  013E62  0101               	movlb	1	; () banked
 21502  013E64  6FB8               	movwf	Port_CheckQuadType@Output& (0+255),b
 21503                           
 21504                           ; BSR set to: 1
 21505                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 21506  013E66  0100               	movlb	0	; () banked
 21507  013E68  51F6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21508  013E6A  0D02               	mullw	2
 21509  013E6C  CFF3 F1B6          	movff	prodl,Port_CheckQuadType@Pair1
 21510                           
 21511                           ; BSR set to: 0
 21512                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 21513  013E70  0100               	movlb	0	; () banked
 21514  013E72  51F6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 21515  013E74  0D02               	mullw	2
 21516  013E76  28F3               	incf	prodl,w,c
 21517  013E78  0101               	movlb	1	; () banked
 21518  013E7A  6FB7               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 21519                           
 21520                           ; BSR set to: 1
 21521                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 21522  013E7C  C0F4  F0EB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21523  013E80  C0F5  F0EC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21524  013E84  C1B6  F0ED         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 21525  013E88  C0F7  F0EE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21526  013E8C  EC05  F09E         	call	_Port_CheckPairType	;wreg free
 21527  013E90  0101               	movlb	1	; () banked
 21528  013E92  6FB8               	movwf	Port_CheckQuadType@Output& (0+255),b
 21529  013E94  0101               	movlb	1	; () banked
 21530  013E96  51B8               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21531  013E98  A4D8               	btfss	status,2,c
 21532  013E9A  D00C               	goto	l10794
 21533                           
 21534                           ; BSR set to: 1
 21535                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 21536  013E9C  C0F4  F0EB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 21537  013EA0  C0F5  F0EC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 21538  013EA4  C1B7  F0ED         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 21539  013EA8  C0F7  F0EE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 21540  013EAC  EC05  F09E         	call	_Port_CheckPairType	;wreg free
 21541  013EB0  0101               	movlb	1	; () banked
 21542  013EB2  6FB8               	movwf	Port_CheckQuadType@Output& (0+255),b
 21543  013EB4                     l10794:
 21544                           
 21545                           ; BSR set to: 1
 21546                           ;Port.c: 136: return Output;
 21547  013EB4  0101               	movlb	1	; () banked
 21548  013EB6  51B8               	movf	Port_CheckQuadType@Output& (0+255),w,b
 21549  013EB8  0012               	return	
 21550  013EBA                     __end_of_Port_CheckQuadType:
 21551                           	opt stack 0
 21552                           tosu	equ	0xFFF
 21553                           tosh	equ	0xFFE
 21554                           tosl	equ	0xFFD
 21555                           pclath	equ	0xFFA
 21556                           tblptru	equ	0xFF8
 21557                           tblptrh	equ	0xFF7
 21558                           tblptrl	equ	0xFF6
 21559                           tablat	equ	0xFF5
 21560                           prodh	equ	0xFF4
 21561                           prodl	equ	0xFF3
 21562                           intcon	equ	0xFF2
 21563                           postinc0	equ	0xFEE
 21564                           wreg	equ	0xFE8
 21565                           indf1	equ	0xFE7
 21566                           postdec1	equ	0xFE5
 21567                           fsr1h	equ	0xFE2
 21568                           fsr1l	equ	0xFE1
 21569                           indf2	equ	0xFDF
 21570                           postinc2	equ	0xFDE
 21571                           postdec2	equ	0xFDD
 21572                           plusw2	equ	0xFDB
 21573                           fsr2h	equ	0xFDA
 21574                           fsr2l	equ	0xFD9
 21575                           status	equ	0xFD8
 21576                           
 21577 ;; *************** function _Port_CheckPairType *****************
 21578 ;; Defined at:
 21579 ;;		line 112 in file "Library/Port.c"
 21580 ;; Parameters:    Size  Location     Type
 21581 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21582 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21583 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21584 ;;  pPair           1   40[BANK0 ] enum E6760
 21585 ;;  pDrive          1   41[BANK0 ] enum E6469
 21586 ;; Auto vars:     Size  Location     Type
 21587 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 21588 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21589 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21590 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21591 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21592 ;;  Output          1   44[BANK0 ] enum E6475
 21593 ;;  Pin2            1   43[BANK0 ] enum E6750
 21594 ;;  Pin1            1   42[BANK0 ] enum E6750
 21595 ;; Return value:  Size  Location     Type
 21596 ;;                  1    wreg      enum E6475
 21597 ;; Registers used:
 21598 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21599 ;; Tracked objects:
 21600 ;;		On entry : 0/0
 21601 ;;		On exit  : 0/0
 21602 ;;		Unchanged: 0/0
 21603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21605 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21607 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21608 ;;Total ram usage:        9 bytes
 21609 ;; Hardware stack levels used:    1
 21610 ;; Hardware stack levels required when called:   11
 21611 ;; This function calls:
 21612 ;;		_PortProperty_Valid
 21613 ;; This function is called by:
 21614 ;;		_Port_CheckQuadType
 21615 ;;		_Port_SetPairType
 21616 ;; This function uses a non-reentrant model
 21617 ;;
 21618                           
 21619                           	psect	text124
 21620  013C0A                     __ptext124:
 21621                           	opt stack 0
 21622  013C0A                     _Port_CheckPairType:
 21623                           	opt stack 14
 21624                           
 21625                           ;Port.c: 114: ePinError Output = ePinErrorState;
 21626                           
 21627                           ; BSR set to: 1
 21628                           ;incstack = 0
 21629  013C0A  0E05               	movlw	5
 21630  013C0C  0100               	movlb	0	; () banked
 21631  013C0E  6FF1               	movwf	Port_CheckPairType@Output& (0+255),b
 21632                           
 21633                           ; BSR set to: 0
 21634                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 21635  013C10  C0EB  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 21636  013C14  C0EC  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 21637  013C18  CFDE F0F2          	movff	postinc2,Port_CheckPairType@Props
 21638  013C1C  CFDD F0F3          	movff	postdec2,Port_CheckPairType@Props+1
 21639                           
 21640                           ; BSR set to: 0
 21641                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 21642  013C20  0100               	movlb	0	; () banked
 21643  013C22  51ED               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21644  013C24  0D02               	mullw	2
 21645  013C26  CFF3 F0EF          	movff	prodl,Port_CheckPairType@Pin1
 21646                           
 21647                           ; BSR set to: 0
 21648                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 21649  013C2A  0100               	movlb	0	; () banked
 21650  013C2C  51ED               	movf	Port_CheckPairType@pPair& (0+255),w,b
 21651  013C2E  0D02               	mullw	2
 21652  013C30  28F3               	incf	prodl,w,c
 21653  013C32  0100               	movlb	0	; () banked
 21654  013C34  6FF0               	movwf	Port_CheckPairType@Pin2& (0+255),b
 21655                           
 21656                           ; BSR set to: 0
 21657                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 21658  013C36  C0F2  F0D4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21659  013C3A  C0F3  F0D5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21660  013C3E  C0EE  F0D6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21661  013C42  C0EF  F0D7         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 21662  013C46  EC90  F09B         	call	_PortProperty_Valid	;wreg free
 21663  013C4A  0100               	movlb	0	; () banked
 21664  013C4C  6FF1               	movwf	Port_CheckPairType@Output& (0+255),b
 21665  013C4E  0100               	movlb	0	; () banked
 21666  013C50  51F1               	movf	Port_CheckPairType@Output& (0+255),w,b
 21667  013C52  A4D8               	btfss	status,2,c
 21668  013C54  D00C               	goto	l10704
 21669                           
 21670                           ; BSR set to: 0
 21671                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 21672  013C56  C0F2  F0D4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 21673  013C5A  C0F3  F0D5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 21674  013C5E  C0EE  F0D6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 21675  013C62  C0F0  F0D7         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 21676  013C66  EC90  F09B         	call	_PortProperty_Valid	;wreg free
 21677  013C6A  0100               	movlb	0	; () banked
 21678  013C6C  6FF1               	movwf	Port_CheckPairType@Output& (0+255),b
 21679  013C6E                     l10704:
 21680                           
 21681                           ; BSR set to: 0
 21682                           ;Port.c: 124: return Output;
 21683  013C6E  0100               	movlb	0	; () banked
 21684  013C70  51F1               	movf	Port_CheckPairType@Output& (0+255),w,b
 21685  013C72  0012               	return	
 21686  013C74                     __end_of_Port_CheckPairType:
 21687                           	opt stack 0
 21688                           tosu	equ	0xFFF
 21689                           tosh	equ	0xFFE
 21690                           tosl	equ	0xFFD
 21691                           pclath	equ	0xFFA
 21692                           tblptru	equ	0xFF8
 21693                           tblptrh	equ	0xFF7
 21694                           tblptrl	equ	0xFF6
 21695                           tablat	equ	0xFF5
 21696                           prodh	equ	0xFF4
 21697                           prodl	equ	0xFF3
 21698                           intcon	equ	0xFF2
 21699                           postinc0	equ	0xFEE
 21700                           wreg	equ	0xFE8
 21701                           indf1	equ	0xFE7
 21702                           postdec1	equ	0xFE5
 21703                           fsr1h	equ	0xFE2
 21704                           fsr1l	equ	0xFE1
 21705                           indf2	equ	0xFDF
 21706                           postinc2	equ	0xFDE
 21707                           postdec2	equ	0xFDD
 21708                           plusw2	equ	0xFDB
 21709                           fsr2h	equ	0xFDA
 21710                           fsr2l	equ	0xFD9
 21711                           status	equ	0xFD8
 21712                           
 21713 ;; *************** function _PortProperty_Valid *****************
 21714 ;; Defined at:
 21715 ;;		line 220 in file "Library/Types.c"
 21716 ;; Parameters:    Size  Location     Type
 21717 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 21718 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21719 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21720 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21721 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21722 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 21723 ;;  pPin            1   18[BANK0 ] unsigned char 
 21724 ;; Auto vars:     Size  Location     Type
 21725 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 21726 ;;  Pair            1   37[BANK0 ] enum E6469
 21727 ;; Return value:  Size  Location     Type
 21728 ;;                  1    wreg      enum E6475
 21729 ;; Registers used:
 21730 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21731 ;; Tracked objects:
 21732 ;;		On entry : 0/0
 21733 ;;		On exit  : 0/0
 21734 ;;		Unchanged: 0/0
 21735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21736 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21737 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21738 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21739 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21740 ;;Total ram usage:       23 bytes
 21741 ;; Hardware stack levels used:    1
 21742 ;; Hardware stack levels required when called:   10
 21743 ;; This function calls:
 21744 ;;		_Word_GetPair
 21745 ;; This function is called by:
 21746 ;;		_Port_CheckPairType
 21747 ;;		_Port_SetPinType
 21748 ;; This function uses a non-reentrant model
 21749 ;;
 21750                           
 21751                           	psect	text125
 21752  013720                     __ptext125:
 21753                           	opt stack 0
 21754  013720                     _PortProperty_Valid:
 21755                           	opt stack 17
 21756                           
 21757                           ;Types.c: 222: ePinDrive Pair;
 21758                           ;Types.c: 223: const ePinError Errors[4][4] =
 21759                           ;Types.c: 224: {
 21760                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 21761                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 21762                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 21763                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 21764                           ;Types.c: 230: };
 21765                           
 21766                           ; BSR set to: 0
 21767                           ;incstack = 0
 21768  013720  0E5B               	movlw	low PortProperty_Valid@F6830
 21769  013722  6EF6               	movwf	tblptrl,c
 21770  013724                     	if	1	;There is more than 1 active tblptr byte
 21771  013724  0EFD               	movlw	high PortProperty_Valid@F6830
 21772  013726  6EF7               	movwf	tblptrh,c
 21773  013728                     	endif
 21774  013728                     	if	1	;There are 3 active tblptr bytes
 21775  013728  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 21776  01372A  6EF8               	movwf	tblptru,c
 21777  01372C                     	endif
 21778  01372C  EE20  F0DA         	lfsr	2,PortProperty_Valid@Errors
 21779  013730  0E0F               	movlw	15
 21780  013732                     u6970:
 21781  013732  0009               	tblrd		*+
 21782  013734  CFF5 FFDE          	movff	tablat,postinc2
 21783  013738  06E8               	decf	wreg,f,c
 21784  01373A  E2FB               	bc	u6970
 21785                           
 21786                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 21787  01373C  C0D4  F0D1         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 21788  013740  C0D5  F0D2         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 21789  013744  C0D7  F0D3         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 21790  013748  ECD8  F0A1         	call	_Word_GetPair	;wreg free
 21791  01374C  0100               	movlb	0	; () banked
 21792  01374E  6FEA               	movwf	PortProperty_Valid@Pair& (0+255),b
 21793                           
 21794                           ; BSR set to: 0
 21795                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 21796  013750  0E04               	movlw	4
 21797  013752  0100               	movlb	0	; () banked
 21798  013754  61D6               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 21799  013756  D020               	goto	l10494
 21800                           
 21801                           ; BSR set to: 0
 21802  013758  0E04               	movlw	4
 21803  01375A  0100               	movlb	0	; () banked
 21804  01375C  61EA               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 21805  01375E  D01C               	goto	l10494
 21806                           
 21807                           ; BSR set to: 0
 21808                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 21809  013760  0100               	movlb	0	; () banked
 21810  013762  51D6               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 21811  013764  0D04               	mullw	4
 21812  013766  0EDA               	movlw	low PortProperty_Valid@Errors
 21813  013768  0100               	movlb	0	; () banked
 21814  01376A  6FD8               	movwf	??_PortProperty_Valid& (0+255),b
 21815  01376C  0E00               	movlw	high PortProperty_Valid@Errors
 21816  01376E  0100               	movlb	0	; () banked
 21817  013770  6FD9               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 21818  013772  50F3               	movf	prodl,w,c
 21819  013774  0100               	movlb	0	; () banked
 21820  013776  27D8               	addwf	??_PortProperty_Valid& (0+255),f,b
 21821  013778  50F4               	movf	prodh,w,c
 21822  01377A  0100               	movlb	0	; () banked
 21823  01377C  23D9               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 21824  01377E  0100               	movlb	0	; () banked
 21825  013780  51EA               	movf	PortProperty_Valid@Pair& (0+255),w,b
 21826  013782  0D01               	mullw	1
 21827  013784  50F3               	movf	prodl,w,c
 21828  013786  0100               	movlb	0	; () banked
 21829  013788  25D8               	addwf	??_PortProperty_Valid& (0+255),w,b
 21830  01378A  6ED9               	movwf	fsr2l,c
 21831  01378C  50F4               	movf	prodh,w,c
 21832  01378E  0100               	movlb	0	; () banked
 21833  013790  21D9               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 21834  013792  6EDA               	movwf	fsr2h,c
 21835  013794  50DF               	movf	indf2,w,c
 21836                           
 21837                           ; BSR set to: 0
 21838  013796  0012               	return	
 21839  013798                     l10494:
 21840                           
 21841                           ; BSR set to: 0
 21842                           ;Types.c: 237: return ePinErrorState;
 21843  013798  0E05               	movlw	5
 21844  01379A  0012               	return	
 21845  01379C                     __end_of_PortProperty_Valid:
 21846                           	opt stack 0
 21847                           tosu	equ	0xFFF
 21848                           tosh	equ	0xFFE
 21849                           tosl	equ	0xFFD
 21850                           pclath	equ	0xFFA
 21851                           tblptru	equ	0xFF8
 21852                           tblptrh	equ	0xFF7
 21853                           tblptrl	equ	0xFF6
 21854                           tablat	equ	0xFF5
 21855                           prodh	equ	0xFF4
 21856                           prodl	equ	0xFF3
 21857                           intcon	equ	0xFF2
 21858                           postinc0	equ	0xFEE
 21859                           wreg	equ	0xFE8
 21860                           indf1	equ	0xFE7
 21861                           postdec1	equ	0xFE5
 21862                           fsr1h	equ	0xFE2
 21863                           fsr1l	equ	0xFE1
 21864                           indf2	equ	0xFDF
 21865                           postinc2	equ	0xFDE
 21866                           postdec2	equ	0xFDD
 21867                           plusw2	equ	0xFDB
 21868                           fsr2h	equ	0xFDA
 21869                           fsr2l	equ	0xFD9
 21870                           status	equ	0xFD8
 21871                           
 21872 ;; *************** function _Word_GetPair *****************
 21873 ;; Defined at:
 21874 ;;		line 156 in file "Library/Types.c"
 21875 ;; Parameters:    Size  Location     Type
 21876 ;;  pInput          2   12[BANK0 ] PTR struct Word
 21877 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21878 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 21879 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 21880 ;;		 -> PortC(10), PortF(10), NULL(0), 
 21881 ;;  pPair           1   14[BANK0 ] unsigned char 
 21882 ;; Auto vars:     Size  Location     Type
 21883 ;;		None
 21884 ;; Return value:  Size  Location     Type
 21885 ;;                  1    wreg      unsigned char 
 21886 ;; Registers used:
 21887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21888 ;; Tracked objects:
 21889 ;;		On entry : 0/0
 21890 ;;		On exit  : 0/0
 21891 ;;		Unchanged: 0/0
 21892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21893 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21897 ;;Total ram usage:        3 bytes
 21898 ;; Hardware stack levels used:    1
 21899 ;; Hardware stack levels required when called:    9
 21900 ;; This function calls:
 21901 ;;		_Byte_GetPair
 21902 ;; This function is called by:
 21903 ;;		_Port_Init
 21904 ;;		_Port_SetPin
 21905 ;;		_Port_Set
 21906 ;;		_PortProperty_Valid
 21907 ;;		_Port_SetPair
 21908 ;;		_Port_SetQuad
 21909 ;; This function uses a non-reentrant model
 21910 ;;
 21911                           
 21912                           	psect	text126
 21913  0143B0                     __ptext126:
 21914                           	opt stack 0
 21915  0143B0                     _Word_GetPair:
 21916                           	opt stack 10
 21917                           
 21918                           ;Types.c: 158: if (pPair >= 4)
 21919                           
 21920                           ; BSR set to: 0
 21921                           ;incstack = 0
 21922  0143B0  0E03               	movlw	3
 21923  0143B2  0100               	movlb	0	; () banked
 21924  0143B4  65D3               	cpfsgt	Word_GetPair@pPair& (0+255),b
 21925  0143B6  D012               	goto	l9884
 21926                           
 21927                           ; BSR set to: 0
 21928                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 21929  0143B8  0E01               	movlw	1
 21930  0143BA  0100               	movlb	0	; () banked
 21931  0143BC  25D1               	addwf	Word_GetPair@pInput& (0+255),w,b
 21932  0143BE  0100               	movlb	0	; () banked
 21933  0143C0  6FCE               	movwf	Byte_GetPair@pInput& (0+255),b
 21934  0143C2  0E00               	movlw	0
 21935  0143C4  0100               	movlb	0	; () banked
 21936  0143C6  21D2               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 21937  0143C8  0100               	movlb	0	; () banked
 21938  0143CA  6FCF               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 21939  0143CC  0100               	movlb	0	; () banked
 21940  0143CE  51D3               	movf	Word_GetPair@pPair& (0+255),w,b
 21941  0143D0  0FFC               	addlw	252
 21942  0143D2  0100               	movlb	0	; () banked
 21943  0143D4  6FD0               	movwf	Byte_GetPair@pPair& (0+255),b
 21944  0143D6  EC98  F0A4         	call	_Byte_GetPair	;wreg free
 21945  0143DA  0012               	return	
 21946  0143DC                     l9884:
 21947                           
 21948                           ;Types.c: 160: else
 21949                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 21950  0143DC  C0D1  F0CE         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 21951  0143E0  C0D2  F0CF         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 21952  0143E4  C0D3  F0D0         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 21953  0143E8  EC98  F0A4         	call	_Byte_GetPair	;wreg free
 21954  0143EC  0012               	return	
 21955  0143EE                     __end_of_Word_GetPair:
 21956                           	opt stack 0
 21957                           tosu	equ	0xFFF
 21958                           tosh	equ	0xFFE
 21959                           tosl	equ	0xFFD
 21960                           pclath	equ	0xFFA
 21961                           tblptru	equ	0xFF8
 21962                           tblptrh	equ	0xFF7
 21963                           tblptrl	equ	0xFF6
 21964                           tablat	equ	0xFF5
 21965                           prodh	equ	0xFF4
 21966                           prodl	equ	0xFF3
 21967                           intcon	equ	0xFF2
 21968                           postinc0	equ	0xFEE
 21969                           wreg	equ	0xFE8
 21970                           indf1	equ	0xFE7
 21971                           postdec1	equ	0xFE5
 21972                           fsr1h	equ	0xFE2
 21973                           fsr1l	equ	0xFE1
 21974                           indf2	equ	0xFDF
 21975                           postinc2	equ	0xFDE
 21976                           postdec2	equ	0xFDD
 21977                           plusw2	equ	0xFDB
 21978                           fsr2h	equ	0xFDA
 21979                           fsr2l	equ	0xFD9
 21980                           status	equ	0xFD8
 21981                           
 21982 ;; *************** function _Byte_GetPair *****************
 21983 ;; Defined at:
 21984 ;;		line 87 in file "Library/Types.c"
 21985 ;; Parameters:    Size  Location     Type
 21986 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 21987 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 21988 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 21989 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 21990 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 21991 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 21992 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 21993 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 21994 ;;		 -> NULL(0), 
 21995 ;;  pPair           1   11[BANK0 ] unsigned char 
 21996 ;; Auto vars:     Size  Location     Type
 21997 ;;		None
 21998 ;; Return value:  Size  Location     Type
 21999 ;;                  1    wreg      unsigned char 
 22000 ;; Registers used:
 22001 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22002 ;; Tracked objects:
 22003 ;;		On entry : 0/0
 22004 ;;		On exit  : 0/0
 22005 ;;		Unchanged: 0/0
 22006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22007 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22010 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22011 ;;Total ram usage:        3 bytes
 22012 ;; Hardware stack levels used:    1
 22013 ;; Hardware stack levels required when called:    8
 22014 ;; This function calls:
 22015 ;;		_Byte_GetZone
 22016 ;; This function is called by:
 22017 ;;		_Word_GetPair
 22018 ;; This function uses a non-reentrant model
 22019 ;;
 22020                           
 22021                           	psect	text127
 22022  014930                     __ptext127:
 22023                           	opt stack 0
 22024  014930                     _Byte_GetPair:
 22025                           	opt stack 10
 22026                           
 22027                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22028                           
 22029                           ;incstack = 0
 22030  014930  C0CE  F0C5         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 22031  014934  C0CF  F0C6         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 22032  014938  0E04               	movlw	4
 22033  01493A  0100               	movlb	0	; () banked
 22034  01493C  6FC7               	movwf	Byte_GetZone@pMax& (0+255),b
 22035  01493E  C0D0  F0C8         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 22036  014942  0E02               	movlw	2
 22037  014944  0100               	movlb	0	; () banked
 22038  014946  6FC9               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 22039  014948  EC04  F099         	call	_Byte_GetZone	;wreg free
 22040  01494C  0012               	return	
 22041  01494E                     __end_of_Byte_GetPair:
 22042                           	opt stack 0
 22043                           tosu	equ	0xFFF
 22044                           tosh	equ	0xFFE
 22045                           tosl	equ	0xFFD
 22046                           pclath	equ	0xFFA
 22047                           tblptru	equ	0xFF8
 22048                           tblptrh	equ	0xFF7
 22049                           tblptrl	equ	0xFF6
 22050                           tablat	equ	0xFF5
 22051                           prodh	equ	0xFF4
 22052                           prodl	equ	0xFF3
 22053                           intcon	equ	0xFF2
 22054                           postinc0	equ	0xFEE
 22055                           wreg	equ	0xFE8
 22056                           indf1	equ	0xFE7
 22057                           postdec1	equ	0xFE5
 22058                           fsr1h	equ	0xFE2
 22059                           fsr1l	equ	0xFE1
 22060                           indf2	equ	0xFDF
 22061                           postinc2	equ	0xFDE
 22062                           postdec2	equ	0xFDD
 22063                           plusw2	equ	0xFDB
 22064                           fsr2h	equ	0xFDA
 22065                           fsr2l	equ	0xFD9
 22066                           status	equ	0xFD8
 22067                           
 22068 ;; *************** function _Byte_GetZone *****************
 22069 ;; Defined at:
 22070 ;;		line 64 in file "Library/Types.c"
 22071 ;; Parameters:    Size  Location     Type
 22072 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22073 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22074 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22075 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22076 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22077 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22078 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22079 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22080 ;;		 -> NULL(0), 
 22081 ;;  pMax            1    2[BANK0 ] unsigned char 
 22082 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22083 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22084 ;; Auto vars:     Size  Location     Type
 22085 ;;  Output          1    8[BANK0 ] unsigned char 
 22086 ;;  Offset          1    7[BANK0 ] unsigned char 
 22087 ;;  MASK            1    6[BANK0 ] unsigned char 
 22088 ;; Return value:  Size  Location     Type
 22089 ;;                  1    wreg      unsigned char 
 22090 ;; Registers used:
 22091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22092 ;; Tracked objects:
 22093 ;;		On entry : 0/0
 22094 ;;		On exit  : 0/0
 22095 ;;		Unchanged: 0/0
 22096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22097 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22098 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22099 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22100 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22101 ;;Total ram usage:        9 bytes
 22102 ;; Hardware stack levels used:    1
 22103 ;; Hardware stack levels required when called:    7
 22104 ;; This function calls:
 22105 ;;		Nothing
 22106 ;; This function is called by:
 22107 ;;		_Byte_GetPair
 22108 ;;		_Byte_GetTriple
 22109 ;;		_Byte_GetQuad
 22110 ;; This function uses a non-reentrant model
 22111 ;;
 22112                           
 22113                           	psect	text128
 22114  013208                     __ptext128:
 22115                           	opt stack 0
 22116  013208                     _Byte_GetZone:
 22117                           	opt stack 10
 22118                           
 22119                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22120                           
 22121                           ;incstack = 0
 22122  013208  C0C5  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 22123  01320C  C0C6  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 22124  013210  0E00               	movlw	low (__mediumconst shr (0+16))
 22125  013212  6EF8               	movwf	tblptru,c
 22126  013214  0E0F               	movlw	(high __ramtop+-1)
 22127  013216  64F7               	cpfsgt	tblptrh,c
 22128  013218  D003               	bra	u6537
 22129  01321A  0008               	tblrd		*
 22130  01321C  50F5               	movf	tablat,w,c
 22131  01321E  D005               	bra	u6530
 22132  013220                     u6537:
 22133  013220  CFF6 FFE9          	movff	tblptrl,fsr0l
 22134  013224  CFF7 FFEA          	movff	tblptrh,fsr0h
 22135  013228  50EF               	movf	indf0,w,c
 22136  01322A                     u6530:
 22137  01322A  0100               	movlb	0	; () banked
 22138  01322C  6FCD               	movwf	Byte_GetZone@Output& (0+255),b
 22139                           
 22140                           ; BSR set to: 0
 22141                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22142  01322E  0100               	movlb	0	; () banked
 22143  013230  51C9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22144  013232  0D01               	mullw	1
 22145  013234  0E6B               	movlw	low _MASKS
 22146  013236  24F3               	addwf	prodl,w,c
 22147  013238  6EF6               	movwf	tblptrl,c
 22148  01323A  0EFD               	movlw	high _MASKS
 22149  01323C  20F4               	addwfc	prodh,w,c
 22150  01323E  6EF7               	movwf	tblptrh,c
 22151  013240                     	if	1	;There are 3 active tblptr bytes
 22152  013240  6AF8               	clrf	tblptru,c
 22153  013242  0E00               	movlw	low (__mediumconst shr (0+16))
 22154  013244  22F8               	addwfc	tblptru,f,c
 22155  013246                     	endif
 22156  013246  0008               	tblrd		*
 22157  013248  CFF5 F0CB          	movff	tablat,Byte_GetZone@MASK
 22158                           
 22159                           ; BSR set to: 0
 22160                           ;Types.c: 68: UINT8 Offset = 0;
 22161  01324C  0E00               	movlw	0
 22162  01324E  0100               	movlb	0	; () banked
 22163  013250  6FCC               	movwf	Byte_GetZone@Offset& (0+255),b
 22164                           
 22165                           ;Types.c: 70: while (pChunk >= pMax)
 22166  013252  D006               	goto	l9858
 22167  013254                     l9854:
 22168                           
 22169                           ; BSR set to: 0
 22170                           ;Types.c: 71: {
 22171                           ;Types.c: 72: pChunk -= pMax;
 22172  013254  0100               	movlb	0	; () banked
 22173  013256  51C7               	movf	Byte_GetZone@pMax& (0+255),w,b
 22174  013258  0100               	movlb	0	; () banked
 22175  01325A  5FC8               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 22176                           
 22177                           ; BSR set to: 0
 22178                           ;Types.c: 73: Offset += 1;
 22179  01325C  0100               	movlb	0	; () banked
 22180  01325E  2BCC               	incf	Byte_GetZone@Offset& (0+255),f,b
 22181  013260                     l9858:
 22182                           
 22183                           ; BSR set to: 0
 22184  013260  0100               	movlb	0	; () banked
 22185  013262  51C7               	movf	Byte_GetZone@pMax& (0+255),w,b
 22186  013264  0100               	movlb	0	; () banked
 22187  013266  5DC8               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 22188  013268  B0D8               	btfsc	status,0,c
 22189  01326A  D7F4               	goto	l9854
 22190                           
 22191                           ; BSR set to: 0
 22192                           ;Types.c: 74: }
 22193                           ;Types.c: 75: pChunk *= pChunkSize;
 22194                           
 22195                           ; BSR set to: 0
 22196  01326C  0100               	movlb	0	; () banked
 22197  01326E  51C9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22198  013270  0100               	movlb	0	; () banked
 22199  013272  03C8               	mulwf	Byte_GetZone@pChunk& (0+255),b
 22200  013274  50F3               	movf	prodl,w,c
 22201  013276  6FC8               	movwf	Byte_GetZone@pChunk& (0+255),b
 22202                           
 22203                           ; BSR set to: 0
 22204                           ;Types.c: 76: pChunk += Offset;
 22205  013278  0100               	movlb	0	; () banked
 22206  01327A  51CC               	movf	Byte_GetZone@Offset& (0+255),w,b
 22207  01327C  0100               	movlb	0	; () banked
 22208  01327E  27C8               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 22209                           
 22210                           ; BSR set to: 0
 22211                           ;Types.c: 78: Output >>= pChunk;
 22212  013280  0100               	movlb	0	; () banked
 22213  013282  29C8               	incf	Byte_GetZone@pChunk& (0+255),w,b
 22214  013284  0100               	movlb	0	; () banked
 22215  013286  6FCA               	movwf	??_Byte_GetZone& (0+255),b
 22216  013288  D003               	goto	u6550
 22217  01328A                     u6555:
 22218  01328A  0100               	movlb	0	; () banked
 22219  01328C  90D8               	bcf	status,0,c
 22220  01328E  33CD               	rrcf	Byte_GetZone@Output& (0+255),f,b
 22221  013290                     u6550:
 22222  013290  0100               	movlb	0	; () banked
 22223  013292  2FCA               	decfsz	??_Byte_GetZone& (0+255),f,b
 22224  013294  D7FA               	goto	u6555
 22225                           
 22226                           ;Types.c: 79: Output &= MASK;
 22227  013296  0100               	movlb	0	; () banked
 22228  013298  51CB               	movf	Byte_GetZone@MASK& (0+255),w,b
 22229  01329A  0100               	movlb	0	; () banked
 22230  01329C  17CD               	andwf	Byte_GetZone@Output& (0+255),f,b
 22231                           
 22232                           ; BSR set to: 0
 22233                           ;Types.c: 80: return Output;
 22234  01329E  0100               	movlb	0	; () banked
 22235  0132A0  51CD               	movf	Byte_GetZone@Output& (0+255),w,b
 22236  0132A2  0012               	return	
 22237  0132A4                     __end_of_Byte_GetZone:
 22238                           	opt stack 0
 22239                           tosu	equ	0xFFF
 22240                           tosh	equ	0xFFE
 22241                           tosl	equ	0xFFD
 22242                           pclath	equ	0xFFA
 22243                           tblptru	equ	0xFF8
 22244                           tblptrh	equ	0xFF7
 22245                           tblptrl	equ	0xFF6
 22246                           tablat	equ	0xFF5
 22247                           prodh	equ	0xFF4
 22248                           prodl	equ	0xFF3
 22249                           intcon	equ	0xFF2
 22250                           indf0	equ	0xFEF
 22251                           postinc0	equ	0xFEE
 22252                           fsr0h	equ	0xFEA
 22253                           fsr0l	equ	0xFE9
 22254                           wreg	equ	0xFE8
 22255                           indf1	equ	0xFE7
 22256                           postdec1	equ	0xFE5
 22257                           fsr1h	equ	0xFE2
 22258                           fsr1l	equ	0xFE1
 22259                           indf2	equ	0xFDF
 22260                           postinc2	equ	0xFDE
 22261                           postdec2	equ	0xFDD
 22262                           plusw2	equ	0xFDB
 22263                           fsr2h	equ	0xFDA
 22264                           fsr2l	equ	0xFD9
 22265                           status	equ	0xFD8
 22266                           
 22267 ;; *************** function _Byte_SetQuad *****************
 22268 ;; Defined at:
 22269 ;;		line 101 in file "Library/Types.c"
 22270 ;; Parameters:    Size  Location     Type
 22271 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22272 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 22273 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22274 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22275 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22276 ;;		 -> NULL(0), 
 22277 ;;  pQuad           1   13[BANK0 ] unsigned char 
 22278 ;;  pValue          1   14[BANK0 ] unsigned char 
 22279 ;; Auto vars:     Size  Location     Type
 22280 ;;		None
 22281 ;; Return value:  Size  Location     Type
 22282 ;;                  1    wreg      void 
 22283 ;; Registers used:
 22284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22285 ;; Tracked objects:
 22286 ;;		On entry : 0/0
 22287 ;;		On exit  : 0/0
 22288 ;;		Unchanged: 0/0
 22289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22290 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22294 ;;Total ram usage:        4 bytes
 22295 ;; Hardware stack levels used:    1
 22296 ;; Hardware stack levels required when called:    8
 22297 ;; This function calls:
 22298 ;;		_Byte_SetZone
 22299 ;; This function is called by:
 22300 ;;		_Port_SetQuadType
 22301 ;;		_SPI_Init
 22302 ;;		_SPI_MinSpeed
 22303 ;;		_SPI_MaxSpeed
 22304 ;;		_Port_SetQuad
 22305 ;;		_Word_SetQuad
 22306 ;;		_I2C_Init
 22307 ;; This function uses a non-reentrant model
 22308 ;;
 22309                           
 22310                           	psect	text129
 22311  014858                     __ptext129:
 22312                           	opt stack 0
 22313  014858                     _Byte_SetQuad:
 22314                           	opt stack 19
 22315                           
 22316                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 22317                           
 22318                           ; BSR set to: 0
 22319                           ;incstack = 0
 22320  014858  C0D0  F0C5         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 22321  01485C  C0D1  F0C6         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 22322  014860  0E02               	movlw	2
 22323  014862  0100               	movlb	0	; () banked
 22324  014864  6FC7               	movwf	Byte_SetZone@pMax& (0+255),b
 22325  014866  C0D2  F0C8         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 22326  01486A  0E04               	movlw	4
 22327  01486C  0100               	movlb	0	; () banked
 22328  01486E  6FC9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22329  014870  C0D3  F0CA         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 22330  014874  EC5D  F096         	call	_Byte_SetZone	;wreg free
 22331  014878  0012               	return		;funcret
 22332  01487A                     __end_of_Byte_SetQuad:
 22333                           	opt stack 0
 22334                           tosu	equ	0xFFF
 22335                           tosh	equ	0xFFE
 22336                           tosl	equ	0xFFD
 22337                           pclath	equ	0xFFA
 22338                           tblptru	equ	0xFF8
 22339                           tblptrh	equ	0xFF7
 22340                           tblptrl	equ	0xFF6
 22341                           tablat	equ	0xFF5
 22342                           prodh	equ	0xFF4
 22343                           prodl	equ	0xFF3
 22344                           intcon	equ	0xFF2
 22345                           indf0	equ	0xFEF
 22346                           postinc0	equ	0xFEE
 22347                           fsr0h	equ	0xFEA
 22348                           fsr0l	equ	0xFE9
 22349                           wreg	equ	0xFE8
 22350                           indf1	equ	0xFE7
 22351                           postdec1	equ	0xFE5
 22352                           fsr1h	equ	0xFE2
 22353                           fsr1l	equ	0xFE1
 22354                           indf2	equ	0xFDF
 22355                           postinc2	equ	0xFDE
 22356                           postdec2	equ	0xFDD
 22357                           plusw2	equ	0xFDB
 22358                           fsr2h	equ	0xFDA
 22359                           fsr2l	equ	0xFD9
 22360                           status	equ	0xFD8
 22361                           
 22362 ;; *************** function _Byte_SetZone *****************
 22363 ;; Defined at:
 22364 ;;		line 47 in file "Library/Types.c"
 22365 ;; Parameters:    Size  Location     Type
 22366 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22367 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22368 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22369 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 22370 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 22371 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22372 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22373 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22374 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22375 ;;  pMax            1    2[BANK0 ] unsigned char 
 22376 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22377 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22378 ;;  pValue          1    5[BANK0 ] unsigned char 
 22379 ;; Auto vars:     Size  Location     Type
 22380 ;;  MASK            1   10[BANK0 ] unsigned char 
 22381 ;;  Offset          1    9[BANK0 ] unsigned char 
 22382 ;; Return value:  Size  Location     Type
 22383 ;;                  1    wreg      void 
 22384 ;; Registers used:
 22385 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22386 ;; Tracked objects:
 22387 ;;		On entry : 0/0
 22388 ;;		On exit  : 0/0
 22389 ;;		Unchanged: 0/0
 22390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22391 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22392 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22393 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22394 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22395 ;;Total ram usage:       11 bytes
 22396 ;; Hardware stack levels used:    1
 22397 ;; Hardware stack levels required when called:    7
 22398 ;; This function calls:
 22399 ;;		Nothing
 22400 ;; This function is called by:
 22401 ;;		_Byte_SetPair
 22402 ;;		_Byte_SetQuad
 22403 ;;		_Byte_SetTriple
 22404 ;; This function uses a non-reentrant model
 22405 ;;
 22406                           
 22407                           	psect	text130
 22408  012CBA                     __ptext130:
 22409                           	opt stack 0
 22410  012CBA                     _Byte_SetZone:
 22411                           	opt stack 18
 22412                           
 22413                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 22414                           
 22415                           ;incstack = 0
 22416  012CBA  0100               	movlb	0	; () banked
 22417  012CBC  51C9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22418  012CBE  0D01               	mullw	1
 22419  012CC0  0E6B               	movlw	low _MASKS
 22420  012CC2  24F3               	addwf	prodl,w,c
 22421  012CC4  6EF6               	movwf	tblptrl,c
 22422  012CC6  0EFD               	movlw	high _MASKS
 22423  012CC8  20F4               	addwfc	prodh,w,c
 22424  012CCA  6EF7               	movwf	tblptrh,c
 22425  012CCC                     	if	1	;There are 3 active tblptr bytes
 22426  012CCC  6AF8               	clrf	tblptru,c
 22427  012CCE  0E00               	movlw	low (__mediumconst shr (0+16))
 22428  012CD0  22F8               	addwfc	tblptru,f,c
 22429  012CD2                     	endif
 22430  012CD2  0008               	tblrd		*
 22431  012CD4  CFF5 F0CF          	movff	tablat,Byte_SetZone@MASK
 22432                           
 22433                           ; BSR set to: 0
 22434                           ;Types.c: 50: UINT8 Offset = 0;
 22435  012CD8  0E00               	movlw	0
 22436  012CDA  0100               	movlb	0	; () banked
 22437  012CDC  6FCE               	movwf	Byte_SetZone@Offset& (0+255),b
 22438                           
 22439                           ;Types.c: 52: while (pChunk >= pMax)
 22440  012CDE  D006               	goto	l10506
 22441  012CE0                     l10502:
 22442                           
 22443                           ; BSR set to: 0
 22444                           ;Types.c: 53: {
 22445                           ;Types.c: 54: pChunk -= pMax;
 22446  012CE0  0100               	movlb	0	; () banked
 22447  012CE2  51C7               	movf	Byte_SetZone@pMax& (0+255),w,b
 22448  012CE4  0100               	movlb	0	; () banked
 22449  012CE6  5FC8               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 22450                           
 22451                           ; BSR set to: 0
 22452                           ;Types.c: 55: Offset += 1;
 22453  012CE8  0100               	movlb	0	; () banked
 22454  012CEA  2BCE               	incf	Byte_SetZone@Offset& (0+255),f,b
 22455  012CEC                     l10506:
 22456                           
 22457                           ; BSR set to: 0
 22458  012CEC  0100               	movlb	0	; () banked
 22459  012CEE  51C7               	movf	Byte_SetZone@pMax& (0+255),w,b
 22460  012CF0  0100               	movlb	0	; () banked
 22461  012CF2  5DC8               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 22462  012CF4  B0D8               	btfsc	status,0,c
 22463  012CF6  D7F4               	goto	l10502
 22464                           
 22465                           ; BSR set to: 0
 22466                           ;Types.c: 56: }
 22467                           ;Types.c: 57: pChunk *= pChunkSize;
 22468                           
 22469                           ; BSR set to: 0
 22470  012CF8  0100               	movlb	0	; () banked
 22471  012CFA  51C9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22472  012CFC  0100               	movlb	0	; () banked
 22473  012CFE  03C8               	mulwf	Byte_SetZone@pChunk& (0+255),b
 22474  012D00  50F3               	movf	prodl,w,c
 22475  012D02  6FC8               	movwf	Byte_SetZone@pChunk& (0+255),b
 22476                           
 22477                           ; BSR set to: 0
 22478                           ;Types.c: 58: pChunk += Offset;
 22479  012D04  0100               	movlb	0	; () banked
 22480  012D06  51CE               	movf	Byte_SetZone@Offset& (0+255),w,b
 22481  012D08  0100               	movlb	0	; () banked
 22482  012D0A  27C8               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 22483                           
 22484                           ; BSR set to: 0
 22485                           ;Types.c: 60: pValue &= MASK;
 22486  012D0C  0100               	movlb	0	; () banked
 22487  012D0E  51CF               	movf	Byte_SetZone@MASK& (0+255),w,b
 22488  012D10  0100               	movlb	0	; () banked
 22489  012D12  17CA               	andwf	Byte_SetZone@pValue& (0+255),f,b
 22490                           
 22491                           ; BSR set to: 0
 22492                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 22493  012D14  C0C8  F0CB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22494  012D18  C0CF  F0CC         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 22495  012D1C  0100               	movlb	0	; () banked
 22496  012D1E  2BCB               	incf	??_Byte_SetZone& (0+255),f,b
 22497  012D20  D003               	goto	u7014
 22498  012D22                     u7015:
 22499  012D22  0100               	movlb	0	; () banked
 22500  012D24  90D8               	bcf	status,0,c
 22501  012D26  37CC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22502  012D28                     u7014:
 22503  012D28  0100               	movlb	0	; () banked
 22504  012D2A  2FCB               	decfsz	??_Byte_SetZone& (0+255),f,b
 22505  012D2C  D7FA               	goto	u7015
 22506  012D2E  0100               	movlb	0	; () banked
 22507  012D30  51CC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22508  012D32  0AFF               	xorlw	255
 22509  012D34  0100               	movlb	0	; () banked
 22510  012D36  6FCD               	movwf	(??_Byte_SetZone+2)& (0+255),b
 22511  012D38  C0C5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22512  012D3C  C0C6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22513  012D40  0100               	movlb	0	; () banked
 22514  012D42  51CD               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 22515  012D44  16DF               	andwf	indf2,f,c
 22516                           
 22517                           ; BSR set to: 0
 22518                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 22519  012D46  C0C8  F0CB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 22520  012D4A  C0CA  F0CC         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 22521  012D4E  0100               	movlb	0	; () banked
 22522  012D50  2BCB               	incf	??_Byte_SetZone& (0+255),f,b
 22523  012D52  D003               	goto	u7024
 22524  012D54                     u7025:
 22525  012D54  0100               	movlb	0	; () banked
 22526  012D56  90D8               	bcf	status,0,c
 22527  012D58  37CC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 22528  012D5A                     u7024:
 22529  012D5A  0100               	movlb	0	; () banked
 22530  012D5C  2FCB               	decfsz	??_Byte_SetZone& (0+255),f,b
 22531  012D5E  D7FA               	goto	u7025
 22532  012D60  C0C5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 22533  012D64  C0C6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 22534  012D68  0100               	movlb	0	; () banked
 22535  012D6A  51CC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 22536  012D6C  12DF               	iorwf	indf2,f,c
 22537                           
 22538                           ; BSR set to: 0
 22539  012D6E  0012               	return		;funcret
 22540  012D70                     __end_of_Byte_SetZone:
 22541                           	opt stack 0
 22542                           tosu	equ	0xFFF
 22543                           tosh	equ	0xFFE
 22544                           tosl	equ	0xFFD
 22545                           pclath	equ	0xFFA
 22546                           tblptru	equ	0xFF8
 22547                           tblptrh	equ	0xFF7
 22548                           tblptrl	equ	0xFF6
 22549                           tablat	equ	0xFF5
 22550                           prodh	equ	0xFF4
 22551                           prodl	equ	0xFF3
 22552                           intcon	equ	0xFF2
 22553                           indf0	equ	0xFEF
 22554                           postinc0	equ	0xFEE
 22555                           fsr0h	equ	0xFEA
 22556                           fsr0l	equ	0xFE9
 22557                           wreg	equ	0xFE8
 22558                           indf1	equ	0xFE7
 22559                           postdec1	equ	0xFE5
 22560                           fsr1h	equ	0xFE2
 22561                           fsr1l	equ	0xFE1
 22562                           indf2	equ	0xFDF
 22563                           postinc2	equ	0xFDE
 22564                           postdec2	equ	0xFDD
 22565                           plusw2	equ	0xFDB
 22566                           fsr2h	equ	0xFDA
 22567                           fsr2l	equ	0xFD9
 22568                           status	equ	0xFD8
 22569                           
 22570 ;; *************** function _Console_Init *****************
 22571 ;; Defined at:
 22572 ;;		line 157 in file "Library/Console.c"
 22573 ;; Parameters:    Size  Location     Type
 22574 ;;		None
 22575 ;; Auto vars:     Size  Location     Type
 22576 ;;  y               1    3[BANK0 ] unsigned char 
 22577 ;;  x               1    2[BANK0 ] unsigned char 
 22578 ;; Return value:  Size  Location     Type
 22579 ;;                  1    wreg      void 
 22580 ;; Registers used:
 22581 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22582 ;; Tracked objects:
 22583 ;;		On entry : 0/0
 22584 ;;		On exit  : 0/0
 22585 ;;		Unchanged: 0/0
 22586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22588 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22589 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22590 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22591 ;;Total ram usage:        4 bytes
 22592 ;; Hardware stack levels used:    1
 22593 ;; Hardware stack levels required when called:    7
 22594 ;; This function calls:
 22595 ;;		Nothing
 22596 ;; This function is called by:
 22597 ;;		_initialise
 22598 ;; This function uses a non-reentrant model
 22599 ;;
 22600                           
 22601                           	psect	text131
 22602  01369A                     __ptext131:
 22603                           	opt stack 0
 22604  01369A                     _Console_Init:
 22605                           	opt stack 22
 22606                           
 22607                           ;Console.c: 160: lBufferX = 0;
 22608                           
 22609                           ; BSR set to: 0
 22610                           ;incstack = 0
 22611  01369A  0E00               	movlw	0
 22612  01369C  6E37               	movwf	_lBufferX,c
 22613                           
 22614                           ;Console.c: 161: lBufferY = 0;
 22615  01369E  0E00               	movlw	0
 22616  0136A0  6E36               	movwf	_lBufferY,c
 22617                           
 22618                           ;Console.c: 163: UINT8 x, y;
 22619                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22620  0136A2  0E00               	movlw	0
 22621  0136A4  0100               	movlb	0	; () banked
 22622  0136A6  6FC7               	movwf	Console_Init@x& (0+255),b
 22623  0136A8                     l11864:
 22624                           
 22625                           ; BSR set to: 0
 22626  0136A8  0E13               	movlw	19
 22627  0136AA  0100               	movlb	0	; () banked
 22628  0136AC  65C7               	cpfsgt	Console_Init@x& (0+255),b
 22629  0136AE  D001               	goto	l11868
 22630  0136B0  0012               	return	
 22631  0136B2                     l11868:
 22632                           
 22633                           ; BSR set to: 0
 22634                           ;Console.c: 165: {
 22635                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22636  0136B2  0E00               	movlw	0
 22637  0136B4  0100               	movlb	0	; () banked
 22638  0136B6  6FC8               	movwf	Console_Init@y& (0+255),b
 22639  0136B8                     l11870:
 22640                           
 22641                           ; BSR set to: 0
 22642  0136B8  0E0E               	movlw	14
 22643  0136BA  0100               	movlb	0	; () banked
 22644  0136BC  65C8               	cpfsgt	Console_Init@y& (0+255),b
 22645  0136BE  D001               	goto	l11874
 22646  0136C0  D02C               	goto	l11880
 22647  0136C2                     l11874:
 22648                           
 22649                           ; BSR set to: 0
 22650                           ;Console.c: 167: {
 22651                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22652  0136C2  0100               	movlb	0	; () banked
 22653  0136C4  51C8               	movf	Console_Init@y& (0+255),w,b
 22654  0136C6  0D14               	mullw	20
 22655  0136C8  0E46               	movlw	low _lBuffer
 22656  0136CA  0100               	movlb	0	; () banked
 22657  0136CC  6FC5               	movwf	??_Console_Init& (0+255),b
 22658  0136CE  0E02               	movlw	high _lBuffer
 22659  0136D0  0100               	movlb	0	; () banked
 22660  0136D2  6FC6               	movwf	(??_Console_Init+1)& (0+255),b
 22661  0136D4  50F3               	movf	prodl,w,c
 22662  0136D6  0100               	movlb	0	; () banked
 22663  0136D8  27C5               	addwf	??_Console_Init& (0+255),f,b
 22664  0136DA  50F4               	movf	prodh,w,c
 22665  0136DC  0100               	movlb	0	; () banked
 22666  0136DE  23C6               	addwfc	(??_Console_Init+1)& (0+255),f,b
 22667  0136E0  0100               	movlb	0	; () banked
 22668  0136E2  51C7               	movf	Console_Init@x& (0+255),w,b
 22669  0136E4  0D01               	mullw	1
 22670  0136E6  50F3               	movf	prodl,w,c
 22671  0136E8  0100               	movlb	0	; () banked
 22672  0136EA  25C5               	addwf	??_Console_Init& (0+255),w,b
 22673  0136EC  6ED9               	movwf	fsr2l,c
 22674  0136EE  50F4               	movf	prodh,w,c
 22675  0136F0  0100               	movlb	0	; () banked
 22676  0136F2  21C6               	addwfc	(??_Console_Init+1)& (0+255),w,b
 22677  0136F4  6EDA               	movwf	fsr2h,c
 22678  0136F6  0E00               	movlw	0
 22679  0136F8  6EDF               	movwf	indf2,c
 22680                           
 22681                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22682  0136FA  0100               	movlb	0	; () banked
 22683  0136FC  51C8               	movf	Console_Init@y& (0+255),w,b
 22684  0136FE  0D02               	mullw	2
 22685  013700  0E00               	movlw	low _lCBuffer
 22686  013702  24F3               	addwf	prodl,w,c
 22687  013704  6ED9               	movwf	fsr2l,c
 22688  013706  0E01               	movlw	high _lCBuffer
 22689  013708  20F4               	addwfc	prodh,w,c
 22690  01370A  6EDA               	movwf	fsr2h,c
 22691  01370C  0EFF               	movlw	255
 22692  01370E  6EDE               	movwf	postinc2,c
 22693  013710  0EFF               	movlw	255
 22694  013712  6EDD               	movwf	postdec2,c
 22695                           
 22696                           ; BSR set to: 0
 22697  013714  0100               	movlb	0	; () banked
 22698  013716  2BC8               	incf	Console_Init@y& (0+255),f,b
 22699  013718  D7CF               	goto	l11870
 22700  01371A                     l11880:
 22701                           
 22702                           ; BSR set to: 0
 22703  01371A  0100               	movlb	0	; () banked
 22704  01371C  2BC7               	incf	Console_Init@x& (0+255),f,b
 22705  01371E  D7C4               	goto	l11864
 22706  013720                     __end_of_Console_Init:
 22707                           	opt stack 0
 22708                           tosu	equ	0xFFF
 22709                           tosh	equ	0xFFE
 22710                           tosl	equ	0xFFD
 22711                           pclath	equ	0xFFA
 22712                           tblptru	equ	0xFF8
 22713                           tblptrh	equ	0xFF7
 22714                           tblptrl	equ	0xFF6
 22715                           tablat	equ	0xFF5
 22716                           prodh	equ	0xFF4
 22717                           prodl	equ	0xFF3
 22718                           intcon	equ	0xFF2
 22719                           indf0	equ	0xFEF
 22720                           postinc0	equ	0xFEE
 22721                           fsr0h	equ	0xFEA
 22722                           fsr0l	equ	0xFE9
 22723                           wreg	equ	0xFE8
 22724                           indf1	equ	0xFE7
 22725                           postdec1	equ	0xFE5
 22726                           fsr1h	equ	0xFE2
 22727                           fsr1l	equ	0xFE1
 22728                           indf2	equ	0xFDF
 22729                           postinc2	equ	0xFDE
 22730                           postdec2	equ	0xFDD
 22731                           plusw2	equ	0xFDB
 22732                           fsr2h	equ	0xFDA
 22733                           fsr2l	equ	0xFD9
 22734                           status	equ	0xFD8
 22735                           
 22736 ;; *************** function _ISR_Function *****************
 22737 ;; Defined at:
 22738 ;;		line 38 in file "Library/ISR.c"
 22739 ;; Parameters:    Size  Location     Type
 22740 ;;		None
 22741 ;; Auto vars:     Size  Location     Type
 22742 ;;		None
 22743 ;; Return value:  Size  Location     Type
 22744 ;;                  1    wreg      void 
 22745 ;; Registers used:
 22746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22747 ;; Tracked objects:
 22748 ;;		On entry : 0/0
 22749 ;;		On exit  : 0/0
 22750 ;;		Unchanged: 0/0
 22751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22754 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22755 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22756 ;;Total ram usage:       14 bytes
 22757 ;; Hardware stack levels used:    1
 22758 ;; Hardware stack levels required when called:    6
 22759 ;; This function calls:
 22760 ;;		_Timer0_ISR
 22761 ;; This function is called by:
 22762 ;;		Interrupt level 2
 22763 ;; This function uses a non-reentrant model
 22764 ;;
 22765                           
 22766                           	psect	intcode
 22767  001408                     __pintcode:
 22768                           	opt stack 0
 22769  001408                     _ISR_Function:
 22770                           	opt stack 10
 22771                           
 22772                           ; BSR set to: 0
 22773                           ;incstack = 0
 22774  001408  8249               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22775  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 22776  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 22777  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 22778  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 22779  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 22780  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 22781  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 22782  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 22783  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 22784  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 22785  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 22786  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 22787  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 22788  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 22789                           
 22790                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 22791  001442  92F2               	bcf	intcon,1,c	;volatile
 22792                           
 22793                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 22794  001444  B4F2               	btfsc	intcon,2,c	;volatile
 22795  001446  AAF2               	btfss	intcon,5,c	;volatile
 22796  001448  D002               	goto	i2l1599
 22797                           
 22798                           ;ISR.c: 68: Timer0_ISR();
 22799  00144A  EC65  F0A3         	call	_Timer0_ISR	;wreg free
 22800  00144E                     i2l1599:
 22801  00144E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 22802  001452  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 22803  001456  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 22804  00145A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 22805  00145E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 22806  001462  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 22807  001466  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 22808  00146A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 22809  00146E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 22810  001472  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 22811  001476  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 22812  00147A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 22813  00147E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 22814  001482  C017  FFFA         	movff	??_ISR_Function,pclath
 22815  001486  9249               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22816  001488  0011               	retfie		f
 22817  00148A                     __end_of_ISR_Function:
 22818                           	opt stack 0
 22819                           tosu	equ	0xFFF
 22820                           tosh	equ	0xFFE
 22821                           tosl	equ	0xFFD
 22822                           pclatu	equ	0xFFB
 22823                           pclath	equ	0xFFA
 22824                           tblptru	equ	0xFF8
 22825                           tblptrh	equ	0xFF7
 22826                           tblptrl	equ	0xFF6
 22827                           tablat	equ	0xFF5
 22828                           prodh	equ	0xFF4
 22829                           prodl	equ	0xFF3
 22830                           intcon	equ	0xFF2
 22831                           indf0	equ	0xFEF
 22832                           postinc0	equ	0xFEE
 22833                           fsr0h	equ	0xFEA
 22834                           fsr0l	equ	0xFE9
 22835                           wreg	equ	0xFE8
 22836                           indf1	equ	0xFE7
 22837                           postdec1	equ	0xFE5
 22838                           fsr1h	equ	0xFE2
 22839                           fsr1l	equ	0xFE1
 22840                           indf2	equ	0xFDF
 22841                           postinc2	equ	0xFDE
 22842                           postdec2	equ	0xFDD
 22843                           plusw2	equ	0xFDB
 22844                           fsr2h	equ	0xFDA
 22845                           fsr2l	equ	0xFD9
 22846                           status	equ	0xFD8
 22847                           
 22848 ;; *************** function _Timer0_ISR *****************
 22849 ;; Defined at:
 22850 ;;		line 94 in file "Library/Timer0.c"
 22851 ;; Parameters:    Size  Location     Type
 22852 ;;		None
 22853 ;; Auto vars:     Size  Location     Type
 22854 ;;		None
 22855 ;; Return value:  Size  Location     Type
 22856 ;;                  1    wreg      void 
 22857 ;; Registers used:
 22858 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22859 ;; Tracked objects:
 22860 ;;		On entry : 0/0
 22861 ;;		On exit  : 0/0
 22862 ;;		Unchanged: 0/0
 22863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22867 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22868 ;;Total ram usage:        0 bytes
 22869 ;; Hardware stack levels used:    1
 22870 ;; Hardware stack levels required when called:    5
 22871 ;; This function calls:
 22872 ;;		Absolute function
 22873 ;;		i2_Motor_Step
 22874 ;;		i2_Timer0_Stop
 22875 ;; This function is called by:
 22876 ;;		_ISR_Function
 22877 ;; This function uses a non-reentrant model
 22878 ;;
 22879                           
 22880                           	psect	text133
 22881  0146CA                     __ptext133:
 22882                           	opt stack 0
 22883  0146CA                     _Timer0_ISR:
 22884                           	opt stack 10
 22885                           
 22886                           ;Timer0.c: 96: Timer0_Stop();
 22887                           
 22888                           ;incstack = 0
 22889  0146CA  ECA9  F0A5         	call	i2_Timer0_Stop	;wreg free
 22890                           
 22891                           ;Timer0.c: 99: if (gISR != 0)
 22892  0146CE  0100               	movlb	0	; () banked
 22893  0146D0  5168               	movf	_gISR& (0+255),w,b
 22894  0146D2  0100               	movlb	0	; () banked
 22895  0146D4  1169               	iorwf	(_gISR+1)& (0+255),w,b
 22896  0146D6  0100               	movlb	0	; () banked
 22897  0146D8  116A               	iorwf	(_gISR+2)& (0+255),w,b
 22898  0146DA  B4D8               	btfsc	status,2,c
 22899  0146DC  0012               	return	
 22900                           
 22901                           ; BSR set to: 0
 22902                           ;Timer0.c: 100: gISR();
 22903  0146DE  D801               	call	i2u1010_48
 22904  0146E0  0012               	return	
 22905  0146E2                     i2u1010_48:
 22906  0146E2  0005               	push	
 22907  0146E4  6EFA               	movwf	pclath,c
 22908  0146E6  0100               	movlb	0	; () banked
 22909  0146E8  5168               	movf	_gISR& (0+255),w,b
 22910  0146EA  6EFD               	movwf	tosl,c
 22911  0146EC  5169               	movf	(_gISR+1)& (0+255),w,b
 22912  0146EE  6EFE               	movwf	tosh,c
 22913  0146F0  516A               	movf	(_gISR+2)& (0+255),w,b
 22914  0146F2  6EFF               	movwf	tosu,c
 22915  0146F4  50FA               	movf	pclath,w,c
 22916  0146F6  0012               	return		;indir
 22917  0146F8                     __end_of_Timer0_ISR:
 22918                           	opt stack 0
 22919                           tosu	equ	0xFFF
 22920                           tosh	equ	0xFFE
 22921                           tosl	equ	0xFFD
 22922                           pclatu	equ	0xFFB
 22923                           pclath	equ	0xFFA
 22924                           tblptru	equ	0xFF8
 22925                           tblptrh	equ	0xFF7
 22926                           tblptrl	equ	0xFF6
 22927                           tablat	equ	0xFF5
 22928                           prodh	equ	0xFF4
 22929                           prodl	equ	0xFF3
 22930                           intcon	equ	0xFF2
 22931                           indf0	equ	0xFEF
 22932                           postinc0	equ	0xFEE
 22933                           fsr0h	equ	0xFEA
 22934                           fsr0l	equ	0xFE9
 22935                           wreg	equ	0xFE8
 22936                           indf1	equ	0xFE7
 22937                           postdec1	equ	0xFE5
 22938                           fsr1h	equ	0xFE2
 22939                           fsr1l	equ	0xFE1
 22940                           indf2	equ	0xFDF
 22941                           postinc2	equ	0xFDE
 22942                           postdec2	equ	0xFDD
 22943                           plusw2	equ	0xFDB
 22944                           fsr2h	equ	0xFDA
 22945                           fsr2l	equ	0xFD9
 22946                           status	equ	0xFD8
 22947                           
 22948 ;; *************** function i2_Motor_Step *****************
 22949 ;; Defined at:
 22950 ;;		line 75 in file "Library/Motor.c"
 22951 ;; Parameters:    Size  Location     Type
 22952 ;;		None
 22953 ;; Auto vars:     Size  Location     Type
 22954 ;;		None
 22955 ;; Return value:  Size  Location     Type
 22956 ;;                  1    wreg      void 
 22957 ;; Registers used:
 22958 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22959 ;; Tracked objects:
 22960 ;;		On entry : 0/0
 22961 ;;		On exit  : 0/0
 22962 ;;		Unchanged: 0/0
 22963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22966 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22967 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22968 ;;Total ram usage:        2 bytes
 22969 ;; Hardware stack levels used:    1
 22970 ;; Hardware stack levels required when called:    4
 22971 ;; This function calls:
 22972 ;;		i2_MXK_Queue
 22973 ;;		i2_MXK_Release
 22974 ;;		i2_MXK_SwitchTo
 22975 ;;		i2_Port_SetPin
 22976 ;;		i2_Timer0_Restart
 22977 ;;		i2_Timer0_Stop
 22978 ;; This function is called by:
 22979 ;; This function uses a non-reentrant model
 22980 ;;
 22981                           
 22982                           	psect	text134
 22983  0124B0                     __ptext134:
 22984                           	opt stack 0
 22985  0124B0                     i2_Motor_Step:
 22986                           	opt stack 10
 22987                           
 22988                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 22989                           
 22990                           ;incstack = 0
 22991  0124B0  EE20 F004          	lfsr	2,4
 22992  0124B4  502A               	movf	_lMotor,w,c
 22993  0124B6  26D9               	addwf	fsr2l,f,c
 22994  0124B8  502B               	movf	_lMotor+1,w,c
 22995  0124BA  22DA               	addwfc	fsr2h,f,c
 22996  0124BC  50DF               	movf	indf2,w,c
 22997  0124BE  EC88  F0A2         	call	i2_MXK_SwitchTo
 22998  0124C2  0900               	iorlw	0
 22999  0124C4  B4D8               	btfsc	status,2,c
 23000  0124C6  D06A               	goto	i2l8810
 23001                           
 23002                           ;Motor.c: 78: {
 23003                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 23004  0124C8  C02A  FFD9         	movff	_lMotor,fsr2l
 23005  0124CC  C02B  FFDA         	movff	_lMotor+1,fsr2h
 23006  0124D0  50DE               	movf	postinc2,w,c
 23007  0124D2  10DE               	iorwf	postinc2,w,c
 23008  0124D4  B4D8               	btfsc	status,2,c
 23009  0124D6  D05D               	goto	i2l8804
 23010                           
 23011                           ;Motor.c: 80: {
 23012                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 23013  0124D8  C02A  FFD9         	movff	_lMotor,fsr2l
 23014  0124DC  C02B  FFDA         	movff	_lMotor+1,fsr2h
 23015  0124E0  0E01               	movlw	1
 23016  0124E2  BEDB               	btfsc	plusw2,7,c
 23017  0124E4  D022               	goto	i2l8788
 23018  0124E6  0E01               	movlw	1
 23019  0124E8  50DB               	movf	plusw2,w,c
 23020  0124EA  E103               	bnz	i2u556_40
 23021  0124EC  04DE               	decf	postinc2,w,c
 23022  0124EE  A0D8               	btfss	status,0,c
 23023  0124F0  D01C               	goto	i2l8788
 23024  0124F2                     i2u556_40:
 23025                           
 23026                           ;Motor.c: 83: {
 23027                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 23028  0124F2  C02A  FFD9         	movff	_lMotor,fsr2l
 23029  0124F6  C02B  FFDA         	movff	_lMotor+1,fsr2h
 23030  0124FA  28DE               	incf	postinc2,w,c
 23031  0124FC  E104               	bnz	i2u557_40
 23032  0124FE  0E7F               	movlw	127
 23033  012500  18DE               	xorwf	postinc2,w,c
 23034  012502  B4D8               	btfsc	status,2,c
 23035  012504  D007               	goto	i2l8786
 23036  012506                     i2u557_40:
 23037                           
 23038                           ;Motor.c: 85: lMotor->mDelta --;
 23039  012506  C02A  FFD9         	movff	_lMotor,fsr2l
 23040  01250A  C02B  FFDA         	movff	_lMotor+1,fsr2h
 23041  01250E  06DE               	decf	postinc2,f,c
 23042  012510  0E00               	movlw	0
 23043  012512  5ADD               	subwfb	postdec2,f,c
 23044  012514                     i2l8786:
 23045                           
 23046                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 23047  012514  0E7E               	movlw	low _PortE
 23048  012516  6E10               	movwf	i2Port_SetPin@pInput,c
 23049  012518  0E00               	movlw	high _PortE
 23050  01251A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23051  01251C  0E00               	movlw	0
 23052  01251E  6E12               	movwf	i2Port_SetPin@pPin,c
 23053  012520  0E01               	movlw	1
 23054  012522  6E13               	movwf	i2Port_SetPin@pValue,c
 23055  012524  EC64  F097         	call	i2_Port_SetPin	;wreg free
 23056                           
 23057                           ;Motor.c: 88: }
 23058  012528  D01B               	goto	i2l8794
 23059  01252A                     i2l8788:
 23060                           
 23061                           ;Motor.c: 89: else
 23062                           ;Motor.c: 90: {
 23063                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 23064  01252A  C02A  FFD9         	movff	_lMotor,fsr2l
 23065  01252E  C02B  FFDA         	movff	_lMotor+1,fsr2h
 23066  012532  04DE               	decf	postinc2,w,c
 23067  012534  E104               	bnz	i2u558_40
 23068  012536  0E80               	movlw	128
 23069  012538  18DE               	xorwf	postinc2,w,c
 23070  01253A  B4D8               	btfsc	status,2,c
 23071  01253C  D007               	goto	i2l8792
 23072  01253E                     i2u558_40:
 23073                           
 23074                           ;Motor.c: 92: lMotor->mDelta ++;
 23075  01253E  C02A  FFD9         	movff	_lMotor,fsr2l
 23076  012542  C02B  FFDA         	movff	_lMotor+1,fsr2h
 23077  012546  2ADE               	incf	postinc2,f,c
 23078  012548  0E00               	movlw	0
 23079  01254A  22DD               	addwfc	postdec2,f,c
 23080  01254C                     i2l8792:
 23081                           
 23082                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 23083  01254C  0E7E               	movlw	low _PortE
 23084  01254E  6E10               	movwf	i2Port_SetPin@pInput,c
 23085  012550  0E00               	movlw	high _PortE
 23086  012552  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23087  012554  0E00               	movlw	0
 23088  012556  6E12               	movwf	i2Port_SetPin@pPin,c
 23089  012558  0E00               	movlw	0
 23090  01255A  6E13               	movwf	i2Port_SetPin@pValue,c
 23091  01255C  EC64  F097         	call	i2_Port_SetPin	;wreg free
 23092  012560                     i2l8794:
 23093                           
 23094                           ;Motor.c: 95: }
 23095                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 23096  012560  0E7E               	movlw	low _PortE
 23097  012562  6E10               	movwf	i2Port_SetPin@pInput,c
 23098  012564  0E00               	movlw	high _PortE
 23099  012566  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23100  012568  0E01               	movlw	1
 23101  01256A  6E12               	movwf	i2Port_SetPin@pPin,c
 23102  01256C  0E01               	movlw	1
 23103  01256E  6E13               	movwf	i2Port_SetPin@pValue,c
 23104  012570  EC64  F097         	call	i2_Port_SetPin	;wreg free
 23105                           
 23106                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 23107  012574  0E7E               	movlw	low _PortE
 23108  012576  6E10               	movwf	i2Port_SetPin@pInput,c
 23109  012578  0E00               	movlw	high _PortE
 23110  01257A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23111  01257C  0E01               	movlw	1
 23112  01257E  6E12               	movwf	i2Port_SetPin@pPin,c
 23113  012580  0E00               	movlw	0
 23114  012582  6E13               	movwf	i2Port_SetPin@pValue,c
 23115  012584  EC64  F097         	call	i2_Port_SetPin	;wreg free
 23116                           
 23117                           ;Motor.c: 101: MXK_Release();
 23118  012588  ECAC  F0A5         	call	i2_MXK_Release	;wreg free
 23119                           
 23120                           ;Motor.c: 102: Timer0_Restart();
 23121  01258C  EC7D  F0A5         	call	i2_Timer0_Restart	;wreg free
 23122                           
 23123                           ;Motor.c: 103: return;
 23124  012590  0012               	return	
 23125  012592                     i2l8804:
 23126                           
 23127                           ;Motor.c: 104: }
 23128                           ;Motor.c: 105: MXK_Release();
 23129  012592  ECAC  F0A5         	call	i2_MXK_Release	;wreg free
 23130                           
 23131                           ;Motor.c: 106: Timer0_Stop();
 23132  012596  ECA9  F0A5         	call	i2_Timer0_Stop	;wreg free
 23133                           
 23134                           ;Motor.c: 107: return;
 23135  01259A  0012               	return	
 23136  01259C                     i2l8810:
 23137                           
 23138                           ;Motor.c: 108: }
 23139                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 23140  01259C  C06B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 23141  0125A0  C06C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 23142  0125A4  C06D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 23143  0125A8  EC6A  F0A5         	call	i2_MXK_Queue	;wreg free
 23144  0125AC  0012               	return		;funcret
 23145  0125AE                     __end_ofi2_Motor_Step:
 23146                           	opt stack 0
 23147                           tosu	equ	0xFFF
 23148                           tosh	equ	0xFFE
 23149                           tosl	equ	0xFFD
 23150                           pclatu	equ	0xFFB
 23151                           pclath	equ	0xFFA
 23152                           tblptru	equ	0xFF8
 23153                           tblptrh	equ	0xFF7
 23154                           tblptrl	equ	0xFF6
 23155                           tablat	equ	0xFF5
 23156                           prodh	equ	0xFF4
 23157                           prodl	equ	0xFF3
 23158                           intcon	equ	0xFF2
 23159                           indf0	equ	0xFEF
 23160                           postinc0	equ	0xFEE
 23161                           fsr0h	equ	0xFEA
 23162                           fsr0l	equ	0xFE9
 23163                           wreg	equ	0xFE8
 23164                           indf1	equ	0xFE7
 23165                           postdec1	equ	0xFE5
 23166                           fsr1h	equ	0xFE2
 23167                           fsr1l	equ	0xFE1
 23168                           indf2	equ	0xFDF
 23169                           postinc2	equ	0xFDE
 23170                           postdec2	equ	0xFDD
 23171                           plusw2	equ	0xFDB
 23172                           fsr2h	equ	0xFDA
 23173                           fsr2l	equ	0xFD9
 23174                           status	equ	0xFD8
 23175                           
 23176 ;; *************** function i2_Timer0_Stop *****************
 23177 ;; Defined at:
 23178 ;;		line 89 in file "Library/Timer0.c"
 23179 ;; Parameters:    Size  Location     Type
 23180 ;;		None
 23181 ;; Auto vars:     Size  Location     Type
 23182 ;;		None
 23183 ;; Return value:  Size  Location     Type
 23184 ;;                  1    wreg      void 
 23185 ;; Registers used:
 23186 ;;		None
 23187 ;; Tracked objects:
 23188 ;;		On entry : 0/0
 23189 ;;		On exit  : 0/0
 23190 ;;		Unchanged: 0/0
 23191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23196 ;;Total ram usage:        0 bytes
 23197 ;; Hardware stack levels used:    1
 23198 ;; This function calls:
 23199 ;;		Nothing
 23200 ;; This function is called by:
 23201 ;;		_Timer0_ISR
 23202 ;;		i2_Motor_Step
 23203 ;; This function uses a non-reentrant model
 23204 ;;
 23205                           
 23206                           	psect	text135
 23207  014B52                     __ptext135:
 23208                           	opt stack 0
 23209  014B52                     i2_Timer0_Stop:
 23210                           	opt stack 14
 23211                           
 23212                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 23213                           
 23214                           ;incstack = 0
 23215  014B52  9AF2               	bcf	intcon,5,c	;volatile
 23216                           
 23217                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 23218  014B54  94F2               	bcf	intcon,2,c	;volatile
 23219  014B56  0012               	return		;funcret
 23220  014B58                     __end_ofi2_Timer0_Stop:
 23221                           	opt stack 0
 23222                           tosu	equ	0xFFF
 23223                           tosh	equ	0xFFE
 23224                           tosl	equ	0xFFD
 23225                           pclatu	equ	0xFFB
 23226                           pclath	equ	0xFFA
 23227                           tblptru	equ	0xFF8
 23228                           tblptrh	equ	0xFF7
 23229                           tblptrl	equ	0xFF6
 23230                           tablat	equ	0xFF5
 23231                           prodh	equ	0xFF4
 23232                           prodl	equ	0xFF3
 23233                           intcon	equ	0xFF2
 23234                           indf0	equ	0xFEF
 23235                           postinc0	equ	0xFEE
 23236                           fsr0h	equ	0xFEA
 23237                           fsr0l	equ	0xFE9
 23238                           wreg	equ	0xFE8
 23239                           indf1	equ	0xFE7
 23240                           postdec1	equ	0xFE5
 23241                           fsr1h	equ	0xFE2
 23242                           fsr1l	equ	0xFE1
 23243                           indf2	equ	0xFDF
 23244                           postinc2	equ	0xFDE
 23245                           postdec2	equ	0xFDD
 23246                           plusw2	equ	0xFDB
 23247                           fsr2h	equ	0xFDA
 23248                           fsr2l	equ	0xFD9
 23249                           status	equ	0xFD8
 23250                           
 23251 ;; *************** function i2_Timer0_Restart *****************
 23252 ;; Defined at:
 23253 ;;		line 83 in file "Library/Timer0.c"
 23254 ;; Parameters:    Size  Location     Type
 23255 ;;		None
 23256 ;; Auto vars:     Size  Location     Type
 23257 ;;		None
 23258 ;; Return value:  Size  Location     Type
 23259 ;;                  1    wreg      void 
 23260 ;; Registers used:
 23261 ;;		None
 23262 ;; Tracked objects:
 23263 ;;		On entry : 0/0
 23264 ;;		On exit  : 0/0
 23265 ;;		Unchanged: 0/0
 23266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23271 ;;Total ram usage:        0 bytes
 23272 ;; Hardware stack levels used:    1
 23273 ;; This function calls:
 23274 ;;		Nothing
 23275 ;; This function is called by:
 23276 ;;		i2_Motor_Step
 23277 ;; This function uses a non-reentrant model
 23278 ;;
 23279                           
 23280                           	psect	text136
 23281  014AFA                     __ptext136:
 23282                           	opt stack 0
 23283  014AFA                     i2_Timer0_Restart:
 23284                           	opt stack 13
 23285                           
 23286                           ;Timer0.c: 85: TMR0 = COUNTER;
 23287                           
 23288                           ;incstack = 0
 23289  014AFA  C028  FFD6         	movff	_COUNTER,4054	;volatile
 23290  014AFE  C029  FFD7         	movff	_COUNTER+1,4055	;volatile
 23291                           
 23292                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 23293  014B02  8AF2               	bsf	intcon,5,c	;volatile
 23294  014B04  0012               	return		;funcret
 23295  014B06                     __end_ofi2_Timer0_Restart:
 23296                           	opt stack 0
 23297                           tosu	equ	0xFFF
 23298                           tosh	equ	0xFFE
 23299                           tosl	equ	0xFFD
 23300                           pclatu	equ	0xFFB
 23301                           pclath	equ	0xFFA
 23302                           tblptru	equ	0xFF8
 23303                           tblptrh	equ	0xFF7
 23304                           tblptrl	equ	0xFF6
 23305                           tablat	equ	0xFF5
 23306                           prodh	equ	0xFF4
 23307                           prodl	equ	0xFF3
 23308                           intcon	equ	0xFF2
 23309                           indf0	equ	0xFEF
 23310                           postinc0	equ	0xFEE
 23311                           fsr0h	equ	0xFEA
 23312                           fsr0l	equ	0xFE9
 23313                           wreg	equ	0xFE8
 23314                           indf1	equ	0xFE7
 23315                           postdec1	equ	0xFE5
 23316                           fsr1h	equ	0xFE2
 23317                           fsr1l	equ	0xFE1
 23318                           indf2	equ	0xFDF
 23319                           postinc2	equ	0xFDE
 23320                           postdec2	equ	0xFDD
 23321                           plusw2	equ	0xFDB
 23322                           fsr2h	equ	0xFDA
 23323                           fsr2l	equ	0xFD9
 23324                           status	equ	0xFD8
 23325                           
 23326 ;; *************** function i2_Port_SetPin *****************
 23327 ;; Defined at:
 23328 ;;		line 247 in file "Library/Port.c"
 23329 ;; Parameters:    Size  Location     Type
 23330 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23331 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23332 ;;  pPin            1   17[COMRAM] enum E6750
 23333 ;;  pValue          1   18[COMRAM] unsigned char 
 23334 ;; Auto vars:     Size  Location     Type
 23335 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23336 ;; Return value:  Size  Location     Type
 23337 ;;                  1    wreg      void 
 23338 ;; Registers used:
 23339 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23340 ;; Tracked objects:
 23341 ;;		On entry : 0/0
 23342 ;;		On exit  : 0/0
 23343 ;;		Unchanged: 0/0
 23344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23345 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23348 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23349 ;;Total ram usage:        5 bytes
 23350 ;; Hardware stack levels used:    1
 23351 ;; Hardware stack levels required when called:    3
 23352 ;; This function calls:
 23353 ;;		i2_Byte_SetBit
 23354 ;;		i2_Word_GetPair
 23355 ;; This function is called by:
 23356 ;;		i2_Motor_Step
 23357 ;; This function uses a non-reentrant model
 23358 ;;
 23359                           
 23360                           	psect	text137
 23361  012EC8                     __ptext137:
 23362                           	opt stack 0
 23363  012EC8                     i2_Port_SetPin:
 23364                           	opt stack 10
 23365                           
 23366                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23367                           
 23368                           ;incstack = 0
 23369  012EC8  0E08               	movlw	8
 23370  012ECA  2410               	addwf	i2Port_SetPin@pInput,w,c
 23371  012ECC  6E0D               	movwf	i2Word_GetPair@pInput,c
 23372  012ECE  0E00               	movlw	0
 23373  012ED0  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 23374  012ED2  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 23375  012ED4  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23376  012ED8  EC36  F0A3         	call	i2_Word_GetPair	;wreg free
 23377  012EDC  6E14               	movwf	i2Port_SetPin@Type,c
 23378                           
 23379                           ;Port.c: 250: switch (Type)
 23380  012EDE  D03B               	goto	i2l8450
 23381  012EE0                     i2l8436:
 23382                           
 23383                           ;Port.c: 256: pValue &= 1;
 23384  012EE0  0E01               	movlw	1
 23385  012EE2  1613               	andwf	i2Port_SetPin@pValue,f,c
 23386                           
 23387                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23388  012EE4  EE20 F002          	lfsr	2,2
 23389  012EE8  5010               	movf	i2Port_SetPin@pInput,w,c
 23390  012EEA  26D9               	addwf	fsr2l,f,c
 23391  012EEC  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23392  012EEE  22DA               	addwfc	fsr2h,f,c
 23393  012EF0  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23394  012EF4  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23395  012EF8  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23396  012EFC  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23397  012F00  EC7D  F0A0         	call	i2_Byte_SetBit	;wreg free
 23398                           
 23399                           ;Port.c: 258: break;
 23400  012F04  0012               	return	
 23401  012F06                     i2l8440:
 23402                           
 23403                           ;Port.c: 261: pValue &= 1;
 23404  012F06  0E01               	movlw	1
 23405  012F08  1613               	andwf	i2Port_SetPin@pValue,f,c
 23406                           
 23407                           ;Port.c: 262: pValue ^= 1;
 23408  012F0A  0E01               	movlw	1
 23409  012F0C  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 23410                           
 23411                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23412  012F0E  EE20 F002          	lfsr	2,2
 23413  012F12  5010               	movf	i2Port_SetPin@pInput,w,c
 23414  012F14  26D9               	addwf	fsr2l,f,c
 23415  012F16  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23416  012F18  22DA               	addwfc	fsr2h,f,c
 23417  012F1A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23418  012F1E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23419  012F22  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23420  012F26  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23421  012F2A  EC7D  F0A0         	call	i2_Byte_SetBit	;wreg free
 23422                           
 23423                           ;Port.c: 264: break;
 23424  012F2E  0012               	return	
 23425  012F30                     i2l8444:
 23426                           
 23427                           ;Port.c: 266: pValue &= 1;
 23428  012F30  0E01               	movlw	1
 23429  012F32  1613               	andwf	i2Port_SetPin@pValue,f,c
 23430                           
 23431                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 23432  012F34  EE20 F004          	lfsr	2,4
 23433  012F38  5010               	movf	i2Port_SetPin@pInput,w,c
 23434  012F3A  26D9               	addwf	fsr2l,f,c
 23435  012F3C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23436  012F3E  22DA               	addwfc	fsr2h,f,c
 23437  012F40  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23438  012F44  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23439  012F48  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23440  012F4C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23441  012F50  EC7D  F0A0         	call	i2_Byte_SetBit	;wreg free
 23442                           
 23443                           ;Port.c: 269: }
 23444                           
 23445                           ;Port.c: 268: break;
 23446  012F54  0012               	return	
 23447  012F56                     i2l8450:
 23448  012F56  5014               	movf	i2Port_SetPin@Type,w,c
 23449                           
 23450                           ; Switch size 1, requested type "space"
 23451                           ; Number of cases is 4, Range of values is 0 to 3
 23452                           ; switch strategies available:
 23453                           ; Name         Instructions Cycles
 23454                           ; simple_byte           13     7 (average)
 23455                           ;	Chosen strategy is simple_byte
 23456  012F58  0A00               	xorlw	0	; case 0
 23457  012F5A  B4D8               	btfsc	status,2,c
 23458  012F5C  0012               	return	
 23459  012F5E  0A01               	xorlw	1	; case 1
 23460  012F60  B4D8               	btfsc	status,2,c
 23461  012F62  D7BE               	goto	i2l8436
 23462  012F64  0A03               	xorlw	3	; case 2
 23463  012F66  B4D8               	btfsc	status,2,c
 23464  012F68  D7CE               	goto	i2l8440
 23465  012F6A  0A01               	xorlw	1	; case 3
 23466  012F6C  A4D8               	btfss	status,2,c
 23467  012F6E  0012               	return	
 23468  012F70  D7DF               	goto	i2l8444
 23469  012F72                     __end_ofi2_Port_SetPin:
 23470                           	opt stack 0
 23471                           tosu	equ	0xFFF
 23472                           tosh	equ	0xFFE
 23473                           tosl	equ	0xFFD
 23474                           pclatu	equ	0xFFB
 23475                           pclath	equ	0xFFA
 23476                           tblptru	equ	0xFF8
 23477                           tblptrh	equ	0xFF7
 23478                           tblptrl	equ	0xFF6
 23479                           tablat	equ	0xFF5
 23480                           prodh	equ	0xFF4
 23481                           prodl	equ	0xFF3
 23482                           intcon	equ	0xFF2
 23483                           indf0	equ	0xFEF
 23484                           postinc0	equ	0xFEE
 23485                           fsr0h	equ	0xFEA
 23486                           fsr0l	equ	0xFE9
 23487                           wreg	equ	0xFE8
 23488                           indf1	equ	0xFE7
 23489                           postdec1	equ	0xFE5
 23490                           fsr1h	equ	0xFE2
 23491                           fsr1l	equ	0xFE1
 23492                           indf2	equ	0xFDF
 23493                           postinc2	equ	0xFDE
 23494                           postdec2	equ	0xFDD
 23495                           plusw2	equ	0xFDB
 23496                           fsr2h	equ	0xFDA
 23497                           fsr2l	equ	0xFD9
 23498                           status	equ	0xFD8
 23499                           
 23500 ;; *************** function i2_Word_GetPair *****************
 23501 ;; Defined at:
 23502 ;;		line 156 in file "Library/Types.c"
 23503 ;; Parameters:    Size  Location     Type
 23504 ;;  pInput          2   12[COMRAM] PTR struct Word
 23505 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23506 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23507 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23508 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23509 ;;  pPair           1   14[COMRAM] unsigned char 
 23510 ;; Auto vars:     Size  Location     Type
 23511 ;;		None
 23512 ;; Return value:  Size  Location     Type
 23513 ;;                  1    wreg      unsigned char 
 23514 ;; Registers used:
 23515 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23516 ;; Tracked objects:
 23517 ;;		On entry : 0/0
 23518 ;;		On exit  : 0/0
 23519 ;;		Unchanged: 0/0
 23520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23521 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23524 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23525 ;;Total ram usage:        3 bytes
 23526 ;; Hardware stack levels used:    1
 23527 ;; Hardware stack levels required when called:    2
 23528 ;; This function calls:
 23529 ;;		i2_Byte_GetPair
 23530 ;; This function is called by:
 23531 ;;		i2_Port_SetPin
 23532 ;; This function uses a non-reentrant model
 23533 ;;
 23534                           
 23535                           	psect	text138
 23536  01466C                     __ptext138:
 23537                           	opt stack 0
 23538  01466C                     i2_Word_GetPair:
 23539                           	opt stack 10
 23540                           
 23541                           ;Types.c: 158: if (pPair >= 4)
 23542                           
 23543                           ;incstack = 0
 23544  01466C  0E03               	movlw	3
 23545  01466E  640F               	cpfsgt	i2Word_GetPair@pPair,c
 23546  014670  D00C               	goto	i2l8228
 23547                           
 23548                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 23549  014672  0E01               	movlw	1
 23550  014674  240D               	addwf	i2Word_GetPair@pInput,w,c
 23551  014676  6E0A               	movwf	i2Byte_GetPair@pInput,c
 23552  014678  0E00               	movlw	0
 23553  01467A  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 23554  01467C  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 23555  01467E  500F               	movf	i2Word_GetPair@pPair,w,c
 23556  014680  0FFC               	addlw	252
 23557  014682  6E0C               	movwf	i2Byte_GetPair@pPair,c
 23558  014684  ECB4  F0A4         	call	i2_Byte_GetPair	;wreg free
 23559  014688  0012               	return	
 23560  01468A                     i2l8228:
 23561                           
 23562                           ;Types.c: 160: else
 23563                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 23564  01468A  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 23565  01468E  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 23566  014692  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 23567  014696  ECB4  F0A4         	call	i2_Byte_GetPair	;wreg free
 23568  01469A  0012               	return	
 23569  01469C                     __end_ofi2_Word_GetPair:
 23570                           	opt stack 0
 23571                           tosu	equ	0xFFF
 23572                           tosh	equ	0xFFE
 23573                           tosl	equ	0xFFD
 23574                           pclatu	equ	0xFFB
 23575                           pclath	equ	0xFFA
 23576                           tblptru	equ	0xFF8
 23577                           tblptrh	equ	0xFF7
 23578                           tblptrl	equ	0xFF6
 23579                           tablat	equ	0xFF5
 23580                           prodh	equ	0xFF4
 23581                           prodl	equ	0xFF3
 23582                           intcon	equ	0xFF2
 23583                           indf0	equ	0xFEF
 23584                           postinc0	equ	0xFEE
 23585                           fsr0h	equ	0xFEA
 23586                           fsr0l	equ	0xFE9
 23587                           wreg	equ	0xFE8
 23588                           indf1	equ	0xFE7
 23589                           postdec1	equ	0xFE5
 23590                           fsr1h	equ	0xFE2
 23591                           fsr1l	equ	0xFE1
 23592                           indf2	equ	0xFDF
 23593                           postinc2	equ	0xFDE
 23594                           postdec2	equ	0xFDD
 23595                           plusw2	equ	0xFDB
 23596                           fsr2h	equ	0xFDA
 23597                           fsr2l	equ	0xFD9
 23598                           status	equ	0xFD8
 23599                           
 23600 ;; *************** function i2_Byte_GetPair *****************
 23601 ;; Defined at:
 23602 ;;		line 87 in file "Library/Types.c"
 23603 ;; Parameters:    Size  Location     Type
 23604 ;;  pInput          2    9[COMRAM] PTR struct Byte
 23605 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23606 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23607 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23608 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23609 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23610 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23611 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23612 ;;		 -> NULL(0), 
 23613 ;;  pPair           1   11[COMRAM] unsigned char 
 23614 ;; Auto vars:     Size  Location     Type
 23615 ;;		None
 23616 ;; Return value:  Size  Location     Type
 23617 ;;                  1    wreg      unsigned char 
 23618 ;; Registers used:
 23619 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23620 ;; Tracked objects:
 23621 ;;		On entry : 0/0
 23622 ;;		On exit  : 0/0
 23623 ;;		Unchanged: 0/0
 23624 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23625 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23628 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23629 ;;Total ram usage:        3 bytes
 23630 ;; Hardware stack levels used:    1
 23631 ;; Hardware stack levels required when called:    1
 23632 ;; This function calls:
 23633 ;;		i2_Byte_GetZone
 23634 ;; This function is called by:
 23635 ;;		i2_Word_GetPair
 23636 ;; This function uses a non-reentrant model
 23637 ;;
 23638                           
 23639                           	psect	text139
 23640  014968                     __ptext139:
 23641                           	opt stack 0
 23642  014968                     i2_Byte_GetPair:
 23643                           	opt stack 10
 23644                           
 23645                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 23646                           
 23647                           ;incstack = 0
 23648  014968  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 23649  01496C  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 23650  014970  0E04               	movlw	4
 23651  014972  6E03               	movwf	i2Byte_GetZone@pMax,c
 23652  014974  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 23653  014978  0E02               	movlw	2
 23654  01497A  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 23655  01497C  EC0A  F09C         	call	i2_Byte_GetZone	;wreg free
 23656  014980  0012               	return	
 23657  014982                     __end_ofi2_Byte_GetPair:
 23658                           	opt stack 0
 23659                           tosu	equ	0xFFF
 23660                           tosh	equ	0xFFE
 23661                           tosl	equ	0xFFD
 23662                           pclatu	equ	0xFFB
 23663                           pclath	equ	0xFFA
 23664                           tblptru	equ	0xFF8
 23665                           tblptrh	equ	0xFF7
 23666                           tblptrl	equ	0xFF6
 23667                           tablat	equ	0xFF5
 23668                           prodh	equ	0xFF4
 23669                           prodl	equ	0xFF3
 23670                           intcon	equ	0xFF2
 23671                           indf0	equ	0xFEF
 23672                           postinc0	equ	0xFEE
 23673                           fsr0h	equ	0xFEA
 23674                           fsr0l	equ	0xFE9
 23675                           wreg	equ	0xFE8
 23676                           indf1	equ	0xFE7
 23677                           postdec1	equ	0xFE5
 23678                           fsr1h	equ	0xFE2
 23679                           fsr1l	equ	0xFE1
 23680                           indf2	equ	0xFDF
 23681                           postinc2	equ	0xFDE
 23682                           postdec2	equ	0xFDD
 23683                           plusw2	equ	0xFDB
 23684                           fsr2h	equ	0xFDA
 23685                           fsr2l	equ	0xFD9
 23686                           status	equ	0xFD8
 23687                           
 23688 ;; *************** function i2_Byte_GetZone *****************
 23689 ;; Defined at:
 23690 ;;		line 64 in file "Library/Types.c"
 23691 ;; Parameters:    Size  Location     Type
 23692 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23693 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23694 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23695 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23696 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23697 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23698 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23699 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23700 ;;		 -> NULL(0), 
 23701 ;;  pMax            1    2[COMRAM] unsigned char 
 23702 ;;  pChunk          1    3[COMRAM] unsigned char 
 23703 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 23704 ;; Auto vars:     Size  Location     Type
 23705 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 23706 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 23707 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 23708 ;; Return value:  Size  Location     Type
 23709 ;;                  1    wreg      unsigned char 
 23710 ;; Registers used:
 23711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23712 ;; Tracked objects:
 23713 ;;		On entry : 0/0
 23714 ;;		On exit  : 0/0
 23715 ;;		Unchanged: 0/0
 23716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23717 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23718 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23719 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23720 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23721 ;;Total ram usage:        9 bytes
 23722 ;; Hardware stack levels used:    1
 23723 ;; This function calls:
 23724 ;;		Nothing
 23725 ;; This function is called by:
 23726 ;;		i2_Byte_GetPair
 23727 ;; This function uses a non-reentrant model
 23728 ;;
 23729                           
 23730                           	psect	text140
 23731  013814                     __ptext140:
 23732                           	opt stack 0
 23733  013814                     i2_Byte_GetZone:
 23734                           	opt stack 10
 23735                           
 23736                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23737                           
 23738                           ;incstack = 0
 23739  013814  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 23740  013818  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 23741  01381C  0E00               	movlw	low (__mediumconst shr (0+16))
 23742  01381E  6EF8               	movwf	tblptru,c
 23743  013820  0E0F               	movlw	(high __ramtop+-1)
 23744  013822  64F7               	cpfsgt	tblptrh,c
 23745  013824  D003               	bra	i2u414_47
 23746  013826  0008               	tblrd		*
 23747  013828  50F5               	movf	tablat,w,c
 23748  01382A  D005               	bra	i2u414_40
 23749  01382C                     i2u414_47:
 23750  01382C  CFF6 FFE9          	movff	tblptrl,fsr0l
 23751  013830  CFF7 FFEA          	movff	tblptrh,fsr0h
 23752  013834  50EF               	movf	indf0,w,c
 23753  013836                     i2u414_40:
 23754  013836  6E09               	movwf	i2Byte_GetZone@Output,c
 23755                           
 23756                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23757  013838  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23758  01383A  0D01               	mullw	1
 23759  01383C  0E6B               	movlw	low _MASKS
 23760  01383E  24F3               	addwf	prodl,w,c
 23761  013840  6EF6               	movwf	tblptrl,c
 23762  013842  0EFD               	movlw	high _MASKS
 23763  013844  20F4               	addwfc	prodh,w,c
 23764  013846  6EF7               	movwf	tblptrh,c
 23765  013848                     	if	1	;There are 3 active tblptr bytes
 23766  013848  6AF8               	clrf	tblptru,c
 23767  01384A  0E00               	movlw	low (__mediumconst shr (0+16))
 23768  01384C  22F8               	addwfc	tblptru,f,c
 23769  01384E                     	endif
 23770  01384E  0008               	tblrd		*
 23771  013850  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 23772                           
 23773                           ;Types.c: 68: UINT8 Offset = 0;
 23774  013854  0E00               	movlw	0
 23775  013856  6E08               	movwf	i2Byte_GetZone@Offset,c
 23776                           
 23777                           ;Types.c: 70: while (pChunk >= pMax)
 23778  013858  D003               	goto	i2l7438
 23779  01385A                     i2l7434:
 23780                           
 23781                           ;Types.c: 71: {
 23782                           ;Types.c: 72: pChunk -= pMax;
 23783  01385A  5003               	movf	i2Byte_GetZone@pMax,w,c
 23784  01385C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 23785                           
 23786                           ;Types.c: 73: Offset += 1;
 23787  01385E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 23788  013860                     i2l7438:
 23789  013860  5003               	movf	i2Byte_GetZone@pMax,w,c
 23790  013862  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 23791  013864  B0D8               	btfsc	status,0,c
 23792  013866  D7F9               	goto	i2l7434
 23793                           
 23794                           ;Types.c: 74: }
 23795                           ;Types.c: 75: pChunk *= pChunkSize;
 23796  013868  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23797  01386A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 23798  01386C  50F3               	movf	prodl,w,c
 23799  01386E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 23800                           
 23801                           ;Types.c: 76: pChunk += Offset;
 23802  013870  5008               	movf	i2Byte_GetZone@Offset,w,c
 23803  013872  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 23804                           
 23805                           ;Types.c: 78: Output >>= pChunk;
 23806  013874  2804               	incf	i2Byte_GetZone@pChunk,w,c
 23807  013876  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 23808  013878  D002               	goto	i2u416_40
 23809  01387A                     i2u416_45:
 23810  01387A  90D8               	bcf	status,0,c
 23811  01387C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 23812  01387E                     i2u416_40:
 23813  01387E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 23814  013880  D7FC               	goto	i2u416_45
 23815                           
 23816                           ;Types.c: 79: Output &= MASK;
 23817  013882  5007               	movf	i2Byte_GetZone@MASK,w,c
 23818  013884  1609               	andwf	i2Byte_GetZone@Output,f,c
 23819                           
 23820                           ;Types.c: 80: return Output;
 23821  013886  5009               	movf	i2Byte_GetZone@Output,w,c
 23822  013888  0012               	return	
 23823  01388A                     __end_ofi2_Byte_GetZone:
 23824                           	opt stack 0
 23825                           tosu	equ	0xFFF
 23826                           tosh	equ	0xFFE
 23827                           tosl	equ	0xFFD
 23828                           pclatu	equ	0xFFB
 23829                           pclath	equ	0xFFA
 23830                           tblptru	equ	0xFF8
 23831                           tblptrh	equ	0xFF7
 23832                           tblptrl	equ	0xFF6
 23833                           tablat	equ	0xFF5
 23834                           prodh	equ	0xFF4
 23835                           prodl	equ	0xFF3
 23836                           intcon	equ	0xFF2
 23837                           indf0	equ	0xFEF
 23838                           postinc0	equ	0xFEE
 23839                           fsr0h	equ	0xFEA
 23840                           fsr0l	equ	0xFE9
 23841                           wreg	equ	0xFE8
 23842                           indf1	equ	0xFE7
 23843                           postdec1	equ	0xFE5
 23844                           fsr1h	equ	0xFE2
 23845                           fsr1l	equ	0xFE1
 23846                           indf2	equ	0xFDF
 23847                           postinc2	equ	0xFDE
 23848                           postdec2	equ	0xFDD
 23849                           plusw2	equ	0xFDB
 23850                           fsr2h	equ	0xFDA
 23851                           fsr2l	equ	0xFD9
 23852                           status	equ	0xFD8
 23853                           
 23854 ;; *************** function i2_Byte_SetBit *****************
 23855 ;; Defined at:
 23856 ;;		line 32 in file "Library/Types.c"
 23857 ;; Parameters:    Size  Location     Type
 23858 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23859 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 23860 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 23861 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23862 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23863 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23864 ;;		 -> NULL(0), 
 23865 ;;  pBit            1    2[COMRAM] unsigned char 
 23866 ;;  pValue          1    3[COMRAM] unsigned char 
 23867 ;; Auto vars:     Size  Location     Type
 23868 ;;		None
 23869 ;; Return value:  Size  Location     Type
 23870 ;;                  1    wreg      void 
 23871 ;; Registers used:
 23872 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23873 ;; Tracked objects:
 23874 ;;		On entry : 0/0
 23875 ;;		On exit  : 0/0
 23876 ;;		Unchanged: 0/0
 23877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23878 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23879 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23880 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23881 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23882 ;;Total ram usage:        7 bytes
 23883 ;; Hardware stack levels used:    1
 23884 ;; This function calls:
 23885 ;;		Nothing
 23886 ;; This function is called by:
 23887 ;;		i2_Port_SetPin
 23888 ;; This function uses a non-reentrant model
 23889 ;;
 23890                           
 23891                           	psect	text141
 23892  0140FA                     __ptext141:
 23893                           	opt stack 0
 23894  0140FA                     i2_Byte_SetBit:
 23895                           	opt stack 12
 23896                           
 23897                           ;Types.c: 34: pValue &= 1;
 23898                           
 23899                           ;incstack = 0
 23900  0140FA  0E01               	movlw	1
 23901  0140FC  1604               	andwf	i2Byte_SetBit@pValue,f,c
 23902                           
 23903                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 23904  0140FE  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23905  014102  0E01               	movlw	1
 23906  014104  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 23907  014106  2A05               	incf	??i2_Byte_SetBit,f,c
 23908  014108  D002               	goto	i2u483_44
 23909  01410A                     i2u483_45:
 23910  01410A  90D8               	bcf	status,0,c
 23911  01410C  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23912  01410E                     i2u483_44:
 23913  01410E  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23914  014110  D7FC               	goto	i2u483_45
 23915  014112  5006               	movf	??i2_Byte_SetBit+1,w,c
 23916  014114  0AFF               	xorlw	255
 23917  014116  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 23918  014118  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23919  01411C  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23920  014120  5007               	movf	??i2_Byte_SetBit+2,w,c
 23921  014122  16DF               	andwf	indf2,f,c
 23922                           
 23923                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 23924  014124  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23925  014128  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 23926  01412C  2A05               	incf	??i2_Byte_SetBit,f,c
 23927  01412E  D002               	goto	i2u484_44
 23928  014130                     i2u484_45:
 23929  014130  90D8               	bcf	status,0,c
 23930  014132  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23931  014134                     i2u484_44:
 23932  014134  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23933  014136  D7FC               	goto	i2u484_45
 23934  014138  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23935  01413C  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23936  014140  5006               	movf	??i2_Byte_SetBit+1,w,c
 23937  014142  12DF               	iorwf	indf2,f,c
 23938  014144  0012               	return		;funcret
 23939  014146                     __end_ofi2_Byte_SetBit:
 23940                           	opt stack 0
 23941                           tosu	equ	0xFFF
 23942                           tosh	equ	0xFFE
 23943                           tosl	equ	0xFFD
 23944                           pclatu	equ	0xFFB
 23945                           pclath	equ	0xFFA
 23946                           tblptru	equ	0xFF8
 23947                           tblptrh	equ	0xFF7
 23948                           tblptrl	equ	0xFF6
 23949                           tablat	equ	0xFF5
 23950                           prodh	equ	0xFF4
 23951                           prodl	equ	0xFF3
 23952                           intcon	equ	0xFF2
 23953                           indf0	equ	0xFEF
 23954                           postinc0	equ	0xFEE
 23955                           fsr0h	equ	0xFEA
 23956                           fsr0l	equ	0xFE9
 23957                           wreg	equ	0xFE8
 23958                           indf1	equ	0xFE7
 23959                           postdec1	equ	0xFE5
 23960                           fsr1h	equ	0xFE2
 23961                           fsr1l	equ	0xFE1
 23962                           indf2	equ	0xFDF
 23963                           postinc2	equ	0xFDE
 23964                           postdec2	equ	0xFDD
 23965                           plusw2	equ	0xFDB
 23966                           fsr2h	equ	0xFDA
 23967                           fsr2l	equ	0xFD9
 23968                           status	equ	0xFD8
 23969                           
 23970 ;; *************** function i2_MXK_SwitchTo *****************
 23971 ;; Defined at:
 23972 ;;		line 105 in file "Library/MXK.c"
 23973 ;; Parameters:    Size  Location     Type
 23974 ;;  pModule         1    wreg     enum E6925
 23975 ;; Auto vars:     Size  Location     Type
 23976 ;;  pModule         1    7[COMRAM] enum E6925
 23977 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 23978 ;; Return value:  Size  Location     Type
 23979 ;;                  1    wreg      unsigned char 
 23980 ;; Registers used:
 23981 ;;		wreg, status,2, status,0, cstack
 23982 ;; Tracked objects:
 23983 ;;		On entry : 0/0
 23984 ;;		On exit  : 0/0
 23985 ;;		Unchanged: 0/0
 23986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23990 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23991 ;;Total ram usage:        2 bytes
 23992 ;; Hardware stack levels used:    1
 23993 ;; Hardware stack levels required when called:    1
 23994 ;; This function calls:
 23995 ;;		i2_delay_us
 23996 ;; This function is called by:
 23997 ;;		i2_Motor_Step
 23998 ;; This function uses a non-reentrant model
 23999 ;;
 24000                           
 24001                           	psect	text142
 24002  014510                     __ptext142:
 24003                           	opt stack 0
 24004  014510                     i2_MXK_SwitchTo:
 24005                           	opt stack 12
 24006                           
 24007                           ;incstack = 0
 24008                           ;i2MXK_SwitchTo@pModule stored from wreg
 24009  014510  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 24010                           
 24011                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 24012  014512  5086               	movf	3974,w,c	;volatile
 24013  014514  0B0F               	andlw	15
 24014  014516  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 24015                           
 24016                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 24017  014518  5043               	movf	_Bus_State,w,c
 24018  01451A  A4D8               	btfss	status,2,c
 24019  01451C  D002               	goto	i2l8460
 24020                           
 24021                           ;MXK.c: 110: return 0;
 24022  01451E  0E00               	movlw	0
 24023  014520  0012               	return	
 24024  014522                     i2l8460:
 24025                           
 24026                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 24027  014522  0E00               	movlw	0
 24028  014524  6E43               	movwf	_Bus_State,c
 24029                           
 24030                           ;MXK.c: 114: if (CUR != pModule)
 24031  014526  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24032  014528  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 24033  01452A  B4D8               	btfsc	status,2,c
 24034  01452C  D00A               	goto	i2l8468
 24035                           
 24036                           ;MXK.c: 115: {
 24037                           ;MXK.c: 116: PORTG &= ~(0xF);
 24038  01452E  0EF0               	movlw	240
 24039  014530  1686               	andwf	3974,f,c	;volatile
 24040                           
 24041                           ;MXK.c: 117: PORTG |= pModule;
 24042  014532  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24043  014534  1286               	iorwf	3974,f,c	;volatile
 24044                           
 24045                           ;MXK.c: 120: delay_us(10);
 24046  014536  0E00               	movlw	0
 24047  014538  6E02               	movwf	i2delay_us@us+1,c
 24048  01453A  0E0A               	movlw	10
 24049  01453C  6E01               	movwf	i2delay_us@us,c
 24050  01453E  EC99  F0A1         	call	i2_delay_us	;wreg free
 24051  014542                     i2l8468:
 24052                           
 24053                           ;MXK.c: 121: }
 24054                           ;MXK.c: 122: return 1;
 24055  014542  0E01               	movlw	1
 24056  014544  0012               	return	
 24057  014546                     __end_ofi2_MXK_SwitchTo:
 24058                           	opt stack 0
 24059                           tosu	equ	0xFFF
 24060                           tosh	equ	0xFFE
 24061                           tosl	equ	0xFFD
 24062                           pclatu	equ	0xFFB
 24063                           pclath	equ	0xFFA
 24064                           tblptru	equ	0xFF8
 24065                           tblptrh	equ	0xFF7
 24066                           tblptrl	equ	0xFF6
 24067                           tablat	equ	0xFF5
 24068                           prodh	equ	0xFF4
 24069                           prodl	equ	0xFF3
 24070                           intcon	equ	0xFF2
 24071                           indf0	equ	0xFEF
 24072                           postinc0	equ	0xFEE
 24073                           fsr0h	equ	0xFEA
 24074                           fsr0l	equ	0xFE9
 24075                           wreg	equ	0xFE8
 24076                           indf1	equ	0xFE7
 24077                           postdec1	equ	0xFE5
 24078                           fsr1h	equ	0xFE2
 24079                           fsr1l	equ	0xFE1
 24080                           indf2	equ	0xFDF
 24081                           postinc2	equ	0xFDE
 24082                           postdec2	equ	0xFDD
 24083                           plusw2	equ	0xFDB
 24084                           fsr2h	equ	0xFDA
 24085                           fsr2l	equ	0xFD9
 24086                           status	equ	0xFD8
 24087                           
 24088 ;; *************** function i2_delay_us *****************
 24089 ;; Defined at:
 24090 ;;		line 255 in file "Library/Types.c"
 24091 ;; Parameters:    Size  Location     Type
 24092 ;;  us              2    0[COMRAM] unsigned short 
 24093 ;; Auto vars:     Size  Location     Type
 24094 ;;  delay_us        4    2[COMRAM] unsigned long 
 24095 ;; Return value:  Size  Location     Type
 24096 ;;                  1    wreg      void 
 24097 ;; Registers used:
 24098 ;;		wreg, status,2, status,0
 24099 ;; Tracked objects:
 24100 ;;		On entry : 0/0
 24101 ;;		On exit  : 0/0
 24102 ;;		Unchanged: 0/0
 24103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24104 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24105 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24107 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24108 ;;Total ram usage:        6 bytes
 24109 ;; Hardware stack levels used:    1
 24110 ;; This function calls:
 24111 ;;		Nothing
 24112 ;; This function is called by:
 24113 ;;		i2_MXK_SwitchTo
 24114 ;; This function uses a non-reentrant model
 24115 ;;
 24116                           
 24117                           	psect	text143
 24118  014332                     __ptext143:
 24119                           	opt stack 0
 24120  014332                     i2_delay_us:
 24121                           	opt stack 12
 24122                           
 24123                           ;Types.c: 256: unsigned long u;
 24124                           ;Types.c: 257: while (us--) {
 24125                           
 24126                           ;incstack = 0
 24127  014332  D016               	goto	i2l8242
 24128  014334                     i2l8234:
 24129                           
 24130                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 24131  014334  0E00               	movlw	0
 24132  014336  6E03               	movwf	i2delay_us@u,c
 24133  014338  0E00               	movlw	0
 24134  01433A  6E04               	movwf	i2delay_us@u+1,c
 24135  01433C  0E00               	movlw	0
 24136  01433E  6E05               	movwf	i2delay_us@u+2,c
 24137  014340  0E00               	movlw	0
 24138  014342  6E06               	movwf	i2delay_us@u+3,c
 24139  014344                     i2l8236:
 24140  014344  5003               	movf	i2delay_us@u,w,c
 24141  014346  1004               	iorwf	i2delay_us@u+1,w,c
 24142  014348  1005               	iorwf	i2delay_us@u+2,w,c
 24143  01434A  1006               	iorwf	i2delay_us@u+3,w,c
 24144  01434C  A4D8               	btfss	status,2,c
 24145  01434E  D008               	goto	i2l8242
 24146  014350  F000               	nop		; ;# 
 24147  014352  0E01               	movlw	1
 24148  014354  2603               	addwf	i2delay_us@u,f,c
 24149  014356  0E00               	movlw	0
 24150  014358  2204               	addwfc	i2delay_us@u+1,f,c
 24151  01435A  2205               	addwfc	i2delay_us@u+2,f,c
 24152  01435C  2206               	addwfc	i2delay_us@u+3,f,c
 24153  01435E  D7F2               	goto	i2l8236
 24154  014360                     i2l8242:
 24155  014360  0601               	decf	i2delay_us@us,f,c
 24156  014362  A0D8               	btfss	status,0,c
 24157  014364  0602               	decf	i2delay_us@us+1,f,c
 24158  014366  2801               	incf	i2delay_us@us,w,c
 24159  014368  E1E5               	bnz	i2l8234
 24160  01436A  2802               	incf	i2delay_us@us+1,w,c
 24161  01436C  B4D8               	btfsc	status,2,c
 24162  01436E  0012               	return	
 24163  014370  D7E1               	goto	i2l8234
 24164  014372                     __end_ofi2_delay_us:
 24165                           	opt stack 0
 24166                           tosu	equ	0xFFF
 24167                           tosh	equ	0xFFE
 24168                           tosl	equ	0xFFD
 24169                           pclatu	equ	0xFFB
 24170                           pclath	equ	0xFFA
 24171                           tblptru	equ	0xFF8
 24172                           tblptrh	equ	0xFF7
 24173                           tblptrl	equ	0xFF6
 24174                           tablat	equ	0xFF5
 24175                           prodh	equ	0xFF4
 24176                           prodl	equ	0xFF3
 24177                           intcon	equ	0xFF2
 24178                           indf0	equ	0xFEF
 24179                           postinc0	equ	0xFEE
 24180                           fsr0h	equ	0xFEA
 24181                           fsr0l	equ	0xFE9
 24182                           wreg	equ	0xFE8
 24183                           indf1	equ	0xFE7
 24184                           postdec1	equ	0xFE5
 24185                           fsr1h	equ	0xFE2
 24186                           fsr1l	equ	0xFE1
 24187                           indf2	equ	0xFDF
 24188                           postinc2	equ	0xFDE
 24189                           postdec2	equ	0xFDD
 24190                           plusw2	equ	0xFDB
 24191                           fsr2h	equ	0xFDA
 24192                           fsr2l	equ	0xFD9
 24193                           status	equ	0xFD8
 24194                           
 24195 ;; *************** function i2_MXK_Release *****************
 24196 ;; Defined at:
 24197 ;;		line 130 in file "Library/MXK.c"
 24198 ;; Parameters:    Size  Location     Type
 24199 ;;		None
 24200 ;; Auto vars:     Size  Location     Type
 24201 ;;		None
 24202 ;; Return value:  Size  Location     Type
 24203 ;;                  1    wreg      unsigned char 
 24204 ;; Registers used:
 24205 ;;		wreg, status,2, status,0
 24206 ;; Tracked objects:
 24207 ;;		On entry : 0/0
 24208 ;;		On exit  : 0/0
 24209 ;;		Unchanged: 0/0
 24210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24215 ;;Total ram usage:        0 bytes
 24216 ;; Hardware stack levels used:    1
 24217 ;; This function calls:
 24218 ;;		Nothing
 24219 ;; This function is called by:
 24220 ;;		i2_Motor_Step
 24221 ;; This function uses a non-reentrant model
 24222 ;;
 24223                           
 24224                           	psect	text144
 24225  014B58                     __ptext144:
 24226                           	opt stack 0
 24227  014B58                     i2_MXK_Release:
 24228                           	opt stack 13
 24229                           
 24230                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 24231                           
 24232                           ;incstack = 0
 24233  014B58  0E01               	movlw	1
 24234  014B5A  6E43               	movwf	_Bus_State,c
 24235                           
 24236                           ;MXK.c: 135: return 1;
 24237                           ;	Return value of i2_MXK_Release is never used
 24238  014B5C  0012               	return	
 24239  014B5E                     __end_ofi2_MXK_Release:
 24240                           	opt stack 0
 24241                           tosu	equ	0xFFF
 24242                           tosh	equ	0xFFE
 24243                           tosl	equ	0xFFD
 24244                           pclatu	equ	0xFFB
 24245                           pclath	equ	0xFFA
 24246                           tblptru	equ	0xFF8
 24247                           tblptrh	equ	0xFF7
 24248                           tblptrl	equ	0xFF6
 24249                           tablat	equ	0xFF5
 24250                           prodh	equ	0xFF4
 24251                           prodl	equ	0xFF3
 24252                           intcon	equ	0xFF2
 24253                           indf0	equ	0xFEF
 24254                           postinc0	equ	0xFEE
 24255                           fsr0h	equ	0xFEA
 24256                           fsr0l	equ	0xFE9
 24257                           wreg	equ	0xFE8
 24258                           indf1	equ	0xFE7
 24259                           postdec1	equ	0xFE5
 24260                           fsr1h	equ	0xFE2
 24261                           fsr1l	equ	0xFE1
 24262                           indf2	equ	0xFDF
 24263                           postinc2	equ	0xFDE
 24264                           postdec2	equ	0xFDD
 24265                           plusw2	equ	0xFDB
 24266                           fsr2h	equ	0xFDA
 24267                           fsr2l	equ	0xFD9
 24268                           status	equ	0xFD8
 24269                           
 24270 ;; *************** function i2_MXK_Queue *****************
 24271 ;; Defined at:
 24272 ;;		line 144 in file "Library/MXK.c"
 24273 ;; Parameters:    Size  Location     Type
 24274 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 24275 ;;		 -> Absolute function(1), Motor_Step(1), 
 24276 ;; Auto vars:     Size  Location     Type
 24277 ;;		None
 24278 ;; Return value:  Size  Location     Type
 24279 ;;                  1    wreg      void 
 24280 ;; Registers used:
 24281 ;;		wreg, status,2, status,0
 24282 ;; Tracked objects:
 24283 ;;		On entry : 0/0
 24284 ;;		On exit  : 0/0
 24285 ;;		Unchanged: 0/0
 24286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24287 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24288 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24290 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24291 ;;Total ram usage:        3 bytes
 24292 ;; Hardware stack levels used:    1
 24293 ;; This function calls:
 24294 ;;		Nothing
 24295 ;; This function is called by:
 24296 ;;		i2_Motor_Step
 24297 ;; This function uses a non-reentrant model
 24298 ;;
 24299                           
 24300                           	psect	text145
 24301  014AD4                     __ptext145:
 24302                           	opt stack 0
 24303  014AD4                     i2_MXK_Queue:
 24304                           	opt stack 13
 24305                           
 24306                           ;MXK.c: 146: lQueue = pCallback;
 24307                           
 24308                           ;incstack = 0
 24309  014AD4  C001  F025         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 24310  014AD8  C002  F026         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 24311  014ADC  C003  F027         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 24312  014AE0  0012               	return		;funcret
 24313  014AE2                     __end_ofi2_MXK_Queue:
 24314                           	opt stack 0
 24315                           tosu	equ	0xFFF
 24316                           tosh	equ	0xFFE
 24317                           tosl	equ	0xFFD
 24318                           pclatu	equ	0xFFB
 24319                           pclath	equ	0xFFA
 24320                           tblptru	equ	0xFF8
 24321                           tblptrh	equ	0xFF7
 24322                           tblptrl	equ	0xFF6
 24323                           tablat	equ	0xFF5
 24324                           prodh	equ	0xFF4
 24325                           prodl	equ	0xFF3
 24326                           intcon	equ	0xFF2
 24327                           indf0	equ	0xFEF
 24328                           postinc0	equ	0xFEE
 24329                           fsr0h	equ	0xFEA
 24330                           fsr0l	equ	0xFE9
 24331                           wreg	equ	0xFE8
 24332                           indf1	equ	0xFE7
 24333                           postdec1	equ	0xFE5
 24334                           fsr1h	equ	0xFE2
 24335                           fsr1l	equ	0xFE1
 24336                           indf2	equ	0xFDF
 24337                           postinc2	equ	0xFDE
 24338                           postdec2	equ	0xFDD
 24339                           plusw2	equ	0xFDB
 24340                           fsr2h	equ	0xFDA
 24341                           fsr2l	equ	0xFD9
 24342                           status	equ	0xFD8
 24343                           tosu	equ	0xFFF
 24344                           tosh	equ	0xFFE
 24345                           tosl	equ	0xFFD
 24346                           pclatu	equ	0xFFB
 24347                           pclath	equ	0xFFA
 24348                           tblptru	equ	0xFF8
 24349                           tblptrh	equ	0xFF7
 24350                           tblptrl	equ	0xFF6
 24351                           tablat	equ	0xFF5
 24352                           prodh	equ	0xFF4
 24353                           prodl	equ	0xFF3
 24354                           intcon	equ	0xFF2
 24355                           indf0	equ	0xFEF
 24356                           postinc0	equ	0xFEE
 24357                           fsr0h	equ	0xFEA
 24358                           fsr0l	equ	0xFE9
 24359                           wreg	equ	0xFE8
 24360                           indf1	equ	0xFE7
 24361                           postdec1	equ	0xFE5
 24362                           fsr1h	equ	0xFE2
 24363                           fsr1l	equ	0xFE1
 24364                           indf2	equ	0xFDF
 24365                           postinc2	equ	0xFDE
 24366                           postdec2	equ	0xFDD
 24367                           plusw2	equ	0xFDB
 24368                           fsr2h	equ	0xFDA
 24369                           fsr2l	equ	0xFD9
 24370                           status	equ	0xFD8
 24371                           
 24372                           	psect	text146
 24373  000000                     __ptext146:
 24374                           	opt stack 0
 24375                           tosu	equ	0xFFF
 24376                           tosh	equ	0xFFE
 24377                           tosl	equ	0xFFD
 24378                           pclatu	equ	0xFFB
 24379                           pclath	equ	0xFFA
 24380                           tblptru	equ	0xFF8
 24381                           tblptrh	equ	0xFF7
 24382                           tblptrl	equ	0xFF6
 24383                           tablat	equ	0xFF5
 24384                           prodh	equ	0xFF4
 24385                           prodl	equ	0xFF3
 24386                           intcon	equ	0xFF2
 24387                           indf0	equ	0xFEF
 24388                           postinc0	equ	0xFEE
 24389                           fsr0h	equ	0xFEA
 24390                           fsr0l	equ	0xFE9
 24391                           wreg	equ	0xFE8
 24392                           indf1	equ	0xFE7
 24393                           postdec1	equ	0xFE5
 24394                           fsr1h	equ	0xFE2
 24395                           fsr1l	equ	0xFE1
 24396                           indf2	equ	0xFDF
 24397                           postinc2	equ	0xFDE
 24398                           postdec2	equ	0xFDD
 24399                           plusw2	equ	0xFDB
 24400                           fsr2h	equ	0xFDA
 24401                           fsr2l	equ	0xFD9
 24402                           status	equ	0xFD8
 24403                           
 24404                           	psect	rparam
 24405  0000                     tosu	equ	0xFFF
 24406                           tosh	equ	0xFFE
 24407                           tosl	equ	0xFFD
 24408                           pclatu	equ	0xFFB
 24409                           pclath	equ	0xFFA
 24410                           tblptru	equ	0xFF8
 24411                           tblptrh	equ	0xFF7
 24412                           tblptrl	equ	0xFF6
 24413                           tablat	equ	0xFF5
 24414                           prodh	equ	0xFF4
 24415                           prodl	equ	0xFF3
 24416                           intcon	equ	0xFF2
 24417                           indf0	equ	0xFEF
 24418                           postinc0	equ	0xFEE
 24419                           fsr0h	equ	0xFEA
 24420                           fsr0l	equ	0xFE9
 24421                           wreg	equ	0xFE8
 24422                           indf1	equ	0xFE7
 24423                           postdec1	equ	0xFE5
 24424                           fsr1h	equ	0xFE2
 24425                           fsr1l	equ	0xFE1
 24426                           indf2	equ	0xFDF
 24427                           postinc2	equ	0xFDE
 24428                           postdec2	equ	0xFDD
 24429                           plusw2	equ	0xFDB
 24430                           fsr2h	equ	0xFDA
 24431                           fsr2l	equ	0xFD9
 24432                           status	equ	0xFD8
 24433                           
 24434                           	psect	temp
 24435  000049                     btemp:
 24436                           	opt stack 0
 24437  000049                     	ds	1
 24438  0000                     int$flags	set	btemp
 24439                           tosu	equ	0xFFF
 24440                           tosh	equ	0xFFE
 24441                           tosl	equ	0xFFD
 24442                           pclatu	equ	0xFFB
 24443                           pclath	equ	0xFFA
 24444                           tblptru	equ	0xFF8
 24445                           tblptrh	equ	0xFF7
 24446                           tblptrl	equ	0xFF6
 24447                           tablat	equ	0xFF5
 24448                           prodh	equ	0xFF4
 24449                           prodl	equ	0xFF3
 24450                           intcon	equ	0xFF2
 24451                           indf0	equ	0xFEF
 24452                           postinc0	equ	0xFEE
 24453                           fsr0h	equ	0xFEA
 24454                           fsr0l	equ	0xFE9
 24455                           wreg	equ	0xFE8
 24456                           indf1	equ	0xFE7
 24457                           postdec1	equ	0xFE5
 24458                           fsr1h	equ	0xFE2
 24459                           fsr1l	equ	0xFE1
 24460                           indf2	equ	0xFDF
 24461                           postinc2	equ	0xFDE
 24462                           postdec2	equ	0xFDD
 24463                           plusw2	equ	0xFDB
 24464                           fsr2h	equ	0xFDA
 24465                           fsr2l	equ	0xFD9
 24466                           status	equ	0xFD8


Data Sizes:
    Strings     150
    Constant    760
    Data        25
    BSS         679
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     36      72
    BANK0           160     52     160
    BANK1           256     22     212
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_13(CODE[24]), STR_12(CODE[24]), STR_11(CODE[24]), STR_10(CODE[13]), 
		 -> STR_9(CODE[15]), STR_8(CODE[11]), STR_7(CODE[13]), STR_6(CODE[14]), 
		 -> STR_5(CODE[8]), STR_4(CODE[12]), STR_3(CODE[15]), STR_2(CODE[3]), 
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11820I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11502ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK0[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_setMode
    _setMode->_continuousMode
    _nullMode->_Console_Render
    _continuousMode->_Console_Render
    _displayText->_Console_Render
    _displaySID->_printf
    _displayMode->_getMode
    _printf->___llmod
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___llmod->___lldiv
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetQuadType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _initialise->_HMI_Init
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Configure_GPIOs->_SPI_Init
    _HMI_Init->_Button_Init
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 2936652
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                        _displayText
                         _initialise
                            _setMode
 ---------------------------------------------------------------------------------
 (1) _setMode                                              4     4      0 1584848
                                             50 BANK0      2     2      0
                                              0 BANK1      2     2      0
                     _continuousMode
                            _getMode
                           _nullMode
                       _positionMode
                           _stepMode
 ---------------------------------------------------------------------------------
 (2) _stepMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _positionMode                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nullMode                                             0     0      0  373082
                     _Console_Render
                        _displayText
                             _printf
 ---------------------------------------------------------------------------------
 (2) _continuousMode                                       6     6      0  944703
                                             44 BANK0      6     6      0
                     _Console_Render
              _Console_SetForecolour
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                        _MXK_Release
                     _MXK_TestButton *
                         _Motor_Move
                        _Motor_Speed
                             ___wmul
                        _displayText
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _displayText                                          0     0      0  328984
                     _Console_Render
                        _displayMode
                         _displaySID
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displaySID                                           0     0      0    8954
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displayMode                                          0     0      0  275932
              _Console_SetForecolour
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              27    21      6    8467
                                             22 BANK0     18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (5) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (6) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (7) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (8) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (8) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (7) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     840
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) _getMode                                              6     4      2  266978
                                             36 BANK0      6     4      2
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _HMI_Poll                                             0     0      0  255286
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (7) _Button_Poll                                          9     6      3  255286
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (7) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (8) _Event_TestButton                                     1     1      0   36429
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_UpButton                                   1     1      0   36284
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetUp                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_RightButton                                1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetRight                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_LeftButton                                 1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetLeft                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DownButton                                 1     1      0   36284
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetNumber                                        2     0      2    3334
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (10) _itos                                               10     6      4    2401
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (11) _reverse                                             7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     536
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4     545
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) _HMI_SetSegments                                     5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (11) _ToSegment                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_SetDown                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DIPSwitch                                  2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (8) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_SetForecolour                                2     0      2     487
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (5) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (6) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    3839
                                             27 BANK0      4     0      4
                        _Timer0_Init
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4     611
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0  991508
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88782
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3442
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             12 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                              6 BANK1      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             51 BANK0      1     1      0
                                              3 BANK1      3     0      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (6) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                              2 BANK1      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (6) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (7) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (8) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (8) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261965
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (9) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (10) _Port_TogglePin                                      4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (11) _Port_SetPin                                         5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  218205
                                             20 BANK1      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86443
                                             45 BANK0      6     0      6
                                              0 BANK1      2     2      0
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    3268
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2977
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              7 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (12) _Byte_SetBit                                         7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             51 BANK0      1     1      0
                                              3 BANK1      4     0      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      4     0      4
                                              0 BANK1      3     3      0
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (12) _Word_GetPair                                        3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (13) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (14) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _ISR_Function                                       14    14      0    1778
                                             22 COMRAM    14    14      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (16) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (19) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (20) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (21) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (19) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (18) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (19) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _displayText
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _displayMode
       _Console_SetForecolour
       _getMode
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _displaySID
       _Console_SetForecolour
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _initialise
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _setMode
     _continuousMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Console_SetForecolour
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_BlockSwitchTo *
         _delay_us
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_Dequeue *
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release *
       _MXK_TestButton *
         _Port_GetPin
       _Motor_Move *
         _Timer0_Start
       _Motor_Speed *
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
         ___wmul (ARG)
       ___wmul *
       _displayText *
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _getMode *
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf *
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _getMode
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
     _nullMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _displayText
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _positionMode
     _stepMode

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      46       9       27.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100     16      D4       7       82.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     34      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     24      48       1       76.6%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     202      12        0.0%
DATA                 0      0     32E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Mon Aug 14 16:07:39 2017

                   i2_Timer0_Stop 4B52                  SPI_Init@pChannel 00F6  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 24B0  
                               _A 0044                                 _a 0045  
                               _i 007B                                 _j 007A  
                               _l 0047                                 _u 0079  
                               _w 0048                      ?_displayMode 0001  
                    ?_displayText 0001                      ___awdiv@sign 00CA  
             ___wmul@multiplicand 00C7                     _HMI_DIPSwitch 499A  
              LCD_DrawField@pSize 00DD                LCD_DrawField@count 00E3  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 4AFA  
                     ?_LED_Toggle 0001                     ??_Console_Tab 00CD  
                     ?_HMI_GetBar 0001                               l615 039E  
                             l528 07D6                               l617 03A2  
                             l655 47CA                               l680 3B46  
                             l657 47CE                               l685 3B6C  
                             _PR2 000FCB                               _val 0070  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 00DE  
                    _Word_GetPair 43B0                               prod 000FF3  
             MXK_SwitchTo@pModule 00CC                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 00D5  
              Console_MakeField@y 00D6                      Console_Tab@c 00D4  
                    Console_Tab@i 00D3               LCD_DrawField@pField 00D7  
                    Console_Tab@t 00D2      __end_of_Event_HMI_LeftButton 3F12  
                      i2_delay_us 4332              Port_Set@TypeRequired 00E7  
               Console_FormFeed@x 00C7                 Console_FormFeed@y 00C8  
             LCD_DrawField@pPoint 00D9      __end_of_Event_HMI_DownButton 45AC  
                  ?_LCD_DrawField 00D7             Port_SetPinType@Output 00EF  
                 Port_SetPin@Type 00D8                   Port_SetPin@pPin 00D6  
                   ?_Byte_GetPair 00CE                   __end_of_LED_Set 405C  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 2EC8  
                    _Word_SetPair 4266                     ?_Byte_GetZone 00C5  
                            l1215 2CB8                              l1056 13D8  
                            l1161 17B4                              l1082 289C  
                            l2090 0FE2                              l2507 380A  
                            l2517 3D94                              l2454 2BEE  
                            l2464 332C                    ??_Console_Init 00C5  
           Port_SetPinType@pInput 00EB                              l9900 294C  
                            l9910 29A6                              l9904 297C  
                            l9940 0A90                              l9932 0A88  
                            l9924 0A80                              l9854 3254  
                            STR_1 FF81                              l9960 0AA4  
                            l9952 0A9C                              l9944 0A94  
                            l9936 0A8C                              l9928 0A84  
                            STR_2 FFFC                              STR_3 FF97  
                            l9858 3260                              STR_4 FFDD  
                            STR_5 FFF4                              l9884 43DC  
                            l9980 0AB8                              l9972 0AB0  
                            l9964 0AA8                              l9956 0AA0  
                            l9948 0A98                              STR_6 FFB5  
                            STR_7 FFC3                              STR_8 FFE9  
                            STR_9 FFA6                              l9896 2922  
                            l9992 0AC4                              l9984 0ABC  
                            l9976 0AB4                              l9968 0AAC  
                            l9996 0AC8                              l9988 0AC0  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 3164                              u7014 2D28  
                            u7015 2D22                              u7024 2D5A  
                            u8000 23E8                              u7025 2D54  
                            u8010 2428                              _PIR1 000F9E  
                            u6530 322A                              _PIR2 000FA1  
                            _PIR3 000FA4                              u7260 4568  
                            u7148 1F92                              u7149 1FA6  
                            u6550 3290               __end_of_GetPortTRIS 3018  
                            u6800 417E                              u6537 3220  
                            u7265 4562                              u6810 3CA2  
                            u6555 328A                              u7515 225E  
                            u6820 3CCC                              u6805 4178  
                            u6574 3CF4                              u8078 281A  
                            u6590 4254                              u8190 1E2E  
                            u7198 20CE                              u6575 3CEE  
                            u6584 3D26                              u6585 3D20  
                            u6595 424E                              u6835 4A66  
                            u6836 4A6A                              u7805 061E  
                            u6845 4A50                              u6846 4A54  
                            u7815 069C                              u6855 4A3A  
                            u6856 4A3E                              u7728 361C  
                            u6945 4AA6                              u7825 06DE  
                            u6865 4A7C                              u7729 3630  
                            u6970 3732                              u6946 4AA8  
                            u6866 4A80                              u6874 34C4  
                            u7835 0720                              u6875 34BE  
                            u7765 044C                              u7775 0464  
                            u7785 047C                              u7795 049E  
                            _SPI1 0164                              _SPI2 016F  
                            u7990 23D4                              u9838 45EA  
                            u9918 0882                              u9919 0896  
                            u9848 0800                              _TMR0 000FD6  
                            u9849 0814                              u9938 08A4  
                            u9939 08B8                              u9868 0822  
                            u9869 0836                              u9968 08DA  
                            u9969 08EE                              u9898 085A  
                            u9899 086E                              u9988 0904  
                            u9989 0918                              _gISR 0068  
              Event_DIPSwitch@Bar 00DF                     ??_Byte_GetBit 00C8  
              SPI_MaxSpeed@pInput 00D4                     ?_Byte_SetByte 00C5  
                   ?_Byte_SetPair 00D0                   __end_of_SPI_DCS 466C  
                            _main 4778                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00D0                              _itos 25AE  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     ?_Byte_SetZone 00C5  
                            btemp 0049                              _zero 0046  
                   ??_Byte_SetBit 00C9                      ?_HMI_SetLeft 0001  
              __size_of_LCD_Reset 0050                      ?_HMI_SetDown 0001  
                            prodh 000FF4                              prodl 000FF3  
                Motor_Move@pDelta 00CA                              start 148A  
              __size_of_LCD_Write 0022                     __CFG_IESO$OFF 000000  
               Timer0_Init@DIVIDE 00DC                   ?_SPI_DisableISR 00C5  
                Motor_Move@pMotor 00C8               HMI_SetButton@pValue 00CB  
                   Console_Init@x 00C7                     Console_Init@y 00C8  
                  ?i2_Timer0_Stop 0001                __size_of_HMI_SetUp 0016  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FF5B              Set_Rotation@rotation 00CB  
          __size_of_HMI_SetButton 0090            __size_of_HMI_SetNumber 002A  
                     ?_ISR_Enable 0001      __size_of_Console_ClearCursor 003C  
                __end_of_LCD_Fill 3F6A                  __end_of_LCD_Init 1F80  
                 getMode@dipState 00ED                    ?_HMI_DIPSwitch 0001  
                   __CFG_PLLDIV$3 000000                  __end_of_LED_Init 3E00  
                   ??_Button_Init 00F9           GetPortProperties@pInput 00C7  
                   ??_Button_Poll 00E3                             l10000 0ACC  
                           l10100 0B30                             l10020 0AE0  
                           l10012 0AD8                             l10004 0AD0  
                           l11000 0EB0                             l10120 0B44  
                           l10112 0B3C                             l10104 0B34  
                           l10040 0AF4                             l10032 0AEC  
                           l10024 0AE4                             l10016 0ADC  
                           l10008 0AD4                             l10202 37BA  
                __end_of_HMI_Init 17B6                             l10140 0B58  
                           l10132 0B50                             l10124 0B48  
                           l10116 0B40                             l10108 0B38  
                           l10060 0B08                             l10052 0B00  
                           l10044 0AF8                             l10036 0AF0  
                           l10028 0AE8                             l10204 37C6  
                           l10300 35AE                             l11014 22A6  
                           l11022 22C2                             l10214 37FC  
                           l10206 37CC                             l10230 3D86  
                           l10222 3D50                             l11024 230C  
                           l11104 432E                             l10160 0B6C  
                           l10152 0B64                             l10144 0B5C  
                           l10136 0B54                             l10128 0B4C  
                           l10080 0B1C                             l10072 0B14  
                           l10064 0B0C                             l10056 0B04  
                           l10048 0AFC                             l10224 3D5C  
                           l10312 35F8                             l11042 47D2  
                           l10226 3D62                             l11202 3658  
                           l11130 0F62                             l11116 4A94  
                           l11060 2862                             l10172 0B78  
                           l10164 0B70                             l10156 0B68  
                           l10148 0B60                             l10092 0B28  
                           l10084 0B20                             l10076 0B18  
                           l10068 0B10                             l10324 2C60  
                           l10316 2C0C                             l10332 2C7C  
                           l10252 25EC                             l10260 263C  
                           l11212 3670                             l10308 35F2  
                           l10502 2CE0                             l10342 41DE  
                           l11310 404A                             l11070 287C  
                           l10334 2C8C                             l11206 3664  
                           l10270 33D8                             l10422 2AA2  
                           l11142 0F9C                             l11134 0F76  
                           l11048 465E                             l11240 001A  
                           l10344 41F6                             l11304 4012  
                           l11080 28E6                             l11064 286C  
                           l10168 0B74                             l10096 0B2C  
                           l10088 0B24                             l10264 2658  
                           l11152 1004                             l11136 0F7E  
                           l10506 2CEC                             l11242 002A  
                           l11234 0002                             l11306 402E  
                           l11330 3056                             l11322 303A  
                           l11314 301E                             l11410 2FBE  
                           l11402 2FA2                             l11074 28A4  
                           l11066 2872                             l10178 0B7C  
                           l10338 2CA6                             l10186 3AE2  
                           l10194 3B16                             l10266 266C  
                           l10610 445E                             l10290 3594  
                           l10434 2AD6                             l10450 2B26  
                           l11162 1048                             l11138 0F84  
                           l11146 0FA6                             l11252 00EC  
                           l11244 003E                             l11236 000C  
                           l10348 420E                             l11084 28F2  
                           l10524 40BE                             l10276 3448  
                           l10380 3CD4                             l10372 3CA6  
                           l10436 2AE2                             l10428 2AB8  
                           l11180 10AE                             l11164 104E  
                           l13020 0852                             l13012 07F8  
                           l11270 0276                             l11262 01A0  
                           l10470 3B5C                             l10462 3B36  
                           l11342 3080                             l11334 3064  
                           l11326 3048                             l11318 302C  
                           l11414 2FCC                             l11406 2FB0  
                           l11430 11B0                             l11510 1548  
                           l11502 140A                             l10622 3EF0  
                           l10534 40DC                             l10294 359E  
                           l10278 344A                             l10454 2B3A  
                           l10446 2B18                             l10438 2AE8  
                           l11182 10BE                             l13110 3FD0  
                           l10704 3C6E                             l11272 02C4  
                           l11264 01B2                             l10480 3B82  
                           l11096 4306                             l13008 45FE  
                           l11360 30E0                             l11352 30C4  
                           l11424 2FE8                             l13104 3E5A  
                           l11512 1576                             l10536 40F4  
                           l10296 35A4                             l10544 2A16  
                           l10720 1B1A                             l10712 1B0E  
                           l11176 109A                             l13032 08D2  
                           l13024 087A                             l13112 3FD6  
                           l10802 4296                             l11266 01DA  
                           l11602 2494                             l11338 3072  
                           l11418 2FDA                             l11434 11F8  
                           l10626 3F02                             l10642 42E8  
                           l11194 3640                             l11186 114E  
                           l13042 094A                             l13114 3FDC  
                           l11268 0228                             l11276 0312  
                           l10820 3F7E                             l11380 3126  
                           l11372 310A                             l11364 30EE  
                           l11356 30D2                             l11348 308E  
                           l11428 118E                             l11444 1282  
                           l11524 159E                             l10628 3F0A  
                           l10652 45D4                             l10548 2A22  
                           l10732 1B2C                             l10724 1B20  
                           l10716 1B14                             l11188 1164  
                           l13036 08FC                             l13108 3FCA  
                           l13132 477C                             l10494 3798  
                           l10902 18CC                             l10910 1954  
                           l11286 03A6                             l11278 0330  
                           l11390 2F78                             l11438 1240  
                           l11446 129E                             l11550 2156  
                           l11518 1586                             l10638 42D8  
                           l10662 45A4                             l11198 364C  
                           l11622 3518                             l13070 0A5C  
                           l13118 3FE2                             l11288 03B8  
                           l11608 249E                             l11376 3118  
                           l11368 30FC                             l11472 0754  
                           l11544 214C                             l10672 1FE8  
                           l10744 1BCE                             l10736 1B32  
                           l10728 1B26                             l11624 352A  
                           l11632 3560                             l13048 0994  
                           l10850 2B82                             l11714 3F3A  
                           l11706 33B8                             l10818 3F6C  
                           l10826 3FA4                             l11802 437E  
                           l11386 3134                             l11394 2F86  
                           l11474 0774                             l11482 07B8  
                           l11554 215E                             l10674 1FFE  
                           l11626 353C                             l13074 0A6C  
                           l10908 1938                             l10860 2BDC  
                           l10852 2B88                             l10916 3BA2  
                           l10924 3BE0                             l11812 43AC  
                           l11740 3DE0                             l11556 21B0  
                           l10756 1C5E                             l11628 354E  
                           l10918 3BB4                             l11718 3F48  
                           l11590 2436                             l11742 3DF0  
                           l11734 3DA4                             l11398 2F94  
                           l11478 0798                             l10934 38CE  
                           l11494 13E0                             l10870 32D0  
                           l10848 2B72                             l11728 3F64  
                           l11680 3360                             l11592 2452  
                           l11584 23F6                             l11736 3DC2  
                           l11760 1A76                             l13096 3E28  
                           l10872 32D6                             l10794 3EB4  
                           l10890 17F4                             l11658 27AE  
                           l11842 1E9E                             l11586 2414  
                           l11762 1A8E                             l11770 1AEE  
                           l11754 1A54                             l10938 38DC  
                           l11498 1400                             l11692 338C  
                           l11852 1F42                             l11836 1E30  
                           l11764 1AA6                             l10964 31C2  
                           l10948 38F8                             l10876 331A  
                           l10868 32C0                             l11870 36B8  
                           l10982 0D06                             l11686 3376  
                           l11846 1F0A                             l11758 1A5E  
                           l11774 1AF4                             l11880 371A  
                           l11864 36A8                             l10992 0E28  
                           l10984 0D50                             l10896 1860  
                           l10888 17CE                             l11848 1F34  
                           l10976 41D2                             l11768 1ABE  
                           l10968 31E8                             l11874 36C2  
                           l11698 33A2                             l11868 36B2  
                           l10988 0DBC                             l11892 1788  
                           l10998 0E94                  __end_of_HMI_Poll 3A58  
                           _I2C1T 0038                             _I2C2T 009C  
                           ?_main 0001                   __end_of___awdiv 2B44  
                           ?_itos 00CC                             STR_10 FFD0  
                           STR_11 FF69                             STR_12 FF69  
                           STR_13 FF69                   _Event_DIPSwitch 469C  
                 __end_of___lldiv 2C00                             u10008 0926  
                           u10009 093A                             u10028 0952  
                           u10029 0966                             u10048 0974  
                           u10049 0988           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 00C7                   __end_of___llmod 333E  
                           _INDEX 0031                   __end_of___lwdiv 3814  
                           _MASKS FD6B                   __end_of___lwmod 3D9E  
                 ___awdiv@counter 00C9                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0018                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 00DB                   __end_of_getMode 369A  
                  __CFG_FCMEN$OFF 000000                             _PortA 01A2  
                           _PortB 0198                             _PortC 0092  
                           _PortD 0088                             _PortE 007E  
                           _PortF 01AC                             _PortG 018E  
         __end_of_Port_SetPinType 1976                   _ADC_Initialised 007C  
                  ??_Byte_GetPair 00D1                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00DA                   __end_of_dpowers FD4B  
                  ??_Byte_GetZone 00CA                    Button_Poll@Pin 00E8  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 2A86  
                __end_of_MXK_Init 1E0E              i2Byte_GetPair@pInput 000A  
                           _putch 4AAA                  __end_of_SPI_Init 041E  
                __end_of_SPI_Send 3BA0                   __end_of_setMode 400C  
           __end_ofi2_MXK_Release 4B5E                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 3B34  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00C8  
                  ??_Byte_SetPair 00D4                    ??_Byte_SetQuad 00D4  
                           plusw2 000FDB                    ??_Byte_SetZone 00CB  
                   ?_HMI_SetRight 0001                             status 000FD8  
                 _Configure_GPIOs 3A58              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 489A  
             __size_of_LED_Toggle 0048               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001       __size_of_Port_CheckPairType 006A  
             __size_of_HMI_SetBar 000A                   __initialization 2D70  
             __end_of_Byte_GetBit 457A                      __end_of_main 47A0  
                    __end_of_itos 2686              HMI_SetButton@reindex 00C7  
                    SPI_Send9@dat 0076               __end_of_Byte_SetBit 3D3C  
                __end_of_InitList FD23       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 4AAA       __size_of_Port_CheckPortType 0048  
                          ??_main 00F9                            ??_itos 00D0  
         _Console_MakeField$10974 00D3                     __activetblptr 000003  
               Port_SetPin@pInput 00D4                 __end_of_LCD_Reset 40AC  
               Port_SetPin@pValue 00D7                         ??_LED_Set 00DA  
               _MXK_InitDIPSwitch 48F4                 GetPortPORT@pInput 00C7  
          Port_CheckPairType@Pin1 00EF            Port_CheckPairType@Pin2 00F0  
               __end_of_LCD_Write 4836                       _GetPortPORT 30BE  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 2F72  
                 ??_LCD_DrawField 00E1        __end_of_PortProperty_Valid 379C  
                __end_of_Port_Set 07D8                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0064               __end_of_Button_Init 2830  
             __end_of_Button_Poll 20E6                 Word_GetPair@pPair 00D3  
         LCD_FillRectangle@pPoint 00D0                 __end_of_HMI_SetUp 4A40  
              ?_MXK_InitDIPSwitch 0001                     _HMI_SetButton 3468  
                       ??_SPI_DCS 00C7                  ___llmod@dividend 00D2  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                   _HMI_SetNumber 4724            Port_SetQuadType@Output 00F8  
                          _ANCON0 000FC1                  ___awdiv@dividend 00C5  
                  _continuousMode 07D8                            ?_putch 0001  
                ??_Console_Render 00E8                     ToSegment@pCHR 00C5  
           _Console_SetForecolour 4B1A                  _Console_FormFeed 3586  
          Port_SetQuadType@pInput 01B9                    __CFG_WDTEN$OFF 000000  
                          i2l1599 144E               __size_of_ISR_Enable 000A  
                          i2l8234 4334                            i2l8242 4360  
                          i2l7434 385A                            i2l8236 4344  
                          i2l8228 468A                            i2l7438 3860  
                  ??_HMI_SetRight 00C5                            i2l8440 2F06  
                          i2l8450 2F56                            i2l8460 4522  
                          i2l8444 2F30                            i2l8436 2EE0  
                          i2l8810 259C                            i2l8468 4542  
                          i2l8804 2592                            i2l8792 254C  
                          i2l8794 2560                            i2l8786 2514  
                          i2l8788 252A            __end_of_LCD_Word_Write 48B8  
                  _Timer0_Restart 4AEE               ??_MXK_InitDIPSwitch 00F9  
                  i2_MXK_SwitchTo 4510                   Byte_GetBit@pBit 00C7  
    Console_SetForecolour@pColour 00C5                        _Reset_High 48D6  
              Console_Render@temp 00EA                    ??_HMI_UpSwitch 00CB  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00DC  
                __end_of_delay_ms 3C0A                      LED_Init@pLED 00F2  
                __end_of_delay_us 3FBC                     ??_Timer0_Init 00D6  
                   ??_Timer2_Init 00D6                     ??_Timer0_Stop 00C5  
                      _Timer0_ISR 46CA          __size_of_Console_NewLine 0092  
               Timer2_Init@DIVIDE 00DF                    __CFG_XINST$OFF 000000  
        __size_of_HMI_InitButtons 0004                        _Motor_Init 2686  
     __size_of_Event_HMI_UpButton 0030                        _Motor_Move 44A0  
                   ??_Motor_Speed 00E4                        _Motor_Step 238C  
            _Event_HMI_LeftButton 3EBA           __end_of_Event_DIPSwitch 46CA  
  __size_of_Event_HMI_RightButton 0044                            ___wmul 44DA  
                 ??_HMI_DIPSwitch 00CB                         ??___awdiv 00C9  
                  __CFG_STVREN$ON 000000                            _change 00FF  
   __end_of_Event_HMI_RightButton 42F0                            _lMotor 002A  
                       ??___lldiv 00CD                            _lQueue 0025  
                      _TestButton 0184              _Event_HMI_DownButton 457A  
                       ??___llmod 00DA                         ??___lwdiv 00C9  
              __size_of_ToSegment 0284                         ??___lwmod 00C9  
        __end_of_Port_SetQuadType 0F54          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 002C              __end_of_Console_Init 3720  
               GetPortTRIS@pInput 00C7                __size_of_Reset_Low 001E  
                          clear_0 2DD8                            clear_1 2DEA  
                          clear_2 2DF6                            clear_3 2E02  
                          clear_4 2E0E                  ___awdiv@quotient 00CB  
                      Port_Init@i 01C7                 __end_of_MXK_Queue 4AD4  
      __end_ofHMI_SetButton@F7211 FD78                         ??_getMode 00EB  
                          _printf 0F54              __size_of_displayMode 008E  
            __size_of_displayText 0028         __end_of_MXK_InitDIPSwitch 4912  
                  HMI_SetButton@v 00CC            HMI_SetSegments@pString 00C6  
                     _Console_Tab 29C4               LCD_Word_Write@value 00CA  
                    __pdataCOMRAM 003F                __size_of_Port_Init 0192  
                   ??_Port_GetPin 00C8          Port_CheckPortType@Output 00F8  
                __end_of_nullMode 44A0                   ??i2_Port_SetPin 0014  
                       ??_setMode 00F7                      __mediumconst FC70  
     __end_ofTimer2_Init@PRESCALE FD7B          Port_CheckPortType@pDrive 01BB  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 01B9  
                   ??_Port_SetPin 00D8                         ??_reverse 00C9  
          __end_of_continuousMode 0A7A                  __end_of_stepMode 1406  
           Console_MakeField@Fill 0200                  ?_Port_SetPinType 00EB  
                          putch@c 00D9                 Motor_Speed@pMotor 00E0  
                  ?_HMI_SetNumber 00D6                    i2_Word_GetPair 466C  
         __end_of_Configure_GPIOs 3AC8                  ??_MXK_TestButton 00CB  
          __end_of_Timer0_Restart 4AFA                     Set_Rotation@m 00CA  
         continuousMode@direction 00F3                      ?_MXK_Release 0001  
    __size_of_Event_HMI_DIPSwitch 002C                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 4546                      i2delay_us@us 0001  
       Event_HMI_DIPSwitch@pState 00DE                   ?_LCD_Word_Write 00CA  
                      __accesstop 0060           __end_of__initialization 2E14  
                       ?_LCD_Fill 00CE                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00F7                       _Byte_GetBit 4546  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 4B06  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00CD  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
              continuousMode@mode 00F1                       _Byte_SetBit 3CD8  
                   __end_of_MASKS FD74                    _PortA_Property FF67  
                       LCD_Fill@i 00D0                         LCD_Fill@j 00D1  
                       LCD_Init@i 01BA              __size_of_HMI_SetLeft 0016  
            __size_of_HMI_SetDown 0016             ?_Event_HMI_LeftButton 0001  
                  __pcstackCOMRAM 0001                    _PortB_Property FF65  
             __size_ofi2_delay_us 0040                      __pidataBANK0 4B3E  
                    __pidataBANK1 4B2E             ?_Event_HMI_DownButton 0001  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 494E  
                 Console_Render@x 00EF                   Console_Render@y 00F0  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FD4B              __end_of_Byte_GetZone 32A4  
     Event_HMI_RightButton@pState 00DE                    _PortC_Property FF63  
             __end_of_Timer0_Init 223A                     __end_of_putch 4AB8  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 238C  
             __end_of_Timer0_Stop 4B52                         ?_SPI_Init 00F2  
                       ?_SPI_Send 00C5                       _Button_Init 275C  
               Port_SetType@pType 01BE                       _Button_Poll 1F80  
            __end_of_Byte_SetByte 4AC6              __end_of_Byte_SetPair 4858  
                  _HMI_LeftSwitch 49FA                    _PortD_Property FF61  
            __end_of_Byte_SetQuad 487A                      ??_LED_Toggle 00DD  
                    ??_HMI_GetBar 00C5              __end_of_Byte_SetZone 2D70  
             __end_of_Motor_Speed 4778                    _HMI_DownSwitch 49B2  
                   SPI_Send@pData 00C7             __end_of_MXK_DIPSwitch 499A  
                    ??_HMI_SetBar 00C5                    _PortE_Property FF5F  
        __size_of_HMI_SetSegments 00BA            __end_ofi2_Word_GetPair 469C  
                 ?_continuousMode 0001                    _PortF_Property FF5D  
         Port_CheckQuadType@Pair1 01B6           Port_CheckQuadType@Pair2 01B7  
        MXK_BlockSwitchTo@pModule 00CC            ?_Console_SetForecolour 00C5  
               _Console_Backspace 40AC                   ?_Timer0_Restart 0001  
                         ??_putch 00D9          __size_of_HMI_RightSwitch 0018  
             _Console_ClearCursor 43EE                 __end_of_ToSegment 0CFE  
                  _PortG_Property FF5B                        __pbssBANK0 0060  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 4266           Port_CheckQuadType@pQuad 00F6  
                 reverse@iterator 00CA                  ??_SPI_DisableISR 00C7  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 48D6         __size_of_Event_TestButton 003C  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 00D0  
                      ??_LCD_Init 01B8               __end_of_Port_SetPin 29C4  
          __end_of_PortA_Property FF69                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00C5                        ??_LED_Init 00F2  
              Byte_SetByte@pValue 00C7                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00F9                        ??_HMI_Poll 00E9  
                   ?_Timer2_Clear 0001           Port_CheckPairType@Props 00F2  
          __end_of_PortB_Property FF67                     ?_Timer0_Start 00C5  
               __end_of_Port_Init 1B08                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 00ED                __end_of_LED_Toggle 4220  
              __end_of_HMI_GetBar 4B4C          LCD_FillRectangle@pColour 00CE  
             ??_Console_Backspace 00C7                 Set_Addr_Window@xe 00CB  
               Set_Addr_Window@ye 00CC                 Set_Addr_Window@xs 00CD  
               Set_Addr_Window@ys 00CA                       ?_Motor_Init 00F2  
              Byte_SetPair@pInput 00D0                       ?_Motor_Move 00C8  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00D3  
              __end_of_HMI_SetBar 4B1A            __end_of_PortC_Property FF65  
              Word_GetPair@pInput 00D1                    ??_Set_Rotation 00CA  
                       ?_Port_Set 00D4                           ?___wmul 00C5  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 00CA  
                    ??_ISR_Enable 00C5      __size_of_Console_ResetCursor 001A  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 4A12  
          __end_of_PortD_Property FF63                           _ADC_AN0 00B8  
                         _ADC_AN1 00B3                           _ADC_AN2 00AE  
                         _ADC_AN3 00A9        Event_HMI_DownButton@pState 00DE  
                      ??_MXK_Init 00F9                 Port_GetPin@pInput 00C5  
               _Console_MakeField 2830                 ??_Console_NewLine 00C5  
          __end_of_HMI_DownSwitch 49CA                        ??_SPI_Init 00F8  
          Event_TestButton@pState 00DE                       setMode@mode 01B6  
                      ??_SPI_Send 00C8              __end_of_HMI_SetRight 4A56  
                         ?_printf 00DB                 ??_HMI_InitButtons 00C5  
      __size_of_MXK_InitDIPSwitch 001E            __end_of_PortE_Property FF61  
             Console_Render@F6956 01CC                ?_Console_MakeField 00CA  
                         _COUNTER 0028                   ??_HMI_SetButton 00C5  
            __end_of_HMI_UpSwitch 49E2                           _LED_Set 400C  
         _Console_IncrementCursor 3C74            __end_of_PortF_Property FF5F  
                     _gBackcolour 0074                   ??_HMI_SetNumber 00D8  
                       _I2C1_Done 0127                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0124                         _I2C1_More 0121  
                       _I2C2_More 011E                         ?_delay_ms 00C5  
       __end_of_Console_Backspace 40FA                         ?_delay_us 00C5  
      __end_of_MXK_InitTestButton 4930                           _SSP1ADD 000FC8  
                      _displaySID 487A                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F            __end_of_PortG_Property FF5D  
             ??_Console_MakeField 00CC                           _SPI_DCS 463C  
            __size_ofi2_MXK_Queue 000E                  ?_Configure_GPIOs 0001  
            i2Byte_GetZone@Offset 0008                __end_of_ISR_Enable 4B2E  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
                  ??_Timer0_Clear 00C5                 Event_TestButton@j 0078  
                      ??_Mode_Set 00C5                    ??_Timer2_Clear 00C5  
                         _Font5x7 FD7B              i2Byte_GetZone@pChunk 0004  
            i2Byte_GetZone@pInput 0001                    ??_Timer0_Start 00C8  
            SPI_DisableISR@pInput 00C5                     ?_Port_GetQuad 00C5  
                 Byte_SetBit@pBit 00C7              Port_TogglePin@pInput 00D9  
           __end_ofi2_Byte_SetBit 4146            ??_Event_HMI_LeftButton 00DE  
                         __Hparam 0000                 Port_GetQuad@pQuad 00C7  
                     _Timer0_Init 20E6                       _Timer2_Init 223A  
                         __Lparam 0000                       _Timer0_Stop 4B4C  
           __size_of_Console_Init 0086                           OutSeg@a 0033  
 __end_ofPortProperty_Valid@F6830 FD6B            ??_Event_HMI_DownButton 00DE  
                   LCD_Write@mode 00C8                         ?_nullMode 0001  
                      ??_Port_Set 00D7         __end_of_Console_MakeField 2900  
               _Console_PrintChar 1B08                       _Motor_Speed 474E  
                         _Stepper 00A3                     ?_Port_SetType 01BC  
                         _gCursor 003F                           ___awdiv 2A86  
           ??_Console_ClearCursor 00C5                           _lBuffer 0246  
                         ___lldiv 2B44                   __size_of___wmul 0036  
                       ?_stepMode 0001                           ___llmod 32A4  
                         ___lwdiv 379C                           ___lwmod 3D3C  
                 ?_HMI_LeftSwitch 0001          __end_of_Console_FormFeed 3610  
              ?_Console_PrintChar 0001                           __pcinit 2D70  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                      _initialise 3E00                           _getMode 3610  
                         __ptext0 4778                           __ptext1 3FBC  
                         __ptext2 1404                           __ptext3 4B62  
                         __ptext4 4466                           __ptext5 07D8  
                         __ptext6 47A0                           __ptext7 487A  
                         __ptext8 34F8                           __ptext9 0F54  
                 __size_of_printf 0232                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FD23  
                       _T2CONbits 000FCA                     LED_Set@pValue 00D9  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 00DE  
                    ?_GetPortPORT 00C5                      ?_GetPortTRIS 00C5  
             ??_Console_PrintChar 00D5                       _Port_GetPin 4220  
                         _setMode 3FBC                 __CFG_MSSPMSK$MSK5 000000  
             LCD_DrawRectangle@p2 00C1               LCD_DrawRectangle@p4 00BD  
                    ??i2_delay_us 0003                        ??_delay_ms 00C7  
                      ??_delay_us 00C7                           _reverse 3AC8  
                       _DIPSwitch 017A               __size_of_Timer0_ISR 002E  
                     _Port_SetPin 2900                    LCD_DrawField@i 00E7  
                       _LCD_Reset 405C               __size_of_Motor_Init 00D6  
             __size_of_Motor_Move 003A               __size_of_Motor_Step 0124  
                       _LCD_Write 4814              __size_of_MXK_Dequeue 0030  
                      delay_ms@ms 00C5              end_of_initialization 2E14  
                      delay_us@us 00C5                 ??_HMI_SetSegments 00C8  
         Console_PrintChar@pInput 00D8                         _HMI_SetUp 4A2A  
                    _Console_Init 369A                   HMI_SetUp@pValue 00C5  
            __size_of_MXK_Release 0016        __end_of_Port_CheckPairType 3C74  
                       i2u1010_48 46E2                           itos@Out 00D4  
                  ??_Port_GetQuad 00C8                _PortProperty_Valid 3720  
              Byte_SetQuad@pInput 00D0                SPI_MinSpeed@pInput 00D4  
              Byte_SetQuad@pValue 00D3             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 00C9             __size_of_Byte_GetZone 009C  
               ??_HMI_RightSwitch 00CB                   ___lldiv@counter 00D1  
       __end_of_Console_PrintChar 1C94                        ??_nullMode 00F1  
                  ??_Port_SetType 01BF        __end_of_Port_CheckQuadType 3EBA  
                         printf@c 00EC                           printf@f 00DB  
                  Port_Init@pPort 01C4                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 00CE  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 00D4             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 41D8             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 4372                        ??_stepMode 00C5  
              Button_Init@pInitIO 01C1             Timer0_Init@pFrequency 00D2  
             _Event_HMI_DIPSwitch 46F8                 ?_Port_SetQuadType 01B9  
                     _gForecolour 00FD         ??_Console_IncrementCursor 00C9  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 00F8                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 00CB             Console_Render@lCursor 00EB  
                       _MXK_Queue 4AC6                  __CFG_CPUDIV$OSC1 000000  
                Byte_GetZone@pMax 00C7        __size_of_Console_Backspace 004E  
                 _Set_Addr_Window 2E1E                    SPI_Init@pClock 00F2  
                ??_LCD_Word_Write 00CC                       ?_displaySID 0001  
           __end_of_LCD_DrawField 3208                    Port_Set@pInput 00D4  
                  SPI_Init@pInput 01B6              ??_PortProperty_Valid 00D8  
                  Port_Set@pValue 00D6                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 33D6                        ?_LCD_Write 00C8  
                    _Byte_GetPair 4930                HMI_SetButton@F7211 FD74  
                    _Byte_GetZone 3208                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 00E5                 LCD_DrawField@ymax 00E6  
            ?_Event_HMI_DIPSwitch 0001                    _Port_TogglePin 460C  
                      ?_HMI_SetUp 0001                  _Event_TestButton 442A  
            Port_SetPinType@Props 00F0               continuousMode@speed 00F5  
                    ?_Byte_GetBit 00C5           __size_ofi2_Byte_GetPair 001A  
                   ?_positionMode 0001                      _Byte_SetByte 4AB8  
                    _Byte_SetPair 4836                      _Byte_SetQuad 4858  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 2CBA  
            Port_SetPinType@pType 00EE                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 00C5        __end_of_Event_HMI_UpButton 45DC  
                   ?_SPI_MaxSpeed 00D4                 __size_of_LCD_Fill 0058  
               __size_of_LCD_Init 0172                 __size_of_LED_Init 0062  
                   ?_SPI_MinSpeed 00D4             __end_ofi2_Timer0_Stop 4B58  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 01FA  
               __size_of_HMI_Poll 0072                     ?i2_Motor_Step 0001  
           __size_of_HMI_SetRight 0016        __size_of_Console_MakeField 00D0  
                   ??_displayMode 00EF                     ??_displayText 00F1  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 4510  
           __end_of_HMI_DIPSwitch 49B2                     __pidataCOMRAM 4B06  
                     ?_initialise 0001             _Event_HMI_RightButton 42AC  
                    ?_Button_Init 01BD                      ?_Button_Poll 00E0  
                       _Bus_State 0043                  ??_continuousMode 00F1  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 148A  
            __end_of_Timer0_Clear 4AEE                 __size_of_MXK_Init 017A  
            __end_of_Timer2_Clear 4B3E                    __end_of_printf 1186  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 00D1                  ??_Timer0_Restart 00C5  
            __end_of_Timer0_Start 4814           ??_Console_SetForecolour 00C7  
              Port_SetType@Output 01C1               start_initialization 2D70  
                      ?_MXK_Queue 00C5          PortProperty_Valid@Errors 00DA  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 388A  
              Port_SetType@pInput 01BC                        HMI_Init@in 01CA  
             HMI_SetNumber@pInput 00D6             __end_ofi2_Port_SetPin 2F72  
          __end_of_Port_TogglePin 463C                     ?_Word_SetPair 00D4  
               Byte_SetBit@pInput 00C5                    ??_MXK_SwitchTo 00CB  
               Byte_SetBit@pValue 00C8                ?_LCD_FillRectangle 00CE  
           ??_Event_HMI_DIPSwitch 00DE               _Console_ResetCursor 494E  
     PortProperty_Valid@pPinDrive 00D6              MXK_BlockSwitchTo@CUR 00CB  
        PortProperty_Valid@pInput 00D4                     i2_MXK_Release 4B58  
                  ??_positionMode 00C5            LCD_FillRectangle@pSize 00D4  
                  SPI_Send@pInput 00C5                      _HMI_SetRight 4A40  
                    ??_Reset_High 00D9                   ___llmod@divisor 00D6  
        __size_of_Port_SetPinType 01C0                     ??_HMI_SetLeft 00C5  
                   ??_HMI_SetDown 00C5                    ??_SPI_MaxSpeed 00D6  
           Port_SetQuadType@pQuad 01BB                   ___llmod@counter 00DA  
                       _ToSegment 0A7A               ??_LCD_FillRectangle 00D8  
           Port_SetQuadType@pType 01BC                   _Console_NewLine 33D6  
                  ??_SPI_MinSpeed 00D6                      _HMI_UpSwitch 49CA  
                       _Reset_Low 48B8                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 4B5E                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 018C                         _gCharSize 00F9  
                Timer2_Init@INDEX 002F                         OutSeg@cur 0035  
                  ??i2_Motor_Step 0015                      ??_Motor_Init 00F6  
         __size_of_Console_Render 020C                      ??_Motor_Move 00CC  
                    ??_Motor_Step 00D9                Byte_SetZone@Offset 00CE  
                        ??___wmul 00C9               __size_of_displaySID 0020  
            ?_Console_ResetCursor 0001                         _Port_Init 1976  
                     __pdataBANK0 00F9                       __pdataBANK1 01CC  
               __size_of_Port_Set 03BA                Byte_SetZone@pChunk 00C8  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 00C5  
              Byte_SetZone@pValue 00CA                     Mode_Set@pMode 00C5  
                        ??_printf 00E1           __end_of_Set_Addr_Window 2EC8  
        Port_CheckQuadType@Output 01B8                         _gLineSize 01D0  
        Port_CheckQuadType@pDrive 00F7                    ??_Word_GetPair 00D4  
        Port_CheckQuadType@pInput 00F4               __end_of_displayMode 3586  
            __end_of_Port_GetQuad 4190         __end_of_LCD_FillRectangle 38FE  
                     __pbssBIGRAM 0246               __end_of_displayText 47C8  
                        ?_LED_Set 00D9                       __pbssCOMRAM 0025  
              __end_of_Reset_High 48F4                     __pcstackBANK0 00C5  
                   __pcstackBANK1 01B6                        itos@Length 00D2  
                  ??_Word_SetPair 00D8                __end_of_Timer0_ISR 46F8  
            __size_of_GetPortPORT 00A6                       ??_LCD_Reset 00DE  
            __size_of_GetPortTRIS 00A6              __end_of_Port_SetType 13B0  
                        ?_SPI_DCS 00C5                   ?_Port_TogglePin 00D9  
                     ??_LCD_Write 00C9                 __size_of_delay_ms 006A  
               __size_of_delay_us 0052                __end_of_Motor_Init 275C  
             __CFG_CCP2MX$DEFAULT 000000                __end_of_Motor_Move 44DA  
              __end_of_Motor_Step 24B0             Timer2_Init@pFrequency 00D2  
                  ?i2_MXK_Release 0001                       ??_HMI_SetUp 00C5  
             __size_of_initialise 0060          Port_CheckPairType@Output 00F1  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 00EE  
        Port_CheckPairType@pInput 00EB                    reverse@tempVar 00C9  
              _MXK_InitTestButton 4912                        ?_Reset_Low 0001  
                    ?_Timer0_Init 00D2            __size_of_MXK_DIPSwitch 0018  
                    ?_Timer2_Init 00D2                  ??_HMI_LeftSwitch 00CB  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 00C5  
                   _lStepFunction 006B           __size_of_MXK_TestButton 0018  
               Byte_SetPair@pPair 00D2                  ??_HMI_DownSwitch 00CB  
                       __pintcode 1408                     __pmediumconst FC70  
                    ?_Motor_Speed 00E0             ??_Console_ResetCursor 00C5  
                        ?___awdiv 00C5                         __ptext100 48D6  
                       __ptext101 41D8                         __ptext110 2B44  
                       __ptext102 460C                         __ptext111 4B36  
                       __ptext103 2900                         __ptext120 0CFE  
                       __ptext112 47C8                         __ptext104 4220  
                       __ptext121 4266                         __ptext113 463C  
                       __ptext105 4B24                         __ptext130 2CBA  
                       __ptext122 4836                         __ptext114 275C  
                       __ptext106 15BC                         __ptext131 369A  
                       __ptext123 3E60                         __ptext115 48F4  
                       __ptext107 3972                         __ptext140 3814  
                       __ptext124 3C0A                         __ptext116 4B5E  
                       __ptext108 0000                         __ptext141 40FA  
                       __ptext133 46CA                         __ptext125 3720  
                       __ptext117 4912                         __ptext109 223A  
                       __ptext142 4510                         __ptext134 24B0  
                       __ptext126 43B0                         __ptext118 17B6  
                       __ptext143 4332                         __ptext135 4B52  
                       __ptext127 4930                         __ptext119 3CD8  
                       __ptext144 4B58                         __ptext136 4AFA  
                       __ptext128 3208                         __ptext145 4AD4  
                       __ptext137 2EC8                         __ptext129 4858  
                       __ptext146 0000                         __ptext138 466C  
                       __ptext139 4968                         _pShiftVal 006E  
             __end_of_HMI_SetLeft 4A6C               __end_of_HMI_SetDown 4A82  
                        ?___lldiv 00C5                        ?_Port_Init 01C2  
                        ?___llmod 00D2              Timer0_Init@pCPUClock 00D8  
                        ?___lwdiv 00C5                          ?___lwmod 00C5  
          ?_Event_HMI_RightButton 0001               ?_MXK_InitTestButton 0001  
               __size_of_nullMode 003A                 ?_Console_FormFeed 0001  
               _GetPortProperties 3018                 __size_of_stepMode 0002  
                        ?_getMode 00E9       __end_ofTimer0_Init@PRESCALE FD5B  
              ??_Console_FormFeed 00C5                   _HMI_SetSegments 2C00  
              ?_GetPortProperties 00C5                HMI_SetRight@pValue 00C5  
        __size_of_Event_DIPSwitch 002E             __size_of_Set_Rotation 0098  
                   ??i2_MXK_Queue 0004                       ??_MXK_Queue 00C8  
                    ?_Port_GetPin 00C5                          ?_setMode 0001  
               HMI_SetLeft@pValue 00C5             __end_of_HMI_SetButton 34F8  
            __size_of_Console_Tab 00C2                          ?_reverse 00C5  
                    ?_Port_SetPin 00D4             __end_of_HMI_SetNumber 474E  
                ___lwdiv@quotient 00CA                   _HMI_RightSwitch 49E2  
               HMI_SetDown@pValue 00C5               ??_GetPortProperties 00C7  
         __end_of_Console_NewLine 3468              ??_MXK_InitTestButton 00F2  
              Byte_GetPair@pInput 00CE                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 4B62                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 4968  
                        _LCD_Fill 3F12                          _LCD_Init 1E0E  
                  ___wmul@product 00C9                          _HMIBoard 012A  
                  i2_Byte_GetZone 3814                          _LED_Init 3D9E  
                       delay_ms@u 00C7                Button_Poll@pButton 00E0  
                       delay_us@u 00C7                          _HMI_Init 15BC  
                        _HMI_Poll 39E6                MXK_Queue@pCallback 00C5  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 442A          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 00D2  
                        i2u414_40 3836                          i2u414_47 382C  
                        i2u416_40 387E                          i2u416_45 387A  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                        i2u483_44 410E                          i2u483_45 410A  
                        i2u556_40 24F2                          i2u484_44 4134  
                        i2u484_45 4130                          i2u557_40 2506  
                        i2u558_40 253E              __size_of_Byte_SetBit 0064  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000     __size_of_Event_HMI_LeftButton 0058  
                HMI_SetBar@pValue 00C5                 Button_Init@pInput 01BD  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 00EF                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 0082     __size_of_Event_HMI_DownButton 0032  
           __size_of_Timer0_Clear 000C                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 30BE                          _SSP2STAT 000F6D  
                     _displayMode 34F8                      _Set_Rotation 333E  
           __size_of_Timer2_Clear 0008                       _displayText 47A0  
            __end_of_MXK_SwitchTo 4332                _Port_CheckPairType 3C0A  
                        _MXK_Init 1C94             __size_of_Timer0_Start 0024  
                 MXK_SwitchTo@CUR 00CB                          _SPI_Init 0000  
        __end_of_Event_TestButton 4466                          _SPI_Send 3B34  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 00CA                 ___wmul@multiplier 00C5  
            __end_of_positionMode 4B64                 Byte_GetBit@Output 00C9  
                      printf@flag 00E5              Timer2_Init@pCPUClock 00DB  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 3972                        printf@prec 00E3  
           Motor_Speed@pFrequency 00E2                 Byte_GetBit@pInput 00C5  
             Port_SetPinType@pPin 00ED              __size_of_Button_Poll 0166  
              _Port_CheckQuadType 3E60                     _MXK_DIPSwitch 4982  
             ?_Port_CheckPairType 00EB              __end_of_SPI_MinSpeed 39E6  
                   ??_MXK_Dequeue 00DB                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 4190  
           Button_Poll@pIncrement 00E2                      ??_displaySID 00ED  
         PortProperty_Valid@F6830 FD5B              __end_ofi2_Motor_Step 25AE  
                 ??i2_MXK_Release 0001                         copy_data0 2D84  
                       copy_data1 2DA4                         copy_data2 2DC4  
                   ??_MXK_Release 00C5            __end_ofi2_Byte_GetPair 4982  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 00F4            __end_ofi2_Byte_GetZone 388A  
             __end_ofi2_MXK_Queue 4AE2               ?_Port_CheckPortType 01B9  
                 itos@destination 00CE                          _InitList FC71  
            _Motor_Step$intlevel0 2392                          _Mode_Set 4A98  
              Port_GetQuad@Output 00CA                       ??_ToSegment 00C5  
                    _ISR_Function 1408                      _Timer0_Clear 4AE2  
                     _HMI_SetLeft 4A56                       _HMI_SetDown 4A6C  
              Port_GetQuad@pInput 00C5                      _Timer2_Clear 4B36  
            __end_of_Word_GetPair 43EE                          _lCBuffer 0100  
            ??_Port_CheckPairType 00EF                       ??_Reset_Low 00D9  
                        __Hrparam 0000                      _Timer0_Start 47F0  
                  _Console_Render 13B0                          __Lrparam 0000  
                 Timer2_Init@RDIV 00D7        Event_HMI_LeftButton@pState 00DE  
                  LCD_Write@value 00C9                          _Port_Set 041E  
                    OutSeg@segset 0034                         rand@screw 0032  
            __end_of_Word_SetPair 42AC                       ??_Port_Init 01C5  
         __end_of_HMI_SetSegments 2CBA              ??_Port_CheckQuadType 00F8  
              __end_of_displaySID 489A             __size_of_Port_GetQuad 004A  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 4372                  __size_of___llmod 009A  
                __size_of___lwdiv 0078              ??_Port_CheckPortType 00F8  
                __size_of___lwmod 0062                      ??_initialise 00F9  
                        _lBufferX 0037                          _lBufferY 0036  
             Timer2_Init@PRESCALE FD78                _Event_HMI_UpButton 45AC  
                 LCD_Fill@pColour 00CE                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 0072  
                __size_of_getMode 008A           __end_of_HMI_RightSwitch 49FA  
          Byte_GetZone@pChunkSize 00C9                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 00C9             __size_of_Port_SetType 022A  
                   reverse@length 00C7                         itos@input 00CC  
           i2MXK_SwitchTo@pModule 0008                Motor_Init@pAddress 00F4  
                        _delay_ms 3BA0                          _delay_us 3F6A  
                        _clearall 007D                   ___lwdiv@divisor 00C7  
  __size_of_Console_SetForecolour 000A               ?_Event_HMI_UpButton 0001  
                __size_of_setMode 0050                   ___lwdiv@counter 00C9  
   __end_of_Console_SetForecolour 4B24                   Port_GetPin@pPin 00C7  
                        __ptext10 4AAA                          __ptext11 1B08  
                        __ptext20 32A4                          __ptext12 29C4  
                        __ptext21 3610                          __ptext13 2A86  
                        __ptext30 4A12                          __ptext22 39E6  
                        __ptext14 3C74                          __ptext31 4146  
                        __ptext23 1F80                          __ptext15 33D6  
                        __ptext40 4A2A                          __ptext32 469C  
                        __ptext24 4982                          __ptext16 3586  
                        __ptext41 4A40                          __ptext33 457A  
                        __ptext25 499A                          __ptext17 494E  
                        __ptext50 4A6C                          __ptext42 4A56  
                        __ptext34 45AC                          __ptext26 49B2  
                        __ptext18 40AC                          __ptext51 4B10  
                        __ptext43 4724                          __ptext35 42AC  
                        __ptext27 49CA                          __ptext19 43EE  
                        __ptext60 474E                          __ptext52 4B46  
                        __ptext44 25AE                          __ptext36 3EBA  
                        __ptext28 49E2                          __ptext61 44A0  
                        __ptext53 4B1A                          __ptext45 3AC8  
                        __ptext37 46F8                          __ptext29 49FA  
                        __ptext70 4190                          __ptext62 47F0  
                        __ptext54 13B0                          __ptext46 3D3C  
                        __ptext38 442A                          __ptext71 041E  
                        __ptext63 3E00                          __ptext55 388A  
                        __ptext47 379C                          __ptext39 3468  
             ??_MXK_BlockSwitchTo 00CB                          __ptext80 4B4C  
                        __ptext72 4AB8                          __ptext64 2686  
                        __ptext56 3164                          __ptext48 2C00  
                        __ptext81 4AEE                          __ptext73 2F72  
                        __ptext65 20E6                          __ptext57 44DA  
                        __ptext49 0A7A                          __ptext90 2E1E  
                        __ptext82 42F0                          __ptext74 3018  
                        __ptext66 4AE2                          __ptext58 2830  
                        __ptext91 489A                          __ptext83 4A82  
                        __ptext75 30BE                          __ptext67 1C94  
                        __ptext59 4546                          __ptext92 4814  
                        __ptext84 4AC6                          __ptext76 3D9E  
                        __ptext68 1976                          __ptext93 3B34  
                        __ptext85 4372                          __ptext77 400C  
                        __ptext69 1186                          __ptext94 4A98  
                        __ptext86 3F6A                          __ptext78 45DC  
                        __ptext95 3A58                          __ptext87 1E0E  
                        __ptext79 238C                          __ptext96 38FE  
                        __ptext88 333E                          __ptext97 405C  
                        __ptext89 3F12                          __ptext98 3BA0  
                        __ptext99 48B8                      _SSP1CON1bits 000FC6  
                __size_of_reverse 006C                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 007C                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 00DE                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 460C                 HMI_SetSegments@in 00C9  
           Button_Init@pThreshold 01BF                     __size_of_main 0028  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 00D0  
          __end_of_Console_Render 15BC                __end_of_initialise 3E60  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
                    _Port_GetQuad 4146               __end_of_MXK_Release 4A98  
                  _MXK_TestButton 4A12                     i2_Byte_SetBit 40FA  
            ??_Event_HMI_UpButton 00DE               i2Word_GetPair@pPair 000F  
                        _nullMode 4466         __end_of_MXK_BlockSwitchTo 43B0  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 0154  
            __size_of_Timer2_Init 0152                          int$flags 0049  
            __size_of_Timer0_Stop 0006                      _Port_SetType 1186  
                    Port_Set@Type 00EB                          _stepMode 1404  
      __size_of_GetPortProperties 00A6            __size_of_LCD_DrawField 00A4  
               ??_Configure_GPIOs 00F8                         printf@val 00E8  
                    _SSP1STATbits 000FC7              __size_of_Motor_Speed 002A  
                  Timer0_Init@DIV 0064                    Timer0_Init@PRE 0030  
                    _SSP2STATbits 000F6D                        _LED_Toggle 41D8  
                      _HMI_GetBar 4B46              Button_Init@pGetState 01C4  
          PortProperty_Valid@Pair 00EA                  ??_Port_TogglePin 00DC  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
     __end_of_Event_HMI_DIPSwitch 4724            PortProperty_Valid@pPin 00D7  
                      _HMI_SetBar 4B10                  Byte_SetZone@MASK 00CF  
                     i2_MXK_Queue 4AD4                    Timer2_Init@DIV 0060  
                  Timer2_Init@PRE 002E                  Byte_SetZone@pMax 00C7  
          __size_ofi2_Timer0_Stop 0006              __size_of_Port_GetPin 0046  
            Button_Init@pFunction 01C7                          itos@Data 00D0  
              LCD_FillRectangle@i 00DA                LCD_FillRectangle@j 00DB  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                    reverse@input 00C5            __size_of_HMI_DIPSwitch 0018  
                ___lwmod@dividend 00C5                  ___lldiv@dividend 00C5  
          __end_of_MXK_TestButton 4A2A                   ?_Console_Render 0001  
         __size_of_LCD_Word_Write 001E                    ?i2_Byte_SetBit 0001  
           __size_of_MXK_SwitchTo 0042           ??_Event_HMI_RightButton 00DE  
                  _SPI_DisableISR 47C8                   Port_Init@pInput 01C2  
                        printf@ap 00E6             __size_of_positionMode 0002  
        Event_HMI_UpButton@pState 00DE            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 4B24                  ?_HMI_SetSegments 00C6  
         Console_MakeField@Column 00D1             __size_of_SPI_MaxSpeed 0074  
                   SPI_DCS@pInput 00C5             __size_of_SPI_MinSpeed 0074  
                 ??_MXK_DIPSwitch 00CB            Event_HMI_DIPSwitch@Bar 00DF  
           __size_ofi2_Motor_Step 00FE           Console_MakeField@pInput 00D0  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 00CD  
                   ??_GetPortPORT 00C7                   ___lwmod@divisor 00C7  
                   ??_GetPortTRIS 00C7             Timer0_Start@pFunction 00C5  
              Word_SetPair@pInput 00D4                   ___lwmod@counter 00C9  
              Word_SetPair@pValue 00D7                  Motor_Init@pMotor 00F2  
                     _MXK_Dequeue 45DC                    LED_Toggle@pLED 00DD  
                   _LCD_DrawField 3164                  _Port_SetQuadType 0CFE  
         __size_of_continuousMode 02A2                       _MXK_Release 4A82  
       __size_of_Console_FormFeed 008A                      _MXK_SwitchTo 42F0  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 00CC  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00D6  
                 _Port_SetPinType 17B6           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00CD                Byte_GetZone@pChunk 00C8  
                    _positionMode 4B62                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 4968                Byte_GetZone@pInput 00C5  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 3CD8  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 47F0  
                    _SPI_MaxSpeed 38FE                      _SPI_MinSpeed 3972  
              Port_Set@TypeActual 00E9  
