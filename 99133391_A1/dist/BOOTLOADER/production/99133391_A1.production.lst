

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Aug 27 11:19:11 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	text42,global,reloc=2,class=CODE,delta=1
    63                           	psect	text43,global,reloc=2,class=CODE,delta=1
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	text45,global,reloc=2,class=CODE,delta=1
    66                           	psect	text46,global,reloc=2,class=CODE,delta=1
    67                           	psect	text47,global,reloc=2,class=CODE,delta=1
    68                           	psect	text48,global,reloc=2,class=CODE,delta=1
    69                           	psect	text49,global,reloc=2,class=CODE,delta=1
    70                           	psect	text50,global,reloc=2,class=CODE,delta=1
    71                           	psect	text51,global,reloc=2,class=CODE,delta=1
    72                           	psect	text52,global,reloc=2,class=CODE,delta=1
    73                           	psect	text53,global,reloc=2,class=CODE,delta=1
    74                           	psect	text54,global,reloc=2,class=CODE,delta=1
    75                           	psect	text55,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	text61,global,reloc=2,class=CODE,delta=1
    82                           	psect	text62,global,reloc=2,class=CODE,delta=1
    83                           	psect	text63,global,reloc=2,class=CODE,delta=1
    84                           	psect	text64,global,reloc=2,class=CODE,delta=1
    85                           	psect	text65,global,reloc=2,class=CODE,delta=1
    86                           	psect	text66,global,reloc=2,class=CODE,delta=1
    87                           	psect	text67,global,reloc=2,class=CODE,delta=1
    88                           	psect	text68,global,reloc=2,class=CODE,delta=1
    89                           	psect	text69,global,reloc=2,class=CODE,delta=1
    90                           	psect	text70,global,reloc=2,class=CODE,delta=1,inline
    91                           	psect	text71,global,reloc=2,class=CODE,delta=1,inline
    92                           	psect	text72,global,reloc=2,class=CODE,delta=1
    93                           	psect	text73,global,reloc=2,class=CODE,delta=1
    94                           	psect	text74,global,reloc=2,class=CODE,delta=1
    95                           	psect	text75,global,reloc=2,class=CODE,delta=1
    96                           	psect	text76,global,reloc=2,class=CODE,delta=1
    97                           	psect	text77,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	text90,global,reloc=2,class=CODE,delta=1
   111                           	psect	text91,global,reloc=2,class=CODE,delta=1
   112                           	psect	text92,global,reloc=2,class=CODE,delta=1
   113                           	psect	text93,global,reloc=2,class=CODE,delta=1
   114                           	psect	text94,global,reloc=2,class=CODE,delta=1
   115                           	psect	text95,global,reloc=2,class=CODE,delta=1
   116                           	psect	text96,global,reloc=2,class=CODE,delta=1
   117                           	psect	text97,global,reloc=2,class=CODE,delta=1
   118                           	psect	text98,global,reloc=2,class=CODE,delta=1
   119                           	psect	text99,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	text100,global,reloc=2,class=CODE,delta=1
   121                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text102,global,reloc=2,class=CODE,delta=1
   123                           	psect	text103,global,reloc=2,class=CODE,delta=1
   124                           	psect	text104,global,reloc=2,class=CODE,delta=1
   125                           	psect	text105,global,reloc=2,class=CODE,delta=1
   126                           	psect	text106,global,reloc=2,class=CODE,delta=1
   127                           	psect	text107,global,reloc=2,class=CODE,delta=1
   128                           	psect	text108,global,reloc=2,class=CODE,delta=1
   129                           	psect	text109,global,reloc=2,class=CODE,delta=1
   130                           	psect	text110,global,reloc=2,class=CODE,delta=1
   131                           	psect	text111,global,reloc=2,class=CODE,delta=1
   132                           	psect	text112,global,reloc=2,class=CODE,delta=1
   133                           	psect	text113,global,reloc=2,class=CODE,delta=1
   134                           	psect	text114,global,reloc=2,class=CODE,delta=1
   135                           	psect	text115,global,reloc=2,class=CODE,delta=1
   136                           	psect	text116,global,reloc=2,class=CODE,delta=1,inline
   137                           	psect	text117,global,reloc=2,class=CODE,delta=1
   138                           	psect	text118,global,reloc=2,class=CODE,delta=1,group=1
   139                           	psect	text119,global,reloc=2,class=CODE,delta=1,group=1
   140                           	psect	text120,global,reloc=2,class=CODE,delta=1,group=1
   141                           	psect	text121,global,reloc=2,class=CODE,delta=1,group=1
   142                           	psect	text122,global,reloc=2,class=CODE,delta=1
   143                           	psect	text123,global,reloc=2,class=CODE,delta=1
   144                           	psect	text124,global,reloc=2,class=CODE,delta=1
   145                           	psect	text125,global,reloc=2,class=CODE,delta=1
   146                           	psect	text126,global,reloc=2,class=CODE,delta=1,inline
   147                           	psect	text127,global,reloc=2,class=CODE,delta=1
   148                           	psect	text128,global,reloc=2,class=CODE,delta=1,group=1
   149                           	psect	text129,global,reloc=2,class=CODE,delta=1
   150                           	psect	text130,global,reloc=2,class=CODE,delta=1
   151                           	psect	text131,global,reloc=2,class=CODE,delta=1
   152                           	psect	text132,global,reloc=2,class=CODE,delta=1
   153                           	psect	text133,global,reloc=2,class=CODE,delta=1
   154                           	psect	text134,global,reloc=2,class=CODE,delta=1
   155                           	psect	text135,global,reloc=2,class=CODE,delta=1,group=1
   156                           	psect	text136,global,reloc=2,class=CODE,delta=1,group=1
   157                           	psect	text137,global,reloc=2,class=CODE,delta=1
   158                           	psect	text138,global,reloc=2,class=CODE,delta=1
   159                           	psect	text139,global,reloc=2,class=CODE,delta=1
   160                           	psect	text140,global,reloc=2,class=CODE,delta=1,group=1
   161                           	psect	text141,global,reloc=2,class=CODE,delta=1
   162                           	psect	text142,global,reloc=2,class=CODE,delta=1
   163                           	psect	text143,global,reloc=2,class=CODE,delta=1
   164                           	psect	text144,global,reloc=2,class=CODE,delta=1
   165                           	psect	text145,global,reloc=2,class=CODE,delta=1
   166                           	psect	text146,global,reloc=2,class=CODE,delta=1
   167                           	psect	text147,global,reloc=2,class=CODE,delta=1
   168                           	psect	text148,global,reloc=2,class=CODE,delta=1
   169                           	psect	text149,global,reloc=2,class=CODE,delta=1,group=1
   170                           	psect	text150,global,reloc=2,class=CODE,delta=1
   171                           	psect	text151,global,reloc=2,class=CODE,delta=1
   172                           	psect	text152,global,reloc=2,class=CODE,delta=1
   173                           	psect	text153,global,reloc=2,class=CODE,delta=1
   174                           	psect	text154,global,reloc=2,class=CODE,delta=1,inline
   175                           	psect	text155,global,reloc=2,class=CODE,delta=1
   176                           	psect	text156,global,reloc=2,class=CODE,delta=1
   177                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   178                           	psect	text158,global,reloc=2,class=CODE,delta=1
   179                           	psect	text159,global,reloc=2,class=CODE,delta=1
   180                           	psect	text160,global,reloc=2,class=CODE,delta=1
   181                           	psect	text161,global,reloc=2,class=CODE,delta=1
   182                           	psect	text162,global,reloc=2,class=CODE,delta=1
   183                           	psect	text163,global,reloc=2,class=CODE,delta=1
   184                           	psect	text164,global,reloc=2,class=CODE,delta=1
   185                           	psect	text165,global,reloc=2,class=CODE,delta=1,inline
   186                           	psect	text166,global,reloc=2,class=CODE,delta=1
   187                           	psect	text167,global,reloc=2,class=CODE,delta=1
   188                           	psect	text168,global,reloc=2,class=CODE,delta=1
   189                           	psect	text169,global,reloc=2,class=CODE,delta=1
   190                           	psect	text170,global,reloc=2,class=CODE,delta=1
   191                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   192                           	psect	text171,global,reloc=2,class=CODE,delta=1
   193                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   194                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   195  0000                     
   196                           ; Version 1.43
   197                           ; Generated 25/07/2017 GMT
   198                           ; 
   199                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   200                           ; All rights reserved.
   201                           ; 
   202                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   203                           ; 
   204                           ; Redistribution and use in source and binary forms, with or without modification, are
   205                           ; permitted provided that the following conditions are met:
   206                           ; 
   207                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   208                           ;        conditions and the following disclaimer.
   209                           ; 
   210                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   211                           ;        of conditions and the following disclaimer in the documentation and/or other
   212                           ;        materials provided with the distribution.
   213                           ; 
   214                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   215                           ;        software without specific prior written permission.
   216                           ; 
   217                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   218                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   219                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   220                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   221                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   222                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   223                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   224                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   225                           ; 
   226                           ; 
   227                           ; Code-generator required, PIC18F67J50 Definitions
   228                           ; 
   229                           ; SFR Addresses
   230  0000                     
   231                           	psect	idataCOMRAM
   232  016E5C                     __pidataCOMRAM:
   233                           	opt stack 0
   234                           
   235                           ;initializer for _gCursor
   236  016E5C  0006               	dw	6
   237  016E5E  0006               	dw	6
   238                           
   239                           ;initializer for _Bus_State
   240  016E60  01                 	db	1
   241                           
   242                           ;initializer for _change
   243  016E61  01                 	db	1
   244                           
   245                           ;initializer for _zero
   246  016E62  30                 	db	48
   247                           
   248                           ;initializer for _l
   249  016E63  80                 	db	128
   250                           
   251                           ;initializer for _w
   252  016E64  80                 	db	128
   253                           
   254                           	psect	idataBANK1
   255  016D96                     __pidataBANK1:
   256                           	opt stack 0
   257                           
   258                           ;initializer for Console_Render@F6956
   259  016D96  0006               	dw	6
   260  016D98  0006               	dw	6
   261                           
   262                           ;initializer for _gLineSize
   263  016D9A  0080               	dw	128
   264  016D9C  0007               	dw	7
   265                           
   266                           ;initializer for _gCharSize
   267  016D9E  0005               	dw	5
   268  016DA0  0007               	dw	7
   269                           
   270                           ;initializer for _currentPos
   271  016DA2  00C8               	dw	200
   272                           
   273                           ;initializer for _direction
   274  016DA4  00C8               	dw	200
   275                           
   276                           ;initializer for _gForecolour
   277  016DA6  FFFF               	dw	65535
   278                           
   279                           ;initializer for _A
   280  016DA8  41                 	db	65
   281                           
   282                           ;initializer for _a
   283  016DA9  61                 	db	97
   284                           
   285                           	psect	mediumconst
   286  00FBE2                     __pmediumconst:
   287                           	opt stack 0
   288  00FBE2  00                 	db	0
   289  00FBE3                     _InitList:
   290                           	opt stack 0
   291  00FBE3  1100               	dw	4352
   292  00FBE5  0080               	dw	128
   293  00FBE7  012C               	dw	300
   294  00FBE9  B100               	dw	45312
   295  00FBEB  0002               	dw	2
   296  00FBED  0035               	dw	53
   297  00FBEF  0036               	dw	54
   298  00FBF1  B200               	dw	45568
   299  00FBF3  0002               	dw	2
   300  00FBF5  0035               	dw	53
   301  00FBF7  0036               	dw	54
   302  00FBF9  B300               	dw	45824
   303  00FBFB  0002               	dw	2
   304  00FBFD  0035               	dw	53
   305  00FBFF  0036               	dw	54
   306  00FC01  0002               	dw	2
   307  00FC03  0035               	dw	53
   308  00FC05  0036               	dw	54
   309  00FC07  B400               	dw	46080
   310  00FC09  0000               	dw	0
   311  00FC0B  C000               	dw	49152
   312  00FC0D  00A2               	dw	162
   313  00FC0F  0002               	dw	2
   314  00FC11  0084               	dw	132
   315  00FC13  C100               	dw	49408
   316  00FC15  00C5               	dw	197
   317  00FC17  C200               	dw	49664
   318  00FC19  000D               	dw	13
   319  00FC1B  0000               	dw	0
   320  00FC1D  C300               	dw	49920
   321  00FC1F  008D               	dw	141
   322  00FC21  002A               	dw	42
   323  00FC23  C400               	dw	50176
   324  00FC25  008D               	dw	141
   325  00FC27  00EE               	dw	238
   326  00FC29  C500               	dw	50432
   327  00FC2B  000A               	dw	10
   328  00FC2D  3600               	dw	13824
   329  00FC2F  00C8               	dw	200
   330  00FC31  E000               	dw	57344
   331  00FC33  0012               	dw	18
   332  00FC35  001C               	dw	28
   333  00FC37  0010               	dw	16
   334  00FC39  0018               	dw	24
   335  00FC3B  0033               	dw	51
   336  00FC3D  002C               	dw	44
   337  00FC3F  0025               	dw	37
   338  00FC41  0028               	dw	40
   339  00FC43  0028               	dw	40
   340  00FC45  0027               	dw	39
   341  00FC47  002F               	dw	47
   342  00FC49  003C               	dw	60
   343  00FC4B  0000               	dw	0
   344  00FC4D  0003               	dw	3
   345  00FC4F  0003               	dw	3
   346  00FC51  0010               	dw	16
   347  00FC53  0080               	dw	128
   348  00FC55  0078               	dw	120
   349  00FC57  E100               	dw	57600
   350  00FC59  0012               	dw	18
   351  00FC5B  001C               	dw	28
   352  00FC5D  0010               	dw	16
   353  00FC5F  0018               	dw	24
   354  00FC61  002D               	dw	45
   355  00FC63  0028               	dw	40
   356  00FC65  0023               	dw	35
   357  00FC67  0028               	dw	40
   358  00FC69  0028               	dw	40
   359  00FC6B  0026               	dw	38
   360  00FC6D  002F               	dw	47
   361  00FC6F  003B               	dw	59
   362  00FC71  0000               	dw	0
   363  00FC73  0003               	dw	3
   364  00FC75  0003               	dw	3
   365  00FC77  0010               	dw	16
   366  00FC79  3A00               	dw	14848
   367  00FC7B  0005               	dw	5
   368  00FC7D  2A00               	dw	10752
   369  00FC7F  0000               	dw	0
   370  00FC81  0002               	dw	2
   371  00FC83  0000               	dw	0
   372  00FC85  0081               	dw	129
   373  00FC87  2B00               	dw	11008
   374  00FC89  0000               	dw	0
   375  00FC8B  0003               	dw	3
   376  00FC8D  0000               	dw	0
   377  00FC8F  00A2               	dw	162
   378  00FC91  2900               	dw	10496
   379  00FC93  2C00               	dw	11264
   380  00FC95                     __end_of_InitList:
   381                           	opt stack 0
   382  00FC95                     Timer0_Init@PRESCALE:
   383                           	opt stack 0
   384  00FC95  0002               	dw	2
   385  00FC97  0004               	dw	4
   386  00FC99  0008               	dw	8
   387  00FC9B  0010               	dw	16
   388  00FC9D  0020               	dw	32
   389  00FC9F  0040               	dw	64
   390  00FCA1  0080               	dw	128
   391  00FCA3  0100               	dw	256
   392  00FCA5                     __end_ofTimer0_Init@PRESCALE:
   393                           	opt stack 0
   394  00FCA5                     PortProperty_Valid@F6830:
   395                           	opt stack 0
   396  00FCA5  00                 	db	0
   397  00FCA6  01                 	db	1
   398  00FCA7  02                 	db	2
   399  00FCA8  00                 	db	0
   400  00FCA9  01                 	db	1
   401  00FCAA  00                 	db	0
   402  00FCAB  01                 	db	1
   403  00FCAC  00                 	db	0
   404  00FCAD  02                 	db	2
   405  00FCAE  02                 	db	2
   406  00FCAF  00                 	db	0
   407  00FCB0  00                 	db	0
   408  00FCB1  03                 	db	3
   409  00FCB2  03                 	db	3
   410  00FCB3  03                 	db	3
   411  00FCB4  00                 	db	0
   412  00FCB5                     __end_ofPortProperty_Valid@F6830:
   413                           	opt stack 0
   414  00FCB5                     _dpowers:
   415                           	opt stack 0
   416  00FCB5  0001               	dw	1
   417  00FCB7  000A               	dw	10
   418  00FCB9  0064               	dw	100
   419  00FCBB  03E8               	dw	1000
   420  00FCBD  2710               	dw	10000
   421  00FCBF                     __end_of_dpowers:
   422                           	opt stack 0
   423  00FCBF                     _MASKS:
   424                           	opt stack 0
   425  00FCBF  00                 	db	0
   426  00FCC0  01                 	db	1
   427  00FCC1  03                 	db	3
   428  00FCC2  07                 	db	7
   429  00FCC3  0F                 	db	15
   430  00FCC4  1F                 	db	31
   431  00FCC5  3F                 	db	63
   432  00FCC6  7F                 	db	127
   433  00FCC7  FF                 	db	255
   434  00FCC8                     __end_of_MASKS:
   435                           	opt stack 0
   436  00FCC8                     HMI_SetButton@F7213:
   437                           	opt stack 0
   438  00FCC8  00                 	db	0
   439  00FCC9  02                 	db	2
   440  00FCCA  01                 	db	1
   441  00FCCB  03                 	db	3
   442  00FCCC                     __end_ofHMI_SetButton@F7213:
   443                           	opt stack 0
   444  00FCCC                     Timer2_Init@PRESCALE:
   445                           	opt stack 0
   446  00FCCC  01                 	db	1
   447  00FCCD  04                 	db	4
   448  00FCCE  10                 	db	16
   449  00FCCF                     __end_ofTimer2_Init@PRESCALE:
   450                           	opt stack 0
   451  00FCCF                     _Font5x7:
   452                           	opt stack 0
   453  00FCCF  00                 	db	0
   454  00FCD0  00                 	db	0
   455  00FCD1  00                 	db	0
   456  00FCD2  00                 	db	0
   457  00FCD3  00                 	db	0
   458  00FCD4  00                 	db	0
   459  00FCD5  00                 	db	0
   460  00FCD6  5F                 	db	95
   461  00FCD7  00                 	db	0
   462  00FCD8  00                 	db	0
   463  00FCD9  00                 	db	0
   464  00FCDA  07                 	db	7
   465  00FCDB  00                 	db	0
   466  00FCDC  07                 	db	7
   467  00FCDD  00                 	db	0
   468  00FCDE  14                 	db	20
   469  00FCDF  7F                 	db	127
   470  00FCE0  14                 	db	20
   471  00FCE1  7F                 	db	127
   472  00FCE2  14                 	db	20
   473  00FCE3  24                 	db	36
   474  00FCE4  2A                 	db	42
   475  00FCE5  7F                 	db	127
   476  00FCE6  2A                 	db	42
   477  00FCE7  12                 	db	18
   478  00FCE8  23                 	db	35
   479  00FCE9  13                 	db	19
   480  00FCEA  08                 	db	8
   481  00FCEB  64                 	db	100
   482  00FCEC  62                 	db	98
   483  00FCED  36                 	db	54
   484  00FCEE  49                 	db	73
   485  00FCEF  55                 	db	85
   486  00FCF0  22                 	db	34
   487  00FCF1  50                 	db	80
   488  00FCF2  00                 	db	0
   489  00FCF3  05                 	db	5
   490  00FCF4  03                 	db	3
   491  00FCF5  00                 	db	0
   492  00FCF6  00                 	db	0
   493  00FCF7  00                 	db	0
   494  00FCF8  1C                 	db	28
   495  00FCF9  22                 	db	34
   496  00FCFA  41                 	db	65
   497  00FCFB  00                 	db	0
   498  00FCFC  00                 	db	0
   499  00FCFD  41                 	db	65
   500  00FCFE  22                 	db	34
   501  00FCFF  1C                 	db	28
   502  00FD00  00                 	db	0
   503  00FD01  08                 	db	8
   504  00FD02  2A                 	db	42
   505  00FD03  1C                 	db	28
   506  00FD04  2A                 	db	42
   507  00FD05  08                 	db	8
   508  00FD06  08                 	db	8
   509  00FD07  08                 	db	8
   510  00FD08  3E                 	db	62
   511  00FD09  08                 	db	8
   512  00FD0A  08                 	db	8
   513  00FD0B  00                 	db	0
   514  00FD0C  50                 	db	80
   515  00FD0D  30                 	db	48
   516  00FD0E  00                 	db	0
   517  00FD0F  00                 	db	0
   518  00FD10  08                 	db	8
   519  00FD11  08                 	db	8
   520  00FD12  08                 	db	8
   521  00FD13  08                 	db	8
   522  00FD14  08                 	db	8
   523  00FD15  00                 	db	0
   524  00FD16  60                 	db	96
   525  00FD17  60                 	db	96
   526  00FD18  00                 	db	0
   527  00FD19  00                 	db	0
   528  00FD1A  20                 	db	32
   529  00FD1B  10                 	db	16
   530  00FD1C  08                 	db	8
   531  00FD1D  04                 	db	4
   532  00FD1E  02                 	db	2
   533  00FD1F  3E                 	db	62
   534  00FD20  51                 	db	81
   535  00FD21  49                 	db	73
   536  00FD22  45                 	db	69
   537  00FD23  3E                 	db	62
   538  00FD24  00                 	db	0
   539  00FD25  42                 	db	66
   540  00FD26  7F                 	db	127
   541  00FD27  40                 	db	64
   542  00FD28  00                 	db	0
   543  00FD29  42                 	db	66
   544  00FD2A  61                 	db	97
   545  00FD2B  51                 	db	81
   546  00FD2C  49                 	db	73
   547  00FD2D  46                 	db	70
   548  00FD2E  21                 	db	33
   549  00FD2F  41                 	db	65
   550  00FD30  45                 	db	69
   551  00FD31  4B                 	db	75
   552  00FD32  31                 	db	49
   553  00FD33  18                 	db	24
   554  00FD34  14                 	db	20
   555  00FD35  12                 	db	18
   556  00FD36  7F                 	db	127
   557  00FD37  10                 	db	16
   558  00FD38  27                 	db	39
   559  00FD39  45                 	db	69
   560  00FD3A  45                 	db	69
   561  00FD3B  45                 	db	69
   562  00FD3C  39                 	db	57
   563  00FD3D  3C                 	db	60
   564  00FD3E  4A                 	db	74
   565  00FD3F  49                 	db	73
   566  00FD40  49                 	db	73
   567  00FD41  30                 	db	48
   568  00FD42  01                 	db	1
   569  00FD43  71                 	db	113
   570  00FD44  09                 	db	9
   571  00FD45  05                 	db	5
   572  00FD46  03                 	db	3
   573  00FD47  36                 	db	54
   574  00FD48  49                 	db	73
   575  00FD49  49                 	db	73
   576  00FD4A  49                 	db	73
   577  00FD4B  36                 	db	54
   578  00FD4C  06                 	db	6
   579  00FD4D  49                 	db	73
   580  00FD4E  49                 	db	73
   581  00FD4F  29                 	db	41
   582  00FD50  1E                 	db	30
   583  00FD51  00                 	db	0
   584  00FD52  36                 	db	54
   585  00FD53  36                 	db	54
   586  00FD54  00                 	db	0
   587  00FD55  00                 	db	0
   588  00FD56  00                 	db	0
   589  00FD57  56                 	db	86
   590  00FD58  36                 	db	54
   591  00FD59  00                 	db	0
   592  00FD5A  00                 	db	0
   593  00FD5B  00                 	db	0
   594  00FD5C  08                 	db	8
   595  00FD5D  14                 	db	20
   596  00FD5E  22                 	db	34
   597  00FD5F  41                 	db	65
   598  00FD60  14                 	db	20
   599  00FD61  14                 	db	20
   600  00FD62  14                 	db	20
   601  00FD63  14                 	db	20
   602  00FD64  14                 	db	20
   603  00FD65  41                 	db	65
   604  00FD66  22                 	db	34
   605  00FD67  14                 	db	20
   606  00FD68  08                 	db	8
   607  00FD69  00                 	db	0
   608  00FD6A  02                 	db	2
   609  00FD6B  01                 	db	1
   610  00FD6C  51                 	db	81
   611  00FD6D  09                 	db	9
   612  00FD6E  06                 	db	6
   613  00FD6F  32                 	db	50
   614  00FD70  49                 	db	73
   615  00FD71  79                 	db	121
   616  00FD72  41                 	db	65
   617  00FD73  3E                 	db	62
   618  00FD74  7E                 	db	126
   619  00FD75  11                 	db	17
   620  00FD76  11                 	db	17
   621  00FD77  11                 	db	17
   622  00FD78  7E                 	db	126
   623  00FD79  7F                 	db	127
   624  00FD7A  49                 	db	73
   625  00FD7B  49                 	db	73
   626  00FD7C  49                 	db	73
   627  00FD7D  36                 	db	54
   628  00FD7E  3E                 	db	62
   629  00FD7F  41                 	db	65
   630  00FD80  41                 	db	65
   631  00FD81  41                 	db	65
   632  00FD82  22                 	db	34
   633  00FD83  7F                 	db	127
   634  00FD84  41                 	db	65
   635  00FD85  41                 	db	65
   636  00FD86  22                 	db	34
   637  00FD87  1C                 	db	28
   638  00FD88  7F                 	db	127
   639  00FD89  49                 	db	73
   640  00FD8A  49                 	db	73
   641  00FD8B  49                 	db	73
   642  00FD8C  41                 	db	65
   643  00FD8D  7F                 	db	127
   644  00FD8E  09                 	db	9
   645  00FD8F  09                 	db	9
   646  00FD90  01                 	db	1
   647  00FD91  01                 	db	1
   648  00FD92  3E                 	db	62
   649  00FD93  41                 	db	65
   650  00FD94  41                 	db	65
   651  00FD95  51                 	db	81
   652  00FD96  32                 	db	50
   653  00FD97  7F                 	db	127
   654  00FD98  08                 	db	8
   655  00FD99  08                 	db	8
   656  00FD9A  08                 	db	8
   657  00FD9B  7F                 	db	127
   658  00FD9C  00                 	db	0
   659  00FD9D  41                 	db	65
   660  00FD9E  7F                 	db	127
   661  00FD9F  41                 	db	65
   662  00FDA0  00                 	db	0
   663  00FDA1  20                 	db	32
   664  00FDA2  40                 	db	64
   665  00FDA3  41                 	db	65
   666  00FDA4  3F                 	db	63
   667  00FDA5  01                 	db	1
   668  00FDA6  7F                 	db	127
   669  00FDA7  08                 	db	8
   670  00FDA8  14                 	db	20
   671  00FDA9  22                 	db	34
   672  00FDAA  41                 	db	65
   673  00FDAB  7F                 	db	127
   674  00FDAC  40                 	db	64
   675  00FDAD  40                 	db	64
   676  00FDAE  40                 	db	64
   677  00FDAF  40                 	db	64
   678  00FDB0  7F                 	db	127
   679  00FDB1  02                 	db	2
   680  00FDB2  04                 	db	4
   681  00FDB3  02                 	db	2
   682  00FDB4  7F                 	db	127
   683  00FDB5  7F                 	db	127
   684  00FDB6  04                 	db	4
   685  00FDB7  08                 	db	8
   686  00FDB8  10                 	db	16
   687  00FDB9  7F                 	db	127
   688  00FDBA  3E                 	db	62
   689  00FDBB  41                 	db	65
   690  00FDBC  41                 	db	65
   691  00FDBD  41                 	db	65
   692  00FDBE  3E                 	db	62
   693  00FDBF  7F                 	db	127
   694  00FDC0  09                 	db	9
   695  00FDC1  09                 	db	9
   696  00FDC2  09                 	db	9
   697  00FDC3  06                 	db	6
   698  00FDC4  3E                 	db	62
   699  00FDC5  41                 	db	65
   700  00FDC6  51                 	db	81
   701  00FDC7  21                 	db	33
   702  00FDC8  5E                 	db	94
   703  00FDC9  7F                 	db	127
   704  00FDCA  09                 	db	9
   705  00FDCB  19                 	db	25
   706  00FDCC  29                 	db	41
   707  00FDCD  46                 	db	70
   708  00FDCE  46                 	db	70
   709  00FDCF  49                 	db	73
   710  00FDD0  49                 	db	73
   711  00FDD1  49                 	db	73
   712  00FDD2  31                 	db	49
   713  00FDD3  01                 	db	1
   714  00FDD4  01                 	db	1
   715  00FDD5  7F                 	db	127
   716  00FDD6  01                 	db	1
   717  00FDD7  01                 	db	1
   718  00FDD8  3F                 	db	63
   719  00FDD9  40                 	db	64
   720  00FDDA  40                 	db	64
   721  00FDDB  40                 	db	64
   722  00FDDC  3F                 	db	63
   723  00FDDD  1F                 	db	31
   724  00FDDE  20                 	db	32
   725  00FDDF  40                 	db	64
   726  00FDE0  20                 	db	32
   727  00FDE1  1F                 	db	31
   728  00FDE2  7F                 	db	127
   729  00FDE3  20                 	db	32
   730  00FDE4  18                 	db	24
   731  00FDE5  20                 	db	32
   732  00FDE6  7F                 	db	127
   733  00FDE7  63                 	db	99
   734  00FDE8  14                 	db	20
   735  00FDE9  08                 	db	8
   736  00FDEA  14                 	db	20
   737  00FDEB  63                 	db	99
   738  00FDEC  03                 	db	3
   739  00FDED  04                 	db	4
   740  00FDEE  78                 	db	120
   741  00FDEF  04                 	db	4
   742  00FDF0  03                 	db	3
   743  00FDF1  61                 	db	97
   744  00FDF2  51                 	db	81
   745  00FDF3  49                 	db	73
   746  00FDF4  45                 	db	69
   747  00FDF5  43                 	db	67
   748  00FDF6  00                 	db	0
   749  00FDF7  00                 	db	0
   750  00FDF8  7F                 	db	127
   751  00FDF9  41                 	db	65
   752  00FDFA  41                 	db	65
   753  00FDFB  02                 	db	2
   754  00FDFC  04                 	db	4
   755  00FDFD  08                 	db	8
   756  00FDFE  10                 	db	16
   757  00FDFF  20                 	db	32
   758  00FE00  41                 	db	65
   759  00FE01  41                 	db	65
   760  00FE02  7F                 	db	127
   761  00FE03  00                 	db	0
   762  00FE04  00                 	db	0
   763  00FE05  04                 	db	4
   764  00FE06  02                 	db	2
   765  00FE07  01                 	db	1
   766  00FE08  02                 	db	2
   767  00FE09  04                 	db	4
   768  00FE0A  40                 	db	64
   769  00FE0B  40                 	db	64
   770  00FE0C  40                 	db	64
   771  00FE0D  40                 	db	64
   772  00FE0E  40                 	db	64
   773  00FE0F  00                 	db	0
   774  00FE10  01                 	db	1
   775  00FE11  02                 	db	2
   776  00FE12  04                 	db	4
   777  00FE13  00                 	db	0
   778  00FE14  20                 	db	32
   779  00FE15  54                 	db	84
   780  00FE16  54                 	db	84
   781  00FE17  54                 	db	84
   782  00FE18  78                 	db	120
   783  00FE19  7F                 	db	127
   784  00FE1A  48                 	db	72
   785  00FE1B  44                 	db	68
   786  00FE1C  44                 	db	68
   787  00FE1D  38                 	db	56
   788  00FE1E  38                 	db	56
   789  00FE1F  44                 	db	68
   790  00FE20  44                 	db	68
   791  00FE21  44                 	db	68
   792  00FE22  20                 	db	32
   793  00FE23  38                 	db	56
   794  00FE24  44                 	db	68
   795  00FE25  44                 	db	68
   796  00FE26  48                 	db	72
   797  00FE27  7F                 	db	127
   798  00FE28  38                 	db	56
   799  00FE29  54                 	db	84
   800  00FE2A  54                 	db	84
   801  00FE2B  54                 	db	84
   802  00FE2C  18                 	db	24
   803  00FE2D  08                 	db	8
   804  00FE2E  7E                 	db	126
   805  00FE2F  09                 	db	9
   806  00FE30  01                 	db	1
   807  00FE31  02                 	db	2
   808  00FE32  08                 	db	8
   809  00FE33  14                 	db	20
   810  00FE34  54                 	db	84
   811  00FE35  54                 	db	84
   812  00FE36  3C                 	db	60
   813  00FE37  7F                 	db	127
   814  00FE38  08                 	db	8
   815  00FE39  04                 	db	4
   816  00FE3A  04                 	db	4
   817  00FE3B  78                 	db	120
   818  00FE3C  00                 	db	0
   819  00FE3D  44                 	db	68
   820  00FE3E  7D                 	db	125
   821  00FE3F  40                 	db	64
   822  00FE40  00                 	db	0
   823  00FE41  20                 	db	32
   824  00FE42  40                 	db	64
   825  00FE43  44                 	db	68
   826  00FE44  3D                 	db	61
   827  00FE45  00                 	db	0
   828  00FE46  00                 	db	0
   829  00FE47  7F                 	db	127
   830  00FE48  10                 	db	16
   831  00FE49  28                 	db	40
   832  00FE4A  44                 	db	68
   833  00FE4B  00                 	db	0
   834  00FE4C  41                 	db	65
   835  00FE4D  7F                 	db	127
   836  00FE4E  40                 	db	64
   837  00FE4F  00                 	db	0
   838  00FE50  7C                 	db	124
   839  00FE51  04                 	db	4
   840  00FE52  18                 	db	24
   841  00FE53  04                 	db	4
   842  00FE54  78                 	db	120
   843  00FE55  7C                 	db	124
   844  00FE56  08                 	db	8
   845  00FE57  04                 	db	4
   846  00FE58  04                 	db	4
   847  00FE59  78                 	db	120
   848  00FE5A  38                 	db	56
   849  00FE5B  44                 	db	68
   850  00FE5C  44                 	db	68
   851  00FE5D  44                 	db	68
   852  00FE5E  38                 	db	56
   853  00FE5F  7C                 	db	124
   854  00FE60  14                 	db	20
   855  00FE61  14                 	db	20
   856  00FE62  14                 	db	20
   857  00FE63  08                 	db	8
   858  00FE64  08                 	db	8
   859  00FE65  14                 	db	20
   860  00FE66  14                 	db	20
   861  00FE67  18                 	db	24
   862  00FE68  7C                 	db	124
   863  00FE69  7C                 	db	124
   864  00FE6A  08                 	db	8
   865  00FE6B  04                 	db	4
   866  00FE6C  04                 	db	4
   867  00FE6D  08                 	db	8
   868  00FE6E  48                 	db	72
   869  00FE6F  54                 	db	84
   870  00FE70  54                 	db	84
   871  00FE71  54                 	db	84
   872  00FE72  20                 	db	32
   873  00FE73  04                 	db	4
   874  00FE74  3F                 	db	63
   875  00FE75  44                 	db	68
   876  00FE76  40                 	db	64
   877  00FE77  20                 	db	32
   878  00FE78  3C                 	db	60
   879  00FE79  40                 	db	64
   880  00FE7A  40                 	db	64
   881  00FE7B  20                 	db	32
   882  00FE7C  7C                 	db	124
   883  00FE7D  1C                 	db	28
   884  00FE7E  20                 	db	32
   885  00FE7F  40                 	db	64
   886  00FE80  20                 	db	32
   887  00FE81  1C                 	db	28
   888  00FE82  3C                 	db	60
   889  00FE83  40                 	db	64
   890  00FE84  30                 	db	48
   891  00FE85  40                 	db	64
   892  00FE86  3C                 	db	60
   893  00FE87  44                 	db	68
   894  00FE88  28                 	db	40
   895  00FE89  10                 	db	16
   896  00FE8A  28                 	db	40
   897  00FE8B  44                 	db	68
   898  00FE8C  0C                 	db	12
   899  00FE8D  50                 	db	80
   900  00FE8E  50                 	db	80
   901  00FE8F  50                 	db	80
   902  00FE90  3C                 	db	60
   903  00FE91  44                 	db	68
   904  00FE92  64                 	db	100
   905  00FE93  54                 	db	84
   906  00FE94  4C                 	db	76
   907  00FE95  44                 	db	68
   908  00FE96  00                 	db	0
   909  00FE97  08                 	db	8
   910  00FE98  36                 	db	54
   911  00FE99  41                 	db	65
   912  00FE9A  00                 	db	0
   913  00FE9B  00                 	db	0
   914  00FE9C  00                 	db	0
   915  00FE9D  7F                 	db	127
   916  00FE9E  00                 	db	0
   917  00FE9F  00                 	db	0
   918  00FEA0  00                 	db	0
   919  00FEA1  41                 	db	65
   920  00FEA2  36                 	db	54
   921  00FEA3  08                 	db	8
   922  00FEA4  00                 	db	0
   923  00FEA5  08                 	db	8
   924  00FEA6  08                 	db	8
   925  00FEA7  2A                 	db	42
   926  00FEA8  1C                 	db	28
   927  00FEA9  08                 	db	8
   928  00FEAA  08                 	db	8
   929  00FEAB  1C                 	db	28
   930  00FEAC  2A                 	db	42
   931  00FEAD  08                 	db	8
   932  00FEAE  08                 	db	8
   933  00FEAF                     __end_of_Font5x7:
   934                           	opt stack 0
   935  00FEAF                     exp@coeff:
   936                           	opt stack 0
   937  00FEAF  0000               	dw	0
   938  00FEB1  3F80               	dw	16256
   939  00FEB3  7218               	dw	29208
   940  00FEB5  3F31               	dw	16177
   941  00FEB7  FDF0               	dw	65008
   942  00FEB9  3E75               	dw	15989
   943  00FEBB  5847               	dw	22599
   944  00FEBD  3D63               	dw	15715
   945  00FEBF  9558               	dw	38232
   946  00FEC1  3C1D               	dw	15389
   947  00FEC3  C482               	dw	50306
   948  00FEC5  3AAE               	dw	15022
   949  00FEC7  78A8               	dw	30888
   950  00FEC9  3921               	dw	14625
   951  00FECB  93EF               	dw	37871
   952  00FECD  3780               	dw	14208
   953  00FECF  92A0               	dw	37536
   954  00FED1  35A7               	dw	13735
   955  00FED3  5646               	dw	22086
   956  00FED5  3415               	dw	13333
   957  00FED7                     __end_ofexp@coeff:
   958                           	opt stack 0
   959  00FED7                     log@coeff:
   960                           	opt stack 0
   961  00FED7  0000               	dw	0
   962  00FED9  0000               	dw	0
   963  00FEDB  FFC4               	dw	65476
   964  00FEDD  3F7F               	dw	16255
   965  00FEDF  EF80               	dw	61312
   966  00FEE1  BEFF               	dw	48895
   967  00FEE3  E190               	dw	57744
   968  00FEE5  3EA9               	dw	16041
   969  00FEE7  82EC               	dw	33516
   970  00FEE9  BE76               	dw	48758
   971  00FEEB  AD82               	dw	44418
   972  00FEED  3E2B               	dw	15915
   973  00FEEF  3C0E               	dw	15374
   974  00FEF1  BDC3               	dw	48579
   975  00FEF3  D187               	dw	53639
   976  00FEF5  3D13               	dw	15635
   977  00FEF7  7841               	dw	30785
   978  00FEF9  BBD3               	dw	48083
   979  00FEFB                     __end_oflog@coeff:
   980                           	opt stack 0
   981  00FEFB                     _PortG_Property:
   982                           	opt stack 0
   983  00FEFB  FC00               	dw	64512
   984  00FEFD                     __end_of_PortG_Property:
   985                           	opt stack 0
   986  00FEFD                     _PortF_Property:
   987                           	opt stack 0
   988  00FEFD  0FFF               	dw	4095
   989  00FEFF                     __end_of_PortF_Property:
   990                           	opt stack 0
   991  00FEFF                     _PortE_Property:
   992                           	opt stack 0
   993  00FEFF  0000               	dw	0
   994  00FF01                     __end_of_PortE_Property:
   995                           	opt stack 0
   996  00FF01                     _PortD_Property:
   997                           	opt stack 0
   998  00FF01  FFFF               	dw	65535
   999  00FF03                     __end_of_PortD_Property:
  1000                           	opt stack 0
  1001  00FF03                     _PortC_Property:
  1002                           	opt stack 0
  1003  00FF03  FFF0               	dw	65520
  1004  00FF05                     __end_of_PortC_Property:
  1005                           	opt stack 0
  1006  00FF05                     _PortB_Property:
  1007                           	opt stack 0
  1008  00FF05  FF00               	dw	65280
  1009  00FF07                     __end_of_PortB_Property:
  1010                           	opt stack 0
  1011  00FF07                     _PortA_Property:
  1012                           	opt stack 0
  1013  00FF07  00FF               	dw	255
  1014  00FF09                     __end_of_PortA_Property:
  1015                           	opt stack 0
  1016  0000                     _TMR0	set	4054
  1017  0000                     _PR2	set	4043
  1018  0000                     _T2CONbits	set	4042
  1019  0000                     _T0CONbits	set	4053
  1020  0000                     _RCONbits	set	4048
  1021  0000                     _OSCTUNEbits	set	3995
  1022  0000                     _PIR3	set	4004
  1023  0000                     _PIR2	set	4001
  1024  0000                     _PIR1	set	3998
  1025  0000                     _INTCONbits	set	4082
  1026  0000                     _SSP2CON2bits	set	3947
  1027  0000                     _SSP1CON2bits	set	4037
  1028  0000                     _SSP1ADD	set	4040
  1029  0000                     _ANCON0	set	4033
  1030  0000                     _ADRESL	set	4035
  1031  0000                     _ADRESH	set	4036
  1032  0000                     _ADCON1bits	set	4033
  1033  0000                     _ADCON0bits	set	4034
  1034  0000                     _SSP2CON1bits	set	3948
  1035  0000                     _SSP1CON1bits	set	4038
  1036  0000                     _SSP2STATbits	set	3949
  1037  0000                     _SSP1STATbits	set	4039
  1038  0000                     _PIE3bits	set	4003
  1039  0000                     _PIE1bits	set	3997
  1040  0000                     _PIR3bits	set	4004
  1041  0000                     _PIR1bits	set	3998
  1042  0000                     _IPR3bits	set	4005
  1043  0000                     _IPR1bits	set	3999
  1044  0000                     _PORTFbits	set	3973
  1045  0000                     _SSP2CON2	set	3947
  1046  0000                     _SSP1CON2	set	4037
  1047  0000                     _SSP2BUF	set	3951
  1048  0000                     _SSP2CON1	set	3948
  1049  0000                     _SSP2STAT	set	3949
  1050  0000                     _SSP1BUF	set	4041
  1051  0000                     _SSP1CON1	set	4038
  1052  0000                     _SSP1STAT	set	4039
  1053  0000                     _LATG	set	3983
  1054  0000                     _LATF	set	3982
  1055  0000                     _LATE	set	3981
  1056  0000                     _LATD	set	3980
  1057  0000                     _LATC	set	3979
  1058  0000                     _LATB	set	3978
  1059  0000                     _LATA	set	3977
  1060  0000                     _TRISG	set	3992
  1061  0000                     _TRISF	set	3991
  1062  0000                     _TRISE	set	3990
  1063  0000                     _TRISD	set	3989
  1064  0000                     _TRISC	set	3988
  1065  0000                     _TRISB	set	3987
  1066  0000                     _TRISA	set	3986
  1067  0000                     _PORTG	set	3974
  1068  0000                     _PORTF	set	3973
  1069  0000                     _PORTE	set	3972
  1070  0000                     _PORTD	set	3971
  1071  0000                     _PORTC	set	3970
  1072  0000                     _PORTB	set	3969
  1073  0000                     _PORTA	set	3968
  1074  00FF09                     STR_2:
  1075  00FF09  43                 	db	67	;'C'
  1076  00FF0A  75                 	db	117	;'u'
  1077  00FF0B  72                 	db	114	;'r'
  1078  00FF0C  72                 	db	114	;'r'
  1079  00FF0D  65                 	db	101	;'e'
  1080  00FF0E  6E                 	db	110	;'n'
  1081  00FF0F  74                 	db	116	;'t'
  1082  00FF10  20                 	db	32
  1083  00FF11  4D                 	db	77	;'M'
  1084  00FF12  6F                 	db	111	;'o'
  1085  00FF13  64                 	db	100	;'d'
  1086  00FF14  65                 	db	101	;'e'
  1087  00FF15  3A                 	db	58	;':'
  1088  00FF16  0A                 	db	10
  1089  00FF17  20                 	db	32
  1090  00FF18  43                 	db	67	;'C'
  1091  00FF19  6F                 	db	111	;'o'
  1092  00FF1A  6E                 	db	110	;'n'
  1093  00FF1B  74                 	db	116	;'t'
  1094  00FF1C  69                 	db	105	;'i'
  1095  00FF1D  6E                 	db	110	;'n'
  1096  00FF1E  75                 	db	117	;'u'
  1097  00FF1F  6F                 	db	111	;'o'
  1098  00FF20  75                 	db	117	;'u'
  1099  00FF21  73                 	db	115	;'s'
  1100  00FF22  20                 	db	32
  1101  00FF23  4D                 	db	77	;'M'
  1102  00FF24  6F                 	db	111	;'o'
  1103  00FF25  64                 	db	100	;'d'
  1104  00FF26  65                 	db	101	;'e'
  1105  00FF27  0A                 	db	10
  1106  00FF28  00                 	db	0
  1107  00FF29                     STR_10:
  1108  00FF29  43                 	db	67	;'C'
  1109  00FF2A  75                 	db	117	;'u'
  1110  00FF2B  72                 	db	114	;'r'
  1111  00FF2C  72                 	db	114	;'r'
  1112  00FF2D  65                 	db	101	;'e'
  1113  00FF2E  6E                 	db	110	;'n'
  1114  00FF2F  74                 	db	116	;'t'
  1115  00FF30  20                 	db	32
  1116  00FF31  4D                 	db	77	;'M'
  1117  00FF32  6F                 	db	111	;'o'
  1118  00FF33  64                 	db	100	;'d'
  1119  00FF34  65                 	db	101	;'e'
  1120  00FF35  3A                 	db	58	;':'
  1121  00FF36  0A                 	db	10
  1122  00FF37  20                 	db	32
  1123  00FF38  50                 	db	80	;'P'
  1124  00FF39  6F                 	db	111	;'o'
  1125  00FF3A  73                 	db	115	;'s'
  1126  00FF3B  69                 	db	105	;'i'
  1127  00FF3C  74                 	db	116	;'t'
  1128  00FF3D  69                 	db	105	;'i'
  1129  00FF3E  6F                 	db	111	;'o'
  1130  00FF3F  6E                 	db	110	;'n'
  1131  00FF40  20                 	db	32
  1132  00FF41  4D                 	db	77	;'M'
  1133  00FF42  6F                 	db	111	;'o'
  1134  00FF43  64                 	db	100	;'d'
  1135  00FF44  65                 	db	101	;'e'
  1136  00FF45  0A                 	db	10
  1137  00FF46  0A                 	db	10
  1138  00FF47  00                 	db	0
  1139  00FF48                     STR_12:
  1140  00FF48  43                 	db	67	;'C'
  1141  00FF49  75                 	db	117	;'u'
  1142  00FF4A  72                 	db	114	;'r'
  1143  00FF4B  72                 	db	114	;'r'
  1144  00FF4C  65                 	db	101	;'e'
  1145  00FF4D  6E                 	db	110	;'n'
  1146  00FF4E  74                 	db	116	;'t'
  1147  00FF4F  20                 	db	32
  1148  00FF50  4D                 	db	77	;'M'
  1149  00FF51  6F                 	db	111	;'o'
  1150  00FF52  64                 	db	100	;'d'
  1151  00FF53  65                 	db	101	;'e'
  1152  00FF54  3A                 	db	58	;':'
  1153  00FF55  0A                 	db	10
  1154  00FF56  20                 	db	32
  1155  00FF57  55                 	db	85	;'U'
  1156  00FF58  6E                 	db	110	;'n'
  1157  00FF59  64                 	db	100	;'d'
  1158  00FF5A  65                 	db	101	;'e'
  1159  00FF5B  66                 	db	102	;'f'
  1160  00FF5C  69                 	db	105	;'i'
  1161  00FF5D  6E                 	db	110	;'n'
  1162  00FF5E  65                 	db	101	;'e'
  1163  00FF5F  64                 	db	100	;'d'
  1164  00FF60  0A                 	db	10
  1165  00FF61  00                 	db	0
  1166  00FF62                     STR_7:
  1167  00FF62  43                 	db	67	;'C'
  1168  00FF63  75                 	db	117	;'u'
  1169  00FF64  72                 	db	114	;'r'
  1170  00FF65  72                 	db	114	;'r'
  1171  00FF66  65                 	db	101	;'e'
  1172  00FF67  6E                 	db	110	;'n'
  1173  00FF68  74                 	db	116	;'t'
  1174  00FF69  20                 	db	32
  1175  00FF6A  4D                 	db	77	;'M'
  1176  00FF6B  6F                 	db	111	;'o'
  1177  00FF6C  64                 	db	100	;'d'
  1178  00FF6D  65                 	db	101	;'e'
  1179  00FF6E  3A                 	db	58	;':'
  1180  00FF6F  0A                 	db	10
  1181  00FF70  20                 	db	32
  1182  00FF71  53                 	db	83	;'S'
  1183  00FF72  74                 	db	116	;'t'
  1184  00FF73  65                 	db	101	;'e'
  1185  00FF74  70                 	db	112	;'p'
  1186  00FF75  20                 	db	32
  1187  00FF76  4D                 	db	77	;'M'
  1188  00FF77  6F                 	db	111	;'o'
  1189  00FF78  64                 	db	100	;'d'
  1190  00FF79  65                 	db	101	;'e'
  1191  00FF7A  0A                 	db	10
  1192  00FF7B  00                 	db	0
  1193  00FF7C                     STR_13:
  1194  00FF7C  20                 	db	32
  1195  00FF7D  20                 	db	32
  1196  00FF7E  20                 	db	32
  1197  00FF7F  20                 	db	32
  1198  00FF80  20                 	db	32
  1199  00FF81  20                 	db	32
  1200  00FF82  20                 	db	32
  1201  00FF83  20                 	db	32
  1202  00FF84  20                 	db	32
  1203  00FF85  20                 	db	32
  1204  00FF86  20                 	db	32
  1205  00FF87  20                 	db	32
  1206  00FF88  20                 	db	32
  1207  00FF89  20                 	db	32
  1208  00FF8A  20                 	db	32
  1209  00FF8B  20                 	db	32
  1210  00FF8C  20                 	db	32
  1211  00FF8D  20                 	db	32
  1212  00FF8E  20                 	db	32
  1213  00FF8F  20                 	db	32
  1214  00FF90  20                 	db	32
  1215  00FF91  20                 	db	32
  1216  00FF92  0A                 	db	10
  1217  00FF93  00                 	db	0
  1218  00FF94                     STR_1:
  1219  00FF94  4A                 	db	74	;'J'
  1220  00FF95  61                 	db	97	;'a'
  1221  00FF96  6D                 	db	109	;'m'
  1222  00FF97  69                 	db	105	;'i'
  1223  00FF98  6E                 	db	110	;'n'
  1224  00FF99  20                 	db	32
  1225  00FF9A  45                 	db	69	;'E'
  1226  00FF9B  61                 	db	97	;'a'
  1227  00FF9C  72                 	db	114	;'r'
  1228  00FF9D  6C                 	db	108	;'l'
  1229  00FF9E  79                 	db	121	;'y'
  1230  00FF9F  20                 	db	32
  1231  00FFA0  39                 	db	57	;'9'
  1232  00FFA1  39                 	db	57	;'9'
  1233  00FFA2  31                 	db	49	;'1'
  1234  00FFA3  33                 	db	51	;'3'
  1235  00FFA4  33                 	db	51	;'3'
  1236  00FFA5  33                 	db	51	;'3'
  1237  00FFA6  39                 	db	57	;'9'
  1238  00FFA7  31                 	db	49	;'1'
  1239  00FFA8  0A                 	db	10
  1240  00FFA9  0A                 	db	10
  1241  00FFAA  00                 	db	0
  1242  00FFAB                     STR_9:
  1243  00FFAB  52                 	db	82	;'R'
  1244  00FFAC  65                 	db	101	;'e'
  1245  00FFAD  6D                 	db	109	;'m'
  1246  00FFAE  61                 	db	97	;'a'
  1247  00FFAF  69                 	db	105	;'i'
  1248  00FFB0  6E                 	db	110	;'n'
  1249  00FFB1  69                 	db	105	;'i'
  1250  00FFB2  6E                 	db	110	;'n'
  1251  00FFB3  67                 	db	103	;'g'
  1252  00FFB4  20                 	db	32
  1253  00FFB5  53                 	db	83	;'S'
  1254  00FFB6  74                 	db	116	;'t'
  1255  00FFB7  65                 	db	101	;'e'
  1256  00FFB8  70                 	db	112	;'p'
  1257  00FFB9  73                 	db	115	;'s'
  1258  00FFBA  3A                 	db	58	;':'
  1259  00FFBB  20                 	db	32
  1260  00FFBC  25                 	db	37
  1261  00FFBD  64                 	db	100	;'d'
  1262  00FFBE  0A                 	db	10
  1263  00FFBF  0A                 	db	10
  1264  00FFC0  00                 	db	0
  1265  00FFC1                     STR_11:
  1266  00FFC1  54                 	db	84	;'T'
  1267  00FFC2  61                 	db	97	;'a'
  1268  00FFC3  72                 	db	114	;'r'
  1269  00FFC4  67                 	db	103	;'g'
  1270  00FFC5  65                 	db	101	;'e'
  1271  00FFC6  74                 	db	116	;'t'
  1272  00FFC7  20                 	db	32
  1273  00FFC8  41                 	db	65	;'A'
  1274  00FFC9  6E                 	db	110	;'n'
  1275  00FFCA  67                 	db	103	;'g'
  1276  00FFCB  6C                 	db	108	;'l'
  1277  00FFCC  65                 	db	101	;'e'
  1278  00FFCD  3A                 	db	58	;':'
  1279  00FFCE  0A                 	db	10
  1280  00FFCF  20                 	db	32
  1281  00FFD0  25                 	db	37
  1282  00FFD1  64                 	db	100	;'d'
  1283  00FFD2  20                 	db	32
  1284  00FFD3  0A                 	db	10
  1285  00FFD4  00                 	db	0
  1286  00FFD5                     STR_3:
  1287  00FFD5  44                 	db	68	;'D'
  1288  00FFD6  69                 	db	105	;'i'
  1289  00FFD7  72                 	db	114	;'r'
  1290  00FFD8  65                 	db	101	;'e'
  1291  00FFD9  63                 	db	99	;'c'
  1292  00FFDA  74                 	db	116	;'t'
  1293  00FFDB  69                 	db	105	;'i'
  1294  00FFDC  6F                 	db	111	;'o'
  1295  00FFDD  6E                 	db	110	;'n'
  1296  00FFDE  3A                 	db	58	;':'
  1297  00FFDF  20                 	db	32
  1298  00FFE0  00                 	db	0
  1299  00FFE1                     STR_6:
  1300  00FFE1  53                 	db	83	;'S'
  1301  00FFE2  70                 	db	112	;'p'
  1302  00FFE3  65                 	db	101	;'e'
  1303  00FFE4  65                 	db	101	;'e'
  1304  00FFE5  64                 	db	100	;'d'
  1305  00FFE6  3A                 	db	58	;':'
  1306  00FFE7  20                 	db	32
  1307  00FFE8  25                 	db	37
  1308  00FFE9  64                 	db	100	;'d'
  1309  00FFEA  0A                 	db	10
  1310  00FFEB  00                 	db	0
  1311  00FFEC                     STR_8:
  1312  00FFEC  53                 	db	83	;'S'
  1313  00FFED  74                 	db	116	;'t'
  1314  00FFEE  65                 	db	101	;'e'
  1315  00FFEF  70                 	db	112	;'p'
  1316  00FFF0  73                 	db	115	;'s'
  1317  00FFF1  3A                 	db	58	;':'
  1318  00FFF2  20                 	db	32
  1319  00FFF3  25                 	db	37
  1320  00FFF4  64                 	db	100	;'d'
  1321  00FFF5  0A                 	db	10
  1322  00FFF6  00                 	db	0
  1323  00FFF7                     STR_5:
  1324  00FFF7  43                 	db	67	;'C'
  1325  00FFF8  43                 	db	67	;'C'
  1326  00FFF9  57                 	db	87	;'W'
  1327  00FFFA  0A                 	db	10
  1328  00FFFB  00                 	db	0
  1329  00FFFC                     STR_16:
  1330  00FFFC  25                 	db	37
  1331  00FFFD  63                 	db	99	;'c'
  1332  00FFFE  00                 	db	0
  1333  0000                     
  1334                           ; #config settings
  1335  00FFFF  00                 	db	0	; dummy byte at the end
  1336  0000                     
  1337                           	psect	cinit
  1338  015516                     __pcinit:
  1339                           	opt stack 0
  1340  015516                     start_initialization:
  1341                           	opt stack 0
  1342  015516                     __initialization:
  1343                           	opt stack 0
  1344                           
  1345                           ; Initialize objects allocated to BANK1 (20 bytes)
  1346                           ; load TBLPTR registers with __pidataBANK1
  1347  015516  0E96               	movlw	low __pidataBANK1
  1348  015518  6EF6               	movwf	tblptrl,c
  1349  01551A  0E6D               	movlw	high __pidataBANK1
  1350  01551C  6EF7               	movwf	tblptrh,c
  1351  01551E  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1352  015520  6EF8               	movwf	tblptru,c
  1353  015522  EE01  F0E5         	lfsr	0,__pdataBANK1
  1354  015526  EE10 F014          	lfsr	1,20
  1355  01552A                     copy_data0:
  1356  01552A  0009               	tblrd		*+
  1357  01552C  CFF5 FFEE          	movff	tablat,postinc0
  1358  015530  50E5               	movf	postdec1,w,c
  1359  015532  50E1               	movf	fsr1l,w,c
  1360  015534  E1FA               	bnz	copy_data0
  1361                           
  1362                           ; Initialize objects allocated to COMRAM (9 bytes)
  1363                           ; load TBLPTR registers with __pidataCOMRAM
  1364  015536  0E5C               	movlw	low __pidataCOMRAM
  1365  015538  6EF6               	movwf	tblptrl,c
  1366  01553A  0E6E               	movlw	high __pidataCOMRAM
  1367  01553C  6EF7               	movwf	tblptrh,c
  1368  01553E  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1369  015540  6EF8               	movwf	tblptru,c
  1370  015542  EE00  F048         	lfsr	0,__pdataCOMRAM
  1371  015546  EE10 F009          	lfsr	1,9
  1372  01554A                     copy_data1:
  1373  01554A  0009               	tblrd		*+
  1374  01554C  CFF5 FFEE          	movff	tablat,postinc0
  1375  015550  50E5               	movf	postdec1,w,c
  1376  015552  50E1               	movf	fsr1l,w,c
  1377  015554  E1FA               	bnz	copy_data1
  1378                           
  1379                           ; Clear objects allocated to BIGRAM (300 bytes)
  1380  015556  EE02  F08F         	lfsr	0,__pbssBIGRAM
  1381  01555A  EE11 F02C          	lfsr	1,300
  1382  01555E                     clear_0:
  1383  01555E  6AEE               	clrf	postinc0,c
  1384  015560  50E5               	movf	postdec1,w,c
  1385  015562  50E1               	movf	fsr1l,w,c
  1386  015564  E1FC               	bnz	clear_0
  1387  015566  50E2               	movf	fsr1h,w,c
  1388  015568  E1FA               	bnz	clear_0
  1389                           
  1390                           ; Clear objects allocated to BANK2 (130 bytes)
  1391  01556A  EE02  F000         	lfsr	0,__pbssBANK2
  1392  01556E  0E82               	movlw	130
  1393  015570                     clear_1:
  1394  015570  6AEE               	clrf	postinc0,c
  1395  015572  06E8               	decf	wreg,f,c
  1396  015574  E1FD               	bnz	clear_1
  1397                           
  1398                           ; Clear objects allocated to BANK1 (229 bytes)
  1399  015576  EE01  F000         	lfsr	0,__pbssBANK1
  1400  01557A  0EE5               	movlw	229
  1401  01557C                     clear_2:
  1402  01557C  6AEE               	clrf	postinc0,c
  1403  01557E  06E8               	decf	wreg,f,c
  1404  015580  E1FD               	bnz	clear_2
  1405                           
  1406                           ; Clear objects allocated to BANK0 (21 bytes)
  1407  015582  EE00  F0E8         	lfsr	0,__pbssBANK0
  1408  015586  0E15               	movlw	21
  1409  015588                     clear_3:
  1410  015588  6AEE               	clrf	postinc0,c
  1411  01558A  06E8               	decf	wreg,f,c
  1412  01558C  E1FD               	bnz	clear_3
  1413                           
  1414                           ; Clear objects allocated to COMRAM (31 bytes)
  1415  01558E  EE00  F029         	lfsr	0,__pbssCOMRAM
  1416  015592  0E1F               	movlw	31
  1417  015594                     clear_4:
  1418  015594  6AEE               	clrf	postinc0,c
  1419  015596  06E8               	decf	wreg,f,c
  1420  015598  E1FD               	bnz	clear_4
  1421  01559A                     end_of_initialization:
  1422                           	opt stack 0
  1423  01559A                     __end_of__initialization:
  1424                           	opt stack 0
  1425  01559A  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1426  01559C  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1427  01559E  0100               	movlb	0
  1428  0155A0  EFD2  F098         	goto	_main	;jump to C main() function
  1429                           tblptru	equ	0xFF8
  1430                           tblptrh	equ	0xFF7
  1431                           tblptrl	equ	0xFF6
  1432                           tablat	equ	0xFF5
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           postdec1	equ	0xFE5
  1436                           fsr1h	equ	0xFE2
  1437                           fsr1l	equ	0xFE1
  1438                           
  1439                           	psect	bssCOMRAM
  1440  000029                     __pbssCOMRAM:
  1441                           	opt stack 0
  1442  000029                     _angle:
  1443                           	opt stack 0
  1444  000029                     	ds	4
  1445  00002D                     _steps:
  1446                           	opt stack 0
  1447  00002D                     	ds	2
  1448  00002F                     _speed:
  1449                           	opt stack 0
  1450  00002F                     	ds	2
  1451  000031                     _val:
  1452                           	opt stack 0
  1453  000031                     	ds	2
  1454  000033                     _COUNTER:
  1455                           	opt stack 0
  1456  000033                     	ds	2
  1457  000035                     HMI_GRender@a:
  1458                           	opt stack 0
  1459  000035                     	ds	2
  1460  000037                     _gBackcolour:
  1461                           	opt stack 0
  1462  000037                     	ds	2
  1463  000039                     _rightState:
  1464                           	opt stack 0
  1465  000039                     	ds	1
  1466  00003A                     _leftState:
  1467                           	opt stack 0
  1468  00003A                     	ds	1
  1469  00003B                     Timer2_Init@PRE:
  1470                           	opt stack 0
  1471  00003B                     	ds	1
  1472  00003C                     Timer0_Init@PRE:
  1473                           	opt stack 0
  1474  00003C                     	ds	1
  1475  00003D                     rand@screw:
  1476                           	opt stack 0
  1477  00003D                     	ds	1
  1478  00003E                     OutSeg@a:
  1479                           	opt stack 0
  1480  00003E                     	ds	1
  1481  00003F                     OutSeg@segset:
  1482                           	opt stack 0
  1483  00003F                     	ds	1
  1484  000040                     OutSeg@cur:
  1485                           	opt stack 0
  1486  000040                     	ds	1
  1487  000041                     _I2C1T:
  1488                           	opt stack 0
  1489  000041                     	ds	7
  1490                           tblptru	equ	0xFF8
  1491                           tblptrh	equ	0xFF7
  1492                           tblptrl	equ	0xFF6
  1493                           tablat	equ	0xFF5
  1494                           postinc0	equ	0xFEE
  1495                           wreg	equ	0xFE8
  1496                           postdec1	equ	0xFE5
  1497                           fsr1h	equ	0xFE2
  1498                           fsr1l	equ	0xFE1
  1499                           
  1500                           	psect	dataCOMRAM
  1501  000048                     __pdataCOMRAM:
  1502                           	opt stack 0
  1503  000048                     _gCursor:
  1504                           	opt stack 0
  1505  000048                     	ds	4
  1506  00004C                     _Bus_State:
  1507                           	opt stack 0
  1508  00004C                     	ds	1
  1509  00004D                     _change:
  1510                           	opt stack 0
  1511  00004D                     	ds	1
  1512  00004E                     	ds	1
  1513  00004F                     _l:
  1514                           	opt stack 0
  1515  00004F                     	ds	1
  1516  000050                     _w:
  1517                           	opt stack 0
  1518  000050                     	ds	1
  1519                           tblptru	equ	0xFF8
  1520                           tblptrh	equ	0xFF7
  1521                           tblptrl	equ	0xFF6
  1522                           tablat	equ	0xFF5
  1523                           postinc0	equ	0xFEE
  1524                           wreg	equ	0xFE8
  1525                           postdec1	equ	0xFE5
  1526                           fsr1h	equ	0xFE2
  1527                           fsr1l	equ	0xFE1
  1528                           
  1529                           	psect	bssBANK0
  1530  0000E8                     __pbssBANK0:
  1531                           	opt stack 0
  1532  0000E8                     _ADCVoltage:
  1533                           	opt stack 0
  1534  0000E8                     	ds	4
  1535  0000EC                     _lQueue:
  1536                           	opt stack 0
  1537  0000EC                     	ds	3
  1538  0000EF                     _pShiftVal:
  1539                           	opt stack 0
  1540  0000EF                     	ds	2
  1541  0000F1                     _lMotor:
  1542                           	opt stack 0
  1543  0000F1                     	ds	2
  1544  0000F3                     _lCurrent:
  1545                           	opt stack 0
  1546  0000F3                     	ds	2
  1547  0000F5                     _downState:
  1548                           	opt stack 0
  1549  0000F5                     	ds	1
  1550  0000F6                     _upState:
  1551                           	opt stack 0
  1552  0000F6                     	ds	1
  1553  0000F7                     Event_TestButton@j:
  1554                           	opt stack 0
  1555  0000F7                     	ds	1
  1556  0000F8                     Timer2_Init@INDEX:
  1557                           	opt stack 0
  1558  0000F8                     	ds	1
  1559  0000F9                     _INDEX:
  1560                           	opt stack 0
  1561  0000F9                     	ds	1
  1562  0000FA                     _lBufferY:
  1563                           	opt stack 0
  1564  0000FA                     	ds	1
  1565  0000FB                     _lBufferX:
  1566                           	opt stack 0
  1567  0000FB                     	ds	1
  1568  0000FC                     _clearall:
  1569                           	opt stack 0
  1570  0000FC                     	ds	1
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           postinc0	equ	0xFEE
  1576                           wreg	equ	0xFE8
  1577                           postdec1	equ	0xFE5
  1578                           fsr1h	equ	0xFE2
  1579                           fsr1l	equ	0xFE1
  1580                           
  1581                           	psect	bssBANK1
  1582  000100                     __pbssBANK1:
  1583                           	opt stack 0
  1584  000100                     Timer2_Init@DIV:
  1585                           	opt stack 0
  1586  000100                     	ds	4
  1587  000104                     Timer0_Init@DIV:
  1588                           	opt stack 0
  1589  000104                     	ds	4
  1590  000108                     _gISR:
  1591                           	opt stack 0
  1592  000108                     	ds	3
  1593  00010B                     _lStepFunction:
  1594                           	opt stack 0
  1595  00010B                     	ds	3
  1596  00010E                     _I2C2_More:
  1597                           	opt stack 0
  1598  00010E                     	ds	3
  1599  000111                     _I2C1_More:
  1600                           	opt stack 0
  1601  000111                     	ds	3
  1602  000114                     _I2C2_Done:
  1603                           	opt stack 0
  1604  000114                     	ds	3
  1605  000117                     _I2C1_Done:
  1606                           	opt stack 0
  1607  000117                     	ds	3
  1608  00011A                     _errno:
  1609                           	opt stack 0
  1610  00011A                     	ds	2
  1611  00011C                     _mDelta:
  1612                           	opt stack 0
  1613  00011C                     	ds	2
  1614  00011E                     _locked:
  1615                           	opt stack 0
  1616  00011E                     	ds	2
  1617  000120                     _remainingSteps:
  1618                           	opt stack 0
  1619  000120                     	ds	2
  1620  000122                     _diff:
  1621                           	opt stack 0
  1622  000122                     	ds	2
  1623  000124                     _IRDistance:
  1624                           	opt stack 0
  1625  000124                     	ds	2
  1626  000126                     _dip:
  1627                           	opt stack 0
  1628  000126                     	ds	2
  1629  000128                     _mode:
  1630                           	opt stack 0
  1631  000128                     	ds	2
  1632  00012A                     SPI_Send9@dat:
  1633                           	opt stack 0
  1634  00012A                     	ds	2
  1635  00012C                     _u:
  1636                           	opt stack 0
  1637  00012C                     	ds	1
  1638  00012D                     _j:
  1639                           	opt stack 0
  1640  00012D                     	ds	1
  1641  00012E                     _i:
  1642                           	opt stack 0
  1643  00012E                     	ds	1
  1644  00012F                     _ADC_Initialised:
  1645                           	opt stack 0
  1646  00012F                     	ds	1
  1647  000130                     _HMIBoard:
  1648                           	opt stack 0
  1649  000130                     	ds	58
  1650  00016A                     _SPI1:
  1651                           	opt stack 0
  1652  00016A                     	ds	11
  1653  000175                     _SPI2:
  1654                           	opt stack 0
  1655  000175                     	ds	11
  1656  000180                     _PortG:
  1657                           	opt stack 0
  1658  000180                     	ds	10
  1659  00018A                     _PortE:
  1660                           	opt stack 0
  1661  00018A                     	ds	10
  1662  000194                     _PortD:
  1663                           	opt stack 0
  1664  000194                     	ds	10
  1665  00019E                     _PortB:
  1666                           	opt stack 0
  1667  00019E                     	ds	10
  1668  0001A8                     _PortC:
  1669                           	opt stack 0
  1670  0001A8                     	ds	10
  1671  0001B2                     _PortF:
  1672                           	opt stack 0
  1673  0001B2                     	ds	10
  1674  0001BC                     _I2C2T:
  1675                           	opt stack 0
  1676  0001BC                     	ds	7
  1677  0001C3                     _Stepper:
  1678                           	opt stack 0
  1679  0001C3                     	ds	6
  1680  0001C9                     _ADC_AN3:
  1681                           	opt stack 0
  1682  0001C9                     	ds	5
  1683  0001CE                     _ADC_AN2:
  1684                           	opt stack 0
  1685  0001CE                     	ds	5
  1686  0001D3                     _ADC_AN1:
  1687                           	opt stack 0
  1688  0001D3                     	ds	5
  1689  0001D8                     _ADC_AN0:
  1690                           	opt stack 0
  1691  0001D8                     	ds	5
  1692  0001DD                     LCD_DrawRectangle@p4:
  1693                           	opt stack 0
  1694  0001DD                     	ds	4
  1695  0001E1                     LCD_DrawRectangle@p2:
  1696                           	opt stack 0
  1697  0001E1                     	ds	4
  1698                           tblptru	equ	0xFF8
  1699                           tblptrh	equ	0xFF7
  1700                           tblptrl	equ	0xFF6
  1701                           tablat	equ	0xFF5
  1702                           postinc0	equ	0xFEE
  1703                           wreg	equ	0xFE8
  1704                           postdec1	equ	0xFE5
  1705                           fsr1h	equ	0xFE2
  1706                           fsr1l	equ	0xFE1
  1707                           
  1708                           	psect	dataBANK1
  1709  0001E5                     __pdataBANK1:
  1710                           	opt stack 0
  1711  0001E5                     Console_Render@F6956:
  1712                           	opt stack 0
  1713  0001E5                     	ds	4
  1714  0001E9                     _gLineSize:
  1715                           	opt stack 0
  1716  0001E9                     	ds	4
  1717  0001ED                     _gCharSize:
  1718                           	opt stack 0
  1719  0001ED                     	ds	4
  1720  0001F1                     _currentPos:
  1721                           	opt stack 0
  1722  0001F1                     	ds	2
  1723  0001F3                     _direction:
  1724                           	opt stack 0
  1725  0001F3                     	ds	2
  1726  0001F5                     _gForecolour:
  1727                           	opt stack 0
  1728  0001F5                     	ds	2
  1729  0001F7                     	ds	1
  1730  0001F8                     	ds	1
  1731                           tblptru	equ	0xFF8
  1732                           tblptrh	equ	0xFF7
  1733                           tblptrl	equ	0xFF6
  1734                           tablat	equ	0xFF5
  1735                           postinc0	equ	0xFEE
  1736                           wreg	equ	0xFE8
  1737                           postdec1	equ	0xFE5
  1738                           fsr1h	equ	0xFE2
  1739                           fsr1l	equ	0xFE1
  1740                           
  1741                           	psect	bssBANK2
  1742  000200                     __pbssBANK2:
  1743                           	opt stack 0
  1744  000200                     _lCBuffer:
  1745                           	opt stack 0
  1746  000200                     	ds	30
  1747  00021E                     Console_MakeField@Fill:
  1748                           	opt stack 0
  1749  00021E                     	ds	70
  1750  000264                     _DIPSwitch:
  1751                           	opt stack 0
  1752  000264                     	ds	10
  1753  00026E                     _TestButton:
  1754                           	opt stack 0
  1755  00026E                     	ds	10
  1756  000278                     _PortA:
  1757                           	opt stack 0
  1758  000278                     	ds	10
  1759                           tblptru	equ	0xFF8
  1760                           tblptrh	equ	0xFF7
  1761                           tblptrl	equ	0xFF6
  1762                           tablat	equ	0xFF5
  1763                           postinc0	equ	0xFEE
  1764                           wreg	equ	0xFE8
  1765                           postdec1	equ	0xFE5
  1766                           fsr1h	equ	0xFE2
  1767                           fsr1l	equ	0xFE1
  1768                           
  1769                           	psect	bssBIGRAM
  1770  00028F                     __pbssBIGRAM:
  1771                           	opt stack 0
  1772  00028F                     _lBuffer:
  1773                           	opt stack 0
  1774  00028F                     	ds	300
  1775                           tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1h	equ	0xFE2
  1783                           fsr1l	equ	0xFE1
  1784                           
  1785                           	psect	cstackBANK2
  1786  000282                     __pcstackBANK2:
  1787                           	opt stack 0
  1788  000282                     _pow$15227:
  1789                           	opt stack 0
  1790                           
  1791                           ; 4 bytes @ 0x0
  1792  000282                     	ds	4
  1793  000286                     _pow$15228:
  1794                           	opt stack 0
  1795                           
  1796                           ; 4 bytes @ 0x4
  1797  000286                     	ds	4
  1798  00028A                     pow@sign:
  1799                           	opt stack 0
  1800                           
  1801                           ; 1 bytes @ 0x8
  1802  00028A                     	ds	1
  1803  00028B                     pow@yi:
  1804                           	opt stack 0
  1805                           
  1806                           ; 4 bytes @ 0x9
  1807  00028B                     	ds	4
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           postdec1	equ	0xFE5
  1815                           fsr1h	equ	0xFE2
  1816                           fsr1l	equ	0xFE1
  1817                           
  1818                           	psect	cstackBANK1
  1819  0001F9                     __pcstackBANK1:
  1820                           	opt stack 0
  1821  0001F9                     _main$15226:
  1822                           	opt stack 0
  1823                           
  1824                           ; 4 bytes @ 0x0
  1825  0001F9                     	ds	4
  1826                           tblptru	equ	0xFF8
  1827                           tblptrh	equ	0xFF7
  1828                           tblptrl	equ	0xFF6
  1829                           tablat	equ	0xFF5
  1830                           postinc0	equ	0xFEE
  1831                           wreg	equ	0xFE8
  1832                           postdec1	equ	0xFE5
  1833                           fsr1h	equ	0xFE2
  1834                           fsr1l	equ	0xFE1
  1835                           
  1836                           	psect	cstackBANK0
  1837  000060                     __pcstackBANK0:
  1838                           	opt stack 0
  1839  000060                     ??_Console_ClearCursor:
  1840  000060                     ??_ADC_SetChannel:
  1841  000060                     ??_ADC_ConversionTime:
  1842  000060                     ??_ADC_SetupIO:
  1843  000060                     ??_Console_Init:
  1844  000060                     ??_Console_NewLine:
  1845  000060                     ??_Console_FormFeed:
  1846  000060                     ??_HMI_SetButton:
  1847  000060                     ??_getMode:
  1848  000060                     ?_GetPortProperties:
  1849                           	opt stack 0
  1850  000060                     ?_GetPortPORT:
  1851                           	opt stack 0
  1852  000060                     ?_GetPortTRIS:
  1853                           	opt stack 0
  1854  000060                     ?___wmul:
  1855                           	opt stack 0
  1856  000060                     ?___lwdiv:
  1857                           	opt stack 0
  1858  000060                     ?___fldiv:
  1859                           	opt stack 0
  1860  000060                     ?_frexp:
  1861                           	opt stack 0
  1862  000060                     ?___lldiv:
  1863                           	opt stack 0
  1864  000060                     Mode_Set@pMode:
  1865                           	opt stack 0
  1866  000060                     ToSegment@pCHR:
  1867                           	opt stack 0
  1868  000060                     HMI_SetBar@pValue:
  1869                           	opt stack 0
  1870  000060                     ADC_ClockDivision@pDivide:
  1871                           	opt stack 0
  1872  000060                     Port_GetPin@pInput:
  1873                           	opt stack 0
  1874  000060                     Port_GetQuad@pInput:
  1875                           	opt stack 0
  1876  000060                     SPI_DisableISR@pInput:
  1877                           	opt stack 0
  1878  000060                     SPI_DCS@pInput:
  1879                           	opt stack 0
  1880  000060                     SPI_Send@pInput:
  1881                           	opt stack 0
  1882  000060                     Byte_SetBit@pInput:
  1883                           	opt stack 0
  1884  000060                     Byte_GetBit@pInput:
  1885                           	opt stack 0
  1886  000060                     Byte_SetZone@pInput:
  1887                           	opt stack 0
  1888  000060                     Byte_GetZone@pInput:
  1889                           	opt stack 0
  1890  000060                     Byte_SetByte@pInput:
  1891                           	opt stack 0
  1892  000060                     delay_ms@ms:
  1893                           	opt stack 0
  1894  000060                     delay_us@us:
  1895                           	opt stack 0
  1896  000060                     reverse@input:
  1897                           	opt stack 0
  1898  000060                     Console_SetForecolour@pColour:
  1899                           	opt stack 0
  1900  000060                     ADC_Sequence@pItemA:
  1901                           	opt stack 0
  1902  000060                     ___wmul@multiplier:
  1903                           	opt stack 0
  1904  000060                     ___lwdiv@dividend:
  1905                           	opt stack 0
  1906  000060                     MXK_Queue@pCallback:
  1907                           	opt stack 0
  1908  000060                     Timer0_Start@pFunction:
  1909                           	opt stack 0
  1910  000060                     ___flge@ff1:
  1911                           	opt stack 0
  1912  000060                     ___lldiv@dividend:
  1913                           	opt stack 0
  1914  000060                     ___fldiv@b:
  1915                           	opt stack 0
  1916  000060                     frexp@value:
  1917                           	opt stack 0
  1918                           
  1919                           ; 4 bytes @ 0x0
  1920  000060                     	ds	1
  1921  000061                     ADC_SetChannel@pChannel:
  1922                           	opt stack 0
  1923  000061                     ADC_ClockDivision@reg:
  1924                           	opt stack 0
  1925  000061                     ADC_ConversionTime@pCount:
  1926                           	opt stack 0
  1927  000061                     HMI_SetSegments@pString:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0x1
  1931  000061                     	ds	1
  1932  000062                     GetPortProperties@pInput:
  1933                           	opt stack 0
  1934  000062                     GetPortPORT@pInput:
  1935                           	opt stack 0
  1936  000062                     GetPortTRIS@pInput:
  1937                           	opt stack 0
  1938  000062                     Port_GetPin@pPin:
  1939                           	opt stack 0
  1940  000062                     Port_GetQuad@pQuad:
  1941                           	opt stack 0
  1942  000062                     SPI_Send@pData:
  1943                           	opt stack 0
  1944  000062                     Byte_SetBit@pBit:
  1945                           	opt stack 0
  1946  000062                     Byte_GetBit@pBit:
  1947                           	opt stack 0
  1948  000062                     Byte_SetZone@pMax:
  1949                           	opt stack 0
  1950  000062                     Byte_GetZone@pMax:
  1951                           	opt stack 0
  1952  000062                     Byte_SetByte@pValue:
  1953                           	opt stack 0
  1954  000062                     Console_Init@x:
  1955                           	opt stack 0
  1956  000062                     Console_FormFeed@x:
  1957                           	opt stack 0
  1958  000062                     ADC_SetupIO@pChannel:
  1959                           	opt stack 0
  1960  000062                     ADC_ClockDivision@unfound:
  1961                           	opt stack 0
  1962  000062                     reverse@length:
  1963                           	opt stack 0
  1964  000062                     ADC_Sequence@pItemB:
  1965                           	opt stack 0
  1966  000062                     ADC_Start@pInput:
  1967                           	opt stack 0
  1968  000062                     ___wmul@multiplicand:
  1969                           	opt stack 0
  1970  000062                     ___lwdiv@divisor:
  1971                           	opt stack 0
  1972  000062                     delay_ms@u:
  1973                           	opt stack 0
  1974  000062                     delay_us@u:
  1975                           	opt stack 0
  1976  000062                     HMI_SetButton@reindex:
  1977                           	opt stack 0
  1978                           
  1979                           ; 4 bytes @ 0x2
  1980  000062                     	ds	1
  1981  000063                     ??_Port_GetPin:
  1982  000063                     ??_Port_GetQuad:
  1983  000063                     ??_Byte_GetBit:
  1984  000063                     LCD_Write@mode:
  1985                           	opt stack 0
  1986  000063                     Byte_SetBit@pValue:
  1987                           	opt stack 0
  1988  000063                     Byte_SetZone@pChunk:
  1989                           	opt stack 0
  1990  000063                     Byte_GetZone@pChunk:
  1991                           	opt stack 0
  1992  000063                     Console_Init@y:
  1993                           	opt stack 0
  1994  000063                     Console_FormFeed@y:
  1995                           	opt stack 0
  1996  000063                     OutSeg@pSegment:
  1997                           	opt stack 0
  1998  000063                     ADC_SetupIO@MASK:
  1999                           	opt stack 0
  2000  000063                     Motor_Move@pMotor:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x3
  2004  000063                     	ds	1
  2005  000064                     ??_Byte_SetBit:
  2006  000064                     ??_Console_IncrementCursor:
  2007  000064                     ??_OutSeg:
  2008  000064                     ??_ADC_Start:
  2009  000064                     LCD_Write@value:
  2010                           	opt stack 0
  2011  000064                     Byte_GetBit@Output:
  2012                           	opt stack 0
  2013  000064                     Byte_SetZone@pChunkSize:
  2014                           	opt stack 0
  2015  000064                     Byte_GetZone@pChunkSize:
  2016                           	opt stack 0
  2017  000064                     reverse@tempVar:
  2018                           	opt stack 0
  2019  000064                     ___lwdiv@counter:
  2020                           	opt stack 0
  2021  000064                     HMI_SetSegments@in:
  2022                           	opt stack 0
  2023  000064                     ADC_Init@pInput:
  2024                           	opt stack 0
  2025  000064                     ___wmul@product:
  2026                           	opt stack 0
  2027  000064                     frexp@eptr:
  2028                           	opt stack 0
  2029  000064                     ___flge@ff2:
  2030                           	opt stack 0
  2031  000064                     ___lldiv@divisor:
  2032                           	opt stack 0
  2033  000064                     ___fldiv@a:
  2034                           	opt stack 0
  2035                           
  2036                           ; 4 bytes @ 0x4
  2037  000064                     	ds	1
  2038  000065                     ??_Byte_GetZone:
  2039  000065                     ?_Console_MakeField:
  2040                           	opt stack 0
  2041  000065                     Set_Addr_Window@ys:
  2042                           	opt stack 0
  2043  000065                     Set_Rotation@m:
  2044                           	opt stack 0
  2045  000065                     Port_GetPin@Output:
  2046                           	opt stack 0
  2047  000065                     Port_GetQuad@Output:
  2048                           	opt stack 0
  2049  000065                     Byte_SetZone@pValue:
  2050                           	opt stack 0
  2051  000065                     LCD_Word_Write@value:
  2052                           	opt stack 0
  2053  000065                     reverse@iterator:
  2054                           	opt stack 0
  2055  000065                     Motor_Move@pDelta:
  2056                           	opt stack 0
  2057  000065                     ___lwdiv@quotient:
  2058                           	opt stack 0
  2059                           
  2060                           ; 2 bytes @ 0x5
  2061  000065                     	ds	1
  2062  000066                     ??_frexp:
  2063  000066                     ??_Byte_SetZone:
  2064  000066                     ?___awdiv:
  2065                           	opt stack 0
  2066  000066                     Set_Addr_Window@xe:
  2067                           	opt stack 0
  2068  000066                     Set_Rotation@rotation:
  2069                           	opt stack 0
  2070  000066                     Byte_GetZone@MASK:
  2071                           	opt stack 0
  2072  000066                     OutSeg@pInput:
  2073                           	opt stack 0
  2074  000066                     HMI_SetButton@pValue:
  2075                           	opt stack 0
  2076  000066                     ADC_Init@pChannel:
  2077                           	opt stack 0
  2078  000066                     MXK_BlockSwitchTo@CUR:
  2079                           	opt stack 0
  2080  000066                     MXK_SwitchTo@CUR:
  2081                           	opt stack 0
  2082  000066                     ___awdiv@dividend:
  2083                           	opt stack 0
  2084                           
  2085                           ; 2 bytes @ 0x6
  2086  000066                     	ds	1
  2087  000067                     ??_Console_MakeField:
  2088  000067                     ?___lwmod:
  2089                           	opt stack 0
  2090  000067                     Set_Addr_Window@ye:
  2091                           	opt stack 0
  2092  000067                     Byte_GetZone@Offset:
  2093                           	opt stack 0
  2094  000067                     OutSeg@out:
  2095                           	opt stack 0
  2096  000067                     HMI_SetButton@v:
  2097                           	opt stack 0
  2098  000067                     MXK_BlockSwitchTo@pModule:
  2099                           	opt stack 0
  2100  000067                     MXK_SwitchTo@pModule:
  2101                           	opt stack 0
  2102  000067                     ___lwmod@dividend:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x7
  2106  000067                     	ds	1
  2107  000068                     ??___fldiv:
  2108  000068                     ??___flge:
  2109  000068                     Set_Addr_Window@xs:
  2110                           	opt stack 0
  2111  000068                     Byte_GetZone@Output:
  2112                           	opt stack 0
  2113  000068                     HMI_Render@a:
  2114                           	opt stack 0
  2115  000068                     ___awdiv@divisor:
  2116                           	opt stack 0
  2117  000068                     ___lldiv@quotient:
  2118                           	opt stack 0
  2119                           
  2120                           ; 4 bytes @ 0x8
  2121  000068                     	ds	1
  2122  000069                     Byte_SetZone@Offset:
  2123                           	opt stack 0
  2124  000069                     LCD_Fill@pColour:
  2125                           	opt stack 0
  2126  000069                     LCD_FillRectangle@pColour:
  2127                           	opt stack 0
  2128  000069                     Byte_GetPair@pInput:
  2129                           	opt stack 0
  2130  000069                     Console_MakeField@Index:
  2131                           	opt stack 0
  2132  000069                     ___lwmod@divisor:
  2133                           	opt stack 0
  2134                           
  2135                           ; 2 bytes @ 0x9
  2136  000069                     	ds	1
  2137  00006A                     Byte_SetZone@MASK:
  2138                           	opt stack 0
  2139  00006A                     ___awdiv@counter:
  2140                           	opt stack 0
  2141                           
  2142                           ; 1 bytes @ 0xA
  2143  00006A                     	ds	1
  2144  00006B                     LCD_Fill@i:
  2145                           	opt stack 0
  2146  00006B                     Byte_GetPair@pPair:
  2147                           	opt stack 0
  2148  00006B                     Console_MakeField@pInput:
  2149                           	opt stack 0
  2150  00006B                     ___awdiv@sign:
  2151                           	opt stack 0
  2152  00006B                     ___lwmod@counter:
  2153                           	opt stack 0
  2154  00006B                     Byte_SetPair@pInput:
  2155                           	opt stack 0
  2156  00006B                     Byte_SetQuad@pInput:
  2157                           	opt stack 0
  2158  00006B                     LCD_FillRectangle@pPoint:
  2159                           	opt stack 0
  2160                           
  2161                           ; 4 bytes @ 0xB
  2162  00006B                     	ds	1
  2163  00006C                     LCD_Fill@j:
  2164                           	opt stack 0
  2165  00006C                     ___lldiv@counter:
  2166                           	opt stack 0
  2167  00006C                     ___fldiv@sign:
  2168                           	opt stack 0
  2169  00006C                     Word_GetPair@pInput:
  2170                           	opt stack 0
  2171  00006C                     itos@input:
  2172                           	opt stack 0
  2173  00006C                     Console_MakeField@Column:
  2174                           	opt stack 0
  2175  00006C                     ___awdiv@quotient:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0xC
  2179  00006C                     	ds	1
  2180  00006D                     Byte_SetPair@pPair:
  2181                           	opt stack 0
  2182  00006D                     Byte_SetQuad@pQuad:
  2183                           	opt stack 0
  2184  00006D                     Timer0_Init@pFrequency:
  2185                           	opt stack 0
  2186  00006D                     Timer2_Init@pFrequency:
  2187                           	opt stack 0
  2188  00006D                     ___fldiv@rem:
  2189                           	opt stack 0
  2190                           
  2191                           ; 4 bytes @ 0xD
  2192  00006D                     	ds	1
  2193  00006E                     ??_Console_Tab:
  2194  00006E                     ?___xxtofl:
  2195                           	opt stack 0
  2196  00006E                     Byte_SetPair@pValue:
  2197                           	opt stack 0
  2198  00006E                     Byte_SetQuad@pValue:
  2199                           	opt stack 0
  2200  00006E                     Word_GetPair@pPair:
  2201                           	opt stack 0
  2202  00006E                     itos@destination:
  2203                           	opt stack 0
  2204  00006E                     _Console_MakeField$10974:
  2205                           	opt stack 0
  2206  00006E                     ___xxtofl@val:
  2207                           	opt stack 0
  2208                           
  2209                           ; 4 bytes @ 0xE
  2210  00006E                     	ds	1
  2211  00006F                     Port_SetPin@pInput:
  2212                           	opt stack 0
  2213  00006F                     Port_Set@pInput:
  2214                           	opt stack 0
  2215  00006F                     SPI_MinSpeed@pInput:
  2216                           	opt stack 0
  2217  00006F                     SPI_MaxSpeed@pInput:
  2218                           	opt stack 0
  2219  00006F                     Word_SetPair@pInput:
  2220                           	opt stack 0
  2221  00006F                     PortProperty_Valid@pInput:
  2222                           	opt stack 0
  2223  00006F                     LCD_FillRectangle@pSize:
  2224                           	opt stack 0
  2225                           
  2226                           ; 4 bytes @ 0xF
  2227  00006F                     	ds	1
  2228  000070                     Console_MakeField@x:
  2229                           	opt stack 0
  2230  000070                     itos@Data:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x10
  2234  000070                     	ds	1
  2235  000071                     ??_Timer2_Init:
  2236  000071                     ??_Timer0_Init:
  2237  000071                     Port_SetPin@pPin:
  2238                           	opt stack 0
  2239  000071                     Port_Set@pValue:
  2240                           	opt stack 0
  2241  000071                     Word_SetPair@pPair:
  2242                           	opt stack 0
  2243  000071                     PortProperty_Valid@pPinDrive:
  2244                           	opt stack 0
  2245  000071                     Console_MakeField@y:
  2246                           	opt stack 0
  2247  000071                     ___fldiv@new_exp:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x11
  2251  000071                     	ds	1
  2252  000072                     ??_Port_Set:
  2253  000072                     ??___xxtofl:
  2254  000072                     Port_SetPin@pValue:
  2255                           	opt stack 0
  2256  000072                     Word_SetPair@pValue:
  2257                           	opt stack 0
  2258  000072                     PortProperty_Valid@pPin:
  2259                           	opt stack 0
  2260  000072                     LCD_DrawField@pField:
  2261                           	opt stack 0
  2262  000072                     itos@Length:
  2263                           	opt stack 0
  2264  000072                     Timer2_Init@RDIV:
  2265                           	opt stack 0
  2266                           
  2267                           ; 4 bytes @ 0x12
  2268  000072                     	ds	1
  2269  000073                     ??_PortProperty_Valid:
  2270  000073                     ??_LCD_FillRectangle:
  2271  000073                     Port_SetPin@Type:
  2272                           	opt stack 0
  2273  000073                     Console_Tab@t:
  2274                           	opt stack 0
  2275  000073                     Timer0_Init@pCPUClock:
  2276                           	opt stack 0
  2277  000073                     ___fldiv@grs:
  2278                           	opt stack 0
  2279                           
  2280                           ; 4 bytes @ 0x13
  2281  000073                     	ds	1
  2282  000074                     LED_Set@pValue:
  2283                           	opt stack 0
  2284  000074                     Console_Tab@i:
  2285                           	opt stack 0
  2286  000074                     Port_TogglePin@pInput:
  2287                           	opt stack 0
  2288  000074                     itos@Out:
  2289                           	opt stack 0
  2290  000074                     LCD_DrawField@pPoint:
  2291                           	opt stack 0
  2292                           
  2293                           ; 4 bytes @ 0x14
  2294  000074                     	ds	1
  2295  000075                     LCD_FillRectangle@i:
  2296                           	opt stack 0
  2297  000075                     LED_Set@pLED:
  2298                           	opt stack 0
  2299  000075                     Console_Tab@c:
  2300                           	opt stack 0
  2301  000075                     PortProperty_Valid@Errors:
  2302                           	opt stack 0
  2303                           
  2304                           ; 16 bytes @ 0x15
  2305  000075                     	ds	1
  2306  000076                     ??_Console_PrintChar:
  2307  000076                     LCD_FillRectangle@j:
  2308                           	opt stack 0
  2309  000076                     Port_TogglePin@pPin:
  2310                           	opt stack 0
  2311  000076                     ___xxtofl@sign:
  2312                           	opt stack 0
  2313  000076                     HMI_SetNumber@pInput:
  2314                           	opt stack 0
  2315  000076                     Timer2_Init@pCPUClock:
  2316                           	opt stack 0
  2317                           
  2318                           ; 4 bytes @ 0x16
  2319  000076                     	ds	1
  2320  000077                     Port_TogglePin@Value:
  2321                           	opt stack 0
  2322  000077                     ___fldiv@bexp:
  2323                           	opt stack 0
  2324  000077                     ___xxtofl@exp:
  2325                           	opt stack 0
  2326  000077                     Timer0_Init@DIVIDE:
  2327                           	opt stack 0
  2328                           
  2329                           ; 4 bytes @ 0x17
  2330  000077                     	ds	1
  2331  000078                     LED_Toggle@pLED:
  2332                           	opt stack 0
  2333  000078                     ___fldiv@aexp:
  2334                           	opt stack 0
  2335  000078                     LCD_DrawField@pSize:
  2336                           	opt stack 0
  2337  000078                     ___xxtofl@arg:
  2338                           	opt stack 0
  2339                           
  2340                           ; 4 bytes @ 0x18
  2341  000078                     	ds	1
  2342  000079                     Console_PrintChar@pInput:
  2343                           	opt stack 0
  2344  000079                     Event_DIPSwitch@pState:
  2345                           	opt stack 0
  2346  000079                     Event_TestButton@pState:
  2347                           	opt stack 0
  2348                           
  2349                           ; 1 bytes @ 0x19
  2350  000079                     	ds	1
  2351  00007A                     putch@c:
  2352                           	opt stack 0
  2353  00007A                     Event_DIPSwitch@Bar:
  2354                           	opt stack 0
  2355  00007A                     Timer2_Init@DIVIDE:
  2356                           	opt stack 0
  2357                           
  2358                           ; 4 bytes @ 0x1A
  2359  00007A                     	ds	1
  2360  00007B                     ?_printf:
  2361                           	opt stack 0
  2362  00007B                     Button_Poll@pButton:
  2363                           	opt stack 0
  2364  00007B                     Motor_Speed@pMotor:
  2365                           	opt stack 0
  2366  00007B                     printf@f:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x1B
  2370  00007B                     	ds	1
  2371  00007C                     ??_LCD_DrawField:
  2372  00007C                     ?___flmul:
  2373                           	opt stack 0
  2374  00007C                     ?___flneg:
  2375                           	opt stack 0
  2376  00007C                     ___flneg@f1:
  2377                           	opt stack 0
  2378  00007C                     ___flmul@b:
  2379                           	opt stack 0
  2380                           
  2381                           ; 4 bytes @ 0x1C
  2382  00007C                     	ds	1
  2383  00007D                     Button_Poll@pIncrement:
  2384                           	opt stack 0
  2385  00007D                     Motor_Speed@pFrequency:
  2386                           	opt stack 0
  2387                           
  2388                           ; 2 bytes @ 0x1D
  2389  00007D                     	ds	1
  2390  00007E                     ??_Button_Poll:
  2391  00007E                     LCD_DrawField@count:
  2392                           	opt stack 0
  2393                           
  2394                           ; 2 bytes @ 0x1E
  2395  00007E                     	ds	1
  2396  00007F                     ??_printf:
  2397  00007F                     
  2398                           ; 1 bytes @ 0x1F
  2399  00007F                     	ds	1
  2400  000080                     LCD_DrawField@xmax:
  2401                           	opt stack 0
  2402  000080                     printf@flag:
  2403                           	opt stack 0
  2404  000080                     ___flmul@a:
  2405                           	opt stack 0
  2406                           
  2407                           ; 4 bytes @ 0x20
  2408  000080                     	ds	1
  2409  000081                     LCD_DrawField@ymax:
  2410                           	opt stack 0
  2411  000081                     printf@prec:
  2412                           	opt stack 0
  2413                           
  2414                           ; 1 bytes @ 0x21
  2415  000081                     	ds	1
  2416  000082                     LCD_DrawField@i:
  2417                           	opt stack 0
  2418  000082                     Port_Set@TypeRequired:
  2419                           	opt stack 0
  2420  000082                     printf@ap:
  2421                           	opt stack 0
  2422                           
  2423                           ; 2 bytes @ 0x22
  2424  000082                     	ds	1
  2425  000083                     ??_Console_Render:
  2426  000083                     Button_Poll@Pin:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x23
  2430  000083                     	ds	1
  2431  000084                     ??___flmul:
  2432  000084                     Port_Set@TypeActual:
  2433                           	opt stack 0
  2434  000084                     printf@val:
  2435                           	opt stack 0
  2436                           
  2437                           ; 2 bytes @ 0x24
  2438  000084                     	ds	1
  2439  000085                     PortProperty_Valid@Pair:
  2440                           	opt stack 0
  2441  000085                     Console_Render@temp:
  2442                           	opt stack 0
  2443                           
  2444                           ; 1 bytes @ 0x25
  2445  000085                     	ds	1
  2446  000086                     Port_Set@Type:
  2447                           	opt stack 0
  2448  000086                     printf@c:
  2449                           	opt stack 0
  2450  000086                     Port_CheckPairType@pInput:
  2451                           	opt stack 0
  2452  000086                     Port_SetPinType@pInput:
  2453                           	opt stack 0
  2454  000086                     Console_Render@lCursor:
  2455                           	opt stack 0
  2456                           
  2457                           ; 4 bytes @ 0x26
  2458  000086                     	ds	1
  2459  000087                     
  2460                           ; 1 bytes @ 0x27
  2461  000087                     	ds	1
  2462  000088                     Port_CheckPairType@pPair:
  2463                           	opt stack 0
  2464  000088                     Port_SetPinType@pPin:
  2465                           	opt stack 0
  2466  000088                     ___flmul@sign:
  2467                           	opt stack 0
  2468                           
  2469                           ; 1 bytes @ 0x28
  2470  000088                     	ds	1
  2471  000089                     Port_CheckPairType@pDrive:
  2472                           	opt stack 0
  2473  000089                     Port_SetPinType@pType:
  2474                           	opt stack 0
  2475  000089                     ___flmul@aexp:
  2476                           	opt stack 0
  2477                           
  2478                           ; 1 bytes @ 0x29
  2479  000089                     	ds	1
  2480  00008A                     Port_CheckPairType@Pin1:
  2481                           	opt stack 0
  2482  00008A                     Port_SetPinType@Output:
  2483                           	opt stack 0
  2484  00008A                     Console_Render@x:
  2485                           	opt stack 0
  2486  00008A                     ___flmul@grs:
  2487                           	opt stack 0
  2488                           
  2489                           ; 4 bytes @ 0x2A
  2490  00008A                     	ds	1
  2491  00008B                     Port_CheckPairType@Pin2:
  2492                           	opt stack 0
  2493  00008B                     Console_Render@y:
  2494                           	opt stack 0
  2495  00008B                     Port_SetPinType@Props:
  2496                           	opt stack 0
  2497                           
  2498                           ; 2 bytes @ 0x2B
  2499  00008B                     	ds	1
  2500  00008C                     Port_CheckPairType@Output:
  2501                           	opt stack 0
  2502                           
  2503                           ; 1 bytes @ 0x2C
  2504  00008C                     	ds	1
  2505  00008D                     LED_Init@pLED:
  2506                           	opt stack 0
  2507  00008D                     Port_CheckPairType@Props:
  2508                           	opt stack 0
  2509  00008D                     Motor_Init@pMotor:
  2510                           	opt stack 0
  2511  00008D                     SPI_Init@pClock:
  2512                           	opt stack 0
  2513                           
  2514                           ; 4 bytes @ 0x2D
  2515  00008D                     	ds	1
  2516  00008E                     ___flmul@bexp:
  2517                           	opt stack 0
  2518                           
  2519                           ; 1 bytes @ 0x2E
  2520  00008E                     	ds	1
  2521  00008F                     Port_CheckQuadType@pInput:
  2522                           	opt stack 0
  2523  00008F                     Motor_Init@pAddress:
  2524                           	opt stack 0
  2525  00008F                     ___flmul@prod:
  2526                           	opt stack 0
  2527                           
  2528                           ; 4 bytes @ 0x2F
  2529  00008F                     	ds	2
  2530  000091                     Port_CheckQuadType@pQuad:
  2531                           	opt stack 0
  2532  000091                     SPI_Init@pChannel:
  2533                           	opt stack 0
  2534                           
  2535                           ; 1 bytes @ 0x31
  2536  000091                     	ds	1
  2537  000092                     Port_CheckQuadType@pDrive:
  2538                           	opt stack 0
  2539  000092                     SPI_Init@pMode:
  2540                           	opt stack 0
  2541                           
  2542                           ; 1 bytes @ 0x32
  2543  000092                     	ds	1
  2544  000093                     Port_CheckQuadType@Pair1:
  2545                           	opt stack 0
  2546  000093                     SPI_Init@pInput:
  2547                           	opt stack 0
  2548  000093                     ___flmul@temp:
  2549                           	opt stack 0
  2550                           
  2551                           ; 2 bytes @ 0x33
  2552  000093                     	ds	1
  2553  000094                     Port_CheckQuadType@Pair2:
  2554                           	opt stack 0
  2555                           
  2556                           ; 1 bytes @ 0x34
  2557  000094                     	ds	1
  2558  000095                     ??_LCD_Init:
  2559  000095                     ?_ADC_Voltage:
  2560                           	opt stack 0
  2561  000095                     Port_CheckQuadType@Output:
  2562                           	opt stack 0
  2563  000095                     ADC_Voltage@pInput:
  2564                           	opt stack 0
  2565                           
  2566                           ; 2 bytes @ 0x35
  2567  000095                     	ds	1
  2568  000096                     Port_CheckPortType@pInput:
  2569                           	opt stack 0
  2570  000096                     Port_SetQuadType@pInput:
  2571                           	opt stack 0
  2572                           
  2573                           ; 2 bytes @ 0x36
  2574  000096                     	ds	1
  2575  000097                     LCD_Init@i:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0x37
  2579  000097                     	ds	1
  2580  000098                     Port_CheckPortType@pDrive:
  2581                           	opt stack 0
  2582  000098                     Port_SetQuadType@pQuad:
  2583                           	opt stack 0
  2584                           
  2585                           ; 1 bytes @ 0x38
  2586  000098                     	ds	1
  2587  000099                     ??_ADC_Voltage:
  2588  000099                     Port_CheckPortType@Output:
  2589                           	opt stack 0
  2590  000099                     Port_SetQuadType@pType:
  2591                           	opt stack 0
  2592                           
  2593                           ; 1 bytes @ 0x39
  2594  000099                     	ds	1
  2595  00009A                     Port_SetQuadType@Output:
  2596                           	opt stack 0
  2597  00009A                     Port_SetType@pInput:
  2598                           	opt stack 0
  2599                           
  2600                           ; 2 bytes @ 0x3A
  2601  00009A                     	ds	1
  2602  00009B                     Button_Init@pInput:
  2603                           	opt stack 0
  2604  00009B                     ADC_Voltage@max:
  2605                           	opt stack 0
  2606                           
  2607                           ; 4 bytes @ 0x3B
  2608  00009B                     	ds	1
  2609  00009C                     Port_SetType@pType:
  2610                           	opt stack 0
  2611                           
  2612                           ; 1 bytes @ 0x3C
  2613  00009C                     	ds	1
  2614  00009D                     ??_Port_SetType:
  2615  00009D                     Button_Init@pThreshold:
  2616                           	opt stack 0
  2617                           
  2618                           ; 2 bytes @ 0x3D
  2619  00009D                     	ds	2
  2620  00009F                     Port_SetType@Output:
  2621                           	opt stack 0
  2622  00009F                     Button_Init@pInitIO:
  2623                           	opt stack 0
  2624  00009F                     ADC_Voltage@ref:
  2625                           	opt stack 0
  2626                           
  2627                           ; 4 bytes @ 0x3F
  2628  00009F                     	ds	1
  2629  0000A0                     Port_Init@pInput:
  2630                           	opt stack 0
  2631                           
  2632                           ; 2 bytes @ 0x40
  2633  0000A0                     	ds	2
  2634  0000A2                     Port_Init@pPort:
  2635                           	opt stack 0
  2636  0000A2                     Button_Init@pGetState:
  2637                           	opt stack 0
  2638                           
  2639                           ; 3 bytes @ 0x42
  2640  0000A2                     	ds	1
  2641  0000A3                     ??_Port_Init:
  2642  0000A3                     ADC_Voltage@output:
  2643                           	opt stack 0
  2644                           
  2645                           ; 4 bytes @ 0x43
  2646  0000A3                     	ds	2
  2647  0000A5                     Port_Init@i:
  2648                           	opt stack 0
  2649  0000A5                     Button_Init@pFunction:
  2650                           	opt stack 0
  2651                           
  2652                           ; 3 bytes @ 0x45
  2653  0000A5                     	ds	1
  2654  0000A6                     
  2655                           ; 1 bytes @ 0x46
  2656  0000A6                     	ds	1
  2657  0000A7                     ?___fladd:
  2658                           	opt stack 0
  2659  0000A7                     ___fladd@b:
  2660                           	opt stack 0
  2661                           
  2662                           ; 4 bytes @ 0x47
  2663  0000A7                     	ds	1
  2664  0000A8                     HMI_Init@in:
  2665                           	opt stack 0
  2666                           
  2667                           ; 2 bytes @ 0x48
  2668  0000A8                     	ds	2
  2669  0000AA                     
  2670                           ; 1 bytes @ 0x4A
  2671  0000AA                     	ds	1
  2672  0000AB                     ___fladd@a:
  2673                           	opt stack 0
  2674                           
  2675                           ; 4 bytes @ 0x4B
  2676  0000AB                     	ds	4
  2677  0000AF                     ??___fladd:
  2678                           
  2679                           ; 1 bytes @ 0x4F
  2680  0000AF                     	ds	8
  2681  0000B7                     ___fladd@signs:
  2682                           	opt stack 0
  2683                           
  2684                           ; 1 bytes @ 0x57
  2685  0000B7                     	ds	1
  2686  0000B8                     ___fladd@aexp:
  2687                           	opt stack 0
  2688                           
  2689                           ; 1 bytes @ 0x58
  2690  0000B8                     	ds	1
  2691  0000B9                     ___fladd@bexp:
  2692                           	opt stack 0
  2693                           
  2694                           ; 1 bytes @ 0x59
  2695  0000B9                     	ds	1
  2696  0000BA                     ___fladd@grs:
  2697                           	opt stack 0
  2698                           
  2699                           ; 1 bytes @ 0x5A
  2700  0000BA                     	ds	1
  2701  0000BB                     ??_inputVar:
  2702  0000BB                     ?___flsub:
  2703                           	opt stack 0
  2704  0000BB                     ?_eval_poly:
  2705                           	opt stack 0
  2706  0000BB                     ?___fltol:
  2707                           	opt stack 0
  2708  0000BB                     ___fltol@f1:
  2709                           	opt stack 0
  2710  0000BB                     ___flsub@b:
  2711                           	opt stack 0
  2712  0000BB                     eval_poly@x:
  2713                           	opt stack 0
  2714                           
  2715                           ; 4 bytes @ 0x5B
  2716  0000BB                     	ds	4
  2717  0000BF                     ??___fltol:
  2718  0000BF                     eval_poly@d:
  2719                           	opt stack 0
  2720  0000BF                     ___flsub@a:
  2721                           	opt stack 0
  2722                           
  2723                           ; 4 bytes @ 0x5F
  2724  0000BF                     	ds	2
  2725  0000C1                     eval_poly@n:
  2726                           	opt stack 0
  2727                           
  2728                           ; 2 bytes @ 0x61
  2729  0000C1                     	ds	2
  2730  0000C3                     ??_eval_poly:
  2731  0000C3                     ___fltol@sign1:
  2732                           	opt stack 0
  2733                           
  2734                           ; 1 bytes @ 0x63
  2735  0000C3                     	ds	1
  2736  0000C4                     ___fltol@exp1:
  2737                           	opt stack 0
  2738                           
  2739                           ; 1 bytes @ 0x64
  2740  0000C4                     	ds	1
  2741  0000C5                     ?_floor:
  2742                           	opt stack 0
  2743  0000C5                     displayPositionMode@angleDegrees:
  2744                           	opt stack 0
  2745  0000C5                     floor@x:
  2746                           	opt stack 0
  2747                           
  2748                           ; 4 bytes @ 0x65
  2749  0000C5                     	ds	2
  2750  0000C7                     eval_poly@res:
  2751                           	opt stack 0
  2752                           
  2753                           ; 4 bytes @ 0x67
  2754  0000C7                     	ds	2
  2755  0000C9                     floor@i:
  2756                           	opt stack 0
  2757                           
  2758                           ; 4 bytes @ 0x69
  2759  0000C9                     	ds	2
  2760  0000CB                     ?_log:
  2761                           	opt stack 0
  2762  0000CB                     ?_ldexp:
  2763                           	opt stack 0
  2764  0000CB                     ldexp@value:
  2765                           	opt stack 0
  2766  0000CB                     log@x:
  2767                           	opt stack 0
  2768                           
  2769                           ; 4 bytes @ 0x6B
  2770  0000CB                     	ds	2
  2771  0000CD                     floor@expon:
  2772                           	opt stack 0
  2773                           
  2774                           ; 2 bytes @ 0x6D
  2775  0000CD                     	ds	2
  2776  0000CF                     ldexp@newexp:
  2777                           	opt stack 0
  2778  0000CF                     log@exponent:
  2779                           	opt stack 0
  2780                           
  2781                           ; 2 bytes @ 0x6F
  2782  0000CF                     	ds	2
  2783  0000D1                     ??_ldexp:
  2784                           
  2785                           ; 1 bytes @ 0x71
  2786  0000D1                     	ds	2
  2787  0000D3                     ?_exp:
  2788                           	opt stack 0
  2789  0000D3                     exp@x:
  2790                           	opt stack 0
  2791                           
  2792                           ; 4 bytes @ 0x73
  2793  0000D3                     	ds	4
  2794  0000D7                     _exp$15229:
  2795                           	opt stack 0
  2796                           
  2797                           ; 4 bytes @ 0x77
  2798  0000D7                     	ds	4
  2799  0000DB                     exp@exponent:
  2800                           	opt stack 0
  2801                           
  2802                           ; 2 bytes @ 0x7B
  2803  0000DB                     	ds	2
  2804  0000DD                     exp@sign:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x7D
  2808  0000DD                     	ds	1
  2809  0000DE                     ?_pow:
  2810                           	opt stack 0
  2811  0000DE                     pow@x:
  2812                           	opt stack 0
  2813                           
  2814                           ; 4 bytes @ 0x7E
  2815  0000DE                     	ds	4
  2816  0000E2                     pow@y:
  2817                           	opt stack 0
  2818                           
  2819                           ; 4 bytes @ 0x82
  2820  0000E2                     	ds	4
  2821  0000E6                     ??_main:
  2822                           
  2823                           ; 1 bytes @ 0x86
  2824  0000E6                     	ds	2
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           postinc0	equ	0xFEE
  2830                           wreg	equ	0xFE8
  2831                           postdec1	equ	0xFE5
  2832                           fsr1h	equ	0xFE2
  2833                           fsr1l	equ	0xFE1
  2834                           
  2835                           	psect	cstackCOMRAM
  2836  000001                     __pcstackCOMRAM:
  2837                           	opt stack 0
  2838  000001                     i2Byte_SetBit@pInput:
  2839                           	opt stack 0
  2840  000001                     i2Byte_GetZone@pInput:
  2841                           	opt stack 0
  2842  000001                     i2delay_us@us:
  2843                           	opt stack 0
  2844  000001                     i2MXK_Queue@pCallback:
  2845                           	opt stack 0
  2846                           
  2847                           ; 3 bytes @ 0x0
  2848  000001                     	ds	2
  2849  000003                     i2Byte_SetBit@pBit:
  2850                           	opt stack 0
  2851  000003                     i2Byte_GetZone@pMax:
  2852                           	opt stack 0
  2853  000003                     i2delay_us@u:
  2854                           	opt stack 0
  2855                           
  2856                           ; 4 bytes @ 0x2
  2857  000003                     	ds	1
  2858  000004                     i2Byte_SetBit@pValue:
  2859                           	opt stack 0
  2860  000004                     i2Byte_GetZone@pChunk:
  2861                           	opt stack 0
  2862                           
  2863                           ; 1 bytes @ 0x3
  2864  000004                     	ds	1
  2865  000005                     ??i2_Byte_SetBit:
  2866  000005                     i2Byte_GetZone@pChunkSize:
  2867                           	opt stack 0
  2868                           
  2869                           ; 1 bytes @ 0x4
  2870  000005                     	ds	1
  2871  000006                     ??i2_Byte_GetZone:
  2872                           
  2873                           ; 1 bytes @ 0x5
  2874  000006                     	ds	1
  2875  000007                     i2Byte_GetZone@MASK:
  2876                           	opt stack 0
  2877  000007                     i2MXK_SwitchTo@CUR:
  2878                           	opt stack 0
  2879                           
  2880                           ; 1 bytes @ 0x6
  2881  000007                     	ds	1
  2882  000008                     i2Byte_GetZone@Offset:
  2883                           	opt stack 0
  2884  000008                     i2MXK_SwitchTo@pModule:
  2885                           	opt stack 0
  2886                           
  2887                           ; 1 bytes @ 0x7
  2888  000008                     	ds	1
  2889  000009                     i2Byte_GetZone@Output:
  2890                           	opt stack 0
  2891                           
  2892                           ; 1 bytes @ 0x8
  2893  000009                     	ds	1
  2894  00000A                     i2Byte_GetPair@pInput:
  2895                           	opt stack 0
  2896                           
  2897                           ; 2 bytes @ 0x9
  2898  00000A                     	ds	2
  2899  00000C                     i2Byte_GetPair@pPair:
  2900                           	opt stack 0
  2901                           
  2902                           ; 1 bytes @ 0xB
  2903  00000C                     	ds	1
  2904  00000D                     i2Word_GetPair@pInput:
  2905                           	opt stack 0
  2906                           
  2907                           ; 2 bytes @ 0xC
  2908  00000D                     	ds	2
  2909  00000F                     i2Word_GetPair@pPair:
  2910                           	opt stack 0
  2911                           
  2912                           ; 1 bytes @ 0xE
  2913  00000F                     	ds	1
  2914  000010                     i2Port_SetPin@pInput:
  2915                           	opt stack 0
  2916                           
  2917                           ; 2 bytes @ 0xF
  2918  000010                     	ds	2
  2919  000012                     i2Port_SetPin@pPin:
  2920                           	opt stack 0
  2921                           
  2922                           ; 1 bytes @ 0x11
  2923  000012                     	ds	1
  2924  000013                     i2Port_SetPin@pValue:
  2925                           	opt stack 0
  2926                           
  2927                           ; 1 bytes @ 0x12
  2928  000013                     	ds	1
  2929  000014                     i2Port_SetPin@Type:
  2930                           	opt stack 0
  2931                           
  2932                           ; 1 bytes @ 0x13
  2933  000014                     	ds	1
  2934  000015                     
  2935                           ; 1 bytes @ 0x14
  2936  000015                     	ds	2
  2937  000017                     ??_ISR_Function:
  2938                           
  2939                           ; 1 bytes @ 0x16
  2940  000017                     	ds	18
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           postinc0	equ	0xFEE
  2946                           wreg	equ	0xFE8
  2947                           postdec1	equ	0xFE5
  2948                           fsr1h	equ	0xFE2
  2949                           fsr1l	equ	0xFE1
  2950                           
  2951 ;;
  2952 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2953 ;;
  2954 ;; *************** function _main *****************
  2955 ;; Defined at:
  2956 ;;		line 285 in file "main.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;                  1    wreg      void 
  2963 ;; Registers used:
  2964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2965 ;; Tracked objects:
  2966 ;;		On entry : 0/0
  2967 ;;		On exit  : 0/0
  2968 ;;		Unchanged: 0/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Totals:         0       2       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;Total ram usage:        6 bytes
  2975 ;; Hardware stack levels required when called:   18
  2976 ;; This function calls:
  2977 ;;		_Console_Render
  2978 ;;		_Console_SetForecolour
  2979 ;;		_HMI_Render
  2980 ;;		_HMI_SetNumber
  2981 ;;		_MXK_BlockSwitchTo
  2982 ;;		_MXK_Dequeue
  2983 ;;		_MXK_Release
  2984 ;;		___flmul
  2985 ;;		___fltol
  2986 ;;		_continuousMode
  2987 ;;		_displayContinuousMode
  2988 ;;		_displayNullMode
  2989 ;;		_displayPositionMode
  2990 ;;		_displaySID
  2991 ;;		_displayStepMode
  2992 ;;		_getMode
  2993 ;;		_initialise
  2994 ;;		_inputVar
  2995 ;;		_nullMode
  2996 ;;		_positionMode
  2997 ;;		_pow
  2998 ;;		_printf
  2999 ;;		_stepMode
  3000 ;; This function is called by:
  3001 ;;		Startup code after reset
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           	psect	text0
  3006  0131A4                     __ptext0:
  3007                           	opt stack 0
  3008  0131A4                     _main:
  3009                           	opt stack 13
  3010                           
  3011                           ;main.c: 286: initialise();
  3012                           
  3013                           ;incstack = 0
  3014  0131A4  EC86  F0AF         	call	_initialise	;wreg free
  3015  0131A8                     
  3016                           ;main.c: 290: inputVar();
  3017  0131A8  EC64  F0A6         	call	_inputVar	;wreg free
  3018                           
  3019                           ;main.c: 291: getMode();
  3020  0131AC  EC81  F0B0         	call	_getMode	;wreg free
  3021                           
  3022                           ;main.c: 293: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3023  0131B0  0E01               	movlw	1
  3024  0131B2  EC74  F0B3         	call	_MXK_BlockSwitchTo
  3025  0131B6  0900               	iorlw	0
  3026  0131B8  B4D8               	btfsc	status,2,c
  3027  0131BA  D084               	goto	l2121
  3028                           
  3029                           ;main.c: 294: printf("%c", (char)35);
  3030  0131BC  0EFC               	movlw	low STR_16
  3031  0131BE  0100               	movlb	0	; () banked
  3032  0131C0  6F7B               	movwf	printf@f& (0+255),b
  3033  0131C2  0EFF               	movlw	high STR_16
  3034  0131C4  0100               	movlb	0	; () banked
  3035  0131C6  6F7C               	movwf	(printf@f+1)& (0+255),b
  3036  0131C8  0E00               	movlw	0
  3037  0131CA  0100               	movlb	0	; () banked
  3038  0131CC  6F7E               	movwf	(?_printf+3)& (0+255),b
  3039  0131CE  0E23               	movlw	35
  3040  0131D0  6F7D               	movwf	(?_printf+2)& (0+255),b
  3041  0131D2  EC7C  F096         	call	_printf	;wreg free
  3042                           
  3043                           ;main.c: 295: displaySID();
  3044  0131D6  ECD5  F0B5         	call	_displaySID	;wreg free
  3045                           
  3046                           ;main.c: 296: Console_SetForecolour(0xF800);
  3047  0131DA  0EF8               	movlw	248
  3048  0131DC  0100               	movlb	0	; () banked
  3049  0131DE  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3050  0131E0  0E00               	movlw	0
  3051  0131E2  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
  3052  0131E4  EC29  F0B7         	call	_Console_SetForecolour	;wreg free
  3053                           
  3054                           ;main.c: 297: switch (mode) {
  3055  0131E8  D00C               	goto	l2115
  3056  0131EA                     
  3057                           ;main.c: 299: displayContinuousMode();
  3058  0131EA  EC35  F0A4         	call	_displayContinuousMode	;wreg free
  3059                           
  3060                           ;main.c: 300: break;
  3061  0131EE  D01E               	goto	l2117
  3062  0131F0                     
  3063                           ;main.c: 302: displayStepMode();
  3064  0131F0  ECDD  F0AC         	call	_displayStepMode	;wreg free
  3065                           
  3066                           ;main.c: 303: break;
  3067  0131F4  D01B               	goto	l2117
  3068  0131F6                     
  3069                           ;main.c: 305: displayPositionMode();
  3070  0131F6  ECD5  F09E         	call	_displayPositionMode	;wreg free
  3071                           
  3072                           ;main.c: 306: break;
  3073  0131FA  D018               	goto	l2117
  3074  0131FC                     
  3075                           ;main.c: 308: displayNullMode();
  3076  0131FC  EC14  F0B3         	call	_displayNullMode	;wreg free
  3077                           
  3078                           ;main.c: 310: }
  3079                           
  3080                           ;main.c: 309: break;
  3081  013200  D015               	goto	l2117
  3082  013202                     l2115:
  3083  013202  C128  F0E6         	movff	_mode,??_main
  3084  013206  C129  F0E7         	movff	_mode+1,??_main+1
  3085                           
  3086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3087                           ; Switch size 1, requested type "space"
  3088                           ; Number of cases is 1, Range of values is 0 to 0
  3089                           ; switch strategies available:
  3090                           ; Name         Instructions Cycles
  3091                           ; simple_byte            4     3 (average)
  3092                           ;	Chosen strategy is simple_byte
  3093  01320A  0100               	movlb	0	; () banked
  3094  01320C  51E7               	movf	(??_main+1)& (0+255),w,b
  3095  01320E  0A00               	xorlw	0	; case 0
  3096  013210  A4D8               	btfss	status,2,c
  3097  013212  D7F4               	goto	l2120
  3098                           
  3099                           ; BSR set to: 0
  3100                           ; Switch size 1, requested type "space"
  3101                           ; Number of cases is 3, Range of values is 1 to 3
  3102                           ; switch strategies available:
  3103                           ; Name         Instructions Cycles
  3104                           ; simple_byte           10     6 (average)
  3105                           ;	Chosen strategy is simple_byte
  3106  013214  0100               	movlb	0	; () banked
  3107  013216  51E6               	movf	??_main& (0+255),w,b
  3108  013218  0A01               	xorlw	1	; case 1
  3109  01321A  B4D8               	btfsc	status,2,c
  3110  01321C  D7E6               	goto	l2116
  3111  01321E  0A03               	xorlw	3	; case 2
  3112  013220  B4D8               	btfsc	status,2,c
  3113  013222  D7E6               	goto	l2118
  3114  013224  0A01               	xorlw	1	; case 3
  3115  013226  B4D8               	btfsc	status,2,c
  3116  013228  D7E6               	goto	l2119
  3117  01322A  D7E8               	goto	l2120
  3118  01322C                     l2117:
  3119                           
  3120                           ;main.c: 311: Console_Render();
  3121                           
  3122                           ; BSR set to: 0
  3123  01322C  EC42  F08F         	call	_Console_Render	;wreg free
  3124                           
  3125                           ;main.c: 312: IRDistance = 63 * pow(ADCVoltage, -1.10);
  3126  013230  0ECD               	movlw	205
  3127  013232  0100               	movlb	0	; () banked
  3128  013234  6FE2               	movwf	pow@y& (0+255),b
  3129  013236  0ECC               	movlw	204
  3130  013238  6FE3               	movwf	(pow@y+1)& (0+255),b
  3131  01323A  0E8C               	movlw	140
  3132  01323C  6FE4               	movwf	(pow@y+2)& (0+255),b
  3133  01323E  0EBF               	movlw	191
  3134  013240  6FE5               	movwf	(pow@y+3)& (0+255),b
  3135  013242  C0E8  F0DE         	movff	_ADCVoltage,pow@x
  3136  013246  C0E9  F0DF         	movff	_ADCVoltage+1,pow@x+1
  3137  01324A  C0EA  F0E0         	movff	_ADCVoltage+2,pow@x+2
  3138  01324E  C0EB  F0E1         	movff	_ADCVoltage+3,pow@x+3
  3139  013252  EC49  F090         	call	_pow	;wreg free
  3140  013256  C0DE  F1F9         	movff	?_pow,_main$15226
  3141  01325A  C0DF  F1FA         	movff	?_pow+1,_main$15226+1
  3142  01325E  C0E0  F1FB         	movff	?_pow+2,_main$15226+2
  3143  013262  C0E1  F1FC         	movff	?_pow+3,_main$15226+3
  3144                           
  3145                           ;main.c: 312: IRDistance = 63 * pow(ADCVoltage, -1.10);
  3146  013266  0E00               	movlw	0
  3147  013268  0100               	movlb	0	; () banked
  3148  01326A  6F80               	movwf	___flmul@a& (0+255),b
  3149  01326C  0E00               	movlw	0
  3150  01326E  6F81               	movwf	(___flmul@a+1)& (0+255),b
  3151  013270  0E7C               	movlw	124
  3152  013272  6F82               	movwf	(___flmul@a+2)& (0+255),b
  3153  013274  0E42               	movlw	66
  3154  013276  6F83               	movwf	(___flmul@a+3)& (0+255),b
  3155  013278  C1F9  F07C         	movff	_main$15226,___flmul@b
  3156  01327C  C1FA  F07D         	movff	_main$15226+1,___flmul@b+1
  3157  013280  C1FB  F07E         	movff	_main$15226+2,___flmul@b+2
  3158  013284  C1FC  F07F         	movff	_main$15226+3,___flmul@b+3
  3159  013288  EC54  F082         	call	___flmul	;wreg free
  3160  01328C  C07C  F0BB         	movff	?___flmul,___fltol@f1
  3161  013290  C07D  F0BC         	movff	?___flmul+1,___fltol@f1+1
  3162  013294  C07E  F0BD         	movff	?___flmul+2,___fltol@f1+2
  3163  013298  C07F  F0BE         	movff	?___flmul+3,___fltol@f1+3
  3164  01329C  ECF2  F09F         	call	___fltol	;wreg free
  3165  0132A0  C0BB  F124         	movff	?___fltol,_IRDistance
  3166  0132A4  C0BC  F125         	movff	?___fltol+1,_IRDistance+1
  3167                           
  3168                           ;main.c: 313: HMI_SetNumber(IRDistance);
  3169  0132A8  C124  F076         	movff	_IRDistance,HMI_SetNumber@pInput
  3170  0132AC  C125  F077         	movff	_IRDistance+1,HMI_SetNumber@pInput+1
  3171  0132B0  EC3E  F0B5         	call	_HMI_SetNumber	;wreg free
  3172                           
  3173                           ;main.c: 314: HMI_Render();
  3174  0132B4  ECD1  F0B3         	call	_HMI_Render	;wreg free
  3175                           
  3176                           ;main.c: 315: if (MXK_Release())
  3177  0132B8  EC4E  F0B6         	call	_MXK_Release	;wreg free
  3178  0132BC  0900               	iorlw	0
  3179  0132BE  A4D8               	btfss	status,2,c
  3180                           
  3181                           ;main.c: 316: MXK_Dequeue();
  3182  0132C0  EC55  F0B3         	call	_MXK_Dequeue	;wreg free
  3183  0132C4                     l2121:
  3184                           
  3185                           ;main.c: 317: }
  3186                           ;main.c: 320: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  3187  0132C4  0E08               	movlw	8
  3188  0132C6  EC74  F0B3         	call	_MXK_BlockSwitchTo
  3189  0132CA  0900               	iorlw	0
  3190  0132CC  A4D8               	btfss	status,2,c
  3191  0132CE  D00D               	goto	l2123
  3192  0132D0  D76B               	goto	l2113
  3193  0132D2                     
  3194                           ;main.c: 323: nullMode();
  3195  0132D2  EC7C  F0B5         	call	_nullMode	;wreg free
  3196                           
  3197                           ;main.c: 324: break;
  3198  0132D6  D020               	goto	l2125
  3199  0132D8                     
  3200                           ;main.c: 326: continuousMode();
  3201  0132D8  ECAF  F0B4         	call	_continuousMode	;wreg free
  3202                           
  3203                           ;main.c: 327: break;
  3204  0132DC  D01D               	goto	l2125
  3205  0132DE                     
  3206                           ;main.c: 329: stepMode();
  3207  0132DE  ECA1  F0AC         	call	_stepMode	;wreg free
  3208                           
  3209                           ;main.c: 330: break;
  3210  0132E2  D01A               	goto	l2125
  3211  0132E4                     
  3212                           ;main.c: 332: positionMode();
  3213  0132E4  EC0D  F0A3         	call	_positionMode	;wreg free
  3214                           
  3215                           ;main.c: 334: }
  3216                           
  3217                           ;main.c: 333: break;
  3218  0132E8  D017               	goto	l2125
  3219  0132EA                     l2123:
  3220  0132EA  C128  F0E6         	movff	_mode,??_main
  3221  0132EE  C129  F0E7         	movff	_mode+1,??_main+1
  3222                           
  3223                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3224                           ; Switch size 1, requested type "space"
  3225                           ; Number of cases is 1, Range of values is 0 to 0
  3226                           ; switch strategies available:
  3227                           ; Name         Instructions Cycles
  3228                           ; simple_byte            4     3 (average)
  3229                           ;	Chosen strategy is simple_byte
  3230  0132F2  0100               	movlb	0	; () banked
  3231  0132F4  51E7               	movf	(??_main+1)& (0+255),w,b
  3232  0132F6  0A00               	xorlw	0	; case 0
  3233  0132F8  A4D8               	btfss	status,2,c
  3234  0132FA  D00E               	goto	l2125
  3235                           
  3236                           ; BSR set to: 0
  3237                           ; Switch size 1, requested type "space"
  3238                           ; Number of cases is 4, Range of values is 0 to 3
  3239                           ; switch strategies available:
  3240                           ; Name         Instructions Cycles
  3241                           ; simple_byte           13     7 (average)
  3242                           ;	Chosen strategy is simple_byte
  3243  0132FC  0100               	movlb	0	; () banked
  3244  0132FE  51E6               	movf	??_main& (0+255),w,b
  3245  013300  0A00               	xorlw	0	; case 0
  3246  013302  B4D8               	btfsc	status,2,c
  3247  013304  D7E6               	goto	l2124
  3248  013306  0A01               	xorlw	1	; case 1
  3249  013308  B4D8               	btfsc	status,2,c
  3250  01330A  D7E6               	goto	l2126
  3251  01330C  0A03               	xorlw	3	; case 2
  3252  01330E  B4D8               	btfsc	status,2,c
  3253  013310  D7E6               	goto	l2127
  3254  013312  0A01               	xorlw	1	; case 3
  3255  013314  B4D8               	btfsc	status,2,c
  3256  013316  D7E6               	goto	l2128
  3257  013318                     l2125:
  3258                           
  3259                           ;main.c: 335: if (MXK_Release())
  3260                           
  3261                           ; BSR set to: 0
  3262  013318  EC4E  F0B6         	call	_MXK_Release	;wreg free
  3263  01331C  0900               	iorlw	0
  3264  01331E  B4D8               	btfsc	status,2,c
  3265  013320  D743               	goto	l2113
  3266                           
  3267                           ;main.c: 336: MXK_Dequeue();
  3268  013322  EC55  F0B3         	call	_MXK_Dequeue	;wreg free
  3269                           
  3270                           ;main.c: 337: }
  3271                           ;main.c: 338: }
  3272  013326  D740               	goto	l2113
  3273  013328                     __end_of_main:
  3274                           	opt stack 0
  3275                           tblptru	equ	0xFF8
  3276                           tblptrh	equ	0xFF7
  3277                           tblptrl	equ	0xFF6
  3278                           tablat	equ	0xFF5
  3279                           postinc0	equ	0xFEE
  3280                           wreg	equ	0xFE8
  3281                           postdec1	equ	0xFE5
  3282                           fsr1h	equ	0xFE2
  3283                           fsr1l	equ	0xFE1
  3284                           status	equ	0xFD8
  3285                           
  3286 ;; *************** function _stepMode *****************
  3287 ;; Defined at:
  3288 ;;		line 244 in file "main.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3305 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3306 ;;Total ram usage:        0 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:   10
  3309 ;; This function calls:
  3310 ;;		_Motor_Move
  3311 ;;		_Motor_Speed
  3312 ;; This function is called by:
  3313 ;;		_main
  3314 ;; This function uses a non-reentrant model
  3315 ;;
  3316                           
  3317                           	psect	text1
  3318  015942                     __ptext1:
  3319                           	opt stack 0
  3320  015942                     _stepMode:
  3321                           	opt stack 20
  3322                           
  3323                           ;main.c: 245: if (downState && Stepper.mDelta == 0) {
  3324                           
  3325                           ;incstack = 0
  3326  015942  0100               	movlb	0	; () banked
  3327  015944  51F5               	movf	_downState& (0+255),w,b
  3328  015946  B4D8               	btfsc	status,2,c
  3329  015948  D023               	goto	l2099
  3330                           
  3331                           ; BSR set to: 0
  3332  01594A  0101               	movlb	1	; () banked
  3333  01594C  51C3               	movf	_Stepper& (0+255),w,b
  3334  01594E  0101               	movlb	1	; () banked
  3335  015950  11C4               	iorwf	(_Stepper+1)& (0+255),w,b
  3336  015952  A4D8               	btfss	status,2,c
  3337  015954  D01D               	goto	l2099
  3338                           
  3339                           ; BSR set to: 1
  3340                           ;main.c: 246: Motor_Speed(&Stepper, (1*1000L));
  3341  015956  0EC3               	movlw	low _Stepper
  3342  015958  0100               	movlb	0	; () banked
  3343  01595A  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3344  01595C  0E01               	movlw	high _Stepper
  3345  01595E  0100               	movlb	0	; () banked
  3346  015960  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3347  015962  0E03               	movlw	3
  3348  015964  0100               	movlb	0	; () banked
  3349  015966  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3350  015968  0EE8               	movlw	232
  3351  01596A  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3352  01596C  EC53  F0B5         	call	_Motor_Speed	;wreg free
  3353                           
  3354                           ;main.c: 247: Motor_Move(&Stepper, steps);
  3355  015970  0EC3               	movlw	low _Stepper
  3356  015972  0100               	movlb	0	; () banked
  3357  015974  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3358  015976  0E01               	movlw	high _Stepper
  3359  015978  0100               	movlb	0	; () banked
  3360  01597A  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3361  01597C  C02D  F065         	movff	_steps,Motor_Move@pDelta
  3362  015980  C02E  F066         	movff	_steps+1,Motor_Move@pDelta+1
  3363  015984  EC0D  F0B4         	call	_Motor_Move	;wreg free
  3364                           
  3365                           ;main.c: 248: remainingSteps = steps;
  3366  015988  C02D  F120         	movff	_steps,_remainingSteps
  3367  01598C  C02E  F121         	movff	_steps+1,_remainingSteps+1
  3368  015990                     l2099:
  3369                           
  3370                           ;main.c: 249: }
  3371                           ;main.c: 250: if (Stepper.mDelta != 0 && remainingSteps > 0) {
  3372  015990  0101               	movlb	1	; () banked
  3373  015992  51C3               	movf	_Stepper& (0+255),w,b
  3374  015994  0101               	movlb	1	; () banked
  3375  015996  11C4               	iorwf	(_Stepper+1)& (0+255),w,b
  3376  015998  B4D8               	btfsc	status,2,c
  3377  01599A  0012               	return	
  3378                           
  3379                           ; BSR set to: 1
  3380  01599C  0101               	movlb	1	; () banked
  3381  01599E  BF21               	btfsc	(_remainingSteps+1)& (0+255),7,b
  3382  0159A0  0012               	return	
  3383  0159A2  0101               	movlb	1	; () banked
  3384  0159A4  5121               	movf	(_remainingSteps+1)& (0+255),w,b
  3385  0159A6  E104               	bnz	u12590
  3386  0159A8  0101               	movlb	1	; () banked
  3387  0159AA  0520               	decf	_remainingSteps& (0+255),w,b
  3388  0159AC  A0D8               	btfss	status,0,c
  3389  0159AE  0012               	return	
  3390  0159B0                     u12590:
  3391                           
  3392                           ; BSR set to: 1
  3393                           ;main.c: 251: remainingSteps--;
  3394  0159B0  0101               	movlb	1	; () banked
  3395  0159B2  0720               	decf	_remainingSteps& (0+255),f,b
  3396  0159B4  A0D8               	btfss	status,0,c
  3397  0159B6  0721               	decf	(_remainingSteps+1)& (0+255),f,b
  3398  0159B8  0012               	return	
  3399  0159BA                     __end_of_stepMode:
  3400                           	opt stack 0
  3401                           tblptru	equ	0xFF8
  3402                           tblptrh	equ	0xFF7
  3403                           tblptrl	equ	0xFF6
  3404                           tablat	equ	0xFF5
  3405                           postinc0	equ	0xFEE
  3406                           wreg	equ	0xFE8
  3407                           postdec1	equ	0xFE5
  3408                           fsr1h	equ	0xFE2
  3409                           fsr1l	equ	0xFE1
  3410                           status	equ	0xFD8
  3411                           
  3412 ;; *************** function _pow *****************
  3413 ;; Defined at:
  3414 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
  3415 ;; Parameters:    Size  Location     Type
  3416 ;;  x               4  126[BANK0 ] void 
  3417 ;;  y               4  130[BANK0 ] void 
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;  yi              4    9[BANK2 ] unsigned long 
  3420 ;;  sign            1    8[BANK2 ] unsigned char 
  3421 ;; Return value:  Size  Location     Type
  3422 ;;                  4  126[BANK0 ] unsigned char 
  3423 ;; Registers used:
  3424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3425 ;; Tracked objects:
  3426 ;;		On entry : 0/0
  3427 ;;		On exit  : 0/0
  3428 ;;		Unchanged: 0/0
  3429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3430 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;      Locals:         0       0       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3432 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3433 ;;      Totals:         0       8       0      13       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3434 ;;Total ram usage:       21 bytes
  3435 ;; Hardware stack levels used:    1
  3436 ;; Hardware stack levels required when called:   10
  3437 ;; This function calls:
  3438 ;;		___flge
  3439 ;;		___flmul
  3440 ;;		___flneg
  3441 ;;		___fltol
  3442 ;;		___xxtofl
  3443 ;;		_exp
  3444 ;;		_log
  3445 ;; This function is called by:
  3446 ;;		_main
  3447 ;; This function uses a non-reentrant model
  3448 ;;
  3449                           
  3450                           	psect	text2
  3451  012092                     __ptext2:
  3452                           	opt stack 0
  3453  012092                     _pow:
  3454                           	opt stack 20
  3455                           
  3456                           ; BSR set to: 1
  3457                           ;incstack = 0
  3458  012092  0E00               	movlw	0
  3459  012094  0102               	movlb	2	; () banked
  3460  012096  6F8A               	movwf	pow@sign& (0+255),b
  3461                           
  3462                           ; BSR set to: 2
  3463  012098  0100               	movlb	0	; () banked
  3464  01209A  51DE               	movf	pow@x& (0+255),w,b
  3465  01209C  0100               	movlb	0	; () banked
  3466  01209E  11DF               	iorwf	(pow@x+1)& (0+255),w,b
  3467  0120A0  0100               	movlb	0	; () banked
  3468  0120A2  11E0               	iorwf	(pow@x+2)& (0+255),w,b
  3469  0120A4  0100               	movlb	0	; () banked
  3470  0120A6  11E1               	iorwf	(pow@x+3)& (0+255),w,b
  3471  0120A8  A4D8               	btfss	status,2,c
  3472  0120AA  D025               	goto	l2596
  3473                           
  3474                           ; BSR set to: 0
  3475  0120AC  0E00               	movlw	0
  3476  0120AE  0100               	movlb	0	; () banked
  3477  0120B0  6F60               	movwf	___flge@ff1& (0+255),b
  3478  0120B2  0E00               	movlw	0
  3479  0120B4  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  3480  0120B6  0E00               	movlw	0
  3481  0120B8  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  3482  0120BA  0E00               	movlw	0
  3483  0120BC  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  3484  0120BE  C0E2  F064         	movff	pow@y,___flge@ff2
  3485  0120C2  C0E3  F065         	movff	pow@y+1,___flge@ff2+1
  3486  0120C6  C0E4  F066         	movff	pow@y+2,___flge@ff2+2
  3487  0120CA  C0E5  F067         	movff	pow@y+3,___flge@ff2+3
  3488  0120CE  EC45  F097         	call	___flge	;wreg free
  3489  0120D2  0100               	movlb	0	; () banked
  3490  0120D4  A0D8               	btfss	status,0,c
  3491  0120D6  D005               	goto	l2597
  3492                           
  3493                           ; BSR set to: 0
  3494  0120D8  0E00               	movlw	0
  3495  0120DA  0101               	movlb	1	; () banked
  3496  0120DC  6F1B               	movwf	(_errno+1)& (0+255),b
  3497  0120DE  0E21               	movlw	33
  3498  0120E0  6F1A               	movwf	_errno& (0+255),b
  3499  0120E2                     l2597:
  3500  0120E2  0E00               	movlw	0
  3501  0120E4  0100               	movlb	0	; () banked
  3502  0120E6  6FDE               	movwf	?_pow& (0+255),b
  3503  0120E8  0E00               	movlw	0
  3504  0120EA  6FDF               	movwf	(?_pow+1)& (0+255),b
  3505  0120EC  0E00               	movlw	0
  3506  0120EE  6FE0               	movwf	(?_pow+2)& (0+255),b
  3507  0120F0  0E00               	movlw	0
  3508  0120F2  6FE1               	movwf	(?_pow+3)& (0+255),b
  3509                           
  3510                           ; BSR set to: 0
  3511  0120F4  0012               	return	
  3512  0120F6                     l2596:
  3513                           
  3514                           ; BSR set to: 0
  3515                           
  3516                           ; BSR set to: 0
  3517  0120F6  0100               	movlb	0	; () banked
  3518  0120F8  51E2               	movf	pow@y& (0+255),w,b
  3519  0120FA  0100               	movlb	0	; () banked
  3520  0120FC  11E3               	iorwf	(pow@y+1)& (0+255),w,b
  3521  0120FE  0100               	movlb	0	; () banked
  3522  012100  11E4               	iorwf	(pow@y+2)& (0+255),w,b
  3523  012102  0100               	movlb	0	; () banked
  3524  012104  11E5               	iorwf	(pow@y+3)& (0+255),w,b
  3525  012106  A4D8               	btfss	status,2,c
  3526  012108  D00A               	goto	l2599
  3527                           
  3528                           ; BSR set to: 0
  3529  01210A  0E00               	movlw	0
  3530  01210C  0100               	movlb	0	; () banked
  3531  01210E  6FDE               	movwf	?_pow& (0+255),b
  3532  012110  0E00               	movlw	0
  3533  012112  6FDF               	movwf	(?_pow+1)& (0+255),b
  3534  012114  0E80               	movlw	128
  3535  012116  6FE0               	movwf	(?_pow+2)& (0+255),b
  3536  012118  0E3F               	movlw	63
  3537  01211A  6FE1               	movwf	(?_pow+3)& (0+255),b
  3538                           
  3539                           ; BSR set to: 0
  3540  01211C  0012               	return	
  3541  01211E                     l2599:
  3542                           
  3543                           ; BSR set to: 0
  3544                           
  3545                           ; BSR set to: 0
  3546  01211E  0100               	movlb	0	; () banked
  3547  012120  AFE1               	btfss	(pow@x+3)& (0+255),7,b
  3548  012122  D058               	goto	l2600
  3549                           
  3550                           ; BSR set to: 0
  3551  012124  C0E2  F0BB         	movff	pow@y,___fltol@f1
  3552  012128  C0E3  F0BC         	movff	pow@y+1,___fltol@f1+1
  3553  01212C  C0E4  F0BD         	movff	pow@y+2,___fltol@f1+2
  3554  012130  C0E5  F0BE         	movff	pow@y+3,___fltol@f1+3
  3555  012134  ECF2  F09F         	call	___fltol	;wreg free
  3556  012138  C0BB  F28B         	movff	?___fltol,pow@yi
  3557  01213C  C0BC  F28C         	movff	?___fltol+1,pow@yi+1
  3558  012140  C0BD  F28D         	movff	?___fltol+2,pow@yi+2
  3559  012144  C0BE  F28E         	movff	?___fltol+3,pow@yi+3
  3560  012148  C28B  F06E         	movff	pow@yi,___xxtofl@val
  3561  01214C  C28C  F06F         	movff	pow@yi+1,___xxtofl@val+1
  3562  012150  C28D  F070         	movff	pow@yi+2,___xxtofl@val+2
  3563  012154  C28E  F071         	movff	pow@yi+3,___xxtofl@val+3
  3564  012158  0E00               	movlw	0
  3565  01215A  EC46  F092         	call	___xxtofl
  3566  01215E  0100               	movlb	0	; () banked
  3567  012160  51E2               	movf	pow@y& (0+255),w,b
  3568  012162  0100               	movlb	0	; () banked
  3569  012164  196E               	xorwf	?___xxtofl& (0+255),w,b
  3570  012166  E110               	bnz	u12650
  3571  012168  0100               	movlb	0	; () banked
  3572  01216A  51E3               	movf	(pow@y+1)& (0+255),w,b
  3573  01216C  0100               	movlb	0	; () banked
  3574  01216E  196F               	xorwf	(?___xxtofl+1)& (0+255),w,b
  3575  012170  E10B               	bnz	u12650
  3576  012172  0100               	movlb	0	; () banked
  3577  012174  51E4               	movf	(pow@y+2)& (0+255),w,b
  3578  012176  0100               	movlb	0	; () banked
  3579  012178  1970               	xorwf	(?___xxtofl+2)& (0+255),w,b
  3580  01217A  E106               	bnz	u12650
  3581  01217C  0100               	movlb	0	; () banked
  3582  01217E  51E5               	movf	(pow@y+3)& (0+255),w,b
  3583  012180  0100               	movlb	0	; () banked
  3584  012182  1971               	xorwf	(?___xxtofl+3)& (0+255),w,b
  3585  012184  B4D8               	btfsc	status,2,c
  3586  012186  D00F               	goto	l2601
  3587  012188                     u12650:
  3588                           
  3589                           ; BSR set to: 0
  3590  012188  0E00               	movlw	0
  3591  01218A  0101               	movlb	1	; () banked
  3592  01218C  6F1B               	movwf	(_errno+1)& (0+255),b
  3593  01218E  0E21               	movlw	33
  3594  012190  6F1A               	movwf	_errno& (0+255),b
  3595  012192  0E00               	movlw	0
  3596  012194  0100               	movlb	0	; () banked
  3597  012196  6FDE               	movwf	?_pow& (0+255),b
  3598  012198  0E00               	movlw	0
  3599  01219A  6FDF               	movwf	(?_pow+1)& (0+255),b
  3600  01219C  0E00               	movlw	0
  3601  01219E  6FE0               	movwf	(?_pow+2)& (0+255),b
  3602  0121A0  0E00               	movlw	0
  3603  0121A2  6FE1               	movwf	(?_pow+3)& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606  0121A4  0012               	return	
  3607  0121A6                     l2601:
  3608                           
  3609                           ; BSR set to: 0
  3610                           
  3611                           ; BSR set to: 0
  3612  0121A6  0102               	movlb	2	; () banked
  3613  0121A8  518B               	movf	pow@yi& (0+255),w,b
  3614  0121AA  0B01               	andlw	1
  3615  0121AC  0102               	movlb	2	; () banked
  3616  0121AE  6F8A               	movwf	pow@sign& (0+255),b
  3617                           
  3618                           ; BSR set to: 2
  3619  0121B0  C0DE  F07C         	movff	pow@x,___flneg@f1
  3620  0121B4  C0DF  F07D         	movff	pow@x+1,___flneg@f1+1
  3621  0121B8  C0E0  F07E         	movff	pow@x+2,___flneg@f1+2
  3622  0121BC  C0E1  F07F         	movff	pow@x+3,___flneg@f1+3
  3623  0121C0  EC2A  F0B4         	call	___flneg	;wreg free
  3624  0121C4  C07C  F0DE         	movff	?___flneg,pow@x
  3625  0121C8  C07D  F0DF         	movff	?___flneg+1,pow@x+1
  3626  0121CC  C07E  F0E0         	movff	?___flneg+2,pow@x+2
  3627  0121D0  C07F  F0E1         	movff	?___flneg+3,pow@x+3
  3628  0121D4                     l2600:
  3629  0121D4  C0DE  F0CB         	movff	pow@x,log@x
  3630  0121D8  C0DF  F0CC         	movff	pow@x+1,log@x+1
  3631  0121DC  C0E0  F0CD         	movff	pow@x+2,log@x+2
  3632  0121E0  C0E1  F0CE         	movff	pow@x+3,log@x+3
  3633  0121E4  EC0D  F098         	call	_log	;wreg free
  3634  0121E8  C0CB  F282         	movff	?_log,_pow$15227
  3635  0121EC  C0CC  F283         	movff	?_log+1,_pow$15227+1
  3636  0121F0  C0CD  F284         	movff	?_log+2,_pow$15227+2
  3637  0121F4  C0CE  F285         	movff	?_log+3,_pow$15227+3
  3638  0121F8  C282  F07C         	movff	_pow$15227,___flmul@b
  3639  0121FC  C283  F07D         	movff	_pow$15227+1,___flmul@b+1
  3640  012200  C284  F07E         	movff	_pow$15227+2,___flmul@b+2
  3641  012204  C285  F07F         	movff	_pow$15227+3,___flmul@b+3
  3642  012208  C0E2  F080         	movff	pow@y,___flmul@a
  3643  01220C  C0E3  F081         	movff	pow@y+1,___flmul@a+1
  3644  012210  C0E4  F082         	movff	pow@y+2,___flmul@a+2
  3645  012214  C0E5  F083         	movff	pow@y+3,___flmul@a+3
  3646  012218  EC54  F082         	call	___flmul	;wreg free
  3647  01221C  C07C  F286         	movff	?___flmul,_pow$15228
  3648  012220  C07D  F287         	movff	?___flmul+1,_pow$15228+1
  3649  012224  C07E  F288         	movff	?___flmul+2,_pow$15228+2
  3650  012228  C07F  F289         	movff	?___flmul+3,_pow$15228+3
  3651  01222C  C286  F0D3         	movff	_pow$15228,exp@x
  3652  012230  C287  F0D4         	movff	_pow$15228+1,exp@x+1
  3653  012234  C288  F0D5         	movff	_pow$15228+2,exp@x+2
  3654  012238  C289  F0D6         	movff	_pow$15228+3,exp@x+3
  3655  01223C  EC73  F08A         	call	_exp	;wreg free
  3656  012240  C0D3  F0DE         	movff	?_exp,pow@x
  3657  012244  C0D4  F0DF         	movff	?_exp+1,pow@x+1
  3658  012248  C0D5  F0E0         	movff	?_exp+2,pow@x+2
  3659  01224C  C0D6  F0E1         	movff	?_exp+3,pow@x+3
  3660  012250  0102               	movlb	2	; () banked
  3661  012252  518A               	movf	pow@sign& (0+255),w,b
  3662  012254  0102               	movlb	2	; () banked
  3663  012256  B4D8               	btfsc	status,2,c
  3664  012258  D013               	goto	l2602
  3665                           
  3666                           ; BSR set to: 2
  3667  01225A  C0DE  F07C         	movff	pow@x,___flneg@f1
  3668  01225E  C0DF  F07D         	movff	pow@x+1,___flneg@f1+1
  3669  012262  C0E0  F07E         	movff	pow@x+2,___flneg@f1+2
  3670  012266  C0E1  F07F         	movff	pow@x+3,___flneg@f1+3
  3671  01226A  EC2A  F0B4         	call	___flneg	;wreg free
  3672  01226E  C07C  F0DE         	movff	?___flneg,?_pow
  3673  012272  C07D  F0DF         	movff	?___flneg+1,?_pow+1
  3674  012276  C07E  F0E0         	movff	?___flneg+2,?_pow+2
  3675  01227A  C07F  F0E1         	movff	?___flneg+3,?_pow+3
  3676  01227E  0012               	return	
  3677  012280                     l2602:
  3678                           
  3679                           ; BSR set to: 2
  3680  012280  C0DE  F0DE         	movff	pow@x,?_pow
  3681  012284  C0DF  F0DF         	movff	pow@x+1,?_pow+1
  3682  012288  C0E0  F0E0         	movff	pow@x+2,?_pow+2
  3683  01228C  C0E1  F0E1         	movff	pow@x+3,?_pow+3
  3684  012290  0012               	return		;funcret
  3685  012292                     __end_of_pow:
  3686                           	opt stack 0
  3687                           tblptru	equ	0xFF8
  3688                           tblptrh	equ	0xFF7
  3689                           tblptrl	equ	0xFF6
  3690                           tablat	equ	0xFF5
  3691                           postinc0	equ	0xFEE
  3692                           wreg	equ	0xFE8
  3693                           postdec1	equ	0xFE5
  3694                           fsr1h	equ	0xFE2
  3695                           fsr1l	equ	0xFE1
  3696                           status	equ	0xFD8
  3697                           
  3698 ;; *************** function _log *****************
  3699 ;; Defined at:
  3700 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;  x               4  107[BANK0 ] unsigned char 
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;  exponent        2  111[BANK0 ] int 
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  4  107[BANK0 ] int 
  3707 ;; Registers used:
  3708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3709 ;; Tracked objects:
  3710 ;;		On entry : 0/0
  3711 ;;		On exit  : 0/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3714 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3717 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;Total ram usage:        6 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    9
  3721 ;; This function calls:
  3722 ;;		___fladd
  3723 ;;		___flmul
  3724 ;;		___xxtofl
  3725 ;;		_eval_poly
  3726 ;;		_frexp
  3727 ;; This function is called by:
  3728 ;;		_pow
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text3
  3733  01301A                     __ptext3:
  3734                           	opt stack 0
  3735  01301A                     _log:
  3736                           	opt stack 20
  3737                           
  3738                           ;incstack = 0
  3739  01301A  0100               	movlb	0	; () banked
  3740  01301C  AFCE               	btfss	(log@x+3)& (0+255),7,b
  3741  01301E  D00F               	goto	l2798
  3742                           
  3743                           ; BSR set to: 0
  3744  013020  0E00               	movlw	0
  3745  013022  0101               	movlb	1	; () banked
  3746  013024  6F1B               	movwf	(_errno+1)& (0+255),b
  3747  013026  0E21               	movlw	33
  3748  013028  6F1A               	movwf	_errno& (0+255),b
  3749  01302A  0E00               	movlw	0
  3750  01302C  0100               	movlb	0	; () banked
  3751  01302E  6FCB               	movwf	?_log& (0+255),b
  3752  013030  0E00               	movlw	0
  3753  013032  6FCC               	movwf	(?_log+1)& (0+255),b
  3754  013034  0E00               	movlw	0
  3755  013036  6FCD               	movwf	(?_log+2)& (0+255),b
  3756  013038  0E00               	movlw	0
  3757  01303A  6FCE               	movwf	(?_log+3)& (0+255),b
  3758                           
  3759                           ; BSR set to: 0
  3760  01303C  0012               	return	
  3761  01303E                     l2798:
  3762                           
  3763                           ; BSR set to: 0
  3764                           
  3765                           ; BSR set to: 0
  3766  01303E  0100               	movlb	0	; () banked
  3767  013040  51CB               	movf	log@x& (0+255),w,b
  3768  013042  0100               	movlb	0	; () banked
  3769  013044  11CC               	iorwf	(log@x+1)& (0+255),w,b
  3770  013046  0100               	movlb	0	; () banked
  3771  013048  11CD               	iorwf	(log@x+2)& (0+255),w,b
  3772  01304A  0100               	movlb	0	; () banked
  3773  01304C  11CE               	iorwf	(log@x+3)& (0+255),w,b
  3774  01304E  A4D8               	btfss	status,2,c
  3775  013050  D00F               	goto	l2800
  3776                           
  3777                           ; BSR set to: 0
  3778  013052  0E00               	movlw	0
  3779  013054  0101               	movlb	1	; () banked
  3780  013056  6F1B               	movwf	(_errno+1)& (0+255),b
  3781  013058  0E22               	movlw	34
  3782  01305A  6F1A               	movwf	_errno& (0+255),b
  3783  01305C  0E00               	movlw	0
  3784  01305E  0100               	movlb	0	; () banked
  3785  013060  6FCB               	movwf	?_log& (0+255),b
  3786  013062  0E00               	movlw	0
  3787  013064  6FCC               	movwf	(?_log+1)& (0+255),b
  3788  013066  0E00               	movlw	0
  3789  013068  6FCD               	movwf	(?_log+2)& (0+255),b
  3790  01306A  0E00               	movlw	0
  3791  01306C  6FCE               	movwf	(?_log+3)& (0+255),b
  3792                           
  3793                           ; BSR set to: 0
  3794  01306E  0012               	return	
  3795  013070                     l2800:
  3796                           
  3797                           ; BSR set to: 0
  3798                           
  3799                           ; BSR set to: 0
  3800  013070  0E00               	movlw	0
  3801  013072  0100               	movlb	0	; () banked
  3802  013074  6F80               	movwf	___flmul@a& (0+255),b
  3803  013076  0E00               	movlw	0
  3804  013078  6F81               	movwf	(___flmul@a+1)& (0+255),b
  3805  01307A  0E00               	movlw	0
  3806  01307C  6F82               	movwf	(___flmul@a+2)& (0+255),b
  3807  01307E  0E40               	movlw	64
  3808  013080  6F83               	movwf	(___flmul@a+3)& (0+255),b
  3809  013082  0ECF               	movlw	low log@exponent
  3810  013084  0100               	movlb	0	; () banked
  3811  013086  6F64               	movwf	frexp@eptr& (0+255),b
  3812  013088  0E00               	movlw	high log@exponent
  3813  01308A  0100               	movlb	0	; () banked
  3814  01308C  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  3815  01308E  C0CB  F060         	movff	log@x,frexp@value
  3816  013092  C0CC  F061         	movff	log@x+1,frexp@value+1
  3817  013096  C0CD  F062         	movff	log@x+2,frexp@value+2
  3818  01309A  C0CE  F063         	movff	log@x+3,frexp@value+3
  3819  01309E  ECAE  F0A5         	call	_frexp	;wreg free
  3820  0130A2  C060  F07C         	movff	?_frexp,___flmul@b
  3821  0130A6  C061  F07D         	movff	?_frexp+1,___flmul@b+1
  3822  0130AA  C062  F07E         	movff	?_frexp+2,___flmul@b+2
  3823  0130AE  C063  F07F         	movff	?_frexp+3,___flmul@b+3
  3824  0130B2  EC54  F082         	call	___flmul	;wreg free
  3825  0130B6  C07C  F0A7         	movff	?___flmul,___fladd@b
  3826  0130BA  C07D  F0A8         	movff	?___flmul+1,___fladd@b+1
  3827  0130BE  C07E  F0A9         	movff	?___flmul+2,___fladd@b+2
  3828  0130C2  C07F  F0AA         	movff	?___flmul+3,___fladd@b+3
  3829  0130C6  0E00               	movlw	0
  3830  0130C8  0100               	movlb	0	; () banked
  3831  0130CA  6FAB               	movwf	___fladd@a& (0+255),b
  3832  0130CC  0E00               	movlw	0
  3833  0130CE  6FAC               	movwf	(___fladd@a+1)& (0+255),b
  3834  0130D0  0E80               	movlw	128
  3835  0130D2  6FAD               	movwf	(___fladd@a+2)& (0+255),b
  3836  0130D4  0EBF               	movlw	191
  3837  0130D6  6FAE               	movwf	(___fladd@a+3)& (0+255),b
  3838  0130D8  EC00  F080         	call	___fladd	;wreg free
  3839  0130DC  C0A7  F0CB         	movff	?___fladd,log@x
  3840  0130E0  C0A8  F0CC         	movff	?___fladd+1,log@x+1
  3841  0130E4  C0A9  F0CD         	movff	?___fladd+2,log@x+2
  3842  0130E8  C0AA  F0CE         	movff	?___fladd+3,log@x+3
  3843  0130EC  0100               	movlb	0	; () banked
  3844  0130EE  07CF               	decf	log@exponent& (0+255),f,b
  3845  0130F0  A0D8               	btfss	status,0,c
  3846  0130F2  07D0               	decf	(log@exponent+1)& (0+255),f,b
  3847                           
  3848                           ; BSR set to: 0
  3849  0130F4  C0CB  F0BB         	movff	log@x,eval_poly@x
  3850  0130F8  C0CC  F0BC         	movff	log@x+1,eval_poly@x+1
  3851  0130FC  C0CD  F0BD         	movff	log@x+2,eval_poly@x+2
  3852  013100  C0CE  F0BE         	movff	log@x+3,eval_poly@x+3
  3853  013104  0ED7               	movlw	low log@coeff
  3854  013106  0100               	movlb	0	; () banked
  3855  013108  6FBF               	movwf	eval_poly@d& (0+255),b
  3856  01310A  0EFE               	movlw	high log@coeff
  3857  01310C  0100               	movlb	0	; () banked
  3858  01310E  6FC0               	movwf	(eval_poly@d+1)& (0+255),b
  3859  013110  0E00               	movlw	0
  3860  013112  0100               	movlb	0	; () banked
  3861  013114  6FC2               	movwf	(eval_poly@n+1)& (0+255),b
  3862  013116  0E08               	movlw	8
  3863  013118  6FC1               	movwf	eval_poly@n& (0+255),b
  3864  01311A  EC66  F09F         	call	_eval_poly	;wreg free
  3865  01311E  C0BB  F0CB         	movff	?_eval_poly,log@x
  3866  013122  C0BC  F0CC         	movff	?_eval_poly+1,log@x+1
  3867  013126  C0BD  F0CD         	movff	?_eval_poly+2,log@x+2
  3868  01312A  C0BE  F0CE         	movff	?_eval_poly+3,log@x+3
  3869  01312E  0E18               	movlw	24
  3870  013130  0100               	movlb	0	; () banked
  3871  013132  6F80               	movwf	___flmul@a& (0+255),b
  3872  013134  0E72               	movlw	114
  3873  013136  6F81               	movwf	(___flmul@a+1)& (0+255),b
  3874  013138  0E31               	movlw	49
  3875  01313A  6F82               	movwf	(___flmul@a+2)& (0+255),b
  3876  01313C  0E3F               	movlw	63
  3877  01313E  6F83               	movwf	(___flmul@a+3)& (0+255),b
  3878  013140  C0CF  F06E         	movff	log@exponent,___xxtofl@val
  3879  013144  C0D0  F06F         	movff	log@exponent+1,___xxtofl@val+1
  3880  013148  0100               	movlb	0	; () banked
  3881  01314A  0E00               	movlw	0
  3882  01314C  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3883  01314E  0EFF               	movlw	-1
  3884  013150  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
  3885  013152  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
  3886  013154  0E01               	movlw	1
  3887  013156  EC46  F092         	call	___xxtofl
  3888  01315A  C06E  F07C         	movff	?___xxtofl,___flmul@b
  3889  01315E  C06F  F07D         	movff	?___xxtofl+1,___flmul@b+1
  3890  013162  C070  F07E         	movff	?___xxtofl+2,___flmul@b+2
  3891  013166  C071  F07F         	movff	?___xxtofl+3,___flmul@b+3
  3892  01316A  EC54  F082         	call	___flmul	;wreg free
  3893  01316E  C07C  F0A7         	movff	?___flmul,___fladd@b
  3894  013172  C07D  F0A8         	movff	?___flmul+1,___fladd@b+1
  3895  013176  C07E  F0A9         	movff	?___flmul+2,___fladd@b+2
  3896  01317A  C07F  F0AA         	movff	?___flmul+3,___fladd@b+3
  3897  01317E  C0CB  F0AB         	movff	log@x,___fladd@a
  3898  013182  C0CC  F0AC         	movff	log@x+1,___fladd@a+1
  3899  013186  C0CD  F0AD         	movff	log@x+2,___fladd@a+2
  3900  01318A  C0CE  F0AE         	movff	log@x+3,___fladd@a+3
  3901  01318E  EC00  F080         	call	___fladd	;wreg free
  3902  013192  C0A7  F0CB         	movff	?___fladd,?_log
  3903  013196  C0A8  F0CC         	movff	?___fladd+1,?_log+1
  3904  01319A  C0A9  F0CD         	movff	?___fladd+2,?_log+2
  3905  01319E  C0AA  F0CE         	movff	?___fladd+3,?_log+3
  3906  0131A2  0012               	return	
  3907  0131A4                     __end_of_log:
  3908                           	opt stack 0
  3909                           tblptru	equ	0xFF8
  3910                           tblptrh	equ	0xFF7
  3911                           tblptrl	equ	0xFF6
  3912                           tablat	equ	0xFF5
  3913                           postinc0	equ	0xFEE
  3914                           wreg	equ	0xFE8
  3915                           postdec1	equ	0xFE5
  3916                           fsr1h	equ	0xFE2
  3917                           fsr1l	equ	0xFE1
  3918                           status	equ	0xFD8
  3919                           
  3920 ;; *************** function _exp *****************
  3921 ;; Defined at:
  3922 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  x               4  115[BANK0 ] int 
  3925 ;; Auto vars:     Size  Location     Type
  3926 ;;  exponent        2  123[BANK0 ] int 
  3927 ;;  sign            1  125[BANK0 ] unsigned char 
  3928 ;; Return value:  Size  Location     Type
  3929 ;;                  4  115[BANK0 ] unsigned char 
  3930 ;; Registers used:
  3931 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3932 ;; Tracked objects:
  3933 ;;		On entry : 0/0
  3934 ;;		On exit  : 0/0
  3935 ;;		Unchanged: 0/0
  3936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3937 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3938 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;Total ram usage:       11 bytes
  3942 ;; Hardware stack levels used:    1
  3943 ;; Hardware stack levels required when called:    9
  3944 ;; This function calls:
  3945 ;;		___fldiv
  3946 ;;		___flge
  3947 ;;		___flmul
  3948 ;;		___flneg
  3949 ;;		___flsub
  3950 ;;		___fltol
  3951 ;;		___xxtofl
  3952 ;;		_eval_poly
  3953 ;;		_floor
  3954 ;;		_ldexp
  3955 ;; This function is called by:
  3956 ;;		_pow
  3957 ;; This function uses a non-reentrant model
  3958 ;;
  3959                           
  3960                           	psect	text4
  3961  0114E6                     __ptext4:
  3962                           	opt stack 0
  3963  0114E6                     _exp:
  3964                           	opt stack 20
  3965                           
  3966                           ;incstack = 0
  3967  0114E6  0100               	movlb	0	; () banked
  3968  0114E8  51D3               	movf	exp@x& (0+255),w,b
  3969  0114EA  0100               	movlb	0	; () banked
  3970  0114EC  11D4               	iorwf	(exp@x+1)& (0+255),w,b
  3971  0114EE  0100               	movlb	0	; () banked
  3972  0114F0  11D5               	iorwf	(exp@x+2)& (0+255),w,b
  3973  0114F2  0100               	movlb	0	; () banked
  3974  0114F4  11D6               	iorwf	(exp@x+3)& (0+255),w,b
  3975  0114F6  A4D8               	btfss	status,2,c
  3976  0114F8  D00A               	goto	l2756
  3977                           
  3978                           ; BSR set to: 0
  3979  0114FA  0E00               	movlw	0
  3980  0114FC  0100               	movlb	0	; () banked
  3981  0114FE  6FD3               	movwf	?_exp& (0+255),b
  3982  011500  0E00               	movlw	0
  3983  011502  6FD4               	movwf	(?_exp+1)& (0+255),b
  3984  011504  0E80               	movlw	128
  3985  011506  6FD5               	movwf	(?_exp+2)& (0+255),b
  3986  011508  0E3F               	movlw	63
  3987  01150A  6FD6               	movwf	(?_exp+3)& (0+255),b
  3988                           
  3989                           ; BSR set to: 0
  3990  01150C  0012               	return	
  3991  01150E                     l2756:
  3992                           
  3993                           ; BSR set to: 0
  3994                           
  3995                           ; BSR set to: 0
  3996  01150E  0E18               	movlw	24
  3997  011510  0100               	movlb	0	; () banked
  3998  011512  6F60               	movwf	___flge@ff1& (0+255),b
  3999  011514  0E72               	movlw	114
  4000  011516  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  4001  011518  0E31               	movlw	49
  4002  01151A  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  4003  01151C  0E44               	movlw	68
  4004  01151E  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  4005  011520  C0D3  F064         	movff	exp@x,___flge@ff2
  4006  011524  C0D4  F065         	movff	exp@x+1,___flge@ff2+1
  4007  011528  C0D5  F066         	movff	exp@x+2,___flge@ff2+2
  4008  01152C  C0D6  F067         	movff	exp@x+3,___flge@ff2+3
  4009  011530  EC45  F097         	call	___flge	;wreg free
  4010  011534  0100               	movlb	0	; () banked
  4011  011536  B0D8               	btfsc	status,0,c
  4012  011538  D00F               	goto	l2758
  4013                           
  4014                           ; BSR set to: 0
  4015  01153A  0E00               	movlw	0
  4016  01153C  0101               	movlb	1	; () banked
  4017  01153E  6F1B               	movwf	(_errno+1)& (0+255),b
  4018  011540  0E22               	movlw	34
  4019  011542  6F1A               	movwf	_errno& (0+255),b
  4020  011544  0EFF               	movlw	255
  4021  011546  0100               	movlb	0	; () banked
  4022  011548  6FD3               	movwf	?_exp& (0+255),b
  4023  01154A  0EFF               	movlw	255
  4024  01154C  6FD4               	movwf	(?_exp+1)& (0+255),b
  4025  01154E  0E7F               	movlw	127
  4026  011550  6FD5               	movwf	(?_exp+2)& (0+255),b
  4027  011552  0E7F               	movlw	127
  4028  011554  6FD6               	movwf	(?_exp+3)& (0+255),b
  4029                           
  4030                           ; BSR set to: 0
  4031  011556  0012               	return	
  4032  011558                     l2758:
  4033                           
  4034                           ; BSR set to: 0
  4035                           
  4036                           ; BSR set to: 0
  4037  011558  C0D3  F060         	movff	exp@x,___flge@ff1
  4038  01155C  C0D4  F061         	movff	exp@x+1,___flge@ff1+1
  4039  011560  C0D5  F062         	movff	exp@x+2,___flge@ff1+2
  4040  011564  C0D6  F063         	movff	exp@x+3,___flge@ff1+3
  4041  011568  0E87               	movlw	135
  4042  01156A  0100               	movlb	0	; () banked
  4043  01156C  6F64               	movwf	___flge@ff2& (0+255),b
  4044  01156E  0E48               	movlw	72
  4045  011570  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  4046  011572  0E3A               	movlw	58
  4047  011574  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  4048  011576  0EC4               	movlw	196
  4049  011578  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  4050  01157A  EC45  F097         	call	___flge	;wreg free
  4051  01157E  0100               	movlb	0	; () banked
  4052  011580  B0D8               	btfsc	status,0,c
  4053  011582  D00F               	goto	l2759
  4054                           
  4055                           ; BSR set to: 0
  4056  011584  0E00               	movlw	0
  4057  011586  0101               	movlb	1	; () banked
  4058  011588  6F1B               	movwf	(_errno+1)& (0+255),b
  4059  01158A  0E22               	movlw	34
  4060  01158C  6F1A               	movwf	_errno& (0+255),b
  4061  01158E  0E00               	movlw	0
  4062  011590  0100               	movlb	0	; () banked
  4063  011592  6FD3               	movwf	?_exp& (0+255),b
  4064  011594  0E00               	movlw	0
  4065  011596  6FD4               	movwf	(?_exp+1)& (0+255),b
  4066  011598  0E00               	movlw	0
  4067  01159A  6FD5               	movwf	(?_exp+2)& (0+255),b
  4068  01159C  0E00               	movlw	0
  4069  01159E  6FD6               	movwf	(?_exp+3)& (0+255),b
  4070                           
  4071                           ; BSR set to: 0
  4072  0115A0  0012               	return	
  4073  0115A2                     l2759:
  4074                           
  4075                           ; BSR set to: 0
  4076                           
  4077                           ; BSR set to: 0
  4078  0115A2  0100               	movlb	0	; () banked
  4079  0115A4  AFD6               	btfss	(exp@x+3)& (0+255),7,b
  4080  0115A6  D002               	goto	u11970
  4081  0115A8  0E01               	movlw	1
  4082  0115AA  D001               	goto	u11980
  4083  0115AC                     u11970:
  4084  0115AC  0E00               	movlw	0
  4085  0115AE                     u11980:
  4086  0115AE  0100               	movlb	0	; () banked
  4087  0115B0  6FDD               	movwf	exp@sign& (0+255),b
  4088                           
  4089                           ; BSR set to: 0
  4090  0115B2  0100               	movlb	0	; () banked
  4091  0115B4  51DD               	movf	exp@sign& (0+255),w,b
  4092  0115B6  0100               	movlb	0	; () banked
  4093  0115B8  B4D8               	btfsc	status,2,c
  4094  0115BA  D012               	goto	l2760
  4095                           
  4096                           ; BSR set to: 0
  4097  0115BC  C0D3  F07C         	movff	exp@x,___flneg@f1
  4098  0115C0  C0D4  F07D         	movff	exp@x+1,___flneg@f1+1
  4099  0115C4  C0D5  F07E         	movff	exp@x+2,___flneg@f1+2
  4100  0115C8  C0D6  F07F         	movff	exp@x+3,___flneg@f1+3
  4101  0115CC  EC2A  F0B4         	call	___flneg	;wreg free
  4102  0115D0  C07C  F0D3         	movff	?___flneg,exp@x
  4103  0115D4  C07D  F0D4         	movff	?___flneg+1,exp@x+1
  4104  0115D8  C07E  F0D5         	movff	?___flneg+2,exp@x+2
  4105  0115DC  C07F  F0D6         	movff	?___flneg+3,exp@x+3
  4106  0115E0                     l2760:
  4107  0115E0  C0D3  F07C         	movff	exp@x,___flmul@b
  4108  0115E4  C0D4  F07D         	movff	exp@x+1,___flmul@b+1
  4109  0115E8  C0D5  F07E         	movff	exp@x+2,___flmul@b+2
  4110  0115EC  C0D6  F07F         	movff	exp@x+3,___flmul@b+3
  4111  0115F0  0E3B               	movlw	59
  4112  0115F2  0100               	movlb	0	; () banked
  4113  0115F4  6F80               	movwf	___flmul@a& (0+255),b
  4114  0115F6  0EAA               	movlw	170
  4115  0115F8  6F81               	movwf	(___flmul@a+1)& (0+255),b
  4116  0115FA  0EB8               	movlw	184
  4117  0115FC  6F82               	movwf	(___flmul@a+2)& (0+255),b
  4118  0115FE  0E3F               	movlw	63
  4119  011600  6F83               	movwf	(___flmul@a+3)& (0+255),b
  4120  011602  EC54  F082         	call	___flmul	;wreg free
  4121  011606  C07C  F0D3         	movff	?___flmul,exp@x
  4122  01160A  C07D  F0D4         	movff	?___flmul+1,exp@x+1
  4123  01160E  C07E  F0D5         	movff	?___flmul+2,exp@x+2
  4124  011612  C07F  F0D6         	movff	?___flmul+3,exp@x+3
  4125  011616  C0D3  F0C5         	movff	exp@x,floor@x
  4126  01161A  C0D4  F0C6         	movff	exp@x+1,floor@x+1
  4127  01161E  C0D5  F0C7         	movff	exp@x+2,floor@x+2
  4128  011622  C0D6  F0C8         	movff	exp@x+3,floor@x+3
  4129  011626  EC43  F09E         	call	_floor	;wreg free
  4130  01162A  C0C5  F0D7         	movff	?_floor,_exp$15229
  4131  01162E  C0C6  F0D8         	movff	?_floor+1,_exp$15229+1
  4132  011632  C0C7  F0D9         	movff	?_floor+2,_exp$15229+2
  4133  011636  C0C8  F0DA         	movff	?_floor+3,_exp$15229+3
  4134  01163A  C0D7  F0BB         	movff	_exp$15229,___fltol@f1
  4135  01163E  C0D8  F0BC         	movff	_exp$15229+1,___fltol@f1+1
  4136  011642  C0D9  F0BD         	movff	_exp$15229+2,___fltol@f1+2
  4137  011646  C0DA  F0BE         	movff	_exp$15229+3,___fltol@f1+3
  4138  01164A  ECF2  F09F         	call	___fltol	;wreg free
  4139  01164E  C0BB  F0DB         	movff	?___fltol,exp@exponent
  4140  011652  C0BC  F0DC         	movff	?___fltol+1,exp@exponent+1
  4141  011656  C0D3  F0BB         	movff	exp@x,___flsub@b
  4142  01165A  C0D4  F0BC         	movff	exp@x+1,___flsub@b+1
  4143  01165E  C0D5  F0BD         	movff	exp@x+2,___flsub@b+2
  4144  011662  C0D6  F0BE         	movff	exp@x+3,___flsub@b+3
  4145  011666  C0DB  F06E         	movff	exp@exponent,___xxtofl@val
  4146  01166A  C0DC  F06F         	movff	exp@exponent+1,___xxtofl@val+1
  4147  01166E  0100               	movlb	0	; () banked
  4148  011670  0E00               	movlw	0
  4149  011672  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  4150  011674  0EFF               	movlw	-1
  4151  011676  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
  4152  011678  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
  4153  01167A  0E01               	movlw	1
  4154  01167C  EC46  F092         	call	___xxtofl
  4155  011680  C06E  F0BF         	movff	?___xxtofl,___flsub@a
  4156  011684  C06F  F0C0         	movff	?___xxtofl+1,___flsub@a+1
  4157  011688  C070  F0C1         	movff	?___xxtofl+2,___flsub@a+2
  4158  01168C  C071  F0C2         	movff	?___xxtofl+3,___flsub@a+3
  4159  011690  ECFA  F0B1         	call	___flsub	;wreg free
  4160  011694  C0BB  F0D3         	movff	?___flsub,exp@x
  4161  011698  C0BC  F0D4         	movff	?___flsub+1,exp@x+1
  4162  01169C  C0BD  F0D5         	movff	?___flsub+2,exp@x+2
  4163  0116A0  C0BE  F0D6         	movff	?___flsub+3,exp@x+3
  4164  0116A4  C0D3  F0BB         	movff	exp@x,eval_poly@x
  4165  0116A8  C0D4  F0BC         	movff	exp@x+1,eval_poly@x+1
  4166  0116AC  C0D5  F0BD         	movff	exp@x+2,eval_poly@x+2
  4167  0116B0  C0D6  F0BE         	movff	exp@x+3,eval_poly@x+3
  4168  0116B4  0EAF               	movlw	low exp@coeff
  4169  0116B6  0100               	movlb	0	; () banked
  4170  0116B8  6FBF               	movwf	eval_poly@d& (0+255),b
  4171  0116BA  0EFE               	movlw	high exp@coeff
  4172  0116BC  0100               	movlb	0	; () banked
  4173  0116BE  6FC0               	movwf	(eval_poly@d+1)& (0+255),b
  4174  0116C0  0E00               	movlw	0
  4175  0116C2  0100               	movlb	0	; () banked
  4176  0116C4  6FC2               	movwf	(eval_poly@n+1)& (0+255),b
  4177  0116C6  0E09               	movlw	9
  4178  0116C8  6FC1               	movwf	eval_poly@n& (0+255),b
  4179  0116CA  EC66  F09F         	call	_eval_poly	;wreg free
  4180  0116CE  C0BB  F0CB         	movff	?_eval_poly,ldexp@value
  4181  0116D2  C0BC  F0CC         	movff	?_eval_poly+1,ldexp@value+1
  4182  0116D6  C0BD  F0CD         	movff	?_eval_poly+2,ldexp@value+2
  4183  0116DA  C0BE  F0CE         	movff	?_eval_poly+3,ldexp@value+3
  4184  0116DE  C0DB  F0CF         	movff	exp@exponent,ldexp@newexp
  4185  0116E2  C0DC  F0D0         	movff	exp@exponent+1,ldexp@newexp+1
  4186  0116E6  ECB1  F09D         	call	_ldexp	;wreg free
  4187  0116EA  C0CB  F0D3         	movff	?_ldexp,exp@x
  4188  0116EE  C0CC  F0D4         	movff	?_ldexp+1,exp@x+1
  4189  0116F2  C0CD  F0D5         	movff	?_ldexp+2,exp@x+2
  4190  0116F6  C0CE  F0D6         	movff	?_ldexp+3,exp@x+3
  4191  0116FA  0100               	movlb	0	; () banked
  4192  0116FC  51DD               	movf	exp@sign& (0+255),w,b
  4193  0116FE  0100               	movlb	0	; () banked
  4194  011700  B4D8               	btfsc	status,2,c
  4195  011702  D035               	goto	l2761
  4196                           
  4197                           ; BSR set to: 0
  4198  011704  0100               	movlb	0	; () banked
  4199  011706  29D3               	incf	exp@x& (0+255),w,b
  4200  011708  E116               	bnz	l14559
  4201  01170A  0100               	movlb	0	; () banked
  4202  01170C  29D4               	incf	(exp@x+1)& (0+255),w,b
  4203  01170E  E113               	bnz	l14559
  4204  011710  0E7F               	movlw	127
  4205  011712  0100               	movlb	0	; () banked
  4206  011714  19D5               	xorwf	(exp@x+2)& (0+255),w,b
  4207  011716  E10F               	bnz	l14559
  4208  011718  0E7F               	movlw	127
  4209  01171A  0100               	movlb	0	; () banked
  4210  01171C  19D6               	xorwf	(exp@x+3)& (0+255),w,b
  4211  01171E  A4D8               	btfss	status,2,c
  4212  011720  D00A               	goto	l2762
  4213                           
  4214                           ; BSR set to: 0
  4215  011722  0E00               	movlw	0
  4216  011724  0100               	movlb	0	; () banked
  4217  011726  6FD3               	movwf	?_exp& (0+255),b
  4218  011728  0E00               	movlw	0
  4219  01172A  6FD4               	movwf	(?_exp+1)& (0+255),b
  4220  01172C  0E00               	movlw	0
  4221  01172E  6FD5               	movwf	(?_exp+2)& (0+255),b
  4222  011730  0E00               	movlw	0
  4223  011732  6FD6               	movwf	(?_exp+3)& (0+255),b
  4224                           
  4225                           ; BSR set to: 0
  4226  011734  0012               	return	
  4227  011736                     l2762:
  4228  011736                     l14559:
  4229                           
  4230                           ; BSR set to: 0
  4231  011736  0E00               	movlw	0
  4232  011738  0100               	movlb	0	; () banked
  4233  01173A  6F60               	movwf	___fldiv@b& (0+255),b
  4234  01173C  0E00               	movlw	0
  4235  01173E  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  4236  011740  0E80               	movlw	128
  4237  011742  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  4238  011744  0E3F               	movlw	63
  4239  011746  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  4240  011748  C0D3  F064         	movff	exp@x,___fldiv@a
  4241  01174C  C0D4  F065         	movff	exp@x+1,___fldiv@a+1
  4242  011750  C0D5  F066         	movff	exp@x+2,___fldiv@a+2
  4243  011754  C0D6  F067         	movff	exp@x+3,___fldiv@a+3
  4244  011758  ECB6  F086         	call	___fldiv	;wreg free
  4245  01175C  C060  F0D3         	movff	?___fldiv,?_exp
  4246  011760  C061  F0D4         	movff	?___fldiv+1,?_exp+1
  4247  011764  C062  F0D5         	movff	?___fldiv+2,?_exp+2
  4248  011768  C063  F0D6         	movff	?___fldiv+3,?_exp+3
  4249  01176C  0012               	return	
  4250  01176E                     l2761:
  4251                           
  4252                           ; BSR set to: 0
  4253  01176E  C0D3  F0D3         	movff	exp@x,?_exp
  4254  011772  C0D4  F0D4         	movff	exp@x+1,?_exp+1
  4255  011776  C0D5  F0D5         	movff	exp@x+2,?_exp+2
  4256  01177A  C0D6  F0D6         	movff	exp@x+3,?_exp+3
  4257  01177E  0012               	return		;funcret
  4258  011780                     __end_of_exp:
  4259                           	opt stack 0
  4260                           tblptru	equ	0xFF8
  4261                           tblptrh	equ	0xFF7
  4262                           tblptrl	equ	0xFF6
  4263                           tablat	equ	0xFF5
  4264                           postinc0	equ	0xFEE
  4265                           wreg	equ	0xFE8
  4266                           postdec1	equ	0xFE5
  4267                           fsr1h	equ	0xFE2
  4268                           fsr1l	equ	0xFE1
  4269                           status	equ	0xFD8
  4270                           
  4271 ;; *************** function _ldexp *****************
  4272 ;; Defined at:
  4273 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  4274 ;; Parameters:    Size  Location     Type
  4275 ;;  value           4  107[BANK0 ] unsigned char 
  4276 ;;  newexp          2  111[BANK0 ] int 
  4277 ;; Auto vars:     Size  Location     Type
  4278 ;;		None
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  4  107[BANK0 ] int 
  4281 ;; Registers used:
  4282 ;;		wreg, status,2, status,0
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4288 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;Total ram usage:        8 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    7
  4295 ;; This function calls:
  4296 ;;		Nothing
  4297 ;; This function is called by:
  4298 ;;		_exp
  4299 ;; This function uses a non-reentrant model
  4300 ;;
  4301                           
  4302                           	psect	text5
  4303  013B62                     __ptext5:
  4304                           	opt stack 0
  4305  013B62                     _ldexp:
  4306                           	opt stack 21
  4307                           
  4308                           ;incstack = 0
  4309  013B62  0100               	movlb	0	; () banked
  4310  013B64  51CB               	movf	ldexp@value& (0+255),w,b
  4311  013B66  0100               	movlb	0	; () banked
  4312  013B68  11CC               	iorwf	(ldexp@value+1)& (0+255),w,b
  4313  013B6A  0100               	movlb	0	; () banked
  4314  013B6C  11CD               	iorwf	(ldexp@value+2)& (0+255),w,b
  4315  013B6E  0100               	movlb	0	; () banked
  4316  013B70  11CE               	iorwf	(ldexp@value+3)& (0+255),w,b
  4317  013B72  A4D8               	btfss	status,2,c
  4318  013B74  D00A               	goto	l2780
  4319                           
  4320                           ; BSR set to: 0
  4321  013B76  0E00               	movlw	0
  4322  013B78  0100               	movlb	0	; () banked
  4323  013B7A  6FCB               	movwf	?_ldexp& (0+255),b
  4324  013B7C  0E00               	movlw	0
  4325  013B7E  6FCC               	movwf	(?_ldexp+1)& (0+255),b
  4326  013B80  0E00               	movlw	0
  4327  013B82  6FCD               	movwf	(?_ldexp+2)& (0+255),b
  4328  013B84  0E00               	movlw	0
  4329  013B86  6FCE               	movwf	(?_ldexp+3)& (0+255),b
  4330                           
  4331                           ; BSR set to: 0
  4332  013B88  0012               	return	
  4333  013B8A                     l2780:
  4334                           
  4335                           ; BSR set to: 0
  4336                           
  4337                           ; BSR set to: 0
  4338  013B8A  0100               	movlb	0	; () banked
  4339  013B8C  51CE               	movf	(ldexp@value+3)& (0+255),w,b
  4340  013B8E  0B7F               	andlw	127
  4341  013B90  0100               	movlb	0	; () banked
  4342  013B92  6FD1               	movwf	??_ldexp& (0+255),b
  4343  013B94  6BD2               	clrf	(??_ldexp+1)& (0+255),b
  4344  013B96  90D8               	bcf	status,0,c
  4345  013B98  0100               	movlb	0	; () banked
  4346  013B9A  37D1               	rlcf	??_ldexp& (0+255),f,b
  4347  013B9C  37D2               	rlcf	(??_ldexp+1)& (0+255),f,b
  4348  013B9E  0100               	movlb	0	; () banked
  4349  013BA0  51D1               	movf	??_ldexp& (0+255),w,b
  4350  013BA2  0100               	movlb	0	; () banked
  4351  013BA4  27CF               	addwf	ldexp@newexp& (0+255),f,b
  4352  013BA6  0100               	movlb	0	; () banked
  4353  013BA8  51D2               	movf	(??_ldexp+1)& (0+255),w,b
  4354  013BAA  0100               	movlb	0	; () banked
  4355  013BAC  23D0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4356  013BAE  0100               	movlb	0	; () banked
  4357  013BB0  AFCD               	btfss	(ldexp@value+2)& (0+255),7,b
  4358  013BB2  D004               	goto	u11490
  4359  013BB4  0100               	movlb	0	; () banked
  4360  013BB6  6BD1               	clrf	??_ldexp& (0+255),b
  4361  013BB8  2BD1               	incf	??_ldexp& (0+255),f,b
  4362  013BBA  D002               	goto	u11498
  4363  013BBC                     u11490:
  4364  013BBC  0100               	movlb	0	; () banked
  4365  013BBE  6BD1               	clrf	??_ldexp& (0+255),b
  4366  013BC0                     u11498:
  4367  013BC0  0100               	movlb	0	; () banked
  4368  013BC2  51D1               	movf	??_ldexp& (0+255),w,b
  4369  013BC4  0100               	movlb	0	; () banked
  4370  013BC6  27CF               	addwf	ldexp@newexp& (0+255),f,b
  4371  013BC8  0E00               	movlw	0
  4372  013BCA  23D0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  4373  013BCC  0100               	movlb	0	; () banked
  4374  013BCE  AFD0               	btfss	(ldexp@newexp+1)& (0+255),7,b
  4375  013BD0  D00F               	goto	l2782
  4376                           
  4377                           ; BSR set to: 0
  4378  013BD2  0E00               	movlw	0
  4379  013BD4  0101               	movlb	1	; () banked
  4380  013BD6  6F1B               	movwf	(_errno+1)& (0+255),b
  4381  013BD8  0E22               	movlw	34
  4382  013BDA  6F1A               	movwf	_errno& (0+255),b
  4383  013BDC  0E00               	movlw	0
  4384  013BDE  0100               	movlb	0	; () banked
  4385  013BE0  6FCB               	movwf	?_ldexp& (0+255),b
  4386  013BE2  0E00               	movlw	0
  4387  013BE4  6FCC               	movwf	(?_ldexp+1)& (0+255),b
  4388  013BE6  0E00               	movlw	0
  4389  013BE8  6FCD               	movwf	(?_ldexp+2)& (0+255),b
  4390  013BEA  0E00               	movlw	0
  4391  013BEC                     L1:
  4392  013BEC  6FCE               	movwf	(?_ldexp+3)& (0+255),b
  4393                           
  4394                           ; BSR set to: 0
  4395  013BEE  0012               	return	
  4396  013BF0                     l2782:
  4397                           
  4398                           ; BSR set to: 0
  4399                           
  4400                           ; BSR set to: 0
  4401  013BF0  0100               	movlb	0	; () banked
  4402  013BF2  BFD0               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  4403  013BF4  D01E               	goto	l2784
  4404  013BF6  0100               	movlb	0	; () banked
  4405  013BF8  05D0               	decf	(ldexp@newexp+1)& (0+255),w,b
  4406  013BFA  A0D8               	btfss	status,0,c
  4407  013BFC  D01A               	goto	l2784
  4408                           
  4409                           ; BSR set to: 0
  4410  013BFE  0E00               	movlw	0
  4411  013C00  0101               	movlb	1	; () banked
  4412  013C02  6F1B               	movwf	(_errno+1)& (0+255),b
  4413  013C04  0E22               	movlw	34
  4414  013C06  6F1A               	movwf	_errno& (0+255),b
  4415                           
  4416                           ; BSR set to: 1
  4417  013C08  0100               	movlb	0	; () banked
  4418  013C0A  AFCE               	btfss	(ldexp@value+3)& (0+255),7,b
  4419  013C0C  D009               	goto	l2785
  4420                           
  4421                           ; BSR set to: 0
  4422  013C0E  0EFF               	movlw	255
  4423  013C10  0100               	movlb	0	; () banked
  4424  013C12  6FCB               	movwf	?_ldexp& (0+255),b
  4425  013C14  0EFF               	movlw	255
  4426  013C16  6FCC               	movwf	(?_ldexp+1)& (0+255),b
  4427  013C18  0E7F               	movlw	127
  4428  013C1A  6FCD               	movwf	(?_ldexp+2)& (0+255),b
  4429  013C1C  0EFF               	movlw	255
  4430  013C1E  D7E6               	goto	L1
  4431  013C20                     l2785:
  4432                           
  4433                           ; BSR set to: 0
  4434                           
  4435                           ; BSR set to: 0
  4436  013C20  0EFF               	movlw	255
  4437  013C22  0100               	movlb	0	; () banked
  4438  013C24  6FCB               	movwf	?_ldexp& (0+255),b
  4439  013C26  0EFF               	movlw	255
  4440  013C28  6FCC               	movwf	(?_ldexp+1)& (0+255),b
  4441  013C2A  0E7F               	movlw	127
  4442  013C2C  6FCD               	movwf	(?_ldexp+2)& (0+255),b
  4443  013C2E  0E7F               	movlw	127
  4444  013C30  D7DD               	goto	L1
  4445  013C32                     l2784:
  4446                           
  4447                           ; BSR set to: 0
  4448                           
  4449                           ; BSR set to: 0
  4450  013C32  0100               	movlb	0	; () banked
  4451  013C34  35D0               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  4452  013C36  31D0               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  4453  013C38  0100               	movlb	0	; () banked
  4454  013C3A  6FD2               	movwf	(??_ldexp+1)& (0+255),b
  4455  013C3C  0100               	movlb	0	; () banked
  4456  013C3E  31CF               	rrcf	ldexp@newexp& (0+255),w,b
  4457  013C40  0100               	movlb	0	; () banked
  4458  013C42  6FD1               	movwf	??_ldexp& (0+255),b
  4459  013C44  0100               	movlb	0	; () banked
  4460  013C46  51CE               	movf	(ldexp@value+3)& (0+255),w,b
  4461  013C48  0100               	movlb	0	; () banked
  4462  013C4A  19D1               	xorwf	??_ldexp& (0+255),w,b
  4463  013C4C  0B80               	andlw	-128
  4464  013C4E  19D1               	xorwf	??_ldexp& (0+255),w,b
  4465  013C50  0100               	movlb	0	; () banked
  4466  013C52  6FCE               	movwf	(ldexp@value+3)& (0+255),b
  4467  013C54  C0CF  F0D1         	movff	ldexp@newexp,??_ldexp
  4468  013C58  0E01               	movlw	1
  4469  013C5A  0100               	movlb	0	; () banked
  4470  013C5C  17D1               	andwf	??_ldexp& (0+255),f,b
  4471  013C5E  0100               	movlb	0	; () banked
  4472  013C60  33D1               	rrcf	??_ldexp& (0+255),f,b
  4473  013C62  33D1               	rrcf	??_ldexp& (0+255),f,b
  4474  013C64  0100               	movlb	0	; () banked
  4475  013C66  51CD               	movf	(ldexp@value+2)& (0+255),w,b
  4476  013C68  0100               	movlb	0	; () banked
  4477  013C6A  19D1               	xorwf	??_ldexp& (0+255),w,b
  4478  013C6C  0B7F               	andlw	-129
  4479  013C6E  19D1               	xorwf	??_ldexp& (0+255),w,b
  4480  013C70  0100               	movlb	0	; () banked
  4481  013C72  6FCD               	movwf	(ldexp@value+2)& (0+255),b
  4482                           
  4483                           ; BSR set to: 0
  4484                           
  4485                           ; BSR set to: 0
  4486                           
  4487                           ; BSR set to: 0
  4488  013C74  C0CB  F0CB         	movff	ldexp@value,?_ldexp
  4489  013C78  C0CC  F0CC         	movff	ldexp@value+1,?_ldexp+1
  4490  013C7C  C0CD  F0CD         	movff	ldexp@value+2,?_ldexp+2
  4491  013C80  C0CE  F0CE         	movff	ldexp@value+3,?_ldexp+3
  4492  013C84  0012               	return	
  4493  013C86                     __end_of_ldexp:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           postinc0	equ	0xFEE
  4500                           wreg	equ	0xFE8
  4501                           postdec1	equ	0xFE5
  4502                           fsr1h	equ	0xFE2
  4503                           fsr1l	equ	0xFE1
  4504                           status	equ	0xFD8
  4505                           
  4506 ;; *************** function _floor *****************
  4507 ;; Defined at:
  4508 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
  4509 ;; Parameters:    Size  Location     Type
  4510 ;;  x               4  101[BANK0 ] int 
  4511 ;; Auto vars:     Size  Location     Type
  4512 ;;  i               4  105[BANK0 ] int 
  4513 ;;  expon           2  109[BANK0 ] int 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;                  4  101[BANK0 ] int 
  4516 ;; Registers used:
  4517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4523 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4524 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4526 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4527 ;;Total ram usage:       10 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    8
  4530 ;; This function calls:
  4531 ;;		___fladd
  4532 ;;		___flge
  4533 ;;		___fltol
  4534 ;;		___xxtofl
  4535 ;;		_frexp
  4536 ;; This function is called by:
  4537 ;;		_exp
  4538 ;; This function uses a non-reentrant model
  4539 ;;
  4540                           
  4541                           	psect	text6
  4542  013C86                     __ptext6:
  4543                           	opt stack 0
  4544  013C86                     _floor:
  4545                           	opt stack 20
  4546                           
  4547                           ; BSR set to: 0
  4548                           ;incstack = 0
  4549  013C86  C0C5  F060         	movff	floor@x,frexp@value
  4550  013C8A  C0C6  F061         	movff	floor@x+1,frexp@value+1
  4551  013C8E  C0C7  F062         	movff	floor@x+2,frexp@value+2
  4552  013C92  C0C8  F063         	movff	floor@x+3,frexp@value+3
  4553  013C96  0ECD               	movlw	low floor@expon
  4554  013C98  0100               	movlb	0	; () banked
  4555  013C9A  6F64               	movwf	frexp@eptr& (0+255),b
  4556  013C9C  0E00               	movlw	high floor@expon
  4557  013C9E  0100               	movlb	0	; () banked
  4558  013CA0  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  4559  013CA2  ECAE  F0A5         	call	_frexp	;wreg free
  4560  013CA6  0100               	movlb	0	; () banked
  4561  013CA8  AFCE               	btfss	(floor@expon+1)& (0+255),7,b
  4562  013CAA  D017               	goto	l2767
  4563                           
  4564                           ; BSR set to: 0
  4565  013CAC  0100               	movlb	0	; () banked
  4566  013CAE  AFC8               	btfss	(floor@x+3)& (0+255),7,b
  4567  013CB0  D00A               	goto	l2768
  4568                           
  4569                           ; BSR set to: 0
  4570  013CB2  0E00               	movlw	0
  4571  013CB4  0100               	movlb	0	; () banked
  4572  013CB6  6FC5               	movwf	?_floor& (0+255),b
  4573  013CB8  0E00               	movlw	0
  4574  013CBA  6FC6               	movwf	(?_floor+1)& (0+255),b
  4575  013CBC  0E80               	movlw	128
  4576  013CBE  6FC7               	movwf	(?_floor+2)& (0+255),b
  4577  013CC0  0EBF               	movlw	191
  4578  013CC2  6FC8               	movwf	(?_floor+3)& (0+255),b
  4579                           
  4580                           ; BSR set to: 0
  4581  013CC4  0012               	return	
  4582  013CC6                     l2768:
  4583                           
  4584                           ; BSR set to: 0
  4585                           
  4586                           ; BSR set to: 0
  4587  013CC6  0E00               	movlw	0
  4588  013CC8  0100               	movlb	0	; () banked
  4589  013CCA  6FC5               	movwf	?_floor& (0+255),b
  4590  013CCC  0E00               	movlw	0
  4591  013CCE  6FC6               	movwf	(?_floor+1)& (0+255),b
  4592  013CD0  0E00               	movlw	0
  4593  013CD2  6FC7               	movwf	(?_floor+2)& (0+255),b
  4594  013CD4  0E00               	movlw	0
  4595  013CD6  6FC8               	movwf	(?_floor+3)& (0+255),b
  4596                           
  4597                           ; BSR set to: 0
  4598  013CD8  0012               	return	
  4599  013CDA                     l2767:
  4600                           
  4601                           ; BSR set to: 0
  4602                           
  4603                           ; BSR set to: 0
  4604  013CDA  0100               	movlb	0	; () banked
  4605  013CDC  51CE               	movf	(floor@expon+1)& (0+255),w,b
  4606  013CDE  E105               	bnz	u11450
  4607  013CE0  0E1D               	movlw	29
  4608  013CE2  0100               	movlb	0	; () banked
  4609  013CE4  5DCD               	subwf	floor@expon& (0+255),w,b
  4610  013CE6  A0D8               	btfss	status,0,c
  4611  013CE8  D009               	goto	l2770
  4612  013CEA                     u11450:
  4613                           
  4614                           ; BSR set to: 0
  4615  013CEA  C0C5  F0C5         	movff	floor@x,?_floor
  4616  013CEE  C0C6  F0C6         	movff	floor@x+1,?_floor+1
  4617  013CF2  C0C7  F0C7         	movff	floor@x+2,?_floor+2
  4618  013CF6  C0C8  F0C8         	movff	floor@x+3,?_floor+3
  4619  013CFA  0012               	return	
  4620  013CFC                     l2770:
  4621                           
  4622                           ; BSR set to: 0
  4623                           
  4624                           ; BSR set to: 0
  4625  013CFC  C0C5  F0BB         	movff	floor@x,___fltol@f1
  4626  013D00  C0C6  F0BC         	movff	floor@x+1,___fltol@f1+1
  4627  013D04  C0C7  F0BD         	movff	floor@x+2,___fltol@f1+2
  4628  013D08  C0C8  F0BE         	movff	floor@x+3,___fltol@f1+3
  4629  013D0C  ECF2  F09F         	call	___fltol	;wreg free
  4630  013D10  C0BB  F06E         	movff	?___fltol,___xxtofl@val
  4631  013D14  C0BC  F06F         	movff	?___fltol+1,___xxtofl@val+1
  4632  013D18  C0BD  F070         	movff	?___fltol+2,___xxtofl@val+2
  4633  013D1C  C0BE  F071         	movff	?___fltol+3,___xxtofl@val+3
  4634  013D20  0E01               	movlw	1
  4635  013D22  EC46  F092         	call	___xxtofl
  4636  013D26  C06E  F0C9         	movff	?___xxtofl,floor@i
  4637  013D2A  C06F  F0CA         	movff	?___xxtofl+1,floor@i+1
  4638  013D2E  C070  F0CB         	movff	?___xxtofl+2,floor@i+2
  4639  013D32  C071  F0CC         	movff	?___xxtofl+3,floor@i+3
  4640  013D36  C0C5  F060         	movff	floor@x,___flge@ff1
  4641  013D3A  C0C6  F061         	movff	floor@x+1,___flge@ff1+1
  4642  013D3E  C0C7  F062         	movff	floor@x+2,___flge@ff1+2
  4643  013D42  C0C8  F063         	movff	floor@x+3,___flge@ff1+3
  4644  013D46  C0C9  F064         	movff	floor@i,___flge@ff2
  4645  013D4A  C0CA  F065         	movff	floor@i+1,___flge@ff2+1
  4646  013D4E  C0CB  F066         	movff	floor@i+2,___flge@ff2+2
  4647  013D52  C0CC  F067         	movff	floor@i+3,___flge@ff2+3
  4648  013D56  EC45  F097         	call	___flge	;wreg free
  4649  013D5A  0100               	movlb	0	; () banked
  4650  013D5C  B0D8               	btfsc	status,0,c
  4651  013D5E  D01C               	goto	l2771
  4652                           
  4653                           ; BSR set to: 0
  4654  013D60  C0C9  F0A7         	movff	floor@i,___fladd@b
  4655  013D64  C0CA  F0A8         	movff	floor@i+1,___fladd@b+1
  4656  013D68  C0CB  F0A9         	movff	floor@i+2,___fladd@b+2
  4657  013D6C  C0CC  F0AA         	movff	floor@i+3,___fladd@b+3
  4658  013D70  0E00               	movlw	0
  4659  013D72  0100               	movlb	0	; () banked
  4660  013D74  6FAB               	movwf	___fladd@a& (0+255),b
  4661  013D76  0E00               	movlw	0
  4662  013D78  6FAC               	movwf	(___fladd@a+1)& (0+255),b
  4663  013D7A  0E80               	movlw	128
  4664  013D7C  6FAD               	movwf	(___fladd@a+2)& (0+255),b
  4665  013D7E  0EBF               	movlw	191
  4666  013D80  6FAE               	movwf	(___fladd@a+3)& (0+255),b
  4667  013D82  EC00  F080         	call	___fladd	;wreg free
  4668  013D86  C0A7  F0C5         	movff	?___fladd,?_floor
  4669  013D8A  C0A8  F0C6         	movff	?___fladd+1,?_floor+1
  4670  013D8E  C0A9  F0C7         	movff	?___fladd+2,?_floor+2
  4671  013D92  C0AA  F0C8         	movff	?___fladd+3,?_floor+3
  4672  013D96  0012               	return	
  4673  013D98                     l2771:
  4674                           
  4675                           ; BSR set to: 0
  4676  013D98  C0C9  F0C5         	movff	floor@i,?_floor
  4677  013D9C  C0CA  F0C6         	movff	floor@i+1,?_floor+1
  4678  013DA0  C0CB  F0C7         	movff	floor@i+2,?_floor+2
  4679  013DA4  C0CC  F0C8         	movff	floor@i+3,?_floor+3
  4680  013DA8  0012               	return		;funcret
  4681  013DAA                     __end_of_floor:
  4682                           	opt stack 0
  4683                           tblptru	equ	0xFF8
  4684                           tblptrh	equ	0xFF7
  4685                           tblptrl	equ	0xFF6
  4686                           tablat	equ	0xFF5
  4687                           postinc0	equ	0xFEE
  4688                           wreg	equ	0xFE8
  4689                           postdec1	equ	0xFE5
  4690                           fsr1h	equ	0xFE2
  4691                           fsr1l	equ	0xFE1
  4692                           status	equ	0xFD8
  4693                           
  4694 ;; *************** function _frexp *****************
  4695 ;; Defined at:
  4696 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  4697 ;; Parameters:    Size  Location     Type
  4698 ;;  value           4    0[BANK0 ] int 
  4699 ;;  eptr            2    4[BANK0 ] PTR int 
  4700 ;;		 -> log@exponent(2), floor@expon(2), 
  4701 ;; Auto vars:     Size  Location     Type
  4702 ;;		None
  4703 ;; Return value:  Size  Location     Type
  4704 ;;                  4    0[BANK0 ] PTR int 
  4705 ;; Registers used:
  4706 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4707 ;; Tracked objects:
  4708 ;;		On entry : 0/0
  4709 ;;		On exit  : 0/0
  4710 ;;		Unchanged: 0/0
  4711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4712 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4714 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4715 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;Total ram usage:        8 bytes
  4717 ;; Hardware stack levels used:    1
  4718 ;; Hardware stack levels required when called:    7
  4719 ;; This function calls:
  4720 ;;		Nothing
  4721 ;; This function is called by:
  4722 ;;		_floor
  4723 ;;		_log
  4724 ;; This function uses a non-reentrant model
  4725 ;;
  4726                           
  4727                           	psect	text7
  4728  014B5C                     __ptext7:
  4729                           	opt stack 0
  4730  014B5C                     _frexp:
  4731                           	opt stack 21
  4732                           
  4733                           ;incstack = 0
  4734  014B5C  0100               	movlb	0	; () banked
  4735  014B5E  5160               	movf	frexp@value& (0+255),w,b
  4736  014B60  0100               	movlb	0	; () banked
  4737  014B62  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  4738  014B64  0100               	movlb	0	; () banked
  4739  014B66  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  4740  014B68  0100               	movlb	0	; () banked
  4741  014B6A  1163               	iorwf	(frexp@value+3)& (0+255),w,b
  4742  014B6C  A4D8               	btfss	status,2,c
  4743  014B6E  D012               	goto	l2776
  4744                           
  4745                           ; BSR set to: 0
  4746  014B70  C064  FFD9         	movff	frexp@eptr,fsr2l
  4747  014B74  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4748  014B78  0E00               	movlw	0
  4749  014B7A  6EDE               	movwf	postinc2,c
  4750  014B7C  0E00               	movlw	0
  4751  014B7E  6EDD               	movwf	postdec2,c
  4752                           
  4753                           ; BSR set to: 0
  4754  014B80  0E00               	movlw	0
  4755  014B82  0100               	movlb	0	; () banked
  4756  014B84  6F60               	movwf	?_frexp& (0+255),b
  4757  014B86  0E00               	movlw	0
  4758  014B88  6F61               	movwf	(?_frexp+1)& (0+255),b
  4759  014B8A  0E00               	movlw	0
  4760  014B8C  6F62               	movwf	(?_frexp+2)& (0+255),b
  4761  014B8E  0E00               	movlw	0
  4762  014B90  6F63               	movwf	(?_frexp+3)& (0+255),b
  4763                           
  4764                           ; BSR set to: 0
  4765  014B92  0012               	return	
  4766  014B94                     l2776:
  4767                           
  4768                           ; BSR set to: 0
  4769                           
  4770                           ; BSR set to: 0
  4771  014B94  0100               	movlb	0	; () banked
  4772  014B96  5163               	movf	(frexp@value+3)& (0+255),w,b
  4773  014B98  0B7F               	andlw	127
  4774  014B9A  0100               	movlb	0	; () banked
  4775  014B9C  6F66               	movwf	??_frexp& (0+255),b
  4776  014B9E  6B67               	clrf	(??_frexp+1)& (0+255),b
  4777  014BA0  90D8               	bcf	status,0,c
  4778  014BA2  0100               	movlb	0	; () banked
  4779  014BA4  3766               	rlcf	??_frexp& (0+255),f,b
  4780  014BA6  3767               	rlcf	(??_frexp+1)& (0+255),f,b
  4781  014BA8  C064  FFD9         	movff	frexp@eptr,fsr2l
  4782  014BAC  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4783  014BB0  C066  FFDE         	movff	??_frexp,postinc2
  4784  014BB4  C067  FFDD         	movff	??_frexp+1,postdec2
  4785  014BB8  0100               	movlb	0	; () banked
  4786  014BBA  AF62               	btfss	(frexp@value+2)& (0+255),7,b
  4787  014BBC  D004               	goto	u11100
  4788  014BBE  0100               	movlb	0	; () banked
  4789  014BC0  6B66               	clrf	??_frexp& (0+255),b
  4790  014BC2  2B66               	incf	??_frexp& (0+255),f,b
  4791  014BC4  D002               	goto	u11108
  4792  014BC6                     u11100:
  4793  014BC6  0100               	movlb	0	; () banked
  4794  014BC8  6B66               	clrf	??_frexp& (0+255),b
  4795  014BCA                     u11108:
  4796  014BCA  0100               	movlb	0	; () banked
  4797  014BCC  5166               	movf	??_frexp& (0+255),w,b
  4798  014BCE  C064  FFD9         	movff	frexp@eptr,fsr2l
  4799  014BD2  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4800  014BD6  12DE               	iorwf	postinc2,f,c
  4801  014BD8  0E00               	movlw	0
  4802  014BDA  12DD               	iorwf	postdec2,f,c
  4803                           
  4804                           ; BSR set to: 0
  4805  014BDC  C064  FFD9         	movff	frexp@eptr,fsr2l
  4806  014BE0  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  4807  014BE4  0E82               	movlw	130
  4808  014BE6  26DE               	addwf	postinc2,f,c
  4809  014BE8  0EFF               	movlw	255
  4810  014BEA  22DD               	addwfc	postdec2,f,c
  4811                           
  4812                           ; BSR set to: 0
  4813  014BEC  0100               	movlb	0	; () banked
  4814  014BEE  8163               	bsf	(frexp@value+3)& (0+255),0,b
  4815  014BF0  8363               	bsf	(frexp@value+3)& (0+255),1,b
  4816  014BF2  8563               	bsf	(frexp@value+3)& (0+255),2,b
  4817  014BF4  8763               	bsf	(frexp@value+3)& (0+255),3,b
  4818  014BF6  8963               	bsf	(frexp@value+3)& (0+255),4,b
  4819  014BF8  8B63               	bsf	(frexp@value+3)& (0+255),5,b
  4820  014BFA  9D63               	bcf	(frexp@value+3)& (0+255),6,b
  4821                           
  4822                           ; BSR set to: 0
  4823  014BFC  0100               	movlb	0	; () banked
  4824  014BFE  9F62               	bcf	(frexp@value+2)& (0+255),7,b
  4825                           
  4826                           ; BSR set to: 0
  4827  014C00  C060  F060         	movff	frexp@value,?_frexp
  4828  014C04  C061  F061         	movff	frexp@value+1,?_frexp+1
  4829  014C08  C062  F062         	movff	frexp@value+2,?_frexp+2
  4830  014C0C  C063  F063         	movff	frexp@value+3,?_frexp+3
  4831  014C10  0012               	return	
  4832  014C12                     __end_of_frexp:
  4833                           	opt stack 0
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           postinc0	equ	0xFEE
  4839                           wreg	equ	0xFE8
  4840                           postdec1	equ	0xFE5
  4841                           fsr1h	equ	0xFE2
  4842                           fsr1l	equ	0xFE1
  4843                           postinc2	equ	0xFDE
  4844                           postdec2	equ	0xFDD
  4845                           fsr2h	equ	0xFDA
  4846                           fsr2l	equ	0xFD9
  4847                           status	equ	0xFD8
  4848                           
  4849 ;; *************** function _eval_poly *****************
  4850 ;; Defined at:
  4851 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;  x               4   91[BANK0 ] PTR int 
  4854 ;;  d               2   95[BANK0 ] PTR const 
  4855 ;;		 -> log@coeff(36), exp@coeff(40), 
  4856 ;;  n               2   97[BANK0 ] int 
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  res             4  103[BANK0 ] int 
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  4   91[BANK0 ] int 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4868 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;Total ram usage:       16 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    8
  4875 ;; This function calls:
  4876 ;;		___fladd
  4877 ;;		___flmul
  4878 ;; This function is called by:
  4879 ;;		_exp
  4880 ;;		_log
  4881 ;; This function uses a non-reentrant model
  4882 ;;
  4883                           
  4884                           	psect	text8
  4885  013ECC                     __ptext8:
  4886                           	opt stack 0
  4887  013ECC                     _eval_poly:
  4888                           	opt stack 20
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;incstack = 0
  4892  013ECC  C0C1  F0C3         	movff	eval_poly@n,??_eval_poly
  4893  013ED0  C0C2  F0C4         	movff	eval_poly@n+1,??_eval_poly+1
  4894  013ED4  0100               	movlb	0	; () banked
  4895  013ED6  90D8               	bcf	status,0,c
  4896  013ED8  37C3               	rlcf	??_eval_poly& (0+255),f,b
  4897  013EDA  37C4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4898  013EDC  0100               	movlb	0	; () banked
  4899  013EDE  90D8               	bcf	status,0,c
  4900  013EE0  37C3               	rlcf	??_eval_poly& (0+255),f,b
  4901  013EE2  37C4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4902  013EE4  C0BF  F0C5         	movff	eval_poly@d,??_eval_poly+2
  4903  013EE8  C0C0  F0C6         	movff	eval_poly@d+1,??_eval_poly+3
  4904  013EEC  0100               	movlb	0	; () banked
  4905  013EEE  51C3               	movf	??_eval_poly& (0+255),w,b
  4906  013EF0  0100               	movlb	0	; () banked
  4907  013EF2  27C5               	addwf	(??_eval_poly+2)& (0+255),f,b
  4908  013EF4  0100               	movlb	0	; () banked
  4909  013EF6  51C4               	movf	(??_eval_poly+1)& (0+255),w,b
  4910  013EF8  0100               	movlb	0	; () banked
  4911  013EFA  23C6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4912  013EFC  C0C5  FFF6         	movff	??_eval_poly+2,tblptrl
  4913  013F00  C0C6  FFF7         	movff	??_eval_poly+3,tblptrh
  4914  013F04                     	if	0	;tblptru may be non-zero
  4915  013F04                     	endif
  4916  013F04                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4917  013F04  0E00               	movlw	low (__mediumconst shr (0+16))
  4918  013F06  6EF8               	movwf	tblptru,c
  4919  013F08                     	endif
  4920  013F08  0009               	tblrd		*+
  4921  013F0A  CFF5 F0C7          	movff	tablat,eval_poly@res
  4922  013F0E  0009               	tblrd		*+
  4923  013F10  CFF5 F0C8          	movff	tablat,eval_poly@res+1
  4924  013F14  0009               	tblrd		*+
  4925  013F16  CFF5 F0C9          	movff	tablat,eval_poly@res+2
  4926  013F1A  000A               	tblrd		*-
  4927  013F1C  CFF5 F0CA          	movff	tablat,eval_poly@res+3
  4928  013F20  D052               	goto	l2806
  4929  013F22                     
  4930                           ; BSR set to: 0
  4931                           
  4932                           ; BSR set to: 0
  4933  013F22  C0C7  F080         	movff	eval_poly@res,___flmul@a
  4934  013F26  C0C8  F081         	movff	eval_poly@res+1,___flmul@a+1
  4935  013F2A  C0C9  F082         	movff	eval_poly@res+2,___flmul@a+2
  4936  013F2E  C0CA  F083         	movff	eval_poly@res+3,___flmul@a+3
  4937  013F32  C0BB  F07C         	movff	eval_poly@x,___flmul@b
  4938  013F36  C0BC  F07D         	movff	eval_poly@x+1,___flmul@b+1
  4939  013F3A  C0BD  F07E         	movff	eval_poly@x+2,___flmul@b+2
  4940  013F3E  C0BE  F07F         	movff	eval_poly@x+3,___flmul@b+3
  4941  013F42  EC54  F082         	call	___flmul	;wreg free
  4942  013F46  C07C  F0A7         	movff	?___flmul,___fladd@b
  4943  013F4A  C07D  F0A8         	movff	?___flmul+1,___fladd@b+1
  4944  013F4E  C07E  F0A9         	movff	?___flmul+2,___fladd@b+2
  4945  013F52  C07F  F0AA         	movff	?___flmul+3,___fladd@b+3
  4946  013F56  0100               	movlb	0	; () banked
  4947  013F58  07C1               	decf	eval_poly@n& (0+255),f,b
  4948  013F5A  A0D8               	btfss	status,0,c
  4949  013F5C  07C2               	decf	(eval_poly@n+1)& (0+255),f,b
  4950  013F5E  C0C1  F0C3         	movff	eval_poly@n,??_eval_poly
  4951  013F62  C0C2  F0C4         	movff	eval_poly@n+1,??_eval_poly+1
  4952  013F66  0100               	movlb	0	; () banked
  4953  013F68  90D8               	bcf	status,0,c
  4954  013F6A  37C3               	rlcf	??_eval_poly& (0+255),f,b
  4955  013F6C  37C4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4956  013F6E  0100               	movlb	0	; () banked
  4957  013F70  90D8               	bcf	status,0,c
  4958  013F72  37C3               	rlcf	??_eval_poly& (0+255),f,b
  4959  013F74  37C4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  4960  013F76  C0BF  F0C5         	movff	eval_poly@d,??_eval_poly+2
  4961  013F7A  C0C0  F0C6         	movff	eval_poly@d+1,??_eval_poly+3
  4962  013F7E  0100               	movlb	0	; () banked
  4963  013F80  51C3               	movf	??_eval_poly& (0+255),w,b
  4964  013F82  0100               	movlb	0	; () banked
  4965  013F84  27C5               	addwf	(??_eval_poly+2)& (0+255),f,b
  4966  013F86  0100               	movlb	0	; () banked
  4967  013F88  51C4               	movf	(??_eval_poly+1)& (0+255),w,b
  4968  013F8A  0100               	movlb	0	; () banked
  4969  013F8C  23C6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  4970  013F8E  C0C5  FFF6         	movff	??_eval_poly+2,tblptrl
  4971  013F92  C0C6  FFF7         	movff	??_eval_poly+3,tblptrh
  4972  013F96                     	if	0	;tblptru may be non-zero
  4973  013F96                     	endif
  4974  013F96                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4975  013F96  0E00               	movlw	low (__mediumconst shr (0+16))
  4976  013F98  6EF8               	movwf	tblptru,c
  4977  013F9A                     	endif
  4978  013F9A  0009               	tblrd		*+
  4979  013F9C  CFF5 F0AB          	movff	tablat,___fladd@a
  4980  013FA0  0009               	tblrd		*+
  4981  013FA2  CFF5 F0AC          	movff	tablat,___fladd@a+1
  4982  013FA6  0009               	tblrd		*+
  4983  013FA8  CFF5 F0AD          	movff	tablat,___fladd@a+2
  4984  013FAC  000A               	tblrd		*-
  4985  013FAE  CFF5 F0AE          	movff	tablat,___fladd@a+3
  4986  013FB2  EC00  F080         	call	___fladd	;wreg free
  4987  013FB6  C0A7  F0C7         	movff	?___fladd,eval_poly@res
  4988  013FBA  C0A8  F0C8         	movff	?___fladd+1,eval_poly@res+1
  4989  013FBE  C0A9  F0C9         	movff	?___fladd+2,eval_poly@res+2
  4990  013FC2  C0AA  F0CA         	movff	?___fladd+3,eval_poly@res+3
  4991  013FC6                     l2806:
  4992  013FC6  0100               	movlb	0	; () banked
  4993  013FC8  51C1               	movf	eval_poly@n& (0+255),w,b
  4994  013FCA  0100               	movlb	0	; () banked
  4995  013FCC  11C2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  4996  013FCE  A4D8               	btfss	status,2,c
  4997  013FD0  D7A8               	goto	l2807
  4998                           
  4999                           ; BSR set to: 0
  5000  013FD2  C0C7  F0BB         	movff	eval_poly@res,?_eval_poly
  5001  013FD6  C0C8  F0BC         	movff	eval_poly@res+1,?_eval_poly+1
  5002  013FDA  C0C9  F0BD         	movff	eval_poly@res+2,?_eval_poly+2
  5003  013FDE  C0CA  F0BE         	movff	eval_poly@res+3,?_eval_poly+3
  5004                           
  5005                           ; BSR set to: 0
  5006  013FE2  0012               	return		;funcret
  5007  013FE4                     __end_of_eval_poly:
  5008                           	opt stack 0
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           postinc0	equ	0xFEE
  5014                           wreg	equ	0xFE8
  5015                           postdec1	equ	0xFE5
  5016                           fsr1h	equ	0xFE2
  5017                           fsr1l	equ	0xFE1
  5018                           postinc2	equ	0xFDE
  5019                           postdec2	equ	0xFDD
  5020                           fsr2h	equ	0xFDA
  5021                           fsr2l	equ	0xFD9
  5022                           status	equ	0xFD8
  5023                           
  5024 ;; *************** function ___flsub *****************
  5025 ;; Defined at:
  5026 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
  5027 ;; Parameters:    Size  Location     Type
  5028 ;;  b               4   91[BANK0 ] int 
  5029 ;;  a               4   95[BANK0 ] int 
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;		None
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  4   91[BANK0 ] int 
  5034 ;; Registers used:
  5035 ;;		wreg, status,2, status,0, cstack
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5041 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5044 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5045 ;;Total ram usage:        8 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    8
  5048 ;; This function calls:
  5049 ;;		___fladd
  5050 ;; This function is called by:
  5051 ;;		_exp
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text9
  5056  0163F4                     __ptext9:
  5057                           	opt stack 0
  5058  0163F4                     ___flsub:
  5059                           	opt stack 20
  5060                           
  5061                           ; BSR set to: 0
  5062                           ;incstack = 0
  5063  0163F4  0E00               	movlw	0
  5064  0163F6  0100               	movlb	0	; () banked
  5065  0163F8  1BBF               	xorwf	___flsub@a& (0+255),f,b
  5066  0163FA  0E00               	movlw	0
  5067  0163FC  1BC0               	xorwf	(___flsub@a+1)& (0+255),f,b
  5068  0163FE  0E00               	movlw	0
  5069  016400  1BC1               	xorwf	(___flsub@a+2)& (0+255),f,b
  5070  016402  0E80               	movlw	128
  5071  016404  1BC2               	xorwf	(___flsub@a+3)& (0+255),f,b
  5072                           
  5073                           ; BSR set to: 0
  5074  016406  C0BB  F0A7         	movff	___flsub@b,___fladd@b
  5075  01640A  C0BC  F0A8         	movff	___flsub@b+1,___fladd@b+1
  5076  01640E  C0BD  F0A9         	movff	___flsub@b+2,___fladd@b+2
  5077  016412  C0BE  F0AA         	movff	___flsub@b+3,___fladd@b+3
  5078  016416  C0BF  F0AB         	movff	___flsub@a,___fladd@a
  5079  01641A  C0C0  F0AC         	movff	___flsub@a+1,___fladd@a+1
  5080  01641E  C0C1  F0AD         	movff	___flsub@a+2,___fladd@a+2
  5081  016422  C0C2  F0AE         	movff	___flsub@a+3,___fladd@a+3
  5082  016426  EC00  F080         	call	___fladd	;wreg free
  5083  01642A  C0A7  F0BB         	movff	?___fladd,?___flsub
  5084  01642E  C0A8  F0BC         	movff	?___fladd+1,?___flsub+1
  5085  016432  C0A9  F0BD         	movff	?___fladd+2,?___flsub+2
  5086  016436  C0AA  F0BE         	movff	?___fladd+3,?___flsub+3
  5087  01643A  0012               	return	
  5088  01643C                     __end_of___flsub:
  5089                           	opt stack 0
  5090                           tblptru	equ	0xFF8
  5091                           tblptrh	equ	0xFF7
  5092                           tblptrl	equ	0xFF6
  5093                           tablat	equ	0xFF5
  5094                           postinc0	equ	0xFEE
  5095                           wreg	equ	0xFE8
  5096                           postdec1	equ	0xFE5
  5097                           fsr1h	equ	0xFE2
  5098                           fsr1l	equ	0xFE1
  5099                           postinc2	equ	0xFDE
  5100                           postdec2	equ	0xFDD
  5101                           fsr2h	equ	0xFDA
  5102                           fsr2l	equ	0xFD9
  5103                           status	equ	0xFD8
  5104                           
  5105 ;; *************** function _positionMode *****************
  5106 ;; Defined at:
  5107 ;;		line 257 in file "main.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;		None
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;		None
  5112 ;; Return value:  Size  Location     Type
  5113 ;;                  1    wreg      void 
  5114 ;; Registers used:
  5115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;Total ram usage:        0 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; Hardware stack levels required when called:   10
  5128 ;; This function calls:
  5129 ;;		_Motor_Move
  5130 ;;		_Motor_Speed
  5131 ;;		___fladd
  5132 ;;		___flneg
  5133 ;;		___fltol
  5134 ;;		___xxtofl
  5135 ;; This function is called by:
  5136 ;;		_main
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           	psect	text10
  5141  01461A                     __ptext10:
  5142                           	opt stack 0
  5143  01461A                     _positionMode:
  5144                           	opt stack 20
  5145                           
  5146                           ;main.c: 258: diff = angle - currentPos;
  5147                           
  5148                           ;incstack = 0
  5149  01461A  C029  F0AB         	movff	_angle,___fladd@a
  5150  01461E  C02A  F0AC         	movff	_angle+1,___fladd@a+1
  5151  014622  C02B  F0AD         	movff	_angle+2,___fladd@a+2
  5152  014626  C02C  F0AE         	movff	_angle+3,___fladd@a+3
  5153  01462A  C1F1  F06E         	movff	_currentPos,___xxtofl@val
  5154  01462E  C1F2  F06F         	movff	_currentPos+1,___xxtofl@val+1
  5155  014632  0100               	movlb	0	; () banked
  5156  014634  0E00               	movlw	0
  5157  014636  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  5158  014638  0EFF               	movlw	-1
  5159  01463A  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
  5160  01463C  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
  5161  01463E  0E01               	movlw	1
  5162  014640  EC46  F092         	call	___xxtofl
  5163  014644  C06E  F07C         	movff	?___xxtofl,___flneg@f1
  5164  014648  C06F  F07D         	movff	?___xxtofl+1,___flneg@f1+1
  5165  01464C  C070  F07E         	movff	?___xxtofl+2,___flneg@f1+2
  5166  014650  C071  F07F         	movff	?___xxtofl+3,___flneg@f1+3
  5167  014654  EC2A  F0B4         	call	___flneg	;wreg free
  5168  014658  C07C  F0A7         	movff	?___flneg,___fladd@b
  5169  01465C  C07D  F0A8         	movff	?___flneg+1,___fladd@b+1
  5170  014660  C07E  F0A9         	movff	?___flneg+2,___fladd@b+2
  5171  014664  C07F  F0AA         	movff	?___flneg+3,___fladd@b+3
  5172  014668  EC00  F080         	call	___fladd	;wreg free
  5173  01466C  C0A7  F0BB         	movff	?___fladd,___fltol@f1
  5174  014670  C0A8  F0BC         	movff	?___fladd+1,___fltol@f1+1
  5175  014674  C0A9  F0BD         	movff	?___fladd+2,___fltol@f1+2
  5176  014678  C0AA  F0BE         	movff	?___fladd+3,___fltol@f1+3
  5177  01467C  ECF2  F09F         	call	___fltol	;wreg free
  5178  014680  C0BB  F122         	movff	?___fltol,_diff
  5179  014684  C0BC  F123         	movff	?___fltol+1,_diff+1
  5180                           
  5181                           ;main.c: 259: if (Stepper.mDelta == 0) {
  5182  014688  0101               	movlb	1	; () banked
  5183  01468A  51C3               	movf	_Stepper& (0+255),w,b
  5184  01468C  0101               	movlb	1	; () banked
  5185  01468E  11C4               	iorwf	(_Stepper+1)& (0+255),w,b
  5186  014690  A4D8               	btfss	status,2,c
  5187  014692  0012               	return	
  5188                           
  5189                           ; BSR set to: 1
  5190                           ;main.c: 260: Motor_Speed(&Stepper, 200);
  5191  014694  0EC3               	movlw	low _Stepper
  5192  014696  0100               	movlb	0	; () banked
  5193  014698  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  5194  01469A  0E01               	movlw	high _Stepper
  5195  01469C  0100               	movlb	0	; () banked
  5196  01469E  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5197  0146A0  0E00               	movlw	0
  5198  0146A2  0100               	movlb	0	; () banked
  5199  0146A4  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5200  0146A6  0EC8               	movlw	200
  5201  0146A8  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  5202  0146AA  EC53  F0B5         	call	_Motor_Speed	;wreg free
  5203                           
  5204                           ;main.c: 261: Motor_Move(&Stepper, diff);
  5205  0146AE  0EC3               	movlw	low _Stepper
  5206  0146B0  0100               	movlb	0	; () banked
  5207  0146B2  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  5208  0146B4  0E01               	movlw	high _Stepper
  5209  0146B6  0100               	movlb	0	; () banked
  5210  0146B8  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5211  0146BA  C122  F065         	movff	_diff,Motor_Move@pDelta
  5212  0146BE  C123  F066         	movff	_diff+1,Motor_Move@pDelta+1
  5213  0146C2  EC0D  F0B4         	call	_Motor_Move	;wreg free
  5214                           
  5215                           ;main.c: 262: currentPos = angle;
  5216  0146C6  C029  F0BB         	movff	_angle,___fltol@f1
  5217  0146CA  C02A  F0BC         	movff	_angle+1,___fltol@f1+1
  5218  0146CE  C02B  F0BD         	movff	_angle+2,___fltol@f1+2
  5219  0146D2  C02C  F0BE         	movff	_angle+3,___fltol@f1+3
  5220  0146D6  ECF2  F09F         	call	___fltol	;wreg free
  5221  0146DA  C0BB  F1F1         	movff	?___fltol,_currentPos
  5222  0146DE  C0BC  F1F2         	movff	?___fltol+1,_currentPos+1
  5223  0146E2  0012               	return	
  5224  0146E4                     __end_of_positionMode:
  5225                           	opt stack 0
  5226                           tblptru	equ	0xFF8
  5227                           tblptrh	equ	0xFF7
  5228                           tblptrl	equ	0xFF6
  5229                           tablat	equ	0xFF5
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           postdec1	equ	0xFE5
  5233                           fsr1h	equ	0xFE2
  5234                           fsr1l	equ	0xFE1
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function ___flneg *****************
  5242 ;; Defined at:
  5243 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flneg.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  f1              4   28[BANK0 ] void 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  4   28[BANK0 ] void 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        4 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    7
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_positionMode
  5268 ;;		_pow
  5269 ;;		_exp
  5270 ;; This function uses a non-reentrant model
  5271 ;;
  5272                           
  5273                           	psect	text11
  5274  016854                     __ptext11:
  5275                           	opt stack 0
  5276  016854                     ___flneg:
  5277                           	opt stack 21
  5278                           
  5279                           ;incstack = 0
  5280  016854  0100               	movlb	0	; () banked
  5281  016856  517C               	movf	___flneg@f1& (0+255),w,b
  5282  016858  0100               	movlb	0	; () banked
  5283  01685A  117D               	iorwf	(___flneg@f1+1)& (0+255),w,b
  5284  01685C  0100               	movlb	0	; () banked
  5285  01685E  117E               	iorwf	(___flneg@f1+2)& (0+255),w,b
  5286  016860  0100               	movlb	0	; () banked
  5287  016862  117F               	iorwf	(___flneg@f1+3)& (0+255),w,b
  5288  016864  B4D8               	btfsc	status,2,c
  5289  016866  D009               	goto	l2369
  5290                           
  5291                           ; BSR set to: 0
  5292  016868  0E00               	movlw	0
  5293  01686A  0100               	movlb	0	; () banked
  5294  01686C  1B7C               	xorwf	___flneg@f1& (0+255),f,b
  5295  01686E  0E00               	movlw	0
  5296  016870  1B7D               	xorwf	(___flneg@f1+1)& (0+255),f,b
  5297  016872  0E00               	movlw	0
  5298  016874  1B7E               	xorwf	(___flneg@f1+2)& (0+255),f,b
  5299  016876  0E80               	movlw	128
  5300  016878  1B7F               	xorwf	(___flneg@f1+3)& (0+255),f,b
  5301  01687A                     l2369:
  5302                           
  5303                           ; BSR set to: 0
  5304                           
  5305                           ; BSR set to: 0
  5306  01687A  C07C  F07C         	movff	___flneg@f1,?___flneg
  5307  01687E  C07D  F07D         	movff	___flneg@f1+1,?___flneg+1
  5308  016882  C07E  F07E         	movff	___flneg@f1+2,?___flneg+2
  5309  016886  C07F  F07F         	movff	___flneg@f1+3,?___flneg+3
  5310  01688A  0012               	return	
  5311  01688C                     __end_of___flneg:
  5312                           	opt stack 0
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           postinc0	equ	0xFEE
  5318                           wreg	equ	0xFE8
  5319                           postdec1	equ	0xFE5
  5320                           fsr1h	equ	0xFE2
  5321                           fsr1l	equ	0xFE1
  5322                           postinc2	equ	0xFDE
  5323                           postdec2	equ	0xFDD
  5324                           fsr2h	equ	0xFDA
  5325                           fsr2l	equ	0xFD9
  5326                           status	equ	0xFD8
  5327                           
  5328 ;; *************** function _nullMode *****************
  5329 ;; Defined at:
  5330 ;;		line 228 in file "main.c"
  5331 ;; Parameters:    Size  Location     Type
  5332 ;;		None
  5333 ;; Auto vars:     Size  Location     Type
  5334 ;;		None
  5335 ;; Return value:  Size  Location     Type
  5336 ;;                  1    wreg      void 
  5337 ;; Registers used:
  5338 ;;		wreg, status,2
  5339 ;; Tracked objects:
  5340 ;;		On entry : 0/0
  5341 ;;		On exit  : 0/0
  5342 ;;		Unchanged: 0/0
  5343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5345 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5347 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5348 ;;Total ram usage:        0 bytes
  5349 ;; Hardware stack levels used:    1
  5350 ;; Hardware stack levels required when called:    7
  5351 ;; This function calls:
  5352 ;;		Nothing
  5353 ;; This function is called by:
  5354 ;;		_main
  5355 ;; This function uses a non-reentrant model
  5356 ;;
  5357                           
  5358                           	psect	text12
  5359  016AF8                     __ptext12:
  5360                           	opt stack 0
  5361  016AF8                     _nullMode:
  5362                           	opt stack 23
  5363                           
  5364                           ;main.c: 229: steps = 0;
  5365                           
  5366                           ; BSR set to: 0
  5367                           ;incstack = 0
  5368  016AF8  0E00               	movlw	0
  5369  016AFA  6E2E               	movwf	_steps+1,c
  5370  016AFC  0E00               	movlw	0
  5371  016AFE  6E2D               	movwf	_steps,c
  5372                           
  5373                           ;main.c: 230: remainingSteps = 0;
  5374  016B00  0E00               	movlw	0
  5375  016B02  0101               	movlb	1	; () banked
  5376  016B04  6F21               	movwf	(_remainingSteps+1)& (0+255),b
  5377  016B06  0E00               	movlw	0
  5378  016B08  6F20               	movwf	_remainingSteps& (0+255),b
  5379                           
  5380                           ;main.c: 231: speed = 0;
  5381  016B0A  0E00               	movlw	0
  5382  016B0C  6E30               	movwf	_speed+1,c
  5383  016B0E  0E00               	movlw	0
  5384  016B10  6E2F               	movwf	_speed,c
  5385                           
  5386                           ;main.c: 232: direction = 0;
  5387  016B12  0E00               	movlw	0
  5388  016B14  0101               	movlb	1	; () banked
  5389  016B16  6FF4               	movwf	(_direction+1)& (0+255),b
  5390  016B18  0E00               	movlw	0
  5391  016B1A  6FF3               	movwf	_direction& (0+255),b
  5392                           
  5393                           ; BSR set to: 1
  5394  016B1C  0012               	return		;funcret
  5395  016B1E                     __end_of_nullMode:
  5396                           	opt stack 0
  5397                           tblptru	equ	0xFF8
  5398                           tblptrh	equ	0xFF7
  5399                           tblptrl	equ	0xFF6
  5400                           tablat	equ	0xFF5
  5401                           postinc0	equ	0xFEE
  5402                           wreg	equ	0xFE8
  5403                           postdec1	equ	0xFE5
  5404                           fsr1h	equ	0xFE2
  5405                           fsr1l	equ	0xFE1
  5406                           postinc2	equ	0xFDE
  5407                           postdec2	equ	0xFDD
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function _inputVar *****************
  5413 ;; Defined at:
  5414 ;;		line 95 in file "main.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;		None
  5419 ;; Return value:  Size  Location     Type
  5420 ;;                  1    wreg      void 
  5421 ;; Registers used:
  5422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5423 ;; Tracked objects:
  5424 ;;		On entry : 0/0
  5425 ;;		On exit  : 0/0
  5426 ;;		Unchanged: 0/0
  5427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;Total ram usage:        1 bytes
  5433 ;; Hardware stack levels used:    1
  5434 ;; Hardware stack levels required when called:   16
  5435 ;; This function calls:
  5436 ;;		_HMI_DIPSwitch
  5437 ;;		_HMI_DownSwitch
  5438 ;;		_HMI_LeftSwitch
  5439 ;;		_HMI_Poll
  5440 ;;		_HMI_RightSwitch
  5441 ;;		_HMI_UpSwitch
  5442 ;;		_MXK_DIPSwitch
  5443 ;;		_MXK_TestButton
  5444 ;;		_multiSampleADC
  5445 ;; This function is called by:
  5446 ;;		_main
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           	psect	text13
  5451  014CC8                     __ptext13:
  5452                           	opt stack 0
  5453  014CC8                     _inputVar:
  5454                           	opt stack 14
  5455                           
  5456                           ;main.c: 96: multiSampleADC();
  5457                           
  5458                           ; BSR set to: 1
  5459                           ;incstack = 0
  5460  014CC8  EC0D  F094         	call	_multiSampleADC	;wreg free
  5461                           
  5462                           ;main.c: 97: HMI_Poll();
  5463  014CCC  EC90  F0AD         	call	_HMI_Poll	;wreg free
  5464                           
  5465                           ;main.c: 100: dip = DIPSwitch.mGetState();
  5466  014CD0  EE22  F06B         	lfsr	2,_DIPSwitch+7
  5467  014CD4  D801               	call	u12398
  5468  014CD6  D00A               	goto	u12399
  5469  014CD8                     u12398:
  5470  014CD8  0005               	push	
  5471  014CDA  6EFA               	movwf	pclath,c
  5472  014CDC  50DE               	movf	postinc2,w,c
  5473  014CDE  6EFD               	movwf	tosl,c
  5474  014CE0  50DE               	movf	postinc2,w,c
  5475  014CE2  6EFE               	movwf	tosh,c
  5476  014CE4  50DE               	movf	postinc2,w,c
  5477  014CE6  6EFF               	movwf	tosu,c
  5478  014CE8  50FA               	movf	pclath,w,c
  5479  014CEA  0012               	return		;indir
  5480  014CEC                     u12399:
  5481  014CEC  0100               	movlb	0	; () banked
  5482  014CEE  6FBB               	movwf	??_inputVar& (0+255),b
  5483  014CF0  0100               	movlb	0	; () banked
  5484  014CF2  51BB               	movf	??_inputVar& (0+255),w,b
  5485  014CF4  0101               	movlb	1	; () banked
  5486  014CF6  6F26               	movwf	_dip& (0+255),b
  5487  014CF8  6B27               	clrf	(_dip+1)& (0+255),b
  5488                           
  5489                           ; BSR set to: 1
  5490                           ;main.c: 103: upState = HMIBoard.mUp.mGetState();
  5491  014CFA  EE21  F053         	lfsr	2,_HMIBoard+35
  5492  014CFE  D801               	call	u12408
  5493  014D00  D00A               	goto	u12409
  5494  014D02                     u12408:
  5495  014D02  0005               	push	
  5496  014D04  6EFA               	movwf	pclath,c
  5497  014D06  50DE               	movf	postinc2,w,c
  5498  014D08  6EFD               	movwf	tosl,c
  5499  014D0A  50DE               	movf	postinc2,w,c
  5500  014D0C  6EFE               	movwf	tosh,c
  5501  014D0E  50DE               	movf	postinc2,w,c
  5502  014D10  6EFF               	movwf	tosu,c
  5503  014D12  50FA               	movf	pclath,w,c
  5504  014D14  0012               	return		;indir
  5505  014D16                     u12409:
  5506  014D16  0100               	movlb	0	; () banked
  5507  014D18  6FF6               	movwf	_upState& (0+255),b
  5508                           
  5509                           ; BSR set to: 0
  5510                           ;main.c: 104: downState = HMIBoard.mDown.mGetState();
  5511  014D1A  EE21  F05D         	lfsr	2,_HMIBoard+45
  5512  014D1E  D801               	call	u12418
  5513  014D20  D00A               	goto	u12419
  5514  014D22                     u12418:
  5515  014D22  0005               	push	
  5516  014D24  6EFA               	movwf	pclath,c
  5517  014D26  50DE               	movf	postinc2,w,c
  5518  014D28  6EFD               	movwf	tosl,c
  5519  014D2A  50DE               	movf	postinc2,w,c
  5520  014D2C  6EFE               	movwf	tosh,c
  5521  014D2E  50DE               	movf	postinc2,w,c
  5522  014D30  6EFF               	movwf	tosu,c
  5523  014D32  50FA               	movf	pclath,w,c
  5524  014D34  0012               	return		;indir
  5525  014D36                     u12419:
  5526  014D36  0100               	movlb	0	; () banked
  5527  014D38  6FF5               	movwf	_downState& (0+255),b
  5528                           
  5529                           ; BSR set to: 0
  5530                           ;main.c: 105: leftState = HMIBoard.mLeft.mGetState();
  5531  014D3A  EE21  F049         	lfsr	2,_HMIBoard+25
  5532  014D3E  D801               	call	u12428
  5533  014D40  D00A               	goto	u12429
  5534  014D42                     u12428:
  5535  014D42  0005               	push	
  5536  014D44  6EFA               	movwf	pclath,c
  5537  014D46  50DE               	movf	postinc2,w,c
  5538  014D48  6EFD               	movwf	tosl,c
  5539  014D4A  50DE               	movf	postinc2,w,c
  5540  014D4C  6EFE               	movwf	tosh,c
  5541  014D4E  50DE               	movf	postinc2,w,c
  5542  014D50  6EFF               	movwf	tosu,c
  5543  014D52  50FA               	movf	pclath,w,c
  5544  014D54  0012               	return		;indir
  5545  014D56                     u12429:
  5546  014D56  6E3A               	movwf	_leftState,c
  5547                           
  5548                           ;main.c: 106: rightState = HMIBoard.mRight.mGetState();
  5549  014D58  EE21  F03F         	lfsr	2,_HMIBoard+15
  5550  014D5C  D801               	call	u12438
  5551  014D5E  D00A               	goto	u12439
  5552  014D60                     u12438:
  5553  014D60  0005               	push	
  5554  014D62  6EFA               	movwf	pclath,c
  5555  014D64  50DE               	movf	postinc2,w,c
  5556  014D66  6EFD               	movwf	tosl,c
  5557  014D68  50DE               	movf	postinc2,w,c
  5558  014D6A  6EFE               	movwf	tosh,c
  5559  014D6C  50DE               	movf	postinc2,w,c
  5560  014D6E  6EFF               	movwf	tosu,c
  5561  014D70  50FA               	movf	pclath,w,c
  5562  014D72  0012               	return		;indir
  5563  014D74                     u12439:
  5564  014D74  6E39               	movwf	_rightState,c
  5565  014D76  0012               	return		;funcret
  5566  014D78                     __end_of_inputVar:
  5567                           	opt stack 0
  5568                           tosu	equ	0xFFF
  5569                           tosh	equ	0xFFE
  5570                           tosl	equ	0xFFD
  5571                           pclath	equ	0xFFA
  5572                           tblptru	equ	0xFF8
  5573                           tblptrh	equ	0xFF7
  5574                           tblptrl	equ	0xFF6
  5575                           tablat	equ	0xFF5
  5576                           postinc0	equ	0xFEE
  5577                           wreg	equ	0xFE8
  5578                           postdec1	equ	0xFE5
  5579                           fsr1h	equ	0xFE2
  5580                           fsr1l	equ	0xFE1
  5581                           postinc2	equ	0xFDE
  5582                           postdec2	equ	0xFDD
  5583                           fsr2h	equ	0xFDA
  5584                           fsr2l	equ	0xFD9
  5585                           status	equ	0xFD8
  5586                           
  5587 ;; *************** function _multiSampleADC *****************
  5588 ;; Defined at:
  5589 ;;		line 268 in file "main.c"
  5590 ;; Parameters:    Size  Location     Type
  5591 ;;		None
  5592 ;; Auto vars:     Size  Location     Type
  5593 ;;		None
  5594 ;; Return value:  Size  Location     Type
  5595 ;;                  1    wreg      void 
  5596 ;; Registers used:
  5597 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5598 ;; Tracked objects:
  5599 ;;		On entry : 0/0
  5600 ;;		On exit  : 0/0
  5601 ;;		Unchanged: 0/0
  5602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;Total ram usage:        0 bytes
  5608 ;; Hardware stack levels used:    1
  5609 ;; Hardware stack levels required when called:   10
  5610 ;; This function calls:
  5611 ;;		_ADC_Voltage
  5612 ;;		_FunctADC
  5613 ;;		___fladd
  5614 ;;		___fldiv
  5615 ;; This function is called by:
  5616 ;;		_inputVar
  5617 ;; This function uses a non-reentrant model
  5618 ;;
  5619                           
  5620                           	psect	text14
  5621  01281A                     __ptext14:
  5622                           	opt stack 0
  5623  01281A                     _multiSampleADC:
  5624                           	opt stack 19
  5625                           
  5626                           ;main.c: 269: ADCVoltage = 0;
  5627                           
  5628                           ;incstack = 0
  5629  01281A  0E00               	movlw	0
  5630  01281C  0100               	movlb	0	; () banked
  5631  01281E  6FE8               	movwf	_ADCVoltage& (0+255),b
  5632  012820  0E00               	movlw	0
  5633  012822  6FE9               	movwf	(_ADCVoltage+1)& (0+255),b
  5634  012824  0E00               	movlw	0
  5635  012826  6FEA               	movwf	(_ADCVoltage+2)& (0+255),b
  5636  012828  0E00               	movlw	0
  5637  01282A  6FEB               	movwf	(_ADCVoltage+3)& (0+255),b
  5638                           
  5639                           ; BSR set to: 0
  5640                           ;main.c: 270: FunctADC();
  5641  01282C  ECDF  F0B6         	call	_FunctADC	;wreg free
  5642                           
  5643                           ;main.c: 271: ADCVoltage += ADC_Voltage(&ADC_AN0);
  5644  012830  C0E8  F0A7         	movff	_ADCVoltage,___fladd@b
  5645  012834  C0E9  F0A8         	movff	_ADCVoltage+1,___fladd@b+1
  5646  012838  C0EA  F0A9         	movff	_ADCVoltage+2,___fladd@b+2
  5647  01283C  C0EB  F0AA         	movff	_ADCVoltage+3,___fladd@b+3
  5648  012840  0ED8               	movlw	low _ADC_AN0
  5649  012842  0100               	movlb	0	; () banked
  5650  012844  6F95               	movwf	ADC_Voltage@pInput& (0+255),b
  5651  012846  0E01               	movlw	high _ADC_AN0
  5652  012848  0100               	movlb	0	; () banked
  5653  01284A  6F96               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5654  01284C  ECF8  F0A0         	call	_ADC_Voltage	;wreg free
  5655  012850  C095  F0AB         	movff	?_ADC_Voltage,___fladd@a
  5656  012854  C096  F0AC         	movff	?_ADC_Voltage+1,___fladd@a+1
  5657  012858  C097  F0AD         	movff	?_ADC_Voltage+2,___fladd@a+2
  5658  01285C  C098  F0AE         	movff	?_ADC_Voltage+3,___fladd@a+3
  5659  012860  EC00  F080         	call	___fladd	;wreg free
  5660  012864  C0A7  F0E8         	movff	?___fladd,_ADCVoltage
  5661  012868  C0A8  F0E9         	movff	?___fladd+1,_ADCVoltage+1
  5662  01286C  C0A9  F0EA         	movff	?___fladd+2,_ADCVoltage+2
  5663  012870  C0AA  F0EB         	movff	?___fladd+3,_ADCVoltage+3
  5664                           
  5665                           ;main.c: 272: FunctADC();
  5666  012874  ECDF  F0B6         	call	_FunctADC	;wreg free
  5667                           
  5668                           ;main.c: 273: ADCVoltage += ADC_Voltage(&ADC_AN0);
  5669  012878  C0E8  F0A7         	movff	_ADCVoltage,___fladd@b
  5670  01287C  C0E9  F0A8         	movff	_ADCVoltage+1,___fladd@b+1
  5671  012880  C0EA  F0A9         	movff	_ADCVoltage+2,___fladd@b+2
  5672  012884  C0EB  F0AA         	movff	_ADCVoltage+3,___fladd@b+3
  5673  012888  0ED8               	movlw	low _ADC_AN0
  5674  01288A  0100               	movlb	0	; () banked
  5675  01288C  6F95               	movwf	ADC_Voltage@pInput& (0+255),b
  5676  01288E  0E01               	movlw	high _ADC_AN0
  5677  012890  0100               	movlb	0	; () banked
  5678  012892  6F96               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5679  012894  ECF8  F0A0         	call	_ADC_Voltage	;wreg free
  5680  012898  C095  F0AB         	movff	?_ADC_Voltage,___fladd@a
  5681  01289C  C096  F0AC         	movff	?_ADC_Voltage+1,___fladd@a+1
  5682  0128A0  C097  F0AD         	movff	?_ADC_Voltage+2,___fladd@a+2
  5683  0128A4  C098  F0AE         	movff	?_ADC_Voltage+3,___fladd@a+3
  5684  0128A8  EC00  F080         	call	___fladd	;wreg free
  5685  0128AC  C0A7  F0E8         	movff	?___fladd,_ADCVoltage
  5686  0128B0  C0A8  F0E9         	movff	?___fladd+1,_ADCVoltage+1
  5687  0128B4  C0A9  F0EA         	movff	?___fladd+2,_ADCVoltage+2
  5688  0128B8  C0AA  F0EB         	movff	?___fladd+3,_ADCVoltage+3
  5689                           
  5690                           ;main.c: 274: FunctADC();
  5691  0128BC  ECDF  F0B6         	call	_FunctADC	;wreg free
  5692                           
  5693                           ;main.c: 275: ADCVoltage += ADC_Voltage(&ADC_AN0);
  5694  0128C0  C0E8  F0A7         	movff	_ADCVoltage,___fladd@b
  5695  0128C4  C0E9  F0A8         	movff	_ADCVoltage+1,___fladd@b+1
  5696  0128C8  C0EA  F0A9         	movff	_ADCVoltage+2,___fladd@b+2
  5697  0128CC  C0EB  F0AA         	movff	_ADCVoltage+3,___fladd@b+3
  5698  0128D0  0ED8               	movlw	low _ADC_AN0
  5699  0128D2  0100               	movlb	0	; () banked
  5700  0128D4  6F95               	movwf	ADC_Voltage@pInput& (0+255),b
  5701  0128D6  0E01               	movlw	high _ADC_AN0
  5702  0128D8  0100               	movlb	0	; () banked
  5703  0128DA  6F96               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5704  0128DC  ECF8  F0A0         	call	_ADC_Voltage	;wreg free
  5705  0128E0  C095  F0AB         	movff	?_ADC_Voltage,___fladd@a
  5706  0128E4  C096  F0AC         	movff	?_ADC_Voltage+1,___fladd@a+1
  5707  0128E8  C097  F0AD         	movff	?_ADC_Voltage+2,___fladd@a+2
  5708  0128EC  C098  F0AE         	movff	?_ADC_Voltage+3,___fladd@a+3
  5709  0128F0  EC00  F080         	call	___fladd	;wreg free
  5710  0128F4  C0A7  F0E8         	movff	?___fladd,_ADCVoltage
  5711  0128F8  C0A8  F0E9         	movff	?___fladd+1,_ADCVoltage+1
  5712  0128FC  C0A9  F0EA         	movff	?___fladd+2,_ADCVoltage+2
  5713  012900  C0AA  F0EB         	movff	?___fladd+3,_ADCVoltage+3
  5714                           
  5715                           ;main.c: 276: FunctADC();
  5716  012904  ECDF  F0B6         	call	_FunctADC	;wreg free
  5717                           
  5718                           ;main.c: 277: ADCVoltage += ADC_Voltage(&ADC_AN0);
  5719  012908  C0E8  F0A7         	movff	_ADCVoltage,___fladd@b
  5720  01290C  C0E9  F0A8         	movff	_ADCVoltage+1,___fladd@b+1
  5721  012910  C0EA  F0A9         	movff	_ADCVoltage+2,___fladd@b+2
  5722  012914  C0EB  F0AA         	movff	_ADCVoltage+3,___fladd@b+3
  5723  012918  0ED8               	movlw	low _ADC_AN0
  5724  01291A  0100               	movlb	0	; () banked
  5725  01291C  6F95               	movwf	ADC_Voltage@pInput& (0+255),b
  5726  01291E  0E01               	movlw	high _ADC_AN0
  5727  012920  0100               	movlb	0	; () banked
  5728  012922  6F96               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5729  012924  ECF8  F0A0         	call	_ADC_Voltage	;wreg free
  5730  012928  C095  F0AB         	movff	?_ADC_Voltage,___fladd@a
  5731  01292C  C096  F0AC         	movff	?_ADC_Voltage+1,___fladd@a+1
  5732  012930  C097  F0AD         	movff	?_ADC_Voltage+2,___fladd@a+2
  5733  012934  C098  F0AE         	movff	?_ADC_Voltage+3,___fladd@a+3
  5734  012938  EC00  F080         	call	___fladd	;wreg free
  5735  01293C  C0A7  F0E8         	movff	?___fladd,_ADCVoltage
  5736  012940  C0A8  F0E9         	movff	?___fladd+1,_ADCVoltage+1
  5737  012944  C0A9  F0EA         	movff	?___fladd+2,_ADCVoltage+2
  5738  012948  C0AA  F0EB         	movff	?___fladd+3,_ADCVoltage+3
  5739                           
  5740                           ;main.c: 278: FunctADC();
  5741  01294C  ECDF  F0B6         	call	_FunctADC	;wreg free
  5742                           
  5743                           ;main.c: 279: ADCVoltage += ADC_Voltage(&ADC_AN0);
  5744  012950  C0E8  F0A7         	movff	_ADCVoltage,___fladd@b
  5745  012954  C0E9  F0A8         	movff	_ADCVoltage+1,___fladd@b+1
  5746  012958  C0EA  F0A9         	movff	_ADCVoltage+2,___fladd@b+2
  5747  01295C  C0EB  F0AA         	movff	_ADCVoltage+3,___fladd@b+3
  5748  012960  0ED8               	movlw	low _ADC_AN0
  5749  012962  0100               	movlb	0	; () banked
  5750  012964  6F95               	movwf	ADC_Voltage@pInput& (0+255),b
  5751  012966  0E01               	movlw	high _ADC_AN0
  5752  012968  0100               	movlb	0	; () banked
  5753  01296A  6F96               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5754  01296C  ECF8  F0A0         	call	_ADC_Voltage	;wreg free
  5755  012970  C095  F0AB         	movff	?_ADC_Voltage,___fladd@a
  5756  012974  C096  F0AC         	movff	?_ADC_Voltage+1,___fladd@a+1
  5757  012978  C097  F0AD         	movff	?_ADC_Voltage+2,___fladd@a+2
  5758  01297C  C098  F0AE         	movff	?_ADC_Voltage+3,___fladd@a+3
  5759  012980  EC00  F080         	call	___fladd	;wreg free
  5760  012984  C0A7  F0E8         	movff	?___fladd,_ADCVoltage
  5761  012988  C0A8  F0E9         	movff	?___fladd+1,_ADCVoltage+1
  5762  01298C  C0A9  F0EA         	movff	?___fladd+2,_ADCVoltage+2
  5763  012990  C0AA  F0EB         	movff	?___fladd+3,_ADCVoltage+3
  5764                           
  5765                           ;main.c: 280: ADCVoltage = (ADCVoltage / 5);
  5766  012994  C0E8  F060         	movff	_ADCVoltage,___fldiv@b
  5767  012998  C0E9  F061         	movff	_ADCVoltage+1,___fldiv@b+1
  5768  01299C  C0EA  F062         	movff	_ADCVoltage+2,___fldiv@b+2
  5769  0129A0  C0EB  F063         	movff	_ADCVoltage+3,___fldiv@b+3
  5770  0129A4  0E00               	movlw	0
  5771  0129A6  0100               	movlb	0	; () banked
  5772  0129A8  6F64               	movwf	___fldiv@a& (0+255),b
  5773  0129AA  0E00               	movlw	0
  5774  0129AC  6F65               	movwf	(___fldiv@a+1)& (0+255),b
  5775  0129AE  0EA0               	movlw	160
  5776  0129B0  6F66               	movwf	(___fldiv@a+2)& (0+255),b
  5777  0129B2  0E40               	movlw	64
  5778  0129B4  6F67               	movwf	(___fldiv@a+3)& (0+255),b
  5779  0129B6  ECB6  F086         	call	___fldiv	;wreg free
  5780  0129BA  C060  F0E8         	movff	?___fldiv,_ADCVoltage
  5781  0129BE  C061  F0E9         	movff	?___fldiv+1,_ADCVoltage+1
  5782  0129C2  C062  F0EA         	movff	?___fldiv+2,_ADCVoltage+2
  5783  0129C6  C063  F0EB         	movff	?___fldiv+3,_ADCVoltage+3
  5784  0129CA  0012               	return		;funcret
  5785  0129CC                     __end_of_multiSampleADC:
  5786                           	opt stack 0
  5787                           tosu	equ	0xFFF
  5788                           tosh	equ	0xFFE
  5789                           tosl	equ	0xFFD
  5790                           pclath	equ	0xFFA
  5791                           tblptru	equ	0xFF8
  5792                           tblptrh	equ	0xFF7
  5793                           tblptrl	equ	0xFF6
  5794                           tablat	equ	0xFF5
  5795                           postinc0	equ	0xFEE
  5796                           wreg	equ	0xFE8
  5797                           postdec1	equ	0xFE5
  5798                           fsr1h	equ	0xFE2
  5799                           fsr1l	equ	0xFE1
  5800                           postinc2	equ	0xFDE
  5801                           postdec2	equ	0xFDD
  5802                           fsr2h	equ	0xFDA
  5803                           fsr2l	equ	0xFD9
  5804                           status	equ	0xFD8
  5805                           
  5806 ;; *************** function ___fladd *****************
  5807 ;; Defined at:
  5808 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
  5809 ;; Parameters:    Size  Location     Type
  5810 ;;  b               4   71[BANK0 ] void 
  5811 ;;  a               4   75[BANK0 ] void 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  grs             1   90[BANK0 ] unsigned char 
  5814 ;;  bexp            1   89[BANK0 ] unsigned char 
  5815 ;;  aexp            1   88[BANK0 ] unsigned char 
  5816 ;;  signs           1   87[BANK0 ] unsigned char 
  5817 ;; Return value:  Size  Location     Type
  5818 ;;                  4   71[BANK0 ] unsigned char 
  5819 ;; Registers used:
  5820 ;;		wreg, status,2, status,0
  5821 ;; Tracked objects:
  5822 ;;		On entry : 0/0
  5823 ;;		On exit  : 0/0
  5824 ;;		Unchanged: 0/0
  5825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5826 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5828 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;Total ram usage:       20 bytes
  5831 ;; Hardware stack levels used:    1
  5832 ;; Hardware stack levels required when called:    7
  5833 ;; This function calls:
  5834 ;;		Nothing
  5835 ;; This function is called by:
  5836 ;;		_positionMode
  5837 ;;		_multiSampleADC
  5838 ;;		___flsub
  5839 ;;		_floor
  5840 ;;		_log
  5841 ;;		_eval_poly
  5842 ;; This function uses a non-reentrant model
  5843 ;;
  5844                           
  5845                           	psect	text15
  5846  010000                     __ptext15:
  5847                           	opt stack 0
  5848  010000                     ___fladd:
  5849                           	opt stack 20
  5850                           
  5851                           ;incstack = 0
  5852  010000  0100               	movlb	0	; () banked
  5853  010002  51AA               	movf	(___fladd@b+3)& (0+255),w,b
  5854  010004  0B80               	andlw	128
  5855  010006  0100               	movlb	0	; () banked
  5856  010008  6FB7               	movwf	___fladd@signs& (0+255),b
  5857  01000A  0100               	movlb	0	; () banked
  5858  01000C  51AA               	movf	(___fladd@b+3)& (0+255),w,b
  5859  01000E  25AA               	addwf	(___fladd@b+3)& (0+255),w,b
  5860  010010  0100               	movlb	0	; () banked
  5861  010012  6FB9               	movwf	___fladd@bexp& (0+255),b
  5862                           
  5863                           ; BSR set to: 0
  5864  010014  0100               	movlb	0	; () banked
  5865  010016  AFA9               	btfss	(___fladd@b+2)& (0+255),7,b
  5866  010018  D002               	goto	l2605
  5867                           
  5868                           ; BSR set to: 0
  5869  01001A  0100               	movlb	0	; () banked
  5870  01001C  81B9               	bsf	___fladd@bexp& (0+255),0,b
  5871  01001E                     l2605:
  5872                           
  5873                           ; BSR set to: 0
  5874                           
  5875                           ; BSR set to: 0
  5876  01001E  0100               	movlb	0	; () banked
  5877  010020  51B9               	movf	___fladd@bexp& (0+255),w,b
  5878  010022  0100               	movlb	0	; () banked
  5879  010024  B4D8               	btfsc	status,2,c
  5880  010026  D012               	goto	l2606
  5881                           
  5882                           ; BSR set to: 0
  5883  010028  0100               	movlb	0	; () banked
  5884  01002A  29B9               	incf	___fladd@bexp& (0+255),w,b
  5885  01002C  A4D8               	btfss	status,2,c
  5886  01002E  D009               	goto	l2607
  5887                           
  5888                           ; BSR set to: 0
  5889  010030  0E00               	movlw	0
  5890  010032  0100               	movlb	0	; () banked
  5891  010034  6FA7               	movwf	___fladd@b& (0+255),b
  5892  010036  0E00               	movlw	0
  5893  010038  6FA8               	movwf	(___fladd@b+1)& (0+255),b
  5894  01003A  0E00               	movlw	0
  5895  01003C  6FA9               	movwf	(___fladd@b+2)& (0+255),b
  5896  01003E  0E00               	movlw	0
  5897  010040  6FAA               	movwf	(___fladd@b+3)& (0+255),b
  5898  010042                     l2607:
  5899                           
  5900                           ; BSR set to: 0
  5901                           
  5902                           ; BSR set to: 0
  5903  010042  0100               	movlb	0	; () banked
  5904  010044  8FA9               	bsf	(___fladd@b+2)& (0+255),7,b
  5905                           
  5906                           ; BSR set to: 0
  5907  010046  0E00               	movlw	0
  5908  010048  0100               	movlb	0	; () banked
  5909  01004A  D008               	goto	L2
  5910  01004C                     l2606:
  5911                           
  5912                           ; BSR set to: 0
  5913                           
  5914                           ; BSR set to: 0
  5915  01004C  0E00               	movlw	0
  5916  01004E  0100               	movlb	0	; () banked
  5917  010050  6FA7               	movwf	___fladd@b& (0+255),b
  5918  010052  0E00               	movlw	0
  5919  010054  6FA8               	movwf	(___fladd@b+1)& (0+255),b
  5920  010056  0E00               	movlw	0
  5921  010058  6FA9               	movwf	(___fladd@b+2)& (0+255),b
  5922  01005A  0E00               	movlw	0
  5923  01005C                     L2:
  5924  01005C  6FAA               	movwf	(___fladd@b+3)& (0+255),b
  5925                           
  5926                           ; BSR set to: 0
  5927                           
  5928                           ; BSR set to: 0
  5929  01005E  0100               	movlb	0	; () banked
  5930  010060  51AE               	movf	(___fladd@a+3)& (0+255),w,b
  5931  010062  0B80               	andlw	128
  5932  010064  0100               	movlb	0	; () banked
  5933  010066  6FB8               	movwf	___fladd@aexp& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936  010068  0100               	movlb	0	; () banked
  5937  01006A  51B7               	movf	___fladd@signs& (0+255),w,b
  5938  01006C  0100               	movlb	0	; () banked
  5939  01006E  19B8               	xorwf	___fladd@aexp& (0+255),w,b
  5940  010070  B4D8               	btfsc	status,2,c
  5941  010072  D002               	goto	l2609
  5942                           
  5943                           ; BSR set to: 0
  5944  010074  0100               	movlb	0	; () banked
  5945  010076  8DB7               	bsf	___fladd@signs& (0+255),6,b
  5946  010078                     l2609:
  5947                           
  5948                           ; BSR set to: 0
  5949                           
  5950                           ; BSR set to: 0
  5951  010078  0100               	movlb	0	; () banked
  5952  01007A  51AE               	movf	(___fladd@a+3)& (0+255),w,b
  5953  01007C  25AE               	addwf	(___fladd@a+3)& (0+255),w,b
  5954  01007E  0100               	movlb	0	; () banked
  5955  010080  6FB8               	movwf	___fladd@aexp& (0+255),b
  5956                           
  5957                           ; BSR set to: 0
  5958  010082  0100               	movlb	0	; () banked
  5959  010084  AFAD               	btfss	(___fladd@a+2)& (0+255),7,b
  5960  010086  D002               	goto	l2610
  5961                           
  5962                           ; BSR set to: 0
  5963  010088  0100               	movlb	0	; () banked
  5964  01008A  81B8               	bsf	___fladd@aexp& (0+255),0,b
  5965  01008C                     l2610:
  5966                           
  5967                           ; BSR set to: 0
  5968                           
  5969                           ; BSR set to: 0
  5970  01008C  0100               	movlb	0	; () banked
  5971  01008E  51B8               	movf	___fladd@aexp& (0+255),w,b
  5972  010090  0100               	movlb	0	; () banked
  5973  010092  B4D8               	btfsc	status,2,c
  5974  010094  D012               	goto	l2611
  5975                           
  5976                           ; BSR set to: 0
  5977  010096  0100               	movlb	0	; () banked
  5978  010098  29B8               	incf	___fladd@aexp& (0+255),w,b
  5979  01009A  A4D8               	btfss	status,2,c
  5980  01009C  D009               	goto	l2612
  5981                           
  5982                           ; BSR set to: 0
  5983  01009E  0E00               	movlw	0
  5984  0100A0  0100               	movlb	0	; () banked
  5985  0100A2  6FAB               	movwf	___fladd@a& (0+255),b
  5986  0100A4  0E00               	movlw	0
  5987  0100A6  6FAC               	movwf	(___fladd@a+1)& (0+255),b
  5988  0100A8  0E00               	movlw	0
  5989  0100AA  6FAD               	movwf	(___fladd@a+2)& (0+255),b
  5990  0100AC  0E00               	movlw	0
  5991  0100AE  6FAE               	movwf	(___fladd@a+3)& (0+255),b
  5992  0100B0                     l2612:
  5993                           
  5994                           ; BSR set to: 0
  5995                           
  5996                           ; BSR set to: 0
  5997  0100B0  0100               	movlb	0	; () banked
  5998  0100B2  8FAD               	bsf	(___fladd@a+2)& (0+255),7,b
  5999                           
  6000                           ; BSR set to: 0
  6001  0100B4  0E00               	movlw	0
  6002  0100B6  0100               	movlb	0	; () banked
  6003  0100B8  D008               	goto	L3
  6004  0100BA                     l2611:
  6005                           
  6006                           ; BSR set to: 0
  6007                           
  6008                           ; BSR set to: 0
  6009  0100BA  0E00               	movlw	0
  6010  0100BC  0100               	movlb	0	; () banked
  6011  0100BE  6FAB               	movwf	___fladd@a& (0+255),b
  6012  0100C0  0E00               	movlw	0
  6013  0100C2  6FAC               	movwf	(___fladd@a+1)& (0+255),b
  6014  0100C4  0E00               	movlw	0
  6015  0100C6  6FAD               	movwf	(___fladd@a+2)& (0+255),b
  6016  0100C8  0E00               	movlw	0
  6017  0100CA                     L3:
  6018  0100CA  6FAE               	movwf	(___fladd@a+3)& (0+255),b
  6019                           
  6020                           ; BSR set to: 0
  6021                           
  6022                           ; BSR set to: 0
  6023  0100CC  0100               	movlb	0	; () banked
  6024  0100CE  51B9               	movf	___fladd@bexp& (0+255),w,b
  6025  0100D0  0100               	movlb	0	; () banked
  6026  0100D2  5DB8               	subwf	___fladd@aexp& (0+255),w,b
  6027  0100D4  B0D8               	btfsc	status,0,c
  6028  0100D6  D024               	goto	l2614
  6029                           
  6030                           ; BSR set to: 0
  6031  0100D8  0100               	movlb	0	; () banked
  6032  0100DA  ADB7               	btfss	___fladd@signs& (0+255),6,b
  6033  0100DC  D003               	goto	l2615
  6034                           
  6035                           ; BSR set to: 0
  6036  0100DE  0E80               	movlw	128
  6037  0100E0  0100               	movlb	0	; () banked
  6038  0100E2  1BB7               	xorwf	___fladd@signs& (0+255),f,b
  6039  0100E4                     l2615:
  6040                           
  6041                           ; BSR set to: 0
  6042                           
  6043                           ; BSR set to: 0
  6044  0100E4  C0B9  F0BA         	movff	___fladd@bexp,___fladd@grs
  6045                           
  6046                           ; BSR set to: 0
  6047  0100E8  C0B8  F0B9         	movff	___fladd@aexp,___fladd@bexp
  6048                           
  6049                           ; BSR set to: 0
  6050  0100EC  C0BA  F0B8         	movff	___fladd@grs,___fladd@aexp
  6051                           
  6052                           ; BSR set to: 0
  6053  0100F0  C0A7  F0BA         	movff	___fladd@b,___fladd@grs
  6054                           
  6055                           ; BSR set to: 0
  6056  0100F4  C0AB  F0A7         	movff	___fladd@a,___fladd@b
  6057                           
  6058                           ; BSR set to: 0
  6059  0100F8  C0BA  F0AB         	movff	___fladd@grs,___fladd@a
  6060                           
  6061                           ; BSR set to: 0
  6062  0100FC  C0A8  F0BA         	movff	___fladd@b+1,___fladd@grs
  6063                           
  6064                           ; BSR set to: 0
  6065  010100  C0AC  F0A8         	movff	___fladd@a+1,___fladd@b+1
  6066                           
  6067                           ; BSR set to: 0
  6068  010104  C0BA  F0AC         	movff	___fladd@grs,___fladd@a+1
  6069                           
  6070                           ; BSR set to: 0
  6071  010108  C0A9  F0BA         	movff	___fladd@b+2,___fladd@grs
  6072                           
  6073                           ; BSR set to: 0
  6074  01010C  C0AD  F0A9         	movff	___fladd@a+2,___fladd@b+2
  6075                           
  6076                           ; BSR set to: 0
  6077  010110  C0BA  F0AD         	movff	___fladd@grs,___fladd@a+2
  6078                           
  6079                           ; BSR set to: 0
  6080  010114  C0AA  F0BA         	movff	___fladd@b+3,___fladd@grs
  6081                           
  6082                           ; BSR set to: 0
  6083  010118  C0AE  F0AA         	movff	___fladd@a+3,___fladd@b+3
  6084                           
  6085                           ; BSR set to: 0
  6086  01011C  C0BA  F0AE         	movff	___fladd@grs,___fladd@a+3
  6087  010120                     l2614:
  6088                           
  6089                           ; BSR set to: 0
  6090                           
  6091                           ; BSR set to: 0
  6092  010120  0E00               	movlw	0
  6093  010122  0100               	movlb	0	; () banked
  6094  010124  6FBA               	movwf	___fladd@grs& (0+255),b
  6095                           
  6096                           ; BSR set to: 0
  6097  010126  0100               	movlb	0	; () banked
  6098  010128  51B9               	movf	___fladd@bexp& (0+255),w,b
  6099  01012A  0100               	movlb	0	; () banked
  6100  01012C  6FAF               	movwf	??___fladd& (0+255),b
  6101  01012E  6BB0               	clrf	(??___fladd+1)& (0+255),b
  6102  010130  0100               	movlb	0	; () banked
  6103  010132  1FAF               	comf	??___fladd& (0+255),f,b
  6104  010134  1FB0               	comf	(??___fladd+1)& (0+255),f,b
  6105  010136  4BAF               	infsnz	??___fladd& (0+255),f,b
  6106  010138  2BB0               	incf	(??___fladd+1)& (0+255),f,b
  6107  01013A  0100               	movlb	0	; () banked
  6108  01013C  51B8               	movf	___fladd@aexp& (0+255),w,b
  6109  01013E  0100               	movlb	0	; () banked
  6110  010140  6FB1               	movwf	(??___fladd+2)& (0+255),b
  6111  010142  6BB2               	clrf	(??___fladd+3)& (0+255),b
  6112  010144  0100               	movlb	0	; () banked
  6113  010146  51AF               	movf	??___fladd& (0+255),w,b
  6114  010148  0100               	movlb	0	; () banked
  6115  01014A  27B1               	addwf	(??___fladd+2)& (0+255),f,b
  6116  01014C  0100               	movlb	0	; () banked
  6117  01014E  51B0               	movf	(??___fladd+1)& (0+255),w,b
  6118  010150  0100               	movlb	0	; () banked
  6119  010152  23B2               	addwfc	(??___fladd+3)& (0+255),f,b
  6120  010154  0100               	movlb	0	; () banked
  6121  010156  BFB2               	btfsc	(??___fladd+3)& (0+255),7,b
  6122  010158  D03D               	goto	l2618
  6123  01015A  0100               	movlb	0	; () banked
  6124  01015C  51B2               	movf	(??___fladd+3)& (0+255),w,b
  6125  01015E  E105               	bnz	u10150
  6126  010160  0E1A               	movlw	26
  6127  010162  0100               	movlb	0	; () banked
  6128  010164  5DB1               	subwf	(??___fladd+2)& (0+255),w,b
  6129  010166  A0D8               	btfss	status,0,c
  6130  010168  D035               	goto	l2618
  6131  01016A                     u10150:
  6132                           
  6133                           ; BSR set to: 0
  6134  01016A  0100               	movlb	0	; () banked
  6135  01016C  51A7               	movf	___fladd@b& (0+255),w,b
  6136  01016E  0100               	movlb	0	; () banked
  6137  010170  11A8               	iorwf	(___fladd@b+1)& (0+255),w,b
  6138  010172  0100               	movlb	0	; () banked
  6139  010174  11A9               	iorwf	(___fladd@b+2)& (0+255),w,b
  6140  010176  0100               	movlb	0	; () banked
  6141  010178  11AA               	iorwf	(___fladd@b+3)& (0+255),w,b
  6142  01017A  B4D8               	btfsc	status,2,c
  6143  01017C  D002               	goto	u10160
  6144  01017E  0E01               	movlw	1
  6145  010180  D001               	goto	u10170
  6146  010182                     u10160:
  6147  010182  0E00               	movlw	0
  6148  010184                     u10170:
  6149  010184  0100               	movlb	0	; () banked
  6150  010186  6FBA               	movwf	___fladd@grs& (0+255),b
  6151                           
  6152                           ; BSR set to: 0
  6153  010188  0E00               	movlw	0
  6154  01018A  0100               	movlb	0	; () banked
  6155  01018C  6FA7               	movwf	___fladd@b& (0+255),b
  6156  01018E  0E00               	movlw	0
  6157  010190  6FA8               	movwf	(___fladd@b+1)& (0+255),b
  6158  010192  0E00               	movlw	0
  6159  010194  6FA9               	movwf	(___fladd@b+2)& (0+255),b
  6160  010196  0E00               	movlw	0
  6161  010198  6FAA               	movwf	(___fladd@b+3)& (0+255),b
  6162                           
  6163                           ; BSR set to: 0
  6164  01019A  C0B8  F0B9         	movff	___fladd@aexp,___fladd@bexp
  6165  01019E  D020               	goto	u10200
  6166  0101A0                     l2619:
  6167                           
  6168                           ; BSR set to: 0
  6169  0101A0  0100               	movlb	0	; () banked
  6170  0101A2  A1BA               	btfss	___fladd@grs& (0+255),0,b
  6171  0101A4  D007               	goto	l2620
  6172                           
  6173                           ; BSR set to: 0
  6174  0101A6  0100               	movlb	0	; () banked
  6175  0101A8  90D8               	bcf	status,0,c
  6176  0101AA  31BA               	rrcf	___fladd@grs& (0+255),w,b
  6177  0101AC  0901               	iorlw	1
  6178  0101AE  0100               	movlb	0	; () banked
  6179  0101B0  6FBA               	movwf	___fladd@grs& (0+255),b
  6180  0101B2  D003               	goto	l2621
  6181  0101B4                     l2620:
  6182                           
  6183                           ; BSR set to: 0
  6184                           
  6185                           ; BSR set to: 0
  6186  0101B4  0100               	movlb	0	; () banked
  6187  0101B6  90D8               	bcf	status,0,c
  6188  0101B8  33BA               	rrcf	___fladd@grs& (0+255),f,b
  6189  0101BA                     l2621:
  6190                           
  6191                           ; BSR set to: 0
  6192                           
  6193                           ; BSR set to: 0
  6194  0101BA  0100               	movlb	0	; () banked
  6195  0101BC  A1A7               	btfss	___fladd@b& (0+255),0,b
  6196  0101BE  D002               	goto	l2622
  6197                           
  6198                           ; BSR set to: 0
  6199  0101C0  0100               	movlb	0	; () banked
  6200  0101C2  8FBA               	bsf	___fladd@grs& (0+255),7,b
  6201  0101C4                     l2622:
  6202                           
  6203                           ; BSR set to: 0
  6204                           
  6205                           ; BSR set to: 0
  6206  0101C4  0100               	movlb	0	; () banked
  6207  0101C6  35AA               	rlcf	(___fladd@b+3)& (0+255),w,b
  6208  0101C8  33AA               	rrcf	(___fladd@b+3)& (0+255),f,b
  6209  0101CA  33A9               	rrcf	(___fladd@b+2)& (0+255),f,b
  6210  0101CC  33A8               	rrcf	(___fladd@b+1)& (0+255),f,b
  6211  0101CE  33A7               	rrcf	___fladd@b& (0+255),f,b
  6212                           
  6213                           ; BSR set to: 0
  6214  0101D0  0100               	movlb	0	; () banked
  6215  0101D2  2BB9               	incf	___fladd@bexp& (0+255),f,b
  6216  0101D4                     l2618:
  6217                           
  6218                           ; BSR set to: 0
  6219  0101D4  0100               	movlb	0	; () banked
  6220  0101D6  51B8               	movf	___fladd@aexp& (0+255),w,b
  6221  0101D8  0100               	movlb	0	; () banked
  6222  0101DA  5DB9               	subwf	___fladd@bexp& (0+255),w,b
  6223  0101DC  A0D8               	btfss	status,0,c
  6224  0101DE  D7E0               	goto	l2619
  6225  0101E0                     u10200:
  6226                           
  6227                           ; BSR set to: 0
  6228                           
  6229                           ; BSR set to: 0
  6230  0101E0  0100               	movlb	0	; () banked
  6231  0101E2  BDB7               	btfsc	___fladd@signs& (0+255),6,b
  6232  0101E4  D03F               	goto	l2624
  6233                           
  6234                           ; BSR set to: 0
  6235  0101E6  0100               	movlb	0	; () banked
  6236  0101E8  51B9               	movf	___fladd@bexp& (0+255),w,b
  6237  0101EA  0100               	movlb	0	; () banked
  6238  0101EC  A4D8               	btfss	status,2,c
  6239  0101EE  D00A               	goto	l2625
  6240                           
  6241                           ; BSR set to: 0
  6242  0101F0  0E00               	movlw	0
  6243  0101F2  0100               	movlb	0	; () banked
  6244  0101F4  6FA7               	movwf	?___fladd& (0+255),b
  6245  0101F6  0E00               	movlw	0
  6246  0101F8  6FA8               	movwf	(?___fladd+1)& (0+255),b
  6247  0101FA  0E00               	movlw	0
  6248  0101FC  6FA9               	movwf	(?___fladd+2)& (0+255),b
  6249  0101FE  0E00               	movlw	0
  6250  010200  6FAA               	movwf	(?___fladd+3)& (0+255),b
  6251                           
  6252                           ; BSR set to: 0
  6253  010202  0012               	return	
  6254  010204                     l2625:
  6255                           
  6256                           ; BSR set to: 0
  6257                           
  6258                           ; BSR set to: 0
  6259  010204  0100               	movlb	0	; () banked
  6260  010206  51AB               	movf	___fladd@a& (0+255),w,b
  6261  010208  0100               	movlb	0	; () banked
  6262  01020A  27A7               	addwf	___fladd@b& (0+255),f,b
  6263  01020C  0100               	movlb	0	; () banked
  6264  01020E  51AC               	movf	(___fladd@a+1)& (0+255),w,b
  6265  010210  0100               	movlb	0	; () banked
  6266  010212  23A8               	addwfc	(___fladd@b+1)& (0+255),f,b
  6267  010214  0100               	movlb	0	; () banked
  6268  010216  51AD               	movf	(___fladd@a+2)& (0+255),w,b
  6269  010218  0100               	movlb	0	; () banked
  6270  01021A  23A9               	addwfc	(___fladd@b+2)& (0+255),f,b
  6271  01021C  0100               	movlb	0	; () banked
  6272  01021E  51AE               	movf	(___fladd@a+3)& (0+255),w,b
  6273  010220  0100               	movlb	0	; () banked
  6274  010222  23AA               	addwfc	(___fladd@b+3)& (0+255),f,b
  6275                           
  6276                           ; BSR set to: 0
  6277  010224  0100               	movlb	0	; () banked
  6278  010226  A1AA               	btfss	(___fladd@b+3)& (0+255),0,b
  6279  010228  D0CC               	goto	u10330
  6280                           
  6281                           ; BSR set to: 0
  6282  01022A  0100               	movlb	0	; () banked
  6283  01022C  A1BA               	btfss	___fladd@grs& (0+255),0,b
  6284  01022E  D009               	goto	l2628
  6285                           
  6286                           ; BSR set to: 0
  6287  010230  0100               	movlb	0	; () banked
  6288  010232  90D8               	bcf	status,0,c
  6289  010234  33BA               	rrcf	___fladd@grs& (0+255),f,b
  6290  010236  0100               	movlb	0	; () banked
  6291  010238  51BA               	movf	___fladd@grs& (0+255),w,b
  6292  01023A  0901               	iorlw	1
  6293  01023C  0100               	movlb	0	; () banked
  6294  01023E  6FBA               	movwf	___fladd@grs& (0+255),b
  6295  010240  D003               	goto	l2629
  6296  010242                     l2628:
  6297                           
  6298                           ; BSR set to: 0
  6299                           
  6300                           ; BSR set to: 0
  6301  010242  0100               	movlb	0	; () banked
  6302  010244  90D8               	bcf	status,0,c
  6303  010246  33BA               	rrcf	___fladd@grs& (0+255),f,b
  6304  010248                     l2629:
  6305                           
  6306                           ; BSR set to: 0
  6307                           
  6308                           ; BSR set to: 0
  6309  010248  0100               	movlb	0	; () banked
  6310  01024A  A1A7               	btfss	___fladd@b& (0+255),0,b
  6311  01024C  D002               	goto	l2630
  6312                           
  6313                           ; BSR set to: 0
  6314  01024E  0100               	movlb	0	; () banked
  6315  010250  8FBA               	bsf	___fladd@grs& (0+255),7,b
  6316  010252                     l2630:
  6317                           
  6318                           ; BSR set to: 0
  6319                           
  6320                           ; BSR set to: 0
  6321  010252  0100               	movlb	0	; () banked
  6322  010254  35AA               	rlcf	(___fladd@b+3)& (0+255),w,b
  6323  010256  33AA               	rrcf	(___fladd@b+3)& (0+255),f,b
  6324  010258  33A9               	rrcf	(___fladd@b+2)& (0+255),f,b
  6325  01025A  33A8               	rrcf	(___fladd@b+1)& (0+255),f,b
  6326  01025C  33A7               	rrcf	___fladd@b& (0+255),f,b
  6327                           
  6328                           ; BSR set to: 0
  6329  01025E  0100               	movlb	0	; () banked
  6330  010260  2BB9               	incf	___fladd@bexp& (0+255),f,b
  6331                           
  6332                           ; BSR set to: 0
  6333  010262  D0AF               	goto	u10330
  6334  010264                     l2624:
  6335                           
  6336                           ; BSR set to: 0
  6337                           
  6338                           ; BSR set to: 0
  6339  010264  0100               	movlb	0	; () banked
  6340  010266  51AB               	movf	___fladd@a& (0+255),w,b
  6341  010268  0100               	movlb	0	; () banked
  6342  01026A  5DA7               	subwf	___fladd@b& (0+255),w,b
  6343  01026C  0100               	movlb	0	; () banked
  6344  01026E  51AC               	movf	(___fladd@a+1)& (0+255),w,b
  6345  010270  0100               	movlb	0	; () banked
  6346  010272  59A8               	subwfb	(___fladd@b+1)& (0+255),w,b
  6347  010274  0100               	movlb	0	; () banked
  6348  010276  51AD               	movf	(___fladd@a+2)& (0+255),w,b
  6349  010278  0100               	movlb	0	; () banked
  6350  01027A  59A9               	subwfb	(___fladd@b+2)& (0+255),w,b
  6351  01027C  0100               	movlb	0	; () banked
  6352  01027E  51AA               	movf	(___fladd@b+3)& (0+255),w,b
  6353  010280  0A80               	xorlw	128
  6354  010282  0100               	movlb	0	; () banked
  6355  010284  6FAF               	movwf	??___fladd& (0+255),b
  6356  010286  0100               	movlb	0	; () banked
  6357  010288  51AE               	movf	(___fladd@a+3)& (0+255),w,b
  6358  01028A  0A80               	xorlw	128
  6359  01028C  0100               	movlb	0	; () banked
  6360  01028E  59AF               	subwfb	??___fladd& (0+255),w,b
  6361  010290  B0D8               	btfsc	status,0,c
  6362  010292  D050               	goto	l2632
  6363                           
  6364                           ; BSR set to: 0
  6365  010294  C0A7  F0AF         	movff	___fladd@b,??___fladd
  6366  010298  C0A8  F0B0         	movff	___fladd@b+1,??___fladd+1
  6367  01029C  C0A9  F0B1         	movff	___fladd@b+2,??___fladd+2
  6368  0102A0  C0AA  F0B2         	movff	___fladd@b+3,??___fladd+3
  6369  0102A4  0100               	movlb	0	; () banked
  6370  0102A6  1FAF               	comf	??___fladd& (0+255),f,b
  6371  0102A8  1FB0               	comf	(??___fladd+1)& (0+255),f,b
  6372  0102AA  1FB1               	comf	(??___fladd+2)& (0+255),f,b
  6373  0102AC  1FB2               	comf	(??___fladd+3)& (0+255),f,b
  6374  0102AE  2BAF               	incf	??___fladd& (0+255),f,b
  6375  0102B0  0E00               	movlw	0
  6376  0102B2  23B0               	addwfc	(??___fladd+1)& (0+255),f,b
  6377  0102B4  23B1               	addwfc	(??___fladd+2)& (0+255),f,b
  6378  0102B6  23B2               	addwfc	(??___fladd+3)& (0+255),f,b
  6379  0102B8  0100               	movlb	0	; () banked
  6380  0102BA  51AB               	movf	___fladd@a& (0+255),w,b
  6381  0102BC  0100               	movlb	0	; () banked
  6382  0102BE  25AF               	addwf	??___fladd& (0+255),w,b
  6383  0102C0  0100               	movlb	0	; () banked
  6384  0102C2  6FB3               	movwf	(??___fladd+4)& (0+255),b
  6385  0102C4  0100               	movlb	0	; () banked
  6386  0102C6  51AC               	movf	(___fladd@a+1)& (0+255),w,b
  6387  0102C8  0100               	movlb	0	; () banked
  6388  0102CA  21B0               	addwfc	(??___fladd+1)& (0+255),w,b
  6389  0102CC  0100               	movlb	0	; () banked
  6390  0102CE  6FB4               	movwf	(??___fladd+5)& (0+255),b
  6391  0102D0  0100               	movlb	0	; () banked
  6392  0102D2  51AD               	movf	(___fladd@a+2)& (0+255),w,b
  6393  0102D4  0100               	movlb	0	; () banked
  6394  0102D6  21B1               	addwfc	(??___fladd+2)& (0+255),w,b
  6395  0102D8  0100               	movlb	0	; () banked
  6396  0102DA  6FB5               	movwf	(??___fladd+6)& (0+255),b
  6397  0102DC  0100               	movlb	0	; () banked
  6398  0102DE  51AE               	movf	(___fladd@a+3)& (0+255),w,b
  6399  0102E0  0100               	movlb	0	; () banked
  6400  0102E2  21B2               	addwfc	(??___fladd+3)& (0+255),w,b
  6401  0102E4  0100               	movlb	0	; () banked
  6402  0102E6  6FB6               	movwf	(??___fladd+7)& (0+255),b
  6403  0102E8  0EFF               	movlw	255
  6404  0102EA  0100               	movlb	0	; () banked
  6405  0102EC  25B3               	addwf	(??___fladd+4)& (0+255),w,b
  6406  0102EE  0100               	movlb	0	; () banked
  6407  0102F0  6FA7               	movwf	___fladd@b& (0+255),b
  6408  0102F2  0EFF               	movlw	255
  6409  0102F4  0100               	movlb	0	; () banked
  6410  0102F6  21B4               	addwfc	(??___fladd+5)& (0+255),w,b
  6411  0102F8  0100               	movlb	0	; () banked
  6412  0102FA  6FA8               	movwf	(___fladd@b+1)& (0+255),b
  6413  0102FC  0EFF               	movlw	255
  6414  0102FE  0100               	movlb	0	; () banked
  6415  010300  21B5               	addwfc	(??___fladd+6)& (0+255),w,b
  6416  010302  0100               	movlb	0	; () banked
  6417  010304  6FA9               	movwf	(___fladd@b+2)& (0+255),b
  6418  010306  0EFF               	movlw	255
  6419  010308  0100               	movlb	0	; () banked
  6420  01030A  21B6               	addwfc	(??___fladd+7)& (0+255),w,b
  6421  01030C  0100               	movlb	0	; () banked
  6422  01030E  6FAA               	movwf	(___fladd@b+3)& (0+255),b
  6423  010310  0E80               	movlw	128
  6424  010312  0100               	movlb	0	; () banked
  6425  010314  1BB7               	xorwf	___fladd@signs& (0+255),f,b
  6426                           
  6427                           ; BSR set to: 0
  6428  010316  0100               	movlb	0	; () banked
  6429  010318  6DBA               	negf	___fladd@grs& (0+255),b
  6430                           
  6431                           ; BSR set to: 0
  6432  01031A  0100               	movlb	0	; () banked
  6433  01031C  51BA               	movf	___fladd@grs& (0+255),w,b
  6434  01031E  0100               	movlb	0	; () banked
  6435  010320  A4D8               	btfss	status,2,c
  6436  010322  D018               	goto	l2634
  6437                           
  6438                           ; BSR set to: 0
  6439  010324  0E01               	movlw	1
  6440  010326  0100               	movlb	0	; () banked
  6441  010328  27A7               	addwf	___fladd@b& (0+255),f,b
  6442  01032A  0E00               	movlw	0
  6443  01032C  23A8               	addwfc	(___fladd@b+1)& (0+255),f,b
  6444  01032E  23A9               	addwfc	(___fladd@b+2)& (0+255),f,b
  6445  010330  23AA               	addwfc	(___fladd@b+3)& (0+255),f,b
  6446                           
  6447                           ; BSR set to: 0
  6448  010332  D010               	goto	l2634
  6449  010334                     l2632:
  6450                           
  6451                           ; BSR set to: 0
  6452                           
  6453                           ; BSR set to: 0
  6454  010334  0100               	movlb	0	; () banked
  6455  010336  51AB               	movf	___fladd@a& (0+255),w,b
  6456  010338  0100               	movlb	0	; () banked
  6457  01033A  5FA7               	subwf	___fladd@b& (0+255),f,b
  6458  01033C  0100               	movlb	0	; () banked
  6459  01033E  51AC               	movf	(___fladd@a+1)& (0+255),w,b
  6460  010340  0100               	movlb	0	; () banked
  6461  010342  5BA8               	subwfb	(___fladd@b+1)& (0+255),f,b
  6462  010344  0100               	movlb	0	; () banked
  6463  010346  51AD               	movf	(___fladd@a+2)& (0+255),w,b
  6464  010348  0100               	movlb	0	; () banked
  6465  01034A  5BA9               	subwfb	(___fladd@b+2)& (0+255),f,b
  6466  01034C  0100               	movlb	0	; () banked
  6467  01034E  51AE               	movf	(___fladd@a+3)& (0+255),w,b
  6468  010350  0100               	movlb	0	; () banked
  6469  010352  5BAA               	subwfb	(___fladd@b+3)& (0+255),f,b
  6470  010354                     l2634:
  6471                           
  6472                           ; BSR set to: 0
  6473  010354  0100               	movlb	0	; () banked
  6474  010356  51A7               	movf	___fladd@b& (0+255),w,b
  6475  010358  0100               	movlb	0	; () banked
  6476  01035A  11A8               	iorwf	(___fladd@b+1)& (0+255),w,b
  6477  01035C  0100               	movlb	0	; () banked
  6478  01035E  11A9               	iorwf	(___fladd@b+2)& (0+255),w,b
  6479  010360  0100               	movlb	0	; () banked
  6480  010362  11AA               	iorwf	(___fladd@b+3)& (0+255),w,b
  6481  010364  A4D8               	btfss	status,2,c
  6482  010366  D02A               	goto	l2641
  6483                           
  6484                           ; BSR set to: 0
  6485  010368  0100               	movlb	0	; () banked
  6486  01036A  51BA               	movf	___fladd@grs& (0+255),w,b
  6487  01036C  0100               	movlb	0	; () banked
  6488  01036E  A4D8               	btfss	status,2,c
  6489  010370  D025               	goto	l2641
  6490                           
  6491                           ; BSR set to: 0
  6492  010372  0E00               	movlw	0
  6493  010374  0100               	movlb	0	; () banked
  6494  010376  6FA7               	movwf	?___fladd& (0+255),b
  6495  010378  0E00               	movlw	0
  6496  01037A  6FA8               	movwf	(?___fladd+1)& (0+255),b
  6497  01037C  0E00               	movlw	0
  6498  01037E  6FA9               	movwf	(?___fladd+2)& (0+255),b
  6499  010380  0E00               	movlw	0
  6500  010382  6FAA               	movwf	(?___fladd+3)& (0+255),b
  6501                           
  6502                           ; BSR set to: 0
  6503  010384  0012               	return	
  6504  010386                     
  6505                           ; BSR set to: 0
  6506                           
  6507                           ; BSR set to: 0
  6508  010386  0100               	movlb	0	; () banked
  6509  010388  90D8               	bcf	status,0,c
  6510  01038A  37A7               	rlcf	___fladd@b& (0+255),f,b
  6511  01038C  37A8               	rlcf	(___fladd@b+1)& (0+255),f,b
  6512  01038E  37A9               	rlcf	(___fladd@b+2)& (0+255),f,b
  6513  010390  37AA               	rlcf	(___fladd@b+3)& (0+255),f,b
  6514                           
  6515                           ; BSR set to: 0
  6516  010392  0100               	movlb	0	; () banked
  6517  010394  AFBA               	btfss	___fladd@grs& (0+255),7,b
  6518  010396  D002               	goto	l2638
  6519                           
  6520                           ; BSR set to: 0
  6521  010398  0100               	movlb	0	; () banked
  6522  01039A  81A7               	bsf	___fladd@b& (0+255),0,b
  6523  01039C                     l2638:
  6524                           
  6525                           ; BSR set to: 0
  6526                           
  6527                           ; BSR set to: 0
  6528  01039C  0100               	movlb	0	; () banked
  6529  01039E  A1BA               	btfss	___fladd@grs& (0+255),0,b
  6530  0103A0  D003               	goto	l2639
  6531                           
  6532                           ; BSR set to: 0
  6533  0103A2  80D8               	bsf	status,0,c
  6534  0103A4  0100               	movlb	0	; () banked
  6535  0103A6  D002               	goto	L4
  6536  0103A8                     l2639:
  6537                           
  6538                           ; BSR set to: 0
  6539                           
  6540                           ; BSR set to: 0
  6541  0103A8  0100               	movlb	0	; () banked
  6542  0103AA  90D8               	bcf	status,0,c
  6543  0103AC                     L4:
  6544  0103AC  37BA               	rlcf	___fladd@grs& (0+255),f,b
  6545                           
  6546                           ; BSR set to: 0
  6547                           
  6548                           ; BSR set to: 0
  6549  0103AE  0100               	movlb	0	; () banked
  6550  0103B0  51B9               	movf	___fladd@bexp& (0+255),w,b
  6551  0103B2  0100               	movlb	0	; () banked
  6552  0103B4  B4D8               	btfsc	status,2,c
  6553  0103B6  D002               	goto	l2641
  6554                           
  6555                           ; BSR set to: 0
  6556  0103B8  0100               	movlb	0	; () banked
  6557  0103BA  07B9               	decf	___fladd@bexp& (0+255),f,b
  6558  0103BC                     l2641:
  6559                           
  6560                           ; BSR set to: 0
  6561                           
  6562                           ; BSR set to: 0
  6563                           
  6564                           ; BSR set to: 0
  6565  0103BC  0100               	movlb	0	; () banked
  6566  0103BE  AFA9               	btfss	(___fladd@b+2)& (0+255),7,b
  6567  0103C0  D7E2               	goto	l2637
  6568  0103C2                     u10330:
  6569                           
  6570                           ; BSR set to: 0
  6571                           
  6572                           ; BSR set to: 0
  6573                           
  6574                           ; BSR set to: 0
  6575  0103C2  0E00               	movlw	0
  6576  0103C4  0100               	movlb	0	; () banked
  6577  0103C6  6FB8               	movwf	___fladd@aexp& (0+255),b
  6578                           
  6579                           ; BSR set to: 0
  6580  0103C8  0100               	movlb	0	; () banked
  6581  0103CA  AFBA               	btfss	___fladd@grs& (0+255),7,b
  6582  0103CC  D00D               	goto	l2646
  6583                           
  6584                           ; BSR set to: 0
  6585  0103CE  C0BA  F0AF         	movff	___fladd@grs,??___fladd
  6586  0103D2  0E7F               	movlw	127
  6587  0103D4  0100               	movlb	0	; () banked
  6588  0103D6  17AF               	andwf	??___fladd& (0+255),f,b
  6589  0103D8  A4D8               	btfss	status,2,c
  6590  0103DA  D003               	goto	u10360
  6591                           
  6592                           ; BSR set to: 0
  6593                           
  6594                           ; BSR set to: 0
  6595  0103DC  0100               	movlb	0	; () banked
  6596  0103DE  A1A7               	btfss	___fladd@b& (0+255),0,b
  6597  0103E0  D003               	goto	l2646
  6598  0103E2                     u10360:
  6599                           
  6600                           ; BSR set to: 0
  6601  0103E2  0E01               	movlw	1
  6602  0103E4  0100               	movlb	0	; () banked
  6603  0103E6  6FB8               	movwf	___fladd@aexp& (0+255),b
  6604  0103E8                     l2646:
  6605                           
  6606                           ; BSR set to: 0
  6607                           
  6608                           ; BSR set to: 0
  6609                           
  6610                           ; BSR set to: 0
  6611  0103E8  0100               	movlb	0	; () banked
  6612  0103EA  51B8               	movf	___fladd@aexp& (0+255),w,b
  6613  0103EC  0100               	movlb	0	; () banked
  6614  0103EE  B4D8               	btfsc	status,2,c
  6615  0103F0  D026               	goto	l2649
  6616                           
  6617                           ; BSR set to: 0
  6618  0103F2  0E01               	movlw	1
  6619  0103F4  0100               	movlb	0	; () banked
  6620  0103F6  27A7               	addwf	___fladd@b& (0+255),f,b
  6621  0103F8  0E00               	movlw	0
  6622  0103FA  23A8               	addwfc	(___fladd@b+1)& (0+255),f,b
  6623  0103FC  23A9               	addwfc	(___fladd@b+2)& (0+255),f,b
  6624  0103FE  23AA               	addwfc	(___fladd@b+3)& (0+255),f,b
  6625                           
  6626                           ; BSR set to: 0
  6627  010400  0100               	movlb	0	; () banked
  6628  010402  A1AA               	btfss	(___fladd@b+3)& (0+255),0,b
  6629  010404  D01C               	goto	l2649
  6630                           
  6631                           ; BSR set to: 0
  6632  010406  C0A7  F0AF         	movff	___fladd@b,??___fladd
  6633  01040A  C0A8  F0B0         	movff	___fladd@b+1,??___fladd+1
  6634  01040E  C0A9  F0B1         	movff	___fladd@b+2,??___fladd+2
  6635  010412  C0AA  F0B2         	movff	___fladd@b+3,??___fladd+3
  6636  010416  0100               	movlb	0	; () banked
  6637  010418  35B2               	rlcf	(??___fladd+3)& (0+255),w,b
  6638  01041A  33B2               	rrcf	(??___fladd+3)& (0+255),f,b
  6639  01041C  33B1               	rrcf	(??___fladd+2)& (0+255),f,b
  6640  01041E  33B0               	rrcf	(??___fladd+1)& (0+255),f,b
  6641  010420  33AF               	rrcf	??___fladd& (0+255),f,b
  6642  010422  C0AF  F0A7         	movff	??___fladd,___fladd@b
  6643  010426  C0B0  F0A8         	movff	??___fladd+1,___fladd@b+1
  6644  01042A  C0B1  F0A9         	movff	??___fladd+2,___fladd@b+2
  6645  01042E  C0B2  F0AA         	movff	??___fladd+3,___fladd@b+3
  6646  010432  0100               	movlb	0	; () banked
  6647  010434  29B9               	incf	___fladd@bexp& (0+255),w,b
  6648  010436  B4D8               	btfsc	status,2,c
  6649  010438  D002               	goto	l2649
  6650                           
  6651                           ; BSR set to: 0
  6652  01043A  0100               	movlb	0	; () banked
  6653  01043C  2BB9               	incf	___fladd@bexp& (0+255),f,b
  6654  01043E                     l2649:
  6655                           
  6656                           ; BSR set to: 0
  6657                           
  6658                           ; BSR set to: 0
  6659                           
  6660                           ; BSR set to: 0
  6661                           
  6662                           ; BSR set to: 0
  6663  01043E  0100               	movlb	0	; () banked
  6664  010440  29B9               	incf	___fladd@bexp& (0+255),w,b
  6665  010442  B4D8               	btfsc	status,2,c
  6666  010444  D005               	goto	u10410
  6667                           
  6668                           ; BSR set to: 0
  6669  010446  0100               	movlb	0	; () banked
  6670  010448  51B9               	movf	___fladd@bexp& (0+255),w,b
  6671  01044A  0100               	movlb	0	; () banked
  6672  01044C  A4D8               	btfss	status,2,c
  6673  01044E  D011               	goto	l2653
  6674  010450                     u10410:
  6675                           
  6676                           ; BSR set to: 0
  6677                           
  6678                           ; BSR set to: 0
  6679  010450  0E00               	movlw	0
  6680  010452  0100               	movlb	0	; () banked
  6681  010454  6FA7               	movwf	___fladd@b& (0+255),b
  6682  010456  0E00               	movlw	0
  6683  010458  6FA8               	movwf	(___fladd@b+1)& (0+255),b
  6684  01045A  0E00               	movlw	0
  6685  01045C  6FA9               	movwf	(___fladd@b+2)& (0+255),b
  6686  01045E  0E00               	movlw	0
  6687  010460  6FAA               	movwf	(___fladd@b+3)& (0+255),b
  6688  010462  0100               	movlb	0	; () banked
  6689  010464  51B9               	movf	___fladd@bexp& (0+255),w,b
  6690  010466  0100               	movlb	0	; () banked
  6691  010468  A4D8               	btfss	status,2,c
  6692  01046A  D003               	goto	l2653
  6693                           
  6694                           ; BSR set to: 0
  6695  01046C  0E00               	movlw	0
  6696  01046E  0100               	movlb	0	; () banked
  6697  010470  6FB7               	movwf	___fladd@signs& (0+255),b
  6698  010472                     l2653:
  6699                           
  6700                           ; BSR set to: 0
  6701                           
  6702                           ; BSR set to: 0
  6703                           
  6704                           ; BSR set to: 0
  6705  010472  0100               	movlb	0	; () banked
  6706  010474  A1B9               	btfss	___fladd@bexp& (0+255),0,b
  6707  010476  D003               	goto	l2654
  6708                           
  6709                           ; BSR set to: 0
  6710  010478  0100               	movlb	0	; () banked
  6711  01047A  8FA9               	bsf	(___fladd@b+2)& (0+255),7,b
  6712  01047C  D002               	goto	l2655
  6713  01047E                     l2654:
  6714                           
  6715                           ; BSR set to: 0
  6716                           
  6717                           ; BSR set to: 0
  6718  01047E  0100               	movlb	0	; () banked
  6719  010480  9FA9               	bcf	(___fladd@b+2)& (0+255),7,b
  6720  010482                     l2655:
  6721                           
  6722                           ; BSR set to: 0
  6723                           
  6724                           ; BSR set to: 0
  6725  010482  0100               	movlb	0	; () banked
  6726  010484  90D8               	bcf	status,0,c
  6727  010486  31B9               	rrcf	___fladd@bexp& (0+255),w,b
  6728  010488  0100               	movlb	0	; () banked
  6729  01048A  6FAA               	movwf	(___fladd@b+3)& (0+255),b
  6730                           
  6731                           ; BSR set to: 0
  6732  01048C  0100               	movlb	0	; () banked
  6733  01048E  AFB7               	btfss	___fladd@signs& (0+255),7,b
  6734  010490  D002               	goto	l2656
  6735                           
  6736                           ; BSR set to: 0
  6737  010492  0100               	movlb	0	; () banked
  6738  010494  8FAA               	bsf	(___fladd@b+3)& (0+255),7,b
  6739  010496                     l2656:
  6740                           
  6741                           ; BSR set to: 0
  6742                           
  6743                           ; BSR set to: 0
  6744  010496  C0A7  F0A7         	movff	___fladd@b,?___fladd
  6745  01049A  C0A8  F0A8         	movff	___fladd@b+1,?___fladd+1
  6746  01049E  C0A9  F0A9         	movff	___fladd@b+2,?___fladd+2
  6747  0104A2  C0AA  F0AA         	movff	___fladd@b+3,?___fladd+3
  6748  0104A6  0012               	return	
  6749  0104A8                     __end_of___fladd:
  6750                           	opt stack 0
  6751                           tosu	equ	0xFFF
  6752                           tosh	equ	0xFFE
  6753                           tosl	equ	0xFFD
  6754                           pclath	equ	0xFFA
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           postinc0	equ	0xFEE
  6760                           wreg	equ	0xFE8
  6761                           postdec1	equ	0xFE5
  6762                           fsr1h	equ	0xFE2
  6763                           fsr1l	equ	0xFE1
  6764                           postinc2	equ	0xFDE
  6765                           postdec2	equ	0xFDD
  6766                           fsr2h	equ	0xFDA
  6767                           fsr2l	equ	0xFD9
  6768                           status	equ	0xFD8
  6769                           
  6770 ;; *************** function _FunctADC *****************
  6771 ;; Defined at:
  6772 ;;		line 57 in file "Functions.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;                  1    wreg      void 
  6779 ;; Registers used:
  6780 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6781 ;; Tracked objects:
  6782 ;;		On entry : 0/0
  6783 ;;		On exit  : 0/0
  6784 ;;		Unchanged: 0/0
  6785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    9
  6793 ;; This function calls:
  6794 ;;		_ADC_Start
  6795 ;; This function is called by:
  6796 ;;		_multiSampleADC
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799                           
  6800                           	psect	text16
  6801  016DBE                     __ptext16:
  6802                           	opt stack 0
  6803  016DBE                     _FunctADC:
  6804                           	opt stack 19
  6805                           
  6806                           ;Functions.c: 58: ADC_Start(&ADC_AN0);
  6807                           
  6808                           ; BSR set to: 0
  6809                           ;incstack = 0
  6810  016DBE  0ED8               	movlw	low _ADC_AN0
  6811  016DC0  0100               	movlb	0	; () banked
  6812  016DC2  6F62               	movwf	ADC_Start@pInput& (0+255),b
  6813  016DC4  0E01               	movlw	high _ADC_AN0
  6814  016DC6  0100               	movlb	0	; () banked
  6815  016DC8  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
  6816  016DCA  ECA2  F0AB         	call	_ADC_Start	;wreg free
  6817  016DCE  0012               	return		;funcret
  6818  016DD0                     __end_of_FunctADC:
  6819                           	opt stack 0
  6820                           tosu	equ	0xFFF
  6821                           tosh	equ	0xFFE
  6822                           tosl	equ	0xFFD
  6823                           pclath	equ	0xFFA
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           postinc0	equ	0xFEE
  6829                           wreg	equ	0xFE8
  6830                           postdec1	equ	0xFE5
  6831                           fsr1h	equ	0xFE2
  6832                           fsr1l	equ	0xFE1
  6833                           postinc2	equ	0xFDE
  6834                           postdec2	equ	0xFDD
  6835                           fsr2h	equ	0xFDA
  6836                           fsr2l	equ	0xFD9
  6837                           status	equ	0xFD8
  6838                           
  6839 ;; *************** function _ADC_Start *****************
  6840 ;; Defined at:
  6841 ;;		line 114 in file "Library/ADC.c"
  6842 ;; Parameters:    Size  Location     Type
  6843 ;;  pInput          2    2[BANK0 ] PTR struct ADC
  6844 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
  6845 ;;		 -> NULL(0), 
  6846 ;; Auto vars:     Size  Location     Type
  6847 ;;		None
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  1    wreg      void 
  6850 ;; Registers used:
  6851 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6857 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;Total ram usage:        4 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    8
  6864 ;; This function calls:
  6865 ;;		_ADC_Off
  6866 ;;		_ADC_On
  6867 ;;		_ADC_SetChannel
  6868 ;; This function is called by:
  6869 ;;		_FunctADC
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           	psect	text17
  6874  015744                     __ptext17:
  6875                           	opt stack 0
  6876  015744                     _ADC_Start:
  6877                           	opt stack 19
  6878                           
  6879                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
  6880                           
  6881                           ;incstack = 0
  6882  015744  B2C2               	btfsc	4034,1,c	;volatile
  6883  015746  0012               	return	
  6884  015748                     
  6885                           ;ADC.c: 128: {
  6886                           ;ADC.c: 129: ADC_Off();
  6887                           
  6888                           ;ADC.c: 127: for(;;)
  6889  015748  EC37  F0B7         	call	_ADC_Off	;wreg free
  6890                           
  6891                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
  6892  01574C  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
  6893  015750  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
  6894  015754  50DF               	movf	indf2,w,c
  6895  015756  EC5C  F0B6         	call	_ADC_SetChannel
  6896                           
  6897                           ;ADC.c: 131: ADC_On();
  6898  01575A  EC44  F0B7         	call	_ADC_On	;wreg free
  6899                           
  6900                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
  6901  01575E  82C2               	bsf	4034,1,c	;volatile
  6902  015760  B2C2               	btfsc	4034,1,c	;volatile
  6903  015762  D7FE               	goto	l1280
  6904                           
  6905                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
  6906  015764  50C3               	movf	4035,w,c	;volatile
  6907  015766  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
  6908  01576A  0100               	movlb	0	; () banked
  6909  01576C  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
  6910  01576E  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
  6911  015772  0100               	movlb	0	; () banked
  6912  015774  6B64               	clrf	??_ADC_Start& (0+255),b
  6913  015776  0100               	movlb	0	; () banked
  6914  015778  1364               	iorwf	??_ADC_Start& (0+255),f,b
  6915  01577A  0E00               	movlw	0
  6916  01577C  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
  6917  01577E  0100               	movlb	0	; () banked
  6918  015780  EE20 F001          	lfsr	2,1
  6919  015784  5162               	movf	ADC_Start@pInput& (0+255),w,b
  6920  015786  26D9               	addwf	fsr2l,f,c
  6921  015788  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  6922  01578A  22DA               	addwfc	fsr2h,f,c
  6923  01578C  C064  FFDE         	movff	??_ADC_Start,postinc2
  6924  015790  C065  FFDD         	movff	??_ADC_Start+1,postdec2
  6925                           
  6926                           ;ADC.c: 141: if (pInput->mNext == 0)
  6927  015794  0100               	movlb	0	; () banked
  6928  015796  EE20 F003          	lfsr	2,3
  6929  01579A  5162               	movf	ADC_Start@pInput& (0+255),w,b
  6930  01579C  26D9               	addwf	fsr2l,f,c
  6931  01579E  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  6932  0157A0  22DA               	addwfc	fsr2h,f,c
  6933  0157A2  50DE               	movf	postinc2,w,c
  6934  0157A4  10DE               	iorwf	postinc2,w,c
  6935  0157A6  B4D8               	btfsc	status,2,c
  6936  0157A8  D00C               	goto	l1283
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;ADC.c: 145: pInput = pInput->mNext;
  6940                           
  6941                           ; BSR set to: 0
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;ADC.c: 142: break;
  6945  0157AA  0100               	movlb	0	; () banked
  6946  0157AC  EE20 F003          	lfsr	2,3
  6947  0157B0  5162               	movf	ADC_Start@pInput& (0+255),w,b
  6948  0157B2  26D9               	addwf	fsr2l,f,c
  6949  0157B4  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
  6950  0157B6  22DA               	addwfc	fsr2h,f,c
  6951  0157B8  CFDE F062          	movff	postinc2,ADC_Start@pInput
  6952  0157BC  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
  6953                           
  6954                           ;ADC.c: 146: }
  6955  0157C0  D7C3               	goto	l1276
  6956  0157C2                     l1283:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;ADC.c: 147: ADC_Off();
  6960                           
  6961                           ; BSR set to: 0
  6962  0157C2  EC37  F0B7         	call	_ADC_Off	;wreg free
  6963  0157C6  0012               	return		;funcret
  6964  0157C8                     __end_of_ADC_Start:
  6965                           	opt stack 0
  6966                           tosu	equ	0xFFF
  6967                           tosh	equ	0xFFE
  6968                           tosl	equ	0xFFD
  6969                           pclath	equ	0xFFA
  6970                           tblptru	equ	0xFF8
  6971                           tblptrh	equ	0xFF7
  6972                           tblptrl	equ	0xFF6
  6973                           tablat	equ	0xFF5
  6974                           postinc0	equ	0xFEE
  6975                           wreg	equ	0xFE8
  6976                           postdec1	equ	0xFE5
  6977                           fsr1h	equ	0xFE2
  6978                           fsr1l	equ	0xFE1
  6979                           indf2	equ	0xFDF
  6980                           postinc2	equ	0xFDE
  6981                           postdec2	equ	0xFDD
  6982                           fsr2h	equ	0xFDA
  6983                           fsr2l	equ	0xFD9
  6984                           status	equ	0xFD8
  6985                           
  6986 ;; *************** function _ADC_Voltage *****************
  6987 ;; Defined at:
  6988 ;;		line 259 in file "Library/ADC.c"
  6989 ;; Parameters:    Size  Location     Type
  6990 ;;  pInput          2   53[BANK0 ] PTR struct ADC
  6991 ;;		 -> ADC_AN0(5), 
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;  output          4   67[BANK0 ] float 
  6994 ;;  ref             4   63[BANK0 ] const float 
  6995 ;;  max             4   59[BANK0 ] const float 
  6996 ;; Return value:  Size  Location     Type
  6997 ;;                  4   53[BANK0 ] float 
  6998 ;; Registers used:
  6999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7000 ;; Tracked objects:
  7001 ;;		On entry : 0/0
  7002 ;;		On exit  : 0/0
  7003 ;;		Unchanged: 0/0
  7004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7005 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7006 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;Total ram usage:       18 bytes
  7010 ;; Hardware stack levels used:    1
  7011 ;; Hardware stack levels required when called:    8
  7012 ;; This function calls:
  7013 ;;		___fldiv
  7014 ;;		___flmul
  7015 ;;		___xxtofl
  7016 ;; This function is called by:
  7017 ;;		_multiSampleADC
  7018 ;; This function uses a non-reentrant model
  7019 ;;
  7020                           
  7021                           	psect	text18
  7022  0141F0                     __ptext18:
  7023                           	opt stack 0
  7024  0141F0                     _ADC_Voltage:
  7025                           	opt stack 20
  7026                           
  7027                           ;ADC.c: 261: const float max = 1024;
  7028                           
  7029                           ;incstack = 0
  7030  0141F0  0E00               	movlw	0
  7031  0141F2  0100               	movlb	0	; () banked
  7032  0141F4  6F9B               	movwf	ADC_Voltage@max& (0+255),b
  7033  0141F6  0E00               	movlw	0
  7034  0141F8  6F9C               	movwf	(ADC_Voltage@max+1)& (0+255),b
  7035  0141FA  0E80               	movlw	128
  7036  0141FC  6F9D               	movwf	(ADC_Voltage@max+2)& (0+255),b
  7037  0141FE  0E44               	movlw	68
  7038  014200  6F9E               	movwf	(ADC_Voltage@max+3)& (0+255),b
  7039                           
  7040                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
  7041  014202  0E33               	movlw	51
  7042  014204  0100               	movlb	0	; () banked
  7043  014206  6F9F               	movwf	ADC_Voltage@ref& (0+255),b
  7044  014208  0E33               	movlw	51
  7045  01420A  6FA0               	movwf	(ADC_Voltage@ref+1)& (0+255),b
  7046  01420C  0E53               	movlw	83
  7047  01420E  6FA1               	movwf	(ADC_Voltage@ref+2)& (0+255),b
  7048  014210  0E40               	movlw	64
  7049  014212  6FA2               	movwf	(ADC_Voltage@ref+3)& (0+255),b
  7050                           
  7051                           ; BSR set to: 0
  7052                           ;ADC.c: 263: float output = pInput->mValue;
  7053  014214  0100               	movlb	0	; () banked
  7054  014216  EE20 F001          	lfsr	2,1
  7055  01421A  5195               	movf	ADC_Voltage@pInput& (0+255),w,b
  7056  01421C  26D9               	addwf	fsr2l,f,c
  7057  01421E  5196               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
  7058  014220  22DA               	addwfc	fsr2h,f,c
  7059  014222  CFDE F099          	movff	postinc2,??_ADC_Voltage
  7060  014226  CFDD F09A          	movff	postdec2,??_ADC_Voltage+1
  7061  01422A  C099  F06E         	movff	??_ADC_Voltage,___xxtofl@val
  7062  01422E  C09A  F06F         	movff	??_ADC_Voltage+1,___xxtofl@val+1
  7063  014232  0100               	movlb	0	; () banked
  7064  014234  6B70               	clrf	(___xxtofl@val+2)& (0+255),b
  7065  014236  6B71               	clrf	(___xxtofl@val+3)& (0+255),b
  7066  014238  0E00               	movlw	0
  7067  01423A  EC46  F092         	call	___xxtofl
  7068  01423E  C06E  F0A3         	movff	?___xxtofl,ADC_Voltage@output
  7069  014242  C06F  F0A4         	movff	?___xxtofl+1,ADC_Voltage@output+1
  7070  014246  C070  F0A5         	movff	?___xxtofl+2,ADC_Voltage@output+2
  7071  01424A  C071  F0A6         	movff	?___xxtofl+3,ADC_Voltage@output+3
  7072                           
  7073                           ;ADC.c: 265: output /= max;
  7074  01424E  C0A3  F060         	movff	ADC_Voltage@output,___fldiv@b
  7075  014252  C0A4  F061         	movff	ADC_Voltage@output+1,___fldiv@b+1
  7076  014256  C0A5  F062         	movff	ADC_Voltage@output+2,___fldiv@b+2
  7077  01425A  C0A6  F063         	movff	ADC_Voltage@output+3,___fldiv@b+3
  7078  01425E  C09B  F064         	movff	ADC_Voltage@max,___fldiv@a
  7079  014262  C09C  F065         	movff	ADC_Voltage@max+1,___fldiv@a+1
  7080  014266  C09D  F066         	movff	ADC_Voltage@max+2,___fldiv@a+2
  7081  01426A  C09E  F067         	movff	ADC_Voltage@max+3,___fldiv@a+3
  7082  01426E  ECB6  F086         	call	___fldiv	;wreg free
  7083  014272  C060  F0A3         	movff	?___fldiv,ADC_Voltage@output
  7084  014276  C061  F0A4         	movff	?___fldiv+1,ADC_Voltage@output+1
  7085  01427A  C062  F0A5         	movff	?___fldiv+2,ADC_Voltage@output+2
  7086  01427E  C063  F0A6         	movff	?___fldiv+3,ADC_Voltage@output+3
  7087                           
  7088                           ;ADC.c: 266: output *= ref;
  7089  014282  C0A3  F07C         	movff	ADC_Voltage@output,___flmul@b
  7090  014286  C0A4  F07D         	movff	ADC_Voltage@output+1,___flmul@b+1
  7091  01428A  C0A5  F07E         	movff	ADC_Voltage@output+2,___flmul@b+2
  7092  01428E  C0A6  F07F         	movff	ADC_Voltage@output+3,___flmul@b+3
  7093  014292  C09F  F080         	movff	ADC_Voltage@ref,___flmul@a
  7094  014296  C0A0  F081         	movff	ADC_Voltage@ref+1,___flmul@a+1
  7095  01429A  C0A1  F082         	movff	ADC_Voltage@ref+2,___flmul@a+2
  7096  01429E  C0A2  F083         	movff	ADC_Voltage@ref+3,___flmul@a+3
  7097  0142A2  EC54  F082         	call	___flmul	;wreg free
  7098  0142A6  C07C  F0A3         	movff	?___flmul,ADC_Voltage@output
  7099  0142AA  C07D  F0A4         	movff	?___flmul+1,ADC_Voltage@output+1
  7100  0142AE  C07E  F0A5         	movff	?___flmul+2,ADC_Voltage@output+2
  7101  0142B2  C07F  F0A6         	movff	?___flmul+3,ADC_Voltage@output+3
  7102                           
  7103                           ;ADC.c: 268: return output + (float)0.000;
  7104  0142B6  C0A3  F095         	movff	ADC_Voltage@output,?_ADC_Voltage
  7105  0142BA  C0A4  F096         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
  7106  0142BE  C0A5  F097         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
  7107  0142C2  C0A6  F098         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
  7108  0142C6  0012               	return	
  7109  0142C8                     __end_of_ADC_Voltage:
  7110                           	opt stack 0
  7111                           tosu	equ	0xFFF
  7112                           tosh	equ	0xFFE
  7113                           tosl	equ	0xFFD
  7114                           pclath	equ	0xFFA
  7115                           tblptru	equ	0xFF8
  7116                           tblptrh	equ	0xFF7
  7117                           tblptrl	equ	0xFF6
  7118                           tablat	equ	0xFF5
  7119                           postinc0	equ	0xFEE
  7120                           wreg	equ	0xFE8
  7121                           postdec1	equ	0xFE5
  7122                           fsr1h	equ	0xFE2
  7123                           fsr1l	equ	0xFE1
  7124                           indf2	equ	0xFDF
  7125                           postinc2	equ	0xFDE
  7126                           postdec2	equ	0xFDD
  7127                           fsr2h	equ	0xFDA
  7128                           fsr2l	equ	0xFD9
  7129                           status	equ	0xFD8
  7130                           
  7131 ;; *************** function ___fldiv *****************
  7132 ;; Defined at:
  7133 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
  7134 ;; Parameters:    Size  Location     Type
  7135 ;;  b               4    0[BANK0 ] float 
  7136 ;;  a               4    4[BANK0 ] float 
  7137 ;; Auto vars:     Size  Location     Type
  7138 ;;  grs             4   19[BANK0 ] unsigned long 
  7139 ;;  rem             4   13[BANK0 ] unsigned long 
  7140 ;;  new_exp         2   17[BANK0 ] int 
  7141 ;;  aexp            1   24[BANK0 ] unsigned char 
  7142 ;;  bexp            1   23[BANK0 ] unsigned char 
  7143 ;;  sign            1   12[BANK0 ] unsigned char 
  7144 ;; Return value:  Size  Location     Type
  7145 ;;                  4    0[BANK0 ] unsigned char 
  7146 ;; Registers used:
  7147 ;;		wreg, status,2, status,0
  7148 ;; Tracked objects:
  7149 ;;		On entry : 0/0
  7150 ;;		On exit  : 0/0
  7151 ;;		Unchanged: 0/0
  7152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7153 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7154 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7155 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7156 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;Total ram usage:       25 bytes
  7158 ;; Hardware stack levels used:    1
  7159 ;; Hardware stack levels required when called:    7
  7160 ;; This function calls:
  7161 ;;		Nothing
  7162 ;; This function is called by:
  7163 ;;		_ADC_Voltage
  7164 ;;		_multiSampleADC
  7165 ;;		_exp
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           	psect	text19
  7170  010D6C                     __ptext19:
  7171                           	opt stack 0
  7172  010D6C                     ___fldiv:
  7173                           	opt stack 21
  7174                           
  7175                           ;incstack = 0
  7176  010D6C  0100               	movlb	0	; () banked
  7177  010D6E  5163               	movf	(___fldiv@b+3)& (0+255),w,b
  7178  010D70  0B80               	andlw	128
  7179  010D72  0100               	movlb	0	; () banked
  7180  010D74  6F6C               	movwf	___fldiv@sign& (0+255),b
  7181  010D76  0100               	movlb	0	; () banked
  7182  010D78  5163               	movf	(___fldiv@b+3)& (0+255),w,b
  7183  010D7A  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
  7184  010D7C  0100               	movlb	0	; () banked
  7185  010D7E  6F77               	movwf	___fldiv@bexp& (0+255),b
  7186                           
  7187                           ; BSR set to: 0
  7188  010D80  0100               	movlb	0	; () banked
  7189  010D82  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
  7190  010D84  D002               	goto	l2662
  7191                           
  7192                           ; BSR set to: 0
  7193  010D86  0100               	movlb	0	; () banked
  7194  010D88  8177               	bsf	___fldiv@bexp& (0+255),0,b
  7195  010D8A                     l2662:
  7196                           
  7197                           ; BSR set to: 0
  7198                           
  7199                           ; BSR set to: 0
  7200  010D8A  0100               	movlb	0	; () banked
  7201  010D8C  5177               	movf	___fldiv@bexp& (0+255),w,b
  7202  010D8E  0100               	movlb	0	; () banked
  7203  010D90  B4D8               	btfsc	status,2,c
  7204  010D92  D012               	goto	l2663
  7205                           
  7206                           ; BSR set to: 0
  7207  010D94  0100               	movlb	0	; () banked
  7208  010D96  2977               	incf	___fldiv@bexp& (0+255),w,b
  7209  010D98  A4D8               	btfss	status,2,c
  7210  010D9A  D009               	goto	l2664
  7211                           
  7212                           ; BSR set to: 0
  7213  010D9C  0E00               	movlw	0
  7214  010D9E  0100               	movlb	0	; () banked
  7215  010DA0  6F60               	movwf	___fldiv@b& (0+255),b
  7216  010DA2  0E00               	movlw	0
  7217  010DA4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  7218  010DA6  0E00               	movlw	0
  7219  010DA8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  7220  010DAA  0E00               	movlw	0
  7221  010DAC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7222  010DAE                     l2664:
  7223                           
  7224                           ; BSR set to: 0
  7225                           
  7226                           ; BSR set to: 0
  7227  010DAE  0100               	movlb	0	; () banked
  7228  010DB0  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
  7229                           
  7230                           ; BSR set to: 0
  7231  010DB2  0E00               	movlw	0
  7232  010DB4  0100               	movlb	0	; () banked
  7233  010DB6  D008               	goto	L5
  7234  010DB8                     l2663:
  7235                           
  7236                           ; BSR set to: 0
  7237                           
  7238                           ; BSR set to: 0
  7239  010DB8  0E00               	movlw	0
  7240  010DBA  0100               	movlb	0	; () banked
  7241  010DBC  6F60               	movwf	___fldiv@b& (0+255),b
  7242  010DBE  0E00               	movlw	0
  7243  010DC0  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  7244  010DC2  0E00               	movlw	0
  7245  010DC4  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  7246  010DC6  0E00               	movlw	0
  7247  010DC8                     L5:
  7248  010DC8  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7249                           
  7250                           ; BSR set to: 0
  7251                           
  7252                           ; BSR set to: 0
  7253  010DCA  0100               	movlb	0	; () banked
  7254  010DCC  5167               	movf	(___fldiv@a+3)& (0+255),w,b
  7255  010DCE  0B80               	andlw	128
  7256  010DD0  0100               	movlb	0	; () banked
  7257  010DD2  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
  7258                           
  7259                           ; BSR set to: 0
  7260  010DD4  0100               	movlb	0	; () banked
  7261  010DD6  5167               	movf	(___fldiv@a+3)& (0+255),w,b
  7262  010DD8  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
  7263  010DDA  0100               	movlb	0	; () banked
  7264  010DDC  6F78               	movwf	___fldiv@aexp& (0+255),b
  7265                           
  7266                           ; BSR set to: 0
  7267  010DDE  0100               	movlb	0	; () banked
  7268  010DE0  AF66               	btfss	(___fldiv@a+2)& (0+255),7,b
  7269  010DE2  D002               	goto	l2666
  7270                           
  7271                           ; BSR set to: 0
  7272  010DE4  0100               	movlb	0	; () banked
  7273  010DE6  8178               	bsf	___fldiv@aexp& (0+255),0,b
  7274  010DE8                     l2666:
  7275                           
  7276                           ; BSR set to: 0
  7277                           
  7278                           ; BSR set to: 0
  7279  010DE8  0100               	movlb	0	; () banked
  7280  010DEA  5178               	movf	___fldiv@aexp& (0+255),w,b
  7281  010DEC  0100               	movlb	0	; () banked
  7282  010DEE  B4D8               	btfsc	status,2,c
  7283  010DF0  D012               	goto	l2667
  7284                           
  7285                           ; BSR set to: 0
  7286  010DF2  0100               	movlb	0	; () banked
  7287  010DF4  2978               	incf	___fldiv@aexp& (0+255),w,b
  7288  010DF6  A4D8               	btfss	status,2,c
  7289  010DF8  D009               	goto	l2668
  7290                           
  7291                           ; BSR set to: 0
  7292  010DFA  0E00               	movlw	0
  7293  010DFC  0100               	movlb	0	; () banked
  7294  010DFE  6F64               	movwf	___fldiv@a& (0+255),b
  7295  010E00  0E00               	movlw	0
  7296  010E02  6F65               	movwf	(___fldiv@a+1)& (0+255),b
  7297  010E04  0E00               	movlw	0
  7298  010E06  6F66               	movwf	(___fldiv@a+2)& (0+255),b
  7299  010E08  0E00               	movlw	0
  7300  010E0A  6F67               	movwf	(___fldiv@a+3)& (0+255),b
  7301  010E0C                     l2668:
  7302                           
  7303                           ; BSR set to: 0
  7304                           
  7305                           ; BSR set to: 0
  7306  010E0C  0100               	movlb	0	; () banked
  7307  010E0E  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
  7308                           
  7309                           ; BSR set to: 0
  7310  010E10  0E00               	movlw	0
  7311  010E12  0100               	movlb	0	; () banked
  7312  010E14  D008               	goto	L6
  7313  010E16                     l2667:
  7314                           
  7315                           ; BSR set to: 0
  7316                           
  7317                           ; BSR set to: 0
  7318  010E16  0E00               	movlw	0
  7319  010E18  0100               	movlb	0	; () banked
  7320  010E1A  6F64               	movwf	___fldiv@a& (0+255),b
  7321  010E1C  0E00               	movlw	0
  7322  010E1E  6F65               	movwf	(___fldiv@a+1)& (0+255),b
  7323  010E20  0E00               	movlw	0
  7324  010E22  6F66               	movwf	(___fldiv@a+2)& (0+255),b
  7325  010E24  0E00               	movlw	0
  7326  010E26                     L6:
  7327  010E26  6F67               	movwf	(___fldiv@a+3)& (0+255),b
  7328                           
  7329                           ; BSR set to: 0
  7330                           
  7331                           ; BSR set to: 0
  7332  010E28  0100               	movlb	0	; () banked
  7333  010E2A  5164               	movf	___fldiv@a& (0+255),w,b
  7334  010E2C  0100               	movlb	0	; () banked
  7335  010E2E  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
  7336  010E30  0100               	movlb	0	; () banked
  7337  010E32  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
  7338  010E34  0100               	movlb	0	; () banked
  7339  010E36  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
  7340  010E38  A4D8               	btfss	status,2,c
  7341  010E3A  D017               	goto	l2670
  7342                           
  7343                           ; BSR set to: 0
  7344  010E3C  0E00               	movlw	0
  7345  010E3E  0100               	movlb	0	; () banked
  7346  010E40  6F60               	movwf	___fldiv@b& (0+255),b
  7347  010E42  0E00               	movlw	0
  7348  010E44  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  7349  010E46  0E00               	movlw	0
  7350  010E48  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  7351  010E4A  0E00               	movlw	0
  7352  010E4C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7353                           
  7354                           ; BSR set to: 0
  7355  010E4E  0100               	movlb	0	; () banked
  7356  010E50  0E80               	movlw	128
  7357  010E52  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
  7358  010E54  0E7F               	movlw	127
  7359  010E56  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
  7360                           
  7361                           ; BSR set to: 0
  7362  010E58  C060  F060         	movff	___fldiv@b,?___fldiv
  7363  010E5C  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
  7364  010E60  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
  7365  010E64  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
  7366                           
  7367                           ; BSR set to: 0
  7368  010E68  0012               	return	
  7369  010E6A                     l2670:
  7370                           
  7371                           ; BSR set to: 0
  7372                           
  7373                           ; BSR set to: 0
  7374  010E6A  0100               	movlb	0	; () banked
  7375  010E6C  5177               	movf	___fldiv@bexp& (0+255),w,b
  7376  010E6E  0100               	movlb	0	; () banked
  7377  010E70  A4D8               	btfss	status,2,c
  7378  010E72  D012               	goto	l2672
  7379                           
  7380                           ; BSR set to: 0
  7381  010E74  0E00               	movlw	0
  7382  010E76  0100               	movlb	0	; () banked
  7383  010E78  6F60               	movwf	___fldiv@b& (0+255),b
  7384  010E7A  0E00               	movlw	0
  7385  010E7C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  7386  010E7E  0E00               	movlw	0
  7387  010E80  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  7388  010E82  0E00               	movlw	0
  7389  010E84  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7390                           
  7391                           ; BSR set to: 0
  7392  010E86  C060  F060         	movff	___fldiv@b,?___fldiv
  7393  010E8A  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
  7394  010E8E  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
  7395  010E92  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
  7396                           
  7397                           ; BSR set to: 0
  7398  010E96  0012               	return	
  7399  010E98                     l2672:
  7400                           
  7401                           ; BSR set to: 0
  7402                           
  7403                           ; BSR set to: 0
  7404  010E98  0100               	movlb	0	; () banked
  7405  010E9A  5178               	movf	___fldiv@aexp& (0+255),w,b
  7406  010E9C  0100               	movlb	0	; () banked
  7407  010E9E  6F68               	movwf	??___fldiv& (0+255),b
  7408  010EA0  6B69               	clrf	(??___fldiv+1)& (0+255),b
  7409  010EA2  0100               	movlb	0	; () banked
  7410  010EA4  1F68               	comf	??___fldiv& (0+255),f,b
  7411  010EA6  1F69               	comf	(??___fldiv+1)& (0+255),f,b
  7412  010EA8  4B68               	infsnz	??___fldiv& (0+255),f,b
  7413  010EAA  2B69               	incf	(??___fldiv+1)& (0+255),f,b
  7414  010EAC  0100               	movlb	0	; () banked
  7415  010EAE  5177               	movf	___fldiv@bexp& (0+255),w,b
  7416  010EB0  0100               	movlb	0	; () banked
  7417  010EB2  6F6A               	movwf	(??___fldiv+2)& (0+255),b
  7418  010EB4  6B6B               	clrf	(??___fldiv+3)& (0+255),b
  7419  010EB6  0100               	movlb	0	; () banked
  7420  010EB8  5168               	movf	??___fldiv& (0+255),w,b
  7421  010EBA  0100               	movlb	0	; () banked
  7422  010EBC  276A               	addwf	(??___fldiv+2)& (0+255),f,b
  7423  010EBE  0100               	movlb	0	; () banked
  7424  010EC0  5169               	movf	(??___fldiv+1)& (0+255),w,b
  7425  010EC2  0100               	movlb	0	; () banked
  7426  010EC4  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
  7427  010EC6  0E7F               	movlw	127
  7428  010EC8  0100               	movlb	0	; () banked
  7429  010ECA  256A               	addwf	(??___fldiv+2)& (0+255),w,b
  7430  010ECC  0100               	movlb	0	; () banked
  7431  010ECE  6F71               	movwf	___fldiv@new_exp& (0+255),b
  7432  010ED0  0E00               	movlw	0
  7433  010ED2  0100               	movlb	0	; () banked
  7434  010ED4  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
  7435  010ED6  0100               	movlb	0	; () banked
  7436  010ED8  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7437                           
  7438                           ; BSR set to: 0
  7439  010EDA  C060  F06D         	movff	___fldiv@b,___fldiv@rem
  7440  010EDE  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
  7441  010EE2  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
  7442  010EE6  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
  7443                           
  7444                           ; BSR set to: 0
  7445  010EEA  0E00               	movlw	0
  7446  010EEC  0100               	movlb	0	; () banked
  7447  010EEE  6F60               	movwf	___fldiv@b& (0+255),b
  7448  010EF0  0E00               	movlw	0
  7449  010EF2  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  7450  010EF4  0E00               	movlw	0
  7451  010EF6  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  7452  010EF8  0E00               	movlw	0
  7453  010EFA  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7454                           
  7455                           ; BSR set to: 0
  7456  010EFC  0E00               	movlw	0
  7457  010EFE  0100               	movlb	0	; () banked
  7458  010F00  6F73               	movwf	___fldiv@grs& (0+255),b
  7459  010F02  0E00               	movlw	0
  7460  010F04  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
  7461  010F06  0E00               	movlw	0
  7462  010F08  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
  7463  010F0A  0E00               	movlw	0
  7464  010F0C  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
  7465                           
  7466                           ; BSR set to: 0
  7467  010F0E  0E00               	movlw	0
  7468  010F10  0100               	movlb	0	; () banked
  7469  010F12  6F78               	movwf	___fldiv@aexp& (0+255),b
  7470  010F14  D042               	goto	l2673
  7471  010F16                     
  7472                           ; BSR set to: 0
  7473                           
  7474                           ; BSR set to: 0
  7475  010F16  0100               	movlb	0	; () banked
  7476  010F18  5178               	movf	___fldiv@aexp& (0+255),w,b
  7477  010F1A  0100               	movlb	0	; () banked
  7478  010F1C  B4D8               	btfsc	status,2,c
  7479  010F1E  D017               	goto	l2675
  7480                           
  7481                           ; BSR set to: 0
  7482  010F20  0100               	movlb	0	; () banked
  7483  010F22  90D8               	bcf	status,0,c
  7484  010F24  376D               	rlcf	___fldiv@rem& (0+255),f,b
  7485  010F26  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
  7486  010F28  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
  7487  010F2A  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
  7488  010F2C  0100               	movlb	0	; () banked
  7489  010F2E  90D8               	bcf	status,0,c
  7490  010F30  3760               	rlcf	___fldiv@b& (0+255),f,b
  7491  010F32  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
  7492  010F34  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
  7493  010F36  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
  7494                           
  7495                           ; BSR set to: 0
  7496  010F38  0100               	movlb	0	; () banked
  7497  010F3A  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7498  010F3C  D002               	goto	l2676
  7499                           
  7500                           ; BSR set to: 0
  7501  010F3E  0100               	movlb	0	; () banked
  7502  010F40  8160               	bsf	___fldiv@b& (0+255),0,b
  7503  010F42                     l2676:
  7504                           
  7505                           ; BSR set to: 0
  7506  010F42  0100               	movlb	0	; () banked
  7507  010F44  90D8               	bcf	status,0,c
  7508  010F46  3773               	rlcf	___fldiv@grs& (0+255),f,b
  7509  010F48  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  7510  010F4A  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  7511  010F4C  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  7512  010F4E                     l2675:
  7513                           
  7514                           ; BSR set to: 0
  7515                           
  7516                           ; BSR set to: 0
  7517  010F4E  0100               	movlb	0	; () banked
  7518  010F50  5164               	movf	___fldiv@a& (0+255),w,b
  7519  010F52  0100               	movlb	0	; () banked
  7520  010F54  5D6D               	subwf	___fldiv@rem& (0+255),w,b
  7521  010F56  0100               	movlb	0	; () banked
  7522  010F58  5165               	movf	(___fldiv@a+1)& (0+255),w,b
  7523  010F5A  0100               	movlb	0	; () banked
  7524  010F5C  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
  7525  010F5E  0100               	movlb	0	; () banked
  7526  010F60  5166               	movf	(___fldiv@a+2)& (0+255),w,b
  7527  010F62  0100               	movlb	0	; () banked
  7528  010F64  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
  7529  010F66  0100               	movlb	0	; () banked
  7530  010F68  5167               	movf	(___fldiv@a+3)& (0+255),w,b
  7531  010F6A  0100               	movlb	0	; () banked
  7532  010F6C  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
  7533  010F6E  A0D8               	btfss	status,0,c
  7534  010F70  D012               	goto	l2677
  7535                           
  7536                           ; BSR set to: 0
  7537  010F72  0100               	movlb	0	; () banked
  7538  010F74  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
  7539                           
  7540                           ; BSR set to: 0
  7541  010F76  0100               	movlb	0	; () banked
  7542  010F78  5164               	movf	___fldiv@a& (0+255),w,b
  7543  010F7A  0100               	movlb	0	; () banked
  7544  010F7C  5F6D               	subwf	___fldiv@rem& (0+255),f,b
  7545  010F7E  0100               	movlb	0	; () banked
  7546  010F80  5165               	movf	(___fldiv@a+1)& (0+255),w,b
  7547  010F82  0100               	movlb	0	; () banked
  7548  010F84  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
  7549  010F86  0100               	movlb	0	; () banked
  7550  010F88  5166               	movf	(___fldiv@a+2)& (0+255),w,b
  7551  010F8A  0100               	movlb	0	; () banked
  7552  010F8C  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
  7553  010F8E  0100               	movlb	0	; () banked
  7554  010F90  5167               	movf	(___fldiv@a+3)& (0+255),w,b
  7555  010F92  0100               	movlb	0	; () banked
  7556  010F94  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
  7557  010F96                     l2677:
  7558                           
  7559                           ; BSR set to: 0
  7560                           
  7561                           ; BSR set to: 0
  7562  010F96  0100               	movlb	0	; () banked
  7563  010F98  2B78               	incf	___fldiv@aexp& (0+255),f,b
  7564  010F9A                     l2673:
  7565                           
  7566                           ; BSR set to: 0
  7567  010F9A  0E19               	movlw	25
  7568  010F9C  0100               	movlb	0	; () banked
  7569  010F9E  6578               	cpfsgt	___fldiv@aexp& (0+255),b
  7570  010FA0  D7BA               	goto	l2674
  7571                           
  7572                           ; BSR set to: 0
  7573                           
  7574                           ; BSR set to: 0
  7575  010FA2  0100               	movlb	0	; () banked
  7576  010FA4  516D               	movf	___fldiv@rem& (0+255),w,b
  7577  010FA6  0100               	movlb	0	; () banked
  7578  010FA8  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
  7579  010FAA  0100               	movlb	0	; () banked
  7580  010FAC  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
  7581  010FAE  0100               	movlb	0	; () banked
  7582  010FB0  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
  7583  010FB2  B4D8               	btfsc	status,2,c
  7584  010FB4  D018               	goto	l2680
  7585                           
  7586                           ; BSR set to: 0
  7587  010FB6  0100               	movlb	0	; () banked
  7588  010FB8  8173               	bsf	___fldiv@grs& (0+255),0,b
  7589                           
  7590                           ; BSR set to: 0
  7591  010FBA  D015               	goto	l2680
  7592  010FBC                     
  7593                           ; BSR set to: 0
  7594                           
  7595                           ; BSR set to: 0
  7596  010FBC  0100               	movlb	0	; () banked
  7597  010FBE  90D8               	bcf	status,0,c
  7598  010FC0  3760               	rlcf	___fldiv@b& (0+255),f,b
  7599  010FC2  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
  7600  010FC4  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
  7601  010FC6  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
  7602                           
  7603                           ; BSR set to: 0
  7604  010FC8  0100               	movlb	0	; () banked
  7605  010FCA  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7606  010FCC  D002               	goto	l2682
  7607                           
  7608                           ; BSR set to: 0
  7609  010FCE  0100               	movlb	0	; () banked
  7610  010FD0  8160               	bsf	___fldiv@b& (0+255),0,b
  7611  010FD2                     l2682:
  7612                           
  7613                           ; BSR set to: 0
  7614  010FD2  0100               	movlb	0	; () banked
  7615  010FD4  90D8               	bcf	status,0,c
  7616  010FD6  3773               	rlcf	___fldiv@grs& (0+255),f,b
  7617  010FD8  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
  7618  010FDA  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
  7619  010FDC  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
  7620  010FDE  0100               	movlb	0	; () banked
  7621  010FE0  0771               	decf	___fldiv@new_exp& (0+255),f,b
  7622  010FE2  A0D8               	btfss	status,0,c
  7623  010FE4  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
  7624  010FE6                     l2680:
  7625                           
  7626                           ; BSR set to: 0
  7627                           
  7628                           ; BSR set to: 0
  7629  010FE6  0100               	movlb	0	; () banked
  7630  010FE8  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
  7631  010FEA  D7E8               	goto	l2681
  7632                           
  7633                           ; BSR set to: 0
  7634                           
  7635                           ; BSR set to: 0
  7636  010FEC  0E00               	movlw	0
  7637  010FEE  0100               	movlb	0	; () banked
  7638  010FF0  6F78               	movwf	___fldiv@aexp& (0+255),b
  7639                           
  7640                           ; BSR set to: 0
  7641  010FF2  0100               	movlb	0	; () banked
  7642  010FF4  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
  7643  010FF6  D024               	goto	l2687
  7644                           
  7645                           ; BSR set to: 0
  7646  010FF8  0EFF               	movlw	255
  7647  010FFA  0100               	movlb	0	; () banked
  7648  010FFC  1573               	andwf	___fldiv@grs& (0+255),w,b
  7649  010FFE  0100               	movlb	0	; () banked
  7650  011000  6F68               	movwf	??___fldiv& (0+255),b
  7651  011002  0EFF               	movlw	255
  7652  011004  0100               	movlb	0	; () banked
  7653  011006  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
  7654  011008  0100               	movlb	0	; () banked
  7655  01100A  6F69               	movwf	(??___fldiv+1)& (0+255),b
  7656  01100C  0EFF               	movlw	255
  7657  01100E  0100               	movlb	0	; () banked
  7658  011010  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
  7659  011012  0100               	movlb	0	; () banked
  7660  011014  6F6A               	movwf	(??___fldiv+2)& (0+255),b
  7661  011016  0E7F               	movlw	127
  7662  011018  0100               	movlb	0	; () banked
  7663  01101A  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
  7664  01101C  0100               	movlb	0	; () banked
  7665  01101E  6F6B               	movwf	(??___fldiv+3)& (0+255),b
  7666  011020  0100               	movlb	0	; () banked
  7667  011022  5168               	movf	??___fldiv& (0+255),w,b
  7668  011024  0100               	movlb	0	; () banked
  7669  011026  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
  7670  011028  0100               	movlb	0	; () banked
  7671  01102A  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
  7672  01102C  0100               	movlb	0	; () banked
  7673  01102E  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
  7674  011030  A4D8               	btfss	status,2,c
  7675  011032  D003               	goto	u10620
  7676                           
  7677                           ; BSR set to: 0
  7678                           
  7679                           ; BSR set to: 0
  7680  011034  0100               	movlb	0	; () banked
  7681  011036  A160               	btfss	___fldiv@b& (0+255),0,b
  7682  011038  D003               	goto	l2687
  7683  01103A                     u10620:
  7684                           
  7685                           ; BSR set to: 0
  7686  01103A  0E01               	movlw	1
  7687  01103C  0100               	movlb	0	; () banked
  7688  01103E  6F78               	movwf	___fldiv@aexp& (0+255),b
  7689  011040                     l2687:
  7690                           
  7691                           ; BSR set to: 0
  7692                           
  7693                           ; BSR set to: 0
  7694                           
  7695                           ; BSR set to: 0
  7696  011040  0100               	movlb	0	; () banked
  7697  011042  5178               	movf	___fldiv@aexp& (0+255),w,b
  7698  011044  0100               	movlb	0	; () banked
  7699  011046  B4D8               	btfsc	status,2,c
  7700  011048  D023               	goto	l2689
  7701                           
  7702                           ; BSR set to: 0
  7703  01104A  0E01               	movlw	1
  7704  01104C  0100               	movlb	0	; () banked
  7705  01104E  2760               	addwf	___fldiv@b& (0+255),f,b
  7706  011050  0E00               	movlw	0
  7707  011052  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
  7708  011054  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
  7709  011056  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
  7710                           
  7711                           ; BSR set to: 0
  7712  011058  0100               	movlb	0	; () banked
  7713  01105A  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
  7714  01105C  D019               	goto	l2689
  7715                           
  7716                           ; BSR set to: 0
  7717  01105E  C060  F068         	movff	___fldiv@b,??___fldiv
  7718  011062  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
  7719  011066  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
  7720  01106A  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
  7721  01106E  0100               	movlb	0	; () banked
  7722  011070  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
  7723  011072  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
  7724  011074  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
  7725  011076  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
  7726  011078  3368               	rrcf	??___fldiv& (0+255),f,b
  7727  01107A  C068  F060         	movff	??___fldiv,___fldiv@b
  7728  01107E  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
  7729  011082  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
  7730  011086  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
  7731                           
  7732                           ; BSR set to: 0
  7733  01108A  0100               	movlb	0	; () banked
  7734  01108C  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
  7735  01108E  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
  7736  011090                     l2689:
  7737                           
  7738                           ; BSR set to: 0
  7739                           
  7740                           ; BSR set to: 0
  7741                           
  7742                           ; BSR set to: 0
  7743  011090  0100               	movlb	0	; () banked
  7744  011092  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  7745  011094  D014               	goto	l2690
  7746  011096  0100               	movlb	0	; () banked
  7747  011098  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  7748  01109A  E104               	bnz	u10650
  7749  01109C  0100               	movlb	0	; () banked
  7750  01109E  2971               	incf	___fldiv@new_exp& (0+255),w,b
  7751  0110A0  A0D8               	btfss	status,0,c
  7752  0110A2  D00D               	goto	l2690
  7753  0110A4                     u10650:
  7754                           
  7755                           ; BSR set to: 0
  7756  0110A4  0E00               	movlw	0
  7757  0110A6  0100               	movlb	0	; () banked
  7758  0110A8  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7759  0110AA  6971               	setf	___fldiv@new_exp& (0+255),b
  7760  0110AC  0E00               	movlw	0
  7761  0110AE  0100               	movlb	0	; () banked
  7762  0110B0  6F60               	movwf	___fldiv@b& (0+255),b
  7763  0110B2  0E00               	movlw	0
  7764  0110B4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  7765  0110B6  0E00               	movlw	0
  7766  0110B8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  7767  0110BA  0E00               	movlw	0
  7768  0110BC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7769  0110BE                     l2690:
  7770                           
  7771                           ; BSR set to: 0
  7772                           
  7773                           ; BSR set to: 0
  7774  0110BE  0100               	movlb	0	; () banked
  7775  0110C0  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
  7776  0110C2  D007               	goto	u10660
  7777  0110C4  0100               	movlb	0	; () banked
  7778  0110C6  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
  7779  0110C8  E115               	bnz	l13437
  7780  0110CA  0100               	movlb	0	; () banked
  7781  0110CC  0571               	decf	___fldiv@new_exp& (0+255),w,b
  7782  0110CE  B0D8               	btfsc	status,0,c
  7783  0110D0  D011               	goto	l2691
  7784  0110D2                     u10660:
  7785                           
  7786                           ; BSR set to: 0
  7787  0110D2  0E00               	movlw	0
  7788  0110D4  0100               	movlb	0	; () banked
  7789  0110D6  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
  7790  0110D8  0E00               	movlw	0
  7791  0110DA  6F71               	movwf	___fldiv@new_exp& (0+255),b
  7792  0110DC  0E00               	movlw	0
  7793  0110DE  0100               	movlb	0	; () banked
  7794  0110E0  6F60               	movwf	___fldiv@b& (0+255),b
  7795  0110E2  0E00               	movlw	0
  7796  0110E4  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  7797  0110E6  0E00               	movlw	0
  7798  0110E8  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  7799  0110EA  0E00               	movlw	0
  7800  0110EC  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7801  0110EE  0E00               	movlw	0
  7802  0110F0  0100               	movlb	0	; () banked
  7803  0110F2  6F6C               	movwf	___fldiv@sign& (0+255),b
  7804  0110F4                     l2691:
  7805  0110F4                     l13437:
  7806                           
  7807                           ; BSR set to: 0
  7808  0110F4  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
  7809                           
  7810                           ; BSR set to: 0
  7811  0110F8  0100               	movlb	0	; () banked
  7812  0110FA  A177               	btfss	___fldiv@bexp& (0+255),0,b
  7813  0110FC  D003               	goto	l2692
  7814                           
  7815                           ; BSR set to: 0
  7816  0110FE  0100               	movlb	0	; () banked
  7817  011100  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
  7818  011102  D002               	goto	l2693
  7819  011104                     l2692:
  7820                           
  7821                           ; BSR set to: 0
  7822                           
  7823                           ; BSR set to: 0
  7824  011104  0100               	movlb	0	; () banked
  7825  011106  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
  7826  011108                     l2693:
  7827                           
  7828                           ; BSR set to: 0
  7829                           
  7830                           ; BSR set to: 0
  7831  011108  0100               	movlb	0	; () banked
  7832  01110A  90D8               	bcf	status,0,c
  7833  01110C  3177               	rrcf	___fldiv@bexp& (0+255),w,b
  7834  01110E  0100               	movlb	0	; () banked
  7835  011110  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  7836                           
  7837                           ; BSR set to: 0
  7838  011112  0100               	movlb	0	; () banked
  7839  011114  516C               	movf	___fldiv@sign& (0+255),w,b
  7840  011116  0100               	movlb	0	; () banked
  7841  011118  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
  7842                           
  7843                           ; BSR set to: 0
  7844  01111A  C060  F060         	movff	___fldiv@b,?___fldiv
  7845  01111E  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
  7846  011122  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
  7847  011126  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
  7848  01112A  0012               	return	
  7849  01112C                     __end_of___fldiv:
  7850                           	opt stack 0
  7851                           tosu	equ	0xFFF
  7852                           tosh	equ	0xFFE
  7853                           tosl	equ	0xFFD
  7854                           pclath	equ	0xFFA
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           postinc0	equ	0xFEE
  7860                           wreg	equ	0xFE8
  7861                           postdec1	equ	0xFE5
  7862                           fsr1h	equ	0xFE2
  7863                           fsr1l	equ	0xFE1
  7864                           indf2	equ	0xFDF
  7865                           postinc2	equ	0xFDE
  7866                           postdec2	equ	0xFDD
  7867                           fsr2h	equ	0xFDA
  7868                           fsr2l	equ	0xFD9
  7869                           status	equ	0xFD8
  7870                           
  7871 ;; *************** function _HMI_Poll *****************
  7872 ;; Defined at:
  7873 ;;		line 252 in file "HMI.c"
  7874 ;; Parameters:    Size  Location     Type
  7875 ;;		None
  7876 ;; Auto vars:     Size  Location     Type
  7877 ;;		None
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      void 
  7880 ;; Registers used:
  7881 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;Total ram usage:        0 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:   15
  7894 ;; This function calls:
  7895 ;;		_Button_Poll
  7896 ;; This function is called by:
  7897 ;;		_inputVar
  7898 ;; This function uses a non-reentrant model
  7899 ;;
  7900                           
  7901                           	psect	text20
  7902  015B20                     __ptext20:
  7903                           	opt stack 0
  7904  015B20                     _HMI_Poll:
  7905                           	opt stack 14
  7906                           
  7907                           ;HMI.c: 254: TRISE = 0xFC;
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;incstack = 0
  7911  015B20  0EFC               	movlw	252
  7912  015B22  6E96               	movwf	3990,c	;volatile
  7913                           
  7914                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  7915  015B24  0E60               	movlw	low (_HMIBoard+48)
  7916  015B26  0100               	movlb	0	; () banked
  7917  015B28  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  7918  015B2A  0E01               	movlw	high (_HMIBoard+48)
  7919  015B2C  0100               	movlb	0	; () banked
  7920  015B2E  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  7921  015B30  0E01               	movlw	1
  7922  015B32  0100               	movlb	0	; () banked
  7923  015B34  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  7924  015B36  EC0D  F09B         	call	_Button_Poll	;wreg free
  7925                           
  7926                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  7927  015B3A  0E42               	movlw	low (_HMIBoard+18)
  7928  015B3C  0100               	movlb	0	; () banked
  7929  015B3E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  7930  015B40  0E01               	movlw	high (_HMIBoard+18)
  7931  015B42  0100               	movlb	0	; () banked
  7932  015B44  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  7933  015B46  0E01               	movlw	1
  7934  015B48  0100               	movlb	0	; () banked
  7935  015B4A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  7936  015B4C  EC0D  F09B         	call	_Button_Poll	;wreg free
  7937                           
  7938                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  7939  015B50  0E38               	movlw	low (_HMIBoard+8)
  7940  015B52  0100               	movlb	0	; () banked
  7941  015B54  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  7942  015B56  0E01               	movlw	high (_HMIBoard+8)
  7943  015B58  0100               	movlb	0	; () banked
  7944  015B5A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  7945  015B5C  0E01               	movlw	1
  7946  015B5E  0100               	movlb	0	; () banked
  7947  015B60  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  7948  015B62  EC0D  F09B         	call	_Button_Poll	;wreg free
  7949                           
  7950                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  7951  015B66  0E4C               	movlw	low (_HMIBoard+28)
  7952  015B68  0100               	movlb	0	; () banked
  7953  015B6A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  7954  015B6C  0E01               	movlw	high (_HMIBoard+28)
  7955  015B6E  0100               	movlb	0	; () banked
  7956  015B70  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  7957  015B72  0E01               	movlw	1
  7958  015B74  0100               	movlb	0	; () banked
  7959  015B76  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  7960  015B78  EC0D  F09B         	call	_Button_Poll	;wreg free
  7961                           
  7962                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  7963  015B7C  0E56               	movlw	low (_HMIBoard+38)
  7964  015B7E  0100               	movlb	0	; () banked
  7965  015B80  6F7B               	movwf	Button_Poll@pButton& (0+255),b
  7966  015B82  0E01               	movlw	high (_HMIBoard+38)
  7967  015B84  0100               	movlb	0	; () banked
  7968  015B86  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
  7969  015B88  0E01               	movlw	1
  7970  015B8A  0100               	movlb	0	; () banked
  7971  015B8C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
  7972  015B8E  EC0D  F09B         	call	_Button_Poll	;wreg free
  7973  015B92  0012               	return		;funcret
  7974  015B94                     __end_of_HMI_Poll:
  7975                           	opt stack 0
  7976                           tosu	equ	0xFFF
  7977                           tosh	equ	0xFFE
  7978                           tosl	equ	0xFFD
  7979                           pclath	equ	0xFFA
  7980                           tblptru	equ	0xFF8
  7981                           tblptrh	equ	0xFF7
  7982                           tblptrl	equ	0xFF6
  7983                           tablat	equ	0xFF5
  7984                           postinc0	equ	0xFEE
  7985                           wreg	equ	0xFE8
  7986                           postdec1	equ	0xFE5
  7987                           fsr1h	equ	0xFE2
  7988                           fsr1l	equ	0xFE1
  7989                           indf2	equ	0xFDF
  7990                           postinc2	equ	0xFDE
  7991                           postdec2	equ	0xFDD
  7992                           fsr2h	equ	0xFDA
  7993                           fsr2l	equ	0xFD9
  7994                           status	equ	0xFD8
  7995                           
  7996 ;; *************** function _Button_Poll *****************
  7997 ;; Defined at:
  7998 ;;		line 57 in file "Library/Button.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  8001 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  8002 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;  Pin             1   35[BANK0 ] unsigned char 
  8005 ;; Return value:  Size  Location     Type
  8006 ;;                  1    wreg      unsigned char 
  8007 ;; Registers used:
  8008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8009 ;; Tracked objects:
  8010 ;;		On entry : 0/0
  8011 ;;		On exit  : 0/0
  8012 ;;		Unchanged: 0/0
  8013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8014 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8016 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;Total ram usage:        9 bytes
  8019 ;; Hardware stack levels used:    1
  8020 ;; Hardware stack levels required when called:   14
  8021 ;; This function calls:
  8022 ;;		_Event_DIPSwitch
  8023 ;;		_Event_NULL
  8024 ;;		_Event_TestButton
  8025 ;;		_HMI_DIPSwitch
  8026 ;;		_HMI_DownSwitch
  8027 ;;		_HMI_LeftSwitch
  8028 ;;		_HMI_RightSwitch
  8029 ;;		_HMI_UpSwitch
  8030 ;;		_MXK_DIPSwitch
  8031 ;;		_MXK_TestButton
  8032 ;; This function is called by:
  8033 ;;		_HMI_Poll
  8034 ;;		_MXK_Poll
  8035 ;; This function uses a non-reentrant model
  8036 ;;
  8037                           
  8038                           	psect	text21
  8039  01361A                     __ptext21:
  8040                           	opt stack 0
  8041  01361A                     _Button_Poll:
  8042                           	opt stack 14
  8043                           
  8044                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  8045                           
  8046                           ;incstack = 0
  8047  01361A  0100               	movlb	0	; () banked
  8048  01361C  EE20 F007          	lfsr	2,7
  8049  013620  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8050  013622  26D9               	addwf	fsr2l,f,c
  8051  013624  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8052  013626  22DA               	addwfc	fsr2h,f,c
  8053  013628  D801               	call	u11178
  8054  01362A  D00A               	goto	u11179
  8055  01362C                     u11178:
  8056  01362C  0005               	push	
  8057  01362E  6EFA               	movwf	pclath,c
  8058  013630  50DE               	movf	postinc2,w,c
  8059  013632  6EFD               	movwf	tosl,c
  8060  013634  50DE               	movf	postinc2,w,c
  8061  013636  6EFE               	movwf	tosh,c
  8062  013638  50DE               	movf	postinc2,w,c
  8063  01363A  6EFF               	movwf	tosu,c
  8064  01363C  50FA               	movf	pclath,w,c
  8065  01363E  0012               	return		;indir
  8066  013640                     u11179:
  8067  013640  0100               	movlb	0	; () banked
  8068  013642  6F83               	movwf	Button_Poll@Pin& (0+255),b
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;Button.c: 61: if (pButton->mState == Pin)
  8072  013644  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  8073  013648  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  8074  01364C  0100               	movlb	0	; () banked
  8075  01364E  5183               	movf	Button_Poll@Pin& (0+255),w,b
  8076  013650  18DE               	xorwf	postinc2,w,c
  8077  013652  A4D8               	btfss	status,2,c
  8078  013654  D021               	goto	l11
  8079                           
  8080                           ; BSR set to: 0
  8081                           ;Button.c: 62: {
  8082                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  8083  013656  0100               	movlb	0	; () banked
  8084  013658  EE20 F001          	lfsr	2,1
  8085  01365C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8086  01365E  26D9               	addwf	fsr2l,f,c
  8087  013660  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8088  013662  22DA               	addwfc	fsr2h,f,c
  8089  013664  0100               	movlb	0	; () banked
  8090  013666  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  8091  013668  5CDE               	subwf	postinc2,w,c
  8092  01366A  B0D8               	btfsc	status,0,c
  8093  01366C  D00A               	goto	l12
  8094                           
  8095                           ; BSR set to: 0
  8096                           ;Button.c: 66: pButton->mCount = 0;
  8097  01366E  0100               	movlb	0	; () banked
  8098  013670  EE20 F001          	lfsr	2,1
  8099  013674  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8100  013676  26D9               	addwf	fsr2l,f,c
  8101  013678  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8102  01367A  22DA               	addwfc	fsr2h,f,c
  8103  01367C  0E00               	movlw	0
  8104  01367E  6EDF               	movwf	indf2,c
  8105  013680  0012               	return	
  8106  013682                     l12:
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;Button.c: 67: else
  8110                           ;Button.c: 68: pButton->mCount -= pIncrement;
  8111                           
  8112                           ; BSR set to: 0
  8113  013682  0100               	movlb	0	; () banked
  8114  013684  EE20 F001          	lfsr	2,1
  8115  013688  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8116  01368A  26D9               	addwf	fsr2l,f,c
  8117  01368C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8118  01368E  22DA               	addwfc	fsr2h,f,c
  8119  013690  0100               	movlb	0	; () banked
  8120  013692  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  8121  013694  5EDF               	subwf	indf2,f,c
  8122                           
  8123                           ; BSR set to: 0
  8124                           ;Button.c: 69: }
  8125  013696  0012               	return	
  8126  013698                     l11:
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  8130                           
  8131                           ; BSR set to: 0
  8132  013698  0100               	movlb	0	; () banked
  8133  01369A  EE20 F001          	lfsr	2,1
  8134  01369E  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8135  0136A0  26D9               	addwf	fsr2l,f,c
  8136  0136A2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8137  0136A4  22DA               	addwfc	fsr2h,f,c
  8138  0136A6  50DF               	movf	indf2,w,c
  8139  0136A8  0100               	movlb	0	; () banked
  8140  0136AA  6F7E               	movwf	??_Button_Poll& (0+255),b
  8141  0136AC  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
  8142  0136AE  0100               	movlb	0	; () banked
  8143  0136B0  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  8144  0136B2  0100               	movlb	0	; () banked
  8145  0136B4  277E               	addwf	??_Button_Poll& (0+255),f,b
  8146  0136B6  0E00               	movlw	0
  8147  0136B8  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  8148  0136BA  0100               	movlb	0	; () banked
  8149  0136BC  EE20 F001          	lfsr	2,1
  8150  0136C0  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8151  0136C2  26D9               	addwf	fsr2l,f,c
  8152  0136C4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8153  0136C6  22DA               	addwfc	fsr2h,f,c
  8154  0136C8  50DF               	movf	indf2,w,c
  8155  0136CA  0100               	movlb	0	; () banked
  8156  0136CC  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  8157  0136CE  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  8158  0136D0  0100               	movlb	0	; () banked
  8159  0136D2  517E               	movf	??_Button_Poll& (0+255),w,b
  8160  0136D4  0100               	movlb	0	; () banked
  8161  0136D6  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  8162  0136D8  0100               	movlb	0	; () banked
  8163  0136DA  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
  8164  0136DC  0A80               	xorlw	128
  8165  0136DE  0100               	movlb	0	; () banked
  8166  0136E0  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
  8167  0136E2  0100               	movlb	0	; () banked
  8168  0136E4  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
  8169  0136E6  0A80               	xorlw	128
  8170  0136E8  0100               	movlb	0	; () banked
  8171  0136EA  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  8172  0136EC  B0D8               	btfsc	status,0,c
  8173  0136EE  0012               	return	
  8174                           
  8175                           ; BSR set to: 0
  8176                           ;Button.c: 73: {
  8177                           ;Button.c: 75: pButton->mCount += pIncrement;
  8178  0136F0  0100               	movlb	0	; () banked
  8179  0136F2  EE20 F001          	lfsr	2,1
  8180  0136F6  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8181  0136F8  26D9               	addwf	fsr2l,f,c
  8182  0136FA  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8183  0136FC  22DA               	addwfc	fsr2h,f,c
  8184  0136FE  0100               	movlb	0	; () banked
  8185  013700  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
  8186  013702  26DF               	addwf	indf2,f,c
  8187                           
  8188                           ; BSR set to: 0
  8189                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  8190  013704  0100               	movlb	0	; () banked
  8191  013706  EE20 F002          	lfsr	2,2
  8192  01370A  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8193  01370C  26D9               	addwf	fsr2l,f,c
  8194  01370E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8195  013710  22DA               	addwfc	fsr2h,f,c
  8196  013712  0100               	movlb	0	; () banked
  8197  013714  EE10 F001          	lfsr	1,1
  8198  013718  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8199  01371A  26E1               	addwf	fsr1l,f,c
  8200  01371C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8201  01371E  22E2               	addwfc	fsr1h,f,c
  8202  013720  50E7               	movf	indf1,w,c
  8203  013722  0100               	movlb	0	; () banked
  8204  013724  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
  8205  013726  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
  8206  013728  50DE               	movf	postinc2,w,c
  8207  01372A  0100               	movlb	0	; () banked
  8208  01372C  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
  8209  01372E  50DE               	movf	postinc2,w,c
  8210  013730  0100               	movlb	0	; () banked
  8211  013732  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  8212  013734  A0D8               	btfss	status,0,c
  8213  013736  0012               	return	
  8214                           
  8215                           ; BSR set to: 0
  8216                           ;Button.c: 77: {
  8217                           ;Button.c: 79: pButton->mState = Pin;
  8218  013738  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
  8219  01373C  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  8220  013740  C083  FFDF         	movff	Button_Poll@Pin,indf2
  8221                           
  8222                           ; BSR set to: 0
  8223                           ;Button.c: 80: pButton->mCount = 0;
  8224  013744  0100               	movlb	0	; () banked
  8225  013746  EE20 F001          	lfsr	2,1
  8226  01374A  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8227  01374C  26D9               	addwf	fsr2l,f,c
  8228  01374E  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8229  013750  22DA               	addwfc	fsr2h,f,c
  8230  013752  0E00               	movlw	0
  8231  013754  6EDF               	movwf	indf2,c
  8232                           
  8233                           ; BSR set to: 0
  8234                           ;Button.c: 83: pButton->mFunction(Pin);
  8235  013756  0100               	movlb	0	; () banked
  8236  013758  EE20 F004          	lfsr	2,4
  8237  01375C  517B               	movf	Button_Poll@pButton& (0+255),w,b
  8238  01375E  26D9               	addwf	fsr2l,f,c
  8239  013760  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8240  013762  22DA               	addwfc	fsr2h,f,c
  8241  013764  D801               	call	u11228
  8242  013766  0012               	return	
  8243  013768                     u11228:
  8244  013768  0005               	push	
  8245  01376A  6EFA               	movwf	pclath,c
  8246  01376C  50DE               	movf	postinc2,w,c
  8247  01376E  6EFD               	movwf	tosl,c
  8248  013770  50DE               	movf	postinc2,w,c
  8249  013772  6EFE               	movwf	tosh,c
  8250  013774  50DE               	movf	postinc2,w,c
  8251  013776  6EFF               	movwf	tosu,c
  8252  013778  50FA               	movf	pclath,w,c
  8253  01377A  0100               	movlb	0	; () banked
  8254  01377C  5183               	movf	Button_Poll@Pin& (0+255),w,b
  8255  01377E  0012               	return		;indir
  8256  013780                     __end_of_Button_Poll:
  8257                           	opt stack 0
  8258                           tosu	equ	0xFFF
  8259                           tosh	equ	0xFFE
  8260                           tosl	equ	0xFFD
  8261                           pclath	equ	0xFFA
  8262                           tblptru	equ	0xFF8
  8263                           tblptrh	equ	0xFF7
  8264                           tblptrl	equ	0xFF6
  8265                           tablat	equ	0xFF5
  8266                           postinc0	equ	0xFEE
  8267                           wreg	equ	0xFE8
  8268                           indf1	equ	0xFE7
  8269                           postdec1	equ	0xFE5
  8270                           fsr1h	equ	0xFE2
  8271                           fsr1l	equ	0xFE1
  8272                           indf2	equ	0xFDF
  8273                           postinc2	equ	0xFDE
  8274                           postdec2	equ	0xFDD
  8275                           fsr2h	equ	0xFDA
  8276                           fsr2l	equ	0xFD9
  8277                           status	equ	0xFD8
  8278                           
  8279 ;; *************** function _MXK_DIPSwitch *****************
  8280 ;; Defined at:
  8281 ;;		line 24 in file "Library/MXK.c"
  8282 ;; Parameters:    Size  Location     Type
  8283 ;;		None
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;		None
  8286 ;; Return value:  Size  Location     Type
  8287 ;;                  1    wreg      unsigned char 
  8288 ;; Registers used:
  8289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8290 ;; Tracked objects:
  8291 ;;		On entry : 0/0
  8292 ;;		On exit  : 0/0
  8293 ;;		Unchanged: 0/0
  8294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8298 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8299 ;;Total ram usage:        0 bytes
  8300 ;; Hardware stack levels used:    1
  8301 ;; Hardware stack levels required when called:    8
  8302 ;; This function calls:
  8303 ;;		_Port_GetQuad
  8304 ;; This function is called by:
  8305 ;;		_FunctInitButton
  8306 ;;		_Button_Poll
  8307 ;;		_inputVar
  8308 ;; This function uses a non-reentrant model
  8309 ;;
  8310                           
  8311                           	psect	text22
  8312  016CEE                     __ptext22:
  8313                           	opt stack 0
  8314  016CEE                     _MXK_DIPSwitch:
  8315                           	opt stack 21
  8316                           
  8317                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  8318                           
  8319                           ;incstack = 0
  8320  016CEE  0E94               	movlw	low _PortD
  8321  016CF0  0100               	movlb	0	; () banked
  8322  016CF2  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  8323  016CF4  0E01               	movlw	high _PortD
  8324  016CF6  0100               	movlb	0	; () banked
  8325  016CF8  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  8326  016CFA  0E00               	movlw	0
  8327  016CFC  0100               	movlb	0	; () banked
  8328  016CFE  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  8329  016D00  ECD5  F0B1         	call	_Port_GetQuad
  8330  016D04  0012               	return	
  8331  016D06                     __end_of_MXK_DIPSwitch:
  8332                           	opt stack 0
  8333                           tosu	equ	0xFFF
  8334                           tosh	equ	0xFFE
  8335                           tosl	equ	0xFFD
  8336                           pclath	equ	0xFFA
  8337                           tblptru	equ	0xFF8
  8338                           tblptrh	equ	0xFF7
  8339                           tblptrl	equ	0xFF6
  8340                           tablat	equ	0xFF5
  8341                           postinc0	equ	0xFEE
  8342                           wreg	equ	0xFE8
  8343                           indf1	equ	0xFE7
  8344                           postdec1	equ	0xFE5
  8345                           fsr1h	equ	0xFE2
  8346                           fsr1l	equ	0xFE1
  8347                           indf2	equ	0xFDF
  8348                           postinc2	equ	0xFDE
  8349                           postdec2	equ	0xFDD
  8350                           fsr2h	equ	0xFDA
  8351                           fsr2l	equ	0xFD9
  8352                           status	equ	0xFD8
  8353                           
  8354 ;; *************** function _HMI_DIPSwitch *****************
  8355 ;; Defined at:
  8356 ;;		line 47 in file "HMI.c"
  8357 ;; Parameters:    Size  Location     Type
  8358 ;;		None
  8359 ;; Auto vars:     Size  Location     Type
  8360 ;;		None
  8361 ;; Return value:  Size  Location     Type
  8362 ;;                  1    wreg      unsigned char 
  8363 ;; Registers used:
  8364 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8365 ;; Tracked objects:
  8366 ;;		On entry : 0/0
  8367 ;;		On exit  : 0/0
  8368 ;;		Unchanged: 0/0
  8369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8374 ;;Total ram usage:        0 bytes
  8375 ;; Hardware stack levels used:    1
  8376 ;; Hardware stack levels required when called:    8
  8377 ;; This function calls:
  8378 ;;		_Port_GetQuad
  8379 ;; This function is called by:
  8380 ;;		_HMI_Init
  8381 ;;		_Button_Poll
  8382 ;;		_inputVar
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           	psect	text23
  8387  016D06                     __ptext23:
  8388                           	opt stack 0
  8389  016D06                     _HMI_DIPSwitch:
  8390                           	opt stack 19
  8391                           
  8392                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  8393                           
  8394                           ;incstack = 0
  8395  016D06  0E8A               	movlw	low _PortE
  8396  016D08  0100               	movlb	0	; () banked
  8397  016D0A  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
  8398  016D0C  0E01               	movlw	high _PortE
  8399  016D0E  0100               	movlb	0	; () banked
  8400  016D10  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  8401  016D12  0E00               	movlw	0
  8402  016D14  0100               	movlb	0	; () banked
  8403  016D16  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
  8404  016D18  ECD5  F0B1         	call	_Port_GetQuad	;wreg free
  8405  016D1C  0012               	return	
  8406  016D1E                     __end_of_HMI_DIPSwitch:
  8407                           	opt stack 0
  8408                           tosu	equ	0xFFF
  8409                           tosh	equ	0xFFE
  8410                           tosl	equ	0xFFD
  8411                           pclath	equ	0xFFA
  8412                           tblptru	equ	0xFF8
  8413                           tblptrh	equ	0xFF7
  8414                           tblptrl	equ	0xFF6
  8415                           tablat	equ	0xFF5
  8416                           postinc0	equ	0xFEE
  8417                           wreg	equ	0xFE8
  8418                           indf1	equ	0xFE7
  8419                           postdec1	equ	0xFE5
  8420                           fsr1h	equ	0xFE2
  8421                           fsr1l	equ	0xFE1
  8422                           indf2	equ	0xFDF
  8423                           postinc2	equ	0xFDE
  8424                           postdec2	equ	0xFDD
  8425                           fsr2h	equ	0xFDA
  8426                           fsr2l	equ	0xFD9
  8427                           status	equ	0xFD8
  8428                           
  8429 ;; *************** function _HMI_DownSwitch *****************
  8430 ;; Defined at:
  8431 ;;		line 42 in file "HMI.c"
  8432 ;; Parameters:    Size  Location     Type
  8433 ;;		None
  8434 ;; Auto vars:     Size  Location     Type
  8435 ;;		None
  8436 ;; Return value:  Size  Location     Type
  8437 ;;                  1    wreg      unsigned char 
  8438 ;; Registers used:
  8439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8440 ;; Tracked objects:
  8441 ;;		On entry : 0/0
  8442 ;;		On exit  : 0/0
  8443 ;;		Unchanged: 0/0
  8444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8449 ;;Total ram usage:        0 bytes
  8450 ;; Hardware stack levels used:    1
  8451 ;; Hardware stack levels required when called:    8
  8452 ;; This function calls:
  8453 ;;		_Port_GetPin
  8454 ;; This function is called by:
  8455 ;;		_HMI_Init
  8456 ;;		_Button_Poll
  8457 ;;		_inputVar
  8458 ;; This function uses a non-reentrant model
  8459 ;;
  8460                           
  8461                           	psect	text24
  8462  016D1E                     __ptext24:
  8463                           	opt stack 0
  8464  016D1E                     _HMI_DownSwitch:
  8465                           	opt stack 19
  8466                           
  8467                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  8468                           
  8469                           ;incstack = 0
  8470  016D1E  0E8A               	movlw	low _PortE
  8471  016D20  0100               	movlb	0	; () banked
  8472  016D22  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  8473  016D24  0E01               	movlw	high _PortE
  8474  016D26  0100               	movlb	0	; () banked
  8475  016D28  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  8476  016D2A  0E06               	movlw	6
  8477  016D2C  0100               	movlb	0	; () banked
  8478  016D2E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  8479  016D30  EC8A  F0B2         	call	_Port_GetPin	;wreg free
  8480  016D34  0012               	return	
  8481  016D36                     __end_of_HMI_DownSwitch:
  8482                           	opt stack 0
  8483                           tosu	equ	0xFFF
  8484                           tosh	equ	0xFFE
  8485                           tosl	equ	0xFFD
  8486                           pclath	equ	0xFFA
  8487                           tblptru	equ	0xFF8
  8488                           tblptrh	equ	0xFF7
  8489                           tblptrl	equ	0xFF6
  8490                           tablat	equ	0xFF5
  8491                           postinc0	equ	0xFEE
  8492                           wreg	equ	0xFE8
  8493                           indf1	equ	0xFE7
  8494                           postdec1	equ	0xFE5
  8495                           fsr1h	equ	0xFE2
  8496                           fsr1l	equ	0xFE1
  8497                           indf2	equ	0xFDF
  8498                           postinc2	equ	0xFDE
  8499                           postdec2	equ	0xFDD
  8500                           fsr2h	equ	0xFDA
  8501                           fsr2l	equ	0xFD9
  8502                           status	equ	0xFD8
  8503                           
  8504 ;; *************** function _HMI_UpSwitch *****************
  8505 ;; Defined at:
  8506 ;;		line 37 in file "HMI.c"
  8507 ;; Parameters:    Size  Location     Type
  8508 ;;		None
  8509 ;; Auto vars:     Size  Location     Type
  8510 ;;		None
  8511 ;; Return value:  Size  Location     Type
  8512 ;;                  1    wreg      unsigned char 
  8513 ;; Registers used:
  8514 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8515 ;; Tracked objects:
  8516 ;;		On entry : 0/0
  8517 ;;		On exit  : 0/0
  8518 ;;		Unchanged: 0/0
  8519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8524 ;;Total ram usage:        0 bytes
  8525 ;; Hardware stack levels used:    1
  8526 ;; Hardware stack levels required when called:    8
  8527 ;; This function calls:
  8528 ;;		_Port_GetPin
  8529 ;; This function is called by:
  8530 ;;		_HMI_Init
  8531 ;;		_Button_Poll
  8532 ;;		_inputVar
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           	psect	text25
  8537  016D36                     __ptext25:
  8538                           	opt stack 0
  8539  016D36                     _HMI_UpSwitch:
  8540                           	opt stack 21
  8541                           
  8542                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  8543                           
  8544                           ;incstack = 0
  8545  016D36  0E8A               	movlw	low _PortE
  8546  016D38  0100               	movlb	0	; () banked
  8547  016D3A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  8548  016D3C  0E01               	movlw	high _PortE
  8549  016D3E  0100               	movlb	0	; () banked
  8550  016D40  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  8551  016D42  0E07               	movlw	7
  8552  016D44  0100               	movlb	0	; () banked
  8553  016D46  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  8554  016D48  EC8A  F0B2         	call	_Port_GetPin	;wreg free
  8555  016D4C  0012               	return	
  8556  016D4E                     __end_of_HMI_UpSwitch:
  8557                           	opt stack 0
  8558                           tosu	equ	0xFFF
  8559                           tosh	equ	0xFFE
  8560                           tosl	equ	0xFFD
  8561                           pclath	equ	0xFFA
  8562                           tblptru	equ	0xFF8
  8563                           tblptrh	equ	0xFF7
  8564                           tblptrl	equ	0xFF6
  8565                           tablat	equ	0xFF5
  8566                           postinc0	equ	0xFEE
  8567                           wreg	equ	0xFE8
  8568                           indf1	equ	0xFE7
  8569                           postdec1	equ	0xFE5
  8570                           fsr1h	equ	0xFE2
  8571                           fsr1l	equ	0xFE1
  8572                           indf2	equ	0xFDF
  8573                           postinc2	equ	0xFDE
  8574                           postdec2	equ	0xFDD
  8575                           fsr2h	equ	0xFDA
  8576                           fsr2l	equ	0xFD9
  8577                           status	equ	0xFD8
  8578                           
  8579 ;; *************** function _HMI_RightSwitch *****************
  8580 ;; Defined at:
  8581 ;;		line 32 in file "HMI.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;                  1    wreg      unsigned char 
  8588 ;; Registers used:
  8589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8598 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8599 ;;Total ram usage:        0 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    8
  8602 ;; This function calls:
  8603 ;;		_Port_GetPin
  8604 ;; This function is called by:
  8605 ;;		_HMI_Init
  8606 ;;		_Button_Poll
  8607 ;;		_inputVar
  8608 ;; This function uses a non-reentrant model
  8609 ;;
  8610                           
  8611                           	psect	text26
  8612  016D4E                     __ptext26:
  8613                           	opt stack 0
  8614  016D4E                     _HMI_RightSwitch:
  8615                           	opt stack 21
  8616                           
  8617                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  8618                           
  8619                           ;incstack = 0
  8620  016D4E  0E8A               	movlw	low _PortE
  8621  016D50  0100               	movlb	0	; () banked
  8622  016D52  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  8623  016D54  0E01               	movlw	high _PortE
  8624  016D56  0100               	movlb	0	; () banked
  8625  016D58  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  8626  016D5A  0E04               	movlw	4
  8627  016D5C  0100               	movlb	0	; () banked
  8628  016D5E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  8629  016D60  EC8A  F0B2         	call	_Port_GetPin	;wreg free
  8630  016D64  0012               	return	
  8631  016D66                     __end_of_HMI_RightSwitch:
  8632                           	opt stack 0
  8633                           tosu	equ	0xFFF
  8634                           tosh	equ	0xFFE
  8635                           tosl	equ	0xFFD
  8636                           pclath	equ	0xFFA
  8637                           tblptru	equ	0xFF8
  8638                           tblptrh	equ	0xFF7
  8639                           tblptrl	equ	0xFF6
  8640                           tablat	equ	0xFF5
  8641                           postinc0	equ	0xFEE
  8642                           wreg	equ	0xFE8
  8643                           indf1	equ	0xFE7
  8644                           postdec1	equ	0xFE5
  8645                           fsr1h	equ	0xFE2
  8646                           fsr1l	equ	0xFE1
  8647                           indf2	equ	0xFDF
  8648                           postinc2	equ	0xFDE
  8649                           postdec2	equ	0xFDD
  8650                           fsr2h	equ	0xFDA
  8651                           fsr2l	equ	0xFD9
  8652                           status	equ	0xFD8
  8653                           
  8654 ;; *************** function _HMI_LeftSwitch *****************
  8655 ;; Defined at:
  8656 ;;		line 27 in file "HMI.c"
  8657 ;; Parameters:    Size  Location     Type
  8658 ;;		None
  8659 ;; Auto vars:     Size  Location     Type
  8660 ;;		None
  8661 ;; Return value:  Size  Location     Type
  8662 ;;                  1    wreg      unsigned char 
  8663 ;; Registers used:
  8664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8665 ;; Tracked objects:
  8666 ;;		On entry : 0/0
  8667 ;;		On exit  : 0/0
  8668 ;;		Unchanged: 0/0
  8669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8674 ;;Total ram usage:        0 bytes
  8675 ;; Hardware stack levels used:    1
  8676 ;; Hardware stack levels required when called:    8
  8677 ;; This function calls:
  8678 ;;		_Port_GetPin
  8679 ;; This function is called by:
  8680 ;;		_HMI_Init
  8681 ;;		_Button_Poll
  8682 ;;		_inputVar
  8683 ;; This function uses a non-reentrant model
  8684 ;;
  8685                           
  8686                           	psect	text27
  8687  016D66                     __ptext27:
  8688                           	opt stack 0
  8689  016D66                     _HMI_LeftSwitch:
  8690                           	opt stack 19
  8691                           
  8692                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  8693                           
  8694                           ;incstack = 0
  8695  016D66  0E8A               	movlw	low _PortE
  8696  016D68  0100               	movlb	0	; () banked
  8697  016D6A  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  8698  016D6C  0E01               	movlw	high _PortE
  8699  016D6E  0100               	movlb	0	; () banked
  8700  016D70  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  8701  016D72  0E05               	movlw	5
  8702  016D74  0100               	movlb	0	; () banked
  8703  016D76  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  8704  016D78  EC8A  F0B2         	call	_Port_GetPin	;wreg free
  8705  016D7C  0012               	return	
  8706  016D7E                     __end_of_HMI_LeftSwitch:
  8707                           	opt stack 0
  8708                           tosu	equ	0xFFF
  8709                           tosh	equ	0xFFE
  8710                           tosl	equ	0xFFD
  8711                           pclath	equ	0xFFA
  8712                           tblptru	equ	0xFF8
  8713                           tblptrh	equ	0xFF7
  8714                           tblptrl	equ	0xFF6
  8715                           tablat	equ	0xFF5
  8716                           postinc0	equ	0xFEE
  8717                           wreg	equ	0xFE8
  8718                           indf1	equ	0xFE7
  8719                           postdec1	equ	0xFE5
  8720                           fsr1h	equ	0xFE2
  8721                           fsr1l	equ	0xFE1
  8722                           indf2	equ	0xFDF
  8723                           postinc2	equ	0xFDE
  8724                           postdec2	equ	0xFDD
  8725                           fsr2h	equ	0xFDA
  8726                           fsr2l	equ	0xFD9
  8727                           status	equ	0xFD8
  8728                           
  8729 ;; *************** function _MXK_TestButton *****************
  8730 ;; Defined at:
  8731 ;;		line 14 in file "Library/MXK.c"
  8732 ;; Parameters:    Size  Location     Type
  8733 ;;		None
  8734 ;; Auto vars:     Size  Location     Type
  8735 ;;		None
  8736 ;; Return value:  Size  Location     Type
  8737 ;;                  1    wreg      unsigned char 
  8738 ;; Registers used:
  8739 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8740 ;; Tracked objects:
  8741 ;;		On entry : 0/0
  8742 ;;		On exit  : 0/0
  8743 ;;		Unchanged: 0/0
  8744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8746 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8748 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8749 ;;Total ram usage:        0 bytes
  8750 ;; Hardware stack levels used:    1
  8751 ;; Hardware stack levels required when called:    8
  8752 ;; This function calls:
  8753 ;;		_Port_GetPin
  8754 ;; This function is called by:
  8755 ;;		_FunctInitButton
  8756 ;;		_Button_Poll
  8757 ;;		_inputVar
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           	psect	text28
  8762  016D7E                     __ptext28:
  8763                           	opt stack 0
  8764  016D7E                     _MXK_TestButton:
  8765                           	opt stack 21
  8766                           
  8767                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  8768                           
  8769                           ;incstack = 0
  8770  016D7E  0E9E               	movlw	low _PortB
  8771  016D80  0100               	movlb	0	; () banked
  8772  016D82  6F60               	movwf	Port_GetPin@pInput& (0+255),b
  8773  016D84  0E01               	movlw	high _PortB
  8774  016D86  0100               	movlb	0	; () banked
  8775  016D88  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  8776  016D8A  0E04               	movlw	4
  8777  016D8C  0100               	movlb	0	; () banked
  8778  016D8E  6F62               	movwf	Port_GetPin@pPin& (0+255),b
  8779  016D90  EC8A  F0B2         	call	_Port_GetPin	;wreg free
  8780  016D94  0012               	return	
  8781  016D96                     __end_of_MXK_TestButton:
  8782                           	opt stack 0
  8783                           tosu	equ	0xFFF
  8784                           tosh	equ	0xFFE
  8785                           tosl	equ	0xFFD
  8786                           pclath	equ	0xFFA
  8787                           tblptru	equ	0xFF8
  8788                           tblptrh	equ	0xFF7
  8789                           tblptrl	equ	0xFF6
  8790                           tablat	equ	0xFF5
  8791                           postinc0	equ	0xFEE
  8792                           wreg	equ	0xFE8
  8793                           indf1	equ	0xFE7
  8794                           postdec1	equ	0xFE5
  8795                           fsr1h	equ	0xFE2
  8796                           fsr1l	equ	0xFE1
  8797                           indf2	equ	0xFDF
  8798                           postinc2	equ	0xFDE
  8799                           postdec2	equ	0xFDD
  8800                           fsr2h	equ	0xFDA
  8801                           fsr2l	equ	0xFD9
  8802                           status	equ	0xFD8
  8803                           
  8804 ;; *************** function _Port_GetQuad *****************
  8805 ;; Defined at:
  8806 ;;		line 498 in file "Library/Port.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  8809 ;;		 -> PortE(10), PortD(10), 
  8810 ;;  pQuad           1    2[BANK0 ] enum E6776
  8811 ;; Auto vars:     Size  Location     Type
  8812 ;;  Output          1    5[BANK0 ] unsigned char 
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  1    wreg      unsigned char 
  8815 ;; Registers used:
  8816 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8822 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;Total ram usage:        6 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:    7
  8829 ;; This function calls:
  8830 ;;		Nothing
  8831 ;; This function is called by:
  8832 ;;		_HMI_DIPSwitch
  8833 ;;		_MXK_DIPSwitch
  8834 ;;		_Port_ToggleQuad
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           	psect	text29
  8839  0163AA                     __ptext29:
  8840                           	opt stack 0
  8841  0163AA                     _Port_GetQuad:
  8842                           	opt stack 21
  8843                           
  8844                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  8845                           
  8846                           ;incstack = 0
  8847  0163AA  0100               	movlb	0	; () banked
  8848  0163AC  EE20 F006          	lfsr	2,6
  8849  0163B0  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
  8850  0163B2  26D9               	addwf	fsr2l,f,c
  8851  0163B4  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  8852  0163B6  22DA               	addwfc	fsr2h,f,c
  8853  0163B8  CFDE F063          	movff	postinc2,??_Port_GetQuad
  8854  0163BC  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
  8855  0163C0  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
  8856  0163C4  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  8857  0163C8  50DF               	movf	indf2,w,c
  8858  0163CA  0100               	movlb	0	; () banked
  8859  0163CC  6F65               	movwf	Port_GetQuad@Output& (0+255),b
  8860                           
  8861                           ; BSR set to: 0
  8862                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  8863  0163CE  0100               	movlb	0	; () banked
  8864  0163D0  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
  8865  0163D2  0D04               	mullw	4
  8866  0163D4  28F3               	incf	prodl,w,c
  8867  0163D6  0100               	movlb	0	; () banked
  8868  0163D8  6F63               	movwf	??_Port_GetQuad& (0+255),b
  8869  0163DA  D003               	goto	u9650
  8870  0163DC                     u9655:
  8871  0163DC  0100               	movlb	0	; () banked
  8872  0163DE  90D8               	bcf	status,0,c
  8873  0163E0  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
  8874  0163E2                     u9650:
  8875  0163E2  0100               	movlb	0	; () banked
  8876  0163E4  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
  8877  0163E6  D7FA               	goto	u9655
  8878                           
  8879                           ;Port.c: 502: Output &= 0xF;
  8880  0163E8  0E0F               	movlw	15
  8881  0163EA  0100               	movlb	0	; () banked
  8882  0163EC  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
  8883                           
  8884                           ; BSR set to: 0
  8885                           ;Port.c: 503: return Output;
  8886  0163EE  0100               	movlb	0	; () banked
  8887  0163F0  5165               	movf	Port_GetQuad@Output& (0+255),w,b
  8888  0163F2  0012               	return	
  8889  0163F4                     __end_of_Port_GetQuad:
  8890                           	opt stack 0
  8891                           tosu	equ	0xFFF
  8892                           tosh	equ	0xFFE
  8893                           tosl	equ	0xFFD
  8894                           pclath	equ	0xFFA
  8895                           tblptru	equ	0xFF8
  8896                           tblptrh	equ	0xFF7
  8897                           tblptrl	equ	0xFF6
  8898                           tablat	equ	0xFF5
  8899                           prodl	equ	0xFF3
  8900                           postinc0	equ	0xFEE
  8901                           wreg	equ	0xFE8
  8902                           indf1	equ	0xFE7
  8903                           postdec1	equ	0xFE5
  8904                           fsr1h	equ	0xFE2
  8905                           fsr1l	equ	0xFE1
  8906                           indf2	equ	0xFDF
  8907                           postinc2	equ	0xFDE
  8908                           postdec2	equ	0xFDD
  8909                           fsr2h	equ	0xFDA
  8910                           fsr2l	equ	0xFD9
  8911                           status	equ	0xFD8
  8912                           
  8913 ;; *************** function _Event_DIPSwitch *****************
  8914 ;; Defined at:
  8915 ;;		line 22 in file "Events.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  pState          1    wreg     unsigned char 
  8918 ;; Auto vars:     Size  Location     Type
  8919 ;;  pState          1   25[BANK0 ] unsigned char 
  8920 ;;  Bar             1   26[BANK0 ] unsigned char 
  8921 ;; Return value:  Size  Location     Type
  8922 ;;                  1    wreg      void 
  8923 ;; Registers used:
  8924 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8925 ;; Tracked objects:
  8926 ;;		On entry : 0/0
  8927 ;;		On exit  : 0/0
  8928 ;;		Unchanged: 0/0
  8929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8931 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8933 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8934 ;;Total ram usage:        2 bytes
  8935 ;; Hardware stack levels used:    1
  8936 ;; Hardware stack levels required when called:   13
  8937 ;; This function calls:
  8938 ;;		_HMI_GetBar
  8939 ;;		_HMI_SetBar
  8940 ;;		_LED_Toggle
  8941 ;; This function is called by:
  8942 ;;		_FunctInitButton
  8943 ;;		_Button_Poll
  8944 ;; This function uses a non-reentrant model
  8945 ;;
  8946                           
  8947                           	psect	text30
  8948  016A20                     __ptext30:
  8949                           	opt stack 0
  8950  016A20                     _Event_DIPSwitch:
  8951                           	opt stack 14
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;incstack = 0
  8955                           ;Event_DIPSwitch@pState stored from wreg
  8956  016A20  0100               	movlb	0	; () banked
  8957  016A22  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
  8958                           
  8959                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  8960  016A24  EC3B  F0B7         	call	_HMI_GetBar	;wreg free
  8961  016A28  0100               	movlb	0	; () banked
  8962  016A2A  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;Events.c: 25: Bar &= 0x0F;
  8966  016A2C  0E0F               	movlw	15
  8967  016A2E  0100               	movlb	0	; () banked
  8968  016A30  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  8969                           
  8970                           ; BSR set to: 0
  8971                           ;Events.c: 26: pState <<= 4;
  8972  016A32  0100               	movlb	0	; () banked
  8973  016A34  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  8974  016A36  0EF0               	movlw	240
  8975  016A38  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  8979  016A3A  0100               	movlb	0	; () banked
  8980  016A3C  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
  8981  016A3E  0100               	movlb	0	; () banked
  8982  016A40  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  8983  016A42  EC1F  F0B7         	call	_HMI_SetBar
  8984                           
  8985                           ;Events.c: 32: LED_Toggle(eLED1);
  8986  016A46  0E00               	movlw	0
  8987  016A48  EC42  F0B2         	call	_LED_Toggle
  8988  016A4C  0012               	return		;funcret
  8989  016A4E                     __end_of_Event_DIPSwitch:
  8990                           	opt stack 0
  8991                           tosu	equ	0xFFF
  8992                           tosh	equ	0xFFE
  8993                           tosl	equ	0xFFD
  8994                           pclath	equ	0xFFA
  8995                           tblptru	equ	0xFF8
  8996                           tblptrh	equ	0xFF7
  8997                           tblptrl	equ	0xFF6
  8998                           tablat	equ	0xFF5
  8999                           prodl	equ	0xFF3
  9000                           postinc0	equ	0xFEE
  9001                           wreg	equ	0xFE8
  9002                           indf1	equ	0xFE7
  9003                           postdec1	equ	0xFE5
  9004                           fsr1h	equ	0xFE2
  9005                           fsr1l	equ	0xFE1
  9006                           indf2	equ	0xFDF
  9007                           postinc2	equ	0xFDE
  9008                           postdec2	equ	0xFDD
  9009                           fsr2h	equ	0xFDA
  9010                           fsr2l	equ	0xFD9
  9011                           status	equ	0xFD8
  9012                           
  9013 ;; *************** function _Event_NULL *****************
  9014 ;; Defined at:
  9015 ;;		line 9 in file "Events.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;  pState          1    wreg     unsigned char 
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;  pState          1    0[COMRAM] unsigned char 
  9020 ;; Return value:  Size  Location     Type
  9021 ;;                  1    wreg      void 
  9022 ;; Registers used:
  9023 ;;		wreg
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;Total ram usage:        0 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    7
  9036 ;; This function calls:
  9037 ;;		Nothing
  9038 ;; This function is called by:
  9039 ;;		_HMI_Init
  9040 ;;		_Button_Poll
  9041 ;; This function uses a non-reentrant model
  9042 ;;
  9043                           
  9044                           	psect	text31
  9045  001404                     __ptext31:
  9046                           	opt stack 0
  9047  001404                     _Event_NULL:
  9048                           	opt stack 20
  9049                           
  9050                           ;incstack = 0
  9051  001404  0012               	return		;funcret
  9052  001406                     __end_of_Event_NULL:
  9053                           	opt stack 0
  9054                           tosu	equ	0xFFF
  9055                           tosh	equ	0xFFE
  9056                           tosl	equ	0xFFD
  9057                           pclath	equ	0xFFA
  9058                           tblptru	equ	0xFF8
  9059                           tblptrh	equ	0xFF7
  9060                           tblptrl	equ	0xFF6
  9061                           tablat	equ	0xFF5
  9062                           prodl	equ	0xFF3
  9063                           postinc0	equ	0xFEE
  9064                           wreg	equ	0xFE8
  9065                           indf1	equ	0xFE7
  9066                           postdec1	equ	0xFE5
  9067                           fsr1h	equ	0xFE2
  9068                           fsr1l	equ	0xFE1
  9069                           indf2	equ	0xFDF
  9070                           postinc2	equ	0xFDE
  9071                           postdec2	equ	0xFDD
  9072                           fsr2h	equ	0xFDA
  9073                           fsr2l	equ	0xFD9
  9074                           status	equ	0xFD8
  9075                           
  9076 ;; *************** function _Event_TestButton *****************
  9077 ;; Defined at:
  9078 ;;		line 52 in file "Events.c"
  9079 ;; Parameters:    Size  Location     Type
  9080 ;;  pState          1    wreg     unsigned char 
  9081 ;; Auto vars:     Size  Location     Type
  9082 ;;  pState          1   25[BANK0 ] unsigned char 
  9083 ;; Return value:  Size  Location     Type
  9084 ;;                  1    wreg      void 
  9085 ;; Registers used:
  9086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9087 ;; Tracked objects:
  9088 ;;		On entry : 0/0
  9089 ;;		On exit  : 0/0
  9090 ;;		Unchanged: 0/0
  9091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9095 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9096 ;;Total ram usage:        1 bytes
  9097 ;; Hardware stack levels used:    1
  9098 ;; Hardware stack levels required when called:   13
  9099 ;; This function calls:
  9100 ;;		_HMI_SetButton
  9101 ;;		_HMI_SetNumber
  9102 ;;		_LED_Toggle
  9103 ;; This function is called by:
  9104 ;;		_FunctInitButton
  9105 ;;		_Button_Poll
  9106 ;; This function uses a non-reentrant model
  9107 ;;
  9108                           
  9109                           	psect	text32
  9110  0167E0                     __ptext32:
  9111                           	opt stack 0
  9112  0167E0                     _Event_TestButton:
  9113                           	opt stack 14
  9114                           
  9115                           ;incstack = 0
  9116                           ;Event_TestButton@pState stored from wreg
  9117  0167E0  0100               	movlb	0	; () banked
  9118  0167E2  6F79               	movwf	Event_TestButton@pState& (0+255),b
  9119                           
  9120                           ;Events.c: 56: static UINT8 j = 0;
  9121                           ;Events.c: 60: if (pState == 0)
  9122  0167E4  0100               	movlb	0	; () banked
  9123  0167E6  5179               	movf	Event_TestButton@pState& (0+255),w,b
  9124  0167E8  0100               	movlb	0	; () banked
  9125  0167EA  A4D8               	btfss	status,2,c
  9126  0167EC  D012               	goto	l1873
  9127                           
  9128                           ; BSR set to: 0
  9129                           ;Events.c: 61: {
  9130                           ;Events.c: 62: j++;
  9131  0167EE  0100               	movlb	0	; () banked
  9132  0167F0  2BF7               	incf	Event_TestButton@j& (0+255),f,b
  9133                           
  9134                           ; BSR set to: 0
  9135                           ;Events.c: 63: val += j;
  9136  0167F2  0100               	movlb	0	; () banked
  9137  0167F4  51F7               	movf	Event_TestButton@j& (0+255),w,b
  9138  0167F6  2631               	addwf	_val,f,c
  9139  0167F8  0E00               	movlw	0
  9140  0167FA  2232               	addwfc	_val+1,f,c
  9141                           
  9142                           ; BSR set to: 0
  9143                           ;Events.c: 64: HMI_SetNumber( val );
  9144  0167FC  C031  F076         	movff	_val,HMI_SetNumber@pInput
  9145  016800  C032  F077         	movff	_val+1,HMI_SetNumber@pInput+1
  9146  016804  EC3E  F0B5         	call	_HMI_SetNumber	;wreg free
  9147                           
  9148                           ;Events.c: 67: HMI_SetButton( j & 3 );
  9149  016808  0100               	movlb	0	; () banked
  9150  01680A  51F7               	movf	Event_TestButton@j& (0+255),w,b
  9151  01680C  0B03               	andlw	3
  9152  01680E  EC43  F0AA         	call	_HMI_SetButton
  9153  016812                     l1873:
  9154                           
  9155                           ;Events.c: 68: }
  9156                           ;Events.c: 72: LED_Toggle(eLED1);
  9157  016812  0E00               	movlw	0
  9158  016814  EC42  F0B2         	call	_LED_Toggle
  9159  016818  0012               	return		;funcret
  9160  01681A                     __end_of_Event_TestButton:
  9161                           	opt stack 0
  9162                           tosu	equ	0xFFF
  9163                           tosh	equ	0xFFE
  9164                           tosl	equ	0xFFD
  9165                           pclath	equ	0xFFA
  9166                           tblptru	equ	0xFF8
  9167                           tblptrh	equ	0xFF7
  9168                           tblptrl	equ	0xFF6
  9169                           tablat	equ	0xFF5
  9170                           prodl	equ	0xFF3
  9171                           postinc0	equ	0xFEE
  9172                           wreg	equ	0xFE8
  9173                           indf1	equ	0xFE7
  9174                           postdec1	equ	0xFE5
  9175                           fsr1h	equ	0xFE2
  9176                           fsr1l	equ	0xFE1
  9177                           indf2	equ	0xFDF
  9178                           postinc2	equ	0xFDE
  9179                           postdec2	equ	0xFDD
  9180                           fsr2h	equ	0xFDA
  9181                           fsr2l	equ	0xFD9
  9182                           status	equ	0xFD8
  9183                           
  9184 ;; *************** function _HMI_SetNumber *****************
  9185 ;; Defined at:
  9186 ;;		line 221 in file "HMI.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;  pInput          2   22[BANK0 ] int 
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;		None
  9191 ;; Return value:  Size  Location     Type
  9192 ;;                  1    wreg      void 
  9193 ;; Registers used:
  9194 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9200 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;Total ram usage:        2 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    9
  9207 ;; This function calls:
  9208 ;;		_HMI_SetSegments
  9209 ;;		_itos
  9210 ;; This function is called by:
  9211 ;;		_Event_TestButton
  9212 ;;		_main
  9213 ;;		_Event_HMI_UpButton
  9214 ;;		_Event_HMI_DownButton
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text33
  9219  016A7C                     __ptext33:
  9220                           	opt stack 0
  9221  016A7C                     _HMI_SetNumber:
  9222                           	opt stack 17
  9223                           
  9224                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  9225                           
  9226                           ;incstack = 0
  9227  016A7C  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
  9228  016A80  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
  9229  016A84  0E30               	movlw	low _HMIBoard
  9230  016A86  0100               	movlb	0	; () banked
  9231  016A88  6F6E               	movwf	itos@destination& (0+255),b
  9232  016A8A  0E01               	movlw	high _HMIBoard
  9233  016A8C  0100               	movlb	0	; () banked
  9234  016A8E  6F6F               	movwf	(itos@destination+1)& (0+255),b
  9235  016A90  EC64  F0A1         	call	_itos	;wreg free
  9236                           
  9237                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  9238  016A94  0E30               	movlw	low _HMIBoard
  9239  016A96  0100               	movlb	0	; () banked
  9240  016A98  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
  9241  016A9A  0E01               	movlw	high _HMIBoard
  9242  016A9C  0100               	movlb	0	; () banked
  9243  016A9E  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  9244  016AA0  EC51  F0A5         	call	_HMI_SetSegments	;wreg free
  9245  016AA4  0012               	return		;funcret
  9246  016AA6                     __end_of_HMI_SetNumber:
  9247                           	opt stack 0
  9248                           tosu	equ	0xFFF
  9249                           tosh	equ	0xFFE
  9250                           tosl	equ	0xFFD
  9251                           pclath	equ	0xFFA
  9252                           tblptru	equ	0xFF8
  9253                           tblptrh	equ	0xFF7
  9254                           tblptrl	equ	0xFF6
  9255                           tablat	equ	0xFF5
  9256                           prodl	equ	0xFF3
  9257                           postinc0	equ	0xFEE
  9258                           wreg	equ	0xFE8
  9259                           indf1	equ	0xFE7
  9260                           postdec1	equ	0xFE5
  9261                           fsr1h	equ	0xFE2
  9262                           fsr1l	equ	0xFE1
  9263                           indf2	equ	0xFDF
  9264                           postinc2	equ	0xFDE
  9265                           postdec2	equ	0xFDD
  9266                           fsr2h	equ	0xFDA
  9267                           fsr2l	equ	0xFD9
  9268                           status	equ	0xFD8
  9269                           
  9270 ;; *************** function _itos *****************
  9271 ;; Defined at:
  9272 ;;		line 369 in file "Library/Types.c"
  9273 ;; Parameters:    Size  Location     Type
  9274 ;;  input           2   12[BANK0 ] unsigned short 
  9275 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  9276 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9277 ;; Auto vars:     Size  Location     Type
  9278 ;;  Out             2   20[BANK0 ] unsigned short 
  9279 ;;  Length          2   18[BANK0 ] unsigned short 
  9280 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  9281 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9282 ;; Return value:  Size  Location     Type
  9283 ;;                  1    wreg      void 
  9284 ;; Registers used:
  9285 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9286 ;; Tracked objects:
  9287 ;;		On entry : 0/0
  9288 ;;		On exit  : 0/0
  9289 ;;		Unchanged: 0/0
  9290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9291 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9292 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;Total ram usage:       10 bytes
  9296 ;; Hardware stack levels used:    1
  9297 ;; Hardware stack levels required when called:    8
  9298 ;; This function calls:
  9299 ;;		___lwdiv
  9300 ;;		___lwmod
  9301 ;;		_reverse
  9302 ;; This function is called by:
  9303 ;;		_HMI_SetNumber
  9304 ;; This function uses a non-reentrant model
  9305 ;;
  9306                           
  9307                           	psect	text34
  9308  0142C8                     __ptext34:
  9309                           	opt stack 0
  9310  0142C8                     _itos:
  9311                           	opt stack 17
  9312                           
  9313                           ;Types.c: 371: UINT16 Out = input;
  9314                           
  9315                           ;incstack = 0
  9316  0142C8  C06C  F074         	movff	itos@input,itos@Out
  9317  0142CC  C06D  F075         	movff	itos@input+1,itos@Out+1
  9318                           
  9319                           ;Types.c: 372: UINT16 Length = 0;
  9320  0142D0  0E00               	movlw	0
  9321  0142D2  0100               	movlb	0	; () banked
  9322  0142D4  6F73               	movwf	(itos@Length+1)& (0+255),b
  9323  0142D6  0E00               	movlw	0
  9324  0142D8  6F72               	movwf	itos@Length& (0+255),b
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;Types.c: 373: char *Data = destination;
  9328  0142DA  C06E  F070         	movff	itos@destination,itos@Data
  9329  0142DE  C06F  F071         	movff	itos@destination+1,itos@Data+1
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;Types.c: 374: if(Out == 0)
  9333  0142E2  0100               	movlb	0	; () banked
  9334  0142E4  5174               	movf	itos@Out& (0+255),w,b
  9335  0142E6  0100               	movlb	0	; () banked
  9336  0142E8  1175               	iorwf	(itos@Out+1)& (0+255),w,b
  9337  0142EA  A4D8               	btfss	status,2,c
  9338  0142EC  D034               	goto	l929
  9339                           
  9340                           ; BSR set to: 0
  9341                           ;Types.c: 375: {
  9342                           ;Types.c: 376: Data[0] = (UINT16)'0';
  9343  0142EE  C070  FFD9         	movff	itos@Data,fsr2l
  9344  0142F2  C071  FFDA         	movff	itos@Data+1,fsr2h
  9345  0142F6  0E30               	movlw	48
  9346  0142F8  6EDF               	movwf	indf2,c
  9347                           
  9348                           ; BSR set to: 0
  9349                           ;Types.c: 377: Length = 1;
  9350  0142FA  0E00               	movlw	0
  9351  0142FC  0100               	movlb	0	; () banked
  9352  0142FE  6F73               	movwf	(itos@Length+1)& (0+255),b
  9353  014300  0E01               	movlw	1
  9354  014302  6F72               	movwf	itos@Length& (0+255),b
  9355                           
  9356                           ;Types.c: 378: }
  9357  014304  D040               	goto	l928
  9358  014306                     
  9359                           ; BSR set to: 0
  9360                           ;Types.c: 382: {
  9361                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  9362                           
  9363                           ; BSR set to: 0
  9364  014306  C074  F067         	movff	itos@Out,___lwmod@dividend
  9365  01430A  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
  9366  01430E  0E00               	movlw	0
  9367  014310  0100               	movlb	0	; () banked
  9368  014312  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  9369  014314  0E0A               	movlw	10
  9370  014316  6F69               	movwf	___lwmod@divisor& (0+255),b
  9371  014318  EC50  F0B0         	call	___lwmod	;wreg free
  9372  01431C  0100               	movlb	0	; () banked
  9373  01431E  5167               	movf	?___lwmod& (0+255),w,b
  9374  014320  0F30               	addlw	48
  9375  014322  C070  FFD9         	movff	itos@Data,fsr2l
  9376  014326  C071  FFDA         	movff	itos@Data+1,fsr2h
  9377  01432A  6EDF               	movwf	indf2,c
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;Types.c: 384: Out /= 10;
  9381  01432C  C074  F060         	movff	itos@Out,___lwdiv@dividend
  9382  014330  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
  9383  014334  0E00               	movlw	0
  9384  014336  0100               	movlb	0	; () banked
  9385  014338  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9386  01433A  0E0A               	movlw	10
  9387  01433C  6F62               	movwf	___lwdiv@divisor& (0+255),b
  9388  01433E  EC19  F0AD         	call	___lwdiv	;wreg free
  9389  014342  C060  F074         	movff	?___lwdiv,itos@Out
  9390  014346  C061  F075         	movff	?___lwdiv+1,itos@Out+1
  9391                           
  9392                           ;Types.c: 385: Length ++;
  9393  01434A  0100               	movlb	0	; () banked
  9394  01434C  4B72               	infsnz	itos@Length& (0+255),f,b
  9395  01434E  2B73               	incf	(itos@Length+1)& (0+255),f,b
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;Types.c: 386: Data++;
  9399  014350  0100               	movlb	0	; () banked
  9400  014352  4B70               	infsnz	itos@Data& (0+255),f,b
  9401  014354  2B71               	incf	(itos@Data+1)& (0+255),f,b
  9402  014356                     l929:
  9403                           
  9404                           ; BSR set to: 0
  9405                           
  9406                           ; BSR set to: 0
  9407  014356  0100               	movlb	0	; () banked
  9408  014358  5174               	movf	itos@Out& (0+255),w,b
  9409  01435A  0100               	movlb	0	; () banked
  9410  01435C  1175               	iorwf	(itos@Out+1)& (0+255),w,b
  9411  01435E  B4D8               	btfsc	status,2,c
  9412  014360  D008               	goto	u9390
  9413                           
  9414                           ; BSR set to: 0
  9415  014362  0100               	movlb	0	; () banked
  9416  014364  5173               	movf	(itos@Length+1)& (0+255),w,b
  9417  014366  E105               	bnz	l12263
  9418  014368  0E06               	movlw	6
  9419  01436A  0100               	movlb	0	; () banked
  9420  01436C  5D72               	subwf	itos@Length& (0+255),w,b
  9421  01436E  A0D8               	btfss	status,0,c
  9422  014370  D7CA               	goto	l930
  9423  014372                     u9390:
  9424  014372                     l12263:
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;Types.c: 387: }
  9428                           ;Types.c: 388: reverse(destination, Length);
  9429  014372  C06E  F060         	movff	itos@destination,reverse@input
  9430  014376  C06F  F061         	movff	itos@destination+1,reverse@input+1
  9431  01437A  C072  F062         	movff	itos@Length,reverse@length
  9432  01437E  C073  F063         	movff	itos@Length+1,reverse@length+1
  9433  014382  ECB0  F0AE         	call	_reverse	;wreg free
  9434  014386                     l928:
  9435                           
  9436                           ;Types.c: 389: }
  9437                           ;Types.c: 390: destination[Length] = '\0';
  9438  014386  0100               	movlb	0	; () banked
  9439  014388  5172               	movf	itos@Length& (0+255),w,b
  9440  01438A  0100               	movlb	0	; () banked
  9441  01438C  256E               	addwf	itos@destination& (0+255),w,b
  9442  01438E  6ED9               	movwf	fsr2l,c
  9443  014390  0100               	movlb	0	; () banked
  9444  014392  5173               	movf	(itos@Length+1)& (0+255),w,b
  9445  014394  0100               	movlb	0	; () banked
  9446  014396  216F               	addwfc	(itos@destination+1)& (0+255),w,b
  9447  014398  6EDA               	movwf	fsr2h,c
  9448  01439A  0E00               	movlw	0
  9449  01439C  6EDF               	movwf	indf2,c
  9450                           
  9451                           ; BSR set to: 0
  9452  01439E  0012               	return		;funcret
  9453  0143A0                     __end_of_itos:
  9454                           	opt stack 0
  9455                           tosu	equ	0xFFF
  9456                           tosh	equ	0xFFE
  9457                           tosl	equ	0xFFD
  9458                           pclath	equ	0xFFA
  9459                           tblptru	equ	0xFF8
  9460                           tblptrh	equ	0xFF7
  9461                           tblptrl	equ	0xFF6
  9462                           tablat	equ	0xFF5
  9463                           prodl	equ	0xFF3
  9464                           postinc0	equ	0xFEE
  9465                           wreg	equ	0xFE8
  9466                           indf1	equ	0xFE7
  9467                           postdec1	equ	0xFE5
  9468                           fsr1h	equ	0xFE2
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           fsr2h	equ	0xFDA
  9474                           fsr2l	equ	0xFD9
  9475                           status	equ	0xFD8
  9476                           
  9477 ;; *************** function _reverse *****************
  9478 ;; Defined at:
  9479 ;;		line 357 in file "Library/Types.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;  input           2    0[BANK0 ] PTR unsigned char 
  9482 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9483 ;;  length          2    2[BANK0 ] unsigned short 
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  9486 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9487 ;;  tempVar         1    4[BANK0 ] unsigned char 
  9488 ;; Return value:  Size  Location     Type
  9489 ;;                  1    wreg      void 
  9490 ;; Registers used:
  9491 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9492 ;; Tracked objects:
  9493 ;;		On entry : 0/0
  9494 ;;		On exit  : 0/0
  9495 ;;		Unchanged: 0/0
  9496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9497 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9498 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9500 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9501 ;;Total ram usage:        7 bytes
  9502 ;; Hardware stack levels used:    1
  9503 ;; Hardware stack levels required when called:    7
  9504 ;; This function calls:
  9505 ;;		Nothing
  9506 ;; This function is called by:
  9507 ;;		_itos
  9508 ;; This function uses a non-reentrant model
  9509 ;;
  9510                           
  9511                           	psect	text35
  9512  015D60                     __ptext35:
  9513                           	opt stack 0
  9514  015D60                     _reverse:
  9515                           	opt stack 17
  9516                           
  9517                           ;Types.c: 359: char tempVar,
  9518                           ;Types.c: 360: *iterator = input + length;
  9519                           
  9520                           ; BSR set to: 0
  9521                           ;incstack = 0
  9522  015D60  0100               	movlb	0	; () banked
  9523  015D62  5162               	movf	reverse@length& (0+255),w,b
  9524  015D64  0100               	movlb	0	; () banked
  9525  015D66  2560               	addwf	reverse@input& (0+255),w,b
  9526  015D68  0100               	movlb	0	; () banked
  9527  015D6A  6F65               	movwf	reverse@iterator& (0+255),b
  9528  015D6C  0100               	movlb	0	; () banked
  9529  015D6E  5163               	movf	(reverse@length+1)& (0+255),w,b
  9530  015D70  0100               	movlb	0	; () banked
  9531  015D72  2161               	addwfc	(reverse@input+1)& (0+255),w,b
  9532  015D74  0100               	movlb	0	; () banked
  9533  015D76  6F66               	movwf	(reverse@iterator+1)& (0+255),b
  9534                           
  9535                           ;Types.c: 362: while ( --iterator > input )
  9536  015D78  D01A               	goto	l921
  9537  015D7A                     
  9538                           ; BSR set to: 0
  9539                           ;Types.c: 363: {
  9540                           ;Types.c: 364: tempVar = *input;
  9541                           
  9542                           ; BSR set to: 0
  9543  015D7A  C060  FFD9         	movff	reverse@input,fsr2l
  9544  015D7E  C061  FFDA         	movff	reverse@input+1,fsr2h
  9545  015D82  50DF               	movf	indf2,w,c
  9546  015D84  0100               	movlb	0	; () banked
  9547  015D86  6F64               	movwf	reverse@tempVar& (0+255),b
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;Types.c: 365: *input++=*iterator;
  9551  015D88  C065  FFD9         	movff	reverse@iterator,fsr2l
  9552  015D8C  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  9553  015D90  C060  FFE1         	movff	reverse@input,fsr1l
  9554  015D94  C061  FFE2         	movff	reverse@input+1,fsr1h
  9555  015D98  CFDF FFE7          	movff	indf2,indf1
  9556                           
  9557                           ; BSR set to: 0
  9558  015D9C  0100               	movlb	0	; () banked
  9559  015D9E  4B60               	infsnz	reverse@input& (0+255),f,b
  9560  015DA0  2B61               	incf	(reverse@input+1)& (0+255),f,b
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;Types.c: 366: *iterator=tempVar;
  9564  015DA2  C065  FFD9         	movff	reverse@iterator,fsr2l
  9565  015DA6  C066  FFDA         	movff	reverse@iterator+1,fsr2h
  9566  015DAA  C064  FFDF         	movff	reverse@tempVar,indf2
  9567  015DAE                     l921:
  9568                           
  9569                           ; BSR set to: 0
  9570                           
  9571                           ; BSR set to: 0
  9572  015DAE  0100               	movlb	0	; () banked
  9573  015DB0  0765               	decf	reverse@iterator& (0+255),f,b
  9574  015DB2  A0D8               	btfss	status,0,c
  9575  015DB4  0766               	decf	(reverse@iterator+1)& (0+255),f,b
  9576  015DB6  0100               	movlb	0	; () banked
  9577  015DB8  5165               	movf	reverse@iterator& (0+255),w,b
  9578  015DBA  0100               	movlb	0	; () banked
  9579  015DBC  5D60               	subwf	reverse@input& (0+255),w,b
  9580  015DBE  0100               	movlb	0	; () banked
  9581  015DC0  5166               	movf	(reverse@iterator+1)& (0+255),w,b
  9582  015DC2  0100               	movlb	0	; () banked
  9583  015DC4  5961               	subwfb	(reverse@input+1)& (0+255),w,b
  9584  015DC6  B0D8               	btfsc	status,0,c
  9585  015DC8  0012               	return	
  9586  015DCA  D7D7               	goto	l922
  9587  015DCC                     __end_of_reverse:
  9588                           	opt stack 0
  9589                           tosu	equ	0xFFF
  9590                           tosh	equ	0xFFE
  9591                           tosl	equ	0xFFD
  9592                           pclath	equ	0xFFA
  9593                           tblptru	equ	0xFF8
  9594                           tblptrh	equ	0xFF7
  9595                           tblptrl	equ	0xFF6
  9596                           tablat	equ	0xFF5
  9597                           prodl	equ	0xFF3
  9598                           postinc0	equ	0xFEE
  9599                           wreg	equ	0xFE8
  9600                           indf1	equ	0xFE7
  9601                           postdec1	equ	0xFE5
  9602                           fsr1h	equ	0xFE2
  9603                           fsr1l	equ	0xFE1
  9604                           indf2	equ	0xFDF
  9605                           postinc2	equ	0xFDE
  9606                           postdec2	equ	0xFDD
  9607                           fsr2h	equ	0xFDA
  9608                           fsr2l	equ	0xFD9
  9609                           status	equ	0xFD8
  9610                           
  9611 ;; *************** function _HMI_SetSegments *****************
  9612 ;; Defined at:
  9613 ;;		line 226 in file "HMI.c"
  9614 ;; Parameters:    Size  Location     Type
  9615 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  9616 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9617 ;; Auto vars:     Size  Location     Type
  9618 ;;  in              2    4[BANK0 ] unsigned short 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  1    wreg      void 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9628 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;Total ram usage:        5 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    8
  9635 ;; This function calls:
  9636 ;;		_ToSegment
  9637 ;; This function is called by:
  9638 ;;		_HMI_SetNumber
  9639 ;; This function uses a non-reentrant model
  9640 ;;
  9641                           
  9642                           	psect	text36
  9643  014AA2                     __ptext36:
  9644                           	opt stack 0
  9645  014AA2                     _HMI_SetSegments:
  9646                           	opt stack 17
  9647                           
  9648                           ;HMI.c: 228: UINT16 in=0;
  9649                           
  9650                           ; BSR set to: 0
  9651                           ;incstack = 0
  9652  014AA2  0E00               	movlw	0
  9653  014AA4  0100               	movlb	0	; () banked
  9654  014AA6  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  9655  014AA8  0E00               	movlw	0
  9656  014AAA  6F64               	movwf	HMI_SetSegments@in& (0+255),b
  9657                           
  9658                           ;HMI.c: 229: while(*pString)
  9659  014AAC  D038               	goto	l1202
  9660  014AAE                     
  9661                           ; BSR set to: 0
  9662                           ;HMI.c: 230: {
  9663                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  9664                           
  9665                           ; BSR set to: 0
  9666  014AAE  0E30               	movlw	low _HMIBoard
  9667  014AB0  0100               	movlb	0	; () banked
  9668  014AB2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  9669  014AB4  6ED9               	movwf	fsr2l,c
  9670  014AB6  0E01               	movlw	high _HMIBoard
  9671  014AB8  0100               	movlb	0	; () banked
  9672  014ABA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9673  014ABC  6EDA               	movwf	fsr2h,c
  9674  014ABE  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  9675  014AC2  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  9676  014AC6  50E7               	movf	indf1,w,c
  9677  014AC8  ECC0  F08B         	call	_ToSegment
  9678  014ACC  6EDF               	movwf	indf2,c
  9679                           
  9680                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  9681  014ACE  0E30               	movlw	low _HMIBoard
  9682  014AD0  0100               	movlb	0	; () banked
  9683  014AD2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  9684  014AD4  6ED9               	movwf	fsr2l,c
  9685  014AD6  0E01               	movlw	high _HMIBoard
  9686  014AD8  0100               	movlb	0	; () banked
  9687  014ADA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9688  014ADC  6EDA               	movwf	fsr2h,c
  9689  014ADE  0E80               	movlw	128
  9690  014AE0  18DE               	xorwf	postinc2,w,c
  9691  014AE2  A4D8               	btfss	status,2,c
  9692  014AE4  D00E               	goto	l1201
  9693                           
  9694                           ; BSR set to: 0
  9695                           ;HMI.c: 234: {
  9696                           ;HMI.c: 235: in--;
  9697  014AE6  0100               	movlb	0	; () banked
  9698  014AE8  0764               	decf	HMI_SetSegments@in& (0+255),f,b
  9699  014AEA  A0D8               	btfss	status,0,c
  9700  014AEC  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  9701                           
  9702                           ; BSR set to: 0
  9703                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  9704  014AEE  0E30               	movlw	low _HMIBoard
  9705  014AF0  0100               	movlb	0	; () banked
  9706  014AF2  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  9707  014AF4  6ED9               	movwf	fsr2l,c
  9708  014AF6  0E01               	movlw	high _HMIBoard
  9709  014AF8  0100               	movlb	0	; () banked
  9710  014AFA  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9711  014AFC  6EDA               	movwf	fsr2h,c
  9712  014AFE  0E00               	movlw	0
  9713  014B00  8EDB               	bsf	plusw2,7,c
  9714  014B02                     l1201:
  9715                           
  9716                           ; BSR set to: 0
  9717                           ;HMI.c: 237: }
  9718                           ;HMI.c: 239: pString++;
  9719                           
  9720                           ; BSR set to: 0
  9721  014B02  0100               	movlb	0	; () banked
  9722  014B04  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  9723  014B06  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  9724                           
  9725                           ; BSR set to: 0
  9726                           ;HMI.c: 240: in++;
  9727  014B08  0100               	movlb	0	; () banked
  9728  014B0A  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9729  014B0C  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;HMI.c: 241: if (in>=6)
  9733  014B0E  0100               	movlb	0	; () banked
  9734  014B10  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9735  014B12  E11A               	bnz	l12315
  9736  014B14  0E06               	movlw	6
  9737  014B16  0100               	movlb	0	; () banked
  9738  014B18  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  9739  014B1A  B0D8               	btfsc	status,0,c
  9740  014B1C  D015               	goto	l1204
  9741  014B1E                     l1202:
  9742                           
  9743                           ; BSR set to: 0
  9744                           
  9745                           ; BSR set to: 0
  9746                           
  9747                           ; BSR set to: 0
  9748  014B1E  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  9749  014B22  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  9750  014B26  50DF               	movf	indf2,w,c
  9751  014B28  B4D8               	btfsc	status,2,c
  9752  014B2A  D00E               	goto	l1204
  9753  014B2C  D7C0               	goto	l1200
  9754  014B2E                     
  9755                           ; BSR set to: 0
  9756                           ;HMI.c: 245: {
  9757                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  9758                           
  9759                           ; BSR set to: 0
  9760  014B2E  0E30               	movlw	low _HMIBoard
  9761  014B30  0100               	movlb	0	; () banked
  9762  014B32  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
  9763  014B34  6ED9               	movwf	fsr2l,c
  9764  014B36  0E01               	movlw	high _HMIBoard
  9765  014B38  0100               	movlb	0	; () banked
  9766  014B3A  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9767  014B3C  6EDA               	movwf	fsr2h,c
  9768  014B3E  0E00               	movlw	0
  9769  014B40  6EDF               	movwf	indf2,c
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;HMI.c: 247: in++;
  9773  014B42  0100               	movlb	0	; () banked
  9774  014B44  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9775  014B46  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9776  014B48                     l1204:
  9777  014B48                     l12315:
  9778                           
  9779                           ; BSR set to: 0
  9780  014B48  0100               	movlb	0	; () banked
  9781  014B4A  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9782  014B4C  E106               	bnz	l1207
  9783  014B4E  0E06               	movlw	6
  9784  014B50  0100               	movlb	0	; () banked
  9785  014B52  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
  9786  014B54  B0D8               	btfsc	status,0,c
  9787  014B56  0012               	return	
  9788  014B58  D7EA               	goto	l1205
  9789  014B5A                     l1207:
  9790                           
  9791                           ; BSR set to: 0
  9792  014B5A  0012               	return		;funcret
  9793  014B5C                     __end_of_HMI_SetSegments:
  9794                           	opt stack 0
  9795                           tosu	equ	0xFFF
  9796                           tosh	equ	0xFFE
  9797                           tosl	equ	0xFFD
  9798                           pclath	equ	0xFFA
  9799                           tblptru	equ	0xFF8
  9800                           tblptrh	equ	0xFF7
  9801                           tblptrl	equ	0xFF6
  9802                           tablat	equ	0xFF5
  9803                           prodl	equ	0xFF3
  9804                           postinc0	equ	0xFEE
  9805                           wreg	equ	0xFE8
  9806                           indf1	equ	0xFE7
  9807                           postdec1	equ	0xFE5
  9808                           fsr1h	equ	0xFE2
  9809                           fsr1l	equ	0xFE1
  9810                           indf2	equ	0xFDF
  9811                           postinc2	equ	0xFDE
  9812                           postdec2	equ	0xFDD
  9813                           plusw2	equ	0xFDB
  9814                           fsr2h	equ	0xFDA
  9815                           fsr2l	equ	0xFD9
  9816                           status	equ	0xFD8
  9817                           
  9818 ;; *************** function _ToSegment *****************
  9819 ;; Defined at:
  9820 ;;		line 284 in file "Library/Types.c"
  9821 ;; Parameters:    Size  Location     Type
  9822 ;;  pCHR            1    wreg     unsigned char 
  9823 ;; Auto vars:     Size  Location     Type
  9824 ;;  pCHR            1    0[BANK0 ] unsigned char 
  9825 ;; Return value:  Size  Location     Type
  9826 ;;                  1    wreg      unsigned char 
  9827 ;; Registers used:
  9828 ;;		wreg, status,2, status,0
  9829 ;; Tracked objects:
  9830 ;;		On entry : 0/0
  9831 ;;		On exit  : 0/0
  9832 ;;		Unchanged: 0/0
  9833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9837 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;Total ram usage:        1 bytes
  9839 ;; Hardware stack levels used:    1
  9840 ;; Hardware stack levels required when called:    7
  9841 ;; This function calls:
  9842 ;;		Nothing
  9843 ;; This function is called by:
  9844 ;;		_HMI_SetSegments
  9845 ;; This function uses a non-reentrant model
  9846 ;;
  9847                           
  9848                           	psect	text37
  9849  011780                     __ptext37:
  9850                           	opt stack 0
  9851  011780                     _ToSegment:
  9852                           	opt stack 17
  9853                           
  9854                           ; BSR set to: 0
  9855                           ;incstack = 0
  9856                           ;ToSegment@pCHR stored from wreg
  9857  011780  0100               	movlb	0	; () banked
  9858  011782  6F60               	movwf	ToSegment@pCHR& (0+255),b
  9859                           
  9860                           ;Types.c: 286: switch(pCHR)
  9861  011784  D07E               	goto	l853
  9862  011786  0E3F               	movlw	63
  9863  011788  0012               	return	
  9864  01178A  0E06               	movlw	6
  9865  01178C  0012               	return	
  9866  01178E  0E5B               	movlw	91
  9867  011790  0012               	return	
  9868  011792  0E4F               	movlw	79
  9869  011794  0012               	return	
  9870  011796  0E66               	movlw	102
  9871  011798  0012               	return	
  9872  01179A  0E6D               	movlw	109
  9873  01179C  0012               	return	
  9874  01179E  0E7D               	movlw	125
  9875  0117A0  0012               	return	
  9876  0117A2  0E07               	movlw	7
  9877  0117A4  0012               	return	
  9878  0117A6  0E7F               	movlw	127
  9879  0117A8  0012               	return	
  9880  0117AA  0E6F               	movlw	111
  9881  0117AC  0012               	return	
  9882  0117AE  0E5F               	movlw	95
  9883  0117B0  0012               	return	
  9884  0117B2  0E7C               	movlw	124
  9885  0117B4  0012               	return	
  9886  0117B6  0E58               	movlw	88
  9887  0117B8  0012               	return	
  9888  0117BA  0E5E               	movlw	94
  9889  0117BC  0012               	return	
  9890  0117BE  0E7B               	movlw	123
  9891  0117C0  0012               	return	
  9892  0117C2  0E71               	movlw	113
  9893  0117C4  0012               	return	
  9894  0117C6  0E6F               	movlw	111
  9895  0117C8  0012               	return	
  9896  0117CA  0E74               	movlw	116
  9897  0117CC  0012               	return	
  9898  0117CE  0E04               	movlw	4
  9899  0117D0  0012               	return	
  9900  0117D2  0E0E               	movlw	14
  9901  0117D4  0012               	return	
  9902  0117D6  0E7A               	movlw	122
  9903  0117D8  0012               	return	
  9904  0117DA  0E06               	movlw	6
  9905  0117DC  0012               	return	
  9906  0117DE  0E14               	movlw	20
  9907  0117E0  0012               	return	
  9908  0117E2  0E54               	movlw	84
  9909  0117E4  0012               	return	
  9910  0117E6  0E5C               	movlw	92
  9911  0117E8  0012               	return	
  9912  0117EA  0E73               	movlw	115
  9913  0117EC  0012               	return	
  9914  0117EE  0E67               	movlw	103
  9915  0117F0  0012               	return	
  9916  0117F2  0E50               	movlw	80
  9917  0117F4  0012               	return	
  9918  0117F6  0E6D               	movlw	109
  9919  0117F8  0012               	return	
  9920  0117FA  0E78               	movlw	120
  9921  0117FC  0012               	return	
  9922  0117FE  0E1C               	movlw	28
  9923  011800  0012               	return	
  9924  011802  0E62               	movlw	98
  9925  011804  0012               	return	
  9926  011806  0E2A               	movlw	42
  9927  011808  0012               	return	
  9928  01180A  0E64               	movlw	100
  9929  01180C  0012               	return	
  9930  01180E  0E6E               	movlw	110
  9931  011810  0012               	return	
  9932  011812  0E5B               	movlw	91
  9933  011814  0012               	return	
  9934  011816  0E77               	movlw	119
  9935  011818  0012               	return	
  9936  01181A  0E7F               	movlw	127
  9937  01181C  0012               	return	
  9938  01181E  0E39               	movlw	57
  9939  011820  0012               	return	
  9940  011822  0E3F               	movlw	63
  9941  011824  0012               	return	
  9942  011826  0E79               	movlw	121
  9943  011828  0012               	return	
  9944  01182A  0E71               	movlw	113
  9945  01182C  0012               	return	
  9946  01182E  0E3D               	movlw	61
  9947  011830  0012               	return	
  9948  011832  0E76               	movlw	118
  9949  011834  0012               	return	
  9950  011836  0E06               	movlw	6
  9951  011838  0012               	return	
  9952  01183A  0E1E               	movlw	30
  9953  01183C  0012               	return	
  9954  01183E  0E57               	movlw	87
  9955  011840  0012               	return	
  9956  011842  0E38               	movlw	56
  9957  011844  0012               	return	
  9958  011846  0E76               	movlw	118
  9959  011848  0012               	return	
  9960  01184A  0E76               	movlw	118
  9961  01184C  0012               	return	
  9962  01184E  0E3F               	movlw	63
  9963  011850  0012               	return	
  9964  011852  0E73               	movlw	115
  9965  011854  0012               	return	
  9966  011856  0E3F               	movlw	63
  9967  011858  0012               	return	
  9968  01185A  0E77               	movlw	119
  9969  01185C  0012               	return	
  9970  01185E  0E6D               	movlw	109
  9971  011860  0012               	return	
  9972  011862  0E31               	movlw	49
  9973  011864  0012               	return	
  9974  011866  0E3E               	movlw	62
  9975  011868  0012               	return	
  9976  01186A  0E3E               	movlw	62
  9977  01186C  0012               	return	
  9978  01186E  0E7E               	movlw	126
  9979  011870  0012               	return	
  9980  011872  0E76               	movlw	118
  9981  011874  0012               	return	
  9982  011876  0E66               	movlw	102
  9983  011878  0012               	return	
  9984  01187A  0E5B               	movlw	91
  9985  01187C  0012               	return	
  9986  01187E  0E80               	movlw	128
  9987  011880  0012               	return	
  9988  011882                     l853:
  9989  011882  0100               	movlb	0	; () banked
  9990  011884  5160               	movf	ToSegment@pCHR& (0+255),w,b
  9991                           
  9992                           ; Switch size 1, requested type "space"
  9993                           ; Number of cases is 63, Range of values is 46 to 122
  9994                           ; switch strategies available:
  9995                           ; Name         Instructions Cycles
  9996                           ; simple_byte          190    96 (average)
  9997                           ;	Chosen strategy is simple_byte
  9998  011886  0A2E               	xorlw	46	; case 46
  9999  011888  B4D8               	btfsc	status,2,c
 10000  01188A  D7F9               	goto	l917
 10001  01188C  0A1E               	xorlw	30	; case 48
 10002  01188E  B4D8               	btfsc	status,2,c
 10003  011890  D77A               	goto	l854
 10004  011892  0A01               	xorlw	1	; case 49
 10005  011894  B4D8               	btfsc	status,2,c
 10006  011896  D779               	goto	l856
 10007  011898  0A03               	xorlw	3	; case 50
 10008  01189A  B4D8               	btfsc	status,2,c
 10009  01189C  D778               	goto	l857
 10010  01189E  0A01               	xorlw	1	; case 51
 10011  0118A0  B4D8               	btfsc	status,2,c
 10012  0118A2  D777               	goto	l858
 10013  0118A4  0A07               	xorlw	7	; case 52
 10014  0118A6  B4D8               	btfsc	status,2,c
 10015  0118A8  D776               	goto	l859
 10016  0118AA  0A01               	xorlw	1	; case 53
 10017  0118AC  B4D8               	btfsc	status,2,c
 10018  0118AE  D775               	goto	l860
 10019  0118B0  0A03               	xorlw	3	; case 54
 10020  0118B2  B4D8               	btfsc	status,2,c
 10021  0118B4  D774               	goto	l861
 10022  0118B6  0A01               	xorlw	1	; case 55
 10023  0118B8  B4D8               	btfsc	status,2,c
 10024  0118BA  D773               	goto	l862
 10025  0118BC  0A0F               	xorlw	15	; case 56
 10026  0118BE  B4D8               	btfsc	status,2,c
 10027  0118C0  D772               	goto	l863
 10028  0118C2  0A01               	xorlw	1	; case 57
 10029  0118C4  B4D8               	btfsc	status,2,c
 10030  0118C6  D771               	goto	l864
 10031  0118C8  0A78               	xorlw	120	; case 65
 10032  0118CA  B4D8               	btfsc	status,2,c
 10033  0118CC  D7A4               	goto	l891
 10034  0118CE  0A03               	xorlw	3	; case 66
 10035  0118D0  B4D8               	btfsc	status,2,c
 10036  0118D2  D7A3               	goto	l892
 10037  0118D4  0A01               	xorlw	1	; case 67
 10038  0118D6  B4D8               	btfsc	status,2,c
 10039  0118D8  D7A2               	goto	l893
 10040  0118DA  0A07               	xorlw	7	; case 68
 10041  0118DC  B4D8               	btfsc	status,2,c
 10042  0118DE  D7A1               	goto	l894
 10043  0118E0  0A01               	xorlw	1	; case 69
 10044  0118E2  B4D8               	btfsc	status,2,c
 10045  0118E4  D7A0               	goto	l895
 10046  0118E6  0A03               	xorlw	3	; case 70
 10047  0118E8  B4D8               	btfsc	status,2,c
 10048  0118EA  D79F               	goto	l896
 10049  0118EC  0A01               	xorlw	1	; case 71
 10050  0118EE  B4D8               	btfsc	status,2,c
 10051  0118F0  D79E               	goto	l897
 10052  0118F2  0A0F               	xorlw	15	; case 72
 10053  0118F4  B4D8               	btfsc	status,2,c
 10054  0118F6  D79D               	goto	l898
 10055  0118F8  0A01               	xorlw	1	; case 73
 10056  0118FA  B4D8               	btfsc	status,2,c
 10057  0118FC  D79C               	goto	l899
 10058  0118FE  0A03               	xorlw	3	; case 74
 10059  011900  B4D8               	btfsc	status,2,c
 10060  011902  D79B               	goto	l900
 10061  011904  0A01               	xorlw	1	; case 75
 10062  011906  B4D8               	btfsc	status,2,c
 10063  011908  D79A               	goto	l901
 10064  01190A  0A07               	xorlw	7	; case 76
 10065  01190C  B4D8               	btfsc	status,2,c
 10066  01190E  D799               	goto	l902
 10067  011910  0A01               	xorlw	1	; case 77
 10068  011912  B4D8               	btfsc	status,2,c
 10069  011914  D798               	goto	l903
 10070  011916  0A03               	xorlw	3	; case 78
 10071  011918  B4D8               	btfsc	status,2,c
 10072  01191A  D797               	goto	l904
 10073  01191C  0A01               	xorlw	1	; case 79
 10074  01191E  B4D8               	btfsc	status,2,c
 10075  011920  D796               	goto	l905
 10076  011922  0A1F               	xorlw	31	; case 80
 10077  011924  B4D8               	btfsc	status,2,c
 10078  011926  D795               	goto	l906
 10079  011928  0A01               	xorlw	1	; case 81
 10080  01192A  B4D8               	btfsc	status,2,c
 10081  01192C  D794               	goto	l907
 10082  01192E  0A03               	xorlw	3	; case 82
 10083  011930  B4D8               	btfsc	status,2,c
 10084  011932  D793               	goto	l908
 10085  011934  0A01               	xorlw	1	; case 83
 10086  011936  B4D8               	btfsc	status,2,c
 10087  011938  D792               	goto	l909
 10088  01193A  0A07               	xorlw	7	; case 84
 10089  01193C  B4D8               	btfsc	status,2,c
 10090  01193E  D791               	goto	l910
 10091  011940  0A01               	xorlw	1	; case 85
 10092  011942  B4D8               	btfsc	status,2,c
 10093  011944  D790               	goto	l911
 10094  011946  0A03               	xorlw	3	; case 86
 10095  011948  B4D8               	btfsc	status,2,c
 10096  01194A  D78F               	goto	l912
 10097  01194C  0A01               	xorlw	1	; case 87
 10098  01194E  B4D8               	btfsc	status,2,c
 10099  011950  D78E               	goto	l913
 10100  011952  0A0F               	xorlw	15	; case 88
 10101  011954  B4D8               	btfsc	status,2,c
 10102  011956  D78D               	goto	l914
 10103  011958  0A01               	xorlw	1	; case 89
 10104  01195A  B4D8               	btfsc	status,2,c
 10105  01195C  D78C               	goto	l915
 10106  01195E  0A03               	xorlw	3	; case 90
 10107  011960  B4D8               	btfsc	status,2,c
 10108  011962  D78B               	goto	l916
 10109  011964  0A3B               	xorlw	59	; case 97
 10110  011966  B4D8               	btfsc	status,2,c
 10111  011968  D722               	goto	l865
 10112  01196A  0A03               	xorlw	3	; case 98
 10113  01196C  B4D8               	btfsc	status,2,c
 10114  01196E  D721               	goto	l866
 10115  011970  0A01               	xorlw	1	; case 99
 10116  011972  B4D8               	btfsc	status,2,c
 10117  011974  D720               	goto	l867
 10118  011976  0A07               	xorlw	7	; case 100
 10119  011978  B4D8               	btfsc	status,2,c
 10120  01197A  D71F               	goto	l868
 10121  01197C  0A01               	xorlw	1	; case 101
 10122  01197E  B4D8               	btfsc	status,2,c
 10123  011980  D71E               	goto	l869
 10124  011982  0A03               	xorlw	3	; case 102
 10125  011984  B4D8               	btfsc	status,2,c
 10126  011986  D71D               	goto	l870
 10127  011988  0A01               	xorlw	1	; case 103
 10128  01198A  B4D8               	btfsc	status,2,c
 10129  01198C  D71C               	goto	l871
 10130  01198E  0A0F               	xorlw	15	; case 104
 10131  011990  B4D8               	btfsc	status,2,c
 10132  011992  D71B               	goto	l872
 10133  011994  0A01               	xorlw	1	; case 105
 10134  011996  B4D8               	btfsc	status,2,c
 10135  011998  D71A               	goto	l873
 10136  01199A  0A03               	xorlw	3	; case 106
 10137  01199C  B4D8               	btfsc	status,2,c
 10138  01199E  D719               	goto	l874
 10139  0119A0  0A01               	xorlw	1	; case 107
 10140  0119A2  B4D8               	btfsc	status,2,c
 10141  0119A4  D718               	goto	l875
 10142  0119A6  0A07               	xorlw	7	; case 108
 10143  0119A8  B4D8               	btfsc	status,2,c
 10144  0119AA  D717               	goto	l876
 10145  0119AC  0A01               	xorlw	1	; case 109
 10146  0119AE  B4D8               	btfsc	status,2,c
 10147  0119B0  D716               	goto	l877
 10148  0119B2  0A03               	xorlw	3	; case 110
 10149  0119B4  B4D8               	btfsc	status,2,c
 10150  0119B6  D715               	goto	l878
 10151  0119B8  0A01               	xorlw	1	; case 111
 10152  0119BA  B4D8               	btfsc	status,2,c
 10153  0119BC  D714               	goto	l879
 10154  0119BE  0A1F               	xorlw	31	; case 112
 10155  0119C0  B4D8               	btfsc	status,2,c
 10156  0119C2  D713               	goto	l880
 10157  0119C4  0A01               	xorlw	1	; case 113
 10158  0119C6  B4D8               	btfsc	status,2,c
 10159  0119C8  D712               	goto	l881
 10160  0119CA  0A03               	xorlw	3	; case 114
 10161  0119CC  B4D8               	btfsc	status,2,c
 10162  0119CE  D711               	goto	l882
 10163  0119D0  0A01               	xorlw	1	; case 115
 10164  0119D2  B4D8               	btfsc	status,2,c
 10165  0119D4  D710               	goto	l883
 10166  0119D6  0A07               	xorlw	7	; case 116
 10167  0119D8  B4D8               	btfsc	status,2,c
 10168  0119DA  D70F               	goto	l884
 10169  0119DC  0A01               	xorlw	1	; case 117
 10170  0119DE  B4D8               	btfsc	status,2,c
 10171  0119E0  D70E               	goto	l885
 10172  0119E2  0A03               	xorlw	3	; case 118
 10173  0119E4  B4D8               	btfsc	status,2,c
 10174  0119E6  D70D               	goto	l886
 10175  0119E8  0A01               	xorlw	1	; case 119
 10176  0119EA  B4D8               	btfsc	status,2,c
 10177  0119EC  D70C               	goto	l887
 10178  0119EE  0A0F               	xorlw	15	; case 120
 10179  0119F0  B4D8               	btfsc	status,2,c
 10180  0119F2  D70B               	goto	l888
 10181  0119F4  0A01               	xorlw	1	; case 121
 10182  0119F6  B4D8               	btfsc	status,2,c
 10183  0119F8  D70A               	goto	l889
 10184  0119FA  0A03               	xorlw	3	; case 122
 10185  0119FC  B4D8               	btfsc	status,2,c
 10186  0119FE  D709               	goto	l890
 10187                           
 10188                           ;Types.c: 354: return 0;
 10189                           
 10190                           ; BSR set to: 0
 10191  011A00  0E00               	movlw	0
 10192  011A02  0012               	return	
 10193  011A04                     __end_of_ToSegment:
 10194                           	opt stack 0
 10195                           tosu	equ	0xFFF
 10196                           tosh	equ	0xFFE
 10197                           tosl	equ	0xFFD
 10198                           pclath	equ	0xFFA
 10199                           tblptru	equ	0xFF8
 10200                           tblptrh	equ	0xFF7
 10201                           tblptrl	equ	0xFF6
 10202                           tablat	equ	0xFF5
 10203                           prodl	equ	0xFF3
 10204                           postinc0	equ	0xFEE
 10205                           wreg	equ	0xFE8
 10206                           indf1	equ	0xFE7
 10207                           postdec1	equ	0xFE5
 10208                           fsr1h	equ	0xFE2
 10209                           fsr1l	equ	0xFE1
 10210                           indf2	equ	0xFDF
 10211                           postinc2	equ	0xFDE
 10212                           postdec2	equ	0xFDD
 10213                           plusw2	equ	0xFDB
 10214                           fsr2h	equ	0xFDA
 10215                           fsr2l	equ	0xFD9
 10216                           status	equ	0xFD8
 10217                           
 10218 ;; *************** function _HMI_SetButton *****************
 10219 ;; Defined at:
 10220 ;;		line 186 in file "HMI.c"
 10221 ;; Parameters:    Size  Location     Type
 10222 ;;  pValue          1    wreg     unsigned char 
 10223 ;; Auto vars:     Size  Location     Type
 10224 ;;  pValue          1    6[BANK0 ] unsigned char 
 10225 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 10226 ;;  v               1    7[BANK0 ] unsigned char 
 10227 ;; Return value:  Size  Location     Type
 10228 ;;                  1    wreg      void 
 10229 ;; Registers used:
 10230 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10231 ;; Tracked objects:
 10232 ;;		On entry : 0/0
 10233 ;;		On exit  : 0/0
 10234 ;;		Unchanged: 0/0
 10235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10237 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10238 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10239 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10240 ;;Total ram usage:        8 bytes
 10241 ;; Hardware stack levels used:    1
 10242 ;; Hardware stack levels required when called:    7
 10243 ;; This function calls:
 10244 ;;		Nothing
 10245 ;; This function is called by:
 10246 ;;		_Event_TestButton
 10247 ;; This function uses a non-reentrant model
 10248 ;;
 10249                           
 10250                           	psect	text38
 10251  015486                     __ptext38:
 10252                           	opt stack 0
 10253  015486                     _HMI_SetButton:
 10254                           	opt stack 19
 10255                           
 10256                           ;incstack = 0
 10257                           ;HMI_SetButton@pValue stored from wreg
 10258  015486  0100               	movlb	0	; () banked
 10259  015488  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 10260                           
 10261                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 10262  01548A  0EC8               	movlw	low HMI_SetButton@F7213
 10263  01548C  6EF6               	movwf	tblptrl,c
 10264  01548E                     	if	1	;There is more than 1 active tblptr byte
 10265  01548E  0EFC               	movlw	high HMI_SetButton@F7213
 10266  015490  6EF7               	movwf	tblptrh,c
 10267  015492                     	endif
 10268  015492                     	if	1	;There are 3 active tblptr bytes
 10269  015492  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 10270  015494  6EF8               	movwf	tblptru,c
 10271  015496                     	endif
 10272  015496  0009               	tblrd		*+
 10273  015498  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 10274  01549C  0009               	tblrd		*+
 10275  01549E  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 10276  0154A2  0009               	tblrd		*+
 10277  0154A4  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 10278  0154A8  000A               	tblrd		*-
 10279  0154AA  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 10280                           
 10281                           ;HMI.c: 189: UINT8 v = 0b00010001;
 10282  0154AE  0E11               	movlw	17
 10283  0154B0  0100               	movlb	0	; () banked
 10284  0154B2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;HMI.c: 190: pValue &= 3;
 10288  0154B4  0E03               	movlw	3
 10289  0154B6  0100               	movlb	0	; () banked
 10290  0154B8  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 10291                           
 10292                           ; BSR set to: 0
 10293                           ;HMI.c: 191: v = v << reindex[pValue];
 10294  0154BA  0100               	movlb	0	; () banked
 10295  0154BC  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 10296  0154BE  0D01               	mullw	1
 10297  0154C0  0E62               	movlw	low HMI_SetButton@reindex
 10298  0154C2  24F3               	addwf	prodl,w,c
 10299  0154C4  6ED9               	movwf	fsr2l,c
 10300  0154C6  0E00               	movlw	high HMI_SetButton@reindex
 10301  0154C8  20F4               	addwfc	prodh,w,c
 10302  0154CA  6EDA               	movwf	fsr2h,c
 10303  0154CC  50DF               	movf	indf2,w,c
 10304  0154CE  0100               	movlb	0	; () banked
 10305  0154D0  6F60               	movwf	??_HMI_SetButton& (0+255),b
 10306  0154D2  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 10307  0154D6  0100               	movlb	0	; () banked
 10308  0154D8  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 10309  0154DA  D003               	goto	u9764
 10310  0154DC                     u9765:
 10311  0154DC  0100               	movlb	0	; () banked
 10312  0154DE  90D8               	bcf	status,0,c
 10313  0154E0  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 10314  0154E2                     u9764:
 10315  0154E2  0100               	movlb	0	; () banked
 10316  0154E4  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 10317  0154E6  D7FA               	goto	u9765
 10318  0154E8  0100               	movlb	0	; () banked
 10319  0154EA  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 10320  0154EC  0100               	movlb	0	; () banked
 10321  0154EE  6F67               	movwf	HMI_SetButton@v& (0+255),b
 10322                           
 10323                           ; BSR set to: 0
 10324                           ;HMI.c: 192: v = v >> 4;
 10325  0154F0  0100               	movlb	0	; () banked
 10326  0154F2  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 10327  0154F4  0B0F               	andlw	15
 10328  0154F6  0100               	movlb	0	; () banked
 10329  0154F8  6F67               	movwf	HMI_SetButton@v& (0+255),b
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;HMI.c: 193: v = v & 0x0F;
 10333  0154FA  0100               	movlb	0	; () banked
 10334  0154FC  5167               	movf	HMI_SetButton@v& (0+255),w,b
 10335  0154FE  0B0F               	andlw	15
 10336  015500  0100               	movlb	0	; () banked
 10337  015502  6F67               	movwf	HMI_SetButton@v& (0+255),b
 10338                           
 10339                           ; BSR set to: 0
 10340                           ;HMI.c: 194: HMIBoard.pButton = v;
 10341  015504  0101               	movlb	1	; () banked
 10342  015506  5136               	movf	(_HMIBoard+6)& (0+255),w,b
 10343  015508  0100               	movlb	0	; () banked
 10344  01550A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 10345  01550C  0BF0               	andlw	-16
 10346  01550E  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 10347  015510  0101               	movlb	1	; () banked
 10348  015512  6F36               	movwf	(_HMIBoard+6)& (0+255),b
 10349                           
 10350                           ; BSR set to: 1
 10351  015514  0012               	return		;funcret
 10352  015516                     __end_of_HMI_SetButton:
 10353                           	opt stack 0
 10354                           tosu	equ	0xFFF
 10355                           tosh	equ	0xFFE
 10356                           tosl	equ	0xFFD
 10357                           pclath	equ	0xFFA
 10358                           tblptru	equ	0xFF8
 10359                           tblptrh	equ	0xFF7
 10360                           tblptrl	equ	0xFF6
 10361                           tablat	equ	0xFF5
 10362                           prodh	equ	0xFF4
 10363                           prodl	equ	0xFF3
 10364                           postinc0	equ	0xFEE
 10365                           wreg	equ	0xFE8
 10366                           indf1	equ	0xFE7
 10367                           postdec1	equ	0xFE5
 10368                           fsr1h	equ	0xFE2
 10369                           fsr1l	equ	0xFE1
 10370                           indf2	equ	0xFDF
 10371                           postinc2	equ	0xFDE
 10372                           postdec2	equ	0xFDD
 10373                           plusw2	equ	0xFDB
 10374                           fsr2h	equ	0xFDA
 10375                           fsr2l	equ	0xFD9
 10376                           status	equ	0xFD8
 10377                           
 10378 ;; *************** function _HMI_SetBar *****************
 10379 ;; Defined at:
 10380 ;;		line 205 in file "HMI.c"
 10381 ;; Parameters:    Size  Location     Type
 10382 ;;  pValue          1    wreg     unsigned char 
 10383 ;; Auto vars:     Size  Location     Type
 10384 ;;  pValue          1    0[BANK0 ] unsigned char 
 10385 ;; Return value:  Size  Location     Type
 10386 ;;                  1    wreg      void 
 10387 ;; Registers used:
 10388 ;;		wreg
 10389 ;; Tracked objects:
 10390 ;;		On entry : 0/0
 10391 ;;		On exit  : 0/0
 10392 ;;		Unchanged: 0/0
 10393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10397 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10398 ;;Total ram usage:        1 bytes
 10399 ;; Hardware stack levels used:    1
 10400 ;; Hardware stack levels required when called:    7
 10401 ;; This function calls:
 10402 ;;		Nothing
 10403 ;; This function is called by:
 10404 ;;		_Event_DIPSwitch
 10405 ;;		_Event_HMI_DIPSwitch
 10406 ;;		_Event_HMI_LeftButton
 10407 ;;		_Event_HMI_RightButton
 10408 ;; This function uses a non-reentrant model
 10409 ;;
 10410                           
 10411                           	psect	text39
 10412  016E3E                     __ptext39:
 10413                           	opt stack 0
 10414  016E3E                     _HMI_SetBar:
 10415                           	opt stack 19
 10416                           
 10417                           ; BSR set to: 1
 10418                           ;incstack = 0
 10419                           ;HMI_SetBar@pValue stored from wreg
 10420  016E3E  0100               	movlb	0	; () banked
 10421  016E40  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 10422                           
 10423                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 10424  016E42  C060  F137         	movff	HMI_SetBar@pValue,_HMIBoard+7
 10425  016E46  0012               	return		;funcret
 10426  016E48                     __end_of_HMI_SetBar:
 10427                           	opt stack 0
 10428                           tosu	equ	0xFFF
 10429                           tosh	equ	0xFFE
 10430                           tosl	equ	0xFFD
 10431                           pclath	equ	0xFFA
 10432                           tblptru	equ	0xFF8
 10433                           tblptrh	equ	0xFF7
 10434                           tblptrl	equ	0xFF6
 10435                           tablat	equ	0xFF5
 10436                           prodh	equ	0xFF4
 10437                           prodl	equ	0xFF3
 10438                           postinc0	equ	0xFEE
 10439                           wreg	equ	0xFE8
 10440                           indf1	equ	0xFE7
 10441                           postdec1	equ	0xFE5
 10442                           fsr1h	equ	0xFE2
 10443                           fsr1l	equ	0xFE1
 10444                           indf2	equ	0xFDF
 10445                           postinc2	equ	0xFDE
 10446                           postdec2	equ	0xFDD
 10447                           plusw2	equ	0xFDB
 10448                           fsr2h	equ	0xFDA
 10449                           fsr2l	equ	0xFD9
 10450                           status	equ	0xFD8
 10451                           
 10452 ;; *************** function _HMI_GetBar *****************
 10453 ;; Defined at:
 10454 ;;		line 209 in file "HMI.c"
 10455 ;; Parameters:    Size  Location     Type
 10456 ;;		None
 10457 ;; Auto vars:     Size  Location     Type
 10458 ;;		None
 10459 ;; Return value:  Size  Location     Type
 10460 ;;                  1    wreg      unsigned char 
 10461 ;; Registers used:
 10462 ;;		wreg, status,2
 10463 ;; Tracked objects:
 10464 ;;		On entry : 0/0
 10465 ;;		On exit  : 0/0
 10466 ;;		Unchanged: 0/0
 10467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10472 ;;Total ram usage:        0 bytes
 10473 ;; Hardware stack levels used:    1
 10474 ;; Hardware stack levels required when called:    7
 10475 ;; This function calls:
 10476 ;;		Nothing
 10477 ;; This function is called by:
 10478 ;;		_Event_DIPSwitch
 10479 ;;		_Event_HMI_DIPSwitch
 10480 ;; This function uses a non-reentrant model
 10481 ;;
 10482                           
 10483                           	psect	text40
 10484  016E76                     __ptext40:
 10485                           	opt stack 0
 10486  016E76                     _HMI_GetBar:
 10487                           	opt stack 19
 10488                           
 10489                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 10490                           
 10491                           ;incstack = 0
 10492  016E76  0101               	movlb	1	; () banked
 10493  016E78  5137               	movf	(_HMIBoard+7)& (0+255),w,b
 10494  016E7A  0012               	return	
 10495  016E7C                     __end_of_HMI_GetBar:
 10496                           	opt stack 0
 10497                           tosu	equ	0xFFF
 10498                           tosh	equ	0xFFE
 10499                           tosl	equ	0xFFD
 10500                           pclath	equ	0xFFA
 10501                           tblptru	equ	0xFF8
 10502                           tblptrh	equ	0xFF7
 10503                           tblptrl	equ	0xFF6
 10504                           tablat	equ	0xFF5
 10505                           prodh	equ	0xFF4
 10506                           prodl	equ	0xFF3
 10507                           postinc0	equ	0xFEE
 10508                           wreg	equ	0xFE8
 10509                           indf1	equ	0xFE7
 10510                           postdec1	equ	0xFE5
 10511                           fsr1h	equ	0xFE2
 10512                           fsr1l	equ	0xFE1
 10513                           indf2	equ	0xFDF
 10514                           postinc2	equ	0xFDE
 10515                           postdec2	equ	0xFDD
 10516                           plusw2	equ	0xFDB
 10517                           fsr2h	equ	0xFDA
 10518                           fsr2l	equ	0xFD9
 10519                           status	equ	0xFD8
 10520                           
 10521 ;; *************** function _initialise *****************
 10522 ;; Defined at:
 10523 ;;		line 63 in file "main.c"
 10524 ;; Parameters:    Size  Location     Type
 10525 ;;		None
 10526 ;; Auto vars:     Size  Location     Type
 10527 ;;		None
 10528 ;; Return value:  Size  Location     Type
 10529 ;;                  1    wreg      void 
 10530 ;; Registers used:
 10531 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10532 ;; Tracked objects:
 10533 ;;		On entry : 0/0
 10534 ;;		On exit  : 0/0
 10535 ;;		Unchanged: 0/0
 10536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10540 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10541 ;;Total ram usage:        0 bytes
 10542 ;; Hardware stack levels used:    1
 10543 ;; Hardware stack levels required when called:   17
 10544 ;; This function calls:
 10545 ;;		_Console_Init
 10546 ;;		_FunctInitADC
 10547 ;;		_FunctInitButton
 10548 ;;		_HMI_Init
 10549 ;;		_ISR_Enable
 10550 ;;		_LCD_Init
 10551 ;;		_MXK_BlockSwitchTo
 10552 ;;		_MXK_Dequeue
 10553 ;;		_MXK_Init
 10554 ;;		_MXK_Release
 10555 ;;		_Motor_Init
 10556 ;; This function is called by:
 10557 ;;		_main
 10558 ;; This function uses a non-reentrant model
 10559 ;;
 10560                           
 10561                           	psect	text41
 10562  015F0C                     __ptext41:
 10563                           	opt stack 0
 10564  015F0C                     _initialise:
 10565                           	opt stack 13
 10566                           
 10567                           ;main.c: 65: MXK_Init();
 10568                           
 10569                           ; BSR set to: 1
 10570                           ;incstack = 0
 10571  015F0C  EC94  F099         	call	_MXK_Init	;wreg free
 10572                           
 10573                           ;main.c: 68: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 10574  015F10  0E01               	movlw	1
 10575  015F12  EC74  F0B3         	call	_MXK_BlockSwitchTo
 10576  015F16  0900               	iorlw	0
 10577  015F18  B4D8               	btfsc	status,2,c
 10578  015F1A  D00C               	goto	l2044
 10579                           
 10580                           ;main.c: 69: HMI_Init();
 10581  015F1C  EC49  F091         	call	_HMI_Init	;wreg free
 10582                           
 10583                           ;main.c: 70: Console_Init();
 10584  015F20  EC5D  F0AB         	call	_Console_Init	;wreg free
 10585                           
 10586                           ;main.c: 71: LCD_Init();
 10587  015F24  EC54  F09A         	call	_LCD_Init	;wreg free
 10588                           
 10589                           ;main.c: 72: if (MXK_Release())
 10590  015F28  EC4E  F0B6         	call	_MXK_Release	;wreg free
 10591  015F2C  0900               	iorlw	0
 10592  015F2E  A4D8               	btfss	status,2,c
 10593                           
 10594                           ;main.c: 73: MXK_Dequeue();
 10595  015F30  EC55  F0B3         	call	_MXK_Dequeue	;wreg free
 10596  015F34                     l2044:
 10597                           
 10598                           ;main.c: 74: }
 10599                           ;main.c: 77: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 10600  015F34  0E08               	movlw	8
 10601  015F36  EC74  F0B3         	call	_MXK_BlockSwitchTo
 10602  015F3A  0900               	iorlw	0
 10603  015F3C  B4D8               	btfsc	status,2,c
 10604  015F3E  D013               	goto	l2046
 10605                           
 10606                           ;main.c: 78: Motor_Init(&Stepper, 0b1000);
 10607  015F40  0EC3               	movlw	low _Stepper
 10608  015F42  0100               	movlb	0	; () banked
 10609  015F44  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
 10610  015F46  0E01               	movlw	high _Stepper
 10611  015F48  0100               	movlb	0	; () banked
 10612  015F4A  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 10613  015F4C  0E00               	movlw	0
 10614  015F4E  0100               	movlb	0	; () banked
 10615  015F50  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 10616  015F52  0E08               	movlw	8
 10617  015F54  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
 10618  015F56  ECD0  F0A1         	call	_Motor_Init	;wreg free
 10619                           
 10620                           ;main.c: 79: if (MXK_Release())
 10621  015F5A  EC4E  F0B6         	call	_MXK_Release	;wreg free
 10622  015F5E  0900               	iorlw	0
 10623  015F60  A4D8               	btfss	status,2,c
 10624                           
 10625                           ;main.c: 80: MXK_Dequeue();
 10626  015F62  EC55  F0B3         	call	_MXK_Dequeue	;wreg free
 10627  015F66                     l2046:
 10628                           
 10629                           ;main.c: 81: }
 10630                           ;main.c: 84: ISR_Enable();
 10631  015F66  EC24  F0B7         	call	_ISR_Enable	;wreg free
 10632                           
 10633                           ;main.c: 87: FunctInitADC();
 10634  015F6A  ECBC  F0A6         	call	_FunctInitADC	;wreg free
 10635                           
 10636                           ;main.c: 90: FunctInitButton();
 10637  015F6E  EC08  F0A9         	call	_FunctInitButton	;wreg free
 10638  015F72  0012               	return		;funcret
 10639  015F74                     __end_of_initialise:
 10640                           	opt stack 0
 10641                           tosu	equ	0xFFF
 10642                           tosh	equ	0xFFE
 10643                           tosl	equ	0xFFD
 10644                           pclath	equ	0xFFA
 10645                           tblptru	equ	0xFF8
 10646                           tblptrh	equ	0xFF7
 10647                           tblptrl	equ	0xFF6
 10648                           tablat	equ	0xFF5
 10649                           prodh	equ	0xFF4
 10650                           prodl	equ	0xFF3
 10651                           postinc0	equ	0xFEE
 10652                           wreg	equ	0xFE8
 10653                           indf1	equ	0xFE7
 10654                           postdec1	equ	0xFE5
 10655                           fsr1h	equ	0xFE2
 10656                           fsr1l	equ	0xFE1
 10657                           indf2	equ	0xFDF
 10658                           postinc2	equ	0xFDE
 10659                           postdec2	equ	0xFDD
 10660                           plusw2	equ	0xFDB
 10661                           fsr2h	equ	0xFDA
 10662                           fsr2l	equ	0xFD9
 10663                           status	equ	0xFD8
 10664                           
 10665 ;; *************** function _Motor_Init *****************
 10666 ;; Defined at:
 10667 ;;		line 26 in file "Library/Motor.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 10670 ;;		 -> Stepper(6), 
 10671 ;;  pAddress        2   47[BANK0 ] unsigned short 
 10672 ;; Auto vars:     Size  Location     Type
 10673 ;;		None
 10674 ;; Return value:  Size  Location     Type
 10675 ;;                  1    wreg      void 
 10676 ;; Registers used:
 10677 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10678 ;; Tracked objects:
 10679 ;;		On entry : 0/0
 10680 ;;		On exit  : 0/0
 10681 ;;		Unchanged: 0/0
 10682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10687 ;;Total ram usage:        4 bytes
 10688 ;; Hardware stack levels used:    1
 10689 ;; Hardware stack levels required when called:   12
 10690 ;; This function calls:
 10691 ;;		_Port_SetPin
 10692 ;;		_Port_SetPinType
 10693 ;;		_Timer0_Init
 10694 ;; This function is called by:
 10695 ;;		_initialise
 10696 ;; This function uses a non-reentrant model
 10697 ;;
 10698                           
 10699                           	psect	text42
 10700  0143A0                     __ptext42:
 10701                           	opt stack 0
 10702  0143A0                     _Motor_Init:
 10703                           	opt stack 17
 10704                           
 10705                           ;Motor.c: 28: pMotor->mDelta = 0;
 10706                           
 10707                           ;incstack = 0
 10708  0143A0  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
 10709  0143A4  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 10710  0143A8  0E00               	movlw	0
 10711  0143AA  6EDE               	movwf	postinc2,c
 10712  0143AC  0E00               	movlw	0
 10713  0143AE  6EDD               	movwf	postdec2,c
 10714                           
 10715                           ;Motor.c: 29: pMotor->mFrequency = 0;
 10716  0143B0  0100               	movlb	0	; () banked
 10717  0143B2  EE20 F002          	lfsr	2,2
 10718  0143B6  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 10719  0143B8  26D9               	addwf	fsr2l,f,c
 10720  0143BA  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 10721  0143BC  22DA               	addwfc	fsr2h,f,c
 10722  0143BE  0E00               	movlw	0
 10723  0143C0  6EDE               	movwf	postinc2,c
 10724  0143C2  0E00               	movlw	0
 10725  0143C4  6EDD               	movwf	postdec2,c
 10726                           
 10727                           ; BSR set to: 0
 10728                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 10729  0143C6  0100               	movlb	0	; () banked
 10730  0143C8  EE20 F004          	lfsr	2,4
 10731  0143CC  518D               	movf	Motor_Init@pMotor& (0+255),w,b
 10732  0143CE  26D9               	addwf	fsr2l,f,c
 10733  0143D0  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 10734  0143D2  22DA               	addwfc	fsr2h,f,c
 10735  0143D4  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
 10736  0143D8  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 10737                           
 10738                           ; BSR set to: 0
 10739                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 10740  0143DC  0E8A               	movlw	low _PortE
 10741  0143DE  0100               	movlb	0	; () banked
 10742  0143E0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 10743  0143E2  0E01               	movlw	high _PortE
 10744  0143E4  0100               	movlb	0	; () banked
 10745  0143E6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10746  0143E8  0E00               	movlw	0
 10747  0143EA  0100               	movlb	0	; () banked
 10748  0143EC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 10749  0143EE  0E03               	movlw	3
 10750  0143F0  0100               	movlb	0	; () banked
 10751  0143F2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10752  0143F4  EC2D  F093         	call	_Port_SetPinType	;wreg free
 10753                           
 10754                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 10755  0143F8  0E8A               	movlw	low _PortE
 10756  0143FA  0100               	movlb	0	; () banked
 10757  0143FC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 10758  0143FE  0E01               	movlw	high _PortE
 10759  014400  0100               	movlb	0	; () banked
 10760  014402  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10761  014404  0E01               	movlw	1
 10762  014406  0100               	movlb	0	; () banked
 10763  014408  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 10764  01440A  0E03               	movlw	3
 10765  01440C  0100               	movlb	0	; () banked
 10766  01440E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10767  014410  EC2D  F093         	call	_Port_SetPinType	;wreg free
 10768                           
 10769                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 10770  014414  0E8A               	movlw	low _PortE
 10771  014416  0100               	movlb	0	; () banked
 10772  014418  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10773  01441A  0E01               	movlw	high _PortE
 10774  01441C  0100               	movlb	0	; () banked
 10775  01441E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10776  014420  0E00               	movlw	0
 10777  014422  0100               	movlb	0	; () banked
 10778  014424  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10779  014426  0E00               	movlw	0
 10780  014428  0100               	movlb	0	; () banked
 10781  01442A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10782  01442C  EC72  F0A3         	call	_Port_SetPin	;wreg free
 10783                           
 10784                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 10785  014430  0E8A               	movlw	low _PortE
 10786  014432  0100               	movlb	0	; () banked
 10787  014434  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10788  014436  0E01               	movlw	high _PortE
 10789  014438  0100               	movlb	0	; () banked
 10790  01443A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10791  01443C  0E01               	movlw	1
 10792  01443E  0100               	movlb	0	; () banked
 10793  014440  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10794  014442  0E00               	movlw	0
 10795  014444  0100               	movlb	0	; () banked
 10796  014446  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10797  014448  EC72  F0A3         	call	_Port_SetPin	;wreg free
 10798                           
 10799                           ;Motor.c: 38: lStepFunction = Motor_Step;
 10800  01444C  0E3C               	movlw	low _Motor_Step
 10801  01444E  0101               	movlb	1	; () banked
 10802  014450  6F0B               	movwf	_lStepFunction& (0+255),b
 10803  014452  0E3A               	movlw	high _Motor_Step
 10804  014454  0101               	movlb	1	; () banked
 10805  014456  6F0C               	movwf	(_lStepFunction+1)& (0+255),b
 10806  014458  0E01               	movlw	low (_Motor_Step shr (0+16))
 10807  01445A  0101               	movlb	1	; () banked
 10808  01445C  6F0D               	movwf	(_lStepFunction+2)& (0+255),b
 10809                           
 10810                           ; BSR set to: 1
 10811                           ;Motor.c: 39: Timer0_Init(1000);
 10812  01445E  0EE8               	movlw	232
 10813  014460  0100               	movlb	0	; () banked
 10814  014462  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
 10815  014464  0E03               	movlw	3
 10816  014466  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 10817  014468  0E00               	movlw	0
 10818  01446A  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 10819  01446C  0E00               	movlw	0
 10820  01446E  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 10821  014470  EC6F  F09C         	call	_Timer0_Init	;wreg free
 10822  014474  0012               	return		;funcret
 10823  014476                     __end_of_Motor_Init:
 10824                           	opt stack 0
 10825                           tosu	equ	0xFFF
 10826                           tosh	equ	0xFFE
 10827                           tosl	equ	0xFFD
 10828                           pclath	equ	0xFFA
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           postinc0	equ	0xFEE
 10836                           wreg	equ	0xFE8
 10837                           indf1	equ	0xFE7
 10838                           postdec1	equ	0xFE5
 10839                           fsr1h	equ	0xFE2
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           plusw2	equ	0xFDB
 10845                           fsr2h	equ	0xFDA
 10846                           fsr2l	equ	0xFD9
 10847                           status	equ	0xFD8
 10848                           
 10849 ;; *************** function _MXK_Init *****************
 10850 ;; Defined at:
 10851 ;;		line 33 in file "Library/MXK.c"
 10852 ;; Parameters:    Size  Location     Type
 10853 ;;		None
 10854 ;; Auto vars:     Size  Location     Type
 10855 ;;		None
 10856 ;; Return value:  Size  Location     Type
 10857 ;;                  1    wreg      void 
 10858 ;; Registers used:
 10859 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10860 ;; Tracked objects:
 10861 ;;		On entry : 0/0
 10862 ;;		On exit  : 0/0
 10863 ;;		Unchanged: 0/0
 10864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;Total ram usage:        0 bytes
 10870 ;; Hardware stack levels used:    1
 10871 ;; Hardware stack levels required when called:   16
 10872 ;; This function calls:
 10873 ;;		_LED_Init
 10874 ;;		_Port_Init
 10875 ;;		_Port_SetPin
 10876 ;;		_Port_SetPinType
 10877 ;;		_Port_SetQuadType
 10878 ;;		_Port_SetType
 10879 ;;		_delay_ms
 10880 ;; This function is called by:
 10881 ;;		_initialise
 10882 ;; This function uses a non-reentrant model
 10883 ;;
 10884                           
 10885                           	psect	text43
 10886  013328                     __ptext43:
 10887                           	opt stack 0
 10888  013328                     _MXK_Init:
 10889                           	opt stack 13
 10890                           
 10891                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 10892                           
 10893                           ;incstack = 0
 10894  013328  0E01               	movlw	1
 10895  01332A  6E4C               	movwf	_Bus_State,c
 10896                           
 10897                           ;MXK.c: 36: lQueue = (Function)0;
 10898  01332C  0E00               	movlw	0
 10899  01332E  0100               	movlb	0	; () banked
 10900  013330  6FEC               	movwf	_lQueue& (0+255),b	;volatile
 10901  013332  0E00               	movlw	0
 10902  013334  0100               	movlb	0	; () banked
 10903  013336  6FED               	movwf	(_lQueue+1)& (0+255),b	;volatile
 10904  013338  0E00               	movlw	0
 10905  01333A  0100               	movlb	0	; () banked
 10906  01333C  6FEE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 10907                           
 10908                           ; BSR set to: 0
 10909                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 10910  01333E  0E78               	movlw	low _PortA
 10911  013340  0100               	movlb	0	; () banked
 10912  013342  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10913  013344  0E02               	movlw	high _PortA
 10914  013346  0100               	movlb	0	; () banked
 10915  013348  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10916  01334A  0E00               	movlw	0
 10917  01334C  0100               	movlb	0	; () banked
 10918  01334E  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10919  013350  ECB3  F095         	call	_Port_Init	;wreg free
 10920                           
 10921                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 10922  013354  0E9E               	movlw	low _PortB
 10923  013356  0100               	movlb	0	; () banked
 10924  013358  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10925  01335A  0E01               	movlw	high _PortB
 10926  01335C  0100               	movlb	0	; () banked
 10927  01335E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10928  013360  0E01               	movlw	1
 10929  013362  0100               	movlb	0	; () banked
 10930  013364  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10931  013366  ECB3  F095         	call	_Port_Init	;wreg free
 10932                           
 10933                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 10934  01336A  0EA8               	movlw	low _PortC
 10935  01336C  0100               	movlb	0	; () banked
 10936  01336E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10937  013370  0E01               	movlw	high _PortC
 10938  013372  0100               	movlb	0	; () banked
 10939  013374  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10940  013376  0E02               	movlw	2
 10941  013378  0100               	movlb	0	; () banked
 10942  01337A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10943  01337C  ECB3  F095         	call	_Port_Init	;wreg free
 10944                           
 10945                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 10946  013380  0E94               	movlw	low _PortD
 10947  013382  0100               	movlb	0	; () banked
 10948  013384  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10949  013386  0E01               	movlw	high _PortD
 10950  013388  0100               	movlb	0	; () banked
 10951  01338A  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10952  01338C  0E03               	movlw	3
 10953  01338E  0100               	movlb	0	; () banked
 10954  013390  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10955  013392  ECB3  F095         	call	_Port_Init	;wreg free
 10956                           
 10957                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 10958  013396  0E8A               	movlw	low _PortE
 10959  013398  0100               	movlb	0	; () banked
 10960  01339A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10961  01339C  0E01               	movlw	high _PortE
 10962  01339E  0100               	movlb	0	; () banked
 10963  0133A0  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10964  0133A2  0E04               	movlw	4
 10965  0133A4  0100               	movlb	0	; () banked
 10966  0133A6  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10967  0133A8  ECB3  F095         	call	_Port_Init	;wreg free
 10968                           
 10969                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 10970  0133AC  0EB2               	movlw	low _PortF
 10971  0133AE  0100               	movlb	0	; () banked
 10972  0133B0  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10973  0133B2  0E01               	movlw	high _PortF
 10974  0133B4  0100               	movlb	0	; () banked
 10975  0133B6  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10976  0133B8  0E05               	movlw	5
 10977  0133BA  0100               	movlb	0	; () banked
 10978  0133BC  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10979  0133BE  ECB3  F095         	call	_Port_Init	;wreg free
 10980                           
 10981                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 10982  0133C2  0E80               	movlw	low _PortG
 10983  0133C4  0100               	movlb	0	; () banked
 10984  0133C6  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10985  0133C8  0E01               	movlw	high _PortG
 10986  0133CA  0100               	movlb	0	; () banked
 10987  0133CC  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10988  0133CE  0E06               	movlw	6
 10989  0133D0  0100               	movlb	0	; () banked
 10990  0133D2  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10991  0133D4  ECB3  F095         	call	_Port_Init	;wreg free
 10992                           
 10993                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 10994  0133D8  0EB2               	movlw	low _PortF
 10995  0133DA  0100               	movlb	0	; () banked
 10996  0133DC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 10997  0133DE  0E01               	movlw	high _PortF
 10998  0133E0  0100               	movlb	0	; () banked
 10999  0133E2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11000  0133E4  0E05               	movlw	5
 11001  0133E6  0100               	movlb	0	; () banked
 11002  0133E8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11003  0133EA  0E00               	movlw	0
 11004  0133EC  0100               	movlb	0	; () banked
 11005  0133EE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11006  0133F0  EC2D  F093         	call	_Port_SetPinType	;wreg free
 11007                           
 11008                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 11009  0133F4  0E9E               	movlw	low _PortB
 11010  0133F6  0100               	movlb	0	; () banked
 11011  0133F8  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 11012  0133FA  0E01               	movlw	high _PortB
 11013  0133FC  0100               	movlb	0	; () banked
 11014  0133FE  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 11015  013400  0E00               	movlw	0
 11016  013402  0100               	movlb	0	; () banked
 11017  013404  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 11018  013406  0E00               	movlw	0
 11019  013408  0100               	movlb	0	; () banked
 11020  01340A  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 11021  01340C  EC02  F08D         	call	_Port_SetQuadType	;wreg free
 11022                           
 11023                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 11024  013410  0EB2               	movlw	low _PortF
 11025  013412  0100               	movlb	0	; () banked
 11026  013414  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 11027  013416  0E01               	movlw	high _PortF
 11028  013418  0100               	movlb	0	; () banked
 11029  01341A  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11030  01341C  0E06               	movlw	6
 11031  01341E  0100               	movlb	0	; () banked
 11032  013420  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 11033  013422  0E03               	movlw	3
 11034  013424  0100               	movlb	0	; () banked
 11035  013426  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11036  013428  EC2D  F093         	call	_Port_SetPinType	;wreg free
 11037                           
 11038                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 11039  01342C  0E80               	movlw	low _PortG
 11040  01342E  0100               	movlb	0	; () banked
 11041  013430  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 11042  013432  0E01               	movlw	high _PortG
 11043  013434  0100               	movlb	0	; () banked
 11044  013436  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 11045  013438  0E03               	movlw	3
 11046  01343A  0100               	movlb	0	; () banked
 11047  01343C  6F9C               	movwf	Port_SetType@pType& (0+255),b
 11048  01343E  EC2D  F08E         	call	_Port_SetType	;wreg free
 11049                           
 11050                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 11051  013442  0E80               	movlw	low _PortG
 11052  013444  0100               	movlb	0	; () banked
 11053  013446  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 11054  013448  0E01               	movlw	high _PortG
 11055  01344A  0100               	movlb	0	; () banked
 11056  01344C  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11057  01344E  0E04               	movlw	4
 11058  013450  0100               	movlb	0	; () banked
 11059  013452  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 11060  013454  0E00               	movlw	0
 11061  013456  0100               	movlb	0	; () banked
 11062  013458  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 11063  01345A  EC72  F0A3         	call	_Port_SetPin	;wreg free
 11064                           
 11065                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 11066  01345E  0EB2               	movlw	low _PortF
 11067  013460  0100               	movlb	0	; () banked
 11068  013462  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 11069  013464  0E01               	movlw	high _PortF
 11070  013466  0100               	movlb	0	; () banked
 11071  013468  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 11072  01346A  0E06               	movlw	6
 11073  01346C  0100               	movlb	0	; () banked
 11074  01346E  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 11075  013470  0E01               	movlw	1
 11076  013472  0100               	movlb	0	; () banked
 11077  013474  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 11078  013476  EC72  F0A3         	call	_Port_SetPin	;wreg free
 11079                           
 11080                           ;MXK.c: 55: LED_Init(eLED1);
 11081  01347A  0E00               	movlw	0
 11082  01347C  EC1F  F0B0         	call	_LED_Init
 11083                           
 11084                           ;MXK.c: 56: LED_Init(eLED2);
 11085  013480  0E01               	movlw	1
 11086  013482  EC1F  F0B0         	call	_LED_Init
 11087                           
 11088                           ;MXK.c: 58: PIR1 = 0;
 11089  013486  0E00               	movlw	0
 11090  013488  6E9E               	movwf	3998,c	;volatile
 11091                           
 11092                           ;MXK.c: 59: PIR2 = 0;
 11093  01348A  0E00               	movlw	0
 11094  01348C  6EA1               	movwf	4001,c	;volatile
 11095                           
 11096                           ;MXK.c: 60: PIR3 = 0;
 11097  01348E  0E00               	movlw	0
 11098  013490  6EA4               	movwf	4004,c	;volatile
 11099                           
 11100                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 11101  013492  8E9B               	bsf	3995,7,c	;volatile
 11102                           
 11103                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 11104  013494  8C9B               	bsf	3995,6,c	;volatile
 11105                           
 11106                           ;MXK.c: 66: delay_ms(100);
 11107  013496  0E00               	movlw	0
 11108  013498  0100               	movlb	0	; () banked
 11109  01349A  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 11110  01349C  0E64               	movlw	100
 11111  01349E  6F60               	movwf	delay_ms@ms& (0+255),b
 11112  0134A0  EC1C  F0AF         	call	_delay_ms	;wreg free
 11113                           
 11114                           ;MXK.c: 68: RCONbits.IPEN = 1;
 11115  0134A4  8ED0               	bsf	4048,7,c	;volatile
 11116  0134A6  0012               	return		;funcret
 11117  0134A8                     __end_of_MXK_Init:
 11118                           	opt stack 0
 11119                           tosu	equ	0xFFF
 11120                           tosh	equ	0xFFE
 11121                           tosl	equ	0xFFD
 11122                           pclath	equ	0xFFA
 11123                           tblptru	equ	0xFF8
 11124                           tblptrh	equ	0xFF7
 11125                           tblptrl	equ	0xFF6
 11126                           tablat	equ	0xFF5
 11127                           prodh	equ	0xFF4
 11128                           prodl	equ	0xFF3
 11129                           postinc0	equ	0xFEE
 11130                           wreg	equ	0xFE8
 11131                           indf1	equ	0xFE7
 11132                           postdec1	equ	0xFE5
 11133                           fsr1h	equ	0xFE2
 11134                           fsr1l	equ	0xFE1
 11135                           indf2	equ	0xFDF
 11136                           postinc2	equ	0xFDE
 11137                           postdec2	equ	0xFDD
 11138                           plusw2	equ	0xFDB
 11139                           fsr2h	equ	0xFDA
 11140                           fsr2l	equ	0xFD9
 11141                           status	equ	0xFD8
 11142                           
 11143 ;; *************** function _Port_Init *****************
 11144 ;; Defined at:
 11145 ;;		line 150 in file "Library/Port.c"
 11146 ;; Parameters:    Size  Location     Type
 11147 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 11148 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11149 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11150 ;;  pPort           1   66[BANK0 ] enum E6786
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  i               1   69[BANK0 ] unsigned char 
 11153 ;; Return value:  Size  Location     Type
 11154 ;;                  1    wreg      void 
 11155 ;; Registers used:
 11156 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11157 ;; Tracked objects:
 11158 ;;		On entry : 0/0
 11159 ;;		On exit  : 0/0
 11160 ;;		Unchanged: 0/0
 11161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11162 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11166 ;;Total ram usage:        6 bytes
 11167 ;; Hardware stack levels used:    1
 11168 ;; Hardware stack levels required when called:   15
 11169 ;; This function calls:
 11170 ;;		_GetPortPORT
 11171 ;;		_GetPortProperties
 11172 ;;		_GetPortTRIS
 11173 ;;		_Port_Set
 11174 ;;		_Port_SetPinType
 11175 ;;		_Port_SetType
 11176 ;;		_Word_GetPair
 11177 ;; This function is called by:
 11178 ;;		_MXK_Init
 11179 ;; This function uses a non-reentrant model
 11180 ;;
 11181                           
 11182                           	psect	text44
 11183  012B66                     __ptext44:
 11184                           	opt stack 0
 11185  012B66                     _Port_Init:
 11186                           	opt stack 13
 11187                           
 11188                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 11189                           
 11190                           ;incstack = 0
 11191  012B66  0100               	movlb	0	; () banked
 11192  012B68  51A2               	movf	Port_Init@pPort& (0+255),w,b
 11193  012B6A  EC10  F0A8         	call	_GetPortProperties
 11194  012B6E  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 11195  012B72  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 11196  012B76  0100               	movlb	0	; () banked
 11197  012B78  C060  FFDE         	movff	?_GetPortProperties,postinc2
 11198  012B7C  0100               	movlb	0	; () banked
 11199  012B7E  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 11200                           
 11201                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 11202  012B82  0100               	movlb	0	; () banked
 11203  012B84  51A2               	movf	Port_Init@pPort& (0+255),w,b
 11204  012B86  EC63  F0A8         	call	_GetPortPORT
 11205  012B8A  0100               	movlb	0	; () banked
 11206  012B8C  EE20 F006          	lfsr	2,6
 11207  012B90  51A0               	movf	Port_Init@pInput& (0+255),w,b
 11208  012B92  26D9               	addwf	fsr2l,f,c
 11209  012B94  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11210  012B96  22DA               	addwfc	fsr2h,f,c
 11211  012B98  0100               	movlb	0	; () banked
 11212  012B9A  C060  FFDE         	movff	?_GetPortPORT,postinc2
 11213  012B9E  0100               	movlb	0	; () banked
 11214  012BA0  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 11215                           
 11216                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 11217  012BA4  0100               	movlb	0	; () banked
 11218  012BA6  51A2               	movf	Port_Init@pPort& (0+255),w,b
 11219  012BA8  EC63  F0A8         	call	_GetPortPORT
 11220  012BAC  0100               	movlb	0	; () banked
 11221  012BAE  EE20 F004          	lfsr	2,4
 11222  012BB2  51A0               	movf	Port_Init@pInput& (0+255),w,b
 11223  012BB4  26D9               	addwf	fsr2l,f,c
 11224  012BB6  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11225  012BB8  22DA               	addwfc	fsr2h,f,c
 11226  012BBA  0100               	movlb	0	; () banked
 11227  012BBC  C060  FFDE         	movff	?_GetPortPORT,postinc2
 11228  012BC0  0100               	movlb	0	; () banked
 11229  012BC2  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 11230                           
 11231                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 11232  012BC6  0100               	movlb	0	; () banked
 11233  012BC8  51A2               	movf	Port_Init@pPort& (0+255),w,b
 11234  012BCA  ECBD  F0A7         	call	_GetPortTRIS
 11235  012BCE  0100               	movlb	0	; () banked
 11236  012BD0  EE20 F002          	lfsr	2,2
 11237  012BD4  51A0               	movf	Port_Init@pInput& (0+255),w,b
 11238  012BD6  26D9               	addwf	fsr2l,f,c
 11239  012BD8  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11240  012BDA  22DA               	addwfc	fsr2h,f,c
 11241  012BDC  0100               	movlb	0	; () banked
 11242  012BDE  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 11243  012BE2  0100               	movlb	0	; () banked
 11244  012BE4  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 11245                           
 11246                           ; BSR set to: 0
 11247                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 11248  012BE8  0100               	movlb	0	; () banked
 11249  012BEA  EE20 F004          	lfsr	2,4
 11250  012BEE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 11251  012BF0  26D9               	addwf	fsr2l,f,c
 11252  012BF2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11253  012BF4  22DA               	addwfc	fsr2h,f,c
 11254  012BF6  CFDE F0A3          	movff	postinc2,??_Port_Init
 11255  012BFA  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 11256  012BFE  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 11257  012C02  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 11258  012C06  0E00               	movlw	0
 11259  012C08  6EDF               	movwf	indf2,c
 11260                           
 11261                           ; BSR set to: 0
 11262                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 11263  012C0A  0100               	movlb	0	; () banked
 11264  012C0C  EE20 F002          	lfsr	2,2
 11265  012C10  51A0               	movf	Port_Init@pInput& (0+255),w,b
 11266  012C12  26D9               	addwf	fsr2l,f,c
 11267  012C14  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 11268  012C16  22DA               	addwfc	fsr2h,f,c
 11269  012C18  CFDE F0A3          	movff	postinc2,??_Port_Init
 11270  012C1C  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 11271  012C20  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 11272  012C24  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 11273  012C28  0EFF               	movlw	255
 11274  012C2A  6EDF               	movwf	indf2,c
 11275                           
 11276                           ; BSR set to: 0
 11277                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 11278  012C2C  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 11279  012C30  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 11280  012C34  0E00               	movlw	0
 11281  012C36  0100               	movlb	0	; () banked
 11282  012C38  6F9C               	movwf	Port_SetType@pType& (0+255),b
 11283  012C3A  EC2D  F08E         	call	_Port_SetType	;wreg free
 11284                           
 11285                           ;Port.c: 166: UINT8 i;
 11286                           ;Port.c: 167: for (i=0; i<8; i++)
 11287  012C3E  0E00               	movlw	0
 11288  012C40  0100               	movlb	0	; () banked
 11289  012C42  6FA5               	movwf	Port_Init@i& (0+255),b
 11290  012C44                     l13851:
 11291                           
 11292                           ; BSR set to: 0
 11293  012C44  0E07               	movlw	7
 11294  012C46  0100               	movlb	0	; () banked
 11295  012C48  65A5               	cpfsgt	Port_Init@i& (0+255),b
 11296  012C4A  D031               	goto	l403
 11297  012C4C  D04B               	goto	u11280
 11298  012C4E                     
 11299                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 11300                           
 11301                           ; BSR set to: 0
 11302  012C4E  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11303  012C52  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11304  012C56  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 11305  012C5A  0E03               	movlw	3
 11306  012C5C  0100               	movlb	0	; () banked
 11307  012C5E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11308  012C60  EC2D  F093         	call	_Port_SetPinType	;wreg free
 11309                           
 11310                           ;Port.c: 173: break;
 11311  012C64  D03C               	goto	l405
 11312  012C66                     
 11313                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 11314  012C66  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11315  012C6A  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11316  012C6E  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 11317  012C72  0E02               	movlw	2
 11318  012C74  0100               	movlb	0	; () banked
 11319  012C76  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11320  012C78  EC2D  F093         	call	_Port_SetPinType	;wreg free
 11321                           
 11322                           ;Port.c: 176: break;
 11323  012C7C  D030               	goto	l405
 11324  012C7E                     
 11325                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 11326  012C7E  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11327  012C82  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11328  012C86  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 11329  012C8A  0E01               	movlw	1
 11330  012C8C  0100               	movlb	0	; () banked
 11331  012C8E  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11332  012C90  EC2D  F093         	call	_Port_SetPinType	;wreg free
 11333                           
 11334                           ;Port.c: 179: break;
 11335  012C94  D024               	goto	l405
 11336  012C96                     
 11337                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 11338  012C96  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 11339  012C9A  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 11340  012C9E  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 11341  012CA2  0E00               	movlw	0
 11342  012CA4  0100               	movlb	0	; () banked
 11343  012CA6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 11344  012CA8  EC2D  F093         	call	_Port_SetPinType	;wreg free
 11345                           
 11346                           ;Port.c: 183: }
 11347                           
 11348                           ;Port.c: 182: break;
 11349  012CAC  D018               	goto	l405
 11350  012CAE                     l403:
 11351  012CAE  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 11352  012CB2  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 11353  012CB6  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 11354  012CBA  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 11355  012CBE  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 11356  012CC2  EC93  F0B3         	call	_Word_GetPair	;wreg free
 11357                           
 11358                           ; Switch size 1, requested type "space"
 11359                           ; Number of cases is 4, Range of values is 0 to 3
 11360                           ; switch strategies available:
 11361                           ; Name         Instructions Cycles
 11362                           ; simple_byte           13     7 (average)
 11363                           ;	Chosen strategy is simple_byte
 11364  012CC6  0A00               	xorlw	0	; case 0
 11365  012CC8  B4D8               	btfsc	status,2,c
 11366  012CCA  D7C1               	goto	l404
 11367  012CCC  0A01               	xorlw	1	; case 1
 11368  012CCE  B4D8               	btfsc	status,2,c
 11369  012CD0  D7D6               	goto	l407
 11370  012CD2  0A03               	xorlw	3	; case 2
 11371  012CD4  B4D8               	btfsc	status,2,c
 11372  012CD6  D7C7               	goto	l406
 11373  012CD8  0A01               	xorlw	1	; case 3
 11374  012CDA  B4D8               	btfsc	status,2,c
 11375  012CDC  D7DC               	goto	l408
 11376  012CDE                     l405:
 11377  012CDE  0100               	movlb	0	; () banked
 11378  012CE0  2BA5               	incf	Port_Init@i& (0+255),f,b
 11379  012CE2  D7B0               	goto	l13851
 11380  012CE4                     u11280:
 11381                           
 11382                           ; BSR set to: 0
 11383                           ;Port.c: 184: }
 11384                           ;Port.c: 185: Port_Set(pInput, 0x00);
 11385                           
 11386                           ; BSR set to: 0
 11387  012CE4  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 11388  012CE8  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 11389  012CEC  0E00               	movlw	0
 11390  012CEE  0100               	movlb	0	; () banked
 11391  012CF0  6F71               	movwf	Port_Set@pValue& (0+255),b
 11392  012CF2  EC96  F088         	call	_Port_Set	;wreg free
 11393  012CF6  0012               	return		;funcret
 11394  012CF8                     __end_of_Port_Init:
 11395                           	opt stack 0
 11396                           tosu	equ	0xFFF
 11397                           tosh	equ	0xFFE
 11398                           tosl	equ	0xFFD
 11399                           pclath	equ	0xFFA
 11400                           tblptru	equ	0xFF8
 11401                           tblptrh	equ	0xFF7
 11402                           tblptrl	equ	0xFF6
 11403                           tablat	equ	0xFF5
 11404                           prodh	equ	0xFF4
 11405                           prodl	equ	0xFF3
 11406                           postinc0	equ	0xFEE
 11407                           wreg	equ	0xFE8
 11408                           indf1	equ	0xFE7
 11409                           postdec1	equ	0xFE5
 11410                           fsr1h	equ	0xFE2
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           plusw2	equ	0xFDB
 11416                           fsr2h	equ	0xFDA
 11417                           fsr2l	equ	0xFD9
 11418                           status	equ	0xFD8
 11419                           
 11420 ;; *************** function _Port_SetType *****************
 11421 ;; Defined at:
 11422 ;;		line 513 in file "Library/Port.c"
 11423 ;; Parameters:    Size  Location     Type
 11424 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 11425 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11426 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11427 ;;  pType           1   60[BANK0 ] enum E6795
 11428 ;; Auto vars:     Size  Location     Type
 11429 ;;  Output          1   63[BANK0 ] enum E6475
 11430 ;; Return value:  Size  Location     Type
 11431 ;;                  1    wreg      enum E6475
 11432 ;; Registers used:
 11433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11434 ;; Tracked objects:
 11435 ;;		On entry : 0/0
 11436 ;;		On exit  : 0/0
 11437 ;;		Unchanged: 0/0
 11438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11439 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11440 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11441 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11442 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11443 ;;Total ram usage:        6 bytes
 11444 ;; Hardware stack levels used:    1
 11445 ;; Hardware stack levels required when called:   14
 11446 ;; This function calls:
 11447 ;;		_Port_CheckPortType
 11448 ;;		_Word_SetPair
 11449 ;; This function is called by:
 11450 ;;		_Port_Init
 11451 ;;		_MXK_Init
 11452 ;; This function uses a non-reentrant model
 11453 ;;
 11454                           
 11455                           	psect	text45
 11456  011C5A                     __ptext45:
 11457                           	opt stack 0
 11458  011C5A                     _Port_SetType:
 11459                           	opt stack 14
 11460                           
 11461                           ;Port.c: 515: ePinError Output = ePinErrorState;
 11462                           
 11463                           ;incstack = 0
 11464  011C5A  0E05               	movlw	5
 11465  011C5C  0100               	movlb	0	; () banked
 11466  011C5E  6F9F               	movwf	Port_SetType@Output& (0+255),b
 11467                           
 11468                           ;Port.c: 517: switch (pType)
 11469  011C60  D07A               	goto	l509
 11470  011C62                     
 11471                           ; BSR set to: 0
 11472                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 11473                           
 11474                           ; BSR set to: 0
 11475  011C62  0100               	movlb	0	; () banked
 11476  011C64  EE20 F002          	lfsr	2,2
 11477  011C68  519A               	movf	Port_SetType@pInput& (0+255),w,b
 11478  011C6A  26D9               	addwf	fsr2l,f,c
 11479  011C6C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11480  011C6E  22DA               	addwfc	fsr2h,f,c
 11481  011C70  CFDE F09D          	movff	postinc2,??_Port_SetType
 11482  011C74  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 11483  011C78  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 11484  011C7C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 11485  011C80  0EFF               	movlw	255
 11486  011C82  D067               	goto	L9
 11487  011C84                     
 11488                           ; BSR set to: 0
 11489                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 11490                           
 11491                           ; BSR set to: 0
 11492  011C84  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 11493  011C88  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 11494  011C8C  0E01               	movlw	1
 11495  011C8E  0100               	movlb	0	; () banked
 11496  011C90  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 11497  011C92  EC1E  F0B2         	call	_Port_CheckPortType	;wreg free
 11498  011C96  0100               	movlb	0	; () banked
 11499  011C98  6F9F               	movwf	Port_SetType@Output& (0+255),b
 11500  011C9A  0100               	movlb	0	; () banked
 11501  011C9C  519F               	movf	Port_SetType@Output& (0+255),w,b
 11502  011C9E  A4D8               	btfss	status,2,c
 11503  011CA0  0012               	return	
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;Port.c: 527: {
 11507                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 11508  011CA2  0100               	movlb	0	; () banked
 11509  011CA4  EE20 F002          	lfsr	2,2
 11510  011CA8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 11511  011CAA  26D9               	addwf	fsr2l,f,c
 11512  011CAC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11513  011CAE  22DA               	addwfc	fsr2h,f,c
 11514  011CB0  CFDE F09D          	movff	postinc2,??_Port_SetType
 11515  011CB4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 11516  011CB8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 11517  011CBC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 11518  011CC0  0E00               	movlw	0
 11519  011CC2  6EDF               	movwf	indf2,c
 11520                           
 11521                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 11522  011CC4  0100               	movlb	0	; () banked
 11523  011CC6  EE20 F004          	lfsr	2,4
 11524  011CCA  D036               	goto	L21
 11525  011CCC                     
 11526                           ; BSR set to: 0
 11527                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 11528                           
 11529                           ; BSR set to: 0
 11530  011CCC  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 11531  011CD0  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 11532  011CD4  0E02               	movlw	2
 11533  011CD6  0100               	movlb	0	; () banked
 11534  011CD8  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 11535  011CDA  EC1E  F0B2         	call	_Port_CheckPortType	;wreg free
 11536  011CDE  0100               	movlb	0	; () banked
 11537  011CE0  6F9F               	movwf	Port_SetType@Output& (0+255),b
 11538  011CE2  0100               	movlb	0	; () banked
 11539  011CE4  519F               	movf	Port_SetType@Output& (0+255),w,b
 11540  011CE6  A4D8               	btfss	status,2,c
 11541  011CE8  0012               	return	
 11542                           
 11543                           ; BSR set to: 0
 11544                           ;Port.c: 538: {
 11545                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 11546  011CEA  0100               	movlb	0	; () banked
 11547  011CEC  EE20 F002          	lfsr	2,2
 11548  011CF0  519A               	movf	Port_SetType@pInput& (0+255),w,b
 11549  011CF2  26D9               	addwf	fsr2l,f,c
 11550  011CF4  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11551  011CF6  22DA               	addwfc	fsr2h,f,c
 11552  011CF8  CFDE F09D          	movff	postinc2,??_Port_SetType
 11553  011CFC  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 11554  011D00  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 11555  011D04  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 11556  011D08  0EFF               	movlw	255
 11557  011D0A  6EDF               	movwf	indf2,c
 11558                           
 11559                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 11560  011D0C  0100               	movlb	0	; () banked
 11561  011D0E  EE20 F004          	lfsr	2,4
 11562  011D12  D7AA               	goto	L10
 11563  011D14                     
 11564                           ; BSR set to: 0
 11565                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 11566                           
 11567                           ; BSR set to: 0
 11568  011D14  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 11569  011D18  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 11570  011D1C  0E00               	movlw	0
 11571  011D1E  0100               	movlb	0	; () banked
 11572  011D20  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 11573  011D22  EC1E  F0B2         	call	_Port_CheckPortType	;wreg free
 11574  011D26  0100               	movlb	0	; () banked
 11575  011D28  6F9F               	movwf	Port_SetType@Output& (0+255),b
 11576  011D2A  0100               	movlb	0	; () banked
 11577  011D2C  519F               	movf	Port_SetType@Output& (0+255),w,b
 11578  011D2E  A4D8               	btfss	status,2,c
 11579  011D30  0012               	return	
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;Port.c: 549: {
 11583                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 11584  011D32  0100               	movlb	0	; () banked
 11585  011D34  EE20 F002          	lfsr	2,2
 11586  011D38                     L21:
 11587  011D38  519A               	movf	Port_SetType@pInput& (0+255),w,b
 11588  011D3A  26D9               	addwf	fsr2l,f,c
 11589  011D3C  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 11590  011D3E  22DA               	addwfc	fsr2h,f,c
 11591  011D40  CFDE F09D          	movff	postinc2,??_Port_SetType
 11592  011D44  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 11593  011D48  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 11594  011D4C  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 11595  011D50  0E00               	movlw	0
 11596  011D52                     L9:
 11597  011D52  6EDF               	movwf	indf2,c
 11598                           
 11599                           ;Port.c: 552: }
 11600  011D54  D00E               	goto	l511
 11601  011D56                     l509:
 11602                           
 11603                           ; BSR set to: 0
 11604                           
 11605                           ; BSR set to: 0
 11606  011D56  0100               	movlb	0	; () banked
 11607  011D58  519C               	movf	Port_SetType@pType& (0+255),w,b
 11608                           
 11609                           ; Switch size 1, requested type "space"
 11610                           ; Number of cases is 4, Range of values is 0 to 3
 11611                           ; switch strategies available:
 11612                           ; Name         Instructions Cycles
 11613                           ; simple_byte           13     7 (average)
 11614                           ;	Chosen strategy is simple_byte
 11615  011D5A  0A00               	xorlw	0	; case 0
 11616  011D5C  B4D8               	btfsc	status,2,c
 11617  011D5E  D781               	goto	l510
 11618  011D60  0A01               	xorlw	1	; case 1
 11619  011D62  B4D8               	btfsc	status,2,c
 11620  011D64  D78F               	goto	l512
 11621  011D66  0A03               	xorlw	3	; case 2
 11622  011D68  B4D8               	btfsc	status,2,c
 11623  011D6A  D7B0               	goto	l516
 11624  011D6C  0A01               	xorlw	1	; case 3
 11625  011D6E  B4D8               	btfsc	status,2,c
 11626  011D70  D7D1               	goto	l519
 11627  011D72                     l511:
 11628                           
 11629                           ; BSR set to: 0
 11630                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 11631                           
 11632                           ; BSR set to: 0
 11633  011D72  0E08               	movlw	8
 11634  011D74  0100               	movlb	0	; () banked
 11635  011D76  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11636  011D78  0100               	movlb	0	; () banked
 11637  011D7A  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11638  011D7C  0E00               	movlw	0
 11639  011D7E  0100               	movlb	0	; () banked
 11640  011D80  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11641  011D82  0100               	movlb	0	; () banked
 11642  011D84  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11643  011D86  0E00               	movlw	0
 11644  011D88  0100               	movlb	0	; () banked
 11645  011D8A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11646  011D8C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11647  011D90  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11648                           
 11649                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 11650  011D94  0E08               	movlw	8
 11651  011D96  0100               	movlb	0	; () banked
 11652  011D98  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11653  011D9A  0100               	movlb	0	; () banked
 11654  011D9C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11655  011D9E  0E00               	movlw	0
 11656  011DA0  0100               	movlb	0	; () banked
 11657  011DA2  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11658  011DA4  0100               	movlb	0	; () banked
 11659  011DA6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11660  011DA8  0E01               	movlw	1
 11661  011DAA  0100               	movlb	0	; () banked
 11662  011DAC  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11663  011DAE  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11664  011DB2  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11665                           
 11666                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 11667  011DB6  0E08               	movlw	8
 11668  011DB8  0100               	movlb	0	; () banked
 11669  011DBA  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11670  011DBC  0100               	movlb	0	; () banked
 11671  011DBE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11672  011DC0  0E00               	movlw	0
 11673  011DC2  0100               	movlb	0	; () banked
 11674  011DC4  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11675  011DC6  0100               	movlb	0	; () banked
 11676  011DC8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11677  011DCA  0E02               	movlw	2
 11678  011DCC  0100               	movlb	0	; () banked
 11679  011DCE  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11680  011DD0  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11681  011DD4  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11682                           
 11683                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 11684  011DD8  0E08               	movlw	8
 11685  011DDA  0100               	movlb	0	; () banked
 11686  011DDC  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11687  011DDE  0100               	movlb	0	; () banked
 11688  011DE0  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11689  011DE2  0E00               	movlw	0
 11690  011DE4  0100               	movlb	0	; () banked
 11691  011DE6  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11692  011DE8  0100               	movlb	0	; () banked
 11693  011DEA  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11694  011DEC  0E03               	movlw	3
 11695  011DEE  0100               	movlb	0	; () banked
 11696  011DF0  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11697  011DF2  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11698  011DF6  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11699                           
 11700                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 11701  011DFA  0E08               	movlw	8
 11702  011DFC  0100               	movlb	0	; () banked
 11703  011DFE  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11704  011E00  0100               	movlb	0	; () banked
 11705  011E02  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11706  011E04  0E00               	movlw	0
 11707  011E06  0100               	movlb	0	; () banked
 11708  011E08  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11709  011E0A  0100               	movlb	0	; () banked
 11710  011E0C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11711  011E0E  0E04               	movlw	4
 11712  011E10  0100               	movlb	0	; () banked
 11713  011E12  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11714  011E14  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11715  011E18  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11716                           
 11717                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 11718  011E1C  0E08               	movlw	8
 11719  011E1E  0100               	movlb	0	; () banked
 11720  011E20  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11721  011E22  0100               	movlb	0	; () banked
 11722  011E24  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11723  011E26  0E00               	movlw	0
 11724  011E28  0100               	movlb	0	; () banked
 11725  011E2A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11726  011E2C  0100               	movlb	0	; () banked
 11727  011E2E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11728  011E30  0E05               	movlw	5
 11729  011E32  0100               	movlb	0	; () banked
 11730  011E34  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11731  011E36  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11732  011E3A  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11733                           
 11734                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 11735  011E3E  0E08               	movlw	8
 11736  011E40  0100               	movlb	0	; () banked
 11737  011E42  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11738  011E44  0100               	movlb	0	; () banked
 11739  011E46  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11740  011E48  0E00               	movlw	0
 11741  011E4A  0100               	movlb	0	; () banked
 11742  011E4C  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11743  011E4E  0100               	movlb	0	; () banked
 11744  011E50  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11745  011E52  0E06               	movlw	6
 11746  011E54  0100               	movlb	0	; () banked
 11747  011E56  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11748  011E58  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11749  011E5C  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11750                           
 11751                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 11752  011E60  0E08               	movlw	8
 11753  011E62  0100               	movlb	0	; () banked
 11754  011E64  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 11755  011E66  0100               	movlb	0	; () banked
 11756  011E68  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 11757  011E6A  0E00               	movlw	0
 11758  011E6C  0100               	movlb	0	; () banked
 11759  011E6E  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 11760  011E70  0100               	movlb	0	; () banked
 11761  011E72  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 11762  011E74  0E07               	movlw	7
 11763  011E76  0100               	movlb	0	; () banked
 11764  011E78  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 11765  011E7A  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 11766  011E7E  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 11767  011E82  0012               	return	
 11768  011E84                     __end_of_Port_SetType:
 11769                           	opt stack 0
 11770                           tosu	equ	0xFFF
 11771                           tosh	equ	0xFFE
 11772                           tosl	equ	0xFFD
 11773                           pclath	equ	0xFFA
 11774                           tblptru	equ	0xFF8
 11775                           tblptrh	equ	0xFF7
 11776                           tblptrl	equ	0xFF6
 11777                           tablat	equ	0xFF5
 11778                           prodh	equ	0xFF4
 11779                           prodl	equ	0xFF3
 11780                           postinc0	equ	0xFEE
 11781                           wreg	equ	0xFE8
 11782                           indf1	equ	0xFE7
 11783                           postdec1	equ	0xFE5
 11784                           fsr1h	equ	0xFE2
 11785                           fsr1l	equ	0xFE1
 11786                           indf2	equ	0xFDF
 11787                           postinc2	equ	0xFDE
 11788                           postdec2	equ	0xFDD
 11789                           plusw2	equ	0xFDB
 11790                           fsr2h	equ	0xFDA
 11791                           fsr2l	equ	0xFD9
 11792                           status	equ	0xFD8
 11793                           
 11794 ;; *************** function _Port_CheckPortType *****************
 11795 ;; Defined at:
 11796 ;;		line 138 in file "Library/Port.c"
 11797 ;; Parameters:    Size  Location     Type
 11798 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 11799 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11800 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11801 ;;  pDrive          1   56[BANK0 ] enum E6469
 11802 ;; Auto vars:     Size  Location     Type
 11803 ;;  Output          1   57[BANK0 ] enum E6475
 11804 ;; Return value:  Size  Location     Type
 11805 ;;                  1    wreg      enum E6475
 11806 ;; Registers used:
 11807 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11808 ;; Tracked objects:
 11809 ;;		On entry : 0/0
 11810 ;;		On exit  : 0/0
 11811 ;;		Unchanged: 0/0
 11812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11813 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11816 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11817 ;;Total ram usage:        4 bytes
 11818 ;; Hardware stack levels used:    1
 11819 ;; Hardware stack levels required when called:   13
 11820 ;; This function calls:
 11821 ;;		_Port_CheckQuadType
 11822 ;; This function is called by:
 11823 ;;		_Port_SetType
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           	psect	text46
 11828  01643C                     __ptext46:
 11829                           	opt stack 0
 11830  01643C                     _Port_CheckPortType:
 11831                           	opt stack 14
 11832                           
 11833                           ;Port.c: 140: ePinError Output = ePinErrorState;
 11834                           
 11835                           ;incstack = 0
 11836  01643C  0E05               	movlw	5
 11837  01643E  0100               	movlb	0	; () banked
 11838  016440  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 11839                           
 11840                           ; BSR set to: 0
 11841                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 11842  016442  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 11843  016446  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 11844  01644A  0E00               	movlw	0
 11845  01644C  0100               	movlb	0	; () banked
 11846  01644E  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 11847  016450  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 11848  016454  ECDD  F0B0         	call	_Port_CheckQuadType	;wreg free
 11849  016458  0100               	movlb	0	; () banked
 11850  01645A  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 11851  01645C  0100               	movlb	0	; () banked
 11852  01645E  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 11853  016460  A4D8               	btfss	status,2,c
 11854  016462  D00D               	goto	l397
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 11858  016464  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 11859  016468  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 11860  01646C  0E01               	movlw	1
 11861  01646E  0100               	movlb	0	; () banked
 11862  016470  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 11863  016472  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 11864  016476  ECDD  F0B0         	call	_Port_CheckQuadType	;wreg free
 11865  01647A  0100               	movlb	0	; () banked
 11866  01647C  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 11867  01647E                     l397:
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;Port.c: 146: return Output;
 11871                           
 11872                           ; BSR set to: 0
 11873  01647E  0100               	movlb	0	; () banked
 11874  016480  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 11875  016482  0012               	return	
 11876  016484                     __end_of_Port_CheckPortType:
 11877                           	opt stack 0
 11878                           tosu	equ	0xFFF
 11879                           tosh	equ	0xFFE
 11880                           tosl	equ	0xFFD
 11881                           pclath	equ	0xFFA
 11882                           tblptru	equ	0xFF8
 11883                           tblptrh	equ	0xFF7
 11884                           tblptrl	equ	0xFF6
 11885                           tablat	equ	0xFF5
 11886                           prodh	equ	0xFF4
 11887                           prodl	equ	0xFF3
 11888                           postinc0	equ	0xFEE
 11889                           wreg	equ	0xFE8
 11890                           indf1	equ	0xFE7
 11891                           postdec1	equ	0xFE5
 11892                           fsr1h	equ	0xFE2
 11893                           fsr1l	equ	0xFE1
 11894                           indf2	equ	0xFDF
 11895                           postinc2	equ	0xFDE
 11896                           postdec2	equ	0xFDD
 11897                           plusw2	equ	0xFDB
 11898                           fsr2h	equ	0xFDA
 11899                           fsr2l	equ	0xFD9
 11900                           status	equ	0xFD8
 11901                           
 11902 ;; *************** function _Port_Set *****************
 11903 ;; Defined at:
 11904 ;;		line 570 in file "Library/Port.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 11907 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11908 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11909 ;;  pValue          1   17[BANK0 ] unsigned char 
 11910 ;; Auto vars:     Size  Location     Type
 11911 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 11912 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 11913 ;;  Type            1   38[BANK0 ] enum E6795
 11914 ;; Return value:  Size  Location     Type
 11915 ;;                  1    wreg      void 
 11916 ;; Registers used:
 11917 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11918 ;; Tracked objects:
 11919 ;;		On entry : 0/0
 11920 ;;		On exit  : 0/0
 11921 ;;		Unchanged: 0/0
 11922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11923 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11924 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11925 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11926 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11927 ;;Total ram usage:       24 bytes
 11928 ;; Hardware stack levels used:    1
 11929 ;; Hardware stack levels required when called:   10
 11930 ;; This function calls:
 11931 ;;		_Byte_SetByte
 11932 ;;		_Word_GetPair
 11933 ;; This function is called by:
 11934 ;;		_Port_Init
 11935 ;;		_Port_Toggle
 11936 ;; This function uses a non-reentrant model
 11937 ;;
 11938                           
 11939                           	psect	text47
 11940  01112C                     __ptext47:
 11941                           	opt stack 0
 11942  01112C                     _Port_Set:
 11943                           	opt stack 17
 11944                           
 11945                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;incstack = 0
 11949  01112C  0E08               	movlw	8
 11950  01112E  0100               	movlb	0	; () banked
 11951  011130  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11952  011132  0100               	movlb	0	; () banked
 11953  011134  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11954  011136  0E00               	movlw	0
 11955  011138  0100               	movlb	0	; () banked
 11956  01113A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11957  01113C  0100               	movlb	0	; () banked
 11958  01113E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11959  011140  0E00               	movlw	0
 11960  011142  0100               	movlb	0	; () banked
 11961  011144  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11962  011146  EC93  F0B3         	call	_Word_GetPair	;wreg free
 11963  01114A  0100               	movlb	0	; () banked
 11964  01114C  6F86               	movwf	Port_Set@Type& (0+255),b
 11965                           
 11966                           ; BSR set to: 0
 11967                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 11968  01114E  0100               	movlb	0	; () banked
 11969  011150  5186               	movf	Port_Set@Type& (0+255),w,b
 11970  011152  0100               	movlb	0	; () banked
 11971  011154  6F72               	movwf	??_Port_Set& (0+255),b
 11972  011156  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11973  011158  0E0E               	movlw	14
 11974  01115A                     u9805:
 11975  01115A  90D8               	bcf	status,0,c
 11976  01115C  0100               	movlb	0	; () banked
 11977  01115E  3772               	rlcf	??_Port_Set& (0+255),f,b
 11978  011160  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11979  011162  2EE8               	decfsz	wreg,f,c
 11980  011164  D7FA               	goto	u9805
 11981  011166  0100               	movlb	0	; () banked
 11982  011168  5186               	movf	Port_Set@Type& (0+255),w,b
 11983  01116A  0100               	movlb	0	; () banked
 11984  01116C  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 11985  01116E  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 11986  011170  0E0C               	movlw	12
 11987  011172                     u9815:
 11988  011172  90D8               	bcf	status,0,c
 11989  011174  0100               	movlb	0	; () banked
 11990  011176  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 11991  011178  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 11992  01117A  2EE8               	decfsz	wreg,f,c
 11993  01117C  D7FA               	goto	u9815
 11994  01117E  0100               	movlb	0	; () banked
 11995  011180  5186               	movf	Port_Set@Type& (0+255),w,b
 11996  011182  0100               	movlb	0	; () banked
 11997  011184  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 11998  011186  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 11999  011188  0E0A               	movlw	10
 12000  01118A                     u9825:
 12001  01118A  90D8               	bcf	status,0,c
 12002  01118C  0100               	movlb	0	; () banked
 12003  01118E  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 12004  011190  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 12005  011192  2EE8               	decfsz	wreg,f,c
 12006  011194  D7FA               	goto	u9825
 12007  011196  0100               	movlb	0	; () banked
 12008  011198  5186               	movf	Port_Set@Type& (0+255),w,b
 12009  01119A  0100               	movlb	0	; () banked
 12010  01119C  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 12011  01119E  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 12012  0111A0  0100               	movlb	0	; () banked
 12013  0111A2  5186               	movf	Port_Set@Type& (0+255),w,b
 12014  0111A4  0100               	movlb	0	; () banked
 12015  0111A6  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 12016  0111A8  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 12017  0111AA  0E06               	movlw	6
 12018  0111AC                     u9835:
 12019  0111AC  90D8               	bcf	status,0,c
 12020  0111AE  0100               	movlb	0	; () banked
 12021  0111B0  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 12022  0111B2  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 12023  0111B4  2EE8               	decfsz	wreg,f,c
 12024  0111B6  D7FA               	goto	u9835
 12025  0111B8  0100               	movlb	0	; () banked
 12026  0111BA  5186               	movf	Port_Set@Type& (0+255),w,b
 12027  0111BC  0100               	movlb	0	; () banked
 12028  0111BE  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 12029  0111C0  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 12030  0111C2  0100               	movlb	0	; () banked
 12031  0111C4  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 12032  0111C6  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 12033  0111C8  0EF0               	movlw	240
 12034  0111CA  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 12035  0111CC  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 12036  0111CE  0B0F               	andlw	15
 12037  0111D0  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 12038  0111D2  0EF0               	movlw	240
 12039  0111D4  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 12040  0111D6  0100               	movlb	0	; () banked
 12041  0111D8  5186               	movf	Port_Set@Type& (0+255),w,b
 12042  0111DA  0100               	movlb	0	; () banked
 12043  0111DC  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 12044  0111DE  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 12045  0111E0  0100               	movlb	0	; () banked
 12046  0111E2  90D8               	bcf	status,0,c
 12047  0111E4  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 12048  0111E6  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 12049  0111E8  0100               	movlb	0	; () banked
 12050  0111EA  90D8               	bcf	status,0,c
 12051  0111EC  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 12052  0111EE  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 12053  0111F0  0100               	movlb	0	; () banked
 12054  0111F2  5186               	movf	Port_Set@Type& (0+255),w,b
 12055  0111F4  0100               	movlb	0	; () banked
 12056  0111F6  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 12057  0111F8  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 12058  0111FA  0100               	movlb	0	; () banked
 12059  0111FC  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 12060  0111FE  0100               	movlb	0	; () banked
 12061  011200  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12062  011202  0100               	movlb	0	; () banked
 12063  011204  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 12064  011206  0100               	movlb	0	; () banked
 12065  011208  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12066  01120A  0100               	movlb	0	; () banked
 12067  01120C  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 12068  01120E  0100               	movlb	0	; () banked
 12069  011210  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12070  011212  0100               	movlb	0	; () banked
 12071  011214  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 12072  011216  0100               	movlb	0	; () banked
 12073  011218  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12074  01121A  0100               	movlb	0	; () banked
 12075  01121C  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 12076  01121E  0100               	movlb	0	; () banked
 12077  011220  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12078  011222  0100               	movlb	0	; () banked
 12079  011224  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 12080  011226  0100               	movlb	0	; () banked
 12081  011228  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12082  01122A  0100               	movlb	0	; () banked
 12083  01122C  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 12084  01122E  0100               	movlb	0	; () banked
 12085  011230  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12086  011232  0100               	movlb	0	; () banked
 12087  011234  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 12088  011236  0100               	movlb	0	; () banked
 12089  011238  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12090  01123A  0100               	movlb	0	; () banked
 12091  01123C  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 12092  01123E  0100               	movlb	0	; () banked
 12093  011240  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12094  011242  0100               	movlb	0	; () banked
 12095  011244  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 12096  011246  0100               	movlb	0	; () banked
 12097  011248  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12098  01124A  0100               	movlb	0	; () banked
 12099  01124C  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 12100  01124E  0100               	movlb	0	; () banked
 12101  011250  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 12102  011252  0100               	movlb	0	; () banked
 12103  011254  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 12104  011256  0100               	movlb	0	; () banked
 12105  011258  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 12106  01125A  0100               	movlb	0	; () banked
 12107  01125C  5172               	movf	??_Port_Set& (0+255),w,b
 12108  01125E  0100               	movlb	0	; () banked
 12109  011260  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 12110  011262  0100               	movlb	0	; () banked
 12111  011264  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 12112  011266  0100               	movlb	0	; () banked
 12113  011268  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12114  01126A  0100               	movlb	0	; () banked
 12115  01126C  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 12116  01126E  0100               	movlb	0	; () banked
 12117  011270  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 12118                           
 12119                           ; BSR set to: 0
 12120                           ;Port.c: 574: UINT16 TypeActual = Type;
 12121  011272  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 12122  011276  0100               	movlb	0	; () banked
 12123  011278  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 12124                           
 12125                           ; BSR set to: 0
 12126                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 12127  01127A  0E08               	movlw	8
 12128  01127C  0100               	movlb	0	; () banked
 12129  01127E  256F               	addwf	Port_Set@pInput& (0+255),w,b
 12130  011280  0100               	movlb	0	; () banked
 12131  011282  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12132  011284  0E00               	movlw	0
 12133  011286  0100               	movlb	0	; () banked
 12134  011288  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12135  01128A  0100               	movlb	0	; () banked
 12136  01128C  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12137  01128E  0E01               	movlw	1
 12138  011290  0100               	movlb	0	; () banked
 12139  011292  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 12140  011294  EC93  F0B3         	call	_Word_GetPair	;wreg free
 12141  011298  0100               	movlb	0	; () banked
 12142  01129A  6F72               	movwf	??_Port_Set& (0+255),b
 12143  01129C  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 12144  01129E  0100               	movlb	0	; () banked
 12145  0112A0  90D8               	bcf	status,0,c
 12146  0112A2  3772               	rlcf	??_Port_Set& (0+255),f,b
 12147  0112A4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12148  0112A6  0100               	movlb	0	; () banked
 12149  0112A8  90D8               	bcf	status,0,c
 12150  0112AA  3772               	rlcf	??_Port_Set& (0+255),f,b
 12151  0112AC  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12152  0112AE  0100               	movlb	0	; () banked
 12153  0112B0  5172               	movf	??_Port_Set& (0+255),w,b
 12154  0112B2  0100               	movlb	0	; () banked
 12155  0112B4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12156  0112B6  0100               	movlb	0	; () banked
 12157  0112B8  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12158  0112BA  0100               	movlb	0	; () banked
 12159  0112BC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12160                           
 12161                           ; BSR set to: 0
 12162                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 12163  0112BE  0E08               	movlw	8
 12164  0112C0  0100               	movlb	0	; () banked
 12165  0112C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 12166  0112C4  0100               	movlb	0	; () banked
 12167  0112C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12168  0112C8  0E00               	movlw	0
 12169  0112CA  0100               	movlb	0	; () banked
 12170  0112CC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12171  0112CE  0100               	movlb	0	; () banked
 12172  0112D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12173  0112D2  0E02               	movlw	2
 12174  0112D4  0100               	movlb	0	; () banked
 12175  0112D6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 12176  0112D8  EC93  F0B3         	call	_Word_GetPair	;wreg free
 12177  0112DC  0100               	movlb	0	; () banked
 12178  0112DE  6F72               	movwf	??_Port_Set& (0+255),b
 12179  0112E0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 12180  0112E2  0100               	movlb	0	; () banked
 12181  0112E4  3B72               	swapf	??_Port_Set& (0+255),f,b
 12182  0112E6  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 12183  0112E8  0EF0               	movlw	240
 12184  0112EA  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 12185  0112EC  5172               	movf	??_Port_Set& (0+255),w,b
 12186  0112EE  0B0F               	andlw	15
 12187  0112F0  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 12188  0112F2  0EF0               	movlw	240
 12189  0112F4  1772               	andwf	??_Port_Set& (0+255),f,b
 12190  0112F6  0100               	movlb	0	; () banked
 12191  0112F8  5172               	movf	??_Port_Set& (0+255),w,b
 12192  0112FA  0100               	movlb	0	; () banked
 12193  0112FC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12194  0112FE  0100               	movlb	0	; () banked
 12195  011300  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12196  011302  0100               	movlb	0	; () banked
 12197  011304  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12198                           
 12199                           ; BSR set to: 0
 12200                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 12201  011306  0E08               	movlw	8
 12202  011308  0100               	movlb	0	; () banked
 12203  01130A  256F               	addwf	Port_Set@pInput& (0+255),w,b
 12204  01130C  0100               	movlb	0	; () banked
 12205  01130E  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12206  011310  0E00               	movlw	0
 12207  011312  0100               	movlb	0	; () banked
 12208  011314  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12209  011316  0100               	movlb	0	; () banked
 12210  011318  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12211  01131A  0E03               	movlw	3
 12212  01131C  0100               	movlb	0	; () banked
 12213  01131E  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 12214  011320  EC93  F0B3         	call	_Word_GetPair	;wreg free
 12215  011324  0100               	movlb	0	; () banked
 12216  011326  6F72               	movwf	??_Port_Set& (0+255),b
 12217  011328  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 12218  01132A  0E06               	movlw	6
 12219  01132C                     u9845:
 12220  01132C  90D8               	bcf	status,0,c
 12221  01132E  0100               	movlb	0	; () banked
 12222  011330  3772               	rlcf	??_Port_Set& (0+255),f,b
 12223  011332  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12224  011334  2EE8               	decfsz	wreg,f,c
 12225  011336  D7FA               	goto	u9845
 12226  011338  0100               	movlb	0	; () banked
 12227  01133A  5172               	movf	??_Port_Set& (0+255),w,b
 12228  01133C  0100               	movlb	0	; () banked
 12229  01133E  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12230  011340  0100               	movlb	0	; () banked
 12231  011342  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12232  011344  0100               	movlb	0	; () banked
 12233  011346  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12234                           
 12235                           ; BSR set to: 0
 12236                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 12237  011348  0E08               	movlw	8
 12238  01134A  0100               	movlb	0	; () banked
 12239  01134C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 12240  01134E  0100               	movlb	0	; () banked
 12241  011350  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12242  011352  0E00               	movlw	0
 12243  011354  0100               	movlb	0	; () banked
 12244  011356  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12245  011358  0100               	movlb	0	; () banked
 12246  01135A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12247  01135C  0E04               	movlw	4
 12248  01135E  0100               	movlb	0	; () banked
 12249  011360  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 12250  011362  EC93  F0B3         	call	_Word_GetPair	;wreg free
 12251  011366  0100               	movlb	0	; () banked
 12252  011368  6F72               	movwf	??_Port_Set& (0+255),b
 12253  01136A  0100               	movlb	0	; () banked
 12254  01136C  5172               	movf	??_Port_Set& (0+255),w,b
 12255  01136E  0100               	movlb	0	; () banked
 12256  011370  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 12257  011372  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 12258  011374  0100               	movlb	0	; () banked
 12259  011376  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12260  011378  0100               	movlb	0	; () banked
 12261  01137A  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12262  01137C  0100               	movlb	0	; () banked
 12263  01137E  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 12264  011380  0100               	movlb	0	; () banked
 12265  011382  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12266                           
 12267                           ; BSR set to: 0
 12268                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 12269  011384  0E08               	movlw	8
 12270  011386  0100               	movlb	0	; () banked
 12271  011388  256F               	addwf	Port_Set@pInput& (0+255),w,b
 12272  01138A  0100               	movlb	0	; () banked
 12273  01138C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12274  01138E  0E00               	movlw	0
 12275  011390  0100               	movlb	0	; () banked
 12276  011392  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12277  011394  0100               	movlb	0	; () banked
 12278  011396  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12279  011398  0E05               	movlw	5
 12280  01139A  0100               	movlb	0	; () banked
 12281  01139C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 12282  01139E  EC93  F0B3         	call	_Word_GetPair	;wreg free
 12283  0113A2  0100               	movlb	0	; () banked
 12284  0113A4  6F72               	movwf	??_Port_Set& (0+255),b
 12285  0113A6  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 12286  0113A8  0E0A               	movlw	10
 12287  0113AA                     u9855:
 12288  0113AA  90D8               	bcf	status,0,c
 12289  0113AC  0100               	movlb	0	; () banked
 12290  0113AE  3772               	rlcf	??_Port_Set& (0+255),f,b
 12291  0113B0  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12292  0113B2  2EE8               	decfsz	wreg,f,c
 12293  0113B4  D7FA               	goto	u9855
 12294  0113B6  0100               	movlb	0	; () banked
 12295  0113B8  5172               	movf	??_Port_Set& (0+255),w,b
 12296  0113BA  0100               	movlb	0	; () banked
 12297  0113BC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12298  0113BE  0100               	movlb	0	; () banked
 12299  0113C0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12300  0113C2  0100               	movlb	0	; () banked
 12301  0113C4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12302                           
 12303                           ; BSR set to: 0
 12304                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 12305  0113C6  0E08               	movlw	8
 12306  0113C8  0100               	movlb	0	; () banked
 12307  0113CA  256F               	addwf	Port_Set@pInput& (0+255),w,b
 12308  0113CC  0100               	movlb	0	; () banked
 12309  0113CE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12310  0113D0  0E00               	movlw	0
 12311  0113D2  0100               	movlb	0	; () banked
 12312  0113D4  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12313  0113D6  0100               	movlb	0	; () banked
 12314  0113D8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12315  0113DA  0E06               	movlw	6
 12316  0113DC  0100               	movlb	0	; () banked
 12317  0113DE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 12318  0113E0  EC93  F0B3         	call	_Word_GetPair	;wreg free
 12319  0113E4  0100               	movlb	0	; () banked
 12320  0113E6  6F72               	movwf	??_Port_Set& (0+255),b
 12321  0113E8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 12322  0113EA  0E0C               	movlw	12
 12323  0113EC                     u9865:
 12324  0113EC  90D8               	bcf	status,0,c
 12325  0113EE  0100               	movlb	0	; () banked
 12326  0113F0  3772               	rlcf	??_Port_Set& (0+255),f,b
 12327  0113F2  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12328  0113F4  2EE8               	decfsz	wreg,f,c
 12329  0113F6  D7FA               	goto	u9865
 12330  0113F8  0100               	movlb	0	; () banked
 12331  0113FA  5172               	movf	??_Port_Set& (0+255),w,b
 12332  0113FC  0100               	movlb	0	; () banked
 12333  0113FE  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12334  011400  0100               	movlb	0	; () banked
 12335  011402  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12336  011404  0100               	movlb	0	; () banked
 12337  011406  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12338                           
 12339                           ; BSR set to: 0
 12340                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 12341  011408  0E08               	movlw	8
 12342  01140A  0100               	movlb	0	; () banked
 12343  01140C  256F               	addwf	Port_Set@pInput& (0+255),w,b
 12344  01140E  0100               	movlb	0	; () banked
 12345  011410  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 12346  011412  0E00               	movlw	0
 12347  011414  0100               	movlb	0	; () banked
 12348  011416  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 12349  011418  0100               	movlb	0	; () banked
 12350  01141A  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12351  01141C  0E07               	movlw	7
 12352  01141E  0100               	movlb	0	; () banked
 12353  011420  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 12354  011422  EC93  F0B3         	call	_Word_GetPair	;wreg free
 12355  011426  0100               	movlb	0	; () banked
 12356  011428  6F72               	movwf	??_Port_Set& (0+255),b
 12357  01142A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 12358  01142C  0E0E               	movlw	14
 12359  01142E                     u9875:
 12360  01142E  90D8               	bcf	status,0,c
 12361  011430  0100               	movlb	0	; () banked
 12362  011432  3772               	rlcf	??_Port_Set& (0+255),f,b
 12363  011434  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 12364  011436  2EE8               	decfsz	wreg,f,c
 12365  011438  D7FA               	goto	u9875
 12366  01143A  0100               	movlb	0	; () banked
 12367  01143C  5172               	movf	??_Port_Set& (0+255),w,b
 12368  01143E  0100               	movlb	0	; () banked
 12369  011440  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 12370  011442  0100               	movlb	0	; () banked
 12371  011444  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 12372  011446  0100               	movlb	0	; () banked
 12373  011448  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 12374                           
 12375                           ;Port.c: 584: if (TypeRequired == TypeActual)
 12376  01144A  0100               	movlb	0	; () banked
 12377  01144C  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 12378  01144E  0100               	movlb	0	; () banked
 12379  011450  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 12380  011452  E148               	bnz	l528
 12381  011454  0100               	movlb	0	; () banked
 12382  011456  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 12383  011458  0100               	movlb	0	; () banked
 12384  01145A  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 12385  01145C  A4D8               	btfss	status,2,c
 12386  01145E  0012               	return	
 12387  011460  D032               	goto	l526
 12388  011462                     
 12389                           ; BSR set to: 0
 12390                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 12391                           
 12392                           ; BSR set to: 0
 12393  011462  0100               	movlb	0	; () banked
 12394  011464  EE20 F002          	lfsr	2,2
 12395  011468  516F               	movf	Port_Set@pInput& (0+255),w,b
 12396  01146A  26D9               	addwf	fsr2l,f,c
 12397  01146C  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 12398  01146E  22DA               	addwfc	fsr2h,f,c
 12399  011470  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 12400  011474  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 12401  011478  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 12402  01147C  ECF1  F0B6         	call	_Byte_SetByte	;wreg free
 12403                           
 12404                           ;Port.c: 594: break;
 12405  011480  0012               	return	
 12406  011482                     
 12407                           ;Port.c: 597: pValue = ~pValue;
 12408  011482  0100               	movlb	0	; () banked
 12409  011484  1F71               	comf	Port_Set@pValue& (0+255),f,b
 12410                           
 12411                           ; BSR set to: 0
 12412                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 12413  011486  0100               	movlb	0	; () banked
 12414  011488  EE20 F002          	lfsr	2,2
 12415  01148C  516F               	movf	Port_Set@pInput& (0+255),w,b
 12416  01148E  26D9               	addwf	fsr2l,f,c
 12417  011490  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 12418  011492  22DA               	addwfc	fsr2h,f,c
 12419  011494  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 12420  011498  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 12421  01149C  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 12422  0114A0  ECF1  F0B6         	call	_Byte_SetByte	;wreg free
 12423                           
 12424                           ;Port.c: 599: break;
 12425  0114A4  0012               	return	
 12426  0114A6                     
 12427                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 12428  0114A6  0100               	movlb	0	; () banked
 12429  0114A8  EE20 F004          	lfsr	2,4
 12430  0114AC  516F               	movf	Port_Set@pInput& (0+255),w,b
 12431  0114AE  26D9               	addwf	fsr2l,f,c
 12432  0114B0  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 12433  0114B2  22DA               	addwfc	fsr2h,f,c
 12434  0114B4  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 12435  0114B8  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 12436  0114BC  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 12437  0114C0  ECF1  F0B6         	call	_Byte_SetByte	;wreg free
 12438                           
 12439                           ;Port.c: 606: }
 12440                           
 12441                           ;Port.c: 605: break;
 12442                           
 12443                           ;Port.c: 604: default:
 12444                           
 12445                           ;Port.c: 603: break;
 12446  0114C4  0012               	return	
 12447  0114C6                     l526:
 12448  0114C6  0100               	movlb	0	; () banked
 12449  0114C8  5186               	movf	Port_Set@Type& (0+255),w,b
 12450                           
 12451                           ; Switch size 1, requested type "space"
 12452                           ; Number of cases is 4, Range of values is 0 to 3
 12453                           ; switch strategies available:
 12454                           ; Name         Instructions Cycles
 12455                           ; simple_byte           13     7 (average)
 12456                           ;	Chosen strategy is simple_byte
 12457  0114CA  0A00               	xorlw	0	; case 0
 12458  0114CC  B4D8               	btfsc	status,2,c
 12459  0114CE  0012               	return	
 12460  0114D0  0A01               	xorlw	1	; case 1
 12461  0114D2  B4D8               	btfsc	status,2,c
 12462  0114D4  D7C6               	goto	l529
 12463  0114D6  0A03               	xorlw	3	; case 2
 12464  0114D8  B4D8               	btfsc	status,2,c
 12465  0114DA  D7D3               	goto	l531
 12466  0114DC  0A01               	xorlw	1	; case 3
 12467  0114DE  A4D8               	btfss	status,2,c
 12468                           
 12469                           ; BSR set to: 0
 12470                           
 12471                           ; BSR set to: 0
 12472                           ;Port.c: 607: }
 12473  0114E0  0012               	return	
 12474  0114E2  D7E1               	goto	l532
 12475  0114E4                     l528:
 12476  0114E4  0012               	return		;funcret
 12477  0114E6                     __end_of_Port_Set:
 12478                           	opt stack 0
 12479                           tosu	equ	0xFFF
 12480                           tosh	equ	0xFFE
 12481                           tosl	equ	0xFFD
 12482                           pclath	equ	0xFFA
 12483                           tblptru	equ	0xFF8
 12484                           tblptrh	equ	0xFF7
 12485                           tblptrl	equ	0xFF6
 12486                           tablat	equ	0xFF5
 12487                           prodh	equ	0xFF4
 12488                           prodl	equ	0xFF3
 12489                           postinc0	equ	0xFEE
 12490                           wreg	equ	0xFE8
 12491                           indf1	equ	0xFE7
 12492                           postdec1	equ	0xFE5
 12493                           fsr1h	equ	0xFE2
 12494                           fsr1l	equ	0xFE1
 12495                           indf2	equ	0xFDF
 12496                           postinc2	equ	0xFDE
 12497                           postdec2	equ	0xFDD
 12498                           plusw2	equ	0xFDB
 12499                           fsr2h	equ	0xFDA
 12500                           fsr2l	equ	0xFD9
 12501                           status	equ	0xFD8
 12502                           
 12503 ;; *************** function _Byte_SetByte *****************
 12504 ;; Defined at:
 12505 ;;		line 110 in file "Library/Types.c"
 12506 ;; Parameters:    Size  Location     Type
 12507 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 12508 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 12509 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 12510 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 12511 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 12512 ;;		 -> NULL(0), 
 12513 ;;  pValue          1    2[BANK0 ] unsigned char 
 12514 ;; Auto vars:     Size  Location     Type
 12515 ;;		None
 12516 ;; Return value:  Size  Location     Type
 12517 ;;                  1    wreg      void 
 12518 ;; Registers used:
 12519 ;;		fsr2l, fsr2h
 12520 ;; Tracked objects:
 12521 ;;		On entry : 0/0
 12522 ;;		On exit  : 0/0
 12523 ;;		Unchanged: 0/0
 12524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12525 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12528 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12529 ;;Total ram usage:        3 bytes
 12530 ;; Hardware stack levels used:    1
 12531 ;; Hardware stack levels required when called:    7
 12532 ;; This function calls:
 12533 ;;		Nothing
 12534 ;; This function is called by:
 12535 ;;		_Port_Set
 12536 ;;		_I2C_Init
 12537 ;; This function uses a non-reentrant model
 12538 ;;
 12539                           
 12540                           	psect	text48
 12541  016DE2                     __ptext48:
 12542                           	opt stack 0
 12543  016DE2                     _Byte_SetByte:
 12544                           	opt stack 19
 12545                           
 12546                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 12547                           
 12548                           ;incstack = 0
 12549  016DE2  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 12550  016DE6  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 12551  016DEA  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 12552  016DEE  0012               	return		;funcret
 12553  016DF0                     __end_of_Byte_SetByte:
 12554                           	opt stack 0
 12555                           tosu	equ	0xFFF
 12556                           tosh	equ	0xFFE
 12557                           tosl	equ	0xFFD
 12558                           pclath	equ	0xFFA
 12559                           tblptru	equ	0xFF8
 12560                           tblptrh	equ	0xFF7
 12561                           tblptrl	equ	0xFF6
 12562                           tablat	equ	0xFF5
 12563                           prodh	equ	0xFF4
 12564                           prodl	equ	0xFF3
 12565                           postinc0	equ	0xFEE
 12566                           wreg	equ	0xFE8
 12567                           indf1	equ	0xFE7
 12568                           postdec1	equ	0xFE5
 12569                           fsr1h	equ	0xFE2
 12570                           fsr1l	equ	0xFE1
 12571                           indf2	equ	0xFDF
 12572                           postinc2	equ	0xFDE
 12573                           postdec2	equ	0xFDD
 12574                           plusw2	equ	0xFDB
 12575                           fsr2h	equ	0xFDA
 12576                           fsr2l	equ	0xFD9
 12577                           status	equ	0xFD8
 12578                           
 12579 ;; *************** function _GetPortTRIS *****************
 12580 ;; Defined at:
 12581 ;;		line 67 in file "Library/Port.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;  pInput          1    wreg     enum E6786
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;  pInput          1    2[BANK0 ] enum E6786
 12586 ;; Return value:  Size  Location     Type
 12587 ;;                  2    0[BANK0 ] PTR struct Byte
 12588 ;; Registers used:
 12589 ;;		wreg, status,2, status,0
 12590 ;; Tracked objects:
 12591 ;;		On entry : 0/0
 12592 ;;		On exit  : 0/0
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12595 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12598 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12599 ;;Total ram usage:        3 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; Hardware stack levels required when called:    7
 12602 ;; This function calls:
 12603 ;;		Nothing
 12604 ;; This function is called by:
 12605 ;;		_Port_Init
 12606 ;; This function uses a non-reentrant model
 12607 ;;
 12608                           
 12609                           	psect	text49
 12610  014F7A                     __ptext49:
 12611                           	opt stack 0
 12612  014F7A                     _GetPortTRIS:
 12613                           	opt stack 20
 12614                           
 12615                           ;incstack = 0
 12616                           ;GetPortTRIS@pInput stored from wreg
 12617  014F7A  0100               	movlb	0	; () banked
 12618  014F7C  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 12619                           
 12620                           ;Port.c: 69: switch (pInput)
 12621  014F7E  D038               	goto	l363
 12622  014F80                     
 12623                           ;Port.c: 72: return (BytePtr)&TRISA;
 12624  014F80  0E92               	movlw	146
 12625  014F82  0100               	movlb	0	; () banked
 12626  014F84  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12627  014F86  0E0F               	movlw	15
 12628  014F88  0100               	movlb	0	; () banked
 12629  014F8A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12630                           
 12631                           ; BSR set to: 0
 12632  014F8C  0012               	return	
 12633  014F8E                     
 12634                           ; BSR set to: 0
 12635                           ;Port.c: 74: return (BytePtr)&TRISB;
 12636                           
 12637                           ; BSR set to: 0
 12638  014F8E  0E93               	movlw	147
 12639  014F90  0100               	movlb	0	; () banked
 12640  014F92  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12641  014F94  0E0F               	movlw	15
 12642  014F96  0100               	movlb	0	; () banked
 12643  014F98  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12644                           
 12645                           ; BSR set to: 0
 12646  014F9A  0012               	return	
 12647  014F9C                     
 12648                           ; BSR set to: 0
 12649                           ;Port.c: 76: return (BytePtr)&TRISC;
 12650                           
 12651                           ; BSR set to: 0
 12652  014F9C  0E94               	movlw	148
 12653  014F9E  0100               	movlb	0	; () banked
 12654  014FA0  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12655  014FA2  0E0F               	movlw	15
 12656  014FA4  0100               	movlb	0	; () banked
 12657  014FA6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12658                           
 12659                           ; BSR set to: 0
 12660  014FA8  0012               	return	
 12661  014FAA                     
 12662                           ; BSR set to: 0
 12663                           ;Port.c: 78: return (BytePtr)&TRISD;
 12664                           
 12665                           ; BSR set to: 0
 12666  014FAA  0E95               	movlw	149
 12667  014FAC  0100               	movlb	0	; () banked
 12668  014FAE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12669  014FB0  0E0F               	movlw	15
 12670  014FB2  0100               	movlb	0	; () banked
 12671  014FB4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12672                           
 12673                           ; BSR set to: 0
 12674  014FB6  0012               	return	
 12675  014FB8                     
 12676                           ; BSR set to: 0
 12677                           ;Port.c: 80: return (BytePtr)&TRISE;
 12678                           
 12679                           ; BSR set to: 0
 12680  014FB8  0E96               	movlw	150
 12681  014FBA  0100               	movlb	0	; () banked
 12682  014FBC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12683  014FBE  0E0F               	movlw	15
 12684  014FC0  0100               	movlb	0	; () banked
 12685  014FC2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12686                           
 12687                           ; BSR set to: 0
 12688  014FC4  0012               	return	
 12689  014FC6                     
 12690                           ; BSR set to: 0
 12691                           ;Port.c: 82: return (BytePtr)&TRISF;
 12692                           
 12693                           ; BSR set to: 0
 12694  014FC6  0E97               	movlw	151
 12695  014FC8  0100               	movlb	0	; () banked
 12696  014FCA  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12697  014FCC  0E0F               	movlw	15
 12698  014FCE  0100               	movlb	0	; () banked
 12699  014FD0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12700                           
 12701                           ; BSR set to: 0
 12702  014FD2  0012               	return	
 12703  014FD4                     
 12704                           ; BSR set to: 0
 12705                           ;Port.c: 84: return (BytePtr)&TRISG;
 12706                           
 12707                           ; BSR set to: 0
 12708  014FD4  0E98               	movlw	152
 12709  014FD6  0100               	movlb	0	; () banked
 12710  014FD8  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12711  014FDA  0E0F               	movlw	15
 12712  014FDC  0100               	movlb	0	; () banked
 12713  014FDE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12714                           
 12715                           ; BSR set to: 0
 12716  014FE0  0012               	return	
 12717  014FE2                     
 12718                           ; BSR set to: 0
 12719                           ;Port.c: 86: return (void*)0;
 12720                           
 12721                           ; BSR set to: 0
 12722  014FE2  0E00               	movlw	0
 12723  014FE4  0100               	movlb	0	; () banked
 12724  014FE6  6F60               	movwf	?_GetPortTRIS& (0+255),b
 12725  014FE8  0E00               	movlw	0
 12726  014FEA  0100               	movlb	0	; () banked
 12727  014FEC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 12728                           
 12729                           ; BSR set to: 0
 12730                           ;Port.c: 87: }
 12731                           
 12732                           ; BSR set to: 0
 12733  014FEE  0012               	return	
 12734  014FF0                     l363:
 12735                           
 12736                           ; BSR set to: 0
 12737  014FF0  0100               	movlb	0	; () banked
 12738  014FF2  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 12739                           
 12740                           ; Switch size 1, requested type "space"
 12741                           ; Number of cases is 7, Range of values is 0 to 6
 12742                           ; switch strategies available:
 12743                           ; Name         Instructions Cycles
 12744                           ; simple_byte           22    12 (average)
 12745                           ;	Chosen strategy is simple_byte
 12746  014FF4  0A00               	xorlw	0	; case 0
 12747  014FF6  B4D8               	btfsc	status,2,c
 12748  014FF8  D7C3               	goto	l364
 12749  014FFA  0A01               	xorlw	1	; case 1
 12750  014FFC  B4D8               	btfsc	status,2,c
 12751  014FFE  D7C7               	goto	l366
 12752  015000  0A03               	xorlw	3	; case 2
 12753  015002  B4D8               	btfsc	status,2,c
 12754  015004  D7CB               	goto	l367
 12755  015006  0A01               	xorlw	1	; case 3
 12756  015008  B4D8               	btfsc	status,2,c
 12757  01500A  D7CF               	goto	l368
 12758  01500C  0A07               	xorlw	7	; case 4
 12759  01500E  B4D8               	btfsc	status,2,c
 12760  015010  D7D3               	goto	l369
 12761  015012  0A01               	xorlw	1	; case 5
 12762  015014  B4D8               	btfsc	status,2,c
 12763  015016  D7D7               	goto	l370
 12764  015018  0A03               	xorlw	3	; case 6
 12765  01501A  B4D8               	btfsc	status,2,c
 12766  01501C  D7DB               	goto	l371
 12767  01501E  D7E1               	goto	l372
 12768  015020                     __end_of_GetPortTRIS:
 12769                           	opt stack 0
 12770                           tosu	equ	0xFFF
 12771                           tosh	equ	0xFFE
 12772                           tosl	equ	0xFFD
 12773                           pclath	equ	0xFFA
 12774                           tblptru	equ	0xFF8
 12775                           tblptrh	equ	0xFF7
 12776                           tblptrl	equ	0xFF6
 12777                           tablat	equ	0xFF5
 12778                           prodh	equ	0xFF4
 12779                           prodl	equ	0xFF3
 12780                           postinc0	equ	0xFEE
 12781                           wreg	equ	0xFE8
 12782                           indf1	equ	0xFE7
 12783                           postdec1	equ	0xFE5
 12784                           fsr1h	equ	0xFE2
 12785                           fsr1l	equ	0xFE1
 12786                           indf2	equ	0xFDF
 12787                           postinc2	equ	0xFDE
 12788                           postdec2	equ	0xFDD
 12789                           plusw2	equ	0xFDB
 12790                           fsr2h	equ	0xFDA
 12791                           fsr2l	equ	0xFD9
 12792                           status	equ	0xFD8
 12793                           
 12794 ;; *************** function _GetPortProperties *****************
 12795 ;; Defined at:
 12796 ;;		line 21 in file "Library/Port.c"
 12797 ;; Parameters:    Size  Location     Type
 12798 ;;  pInput          1    wreg     enum E6786
 12799 ;; Auto vars:     Size  Location     Type
 12800 ;;  pInput          1    2[BANK0 ] enum E6786
 12801 ;; Return value:  Size  Location     Type
 12802 ;;                  2    0[BANK0 ] PTR struct PortProperty
 12803 ;; Registers used:
 12804 ;;		wreg, status,2, status,0
 12805 ;; Tracked objects:
 12806 ;;		On entry : 0/0
 12807 ;;		On exit  : 0/0
 12808 ;;		Unchanged: 0/0
 12809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12810 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;Total ram usage:        3 bytes
 12815 ;; Hardware stack levels used:    1
 12816 ;; Hardware stack levels required when called:    7
 12817 ;; This function calls:
 12818 ;;		Nothing
 12819 ;; This function is called by:
 12820 ;;		_Port_Init
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           	psect	text50
 12825  015020                     __ptext50:
 12826                           	opt stack 0
 12827  015020                     _GetPortProperties:
 12828                           	opt stack 20
 12829                           
 12830                           ; BSR set to: 0
 12831                           ;incstack = 0
 12832                           ;GetPortProperties@pInput stored from wreg
 12833  015020  0100               	movlb	0	; () banked
 12834  015022  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 12835                           
 12836                           ;Port.c: 23: switch (pInput)
 12837  015024  D038               	goto	l337
 12838  015026                     
 12839                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 12840  015026  0E07               	movlw	low _PortA_Property
 12841  015028  0100               	movlb	0	; () banked
 12842  01502A  6F60               	movwf	?_GetPortProperties& (0+255),b
 12843  01502C  0EFF               	movlw	high _PortA_Property
 12844  01502E  0100               	movlb	0	; () banked
 12845  015030  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12846                           
 12847                           ; BSR set to: 0
 12848  015032  0012               	return	
 12849  015034                     
 12850                           ; BSR set to: 0
 12851                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 12852                           
 12853                           ; BSR set to: 0
 12854  015034  0E05               	movlw	low _PortB_Property
 12855  015036  0100               	movlb	0	; () banked
 12856  015038  6F60               	movwf	?_GetPortProperties& (0+255),b
 12857  01503A  0EFF               	movlw	high _PortB_Property
 12858  01503C  0100               	movlb	0	; () banked
 12859  01503E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12860                           
 12861                           ; BSR set to: 0
 12862  015040  0012               	return	
 12863  015042                     
 12864                           ; BSR set to: 0
 12865                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 12866                           
 12867                           ; BSR set to: 0
 12868  015042  0E03               	movlw	low _PortC_Property
 12869  015044  0100               	movlb	0	; () banked
 12870  015046  6F60               	movwf	?_GetPortProperties& (0+255),b
 12871  015048  0EFF               	movlw	high _PortC_Property
 12872  01504A  0100               	movlb	0	; () banked
 12873  01504C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12874                           
 12875                           ; BSR set to: 0
 12876  01504E  0012               	return	
 12877  015050                     
 12878                           ; BSR set to: 0
 12879                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 12880                           
 12881                           ; BSR set to: 0
 12882  015050  0E01               	movlw	low _PortD_Property
 12883  015052  0100               	movlb	0	; () banked
 12884  015054  6F60               	movwf	?_GetPortProperties& (0+255),b
 12885  015056  0EFF               	movlw	high _PortD_Property
 12886  015058  0100               	movlb	0	; () banked
 12887  01505A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12888                           
 12889                           ; BSR set to: 0
 12890  01505C  0012               	return	
 12891  01505E                     
 12892                           ; BSR set to: 0
 12893                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 12894                           
 12895                           ; BSR set to: 0
 12896  01505E  0EFF               	movlw	low _PortE_Property
 12897  015060  0100               	movlb	0	; () banked
 12898  015062  6F60               	movwf	?_GetPortProperties& (0+255),b
 12899  015064  0EFE               	movlw	high _PortE_Property
 12900  015066  0100               	movlb	0	; () banked
 12901  015068  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12902                           
 12903                           ; BSR set to: 0
 12904  01506A  0012               	return	
 12905  01506C                     
 12906                           ; BSR set to: 0
 12907                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 12908                           
 12909                           ; BSR set to: 0
 12910  01506C  0EFD               	movlw	low _PortF_Property
 12911  01506E  0100               	movlb	0	; () banked
 12912  015070  6F60               	movwf	?_GetPortProperties& (0+255),b
 12913  015072  0EFE               	movlw	high _PortF_Property
 12914  015074  0100               	movlb	0	; () banked
 12915  015076  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12916                           
 12917                           ; BSR set to: 0
 12918  015078  0012               	return	
 12919  01507A                     
 12920                           ; BSR set to: 0
 12921                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 12922                           
 12923                           ; BSR set to: 0
 12924  01507A  0EFB               	movlw	low _PortG_Property
 12925  01507C  0100               	movlb	0	; () banked
 12926  01507E  6F60               	movwf	?_GetPortProperties& (0+255),b
 12927  015080  0EFE               	movlw	high _PortG_Property
 12928  015082  0100               	movlb	0	; () banked
 12929  015084  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12930                           
 12931                           ; BSR set to: 0
 12932  015086  0012               	return	
 12933  015088                     
 12934                           ; BSR set to: 0
 12935                           ;Port.c: 40: return (void*)0;
 12936                           
 12937                           ; BSR set to: 0
 12938  015088  0E00               	movlw	0
 12939  01508A  0100               	movlb	0	; () banked
 12940  01508C  6F60               	movwf	?_GetPortProperties& (0+255),b
 12941  01508E  0E00               	movlw	0
 12942  015090  0100               	movlb	0	; () banked
 12943  015092  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12944                           
 12945                           ; BSR set to: 0
 12946                           ;Port.c: 41: }
 12947                           
 12948                           ; BSR set to: 0
 12949  015094  0012               	return	
 12950  015096                     l337:
 12951                           
 12952                           ; BSR set to: 0
 12953  015096  0100               	movlb	0	; () banked
 12954  015098  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 12955                           
 12956                           ; Switch size 1, requested type "space"
 12957                           ; Number of cases is 7, Range of values is 0 to 6
 12958                           ; switch strategies available:
 12959                           ; Name         Instructions Cycles
 12960                           ; simple_byte           22    12 (average)
 12961                           ;	Chosen strategy is simple_byte
 12962  01509A  0A00               	xorlw	0	; case 0
 12963  01509C  B4D8               	btfsc	status,2,c
 12964  01509E  D7C3               	goto	l338
 12965  0150A0  0A01               	xorlw	1	; case 1
 12966  0150A2  B4D8               	btfsc	status,2,c
 12967  0150A4  D7C7               	goto	l340
 12968  0150A6  0A03               	xorlw	3	; case 2
 12969  0150A8  B4D8               	btfsc	status,2,c
 12970  0150AA  D7CB               	goto	l341
 12971  0150AC  0A01               	xorlw	1	; case 3
 12972  0150AE  B4D8               	btfsc	status,2,c
 12973  0150B0  D7CF               	goto	l342
 12974  0150B2  0A07               	xorlw	7	; case 4
 12975  0150B4  B4D8               	btfsc	status,2,c
 12976  0150B6  D7D3               	goto	l343
 12977  0150B8  0A01               	xorlw	1	; case 5
 12978  0150BA  B4D8               	btfsc	status,2,c
 12979  0150BC  D7D7               	goto	l344
 12980  0150BE  0A03               	xorlw	3	; case 6
 12981  0150C0  B4D8               	btfsc	status,2,c
 12982  0150C2  D7DB               	goto	l345
 12983  0150C4  D7E1               	goto	l346
 12984  0150C6                     __end_of_GetPortProperties:
 12985                           	opt stack 0
 12986                           tosu	equ	0xFFF
 12987                           tosh	equ	0xFFE
 12988                           tosl	equ	0xFFD
 12989                           pclath	equ	0xFFA
 12990                           tblptru	equ	0xFF8
 12991                           tblptrh	equ	0xFF7
 12992                           tblptrl	equ	0xFF6
 12993                           tablat	equ	0xFF5
 12994                           prodh	equ	0xFF4
 12995                           prodl	equ	0xFF3
 12996                           postinc0	equ	0xFEE
 12997                           wreg	equ	0xFE8
 12998                           indf1	equ	0xFE7
 12999                           postdec1	equ	0xFE5
 13000                           fsr1h	equ	0xFE2
 13001                           fsr1l	equ	0xFE1
 13002                           indf2	equ	0xFDF
 13003                           postinc2	equ	0xFDE
 13004                           postdec2	equ	0xFDD
 13005                           plusw2	equ	0xFDB
 13006                           fsr2h	equ	0xFDA
 13007                           fsr2l	equ	0xFD9
 13008                           status	equ	0xFD8
 13009                           
 13010 ;; *************** function _GetPortPORT *****************
 13011 ;; Defined at:
 13012 ;;		line 44 in file "Library/Port.c"
 13013 ;; Parameters:    Size  Location     Type
 13014 ;;  pInput          1    wreg     enum E6786
 13015 ;; Auto vars:     Size  Location     Type
 13016 ;;  pInput          1    2[BANK0 ] enum E6786
 13017 ;; Return value:  Size  Location     Type
 13018 ;;                  2    0[BANK0 ] PTR struct Byte
 13019 ;; Registers used:
 13020 ;;		wreg, status,2, status,0
 13021 ;; Tracked objects:
 13022 ;;		On entry : 0/0
 13023 ;;		On exit  : 0/0
 13024 ;;		Unchanged: 0/0
 13025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13026 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13027 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13029 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13030 ;;Total ram usage:        3 bytes
 13031 ;; Hardware stack levels used:    1
 13032 ;; Hardware stack levels required when called:    7
 13033 ;; This function calls:
 13034 ;;		Nothing
 13035 ;; This function is called by:
 13036 ;;		_Port_Init
 13037 ;; This function uses a non-reentrant model
 13038 ;;
 13039                           
 13040                           	psect	text51
 13041  0150C6                     __ptext51:
 13042                           	opt stack 0
 13043  0150C6                     _GetPortPORT:
 13044                           	opt stack 20
 13045                           
 13046                           ; BSR set to: 0
 13047                           ;incstack = 0
 13048                           ;GetPortPORT@pInput stored from wreg
 13049  0150C6  0100               	movlb	0	; () banked
 13050  0150C8  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 13051                           
 13052                           ;Port.c: 46: switch (pInput)
 13053  0150CA  D038               	goto	l350
 13054  0150CC                     
 13055                           ;Port.c: 49: return (BytePtr)&PORTA;
 13056  0150CC  0E80               	movlw	128
 13057  0150CE  0100               	movlb	0	; () banked
 13058  0150D0  6F60               	movwf	?_GetPortPORT& (0+255),b
 13059  0150D2  0E0F               	movlw	15
 13060  0150D4  0100               	movlb	0	; () banked
 13061  0150D6  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13062                           
 13063                           ; BSR set to: 0
 13064  0150D8  0012               	return	
 13065  0150DA                     
 13066                           ; BSR set to: 0
 13067                           ;Port.c: 51: return (BytePtr)&PORTB;
 13068                           
 13069                           ; BSR set to: 0
 13070  0150DA  0E81               	movlw	129
 13071  0150DC  0100               	movlb	0	; () banked
 13072  0150DE  6F60               	movwf	?_GetPortPORT& (0+255),b
 13073  0150E0  0E0F               	movlw	15
 13074  0150E2  0100               	movlb	0	; () banked
 13075  0150E4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13076                           
 13077                           ; BSR set to: 0
 13078  0150E6  0012               	return	
 13079  0150E8                     
 13080                           ; BSR set to: 0
 13081                           ;Port.c: 53: return (BytePtr)&PORTC;
 13082                           
 13083                           ; BSR set to: 0
 13084  0150E8  0E82               	movlw	130
 13085  0150EA  0100               	movlb	0	; () banked
 13086  0150EC  6F60               	movwf	?_GetPortPORT& (0+255),b
 13087  0150EE  0E0F               	movlw	15
 13088  0150F0  0100               	movlb	0	; () banked
 13089  0150F2  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13090                           
 13091                           ; BSR set to: 0
 13092  0150F4  0012               	return	
 13093  0150F6                     
 13094                           ; BSR set to: 0
 13095                           ;Port.c: 55: return (BytePtr)&PORTD;
 13096                           
 13097                           ; BSR set to: 0
 13098  0150F6  0E83               	movlw	131
 13099  0150F8  0100               	movlb	0	; () banked
 13100  0150FA  6F60               	movwf	?_GetPortPORT& (0+255),b
 13101  0150FC  0E0F               	movlw	15
 13102  0150FE  0100               	movlb	0	; () banked
 13103  015100  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13104                           
 13105                           ; BSR set to: 0
 13106  015102  0012               	return	
 13107  015104                     
 13108                           ; BSR set to: 0
 13109                           ;Port.c: 57: return (BytePtr)&PORTE;
 13110                           
 13111                           ; BSR set to: 0
 13112  015104  0E84               	movlw	132
 13113  015106  0100               	movlb	0	; () banked
 13114  015108  6F60               	movwf	?_GetPortPORT& (0+255),b
 13115  01510A  0E0F               	movlw	15
 13116  01510C  0100               	movlb	0	; () banked
 13117  01510E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13118                           
 13119                           ; BSR set to: 0
 13120  015110  0012               	return	
 13121  015112                     
 13122                           ; BSR set to: 0
 13123                           ;Port.c: 59: return (BytePtr)&PORTF;
 13124                           
 13125                           ; BSR set to: 0
 13126  015112  0E85               	movlw	133
 13127  015114  0100               	movlb	0	; () banked
 13128  015116  6F60               	movwf	?_GetPortPORT& (0+255),b
 13129  015118  0E0F               	movlw	15
 13130  01511A  0100               	movlb	0	; () banked
 13131  01511C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13132                           
 13133                           ; BSR set to: 0
 13134  01511E  0012               	return	
 13135  015120                     
 13136                           ; BSR set to: 0
 13137                           ;Port.c: 61: return (BytePtr)&PORTG;
 13138                           
 13139                           ; BSR set to: 0
 13140  015120  0E86               	movlw	134
 13141  015122  0100               	movlb	0	; () banked
 13142  015124  6F60               	movwf	?_GetPortPORT& (0+255),b
 13143  015126  0E0F               	movlw	15
 13144  015128  0100               	movlb	0	; () banked
 13145  01512A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13146                           
 13147                           ; BSR set to: 0
 13148  01512C  0012               	return	
 13149  01512E                     
 13150                           ; BSR set to: 0
 13151                           ;Port.c: 63: return (void*)0;
 13152                           
 13153                           ; BSR set to: 0
 13154  01512E  0E00               	movlw	0
 13155  015130  0100               	movlb	0	; () banked
 13156  015132  6F60               	movwf	?_GetPortPORT& (0+255),b
 13157  015134  0E00               	movlw	0
 13158  015136  0100               	movlb	0	; () banked
 13159  015138  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 13160                           
 13161                           ; BSR set to: 0
 13162                           ;Port.c: 64: }
 13163                           
 13164                           ; BSR set to: 0
 13165  01513A  0012               	return	
 13166  01513C                     l350:
 13167                           
 13168                           ; BSR set to: 0
 13169  01513C  0100               	movlb	0	; () banked
 13170  01513E  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 13171                           
 13172                           ; Switch size 1, requested type "space"
 13173                           ; Number of cases is 7, Range of values is 0 to 6
 13174                           ; switch strategies available:
 13175                           ; Name         Instructions Cycles
 13176                           ; simple_byte           22    12 (average)
 13177                           ;	Chosen strategy is simple_byte
 13178  015140  0A00               	xorlw	0	; case 0
 13179  015142  B4D8               	btfsc	status,2,c
 13180  015144  D7C3               	goto	l351
 13181  015146  0A01               	xorlw	1	; case 1
 13182  015148  B4D8               	btfsc	status,2,c
 13183  01514A  D7C7               	goto	l353
 13184  01514C  0A03               	xorlw	3	; case 2
 13185  01514E  B4D8               	btfsc	status,2,c
 13186  015150  D7CB               	goto	l354
 13187  015152  0A01               	xorlw	1	; case 3
 13188  015154  B4D8               	btfsc	status,2,c
 13189  015156  D7CF               	goto	l355
 13190  015158  0A07               	xorlw	7	; case 4
 13191  01515A  B4D8               	btfsc	status,2,c
 13192  01515C  D7D3               	goto	l356
 13193  01515E  0A01               	xorlw	1	; case 5
 13194  015160  B4D8               	btfsc	status,2,c
 13195  015162  D7D7               	goto	l357
 13196  015164  0A03               	xorlw	3	; case 6
 13197  015166  B4D8               	btfsc	status,2,c
 13198  015168  D7DB               	goto	l358
 13199  01516A  D7E1               	goto	l359
 13200  01516C                     __end_of_GetPortPORT:
 13201                           	opt stack 0
 13202                           tosu	equ	0xFFF
 13203                           tosh	equ	0xFFE
 13204                           tosl	equ	0xFFD
 13205                           pclath	equ	0xFFA
 13206                           tblptru	equ	0xFF8
 13207                           tblptrh	equ	0xFF7
 13208                           tblptrl	equ	0xFF6
 13209                           tablat	equ	0xFF5
 13210                           prodh	equ	0xFF4
 13211                           prodl	equ	0xFF3
 13212                           postinc0	equ	0xFEE
 13213                           wreg	equ	0xFE8
 13214                           indf1	equ	0xFE7
 13215                           postdec1	equ	0xFE5
 13216                           fsr1h	equ	0xFE2
 13217                           fsr1l	equ	0xFE1
 13218                           indf2	equ	0xFDF
 13219                           postinc2	equ	0xFDE
 13220                           postdec2	equ	0xFDD
 13221                           plusw2	equ	0xFDB
 13222                           fsr2h	equ	0xFDA
 13223                           fsr2l	equ	0xFD9
 13224                           status	equ	0xFD8
 13225                           
 13226 ;; *************** function _LED_Init *****************
 13227 ;; Defined at:
 13228 ;;		line 15 in file "Library/LED.c"
 13229 ;; Parameters:    Size  Location     Type
 13230 ;;  pLED            1    wreg     enum E6739
 13231 ;; Auto vars:     Size  Location     Type
 13232 ;;  pLED            1   45[BANK0 ] enum E6739
 13233 ;; Return value:  Size  Location     Type
 13234 ;;                  1    wreg      void 
 13235 ;; Registers used:
 13236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13237 ;; Tracked objects:
 13238 ;;		On entry : 0/0
 13239 ;;		On exit  : 0/0
 13240 ;;		Unchanged: 0/0
 13241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13243 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13245 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13246 ;;Total ram usage:        1 bytes
 13247 ;; Hardware stack levels used:    1
 13248 ;; Hardware stack levels required when called:   12
 13249 ;; This function calls:
 13250 ;;		_LED_Set
 13251 ;;		_Port_SetPinType
 13252 ;; This function is called by:
 13253 ;;		_MXK_Init
 13254 ;; This function uses a non-reentrant model
 13255 ;;
 13256                           
 13257                           	psect	text52
 13258  01603E                     __ptext52:
 13259                           	opt stack 0
 13260  01603E                     _LED_Init:
 13261                           	opt stack 16
 13262                           
 13263                           ; BSR set to: 0
 13264                           ;incstack = 0
 13265                           ;LED_Init@pLED stored from wreg
 13266  01603E  0100               	movlb	0	; () banked
 13267  016040  6F8D               	movwf	LED_Init@pLED& (0+255),b
 13268                           
 13269                           ;LED.c: 17: switch (pLED)
 13270  016042  D01E               	goto	l220
 13271  016044                     
 13272                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 13273  016044  0EA8               	movlw	low _PortC
 13274  016046  0100               	movlb	0	; () banked
 13275  016048  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13276  01604A  0E01               	movlw	high _PortC
 13277  01604C  0100               	movlb	0	; () banked
 13278  01604E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13279  016050  0E00               	movlw	0
 13280  016052  0100               	movlb	0	; () banked
 13281  016054  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13282  016056  0E03               	movlw	3
 13283  016058  0100               	movlb	0	; () banked
 13284  01605A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13285  01605C  EC2D  F093         	call	_Port_SetPinType	;wreg free
 13286                           
 13287                           ;LED.c: 21: break;
 13288  016060  D017               	goto	l222
 13289  016062                     
 13290                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 13291  016062  0EA8               	movlw	low _PortC
 13292  016064  0100               	movlb	0	; () banked
 13293  016066  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 13294  016068  0E01               	movlw	high _PortC
 13295  01606A  0100               	movlb	0	; () banked
 13296  01606C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13297  01606E  0E01               	movlw	1
 13298  016070  0100               	movlb	0	; () banked
 13299  016072  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 13300  016074  0E03               	movlw	3
 13301  016076  0100               	movlb	0	; () banked
 13302  016078  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 13303  01607A  EC2D  F093         	call	_Port_SetPinType	;wreg free
 13304                           
 13305                           ;LED.c: 25: }
 13306                           
 13307                           ;LED.c: 24: break;
 13308  01607E  D008               	goto	l222
 13309  016080                     l220:
 13310  016080  0100               	movlb	0	; () banked
 13311  016082  518D               	movf	LED_Init@pLED& (0+255),w,b
 13312                           
 13313                           ; Switch size 1, requested type "space"
 13314                           ; Number of cases is 2, Range of values is 0 to 1
 13315                           ; switch strategies available:
 13316                           ; Name         Instructions Cycles
 13317                           ; simple_byte            7     4 (average)
 13318                           ;	Chosen strategy is simple_byte
 13319  016084  0A00               	xorlw	0	; case 0
 13320  016086  B4D8               	btfsc	status,2,c
 13321  016088  D7DD               	goto	l221
 13322  01608A  0A01               	xorlw	1	; case 1
 13323  01608C  B4D8               	btfsc	status,2,c
 13324  01608E  D7E9               	goto	l223
 13325  016090                     l222:
 13326                           
 13327                           ;LED.c: 26: LED_Set(pLED, 0);
 13328                           
 13329                           ; BSR set to: 0
 13330  016090  0E00               	movlw	0
 13331  016092  0100               	movlb	0	; () banked
 13332  016094  6F74               	movwf	LED_Set@pValue& (0+255),b
 13333  016096  0100               	movlb	0	; () banked
 13334  016098  518D               	movf	LED_Init@pLED& (0+255),w,b
 13335  01609A  EC5F  F0B1         	call	_LED_Set
 13336  01609E  0012               	return		;funcret
 13337  0160A0                     __end_of_LED_Init:
 13338                           	opt stack 0
 13339                           tosu	equ	0xFFF
 13340                           tosh	equ	0xFFE
 13341                           tosl	equ	0xFFD
 13342                           pclath	equ	0xFFA
 13343                           tblptru	equ	0xFF8
 13344                           tblptrh	equ	0xFF7
 13345                           tblptrl	equ	0xFF6
 13346                           tablat	equ	0xFF5
 13347                           prodh	equ	0xFF4
 13348                           prodl	equ	0xFF3
 13349                           postinc0	equ	0xFEE
 13350                           wreg	equ	0xFE8
 13351                           indf1	equ	0xFE7
 13352                           postdec1	equ	0xFE5
 13353                           fsr1h	equ	0xFE2
 13354                           fsr1l	equ	0xFE1
 13355                           indf2	equ	0xFDF
 13356                           postinc2	equ	0xFDE
 13357                           postdec2	equ	0xFDD
 13358                           plusw2	equ	0xFDB
 13359                           fsr2h	equ	0xFDA
 13360                           fsr2l	equ	0xFD9
 13361                           status	equ	0xFD8
 13362                           
 13363 ;; *************** function _LED_Set *****************
 13364 ;; Defined at:
 13365 ;;		line 33 in file "Library/LED.c"
 13366 ;; Parameters:    Size  Location     Type
 13367 ;;  pLED            1    wreg     enum E6739
 13368 ;;  pValue          1   20[BANK0 ] unsigned char 
 13369 ;; Auto vars:     Size  Location     Type
 13370 ;;  pLED            1   21[BANK0 ] enum E6739
 13371 ;; Return value:  Size  Location     Type
 13372 ;;                  1    wreg      void 
 13373 ;; Registers used:
 13374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13375 ;; Tracked objects:
 13376 ;;		On entry : 0/0
 13377 ;;		On exit  : 0/0
 13378 ;;		Unchanged: 0/0
 13379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13380 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13383 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13384 ;;Total ram usage:        2 bytes
 13385 ;; Hardware stack levels used:    1
 13386 ;; Hardware stack levels required when called:   11
 13387 ;; This function calls:
 13388 ;;		_Port_SetPin
 13389 ;; This function is called by:
 13390 ;;		_LED_Init
 13391 ;;		_SYSTEM_Initialize
 13392 ;; This function uses a non-reentrant model
 13393 ;;
 13394                           
 13395                           	psect	text53
 13396  0162BE                     __ptext53:
 13397                           	opt stack 0
 13398  0162BE                     _LED_Set:
 13399                           	opt stack 16
 13400                           
 13401                           ;incstack = 0
 13402                           ;LED_Set@pLED stored from wreg
 13403  0162BE  0100               	movlb	0	; () banked
 13404  0162C0  6F75               	movwf	LED_Set@pLED& (0+255),b
 13405                           
 13406                           ;LED.c: 35: switch (pLED)
 13407  0162C2  D01C               	goto	l227
 13408  0162C4                     
 13409                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 13410  0162C4  0EA8               	movlw	low _PortC
 13411  0162C6  0100               	movlb	0	; () banked
 13412  0162C8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13413  0162CA  0E01               	movlw	high _PortC
 13414  0162CC  0100               	movlb	0	; () banked
 13415  0162CE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13416  0162D0  0E00               	movlw	0
 13417  0162D2  0100               	movlb	0	; () banked
 13418  0162D4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13419  0162D6  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 13420  0162DA  EC72  F0A3         	call	_Port_SetPin	;wreg free
 13421                           
 13422                           ;LED.c: 39: break;
 13423  0162DE  0012               	return	
 13424  0162E0                     
 13425                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 13426  0162E0  0EA8               	movlw	low _PortC
 13427  0162E2  0100               	movlb	0	; () banked
 13428  0162E4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13429  0162E6  0E01               	movlw	high _PortC
 13430  0162E8  0100               	movlb	0	; () banked
 13431  0162EA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13432  0162EC  0E01               	movlw	1
 13433  0162EE  0100               	movlb	0	; () banked
 13434  0162F0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13435  0162F2  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 13436  0162F6  EC72  F0A3         	call	_Port_SetPin	;wreg free
 13437                           
 13438                           ;LED.c: 43: }
 13439                           
 13440                           ;LED.c: 42: break;
 13441  0162FA  0012               	return	
 13442  0162FC                     l227:
 13443  0162FC  0100               	movlb	0	; () banked
 13444  0162FE  5175               	movf	LED_Set@pLED& (0+255),w,b
 13445                           
 13446                           ; Switch size 1, requested type "space"
 13447                           ; Number of cases is 2, Range of values is 0 to 1
 13448                           ; switch strategies available:
 13449                           ; Name         Instructions Cycles
 13450                           ; simple_byte            7     4 (average)
 13451                           ;	Chosen strategy is simple_byte
 13452  016300  0A00               	xorlw	0	; case 0
 13453  016302  B4D8               	btfsc	status,2,c
 13454  016304  D7DF               	goto	l228
 13455  016306  0A01               	xorlw	1	; case 1
 13456  016308  A4D8               	btfss	status,2,c
 13457  01630A  0012               	return	
 13458  01630C  D7E9               	goto	l230
 13459  01630E                     __end_of_LED_Set:
 13460                           	opt stack 0
 13461                           tosu	equ	0xFFF
 13462                           tosh	equ	0xFFE
 13463                           tosl	equ	0xFFD
 13464                           pclath	equ	0xFFA
 13465                           tblptru	equ	0xFF8
 13466                           tblptrh	equ	0xFF7
 13467                           tblptrl	equ	0xFF6
 13468                           tablat	equ	0xFF5
 13469                           prodh	equ	0xFF4
 13470                           prodl	equ	0xFF3
 13471                           postinc0	equ	0xFEE
 13472                           wreg	equ	0xFE8
 13473                           indf1	equ	0xFE7
 13474                           postdec1	equ	0xFE5
 13475                           fsr1h	equ	0xFE2
 13476                           fsr1l	equ	0xFE1
 13477                           indf2	equ	0xFDF
 13478                           postinc2	equ	0xFDE
 13479                           postdec2	equ	0xFDD
 13480                           plusw2	equ	0xFDB
 13481                           fsr2h	equ	0xFDA
 13482                           fsr2l	equ	0xFD9
 13483                           status	equ	0xFD8
 13484                           
 13485 ;; *************** function _MXK_Dequeue *****************
 13486 ;; Defined at:
 13487 ;;		line 153 in file "Library/MXK.c"
 13488 ;; Parameters:    Size  Location     Type
 13489 ;;		None
 13490 ;; Auto vars:     Size  Location     Type
 13491 ;;		None
 13492 ;; Return value:  Size  Location     Type
 13493 ;;                  1    wreg      void 
 13494 ;; Registers used:
 13495 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13496 ;; Tracked objects:
 13497 ;;		On entry : 0/0
 13498 ;;		On exit  : 0/0
 13499 ;;		Unchanged: 0/0
 13500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13505 ;;Total ram usage:        0 bytes
 13506 ;; Hardware stack levels used:    1
 13507 ;; Hardware stack levels required when called:   12
 13508 ;; This function calls:
 13509 ;;		Absolute function
 13510 ;;		_Motor_Step
 13511 ;; This function is called by:
 13512 ;;		_initialise
 13513 ;;		_main
 13514 ;; This function uses a non-reentrant model
 13515 ;;
 13516                           
 13517                           	psect	text54
 13518  0166AA                     __ptext54:
 13519                           	opt stack 0
 13520  0166AA                     _MXK_Dequeue:
 13521                           	opt stack 17
 13522                           
 13523                           ;MXK.c: 155: if (lQueue)
 13524                           
 13525                           ;incstack = 0
 13526  0166AA  0100               	movlb	0	; () banked
 13527  0166AC  51EC               	movf	_lQueue& (0+255),w,b	;volatile
 13528  0166AE  0100               	movlb	0	; () banked
 13529  0166B0  11ED               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 13530  0166B2  0100               	movlb	0	; () banked
 13531  0166B4  11EE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 13532  0166B6  B4D8               	btfsc	status,2,c
 13533  0166B8  D00D               	goto	u13279
 13534                           
 13535                           ; BSR set to: 0
 13536                           ;MXK.c: 156: lQueue();
 13537  0166BA  D801               	call	u13278
 13538  0166BC  D00B               	goto	u13279
 13539  0166BE                     u13278:
 13540  0166BE  0005               	push	
 13541  0166C0  6EFA               	movwf	pclath,c
 13542  0166C2  0100               	movlb	0	; () banked
 13543  0166C4  51EC               	movf	_lQueue& (0+255),w,b	;volatile
 13544  0166C6  6EFD               	movwf	tosl,c
 13545  0166C8  51ED               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 13546  0166CA  6EFE               	movwf	tosh,c
 13547  0166CC  51EE               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 13548  0166CE  6EFF               	movwf	tosu,c
 13549  0166D0  50FA               	movf	pclath,w,c
 13550  0166D2  0012               	return		;indir
 13551  0166D4                     u13279:
 13552                           
 13553                           ;MXK.c: 157: lQueue = 0;
 13554  0166D4  0E00               	movlw	0
 13555  0166D6  0100               	movlb	0	; () banked
 13556  0166D8  6FEC               	movwf	_lQueue& (0+255),b	;volatile
 13557  0166DA  0E00               	movlw	0
 13558  0166DC  0100               	movlb	0	; () banked
 13559  0166DE  6FED               	movwf	(_lQueue+1)& (0+255),b	;volatile
 13560  0166E0  0E00               	movlw	0
 13561  0166E2  0100               	movlb	0	; () banked
 13562  0166E4  6FEE               	movwf	(_lQueue+2)& (0+255),b	;volatile
 13563                           
 13564                           ; BSR set to: 0
 13565  0166E6  0012               	return		;funcret
 13566  0166E8                     __end_of_MXK_Dequeue:
 13567                           	opt stack 0
 13568                           tosu	equ	0xFFF
 13569                           tosh	equ	0xFFE
 13570                           tosl	equ	0xFFD
 13571                           pclath	equ	0xFFA
 13572                           tblptru	equ	0xFF8
 13573                           tblptrh	equ	0xFF7
 13574                           tblptrl	equ	0xFF6
 13575                           tablat	equ	0xFF5
 13576                           prodh	equ	0xFF4
 13577                           prodl	equ	0xFF3
 13578                           postinc0	equ	0xFEE
 13579                           wreg	equ	0xFE8
 13580                           indf1	equ	0xFE7
 13581                           postdec1	equ	0xFE5
 13582                           fsr1h	equ	0xFE2
 13583                           fsr1l	equ	0xFE1
 13584                           indf2	equ	0xFDF
 13585                           postinc2	equ	0xFDE
 13586                           postdec2	equ	0xFDD
 13587                           plusw2	equ	0xFDB
 13588                           fsr2h	equ	0xFDA
 13589                           fsr2l	equ	0xFD9
 13590                           status	equ	0xFD8
 13591                           
 13592 ;; *************** function _Motor_Step *****************
 13593 ;; Defined at:
 13594 ;;		line 75 in file "Library/Motor.c"
 13595 ;; Parameters:    Size  Location     Type
 13596 ;;		None
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;		None
 13599 ;; Return value:  Size  Location     Type
 13600 ;;                  1    wreg      void 
 13601 ;; Registers used:
 13602 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13603 ;; Tracked objects:
 13604 ;;		On entry : 0/0
 13605 ;;		On exit  : 0/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13611 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13612 ;;Total ram usage:        2 bytes
 13613 ;; Hardware stack levels used:    1
 13614 ;; Hardware stack levels required when called:   11
 13615 ;; This function calls:
 13616 ;;		_MXK_Queue
 13617 ;;		_MXK_Release
 13618 ;;		_MXK_SwitchTo
 13619 ;;		_Port_SetPin
 13620 ;;		_Timer0_Restart
 13621 ;;		_Timer0_Stop
 13622 ;; This function is called by:
 13623 ;;		_Motor_Init
 13624 ;;		_MXK_Dequeue
 13625 ;;		_Timer0_ISR
 13626 ;; This function uses a non-reentrant model
 13627 ;;
 13628                           
 13629                           	psect	text55
 13630  013A3C                     __ptext55:
 13631                           	opt stack 0
 13632  013A3C                     _Motor_Step:
 13633                           	opt stack 0
 13634                           
 13635                           ; BSR set to: 0
 13636                           ;Skip over the trampoline to the duplicate function for level 2
 13637  013A3C  B251               	btfsc	btemp,1,c
 13638  013A3E  EF78  F0A0         	goto	i2_Motor_Step
 13639  013A42                     _Motor_Step$intlevel0:
 13640                           	opt stack 17
 13641                           
 13642                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 13643                           
 13644                           ;incstack = 0
 13645  013A42  0100               	movlb	0	; () banked
 13646  013A44  EE20 F004          	lfsr	2,4
 13647  013A48  51F1               	movf	_lMotor& (0+255),w,b
 13648  013A4A  26D9               	addwf	fsr2l,f,c
 13649  013A4C  51F2               	movf	(_lMotor+1)& (0+255),w,b
 13650  013A4E  22DA               	addwfc	fsr2h,f,c
 13651  013A50  50DF               	movf	indf2,w,c
 13652  013A52  ECF3  F0B2         	call	_MXK_SwitchTo
 13653  013A56  0900               	iorlw	0
 13654  013A58  B4D8               	btfsc	status,2,c
 13655  013A5A  D07A               	goto	l1627
 13656                           
 13657                           ;Motor.c: 78: {
 13658                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 13659  013A5C  C0F1  FFD9         	movff	_lMotor,fsr2l
 13660  013A60  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 13661  013A64  50DE               	movf	postinc2,w,c
 13662  013A66  10DE               	iorwf	postinc2,w,c
 13663  013A68  B4D8               	btfsc	status,2,c
 13664  013A6A  D06D               	goto	l1628
 13665                           
 13666                           ;Motor.c: 80: {
 13667                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 13668  013A6C  C0F1  FFD9         	movff	_lMotor,fsr2l
 13669  013A70  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 13670  013A74  0E01               	movlw	1
 13671  013A76  BEDB               	btfsc	plusw2,7,c
 13672  013A78  D026               	goto	l1629
 13673  013A7A  0E01               	movlw	1
 13674  013A7C  50DB               	movf	plusw2,w,c
 13675  013A7E  E103               	bnz	u11390
 13676  013A80  04DE               	decf	postinc2,w,c
 13677  013A82  A0D8               	btfss	status,0,c
 13678  013A84  D020               	goto	l1629
 13679  013A86                     u11390:
 13680                           
 13681                           ;Motor.c: 83: {
 13682                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 13683  013A86  C0F1  FFD9         	movff	_lMotor,fsr2l
 13684  013A8A  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 13685  013A8E  28DE               	incf	postinc2,w,c
 13686  013A90  E104               	bnz	u11400
 13687  013A92  0E7F               	movlw	127
 13688  013A94  18DE               	xorwf	postinc2,w,c
 13689  013A96  B4D8               	btfsc	status,2,c
 13690  013A98  D007               	goto	l1630
 13691  013A9A                     u11400:
 13692                           
 13693                           ;Motor.c: 85: lMotor->mDelta --;
 13694  013A9A  C0F1  FFD9         	movff	_lMotor,fsr2l
 13695  013A9E  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 13696  013AA2  06DE               	decf	postinc2,f,c
 13697  013AA4  0E00               	movlw	0
 13698  013AA6  5ADD               	subwfb	postdec2,f,c
 13699  013AA8                     l1630:
 13700                           
 13701                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 13702  013AA8  0E8A               	movlw	low _PortE
 13703  013AAA  0100               	movlb	0	; () banked
 13704  013AAC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13705  013AAE  0E01               	movlw	high _PortE
 13706  013AB0  0100               	movlb	0	; () banked
 13707  013AB2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13708  013AB4  0E00               	movlw	0
 13709  013AB6  0100               	movlb	0	; () banked
 13710  013AB8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13711  013ABA  0E01               	movlw	1
 13712  013ABC  0100               	movlb	0	; () banked
 13713  013ABE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13714  013AC0  EC72  F0A3         	call	_Port_SetPin	;wreg free
 13715                           
 13716                           ;Motor.c: 88: }
 13717  013AC4  D01F               	goto	l1631
 13718  013AC6                     l1629:
 13719                           
 13720                           ;Motor.c: 89: else
 13721                           ;Motor.c: 90: {
 13722                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 13723  013AC6  C0F1  FFD9         	movff	_lMotor,fsr2l
 13724  013ACA  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 13725  013ACE  04DE               	decf	postinc2,w,c
 13726  013AD0  E104               	bnz	u11410
 13727  013AD2  0E80               	movlw	128
 13728  013AD4  18DE               	xorwf	postinc2,w,c
 13729  013AD6  B4D8               	btfsc	status,2,c
 13730  013AD8  D007               	goto	l1632
 13731  013ADA                     u11410:
 13732                           
 13733                           ;Motor.c: 92: lMotor->mDelta ++;
 13734  013ADA  C0F1  FFD9         	movff	_lMotor,fsr2l
 13735  013ADE  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 13736  013AE2  2ADE               	incf	postinc2,f,c
 13737  013AE4  0E00               	movlw	0
 13738  013AE6  22DD               	addwfc	postdec2,f,c
 13739  013AE8                     l1632:
 13740                           
 13741                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 13742  013AE8  0E8A               	movlw	low _PortE
 13743  013AEA  0100               	movlb	0	; () banked
 13744  013AEC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13745  013AEE  0E01               	movlw	high _PortE
 13746  013AF0  0100               	movlb	0	; () banked
 13747  013AF2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13748  013AF4  0E00               	movlw	0
 13749  013AF6  0100               	movlb	0	; () banked
 13750  013AF8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13751  013AFA  0E00               	movlw	0
 13752  013AFC  0100               	movlb	0	; () banked
 13753  013AFE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13754  013B00  EC72  F0A3         	call	_Port_SetPin	;wreg free
 13755  013B04                     l1631:
 13756                           
 13757                           ;Motor.c: 95: }
 13758                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 13759  013B04  0E8A               	movlw	low _PortE
 13760  013B06  0100               	movlb	0	; () banked
 13761  013B08  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13762  013B0A  0E01               	movlw	high _PortE
 13763  013B0C  0100               	movlb	0	; () banked
 13764  013B0E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13765  013B10  0E01               	movlw	1
 13766  013B12  0100               	movlb	0	; () banked
 13767  013B14  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13768  013B16  0E01               	movlw	1
 13769  013B18  0100               	movlb	0	; () banked
 13770  013B1A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13771  013B1C  EC72  F0A3         	call	_Port_SetPin	;wreg free
 13772                           
 13773                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 13774  013B20  0E8A               	movlw	low _PortE
 13775  013B22  0100               	movlb	0	; () banked
 13776  013B24  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 13777  013B26  0E01               	movlw	high _PortE
 13778  013B28  0100               	movlb	0	; () banked
 13779  013B2A  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13780  013B2C  0E01               	movlw	1
 13781  013B2E  0100               	movlb	0	; () banked
 13782  013B30  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 13783  013B32  0E00               	movlw	0
 13784  013B34  0100               	movlb	0	; () banked
 13785  013B36  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 13786  013B38  EC72  F0A3         	call	_Port_SetPin	;wreg free
 13787                           
 13788                           ;Motor.c: 101: MXK_Release();
 13789  013B3C  EC4E  F0B6         	call	_MXK_Release	;wreg free
 13790                           
 13791                           ;Motor.c: 102: Timer0_Restart();
 13792  013B40  EC0D  F0B7         	call	_Timer0_Restart	;wreg free
 13793                           
 13794                           ;Motor.c: 103: return;
 13795  013B44  0012               	return	
 13796  013B46                     l1628:
 13797                           
 13798                           ;Motor.c: 104: }
 13799                           ;Motor.c: 105: MXK_Release();
 13800  013B46  EC4E  F0B6         	call	_MXK_Release	;wreg free
 13801                           
 13802                           ;Motor.c: 106: Timer0_Stop();
 13803  013B4A  EC3E  F0B7         	call	_Timer0_Stop	;wreg free
 13804                           
 13805                           ;Motor.c: 107: return;
 13806  013B4E  0012               	return	
 13807  013B50                     l1627:
 13808                           
 13809                           ;Motor.c: 108: }
 13810                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 13811  013B50  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 13812  013B54  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 13813  013B58  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 13814  013B5C  ECF8  F0B6         	call	_MXK_Queue	;wreg free
 13815  013B60  0012               	return		;funcret
 13816  013B62                     __end_of_Motor_Step:
 13817                           	opt stack 0
 13818                           tosu	equ	0xFFF
 13819                           tosh	equ	0xFFE
 13820                           tosl	equ	0xFFD
 13821                           pclath	equ	0xFFA
 13822                           tblptru	equ	0xFF8
 13823                           tblptrh	equ	0xFF7
 13824                           tblptrl	equ	0xFF6
 13825                           tablat	equ	0xFF5
 13826                           prodh	equ	0xFF4
 13827                           prodl	equ	0xFF3
 13828                           postinc0	equ	0xFEE
 13829                           wreg	equ	0xFE8
 13830                           indf1	equ	0xFE7
 13831                           postdec1	equ	0xFE5
 13832                           fsr1h	equ	0xFE2
 13833                           fsr1l	equ	0xFE1
 13834                           indf2	equ	0xFDF
 13835                           postinc2	equ	0xFDE
 13836                           postdec2	equ	0xFDD
 13837                           plusw2	equ	0xFDB
 13838                           fsr2h	equ	0xFDA
 13839                           fsr2l	equ	0xFD9
 13840                           status	equ	0xFD8
 13841                           
 13842 ;; *************** function _Timer0_Stop *****************
 13843 ;; Defined at:
 13844 ;;		line 89 in file "Library/Timer0.c"
 13845 ;; Parameters:    Size  Location     Type
 13846 ;;		None
 13847 ;; Auto vars:     Size  Location     Type
 13848 ;;		None
 13849 ;; Return value:  Size  Location     Type
 13850 ;;                  1    wreg      void 
 13851 ;; Registers used:
 13852 ;;		None
 13853 ;; Tracked objects:
 13854 ;;		On entry : 0/0
 13855 ;;		On exit  : 0/0
 13856 ;;		Unchanged: 0/0
 13857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13858 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13859 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13860 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13861 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13862 ;;Total ram usage:        0 bytes
 13863 ;; Hardware stack levels used:    1
 13864 ;; Hardware stack levels required when called:    7
 13865 ;; This function calls:
 13866 ;;		Nothing
 13867 ;; This function is called by:
 13868 ;;		_Motor_Step
 13869 ;; This function uses a non-reentrant model
 13870 ;;
 13871                           
 13872                           	psect	text56
 13873  016E7C                     __ptext56:
 13874                           	opt stack 0
 13875  016E7C                     _Timer0_Stop:
 13876                           	opt stack 20
 13877                           
 13878                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 13879                           
 13880                           ;incstack = 0
 13881  016E7C  9AF2               	bcf	intcon,5,c	;volatile
 13882                           
 13883                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 13884  016E7E  94F2               	bcf	intcon,2,c	;volatile
 13885  016E80  0012               	return		;funcret
 13886  016E82                     __end_of_Timer0_Stop:
 13887                           	opt stack 0
 13888                           tosu	equ	0xFFF
 13889                           tosh	equ	0xFFE
 13890                           tosl	equ	0xFFD
 13891                           pclath	equ	0xFFA
 13892                           tblptru	equ	0xFF8
 13893                           tblptrh	equ	0xFF7
 13894                           tblptrl	equ	0xFF6
 13895                           tablat	equ	0xFF5
 13896                           prodh	equ	0xFF4
 13897                           prodl	equ	0xFF3
 13898                           intcon	equ	0xFF2
 13899                           postinc0	equ	0xFEE
 13900                           wreg	equ	0xFE8
 13901                           indf1	equ	0xFE7
 13902                           postdec1	equ	0xFE5
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           plusw2	equ	0xFDB
 13909                           fsr2h	equ	0xFDA
 13910                           fsr2l	equ	0xFD9
 13911                           status	equ	0xFD8
 13912                           
 13913 ;; *************** function _Timer0_Restart *****************
 13914 ;; Defined at:
 13915 ;;		line 83 in file "Library/Timer0.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;		None
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;		None
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  1    wreg      void 
 13922 ;; Registers used:
 13923 ;;		None
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;Total ram usage:        0 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    7
 13936 ;; This function calls:
 13937 ;;		Nothing
 13938 ;; This function is called by:
 13939 ;;		_Motor_Step
 13940 ;; This function uses a non-reentrant model
 13941 ;;
 13942                           
 13943                           	psect	text57
 13944  016E1A                     __ptext57:
 13945                           	opt stack 0
 13946  016E1A                     _Timer0_Restart:
 13947                           	opt stack 20
 13948                           
 13949                           ;Timer0.c: 85: TMR0 = COUNTER;
 13950                           
 13951                           ;incstack = 0
 13952  016E1A  C033  FFD6         	movff	_COUNTER,4054	;volatile
 13953  016E1E  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
 13954                           
 13955                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 13956  016E22  8AF2               	bsf	intcon,5,c	;volatile
 13957  016E24  0012               	return		;funcret
 13958  016E26                     __end_of_Timer0_Restart:
 13959                           	opt stack 0
 13960                           tosu	equ	0xFFF
 13961                           tosh	equ	0xFFE
 13962                           tosl	equ	0xFFD
 13963                           pclath	equ	0xFFA
 13964                           tblptru	equ	0xFF8
 13965                           tblptrh	equ	0xFF7
 13966                           tblptrl	equ	0xFF6
 13967                           tablat	equ	0xFF5
 13968                           prodh	equ	0xFF4
 13969                           prodl	equ	0xFF3
 13970                           intcon	equ	0xFF2
 13971                           postinc0	equ	0xFEE
 13972                           wreg	equ	0xFE8
 13973                           indf1	equ	0xFE7
 13974                           postdec1	equ	0xFE5
 13975                           fsr1h	equ	0xFE2
 13976                           fsr1l	equ	0xFE1
 13977                           indf2	equ	0xFDF
 13978                           postinc2	equ	0xFDE
 13979                           postdec2	equ	0xFDD
 13980                           plusw2	equ	0xFDB
 13981                           fsr2h	equ	0xFDA
 13982                           fsr2l	equ	0xFD9
 13983                           status	equ	0xFD8
 13984                           
 13985 ;; *************** function _MXK_SwitchTo *****************
 13986 ;; Defined at:
 13987 ;;		line 105 in file "Library/MXK.c"
 13988 ;; Parameters:    Size  Location     Type
 13989 ;;  pModule         1    wreg     enum E6927
 13990 ;; Auto vars:     Size  Location     Type
 13991 ;;  pModule         1    7[BANK0 ] enum E6927
 13992 ;;  CUR             1    6[BANK0 ] unsigned char 
 13993 ;; Return value:  Size  Location     Type
 13994 ;;                  1    wreg      unsigned char 
 13995 ;; Registers used:
 13996 ;;		wreg, status,2, status,0, cstack
 13997 ;; Tracked objects:
 13998 ;;		On entry : 0/0
 13999 ;;		On exit  : 0/0
 14000 ;;		Unchanged: 0/0
 14001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14002 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14003 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14005 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14006 ;;Total ram usage:        2 bytes
 14007 ;; Hardware stack levels used:    1
 14008 ;; Hardware stack levels required when called:    8
 14009 ;; This function calls:
 14010 ;;		_delay_us
 14011 ;; This function is called by:
 14012 ;;		_Motor_Step
 14013 ;; This function uses a non-reentrant model
 14014 ;;
 14015                           
 14016                           	psect	text58
 14017  0165E6                     __ptext58:
 14018                           	opt stack 0
 14019  0165E6                     _MXK_SwitchTo:
 14020                           	opt stack 19
 14021                           
 14022                           ;incstack = 0
 14023                           ;MXK_SwitchTo@pModule stored from wreg
 14024  0165E6  0100               	movlb	0	; () banked
 14025  0165E8  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 14026                           
 14027                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 14028  0165EA  5086               	movf	3974,w,c	;volatile
 14029  0165EC  0B0F               	andlw	15
 14030  0165EE  0100               	movlb	0	; () banked
 14031  0165F0  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 14032                           
 14033                           ; BSR set to: 0
 14034                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 14035  0165F2  504C               	movf	_Bus_State,w,c
 14036  0165F4  A4D8               	btfss	status,2,c
 14037  0165F6  D002               	goto	l1730
 14038                           
 14039                           ; BSR set to: 0
 14040                           ;MXK.c: 110: return 0;
 14041  0165F8  0E00               	movlw	0
 14042                           
 14043                           ; BSR set to: 0
 14044  0165FA  0012               	return	
 14045  0165FC                     l1730:
 14046                           
 14047                           ; BSR set to: 0
 14048                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 14049                           
 14050                           ; BSR set to: 0
 14051  0165FC  0E00               	movlw	0
 14052  0165FE  6E4C               	movwf	_Bus_State,c
 14053                           
 14054                           ; BSR set to: 0
 14055                           ;MXK.c: 114: if (CUR != pModule)
 14056  016600  0100               	movlb	0	; () banked
 14057  016602  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 14058  016604  0100               	movlb	0	; () banked
 14059  016606  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 14060  016608  B4D8               	btfsc	status,2,c
 14061  01660A  D00C               	goto	l1732
 14062                           
 14063                           ; BSR set to: 0
 14064                           ;MXK.c: 115: {
 14065                           ;MXK.c: 116: PORTG &= ~(0xF);
 14066  01660C  0EF0               	movlw	240
 14067  01660E  1686               	andwf	3974,f,c	;volatile
 14068                           
 14069                           ;MXK.c: 117: PORTG |= pModule;
 14070  016610  0100               	movlb	0	; () banked
 14071  016612  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 14072  016614  1286               	iorwf	3974,f,c	;volatile
 14073                           
 14074                           ; BSR set to: 0
 14075                           ;MXK.c: 120: delay_us(10);
 14076  016616  0E00               	movlw	0
 14077  016618  0100               	movlb	0	; () banked
 14078  01661A  6F61               	movwf	(delay_us@us+1)& (0+255),b
 14079  01661C  0E0A               	movlw	10
 14080  01661E  6F60               	movwf	delay_us@us& (0+255),b
 14081  016620  EC36  F0B1         	call	_delay_us	;wreg free
 14082  016624                     l1732:
 14083                           
 14084                           ;MXK.c: 121: }
 14085                           ;MXK.c: 122: return 1;
 14086  016624  0E01               	movlw	1
 14087  016626  0012               	return	
 14088  016628                     __end_of_MXK_SwitchTo:
 14089                           	opt stack 0
 14090                           tosu	equ	0xFFF
 14091                           tosh	equ	0xFFE
 14092                           tosl	equ	0xFFD
 14093                           pclath	equ	0xFFA
 14094                           tblptru	equ	0xFF8
 14095                           tblptrh	equ	0xFF7
 14096                           tblptrl	equ	0xFF6
 14097                           tablat	equ	0xFF5
 14098                           prodh	equ	0xFF4
 14099                           prodl	equ	0xFF3
 14100                           intcon	equ	0xFF2
 14101                           postinc0	equ	0xFEE
 14102                           wreg	equ	0xFE8
 14103                           indf1	equ	0xFE7
 14104                           postdec1	equ	0xFE5
 14105                           fsr1h	equ	0xFE2
 14106                           fsr1l	equ	0xFE1
 14107                           indf2	equ	0xFDF
 14108                           postinc2	equ	0xFDE
 14109                           postdec2	equ	0xFDD
 14110                           plusw2	equ	0xFDB
 14111                           fsr2h	equ	0xFDA
 14112                           fsr2l	equ	0xFD9
 14113                           status	equ	0xFD8
 14114                           
 14115 ;; *************** function _MXK_Release *****************
 14116 ;; Defined at:
 14117 ;;		line 130 in file "Library/MXK.c"
 14118 ;; Parameters:    Size  Location     Type
 14119 ;;		None
 14120 ;; Auto vars:     Size  Location     Type
 14121 ;;		None
 14122 ;; Return value:  Size  Location     Type
 14123 ;;                  1    wreg      unsigned char 
 14124 ;; Registers used:
 14125 ;;		wreg, status,2, status,0
 14126 ;; Tracked objects:
 14127 ;;		On entry : 0/0
 14128 ;;		On exit  : 0/0
 14129 ;;		Unchanged: 0/0
 14130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14135 ;;Total ram usage:        0 bytes
 14136 ;; Hardware stack levels used:    1
 14137 ;; Hardware stack levels required when called:    7
 14138 ;; This function calls:
 14139 ;;		Nothing
 14140 ;; This function is called by:
 14141 ;;		_Motor_Step
 14142 ;;		_initialise
 14143 ;;		_main
 14144 ;; This function uses a non-reentrant model
 14145 ;;
 14146                           
 14147                           	psect	text59
 14148  016C9C                     __ptext59:
 14149                           	opt stack 0
 14150  016C9C                     _MXK_Release:
 14151                           	opt stack 22
 14152                           
 14153                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 14154                           
 14155                           ;incstack = 0
 14156  016C9C  0E01               	movlw	1
 14157  016C9E  6E4C               	movwf	_Bus_State,c
 14158                           
 14159                           ;MXK.c: 134: if (lQueue != 0)
 14160  016CA0  0100               	movlb	0	; () banked
 14161  016CA2  51EC               	movf	_lQueue& (0+255),w,b	;volatile
 14162  016CA4  0100               	movlb	0	; () banked
 14163  016CA6  11ED               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 14164  016CA8  0100               	movlb	0	; () banked
 14165  016CAA  11EE               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 14166  016CAC  B4D8               	btfsc	status,2,c
 14167  016CAE  D002               	goto	l1735
 14168                           
 14169                           ; BSR set to: 0
 14170                           ;MXK.c: 135: return 1;
 14171  016CB0  0E01               	movlw	1
 14172                           
 14173                           ; BSR set to: 0
 14174  016CB2  0012               	return	
 14175  016CB4                     l1735:
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;MXK.c: 137: return 0;
 14179                           
 14180                           ; BSR set to: 0
 14181  016CB4  0E00               	movlw	0
 14182  016CB6  0012               	return	
 14183  016CB8                     __end_of_MXK_Release:
 14184                           	opt stack 0
 14185                           tosu	equ	0xFFF
 14186                           tosh	equ	0xFFE
 14187                           tosl	equ	0xFFD
 14188                           pclath	equ	0xFFA
 14189                           tblptru	equ	0xFF8
 14190                           tblptrh	equ	0xFF7
 14191                           tblptrl	equ	0xFF6
 14192                           tablat	equ	0xFF5
 14193                           prodh	equ	0xFF4
 14194                           prodl	equ	0xFF3
 14195                           intcon	equ	0xFF2
 14196                           postinc0	equ	0xFEE
 14197                           wreg	equ	0xFE8
 14198                           indf1	equ	0xFE7
 14199                           postdec1	equ	0xFE5
 14200                           fsr1h	equ	0xFE2
 14201                           fsr1l	equ	0xFE1
 14202                           indf2	equ	0xFDF
 14203                           postinc2	equ	0xFDE
 14204                           postdec2	equ	0xFDD
 14205                           plusw2	equ	0xFDB
 14206                           fsr2h	equ	0xFDA
 14207                           fsr2l	equ	0xFD9
 14208                           status	equ	0xFD8
 14209                           
 14210 ;; *************** function _MXK_Queue *****************
 14211 ;; Defined at:
 14212 ;;		line 144 in file "Library/MXK.c"
 14213 ;; Parameters:    Size  Location     Type
 14214 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 14215 ;;		 -> Absolute function(1), Motor_Step(1), 
 14216 ;; Auto vars:     Size  Location     Type
 14217 ;;		None
 14218 ;; Return value:  Size  Location     Type
 14219 ;;                  1    wreg      void 
 14220 ;; Registers used:
 14221 ;;		wreg, status,2, status,0
 14222 ;; Tracked objects:
 14223 ;;		On entry : 0/0
 14224 ;;		On exit  : 0/0
 14225 ;;		Unchanged: 0/0
 14226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14227 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14230 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14231 ;;Total ram usage:        3 bytes
 14232 ;; Hardware stack levels used:    1
 14233 ;; Hardware stack levels required when called:    7
 14234 ;; This function calls:
 14235 ;;		Nothing
 14236 ;; This function is called by:
 14237 ;;		_Motor_Step
 14238 ;; This function uses a non-reentrant model
 14239 ;;
 14240                           
 14241                           	psect	text60
 14242  016DF0                     __ptext60:
 14243                           	opt stack 0
 14244  016DF0                     _MXK_Queue:
 14245                           	opt stack 20
 14246                           
 14247                           ;MXK.c: 146: lQueue = pCallback;
 14248                           
 14249                           ; BSR set to: 0
 14250                           ;incstack = 0
 14251  016DF0  C060  F0EC         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 14252  016DF4  C061  F0ED         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 14253  016DF8  C062  F0EE         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 14254  016DFC  0012               	return		;funcret
 14255  016DFE                     __end_of_MXK_Queue:
 14256                           	opt stack 0
 14257                           tosu	equ	0xFFF
 14258                           tosh	equ	0xFFE
 14259                           tosl	equ	0xFFD
 14260                           pclath	equ	0xFFA
 14261                           tblptru	equ	0xFF8
 14262                           tblptrh	equ	0xFF7
 14263                           tblptrl	equ	0xFF6
 14264                           tablat	equ	0xFF5
 14265                           prodh	equ	0xFF4
 14266                           prodl	equ	0xFF3
 14267                           intcon	equ	0xFF2
 14268                           postinc0	equ	0xFEE
 14269                           wreg	equ	0xFE8
 14270                           indf1	equ	0xFE7
 14271                           postdec1	equ	0xFE5
 14272                           fsr1h	equ	0xFE2
 14273                           fsr1l	equ	0xFE1
 14274                           indf2	equ	0xFDF
 14275                           postinc2	equ	0xFDE
 14276                           postdec2	equ	0xFDD
 14277                           plusw2	equ	0xFDB
 14278                           fsr2h	equ	0xFDA
 14279                           fsr2l	equ	0xFD9
 14280                           status	equ	0xFD8
 14281                           
 14282 ;; *************** function _MXK_BlockSwitchTo *****************
 14283 ;; Defined at:
 14284 ;;		line 82 in file "Library/MXK.c"
 14285 ;; Parameters:    Size  Location     Type
 14286 ;;  pModule         1    wreg     enum E6927
 14287 ;; Auto vars:     Size  Location     Type
 14288 ;;  pModule         1    7[BANK0 ] enum E6927
 14289 ;;  CUR             1    6[BANK0 ] unsigned char 
 14290 ;; Return value:  Size  Location     Type
 14291 ;;                  1    wreg      unsigned char 
 14292 ;; Registers used:
 14293 ;;		wreg, status,2, status,0, cstack
 14294 ;; Tracked objects:
 14295 ;;		On entry : 0/0
 14296 ;;		On exit  : 0/0
 14297 ;;		Unchanged: 0/0
 14298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14300 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14302 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14303 ;;Total ram usage:        2 bytes
 14304 ;; Hardware stack levels used:    1
 14305 ;; Hardware stack levels required when called:    8
 14306 ;; This function calls:
 14307 ;;		_delay_us
 14308 ;; This function is called by:
 14309 ;;		_initialise
 14310 ;;		_main
 14311 ;; This function uses a non-reentrant model
 14312 ;;
 14313                           
 14314                           	psect	text61
 14315  0166E8                     __ptext61:
 14316                           	opt stack 0
 14317  0166E8                     _MXK_BlockSwitchTo:
 14318                           	opt stack 21
 14319                           
 14320                           ;incstack = 0
 14321                           ;MXK_BlockSwitchTo@pModule stored from wreg
 14322  0166E8  0100               	movlb	0	; () banked
 14323  0166EA  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 14324                           
 14325                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 14326  0166EC  5086               	movf	3974,w,c	;volatile
 14327  0166EE  0B0F               	andlw	15
 14328  0166F0  0100               	movlb	0	; () banked
 14329  0166F2  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 14330  0166F4                     
 14331                           ; BSR set to: 0
 14332                           
 14333                           ; BSR set to: 0
 14334  0166F4  504C               	movf	_Bus_State,w,c
 14335  0166F6  B4D8               	btfsc	status,2,c
 14336  0166F8  D7FD               	goto	l1724
 14337                           
 14338                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 14339  0166FA  0E00               	movlw	0
 14340  0166FC  6E4C               	movwf	_Bus_State,c
 14341                           
 14342                           ;MXK.c: 90: if (CUR != pModule)
 14343  0166FE  0100               	movlb	0	; () banked
 14344  016700  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 14345  016702  0100               	movlb	0	; () banked
 14346  016704  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 14347  016706  B4D8               	btfsc	status,2,c
 14348  016708  D00C               	goto	l1726
 14349                           
 14350                           ; BSR set to: 0
 14351                           ;MXK.c: 91: {
 14352                           ;MXK.c: 92: PORTG &= ~(0xF);
 14353  01670A  0EF0               	movlw	240
 14354  01670C  1686               	andwf	3974,f,c	;volatile
 14355                           
 14356                           ;MXK.c: 93: PORTG |= pModule;
 14357  01670E  0100               	movlb	0	; () banked
 14358  016710  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 14359  016712  1286               	iorwf	3974,f,c	;volatile
 14360                           
 14361                           ; BSR set to: 0
 14362                           ;MXK.c: 96: delay_us(10);
 14363  016714  0E00               	movlw	0
 14364  016716  0100               	movlb	0	; () banked
 14365  016718  6F61               	movwf	(delay_us@us+1)& (0+255),b
 14366  01671A  0E0A               	movlw	10
 14367  01671C  6F60               	movwf	delay_us@us& (0+255),b
 14368  01671E  EC36  F0B1         	call	_delay_us	;wreg free
 14369  016722                     l1726:
 14370                           
 14371                           ;MXK.c: 97: }
 14372                           ;MXK.c: 98: return 1;
 14373  016722  0E01               	movlw	1
 14374  016724  0012               	return	
 14375  016726                     __end_of_MXK_BlockSwitchTo:
 14376                           	opt stack 0
 14377                           tosu	equ	0xFFF
 14378                           tosh	equ	0xFFE
 14379                           tosl	equ	0xFFD
 14380                           pclath	equ	0xFFA
 14381                           tblptru	equ	0xFF8
 14382                           tblptrh	equ	0xFF7
 14383                           tblptrl	equ	0xFF6
 14384                           tablat	equ	0xFF5
 14385                           prodh	equ	0xFF4
 14386                           prodl	equ	0xFF3
 14387                           intcon	equ	0xFF2
 14388                           postinc0	equ	0xFEE
 14389                           wreg	equ	0xFE8
 14390                           indf1	equ	0xFE7
 14391                           postdec1	equ	0xFE5
 14392                           fsr1h	equ	0xFE2
 14393                           fsr1l	equ	0xFE1
 14394                           indf2	equ	0xFDF
 14395                           postinc2	equ	0xFDE
 14396                           postdec2	equ	0xFDD
 14397                           plusw2	equ	0xFDB
 14398                           fsr2h	equ	0xFDA
 14399                           fsr2l	equ	0xFD9
 14400                           status	equ	0xFD8
 14401                           
 14402 ;; *************** function _delay_us *****************
 14403 ;; Defined at:
 14404 ;;		line 255 in file "Library/Types.c"
 14405 ;; Parameters:    Size  Location     Type
 14406 ;;  us              2    0[BANK0 ] unsigned short 
 14407 ;; Auto vars:     Size  Location     Type
 14408 ;;  u               4    2[BANK0 ] unsigned long 
 14409 ;; Return value:  Size  Location     Type
 14410 ;;                  1    wreg      void 
 14411 ;; Registers used:
 14412 ;;		wreg, status,2, status,0
 14413 ;; Tracked objects:
 14414 ;;		On entry : 0/0
 14415 ;;		On exit  : 0/0
 14416 ;;		Unchanged: 0/0
 14417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14418 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14419 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14421 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14422 ;;Total ram usage:        6 bytes
 14423 ;; Hardware stack levels used:    1
 14424 ;; Hardware stack levels required when called:    7
 14425 ;; This function calls:
 14426 ;;		Nothing
 14427 ;; This function is called by:
 14428 ;;		_MXK_BlockSwitchTo
 14429 ;;		_MXK_SwitchTo
 14430 ;; This function uses a non-reentrant model
 14431 ;;
 14432                           
 14433                           	psect	text62
 14434  01626C                     __ptext62:
 14435                           	opt stack 0
 14436  01626C                     _delay_us:
 14437                           	opt stack 19
 14438                           
 14439                           ;Types.c: 256: unsigned long u;
 14440                           ;Types.c: 257: while (us--) {
 14441                           
 14442                           ;incstack = 0
 14443  01626C  D01C               	goto	u9710
 14444  01626E                     l12539:
 14445                           
 14446                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 14447  01626E  0E00               	movlw	0
 14448  016270  0100               	movlb	0	; () banked
 14449  016272  6F62               	movwf	delay_us@u& (0+255),b
 14450  016274  0E00               	movlw	0
 14451  016276  6F63               	movwf	(delay_us@u+1)& (0+255),b
 14452  016278  0E00               	movlw	0
 14453  01627A  6F64               	movwf	(delay_us@u+2)& (0+255),b
 14454  01627C  0E00               	movlw	0
 14455  01627E  6F65               	movwf	(delay_us@u+3)& (0+255),b
 14456  016280                     l12541:
 14457                           
 14458                           ; BSR set to: 0
 14459  016280  0100               	movlb	0	; () banked
 14460  016282  5162               	movf	delay_us@u& (0+255),w,b
 14461  016284  0100               	movlb	0	; () banked
 14462  016286  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 14463  016288  0100               	movlb	0	; () banked
 14464  01628A  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 14465  01628C  0100               	movlb	0	; () banked
 14466  01628E  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 14467  016290  A4D8               	btfss	status,2,c
 14468  016292  D009               	goto	u9710
 14469                           
 14470                           ; BSR set to: 0
 14471                           
 14472                           ; BSR set to: 0
 14473  016294  F000               	nop		; ;# 
 14474  016296  0E01               	movlw	1
 14475  016298  0100               	movlb	0	; () banked
 14476  01629A  2762               	addwf	delay_us@u& (0+255),f,b
 14477  01629C  0E00               	movlw	0
 14478  01629E  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 14479  0162A0  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 14480  0162A2  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 14481  0162A4  D7ED               	goto	l12541
 14482  0162A6                     u9710:
 14483                           
 14484                           ; BSR set to: 0
 14485                           
 14486                           ; BSR set to: 0
 14487  0162A6  0100               	movlb	0	; () banked
 14488  0162A8  0760               	decf	delay_us@us& (0+255),f,b
 14489  0162AA  A0D8               	btfss	status,0,c
 14490  0162AC  0761               	decf	(delay_us@us+1)& (0+255),f,b
 14491  0162AE  0100               	movlb	0	; () banked
 14492  0162B0  2960               	incf	delay_us@us& (0+255),w,b
 14493  0162B2  E1DD               	bnz	l12539
 14494  0162B4  0100               	movlb	0	; () banked
 14495  0162B6  2961               	incf	(delay_us@us+1)& (0+255),w,b
 14496  0162B8  B4D8               	btfsc	status,2,c
 14497  0162BA  0012               	return	
 14498  0162BC  D7D8               	goto	l832
 14499  0162BE                     __end_of_delay_us:
 14500                           	opt stack 0
 14501                           tosu	equ	0xFFF
 14502                           tosh	equ	0xFFE
 14503                           tosl	equ	0xFFD
 14504                           pclath	equ	0xFFA
 14505                           tblptru	equ	0xFF8
 14506                           tblptrh	equ	0xFF7
 14507                           tblptrl	equ	0xFF6
 14508                           tablat	equ	0xFF5
 14509                           prodh	equ	0xFF4
 14510                           prodl	equ	0xFF3
 14511                           intcon	equ	0xFF2
 14512                           postinc0	equ	0xFEE
 14513                           wreg	equ	0xFE8
 14514                           indf1	equ	0xFE7
 14515                           postdec1	equ	0xFE5
 14516                           fsr1h	equ	0xFE2
 14517                           fsr1l	equ	0xFE1
 14518                           indf2	equ	0xFDF
 14519                           postinc2	equ	0xFDE
 14520                           postdec2	equ	0xFDD
 14521                           plusw2	equ	0xFDB
 14522                           fsr2h	equ	0xFDA
 14523                           fsr2l	equ	0xFD9
 14524                           status	equ	0xFD8
 14525                           
 14526 ;; *************** function _LCD_Init *****************
 14527 ;; Defined at:
 14528 ;;		line 172 in file "Library/LCD.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;		None
 14531 ;; Auto vars:     Size  Location     Type
 14532 ;;  i               2   55[BANK0 ] unsigned short 
 14533 ;; Return value:  Size  Location     Type
 14534 ;;                  1    wreg      void 
 14535 ;; Registers used:
 14536 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14537 ;; Tracked objects:
 14538 ;;		On entry : 0/0
 14539 ;;		On exit  : 0/0
 14540 ;;		Unchanged: 0/0
 14541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14543 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14544 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14545 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14546 ;;Total ram usage:        4 bytes
 14547 ;; Hardware stack levels used:    1
 14548 ;; Hardware stack levels required when called:   15
 14549 ;; This function calls:
 14550 ;;		_Configure_GPIOs
 14551 ;;		_LCD_Fill
 14552 ;;		_LCD_Write
 14553 ;;		_Set_Rotation
 14554 ;;		_delay_ms
 14555 ;; This function is called by:
 14556 ;;		_initialise
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           	psect	text63
 14561  0134A8                     __ptext63:
 14562                           	opt stack 0
 14563  0134A8                     _LCD_Init:
 14564                           	opt stack 14
 14565                           
 14566                           ;LCD.c: 174: UINT16 i;
 14567                           ;LCD.c: 175: Configure_GPIOs();
 14568                           
 14569                           ; BSR set to: 0
 14570                           ;incstack = 0
 14571  0134A8  EC78  F0AE         	call	_Configure_GPIOs	;wreg free
 14572                           
 14573                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 14574  0134AC  0E00               	movlw	0
 14575  0134AE  0100               	movlb	0	; () banked
 14576  0134B0  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 14577  0134B2  0E00               	movlw	0
 14578  0134B4  6F97               	movwf	LCD_Init@i& (0+255),b
 14579                           
 14580                           ; BSR set to: 0
 14581  0134B6  0100               	movlb	0	; () banked
 14582  0134B8  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 14583  0134BA  E106               	bnz	u11530
 14584  0134BC  0E59               	movlw	89
 14585  0134BE  0100               	movlb	0	; () banked
 14586  0134C0  5D97               	subwf	LCD_Init@i& (0+255),w,b
 14587  0134C2  B0D8               	btfsc	status,0,c
 14588  0134C4  D08B               	goto	u11570
 14589  0134C6  D001               	goto	l85
 14590  0134C8                     u11530:
 14591                           
 14592                           ; BSR set to: 0
 14593  0134C8  D089               	goto	u11570
 14594  0134CA                     l85:
 14595                           
 14596                           ; BSR set to: 0
 14597                           ;LCD.c: 178: {
 14598                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 14599                           
 14600                           ; BSR set to: 0
 14601  0134CA  90D8               	bcf	status,0,c
 14602  0134CC  0100               	movlb	0	; () banked
 14603  0134CE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 14604  0134D0  6EF6               	movwf	tblptrl,c
 14605  0134D2  0100               	movlb	0	; () banked
 14606  0134D4  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14607  0134D6  6EF7               	movwf	tblptrh,c
 14608  0134D8  0EE3               	movlw	low _InitList
 14609  0134DA  26F6               	addwf	tblptrl,f,c
 14610  0134DC  0EFB               	movlw	high _InitList
 14611  0134DE  22F7               	addwfc	tblptrh,f,c
 14612  0134E0                     	if	1	;There are 3 active tblptr bytes
 14613  0134E0  6AF8               	clrf	tblptru,c
 14614  0134E2  0E00               	movlw	low (__mediumconst shr (0+16))
 14615  0134E4  22F8               	addwfc	tblptru,f,c
 14616  0134E6                     	endif
 14617  0134E6  0009               	tblrd		*+
 14618  0134E8  0E80               	movlw	128
 14619  0134EA  18F5               	xorwf	tablat,w,c
 14620  0134EC  0009               	tblrd		*+
 14621  0134EE  10F5               	iorwf	tablat,w,c
 14622  0134F0  A4D8               	btfss	status,2,c
 14623  0134F2  D022               	goto	l87
 14624                           
 14625                           ; BSR set to: 0
 14626  0134F4  0100               	movlb	0	; () banked
 14627  0134F6  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 14628  0134F8  E11F               	bnz	l14119
 14629  0134FA  0E58               	movlw	88
 14630  0134FC  0100               	movlb	0	; () banked
 14631  0134FE  5D97               	subwf	LCD_Init@i& (0+255),w,b
 14632  013500  B0D8               	btfsc	status,0,c
 14633  013502  D01A               	goto	l87
 14634                           
 14635                           ; BSR set to: 0
 14636                           ;LCD.c: 180: delay_ms(InitList[++i]);
 14637  013504  0100               	movlb	0	; () banked
 14638  013506  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 14639  013508  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 14640  01350A  90D8               	bcf	status,0,c
 14641  01350C  0100               	movlb	0	; () banked
 14642  01350E  3597               	rlcf	LCD_Init@i& (0+255),w,b
 14643  013510  6EF6               	movwf	tblptrl,c
 14644  013512  0100               	movlb	0	; () banked
 14645  013514  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14646  013516  6EF7               	movwf	tblptrh,c
 14647  013518  0EE3               	movlw	low _InitList
 14648  01351A  26F6               	addwf	tblptrl,f,c
 14649  01351C  0EFB               	movlw	high _InitList
 14650  01351E  22F7               	addwfc	tblptrh,f,c
 14651  013520                     	if	1	;There are 3 active tblptr bytes
 14652  013520  6AF8               	clrf	tblptru,c
 14653  013522  0E00               	movlw	low (__mediumconst shr (0+16))
 14654  013524  22F8               	addwfc	tblptru,f,c
 14655  013526                     	endif
 14656  013526  0009               	tblrd		*+
 14657  013528  CFF5 F060          	movff	tablat,delay_ms@ms
 14658  01352C  000A               	tblrd		*-
 14659  01352E  CFF5 F061          	movff	tablat,delay_ms@ms+1
 14660  013532  EC1C  F0AF         	call	_delay_ms	;wreg free
 14661  013536  D04B               	goto	l90
 14662  013538                     l87:
 14663  013538                     l14119:
 14664                           
 14665                           ;LCD.c: 181: else
 14666                           ;LCD.c: 182: {
 14667                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 14668  013538  90D8               	bcf	status,0,c
 14669  01353A  0100               	movlb	0	; () banked
 14670  01353C  3597               	rlcf	LCD_Init@i& (0+255),w,b
 14671  01353E  6EF6               	movwf	tblptrl,c
 14672  013540  0100               	movlb	0	; () banked
 14673  013542  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14674  013544  6EF7               	movwf	tblptrh,c
 14675  013546  0EE3               	movlw	low _InitList
 14676  013548  26F6               	addwf	tblptrl,f,c
 14677  01354A  0EFB               	movlw	high _InitList
 14678  01354C  22F7               	addwfc	tblptrh,f,c
 14679  01354E                     	if	1	;There are 3 active tblptr bytes
 14680  01354E  6AF8               	clrf	tblptru,c
 14681  013550  0E00               	movlw	low (__mediumconst shr (0+16))
 14682  013552  22F8               	addwfc	tblptru,f,c
 14683  013554                     	endif
 14684  013554  0009               	tblrd		*+
 14685  013556  0E00               	movlw	0
 14686  013558  5EF5               	subwf	tablat,f,c
 14687  01355A  0009               	tblrd		*+
 14688  01355C  0E01               	movlw	1
 14689  01355E  5AF5               	subwfb	tablat,f,c
 14690  013560  A0D8               	btfss	status,0,c
 14691  013562  D020               	goto	l89
 14692                           
 14693                           ; BSR set to: 0
 14694  013564  0E00               	movlw	0
 14695  013566  0100               	movlb	0	; () banked
 14696  013568  6F63               	movwf	LCD_Write@mode& (0+255),b
 14697  01356A  90D8               	bcf	status,0,c
 14698  01356C  0100               	movlb	0	; () banked
 14699  01356E  3597               	rlcf	LCD_Init@i& (0+255),w,b
 14700  013570  6EF6               	movwf	tblptrl,c
 14701  013572  0100               	movlb	0	; () banked
 14702  013574  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14703  013576  6EF7               	movwf	tblptrh,c
 14704  013578  0EE3               	movlw	low _InitList
 14705  01357A  26F6               	addwf	tblptrl,f,c
 14706  01357C  0EFB               	movlw	high _InitList
 14707  01357E  22F7               	addwfc	tblptrh,f,c
 14708  013580                     	if	1	;There are 3 active tblptr bytes
 14709  013580  6AF8               	clrf	tblptru,c
 14710  013582  0E00               	movlw	low (__mediumconst shr (0+16))
 14711  013584  22F8               	addwfc	tblptru,f,c
 14712  013586                     	endif
 14713  013586  0009               	tblrd		*+
 14714  013588  CFF5 F095          	movff	tablat,??_LCD_Init
 14715  01358C  0009               	tblrd		*+
 14716  01358E  CFF5 F096          	movff	tablat,??_LCD_Init+1
 14717  013592  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 14718  013596  0100               	movlb	0	; () banked
 14719  013598  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 14720  01359A  0100               	movlb	0	; () banked
 14721  01359C  5195               	movf	??_LCD_Init& (0+255),w,b
 14722  01359E  ECC4  F0B5         	call	_LCD_Write
 14723  0135A2  D015               	goto	l90
 14724  0135A4                     l89:
 14725                           
 14726                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 14727  0135A4  0E01               	movlw	1
 14728  0135A6  0100               	movlb	0	; () banked
 14729  0135A8  6F63               	movwf	LCD_Write@mode& (0+255),b
 14730  0135AA  90D8               	bcf	status,0,c
 14731  0135AC  0100               	movlb	0	; () banked
 14732  0135AE  3597               	rlcf	LCD_Init@i& (0+255),w,b
 14733  0135B0  6EF6               	movwf	tblptrl,c
 14734  0135B2  0100               	movlb	0	; () banked
 14735  0135B4  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 14736  0135B6  6EF7               	movwf	tblptrh,c
 14737  0135B8  0EE3               	movlw	low _InitList
 14738  0135BA  26F6               	addwf	tblptrl,f,c
 14739  0135BC  0EFB               	movlw	high _InitList
 14740  0135BE  22F7               	addwfc	tblptrh,f,c
 14741  0135C0                     	if	1	;There are 3 active tblptr bytes
 14742  0135C0  6AF8               	clrf	tblptru,c
 14743  0135C2  0E00               	movlw	low (__mediumconst shr (0+16))
 14744  0135C4  22F8               	addwfc	tblptru,f,c
 14745  0135C6                     	endif
 14746  0135C6  0008               	tblrd		*
 14747  0135C8  50F5               	movf	tablat,w,c
 14748  0135CA  ECC4  F0B5         	call	_LCD_Write
 14749  0135CE                     l90:
 14750  0135CE  0100               	movlb	0	; () banked
 14751  0135D0  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 14752  0135D2  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 14753                           
 14754                           ; BSR set to: 0
 14755  0135D4  0100               	movlb	0	; () banked
 14756  0135D6  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 14757  0135D8  E101               	bnz	l14129
 14758  0135DA  D770               	goto	L11
 14759  0135DC                     u11570:
 14760  0135DC                     l14129:
 14761                           
 14762                           ; BSR set to: 0
 14763                           ;LCD.c: 185: }
 14764                           ;LCD.c: 186: }
 14765                           ;LCD.c: 187: delay_ms(100);
 14766  0135DC  0E00               	movlw	0
 14767  0135DE  0100               	movlb	0	; () banked
 14768  0135E0  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14769  0135E2  0E64               	movlw	100
 14770  0135E4  6F60               	movwf	delay_ms@ms& (0+255),b
 14771  0135E6  EC1C  F0AF         	call	_delay_ms	;wreg free
 14772                           
 14773                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 14774  0135EA  0E00               	movlw	0
 14775  0135EC  0100               	movlb	0	; () banked
 14776  0135EE  6F63               	movwf	LCD_Write@mode& (0+255),b
 14777  0135F0  0E29               	movlw	41
 14778  0135F2  ECC4  F0B5         	call	_LCD_Write
 14779                           
 14780                           ;LCD.c: 189: Set_Rotation(1);
 14781  0135F6  0E01               	movlw	1
 14782  0135F8  ECF7  F0A9         	call	_Set_Rotation
 14783                           
 14784                           ;LCD.c: 191: delay_ms(100);
 14785  0135FC  0E00               	movlw	0
 14786  0135FE  0100               	movlb	0	; () banked
 14787  013600  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14788  013602  0E64               	movlw	100
 14789  013604  6F60               	movwf	delay_ms@ms& (0+255),b
 14790  013606  EC1C  F0AF         	call	_delay_ms	;wreg free
 14791                           
 14792                           ;LCD.c: 192: LCD_Fill(0x0000);
 14793  01360A  0E00               	movlw	0
 14794  01360C  0100               	movlb	0	; () banked
 14795  01360E  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 14796  013610  0E00               	movlw	0
 14797  013612  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 14798  013614  EC0A  F0B1         	call	_LCD_Fill	;wreg free
 14799  013618  0012               	return		;funcret
 14800  01361A                     __end_of_LCD_Init:
 14801                           	opt stack 0
 14802                           tosu	equ	0xFFF
 14803                           tosh	equ	0xFFE
 14804                           tosl	equ	0xFFD
 14805                           pclath	equ	0xFFA
 14806                           tblptru	equ	0xFF8
 14807                           tblptrh	equ	0xFF7
 14808                           tblptrl	equ	0xFF6
 14809                           tablat	equ	0xFF5
 14810                           prodh	equ	0xFF4
 14811                           prodl	equ	0xFF3
 14812                           intcon	equ	0xFF2
 14813                           postinc0	equ	0xFEE
 14814                           wreg	equ	0xFE8
 14815                           indf1	equ	0xFE7
 14816                           postdec1	equ	0xFE5
 14817                           fsr1h	equ	0xFE2
 14818                           fsr1l	equ	0xFE1
 14819                           indf2	equ	0xFDF
 14820                           postinc2	equ	0xFDE
 14821                           postdec2	equ	0xFDD
 14822                           plusw2	equ	0xFDB
 14823                           fsr2h	equ	0xFDA
 14824                           fsr2l	equ	0xFD9
 14825                           status	equ	0xFD8
 14826                           
 14827 ;; *************** function _Set_Rotation *****************
 14828 ;; Defined at:
 14829 ;;		line 248 in file "Library/LCD.c"
 14830 ;; Parameters:    Size  Location     Type
 14831 ;;  m               1    wreg     unsigned char 
 14832 ;; Auto vars:     Size  Location     Type
 14833 ;;  m               1    5[BANK0 ] unsigned char 
 14834 ;;  rotation        1    6[BANK0 ] unsigned char 
 14835 ;; Return value:  Size  Location     Type
 14836 ;;                  1    wreg      void 
 14837 ;; Registers used:
 14838 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14839 ;; Tracked objects:
 14840 ;;		On entry : 0/0
 14841 ;;		On exit  : 0/0
 14842 ;;		Unchanged: 0/0
 14843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14845 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14847 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14848 ;;Total ram usage:        2 bytes
 14849 ;; Hardware stack levels used:    1
 14850 ;; Hardware stack levels required when called:    9
 14851 ;; This function calls:
 14852 ;;		_LCD_Write
 14853 ;; This function is called by:
 14854 ;;		_LCD_Init
 14855 ;; This function uses a non-reentrant model
 14856 ;;
 14857                           
 14858                           	psect	text64
 14859  0153EE                     __ptext64:
 14860                           	opt stack 0
 14861  0153EE                     _Set_Rotation:
 14862                           	opt stack 19
 14863                           
 14864                           ;incstack = 0
 14865                           ;Set_Rotation@m stored from wreg
 14866  0153EE  0100               	movlb	0	; () banked
 14867  0153F0  6F65               	movwf	Set_Rotation@m& (0+255),b
 14868                           
 14869                           ;LCD.c: 250: UINT8 rotation = 0x00;
 14870  0153F2  0E00               	movlw	0
 14871  0153F4  0100               	movlb	0	; () banked
 14872  0153F6  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 14873                           
 14874                           ; BSR set to: 0
 14875                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 14876  0153F8  0E00               	movlw	0
 14877  0153FA  0100               	movlb	0	; () banked
 14878  0153FC  6F63               	movwf	LCD_Write@mode& (0+255),b
 14879  0153FE  0E36               	movlw	54
 14880  015400  ECC4  F0B5         	call	_LCD_Write
 14881                           
 14882                           ;LCD.c: 253: rotation = (m % 4);
 14883  015404  0100               	movlb	0	; () banked
 14884  015406  5165               	movf	Set_Rotation@m& (0+255),w,b
 14885  015408  0B03               	andlw	3
 14886  01540A  0100               	movlb	0	; () banked
 14887  01540C  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 14888                           
 14889                           ;LCD.c: 255: switch(rotation)
 14890  01540E  D02C               	goto	l117
 14891  015410                     
 14892                           ; BSR set to: 0
 14893                           ;LCD.c: 258: {
 14894                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 14895                           
 14896                           ; BSR set to: 0
 14897  015410  0E01               	movlw	1
 14898  015412  0100               	movlb	0	; () banked
 14899  015414  6F63               	movwf	LCD_Write@mode& (0+255),b
 14900  015416  0EC8               	movlw	200
 14901  015418  ECC4  F0B5         	call	_LCD_Write
 14902                           
 14903                           ;LCD.c: 260: w = 128;
 14904  01541C  0E80               	movlw	128
 14905  01541E  6E50               	movwf	_w,c
 14906                           
 14907                           ;LCD.c: 261: l = 128;
 14908  015420  0E80               	movlw	128
 14909  015422  6E4F               	movwf	_l,c
 14910                           
 14911                           ;LCD.c: 262: break;
 14912  015424  0012               	return	
 14913  015426                     
 14914                           ;LCD.c: 265: {
 14915                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 14916  015426  0E01               	movlw	1
 14917  015428  0100               	movlb	0	; () banked
 14918  01542A  6F63               	movwf	LCD_Write@mode& (0+255),b
 14919  01542C  0EA8               	movlw	168
 14920  01542E  ECC4  F0B5         	call	_LCD_Write
 14921                           
 14922                           ;LCD.c: 267: w = 128;
 14923  015432  0E80               	movlw	128
 14924  015434  6E50               	movwf	_w,c
 14925                           
 14926                           ;LCD.c: 268: l = 128;
 14927  015436  0E80               	movlw	128
 14928  015438  6E4F               	movwf	_l,c
 14929                           
 14930                           ;LCD.c: 269: break;
 14931  01543A  0012               	return	
 14932  01543C                     
 14933                           ;LCD.c: 272: {
 14934                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 14935  01543C  0E01               	movlw	1
 14936  01543E  0100               	movlb	0	; () banked
 14937  015440  6F63               	movwf	LCD_Write@mode& (0+255),b
 14938  015442  0E08               	movlw	8
 14939  015444  ECC4  F0B5         	call	_LCD_Write
 14940                           
 14941                           ;LCD.c: 274: w = 128;
 14942  015448  0E80               	movlw	128
 14943  01544A  6E50               	movwf	_w,c
 14944                           
 14945                           ;LCD.c: 275: l = 128;
 14946  01544C  0E80               	movlw	128
 14947  01544E  6E4F               	movwf	_l,c
 14948                           
 14949                           ;LCD.c: 276: break;
 14950  015450  0012               	return	
 14951  015452                     
 14952                           ;LCD.c: 279: {
 14953                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 14954  015452  0E01               	movlw	1
 14955  015454  0100               	movlb	0	; () banked
 14956  015456  6F63               	movwf	LCD_Write@mode& (0+255),b
 14957  015458  0E68               	movlw	104
 14958  01545A  ECC4  F0B5         	call	_LCD_Write
 14959                           
 14960                           ;LCD.c: 281: w = 128;
 14961  01545E  0E80               	movlw	128
 14962  015460  6E50               	movwf	_w,c
 14963                           
 14964                           ;LCD.c: 282: l = 128;
 14965  015462  0E80               	movlw	128
 14966  015464  6E4F               	movwf	_l,c
 14967                           
 14968                           ;LCD.c: 284: }
 14969                           ;LCD.c: 285: }
 14970                           
 14971                           ;LCD.c: 283: break;
 14972  015466  0012               	return	
 14973  015468                     l117:
 14974  015468  0100               	movlb	0	; () banked
 14975  01546A  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 14976                           
 14977                           ; Switch size 1, requested type "space"
 14978                           ; Number of cases is 4, Range of values is 0 to 3
 14979                           ; switch strategies available:
 14980                           ; Name         Instructions Cycles
 14981                           ; simple_byte           13     7 (average)
 14982                           ;	Chosen strategy is simple_byte
 14983  01546C  0A00               	xorlw	0	; case 0
 14984  01546E  B4D8               	btfsc	status,2,c
 14985  015470  D7CF               	goto	l118
 14986  015472  0A01               	xorlw	1	; case 1
 14987  015474  B4D8               	btfsc	status,2,c
 14988  015476  D7D7               	goto	l120
 14989  015478  0A03               	xorlw	3	; case 2
 14990  01547A  B4D8               	btfsc	status,2,c
 14991  01547C  D7DF               	goto	l121
 14992  01547E  0A01               	xorlw	1	; case 3
 14993  015480  A4D8               	btfss	status,2,c
 14994  015482  0012               	return	
 14995  015484  D7E6               	goto	l122
 14996  015486                     __end_of_Set_Rotation:
 14997                           	opt stack 0
 14998                           tosu	equ	0xFFF
 14999                           tosh	equ	0xFFE
 15000                           tosl	equ	0xFFD
 15001                           pclath	equ	0xFFA
 15002                           tblptru	equ	0xFF8
 15003                           tblptrh	equ	0xFF7
 15004                           tblptrl	equ	0xFF6
 15005                           tablat	equ	0xFF5
 15006                           prodh	equ	0xFF4
 15007                           prodl	equ	0xFF3
 15008                           intcon	equ	0xFF2
 15009                           postinc0	equ	0xFEE
 15010                           wreg	equ	0xFE8
 15011                           indf1	equ	0xFE7
 15012                           postdec1	equ	0xFE5
 15013                           fsr1h	equ	0xFE2
 15014                           fsr1l	equ	0xFE1
 15015                           indf2	equ	0xFDF
 15016                           postinc2	equ	0xFDE
 15017                           postdec2	equ	0xFDD
 15018                           plusw2	equ	0xFDB
 15019                           fsr2h	equ	0xFDA
 15020                           fsr2l	equ	0xFD9
 15021                           status	equ	0xFD8
 15022                           
 15023 ;; *************** function _LCD_Fill *****************
 15024 ;; Defined at:
 15025 ;;		line 287 in file "Library/LCD.c"
 15026 ;; Parameters:    Size  Location     Type
 15027 ;;  pColour         2    9[BANK0 ] unsigned short 
 15028 ;; Auto vars:     Size  Location     Type
 15029 ;;  j               1   12[BANK0 ] unsigned char 
 15030 ;;  i               1   11[BANK0 ] unsigned char 
 15031 ;; Return value:  Size  Location     Type
 15032 ;;                  1    wreg      void 
 15033 ;; Registers used:
 15034 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15035 ;; Tracked objects:
 15036 ;;		On entry : 0/0
 15037 ;;		On exit  : 0/0
 15038 ;;		Unchanged: 0/0
 15039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15040 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15041 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15043 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15044 ;;Total ram usage:        4 bytes
 15045 ;; Hardware stack levels used:    1
 15046 ;; Hardware stack levels required when called:   10
 15047 ;; This function calls:
 15048 ;;		_LCD_Word_Write
 15049 ;;		_Set_Addr_Window
 15050 ;; This function is called by:
 15051 ;;		_LCD_Init
 15052 ;; This function uses a non-reentrant model
 15053 ;;
 15054                           
 15055                           	psect	text65
 15056  016214                     __ptext65:
 15057                           	opt stack 0
 15058  016214                     _LCD_Fill:
 15059                           	opt stack 18
 15060                           
 15061                           ;LCD.c: 296: UINT8 i = 0x00;
 15062                           
 15063                           ;incstack = 0
 15064  016214  0E00               	movlw	0
 15065  016216  0100               	movlb	0	; () banked
 15066  016218  6F6B               	movwf	LCD_Fill@i& (0+255),b
 15067                           
 15068                           ;LCD.c: 297: UINT8 j = 0x00;
 15069  01621A  0E00               	movlw	0
 15070  01621C  0100               	movlb	0	; () banked
 15071  01621E  6F6C               	movwf	LCD_Fill@j& (0+255),b
 15072                           
 15073                           ; BSR set to: 0
 15074                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 15075  016220  0E00               	movlw	0
 15076  016222  0100               	movlb	0	; () banked
 15077  016224  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 15078  016226  0450               	decf	_w,w,c
 15079  016228  0100               	movlb	0	; () banked
 15080  01622A  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 15081  01622C  044F               	decf	_l,w,c
 15082  01622E  0100               	movlb	0	; () banked
 15083  016230  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 15084  016232  0E00               	movlw	0
 15085  016234  EC13  F0A7         	call	_Set_Addr_Window
 15086                           
 15087                           ;LCD.c: 299: for (j = l; j > 0; j--)
 15088  016238  C04F  F06C         	movff	_l,LCD_Fill@j
 15089  01623C                     l13811:
 15090  01623C  0100               	movlb	0	; () banked
 15091  01623E  516C               	movf	LCD_Fill@j& (0+255),w,b
 15092  016240  0100               	movlb	0	; () banked
 15093  016242  B4D8               	btfsc	status,2,c
 15094  016244  0012               	return	
 15095                           
 15096                           ; BSR set to: 0
 15097                           ;LCD.c: 300: for (i = w; i > 0; i--)
 15098                           
 15099                           ; BSR set to: 0
 15100  016246  C050  F06B         	movff	_w,LCD_Fill@i
 15101  01624A                     l13815:
 15102                           
 15103                           ; BSR set to: 0
 15104  01624A  0100               	movlb	0	; () banked
 15105  01624C  516B               	movf	LCD_Fill@i& (0+255),w,b
 15106  01624E  0100               	movlb	0	; () banked
 15107  016250  B4D8               	btfsc	status,2,c
 15108  016252  D009               	goto	u11250
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;LCD.c: 301: LCD_Word_Write(pColour);
 15112                           
 15113                           ; BSR set to: 0
 15114                           
 15115                           ; BSR set to: 0
 15116  016254  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 15117  016258  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 15118  01625C  EC3F  F0B6         	call	_LCD_Word_Write	;wreg free
 15119  016260  0100               	movlb	0	; () banked
 15120  016262  076B               	decf	LCD_Fill@i& (0+255),f,b
 15121  016264  D7F2               	goto	l13815
 15122  016266                     u11250:
 15123                           
 15124                           ; BSR set to: 0
 15125                           
 15126                           ; BSR set to: 0
 15127  016266  0100               	movlb	0	; () banked
 15128  016268  076C               	decf	LCD_Fill@j& (0+255),f,b
 15129  01626A  D7E8               	goto	l13811
 15130  01626C                     __end_of_LCD_Fill:
 15131                           	opt stack 0
 15132                           tosu	equ	0xFFF
 15133                           tosh	equ	0xFFE
 15134                           tosl	equ	0xFFD
 15135                           pclath	equ	0xFFA
 15136                           tblptru	equ	0xFF8
 15137                           tblptrh	equ	0xFF7
 15138                           tblptrl	equ	0xFF6
 15139                           tablat	equ	0xFF5
 15140                           prodh	equ	0xFF4
 15141                           prodl	equ	0xFF3
 15142                           intcon	equ	0xFF2
 15143                           postinc0	equ	0xFEE
 15144                           wreg	equ	0xFE8
 15145                           indf1	equ	0xFE7
 15146                           postdec1	equ	0xFE5
 15147                           fsr1h	equ	0xFE2
 15148                           fsr1l	equ	0xFE1
 15149                           indf2	equ	0xFDF
 15150                           postinc2	equ	0xFDE
 15151                           postdec2	equ	0xFDD
 15152                           plusw2	equ	0xFDB
 15153                           fsr2h	equ	0xFDA
 15154                           fsr2l	equ	0xFD9
 15155                           status	equ	0xFD8
 15156                           
 15157 ;; *************** function _Configure_GPIOs *****************
 15158 ;; Defined at:
 15159 ;;		line 46 in file "Library/LCD.c"
 15160 ;; Parameters:    Size  Location     Type
 15161 ;;		None
 15162 ;; Auto vars:     Size  Location     Type
 15163 ;;		None
 15164 ;; Return value:  Size  Location     Type
 15165 ;;                  1    wreg      void 
 15166 ;; Registers used:
 15167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15168 ;; Tracked objects:
 15169 ;;		On entry : 0/0
 15170 ;;		On exit  : 0/0
 15171 ;;		Unchanged: 0/0
 15172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15177 ;;Total ram usage:        0 bytes
 15178 ;; Hardware stack levels used:    1
 15179 ;; Hardware stack levels required when called:   14
 15180 ;; This function calls:
 15181 ;;		_LCD_Reset
 15182 ;;		_Port_SetPinType
 15183 ;;		_SPI_Init
 15184 ;;		_SPI_MaxSpeed
 15185 ;; This function is called by:
 15186 ;;		_LCD_Init
 15187 ;; This function uses a non-reentrant model
 15188 ;;
 15189                           
 15190                           	psect	text66
 15191  015CF0                     __ptext66:
 15192                           	opt stack 0
 15193  015CF0                     _Configure_GPIOs:
 15194                           	opt stack 14
 15195                           
 15196                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 15197                           
 15198                           ; BSR set to: 0
 15199                           ;incstack = 0
 15200  015CF0  0EB2               	movlw	low _PortF
 15201  015CF2  0100               	movlb	0	; () banked
 15202  015CF4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15203  015CF6  0E01               	movlw	high _PortF
 15204  015CF8  0100               	movlb	0	; () banked
 15205  015CFA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15206  015CFC  0E07               	movlw	7
 15207  015CFE  0100               	movlb	0	; () banked
 15208  015D00  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15209  015D02  0E03               	movlw	3
 15210  015D04  0100               	movlb	0	; () banked
 15211  015D06  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15212  015D08  EC2D  F093         	call	_Port_SetPinType	;wreg free
 15213                           
 15214                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 15215  015D0C  0EB2               	movlw	low _PortF
 15216  015D0E  0100               	movlb	0	; () banked
 15217  015D10  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 15218  015D12  0E01               	movlw	high _PortF
 15219  015D14  0100               	movlb	0	; () banked
 15220  015D16  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15221  015D18  0E06               	movlw	6
 15222  015D1A  0100               	movlb	0	; () banked
 15223  015D1C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 15224  015D1E  0E03               	movlw	3
 15225  015D20  0100               	movlb	0	; () banked
 15226  015D22  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 15227  015D24  EC2D  F093         	call	_Port_SetPinType	;wreg free
 15228                           
 15229                           ;LCD.c: 55: LCD_Reset();
 15230  015D28  EC87  F0B1         	call	_LCD_Reset	;wreg free
 15231                           
 15232                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 15233  015D2C  0EC0               	movlw	192
 15234  015D2E  0100               	movlb	0	; () banked
 15235  015D30  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 15236  015D32  0EC6               	movlw	198
 15237  015D34  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 15238  015D36  0E2D               	movlw	45
 15239  015D38  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 15240  015D3A  0E00               	movlw	0
 15241  015D3C  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 15242  015D3E  0E01               	movlw	1
 15243  015D40  0100               	movlb	0	; () banked
 15244  015D42  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 15245  015D44  0E01               	movlw	1
 15246  015D46  0100               	movlb	0	; () banked
 15247  015D48  6F92               	movwf	SPI_Init@pMode& (0+255),b
 15248  015D4A  ECA7  F084         	call	_SPI_Init	;wreg free
 15249                           
 15250                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 15251  015D4E  0E75               	movlw	low _SPI2
 15252  015D50  0100               	movlb	0	; () banked
 15253  015D52  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 15254  015D54  0E01               	movlw	high _SPI2
 15255  015D56  0100               	movlb	0	; () banked
 15256  015D58  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 15257  015D5A  ECCA  F0AD         	call	_SPI_MaxSpeed	;wreg free
 15258  015D5E  0012               	return		;funcret
 15259  015D60                     __end_of_Configure_GPIOs:
 15260                           	opt stack 0
 15261                           tosu	equ	0xFFF
 15262                           tosh	equ	0xFFE
 15263                           tosl	equ	0xFFD
 15264                           pclath	equ	0xFFA
 15265                           tblptru	equ	0xFF8
 15266                           tblptrh	equ	0xFF7
 15267                           tblptrl	equ	0xFF6
 15268                           tablat	equ	0xFF5
 15269                           prodh	equ	0xFF4
 15270                           prodl	equ	0xFF3
 15271                           intcon	equ	0xFF2
 15272                           postinc0	equ	0xFEE
 15273                           wreg	equ	0xFE8
 15274                           indf1	equ	0xFE7
 15275                           postdec1	equ	0xFE5
 15276                           fsr1h	equ	0xFE2
 15277                           fsr1l	equ	0xFE1
 15278                           indf2	equ	0xFDF
 15279                           postinc2	equ	0xFDE
 15280                           postdec2	equ	0xFDD
 15281                           plusw2	equ	0xFDB
 15282                           fsr2h	equ	0xFDA
 15283                           fsr2l	equ	0xFD9
 15284                           status	equ	0xFD8
 15285                           
 15286 ;; *************** function _SPI_MaxSpeed *****************
 15287 ;; Defined at:
 15288 ;;		line 201 in file "Library/SPI.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 15291 ;;		 -> SPI2(11), 
 15292 ;; Auto vars:     Size  Location     Type
 15293 ;;		None
 15294 ;; Return value:  Size  Location     Type
 15295 ;;                  1    wreg      void 
 15296 ;; Registers used:
 15297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15298 ;; Tracked objects:
 15299 ;;		On entry : 0/0
 15300 ;;		On exit  : 0/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15303 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15306 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;Total ram usage:        2 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    9
 15310 ;; This function calls:
 15311 ;;		_Byte_SetBit
 15312 ;;		_Byte_SetQuad
 15313 ;; This function is called by:
 15314 ;;		_Configure_GPIOs
 15315 ;; This function uses a non-reentrant model
 15316 ;;
 15317                           
 15318                           	psect	text67
 15319  015B94                     __ptext67:
 15320                           	opt stack 0
 15321  015B94                     _SPI_MaxSpeed:
 15322                           	opt stack 18
 15323                           
 15324                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 15325                           
 15326                           ;incstack = 0
 15327  015B94  0100               	movlb	0	; () banked
 15328  015B96  EE20 F006          	lfsr	2,6
 15329  015B9A  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 15330  015B9C  26D9               	addwf	fsr2l,f,c
 15331  015B9E  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 15332  015BA0  22DA               	addwfc	fsr2h,f,c
 15333  015BA2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15334  015BA6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15335  015BAA  0E05               	movlw	5
 15336  015BAC  0100               	movlb	0	; () banked
 15337  015BAE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15338  015BB0  0E00               	movlw	0
 15339  015BB2  0100               	movlb	0	; () banked
 15340  015BB4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15341  015BB6  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 15342                           
 15343                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 15344  015BBA  0100               	movlb	0	; () banked
 15345  015BBC  EE20 F006          	lfsr	2,6
 15346  015BC0  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 15347  015BC2  26D9               	addwf	fsr2l,f,c
 15348  015BC4  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 15349  015BC6  22DA               	addwfc	fsr2h,f,c
 15350  015BC8  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 15351  015BCC  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 15352  015BD0  0E00               	movlw	0
 15353  015BD2  0100               	movlb	0	; () banked
 15354  015BD4  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 15355  015BD6  0E00               	movlw	0
 15356  015BD8  0100               	movlb	0	; () banked
 15357  015BDA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 15358  015BDC  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 15359                           
 15360                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 15361  015BE0  0100               	movlb	0	; () banked
 15362  015BE2  EE20 F006          	lfsr	2,6
 15363  015BE6  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 15364  015BE8  26D9               	addwf	fsr2l,f,c
 15365  015BEA  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 15366  015BEC  22DA               	addwfc	fsr2h,f,c
 15367  015BEE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 15368  015BF2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 15369  015BF6  0E05               	movlw	5
 15370  015BF8  0100               	movlb	0	; () banked
 15371  015BFA  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 15372  015BFC  0E01               	movlw	1
 15373  015BFE  0100               	movlb	0	; () banked
 15374  015C00  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 15375  015C02  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 15376  015C06  0012               	return		;funcret
 15377  015C08                     __end_of_SPI_MaxSpeed:
 15378                           	opt stack 0
 15379                           tosu	equ	0xFFF
 15380                           tosh	equ	0xFFE
 15381                           tosl	equ	0xFFD
 15382                           pclath	equ	0xFFA
 15383                           tblptru	equ	0xFF8
 15384                           tblptrh	equ	0xFF7
 15385                           tblptrl	equ	0xFF6
 15386                           tablat	equ	0xFF5
 15387                           prodh	equ	0xFF4
 15388                           prodl	equ	0xFF3
 15389                           intcon	equ	0xFF2
 15390                           postinc0	equ	0xFEE
 15391                           wreg	equ	0xFE8
 15392                           indf1	equ	0xFE7
 15393                           postdec1	equ	0xFE5
 15394                           fsr1h	equ	0xFE2
 15395                           fsr1l	equ	0xFE1
 15396                           indf2	equ	0xFDF
 15397                           postinc2	equ	0xFDE
 15398                           postdec2	equ	0xFDD
 15399                           plusw2	equ	0xFDB
 15400                           fsr2h	equ	0xFDA
 15401                           fsr2l	equ	0xFD9
 15402                           status	equ	0xFD8
 15403                           
 15404 ;; *************** function _LCD_Reset *****************
 15405 ;; Defined at:
 15406 ;;		line 95 in file "Library/LCD.c"
 15407 ;; Parameters:    Size  Location     Type
 15408 ;;		None
 15409 ;; Auto vars:     Size  Location     Type
 15410 ;;		None
 15411 ;; Return value:  Size  Location     Type
 15412 ;;                  1    wreg      void 
 15413 ;; Registers used:
 15414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15415 ;; Tracked objects:
 15416 ;;		On entry : 0/0
 15417 ;;		On exit  : 0/0
 15418 ;;		Unchanged: 0/0
 15419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15424 ;;Total ram usage:        0 bytes
 15425 ;; Hardware stack levels used:    1
 15426 ;; Hardware stack levels required when called:   13
 15427 ;; This function calls:
 15428 ;;		_LED_Toggle
 15429 ;;		_Reset_High
 15430 ;;		_Reset_Low
 15431 ;;		_delay_ms
 15432 ;; This function is called by:
 15433 ;;		_Configure_GPIOs
 15434 ;; This function uses a non-reentrant model
 15435 ;;
 15436                           
 15437                           	psect	text68
 15438  01630E                     __ptext68:
 15439                           	opt stack 0
 15440  01630E                     _LCD_Reset:
 15441                           	opt stack 14
 15442                           
 15443                           ;LCD.c: 97: Reset_High();
 15444                           
 15445                           ;incstack = 0
 15446  01630E  ECF4  F0B5         	call	_Reset_High	;wreg free
 15447                           
 15448                           ;LCD.c: 98: LED_Toggle(eLED2);
 15449  016312  0E01               	movlw	1
 15450  016314  EC42  F0B2         	call	_LED_Toggle
 15451                           
 15452                           ;LCD.c: 99: delay_ms(0x80);
 15453  016318  0E00               	movlw	0
 15454  01631A  0100               	movlb	0	; () banked
 15455  01631C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 15456  01631E  0E80               	movlw	128
 15457  016320  6F60               	movwf	delay_ms@ms& (0+255),b
 15458  016322  EC1C  F0AF         	call	_delay_ms	;wreg free
 15459                           
 15460                           ;LCD.c: 100: LED_Toggle(eLED2);
 15461  016326  0E01               	movlw	1
 15462  016328  EC42  F0B2         	call	_LED_Toggle
 15463                           
 15464                           ;LCD.c: 101: Reset_Low();
 15465  01632C  ECE5  F0B5         	call	_Reset_Low	;wreg free
 15466                           
 15467                           ;LCD.c: 102: delay_ms(0x80);
 15468  016330  0E00               	movlw	0
 15469  016332  0100               	movlb	0	; () banked
 15470  016334  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 15471  016336  0E80               	movlw	128
 15472  016338  6F60               	movwf	delay_ms@ms& (0+255),b
 15473  01633A  EC1C  F0AF         	call	_delay_ms	;wreg free
 15474                           
 15475                           ;LCD.c: 103: LED_Toggle(eLED2);
 15476  01633E  0E01               	movlw	1
 15477  016340  EC42  F0B2         	call	_LED_Toggle
 15478                           
 15479                           ;LCD.c: 104: Reset_High();
 15480  016344  ECF4  F0B5         	call	_Reset_High	;wreg free
 15481                           
 15482                           ;LCD.c: 105: delay_ms(0x80);
 15483  016348  0E00               	movlw	0
 15484  01634A  0100               	movlb	0	; () banked
 15485  01634C  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 15486  01634E  0E80               	movlw	128
 15487  016350  6F60               	movwf	delay_ms@ms& (0+255),b
 15488  016352  EC1C  F0AF         	call	_delay_ms	;wreg free
 15489                           
 15490                           ;LCD.c: 106: LED_Toggle(eLED2);
 15491  016356  0E01               	movlw	1
 15492  016358  EC42  F0B2         	call	_LED_Toggle
 15493  01635C  0012               	return		;funcret
 15494  01635E                     __end_of_LCD_Reset:
 15495                           	opt stack 0
 15496                           tosu	equ	0xFFF
 15497                           tosh	equ	0xFFE
 15498                           tosl	equ	0xFFD
 15499                           pclath	equ	0xFFA
 15500                           tblptru	equ	0xFF8
 15501                           tblptrh	equ	0xFF7
 15502                           tblptrl	equ	0xFF6
 15503                           tablat	equ	0xFF5
 15504                           prodh	equ	0xFF4
 15505                           prodl	equ	0xFF3
 15506                           intcon	equ	0xFF2
 15507                           postinc0	equ	0xFEE
 15508                           wreg	equ	0xFE8
 15509                           indf1	equ	0xFE7
 15510                           postdec1	equ	0xFE5
 15511                           fsr1h	equ	0xFE2
 15512                           fsr1l	equ	0xFE1
 15513                           indf2	equ	0xFDF
 15514                           postinc2	equ	0xFDE
 15515                           postdec2	equ	0xFDD
 15516                           plusw2	equ	0xFDB
 15517                           fsr2h	equ	0xFDA
 15518                           fsr2l	equ	0xFD9
 15519                           status	equ	0xFD8
 15520                           
 15521 ;; *************** function _delay_ms *****************
 15522 ;; Defined at:
 15523 ;;		line 240 in file "Library/Types.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;  ms              2    0[BANK0 ] unsigned short 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  u               4    2[BANK0 ] volatile unsigned long 
 15528 ;; Return value:  Size  Location     Type
 15529 ;;                  1    wreg      void 
 15530 ;; Registers used:
 15531 ;;		wreg, status,2, status,0
 15532 ;; Tracked objects:
 15533 ;;		On entry : 0/0
 15534 ;;		On exit  : 0/0
 15535 ;;		Unchanged: 0/0
 15536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15537 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15538 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15540 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15541 ;;Total ram usage:        6 bytes
 15542 ;; Hardware stack levels used:    1
 15543 ;; Hardware stack levels required when called:    7
 15544 ;; This function calls:
 15545 ;;		Nothing
 15546 ;; This function is called by:
 15547 ;;		_LCD_Reset
 15548 ;;		_LCD_Init
 15549 ;;		_MXK_Init
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           	psect	text69
 15554  015E38                     __ptext69:
 15555                           	opt stack 0
 15556  015E38                     _delay_ms:
 15557                           	opt stack 21
 15558                           
 15559                           ;Types.c: 242: volatile unsigned long u;
 15560                           ;Types.c: 243: while (ms--)
 15561                           
 15562                           ;incstack = 0
 15563  015E38  D01F               	goto	u9590
 15564  015E3A                     l12435:
 15565                           
 15566                           ;Types.c: 244: {
 15567                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 15568  015E3A  0E00               	movlw	0
 15569  015E3C  0100               	movlb	0	; () banked
 15570  015E3E  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 15571  015E40  0E00               	movlw	0
 15572  015E42  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 15573  015E44  0E00               	movlw	0
 15574  015E46  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 15575  015E48  0E00               	movlw	0
 15576  015E4A  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 15577  015E4C                     l12437:
 15578                           
 15579                           ; BSR set to: 0
 15580  015E4C  0100               	movlb	0	; () banked
 15581  015E4E  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 15582  015E50  0100               	movlb	0	; () banked
 15583  015E52  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 15584  015E54  E111               	bnz	l12443
 15585  015E56  0EB0               	movlw	176
 15586  015E58  0100               	movlb	0	; () banked
 15587  015E5A  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 15588  015E5C  0E04               	movlw	4
 15589  015E5E  0100               	movlb	0	; () banked
 15590  015E60  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 15591  015E62  B0D8               	btfsc	status,0,c
 15592  015E64  D009               	goto	u9590
 15593                           
 15594                           ; BSR set to: 0
 15595                           
 15596                           ; BSR set to: 0
 15597  015E66  F000               	nop		; ;# 
 15598  015E68  0E01               	movlw	1
 15599  015E6A  0100               	movlb	0	; () banked
 15600  015E6C  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 15601  015E6E  0E00               	movlw	0
 15602  015E70  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 15603  015E72  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 15604  015E74  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 15605  015E76  D7EA               	goto	l12437
 15606  015E78                     u9590:
 15607  015E78                     l12443:
 15608  015E78  0100               	movlb	0	; () banked
 15609  015E7A  0760               	decf	delay_ms@ms& (0+255),f,b
 15610  015E7C  A0D8               	btfss	status,0,c
 15611  015E7E  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 15612  015E80  0100               	movlb	0	; () banked
 15613  015E82  2960               	incf	delay_ms@ms& (0+255),w,b
 15614  015E84  E1DA               	bnz	l12435
 15615  015E86  0100               	movlb	0	; () banked
 15616  015E88  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 15617  015E8A  A4D8               	btfss	status,2,c
 15618  015E8C  D7D6               	goto	l824
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;Types.c: 251: }
 15622                           ;Types.c: 252: }
 15623                           ;Types.c: 253: u = 0x8008;
 15624                           
 15625                           ; BSR set to: 0
 15626  015E8E  0E08               	movlw	8
 15627  015E90  0100               	movlb	0	; () banked
 15628  015E92  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 15629  015E94  0E80               	movlw	128
 15630  015E96  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 15631  015E98  0E00               	movlw	0
 15632  015E9A  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 15633  015E9C  0E00               	movlw	0
 15634  015E9E  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 15635                           
 15636                           ; BSR set to: 0
 15637  015EA0  0012               	return		;funcret
 15638  015EA2                     __end_of_delay_ms:
 15639                           	opt stack 0
 15640                           tosu	equ	0xFFF
 15641                           tosh	equ	0xFFE
 15642                           tosl	equ	0xFFD
 15643                           pclath	equ	0xFFA
 15644                           tblptru	equ	0xFF8
 15645                           tblptrh	equ	0xFF7
 15646                           tblptrl	equ	0xFF6
 15647                           tablat	equ	0xFF5
 15648                           prodh	equ	0xFF4
 15649                           prodl	equ	0xFF3
 15650                           intcon	equ	0xFF2
 15651                           postinc0	equ	0xFEE
 15652                           wreg	equ	0xFE8
 15653                           indf1	equ	0xFE7
 15654                           postdec1	equ	0xFE5
 15655                           fsr1h	equ	0xFE2
 15656                           fsr1l	equ	0xFE1
 15657                           indf2	equ	0xFDF
 15658                           postinc2	equ	0xFDE
 15659                           postdec2	equ	0xFDD
 15660                           plusw2	equ	0xFDB
 15661                           fsr2h	equ	0xFDA
 15662                           fsr2l	equ	0xFD9
 15663                           status	equ	0xFD8
 15664                           
 15665 ;; *************** function _Reset_Low *****************
 15666 ;; Defined at:
 15667 ;;		line 32 in file "Library/LCD.c"
 15668 ;; Parameters:    Size  Location     Type
 15669 ;;		None
 15670 ;; Auto vars:     Size  Location     Type
 15671 ;;		None
 15672 ;; Return value:  Size  Location     Type
 15673 ;;                  1    wreg      void 
 15674 ;; Registers used:
 15675 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15676 ;; Tracked objects:
 15677 ;;		On entry : 0/0
 15678 ;;		On exit  : 0/0
 15679 ;;		Unchanged: 0/0
 15680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15682 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15684 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15685 ;;Total ram usage:        0 bytes
 15686 ;; Hardware stack levels used:    1
 15687 ;; Hardware stack levels required when called:   11
 15688 ;; This function calls:
 15689 ;;		_Port_SetPin
 15690 ;; This function is called by:
 15691 ;;		_LCD_Reset
 15692 ;; This function uses a non-reentrant model
 15693 ;;
 15694                           
 15695                           	psect	text70
 15696  016BCA                     __ptext70:
 15697                           	opt stack 0
 15698  016BCA                     _Reset_Low:
 15699                           	opt stack 15
 15700                           
 15701                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;incstack = 0
 15705  016BCA  0EB2               	movlw	low _PortF
 15706  016BCC  0100               	movlb	0	; () banked
 15707  016BCE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15708  016BD0  0E01               	movlw	high _PortF
 15709  016BD2  0100               	movlb	0	; () banked
 15710  016BD4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15711  016BD6  0E06               	movlw	6
 15712  016BD8  0100               	movlb	0	; () banked
 15713  016BDA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15714  016BDC  0E01               	movlw	1
 15715  016BDE  0100               	movlb	0	; () banked
 15716  016BE0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15717  016BE2  EC72  F0A3         	call	_Port_SetPin	;wreg free
 15718  016BE6  0012               	return		;funcret
 15719  016BE8                     __end_of_Reset_Low:
 15720                           	opt stack 0
 15721                           tosu	equ	0xFFF
 15722                           tosh	equ	0xFFE
 15723                           tosl	equ	0xFFD
 15724                           pclath	equ	0xFFA
 15725                           tblptru	equ	0xFF8
 15726                           tblptrh	equ	0xFF7
 15727                           tblptrl	equ	0xFF6
 15728                           tablat	equ	0xFF5
 15729                           prodh	equ	0xFF4
 15730                           prodl	equ	0xFF3
 15731                           intcon	equ	0xFF2
 15732                           postinc0	equ	0xFEE
 15733                           wreg	equ	0xFE8
 15734                           indf1	equ	0xFE7
 15735                           postdec1	equ	0xFE5
 15736                           fsr1h	equ	0xFE2
 15737                           fsr1l	equ	0xFE1
 15738                           indf2	equ	0xFDF
 15739                           postinc2	equ	0xFDE
 15740                           postdec2	equ	0xFDD
 15741                           plusw2	equ	0xFDB
 15742                           fsr2h	equ	0xFDA
 15743                           fsr2l	equ	0xFD9
 15744                           status	equ	0xFD8
 15745                           
 15746 ;; *************** function _Reset_High *****************
 15747 ;; Defined at:
 15748 ;;		line 36 in file "Library/LCD.c"
 15749 ;; Parameters:    Size  Location     Type
 15750 ;;		None
 15751 ;; Auto vars:     Size  Location     Type
 15752 ;;		None
 15753 ;; Return value:  Size  Location     Type
 15754 ;;                  1    wreg      void 
 15755 ;; Registers used:
 15756 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15757 ;; Tracked objects:
 15758 ;;		On entry : 0/0
 15759 ;;		On exit  : 0/0
 15760 ;;		Unchanged: 0/0
 15761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15765 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;Total ram usage:        0 bytes
 15767 ;; Hardware stack levels used:    1
 15768 ;; Hardware stack levels required when called:   11
 15769 ;; This function calls:
 15770 ;;		_Port_SetPin
 15771 ;; This function is called by:
 15772 ;;		_LCD_Reset
 15773 ;; This function uses a non-reentrant model
 15774 ;;
 15775                           
 15776                           	psect	text71
 15777  016BE8                     __ptext71:
 15778                           	opt stack 0
 15779  016BE8                     _Reset_High:
 15780                           	opt stack 15
 15781                           
 15782                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 15783                           
 15784                           ;incstack = 0
 15785  016BE8  0EB2               	movlw	low _PortF
 15786  016BEA  0100               	movlb	0	; () banked
 15787  016BEC  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 15788  016BEE  0E01               	movlw	high _PortF
 15789  016BF0  0100               	movlb	0	; () banked
 15790  016BF2  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15791  016BF4  0E06               	movlw	6
 15792  016BF6  0100               	movlb	0	; () banked
 15793  016BF8  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 15794  016BFA  0E00               	movlw	0
 15795  016BFC  0100               	movlb	0	; () banked
 15796  016BFE  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 15797  016C00  EC72  F0A3         	call	_Port_SetPin	;wreg free
 15798  016C04  0012               	return		;funcret
 15799  016C06                     __end_of_Reset_High:
 15800                           	opt stack 0
 15801                           tosu	equ	0xFFF
 15802                           tosh	equ	0xFFE
 15803                           tosl	equ	0xFFD
 15804                           pclath	equ	0xFFA
 15805                           tblptru	equ	0xFF8
 15806                           tblptrh	equ	0xFF7
 15807                           tblptrl	equ	0xFF6
 15808                           tablat	equ	0xFF5
 15809                           prodh	equ	0xFF4
 15810                           prodl	equ	0xFF3
 15811                           intcon	equ	0xFF2
 15812                           postinc0	equ	0xFEE
 15813                           wreg	equ	0xFE8
 15814                           indf1	equ	0xFE7
 15815                           postdec1	equ	0xFE5
 15816                           fsr1h	equ	0xFE2
 15817                           fsr1l	equ	0xFE1
 15818                           indf2	equ	0xFDF
 15819                           postinc2	equ	0xFDE
 15820                           postdec2	equ	0xFDD
 15821                           plusw2	equ	0xFDB
 15822                           fsr2h	equ	0xFDA
 15823                           fsr2l	equ	0xFD9
 15824                           status	equ	0xFD8
 15825                           
 15826 ;; *************** function _LED_Toggle *****************
 15827 ;; Defined at:
 15828 ;;		line 50 in file "Library/LED.c"
 15829 ;; Parameters:    Size  Location     Type
 15830 ;;  pLED            1    wreg     enum E6739
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  pLED            1   24[BANK0 ] enum E6739
 15833 ;; Return value:  Size  Location     Type
 15834 ;;                  1    wreg      void 
 15835 ;; Registers used:
 15836 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15837 ;; Tracked objects:
 15838 ;;		On entry : 0/0
 15839 ;;		On exit  : 0/0
 15840 ;;		Unchanged: 0/0
 15841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15843 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15845 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15846 ;;Total ram usage:        1 bytes
 15847 ;; Hardware stack levels used:    1
 15848 ;; Hardware stack levels required when called:   12
 15849 ;; This function calls:
 15850 ;;		_Port_TogglePin
 15851 ;; This function is called by:
 15852 ;;		_LCD_Reset
 15853 ;;		_Event_DIPSwitch
 15854 ;;		_Event_TestButton
 15855 ;;		_Event_ADCSequenceComplete
 15856 ;;		_Event_HMI_DIPSwitch
 15857 ;;		_Event_HMI_LeftButton
 15858 ;;		_Event_HMI_RightButton
 15859 ;;		_Event_HMI_UpButton
 15860 ;;		_Event_HMI_DownButton
 15861 ;; This function uses a non-reentrant model
 15862 ;;
 15863                           
 15864                           	psect	text72
 15865  016484                     __ptext72:
 15866                           	opt stack 0
 15867  016484                     _LED_Toggle:
 15868                           	opt stack 14
 15869                           
 15870                           ;incstack = 0
 15871                           ;LED_Toggle@pLED stored from wreg
 15872  016484  0100               	movlb	0	; () banked
 15873  016486  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 15874                           
 15875                           ;LED.c: 52: switch (pLED)
 15876  016488  D018               	goto	l234
 15877  01648A                     
 15878                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 15879  01648A  0EA8               	movlw	low _PortC
 15880  01648C  0100               	movlb	0	; () banked
 15881  01648E  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 15882  016490  0E01               	movlw	high _PortC
 15883  016492  0100               	movlb	0	; () banked
 15884  016494  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 15885  016496  0E00               	movlw	0
 15886  016498  0100               	movlb	0	; () banked
 15887  01649A  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 15888  01649C  ECC8  F0B4         	call	_Port_TogglePin	;wreg free
 15889                           
 15890                           ;LED.c: 56: break;
 15891  0164A0  0012               	return	
 15892  0164A2                     
 15893                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 15894  0164A2  0EA8               	movlw	low _PortC
 15895  0164A4  0100               	movlb	0	; () banked
 15896  0164A6  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 15897  0164A8  0E01               	movlw	high _PortC
 15898  0164AA  0100               	movlb	0	; () banked
 15899  0164AC  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 15900  0164AE  0E01               	movlw	1
 15901  0164B0  0100               	movlb	0	; () banked
 15902  0164B2  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 15903  0164B4  ECC8  F0B4         	call	_Port_TogglePin	;wreg free
 15904                           
 15905                           ;LED.c: 60: }
 15906                           
 15907                           ;LED.c: 59: break;
 15908  0164B8  0012               	return	
 15909  0164BA                     l234:
 15910  0164BA  0100               	movlb	0	; () banked
 15911  0164BC  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 15912                           
 15913                           ; Switch size 1, requested type "space"
 15914                           ; Number of cases is 2, Range of values is 0 to 1
 15915                           ; switch strategies available:
 15916                           ; Name         Instructions Cycles
 15917                           ; simple_byte            7     4 (average)
 15918                           ;	Chosen strategy is simple_byte
 15919  0164BE  0A00               	xorlw	0	; case 0
 15920  0164C0  B4D8               	btfsc	status,2,c
 15921  0164C2  D7E3               	goto	l235
 15922  0164C4  0A01               	xorlw	1	; case 1
 15923  0164C6  A4D8               	btfss	status,2,c
 15924  0164C8  0012               	return	
 15925  0164CA  D7EB               	goto	l237
 15926  0164CC                     __end_of_LED_Toggle:
 15927                           	opt stack 0
 15928                           tosu	equ	0xFFF
 15929                           tosh	equ	0xFFE
 15930                           tosl	equ	0xFFD
 15931                           pclath	equ	0xFFA
 15932                           tblptru	equ	0xFF8
 15933                           tblptrh	equ	0xFF7
 15934                           tblptrl	equ	0xFF6
 15935                           tablat	equ	0xFF5
 15936                           prodh	equ	0xFF4
 15937                           prodl	equ	0xFF3
 15938                           intcon	equ	0xFF2
 15939                           postinc0	equ	0xFEE
 15940                           wreg	equ	0xFE8
 15941                           indf1	equ	0xFE7
 15942                           postdec1	equ	0xFE5
 15943                           fsr1h	equ	0xFE2
 15944                           fsr1l	equ	0xFE1
 15945                           indf2	equ	0xFDF
 15946                           postinc2	equ	0xFDE
 15947                           postdec2	equ	0xFDD
 15948                           plusw2	equ	0xFDB
 15949                           fsr2h	equ	0xFDA
 15950                           fsr2l	equ	0xFD9
 15951                           status	equ	0xFD8
 15952                           
 15953 ;; *************** function _Port_TogglePin *****************
 15954 ;; Defined at:
 15955 ;;		line 278 in file "Library/Port.c"
 15956 ;; Parameters:    Size  Location     Type
 15957 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 15958 ;;		 -> PortC(10), 
 15959 ;;  pPin            1   22[BANK0 ] enum E6750
 15960 ;; Auto vars:     Size  Location     Type
 15961 ;;  Value           1   23[BANK0 ] unsigned char 
 15962 ;; Return value:  Size  Location     Type
 15963 ;;                  1    wreg      void 
 15964 ;; Registers used:
 15965 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/0
 15968 ;;		On exit  : 0/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15971 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15974 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15975 ;;Total ram usage:        4 bytes
 15976 ;; Hardware stack levels used:    1
 15977 ;; Hardware stack levels required when called:   11
 15978 ;; This function calls:
 15979 ;;		_Port_GetPin
 15980 ;;		_Port_SetPin
 15981 ;; This function is called by:
 15982 ;;		_LED_Toggle
 15983 ;; This function uses a non-reentrant model
 15984 ;;
 15985                           
 15986                           	psect	text73
 15987  016990                     __ptext73:
 15988                           	opt stack 0
 15989  016990                     _Port_TogglePin:
 15990                           	opt stack 14
 15991                           
 15992                           ;Port.c: 280: UINT8 Value;
 15993                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 15994                           
 15995                           ;incstack = 0
 15996  016990  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 15997  016994  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 15998  016998  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 15999  01699C  EC8A  F0B2         	call	_Port_GetPin	;wreg free
 16000  0169A0  0100               	movlb	0	; () banked
 16001  0169A2  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 16002                           
 16003                           ; BSR set to: 0
 16004                           ;Port.c: 282: Value ^= 0x01;
 16005  0169A4  0E01               	movlw	1
 16006  0169A6  0100               	movlb	0	; () banked
 16007  0169A8  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 16008                           
 16009                           ; BSR set to: 0
 16010                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 16011  0169AA  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 16012  0169AE  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 16013  0169B2  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 16014  0169B6  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 16015  0169BA  EC72  F0A3         	call	_Port_SetPin	;wreg free
 16016  0169BE  0012               	return		;funcret
 16017  0169C0                     __end_of_Port_TogglePin:
 16018                           	opt stack 0
 16019                           tosu	equ	0xFFF
 16020                           tosh	equ	0xFFE
 16021                           tosl	equ	0xFFD
 16022                           pclath	equ	0xFFA
 16023                           tblptru	equ	0xFF8
 16024                           tblptrh	equ	0xFF7
 16025                           tblptrl	equ	0xFF6
 16026                           tablat	equ	0xFF5
 16027                           prodh	equ	0xFF4
 16028                           prodl	equ	0xFF3
 16029                           intcon	equ	0xFF2
 16030                           postinc0	equ	0xFEE
 16031                           wreg	equ	0xFE8
 16032                           indf1	equ	0xFE7
 16033                           postdec1	equ	0xFE5
 16034                           fsr1h	equ	0xFE2
 16035                           fsr1l	equ	0xFE1
 16036                           indf2	equ	0xFDF
 16037                           postinc2	equ	0xFDE
 16038                           postdec2	equ	0xFDD
 16039                           plusw2	equ	0xFDB
 16040                           fsr2h	equ	0xFDA
 16041                           fsr2l	equ	0xFD9
 16042                           status	equ	0xFD8
 16043                           
 16044 ;; *************** function _Port_SetPin *****************
 16045 ;; Defined at:
 16046 ;;		line 247 in file "Library/Port.c"
 16047 ;; Parameters:    Size  Location     Type
 16048 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16049 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 16050 ;;  pPin            1   17[BANK0 ] enum E6750
 16051 ;;  pValue          1   18[BANK0 ] unsigned char 
 16052 ;; Auto vars:     Size  Location     Type
 16053 ;;  Type            1   19[BANK0 ] enum E6795
 16054 ;; Return value:  Size  Location     Type
 16055 ;;                  1    wreg      void 
 16056 ;; Registers used:
 16057 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16058 ;; Tracked objects:
 16059 ;;		On entry : 0/0
 16060 ;;		On exit  : 0/0
 16061 ;;		Unchanged: 0/0
 16062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16063 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16064 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16065 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16067 ;;Total ram usage:        5 bytes
 16068 ;; Hardware stack levels used:    1
 16069 ;; Hardware stack levels required when called:   10
 16070 ;; This function calls:
 16071 ;;		_Byte_SetBit
 16072 ;;		_Word_GetPair
 16073 ;; This function is called by:
 16074 ;;		_Reset_Low
 16075 ;;		_Reset_High
 16076 ;;		_LED_Set
 16077 ;;		_Port_TogglePin
 16078 ;;		_Motor_Init
 16079 ;;		_Motor_Step
 16080 ;;		_MXK_Init
 16081 ;; This function uses a non-reentrant model
 16082 ;;
 16083                           
 16084                           	psect	text74
 16085  0146E4                     __ptext74:
 16086                           	opt stack 0
 16087  0146E4                     _Port_SetPin:
 16088                           	opt stack 14
 16089                           
 16090                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 16091                           
 16092                           ;incstack = 0
 16093  0146E4  0E08               	movlw	8
 16094  0146E6  0100               	movlb	0	; () banked
 16095  0146E8  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 16096  0146EA  0100               	movlb	0	; () banked
 16097  0146EC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 16098  0146EE  0E00               	movlw	0
 16099  0146F0  0100               	movlb	0	; () banked
 16100  0146F2  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 16101  0146F4  0100               	movlb	0	; () banked
 16102  0146F6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16103  0146F8  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 16104  0146FC  EC93  F0B3         	call	_Word_GetPair	;wreg free
 16105  014700  0100               	movlb	0	; () banked
 16106  014702  6F73               	movwf	Port_SetPin@Type& (0+255),b
 16107                           
 16108                           ;Port.c: 250: switch (Type)
 16109  014704  D042               	goto	l427
 16110  014706                     
 16111                           ; BSR set to: 0
 16112                           ;Port.c: 256: pValue &= 1;
 16113                           
 16114                           ; BSR set to: 0
 16115  014706  0E01               	movlw	1
 16116  014708  0100               	movlb	0	; () banked
 16117  01470A  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 16118                           
 16119                           ; BSR set to: 0
 16120                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16121  01470C  0100               	movlb	0	; () banked
 16122  01470E  EE20 F002          	lfsr	2,2
 16123  014712  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 16124  014714  26D9               	addwf	fsr2l,f,c
 16125  014716  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16126  014718  22DA               	addwfc	fsr2h,f,c
 16127  01471A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16128  01471E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16129  014722  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16130  014726  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16131  01472A  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 16132                           
 16133                           ;Port.c: 258: break;
 16134  01472E  0012               	return	
 16135  014730                     
 16136                           ;Port.c: 261: pValue &= 1;
 16137  014730  0E01               	movlw	1
 16138  014732  0100               	movlb	0	; () banked
 16139  014734  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 16140                           
 16141                           ;Port.c: 262: pValue ^= 1;
 16142  014736  0E01               	movlw	1
 16143  014738  0100               	movlb	0	; () banked
 16144  01473A  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 16145                           
 16146                           ; BSR set to: 0
 16147                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 16148  01473C  0100               	movlb	0	; () banked
 16149  01473E  EE20 F002          	lfsr	2,2
 16150  014742  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 16151  014744  26D9               	addwf	fsr2l,f,c
 16152  014746  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16153  014748  22DA               	addwfc	fsr2h,f,c
 16154  01474A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16155  01474E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16156  014752  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16157  014756  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16158  01475A  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 16159                           
 16160                           ;Port.c: 264: break;
 16161  01475E  0012               	return	
 16162  014760                     
 16163                           ;Port.c: 266: pValue &= 1;
 16164  014760  0E01               	movlw	1
 16165  014762  0100               	movlb	0	; () banked
 16166  014764  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 16167                           
 16168                           ; BSR set to: 0
 16169                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 16170  014766  0100               	movlb	0	; () banked
 16171  014768  EE20 F004          	lfsr	2,4
 16172  01476C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 16173  01476E  26D9               	addwf	fsr2l,f,c
 16174  014770  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 16175  014772  22DA               	addwfc	fsr2h,f,c
 16176  014774  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16177  014778  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16178  01477C  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 16179  014780  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 16180  014784  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 16181                           
 16182                           ;Port.c: 269: }
 16183                           
 16184                           ;Port.c: 268: break;
 16185  014788  0012               	return	
 16186  01478A                     l427:
 16187  01478A  0100               	movlb	0	; () banked
 16188  01478C  5173               	movf	Port_SetPin@Type& (0+255),w,b
 16189                           
 16190                           ; Switch size 1, requested type "space"
 16191                           ; Number of cases is 4, Range of values is 0 to 3
 16192                           ; switch strategies available:
 16193                           ; Name         Instructions Cycles
 16194                           ; simple_byte           13     7 (average)
 16195                           ;	Chosen strategy is simple_byte
 16196  01478E  0A00               	xorlw	0	; case 0
 16197  014790  B4D8               	btfsc	status,2,c
 16198  014792  0012               	return	
 16199  014794  0A01               	xorlw	1	; case 1
 16200  014796  B4D8               	btfsc	status,2,c
 16201  014798  D7B6               	goto	l430
 16202  01479A  0A03               	xorlw	3	; case 2
 16203  01479C  B4D8               	btfsc	status,2,c
 16204  01479E  D7C8               	goto	l432
 16205  0147A0  0A01               	xorlw	1	; case 3
 16206  0147A2  A4D8               	btfss	status,2,c
 16207  0147A4  0012               	return	
 16208  0147A6  D7DC               	goto	l433
 16209  0147A8                     __end_of_Port_SetPin:
 16210                           	opt stack 0
 16211                           tosu	equ	0xFFF
 16212                           tosh	equ	0xFFE
 16213                           tosl	equ	0xFFD
 16214                           pclath	equ	0xFFA
 16215                           tblptru	equ	0xFF8
 16216                           tblptrh	equ	0xFF7
 16217                           tblptrl	equ	0xFF6
 16218                           tablat	equ	0xFF5
 16219                           prodh	equ	0xFF4
 16220                           prodl	equ	0xFF3
 16221                           intcon	equ	0xFF2
 16222                           postinc0	equ	0xFEE
 16223                           wreg	equ	0xFE8
 16224                           indf1	equ	0xFE7
 16225                           postdec1	equ	0xFE5
 16226                           fsr1h	equ	0xFE2
 16227                           fsr1l	equ	0xFE1
 16228                           indf2	equ	0xFDF
 16229                           postinc2	equ	0xFDE
 16230                           postdec2	equ	0xFDD
 16231                           plusw2	equ	0xFDB
 16232                           fsr2h	equ	0xFDA
 16233                           fsr2l	equ	0xFD9
 16234                           status	equ	0xFD8
 16235                           
 16236 ;; *************** function _Port_GetPin *****************
 16237 ;; Defined at:
 16238 ;;		line 271 in file "Library/Port.c"
 16239 ;; Parameters:    Size  Location     Type
 16240 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 16241 ;;		 -> PortB(10), PortE(10), PortC(10), 
 16242 ;;  pPin            1    2[BANK0 ] enum E6750
 16243 ;; Auto vars:     Size  Location     Type
 16244 ;;  Output          1    5[BANK0 ] unsigned char 
 16245 ;; Return value:  Size  Location     Type
 16246 ;;                  1    wreg      unsigned char 
 16247 ;; Registers used:
 16248 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 16249 ;; Tracked objects:
 16250 ;;		On entry : 0/0
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16254 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16255 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16256 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16257 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16258 ;;Total ram usage:        6 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    7
 16261 ;; This function calls:
 16262 ;;		Nothing
 16263 ;; This function is called by:
 16264 ;;		_Port_TogglePin
 16265 ;;		_HMI_LeftSwitch
 16266 ;;		_HMI_RightSwitch
 16267 ;;		_HMI_UpSwitch
 16268 ;;		_HMI_DownSwitch
 16269 ;;		_MXK_TestButton
 16270 ;; This function uses a non-reentrant model
 16271 ;;
 16272                           
 16273                           	psect	text75
 16274  016514                     __ptext75:
 16275                           	opt stack 0
 16276  016514                     _Port_GetPin:
 16277                           	opt stack 21
 16278                           
 16279                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 16280                           
 16281                           ;incstack = 0
 16282  016514  0100               	movlb	0	; () banked
 16283  016516  EE20 F006          	lfsr	2,6
 16284  01651A  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 16285  01651C  26D9               	addwf	fsr2l,f,c
 16286  01651E  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 16287  016520  22DA               	addwfc	fsr2h,f,c
 16288  016522  CFDE F063          	movff	postinc2,??_Port_GetPin
 16289  016526  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 16290  01652A  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 16291  01652E  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 16292  016532  50DF               	movf	indf2,w,c
 16293  016534  0100               	movlb	0	; () banked
 16294  016536  6F65               	movwf	Port_GetPin@Output& (0+255),b
 16295                           
 16296                           ; BSR set to: 0
 16297                           ;Port.c: 274: Output >>= (UINT8)pPin;
 16298  016538  0100               	movlb	0	; () banked
 16299  01653A  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 16300  01653C  0100               	movlb	0	; () banked
 16301  01653E  6F63               	movwf	??_Port_GetPin& (0+255),b
 16302  016540  D003               	goto	u9180
 16303  016542                     u9185:
 16304  016542  0100               	movlb	0	; () banked
 16305  016544  90D8               	bcf	status,0,c
 16306  016546  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 16307  016548                     u9180:
 16308  016548  0100               	movlb	0	; () banked
 16309  01654A  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 16310  01654C  D7FA               	goto	u9185
 16311                           
 16312                           ;Port.c: 275: Output &= 1;
 16313  01654E  0E01               	movlw	1
 16314  016550  0100               	movlb	0	; () banked
 16315  016552  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 16316                           
 16317                           ; BSR set to: 0
 16318                           ;Port.c: 276: return Output;
 16319  016554  0100               	movlb	0	; () banked
 16320  016556  5165               	movf	Port_GetPin@Output& (0+255),w,b
 16321  016558  0012               	return	
 16322  01655A                     __end_of_Port_GetPin:
 16323                           	opt stack 0
 16324                           tosu	equ	0xFFF
 16325                           tosh	equ	0xFFE
 16326                           tosl	equ	0xFFD
 16327                           pclath	equ	0xFFA
 16328                           tblptru	equ	0xFF8
 16329                           tblptrh	equ	0xFF7
 16330                           tblptrl	equ	0xFF6
 16331                           tablat	equ	0xFF5
 16332                           prodh	equ	0xFF4
 16333                           prodl	equ	0xFF3
 16334                           intcon	equ	0xFF2
 16335                           postinc0	equ	0xFEE
 16336                           wreg	equ	0xFE8
 16337                           indf1	equ	0xFE7
 16338                           postdec1	equ	0xFE5
 16339                           fsr1h	equ	0xFE2
 16340                           fsr1l	equ	0xFE1
 16341                           indf2	equ	0xFDF
 16342                           postinc2	equ	0xFDE
 16343                           postdec2	equ	0xFDD
 16344                           plusw2	equ	0xFDB
 16345                           fsr2h	equ	0xFDA
 16346                           fsr2l	equ	0xFD9
 16347                           status	equ	0xFD8
 16348                           
 16349 ;; *************** function _ISR_Enable *****************
 16350 ;; Defined at:
 16351 ;;		line 27 in file "Library/ISR.c"
 16352 ;; Parameters:    Size  Location     Type
 16353 ;;		None
 16354 ;; Auto vars:     Size  Location     Type
 16355 ;;		None
 16356 ;; Return value:  Size  Location     Type
 16357 ;;                  1    wreg      void 
 16358 ;; Registers used:
 16359 ;;		None
 16360 ;; Tracked objects:
 16361 ;;		On entry : 0/0
 16362 ;;		On exit  : 0/0
 16363 ;;		Unchanged: 0/0
 16364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16369 ;;Total ram usage:        0 bytes
 16370 ;; Hardware stack levels used:    1
 16371 ;; Hardware stack levels required when called:    7
 16372 ;; This function calls:
 16373 ;;		Nothing
 16374 ;; This function is called by:
 16375 ;;		_initialise
 16376 ;; This function uses a non-reentrant model
 16377 ;;
 16378                           
 16379                           	psect	text76
 16380  016E48                     __ptext76:
 16381                           	opt stack 0
 16382  016E48                     _ISR_Enable:
 16383                           	opt stack 22
 16384                           
 16385                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 16386                           
 16387                           ; BSR set to: 0
 16388                           ;incstack = 0
 16389  016E48  8CF2               	bsf	intcon,6,c	;volatile
 16390                           
 16391                           ;ISR.c: 30: INTCONbits.GIE = 1;
 16392  016E4A  8EF2               	bsf	intcon,7,c	;volatile
 16393                           
 16394                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 16395  016E4C  88F2               	bsf	intcon,4,c	;volatile
 16396                           
 16397                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 16398  016E4E  92F2               	bcf	intcon,1,c	;volatile
 16399  016E50  0012               	return		;funcret
 16400  016E52                     __end_of_ISR_Enable:
 16401                           	opt stack 0
 16402                           tosu	equ	0xFFF
 16403                           tosh	equ	0xFFE
 16404                           tosl	equ	0xFFD
 16405                           pclath	equ	0xFFA
 16406                           tblptru	equ	0xFF8
 16407                           tblptrh	equ	0xFF7
 16408                           tblptrl	equ	0xFF6
 16409                           tablat	equ	0xFF5
 16410                           prodh	equ	0xFF4
 16411                           prodl	equ	0xFF3
 16412                           intcon	equ	0xFF2
 16413                           postinc0	equ	0xFEE
 16414                           wreg	equ	0xFE8
 16415                           indf1	equ	0xFE7
 16416                           postdec1	equ	0xFE5
 16417                           fsr1h	equ	0xFE2
 16418                           fsr1l	equ	0xFE1
 16419                           indf2	equ	0xFDF
 16420                           postinc2	equ	0xFDE
 16421                           postdec2	equ	0xFDD
 16422                           plusw2	equ	0xFDB
 16423                           fsr2h	equ	0xFDA
 16424                           fsr2l	equ	0xFD9
 16425                           status	equ	0xFD8
 16426                           
 16427 ;; *************** function _HMI_Init *****************
 16428 ;; Defined at:
 16429 ;;		line 104 in file "HMI.c"
 16430 ;; Parameters:    Size  Location     Type
 16431 ;;		None
 16432 ;; Auto vars:     Size  Location     Type
 16433 ;;  in              2   72[BANK0 ] unsigned short 
 16434 ;; Return value:  Size  Location     Type
 16435 ;;                  1    wreg      void 
 16436 ;; Registers used:
 16437 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16438 ;; Tracked objects:
 16439 ;;		On entry : 0/0
 16440 ;;		On exit  : 0/0
 16441 ;;		Unchanged: 0/0
 16442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16446 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16447 ;;Total ram usage:        2 bytes
 16448 ;; Hardware stack levels used:    1
 16449 ;; Hardware stack levels required when called:   16
 16450 ;; This function calls:
 16451 ;;		_Button_Init
 16452 ;;		_SPI_Init
 16453 ;;		_SPI_MinSpeed
 16454 ;; This function is called by:
 16455 ;;		_initialise
 16456 ;; This function uses a non-reentrant model
 16457 ;;
 16458                           
 16459                           	psect	text77
 16460  012292                     __ptext77:
 16461                           	opt stack 0
 16462  012292                     _HMI_Init:
 16463                           	opt stack 13
 16464                           
 16465                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 16466                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 16467                           
 16468                           ;incstack = 0
 16469  012292  0E60               	movlw	low (_HMIBoard+48)
 16470  012294  0100               	movlb	0	; () banked
 16471  012296  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16472  012298  0E01               	movlw	high (_HMIBoard+48)
 16473  01229A  0100               	movlb	0	; () banked
 16474  01229C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16475  01229E  0E00               	movlw	0
 16476  0122A0  0100               	movlb	0	; () banked
 16477  0122A2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16478  0122A4  0E02               	movlw	2
 16479  0122A6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16480  0122A8  0E82               	movlw	low _HMI_InitButtons
 16481  0122AA  0100               	movlb	0	; () banked
 16482  0122AC  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16483  0122AE  0E6E               	movlw	high _HMI_InitButtons
 16484  0122B0  0100               	movlb	0	; () banked
 16485  0122B2  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16486  0122B4  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16487  0122B6  0100               	movlb	0	; () banked
 16488  0122B8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16489  0122BA  0E06               	movlw	low _HMI_DIPSwitch
 16490  0122BC  0100               	movlb	0	; () banked
 16491  0122BE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16492  0122C0  0E6D               	movlw	high _HMI_DIPSwitch
 16493  0122C2  0100               	movlb	0	; () banked
 16494  0122C4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16495  0122C6  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 16496  0122C8  0100               	movlb	0	; () banked
 16497  0122CA  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16498  0122CC  0E04               	movlw	low _Event_NULL
 16499  0122CE  0100               	movlb	0	; () banked
 16500  0122D0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16501  0122D2  0E14               	movlw	high _Event_NULL
 16502  0122D4  0100               	movlb	0	; () banked
 16503  0122D6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16504  0122D8  0E00               	movlw	low (_Event_NULL shr (0+16))
 16505  0122DA  0100               	movlb	0	; () banked
 16506  0122DC  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16507  0122DE  EC3B  F0A2         	call	_Button_Init	;wreg free
 16508                           
 16509                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 16510                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 16511  0122E2  0E42               	movlw	low (_HMIBoard+18)
 16512  0122E4  0100               	movlb	0	; () banked
 16513  0122E6  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16514  0122E8  0E01               	movlw	high (_HMIBoard+18)
 16515  0122EA  0100               	movlb	0	; () banked
 16516  0122EC  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16517  0122EE  0E00               	movlw	0
 16518  0122F0  0100               	movlb	0	; () banked
 16519  0122F2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16520  0122F4  0E02               	movlw	2
 16521  0122F6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16522  0122F8  0E82               	movlw	low _HMI_InitButtons
 16523  0122FA  0100               	movlb	0	; () banked
 16524  0122FC  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16525  0122FE  0E6E               	movlw	high _HMI_InitButtons
 16526  012300  0100               	movlb	0	; () banked
 16527  012302  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16528  012304  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16529  012306  0100               	movlb	0	; () banked
 16530  012308  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16531  01230A  0E66               	movlw	low _HMI_LeftSwitch
 16532  01230C  0100               	movlb	0	; () banked
 16533  01230E  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16534  012310  0E6D               	movlw	high _HMI_LeftSwitch
 16535  012312  0100               	movlb	0	; () banked
 16536  012314  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16537  012316  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 16538  012318  0100               	movlb	0	; () banked
 16539  01231A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16540  01231C  0E04               	movlw	low _Event_NULL
 16541  01231E  0100               	movlb	0	; () banked
 16542  012320  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16543  012322  0E14               	movlw	high _Event_NULL
 16544  012324  0100               	movlb	0	; () banked
 16545  012326  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16546  012328  0E00               	movlw	low (_Event_NULL shr (0+16))
 16547  01232A  0100               	movlb	0	; () banked
 16548  01232C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16549  01232E  EC3B  F0A2         	call	_Button_Init	;wreg free
 16550                           
 16551                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 16552                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 16553  012332  0E38               	movlw	low (_HMIBoard+8)
 16554  012334  0100               	movlb	0	; () banked
 16555  012336  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16556  012338  0E01               	movlw	high (_HMIBoard+8)
 16557  01233A  0100               	movlb	0	; () banked
 16558  01233C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16559  01233E  0E00               	movlw	0
 16560  012340  0100               	movlb	0	; () banked
 16561  012342  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16562  012344  0E02               	movlw	2
 16563  012346  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16564  012348  0E82               	movlw	low _HMI_InitButtons
 16565  01234A  0100               	movlb	0	; () banked
 16566  01234C  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16567  01234E  0E6E               	movlw	high _HMI_InitButtons
 16568  012350  0100               	movlb	0	; () banked
 16569  012352  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16570  012354  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16571  012356  0100               	movlb	0	; () banked
 16572  012358  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16573  01235A  0E4E               	movlw	low _HMI_RightSwitch
 16574  01235C  0100               	movlb	0	; () banked
 16575  01235E  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16576  012360  0E6D               	movlw	high _HMI_RightSwitch
 16577  012362  0100               	movlb	0	; () banked
 16578  012364  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16579  012366  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 16580  012368  0100               	movlb	0	; () banked
 16581  01236A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16582  01236C  0E04               	movlw	low _Event_NULL
 16583  01236E  0100               	movlb	0	; () banked
 16584  012370  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16585  012372  0E14               	movlw	high _Event_NULL
 16586  012374  0100               	movlb	0	; () banked
 16587  012376  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16588  012378  0E00               	movlw	low (_Event_NULL shr (0+16))
 16589  01237A  0100               	movlb	0	; () banked
 16590  01237C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16591  01237E  EC3B  F0A2         	call	_Button_Init	;wreg free
 16592                           
 16593                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 16594                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 16595  012382  0E4C               	movlw	low (_HMIBoard+28)
 16596  012384  0100               	movlb	0	; () banked
 16597  012386  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16598  012388  0E01               	movlw	high (_HMIBoard+28)
 16599  01238A  0100               	movlb	0	; () banked
 16600  01238C  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16601  01238E  0E00               	movlw	0
 16602  012390  0100               	movlb	0	; () banked
 16603  012392  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16604  012394  0E02               	movlw	2
 16605  012396  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16606  012398  0E82               	movlw	low _HMI_InitButtons
 16607  01239A  0100               	movlb	0	; () banked
 16608  01239C  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16609  01239E  0E6E               	movlw	high _HMI_InitButtons
 16610  0123A0  0100               	movlb	0	; () banked
 16611  0123A2  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16612  0123A4  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16613  0123A6  0100               	movlb	0	; () banked
 16614  0123A8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16615  0123AA  0E36               	movlw	low _HMI_UpSwitch
 16616  0123AC  0100               	movlb	0	; () banked
 16617  0123AE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16618  0123B0  0E6D               	movlw	high _HMI_UpSwitch
 16619  0123B2  0100               	movlb	0	; () banked
 16620  0123B4  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16621  0123B6  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 16622  0123B8  0100               	movlb	0	; () banked
 16623  0123BA  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16624  0123BC  0E04               	movlw	low _Event_NULL
 16625  0123BE  0100               	movlb	0	; () banked
 16626  0123C0  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16627  0123C2  0E14               	movlw	high _Event_NULL
 16628  0123C4  0100               	movlb	0	; () banked
 16629  0123C6  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16630  0123C8  0E00               	movlw	low (_Event_NULL shr (0+16))
 16631  0123CA  0100               	movlb	0	; () banked
 16632  0123CC  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16633  0123CE  EC3B  F0A2         	call	_Button_Init	;wreg free
 16634                           
 16635                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 16636                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 16637  0123D2  0E56               	movlw	low (_HMIBoard+38)
 16638  0123D4  0100               	movlb	0	; () banked
 16639  0123D6  6F9B               	movwf	Button_Init@pInput& (0+255),b
 16640  0123D8  0E01               	movlw	high (_HMIBoard+38)
 16641  0123DA  0100               	movlb	0	; () banked
 16642  0123DC  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 16643  0123DE  0E00               	movlw	0
 16644  0123E0  0100               	movlb	0	; () banked
 16645  0123E2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16646  0123E4  0E02               	movlw	2
 16647  0123E6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 16648  0123E8  0E82               	movlw	low _HMI_InitButtons
 16649  0123EA  0100               	movlb	0	; () banked
 16650  0123EC  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 16651  0123EE  0E6E               	movlw	high _HMI_InitButtons
 16652  0123F0  0100               	movlb	0	; () banked
 16653  0123F2  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16654  0123F4  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16655  0123F6  0100               	movlb	0	; () banked
 16656  0123F8  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16657  0123FA  0E1E               	movlw	low _HMI_DownSwitch
 16658  0123FC  0100               	movlb	0	; () banked
 16659  0123FE  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 16660  012400  0E6D               	movlw	high _HMI_DownSwitch
 16661  012402  0100               	movlb	0	; () banked
 16662  012404  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16663  012406  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 16664  012408  0100               	movlb	0	; () banked
 16665  01240A  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16666  01240C  0E04               	movlw	low _Event_NULL
 16667  01240E  0100               	movlb	0	; () banked
 16668  012410  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 16669  012412  0E14               	movlw	high _Event_NULL
 16670  012414  0100               	movlb	0	; () banked
 16671  012416  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16672  012418  0E00               	movlw	low (_Event_NULL shr (0+16))
 16673  01241A  0100               	movlb	0	; () banked
 16674  01241C  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16675  01241E  EC3B  F0A2         	call	_Button_Init	;wreg free
 16676                           
 16677                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 16678  012422  0EA0               	movlw	160
 16679  012424  0100               	movlb	0	; () banked
 16680  012426  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 16681  012428  0E86               	movlw	134
 16682  01242A  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 16683  01242C  0E01               	movlw	1
 16684  01242E  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 16685  012430  0E00               	movlw	0
 16686  012432  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 16687  012434  0E00               	movlw	0
 16688  012436  0100               	movlb	0	; () banked
 16689  012438  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 16690  01243A  0E02               	movlw	2
 16691  01243C  0100               	movlb	0	; () banked
 16692  01243E  6F92               	movwf	SPI_Init@pMode& (0+255),b
 16693  012440  ECA7  F084         	call	_SPI_Init	;wreg free
 16694                           
 16695                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 16696  012444  0E6A               	movlw	low _SPI1
 16697  012446  0100               	movlb	0	; () banked
 16698  012448  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 16699  01244A  0E01               	movlw	high _SPI1
 16700  01244C  0100               	movlb	0	; () banked
 16701  01244E  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 16702  012450  EC04  F0AE         	call	_SPI_MinSpeed	;wreg free
 16703                           
 16704                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 16705  012454  0E00               	movlw	0
 16706  012456  0100               	movlb	0	; () banked
 16707  012458  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 16708  01245A  0E00               	movlw	0
 16709  01245C  6FA8               	movwf	HMI_Init@in& (0+255),b
 16710  01245E                     l14269:
 16711                           
 16712                           ; BSR set to: 0
 16713  01245E  0100               	movlb	0	; () banked
 16714  012460  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 16715  012462  E113               	bnz	l1153
 16716  012464  0E08               	movlw	8
 16717  012466  0100               	movlb	0	; () banked
 16718  012468  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 16719  01246A  B0D8               	btfsc	status,0,c
 16720  01246C  0012               	return	
 16721                           
 16722                           ; BSR set to: 0
 16723                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 16724                           
 16725                           ; BSR set to: 0
 16726                           
 16727                           ; BSR set to: 0
 16728  01246E  0E30               	movlw	low _HMIBoard
 16729  012470  0100               	movlb	0	; () banked
 16730  012472  25A8               	addwf	HMI_Init@in& (0+255),w,b
 16731  012474  6ED9               	movwf	fsr2l,c
 16732  012476  0E01               	movlw	high _HMIBoard
 16733  012478  0100               	movlb	0	; () banked
 16734  01247A  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 16735  01247C  6EDA               	movwf	fsr2h,c
 16736  01247E  0E00               	movlw	0
 16737  012480  6EDF               	movwf	indf2,c
 16738                           
 16739                           ; BSR set to: 0
 16740  012482  0100               	movlb	0	; () banked
 16741  012484  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 16742  012486  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 16743  012488  D7EA               	goto	l14269
 16744  01248A                     l1153:
 16745                           
 16746                           ; BSR set to: 0
 16747  01248A  0012               	return		;funcret
 16748  01248C                     __end_of_HMI_Init:
 16749                           	opt stack 0
 16750                           tosu	equ	0xFFF
 16751                           tosh	equ	0xFFE
 16752                           tosl	equ	0xFFD
 16753                           pclath	equ	0xFFA
 16754                           tblptru	equ	0xFF8
 16755                           tblptrh	equ	0xFF7
 16756                           tblptrl	equ	0xFF6
 16757                           tablat	equ	0xFF5
 16758                           prodh	equ	0xFF4
 16759                           prodl	equ	0xFF3
 16760                           intcon	equ	0xFF2
 16761                           postinc0	equ	0xFEE
 16762                           wreg	equ	0xFE8
 16763                           indf1	equ	0xFE7
 16764                           postdec1	equ	0xFE5
 16765                           fsr1h	equ	0xFE2
 16766                           fsr1l	equ	0xFE1
 16767                           indf2	equ	0xFDF
 16768                           postinc2	equ	0xFDE
 16769                           postdec2	equ	0xFDD
 16770                           plusw2	equ	0xFDB
 16771                           fsr2h	equ	0xFDA
 16772                           fsr2l	equ	0xFD9
 16773                           status	equ	0xFD8
 16774                           
 16775 ;; *************** function _SPI_MinSpeed *****************
 16776 ;; Defined at:
 16777 ;;		line 190 in file "Library/SPI.c"
 16778 ;; Parameters:    Size  Location     Type
 16779 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 16780 ;;		 -> SPI1(11), 
 16781 ;; Auto vars:     Size  Location     Type
 16782 ;;		None
 16783 ;; Return value:  Size  Location     Type
 16784 ;;                  1    wreg      void 
 16785 ;; Registers used:
 16786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16787 ;; Tracked objects:
 16788 ;;		On entry : 0/0
 16789 ;;		On exit  : 0/0
 16790 ;;		Unchanged: 0/0
 16791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16792 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16795 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16796 ;;Total ram usage:        2 bytes
 16797 ;; Hardware stack levels used:    1
 16798 ;; Hardware stack levels required when called:    9
 16799 ;; This function calls:
 16800 ;;		_Byte_SetBit
 16801 ;;		_Byte_SetQuad
 16802 ;; This function is called by:
 16803 ;;		_HMI_Init
 16804 ;; This function uses a non-reentrant model
 16805 ;;
 16806                           
 16807                           	psect	text78
 16808  015C08                     __ptext78:
 16809                           	opt stack 0
 16810  015C08                     _SPI_MinSpeed:
 16811                           	opt stack 19
 16812                           
 16813                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16814                           
 16815                           ; BSR set to: 0
 16816                           ;incstack = 0
 16817  015C08  0100               	movlb	0	; () banked
 16818  015C0A  EE20 F006          	lfsr	2,6
 16819  015C0E  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16820  015C10  26D9               	addwf	fsr2l,f,c
 16821  015C12  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16822  015C14  22DA               	addwfc	fsr2h,f,c
 16823  015C16  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16824  015C1A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16825  015C1E  0E05               	movlw	5
 16826  015C20  0100               	movlb	0	; () banked
 16827  015C22  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16828  015C24  0E00               	movlw	0
 16829  015C26  0100               	movlb	0	; () banked
 16830  015C28  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16831  015C2A  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 16832                           
 16833                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 16834  015C2E  0100               	movlb	0	; () banked
 16835  015C30  EE20 F006          	lfsr	2,6
 16836  015C34  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16837  015C36  26D9               	addwf	fsr2l,f,c
 16838  015C38  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16839  015C3A  22DA               	addwfc	fsr2h,f,c
 16840  015C3C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 16841  015C40  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 16842  015C44  0E00               	movlw	0
 16843  015C46  0100               	movlb	0	; () banked
 16844  015C48  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 16845  015C4A  0E02               	movlw	2
 16846  015C4C  0100               	movlb	0	; () banked
 16847  015C4E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 16848  015C50  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 16849                           
 16850                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16851  015C54  0100               	movlb	0	; () banked
 16852  015C56  EE20 F006          	lfsr	2,6
 16853  015C5A  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16854  015C5C  26D9               	addwf	fsr2l,f,c
 16855  015C5E  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16856  015C60  22DA               	addwfc	fsr2h,f,c
 16857  015C62  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 16858  015C66  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 16859  015C6A  0E05               	movlw	5
 16860  015C6C  0100               	movlb	0	; () banked
 16861  015C6E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 16862  015C70  0E01               	movlw	1
 16863  015C72  0100               	movlb	0	; () banked
 16864  015C74  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 16865  015C76  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 16866  015C7A  0012               	return		;funcret
 16867  015C7C                     __end_of_SPI_MinSpeed:
 16868                           	opt stack 0
 16869                           tosu	equ	0xFFF
 16870                           tosh	equ	0xFFE
 16871                           tosl	equ	0xFFD
 16872                           pclath	equ	0xFFA
 16873                           tblptru	equ	0xFF8
 16874                           tblptrh	equ	0xFF7
 16875                           tblptrl	equ	0xFF6
 16876                           tablat	equ	0xFF5
 16877                           prodh	equ	0xFF4
 16878                           prodl	equ	0xFF3
 16879                           intcon	equ	0xFF2
 16880                           postinc0	equ	0xFEE
 16881                           wreg	equ	0xFE8
 16882                           indf1	equ	0xFE7
 16883                           postdec1	equ	0xFE5
 16884                           fsr1h	equ	0xFE2
 16885                           fsr1l	equ	0xFE1
 16886                           indf2	equ	0xFDF
 16887                           postinc2	equ	0xFDE
 16888                           postdec2	equ	0xFDD
 16889                           plusw2	equ	0xFDB
 16890                           fsr2h	equ	0xFDA
 16891                           fsr2l	equ	0xFD9
 16892                           status	equ	0xFD8
 16893                           
 16894 ;; *************** function _SPI_Init *****************
 16895 ;; Defined at:
 16896 ;;		line 12 in file "Library/SPI.c"
 16897 ;; Parameters:    Size  Location     Type
 16898 ;;  pClock          4   45[BANK0 ] unsigned long 
 16899 ;;  pChannel        1   49[BANK0 ] enum E6744
 16900 ;;  pMode           1   50[BANK0 ] enum E6748
 16901 ;; Auto vars:     Size  Location     Type
 16902 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 16903 ;;		 -> SPI1(11), SPI2(11), 
 16904 ;; Return value:  Size  Location     Type
 16905 ;;                  1    wreg      void 
 16906 ;; Registers used:
 16907 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16908 ;; Tracked objects:
 16909 ;;		On entry : 0/0
 16910 ;;		On exit  : 0/0
 16911 ;;		Unchanged: 0/0
 16912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16913 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16914 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16916 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16917 ;;Total ram usage:        8 bytes
 16918 ;; Hardware stack levels used:    1
 16919 ;; Hardware stack levels required when called:   12
 16920 ;; This function calls:
 16921 ;;		_Byte_SetBit
 16922 ;;		_Byte_SetQuad
 16923 ;;		_Port_SetPinType
 16924 ;;		_SPI_DCS
 16925 ;;		_SPI_DisableISR
 16926 ;;		_Timer2_Init
 16927 ;; This function is called by:
 16928 ;;		_Configure_GPIOs
 16929 ;;		_HMI_Init
 16930 ;; This function uses a non-reentrant model
 16931 ;;
 16932                           
 16933                           	psect	text79
 16934  01094E                     __ptext79:
 16935                           	opt stack 0
 16936  01094E                     _SPI_Init:
 16937                           	opt stack 15
 16938                           
 16939                           ;SPI.c: 14: SPIPtr pInput;
 16940                           ;SPI.c: 16: switch (pChannel)
 16941                           
 16942                           ;incstack = 0
 16943  01094E  D00C               	goto	l597
 16944  010950                     
 16945                           ;SPI.c: 19: pInput = &SPI1;
 16946  010950  0E6A               	movlw	low _SPI1
 16947  010952  0100               	movlb	0	; () banked
 16948  010954  6F93               	movwf	SPI_Init@pInput& (0+255),b
 16949  010956  0E01               	movlw	high _SPI1
 16950  010958  D004               	goto	L12
 16951  01095A                     
 16952                           ; BSR set to: 0
 16953                           ;SPI.c: 22: pInput = &SPI2;
 16954                           
 16955                           ; BSR set to: 0
 16956  01095A  0E75               	movlw	low _SPI2
 16957  01095C  0100               	movlb	0	; () banked
 16958  01095E  6F93               	movwf	SPI_Init@pInput& (0+255),b
 16959  010960  0E01               	movlw	high _SPI2
 16960  010962                     L12:
 16961  010962  0100               	movlb	0	; () banked
 16962  010964  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 16963                           
 16964                           ; BSR set to: 0
 16965                           ;SPI.c: 24: };
 16966                           
 16967                           ;SPI.c: 23: break;
 16968  010966  D008               	goto	l599
 16969  010968                     l597:
 16970                           
 16971                           ; BSR set to: 0
 16972  010968  0100               	movlb	0	; () banked
 16973  01096A  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 16974                           
 16975                           ; Switch size 1, requested type "space"
 16976                           ; Number of cases is 2, Range of values is 0 to 1
 16977                           ; switch strategies available:
 16978                           ; Name         Instructions Cycles
 16979                           ; simple_byte            7     4 (average)
 16980                           ;	Chosen strategy is simple_byte
 16981  01096C  0A00               	xorlw	0	; case 0
 16982  01096E  B4D8               	btfsc	status,2,c
 16983  010970  D7EF               	goto	l598
 16984  010972  0A01               	xorlw	1	; case 1
 16985  010974  B4D8               	btfsc	status,2,c
 16986  010976  D7F1               	goto	l600
 16987  010978                     l599:
 16988                           
 16989                           ; BSR set to: 0
 16990                           ;SPI.c: 26: pInput->mChannel = pChannel;
 16991                           
 16992                           ; BSR set to: 0
 16993  010978  0100               	movlb	0	; () banked
 16994  01097A  EE20 F002          	lfsr	2,2
 16995  01097E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 16996  010980  26D9               	addwf	fsr2l,f,c
 16997  010982  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16998  010984  22DA               	addwfc	fsr2h,f,c
 16999  010986  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 17000                           
 17001                           ;SPI.c: 35: switch (pChannel)
 17002  01098A  D0B1               	goto	l601
 17003  01098C                     
 17004                           ; BSR set to: 0
 17005                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 17006                           
 17007                           ; BSR set to: 0
 17008  01098C  0EA8               	movlw	low _PortC
 17009  01098E  0100               	movlb	0	; () banked
 17010  010990  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17011  010992  0E01               	movlw	high _PortC
 17012  010994  0100               	movlb	0	; () banked
 17013  010996  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17014  010998  0E02               	movlw	2
 17015  01099A  0100               	movlb	0	; () banked
 17016  01099C  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17017  01099E  0E03               	movlw	3
 17018  0109A0  0100               	movlb	0	; () banked
 17019  0109A2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17020  0109A4  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17021                           
 17022                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 17023  0109A8  0EA8               	movlw	low _PortC
 17024  0109AA  0100               	movlb	0	; () banked
 17025  0109AC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17026  0109AE  0E01               	movlw	high _PortC
 17027  0109B0  0100               	movlb	0	; () banked
 17028  0109B2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17029  0109B4  0E03               	movlw	3
 17030  0109B6  0100               	movlb	0	; () banked
 17031  0109B8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17032  0109BA  0E03               	movlw	3
 17033  0109BC  0100               	movlb	0	; () banked
 17034  0109BE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17035  0109C0  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17036                           
 17037                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 17038  0109C4  0EA8               	movlw	low _PortC
 17039  0109C6  0100               	movlb	0	; () banked
 17040  0109C8  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17041  0109CA  0E01               	movlw	high _PortC
 17042  0109CC  0100               	movlb	0	; () banked
 17043  0109CE  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17044  0109D0  0E05               	movlw	5
 17045  0109D2  0100               	movlb	0	; () banked
 17046  0109D4  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17047  0109D6  0E03               	movlw	3
 17048  0109D8  0100               	movlb	0	; () banked
 17049  0109DA  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17050  0109DC  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17051                           
 17052                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 17053  0109E0  0EA8               	movlw	low _PortC
 17054  0109E2  0100               	movlb	0	; () banked
 17055  0109E4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17056  0109E6  0E01               	movlw	high _PortC
 17057  0109E8  0100               	movlb	0	; () banked
 17058  0109EA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17059  0109EC  0E04               	movlw	4
 17060  0109EE  0100               	movlb	0	; () banked
 17061  0109F0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17062  0109F2  0E00               	movlw	0
 17063  0109F4  0100               	movlb	0	; () banked
 17064  0109F6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17065  0109F8  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17066                           
 17067                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 17068  0109FC  0100               	movlb	0	; () banked
 17069  0109FE  EE20 F003          	lfsr	2,3
 17070  010A02  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17071  010A04  26D9               	addwf	fsr2l,f,c
 17072  010A06  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17073  010A08  22DA               	addwfc	fsr2h,f,c
 17074  010A0A  0EC7               	movlw	199
 17075  010A0C  6EDE               	movwf	postinc2,c
 17076  010A0E  0E0F               	movlw	15
 17077  010A10  6EDD               	movwf	postdec2,c
 17078                           
 17079                           ; BSR set to: 0
 17080                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 17081  010A12  0100               	movlb	0	; () banked
 17082  010A14  EE20 F006          	lfsr	2,6
 17083  010A18  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17084  010A1A  26D9               	addwf	fsr2l,f,c
 17085  010A1C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17086  010A1E  22DA               	addwfc	fsr2h,f,c
 17087  010A20  0EC6               	movlw	198
 17088  010A22  6EDE               	movwf	postinc2,c
 17089  010A24  0E0F               	movlw	15
 17090  010A26  6EDD               	movwf	postdec2,c
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 17094  010A28  0100               	movlb	0	; () banked
 17095  010A2A  EE20 F009          	lfsr	2,9
 17096  010A2E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17097  010A30  26D9               	addwf	fsr2l,f,c
 17098  010A32  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17099  010A34  22DA               	addwfc	fsr2h,f,c
 17100  010A36  0EC9               	movlw	201
 17101  010A38  D056               	goto	L13
 17102  010A3A                     
 17103                           ; BSR set to: 0
 17104                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 17105                           
 17106                           ; BSR set to: 0
 17107  010A3A  0E94               	movlw	low _PortD
 17108  010A3C  0100               	movlb	0	; () banked
 17109  010A3E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17110  010A40  0E01               	movlw	high _PortD
 17111  010A42  0100               	movlb	0	; () banked
 17112  010A44  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17113  010A46  0E07               	movlw	7
 17114  010A48  0100               	movlb	0	; () banked
 17115  010A4A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17116  010A4C  0E03               	movlw	3
 17117  010A4E  0100               	movlb	0	; () banked
 17118  010A50  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17119  010A52  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17120                           
 17121                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 17122  010A56  0E94               	movlw	low _PortD
 17123  010A58  0100               	movlb	0	; () banked
 17124  010A5A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17125  010A5C  0E01               	movlw	high _PortD
 17126  010A5E  0100               	movlb	0	; () banked
 17127  010A60  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17128  010A62  0E06               	movlw	6
 17129  010A64  0100               	movlb	0	; () banked
 17130  010A66  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17131  010A68  0E03               	movlw	3
 17132  010A6A  0100               	movlb	0	; () banked
 17133  010A6C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17134  010A6E  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17135                           
 17136                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 17137  010A72  0E94               	movlw	low _PortD
 17138  010A74  0100               	movlb	0	; () banked
 17139  010A76  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17140  010A78  0E01               	movlw	high _PortD
 17141  010A7A  0100               	movlb	0	; () banked
 17142  010A7C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17143  010A7E  0E04               	movlw	4
 17144  010A80  0100               	movlb	0	; () banked
 17145  010A82  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17146  010A84  0E03               	movlw	3
 17147  010A86  0100               	movlb	0	; () banked
 17148  010A88  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17149  010A8A  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17150                           
 17151                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 17152  010A8E  0E94               	movlw	low _PortD
 17153  010A90  0100               	movlb	0	; () banked
 17154  010A92  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 17155  010A94  0E01               	movlw	high _PortD
 17156  010A96  0100               	movlb	0	; () banked
 17157  010A98  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17158  010A9A  0E05               	movlw	5
 17159  010A9C  0100               	movlb	0	; () banked
 17160  010A9E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 17161  010AA0  0E00               	movlw	0
 17162  010AA2  0100               	movlb	0	; () banked
 17163  010AA4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 17164  010AA6  EC2D  F093         	call	_Port_SetPinType	;wreg free
 17165                           
 17166                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 17167  010AAA  0100               	movlb	0	; () banked
 17168  010AAC  EE20 F003          	lfsr	2,3
 17169  010AB0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17170  010AB2  26D9               	addwf	fsr2l,f,c
 17171  010AB4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17172  010AB6  22DA               	addwfc	fsr2h,f,c
 17173  010AB8  0E6D               	movlw	109
 17174  010ABA  6EDE               	movwf	postinc2,c
 17175  010ABC  0E0F               	movlw	15
 17176  010ABE  6EDD               	movwf	postdec2,c
 17177                           
 17178                           ; BSR set to: 0
 17179                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 17180  010AC0  0100               	movlb	0	; () banked
 17181  010AC2  EE20 F006          	lfsr	2,6
 17182  010AC6  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17183  010AC8  26D9               	addwf	fsr2l,f,c
 17184  010ACA  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17185  010ACC  22DA               	addwfc	fsr2h,f,c
 17186  010ACE  0E6C               	movlw	108
 17187  010AD0  6EDE               	movwf	postinc2,c
 17188  010AD2  0E0F               	movlw	15
 17189  010AD4  6EDD               	movwf	postdec2,c
 17190                           
 17191                           ; BSR set to: 0
 17192                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 17193  010AD6  0100               	movlb	0	; () banked
 17194  010AD8  EE20 F009          	lfsr	2,9
 17195  010ADC  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17196  010ADE  26D9               	addwf	fsr2l,f,c
 17197  010AE0  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17198  010AE2  22DA               	addwfc	fsr2h,f,c
 17199  010AE4  0E6F               	movlw	111
 17200  010AE6                     L13:
 17201  010AE6  6EDE               	movwf	postinc2,c
 17202  010AE8  0E0F               	movlw	15
 17203  010AEA  6EDD               	movwf	postdec2,c
 17204                           
 17205                           ;SPI.c: 68: break;
 17206  010AEC  D009               	goto	l603
 17207  010AEE                     l601:
 17208                           
 17209                           ; BSR set to: 0
 17210                           
 17211                           ; BSR set to: 0
 17212  010AEE  0100               	movlb	0	; () banked
 17213  010AF0  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 17214                           
 17215                           ; Switch size 1, requested type "space"
 17216                           ; Number of cases is 2, Range of values is 0 to 1
 17217                           ; switch strategies available:
 17218                           ; Name         Instructions Cycles
 17219                           ; simple_byte            7     4 (average)
 17220                           ;	Chosen strategy is simple_byte
 17221  010AF2  0A00               	xorlw	0	; case 0
 17222  010AF4  B4D8               	btfsc	status,2,c
 17223  010AF6  D74A               	goto	l602
 17224  010AF8  0A01               	xorlw	1	; case 1
 17225  010AFA  A4D8               	btfss	status,2,c
 17226  010AFC  0012               	return	
 17227  010AFE  D79D               	goto	l604
 17228  010B00                     l603:
 17229                           
 17230                           ; BSR set to: 0
 17231                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17232                           
 17233                           ; BSR set to: 0
 17234  010B00  0100               	movlb	0	; () banked
 17235  010B02  EE20 F006          	lfsr	2,6
 17236  010B06  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17237  010B08  26D9               	addwf	fsr2l,f,c
 17238  010B0A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17239  010B0C  22DA               	addwfc	fsr2h,f,c
 17240  010B0E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17241  010B12  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17242  010B16  0E05               	movlw	5
 17243  010B18  0100               	movlb	0	; () banked
 17244  010B1A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17245  010B1C  0E00               	movlw	0
 17246  010B1E  0100               	movlb	0	; () banked
 17247  010B20  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17248  010B22  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17249                           
 17250                           ;SPI.c: 77: switch(pMode)
 17251  010B26  D09C               	goto	l607
 17252  010B28                     
 17253                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 17254  010B28  0100               	movlb	0	; () banked
 17255  010B2A  EE20 F006          	lfsr	2,6
 17256  010B2E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17257  010B30  26D9               	addwf	fsr2l,f,c
 17258  010B32  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17259  010B34  22DA               	addwfc	fsr2h,f,c
 17260  010B36  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17261  010B3A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17262  010B3E  0E04               	movlw	4
 17263  010B40  0100               	movlb	0	; () banked
 17264  010B42  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17265  010B44  0E00               	movlw	0
 17266  010B46  0100               	movlb	0	; () banked
 17267  010B48  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17268  010B4A  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17269                           
 17270                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 17271  010B4E  0100               	movlb	0	; () banked
 17272  010B50  EE20 F003          	lfsr	2,3
 17273  010B54  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17274  010B56  26D9               	addwf	fsr2l,f,c
 17275  010B58  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17276  010B5A  22DA               	addwfc	fsr2h,f,c
 17277  010B5C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17278  010B60  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17279  010B64  0E06               	movlw	6
 17280  010B66  0100               	movlb	0	; () banked
 17281  010B68  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17282  010B6A  0E00               	movlw	0
 17283  010B6C  0100               	movlb	0	; () banked
 17284  010B6E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17285  010B70  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17286                           
 17287                           ;SPI.c: 82: break;
 17288  010B74  D084               	goto	l609
 17289  010B76                     
 17290                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 17291  010B76  0100               	movlb	0	; () banked
 17292  010B78  EE20 F006          	lfsr	2,6
 17293  010B7C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17294  010B7E  26D9               	addwf	fsr2l,f,c
 17295  010B80  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17296  010B82  22DA               	addwfc	fsr2h,f,c
 17297  010B84  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17298  010B88  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17299  010B8C  0E04               	movlw	4
 17300  010B8E  0100               	movlb	0	; () banked
 17301  010B90  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17302  010B92  0E00               	movlw	0
 17303  010B94  0100               	movlb	0	; () banked
 17304  010B96  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17305  010B98  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17306                           
 17307                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 17308  010B9C  0100               	movlb	0	; () banked
 17309  010B9E  EE20 F003          	lfsr	2,3
 17310  010BA2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17311  010BA4  26D9               	addwf	fsr2l,f,c
 17312  010BA6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17313  010BA8  22DA               	addwfc	fsr2h,f,c
 17314  010BAA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17315  010BAE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17316  010BB2  0E06               	movlw	6
 17317  010BB4  0100               	movlb	0	; () banked
 17318  010BB6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17319  010BB8  0E01               	movlw	1
 17320  010BBA  0100               	movlb	0	; () banked
 17321  010BBC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17322  010BBE  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17323                           
 17324                           ;SPI.c: 86: break;
 17325  010BC2  D05D               	goto	l609
 17326  010BC4                     
 17327                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 17328  010BC4  0100               	movlb	0	; () banked
 17329  010BC6  EE20 F006          	lfsr	2,6
 17330  010BCA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17331  010BCC  26D9               	addwf	fsr2l,f,c
 17332  010BCE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17333  010BD0  22DA               	addwfc	fsr2h,f,c
 17334  010BD2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17335  010BD6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17336  010BDA  0E04               	movlw	4
 17337  010BDC  0100               	movlb	0	; () banked
 17338  010BDE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17339  010BE0  0E01               	movlw	1
 17340  010BE2  0100               	movlb	0	; () banked
 17341  010BE4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17342  010BE6  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17343                           
 17344                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 17345  010BEA  0100               	movlb	0	; () banked
 17346  010BEC  EE20 F003          	lfsr	2,3
 17347  010BF0  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17348  010BF2  26D9               	addwf	fsr2l,f,c
 17349  010BF4  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17350  010BF6  22DA               	addwfc	fsr2h,f,c
 17351  010BF8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17352  010BFC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17353  010C00  0E06               	movlw	6
 17354  010C02  0100               	movlb	0	; () banked
 17355  010C04  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17356  010C06  0E00               	movlw	0
 17357  010C08  0100               	movlb	0	; () banked
 17358  010C0A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17359  010C0C  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17360                           
 17361                           ;SPI.c: 90: break;
 17362  010C10  D036               	goto	l609
 17363  010C12                     
 17364                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 17365  010C12  0100               	movlb	0	; () banked
 17366  010C14  EE20 F006          	lfsr	2,6
 17367  010C18  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17368  010C1A  26D9               	addwf	fsr2l,f,c
 17369  010C1C  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17370  010C1E  22DA               	addwfc	fsr2h,f,c
 17371  010C20  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17372  010C24  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17373  010C28  0E04               	movlw	4
 17374  010C2A  0100               	movlb	0	; () banked
 17375  010C2C  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17376  010C2E  0E01               	movlw	1
 17377  010C30  0100               	movlb	0	; () banked
 17378  010C32  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17379  010C34  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17380                           
 17381                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 17382  010C38  0100               	movlb	0	; () banked
 17383  010C3A  EE20 F003          	lfsr	2,3
 17384  010C3E  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17385  010C40  26D9               	addwf	fsr2l,f,c
 17386  010C42  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17387  010C44  22DA               	addwfc	fsr2h,f,c
 17388  010C46  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17389  010C4A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17390  010C4E  0E06               	movlw	6
 17391  010C50  0100               	movlb	0	; () banked
 17392  010C52  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17393  010C54  0E01               	movlw	1
 17394  010C56  0100               	movlb	0	; () banked
 17395  010C58  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17396  010C5A  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17397                           
 17398                           ;SPI.c: 94: break;
 17399  010C5E  D00F               	goto	l609
 17400  010C60                     l607:
 17401  010C60  0100               	movlb	0	; () banked
 17402  010C62  5192               	movf	SPI_Init@pMode& (0+255),w,b
 17403                           
 17404                           ; Switch size 1, requested type "space"
 17405                           ; Number of cases is 4, Range of values is 0 to 3
 17406                           ; switch strategies available:
 17407                           ; Name         Instructions Cycles
 17408                           ; simple_byte           13     7 (average)
 17409                           ;	Chosen strategy is simple_byte
 17410  010C64  0A00               	xorlw	0	; case 0
 17411  010C66  B4D8               	btfsc	status,2,c
 17412  010C68  D75F               	goto	l608
 17413  010C6A  0A01               	xorlw	1	; case 1
 17414  010C6C  B4D8               	btfsc	status,2,c
 17415  010C6E  D783               	goto	l610
 17416  010C70  0A03               	xorlw	3	; case 2
 17417  010C72  B4D8               	btfsc	status,2,c
 17418  010C74  D7A7               	goto	l611
 17419  010C76  0A01               	xorlw	1	; case 3
 17420  010C78  A4D8               	btfss	status,2,c
 17421  010C7A  0012               	return	
 17422  010C7C  D7CA               	goto	l612
 17423  010C7E                     l609:
 17424                           
 17425                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 17426                           
 17427                           ; BSR set to: 0
 17428  010C7E  0100               	movlb	0	; () banked
 17429  010C80  EE20 F006          	lfsr	2,6
 17430  010C84  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17431  010C86  26D9               	addwf	fsr2l,f,c
 17432  010C88  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17433  010C8A  22DA               	addwfc	fsr2h,f,c
 17434  010C8C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17435  010C90  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17436  010C94  0E07               	movlw	7
 17437  010C96  0100               	movlb	0	; () banked
 17438  010C98  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17439  010C9A  0E00               	movlw	0
 17440  010C9C  0100               	movlb	0	; () banked
 17441  010C9E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17442  010CA0  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17443                           
 17444                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 17445  010CA4  0100               	movlb	0	; () banked
 17446  010CA6  EE20 F006          	lfsr	2,6
 17447  010CAA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17448  010CAC  26D9               	addwf	fsr2l,f,c
 17449  010CAE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17450  010CB0  22DA               	addwfc	fsr2h,f,c
 17451  010CB2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17452  010CB6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17453  010CBA  0E06               	movlw	6
 17454  010CBC  0100               	movlb	0	; () banked
 17455  010CBE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17456  010CC0  0E00               	movlw	0
 17457  010CC2  0100               	movlb	0	; () banked
 17458  010CC4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17459  010CC6  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17460                           
 17461                           ;SPI.c: 106: Timer2_Init(pClock);
 17462  010CCA  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 17463  010CCE  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 17464  010CD2  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 17465  010CD6  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 17466  010CDA  ECC0  F09B         	call	_Timer2_Init	;wreg free
 17467                           
 17468                           ;SPI.c: 112: SPI_DisableISR(pInput);
 17469  010CDE  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 17470  010CE2  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 17471  010CE6  EC68  F0B5         	call	_SPI_DisableISR	;wreg free
 17472                           
 17473                           ;SPI.c: 116: switch (pChannel)
 17474  010CEA  D004               	goto	l614
 17475  010CEC                     l615:
 17476                           
 17477                           ; BSR set to: 0
 17478  010CEC  869F               	bsf	3999,3,c	;volatile
 17479  010CEE  D00B               	goto	l616
 17480  010CF0                     l617:
 17481                           
 17482                           ; BSR set to: 0
 17483  010CF0  8EA5               	bsf	4005,7,c	;volatile
 17484  010CF2  D009               	goto	l616
 17485  010CF4                     l614:
 17486                           
 17487                           ; BSR set to: 0
 17488  010CF4  0100               	movlb	0	; () banked
 17489  010CF6  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 17490                           
 17491                           ; Switch size 1, requested type "space"
 17492                           ; Number of cases is 2, Range of values is 0 to 1
 17493                           ; switch strategies available:
 17494                           ; Name         Instructions Cycles
 17495                           ; simple_byte            7     4 (average)
 17496                           ;	Chosen strategy is simple_byte
 17497  010CF8  0A00               	xorlw	0	; case 0
 17498  010CFA  B4D8               	btfsc	status,2,c
 17499  010CFC  D7F7               	goto	l615
 17500  010CFE  0A01               	xorlw	1	; case 1
 17501  010D00  A4D8               	btfss	status,2,c
 17502  010D02  0012               	return	
 17503  010D04  D7F5               	goto	l617
 17504  010D06                     l616:
 17505                           
 17506                           ; BSR set to: 0
 17507                           ;SPI.c: 124: SPI_DCS(pInput);
 17508                           
 17509                           ; BSR set to: 0
 17510  010D06  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 17511  010D0A  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 17512  010D0E  ECE0  F0B4         	call	_SPI_DCS	;wreg free
 17513                           
 17514                           ;SPI.c: 126: pInput->mBusy = 0;
 17515  010D12  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 17516  010D16  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 17517  010D1A  0E00               	movlw	0
 17518  010D1C  6EDF               	movwf	indf2,c
 17519                           
 17520                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 17521  010D1E  0100               	movlb	0	; () banked
 17522  010D20  EE20 F006          	lfsr	2,6
 17523  010D24  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17524  010D26  26D9               	addwf	fsr2l,f,c
 17525  010D28  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17526  010D2A  22DA               	addwfc	fsr2h,f,c
 17527  010D2C  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 17528  010D30  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 17529  010D34  0E00               	movlw	0
 17530  010D36  0100               	movlb	0	; () banked
 17531  010D38  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17532  010D3A  0E03               	movlw	3
 17533  010D3C  0100               	movlb	0	; () banked
 17534  010D3E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 17535  010D40  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 17536                           
 17537                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17538  010D44  0100               	movlb	0	; () banked
 17539  010D46  EE20 F006          	lfsr	2,6
 17540  010D4A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 17541  010D4C  26D9               	addwf	fsr2l,f,c
 17542  010D4E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17543  010D50  22DA               	addwfc	fsr2h,f,c
 17544  010D52  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 17545  010D56  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 17546  010D5A  0E05               	movlw	5
 17547  010D5C  0100               	movlb	0	; () banked
 17548  010D5E  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 17549  010D60  0E01               	movlw	1
 17550  010D62  0100               	movlb	0	; () banked
 17551  010D64  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 17552  010D66  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 17553  010D6A  0012               	return		;funcret
 17554  010D6C                     __end_of_SPI_Init:
 17555                           	opt stack 0
 17556                           tosu	equ	0xFFF
 17557                           tosh	equ	0xFFE
 17558                           tosl	equ	0xFFD
 17559                           pclath	equ	0xFFA
 17560                           tblptru	equ	0xFF8
 17561                           tblptrh	equ	0xFF7
 17562                           tblptrl	equ	0xFF6
 17563                           tablat	equ	0xFF5
 17564                           prodh	equ	0xFF4
 17565                           prodl	equ	0xFF3
 17566                           intcon	equ	0xFF2
 17567                           postinc0	equ	0xFEE
 17568                           wreg	equ	0xFE8
 17569                           indf1	equ	0xFE7
 17570                           postdec1	equ	0xFE5
 17571                           fsr1h	equ	0xFE2
 17572                           fsr1l	equ	0xFE1
 17573                           indf2	equ	0xFDF
 17574                           postinc2	equ	0xFDE
 17575                           postdec2	equ	0xFDD
 17576                           plusw2	equ	0xFDB
 17577                           fsr2h	equ	0xFDA
 17578                           fsr2l	equ	0xFD9
 17579                           status	equ	0xFD8
 17580                           
 17581 ;; *************** function _Timer2_Init *****************
 17582 ;; Defined at:
 17583 ;;		line 10 in file "Library/Timer2.c"
 17584 ;; Parameters:    Size  Location     Type
 17585 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 17586 ;; Auto vars:     Size  Location     Type
 17587 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 17588 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 17589 ;;  RDIV            4   18[BANK0 ] unsigned long 
 17590 ;; Return value:  Size  Location     Type
 17591 ;;                  1    wreg      void 
 17592 ;; Registers used:
 17593 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17594 ;; Tracked objects:
 17595 ;;		On entry : 0/0
 17596 ;;		On exit  : 0/0
 17597 ;;		Unchanged: 0/0
 17598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17599 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17600 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17601 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17602 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17603 ;;Total ram usage:       17 bytes
 17604 ;; Hardware stack levels used:    1
 17605 ;; Hardware stack levels required when called:    8
 17606 ;; This function calls:
 17607 ;;		_Timer2_Clear
 17608 ;;		___lldiv
 17609 ;; This function is called by:
 17610 ;;		_SPI_Init
 17611 ;; This function uses a non-reentrant model
 17612 ;;
 17613                           
 17614                           	psect	text80
 17615  013780                     __ptext80:
 17616                           	opt stack 0
 17617  013780                     _Timer2_Init:
 17618                           	opt stack 18
 17619                           
 17620                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 17621                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 17622                           ;Timer2.c: 14: static UINT8 PRE = 0;
 17623                           ;Timer2.c: 15: static UINT32 DIV = 0;
 17624                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 17625                           
 17626                           ;incstack = 0
 17627  013780  0E00               	movlw	0
 17628  013782  0100               	movlb	0	; () banked
 17629  013784  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 17630  013786  0E6C               	movlw	108
 17631  013788  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 17632  01378A  0EDC               	movlw	220
 17633  01378C  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 17634  01378E  0E02               	movlw	2
 17635  013790  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 17636                           
 17637                           ; BSR set to: 0
 17638                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 17639                           ;Timer2.c: 20: pFrequency *= 2;
 17640  013792  0100               	movlb	0	; () banked
 17641  013794  90D8               	bcf	status,0,c
 17642  013796  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 17643  013798  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 17644  01379A  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 17645  01379C  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;Timer2.c: 23: pCPUClock /= 4;
 17649  01379E  0E02               	movlw	2
 17650  0137A0  0100               	movlb	0	; () banked
 17651  0137A2  6F71               	movwf	??_Timer2_Init& (0+255),b
 17652  0137A4                     u9665:
 17653  0137A4  90D8               	bcf	status,0,c
 17654  0137A6  0100               	movlb	0	; () banked
 17655  0137A8  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 17656  0137AA  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 17657  0137AC  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 17658  0137AE  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 17659  0137B0  0100               	movlb	0	; () banked
 17660  0137B2  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 17661  0137B4  D7F7               	goto	u9665
 17662                           
 17663                           ; BSR set to: 0
 17664                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 17665  0137B6  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 17666  0137BA  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 17667  0137BE  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 17668  0137C2  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 17669  0137C6  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 17670  0137CA  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 17671  0137CE  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 17672  0137D2  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 17673  0137D6  ECF3  F0A4         	call	___lldiv	;wreg free
 17674  0137DA  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 17675  0137DE  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 17676  0137E2  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 17677  0137E6  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 17678                           
 17679                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 17680  0137EA  D010               	goto	l1828
 17681  0137EC                     l12501:
 17682                           
 17683                           ;Timer2.c: 28: {
 17684                           ;Timer2.c: 29: RDIV = 0;
 17685  0137EC  0E00               	movlw	0
 17686  0137EE  0100               	movlb	0	; () banked
 17687  0137F0  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 17688  0137F2  0E00               	movlw	0
 17689  0137F4  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 17690  0137F6  0E00               	movlw	0
 17691  0137F8  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 17692  0137FA  0E00               	movlw	0
 17693  0137FC  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 17694                           
 17695                           ; BSR set to: 0
 17696                           ;Timer2.c: 30: INDEX ++;
 17697  0137FE  0100               	movlb	0	; () banked
 17698  013800  2BF8               	incf	Timer2_Init@INDEX& (0+255),f,b
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;Timer2.c: 31: if (INDEX >= 3)
 17702  013802  0E02               	movlw	2
 17703  013804  0100               	movlb	0	; () banked
 17704  013806  65F8               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 17705  013808  D001               	goto	l1828
 17706  01380A  D026               	goto	u9680
 17707  01380C                     l1828:
 17708                           
 17709                           ; BSR set to: 0
 17710                           
 17711                           ; BSR set to: 0
 17712  01380C  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 17713  013810  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 17714  013814  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 17715  013818  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 17716  01381C  0100               	movlb	0	; () banked
 17717  01381E  51F8               	movf	Timer2_Init@INDEX& (0+255),w,b
 17718  013820  0D01               	mullw	1
 17719  013822  0ECC               	movlw	low Timer2_Init@PRESCALE
 17720  013824  24F3               	addwf	prodl,w,c
 17721  013826  6EF6               	movwf	tblptrl,c
 17722  013828  0EFC               	movlw	high Timer2_Init@PRESCALE
 17723  01382A  20F4               	addwfc	prodh,w,c
 17724  01382C  6EF7               	movwf	tblptrh,c
 17725  01382E                     	if	1	;There are 3 active tblptr bytes
 17726  01382E  6AF8               	clrf	tblptru,c
 17727  013830  0E00               	movlw	low (__mediumconst shr (0+16))
 17728  013832  22F8               	addwfc	tblptru,f,c
 17729  013834                     	endif
 17730  013834  0008               	tblrd		*
 17731  013836  50F5               	movf	tablat,w,c
 17732  013838  0100               	movlb	0	; () banked
 17733  01383A  6F64               	movwf	___lldiv@divisor& (0+255),b
 17734  01383C  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 17735  01383E  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 17736  013840  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 17737  013842  ECF3  F0A4         	call	___lldiv	;wreg free
 17738  013846  0100               	movlb	0	; () banked
 17739  013848  5163               	movf	(?___lldiv+3)& (0+255),w,b
 17740  01384A  0100               	movlb	0	; () banked
 17741  01384C  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 17742  01384E  E1CE               	bnz	l12501
 17743  013850  0100               	movlb	0	; () banked
 17744  013852  0561               	decf	(?___lldiv+1)& (0+255),w,b
 17745  013854  B0D8               	btfsc	status,0,c
 17746  013856  D7CA               	goto	l1827
 17747  013858                     u9680:
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;Timer2.c: 33: }
 17751                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 17752                           
 17753                           ; BSR set to: 0
 17754  013858  50CA               	movf	4042,w,c	;volatile
 17755  01385A  0100               	movlb	0	; () banked
 17756  01385C  19F8               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 17757  01385E  0BFC               	andlw	-4
 17758  013860  19F8               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 17759  013862  6ECA               	movwf	4042,c	;volatile
 17760                           
 17761                           ; BSR set to: 0
 17762                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 17763  013864  84CA               	bsf	4042,2,c	;volatile
 17764                           
 17765                           ; BSR set to: 0
 17766                           ;Timer2.c: 44: Timer2_Clear();
 17767  013866  EC33  F0B7         	call	_Timer2_Clear	;wreg free
 17768                           
 17769                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 17770  01386A  0100               	movlb	0	; () banked
 17771  01386C  51F8               	movf	Timer2_Init@INDEX& (0+255),w,b
 17772  01386E  0D01               	mullw	1
 17773  013870  0ECC               	movlw	low Timer2_Init@PRESCALE
 17774  013872  24F3               	addwf	prodl,w,c
 17775  013874  6EF6               	movwf	tblptrl,c
 17776  013876  0EFC               	movlw	high Timer2_Init@PRESCALE
 17777  013878  20F4               	addwfc	prodh,w,c
 17778  01387A  6EF7               	movwf	tblptrh,c
 17779  01387C                     	if	1	;There are 3 active tblptr bytes
 17780  01387C  6AF8               	clrf	tblptru,c
 17781  01387E  0E00               	movlw	low (__mediumconst shr (0+16))
 17782  013880  22F8               	addwfc	tblptru,f,c
 17783  013882                     	endif
 17784  013882  0008               	tblrd		*
 17785  013884  CFF5 F03B          	movff	tablat,Timer2_Init@PRE
 17786                           
 17787                           ; BSR set to: 0
 17788                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 17789  013888  0EFF               	movlw	255
 17790  01388A  0100               	movlb	0	; () banked
 17791  01388C  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 17792  01388E  0101               	movlb	1	; () banked
 17793  013890  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 17794  013892  0EFF               	movlw	255
 17795  013894  0100               	movlb	0	; () banked
 17796  013896  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 17797  013898  0101               	movlb	1	; () banked
 17798  01389A  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 17799  01389C  0EFF               	movlw	255
 17800  01389E  0100               	movlb	0	; () banked
 17801  0138A0  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 17802  0138A2  0101               	movlb	1	; () banked
 17803  0138A4  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 17804  0138A6  0EFF               	movlw	255
 17805  0138A8  0100               	movlb	0	; () banked
 17806  0138AA  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 17807  0138AC  0101               	movlb	1	; () banked
 17808  0138AE  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 17809                           
 17810                           ; BSR set to: 1
 17811                           ;Timer2.c: 48: INDEX = DIV/PRE;
 17812  0138B0  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 17813  0138B4  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 17814  0138B8  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 17815  0138BC  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 17816  0138C0  503B               	movf	Timer2_Init@PRE,w,c
 17817  0138C2  0100               	movlb	0	; () banked
 17818  0138C4  6F64               	movwf	___lldiv@divisor& (0+255),b
 17819  0138C6  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 17820  0138C8  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 17821  0138CA  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 17822  0138CC  ECF3  F0A4         	call	___lldiv	;wreg free
 17823  0138D0  0100               	movlb	0	; () banked
 17824  0138D2  5160               	movf	?___lldiv& (0+255),w,b
 17825  0138D4  0100               	movlb	0	; () banked
 17826  0138D6  6FF8               	movwf	Timer2_Init@INDEX& (0+255),b
 17827                           
 17828                           ; BSR set to: 0
 17829                           ;Timer2.c: 49: PR2 = INDEX;
 17830  0138D8  C0F8  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 17831                           
 17832                           ; BSR set to: 0
 17833  0138DC  0012               	return		;funcret
 17834  0138DE                     __end_of_Timer2_Init:
 17835                           	opt stack 0
 17836                           tosu	equ	0xFFF
 17837                           tosh	equ	0xFFE
 17838                           tosl	equ	0xFFD
 17839                           pclath	equ	0xFFA
 17840                           tblptru	equ	0xFF8
 17841                           tblptrh	equ	0xFF7
 17842                           tblptrl	equ	0xFF6
 17843                           tablat	equ	0xFF5
 17844                           prodh	equ	0xFF4
 17845                           prodl	equ	0xFF3
 17846                           intcon	equ	0xFF2
 17847                           postinc0	equ	0xFEE
 17848                           wreg	equ	0xFE8
 17849                           indf1	equ	0xFE7
 17850                           postdec1	equ	0xFE5
 17851                           fsr1h	equ	0xFE2
 17852                           fsr1l	equ	0xFE1
 17853                           indf2	equ	0xFDF
 17854                           postinc2	equ	0xFDE
 17855                           postdec2	equ	0xFDD
 17856                           plusw2	equ	0xFDB
 17857                           fsr2h	equ	0xFDA
 17858                           fsr2l	equ	0xFD9
 17859                           status	equ	0xFD8
 17860                           
 17861 ;; *************** function _Timer2_Clear *****************
 17862 ;; Defined at:
 17863 ;;		line 3 in file "Library/Timer2.c"
 17864 ;; Parameters:    Size  Location     Type
 17865 ;;		None
 17866 ;; Auto vars:     Size  Location     Type
 17867 ;;		None
 17868 ;; Return value:  Size  Location     Type
 17869 ;;                  1    wreg      void 
 17870 ;; Registers used:
 17871 ;;		None
 17872 ;; Tracked objects:
 17873 ;;		On entry : 0/0
 17874 ;;		On exit  : 0/0
 17875 ;;		Unchanged: 0/0
 17876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17881 ;;Total ram usage:        0 bytes
 17882 ;; Hardware stack levels used:    1
 17883 ;; Hardware stack levels required when called:    7
 17884 ;; This function calls:
 17885 ;;		Nothing
 17886 ;; This function is called by:
 17887 ;;		_Timer2_Init
 17888 ;; This function uses a non-reentrant model
 17889 ;;
 17890                           
 17891                           	psect	text81
 17892  016E66                     __ptext81:
 17893                           	opt stack 0
 17894  016E66                     _Timer2_Clear:
 17895                           	opt stack 18
 17896                           
 17897                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 17898                           
 17899                           ; BSR set to: 0
 17900                           ;incstack = 0
 17901  016E66  929E               	bcf	3998,1,c	;volatile
 17902                           
 17903                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 17904  016E68  929D               	bcf	3997,1,c	;volatile
 17905                           
 17906                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 17907  016E6A  929F               	bcf	3999,1,c	;volatile
 17908  016E6C  0012               	return		;funcret
 17909  016E6E                     __end_of_Timer2_Clear:
 17910                           	opt stack 0
 17911                           tosu	equ	0xFFF
 17912                           tosh	equ	0xFFE
 17913                           tosl	equ	0xFFD
 17914                           pclath	equ	0xFFA
 17915                           tblptru	equ	0xFF8
 17916                           tblptrh	equ	0xFF7
 17917                           tblptrl	equ	0xFF6
 17918                           tablat	equ	0xFF5
 17919                           prodh	equ	0xFF4
 17920                           prodl	equ	0xFF3
 17921                           intcon	equ	0xFF2
 17922                           postinc0	equ	0xFEE
 17923                           wreg	equ	0xFE8
 17924                           indf1	equ	0xFE7
 17925                           postdec1	equ	0xFE5
 17926                           fsr1h	equ	0xFE2
 17927                           fsr1l	equ	0xFE1
 17928                           indf2	equ	0xFDF
 17929                           postinc2	equ	0xFDE
 17930                           postdec2	equ	0xFDD
 17931                           plusw2	equ	0xFDB
 17932                           fsr2h	equ	0xFDA
 17933                           fsr2l	equ	0xFD9
 17934                           status	equ	0xFD8
 17935                           
 17936 ;; *************** function _SPI_DisableISR *****************
 17937 ;; Defined at:
 17938 ;;		line 181 in file "Library/SPI.c"
 17939 ;; Parameters:    Size  Location     Type
 17940 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17941 ;;		 -> SPI1(11), SPI2(11), 
 17942 ;; Auto vars:     Size  Location     Type
 17943 ;;		None
 17944 ;; Return value:  Size  Location     Type
 17945 ;;                  1    wreg      void 
 17946 ;; Registers used:
 17947 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17948 ;; Tracked objects:
 17949 ;;		On entry : 0/0
 17950 ;;		On exit  : 0/0
 17951 ;;		Unchanged: 0/0
 17952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17953 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17956 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17957 ;;Total ram usage:        2 bytes
 17958 ;; Hardware stack levels used:    1
 17959 ;; Hardware stack levels required when called:    7
 17960 ;; This function calls:
 17961 ;;		Nothing
 17962 ;; This function is called by:
 17963 ;;		_SPI_Init
 17964 ;; This function uses a non-reentrant model
 17965 ;;
 17966                           
 17967                           	psect	text82
 17968  016AD0                     __ptext82:
 17969                           	opt stack 0
 17970  016AD0                     _SPI_DisableISR:
 17971                           	opt stack 19
 17972                           
 17973                           ;SPI.c: 183: switch (pInput->mChannel)
 17974                           
 17975                           ;incstack = 0
 17976  016AD0  D004               	goto	l654
 17977  016AD2                     l655:
 17978                           
 17979                           ; BSR set to: 0
 17980  016AD2  969D               	bcf	3997,3,c	;volatile
 17981  016AD4  0012               	return	
 17982  016AD6                     l657:
 17983                           
 17984                           ; BSR set to: 0
 17985  016AD6  9EA3               	bcf	4003,7,c	;volatile
 17986                           
 17987                           ; BSR set to: 0
 17988                           ;SPI.c: 188: };
 17989                           
 17990                           ; BSR set to: 0
 17991                           
 17992                           ;SPI.c: 187: default: return;
 17993  016AD8  0012               	return	
 17994  016ADA                     l654:
 17995                           
 17996                           ; BSR set to: 0
 17997  016ADA  0100               	movlb	0	; () banked
 17998  016ADC  EE20 F002          	lfsr	2,2
 17999  016AE0  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 18000  016AE2  26D9               	addwf	fsr2l,f,c
 18001  016AE4  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 18002  016AE6  22DA               	addwfc	fsr2h,f,c
 18003  016AE8  50DF               	movf	indf2,w,c
 18004                           
 18005                           ; Switch size 1, requested type "space"
 18006                           ; Number of cases is 2, Range of values is 0 to 1
 18007                           ; switch strategies available:
 18008                           ; Name         Instructions Cycles
 18009                           ; simple_byte            7     4 (average)
 18010                           ;	Chosen strategy is simple_byte
 18011  016AEA  0A00               	xorlw	0	; case 0
 18012  016AEC  B4D8               	btfsc	status,2,c
 18013  016AEE  D7F1               	goto	l655
 18014  016AF0  0A01               	xorlw	1	; case 1
 18015  016AF2  A4D8               	btfss	status,2,c
 18016  016AF4  0012               	return	
 18017  016AF6  D7EF               	goto	l657
 18018  016AF8                     __end_of_SPI_DisableISR:
 18019                           	opt stack 0
 18020                           tosu	equ	0xFFF
 18021                           tosh	equ	0xFFE
 18022                           tosl	equ	0xFFD
 18023                           pclath	equ	0xFFA
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           postinc0	equ	0xFEE
 18032                           wreg	equ	0xFE8
 18033                           indf1	equ	0xFE7
 18034                           postdec1	equ	0xFE5
 18035                           fsr1h	equ	0xFE2
 18036                           fsr1l	equ	0xFE1
 18037                           indf2	equ	0xFDF
 18038                           postinc2	equ	0xFDE
 18039                           postdec2	equ	0xFDD
 18040                           plusw2	equ	0xFDB
 18041                           fsr2h	equ	0xFDA
 18042                           fsr2l	equ	0xFD9
 18043                           status	equ	0xFD8
 18044                           
 18045 ;; *************** function _SPI_DCS *****************
 18046 ;; Defined at:
 18047 ;;		line 219 in file "Library/SPI.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18050 ;;		 -> SPI1(11), SPI2(11), 
 18051 ;; Auto vars:     Size  Location     Type
 18052 ;;		None
 18053 ;; Return value:  Size  Location     Type
 18054 ;;                  1    wreg      void 
 18055 ;; Registers used:
 18056 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18057 ;; Tracked objects:
 18058 ;;		On entry : 0/0
 18059 ;;		On exit  : 0/0
 18060 ;;		Unchanged: 0/0
 18061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18062 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18065 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18066 ;;Total ram usage:        2 bytes
 18067 ;; Hardware stack levels used:    1
 18068 ;; Hardware stack levels required when called:    7
 18069 ;; This function calls:
 18070 ;;		Nothing
 18071 ;; This function is called by:
 18072 ;;		_SPI_Init
 18073 ;; This function uses a non-reentrant model
 18074 ;;
 18075                           
 18076                           	psect	text83
 18077  0169C0                     __ptext83:
 18078                           	opt stack 0
 18079  0169C0                     _SPI_DCS:
 18080                           	opt stack 19
 18081                           
 18082                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 18083                           
 18084                           ; BSR set to: 0
 18085                           ;incstack = 0
 18086  0169C0  0100               	movlb	0	; () banked
 18087  0169C2  EE20 F002          	lfsr	2,2
 18088  0169C6  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 18089  0169C8  26D9               	addwf	fsr2l,f,c
 18090  0169CA  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 18091  0169CC  22DA               	addwfc	fsr2h,f,c
 18092  0169CE  50DF               	movf	indf2,w,c
 18093  0169D0  A4D8               	btfss	status,2,c
 18094  0169D2  D007               	goto	l673
 18095                           
 18096                           ; BSR set to: 0
 18097                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 18098  0169D4  C1AC  FFD9         	movff	_PortC+4,fsr2l
 18099  0169D8  C1AD  FFDA         	movff	_PortC+5,fsr2h
 18100  0169DC  0101               	movlb	1	; () banked
 18101  0169DE  84DF               	bsf	indf2,2,c
 18102  0169E0  0012               	return	
 18103  0169E2                     l673:
 18104                           
 18105                           ;SPI.c: 223: else
 18106                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 18107                           
 18108                           ; BSR set to: 1
 18109  0169E2  C198  FFD9         	movff	_PortD+4,fsr2l
 18110  0169E6  C199  FFDA         	movff	_PortD+5,fsr2h
 18111  0169EA  0101               	movlb	1	; () banked
 18112  0169EC  8EDF               	bsf	indf2,7,c
 18113  0169EE  0012               	return	
 18114  0169F0                     __end_of_SPI_DCS:
 18115                           	opt stack 0
 18116                           tosu	equ	0xFFF
 18117                           tosh	equ	0xFFE
 18118                           tosl	equ	0xFFD
 18119                           pclath	equ	0xFFA
 18120                           tblptru	equ	0xFF8
 18121                           tblptrh	equ	0xFF7
 18122                           tblptrl	equ	0xFF6
 18123                           tablat	equ	0xFF5
 18124                           prodh	equ	0xFF4
 18125                           prodl	equ	0xFF3
 18126                           intcon	equ	0xFF2
 18127                           postinc0	equ	0xFEE
 18128                           wreg	equ	0xFE8
 18129                           indf1	equ	0xFE7
 18130                           postdec1	equ	0xFE5
 18131                           fsr1h	equ	0xFE2
 18132                           fsr1l	equ	0xFE1
 18133                           indf2	equ	0xFDF
 18134                           postinc2	equ	0xFDE
 18135                           postdec2	equ	0xFDD
 18136                           plusw2	equ	0xFDB
 18137                           fsr2h	equ	0xFDA
 18138                           fsr2l	equ	0xFD9
 18139                           status	equ	0xFD8
 18140                           
 18141 ;; *************** function _FunctInitButton *****************
 18142 ;; Defined at:
 18143 ;;		line 16 in file "Functions.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;		None
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;		None
 18148 ;; Return value:  Size  Location     Type
 18149 ;;                  1    wreg      void 
 18150 ;; Registers used:
 18151 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18161 ;;Total ram usage:        0 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:   16
 18164 ;; This function calls:
 18165 ;;		_Button_Init
 18166 ;; This function is called by:
 18167 ;;		_initialise
 18168 ;; This function uses a non-reentrant model
 18169 ;;
 18170                           
 18171                           	psect	text84
 18172  015210                     __ptext84:
 18173                           	opt stack 0
 18174  015210                     _FunctInitButton:
 18175                           	opt stack 13
 18176                           
 18177                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 18178                           
 18179                           ; BSR set to: 1
 18180                           ;incstack = 0
 18181  015210  0E6E               	movlw	low _TestButton
 18182  015212  0100               	movlb	0	; () banked
 18183  015214  6F9B               	movwf	Button_Init@pInput& (0+255),b
 18184  015216  0E02               	movlw	high _TestButton
 18185  015218  0100               	movlb	0	; () banked
 18186  01521A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 18187  01521C  0E00               	movlw	0
 18188  01521E  0100               	movlb	0	; () banked
 18189  015220  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18190  015222  0E02               	movlw	2
 18191  015224  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 18192  015226  0E24               	movlw	low _MXK_InitTestButton
 18193  015228  0100               	movlb	0	; () banked
 18194  01522A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 18195  01522C  0E6C               	movlw	high _MXK_InitTestButton
 18196  01522E  0100               	movlb	0	; () banked
 18197  015230  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18198  015232  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 18199  015234  0100               	movlb	0	; () banked
 18200  015236  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18201  015238  0E7E               	movlw	low _MXK_TestButton
 18202  01523A  0100               	movlb	0	; () banked
 18203  01523C  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 18204  01523E  0E6D               	movlw	high _MXK_TestButton
 18205  015240  0100               	movlb	0	; () banked
 18206  015242  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18207  015244  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 18208  015246  0100               	movlb	0	; () banked
 18209  015248  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18210  01524A  0EE0               	movlw	low _Event_TestButton
 18211  01524C  0100               	movlb	0	; () banked
 18212  01524E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 18213  015250  0E67               	movlw	high _Event_TestButton
 18214  015252  0100               	movlb	0	; () banked
 18215  015254  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18216  015256  0E01               	movlw	low (_Event_TestButton shr (0+16))
 18217  015258  0100               	movlb	0	; () banked
 18218  01525A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18219  01525C  EC3B  F0A2         	call	_Button_Init	;wreg free
 18220                           
 18221                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 18222  015260  0E64               	movlw	low _DIPSwitch
 18223  015262  0100               	movlb	0	; () banked
 18224  015264  6F9B               	movwf	Button_Init@pInput& (0+255),b
 18225  015266  0E02               	movlw	high _DIPSwitch
 18226  015268  0100               	movlb	0	; () banked
 18227  01526A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 18228  01526C  0E00               	movlw	0
 18229  01526E  0100               	movlb	0	; () banked
 18230  015270  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18231  015272  0E02               	movlw	2
 18232  015274  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 18233  015276  0E06               	movlw	low _MXK_InitDIPSwitch
 18234  015278  0100               	movlb	0	; () banked
 18235  01527A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 18236  01527C  0E6C               	movlw	high _MXK_InitDIPSwitch
 18237  01527E  0100               	movlb	0	; () banked
 18238  015280  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18239  015282  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 18240  015284  0100               	movlb	0	; () banked
 18241  015286  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18242  015288  0EEE               	movlw	low _MXK_DIPSwitch
 18243  01528A  0100               	movlb	0	; () banked
 18244  01528C  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 18245  01528E  0E6C               	movlw	high _MXK_DIPSwitch
 18246  015290  0100               	movlb	0	; () banked
 18247  015292  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18248  015294  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 18249  015296  0100               	movlb	0	; () banked
 18250  015298  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18251  01529A  0E20               	movlw	low _Event_DIPSwitch
 18252  01529C  0100               	movlb	0	; () banked
 18253  01529E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 18254  0152A0  0E6A               	movlw	high _Event_DIPSwitch
 18255  0152A2  0100               	movlb	0	; () banked
 18256  0152A4  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18257  0152A6  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 18258  0152A8  0100               	movlb	0	; () banked
 18259  0152AA  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18260  0152AC  EC3B  F0A2         	call	_Button_Init	;wreg free
 18261  0152B0  0012               	return		;funcret
 18262  0152B2                     __end_of_FunctInitButton:
 18263                           	opt stack 0
 18264                           tosu	equ	0xFFF
 18265                           tosh	equ	0xFFE
 18266                           tosl	equ	0xFFD
 18267                           pclath	equ	0xFFA
 18268                           tblptru	equ	0xFF8
 18269                           tblptrh	equ	0xFF7
 18270                           tblptrl	equ	0xFF6
 18271                           tablat	equ	0xFF5
 18272                           prodh	equ	0xFF4
 18273                           prodl	equ	0xFF3
 18274                           intcon	equ	0xFF2
 18275                           postinc0	equ	0xFEE
 18276                           wreg	equ	0xFE8
 18277                           indf1	equ	0xFE7
 18278                           postdec1	equ	0xFE5
 18279                           fsr1h	equ	0xFE2
 18280                           fsr1l	equ	0xFE1
 18281                           indf2	equ	0xFDF
 18282                           postinc2	equ	0xFDE
 18283                           postdec2	equ	0xFDD
 18284                           plusw2	equ	0xFDB
 18285                           fsr2h	equ	0xFDA
 18286                           fsr2l	equ	0xFD9
 18287                           status	equ	0xFD8
 18288                           
 18289 ;; *************** function _Button_Init *****************
 18290 ;; Defined at:
 18291 ;;		line 18 in file "Library/Button.c"
 18292 ;; Parameters:    Size  Location     Type
 18293 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 18294 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 18295 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 18296 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 18297 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 18298 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 18299 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 18300 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 18301 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 18302 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 18303 ;; Auto vars:     Size  Location     Type
 18304 ;;		None
 18305 ;; Return value:  Size  Location     Type
 18306 ;;                  1    wreg      void 
 18307 ;; Registers used:
 18308 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18309 ;; Tracked objects:
 18310 ;;		On entry : 0/0
 18311 ;;		On exit  : 0/0
 18312 ;;		Unchanged: 0/0
 18313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18314 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18317 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18318 ;;Total ram usage:       13 bytes
 18319 ;; Hardware stack levels used:    1
 18320 ;; Hardware stack levels required when called:   15
 18321 ;; This function calls:
 18322 ;;		_HMI_InitButtons
 18323 ;;		_MXK_InitDIPSwitch
 18324 ;;		_MXK_InitTestButton
 18325 ;; This function is called by:
 18326 ;;		_HMI_Init
 18327 ;;		_FunctInitButton
 18328 ;; This function uses a non-reentrant model
 18329 ;;
 18330                           
 18331                           	psect	text85
 18332  014476                     __ptext85:
 18333                           	opt stack 0
 18334  014476                     _Button_Init:
 18335                           	opt stack 13
 18336                           
 18337                           ;Button.c: 21: if(pInput==(void*)0)
 18338                           
 18339                           ;incstack = 0
 18340  014476  0100               	movlb	0	; () banked
 18341  014478  519B               	movf	Button_Init@pInput& (0+255),w,b
 18342  01447A  0100               	movlb	0	; () banked
 18343  01447C  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 18344  01447E  B4D8               	btfsc	status,2,c
 18345  014480  0012               	return	
 18346                           
 18347                           ; BSR set to: 0
 18348                           ;Button.c: 23: if(pInitIO==(void*)0)
 18349                           
 18350                           ; BSR set to: 0
 18351                           
 18352                           ; BSR set to: 0
 18353                           ;Button.c: 22: return;
 18354  014482  0100               	movlb	0	; () banked
 18355  014484  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 18356  014486  0100               	movlb	0	; () banked
 18357  014488  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 18358  01448A  0100               	movlb	0	; () banked
 18359  01448C  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 18360  01448E  B4D8               	btfsc	status,2,c
 18361  014490  0012               	return	
 18362                           
 18363                           ; BSR set to: 0
 18364                           ;Button.c: 25: if(pGetState==(void*)0)
 18365                           
 18366                           ; BSR set to: 0
 18367                           
 18368                           ; BSR set to: 0
 18369                           ;Button.c: 24: return;
 18370  014492  0100               	movlb	0	; () banked
 18371  014494  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 18372  014496  0100               	movlb	0	; () banked
 18373  014498  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 18374  01449A  0100               	movlb	0	; () banked
 18375  01449C  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 18376  01449E  B4D8               	btfsc	status,2,c
 18377  0144A0  0012               	return	
 18378                           
 18379                           ; BSR set to: 0
 18380                           ;Button.c: 27: if(pFunction==(void*)0)
 18381                           
 18382                           ; BSR set to: 0
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;Button.c: 26: return;
 18386  0144A2  0100               	movlb	0	; () banked
 18387  0144A4  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 18388  0144A6  0100               	movlb	0	; () banked
 18389  0144A8  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 18390  0144AA  0100               	movlb	0	; () banked
 18391  0144AC  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 18392  0144AE  B4D8               	btfsc	status,2,c
 18393  0144B0  0012               	return	
 18394                           
 18395                           ; BSR set to: 0
 18396                           ;Button.c: 30: if(pThreshold == 0)
 18397                           
 18398                           ; BSR set to: 0
 18399                           
 18400                           ; BSR set to: 0
 18401                           ;Button.c: 28: return;
 18402  0144B2  0100               	movlb	0	; () banked
 18403  0144B4  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 18404  0144B6  0100               	movlb	0	; () banked
 18405  0144B8  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 18406  0144BA  A4D8               	btfss	status,2,c
 18407  0144BC  D005               	goto	l8
 18408                           
 18409                           ; BSR set to: 0
 18410                           ;Button.c: 31: pThreshold = 1;
 18411  0144BE  0E00               	movlw	0
 18412  0144C0  0100               	movlb	0	; () banked
 18413  0144C2  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18414  0144C4  0E01               	movlw	1
 18415  0144C6  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 18416  0144C8                     l8:
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;Button.c: 34: pInput->mState = 0;
 18420                           
 18421                           ; BSR set to: 0
 18422  0144C8  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 18423  0144CC  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 18424  0144D0  0E00               	movlw	0
 18425  0144D2  6EDF               	movwf	indf2,c
 18426                           
 18427                           ; BSR set to: 0
 18428                           ;Button.c: 35: pInput->mCount = 0;
 18429  0144D4  0100               	movlb	0	; () banked
 18430  0144D6  EE20 F001          	lfsr	2,1
 18431  0144DA  519B               	movf	Button_Init@pInput& (0+255),w,b
 18432  0144DC  26D9               	addwf	fsr2l,f,c
 18433  0144DE  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18434  0144E0  22DA               	addwfc	fsr2h,f,c
 18435  0144E2  0E00               	movlw	0
 18436  0144E4  6EDF               	movwf	indf2,c
 18437                           
 18438                           ; BSR set to: 0
 18439                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 18440  0144E6  0100               	movlb	0	; () banked
 18441  0144E8  EE20 F002          	lfsr	2,2
 18442  0144EC  519B               	movf	Button_Init@pInput& (0+255),w,b
 18443  0144EE  26D9               	addwf	fsr2l,f,c
 18444  0144F0  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18445  0144F2  22DA               	addwfc	fsr2h,f,c
 18446  0144F4  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 18447  0144F8  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 18448                           
 18449                           ; BSR set to: 0
 18450                           ;Button.c: 37: pInput->mFunction = pFunction;
 18451  0144FC  0100               	movlb	0	; () banked
 18452  0144FE  EE20 F004          	lfsr	2,4
 18453  014502  519B               	movf	Button_Init@pInput& (0+255),w,b
 18454  014504  26D9               	addwf	fsr2l,f,c
 18455  014506  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18456  014508  22DA               	addwfc	fsr2h,f,c
 18457  01450A  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 18458  01450E  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 18459  014512  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 18460                           
 18461                           ; BSR set to: 0
 18462                           ;Button.c: 38: pInput->mGetState = pGetState;
 18463  014516  0100               	movlb	0	; () banked
 18464  014518  EE20 F007          	lfsr	2,7
 18465  01451C  519B               	movf	Button_Init@pInput& (0+255),w,b
 18466  01451E  26D9               	addwf	fsr2l,f,c
 18467  014520  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18468  014522  22DA               	addwfc	fsr2h,f,c
 18469  014524  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 18470  014528  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 18471  01452C  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 18472                           
 18473                           ; BSR set to: 0
 18474                           ;Button.c: 41: pInitIO();
 18475  014530  D801               	call	u11168
 18476  014532  0012               	return	
 18477  014534                     u11168:
 18478  014534  0005               	push	
 18479  014536  6EFA               	movwf	pclath,c
 18480  014538  0100               	movlb	0	; () banked
 18481  01453A  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 18482  01453C  6EFD               	movwf	tosl,c
 18483  01453E  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 18484  014540  6EFE               	movwf	tosh,c
 18485  014542  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 18486  014544  6EFF               	movwf	tosu,c
 18487  014546  50FA               	movf	pclath,w,c
 18488  014548  0012               	return		;indir
 18489  01454A                     __end_of_Button_Init:
 18490                           	opt stack 0
 18491                           tosu	equ	0xFFF
 18492                           tosh	equ	0xFFE
 18493                           tosl	equ	0xFFD
 18494                           pclath	equ	0xFFA
 18495                           tblptru	equ	0xFF8
 18496                           tblptrh	equ	0xFF7
 18497                           tblptrl	equ	0xFF6
 18498                           tablat	equ	0xFF5
 18499                           prodh	equ	0xFF4
 18500                           prodl	equ	0xFF3
 18501                           intcon	equ	0xFF2
 18502                           postinc0	equ	0xFEE
 18503                           wreg	equ	0xFE8
 18504                           indf1	equ	0xFE7
 18505                           postdec1	equ	0xFE5
 18506                           fsr1h	equ	0xFE2
 18507                           fsr1l	equ	0xFE1
 18508                           indf2	equ	0xFDF
 18509                           postinc2	equ	0xFDE
 18510                           postdec2	equ	0xFDD
 18511                           plusw2	equ	0xFDB
 18512                           fsr2h	equ	0xFDA
 18513                           fsr2l	equ	0xFD9
 18514                           status	equ	0xFD8
 18515                           
 18516 ;; *************** function _MXK_InitDIPSwitch *****************
 18517 ;; Defined at:
 18518 ;;		line 20 in file "Library/MXK.c"
 18519 ;; Parameters:    Size  Location     Type
 18520 ;;		None
 18521 ;; Auto vars:     Size  Location     Type
 18522 ;;		None
 18523 ;; Return value:  Size  Location     Type
 18524 ;;                  1    wreg      void 
 18525 ;; Registers used:
 18526 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18527 ;; Tracked objects:
 18528 ;;		On entry : 0/0
 18529 ;;		On exit  : 0/0
 18530 ;;		Unchanged: 0/0
 18531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18533 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18535 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18536 ;;Total ram usage:        0 bytes
 18537 ;; Hardware stack levels used:    1
 18538 ;; Hardware stack levels required when called:   14
 18539 ;; This function calls:
 18540 ;;		_Port_SetQuadType
 18541 ;; This function is called by:
 18542 ;;		_FunctInitButton
 18543 ;;		_Button_Init
 18544 ;; This function uses a non-reentrant model
 18545 ;;
 18546                           
 18547                           	psect	text86
 18548  016C06                     __ptext86:
 18549                           	opt stack 0
 18550  016C06                     _MXK_InitDIPSwitch:
 18551                           	opt stack 13
 18552                           
 18553                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 18554                           
 18555                           ;incstack = 0
 18556  016C06  0E94               	movlw	low _PortD
 18557  016C08  0100               	movlb	0	; () banked
 18558  016C0A  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 18559  016C0C  0E01               	movlw	high _PortD
 18560  016C0E  0100               	movlb	0	; () banked
 18561  016C10  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 18562  016C12  0E00               	movlw	0
 18563  016C14  0100               	movlb	0	; () banked
 18564  016C16  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 18565  016C18  0E00               	movlw	0
 18566  016C1A  0100               	movlb	0	; () banked
 18567  016C1C  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 18568  016C1E  EC02  F08D         	call	_Port_SetQuadType	;wreg free
 18569  016C22  0012               	return		;funcret
 18570  016C24                     __end_of_MXK_InitDIPSwitch:
 18571                           	opt stack 0
 18572                           tosu	equ	0xFFF
 18573                           tosh	equ	0xFFE
 18574                           tosl	equ	0xFFD
 18575                           pclath	equ	0xFFA
 18576                           tblptru	equ	0xFF8
 18577                           tblptrh	equ	0xFF7
 18578                           tblptrl	equ	0xFF6
 18579                           tablat	equ	0xFF5
 18580                           prodh	equ	0xFF4
 18581                           prodl	equ	0xFF3
 18582                           intcon	equ	0xFF2
 18583                           postinc0	equ	0xFEE
 18584                           wreg	equ	0xFE8
 18585                           indf1	equ	0xFE7
 18586                           postdec1	equ	0xFE5
 18587                           fsr1h	equ	0xFE2
 18588                           fsr1l	equ	0xFE1
 18589                           indf2	equ	0xFDF
 18590                           postinc2	equ	0xFDE
 18591                           postdec2	equ	0xFDD
 18592                           plusw2	equ	0xFDB
 18593                           fsr2h	equ	0xFDA
 18594                           fsr2l	equ	0xFD9
 18595                           status	equ	0xFD8
 18596                           
 18597 ;; *************** function _HMI_InitButtons *****************
 18598 ;; Defined at:
 18599 ;;		line 21 in file "HMI.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;		None
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;		None
 18604 ;; Return value:  Size  Location     Type
 18605 ;;                  1    wreg      void 
 18606 ;; Registers used:
 18607 ;;		wreg, status,2
 18608 ;; Tracked objects:
 18609 ;;		On entry : 0/0
 18610 ;;		On exit  : 0/0
 18611 ;;		Unchanged: 0/0
 18612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18617 ;;Total ram usage:        0 bytes
 18618 ;; Hardware stack levels used:    1
 18619 ;; Hardware stack levels required when called:    7
 18620 ;; This function calls:
 18621 ;;		Nothing
 18622 ;; This function is called by:
 18623 ;;		_HMI_Init
 18624 ;;		_Button_Init
 18625 ;; This function uses a non-reentrant model
 18626 ;;
 18627                           
 18628                           	psect	text87
 18629  016E82                     __ptext87:
 18630                           	opt stack 0
 18631  016E82                     _HMI_InitButtons:
 18632                           	opt stack 20
 18633                           
 18634                           ;HMI.c: 23: TRISE = 0xFC;
 18635                           
 18636                           ;incstack = 0
 18637  016E82  0EFC               	movlw	252
 18638  016E84  6E96               	movwf	3990,c	;volatile
 18639  016E86  0012               	return		;funcret
 18640  016E88                     __end_of_HMI_InitButtons:
 18641                           	opt stack 0
 18642                           tosu	equ	0xFFF
 18643                           tosh	equ	0xFFE
 18644                           tosl	equ	0xFFD
 18645                           pclath	equ	0xFFA
 18646                           tblptru	equ	0xFF8
 18647                           tblptrh	equ	0xFF7
 18648                           tblptrl	equ	0xFF6
 18649                           tablat	equ	0xFF5
 18650                           prodh	equ	0xFF4
 18651                           prodl	equ	0xFF3
 18652                           intcon	equ	0xFF2
 18653                           postinc0	equ	0xFEE
 18654                           wreg	equ	0xFE8
 18655                           indf1	equ	0xFE7
 18656                           postdec1	equ	0xFE5
 18657                           fsr1h	equ	0xFE2
 18658                           fsr1l	equ	0xFE1
 18659                           indf2	equ	0xFDF
 18660                           postinc2	equ	0xFDE
 18661                           postdec2	equ	0xFDD
 18662                           plusw2	equ	0xFDB
 18663                           fsr2h	equ	0xFDA
 18664                           fsr2l	equ	0xFD9
 18665                           status	equ	0xFD8
 18666                           
 18667 ;; *************** function _MXK_InitTestButton *****************
 18668 ;; Defined at:
 18669 ;;		line 10 in file "Library/MXK.c"
 18670 ;; Parameters:    Size  Location     Type
 18671 ;;		None
 18672 ;; Auto vars:     Size  Location     Type
 18673 ;;		None
 18674 ;; Return value:  Size  Location     Type
 18675 ;;                  1    wreg      void 
 18676 ;; Registers used:
 18677 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18678 ;; Tracked objects:
 18679 ;;		On entry : 0/0
 18680 ;;		On exit  : 0/0
 18681 ;;		Unchanged: 0/0
 18682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18687 ;;Total ram usage:        0 bytes
 18688 ;; Hardware stack levels used:    1
 18689 ;; Hardware stack levels required when called:   12
 18690 ;; This function calls:
 18691 ;;		_Port_SetPinType
 18692 ;; This function is called by:
 18693 ;;		_FunctInitButton
 18694 ;;		_Button_Init
 18695 ;; This function uses a non-reentrant model
 18696 ;;
 18697                           
 18698                           	psect	text88
 18699  016C24                     __ptext88:
 18700                           	opt stack 0
 18701  016C24                     _MXK_InitTestButton:
 18702                           	opt stack 15
 18703                           
 18704                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 18705                           
 18706                           ;incstack = 0
 18707  016C24  0E9E               	movlw	low _PortB
 18708  016C26  0100               	movlb	0	; () banked
 18709  016C28  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 18710  016C2A  0E01               	movlw	high _PortB
 18711  016C2C  0100               	movlb	0	; () banked
 18712  016C2E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18713  016C30  0E04               	movlw	4
 18714  016C32  0100               	movlb	0	; () banked
 18715  016C34  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 18716  016C36  0E00               	movlw	0
 18717  016C38  0100               	movlb	0	; () banked
 18718  016C3A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 18719  016C3C  EC2D  F093         	call	_Port_SetPinType	;wreg free
 18720  016C40  0012               	return		;funcret
 18721  016C42                     __end_of_MXK_InitTestButton:
 18722                           	opt stack 0
 18723                           tosu	equ	0xFFF
 18724                           tosh	equ	0xFFE
 18725                           tosl	equ	0xFFD
 18726                           pclath	equ	0xFFA
 18727                           tblptru	equ	0xFF8
 18728                           tblptrh	equ	0xFF7
 18729                           tblptrl	equ	0xFF6
 18730                           tablat	equ	0xFF5
 18731                           prodh	equ	0xFF4
 18732                           prodl	equ	0xFF3
 18733                           intcon	equ	0xFF2
 18734                           postinc0	equ	0xFEE
 18735                           wreg	equ	0xFE8
 18736                           indf1	equ	0xFE7
 18737                           postdec1	equ	0xFE5
 18738                           fsr1h	equ	0xFE2
 18739                           fsr1l	equ	0xFE1
 18740                           indf2	equ	0xFDF
 18741                           postinc2	equ	0xFDE
 18742                           postdec2	equ	0xFDD
 18743                           plusw2	equ	0xFDB
 18744                           fsr2h	equ	0xFDA
 18745                           fsr2l	equ	0xFD9
 18746                           status	equ	0xFD8
 18747                           
 18748 ;; *************** function _Port_SetPinType *****************
 18749 ;; Defined at:
 18750 ;;		line 189 in file "Library/Port.c"
 18751 ;; Parameters:    Size  Location     Type
 18752 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18753 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18754 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18755 ;;  pPin            1   40[BANK0 ] enum E6750
 18756 ;;  pType           1   41[BANK0 ] enum E6795
 18757 ;; Auto vars:     Size  Location     Type
 18758 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 18759 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 18760 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 18761 ;;  Output          1   42[BANK0 ] enum E6475
 18762 ;; Return value:  Size  Location     Type
 18763 ;;                  1    wreg      enum E6475
 18764 ;; Registers used:
 18765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18766 ;; Tracked objects:
 18767 ;;		On entry : 0/0
 18768 ;;		On exit  : 0/0
 18769 ;;		Unchanged: 0/0
 18770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18771 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18772 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18774 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18775 ;;Total ram usage:        7 bytes
 18776 ;; Hardware stack levels used:    1
 18777 ;; Hardware stack levels required when called:   11
 18778 ;; This function calls:
 18779 ;;		_Byte_SetBit
 18780 ;;		_PortProperty_Valid
 18781 ;;		_Word_SetPair
 18782 ;; This function is called by:
 18783 ;;		_Configure_GPIOs
 18784 ;;		_LED_Init
 18785 ;;		_Port_Init
 18786 ;;		_SPI_Init
 18787 ;;		_Motor_Init
 18788 ;;		_MXK_InitTestButton
 18789 ;;		_MXK_Init
 18790 ;;		_I2C_Init
 18791 ;; This function uses a non-reentrant model
 18792 ;;
 18793                           
 18794                           	psect	text89
 18795  01265A                     __ptext89:
 18796                           	opt stack 0
 18797  01265A                     _Port_SetPinType:
 18798                           	opt stack 17
 18799                           
 18800                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 18801                           
 18802                           ;incstack = 0
 18803  01265A  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 18804  01265E  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 18805  012662  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 18806  012666  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 18807                           
 18808                           ;Port.c: 192: ePinError Output = ePinErrorState;
 18809  01266A  0E05               	movlw	5
 18810  01266C  0100               	movlb	0	; () banked
 18811  01266E  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 18812                           
 18813                           ;Port.c: 193: switch (pType)
 18814  012670  D0B5               	goto	l412
 18815  012672                     
 18816                           ; BSR set to: 0
 18817                           ;Port.c: 197: {
 18818                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 18819                           
 18820                           ; BSR set to: 0
 18821  012672  0100               	movlb	0	; () banked
 18822  012674  EE20 F002          	lfsr	2,2
 18823  012678  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 18824  01267A  26D9               	addwf	fsr2l,f,c
 18825  01267C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18826  01267E  22DA               	addwfc	fsr2h,f,c
 18827  012680  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18828  012684  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18829  012688  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18830  01268C  0E01               	movlw	1
 18831  01268E  0100               	movlb	0	; () banked
 18832  012690  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18833  012692  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 18834                           
 18835                           ;Port.c: 203: break;
 18836  012696  D0B0               	goto	l414
 18837  012698                     
 18838                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 18839  012698  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18840  01269C  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18841  0126A0  0E01               	movlw	1
 18842  0126A2  0100               	movlb	0	; () banked
 18843  0126A4  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18844  0126A6  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18845  0126AA  EC25  F0AC         	call	_PortProperty_Valid	;wreg free
 18846  0126AE  0100               	movlb	0	; () banked
 18847  0126B0  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 18848  0126B2  0100               	movlb	0	; () banked
 18849  0126B4  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 18850  0126B6  A4D8               	btfss	status,2,c
 18851  0126B8  0012               	return	
 18852                           
 18853                           ; BSR set to: 0
 18854                           ;Port.c: 208: {
 18855                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 18856  0126BA  0100               	movlb	0	; () banked
 18857  0126BC  EE20 F002          	lfsr	2,2
 18858  0126C0  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 18859  0126C2  26D9               	addwf	fsr2l,f,c
 18860  0126C4  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18861  0126C6  22DA               	addwfc	fsr2h,f,c
 18862  0126C8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18863  0126CC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18864  0126D0  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18865  0126D4  0E00               	movlw	0
 18866  0126D6  0100               	movlb	0	; () banked
 18867  0126D8  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18868  0126DA  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 18869                           
 18870                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 18871  0126DE  0100               	movlb	0	; () banked
 18872  0126E0  EE20 F004          	lfsr	2,4
 18873  0126E4  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 18874  0126E6  26D9               	addwf	fsr2l,f,c
 18875  0126E8  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18876  0126EA  22DA               	addwfc	fsr2h,f,c
 18877  0126EC  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18878  0126F0  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18879  0126F4  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18880  0126F8  0E00               	movlw	0
 18881  0126FA  0100               	movlb	0	; () banked
 18882  0126FC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18883  0126FE  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 18884                           
 18885                           ;Port.c: 214: break;
 18886  012702  D07A               	goto	l414
 18887  012704                     
 18888                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 18889                           
 18890                           ;Port.c: 218: case eTypeOutputOpenSource:
 18891  012704  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18892  012708  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18893  01270C  0E02               	movlw	2
 18894  01270E  0100               	movlb	0	; () banked
 18895  012710  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18896  012712  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18897  012716  EC25  F0AC         	call	_PortProperty_Valid	;wreg free
 18898  01271A  0100               	movlb	0	; () banked
 18899  01271C  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 18900  01271E  0100               	movlb	0	; () banked
 18901  012720  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 18902  012722  A4D8               	btfss	status,2,c
 18903  012724  0012               	return	
 18904                           
 18905                           ; BSR set to: 0
 18906                           ;Port.c: 220: {
 18907                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 18908  012726  0100               	movlb	0	; () banked
 18909  012728  EE20 F002          	lfsr	2,2
 18910  01272C  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 18911  01272E  26D9               	addwf	fsr2l,f,c
 18912  012730  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18913  012732  22DA               	addwfc	fsr2h,f,c
 18914  012734  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18915  012738  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18916  01273C  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18917  012740  0E01               	movlw	1
 18918  012742  0100               	movlb	0	; () banked
 18919  012744  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18920  012746  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 18921                           
 18922                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 18923  01274A  0100               	movlb	0	; () banked
 18924  01274C  EE20 F004          	lfsr	2,4
 18925  012750  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 18926  012752  26D9               	addwf	fsr2l,f,c
 18927  012754  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18928  012756  22DA               	addwfc	fsr2h,f,c
 18929  012758  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18930  01275C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18931  012760  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18932  012764  0E01               	movlw	1
 18933  012766  0100               	movlb	0	; () banked
 18934  012768  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18935  01276A  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 18936                           
 18937                           ;Port.c: 226: break;
 18938  01276E  D044               	goto	l414
 18939  012770                     
 18940                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 18941                           
 18942                           ;Port.c: 230: case eTypeOutputPushPull:
 18943  012770  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18944  012774  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18945  012778  0E00               	movlw	0
 18946  01277A  0100               	movlb	0	; () banked
 18947  01277C  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18948  01277E  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18949  012782  EC25  F0AC         	call	_PortProperty_Valid	;wreg free
 18950  012786  0100               	movlb	0	; () banked
 18951  012788  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 18952  01278A  0100               	movlb	0	; () banked
 18953  01278C  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 18954  01278E  A4D8               	btfss	status,2,c
 18955  012790  0012               	return	
 18956                           
 18957                           ; BSR set to: 0
 18958                           ;Port.c: 232: {
 18959                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 18960  012792  0100               	movlb	0	; () banked
 18961  012794  EE20 F002          	lfsr	2,2
 18962  012798  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 18963  01279A  26D9               	addwf	fsr2l,f,c
 18964  01279C  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18965  01279E  22DA               	addwfc	fsr2h,f,c
 18966  0127A0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18967  0127A4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18968  0127A8  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18969  0127AC  0E00               	movlw	0
 18970  0127AE  0100               	movlb	0	; () banked
 18971  0127B0  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18972  0127B2  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 18973                           
 18974                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 18975  0127B6  0100               	movlb	0	; () banked
 18976  0127B8  EE20 F004          	lfsr	2,4
 18977  0127BC  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 18978  0127BE  26D9               	addwf	fsr2l,f,c
 18979  0127C0  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18980  0127C2  22DA               	addwfc	fsr2h,f,c
 18981  0127C4  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18982  0127C8  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18983  0127CC  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18984  0127D0  0E00               	movlw	0
 18985  0127D2  0100               	movlb	0	; () banked
 18986  0127D4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 18987  0127D6  ECED  F0AF         	call	_Byte_SetBit	;wreg free
 18988                           
 18989                           ;Port.c: 239: }
 18990                           
 18991                           ;Port.c: 238: break;
 18992  0127DA  D00E               	goto	l414
 18993  0127DC                     l412:
 18994  0127DC  0100               	movlb	0	; () banked
 18995  0127DE  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 18996                           
 18997                           ; Switch size 1, requested type "space"
 18998                           ; Number of cases is 4, Range of values is 0 to 3
 18999                           ; switch strategies available:
 19000                           ; Name         Instructions Cycles
 19001                           ; simple_byte           13     7 (average)
 19002                           ;	Chosen strategy is simple_byte
 19003  0127E0  0A00               	xorlw	0	; case 0
 19004  0127E2  B4D8               	btfsc	status,2,c
 19005  0127E4  D746               	goto	l413
 19006  0127E6  0A01               	xorlw	1	; case 1
 19007  0127E8  B4D8               	btfsc	status,2,c
 19008  0127EA  D756               	goto	l415
 19009  0127EC  0A03               	xorlw	3	; case 2
 19010  0127EE  B4D8               	btfsc	status,2,c
 19011  0127F0  D789               	goto	l417
 19012  0127F2  0A01               	xorlw	1	; case 3
 19013  0127F4  B4D8               	btfsc	status,2,c
 19014  0127F6  D7BC               	goto	l421
 19015  0127F8                     l414:
 19016                           
 19017                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 19018                           
 19019                           ; BSR set to: 0
 19020  0127F8  0E08               	movlw	8
 19021  0127FA  0100               	movlb	0	; () banked
 19022  0127FC  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 19023  0127FE  0100               	movlb	0	; () banked
 19024  012800  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19025  012802  0E00               	movlw	0
 19026  012804  0100               	movlb	0	; () banked
 19027  012806  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 19028  012808  0100               	movlb	0	; () banked
 19029  01280A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19030  01280C  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 19031  012810  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 19032  012814  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 19033  012818  0012               	return	
 19034  01281A                     __end_of_Port_SetPinType:
 19035                           	opt stack 0
 19036                           tosu	equ	0xFFF
 19037                           tosh	equ	0xFFE
 19038                           tosl	equ	0xFFD
 19039                           pclath	equ	0xFFA
 19040                           tblptru	equ	0xFF8
 19041                           tblptrh	equ	0xFF7
 19042                           tblptrl	equ	0xFF6
 19043                           tablat	equ	0xFF5
 19044                           prodh	equ	0xFF4
 19045                           prodl	equ	0xFF3
 19046                           intcon	equ	0xFF2
 19047                           postinc0	equ	0xFEE
 19048                           wreg	equ	0xFE8
 19049                           indf1	equ	0xFE7
 19050                           postdec1	equ	0xFE5
 19051                           fsr1h	equ	0xFE2
 19052                           fsr1l	equ	0xFE1
 19053                           indf2	equ	0xFDF
 19054                           postinc2	equ	0xFDE
 19055                           postdec2	equ	0xFDD
 19056                           plusw2	equ	0xFDB
 19057                           fsr2h	equ	0xFDA
 19058                           fsr2l	equ	0xFD9
 19059                           status	equ	0xFD8
 19060                           
 19061 ;; *************** function _Byte_SetBit *****************
 19062 ;; Defined at:
 19063 ;;		line 32 in file "Library/Types.c"
 19064 ;; Parameters:    Size  Location     Type
 19065 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 19066 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 19067 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 19068 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 19069 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 19070 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 19071 ;;		 -> NULL(0), 
 19072 ;;  pBit            1    2[BANK0 ] unsigned char 
 19073 ;;  pValue          1    3[BANK0 ] unsigned char 
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;		None
 19076 ;; Return value:  Size  Location     Type
 19077 ;;                  1    wreg      void 
 19078 ;; Registers used:
 19079 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 19080 ;; Tracked objects:
 19081 ;;		On entry : 0/0
 19082 ;;		On exit  : 0/0
 19083 ;;		Unchanged: 0/0
 19084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19085 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19087 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19088 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;Total ram usage:        7 bytes
 19090 ;; Hardware stack levels used:    1
 19091 ;; Hardware stack levels required when called:    7
 19092 ;; This function calls:
 19093 ;;		Nothing
 19094 ;; This function is called by:
 19095 ;;		_Port_SetPinType
 19096 ;;		_Port_SetPin
 19097 ;;		_SPI_Init
 19098 ;;		_SPI_MinSpeed
 19099 ;;		_SPI_MaxSpeed
 19100 ;;		_Word_SetBit
 19101 ;;		_I2C_Init
 19102 ;; This function uses a non-reentrant model
 19103 ;;
 19104                           
 19105                           	psect	text90
 19106  015FDA                     __ptext90:
 19107                           	opt stack 0
 19108  015FDA                     _Byte_SetBit:
 19109                           	opt stack 16
 19110                           
 19111                           ;Types.c: 34: pValue &= 1;
 19112                           
 19113                           ;incstack = 0
 19114  015FDA  0E01               	movlw	1
 19115  015FDC  0100               	movlb	0	; () banked
 19116  015FDE  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 19117                           
 19118                           ; BSR set to: 0
 19119                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 19120  015FE0  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 19121  015FE4  0E01               	movlw	1
 19122  015FE6  0100               	movlb	0	; () banked
 19123  015FE8  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 19124  015FEA  0100               	movlb	0	; () banked
 19125  015FEC  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 19126  015FEE  D003               	goto	u9124
 19127  015FF0                     u9125:
 19128  015FF0  0100               	movlb	0	; () banked
 19129  015FF2  90D8               	bcf	status,0,c
 19130  015FF4  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 19131  015FF6                     u9124:
 19132  015FF6  0100               	movlb	0	; () banked
 19133  015FF8  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 19134  015FFA  D7FA               	goto	u9125
 19135  015FFC  0100               	movlb	0	; () banked
 19136  015FFE  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 19137  016000  0AFF               	xorlw	255
 19138  016002  0100               	movlb	0	; () banked
 19139  016004  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 19140  016006  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 19141  01600A  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 19142  01600E  0100               	movlb	0	; () banked
 19143  016010  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 19144  016012  16DF               	andwf	indf2,f,c
 19145                           
 19146                           ; BSR set to: 0
 19147                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 19148  016014  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 19149  016018  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 19150  01601C  0100               	movlb	0	; () banked
 19151  01601E  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 19152  016020  D003               	goto	u9134
 19153  016022                     u9135:
 19154  016022  0100               	movlb	0	; () banked
 19155  016024  90D8               	bcf	status,0,c
 19156  016026  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 19157  016028                     u9134:
 19158  016028  0100               	movlb	0	; () banked
 19159  01602A  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 19160  01602C  D7FA               	goto	u9135
 19161  01602E  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 19162  016032  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 19163  016036  0100               	movlb	0	; () banked
 19164  016038  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 19165  01603A  12DF               	iorwf	indf2,f,c
 19166                           
 19167                           ; BSR set to: 0
 19168  01603C  0012               	return		;funcret
 19169  01603E                     __end_of_Byte_SetBit:
 19170                           	opt stack 0
 19171                           tosu	equ	0xFFF
 19172                           tosh	equ	0xFFE
 19173                           tosl	equ	0xFFD
 19174                           pclath	equ	0xFFA
 19175                           tblptru	equ	0xFF8
 19176                           tblptrh	equ	0xFF7
 19177                           tblptrl	equ	0xFF6
 19178                           tablat	equ	0xFF5
 19179                           prodh	equ	0xFF4
 19180                           prodl	equ	0xFF3
 19181                           intcon	equ	0xFF2
 19182                           postinc0	equ	0xFEE
 19183                           wreg	equ	0xFE8
 19184                           indf1	equ	0xFE7
 19185                           postdec1	equ	0xFE5
 19186                           fsr1h	equ	0xFE2
 19187                           fsr1l	equ	0xFE1
 19188                           indf2	equ	0xFDF
 19189                           postinc2	equ	0xFDE
 19190                           postdec2	equ	0xFDD
 19191                           plusw2	equ	0xFDB
 19192                           fsr2h	equ	0xFDA
 19193                           fsr2l	equ	0xFD9
 19194                           status	equ	0xFD8
 19195                           
 19196 ;; *************** function _Port_SetQuadType *****************
 19197 ;; Defined at:
 19198 ;;		line 399 in file "Library/Port.c"
 19199 ;; Parameters:    Size  Location     Type
 19200 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 19201 ;;		 -> PortB(10), PortD(10), 
 19202 ;;  pQuad           1   56[BANK0 ] enum E6776
 19203 ;;  pType           1   57[BANK0 ] enum E6795
 19204 ;; Auto vars:     Size  Location     Type
 19205 ;;  Output          1   58[BANK0 ] enum E6475
 19206 ;; Return value:  Size  Location     Type
 19207 ;;                  1    wreg      enum E6475
 19208 ;; Registers used:
 19209 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19210 ;; Tracked objects:
 19211 ;;		On entry : 0/0
 19212 ;;		On exit  : 0/0
 19213 ;;		Unchanged: 0/0
 19214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19215 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19218 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19219 ;;Total ram usage:        5 bytes
 19220 ;; Hardware stack levels used:    1
 19221 ;; Hardware stack levels required when called:   13
 19222 ;; This function calls:
 19223 ;;		_Byte_SetQuad
 19224 ;;		_Port_CheckQuadType
 19225 ;;		_Word_SetPair
 19226 ;; This function is called by:
 19227 ;;		_MXK_InitDIPSwitch
 19228 ;;		_MXK_Init
 19229 ;; This function uses a non-reentrant model
 19230 ;;
 19231                           
 19232                           	psect	text91
 19233  011A04                     __ptext91:
 19234                           	opt stack 0
 19235  011A04                     _Port_SetQuadType:
 19236                           	opt stack 15
 19237                           
 19238                           ;Port.c: 401: ePinError Output = ePinErrorState;
 19239                           
 19240                           ; BSR set to: 0
 19241                           ;incstack = 0
 19242  011A04  0E05               	movlw	5
 19243  011A06  0100               	movlb	0	; () banked
 19244  011A08  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 19245                           
 19246                           ;Port.c: 403: switch (pType)
 19247  011A0A  D0C7               	goto	l476
 19248  011A0C                     
 19249                           ; BSR set to: 0
 19250                           ;Port.c: 407: {
 19251                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 19252                           
 19253                           ; BSR set to: 0
 19254  011A0C  0100               	movlb	0	; () banked
 19255  011A0E  EE20 F002          	lfsr	2,2
 19256  011A12  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19257  011A14  26D9               	addwf	fsr2l,f,c
 19258  011A16  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19259  011A18  22DA               	addwfc	fsr2h,f,c
 19260  011A1A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19261  011A1E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19262  011A22  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19263  011A26  0E0F               	movlw	15
 19264  011A28  0100               	movlb	0	; () banked
 19265  011A2A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19266  011A2C  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19267                           
 19268                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19269  011A30  0100               	movlb	0	; () banked
 19270  011A32  EE20 F004          	lfsr	2,4
 19271  011A36  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19272  011A38  26D9               	addwf	fsr2l,f,c
 19273  011A3A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19274  011A3C  22DA               	addwfc	fsr2h,f,c
 19275  011A3E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19276  011A42  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19277  011A46  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19278  011A4A  0E00               	movlw	0
 19279  011A4C  0100               	movlb	0	; () banked
 19280  011A4E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19281  011A50  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19282                           
 19283                           ;Port.c: 413: }
 19284                           ;Port.c: 415: break;
 19285  011A54  D0B0               	goto	l478
 19286  011A56                     
 19287                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 19288  011A56  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 19289  011A5A  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 19290  011A5E  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 19291  011A62  0E03               	movlw	3
 19292  011A64  0100               	movlb	0	; () banked
 19293  011A66  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 19294  011A68  ECDD  F0B0         	call	_Port_CheckQuadType	;wreg free
 19295  011A6C  0100               	movlb	0	; () banked
 19296  011A6E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 19297  011A70  0100               	movlb	0	; () banked
 19298  011A72  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 19299  011A74  A4D8               	btfss	status,2,c
 19300  011A76  0012               	return	
 19301                           
 19302                           ; BSR set to: 0
 19303                           ;Port.c: 418: {
 19304                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 19305  011A78  0100               	movlb	0	; () banked
 19306  011A7A  EE20 F002          	lfsr	2,2
 19307  011A7E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19308  011A80  26D9               	addwf	fsr2l,f,c
 19309  011A82  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19310  011A84  22DA               	addwfc	fsr2h,f,c
 19311  011A86  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19312  011A8A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19313  011A8E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19314  011A92  0E00               	movlw	0
 19315  011A94  0100               	movlb	0	; () banked
 19316  011A96  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19317  011A98  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19318                           
 19319                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19320  011A9C  0100               	movlb	0	; () banked
 19321  011A9E  EE20 F004          	lfsr	2,4
 19322  011AA2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19323  011AA4  26D9               	addwf	fsr2l,f,c
 19324  011AA6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19325  011AA8  22DA               	addwfc	fsr2h,f,c
 19326  011AAA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19327  011AAE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19328  011AB2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19329  011AB6  0E00               	movlw	0
 19330  011AB8  0100               	movlb	0	; () banked
 19331  011ABA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19332  011ABC  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19333                           
 19334                           ;Port.c: 424: }
 19335  011AC0  D07A               	goto	l478
 19336  011AC2                     
 19337                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 19338  011AC2  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 19339  011AC6  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 19340  011ACA  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 19341  011ACE  0E03               	movlw	3
 19342  011AD0  0100               	movlb	0	; () banked
 19343  011AD2  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 19344  011AD4  ECDD  F0B0         	call	_Port_CheckQuadType	;wreg free
 19345  011AD8  0100               	movlb	0	; () banked
 19346  011ADA  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 19347  011ADC  0100               	movlb	0	; () banked
 19348  011ADE  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 19349  011AE0  A4D8               	btfss	status,2,c
 19350  011AE2  0012               	return	
 19351                           
 19352                           ; BSR set to: 0
 19353                           ;Port.c: 429: {
 19354                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 19355  011AE4  0100               	movlb	0	; () banked
 19356  011AE6  EE20 F002          	lfsr	2,2
 19357  011AEA  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19358  011AEC  26D9               	addwf	fsr2l,f,c
 19359  011AEE  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19360  011AF0  22DA               	addwfc	fsr2h,f,c
 19361  011AF2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19362  011AF6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19363  011AFA  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19364  011AFE  0E0F               	movlw	15
 19365  011B00  0100               	movlb	0	; () banked
 19366  011B02  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19367  011B04  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19368                           
 19369                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 19370  011B08  0100               	movlb	0	; () banked
 19371  011B0A  EE20 F004          	lfsr	2,4
 19372  011B0E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19373  011B10  26D9               	addwf	fsr2l,f,c
 19374  011B12  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19375  011B14  22DA               	addwfc	fsr2h,f,c
 19376  011B16  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19377  011B1A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19378  011B1E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19379  011B22  0E0F               	movlw	15
 19380  011B24  0100               	movlb	0	; () banked
 19381  011B26  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19382  011B28  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19383                           
 19384                           ;Port.c: 435: }
 19385  011B2C  D044               	goto	l478
 19386  011B2E                     
 19387                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 19388  011B2E  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 19389  011B32  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 19390  011B36  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 19391  011B3A  0E03               	movlw	3
 19392  011B3C  0100               	movlb	0	; () banked
 19393  011B3E  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 19394  011B40  ECDD  F0B0         	call	_Port_CheckQuadType	;wreg free
 19395  011B44  0100               	movlb	0	; () banked
 19396  011B46  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 19397  011B48  0100               	movlb	0	; () banked
 19398  011B4A  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 19399  011B4C  A4D8               	btfss	status,2,c
 19400  011B4E  0012               	return	
 19401                           
 19402                           ; BSR set to: 0
 19403                           ;Port.c: 440: {
 19404                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 19405  011B50  0100               	movlb	0	; () banked
 19406  011B52  EE20 F002          	lfsr	2,2
 19407  011B56  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19408  011B58  26D9               	addwf	fsr2l,f,c
 19409  011B5A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19410  011B5C  22DA               	addwfc	fsr2h,f,c
 19411  011B5E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19412  011B62  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19413  011B66  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19414  011B6A  0E00               	movlw	0
 19415  011B6C  0100               	movlb	0	; () banked
 19416  011B6E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19417  011B70  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19418                           
 19419                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19420  011B74  0100               	movlb	0	; () banked
 19421  011B76  EE20 F004          	lfsr	2,4
 19422  011B7A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19423  011B7C  26D9               	addwf	fsr2l,f,c
 19424  011B7E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19425  011B80  22DA               	addwfc	fsr2h,f,c
 19426  011B82  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19427  011B86  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19428  011B8A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19429  011B8E  0E00               	movlw	0
 19430  011B90  0100               	movlb	0	; () banked
 19431  011B92  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19432  011B94  ECB3  F0B5         	call	_Byte_SetQuad	;wreg free
 19433                           
 19434                           ;Port.c: 446: }
 19435  011B98  D00E               	goto	l478
 19436  011B9A                     l476:
 19437  011B9A  0100               	movlb	0	; () banked
 19438  011B9C  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 19439                           
 19440                           ; Switch size 1, requested type "space"
 19441                           ; Number of cases is 4, Range of values is 0 to 3
 19442                           ; switch strategies available:
 19443                           ; Name         Instructions Cycles
 19444                           ; simple_byte           13     7 (average)
 19445                           ;	Chosen strategy is simple_byte
 19446  011B9E  0A00               	xorlw	0	; case 0
 19447  011BA0  B4D8               	btfsc	status,2,c
 19448  011BA2  D734               	goto	l477
 19449  011BA4  0A01               	xorlw	1	; case 1
 19450  011BA6  B4D8               	btfsc	status,2,c
 19451  011BA8  D756               	goto	l479
 19452  011BAA  0A03               	xorlw	3	; case 2
 19453  011BAC  B4D8               	btfsc	status,2,c
 19454  011BAE  D789               	goto	l483
 19455  011BB0  0A01               	xorlw	1	; case 3
 19456  011BB2  B4D8               	btfsc	status,2,c
 19457  011BB4  D7BC               	goto	l486
 19458  011BB6                     l478:
 19459                           
 19460                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 19461                           
 19462                           ; BSR set to: 0
 19463  011BB6  0E08               	movlw	8
 19464  011BB8  0100               	movlb	0	; () banked
 19465  011BBA  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19466  011BBC  0100               	movlb	0	; () banked
 19467  011BBE  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19468  011BC0  0E00               	movlw	0
 19469  011BC2  0100               	movlb	0	; () banked
 19470  011BC4  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19471  011BC6  0100               	movlb	0	; () banked
 19472  011BC8  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19473  011BCA  0100               	movlb	0	; () banked
 19474  011BCC  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19475  011BCE  0D04               	mullw	4
 19476  011BD0  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 19477  011BD4  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19478  011BD8  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 19479                           
 19480                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 19481  011BDC  0E08               	movlw	8
 19482  011BDE  0100               	movlb	0	; () banked
 19483  011BE0  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19484  011BE2  0100               	movlb	0	; () banked
 19485  011BE4  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19486  011BE6  0E00               	movlw	0
 19487  011BE8  0100               	movlb	0	; () banked
 19488  011BEA  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19489  011BEC  0100               	movlb	0	; () banked
 19490  011BEE  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19491  011BF0  0100               	movlb	0	; () banked
 19492  011BF2  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19493  011BF4  0D04               	mullw	4
 19494  011BF6  28F3               	incf	prodl,w,c
 19495  011BF8  0100               	movlb	0	; () banked
 19496  011BFA  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19497  011BFC  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19498  011C00  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 19499                           
 19500                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 19501  011C04  0E08               	movlw	8
 19502  011C06  0100               	movlb	0	; () banked
 19503  011C08  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19504  011C0A  0100               	movlb	0	; () banked
 19505  011C0C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19506  011C0E  0E00               	movlw	0
 19507  011C10  0100               	movlb	0	; () banked
 19508  011C12  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19509  011C14  0100               	movlb	0	; () banked
 19510  011C16  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19511  011C18  0100               	movlb	0	; () banked
 19512  011C1A  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19513  011C1C  0D04               	mullw	4
 19514  011C1E  50F3               	movf	prodl,w,c
 19515  011C20  0F02               	addlw	2
 19516  011C22  0100               	movlb	0	; () banked
 19517  011C24  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19518  011C26  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19519  011C2A  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 19520                           
 19521                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 19522  011C2E  0E08               	movlw	8
 19523  011C30  0100               	movlb	0	; () banked
 19524  011C32  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19525  011C34  0100               	movlb	0	; () banked
 19526  011C36  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 19527  011C38  0E00               	movlw	0
 19528  011C3A  0100               	movlb	0	; () banked
 19529  011C3C  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19530  011C3E  0100               	movlb	0	; () banked
 19531  011C40  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19532  011C42  0100               	movlb	0	; () banked
 19533  011C44  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19534  011C46  0D04               	mullw	4
 19535  011C48  50F3               	movf	prodl,w,c
 19536  011C4A  0F03               	addlw	3
 19537  011C4C  0100               	movlb	0	; () banked
 19538  011C4E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 19539  011C50  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19540  011C54  ECAD  F0B2         	call	_Word_SetPair	;wreg free
 19541  011C58  0012               	return	
 19542  011C5A                     __end_of_Port_SetQuadType:
 19543                           	opt stack 0
 19544                           tosu	equ	0xFFF
 19545                           tosh	equ	0xFFE
 19546                           tosl	equ	0xFFD
 19547                           pclath	equ	0xFFA
 19548                           tblptru	equ	0xFF8
 19549                           tblptrh	equ	0xFF7
 19550                           tblptrl	equ	0xFF6
 19551                           tablat	equ	0xFF5
 19552                           prodh	equ	0xFF4
 19553                           prodl	equ	0xFF3
 19554                           intcon	equ	0xFF2
 19555                           postinc0	equ	0xFEE
 19556                           wreg	equ	0xFE8
 19557                           indf1	equ	0xFE7
 19558                           postdec1	equ	0xFE5
 19559                           fsr1h	equ	0xFE2
 19560                           fsr1l	equ	0xFE1
 19561                           indf2	equ	0xFDF
 19562                           postinc2	equ	0xFDE
 19563                           postdec2	equ	0xFDD
 19564                           plusw2	equ	0xFDB
 19565                           fsr2h	equ	0xFDA
 19566                           fsr2l	equ	0xFD9
 19567                           status	equ	0xFD8
 19568                           
 19569 ;; *************** function _Word_SetPair *****************
 19570 ;; Defined at:
 19571 ;;		line 149 in file "Library/Types.c"
 19572 ;; Parameters:    Size  Location     Type
 19573 ;;  pInput          2   15[BANK0 ] PTR struct Word
 19574 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19575 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19576 ;;  pPair           1   17[BANK0 ] unsigned char 
 19577 ;;  pValue          1   18[BANK0 ] unsigned char 
 19578 ;; Auto vars:     Size  Location     Type
 19579 ;;		None
 19580 ;; Return value:  Size  Location     Type
 19581 ;;                  1    wreg      void 
 19582 ;; Registers used:
 19583 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19584 ;; Tracked objects:
 19585 ;;		On entry : 0/0
 19586 ;;		On exit  : 0/0
 19587 ;;		Unchanged: 0/0
 19588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19589 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19592 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19593 ;;Total ram usage:        4 bytes
 19594 ;; Hardware stack levels used:    1
 19595 ;; Hardware stack levels required when called:    9
 19596 ;; This function calls:
 19597 ;;		_Byte_SetPair
 19598 ;; This function is called by:
 19599 ;;		_Port_SetPinType
 19600 ;;		_Port_SetQuadType
 19601 ;;		_Port_SetType
 19602 ;;		_Port_SetPairType
 19603 ;;		_PortProperty_Init
 19604 ;; This function uses a non-reentrant model
 19605 ;;
 19606                           
 19607                           	psect	text92
 19608  01655A                     __ptext92:
 19609                           	opt stack 0
 19610  01655A                     _Word_SetPair:
 19611                           	opt stack 18
 19612                           
 19613                           ;Types.c: 151: if (pPair >= 4)
 19614                           
 19615                           ;incstack = 0
 19616  01655A  0E03               	movlw	3
 19617  01655C  0100               	movlb	0	; () banked
 19618  01655E  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 19619  016560  D014               	goto	l776
 19620                           
 19621                           ; BSR set to: 0
 19622                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 19623  016562  0E01               	movlw	1
 19624  016564  0100               	movlb	0	; () banked
 19625  016566  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 19626  016568  0100               	movlb	0	; () banked
 19627  01656A  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 19628  01656C  0E00               	movlw	0
 19629  01656E  0100               	movlb	0	; () banked
 19630  016570  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 19631  016572  0100               	movlb	0	; () banked
 19632  016574  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 19633  016576  0100               	movlb	0	; () banked
 19634  016578  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 19635  01657A  0FFC               	addlw	252
 19636  01657C  0100               	movlb	0	; () banked
 19637  01657E  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 19638  016580  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 19639  016584  ECA2  F0B5         	call	_Byte_SetPair	;wreg free
 19640  016588  0012               	return	
 19641  01658A                     l776:
 19642                           
 19643                           ;Types.c: 153: else
 19644                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 19645  01658A  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 19646  01658E  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 19647  016592  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 19648  016596  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 19649  01659A  ECA2  F0B5         	call	_Byte_SetPair	;wreg free
 19650  01659E  0012               	return	
 19651  0165A0                     __end_of_Word_SetPair:
 19652                           	opt stack 0
 19653                           tosu	equ	0xFFF
 19654                           tosh	equ	0xFFE
 19655                           tosl	equ	0xFFD
 19656                           pclath	equ	0xFFA
 19657                           tblptru	equ	0xFF8
 19658                           tblptrh	equ	0xFF7
 19659                           tblptrl	equ	0xFF6
 19660                           tablat	equ	0xFF5
 19661                           prodh	equ	0xFF4
 19662                           prodl	equ	0xFF3
 19663                           intcon	equ	0xFF2
 19664                           postinc0	equ	0xFEE
 19665                           wreg	equ	0xFE8
 19666                           indf1	equ	0xFE7
 19667                           postdec1	equ	0xFE5
 19668                           fsr1h	equ	0xFE2
 19669                           fsr1l	equ	0xFE1
 19670                           indf2	equ	0xFDF
 19671                           postinc2	equ	0xFDE
 19672                           postdec2	equ	0xFDD
 19673                           plusw2	equ	0xFDB
 19674                           fsr2h	equ	0xFDA
 19675                           fsr2l	equ	0xFD9
 19676                           status	equ	0xFD8
 19677                           
 19678 ;; *************** function _Byte_SetPair *****************
 19679 ;; Defined at:
 19680 ;;		line 83 in file "Library/Types.c"
 19681 ;; Parameters:    Size  Location     Type
 19682 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 19683 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 19684 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 19685 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 19686 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 19687 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 19688 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 19689 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 19690 ;;		 -> NULL(0), 
 19691 ;;  pPair           1   13[BANK0 ] unsigned char 
 19692 ;;  pValue          1   14[BANK0 ] unsigned char 
 19693 ;; Auto vars:     Size  Location     Type
 19694 ;;		None
 19695 ;; Return value:  Size  Location     Type
 19696 ;;                  1    wreg      void 
 19697 ;; Registers used:
 19698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19699 ;; Tracked objects:
 19700 ;;		On entry : 0/0
 19701 ;;		On exit  : 0/0
 19702 ;;		Unchanged: 0/0
 19703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19704 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19707 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19708 ;;Total ram usage:        4 bytes
 19709 ;; Hardware stack levels used:    1
 19710 ;; Hardware stack levels required when called:    8
 19711 ;; This function calls:
 19712 ;;		_Byte_SetZone
 19713 ;; This function is called by:
 19714 ;;		_Word_SetPair
 19715 ;;		_Port_SetPairType
 19716 ;;		_Port_SetPair
 19717 ;; This function uses a non-reentrant model
 19718 ;;
 19719                           
 19720                           	psect	text93
 19721  016B44                     __ptext93:
 19722                           	opt stack 0
 19723  016B44                     _Byte_SetPair:
 19724                           	opt stack 18
 19725                           
 19726                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 19727                           
 19728                           ;incstack = 0
 19729  016B44  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 19730  016B48  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 19731  016B4C  0E04               	movlw	4
 19732  016B4E  0100               	movlb	0	; () banked
 19733  016B50  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 19734  016B52  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 19735  016B56  0E02               	movlw	2
 19736  016B58  0100               	movlb	0	; () banked
 19737  016B5A  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 19738  016B5C  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 19739  016B60  EC09  F0A6         	call	_Byte_SetZone	;wreg free
 19740  016B64  0012               	return		;funcret
 19741  016B66                     __end_of_Byte_SetPair:
 19742                           	opt stack 0
 19743                           tosu	equ	0xFFF
 19744                           tosh	equ	0xFFE
 19745                           tosl	equ	0xFFD
 19746                           pclath	equ	0xFFA
 19747                           tblptru	equ	0xFF8
 19748                           tblptrh	equ	0xFF7
 19749                           tblptrl	equ	0xFF6
 19750                           tablat	equ	0xFF5
 19751                           prodh	equ	0xFF4
 19752                           prodl	equ	0xFF3
 19753                           intcon	equ	0xFF2
 19754                           postinc0	equ	0xFEE
 19755                           wreg	equ	0xFE8
 19756                           indf1	equ	0xFE7
 19757                           postdec1	equ	0xFE5
 19758                           fsr1h	equ	0xFE2
 19759                           fsr1l	equ	0xFE1
 19760                           indf2	equ	0xFDF
 19761                           postinc2	equ	0xFDE
 19762                           postdec2	equ	0xFDD
 19763                           plusw2	equ	0xFDB
 19764                           fsr2h	equ	0xFDA
 19765                           fsr2l	equ	0xFD9
 19766                           status	equ	0xFD8
 19767                           
 19768 ;; *************** function _Port_CheckQuadType *****************
 19769 ;; Defined at:
 19770 ;;		line 126 in file "Library/Port.c"
 19771 ;; Parameters:    Size  Location     Type
 19772 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 19773 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19774 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19775 ;;  pQuad           1   49[BANK0 ] enum E6776
 19776 ;;  pDrive          1   50[BANK0 ] enum E6469
 19777 ;; Auto vars:     Size  Location     Type
 19778 ;;  Output          1   53[BANK0 ] enum E6475
 19779 ;;  Pair2           1   52[BANK0 ] enum E6760
 19780 ;;  Pair1           1   51[BANK0 ] enum E6760
 19781 ;; Return value:  Size  Location     Type
 19782 ;;                  1    wreg      enum E6475
 19783 ;; Registers used:
 19784 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19785 ;; Tracked objects:
 19786 ;;		On entry : 0/0
 19787 ;;		On exit  : 0/0
 19788 ;;		Unchanged: 0/0
 19789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19790 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19791 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19793 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19794 ;;Total ram usage:        7 bytes
 19795 ;; Hardware stack levels used:    1
 19796 ;; Hardware stack levels required when called:   12
 19797 ;; This function calls:
 19798 ;;		_Port_CheckPairType
 19799 ;; This function is called by:
 19800 ;;		_Port_CheckPortType
 19801 ;;		_Port_SetQuadType
 19802 ;; This function uses a non-reentrant model
 19803 ;;
 19804                           
 19805                           	psect	text94
 19806  0161BA                     __ptext94:
 19807                           	opt stack 0
 19808  0161BA                     _Port_CheckQuadType:
 19809                           	opt stack 14
 19810                           
 19811                           ;Port.c: 128: ePinError Output = ePinErrorState;
 19812                           
 19813                           ;incstack = 0
 19814  0161BA  0E05               	movlw	5
 19815  0161BC  0100               	movlb	0	; () banked
 19816  0161BE  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 19817                           
 19818                           ; BSR set to: 0
 19819                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 19820  0161C0  0100               	movlb	0	; () banked
 19821  0161C2  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 19822  0161C4  0D02               	mullw	2
 19823  0161C6  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 19824                           
 19825                           ; BSR set to: 0
 19826                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 19827  0161CA  0100               	movlb	0	; () banked
 19828  0161CC  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 19829  0161CE  0D02               	mullw	2
 19830  0161D0  28F3               	incf	prodl,w,c
 19831  0161D2  0100               	movlb	0	; () banked
 19832  0161D4  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 19833                           
 19834                           ; BSR set to: 0
 19835                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 19836  0161D6  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 19837  0161DA  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 19838  0161DE  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 19839  0161E2  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 19840  0161E6  EC51  F0AF         	call	_Port_CheckPairType	;wreg free
 19841  0161EA  0100               	movlb	0	; () banked
 19842  0161EC  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 19843  0161EE  0100               	movlb	0	; () banked
 19844  0161F0  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 19845  0161F2  A4D8               	btfss	status,2,c
 19846  0161F4  D00C               	goto	l393
 19847                           
 19848                           ; BSR set to: 0
 19849                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 19850  0161F6  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 19851  0161FA  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 19852  0161FE  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 19853  016202  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 19854  016206  EC51  F0AF         	call	_Port_CheckPairType	;wreg free
 19855  01620A  0100               	movlb	0	; () banked
 19856  01620C  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 19857  01620E                     l393:
 19858                           
 19859                           ; BSR set to: 0
 19860                           ;Port.c: 136: return Output;
 19861                           
 19862                           ; BSR set to: 0
 19863  01620E  0100               	movlb	0	; () banked
 19864  016210  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 19865  016212  0012               	return	
 19866  016214                     __end_of_Port_CheckQuadType:
 19867                           	opt stack 0
 19868                           tosu	equ	0xFFF
 19869                           tosh	equ	0xFFE
 19870                           tosl	equ	0xFFD
 19871                           pclath	equ	0xFFA
 19872                           tblptru	equ	0xFF8
 19873                           tblptrh	equ	0xFF7
 19874                           tblptrl	equ	0xFF6
 19875                           tablat	equ	0xFF5
 19876                           prodh	equ	0xFF4
 19877                           prodl	equ	0xFF3
 19878                           intcon	equ	0xFF2
 19879                           postinc0	equ	0xFEE
 19880                           wreg	equ	0xFE8
 19881                           indf1	equ	0xFE7
 19882                           postdec1	equ	0xFE5
 19883                           fsr1h	equ	0xFE2
 19884                           fsr1l	equ	0xFE1
 19885                           indf2	equ	0xFDF
 19886                           postinc2	equ	0xFDE
 19887                           postdec2	equ	0xFDD
 19888                           plusw2	equ	0xFDB
 19889                           fsr2h	equ	0xFDA
 19890                           fsr2l	equ	0xFD9
 19891                           status	equ	0xFD8
 19892                           
 19893 ;; *************** function _Port_CheckPairType *****************
 19894 ;; Defined at:
 19895 ;;		line 112 in file "Library/Port.c"
 19896 ;; Parameters:    Size  Location     Type
 19897 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 19898 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19899 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19900 ;;  pPair           1   40[BANK0 ] enum E6760
 19901 ;;  pDrive          1   41[BANK0 ] enum E6469
 19902 ;; Auto vars:     Size  Location     Type
 19903 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 19904 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19905 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19906 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19907 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19908 ;;  Output          1   44[BANK0 ] enum E6475
 19909 ;;  Pin2            1   43[BANK0 ] enum E6750
 19910 ;;  Pin1            1   42[BANK0 ] enum E6750
 19911 ;; Return value:  Size  Location     Type
 19912 ;;                  1    wreg      enum E6475
 19913 ;; Registers used:
 19914 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19915 ;; Tracked objects:
 19916 ;;		On entry : 0/0
 19917 ;;		On exit  : 0/0
 19918 ;;		Unchanged: 0/0
 19919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19920 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19921 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19923 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19924 ;;Total ram usage:        9 bytes
 19925 ;; Hardware stack levels used:    1
 19926 ;; Hardware stack levels required when called:   11
 19927 ;; This function calls:
 19928 ;;		_PortProperty_Valid
 19929 ;; This function is called by:
 19930 ;;		_Port_CheckQuadType
 19931 ;;		_Port_SetPairType
 19932 ;; This function uses a non-reentrant model
 19933 ;;
 19934                           
 19935                           	psect	text95
 19936  015EA2                     __ptext95:
 19937                           	opt stack 0
 19938  015EA2                     _Port_CheckPairType:
 19939                           	opt stack 14
 19940                           
 19941                           ;Port.c: 114: ePinError Output = ePinErrorState;
 19942                           
 19943                           ; BSR set to: 0
 19944                           ;incstack = 0
 19945  015EA2  0E05               	movlw	5
 19946  015EA4  0100               	movlb	0	; () banked
 19947  015EA6  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 19948                           
 19949                           ; BSR set to: 0
 19950                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 19951  015EA8  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 19952  015EAC  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 19953  015EB0  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 19954  015EB4  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 19955                           
 19956                           ; BSR set to: 0
 19957                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 19958  015EB8  0100               	movlb	0	; () banked
 19959  015EBA  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 19960  015EBC  0D02               	mullw	2
 19961  015EBE  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 19962                           
 19963                           ; BSR set to: 0
 19964                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 19965  015EC2  0100               	movlb	0	; () banked
 19966  015EC4  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 19967  015EC6  0D02               	mullw	2
 19968  015EC8  28F3               	incf	prodl,w,c
 19969  015ECA  0100               	movlb	0	; () banked
 19970  015ECC  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 19971                           
 19972                           ; BSR set to: 0
 19973                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 19974  015ECE  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 19975  015ED2  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 19976  015ED6  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 19977  015EDA  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 19978  015EDE  EC25  F0AC         	call	_PortProperty_Valid	;wreg free
 19979  015EE2  0100               	movlb	0	; () banked
 19980  015EE4  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 19981  015EE6  0100               	movlb	0	; () banked
 19982  015EE8  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 19983  015EEA  A4D8               	btfss	status,2,c
 19984  015EEC  D00C               	goto	l389
 19985                           
 19986                           ; BSR set to: 0
 19987                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 19988  015EEE  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 19989  015EF2  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 19990  015EF6  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 19991  015EFA  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 19992  015EFE  EC25  F0AC         	call	_PortProperty_Valid	;wreg free
 19993  015F02  0100               	movlb	0	; () banked
 19994  015F04  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 19995  015F06                     l389:
 19996                           
 19997                           ; BSR set to: 0
 19998                           ;Port.c: 124: return Output;
 19999                           
 20000                           ; BSR set to: 0
 20001  015F06  0100               	movlb	0	; () banked
 20002  015F08  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 20003  015F0A  0012               	return	
 20004  015F0C                     __end_of_Port_CheckPairType:
 20005                           	opt stack 0
 20006                           tosu	equ	0xFFF
 20007                           tosh	equ	0xFFE
 20008                           tosl	equ	0xFFD
 20009                           pclath	equ	0xFFA
 20010                           tblptru	equ	0xFF8
 20011                           tblptrh	equ	0xFF7
 20012                           tblptrl	equ	0xFF6
 20013                           tablat	equ	0xFF5
 20014                           prodh	equ	0xFF4
 20015                           prodl	equ	0xFF3
 20016                           intcon	equ	0xFF2
 20017                           postinc0	equ	0xFEE
 20018                           wreg	equ	0xFE8
 20019                           indf1	equ	0xFE7
 20020                           postdec1	equ	0xFE5
 20021                           fsr1h	equ	0xFE2
 20022                           fsr1l	equ	0xFE1
 20023                           indf2	equ	0xFDF
 20024                           postinc2	equ	0xFDE
 20025                           postdec2	equ	0xFDD
 20026                           plusw2	equ	0xFDB
 20027                           fsr2h	equ	0xFDA
 20028                           fsr2l	equ	0xFD9
 20029                           status	equ	0xFD8
 20030                           
 20031 ;; *************** function _PortProperty_Valid *****************
 20032 ;; Defined at:
 20033 ;;		line 220 in file "Library/Types.c"
 20034 ;; Parameters:    Size  Location     Type
 20035 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 20036 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20037 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20038 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20039 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20040 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 20041 ;;  pPin            1   18[BANK0 ] unsigned char 
 20042 ;; Auto vars:     Size  Location     Type
 20043 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 20044 ;;  Pair            1   37[BANK0 ] enum E6469
 20045 ;; Return value:  Size  Location     Type
 20046 ;;                  1    wreg      enum E6475
 20047 ;; Registers used:
 20048 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20049 ;; Tracked objects:
 20050 ;;		On entry : 0/0
 20051 ;;		On exit  : 0/0
 20052 ;;		Unchanged: 0/0
 20053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20054 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20055 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20056 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20058 ;;Total ram usage:       23 bytes
 20059 ;; Hardware stack levels used:    1
 20060 ;; Hardware stack levels required when called:   10
 20061 ;; This function calls:
 20062 ;;		_Word_GetPair
 20063 ;; This function is called by:
 20064 ;;		_Port_CheckPairType
 20065 ;;		_Port_SetPinType
 20066 ;; This function uses a non-reentrant model
 20067 ;;
 20068                           
 20069                           	psect	text96
 20070  01584A                     __ptext96:
 20071                           	opt stack 0
 20072  01584A                     _PortProperty_Valid:
 20073                           	opt stack 17
 20074                           
 20075                           ;Types.c: 222: ePinDrive Pair;
 20076                           ;Types.c: 223: const ePinError Errors[4][4] =
 20077                           ;Types.c: 224: {
 20078                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 20079                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 20080                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 20081                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 20082                           ;Types.c: 230: };
 20083                           
 20084                           ; BSR set to: 0
 20085                           ;incstack = 0
 20086  01584A  0EA5               	movlw	low PortProperty_Valid@F6830
 20087  01584C  6EF6               	movwf	tblptrl,c
 20088  01584E                     	if	1	;There is more than 1 active tblptr byte
 20089  01584E  0EFC               	movlw	high PortProperty_Valid@F6830
 20090  015850  6EF7               	movwf	tblptrh,c
 20091  015852                     	endif
 20092  015852                     	if	1	;There are 3 active tblptr bytes
 20093  015852  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 20094  015854  6EF8               	movwf	tblptru,c
 20095  015856                     	endif
 20096  015856  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 20097  01585A  0E0F               	movlw	15
 20098  01585C                     u9090:
 20099  01585C  0009               	tblrd		*+
 20100  01585E  CFF5 FFDE          	movff	tablat,postinc2
 20101  015862  06E8               	decf	wreg,f,c
 20102  015864  E2FB               	bc	u9090
 20103                           
 20104                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 20105  015866  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 20106  01586A  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 20107  01586E  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 20108  015872  EC93  F0B3         	call	_Word_GetPair	;wreg free
 20109  015876  0100               	movlb	0	; () banked
 20110  015878  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 20111                           
 20112                           ; BSR set to: 0
 20113                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 20114  01587A  0E04               	movlw	4
 20115  01587C  0100               	movlb	0	; () banked
 20116  01587E  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 20117  015880  D020               	goto	l819
 20118                           
 20119                           ; BSR set to: 0
 20120  015882  0E04               	movlw	4
 20121  015884  0100               	movlb	0	; () banked
 20122  015886  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 20123  015888  D01C               	goto	l819
 20124                           
 20125                           ; BSR set to: 0
 20126                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 20127  01588A  0100               	movlb	0	; () banked
 20128  01588C  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 20129  01588E  0D04               	mullw	4
 20130  015890  0E75               	movlw	low PortProperty_Valid@Errors
 20131  015892  0100               	movlb	0	; () banked
 20132  015894  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 20133  015896  0E00               	movlw	high PortProperty_Valid@Errors
 20134  015898  0100               	movlb	0	; () banked
 20135  01589A  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 20136  01589C  50F3               	movf	prodl,w,c
 20137  01589E  0100               	movlb	0	; () banked
 20138  0158A0  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 20139  0158A2  50F4               	movf	prodh,w,c
 20140  0158A4  0100               	movlb	0	; () banked
 20141  0158A6  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 20142  0158A8  0100               	movlb	0	; () banked
 20143  0158AA  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 20144  0158AC  0D01               	mullw	1
 20145  0158AE  50F3               	movf	prodl,w,c
 20146  0158B0  0100               	movlb	0	; () banked
 20147  0158B2  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 20148  0158B4  6ED9               	movwf	fsr2l,c
 20149  0158B6  50F4               	movf	prodh,w,c
 20150  0158B8  0100               	movlb	0	; () banked
 20151  0158BA  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 20152  0158BC  6EDA               	movwf	fsr2h,c
 20153  0158BE  50DF               	movf	indf2,w,c
 20154                           
 20155                           ; BSR set to: 0
 20156  0158C0  0012               	return	
 20157  0158C2                     l819:
 20158                           
 20159                           ; BSR set to: 0
 20160                           ;Types.c: 237: return ePinErrorState;
 20161                           
 20162                           ; BSR set to: 0
 20163  0158C2  0E05               	movlw	5
 20164  0158C4  0012               	return	
 20165  0158C6                     __end_of_PortProperty_Valid:
 20166                           	opt stack 0
 20167                           tosu	equ	0xFFF
 20168                           tosh	equ	0xFFE
 20169                           tosl	equ	0xFFD
 20170                           pclath	equ	0xFFA
 20171                           tblptru	equ	0xFF8
 20172                           tblptrh	equ	0xFF7
 20173                           tblptrl	equ	0xFF6
 20174                           tablat	equ	0xFF5
 20175                           prodh	equ	0xFF4
 20176                           prodl	equ	0xFF3
 20177                           intcon	equ	0xFF2
 20178                           postinc0	equ	0xFEE
 20179                           wreg	equ	0xFE8
 20180                           indf1	equ	0xFE7
 20181                           postdec1	equ	0xFE5
 20182                           fsr1h	equ	0xFE2
 20183                           fsr1l	equ	0xFE1
 20184                           indf2	equ	0xFDF
 20185                           postinc2	equ	0xFDE
 20186                           postdec2	equ	0xFDD
 20187                           plusw2	equ	0xFDB
 20188                           fsr2h	equ	0xFDA
 20189                           fsr2l	equ	0xFD9
 20190                           status	equ	0xFD8
 20191                           
 20192 ;; *************** function _Word_GetPair *****************
 20193 ;; Defined at:
 20194 ;;		line 156 in file "Library/Types.c"
 20195 ;; Parameters:    Size  Location     Type
 20196 ;;  pInput          2   12[BANK0 ] PTR struct Word
 20197 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20198 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 20199 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 20200 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20201 ;;  pPair           1   14[BANK0 ] unsigned char 
 20202 ;; Auto vars:     Size  Location     Type
 20203 ;;		None
 20204 ;; Return value:  Size  Location     Type
 20205 ;;                  1    wreg      unsigned char 
 20206 ;; Registers used:
 20207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20208 ;; Tracked objects:
 20209 ;;		On entry : 0/0
 20210 ;;		On exit  : 0/0
 20211 ;;		Unchanged: 0/0
 20212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20213 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20217 ;;Total ram usage:        3 bytes
 20218 ;; Hardware stack levels used:    1
 20219 ;; Hardware stack levels required when called:    9
 20220 ;; This function calls:
 20221 ;;		_Byte_GetPair
 20222 ;; This function is called by:
 20223 ;;		_Port_Init
 20224 ;;		_Port_SetPin
 20225 ;;		_Port_Set
 20226 ;;		_PortProperty_Valid
 20227 ;;		_Port_SetPair
 20228 ;;		_Port_SetQuad
 20229 ;; This function uses a non-reentrant model
 20230 ;;
 20231                           
 20232                           	psect	text97
 20233  016726                     __ptext97:
 20234                           	opt stack 0
 20235  016726                     _Word_GetPair:
 20236                           	opt stack 14
 20237                           
 20238                           ;Types.c: 158: if (pPair >= 4)
 20239                           
 20240                           ; BSR set to: 0
 20241                           ;incstack = 0
 20242  016726  0E03               	movlw	3
 20243  016728  0100               	movlb	0	; () banked
 20244  01672A  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 20245  01672C  D012               	goto	l781
 20246                           
 20247                           ; BSR set to: 0
 20248                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 20249  01672E  0E01               	movlw	1
 20250  016730  0100               	movlb	0	; () banked
 20251  016732  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 20252  016734  0100               	movlb	0	; () banked
 20253  016736  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 20254  016738  0E00               	movlw	0
 20255  01673A  0100               	movlb	0	; () banked
 20256  01673C  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 20257  01673E  0100               	movlb	0	; () banked
 20258  016740  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 20259  016742  0100               	movlb	0	; () banked
 20260  016744  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 20261  016746  0FFC               	addlw	252
 20262  016748  0100               	movlb	0	; () banked
 20263  01674A  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 20264  01674C  EC21  F0B6         	call	_Byte_GetPair	;wreg free
 20265  016750  0012               	return	
 20266  016752                     l781:
 20267                           
 20268                           ;Types.c: 160: else
 20269                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 20270  016752  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 20271  016756  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 20272  01675A  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 20273  01675E  EC21  F0B6         	call	_Byte_GetPair	;wreg free
 20274  016762  0012               	return	
 20275  016764                     __end_of_Word_GetPair:
 20276                           	opt stack 0
 20277                           tosu	equ	0xFFF
 20278                           tosh	equ	0xFFE
 20279                           tosl	equ	0xFFD
 20280                           pclath	equ	0xFFA
 20281                           tblptru	equ	0xFF8
 20282                           tblptrh	equ	0xFF7
 20283                           tblptrl	equ	0xFF6
 20284                           tablat	equ	0xFF5
 20285                           prodh	equ	0xFF4
 20286                           prodl	equ	0xFF3
 20287                           intcon	equ	0xFF2
 20288                           postinc0	equ	0xFEE
 20289                           wreg	equ	0xFE8
 20290                           indf1	equ	0xFE7
 20291                           postdec1	equ	0xFE5
 20292                           fsr1h	equ	0xFE2
 20293                           fsr1l	equ	0xFE1
 20294                           indf2	equ	0xFDF
 20295                           postinc2	equ	0xFDE
 20296                           postdec2	equ	0xFDD
 20297                           plusw2	equ	0xFDB
 20298                           fsr2h	equ	0xFDA
 20299                           fsr2l	equ	0xFD9
 20300                           status	equ	0xFD8
 20301                           
 20302 ;; *************** function _Byte_GetPair *****************
 20303 ;; Defined at:
 20304 ;;		line 87 in file "Library/Types.c"
 20305 ;; Parameters:    Size  Location     Type
 20306 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 20307 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20308 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20309 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20310 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20311 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20312 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20313 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20314 ;;		 -> NULL(0), 
 20315 ;;  pPair           1   11[BANK0 ] unsigned char 
 20316 ;; Auto vars:     Size  Location     Type
 20317 ;;		None
 20318 ;; Return value:  Size  Location     Type
 20319 ;;                  1    wreg      unsigned char 
 20320 ;; Registers used:
 20321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20322 ;; Tracked objects:
 20323 ;;		On entry : 0/0
 20324 ;;		On exit  : 0/0
 20325 ;;		Unchanged: 0/0
 20326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20327 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20328 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20330 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20331 ;;Total ram usage:        3 bytes
 20332 ;; Hardware stack levels used:    1
 20333 ;; Hardware stack levels required when called:    8
 20334 ;; This function calls:
 20335 ;;		_Byte_GetZone
 20336 ;; This function is called by:
 20337 ;;		_Word_GetPair
 20338 ;; This function uses a non-reentrant model
 20339 ;;
 20340                           
 20341                           	psect	text98
 20342  016C42                     __ptext98:
 20343                           	opt stack 0
 20344  016C42                     _Byte_GetPair:
 20345                           	opt stack 14
 20346                           
 20347                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 20348                           
 20349                           ;incstack = 0
 20350  016C42  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 20351  016C46  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 20352  016C4A  0E04               	movlw	4
 20353  016C4C  0100               	movlb	0	; () banked
 20354  016C4E  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 20355  016C50  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 20356  016C54  0E02               	movlw	2
 20357  016C56  0100               	movlb	0	; () banked
 20358  016C58  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 20359  016C5A  ECA9  F0A9         	call	_Byte_GetZone	;wreg free
 20360  016C5E  0012               	return	
 20361  016C60                     __end_of_Byte_GetPair:
 20362                           	opt stack 0
 20363                           tosu	equ	0xFFF
 20364                           tosh	equ	0xFFE
 20365                           tosl	equ	0xFFD
 20366                           pclath	equ	0xFFA
 20367                           tblptru	equ	0xFF8
 20368                           tblptrh	equ	0xFF7
 20369                           tblptrl	equ	0xFF6
 20370                           tablat	equ	0xFF5
 20371                           prodh	equ	0xFF4
 20372                           prodl	equ	0xFF3
 20373                           intcon	equ	0xFF2
 20374                           postinc0	equ	0xFEE
 20375                           wreg	equ	0xFE8
 20376                           indf1	equ	0xFE7
 20377                           postdec1	equ	0xFE5
 20378                           fsr1h	equ	0xFE2
 20379                           fsr1l	equ	0xFE1
 20380                           indf2	equ	0xFDF
 20381                           postinc2	equ	0xFDE
 20382                           postdec2	equ	0xFDD
 20383                           plusw2	equ	0xFDB
 20384                           fsr2h	equ	0xFDA
 20385                           fsr2l	equ	0xFD9
 20386                           status	equ	0xFD8
 20387                           
 20388 ;; *************** function _Byte_GetZone *****************
 20389 ;; Defined at:
 20390 ;;		line 64 in file "Library/Types.c"
 20391 ;; Parameters:    Size  Location     Type
 20392 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20393 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20394 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20395 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20396 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20397 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20398 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20399 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20400 ;;		 -> NULL(0), 
 20401 ;;  pMax            1    2[BANK0 ] unsigned char 
 20402 ;;  pChunk          1    3[BANK0 ] unsigned char 
 20403 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 20404 ;; Auto vars:     Size  Location     Type
 20405 ;;  Output          1    8[BANK0 ] unsigned char 
 20406 ;;  Offset          1    7[BANK0 ] unsigned char 
 20407 ;;  MASK            1    6[BANK0 ] unsigned char 
 20408 ;; Return value:  Size  Location     Type
 20409 ;;                  1    wreg      unsigned char 
 20410 ;; Registers used:
 20411 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20412 ;; Tracked objects:
 20413 ;;		On entry : 0/0
 20414 ;;		On exit  : 0/0
 20415 ;;		Unchanged: 0/0
 20416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20417 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20418 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20420 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20421 ;;Total ram usage:        9 bytes
 20422 ;; Hardware stack levels used:    1
 20423 ;; Hardware stack levels required when called:    7
 20424 ;; This function calls:
 20425 ;;		Nothing
 20426 ;; This function is called by:
 20427 ;;		_Byte_GetPair
 20428 ;;		_Byte_GetTriple
 20429 ;;		_Byte_GetQuad
 20430 ;; This function uses a non-reentrant model
 20431 ;;
 20432                           
 20433                           	psect	text99
 20434  015352                     __ptext99:
 20435                           	opt stack 0
 20436  015352                     _Byte_GetZone:
 20437                           	opt stack 14
 20438                           
 20439                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20440                           
 20441                           ;incstack = 0
 20442  015352  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 20443  015356  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 20444  01535A  0E00               	movlw	low (__mediumconst shr (0+16))
 20445  01535C  6EF8               	movwf	tblptru,c
 20446  01535E  0E0F               	movlw	(high __ramtop+-1)
 20447  015360  64F7               	cpfsgt	tblptrh,c
 20448  015362  D003               	bra	u9057
 20449  015364  0008               	tblrd		*
 20450  015366  50F5               	movf	tablat,w,c
 20451  015368  D005               	bra	u9050
 20452  01536A                     u9057:
 20453  01536A  CFF6 FFE9          	movff	tblptrl,fsr0l
 20454  01536E  CFF7 FFEA          	movff	tblptrh,fsr0h
 20455  015372  50EF               	movf	indf0,w,c
 20456  015374                     u9050:
 20457  015374  0100               	movlb	0	; () banked
 20458  015376  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 20459                           
 20460                           ; BSR set to: 0
 20461                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 20462  015378  0100               	movlb	0	; () banked
 20463  01537A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20464  01537C  0D01               	mullw	1
 20465  01537E  0EBF               	movlw	low _MASKS
 20466  015380  24F3               	addwf	prodl,w,c
 20467  015382  6EF6               	movwf	tblptrl,c
 20468  015384  0EFC               	movlw	high _MASKS
 20469  015386  20F4               	addwfc	prodh,w,c
 20470  015388  6EF7               	movwf	tblptrh,c
 20471  01538A                     	if	1	;There are 3 active tblptr bytes
 20472  01538A  6AF8               	clrf	tblptru,c
 20473  01538C  0E00               	movlw	low (__mediumconst shr (0+16))
 20474  01538E  22F8               	addwfc	tblptru,f,c
 20475  015390                     	endif
 20476  015390  0008               	tblrd		*
 20477  015392  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 20478                           
 20479                           ; BSR set to: 0
 20480                           ;Types.c: 68: UINT8 Offset = 0;
 20481  015396  0E00               	movlw	0
 20482  015398  0100               	movlb	0	; () banked
 20483  01539A  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 20484                           
 20485                           ;Types.c: 70: while (pChunk >= pMax)
 20486  01539C  D006               	goto	l732
 20487  01539E                     
 20488                           ; BSR set to: 0
 20489                           ;Types.c: 71: {
 20490                           ;Types.c: 72: pChunk -= pMax;
 20491                           
 20492                           ; BSR set to: 0
 20493  01539E  0100               	movlb	0	; () banked
 20494  0153A0  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 20495  0153A2  0100               	movlb	0	; () banked
 20496  0153A4  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 20497                           
 20498                           ; BSR set to: 0
 20499                           ;Types.c: 73: Offset += 1;
 20500  0153A6  0100               	movlb	0	; () banked
 20501  0153A8  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 20502  0153AA                     l732:
 20503                           
 20504                           ; BSR set to: 0
 20505                           
 20506                           ; BSR set to: 0
 20507  0153AA  0100               	movlb	0	; () banked
 20508  0153AC  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 20509  0153AE  0100               	movlb	0	; () banked
 20510  0153B0  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 20511  0153B2  B0D8               	btfsc	status,0,c
 20512  0153B4  D7F4               	goto	l733
 20513                           
 20514                           ; BSR set to: 0
 20515                           ;Types.c: 74: }
 20516                           ;Types.c: 75: pChunk *= pChunkSize;
 20517                           
 20518                           ; BSR set to: 0
 20519  0153B6  0100               	movlb	0	; () banked
 20520  0153B8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20521  0153BA  0100               	movlb	0	; () banked
 20522  0153BC  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 20523  0153BE  50F3               	movf	prodl,w,c
 20524  0153C0  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 20525                           
 20526                           ; BSR set to: 0
 20527                           ;Types.c: 76: pChunk += Offset;
 20528  0153C2  0100               	movlb	0	; () banked
 20529  0153C4  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 20530  0153C6  0100               	movlb	0	; () banked
 20531  0153C8  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 20532                           
 20533                           ; BSR set to: 0
 20534                           ;Types.c: 78: Output >>= pChunk;
 20535  0153CA  0100               	movlb	0	; () banked
 20536  0153CC  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 20537  0153CE  0100               	movlb	0	; () banked
 20538  0153D0  6F65               	movwf	??_Byte_GetZone& (0+255),b
 20539  0153D2  D003               	goto	u9070
 20540  0153D4                     u9075:
 20541  0153D4  0100               	movlb	0	; () banked
 20542  0153D6  90D8               	bcf	status,0,c
 20543  0153D8  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 20544  0153DA                     u9070:
 20545  0153DA  0100               	movlb	0	; () banked
 20546  0153DC  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 20547  0153DE  D7FA               	goto	u9075
 20548                           
 20549                           ;Types.c: 79: Output &= MASK;
 20550  0153E0  0100               	movlb	0	; () banked
 20551  0153E2  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 20552  0153E4  0100               	movlb	0	; () banked
 20553  0153E6  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 20554                           
 20555                           ; BSR set to: 0
 20556                           ;Types.c: 80: return Output;
 20557  0153E8  0100               	movlb	0	; () banked
 20558  0153EA  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 20559  0153EC  0012               	return	
 20560  0153EE                     __end_of_Byte_GetZone:
 20561                           	opt stack 0
 20562                           tosu	equ	0xFFF
 20563                           tosh	equ	0xFFE
 20564                           tosl	equ	0xFFD
 20565                           pclath	equ	0xFFA
 20566                           tblptru	equ	0xFF8
 20567                           tblptrh	equ	0xFF7
 20568                           tblptrl	equ	0xFF6
 20569                           tablat	equ	0xFF5
 20570                           prodh	equ	0xFF4
 20571                           prodl	equ	0xFF3
 20572                           intcon	equ	0xFF2
 20573                           indf0	equ	0xFEF
 20574                           postinc0	equ	0xFEE
 20575                           fsr0h	equ	0xFEA
 20576                           fsr0l	equ	0xFE9
 20577                           wreg	equ	0xFE8
 20578                           indf1	equ	0xFE7
 20579                           postdec1	equ	0xFE5
 20580                           fsr1h	equ	0xFE2
 20581                           fsr1l	equ	0xFE1
 20582                           indf2	equ	0xFDF
 20583                           postinc2	equ	0xFDE
 20584                           postdec2	equ	0xFDD
 20585                           plusw2	equ	0xFDB
 20586                           fsr2h	equ	0xFDA
 20587                           fsr2l	equ	0xFD9
 20588                           status	equ	0xFD8
 20589                           
 20590 ;; *************** function _Byte_SetQuad *****************
 20591 ;; Defined at:
 20592 ;;		line 101 in file "Library/Types.c"
 20593 ;; Parameters:    Size  Location     Type
 20594 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 20595 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 20596 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20597 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20598 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20599 ;;		 -> NULL(0), 
 20600 ;;  pQuad           1   13[BANK0 ] unsigned char 
 20601 ;;  pValue          1   14[BANK0 ] unsigned char 
 20602 ;; Auto vars:     Size  Location     Type
 20603 ;;		None
 20604 ;; Return value:  Size  Location     Type
 20605 ;;                  1    wreg      void 
 20606 ;; Registers used:
 20607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20608 ;; Tracked objects:
 20609 ;;		On entry : 0/0
 20610 ;;		On exit  : 0/0
 20611 ;;		Unchanged: 0/0
 20612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20613 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20616 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20617 ;;Total ram usage:        4 bytes
 20618 ;; Hardware stack levels used:    1
 20619 ;; Hardware stack levels required when called:    8
 20620 ;; This function calls:
 20621 ;;		_Byte_SetZone
 20622 ;; This function is called by:
 20623 ;;		_Port_SetQuadType
 20624 ;;		_SPI_Init
 20625 ;;		_SPI_MinSpeed
 20626 ;;		_SPI_MaxSpeed
 20627 ;;		_Port_SetQuad
 20628 ;;		_Word_SetQuad
 20629 ;;		_I2C_Init
 20630 ;; This function uses a non-reentrant model
 20631 ;;
 20632                           
 20633                           	psect	text100
 20634  016B66                     __ptext100:
 20635                           	opt stack 0
 20636  016B66                     _Byte_SetQuad:
 20637                           	opt stack 19
 20638                           
 20639                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 20640                           
 20641                           ; BSR set to: 0
 20642                           ;incstack = 0
 20643  016B66  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 20644  016B6A  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 20645  016B6E  0E02               	movlw	2
 20646  016B70  0100               	movlb	0	; () banked
 20647  016B72  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 20648  016B74  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 20649  016B78  0E04               	movlw	4
 20650  016B7A  0100               	movlb	0	; () banked
 20651  016B7C  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 20652  016B7E  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 20653  016B82  EC09  F0A6         	call	_Byte_SetZone	;wreg free
 20654  016B86  0012               	return		;funcret
 20655  016B88                     __end_of_Byte_SetQuad:
 20656                           	opt stack 0
 20657                           tosu	equ	0xFFF
 20658                           tosh	equ	0xFFE
 20659                           tosl	equ	0xFFD
 20660                           pclath	equ	0xFFA
 20661                           tblptru	equ	0xFF8
 20662                           tblptrh	equ	0xFF7
 20663                           tblptrl	equ	0xFF6
 20664                           tablat	equ	0xFF5
 20665                           prodh	equ	0xFF4
 20666                           prodl	equ	0xFF3
 20667                           intcon	equ	0xFF2
 20668                           indf0	equ	0xFEF
 20669                           postinc0	equ	0xFEE
 20670                           fsr0h	equ	0xFEA
 20671                           fsr0l	equ	0xFE9
 20672                           wreg	equ	0xFE8
 20673                           indf1	equ	0xFE7
 20674                           postdec1	equ	0xFE5
 20675                           fsr1h	equ	0xFE2
 20676                           fsr1l	equ	0xFE1
 20677                           indf2	equ	0xFDF
 20678                           postinc2	equ	0xFDE
 20679                           postdec2	equ	0xFDD
 20680                           plusw2	equ	0xFDB
 20681                           fsr2h	equ	0xFDA
 20682                           fsr2l	equ	0xFD9
 20683                           status	equ	0xFD8
 20684                           
 20685 ;; *************** function _Byte_SetZone *****************
 20686 ;; Defined at:
 20687 ;;		line 47 in file "Library/Types.c"
 20688 ;; Parameters:    Size  Location     Type
 20689 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20690 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 20691 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 20692 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 20693 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 20694 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20695 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20696 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20697 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20698 ;;  pMax            1    2[BANK0 ] unsigned char 
 20699 ;;  pChunk          1    3[BANK0 ] unsigned char 
 20700 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 20701 ;;  pValue          1    5[BANK0 ] unsigned char 
 20702 ;; Auto vars:     Size  Location     Type
 20703 ;;  MASK            1   10[BANK0 ] unsigned char 
 20704 ;;  Offset          1    9[BANK0 ] unsigned char 
 20705 ;; Return value:  Size  Location     Type
 20706 ;;                  1    wreg      void 
 20707 ;; Registers used:
 20708 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20709 ;; Tracked objects:
 20710 ;;		On entry : 0/0
 20711 ;;		On exit  : 0/0
 20712 ;;		Unchanged: 0/0
 20713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20714 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20716 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20717 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20718 ;;Total ram usage:       11 bytes
 20719 ;; Hardware stack levels used:    1
 20720 ;; Hardware stack levels required when called:    7
 20721 ;; This function calls:
 20722 ;;		Nothing
 20723 ;; This function is called by:
 20724 ;;		_Byte_SetPair
 20725 ;;		_Byte_SetQuad
 20726 ;;		_Byte_SetTriple
 20727 ;; This function uses a non-reentrant model
 20728 ;;
 20729                           
 20730                           	psect	text101
 20731  014C12                     __ptext101:
 20732                           	opt stack 0
 20733  014C12                     _Byte_SetZone:
 20734                           	opt stack 18
 20735                           
 20736                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 20737                           
 20738                           ;incstack = 0
 20739  014C12  0100               	movlb	0	; () banked
 20740  014C14  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 20741  014C16  0D01               	mullw	1
 20742  014C18  0EBF               	movlw	low _MASKS
 20743  014C1A  24F3               	addwf	prodl,w,c
 20744  014C1C  6EF6               	movwf	tblptrl,c
 20745  014C1E  0EFC               	movlw	high _MASKS
 20746  014C20  20F4               	addwfc	prodh,w,c
 20747  014C22  6EF7               	movwf	tblptrh,c
 20748  014C24                     	if	1	;There are 3 active tblptr bytes
 20749  014C24  6AF8               	clrf	tblptru,c
 20750  014C26  0E00               	movlw	low (__mediumconst shr (0+16))
 20751  014C28  22F8               	addwfc	tblptru,f,c
 20752  014C2A                     	endif
 20753  014C2A  0008               	tblrd		*
 20754  014C2C  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 20755                           
 20756                           ; BSR set to: 0
 20757                           ;Types.c: 50: UINT8 Offset = 0;
 20758  014C30  0E00               	movlw	0
 20759  014C32  0100               	movlb	0	; () banked
 20760  014C34  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 20761                           
 20762                           ;Types.c: 52: while (pChunk >= pMax)
 20763  014C36  D006               	goto	l726
 20764  014C38                     
 20765                           ; BSR set to: 0
 20766                           ;Types.c: 53: {
 20767                           ;Types.c: 54: pChunk -= pMax;
 20768                           
 20769                           ; BSR set to: 0
 20770  014C38  0100               	movlb	0	; () banked
 20771  014C3A  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 20772  014C3C  0100               	movlb	0	; () banked
 20773  014C3E  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 20774                           
 20775                           ; BSR set to: 0
 20776                           ;Types.c: 55: Offset += 1;
 20777  014C40  0100               	movlb	0	; () banked
 20778  014C42  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 20779  014C44                     l726:
 20780                           
 20781                           ; BSR set to: 0
 20782                           
 20783                           ; BSR set to: 0
 20784  014C44  0100               	movlb	0	; () banked
 20785  014C46  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 20786  014C48  0100               	movlb	0	; () banked
 20787  014C4A  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 20788  014C4C  B0D8               	btfsc	status,0,c
 20789  014C4E  D7F4               	goto	l727
 20790                           
 20791                           ; BSR set to: 0
 20792                           ;Types.c: 56: }
 20793                           ;Types.c: 57: pChunk *= pChunkSize;
 20794                           
 20795                           ; BSR set to: 0
 20796  014C50  0100               	movlb	0	; () banked
 20797  014C52  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 20798  014C54  0100               	movlb	0	; () banked
 20799  014C56  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 20800  014C58  50F3               	movf	prodl,w,c
 20801  014C5A  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 20802                           
 20803                           ; BSR set to: 0
 20804                           ;Types.c: 58: pChunk += Offset;
 20805  014C5C  0100               	movlb	0	; () banked
 20806  014C5E  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 20807  014C60  0100               	movlb	0	; () banked
 20808  014C62  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 20809                           
 20810                           ; BSR set to: 0
 20811                           ;Types.c: 60: pValue &= MASK;
 20812  014C64  0100               	movlb	0	; () banked
 20813  014C66  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 20814  014C68  0100               	movlb	0	; () banked
 20815  014C6A  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 20816                           
 20817                           ; BSR set to: 0
 20818                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 20819  014C6C  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 20820  014C70  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 20821  014C74  0100               	movlb	0	; () banked
 20822  014C76  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 20823  014C78  D003               	goto	u9154
 20824  014C7A                     u9155:
 20825  014C7A  0100               	movlb	0	; () banked
 20826  014C7C  90D8               	bcf	status,0,c
 20827  014C7E  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 20828  014C80                     u9154:
 20829  014C80  0100               	movlb	0	; () banked
 20830  014C82  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 20831  014C84  D7FA               	goto	u9155
 20832  014C86  0100               	movlb	0	; () banked
 20833  014C88  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 20834  014C8A  0AFF               	xorlw	255
 20835  014C8C  0100               	movlb	0	; () banked
 20836  014C8E  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 20837  014C90  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 20838  014C94  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 20839  014C98  0100               	movlb	0	; () banked
 20840  014C9A  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 20841  014C9C  16DF               	andwf	indf2,f,c
 20842                           
 20843                           ; BSR set to: 0
 20844                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 20845  014C9E  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 20846  014CA2  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 20847  014CA6  0100               	movlb	0	; () banked
 20848  014CA8  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 20849  014CAA  D003               	goto	u9164
 20850  014CAC                     u9165:
 20851  014CAC  0100               	movlb	0	; () banked
 20852  014CAE  90D8               	bcf	status,0,c
 20853  014CB0  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 20854  014CB2                     u9164:
 20855  014CB2  0100               	movlb	0	; () banked
 20856  014CB4  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 20857  014CB6  D7FA               	goto	u9165
 20858  014CB8  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 20859  014CBC  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 20860  014CC0  0100               	movlb	0	; () banked
 20861  014CC2  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 20862  014CC4  12DF               	iorwf	indf2,f,c
 20863                           
 20864                           ; BSR set to: 0
 20865  014CC6  0012               	return		;funcret
 20866  014CC8                     __end_of_Byte_SetZone:
 20867                           	opt stack 0
 20868                           tosu	equ	0xFFF
 20869                           tosh	equ	0xFFE
 20870                           tosl	equ	0xFFD
 20871                           pclath	equ	0xFFA
 20872                           tblptru	equ	0xFF8
 20873                           tblptrh	equ	0xFF7
 20874                           tblptrl	equ	0xFF6
 20875                           tablat	equ	0xFF5
 20876                           prodh	equ	0xFF4
 20877                           prodl	equ	0xFF3
 20878                           intcon	equ	0xFF2
 20879                           indf0	equ	0xFEF
 20880                           postinc0	equ	0xFEE
 20881                           fsr0h	equ	0xFEA
 20882                           fsr0l	equ	0xFE9
 20883                           wreg	equ	0xFE8
 20884                           indf1	equ	0xFE7
 20885                           postdec1	equ	0xFE5
 20886                           fsr1h	equ	0xFE2
 20887                           fsr1l	equ	0xFE1
 20888                           indf2	equ	0xFDF
 20889                           postinc2	equ	0xFDE
 20890                           postdec2	equ	0xFDD
 20891                           plusw2	equ	0xFDB
 20892                           fsr2h	equ	0xFDA
 20893                           fsr2l	equ	0xFD9
 20894                           status	equ	0xFD8
 20895                           
 20896 ;; *************** function _FunctInitADC *****************
 20897 ;; Defined at:
 20898 ;;		line 31 in file "Functions.c"
 20899 ;; Parameters:    Size  Location     Type
 20900 ;;		None
 20901 ;; Auto vars:     Size  Location     Type
 20902 ;;		None
 20903 ;; Return value:  Size  Location     Type
 20904 ;;                  1    wreg      void 
 20905 ;; Registers used:
 20906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20907 ;; Tracked objects:
 20908 ;;		On entry : 0/0
 20909 ;;		On exit  : 0/0
 20910 ;;		Unchanged: 0/0
 20911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20916 ;;Total ram usage:        0 bytes
 20917 ;; Hardware stack levels used:    1
 20918 ;; Hardware stack levels required when called:   10
 20919 ;; This function calls:
 20920 ;;		_ADC_Init
 20921 ;;		_ADC_Sequence
 20922 ;; This function is called by:
 20923 ;;		_initialise
 20924 ;; This function uses a non-reentrant model
 20925 ;;
 20926                           
 20927                           	psect	text102
 20928  014D78                     __ptext102:
 20929                           	opt stack 0
 20930  014D78                     _FunctInitADC:
 20931                           	opt stack 19
 20932                           
 20933                           ;Functions.c: 33: ADC_Init(&ADC_AN0, eADC_Ch0);
 20934                           
 20935                           ; BSR set to: 0
 20936                           ;incstack = 0
 20937  014D78  0ED8               	movlw	low _ADC_AN0
 20938  014D7A  0100               	movlb	0	; () banked
 20939  014D7C  6F64               	movwf	ADC_Init@pInput& (0+255),b
 20940  014D7E  0E01               	movlw	high _ADC_AN0
 20941  014D80  0100               	movlb	0	; () banked
 20942  014D82  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 20943  014D84  0E00               	movlw	0
 20944  014D86  0100               	movlb	0	; () banked
 20945  014D88  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 20946  014D8A  EC63  F0AC         	call	_ADC_Init	;wreg free
 20947                           
 20948                           ;Functions.c: 34: ADC_Init(&ADC_AN1, eADC_Ch1);
 20949  014D8E  0ED3               	movlw	low _ADC_AN1
 20950  014D90  0100               	movlb	0	; () banked
 20951  014D92  6F64               	movwf	ADC_Init@pInput& (0+255),b
 20952  014D94  0E01               	movlw	high _ADC_AN1
 20953  014D96  0100               	movlb	0	; () banked
 20954  014D98  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 20955  014D9A  0E01               	movlw	1
 20956  014D9C  0100               	movlb	0	; () banked
 20957  014D9E  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 20958  014DA0  EC63  F0AC         	call	_ADC_Init	;wreg free
 20959                           
 20960                           ;Functions.c: 35: ADC_Init(&ADC_AN2, eADC_Ch2);
 20961  014DA4  0ECE               	movlw	low _ADC_AN2
 20962  014DA6  0100               	movlb	0	; () banked
 20963  014DA8  6F64               	movwf	ADC_Init@pInput& (0+255),b
 20964  014DAA  0E01               	movlw	high _ADC_AN2
 20965  014DAC  0100               	movlb	0	; () banked
 20966  014DAE  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 20967  014DB0  0E02               	movlw	2
 20968  014DB2  0100               	movlb	0	; () banked
 20969  014DB4  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 20970  014DB6  EC63  F0AC         	call	_ADC_Init	;wreg free
 20971                           
 20972                           ;Functions.c: 36: ADC_Init(&ADC_AN3, eADC_Ch3);
 20973  014DBA  0EC9               	movlw	low _ADC_AN3
 20974  014DBC  0100               	movlb	0	; () banked
 20975  014DBE  6F64               	movwf	ADC_Init@pInput& (0+255),b
 20976  014DC0  0E01               	movlw	high _ADC_AN3
 20977  014DC2  0100               	movlb	0	; () banked
 20978  014DC4  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 20979  014DC6  0E03               	movlw	3
 20980  014DC8  0100               	movlb	0	; () banked
 20981  014DCA  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 20982  014DCC  EC63  F0AC         	call	_ADC_Init	;wreg free
 20983                           
 20984                           ;Functions.c: 39: ADC_Sequence(&ADC_AN0, &ADC_AN1);
 20985  014DD0  0ED8               	movlw	low _ADC_AN0
 20986  014DD2  0100               	movlb	0	; () banked
 20987  014DD4  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 20988  014DD6  0E01               	movlw	high _ADC_AN0
 20989  014DD8  0100               	movlb	0	; () banked
 20990  014DDA  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 20991  014DDC  0ED3               	movlw	low _ADC_AN1
 20992  014DDE  0100               	movlb	0	; () banked
 20993  014DE0  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 20994  014DE2  0E01               	movlw	high _ADC_AN1
 20995  014DE4  0100               	movlb	0	; () banked
 20996  014DE6  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 20997  014DE8  ECD0  F0B2         	call	_ADC_Sequence	;wreg free
 20998                           
 20999                           ;Functions.c: 40: ADC_Sequence(&ADC_AN1, &ADC_AN2);
 21000  014DEC  0ED3               	movlw	low _ADC_AN1
 21001  014DEE  0100               	movlb	0	; () banked
 21002  014DF0  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 21003  014DF2  0E01               	movlw	high _ADC_AN1
 21004  014DF4  0100               	movlb	0	; () banked
 21005  014DF6  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 21006  014DF8  0ECE               	movlw	low _ADC_AN2
 21007  014DFA  0100               	movlb	0	; () banked
 21008  014DFC  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 21009  014DFE  0E01               	movlw	high _ADC_AN2
 21010  014E00  0100               	movlb	0	; () banked
 21011  014E02  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 21012  014E04  ECD0  F0B2         	call	_ADC_Sequence	;wreg free
 21013                           
 21014                           ;Functions.c: 41: ADC_Sequence(&ADC_AN2, &ADC_AN3);
 21015  014E08  0ECE               	movlw	low _ADC_AN2
 21016  014E0A  0100               	movlb	0	; () banked
 21017  014E0C  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 21018  014E0E  0E01               	movlw	high _ADC_AN2
 21019  014E10  0100               	movlb	0	; () banked
 21020  014E12  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 21021  014E14  0EC9               	movlw	low _ADC_AN3
 21022  014E16  0100               	movlb	0	; () banked
 21023  014E18  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 21024  014E1A  0E01               	movlw	high _ADC_AN3
 21025  014E1C  0100               	movlb	0	; () banked
 21026  014E1E  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 21027  014E20  ECD0  F0B2         	call	_ADC_Sequence	;wreg free
 21028  014E24  0012               	return		;funcret
 21029  014E26                     __end_of_FunctInitADC:
 21030                           	opt stack 0
 21031                           tosu	equ	0xFFF
 21032                           tosh	equ	0xFFE
 21033                           tosl	equ	0xFFD
 21034                           pclath	equ	0xFFA
 21035                           tblptru	equ	0xFF8
 21036                           tblptrh	equ	0xFF7
 21037                           tblptrl	equ	0xFF6
 21038                           tablat	equ	0xFF5
 21039                           prodh	equ	0xFF4
 21040                           prodl	equ	0xFF3
 21041                           intcon	equ	0xFF2
 21042                           indf0	equ	0xFEF
 21043                           postinc0	equ	0xFEE
 21044                           fsr0h	equ	0xFEA
 21045                           fsr0l	equ	0xFE9
 21046                           wreg	equ	0xFE8
 21047                           indf1	equ	0xFE7
 21048                           postdec1	equ	0xFE5
 21049                           fsr1h	equ	0xFE2
 21050                           fsr1l	equ	0xFE1
 21051                           indf2	equ	0xFDF
 21052                           postinc2	equ	0xFDE
 21053                           postdec2	equ	0xFDD
 21054                           plusw2	equ	0xFDB
 21055                           fsr2h	equ	0xFDA
 21056                           fsr2l	equ	0xFD9
 21057                           status	equ	0xFD8
 21058                           
 21059 ;; *************** function _ADC_Sequence *****************
 21060 ;; Defined at:
 21061 ;;		line 101 in file "Library/ADC.c"
 21062 ;; Parameters:    Size  Location     Type
 21063 ;;  pItemA          2    0[BANK0 ] PTR struct ADC
 21064 ;;		 -> ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 21065 ;;  pItemB          2    2[BANK0 ] PTR struct ADC
 21066 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), 
 21067 ;; Auto vars:     Size  Location     Type
 21068 ;;		None
 21069 ;; Return value:  Size  Location     Type
 21070 ;;                  1    wreg      void 
 21071 ;; Registers used:
 21072 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21073 ;; Tracked objects:
 21074 ;;		On entry : 0/0
 21075 ;;		On exit  : 0/0
 21076 ;;		Unchanged: 0/0
 21077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21078 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21081 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21082 ;;Total ram usage:        4 bytes
 21083 ;; Hardware stack levels used:    1
 21084 ;; Hardware stack levels required when called:    7
 21085 ;; This function calls:
 21086 ;;		Nothing
 21087 ;; This function is called by:
 21088 ;;		_FunctInitADC
 21089 ;; This function uses a non-reentrant model
 21090 ;;
 21091                           
 21092                           	psect	text103
 21093  0165A0                     __ptext103:
 21094                           	opt stack 0
 21095  0165A0                     _ADC_Sequence:
 21096                           	opt stack 21
 21097                           
 21098                           ;ADC.c: 103: if(pItemA==(void*)0)
 21099                           
 21100                           ;incstack = 0
 21101  0165A0  0100               	movlb	0	; () banked
 21102  0165A2  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 21103  0165A4  0100               	movlb	0	; () banked
 21104  0165A6  1161               	iorwf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 21105  0165A8  B4D8               	btfsc	status,2,c
 21106  0165AA  0012               	return	
 21107                           
 21108                           ; BSR set to: 0
 21109                           ;ADC.c: 105: if(pItemB==(void*)0)
 21110                           
 21111                           ; BSR set to: 0
 21112                           
 21113                           ; BSR set to: 0
 21114                           ;ADC.c: 104: return;
 21115  0165AC  0100               	movlb	0	; () banked
 21116  0165AE  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 21117  0165B0  0100               	movlb	0	; () banked
 21118  0165B2  1163               	iorwf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 21119  0165B4  B4D8               	btfsc	status,2,c
 21120  0165B6  0012               	return	
 21121                           
 21122                           ; BSR set to: 0
 21123                           ;ADC.c: 109: pItemA->mNext = pItemB;
 21124                           
 21125                           ; BSR set to: 0
 21126                           
 21127                           ; BSR set to: 0
 21128                           ;ADC.c: 106: return;
 21129  0165B8  0100               	movlb	0	; () banked
 21130  0165BA  EE20 F003          	lfsr	2,3
 21131  0165BE  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 21132  0165C0  26D9               	addwf	fsr2l,f,c
 21133  0165C2  5161               	movf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 21134  0165C4  22DA               	addwfc	fsr2h,f,c
 21135  0165C6  C062  FFDE         	movff	ADC_Sequence@pItemB,postinc2
 21136  0165CA  C063  FFDD         	movff	ADC_Sequence@pItemB+1,postdec2
 21137                           
 21138                           ;ADC.c: 110: pItemB->mNext = 0;
 21139  0165CE  0100               	movlb	0	; () banked
 21140  0165D0  EE20 F003          	lfsr	2,3
 21141  0165D4  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 21142  0165D6  26D9               	addwf	fsr2l,f,c
 21143  0165D8  5163               	movf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 21144  0165DA  22DA               	addwfc	fsr2h,f,c
 21145  0165DC  0E00               	movlw	0
 21146  0165DE  6EDE               	movwf	postinc2,c
 21147  0165E0  0E00               	movlw	0
 21148  0165E2  6EDD               	movwf	postdec2,c
 21149                           
 21150                           ; BSR set to: 0
 21151  0165E4  0012               	return		;funcret
 21152  0165E6                     __end_of_ADC_Sequence:
 21153                           	opt stack 0
 21154                           tosu	equ	0xFFF
 21155                           tosh	equ	0xFFE
 21156                           tosl	equ	0xFFD
 21157                           pclath	equ	0xFFA
 21158                           tblptru	equ	0xFF8
 21159                           tblptrh	equ	0xFF7
 21160                           tblptrl	equ	0xFF6
 21161                           tablat	equ	0xFF5
 21162                           prodh	equ	0xFF4
 21163                           prodl	equ	0xFF3
 21164                           intcon	equ	0xFF2
 21165                           indf0	equ	0xFEF
 21166                           postinc0	equ	0xFEE
 21167                           fsr0h	equ	0xFEA
 21168                           fsr0l	equ	0xFE9
 21169                           wreg	equ	0xFE8
 21170                           indf1	equ	0xFE7
 21171                           postdec1	equ	0xFE5
 21172                           fsr1h	equ	0xFE2
 21173                           fsr1l	equ	0xFE1
 21174                           indf2	equ	0xFDF
 21175                           postinc2	equ	0xFDE
 21176                           postdec2	equ	0xFDD
 21177                           plusw2	equ	0xFDB
 21178                           fsr2h	equ	0xFDA
 21179                           fsr2l	equ	0xFD9
 21180                           status	equ	0xFD8
 21181                           
 21182 ;; *************** function _ADC_Init *****************
 21183 ;; Defined at:
 21184 ;;		line 19 in file "Library/ADC.c"
 21185 ;; Parameters:    Size  Location     Type
 21186 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 21187 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 21188 ;;  pChannel        1    6[BANK0 ] enum E6742
 21189 ;; Auto vars:     Size  Location     Type
 21190 ;;		None
 21191 ;; Return value:  Size  Location     Type
 21192 ;;                  1    wreg      void 
 21193 ;; Registers used:
 21194 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21195 ;; Tracked objects:
 21196 ;;		On entry : 0/0
 21197 ;;		On exit  : 0/0
 21198 ;;		Unchanged: 0/0
 21199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21200 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21202 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21203 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21204 ;;Total ram usage:        3 bytes
 21205 ;; Hardware stack levels used:    1
 21206 ;; Hardware stack levels required when called:    9
 21207 ;; This function calls:
 21208 ;;		_ADC_Calibrate
 21209 ;;		_ADC_ClockDivision
 21210 ;;		_ADC_ConversionTime
 21211 ;;		_ADC_SetChannel
 21212 ;;		_ADC_SetupIO
 21213 ;; This function is called by:
 21214 ;;		_FunctInitADC
 21215 ;; This function uses a non-reentrant model
 21216 ;;
 21217                           
 21218                           	psect	text104
 21219  0158C6                     __ptext104:
 21220                           	opt stack 0
 21221  0158C6                     _ADC_Init:
 21222                           	opt stack 19
 21223                           
 21224                           ;ADC.c: 21: if(pInput==(void*)0)
 21225                           
 21226                           ; BSR set to: 0
 21227                           ;incstack = 0
 21228  0158C6  0100               	movlb	0	; () banked
 21229  0158C8  5164               	movf	ADC_Init@pInput& (0+255),w,b
 21230  0158CA  0100               	movlb	0	; () banked
 21231  0158CC  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 21232  0158CE  B4D8               	btfsc	status,2,c
 21233  0158D0  0012               	return	
 21234                           
 21235                           ; BSR set to: 0
 21236                           ;ADC.c: 25: lCurrent = pInput;
 21237                           
 21238                           ; BSR set to: 0
 21239                           
 21240                           ; BSR set to: 0
 21241                           ;ADC.c: 22: return;
 21242  0158D2  C064  F0F3         	movff	ADC_Init@pInput,_lCurrent
 21243  0158D6  C065  F0F4         	movff	ADC_Init@pInput+1,_lCurrent+1
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;ADC.c: 27: pInput->mChannel = pChannel;
 21247  0158DA  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 21248  0158DE  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 21249  0158E2  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 21250                           
 21251                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 21252  0158E6  0100               	movlb	0	; () banked
 21253  0158E8  EE20 F003          	lfsr	2,3
 21254  0158EC  5164               	movf	ADC_Init@pInput& (0+255),w,b
 21255  0158EE  26D9               	addwf	fsr2l,f,c
 21256  0158F0  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 21257  0158F2  22DA               	addwfc	fsr2h,f,c
 21258  0158F4  0E00               	movlw	0
 21259  0158F6  6EDE               	movwf	postinc2,c
 21260  0158F8  0E00               	movlw	0
 21261  0158FA  6EDD               	movwf	postdec2,c
 21262                           
 21263                           ;ADC.c: 29: pInput->mValue = 0;
 21264  0158FC  0100               	movlb	0	; () banked
 21265  0158FE  EE20 F001          	lfsr	2,1
 21266  015902  5164               	movf	ADC_Init@pInput& (0+255),w,b
 21267  015904  26D9               	addwf	fsr2l,f,c
 21268  015906  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 21269  015908  22DA               	addwfc	fsr2h,f,c
 21270  01590A  0E00               	movlw	0
 21271  01590C  6EDE               	movwf	postinc2,c
 21272  01590E  0E00               	movlw	0
 21273  015910  6EDD               	movwf	postdec2,c
 21274                           
 21275                           ; BSR set to: 0
 21276                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 21277  015912  0100               	movlb	0	; () banked
 21278  015914  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 21279  015916  EC5C  F0B6         	call	_ADC_SetChannel
 21280                           
 21281                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 21282  01591A  9EC2               	bcf	4034,7,c	;volatile
 21283                           
 21284                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 21285  01591C  9CC2               	bcf	4034,6,c	;volatile
 21286                           
 21287                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 21288  01591E  8EC1               	bsf	4033,7,c	;volatile
 21289                           
 21290                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 21291  015920  8CC1               	bsf	4033,6,c	;volatile
 21292                           
 21293                           ;ADC.c: 43: ADC_ConversionTime(12);
 21294  015922  0E0C               	movlw	12
 21295  015924  EC66  F0B2         	call	_ADC_ConversionTime
 21296                           
 21297                           ;ADC.c: 47: ADC_ClockDivision(16);
 21298  015928  0E10               	movlw	16
 21299  01592A  EC18  F0AB         	call	_ADC_ClockDivision
 21300                           
 21301                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 21302  01592E  0100               	movlb	0	; () banked
 21303  015930  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 21304  015932  EC96  F0B4         	call	_ADC_SetupIO
 21305                           
 21306                           ;ADC.c: 58: ADC_Initialised = 1;
 21307  015936  0E01               	movlw	1
 21308  015938  0101               	movlb	1	; () banked
 21309  01593A  6F2F               	movwf	_ADC_Initialised& (0+255),b
 21310                           
 21311                           ; BSR set to: 1
 21312                           ;ADC.c: 61: ADC_Calibrate();
 21313  01593C  ECD5  F0B6         	call	_ADC_Calibrate	;wreg free
 21314  015940  0012               	return		;funcret
 21315  015942                     __end_of_ADC_Init:
 21316                           	opt stack 0
 21317                           tosu	equ	0xFFF
 21318                           tosh	equ	0xFFE
 21319                           tosl	equ	0xFFD
 21320                           pclath	equ	0xFFA
 21321                           tblptru	equ	0xFF8
 21322                           tblptrh	equ	0xFF7
 21323                           tblptrl	equ	0xFF6
 21324                           tablat	equ	0xFF5
 21325                           prodh	equ	0xFF4
 21326                           prodl	equ	0xFF3
 21327                           intcon	equ	0xFF2
 21328                           indf0	equ	0xFEF
 21329                           postinc0	equ	0xFEE
 21330                           fsr0h	equ	0xFEA
 21331                           fsr0l	equ	0xFE9
 21332                           wreg	equ	0xFE8
 21333                           indf1	equ	0xFE7
 21334                           postdec1	equ	0xFE5
 21335                           fsr1h	equ	0xFE2
 21336                           fsr1l	equ	0xFE1
 21337                           indf2	equ	0xFDF
 21338                           postinc2	equ	0xFDE
 21339                           postdec2	equ	0xFDD
 21340                           plusw2	equ	0xFDB
 21341                           fsr2h	equ	0xFDA
 21342                           fsr2l	equ	0xFD9
 21343                           status	equ	0xFD8
 21344                           
 21345 ;; *************** function _ADC_SetupIO *****************
 21346 ;; Defined at:
 21347 ;;		line 150 in file "Library/ADC.c"
 21348 ;; Parameters:    Size  Location     Type
 21349 ;;  pChannel        1    wreg     enum E6742
 21350 ;; Auto vars:     Size  Location     Type
 21351 ;;  pChannel        1    2[BANK0 ] enum E6742
 21352 ;;  MASK            1    3[BANK0 ] unsigned char 
 21353 ;; Return value:  Size  Location     Type
 21354 ;;                  1    wreg      void 
 21355 ;; Registers used:
 21356 ;;		wreg, status,2, status,0
 21357 ;; Tracked objects:
 21358 ;;		On entry : 0/0
 21359 ;;		On exit  : 0/0
 21360 ;;		Unchanged: 0/0
 21361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21364 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21365 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21366 ;;Total ram usage:        4 bytes
 21367 ;; Hardware stack levels used:    1
 21368 ;; Hardware stack levels required when called:    7
 21369 ;; This function calls:
 21370 ;;		Nothing
 21371 ;; This function is called by:
 21372 ;;		_ADC_Init
 21373 ;; This function uses a non-reentrant model
 21374 ;;
 21375                           
 21376                           	psect	text105
 21377  01692C                     __ptext105:
 21378                           	opt stack 0
 21379  01692C                     _ADC_SetupIO:
 21380                           	opt stack 20
 21381                           
 21382                           ;incstack = 0
 21383                           ;ADC_SetupIO@pChannel stored from wreg
 21384  01692C  0100               	movlb	0	; () banked
 21385  01692E  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 21386                           
 21387                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 21388  016930  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 21389  016934  0E01               	movlw	1
 21390  016936  0100               	movlb	0	; () banked
 21391  016938  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 21392  01693A  0100               	movlb	0	; () banked
 21393  01693C  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 21394  01693E  D003               	goto	u9974
 21395  016940                     u9975:
 21396  016940  0100               	movlb	0	; () banked
 21397  016942  90D8               	bcf	status,0,c
 21398  016944  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 21399  016946                     u9974:
 21400  016946  0100               	movlb	0	; () banked
 21401  016948  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 21402  01694A  D7FA               	goto	u9975
 21403  01694C  0100               	movlb	0	; () banked
 21404  01694E  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 21405  016950  0AFF               	xorlw	255
 21406  016952  0100               	movlb	0	; () banked
 21407  016954  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 21408                           
 21409                           ;ADC.c: 153: ANCON0 &= MASK;
 21410  016956  0100               	movlb	0	; () banked
 21411  016958  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 21412  01695A  16C1               	andwf	4033,f,c	;volatile
 21413                           
 21414                           ; BSR set to: 0
 21415  01695C  0012               	return		;funcret
 21416  01695E                     __end_of_ADC_SetupIO:
 21417                           	opt stack 0
 21418                           tosu	equ	0xFFF
 21419                           tosh	equ	0xFFE
 21420                           tosl	equ	0xFFD
 21421                           pclath	equ	0xFFA
 21422                           tblptru	equ	0xFF8
 21423                           tblptrh	equ	0xFF7
 21424                           tblptrl	equ	0xFF6
 21425                           tablat	equ	0xFF5
 21426                           prodh	equ	0xFF4
 21427                           prodl	equ	0xFF3
 21428                           intcon	equ	0xFF2
 21429                           indf0	equ	0xFEF
 21430                           postinc0	equ	0xFEE
 21431                           fsr0h	equ	0xFEA
 21432                           fsr0l	equ	0xFE9
 21433                           wreg	equ	0xFE8
 21434                           indf1	equ	0xFE7
 21435                           postdec1	equ	0xFE5
 21436                           fsr1h	equ	0xFE2
 21437                           fsr1l	equ	0xFE1
 21438                           indf2	equ	0xFDF
 21439                           postinc2	equ	0xFDE
 21440                           postdec2	equ	0xFDD
 21441                           plusw2	equ	0xFDB
 21442                           fsr2h	equ	0xFDA
 21443                           fsr2l	equ	0xFD9
 21444                           status	equ	0xFD8
 21445                           
 21446 ;; *************** function _ADC_SetChannel *****************
 21447 ;; Defined at:
 21448 ;;		line 155 in file "Library/ADC.c"
 21449 ;; Parameters:    Size  Location     Type
 21450 ;;  pChannel        1    wreg     enum E6742
 21451 ;; Auto vars:     Size  Location     Type
 21452 ;;  pChannel        1    1[BANK0 ] enum E6742
 21453 ;; Return value:  Size  Location     Type
 21454 ;;                  1    wreg      void 
 21455 ;; Registers used:
 21456 ;;		wreg, status,2, status,0
 21457 ;; Tracked objects:
 21458 ;;		On entry : 0/0
 21459 ;;		On exit  : 0/0
 21460 ;;		Unchanged: 0/0
 21461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21466 ;;Total ram usage:        2 bytes
 21467 ;; Hardware stack levels used:    1
 21468 ;; Hardware stack levels required when called:    7
 21469 ;; This function calls:
 21470 ;;		Nothing
 21471 ;; This function is called by:
 21472 ;;		_ADC_Init
 21473 ;;		_ADC_Start
 21474 ;;		_ADC_ISR
 21475 ;;		_ADC_Sample
 21476 ;; This function uses a non-reentrant model
 21477 ;;
 21478                           
 21479                           	psect	text106
 21480  016CB8                     __ptext106:
 21481                           	opt stack 0
 21482  016CB8                     _ADC_SetChannel:
 21483                           	opt stack 19
 21484                           
 21485                           ; BSR set to: 0
 21486                           ;incstack = 0
 21487                           ;ADC_SetChannel@pChannel stored from wreg
 21488  016CB8  0100               	movlb	0	; () banked
 21489  016CBA  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 21490                           
 21491                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 21492  016CBC  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 21493  016CC0  0100               	movlb	0	; () banked
 21494  016CC2  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 21495  016CC4  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 21496  016CC6  50C2               	movf	4034,w,c	;volatile
 21497  016CC8  0100               	movlb	0	; () banked
 21498  016CCA  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 21499  016CCC  0BC3               	andlw	-61
 21500  016CCE  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 21501  016CD0  6EC2               	movwf	4034,c	;volatile
 21502                           
 21503                           ; BSR set to: 0
 21504  016CD2  0012               	return		;funcret
 21505  016CD4                     __end_of_ADC_SetChannel:
 21506                           	opt stack 0
 21507                           tosu	equ	0xFFF
 21508                           tosh	equ	0xFFE
 21509                           tosl	equ	0xFFD
 21510                           pclath	equ	0xFFA
 21511                           tblptru	equ	0xFF8
 21512                           tblptrh	equ	0xFF7
 21513                           tblptrl	equ	0xFF6
 21514                           tablat	equ	0xFF5
 21515                           prodh	equ	0xFF4
 21516                           prodl	equ	0xFF3
 21517                           intcon	equ	0xFF2
 21518                           indf0	equ	0xFEF
 21519                           postinc0	equ	0xFEE
 21520                           fsr0h	equ	0xFEA
 21521                           fsr0l	equ	0xFE9
 21522                           wreg	equ	0xFE8
 21523                           indf1	equ	0xFE7
 21524                           postdec1	equ	0xFE5
 21525                           fsr1h	equ	0xFE2
 21526                           fsr1l	equ	0xFE1
 21527                           indf2	equ	0xFDF
 21528                           postinc2	equ	0xFDE
 21529                           postdec2	equ	0xFDD
 21530                           plusw2	equ	0xFDB
 21531                           fsr2h	equ	0xFDA
 21532                           fsr2l	equ	0xFD9
 21533                           status	equ	0xFD8
 21534                           
 21535 ;; *************** function _ADC_ConversionTime *****************
 21536 ;; Defined at:
 21537 ;;		line 199 in file "Library/ADC.c"
 21538 ;; Parameters:    Size  Location     Type
 21539 ;;  pCount          1    wreg     unsigned char 
 21540 ;; Auto vars:     Size  Location     Type
 21541 ;;  pCount          1    1[BANK0 ] unsigned char 
 21542 ;; Return value:  Size  Location     Type
 21543 ;;                  1    wreg      void 
 21544 ;; Registers used:
 21545 ;;		wreg, status,2, status,0
 21546 ;; Tracked objects:
 21547 ;;		On entry : 0/0
 21548 ;;		On exit  : 0/0
 21549 ;;		Unchanged: 0/0
 21550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21553 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21554 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21555 ;;Total ram usage:        2 bytes
 21556 ;; Hardware stack levels used:    1
 21557 ;; Hardware stack levels required when called:    7
 21558 ;; This function calls:
 21559 ;;		Nothing
 21560 ;; This function is called by:
 21561 ;;		_ADC_Init
 21562 ;; This function uses a non-reentrant model
 21563 ;;
 21564                           
 21565                           	psect	text107
 21566  0164CC                     __ptext107:
 21567                           	opt stack 0
 21568  0164CC                     _ADC_ConversionTime:
 21569                           	opt stack 20
 21570                           
 21571                           ; BSR set to: 0
 21572                           ;incstack = 0
 21573                           ;ADC_ConversionTime@pCount stored from wreg
 21574  0164CC  0100               	movlb	0	; () banked
 21575  0164CE  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 21576                           
 21577                           ;ADC.c: 201: if (pCount == 10)
 21578  0164D0  0E0A               	movlw	10
 21579  0164D2  0100               	movlb	0	; () banked
 21580  0164D4  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 21581  0164D6  B4D8               	btfsc	status,2,c
 21582  0164D8  D00A               	goto	u9940
 21583                           
 21584                           ; BSR set to: 0
 21585                           ;ADC.c: 203: else if (pCount == 14)
 21586                           
 21587                           ; BSR set to: 0
 21588                           
 21589                           ; BSR set to: 0
 21590                           ;ADC.c: 202: pCount -= 2;
 21591  0164DA  0E0E               	movlw	14
 21592  0164DC  0100               	movlb	0	; () banked
 21593  0164DE  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 21594  0164E0  B4D8               	btfsc	status,2,c
 21595  0164E2  D005               	goto	u9940
 21596                           
 21597                           ; BSR set to: 0
 21598                           ;ADC.c: 205: else if (pCount == 18)
 21599                           
 21600                           ; BSR set to: 0
 21601                           
 21602                           ; BSR set to: 0
 21603                           ;ADC.c: 204: pCount -= 2;
 21604  0164E4  0E12               	movlw	18
 21605  0164E6  0100               	movlb	0	; () banked
 21606  0164E8  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 21607  0164EA  A4D8               	btfss	status,2,c
 21608  0164EC  D003               	goto	l1313
 21609  0164EE                     u9940:
 21610                           
 21611                           ; BSR set to: 0
 21612                           ;ADC.c: 206: pCount -= 2;
 21613  0164EE  0E02               	movlw	2
 21614  0164F0  0100               	movlb	0	; () banked
 21615  0164F2  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 21616  0164F4                     l1313:
 21617                           
 21618                           ; BSR set to: 0
 21619                           ;ADC.c: 208: pCount <<= 1;
 21620                           
 21621                           ; BSR set to: 0
 21622                           
 21623                           ; BSR set to: 0
 21624  0164F4  0100               	movlb	0	; () banked
 21625  0164F6  90D8               	bcf	status,0,c
 21626  0164F8  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 21627                           
 21628                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 21629  0164FA  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 21630  0164FE  0100               	movlb	0	; () banked
 21631  016500  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 21632  016502  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 21633  016504  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 21634  016506  50C1               	movf	4033,w,c	;volatile
 21635  016508  0100               	movlb	0	; () banked
 21636  01650A  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 21637  01650C  0BC7               	andlw	-57
 21638  01650E  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 21639  016510  6EC1               	movwf	4033,c	;volatile
 21640                           
 21641                           ; BSR set to: 0
 21642  016512  0012               	return		;funcret
 21643  016514                     __end_of_ADC_ConversionTime:
 21644                           	opt stack 0
 21645                           tosu	equ	0xFFF
 21646                           tosh	equ	0xFFE
 21647                           tosl	equ	0xFFD
 21648                           pclath	equ	0xFFA
 21649                           tblptru	equ	0xFF8
 21650                           tblptrh	equ	0xFF7
 21651                           tblptrl	equ	0xFF6
 21652                           tablat	equ	0xFF5
 21653                           prodh	equ	0xFF4
 21654                           prodl	equ	0xFF3
 21655                           intcon	equ	0xFF2
 21656                           indf0	equ	0xFEF
 21657                           postinc0	equ	0xFEE
 21658                           fsr0h	equ	0xFEA
 21659                           fsr0l	equ	0xFE9
 21660                           wreg	equ	0xFE8
 21661                           indf1	equ	0xFE7
 21662                           postdec1	equ	0xFE5
 21663                           fsr1h	equ	0xFE2
 21664                           fsr1l	equ	0xFE1
 21665                           indf2	equ	0xFDF
 21666                           postinc2	equ	0xFDE
 21667                           postdec2	equ	0xFDD
 21668                           plusw2	equ	0xFDB
 21669                           fsr2h	equ	0xFDA
 21670                           fsr2l	equ	0xFD9
 21671                           status	equ	0xFD8
 21672                           
 21673 ;; *************** function _ADC_ClockDivision *****************
 21674 ;; Defined at:
 21675 ;;		line 159 in file "Library/ADC.c"
 21676 ;; Parameters:    Size  Location     Type
 21677 ;;  pDivide         1    wreg     unsigned char 
 21678 ;; Auto vars:     Size  Location     Type
 21679 ;;  pDivide         1    0[BANK0 ] unsigned char 
 21680 ;;  unfound         1    2[BANK0 ] unsigned char 
 21681 ;;  reg             1    1[BANK0 ] unsigned char 
 21682 ;; Return value:  Size  Location     Type
 21683 ;;                  1    wreg      void 
 21684 ;; Registers used:
 21685 ;;		wreg, status,2, status,0
 21686 ;; Tracked objects:
 21687 ;;		On entry : 0/0
 21688 ;;		On exit  : 0/0
 21689 ;;		Unchanged: 0/0
 21690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21692 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21694 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21695 ;;Total ram usage:        3 bytes
 21696 ;; Hardware stack levels used:    1
 21697 ;; Hardware stack levels required when called:    7
 21698 ;; This function calls:
 21699 ;;		Nothing
 21700 ;; This function is called by:
 21701 ;;		_ADC_Init
 21702 ;; This function uses a non-reentrant model
 21703 ;;
 21704                           
 21705                           	psect	text108
 21706  015630                     __ptext108:
 21707                           	opt stack 0
 21708  015630                     _ADC_ClockDivision:
 21709                           	opt stack 20
 21710                           
 21711                           ; BSR set to: 0
 21712                           ;incstack = 0
 21713                           ;ADC_ClockDivision@pDivide stored from wreg
 21714  015630  0100               	movlb	0	; () banked
 21715  015632  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 21716                           
 21717                           ;ADC.c: 161: UINT8 reg = 0;
 21718  015634  0E00               	movlw	0
 21719  015636  0100               	movlb	0	; () banked
 21720  015638  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 21721                           
 21722                           ;ADC.c: 162: bool unfound = 1;
 21723  01563A  0E01               	movlw	1
 21724  01563C  D002               	goto	L14
 21725  01563E                     
 21726                           ; BSR set to: 0
 21727                           ;ADC.c: 167: reg = 0;
 21728                           
 21729                           ; BSR set to: 0
 21730  01563E  0E00               	movlw	0
 21731  015640  D00C               	goto	L19
 21732  015642                     L14:
 21733  015642  0100               	movlb	0	; () banked
 21734  015644  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 21735                           
 21736                           ;ADC.c: 169: break;
 21737  015646  D02D               	goto	l1296
 21738  015648                     
 21739                           ; BSR set to: 0
 21740                           ;ADC.c: 171: reg = 0b100;
 21741                           
 21742                           ; BSR set to: 0
 21743  015648  0E04               	movlw	4
 21744  01564A  D007               	goto	L19
 21745  01564C                     
 21746                           ; BSR set to: 0
 21747                           ;ADC.c: 175: reg = 0b001;
 21748                           
 21749                           ; BSR set to: 0
 21750  01564C  0E01               	movlw	1
 21751  01564E  D005               	goto	L19
 21752  015650                     
 21753                           ; BSR set to: 0
 21754                           ;ADC.c: 179: reg = 0b101;
 21755                           
 21756                           ; BSR set to: 0
 21757  015650  0E05               	movlw	5
 21758  015652  D003               	goto	L19
 21759  015654                     
 21760                           ; BSR set to: 0
 21761                           ;ADC.c: 183: reg = 0b010;
 21762                           
 21763                           ; BSR set to: 0
 21764  015654  0E02               	movlw	2
 21765  015656  D001               	goto	L19
 21766  015658                     
 21767                           ; BSR set to: 0
 21768                           ;ADC.c: 187: reg = 0b110;
 21769                           
 21770                           ; BSR set to: 0
 21771  015658  0E06               	movlw	6
 21772  01565A                     L19:
 21773  01565A  0100               	movlb	0	; () banked
 21774  01565C  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 21775                           
 21776                           ;ADC.c: 188: unfound = 0;
 21777  01565E  0E00               	movlw	0
 21778  015660  D7F0               	goto	L14
 21779  015662                     
 21780                           ; BSR set to: 0
 21781                           ;ADC.c: 191: if (pDivide > 2)
 21782                           
 21783                           ; BSR set to: 0
 21784  015662  0E02               	movlw	2
 21785  015664  0100               	movlb	0	; () banked
 21786  015666  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 21787  015668  D003               	goto	l1303
 21788                           
 21789                           ; BSR set to: 0
 21790                           ;ADC.c: 192: pDivide --;
 21791  01566A  0100               	movlb	0	; () banked
 21792  01566C  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 21793  01566E  D019               	goto	l1296
 21794  015670                     l1303:
 21795                           
 21796                           ; BSR set to: 0
 21797                           ;ADC.c: 193: else
 21798                           ;ADC.c: 194: pDivide = 2;
 21799                           
 21800                           ; BSR set to: 0
 21801  015670  0E02               	movlw	2
 21802  015672  0100               	movlb	0	; () banked
 21803  015674  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 21804                           
 21805                           ; BSR set to: 0
 21806                           ;ADC.c: 195: };
 21807  015676  D015               	goto	l1296
 21808  015678                     
 21809                           ; BSR set to: 0
 21810                           
 21811                           ; BSR set to: 0
 21812  015678  0100               	movlb	0	; () banked
 21813  01567A  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 21814                           
 21815                           ; Switch size 1, requested type "space"
 21816                           ; Number of cases is 6, Range of values is 2 to 64
 21817                           ; switch strategies available:
 21818                           ; Name         Instructions Cycles
 21819                           ; simple_byte           19    10 (average)
 21820                           ;	Chosen strategy is simple_byte
 21821  01567C  0A02               	xorlw	2	; case 2
 21822  01567E  B4D8               	btfsc	status,2,c
 21823  015680  D7DE               	goto	l1295
 21824  015682  0A06               	xorlw	6	; case 4
 21825  015684  B4D8               	btfsc	status,2,c
 21826  015686  D7E0               	goto	l1297
 21827  015688  0A0C               	xorlw	12	; case 8
 21828  01568A  B4D8               	btfsc	status,2,c
 21829  01568C  D7DF               	goto	l1298
 21830  01568E  0A18               	xorlw	24	; case 16
 21831  015690  B4D8               	btfsc	status,2,c
 21832  015692  D7DE               	goto	l1299
 21833  015694  0A30               	xorlw	48	; case 32
 21834  015696  B4D8               	btfsc	status,2,c
 21835  015698  D7DD               	goto	l1300
 21836  01569A  0A60               	xorlw	96	; case 64
 21837  01569C  B4D8               	btfsc	status,2,c
 21838  01569E  D7DC               	goto	l1301
 21839  0156A0  D7E0               	goto	l1302
 21840  0156A2                     l1296:
 21841                           
 21842                           ; BSR set to: 0
 21843                           
 21844                           ; BSR set to: 0
 21845                           
 21846                           ; BSR set to: 0
 21847  0156A2  0100               	movlb	0	; () banked
 21848  0156A4  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 21849  0156A6  0100               	movlb	0	; () banked
 21850  0156A8  A4D8               	btfss	status,2,c
 21851  0156AA  D7E6               	goto	l1294
 21852                           
 21853                           ; BSR set to: 0
 21854                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 21855                           
 21856                           ; BSR set to: 0
 21857  0156AC  50C1               	movf	4033,w,c	;volatile
 21858  0156AE  0100               	movlb	0	; () banked
 21859  0156B0  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 21860  0156B2  0BF8               	andlw	-8
 21861  0156B4  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 21862  0156B6  6EC1               	movwf	4033,c	;volatile
 21863                           
 21864                           ; BSR set to: 0
 21865  0156B8  0012               	return		;funcret
 21866  0156BA                     __end_of_ADC_ClockDivision:
 21867                           	opt stack 0
 21868                           tosu	equ	0xFFF
 21869                           tosh	equ	0xFFE
 21870                           tosl	equ	0xFFD
 21871                           pclath	equ	0xFFA
 21872                           tblptru	equ	0xFF8
 21873                           tblptrh	equ	0xFF7
 21874                           tblptrl	equ	0xFF6
 21875                           tablat	equ	0xFF5
 21876                           prodh	equ	0xFF4
 21877                           prodl	equ	0xFF3
 21878                           intcon	equ	0xFF2
 21879                           indf0	equ	0xFEF
 21880                           postinc0	equ	0xFEE
 21881                           fsr0h	equ	0xFEA
 21882                           fsr0l	equ	0xFE9
 21883                           wreg	equ	0xFE8
 21884                           indf1	equ	0xFE7
 21885                           postdec1	equ	0xFE5
 21886                           fsr1h	equ	0xFE2
 21887                           fsr1l	equ	0xFE1
 21888                           indf2	equ	0xFDF
 21889                           postinc2	equ	0xFDE
 21890                           postdec2	equ	0xFDD
 21891                           plusw2	equ	0xFDB
 21892                           fsr2h	equ	0xFDA
 21893                           fsr2l	equ	0xFD9
 21894                           status	equ	0xFD8
 21895                           
 21896 ;; *************** function _ADC_Calibrate *****************
 21897 ;; Defined at:
 21898 ;;		line 63 in file "Library/ADC.c"
 21899 ;; Parameters:    Size  Location     Type
 21900 ;;		None
 21901 ;; Auto vars:     Size  Location     Type
 21902 ;;		None
 21903 ;; Return value:  Size  Location     Type
 21904 ;;                  1    wreg      void 
 21905 ;; Registers used:
 21906 ;;		cstack
 21907 ;; Tracked objects:
 21908 ;;		On entry : 0/0
 21909 ;;		On exit  : 0/0
 21910 ;;		Unchanged: 0/0
 21911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21916 ;;Total ram usage:        0 bytes
 21917 ;; Hardware stack levels used:    1
 21918 ;; Hardware stack levels required when called:    8
 21919 ;; This function calls:
 21920 ;;		_ADC_Off
 21921 ;;		_ADC_On
 21922 ;; This function is called by:
 21923 ;;		_ADC_Init
 21924 ;; This function uses a non-reentrant model
 21925 ;;
 21926                           
 21927                           	psect	text109
 21928  016DAA                     __ptext109:
 21929                           	opt stack 0
 21930  016DAA                     _ADC_Calibrate:
 21931                           	opt stack 19
 21932                           
 21933                           ;ADC.c: 65: ADC_On();
 21934                           
 21935                           ; BSR set to: 0
 21936                           ;incstack = 0
 21937  016DAA  EC44  F0B7         	call	_ADC_On	;wreg free
 21938                           
 21939                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 21940  016DAE  8CC1               	bsf	4033,6,c	;volatile
 21941                           
 21942                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 21943  016DB0  82C2               	bsf	4034,1,c	;volatile
 21944  016DB2  B2C2               	btfsc	4034,1,c	;volatile
 21945  016DB4  D7FE               	goto	l1254
 21946                           
 21947                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 21948  016DB6  9CC1               	bcf	4033,6,c	;volatile
 21949                           
 21950                           ;ADC.c: 73: ADC_Off();
 21951  016DB8  EC37  F0B7         	call	_ADC_Off	;wreg free
 21952  016DBC  0012               	return		;funcret
 21953  016DBE                     __end_of_ADC_Calibrate:
 21954                           	opt stack 0
 21955                           tosu	equ	0xFFF
 21956                           tosh	equ	0xFFE
 21957                           tosl	equ	0xFFD
 21958                           pclath	equ	0xFFA
 21959                           tblptru	equ	0xFF8
 21960                           tblptrh	equ	0xFF7
 21961                           tblptrl	equ	0xFF6
 21962                           tablat	equ	0xFF5
 21963                           prodh	equ	0xFF4
 21964                           prodl	equ	0xFF3
 21965                           intcon	equ	0xFF2
 21966                           indf0	equ	0xFEF
 21967                           postinc0	equ	0xFEE
 21968                           fsr0h	equ	0xFEA
 21969                           fsr0l	equ	0xFE9
 21970                           wreg	equ	0xFE8
 21971                           indf1	equ	0xFE7
 21972                           postdec1	equ	0xFE5
 21973                           fsr1h	equ	0xFE2
 21974                           fsr1l	equ	0xFE1
 21975                           indf2	equ	0xFDF
 21976                           postinc2	equ	0xFDE
 21977                           postdec2	equ	0xFDD
 21978                           plusw2	equ	0xFDB
 21979                           fsr2h	equ	0xFDA
 21980                           fsr2l	equ	0xFD9
 21981                           status	equ	0xFD8
 21982                           
 21983 ;; *************** function _ADC_On *****************
 21984 ;; Defined at:
 21985 ;;		line 85 in file "Library/ADC.c"
 21986 ;; Parameters:    Size  Location     Type
 21987 ;;		None
 21988 ;; Auto vars:     Size  Location     Type
 21989 ;;		None
 21990 ;; Return value:  Size  Location     Type
 21991 ;;                  1    wreg      void 
 21992 ;; Registers used:
 21993 ;;		None
 21994 ;; Tracked objects:
 21995 ;;		On entry : 0/0
 21996 ;;		On exit  : 0/0
 21997 ;;		Unchanged: 0/0
 21998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22000 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22002 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22003 ;;Total ram usage:        0 bytes
 22004 ;; Hardware stack levels used:    1
 22005 ;; Hardware stack levels required when called:    7
 22006 ;; This function calls:
 22007 ;;		Nothing
 22008 ;; This function is called by:
 22009 ;;		_ADC_Calibrate
 22010 ;;		_ADC_Start
 22011 ;;		_ADC_ISR
 22012 ;;		_ADC_Sample
 22013 ;; This function uses a non-reentrant model
 22014 ;;
 22015                           
 22016                           	psect	text110
 22017  016E88                     __ptext110:
 22018                           	opt stack 0
 22019  016E88                     _ADC_On:
 22020                           	opt stack 19
 22021                           
 22022                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 22023                           
 22024                           ;incstack = 0
 22025  016E88  80C2               	bsf	4034,0,c	;volatile
 22026                           
 22027                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 22028  016E8A  9C9E               	bcf	3998,6,c	;volatile
 22029  016E8C  0012               	return		;funcret
 22030  016E8E                     __end_of_ADC_On:
 22031                           	opt stack 0
 22032                           tosu	equ	0xFFF
 22033                           tosh	equ	0xFFE
 22034                           tosl	equ	0xFFD
 22035                           pclath	equ	0xFFA
 22036                           tblptru	equ	0xFF8
 22037                           tblptrh	equ	0xFF7
 22038                           tblptrl	equ	0xFF6
 22039                           tablat	equ	0xFF5
 22040                           prodh	equ	0xFF4
 22041                           prodl	equ	0xFF3
 22042                           intcon	equ	0xFF2
 22043                           indf0	equ	0xFEF
 22044                           postinc0	equ	0xFEE
 22045                           fsr0h	equ	0xFEA
 22046                           fsr0l	equ	0xFE9
 22047                           wreg	equ	0xFE8
 22048                           indf1	equ	0xFE7
 22049                           postdec1	equ	0xFE5
 22050                           fsr1h	equ	0xFE2
 22051                           fsr1l	equ	0xFE1
 22052                           indf2	equ	0xFDF
 22053                           postinc2	equ	0xFDE
 22054                           postdec2	equ	0xFDD
 22055                           plusw2	equ	0xFDB
 22056                           fsr2h	equ	0xFDA
 22057                           fsr2l	equ	0xFD9
 22058                           status	equ	0xFD8
 22059                           
 22060 ;; *************** function _ADC_Off *****************
 22061 ;; Defined at:
 22062 ;;		line 94 in file "Library/ADC.c"
 22063 ;; Parameters:    Size  Location     Type
 22064 ;;		None
 22065 ;; Auto vars:     Size  Location     Type
 22066 ;;		None
 22067 ;; Return value:  Size  Location     Type
 22068 ;;                  1    wreg      void 
 22069 ;; Registers used:
 22070 ;;		None
 22071 ;; Tracked objects:
 22072 ;;		On entry : 0/0
 22073 ;;		On exit  : 0/0
 22074 ;;		Unchanged: 0/0
 22075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22080 ;;Total ram usage:        0 bytes
 22081 ;; Hardware stack levels used:    1
 22082 ;; Hardware stack levels required when called:    7
 22083 ;; This function calls:
 22084 ;;		Nothing
 22085 ;; This function is called by:
 22086 ;;		_ADC_Calibrate
 22087 ;;		_ADC_Start
 22088 ;;		_ADC_ISR
 22089 ;;		_ADC_Sample
 22090 ;; This function uses a non-reentrant model
 22091 ;;
 22092                           
 22093                           	psect	text111
 22094  016E6E                     __ptext111:
 22095                           	opt stack 0
 22096  016E6E                     _ADC_Off:
 22097                           	opt stack 19
 22098                           
 22099                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 22100                           
 22101                           ;incstack = 0
 22102  016E6E  90C2               	bcf	4034,0,c	;volatile
 22103                           
 22104                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 22105  016E70  9C9E               	bcf	3998,6,c	;volatile
 22106                           
 22107                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 22108  016E72  9C9D               	bcf	3997,6,c	;volatile
 22109  016E74  0012               	return		;funcret
 22110  016E76                     __end_of_ADC_Off:
 22111                           	opt stack 0
 22112                           tosu	equ	0xFFF
 22113                           tosh	equ	0xFFE
 22114                           tosl	equ	0xFFD
 22115                           pclath	equ	0xFFA
 22116                           tblptru	equ	0xFF8
 22117                           tblptrh	equ	0xFF7
 22118                           tblptrl	equ	0xFF6
 22119                           tablat	equ	0xFF5
 22120                           prodh	equ	0xFF4
 22121                           prodl	equ	0xFF3
 22122                           intcon	equ	0xFF2
 22123                           indf0	equ	0xFEF
 22124                           postinc0	equ	0xFEE
 22125                           fsr0h	equ	0xFEA
 22126                           fsr0l	equ	0xFE9
 22127                           wreg	equ	0xFE8
 22128                           indf1	equ	0xFE7
 22129                           postdec1	equ	0xFE5
 22130                           fsr1h	equ	0xFE2
 22131                           fsr1l	equ	0xFE1
 22132                           indf2	equ	0xFDF
 22133                           postinc2	equ	0xFDE
 22134                           postdec2	equ	0xFDD
 22135                           plusw2	equ	0xFDB
 22136                           fsr2h	equ	0xFDA
 22137                           fsr2l	equ	0xFD9
 22138                           status	equ	0xFD8
 22139                           
 22140 ;; *************** function _Console_Init *****************
 22141 ;; Defined at:
 22142 ;;		line 157 in file "Library/Console.c"
 22143 ;; Parameters:    Size  Location     Type
 22144 ;;		None
 22145 ;; Auto vars:     Size  Location     Type
 22146 ;;  y               1    3[BANK0 ] unsigned char 
 22147 ;;  x               1    2[BANK0 ] unsigned char 
 22148 ;; Return value:  Size  Location     Type
 22149 ;;                  1    wreg      void 
 22150 ;; Registers used:
 22151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22152 ;; Tracked objects:
 22153 ;;		On entry : 0/0
 22154 ;;		On exit  : 0/0
 22155 ;;		Unchanged: 0/0
 22156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22158 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22160 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22161 ;;Total ram usage:        4 bytes
 22162 ;; Hardware stack levels used:    1
 22163 ;; Hardware stack levels required when called:    7
 22164 ;; This function calls:
 22165 ;;		Nothing
 22166 ;; This function is called by:
 22167 ;;		_initialise
 22168 ;; This function uses a non-reentrant model
 22169 ;;
 22170                           
 22171                           	psect	text112
 22172  0156BA                     __ptext112:
 22173                           	opt stack 0
 22174  0156BA                     _Console_Init:
 22175                           	opt stack 22
 22176                           
 22177                           ;Console.c: 160: lBufferX = 0;
 22178                           
 22179                           ;incstack = 0
 22180  0156BA  0E00               	movlw	0
 22181  0156BC  0100               	movlb	0	; () banked
 22182  0156BE  6FFB               	movwf	_lBufferX& (0+255),b
 22183                           
 22184                           ;Console.c: 161: lBufferY = 0;
 22185  0156C0  0E00               	movlw	0
 22186  0156C2  0100               	movlb	0	; () banked
 22187  0156C4  6FFA               	movwf	_lBufferY& (0+255),b
 22188                           
 22189                           ;Console.c: 163: UINT8 x, y;
 22190                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22191  0156C6  0E00               	movlw	0
 22192  0156C8  0100               	movlb	0	; () banked
 22193  0156CA  6F62               	movwf	Console_Init@x& (0+255),b
 22194  0156CC                     l14183:
 22195                           
 22196                           ; BSR set to: 0
 22197  0156CC  0E13               	movlw	19
 22198  0156CE  0100               	movlb	0	; () banked
 22199  0156D0  6562               	cpfsgt	Console_Init@x& (0+255),b
 22200  0156D2  D001               	goto	l976
 22201  0156D4  0012               	return	
 22202  0156D6                     l976:
 22203                           
 22204                           ; BSR set to: 0
 22205                           ;Console.c: 165: {
 22206                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22207                           
 22208                           ; BSR set to: 0
 22209  0156D6  0E00               	movlw	0
 22210  0156D8  0100               	movlb	0	; () banked
 22211  0156DA  6F63               	movwf	Console_Init@y& (0+255),b
 22212  0156DC                     l14189:
 22213                           
 22214                           ; BSR set to: 0
 22215  0156DC  0E0E               	movlw	14
 22216  0156DE  0100               	movlb	0	; () banked
 22217  0156E0  6563               	cpfsgt	Console_Init@y& (0+255),b
 22218  0156E2  D001               	goto	l978
 22219  0156E4  D02C               	goto	u11650
 22220  0156E6                     l978:
 22221                           
 22222                           ; BSR set to: 0
 22223                           ;Console.c: 167: {
 22224                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22225                           
 22226                           ; BSR set to: 0
 22227  0156E6  0100               	movlb	0	; () banked
 22228  0156E8  5163               	movf	Console_Init@y& (0+255),w,b
 22229  0156EA  0D14               	mullw	20
 22230  0156EC  0E8F               	movlw	low _lBuffer
 22231  0156EE  0100               	movlb	0	; () banked
 22232  0156F0  6F60               	movwf	??_Console_Init& (0+255),b
 22233  0156F2  0E02               	movlw	high _lBuffer
 22234  0156F4  0100               	movlb	0	; () banked
 22235  0156F6  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 22236  0156F8  50F3               	movf	prodl,w,c
 22237  0156FA  0100               	movlb	0	; () banked
 22238  0156FC  2760               	addwf	??_Console_Init& (0+255),f,b
 22239  0156FE  50F4               	movf	prodh,w,c
 22240  015700  0100               	movlb	0	; () banked
 22241  015702  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 22242  015704  0100               	movlb	0	; () banked
 22243  015706  5162               	movf	Console_Init@x& (0+255),w,b
 22244  015708  0D01               	mullw	1
 22245  01570A  50F3               	movf	prodl,w,c
 22246  01570C  0100               	movlb	0	; () banked
 22247  01570E  2560               	addwf	??_Console_Init& (0+255),w,b
 22248  015710  6ED9               	movwf	fsr2l,c
 22249  015712  50F4               	movf	prodh,w,c
 22250  015714  0100               	movlb	0	; () banked
 22251  015716  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 22252  015718  6EDA               	movwf	fsr2h,c
 22253  01571A  0E00               	movlw	0
 22254  01571C  6EDF               	movwf	indf2,c
 22255                           
 22256                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22257  01571E  0100               	movlb	0	; () banked
 22258  015720  5163               	movf	Console_Init@y& (0+255),w,b
 22259  015722  0D02               	mullw	2
 22260  015724  0E00               	movlw	low _lCBuffer
 22261  015726  24F3               	addwf	prodl,w,c
 22262  015728  6ED9               	movwf	fsr2l,c
 22263  01572A  0E02               	movlw	high _lCBuffer
 22264  01572C  20F4               	addwfc	prodh,w,c
 22265  01572E  6EDA               	movwf	fsr2h,c
 22266  015730  0EFF               	movlw	255
 22267  015732  6EDE               	movwf	postinc2,c
 22268  015734  0EFF               	movlw	255
 22269  015736  6EDD               	movwf	postdec2,c
 22270                           
 22271                           ; BSR set to: 0
 22272  015738  0100               	movlb	0	; () banked
 22273  01573A  2B63               	incf	Console_Init@y& (0+255),f,b
 22274  01573C  D7CF               	goto	l14189
 22275  01573E                     u11650:
 22276                           
 22277                           ; BSR set to: 0
 22278                           
 22279                           ; BSR set to: 0
 22280  01573E  0100               	movlb	0	; () banked
 22281  015740  2B62               	incf	Console_Init@x& (0+255),f,b
 22282  015742  D7C4               	goto	l14183
 22283  015744                     __end_of_Console_Init:
 22284                           	opt stack 0
 22285                           tosu	equ	0xFFF
 22286                           tosh	equ	0xFFE
 22287                           tosl	equ	0xFFD
 22288                           pclath	equ	0xFFA
 22289                           tblptru	equ	0xFF8
 22290                           tblptrh	equ	0xFF7
 22291                           tblptrl	equ	0xFF6
 22292                           tablat	equ	0xFF5
 22293                           prodh	equ	0xFF4
 22294                           prodl	equ	0xFF3
 22295                           intcon	equ	0xFF2
 22296                           indf0	equ	0xFEF
 22297                           postinc0	equ	0xFEE
 22298                           fsr0h	equ	0xFEA
 22299                           fsr0l	equ	0xFE9
 22300                           wreg	equ	0xFE8
 22301                           indf1	equ	0xFE7
 22302                           postdec1	equ	0xFE5
 22303                           fsr1h	equ	0xFE2
 22304                           fsr1l	equ	0xFE1
 22305                           indf2	equ	0xFDF
 22306                           postinc2	equ	0xFDE
 22307                           postdec2	equ	0xFDD
 22308                           plusw2	equ	0xFDB
 22309                           fsr2h	equ	0xFDA
 22310                           fsr2l	equ	0xFD9
 22311                           status	equ	0xFD8
 22312                           
 22313 ;; *************** function _getMode *****************
 22314 ;; Defined at:
 22315 ;;		line 121 in file "main.c"
 22316 ;; Parameters:    Size  Location     Type
 22317 ;;		None
 22318 ;; Auto vars:     Size  Location     Type
 22319 ;;		None
 22320 ;; Return value:  Size  Location     Type
 22321 ;;                  1    wreg      void 
 22322 ;; Registers used:
 22323 ;;		wreg, status,2, status,0
 22324 ;; Tracked objects:
 22325 ;;		On entry : 0/0
 22326 ;;		On exit  : 0/0
 22327 ;;		Unchanged: 0/0
 22328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22333 ;;Total ram usage:        2 bytes
 22334 ;; Hardware stack levels used:    1
 22335 ;; Hardware stack levels required when called:    7
 22336 ;; This function calls:
 22337 ;;		Nothing
 22338 ;; This function is called by:
 22339 ;;		_main
 22340 ;; This function uses a non-reentrant model
 22341 ;;
 22342                           
 22343                           	psect	text113
 22344  016102                     __ptext113:
 22345                           	opt stack 0
 22346  016102                     _getMode:
 22347                           	opt stack 23
 22348                           
 22349                           ;main.c: 122: switch (dip) {
 22350                           
 22351                           ; BSR set to: 0
 22352                           ;incstack = 0
 22353  016102  D018               	goto	l2053
 22354  016104                     
 22355                           ;main.c: 124: mode = 1;
 22356  016104  0E00               	movlw	0
 22357  016106  0101               	movlb	1	; () banked
 22358  016108  6F29               	movwf	(_mode+1)& (0+255),b
 22359  01610A  0E01               	movlw	1
 22360  01610C  6F28               	movwf	_mode& (0+255),b
 22361                           
 22362                           ; BSR set to: 1
 22363                           ;main.c: 125: return;
 22364  01610E  0012               	return	
 22365  016110                     
 22366                           ;main.c: 127: mode = 2;
 22367                           
 22368                           ; BSR set to: 1
 22369  016110  0E00               	movlw	0
 22370  016112  0101               	movlb	1	; () banked
 22371  016114  6F29               	movwf	(_mode+1)& (0+255),b
 22372  016116  0E02               	movlw	2
 22373  016118  6F28               	movwf	_mode& (0+255),b
 22374                           
 22375                           ; BSR set to: 1
 22376                           ;main.c: 128: return;
 22377  01611A  0012               	return	
 22378  01611C                     
 22379                           ;main.c: 130: mode = 3;
 22380                           
 22381                           ; BSR set to: 1
 22382  01611C  0E00               	movlw	0
 22383  01611E  0101               	movlb	1	; () banked
 22384  016120  6F29               	movwf	(_mode+1)& (0+255),b
 22385  016122  0E03               	movlw	3
 22386  016124  6F28               	movwf	_mode& (0+255),b
 22387                           
 22388                           ; BSR set to: 1
 22389                           ;main.c: 131: return;
 22390  016126  0012               	return	
 22391  016128                     
 22392                           ;main.c: 133: mode = 0;
 22393                           
 22394                           ; BSR set to: 1
 22395  016128  0E00               	movlw	0
 22396  01612A  0101               	movlb	1	; () banked
 22397  01612C  6F29               	movwf	(_mode+1)& (0+255),b
 22398  01612E  0E00               	movlw	0
 22399  016130  6F28               	movwf	_mode& (0+255),b
 22400                           
 22401                           ; BSR set to: 1
 22402                           ;main.c: 135: }
 22403                           
 22404                           ; BSR set to: 1
 22405                           ;main.c: 134: return;
 22406  016132  0012               	return	
 22407  016134                     l2053:
 22408                           
 22409                           ; BSR set to: 1
 22410  016134  C126  F060         	movff	_dip,??_getMode
 22411  016138  C127  F061         	movff	_dip+1,??_getMode+1
 22412                           
 22413                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 22414                           ; Switch size 1, requested type "space"
 22415                           ; Number of cases is 1, Range of values is 0 to 0
 22416                           ; switch strategies available:
 22417                           ; Name         Instructions Cycles
 22418                           ; simple_byte            4     3 (average)
 22419                           ;	Chosen strategy is simple_byte
 22420  01613C  0100               	movlb	0	; () banked
 22421  01613E  5161               	movf	(??_getMode+1)& (0+255),w,b
 22422  016140  0A00               	xorlw	0	; case 0
 22423  016142  A4D8               	btfss	status,2,c
 22424  016144  D7F1               	goto	l2058
 22425                           
 22426                           ; BSR set to: 0
 22427                           ; Switch size 1, requested type "space"
 22428                           ; Number of cases is 3, Range of values is 1 to 4
 22429                           ; switch strategies available:
 22430                           ; Name         Instructions Cycles
 22431                           ; simple_byte           10     6 (average)
 22432                           ;	Chosen strategy is simple_byte
 22433  016146  0100               	movlb	0	; () banked
 22434  016148  5160               	movf	??_getMode& (0+255),w,b
 22435  01614A  0A01               	xorlw	1	; case 1
 22436  01614C  B4D8               	btfsc	status,2,c
 22437  01614E  D7DA               	goto	l2054
 22438  016150  0A03               	xorlw	3	; case 2
 22439  016152  B4D8               	btfsc	status,2,c
 22440  016154  D7DD               	goto	l2056
 22441  016156  0A06               	xorlw	6	; case 4
 22442  016158  B4D8               	btfsc	status,2,c
 22443  01615A  D7E0               	goto	l2057
 22444  01615C  D7E5               	goto	l2058
 22445  01615E                     __end_of_getMode:
 22446                           	opt stack 0
 22447                           tosu	equ	0xFFF
 22448                           tosh	equ	0xFFE
 22449                           tosl	equ	0xFFD
 22450                           pclath	equ	0xFFA
 22451                           tblptru	equ	0xFF8
 22452                           tblptrh	equ	0xFF7
 22453                           tblptrl	equ	0xFF6
 22454                           tablat	equ	0xFF5
 22455                           prodh	equ	0xFF4
 22456                           prodl	equ	0xFF3
 22457                           intcon	equ	0xFF2
 22458                           indf0	equ	0xFEF
 22459                           postinc0	equ	0xFEE
 22460                           fsr0h	equ	0xFEA
 22461                           fsr0l	equ	0xFE9
 22462                           wreg	equ	0xFE8
 22463                           indf1	equ	0xFE7
 22464                           postdec1	equ	0xFE5
 22465                           fsr1h	equ	0xFE2
 22466                           fsr1l	equ	0xFE1
 22467                           indf2	equ	0xFDF
 22468                           postinc2	equ	0xFDE
 22469                           postdec2	equ	0xFDD
 22470                           plusw2	equ	0xFDB
 22471                           fsr2h	equ	0xFDA
 22472                           fsr2l	equ	0xFD9
 22473                           status	equ	0xFD8
 22474                           
 22475 ;; *************** function _displayStepMode *****************
 22476 ;; Defined at:
 22477 ;;		line 183 in file "main.c"
 22478 ;; Parameters:    Size  Location     Type
 22479 ;;		None
 22480 ;; Auto vars:     Size  Location     Type
 22481 ;;		None
 22482 ;; Return value:  Size  Location     Type
 22483 ;;                  1    wreg      void 
 22484 ;; Registers used:
 22485 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22486 ;; Tracked objects:
 22487 ;;		On entry : 0/0
 22488 ;;		On exit  : 0/0
 22489 ;;		Unchanged: 0/0
 22490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22494 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22495 ;;Total ram usage:        0 bytes
 22496 ;; Hardware stack levels used:    1
 22497 ;; Hardware stack levels required when called:   13
 22498 ;; This function calls:
 22499 ;;		_printf
 22500 ;; This function is called by:
 22501 ;;		_main
 22502 ;; This function uses a non-reentrant model
 22503 ;;
 22504                           
 22505                           	psect	text114
 22506  0159BA                     __ptext114:
 22507                           	opt stack 0
 22508  0159BA                     _displayStepMode:
 22509                           	opt stack 17
 22510                           
 22511                           ;main.c: 187: printf("Current Mode:\n Step Mode\n");
 22512                           
 22513                           ;incstack = 0
 22514  0159BA  0E62               	movlw	low STR_7
 22515  0159BC  0100               	movlb	0	; () banked
 22516  0159BE  6F7B               	movwf	printf@f& (0+255),b
 22517  0159C0  0EFF               	movlw	high STR_7
 22518  0159C2  0100               	movlb	0	; () banked
 22519  0159C4  6F7C               	movwf	(printf@f+1)& (0+255),b
 22520  0159C6  EC7C  F096         	call	_printf	;wreg free
 22521                           
 22522                           ;main.c: 188: printf("Steps: %d\n", steps);
 22523  0159CA  0EEC               	movlw	low STR_8
 22524  0159CC  0100               	movlb	0	; () banked
 22525  0159CE  6F7B               	movwf	printf@f& (0+255),b
 22526  0159D0  0EFF               	movlw	high STR_8
 22527  0159D2  0100               	movlb	0	; () banked
 22528  0159D4  6F7C               	movwf	(printf@f+1)& (0+255),b
 22529  0159D6  C02D  F07D         	movff	_steps,?_printf+2
 22530  0159DA  C02E  F07E         	movff	_steps+1,?_printf+3
 22531  0159DE  EC7C  F096         	call	_printf	;wreg free
 22532                           
 22533                           ;main.c: 189: printf("Remaining Steps: %d\n\n", remainingSteps);
 22534  0159E2  0EAB               	movlw	low STR_9
 22535  0159E4  0100               	movlb	0	; () banked
 22536  0159E6  6F7B               	movwf	printf@f& (0+255),b
 22537  0159E8  0EFF               	movlw	high STR_9
 22538  0159EA  0100               	movlb	0	; () banked
 22539  0159EC  6F7C               	movwf	(printf@f+1)& (0+255),b
 22540  0159EE  C120  F07D         	movff	_remainingSteps,?_printf+2
 22541  0159F2  C121  F07E         	movff	_remainingSteps+1,?_printf+3
 22542  0159F6  EC7C  F096         	call	_printf	;wreg free
 22543                           
 22544                           ;main.c: 190: if (leftState == 1 && steps > 0) {
 22545  0159FA  043A               	decf	_leftState,w,c
 22546  0159FC  B4D8               	btfsc	status,2,c
 22547  0159FE  BE2E               	btfsc	_steps+1,7,c
 22548  015A00  D009               	goto	l2077
 22549  015A02  502E               	movf	_steps+1,w,c
 22550  015A04  E103               	bnz	u12510
 22551  015A06  042D               	decf	_steps,w,c
 22552  015A08  A0D8               	btfss	status,0,c
 22553  015A0A  D004               	goto	l2077
 22554  015A0C                     u12510:
 22555                           
 22556                           ;main.c: 191: steps--;
 22557  015A0C  062D               	decf	_steps,f,c
 22558  015A0E  A0D8               	btfss	status,0,c
 22559  015A10  062E               	decf	_steps+1,f,c
 22560                           
 22561                           ;main.c: 192: } else if (rightState) {
 22562  015A12  0012               	return	
 22563  015A14                     l2077:
 22564  015A14  5039               	movf	_rightState,w,c
 22565  015A16  B4D8               	btfsc	status,2,c
 22566  015A18  D003               	goto	l2079
 22567                           
 22568                           ;main.c: 193: steps++;
 22569  015A1A  4A2D               	infsnz	_steps,f,c
 22570  015A1C  2A2E               	incf	_steps+1,f,c
 22571                           
 22572                           ;main.c: 194: } else if (upState) {
 22573  015A1E  0012               	return	
 22574  015A20                     l2079:
 22575  015A20  0100               	movlb	0	; () banked
 22576  015A22  51F6               	movf	_upState& (0+255),w,b
 22577  015A24  B4D8               	btfsc	status,2,c
 22578  015A26  0012               	return	
 22579                           
 22580                           ; BSR set to: 0
 22581                           ;main.c: 195: steps = 0;
 22582  015A28  0E00               	movlw	0
 22583  015A2A  6E2E               	movwf	_steps+1,c
 22584  015A2C  0E00               	movlw	0
 22585  015A2E  6E2D               	movwf	_steps,c
 22586                           
 22587                           ; BSR set to: 0
 22588                           
 22589                           ; BSR set to: 0
 22590  015A30  0012               	return	
 22591  015A32                     __end_of_displayStepMode:
 22592                           	opt stack 0
 22593                           tosu	equ	0xFFF
 22594                           tosh	equ	0xFFE
 22595                           tosl	equ	0xFFD
 22596                           pclath	equ	0xFFA
 22597                           tblptru	equ	0xFF8
 22598                           tblptrh	equ	0xFF7
 22599                           tblptrl	equ	0xFF6
 22600                           tablat	equ	0xFF5
 22601                           prodh	equ	0xFF4
 22602                           prodl	equ	0xFF3
 22603                           intcon	equ	0xFF2
 22604                           indf0	equ	0xFEF
 22605                           postinc0	equ	0xFEE
 22606                           fsr0h	equ	0xFEA
 22607                           fsr0l	equ	0xFE9
 22608                           wreg	equ	0xFE8
 22609                           indf1	equ	0xFE7
 22610                           postdec1	equ	0xFE5
 22611                           fsr1h	equ	0xFE2
 22612                           fsr1l	equ	0xFE1
 22613                           indf2	equ	0xFDF
 22614                           postinc2	equ	0xFDE
 22615                           postdec2	equ	0xFDD
 22616                           plusw2	equ	0xFDB
 22617                           fsr2h	equ	0xFDA
 22618                           fsr2l	equ	0xFD9
 22619                           status	equ	0xFD8
 22620                           
 22621 ;; *************** function _displaySID *****************
 22622 ;; Defined at:
 22623 ;;		line 140 in file "main.c"
 22624 ;; Parameters:    Size  Location     Type
 22625 ;;		None
 22626 ;; Auto vars:     Size  Location     Type
 22627 ;;		None
 22628 ;; Return value:  Size  Location     Type
 22629 ;;                  1    wreg      void 
 22630 ;; Registers used:
 22631 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22632 ;; Tracked objects:
 22633 ;;		On entry : 0/0
 22634 ;;		On exit  : 0/0
 22635 ;;		Unchanged: 0/0
 22636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22638 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22640 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22641 ;;Total ram usage:        0 bytes
 22642 ;; Hardware stack levels used:    1
 22643 ;; Hardware stack levels required when called:   13
 22644 ;; This function calls:
 22645 ;;		_Console_SetForecolour
 22646 ;;		_printf
 22647 ;; This function is called by:
 22648 ;;		_main
 22649 ;; This function uses a non-reentrant model
 22650 ;;
 22651                           
 22652                           	psect	text115
 22653  016BAA                     __ptext115:
 22654                           	opt stack 0
 22655  016BAA                     _displaySID:
 22656                           	opt stack 17
 22657                           
 22658                           ;main.c: 141: Console_SetForecolour(0x07E0);
 22659                           
 22660                           ;incstack = 0
 22661  016BAA  0E07               	movlw	7
 22662  016BAC  0100               	movlb	0	; () banked
 22663  016BAE  6F61               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
 22664  016BB0  0EE0               	movlw	224
 22665  016BB2  6F60               	movwf	Console_SetForecolour@pColour& (0+255),b
 22666  016BB4  EC29  F0B7         	call	_Console_SetForecolour	;wreg free
 22667                           
 22668                           ;main.c: 142: printf("Jamin Early 99133391\n\n");
 22669  016BB8  0E94               	movlw	low STR_1
 22670  016BBA  0100               	movlb	0	; () banked
 22671  016BBC  6F7B               	movwf	printf@f& (0+255),b
 22672  016BBE  0EFF               	movlw	high STR_1
 22673  016BC0  0100               	movlb	0	; () banked
 22674  016BC2  6F7C               	movwf	(printf@f+1)& (0+255),b
 22675  016BC4  EC7C  F096         	call	_printf	;wreg free
 22676  016BC8  0012               	return		;funcret
 22677  016BCA                     __end_of_displaySID:
 22678                           	opt stack 0
 22679                           tosu	equ	0xFFF
 22680                           tosh	equ	0xFFE
 22681                           tosl	equ	0xFFD
 22682                           pclath	equ	0xFFA
 22683                           tblptru	equ	0xFF8
 22684                           tblptrh	equ	0xFF7
 22685                           tblptrl	equ	0xFF6
 22686                           tablat	equ	0xFF5
 22687                           prodh	equ	0xFF4
 22688                           prodl	equ	0xFF3
 22689                           intcon	equ	0xFF2
 22690                           indf0	equ	0xFEF
 22691                           postinc0	equ	0xFEE
 22692                           fsr0h	equ	0xFEA
 22693                           fsr0l	equ	0xFE9
 22694                           wreg	equ	0xFE8
 22695                           indf1	equ	0xFE7
 22696                           postdec1	equ	0xFE5
 22697                           fsr1h	equ	0xFE2
 22698                           fsr1l	equ	0xFE1
 22699                           indf2	equ	0xFDF
 22700                           postinc2	equ	0xFDE
 22701                           postdec2	equ	0xFDD
 22702                           plusw2	equ	0xFDB
 22703                           fsr2h	equ	0xFDA
 22704                           fsr2l	equ	0xFD9
 22705                           status	equ	0xFD8
 22706                           
 22707 ;; *************** function _Console_SetForecolour *****************
 22708 ;; Defined at:
 22709 ;;		line 286 in file "Library/Console.c"
 22710 ;; Parameters:    Size  Location     Type
 22711 ;;  pColour         2    0[BANK0 ] unsigned short 
 22712 ;; Auto vars:     Size  Location     Type
 22713 ;;		None
 22714 ;; Return value:  Size  Location     Type
 22715 ;;                  1    wreg      void 
 22716 ;; Registers used:
 22717 ;;		None
 22718 ;; Tracked objects:
 22719 ;;		On entry : 0/0
 22720 ;;		On exit  : 0/0
 22721 ;;		Unchanged: 0/0
 22722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22723 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22725 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22727 ;;Total ram usage:        2 bytes
 22728 ;; Hardware stack levels used:    1
 22729 ;; Hardware stack levels required when called:    7
 22730 ;; This function calls:
 22731 ;;		Nothing
 22732 ;; This function is called by:
 22733 ;;		_displaySID
 22734 ;;		_main
 22735 ;; This function uses a non-reentrant model
 22736 ;;
 22737                           
 22738                           	psect	text116
 22739  016E52                     __ptext116:
 22740                           	opt stack 0
 22741  016E52                     _Console_SetForecolour:
 22742                           	opt stack 22
 22743                           
 22744                           ;Console.c: 289: gForecolour = pColour;
 22745                           
 22746                           ;incstack = 0
 22747  016E52  C060  F1F5         	movff	Console_SetForecolour@pColour,_gForecolour
 22748  016E56  C061  F1F6         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 22749  016E5A  0012               	return		;funcret
 22750  016E5C                     __end_of_Console_SetForecolour:
 22751                           	opt stack 0
 22752                           tosu	equ	0xFFF
 22753                           tosh	equ	0xFFE
 22754                           tosl	equ	0xFFD
 22755                           pclath	equ	0xFFA
 22756                           tblptru	equ	0xFF8
 22757                           tblptrh	equ	0xFF7
 22758                           tblptrl	equ	0xFF6
 22759                           tablat	equ	0xFF5
 22760                           prodh	equ	0xFF4
 22761                           prodl	equ	0xFF3
 22762                           intcon	equ	0xFF2
 22763                           indf0	equ	0xFEF
 22764                           postinc0	equ	0xFEE
 22765                           fsr0h	equ	0xFEA
 22766                           fsr0l	equ	0xFE9
 22767                           wreg	equ	0xFE8
 22768                           indf1	equ	0xFE7
 22769                           postdec1	equ	0xFE5
 22770                           fsr1h	equ	0xFE2
 22771                           fsr1l	equ	0xFE1
 22772                           indf2	equ	0xFDF
 22773                           postinc2	equ	0xFDE
 22774                           postdec2	equ	0xFDD
 22775                           plusw2	equ	0xFDB
 22776                           fsr2h	equ	0xFDA
 22777                           fsr2l	equ	0xFD9
 22778                           status	equ	0xFD8
 22779                           
 22780 ;; *************** function _displayPositionMode *****************
 22781 ;; Defined at:
 22782 ;;		line 201 in file "main.c"
 22783 ;; Parameters:    Size  Location     Type
 22784 ;;		None
 22785 ;; Auto vars:     Size  Location     Type
 22786 ;;  angleDegrees    2  101[BANK0 ] int 
 22787 ;; Return value:  Size  Location     Type
 22788 ;;                  1    wreg      void 
 22789 ;; Registers used:
 22790 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22791 ;; Tracked objects:
 22792 ;;		On entry : 0/0
 22793 ;;		On exit  : 0/0
 22794 ;;		Unchanged: 0/0
 22795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22797 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22800 ;;Total ram usage:        2 bytes
 22801 ;; Hardware stack levels used:    1
 22802 ;; Hardware stack levels required when called:   13
 22803 ;; This function calls:
 22804 ;;		___awdiv
 22805 ;;		___flge
 22806 ;;		___flmul
 22807 ;;		___fltol
 22808 ;;		___wmul
 22809 ;;		___xxtofl
 22810 ;;		_printf
 22811 ;; This function is called by:
 22812 ;;		_main
 22813 ;; This function uses a non-reentrant model
 22814 ;;
 22815                           
 22816                           	psect	text117
 22817  013DAA                     __ptext117:
 22818                           	opt stack 0
 22819  013DAA                     _displayPositionMode:
 22820                           	opt stack 17
 22821                           
 22822                           ;main.c: 202: angle = ((IRDistance - 17) * (200) / (117 - 17));
 22823                           
 22824                           ;incstack = 0
 22825  013DAA  0E00               	movlw	0
 22826  013DAC  0100               	movlb	0	; () banked
 22827  013DAE  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 22828  013DB0  0E64               	movlw	100
 22829  013DB2  6F68               	movwf	___awdiv@divisor& (0+255),b
 22830  013DB4  0EEF               	movlw	239
 22831  013DB6  0101               	movlb	1	; () banked
 22832  013DB8  2524               	addwf	_IRDistance& (0+255),w,b
 22833  013DBA  0100               	movlb	0	; () banked
 22834  013DBC  6F60               	movwf	___wmul@multiplier& (0+255),b
 22835  013DBE  0EFF               	movlw	255
 22836  013DC0  0101               	movlb	1	; () banked
 22837  013DC2  2125               	addwfc	(_IRDistance+1)& (0+255),w,b
 22838  013DC4  0100               	movlb	0	; () banked
 22839  013DC6  6F61               	movwf	(___wmul@multiplier+1)& (0+255),b
 22840  013DC8  0E00               	movlw	0
 22841  013DCA  0100               	movlb	0	; () banked
 22842  013DCC  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
 22843  013DCE  0EC8               	movlw	200
 22844  013DD0  6F62               	movwf	___wmul@multiplicand& (0+255),b
 22845  013DD2  EC46  F0B4         	call	___wmul	;wreg free
 22846  013DD6  C060  F066         	movff	?___wmul,___awdiv@dividend
 22847  013DDA  C061  F067         	movff	?___wmul+1,___awdiv@dividend+1
 22848  013DDE  EC94  F0A4         	call	___awdiv	;wreg free
 22849  013DE2  0100               	movlb	0	; () banked
 22850  013DE4  C066  F06E         	movff	?___awdiv,___xxtofl@val
 22851  013DE8  0100               	movlb	0	; () banked
 22852  013DEA  C067  F06F         	movff	?___awdiv+1,___xxtofl@val+1
 22853  013DEE  0100               	movlb	0	; () banked
 22854  013DF0  0E00               	movlw	0
 22855  013DF2  BF6F               	btfsc	(___xxtofl@val+1)& (0+255),7,b
 22856  013DF4  0EFF               	movlw	-1
 22857  013DF6  6F70               	movwf	(___xxtofl@val+2)& (0+255),b
 22858  013DF8  6F71               	movwf	(___xxtofl@val+3)& (0+255),b
 22859  013DFA  0E01               	movlw	1
 22860  013DFC  EC46  F092         	call	___xxtofl
 22861  013E00  C06E  F029         	movff	?___xxtofl,_angle
 22862  013E04  C06F  F02A         	movff	?___xxtofl+1,_angle+1
 22863  013E08  C070  F02B         	movff	?___xxtofl+2,_angle+2
 22864  013E0C  C071  F02C         	movff	?___xxtofl+3,_angle+3
 22865                           
 22866                           ;main.c: 203: if (angle >= 180) {
 22867  013E10  C029  F060         	movff	_angle,___flge@ff1
 22868  013E14  C02A  F061         	movff	_angle+1,___flge@ff1+1
 22869  013E18  C02B  F062         	movff	_angle+2,___flge@ff1+2
 22870  013E1C  C02C  F063         	movff	_angle+3,___flge@ff1+3
 22871  013E20  0E00               	movlw	0
 22872  013E22  0100               	movlb	0	; () banked
 22873  013E24  6F64               	movwf	___flge@ff2& (0+255),b
 22874  013E26  0E00               	movlw	0
 22875  013E28  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 22876  013E2A  0E34               	movlw	52
 22877  013E2C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 22878  013E2E  0E43               	movlw	67
 22879  013E30  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 22880  013E32  EC45  F097         	call	___flge	;wreg free
 22881  013E36  0100               	movlb	0	; () banked
 22882  013E38  A0D8               	btfss	status,0,c
 22883  013E3A  D008               	goto	l2085
 22884                           
 22885                           ; BSR set to: 0
 22886                           ;main.c: 204: angle = 200;
 22887  013E3C  0E00               	movlw	0
 22888  013E3E  6E29               	movwf	_angle,c
 22889  013E40  0E00               	movlw	0
 22890  013E42  6E2A               	movwf	_angle+1,c
 22891  013E44  0E48               	movlw	72
 22892  013E46  6E2B               	movwf	_angle+2,c
 22893  013E48  0E43               	movlw	67
 22894  013E4A  6E2C               	movwf	_angle+3,c
 22895  013E4C                     l2085:
 22896                           
 22897                           ; BSR set to: 0
 22898                           ;main.c: 205: }
 22899                           ;main.c: 206: if (angle < 0) {
 22900                           
 22901                           ; BSR set to: 0
 22902  013E4C  AE2C               	btfss	_angle+3,7,c
 22903  013E4E  D008               	goto	l2086
 22904                           
 22905                           ; BSR set to: 0
 22906                           ;main.c: 207: angle = 200;
 22907  013E50  0E00               	movlw	0
 22908  013E52  6E29               	movwf	_angle,c
 22909  013E54  0E00               	movlw	0
 22910  013E56  6E2A               	movwf	_angle+1,c
 22911  013E58  0E48               	movlw	72
 22912  013E5A  6E2B               	movwf	_angle+2,c
 22913  013E5C  0E43               	movlw	67
 22914  013E5E  6E2C               	movwf	_angle+3,c
 22915  013E60                     l2086:
 22916                           
 22917                           ; BSR set to: 0
 22918                           ;main.c: 208: }
 22919                           ;main.c: 209: printf("Current Mode:\n Position Mode\n\n");
 22920                           
 22921                           ; BSR set to: 0
 22922  013E60  0E29               	movlw	low STR_10
 22923  013E62  0100               	movlb	0	; () banked
 22924  013E64  6F7B               	movwf	printf@f& (0+255),b
 22925  013E66  0EFF               	movlw	high STR_10
 22926  013E68  0100               	movlb	0	; () banked
 22927  013E6A  6F7C               	movwf	(printf@f+1)& (0+255),b
 22928  013E6C  EC7C  F096         	call	_printf	;wreg free
 22929                           
 22930                           ;main.c: 210: int angleDegrees = angle * 1.8;
 22931  013E70  0E66               	movlw	102
 22932  013E72  0100               	movlb	0	; () banked
 22933  013E74  6F80               	movwf	___flmul@a& (0+255),b
 22934  013E76  0E66               	movlw	102
 22935  013E78  6F81               	movwf	(___flmul@a+1)& (0+255),b
 22936  013E7A  0EE6               	movlw	230
 22937  013E7C  6F82               	movwf	(___flmul@a+2)& (0+255),b
 22938  013E7E  0E3F               	movlw	63
 22939  013E80  6F83               	movwf	(___flmul@a+3)& (0+255),b
 22940  013E82  C029  F07C         	movff	_angle,___flmul@b
 22941  013E86  C02A  F07D         	movff	_angle+1,___flmul@b+1
 22942  013E8A  C02B  F07E         	movff	_angle+2,___flmul@b+2
 22943  013E8E  C02C  F07F         	movff	_angle+3,___flmul@b+3
 22944  013E92  EC54  F082         	call	___flmul	;wreg free
 22945  013E96  C07C  F0BB         	movff	?___flmul,___fltol@f1
 22946  013E9A  C07D  F0BC         	movff	?___flmul+1,___fltol@f1+1
 22947  013E9E  C07E  F0BD         	movff	?___flmul+2,___fltol@f1+2
 22948  013EA2  C07F  F0BE         	movff	?___flmul+3,___fltol@f1+3
 22949  013EA6  ECF2  F09F         	call	___fltol	;wreg free
 22950  013EAA  C0BB  F0C5         	movff	?___fltol,displayPositionMode@angleDegrees
 22951  013EAE  C0BC  F0C6         	movff	?___fltol+1,displayPositionMode@angleDegrees+1
 22952                           
 22953                           ;main.c: 211: printf("Target Angle:\n %d \n", angleDegrees);
 22954  013EB2  0EC1               	movlw	low STR_11
 22955  013EB4  0100               	movlb	0	; () banked
 22956  013EB6  6F7B               	movwf	printf@f& (0+255),b
 22957  013EB8  0EFF               	movlw	high STR_11
 22958  013EBA  0100               	movlb	0	; () banked
 22959  013EBC  6F7C               	movwf	(printf@f+1)& (0+255),b
 22960  013EBE  C0C5  F07D         	movff	displayPositionMode@angleDegrees,?_printf+2
 22961  013EC2  C0C6  F07E         	movff	displayPositionMode@angleDegrees+1,?_printf+3
 22962  013EC6  EC7C  F096         	call	_printf	;wreg free
 22963  013ECA  0012               	return		;funcret
 22964  013ECC                     __end_of_displayPositionMode:
 22965                           	opt stack 0
 22966                           tosu	equ	0xFFF
 22967                           tosh	equ	0xFFE
 22968                           tosl	equ	0xFFD
 22969                           pclath	equ	0xFFA
 22970                           tblptru	equ	0xFF8
 22971                           tblptrh	equ	0xFF7
 22972                           tblptrl	equ	0xFF6
 22973                           tablat	equ	0xFF5
 22974                           prodh	equ	0xFF4
 22975                           prodl	equ	0xFF3
 22976                           intcon	equ	0xFF2
 22977                           indf0	equ	0xFEF
 22978                           postinc0	equ	0xFEE
 22979                           fsr0h	equ	0xFEA
 22980                           fsr0l	equ	0xFE9
 22981                           wreg	equ	0xFE8
 22982                           indf1	equ	0xFE7
 22983                           postdec1	equ	0xFE5
 22984                           fsr1h	equ	0xFE2
 22985                           fsr1l	equ	0xFE1
 22986                           indf2	equ	0xFDF
 22987                           postinc2	equ	0xFDE
 22988                           postdec2	equ	0xFDD
 22989                           plusw2	equ	0xFDB
 22990                           fsr2h	equ	0xFDA
 22991                           fsr2l	equ	0xFD9
 22992                           status	equ	0xFD8
 22993                           
 22994 ;; *************** function ___xxtofl *****************
 22995 ;; Defined at:
 22996 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 22997 ;; Parameters:    Size  Location     Type
 22998 ;;  sign            1    wreg     unsigned char 
 22999 ;;  val             4   14[BANK0 ] long 
 23000 ;; Auto vars:     Size  Location     Type
 23001 ;;  sign            1   22[BANK0 ] unsigned char 
 23002 ;;  arg             4   24[BANK0 ] unsigned long 
 23003 ;;  exp             1   23[BANK0 ] unsigned char 
 23004 ;; Return value:  Size  Location     Type
 23005 ;;                  4   14[BANK0 ] unsigned char 
 23006 ;; Registers used:
 23007 ;;		wreg, status,2, status,0
 23008 ;; Tracked objects:
 23009 ;;		On entry : 0/0
 23010 ;;		On exit  : 0/0
 23011 ;;		Unchanged: 0/0
 23012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23013 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23014 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23016 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23017 ;;Total ram usage:       14 bytes
 23018 ;; Hardware stack levels used:    1
 23019 ;; Hardware stack levels required when called:    7
 23020 ;; This function calls:
 23021 ;;		Nothing
 23022 ;; This function is called by:
 23023 ;;		_ADC_Voltage
 23024 ;;		_displayPositionMode
 23025 ;;		_positionMode
 23026 ;;		_pow
 23027 ;;		_exp
 23028 ;;		_floor
 23029 ;;		_log
 23030 ;; This function uses a non-reentrant model
 23031 ;;
 23032                           
 23033                           	psect	text118
 23034  01248C                     __ptext118:
 23035                           	opt stack 0
 23036  01248C                     ___xxtofl:
 23037                           	opt stack 21
 23038                           
 23039                           ;incstack = 0
 23040                           ;___xxtofl@sign stored from wreg
 23041  01248C  0100               	movlb	0	; () banked
 23042  01248E  6F76               	movwf	___xxtofl@sign& (0+255),b
 23043  012490  0100               	movlb	0	; () banked
 23044  012492  5176               	movf	___xxtofl@sign& (0+255),w,b
 23045  012494  0100               	movlb	0	; () banked
 23046  012496  B4D8               	btfsc	status,2,c
 23047  012498  D01E               	goto	l2725
 23048                           
 23049                           ; BSR set to: 0
 23050  01249A  0100               	movlb	0	; () banked
 23051  01249C  AF71               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23052  01249E  D01B               	goto	l2725
 23053                           
 23054                           ; BSR set to: 0
 23055  0124A0  C06E  F072         	movff	___xxtofl@val,??___xxtofl
 23056  0124A4  C06F  F073         	movff	___xxtofl@val+1,??___xxtofl+1
 23057  0124A8  C070  F074         	movff	___xxtofl@val+2,??___xxtofl+2
 23058  0124AC  C071  F075         	movff	___xxtofl@val+3,??___xxtofl+3
 23059  0124B0  0100               	movlb	0	; () banked
 23060  0124B2  1F72               	comf	??___xxtofl& (0+255),f,b
 23061  0124B4  1F73               	comf	(??___xxtofl+1)& (0+255),f,b
 23062  0124B6  1F74               	comf	(??___xxtofl+2)& (0+255),f,b
 23063  0124B8  1F75               	comf	(??___xxtofl+3)& (0+255),f,b
 23064  0124BA  2B72               	incf	??___xxtofl& (0+255),f,b
 23065  0124BC  0E00               	movlw	0
 23066  0124BE  2373               	addwfc	(??___xxtofl+1)& (0+255),f,b
 23067  0124C0  2374               	addwfc	(??___xxtofl+2)& (0+255),f,b
 23068  0124C2  2375               	addwfc	(??___xxtofl+3)& (0+255),f,b
 23069  0124C4  C072  F078         	movff	??___xxtofl,___xxtofl@arg
 23070  0124C8  C073  F079         	movff	??___xxtofl+1,___xxtofl@arg+1
 23071  0124CC  C074  F07A         	movff	??___xxtofl+2,___xxtofl@arg+2
 23072  0124D0  C075  F07B         	movff	??___xxtofl+3,___xxtofl@arg+3
 23073  0124D4  D008               	goto	l2726
 23074  0124D6                     l2725:
 23075                           
 23076                           ; BSR set to: 0
 23077  0124D6  C06E  F078         	movff	___xxtofl@val,___xxtofl@arg
 23078  0124DA  C06F  F079         	movff	___xxtofl@val+1,___xxtofl@arg+1
 23079  0124DE  C070  F07A         	movff	___xxtofl@val+2,___xxtofl@arg+2
 23080  0124E2  C071  F07B         	movff	___xxtofl@val+3,___xxtofl@arg+3
 23081  0124E6                     l2726:
 23082                           
 23083                           ; BSR set to: 0
 23084                           
 23085                           ; BSR set to: 0
 23086  0124E6  0100               	movlb	0	; () banked
 23087  0124E8  516E               	movf	___xxtofl@val& (0+255),w,b
 23088  0124EA  0100               	movlb	0	; () banked
 23089  0124EC  116F               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 23090  0124EE  0100               	movlb	0	; () banked
 23091  0124F0  1170               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 23092  0124F2  0100               	movlb	0	; () banked
 23093  0124F4  1171               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 23094  0124F6  A4D8               	btfss	status,2,c
 23095  0124F8  D00A               	goto	l2727
 23096                           
 23097                           ; BSR set to: 0
 23098  0124FA  0E00               	movlw	0
 23099  0124FC  0100               	movlb	0	; () banked
 23100  0124FE  6F6E               	movwf	?___xxtofl& (0+255),b
 23101  012500  0E00               	movlw	0
 23102  012502  6F6F               	movwf	(?___xxtofl+1)& (0+255),b
 23103  012504  0E00               	movlw	0
 23104  012506  6F70               	movwf	(?___xxtofl+2)& (0+255),b
 23105  012508  0E00               	movlw	0
 23106  01250A  6F71               	movwf	(?___xxtofl+3)& (0+255),b
 23107                           
 23108                           ; BSR set to: 0
 23109  01250C  0012               	return	
 23110  01250E                     l2727:
 23111                           
 23112                           ; BSR set to: 0
 23113                           
 23114                           ; BSR set to: 0
 23115  01250E  0E96               	movlw	150
 23116  012510  0100               	movlb	0	; () banked
 23117  012512  6F77               	movwf	___xxtofl@exp& (0+255),b
 23118  012514  D008               	goto	l2729
 23119  012516                     
 23120                           ; BSR set to: 0
 23121                           
 23122                           ; BSR set to: 0
 23123  012516  0100               	movlb	0	; () banked
 23124  012518  2B77               	incf	___xxtofl@exp& (0+255),f,b
 23125  01251A  0100               	movlb	0	; () banked
 23126  01251C  90D8               	bcf	status,0,c
 23127  01251E  337B               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23128  012520  337A               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23129  012522  3379               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23130  012524  3378               	rrcf	___xxtofl@arg& (0+255),f,b
 23131  012526                     l2729:
 23132                           
 23133                           ; BSR set to: 0
 23134                           
 23135                           ; BSR set to: 0
 23136  012526  0E00               	movlw	0
 23137  012528  0100               	movlb	0	; () banked
 23138  01252A  1578               	andwf	___xxtofl@arg& (0+255),w,b
 23139  01252C  0100               	movlb	0	; () banked
 23140  01252E  6F72               	movwf	??___xxtofl& (0+255),b
 23141  012530  0E00               	movlw	0
 23142  012532  0100               	movlb	0	; () banked
 23143  012534  1579               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23144  012536  0100               	movlb	0	; () banked
 23145  012538  6F73               	movwf	(??___xxtofl+1)& (0+255),b
 23146  01253A  0E00               	movlw	0
 23147  01253C  0100               	movlb	0	; () banked
 23148  01253E  157A               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23149  012540  0100               	movlb	0	; () banked
 23150  012542  6F74               	movwf	(??___xxtofl+2)& (0+255),b
 23151  012544  0EFE               	movlw	254
 23152  012546  0100               	movlb	0	; () banked
 23153  012548  157B               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23154  01254A  0100               	movlb	0	; () banked
 23155  01254C  6F75               	movwf	(??___xxtofl+3)& (0+255),b
 23156  01254E  0100               	movlb	0	; () banked
 23157  012550  5172               	movf	??___xxtofl& (0+255),w,b
 23158  012552  0100               	movlb	0	; () banked
 23159  012554  1173               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23160  012556  0100               	movlb	0	; () banked
 23161  012558  1174               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23162  01255A  0100               	movlb	0	; () banked
 23163  01255C  1175               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23164  01255E  B4D8               	btfsc	status,2,c
 23165  012560  D010               	goto	l2732
 23166  012562  D7D9               	goto	l2730
 23167  012564                     
 23168                           ; BSR set to: 0
 23169                           
 23170                           ; BSR set to: 0
 23171  012564  0100               	movlb	0	; () banked
 23172  012566  2B77               	incf	___xxtofl@exp& (0+255),f,b
 23173                           
 23174                           ; BSR set to: 0
 23175  012568  0E01               	movlw	1
 23176  01256A  0100               	movlb	0	; () banked
 23177  01256C  2778               	addwf	___xxtofl@arg& (0+255),f,b
 23178  01256E  0E00               	movlw	0
 23179  012570  2379               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 23180  012572  237A               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 23181  012574  237B               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 23182                           
 23183                           ; BSR set to: 0
 23184  012576  0100               	movlb	0	; () banked
 23185  012578  90D8               	bcf	status,0,c
 23186  01257A  337B               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 23187  01257C  337A               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 23188  01257E  3379               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 23189  012580  3378               	rrcf	___xxtofl@arg& (0+255),f,b
 23190  012582                     l2732:
 23191                           
 23192                           ; BSR set to: 0
 23193  012582  0E00               	movlw	0
 23194  012584  0100               	movlb	0	; () banked
 23195  012586  1578               	andwf	___xxtofl@arg& (0+255),w,b
 23196  012588  0100               	movlb	0	; () banked
 23197  01258A  6F72               	movwf	??___xxtofl& (0+255),b
 23198  01258C  0E00               	movlw	0
 23199  01258E  0100               	movlb	0	; () banked
 23200  012590  1579               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 23201  012592  0100               	movlb	0	; () banked
 23202  012594  6F73               	movwf	(??___xxtofl+1)& (0+255),b
 23203  012596  0E00               	movlw	0
 23204  012598  0100               	movlb	0	; () banked
 23205  01259A  157A               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 23206  01259C  0100               	movlb	0	; () banked
 23207  01259E  6F74               	movwf	(??___xxtofl+2)& (0+255),b
 23208  0125A0  0EFF               	movlw	255
 23209  0125A2  0100               	movlb	0	; () banked
 23210  0125A4  157B               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 23211  0125A6  0100               	movlb	0	; () banked
 23212  0125A8  6F75               	movwf	(??___xxtofl+3)& (0+255),b
 23213  0125AA  0100               	movlb	0	; () banked
 23214  0125AC  5172               	movf	??___xxtofl& (0+255),w,b
 23215  0125AE  0100               	movlb	0	; () banked
 23216  0125B0  1173               	iorwf	(??___xxtofl+1)& (0+255),w,b
 23217  0125B2  0100               	movlb	0	; () banked
 23218  0125B4  1174               	iorwf	(??___xxtofl+2)& (0+255),w,b
 23219  0125B6  0100               	movlb	0	; () banked
 23220  0125B8  1175               	iorwf	(??___xxtofl+3)& (0+255),w,b
 23221  0125BA  B4D8               	btfsc	status,2,c
 23222  0125BC  D009               	goto	l2735
 23223  0125BE  D7D2               	goto	l2733
 23224  0125C0                     
 23225                           ; BSR set to: 0
 23226                           
 23227                           ; BSR set to: 0
 23228  0125C0  0100               	movlb	0	; () banked
 23229  0125C2  0777               	decf	___xxtofl@exp& (0+255),f,b
 23230  0125C4  0100               	movlb	0	; () banked
 23231  0125C6  90D8               	bcf	status,0,c
 23232  0125C8  3778               	rlcf	___xxtofl@arg& (0+255),f,b
 23233  0125CA  3779               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 23234  0125CC  377A               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 23235  0125CE  377B               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 23236  0125D0                     l2735:
 23237                           
 23238                           ; BSR set to: 0
 23239                           
 23240                           ; BSR set to: 0
 23241  0125D0  0100               	movlb	0	; () banked
 23242  0125D2  BF7A               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 23243  0125D4  D004               	goto	u11050
 23244                           
 23245                           ; BSR set to: 0
 23246  0125D6  0E02               	movlw	2
 23247  0125D8  0100               	movlb	0	; () banked
 23248  0125DA  6177               	cpfslt	___xxtofl@exp& (0+255),b
 23249  0125DC  D7F1               	goto	l2736
 23250  0125DE                     u11050:
 23251                           
 23252                           ; BSR set to: 0
 23253                           
 23254                           ; BSR set to: 0
 23255  0125DE  0100               	movlb	0	; () banked
 23256  0125E0  B177               	btfsc	___xxtofl@exp& (0+255),0,b
 23257  0125E2  D009               	goto	l2740
 23258                           
 23259                           ; BSR set to: 0
 23260  0125E4  0EFF               	movlw	255
 23261  0125E6  0100               	movlb	0	; () banked
 23262  0125E8  1778               	andwf	___xxtofl@arg& (0+255),f,b
 23263  0125EA  0EFF               	movlw	255
 23264  0125EC  1779               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 23265  0125EE  0E7F               	movlw	127
 23266  0125F0  177A               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 23267  0125F2  0EFF               	movlw	255
 23268  0125F4  177B               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 23269  0125F6                     l2740:
 23270                           
 23271                           ; BSR set to: 0
 23272  0125F6  0100               	movlb	0	; () banked
 23273  0125F8  90D8               	bcf	status,0,c
 23274  0125FA  3377               	rrcf	___xxtofl@exp& (0+255),f,b
 23275  0125FC  C077  F072         	movff	___xxtofl@exp,??___xxtofl
 23276  012600  0100               	movlb	0	; () banked
 23277  012602  6B73               	clrf	(??___xxtofl+1)& (0+255),b
 23278  012604  6B74               	clrf	(??___xxtofl+2)& (0+255),b
 23279  012606  6B75               	clrf	(??___xxtofl+3)& (0+255),b
 23280  012608  C072  F075         	movff	??___xxtofl,??___xxtofl+3
 23281  01260C  0100               	movlb	0	; () banked
 23282  01260E  6B74               	clrf	(??___xxtofl+2)& (0+255),b
 23283  012610  6B73               	clrf	(??___xxtofl+1)& (0+255),b
 23284  012612  6B72               	clrf	??___xxtofl& (0+255),b
 23285  012614  0100               	movlb	0	; () banked
 23286  012616  5172               	movf	??___xxtofl& (0+255),w,b
 23287  012618  0100               	movlb	0	; () banked
 23288  01261A  1378               	iorwf	___xxtofl@arg& (0+255),f,b
 23289  01261C  0100               	movlb	0	; () banked
 23290  01261E  5173               	movf	(??___xxtofl+1)& (0+255),w,b
 23291  012620  0100               	movlb	0	; () banked
 23292  012622  1379               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 23293  012624  0100               	movlb	0	; () banked
 23294  012626  5174               	movf	(??___xxtofl+2)& (0+255),w,b
 23295  012628  0100               	movlb	0	; () banked
 23296  01262A  137A               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 23297  01262C  0100               	movlb	0	; () banked
 23298  01262E  5175               	movf	(??___xxtofl+3)& (0+255),w,b
 23299  012630  0100               	movlb	0	; () banked
 23300  012632  137B               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 23301                           
 23302                           ; BSR set to: 0
 23303  012634  0100               	movlb	0	; () banked
 23304  012636  5176               	movf	___xxtofl@sign& (0+255),w,b
 23305  012638  0100               	movlb	0	; () banked
 23306  01263A  B4D8               	btfsc	status,2,c
 23307  01263C  D005               	goto	l2741
 23308                           
 23309                           ; BSR set to: 0
 23310  01263E  0100               	movlb	0	; () banked
 23311  012640  AF71               	btfss	(___xxtofl@val+3)& (0+255),7,b
 23312  012642  D002               	goto	l2741
 23313                           
 23314                           ; BSR set to: 0
 23315  012644  0100               	movlb	0	; () banked
 23316  012646  8F7B               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 23317  012648                     l2741:
 23318                           
 23319                           ; BSR set to: 0
 23320                           
 23321                           ; BSR set to: 0
 23322  012648  C078  F06E         	movff	___xxtofl@arg,?___xxtofl
 23323  01264C  C079  F06F         	movff	___xxtofl@arg+1,?___xxtofl+1
 23324  012650  C07A  F070         	movff	___xxtofl@arg+2,?___xxtofl+2
 23325  012654  C07B  F071         	movff	___xxtofl@arg+3,?___xxtofl+3
 23326  012658  0012               	return	
 23327  01265A                     __end_of___xxtofl:
 23328                           	opt stack 0
 23329                           tosu	equ	0xFFF
 23330                           tosh	equ	0xFFE
 23331                           tosl	equ	0xFFD
 23332                           pclath	equ	0xFFA
 23333                           tblptru	equ	0xFF8
 23334                           tblptrh	equ	0xFF7
 23335                           tblptrl	equ	0xFF6
 23336                           tablat	equ	0xFF5
 23337                           prodh	equ	0xFF4
 23338                           prodl	equ	0xFF3
 23339                           intcon	equ	0xFF2
 23340                           indf0	equ	0xFEF
 23341                           postinc0	equ	0xFEE
 23342                           fsr0h	equ	0xFEA
 23343                           fsr0l	equ	0xFE9
 23344                           wreg	equ	0xFE8
 23345                           indf1	equ	0xFE7
 23346                           postdec1	equ	0xFE5
 23347                           fsr1h	equ	0xFE2
 23348                           fsr1l	equ	0xFE1
 23349                           indf2	equ	0xFDF
 23350                           postinc2	equ	0xFDE
 23351                           postdec2	equ	0xFDD
 23352                           plusw2	equ	0xFDB
 23353                           fsr2h	equ	0xFDA
 23354                           fsr2l	equ	0xFD9
 23355                           status	equ	0xFD8
 23356                           
 23357 ;; *************** function ___fltol *****************
 23358 ;; Defined at:
 23359 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
 23360 ;; Parameters:    Size  Location     Type
 23361 ;;  f1              4   91[BANK0 ] unsigned char 
 23362 ;; Auto vars:     Size  Location     Type
 23363 ;;  exp1            1  100[BANK0 ] unsigned char 
 23364 ;;  sign1           1   99[BANK0 ] unsigned char 
 23365 ;; Return value:  Size  Location     Type
 23366 ;;                  4   91[BANK0 ] long 
 23367 ;; Registers used:
 23368 ;;		wreg, status,2, status,0
 23369 ;; Tracked objects:
 23370 ;;		On entry : 0/0
 23371 ;;		On exit  : 0/0
 23372 ;;		Unchanged: 0/0
 23373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23376 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23377 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23378 ;;Total ram usage:       10 bytes
 23379 ;; Hardware stack levels used:    1
 23380 ;; Hardware stack levels required when called:    7
 23381 ;; This function calls:
 23382 ;;		Nothing
 23383 ;; This function is called by:
 23384 ;;		_displayPositionMode
 23385 ;;		_positionMode
 23386 ;;		_main
 23387 ;;		_pow
 23388 ;;		_exp
 23389 ;;		_floor
 23390 ;; This function uses a non-reentrant model
 23391 ;;
 23392                           
 23393                           	psect	text119
 23394  013FE4                     __ptext119:
 23395                           	opt stack 0
 23396  013FE4                     ___fltol:
 23397                           	opt stack 20
 23398                           
 23399                           ; BSR set to: 0
 23400                           ;incstack = 0
 23401  013FE4  0100               	movlb	0	; () banked
 23402  013FE6  35BD               	rlcf	(___fltol@f1+2)& (0+255),w,b
 23403  013FE8  35BE               	rlcf	(___fltol@f1+3)& (0+255),w,b
 23404  013FEA  0100               	movlb	0	; () banked
 23405  013FEC  6FC4               	movwf	___fltol@exp1& (0+255),b
 23406  013FEE  0100               	movlb	0	; () banked
 23407  013FF0  51C4               	movf	___fltol@exp1& (0+255),w,b
 23408  013FF2  A4D8               	btfss	status,2,c
 23409  013FF4  D00A               	goto	l2392
 23410                           
 23411                           ; BSR set to: 0
 23412  013FF6  0E00               	movlw	0
 23413  013FF8  0100               	movlb	0	; () banked
 23414  013FFA  6FBB               	movwf	?___fltol& (0+255),b
 23415  013FFC  0E00               	movlw	0
 23416  013FFE  6FBC               	movwf	(?___fltol+1)& (0+255),b
 23417  014000  0E00               	movlw	0
 23418  014002  6FBD               	movwf	(?___fltol+2)& (0+255),b
 23419  014004  0E00               	movlw	0
 23420  014006  6FBE               	movwf	(?___fltol+3)& (0+255),b
 23421                           
 23422                           ; BSR set to: 0
 23423  014008  0012               	return	
 23424  01400A                     l2392:
 23425                           
 23426                           ; BSR set to: 0
 23427                           
 23428                           ; BSR set to: 0
 23429  01400A  C0BB  F0BF         	movff	___fltol@f1,??___fltol
 23430  01400E  C0BC  F0C0         	movff	___fltol@f1+1,??___fltol+1
 23431  014012  C0BD  F0C1         	movff	___fltol@f1+2,??___fltol+2
 23432  014016  C0BE  F0C2         	movff	___fltol@f1+3,??___fltol+3
 23433  01401A  0E20               	movlw	32
 23434  01401C  D006               	goto	u10930
 23435  01401E                     u10935:
 23436  01401E  0100               	movlb	0	; () banked
 23437  014020  90D8               	bcf	status,0,c
 23438  014022  33C2               	rrcf	(??___fltol+3)& (0+255),f,b
 23439  014024  33C1               	rrcf	(??___fltol+2)& (0+255),f,b
 23440  014026  33C0               	rrcf	(??___fltol+1)& (0+255),f,b
 23441  014028  33BF               	rrcf	??___fltol& (0+255),f,b
 23442  01402A                     u10930:
 23443  01402A  2EE8               	decfsz	wreg,f,c
 23444  01402C  D7F8               	goto	u10935
 23445  01402E  0100               	movlb	0	; () banked
 23446  014030  51BF               	movf	??___fltol& (0+255),w,b
 23447  014032  0100               	movlb	0	; () banked
 23448  014034  6FC3               	movwf	___fltol@sign1& (0+255),b
 23449                           
 23450                           ; BSR set to: 0
 23451  014036  0100               	movlb	0	; () banked
 23452  014038  8FBD               	bsf	(___fltol@f1+2)& (0+255),7,b
 23453                           
 23454                           ; BSR set to: 0
 23455  01403A  0EFF               	movlw	255
 23456  01403C  0100               	movlb	0	; () banked
 23457  01403E  17BB               	andwf	___fltol@f1& (0+255),f,b
 23458  014040  0EFF               	movlw	255
 23459  014042  17BC               	andwf	(___fltol@f1+1)& (0+255),f,b
 23460  014044  0EFF               	movlw	255
 23461  014046  17BD               	andwf	(___fltol@f1+2)& (0+255),f,b
 23462  014048  0E00               	movlw	0
 23463  01404A  17BE               	andwf	(___fltol@f1+3)& (0+255),f,b
 23464                           
 23465                           ; BSR set to: 0
 23466  01404C  0E96               	movlw	150
 23467  01404E  0100               	movlb	0	; () banked
 23468  014050  5FC4               	subwf	___fltol@exp1& (0+255),f,b
 23469                           
 23470                           ; BSR set to: 0
 23471  014052  0100               	movlb	0	; () banked
 23472  014054  AFC4               	btfss	___fltol@exp1& (0+255),7,b
 23473  014056  D01A               	goto	l2394
 23474                           
 23475                           ; BSR set to: 0
 23476  014058  0100               	movlb	0	; () banked
 23477  01405A  51C4               	movf	___fltol@exp1& (0+255),w,b
 23478  01405C  0A80               	xorlw	128
 23479  01405E  0F97               	addlw	151
 23480  014060  B0D8               	btfsc	status,0,c
 23481  014062  D00A               	goto	l2395
 23482                           
 23483                           ; BSR set to: 0
 23484  014064  0E00               	movlw	0
 23485  014066  0100               	movlb	0	; () banked
 23486  014068  6FBB               	movwf	?___fltol& (0+255),b
 23487  01406A  0E00               	movlw	0
 23488  01406C  6FBC               	movwf	(?___fltol+1)& (0+255),b
 23489  01406E  0E00               	movlw	0
 23490  014070  6FBD               	movwf	(?___fltol+2)& (0+255),b
 23491  014072  0E00               	movlw	0
 23492  014074  6FBE               	movwf	(?___fltol+3)& (0+255),b
 23493                           
 23494                           ; BSR set to: 0
 23495  014076  0012               	return	
 23496  014078                     l2395:
 23497                           
 23498                           ; BSR set to: 0
 23499                           
 23500                           ; BSR set to: 0
 23501                           
 23502                           ; BSR set to: 0
 23503  014078  0100               	movlb	0	; () banked
 23504  01407A  90D8               	bcf	status,0,c
 23505  01407C  33BE               	rrcf	(___fltol@f1+3)& (0+255),f,b
 23506  01407E  33BD               	rrcf	(___fltol@f1+2)& (0+255),f,b
 23507  014080  33BC               	rrcf	(___fltol@f1+1)& (0+255),f,b
 23508  014082  33BB               	rrcf	___fltol@f1& (0+255),f,b
 23509                           
 23510                           ; BSR set to: 0
 23511  014084  0100               	movlb	0	; () banked
 23512  014086  3FC4               	incfsz	___fltol@exp1& (0+255),f,b
 23513  014088  D7F7               	goto	l2395
 23514                           
 23515                           ; BSR set to: 0
 23516  01408A  D01B               	goto	u10970
 23517  01408C                     l2394:
 23518                           
 23519                           ; BSR set to: 0
 23520                           
 23521                           ; BSR set to: 0
 23522  01408C  0E1F               	movlw	31
 23523  01408E  0100               	movlb	0	; () banked
 23524  014090  65C4               	cpfsgt	___fltol@exp1& (0+255),b
 23525  014092  D012               	goto	l2400
 23526                           
 23527                           ; BSR set to: 0
 23528  014094  0E00               	movlw	0
 23529  014096  0100               	movlb	0	; () banked
 23530  014098  6FBB               	movwf	?___fltol& (0+255),b
 23531  01409A  0E00               	movlw	0
 23532  01409C  6FBC               	movwf	(?___fltol+1)& (0+255),b
 23533  01409E  0E00               	movlw	0
 23534  0140A0  6FBD               	movwf	(?___fltol+2)& (0+255),b
 23535  0140A2  0E00               	movlw	0
 23536  0140A4  6FBE               	movwf	(?___fltol+3)& (0+255),b
 23537                           
 23538                           ; BSR set to: 0
 23539  0140A6  0012               	return	
 23540  0140A8                     
 23541                           ; BSR set to: 0
 23542                           
 23543                           ; BSR set to: 0
 23544  0140A8  0100               	movlb	0	; () banked
 23545  0140AA  90D8               	bcf	status,0,c
 23546  0140AC  37BB               	rlcf	___fltol@f1& (0+255),f,b
 23547  0140AE  37BC               	rlcf	(___fltol@f1+1)& (0+255),f,b
 23548  0140B0  37BD               	rlcf	(___fltol@f1+2)& (0+255),f,b
 23549  0140B2  37BE               	rlcf	(___fltol@f1+3)& (0+255),f,b
 23550  0140B4  0100               	movlb	0	; () banked
 23551  0140B6  07C4               	decf	___fltol@exp1& (0+255),f,b
 23552  0140B8                     l2400:
 23553                           
 23554                           ; BSR set to: 0
 23555                           
 23556                           ; BSR set to: 0
 23557  0140B8  0100               	movlb	0	; () banked
 23558  0140BA  51C4               	movf	___fltol@exp1& (0+255),w,b
 23559  0140BC  0100               	movlb	0	; () banked
 23560  0140BE  A4D8               	btfss	status,2,c
 23561  0140C0  D7F3               	goto	l2401
 23562  0140C2                     u10970:
 23563                           
 23564                           ; BSR set to: 0
 23565                           
 23566                           ; BSR set to: 0
 23567                           
 23568                           ; BSR set to: 0
 23569  0140C2  0100               	movlb	0	; () banked
 23570  0140C4  51C3               	movf	___fltol@sign1& (0+255),w,b
 23571  0140C6  0100               	movlb	0	; () banked
 23572  0140C8  B4D8               	btfsc	status,2,c
 23573  0140CA  D009               	goto	l2403
 23574                           
 23575                           ; BSR set to: 0
 23576  0140CC  0100               	movlb	0	; () banked
 23577  0140CE  1FBE               	comf	(___fltol@f1+3)& (0+255),f,b
 23578  0140D0  1FBD               	comf	(___fltol@f1+2)& (0+255),f,b
 23579  0140D2  1FBC               	comf	(___fltol@f1+1)& (0+255),f,b
 23580  0140D4  6DBB               	negf	___fltol@f1& (0+255),b
 23581  0140D6  0E00               	movlw	0
 23582  0140D8  23BC               	addwfc	(___fltol@f1+1)& (0+255),f,b
 23583  0140DA  23BD               	addwfc	(___fltol@f1+2)& (0+255),f,b
 23584  0140DC  23BE               	addwfc	(___fltol@f1+3)& (0+255),f,b
 23585  0140DE                     l2403:
 23586                           
 23587                           ; BSR set to: 0
 23588                           
 23589                           ; BSR set to: 0
 23590  0140DE  C0BB  F0BB         	movff	___fltol@f1,?___fltol
 23591  0140E2  C0BC  F0BC         	movff	___fltol@f1+1,?___fltol+1
 23592  0140E6  C0BD  F0BD         	movff	___fltol@f1+2,?___fltol+2
 23593  0140EA  C0BE  F0BE         	movff	___fltol@f1+3,?___fltol+3
 23594  0140EE  0012               	return	
 23595  0140F0                     __end_of___fltol:
 23596                           	opt stack 0
 23597                           tosu	equ	0xFFF
 23598                           tosh	equ	0xFFE
 23599                           tosl	equ	0xFFD
 23600                           pclath	equ	0xFFA
 23601                           tblptru	equ	0xFF8
 23602                           tblptrh	equ	0xFF7
 23603                           tblptrl	equ	0xFF6
 23604                           tablat	equ	0xFF5
 23605                           prodh	equ	0xFF4
 23606                           prodl	equ	0xFF3
 23607                           intcon	equ	0xFF2
 23608                           indf0	equ	0xFEF
 23609                           postinc0	equ	0xFEE
 23610                           fsr0h	equ	0xFEA
 23611                           fsr0l	equ	0xFE9
 23612                           wreg	equ	0xFE8
 23613                           indf1	equ	0xFE7
 23614                           postdec1	equ	0xFE5
 23615                           fsr1h	equ	0xFE2
 23616                           fsr1l	equ	0xFE1
 23617                           indf2	equ	0xFDF
 23618                           postinc2	equ	0xFDE
 23619                           postdec2	equ	0xFDD
 23620                           plusw2	equ	0xFDB
 23621                           fsr2h	equ	0xFDA
 23622                           fsr2l	equ	0xFD9
 23623                           status	equ	0xFD8
 23624                           
 23625 ;; *************** function ___flmul *****************
 23626 ;; Defined at:
 23627 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 23628 ;; Parameters:    Size  Location     Type
 23629 ;;  b               4   28[BANK0 ] long 
 23630 ;;  a               4   32[BANK0 ] long 
 23631 ;; Auto vars:     Size  Location     Type
 23632 ;;  prod            4   47[BANK0 ] struct .
 23633 ;;  grs             4   42[BANK0 ] unsigned long 
 23634 ;;  temp            2   51[BANK0 ] struct .
 23635 ;;  bexp            1   46[BANK0 ] unsigned char 
 23636 ;;  aexp            1   41[BANK0 ] unsigned char 
 23637 ;;  sign            1   40[BANK0 ] unsigned char 
 23638 ;; Return value:  Size  Location     Type
 23639 ;;                  4   28[BANK0 ] unsigned char 
 23640 ;; Registers used:
 23641 ;;		wreg, status,2, status,0, prodl, prodh
 23642 ;; Tracked objects:
 23643 ;;		On entry : 0/0
 23644 ;;		On exit  : 0/0
 23645 ;;		Unchanged: 0/0
 23646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23647 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23648 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23649 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23650 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23651 ;;Total ram usage:       25 bytes
 23652 ;; Hardware stack levels used:    1
 23653 ;; Hardware stack levels required when called:    7
 23654 ;; This function calls:
 23655 ;;		Nothing
 23656 ;; This function is called by:
 23657 ;;		_ADC_Voltage
 23658 ;;		_displayPositionMode
 23659 ;;		_main
 23660 ;;		_pow
 23661 ;;		_exp
 23662 ;;		_log
 23663 ;;		_eval_poly
 23664 ;; This function uses a non-reentrant model
 23665 ;;
 23666                           
 23667                           	psect	text120
 23668  0104A8                     __ptext120:
 23669                           	opt stack 0
 23670  0104A8                     ___flmul:
 23671                           	opt stack 20
 23672                           
 23673                           ; BSR set to: 0
 23674                           ;incstack = 0
 23675  0104A8  0100               	movlb	0	; () banked
 23676  0104AA  517F               	movf	(___flmul@b+3)& (0+255),w,b
 23677  0104AC  0B80               	andlw	128
 23678  0104AE  0100               	movlb	0	; () banked
 23679  0104B0  6F88               	movwf	___flmul@sign& (0+255),b
 23680  0104B2  0100               	movlb	0	; () banked
 23681  0104B4  517F               	movf	(___flmul@b+3)& (0+255),w,b
 23682  0104B6  257F               	addwf	(___flmul@b+3)& (0+255),w,b
 23683  0104B8  0100               	movlb	0	; () banked
 23684  0104BA  6F8E               	movwf	___flmul@bexp& (0+255),b
 23685                           
 23686                           ; BSR set to: 0
 23687  0104BC  0100               	movlb	0	; () banked
 23688  0104BE  AF7E               	btfss	(___flmul@b+2)& (0+255),7,b
 23689  0104C0  D002               	goto	l2696
 23690                           
 23691                           ; BSR set to: 0
 23692  0104C2  0100               	movlb	0	; () banked
 23693  0104C4  818E               	bsf	___flmul@bexp& (0+255),0,b
 23694  0104C6                     l2696:
 23695                           
 23696                           ; BSR set to: 0
 23697                           
 23698                           ; BSR set to: 0
 23699  0104C6  0100               	movlb	0	; () banked
 23700  0104C8  518E               	movf	___flmul@bexp& (0+255),w,b
 23701  0104CA  0100               	movlb	0	; () banked
 23702  0104CC  B4D8               	btfsc	status,2,c
 23703  0104CE  D010               	goto	l2697
 23704                           
 23705                           ; BSR set to: 0
 23706  0104D0  0100               	movlb	0	; () banked
 23707  0104D2  298E               	incf	___flmul@bexp& (0+255),w,b
 23708  0104D4  A4D8               	btfss	status,2,c
 23709  0104D6  D009               	goto	l2698
 23710                           
 23711                           ; BSR set to: 0
 23712  0104D8  0E00               	movlw	0
 23713  0104DA  0100               	movlb	0	; () banked
 23714  0104DC  6F7C               	movwf	___flmul@b& (0+255),b
 23715  0104DE  0E00               	movlw	0
 23716  0104E0  6F7D               	movwf	(___flmul@b+1)& (0+255),b
 23717  0104E2  0E00               	movlw	0
 23718  0104E4  6F7E               	movwf	(___flmul@b+2)& (0+255),b
 23719  0104E6  0E00               	movlw	0
 23720  0104E8  6F7F               	movwf	(___flmul@b+3)& (0+255),b
 23721  0104EA                     l2698:
 23722                           
 23723                           ; BSR set to: 0
 23724                           
 23725                           ; BSR set to: 0
 23726  0104EA  0100               	movlb	0	; () banked
 23727  0104EC  8F7E               	bsf	(___flmul@b+2)& (0+255),7,b
 23728  0104EE  D009               	goto	l2699
 23729  0104F0                     l2697:
 23730                           
 23731                           ; BSR set to: 0
 23732                           
 23733                           ; BSR set to: 0
 23734  0104F0  0E00               	movlw	0
 23735  0104F2  0100               	movlb	0	; () banked
 23736  0104F4  6F7C               	movwf	___flmul@b& (0+255),b
 23737  0104F6  0E00               	movlw	0
 23738  0104F8  6F7D               	movwf	(___flmul@b+1)& (0+255),b
 23739  0104FA  0E00               	movlw	0
 23740  0104FC  6F7E               	movwf	(___flmul@b+2)& (0+255),b
 23741  0104FE  0E00               	movlw	0
 23742  010500  6F7F               	movwf	(___flmul@b+3)& (0+255),b
 23743  010502                     l2699:
 23744                           
 23745                           ; BSR set to: 0
 23746                           
 23747                           ; BSR set to: 0
 23748  010502  0100               	movlb	0	; () banked
 23749  010504  5183               	movf	(___flmul@a+3)& (0+255),w,b
 23750  010506  0B80               	andlw	128
 23751  010508  0100               	movlb	0	; () banked
 23752  01050A  1B88               	xorwf	___flmul@sign& (0+255),f,b
 23753                           
 23754                           ; BSR set to: 0
 23755  01050C  0100               	movlb	0	; () banked
 23756  01050E  5183               	movf	(___flmul@a+3)& (0+255),w,b
 23757  010510  2583               	addwf	(___flmul@a+3)& (0+255),w,b
 23758  010512  0100               	movlb	0	; () banked
 23759  010514  6F89               	movwf	___flmul@aexp& (0+255),b
 23760                           
 23761                           ; BSR set to: 0
 23762  010516  0100               	movlb	0	; () banked
 23763  010518  AF82               	btfss	(___flmul@a+2)& (0+255),7,b
 23764  01051A  D002               	goto	l2700
 23765                           
 23766                           ; BSR set to: 0
 23767  01051C  0100               	movlb	0	; () banked
 23768  01051E  8189               	bsf	___flmul@aexp& (0+255),0,b
 23769  010520                     l2700:
 23770                           
 23771                           ; BSR set to: 0
 23772                           
 23773                           ; BSR set to: 0
 23774  010520  0100               	movlb	0	; () banked
 23775  010522  5189               	movf	___flmul@aexp& (0+255),w,b
 23776  010524  0100               	movlb	0	; () banked
 23777  010526  B4D8               	btfsc	status,2,c
 23778  010528  D010               	goto	l2701
 23779                           
 23780                           ; BSR set to: 0
 23781  01052A  0100               	movlb	0	; () banked
 23782  01052C  2989               	incf	___flmul@aexp& (0+255),w,b
 23783  01052E  A4D8               	btfss	status,2,c
 23784  010530  D009               	goto	l2702
 23785                           
 23786                           ; BSR set to: 0
 23787  010532  0E00               	movlw	0
 23788  010534  0100               	movlb	0	; () banked
 23789  010536  6F80               	movwf	___flmul@a& (0+255),b
 23790  010538  0E00               	movlw	0
 23791  01053A  6F81               	movwf	(___flmul@a+1)& (0+255),b
 23792  01053C  0E00               	movlw	0
 23793  01053E  6F82               	movwf	(___flmul@a+2)& (0+255),b
 23794  010540  0E00               	movlw	0
 23795  010542  6F83               	movwf	(___flmul@a+3)& (0+255),b
 23796  010544                     l2702:
 23797                           
 23798                           ; BSR set to: 0
 23799                           
 23800                           ; BSR set to: 0
 23801  010544  0100               	movlb	0	; () banked
 23802  010546  8F82               	bsf	(___flmul@a+2)& (0+255),7,b
 23803  010548  D009               	goto	l2703
 23804  01054A                     l2701:
 23805                           
 23806                           ; BSR set to: 0
 23807                           
 23808                           ; BSR set to: 0
 23809  01054A  0E00               	movlw	0
 23810  01054C  0100               	movlb	0	; () banked
 23811  01054E  6F80               	movwf	___flmul@a& (0+255),b
 23812  010550  0E00               	movlw	0
 23813  010552  6F81               	movwf	(___flmul@a+1)& (0+255),b
 23814  010554  0E00               	movlw	0
 23815  010556  6F82               	movwf	(___flmul@a+2)& (0+255),b
 23816  010558  0E00               	movlw	0
 23817  01055A  6F83               	movwf	(___flmul@a+3)& (0+255),b
 23818  01055C                     l2703:
 23819                           
 23820                           ; BSR set to: 0
 23821  01055C  0100               	movlb	0	; () banked
 23822  01055E  5189               	movf	___flmul@aexp& (0+255),w,b
 23823  010560  0100               	movlb	0	; () banked
 23824  010562  B4D8               	btfsc	status,2,c
 23825  010564  D005               	goto	u10750
 23826                           
 23827                           ; BSR set to: 0
 23828  010566  0100               	movlb	0	; () banked
 23829  010568  518E               	movf	___flmul@bexp& (0+255),w,b
 23830  01056A  0100               	movlb	0	; () banked
 23831  01056C  A4D8               	btfss	status,2,c
 23832  01056E  D00A               	goto	l2704
 23833  010570                     u10750:
 23834                           
 23835                           ; BSR set to: 0
 23836                           
 23837                           ; BSR set to: 0
 23838  010570  0E00               	movlw	0
 23839  010572  0100               	movlb	0	; () banked
 23840  010574  6F7C               	movwf	?___flmul& (0+255),b
 23841  010576  0E00               	movlw	0
 23842  010578  6F7D               	movwf	(?___flmul+1)& (0+255),b
 23843  01057A  0E00               	movlw	0
 23844  01057C  6F7E               	movwf	(?___flmul+2)& (0+255),b
 23845  01057E  0E00               	movlw	0
 23846  010580  6F7F               	movwf	(?___flmul+3)& (0+255),b
 23847                           
 23848                           ; BSR set to: 0
 23849  010582  0012               	return	
 23850  010584                     l2704:
 23851                           
 23852                           ; BSR set to: 0
 23853                           
 23854                           ; BSR set to: 0
 23855  010584  0100               	movlb	0	; () banked
 23856  010586  5182               	movf	(___flmul@a+2)& (0+255),w,b
 23857  010588  0100               	movlb	0	; () banked
 23858  01058A  037C               	mulwf	___flmul@b& (0+255),b
 23859  01058C  CFF3 F093          	movff	prodl,___flmul@temp
 23860  010590  CFF4 F094          	movff	prodh,___flmul@temp+1
 23861                           
 23862                           ; BSR set to: 0
 23863  010594  0100               	movlb	0	; () banked
 23864  010596  5193               	movf	___flmul@temp& (0+255),w,b
 23865  010598  0100               	movlb	0	; () banked
 23866  01059A  6F8A               	movwf	___flmul@grs& (0+255),b
 23867  01059C  6B8B               	clrf	(___flmul@grs+1)& (0+255),b
 23868  01059E  6B8C               	clrf	(___flmul@grs+2)& (0+255),b
 23869  0105A0  6B8D               	clrf	(___flmul@grs+3)& (0+255),b
 23870                           
 23871                           ; BSR set to: 0
 23872  0105A2  0100               	movlb	0	; () banked
 23873  0105A4  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 23874  0105A6  0100               	movlb	0	; () banked
 23875  0105A8  6F8F               	movwf	___flmul@prod& (0+255),b
 23876  0105AA  6B90               	clrf	(___flmul@prod+1)& (0+255),b
 23877  0105AC  6B91               	clrf	(___flmul@prod+2)& (0+255),b
 23878  0105AE  6B92               	clrf	(___flmul@prod+3)& (0+255),b
 23879  0105B0  0100               	movlb	0	; () banked
 23880  0105B2  5181               	movf	(___flmul@a+1)& (0+255),w,b
 23881  0105B4  0100               	movlb	0	; () banked
 23882  0105B6  037D               	mulwf	(___flmul@b+1)& (0+255),b
 23883  0105B8  CFF3 F093          	movff	prodl,___flmul@temp
 23884  0105BC  CFF4 F094          	movff	prodh,___flmul@temp+1
 23885                           
 23886                           ; BSR set to: 0
 23887  0105C0  0100               	movlb	0	; () banked
 23888  0105C2  5193               	movf	___flmul@temp& (0+255),w,b
 23889  0105C4  0100               	movlb	0	; () banked
 23890  0105C6  278A               	addwf	___flmul@grs& (0+255),f,b
 23891  0105C8  0E00               	movlw	0
 23892  0105CA  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23893  0105CC  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23894  0105CE  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23895                           
 23896                           ; BSR set to: 0
 23897  0105D0  0100               	movlb	0	; () banked
 23898  0105D2  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 23899  0105D4  0100               	movlb	0	; () banked
 23900  0105D6  278F               	addwf	___flmul@prod& (0+255),f,b
 23901  0105D8  0E00               	movlw	0
 23902  0105DA  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23903  0105DC  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23904  0105DE  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23905  0105E0  0100               	movlb	0	; () banked
 23906  0105E2  5180               	movf	___flmul@a& (0+255),w,b
 23907  0105E4  0100               	movlb	0	; () banked
 23908  0105E6  037E               	mulwf	(___flmul@b+2)& (0+255),b
 23909  0105E8  CFF3 F093          	movff	prodl,___flmul@temp
 23910  0105EC  CFF4 F094          	movff	prodh,___flmul@temp+1
 23911                           
 23912                           ; BSR set to: 0
 23913  0105F0  0100               	movlb	0	; () banked
 23914  0105F2  5193               	movf	___flmul@temp& (0+255),w,b
 23915  0105F4  0100               	movlb	0	; () banked
 23916  0105F6  278A               	addwf	___flmul@grs& (0+255),f,b
 23917  0105F8  0E00               	movlw	0
 23918  0105FA  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23919  0105FC  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23920  0105FE  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23921                           
 23922                           ; BSR set to: 0
 23923  010600  0100               	movlb	0	; () banked
 23924  010602  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 23925  010604  0100               	movlb	0	; () banked
 23926  010606  278F               	addwf	___flmul@prod& (0+255),f,b
 23927  010608  0E00               	movlw	0
 23928  01060A  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 23929  01060C  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 23930  01060E  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 23931                           
 23932                           ; BSR set to: 0
 23933  010610  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
 23934  010614  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
 23935  010618  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
 23936  01061C  0100               	movlb	0	; () banked
 23937  01061E  6B8A               	clrf	___flmul@grs& (0+255),b
 23938                           
 23939                           ; BSR set to: 0
 23940  010620  0100               	movlb	0	; () banked
 23941  010622  5180               	movf	___flmul@a& (0+255),w,b
 23942  010624  0100               	movlb	0	; () banked
 23943  010626  037D               	mulwf	(___flmul@b+1)& (0+255),b
 23944  010628  CFF3 F093          	movff	prodl,___flmul@temp
 23945  01062C  CFF4 F094          	movff	prodh,___flmul@temp+1
 23946                           
 23947                           ; BSR set to: 0
 23948  010630  0100               	movlb	0	; () banked
 23949  010632  5193               	movf	___flmul@temp& (0+255),w,b
 23950  010634  0100               	movlb	0	; () banked
 23951  010636  278A               	addwf	___flmul@grs& (0+255),f,b
 23952  010638  0100               	movlb	0	; () banked
 23953  01063A  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 23954  01063C  0100               	movlb	0	; () banked
 23955  01063E  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23956  010640  0E00               	movlw	0
 23957  010642  0100               	movlb	0	; () banked
 23958  010644  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23959  010646  0E00               	movlw	0
 23960  010648  0100               	movlb	0	; () banked
 23961  01064A  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23962                           
 23963                           ; BSR set to: 0
 23964  01064C  0100               	movlb	0	; () banked
 23965  01064E  5181               	movf	(___flmul@a+1)& (0+255),w,b
 23966  010650  0100               	movlb	0	; () banked
 23967  010652  037C               	mulwf	___flmul@b& (0+255),b
 23968  010654  CFF3 F093          	movff	prodl,___flmul@temp
 23969  010658  CFF4 F094          	movff	prodh,___flmul@temp+1
 23970                           
 23971                           ; BSR set to: 0
 23972  01065C  0100               	movlb	0	; () banked
 23973  01065E  5193               	movf	___flmul@temp& (0+255),w,b
 23974  010660  0100               	movlb	0	; () banked
 23975  010662  278A               	addwf	___flmul@grs& (0+255),f,b
 23976  010664  0100               	movlb	0	; () banked
 23977  010666  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 23978  010668  0100               	movlb	0	; () banked
 23979  01066A  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 23980  01066C  0E00               	movlw	0
 23981  01066E  0100               	movlb	0	; () banked
 23982  010670  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 23983  010672  0E00               	movlw	0
 23984  010674  0100               	movlb	0	; () banked
 23985  010676  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 23986                           
 23987                           ; BSR set to: 0
 23988  010678  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
 23989  01067C  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
 23990  010680  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
 23991  010684  0100               	movlb	0	; () banked
 23992  010686  6B8A               	clrf	___flmul@grs& (0+255),b
 23993  010688  0100               	movlb	0	; () banked
 23994  01068A  5180               	movf	___flmul@a& (0+255),w,b
 23995  01068C  0100               	movlb	0	; () banked
 23996  01068E  037C               	mulwf	___flmul@b& (0+255),b
 23997  010690  CFF3 F093          	movff	prodl,___flmul@temp
 23998  010694  CFF4 F094          	movff	prodh,___flmul@temp+1
 23999                           
 24000                           ; BSR set to: 0
 24001  010698  0100               	movlb	0	; () banked
 24002  01069A  5193               	movf	___flmul@temp& (0+255),w,b
 24003  01069C  0100               	movlb	0	; () banked
 24004  01069E  278A               	addwf	___flmul@grs& (0+255),f,b
 24005  0106A0  0100               	movlb	0	; () banked
 24006  0106A2  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 24007  0106A4  0100               	movlb	0	; () banked
 24008  0106A6  238B               	addwfc	(___flmul@grs+1)& (0+255),f,b
 24009  0106A8  0E00               	movlw	0
 24010  0106AA  0100               	movlb	0	; () banked
 24011  0106AC  238C               	addwfc	(___flmul@grs+2)& (0+255),f,b
 24012  0106AE  0E00               	movlw	0
 24013  0106B0  0100               	movlb	0	; () banked
 24014  0106B2  238D               	addwfc	(___flmul@grs+3)& (0+255),f,b
 24015                           
 24016                           ; BSR set to: 0
 24017  0106B4  0100               	movlb	0	; () banked
 24018  0106B6  5182               	movf	(___flmul@a+2)& (0+255),w,b
 24019  0106B8  0100               	movlb	0	; () banked
 24020  0106BA  037D               	mulwf	(___flmul@b+1)& (0+255),b
 24021  0106BC  CFF3 F093          	movff	prodl,___flmul@temp
 24022  0106C0  CFF4 F094          	movff	prodh,___flmul@temp+1
 24023  0106C4  0100               	movlb	0	; () banked
 24024  0106C6  5193               	movf	___flmul@temp& (0+255),w,b
 24025  0106C8  0100               	movlb	0	; () banked
 24026  0106CA  278F               	addwf	___flmul@prod& (0+255),f,b
 24027  0106CC  0100               	movlb	0	; () banked
 24028  0106CE  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 24029  0106D0  0100               	movlb	0	; () banked
 24030  0106D2  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24031  0106D4  0E00               	movlw	0
 24032  0106D6  0100               	movlb	0	; () banked
 24033  0106D8  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24034  0106DA  0E00               	movlw	0
 24035  0106DC  0100               	movlb	0	; () banked
 24036  0106DE  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24037                           
 24038                           ; BSR set to: 0
 24039  0106E0  0100               	movlb	0	; () banked
 24040  0106E2  5181               	movf	(___flmul@a+1)& (0+255),w,b
 24041  0106E4  0100               	movlb	0	; () banked
 24042  0106E6  037E               	mulwf	(___flmul@b+2)& (0+255),b
 24043  0106E8  CFF3 F093          	movff	prodl,___flmul@temp
 24044  0106EC  CFF4 F094          	movff	prodh,___flmul@temp+1
 24045                           
 24046                           ; BSR set to: 0
 24047  0106F0  0100               	movlb	0	; () banked
 24048  0106F2  5193               	movf	___flmul@temp& (0+255),w,b
 24049  0106F4  0100               	movlb	0	; () banked
 24050  0106F6  278F               	addwf	___flmul@prod& (0+255),f,b
 24051  0106F8  0100               	movlb	0	; () banked
 24052  0106FA  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 24053  0106FC  0100               	movlb	0	; () banked
 24054  0106FE  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24055  010700  0E00               	movlw	0
 24056  010702  0100               	movlb	0	; () banked
 24057  010704  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24058  010706  0E00               	movlw	0
 24059  010708  0100               	movlb	0	; () banked
 24060  01070A  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24061  01070C  0100               	movlb	0	; () banked
 24062  01070E  5182               	movf	(___flmul@a+2)& (0+255),w,b
 24063  010710  0100               	movlb	0	; () banked
 24064  010712  037E               	mulwf	(___flmul@b+2)& (0+255),b
 24065  010714  CFF3 F093          	movff	prodl,___flmul@temp
 24066  010718  CFF4 F094          	movff	prodh,___flmul@temp+1
 24067                           
 24068                           ; BSR set to: 0
 24069  01071C  0100               	movlb	0	; () banked
 24070  01071E  5193               	movf	___flmul@temp& (0+255),w,b
 24071  010720  0100               	movlb	0	; () banked
 24072  010722  6F84               	movwf	??___flmul& (0+255),b
 24073  010724  0100               	movlb	0	; () banked
 24074  010726  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 24075  010728  0100               	movlb	0	; () banked
 24076  01072A  6F85               	movwf	(??___flmul+1)& (0+255),b
 24077  01072C  0100               	movlb	0	; () banked
 24078  01072E  6B86               	clrf	(??___flmul+2)& (0+255),b
 24079  010730  0100               	movlb	0	; () banked
 24080  010732  6B87               	clrf	(??___flmul+3)& (0+255),b
 24081  010734  C086  F087         	movff	??___flmul+2,??___flmul+3
 24082  010738  C085  F086         	movff	??___flmul+1,??___flmul+2
 24083  01073C  C084  F085         	movff	??___flmul,??___flmul+1
 24084  010740  0100               	movlb	0	; () banked
 24085  010742  6B84               	clrf	??___flmul& (0+255),b
 24086  010744  0100               	movlb	0	; () banked
 24087  010746  5184               	movf	??___flmul& (0+255),w,b
 24088  010748  0100               	movlb	0	; () banked
 24089  01074A  278F               	addwf	___flmul@prod& (0+255),f,b
 24090  01074C  0100               	movlb	0	; () banked
 24091  01074E  5185               	movf	(??___flmul+1)& (0+255),w,b
 24092  010750  0100               	movlb	0	; () banked
 24093  010752  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24094  010754  0100               	movlb	0	; () banked
 24095  010756  5186               	movf	(??___flmul+2)& (0+255),w,b
 24096  010758  0100               	movlb	0	; () banked
 24097  01075A  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24098  01075C  0100               	movlb	0	; () banked
 24099  01075E  5187               	movf	(??___flmul+3)& (0+255),w,b
 24100  010760  0100               	movlb	0	; () banked
 24101  010762  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24102                           
 24103                           ; BSR set to: 0
 24104  010764  C08A  F084         	movff	___flmul@grs,??___flmul
 24105  010768  C08B  F085         	movff	___flmul@grs+1,??___flmul+1
 24106  01076C  C08C  F086         	movff	___flmul@grs+2,??___flmul+2
 24107  010770  C08D  F087         	movff	___flmul@grs+3,??___flmul+3
 24108  010774  0E19               	movlw	25
 24109  010776  D006               	goto	u10760
 24110  010778                     u10765:
 24111  010778  0100               	movlb	0	; () banked
 24112  01077A  90D8               	bcf	status,0,c
 24113  01077C  3387               	rrcf	(??___flmul+3)& (0+255),f,b
 24114  01077E  3386               	rrcf	(??___flmul+2)& (0+255),f,b
 24115  010780  3385               	rrcf	(??___flmul+1)& (0+255),f,b
 24116  010782  3384               	rrcf	??___flmul& (0+255),f,b
 24117  010784                     u10760:
 24118  010784  2EE8               	decfsz	wreg,f,c
 24119  010786  D7F8               	goto	u10765
 24120  010788  0100               	movlb	0	; () banked
 24121  01078A  5184               	movf	??___flmul& (0+255),w,b
 24122  01078C  0100               	movlb	0	; () banked
 24123  01078E  278F               	addwf	___flmul@prod& (0+255),f,b
 24124  010790  0100               	movlb	0	; () banked
 24125  010792  5185               	movf	(??___flmul+1)& (0+255),w,b
 24126  010794  0100               	movlb	0	; () banked
 24127  010796  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24128  010798  0100               	movlb	0	; () banked
 24129  01079A  5186               	movf	(??___flmul+2)& (0+255),w,b
 24130  01079C  0100               	movlb	0	; () banked
 24131  01079E  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24132  0107A0  0100               	movlb	0	; () banked
 24133  0107A2  5187               	movf	(??___flmul+3)& (0+255),w,b
 24134  0107A4  0100               	movlb	0	; () banked
 24135  0107A6  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24136                           
 24137                           ; BSR set to: 0
 24138  0107A8  C08C  F08D         	movff	___flmul@grs+2,___flmul@grs+3
 24139  0107AC  C08B  F08C         	movff	___flmul@grs+1,___flmul@grs+2
 24140  0107B0  C08A  F08B         	movff	___flmul@grs,___flmul@grs+1
 24141  0107B4  0100               	movlb	0	; () banked
 24142  0107B6  6B8A               	clrf	___flmul@grs& (0+255),b
 24143                           
 24144                           ; BSR set to: 0
 24145  0107B8  0100               	movlb	0	; () banked
 24146  0107BA  5189               	movf	___flmul@aexp& (0+255),w,b
 24147  0107BC  C08E  F084         	movff	___flmul@bexp,??___flmul
 24148  0107C0  0100               	movlb	0	; () banked
 24149  0107C2  6B85               	clrf	(??___flmul+1)& (0+255),b
 24150  0107C4  0100               	movlb	0	; () banked
 24151  0107C6  2784               	addwf	??___flmul& (0+255),f,b
 24152  0107C8  0E00               	movlw	0
 24153  0107CA  2385               	addwfc	(??___flmul+1)& (0+255),f,b
 24154  0107CC  0E82               	movlw	130
 24155  0107CE  0100               	movlb	0	; () banked
 24156  0107D0  2584               	addwf	??___flmul& (0+255),w,b
 24157  0107D2  0100               	movlb	0	; () banked
 24158  0107D4  6F93               	movwf	___flmul@temp& (0+255),b
 24159  0107D6  0EFF               	movlw	255
 24160  0107D8  0100               	movlb	0	; () banked
 24161  0107DA  2185               	addwfc	(??___flmul+1)& (0+255),w,b
 24162  0107DC  0100               	movlb	0	; () banked
 24163  0107DE  6F94               	movwf	(___flmul@temp+1)& (0+255),b
 24164  0107E0  D015               	goto	l2708
 24165  0107E2                     
 24166                           ; BSR set to: 0
 24167                           
 24168                           ; BSR set to: 0
 24169  0107E2  0100               	movlb	0	; () banked
 24170  0107E4  90D8               	bcf	status,0,c
 24171  0107E6  378F               	rlcf	___flmul@prod& (0+255),f,b
 24172  0107E8  3790               	rlcf	(___flmul@prod+1)& (0+255),f,b
 24173  0107EA  3791               	rlcf	(___flmul@prod+2)& (0+255),f,b
 24174  0107EC  3792               	rlcf	(___flmul@prod+3)& (0+255),f,b
 24175                           
 24176                           ; BSR set to: 0
 24177  0107EE  0100               	movlb	0	; () banked
 24178  0107F0  AF8D               	btfss	(___flmul@grs+3)& (0+255),7,b
 24179  0107F2  D002               	goto	l2710
 24180                           
 24181                           ; BSR set to: 0
 24182  0107F4  0100               	movlb	0	; () banked
 24183  0107F6  818F               	bsf	___flmul@prod& (0+255),0,b
 24184  0107F8                     l2710:
 24185                           
 24186                           ; BSR set to: 0
 24187  0107F8  0100               	movlb	0	; () banked
 24188  0107FA  90D8               	bcf	status,0,c
 24189  0107FC  378A               	rlcf	___flmul@grs& (0+255),f,b
 24190  0107FE  378B               	rlcf	(___flmul@grs+1)& (0+255),f,b
 24191  010800  378C               	rlcf	(___flmul@grs+2)& (0+255),f,b
 24192  010802  378D               	rlcf	(___flmul@grs+3)& (0+255),f,b
 24193  010804  0100               	movlb	0	; () banked
 24194  010806  0793               	decf	___flmul@temp& (0+255),f,b
 24195  010808  A0D8               	btfss	status,0,c
 24196  01080A  0794               	decf	(___flmul@temp+1)& (0+255),f,b
 24197  01080C                     l2708:
 24198                           
 24199                           ; BSR set to: 0
 24200                           
 24201                           ; BSR set to: 0
 24202  01080C  0100               	movlb	0	; () banked
 24203  01080E  AF91               	btfss	(___flmul@prod+2)& (0+255),7,b
 24204  010810  D7E8               	goto	l2709
 24205                           
 24206                           ; BSR set to: 0
 24207                           
 24208                           ; BSR set to: 0
 24209  010812  0E00               	movlw	0
 24210  010814  0100               	movlb	0	; () banked
 24211  010816  6F89               	movwf	___flmul@aexp& (0+255),b
 24212                           
 24213                           ; BSR set to: 0
 24214  010818  0100               	movlb	0	; () banked
 24215  01081A  AF8D               	btfss	(___flmul@grs+3)& (0+255),7,b
 24216  01081C  D024               	goto	l2715
 24217                           
 24218                           ; BSR set to: 0
 24219  01081E  0EFF               	movlw	255
 24220  010820  0100               	movlb	0	; () banked
 24221  010822  158A               	andwf	___flmul@grs& (0+255),w,b
 24222  010824  0100               	movlb	0	; () banked
 24223  010826  6F84               	movwf	??___flmul& (0+255),b
 24224  010828  0EFF               	movlw	255
 24225  01082A  0100               	movlb	0	; () banked
 24226  01082C  158B               	andwf	(___flmul@grs+1)& (0+255),w,b
 24227  01082E  0100               	movlb	0	; () banked
 24228  010830  6F85               	movwf	(??___flmul+1)& (0+255),b
 24229  010832  0EFF               	movlw	255
 24230  010834  0100               	movlb	0	; () banked
 24231  010836  158C               	andwf	(___flmul@grs+2)& (0+255),w,b
 24232  010838  0100               	movlb	0	; () banked
 24233  01083A  6F86               	movwf	(??___flmul+2)& (0+255),b
 24234  01083C  0E7F               	movlw	127
 24235  01083E  0100               	movlb	0	; () banked
 24236  010840  158D               	andwf	(___flmul@grs+3)& (0+255),w,b
 24237  010842  0100               	movlb	0	; () banked
 24238  010844  6F87               	movwf	(??___flmul+3)& (0+255),b
 24239  010846  0100               	movlb	0	; () banked
 24240  010848  5184               	movf	??___flmul& (0+255),w,b
 24241  01084A  0100               	movlb	0	; () banked
 24242  01084C  1185               	iorwf	(??___flmul+1)& (0+255),w,b
 24243  01084E  0100               	movlb	0	; () banked
 24244  010850  1186               	iorwf	(??___flmul+2)& (0+255),w,b
 24245  010852  0100               	movlb	0	; () banked
 24246  010854  1187               	iorwf	(??___flmul+3)& (0+255),w,b
 24247  010856  A4D8               	btfss	status,2,c
 24248  010858  D003               	goto	u10810
 24249                           
 24250                           ; BSR set to: 0
 24251                           
 24252                           ; BSR set to: 0
 24253  01085A  0100               	movlb	0	; () banked
 24254  01085C  A18F               	btfss	___flmul@prod& (0+255),0,b
 24255  01085E  D003               	goto	l2715
 24256  010860                     u10810:
 24257                           
 24258                           ; BSR set to: 0
 24259  010860  0E01               	movlw	1
 24260  010862  0100               	movlb	0	; () banked
 24261  010864  6F89               	movwf	___flmul@aexp& (0+255),b
 24262  010866                     l2715:
 24263                           
 24264                           ; BSR set to: 0
 24265                           
 24266                           ; BSR set to: 0
 24267                           
 24268                           ; BSR set to: 0
 24269  010866  0100               	movlb	0	; () banked
 24270  010868  5189               	movf	___flmul@aexp& (0+255),w,b
 24271  01086A  0100               	movlb	0	; () banked
 24272  01086C  B4D8               	btfsc	status,2,c
 24273  01086E  D023               	goto	l2717
 24274                           
 24275                           ; BSR set to: 0
 24276  010870  0E01               	movlw	1
 24277  010872  0100               	movlb	0	; () banked
 24278  010874  278F               	addwf	___flmul@prod& (0+255),f,b
 24279  010876  0E00               	movlw	0
 24280  010878  2390               	addwfc	(___flmul@prod+1)& (0+255),f,b
 24281  01087A  2391               	addwfc	(___flmul@prod+2)& (0+255),f,b
 24282  01087C  2392               	addwfc	(___flmul@prod+3)& (0+255),f,b
 24283                           
 24284                           ; BSR set to: 0
 24285  01087E  0100               	movlb	0	; () banked
 24286  010880  A192               	btfss	(___flmul@prod+3)& (0+255),0,b
 24287  010882  D019               	goto	l2717
 24288                           
 24289                           ; BSR set to: 0
 24290  010884  C08F  F084         	movff	___flmul@prod,??___flmul
 24291  010888  C090  F085         	movff	___flmul@prod+1,??___flmul+1
 24292  01088C  C091  F086         	movff	___flmul@prod+2,??___flmul+2
 24293  010890  C092  F087         	movff	___flmul@prod+3,??___flmul+3
 24294  010894  0100               	movlb	0	; () banked
 24295  010896  3587               	rlcf	(??___flmul+3)& (0+255),w,b
 24296  010898  3387               	rrcf	(??___flmul+3)& (0+255),f,b
 24297  01089A  3386               	rrcf	(??___flmul+2)& (0+255),f,b
 24298  01089C  3385               	rrcf	(??___flmul+1)& (0+255),f,b
 24299  01089E  3384               	rrcf	??___flmul& (0+255),f,b
 24300  0108A0  C084  F08F         	movff	??___flmul,___flmul@prod
 24301  0108A4  C085  F090         	movff	??___flmul+1,___flmul@prod+1
 24302  0108A8  C086  F091         	movff	??___flmul+2,___flmul@prod+2
 24303  0108AC  C087  F092         	movff	??___flmul+3,___flmul@prod+3
 24304                           
 24305                           ; BSR set to: 0
 24306  0108B0  0100               	movlb	0	; () banked
 24307  0108B2  4B93               	infsnz	___flmul@temp& (0+255),f,b
 24308  0108B4  2B94               	incf	(___flmul@temp+1)& (0+255),f,b
 24309  0108B6                     l2717:
 24310                           
 24311                           ; BSR set to: 0
 24312                           
 24313                           ; BSR set to: 0
 24314                           
 24315                           ; BSR set to: 0
 24316  0108B6  0100               	movlb	0	; () banked
 24317  0108B8  BF94               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24318  0108BA  D010               	goto	l2718
 24319  0108BC  0100               	movlb	0	; () banked
 24320  0108BE  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 24321  0108C0  E104               	bnz	u10840
 24322  0108C2  0100               	movlb	0	; () banked
 24323  0108C4  2993               	incf	___flmul@temp& (0+255),w,b
 24324  0108C6  A0D8               	btfss	status,0,c
 24325  0108C8  D009               	goto	l2718
 24326  0108CA                     u10840:
 24327                           
 24328                           ; BSR set to: 0
 24329  0108CA  0E00               	movlw	0
 24330  0108CC  0100               	movlb	0	; () banked
 24331  0108CE  6F8F               	movwf	___flmul@prod& (0+255),b
 24332  0108D0  0E00               	movlw	0
 24333  0108D2  6F90               	movwf	(___flmul@prod+1)& (0+255),b
 24334  0108D4  0E80               	movlw	128
 24335  0108D6  6F91               	movwf	(___flmul@prod+2)& (0+255),b
 24336  0108D8  0E7F               	movlw	127
 24337  0108DA  D02B               	goto	L20
 24338  0108DC                     l2718:
 24339                           
 24340                           ; BSR set to: 0
 24341                           
 24342                           ; BSR set to: 0
 24343  0108DC  0100               	movlb	0	; () banked
 24344  0108DE  BF94               	btfsc	(___flmul@temp+1)& (0+255),7,b
 24345  0108E0  D007               	goto	u10850
 24346  0108E2  0100               	movlb	0	; () banked
 24347  0108E4  5194               	movf	(___flmul@temp+1)& (0+255),w,b
 24348  0108E6  E111               	bnz	l2720
 24349  0108E8  0100               	movlb	0	; () banked
 24350  0108EA  0593               	decf	___flmul@temp& (0+255),w,b
 24351  0108EC  B0D8               	btfsc	status,0,c
 24352  0108EE  D00D               	goto	l2720
 24353  0108F0                     u10850:
 24354                           
 24355                           ; BSR set to: 0
 24356  0108F0  0E00               	movlw	0
 24357  0108F2  0100               	movlb	0	; () banked
 24358  0108F4  6F8F               	movwf	___flmul@prod& (0+255),b
 24359  0108F6  0E00               	movlw	0
 24360  0108F8  6F90               	movwf	(___flmul@prod+1)& (0+255),b
 24361  0108FA  0E00               	movlw	0
 24362  0108FC  6F91               	movwf	(___flmul@prod+2)& (0+255),b
 24363  0108FE  0E00               	movlw	0
 24364  010900  6F92               	movwf	(___flmul@prod+3)& (0+255),b
 24365  010902  0E00               	movlw	0
 24366  010904  0100               	movlb	0	; () banked
 24367  010906  6F88               	movwf	___flmul@sign& (0+255),b
 24368  010908  D015               	goto	l2721
 24369  01090A                     l2720:
 24370                           
 24371                           ; BSR set to: 0
 24372  01090A  C093  F08E         	movff	___flmul@temp,___flmul@bexp
 24373                           
 24374                           ; BSR set to: 0
 24375  01090E  0EFF               	movlw	255
 24376  010910  0100               	movlb	0	; () banked
 24377  010912  178F               	andwf	___flmul@prod& (0+255),f,b
 24378  010914  0EFF               	movlw	255
 24379  010916  1790               	andwf	(___flmul@prod+1)& (0+255),f,b
 24380  010918  0E7F               	movlw	127
 24381  01091A  1791               	andwf	(___flmul@prod+2)& (0+255),f,b
 24382  01091C  0E00               	movlw	0
 24383  01091E  1792               	andwf	(___flmul@prod+3)& (0+255),f,b
 24384                           
 24385                           ; BSR set to: 0
 24386  010920  0100               	movlb	0	; () banked
 24387  010922  A18E               	btfss	___flmul@bexp& (0+255),0,b
 24388  010924  D002               	goto	l2722
 24389                           
 24390                           ; BSR set to: 0
 24391  010926  0100               	movlb	0	; () banked
 24392  010928  8F91               	bsf	(___flmul@prod+2)& (0+255),7,b
 24393  01092A                     l2722:
 24394                           
 24395                           ; BSR set to: 0
 24396                           
 24397                           ; BSR set to: 0
 24398  01092A  0100               	movlb	0	; () banked
 24399  01092C  90D8               	bcf	status,0,c
 24400  01092E  318E               	rrcf	___flmul@bexp& (0+255),w,b
 24401  010930  0100               	movlb	0	; () banked
 24402  010932                     L20:
 24403  010932  6F92               	movwf	(___flmul@prod+3)& (0+255),b
 24404  010934                     l2721:
 24405                           
 24406                           ; BSR set to: 0
 24407                           
 24408                           ; BSR set to: 0
 24409                           
 24410                           ; BSR set to: 0
 24411  010934  0100               	movlb	0	; () banked
 24412  010936  5188               	movf	___flmul@sign& (0+255),w,b
 24413  010938  0100               	movlb	0	; () banked
 24414  01093A  1392               	iorwf	(___flmul@prod+3)& (0+255),f,b
 24415                           
 24416                           ; BSR set to: 0
 24417  01093C  C08F  F07C         	movff	___flmul@prod,?___flmul
 24418  010940  C090  F07D         	movff	___flmul@prod+1,?___flmul+1
 24419  010944  C091  F07E         	movff	___flmul@prod+2,?___flmul+2
 24420  010948  C092  F07F         	movff	___flmul@prod+3,?___flmul+3
 24421  01094C  0012               	return	
 24422  01094E                     __end_of___flmul:
 24423                           	opt stack 0
 24424                           tosu	equ	0xFFF
 24425                           tosh	equ	0xFFE
 24426                           tosl	equ	0xFFD
 24427                           pclath	equ	0xFFA
 24428                           tblptru	equ	0xFF8
 24429                           tblptrh	equ	0xFF7
 24430                           tblptrl	equ	0xFF6
 24431                           tablat	equ	0xFF5
 24432                           prodh	equ	0xFF4
 24433                           prodl	equ	0xFF3
 24434                           intcon	equ	0xFF2
 24435                           indf0	equ	0xFEF
 24436                           postinc0	equ	0xFEE
 24437                           fsr0h	equ	0xFEA
 24438                           fsr0l	equ	0xFE9
 24439                           wreg	equ	0xFE8
 24440                           indf1	equ	0xFE7
 24441                           postdec1	equ	0xFE5
 24442                           fsr1h	equ	0xFE2
 24443                           fsr1l	equ	0xFE1
 24444                           indf2	equ	0xFDF
 24445                           postinc2	equ	0xFDE
 24446                           postdec2	equ	0xFDD
 24447                           plusw2	equ	0xFDB
 24448                           fsr2h	equ	0xFDA
 24449                           fsr2l	equ	0xFD9
 24450                           status	equ	0xFD8
 24451                           
 24452 ;; *************** function ___flge *****************
 24453 ;; Defined at:
 24454 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flge.c"
 24455 ;; Parameters:    Size  Location     Type
 24456 ;;  ff1             4    0[BANK0 ] unsigned char 
 24457 ;;  ff2             4    4[BANK0 ] unsigned char 
 24458 ;; Auto vars:     Size  Location     Type
 24459 ;;		None
 24460 ;; Return value:  Size  Location     Type
 24461 ;;		None               void
 24462 ;; Registers used:
 24463 ;;		wreg, status,2, status,0
 24464 ;; Tracked objects:
 24465 ;;		On entry : 0/0
 24466 ;;		On exit  : 0/0
 24467 ;;		Unchanged: 0/0
 24468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24469 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24471 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24472 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24473 ;;Total ram usage:       12 bytes
 24474 ;; Hardware stack levels used:    1
 24475 ;; Hardware stack levels required when called:    7
 24476 ;; This function calls:
 24477 ;;		Nothing
 24478 ;; This function is called by:
 24479 ;;		_displayPositionMode
 24480 ;;		_pow
 24481 ;;		_exp
 24482 ;;		_floor
 24483 ;; This function uses a non-reentrant model
 24484 ;;
 24485                           
 24486                           	psect	text121
 24487  012E8A                     __ptext121:
 24488                           	opt stack 0
 24489  012E8A                     ___flge:
 24490                           	opt stack 20
 24491                           
 24492                           ; BSR set to: 0
 24493                           ;incstack = 0
 24494  012E8A  0E00               	movlw	0
 24495  012E8C  0100               	movlb	0	; () banked
 24496  012E8E  1560               	andwf	___flge@ff1& (0+255),w,b
 24497  012E90  0100               	movlb	0	; () banked
 24498  012E92  6F68               	movwf	??___flge& (0+255),b
 24499  012E94  0E00               	movlw	0
 24500  012E96  0100               	movlb	0	; () banked
 24501  012E98  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
 24502  012E9A  0100               	movlb	0	; () banked
 24503  012E9C  6F69               	movwf	(??___flge+1)& (0+255),b
 24504  012E9E  0E80               	movlw	128
 24505  012EA0  0100               	movlb	0	; () banked
 24506  012EA2  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
 24507  012EA4  0100               	movlb	0	; () banked
 24508  012EA6  6F6A               	movwf	(??___flge+2)& (0+255),b
 24509  012EA8  0E7F               	movlw	127
 24510  012EAA  0100               	movlb	0	; () banked
 24511  012EAC  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
 24512  012EAE  0100               	movlb	0	; () banked
 24513  012EB0  6F6B               	movwf	(??___flge+3)& (0+255),b
 24514  012EB2  0100               	movlb	0	; () banked
 24515  012EB4  5168               	movf	??___flge& (0+255),w,b
 24516  012EB6  0100               	movlb	0	; () banked
 24517  012EB8  1169               	iorwf	(??___flge+1)& (0+255),w,b
 24518  012EBA  0100               	movlb	0	; () banked
 24519  012EBC  116A               	iorwf	(??___flge+2)& (0+255),w,b
 24520  012EBE  0100               	movlb	0	; () banked
 24521  012EC0  116B               	iorwf	(??___flge+3)& (0+255),w,b
 24522  012EC2  A4D8               	btfss	status,2,c
 24523  012EC4  D009               	goto	l2362
 24524                           
 24525                           ; BSR set to: 0
 24526  012EC6  0E00               	movlw	0
 24527  012EC8  0100               	movlb	0	; () banked
 24528  012ECA  6F60               	movwf	___flge@ff1& (0+255),b
 24529  012ECC  0E00               	movlw	0
 24530  012ECE  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 24531  012ED0  0E00               	movlw	0
 24532  012ED2  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 24533  012ED4  0E00               	movlw	0
 24534  012ED6  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 24535  012ED8                     l2362:
 24536                           
 24537                           ; BSR set to: 0
 24538                           
 24539                           ; BSR set to: 0
 24540  012ED8  0E00               	movlw	0
 24541  012EDA  0100               	movlb	0	; () banked
 24542  012EDC  1564               	andwf	___flge@ff2& (0+255),w,b
 24543  012EDE  0100               	movlb	0	; () banked
 24544  012EE0  6F68               	movwf	??___flge& (0+255),b
 24545  012EE2  0E00               	movlw	0
 24546  012EE4  0100               	movlb	0	; () banked
 24547  012EE6  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
 24548  012EE8  0100               	movlb	0	; () banked
 24549  012EEA  6F69               	movwf	(??___flge+1)& (0+255),b
 24550  012EEC  0E80               	movlw	128
 24551  012EEE  0100               	movlb	0	; () banked
 24552  012EF0  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
 24553  012EF2  0100               	movlb	0	; () banked
 24554  012EF4  6F6A               	movwf	(??___flge+2)& (0+255),b
 24555  012EF6  0E7F               	movlw	127
 24556  012EF8  0100               	movlb	0	; () banked
 24557  012EFA  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
 24558  012EFC  0100               	movlb	0	; () banked
 24559  012EFE  6F6B               	movwf	(??___flge+3)& (0+255),b
 24560  012F00  0100               	movlb	0	; () banked
 24561  012F02  5168               	movf	??___flge& (0+255),w,b
 24562  012F04  0100               	movlb	0	; () banked
 24563  012F06  1169               	iorwf	(??___flge+1)& (0+255),w,b
 24564  012F08  0100               	movlb	0	; () banked
 24565  012F0A  116A               	iorwf	(??___flge+2)& (0+255),w,b
 24566  012F0C  0100               	movlb	0	; () banked
 24567  012F0E  116B               	iorwf	(??___flge+3)& (0+255),w,b
 24568  012F10  A4D8               	btfss	status,2,c
 24569  012F12  D009               	goto	l2363
 24570                           
 24571                           ; BSR set to: 0
 24572  012F14  0E00               	movlw	0
 24573  012F16  0100               	movlb	0	; () banked
 24574  012F18  6F64               	movwf	___flge@ff2& (0+255),b
 24575  012F1A  0E00               	movlw	0
 24576  012F1C  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 24577  012F1E  0E00               	movlw	0
 24578  012F20  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 24579  012F22  0E00               	movlw	0
 24580  012F24  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 24581  012F26                     l2363:
 24582                           
 24583                           ; BSR set to: 0
 24584                           
 24585                           ; BSR set to: 0
 24586  012F26  0100               	movlb	0	; () banked
 24587  012F28  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
 24588  012F2A  D026               	goto	l2364
 24589                           
 24590                           ; BSR set to: 0
 24591  012F2C  C060  F068         	movff	___flge@ff1,??___flge
 24592  012F30  C061  F069         	movff	___flge@ff1+1,??___flge+1
 24593  012F34  C062  F06A         	movff	___flge@ff1+2,??___flge+2
 24594  012F38  C063  F06B         	movff	___flge@ff1+3,??___flge+3
 24595  012F3C  0100               	movlb	0	; () banked
 24596  012F3E  1F68               	comf	??___flge& (0+255),f,b
 24597  012F40  1F69               	comf	(??___flge+1)& (0+255),f,b
 24598  012F42  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24599  012F44  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24600  012F46  2B68               	incf	??___flge& (0+255),f,b
 24601  012F48  0E00               	movlw	0
 24602  012F4A  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24603  012F4C  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24604  012F4E  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24605  012F50  0E00               	movlw	0
 24606  012F52  0100               	movlb	0	; () banked
 24607  012F54  2568               	addwf	??___flge& (0+255),w,b
 24608  012F56  0100               	movlb	0	; () banked
 24609  012F58  6F60               	movwf	___flge@ff1& (0+255),b
 24610  012F5A  0E00               	movlw	0
 24611  012F5C  0100               	movlb	0	; () banked
 24612  012F5E  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24613  012F60  0100               	movlb	0	; () banked
 24614  012F62  6F61               	movwf	(___flge@ff1+1)& (0+255),b
 24615  012F64  0E00               	movlw	0
 24616  012F66  0100               	movlb	0	; () banked
 24617  012F68  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24618  012F6A  0100               	movlb	0	; () banked
 24619  012F6C  6F62               	movwf	(___flge@ff1+2)& (0+255),b
 24620  012F6E  0E80               	movlw	128
 24621  012F70  0100               	movlb	0	; () banked
 24622  012F72  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24623  012F74  0100               	movlb	0	; () banked
 24624  012F76  6F63               	movwf	(___flge@ff1+3)& (0+255),b
 24625  012F78                     l2364:
 24626                           
 24627                           ; BSR set to: 0
 24628                           
 24629                           ; BSR set to: 0
 24630  012F78  0100               	movlb	0	; () banked
 24631  012F7A  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
 24632  012F7C  D026               	goto	l2365
 24633                           
 24634                           ; BSR set to: 0
 24635  012F7E  C064  F068         	movff	___flge@ff2,??___flge
 24636  012F82  C065  F069         	movff	___flge@ff2+1,??___flge+1
 24637  012F86  C066  F06A         	movff	___flge@ff2+2,??___flge+2
 24638  012F8A  C067  F06B         	movff	___flge@ff2+3,??___flge+3
 24639  012F8E  0100               	movlb	0	; () banked
 24640  012F90  1F68               	comf	??___flge& (0+255),f,b
 24641  012F92  1F69               	comf	(??___flge+1)& (0+255),f,b
 24642  012F94  1F6A               	comf	(??___flge+2)& (0+255),f,b
 24643  012F96  1F6B               	comf	(??___flge+3)& (0+255),f,b
 24644  012F98  2B68               	incf	??___flge& (0+255),f,b
 24645  012F9A  0E00               	movlw	0
 24646  012F9C  2369               	addwfc	(??___flge+1)& (0+255),f,b
 24647  012F9E  236A               	addwfc	(??___flge+2)& (0+255),f,b
 24648  012FA0  236B               	addwfc	(??___flge+3)& (0+255),f,b
 24649  012FA2  0E00               	movlw	0
 24650  012FA4  0100               	movlb	0	; () banked
 24651  012FA6  2568               	addwf	??___flge& (0+255),w,b
 24652  012FA8  0100               	movlb	0	; () banked
 24653  012FAA  6F64               	movwf	___flge@ff2& (0+255),b
 24654  012FAC  0E00               	movlw	0
 24655  012FAE  0100               	movlb	0	; () banked
 24656  012FB0  2169               	addwfc	(??___flge+1)& (0+255),w,b
 24657  012FB2  0100               	movlb	0	; () banked
 24658  012FB4  6F65               	movwf	(___flge@ff2+1)& (0+255),b
 24659  012FB6  0E00               	movlw	0
 24660  012FB8  0100               	movlb	0	; () banked
 24661  012FBA  216A               	addwfc	(??___flge+2)& (0+255),w,b
 24662  012FBC  0100               	movlb	0	; () banked
 24663  012FBE  6F66               	movwf	(___flge@ff2+2)& (0+255),b
 24664  012FC0  0E80               	movlw	128
 24665  012FC2  0100               	movlb	0	; () banked
 24666  012FC4  216B               	addwfc	(??___flge+3)& (0+255),w,b
 24667  012FC6  0100               	movlb	0	; () banked
 24668  012FC8  6F67               	movwf	(___flge@ff2+3)& (0+255),b
 24669  012FCA                     l2365:
 24670                           
 24671                           ; BSR set to: 0
 24672  012FCA  0E00               	movlw	0
 24673  012FCC  0100               	movlb	0	; () banked
 24674  012FCE  1B60               	xorwf	___flge@ff1& (0+255),f,b
 24675  012FD0  0E00               	movlw	0
 24676  012FD2  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
 24677  012FD4  0E00               	movlw	0
 24678  012FD6  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
 24679  012FD8  0E80               	movlw	128
 24680  012FDA  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
 24681  012FDC  0E00               	movlw	0
 24682  012FDE  0100               	movlb	0	; () banked
 24683  012FE0  1B64               	xorwf	___flge@ff2& (0+255),f,b
 24684  012FE2  0E00               	movlw	0
 24685  012FE4  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
 24686  012FE6  0E00               	movlw	0
 24687  012FE8  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
 24688  012FEA  0E80               	movlw	128
 24689  012FEC  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
 24690  012FEE  0100               	movlb	0	; () banked
 24691  012FF0  5164               	movf	___flge@ff2& (0+255),w,b
 24692  012FF2  0100               	movlb	0	; () banked
 24693  012FF4  5D60               	subwf	___flge@ff1& (0+255),w,b
 24694  012FF6  0100               	movlb	0	; () banked
 24695  012FF8  5165               	movf	(___flge@ff2+1)& (0+255),w,b
 24696  012FFA  0100               	movlb	0	; () banked
 24697  012FFC  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
 24698  012FFE  0100               	movlb	0	; () banked
 24699  013000  5166               	movf	(___flge@ff2+2)& (0+255),w,b
 24700  013002  0100               	movlb	0	; () banked
 24701  013004  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
 24702  013006  0100               	movlb	0	; () banked
 24703  013008  5167               	movf	(___flge@ff2+3)& (0+255),w,b
 24704  01300A  0100               	movlb	0	; () banked
 24705  01300C  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
 24706  01300E  B0D8               	btfsc	status,0,c
 24707  013010  D002               	goto	l11697
 24708                           
 24709                           ; BSR set to: 0
 24710  013012  90D8               	bcf	status,0,c
 24711  013014  0012               	return	
 24712  013016                     l11697:
 24713                           
 24714                           ; BSR set to: 0
 24715                           
 24716                           ; BSR set to: 0
 24717  013016  80D8               	bsf	status,0,c
 24718                           
 24719                           ; BSR set to: 0
 24720  013018  0012               	return	
 24721  01301A                     __end_of___flge:
 24722                           	opt stack 0
 24723                           tosu	equ	0xFFF
 24724                           tosh	equ	0xFFE
 24725                           tosl	equ	0xFFD
 24726                           pclath	equ	0xFFA
 24727                           tblptru	equ	0xFF8
 24728                           tblptrh	equ	0xFF7
 24729                           tblptrl	equ	0xFF6
 24730                           tablat	equ	0xFF5
 24731                           prodh	equ	0xFF4
 24732                           prodl	equ	0xFF3
 24733                           intcon	equ	0xFF2
 24734                           indf0	equ	0xFEF
 24735                           postinc0	equ	0xFEE
 24736                           fsr0h	equ	0xFEA
 24737                           fsr0l	equ	0xFE9
 24738                           wreg	equ	0xFE8
 24739                           indf1	equ	0xFE7
 24740                           postdec1	equ	0xFE5
 24741                           fsr1h	equ	0xFE2
 24742                           fsr1l	equ	0xFE1
 24743                           indf2	equ	0xFDF
 24744                           postinc2	equ	0xFDE
 24745                           postdec2	equ	0xFDD
 24746                           plusw2	equ	0xFDB
 24747                           fsr2h	equ	0xFDA
 24748                           fsr2l	equ	0xFD9
 24749                           status	equ	0xFD8
 24750                           
 24751 ;; *************** function _displayNullMode *****************
 24752 ;; Defined at:
 24753 ;;		line 217 in file "main.c"
 24754 ;; Parameters:    Size  Location     Type
 24755 ;;		None
 24756 ;; Auto vars:     Size  Location     Type
 24757 ;;		None
 24758 ;; Return value:  Size  Location     Type
 24759 ;;                  1    wreg      void 
 24760 ;; Registers used:
 24761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24762 ;; Tracked objects:
 24763 ;;		On entry : 0/0
 24764 ;;		On exit  : 0/0
 24765 ;;		Unchanged: 0/0
 24766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24771 ;;Total ram usage:        0 bytes
 24772 ;; Hardware stack levels used:    1
 24773 ;; Hardware stack levels required when called:   13
 24774 ;; This function calls:
 24775 ;;		_printf
 24776 ;; This function is called by:
 24777 ;;		_main
 24778 ;; This function uses a non-reentrant model
 24779 ;;
 24780                           
 24781                           	psect	text122
 24782  016628                     __ptext122:
 24783                           	opt stack 0
 24784  016628                     _displayNullMode:
 24785                           	opt stack 17
 24786                           
 24787                           ;main.c: 218: printf("Current Mode:\n Undefined\n");
 24788                           
 24789                           ; BSR set to: 0
 24790                           ;incstack = 0
 24791  016628  0E48               	movlw	low STR_12
 24792  01662A  0100               	movlb	0	; () banked
 24793  01662C  6F7B               	movwf	printf@f& (0+255),b
 24794  01662E  0EFF               	movlw	high STR_12
 24795  016630  0100               	movlb	0	; () banked
 24796  016632  6F7C               	movwf	(printf@f+1)& (0+255),b
 24797  016634  EC7C  F096         	call	_printf	;wreg free
 24798                           
 24799                           ;main.c: 219: printf("                      \n");
 24800  016638  0E7C               	movlw	low STR_13
 24801  01663A  0100               	movlb	0	; () banked
 24802  01663C  6F7B               	movwf	printf@f& (0+255),b
 24803  01663E  0EFF               	movlw	high STR_13
 24804  016640  0100               	movlb	0	; () banked
 24805  016642  6F7C               	movwf	(printf@f+1)& (0+255),b
 24806  016644  EC7C  F096         	call	_printf	;wreg free
 24807                           
 24808                           ;main.c: 220: printf("                      \n");
 24809  016648  0E7C               	movlw	low STR_13
 24810  01664A  0100               	movlb	0	; () banked
 24811  01664C  6F7B               	movwf	printf@f& (0+255),b
 24812  01664E  0EFF               	movlw	high STR_13
 24813  016650  0100               	movlb	0	; () banked
 24814  016652  6F7C               	movwf	(printf@f+1)& (0+255),b
 24815  016654  EC7C  F096         	call	_printf	;wreg free
 24816                           
 24817                           ;main.c: 221: printf("                      \n");
 24818  016658  0E7C               	movlw	low STR_13
 24819  01665A  0100               	movlb	0	; () banked
 24820  01665C  6F7B               	movwf	printf@f& (0+255),b
 24821  01665E  0EFF               	movlw	high STR_13
 24822  016660  0100               	movlb	0	; () banked
 24823  016662  6F7C               	movwf	(printf@f+1)& (0+255),b
 24824  016664  EC7C  F096         	call	_printf	;wreg free
 24825  016668  0012               	return		;funcret
 24826  01666A                     __end_of_displayNullMode:
 24827                           	opt stack 0
 24828                           tosu	equ	0xFFF
 24829                           tosh	equ	0xFFE
 24830                           tosl	equ	0xFFD
 24831                           pclath	equ	0xFFA
 24832                           tblptru	equ	0xFF8
 24833                           tblptrh	equ	0xFF7
 24834                           tblptrl	equ	0xFF6
 24835                           tablat	equ	0xFF5
 24836                           prodh	equ	0xFF4
 24837                           prodl	equ	0xFF3
 24838                           intcon	equ	0xFF2
 24839                           indf0	equ	0xFEF
 24840                           postinc0	equ	0xFEE
 24841                           fsr0h	equ	0xFEA
 24842                           fsr0l	equ	0xFE9
 24843                           wreg	equ	0xFE8
 24844                           indf1	equ	0xFE7
 24845                           postdec1	equ	0xFE5
 24846                           fsr1h	equ	0xFE2
 24847                           fsr1l	equ	0xFE1
 24848                           indf2	equ	0xFDF
 24849                           postinc2	equ	0xFDE
 24850                           postdec2	equ	0xFDD
 24851                           plusw2	equ	0xFDB
 24852                           fsr2h	equ	0xFDA
 24853                           fsr2l	equ	0xFD9
 24854                           status	equ	0xFD8
 24855                           
 24856 ;; *************** function _displayContinuousMode *****************
 24857 ;; Defined at:
 24858 ;;		line 149 in file "main.c"
 24859 ;; Parameters:    Size  Location     Type
 24860 ;;		None
 24861 ;; Auto vars:     Size  Location     Type
 24862 ;;		None
 24863 ;; Return value:  Size  Location     Type
 24864 ;;                  1    wreg      void 
 24865 ;; Registers used:
 24866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24867 ;; Tracked objects:
 24868 ;;		On entry : 0/0
 24869 ;;		On exit  : 0/0
 24870 ;;		Unchanged: 0/0
 24871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24875 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24876 ;;Total ram usage:        0 bytes
 24877 ;; Hardware stack levels used:    1
 24878 ;; Hardware stack levels required when called:   13
 24879 ;; This function calls:
 24880 ;;		_printf
 24881 ;; This function is called by:
 24882 ;;		_main
 24883 ;; This function uses a non-reentrant model
 24884 ;;
 24885                           
 24886                           	psect	text123
 24887  01486A                     __ptext123:
 24888                           	opt stack 0
 24889  01486A                     _displayContinuousMode:
 24890                           	opt stack 17
 24891                           
 24892                           ;main.c: 151: printf("Current Mode:\n Continuous Mode\n");
 24893                           
 24894                           ;incstack = 0
 24895  01486A  0E09               	movlw	low STR_2
 24896  01486C  0100               	movlb	0	; () banked
 24897  01486E  6F7B               	movwf	printf@f& (0+255),b
 24898  014870  0EFF               	movlw	high STR_2
 24899  014872  0100               	movlb	0	; () banked
 24900  014874  6F7C               	movwf	(printf@f+1)& (0+255),b
 24901  014876  EC7C  F096         	call	_printf	;wreg free
 24902                           
 24903                           ;main.c: 152: printf("Direction: ");
 24904  01487A  0ED5               	movlw	low STR_3
 24905  01487C  0100               	movlb	0	; () banked
 24906  01487E  6F7B               	movwf	printf@f& (0+255),b
 24907  014880  0EFF               	movlw	high STR_3
 24908  014882  0100               	movlb	0	; () banked
 24909  014884  6F7C               	movwf	(printf@f+1)& (0+255),b
 24910  014886  EC7C  F096         	call	_printf	;wreg free
 24911                           
 24912                           ;main.c: 157: if (direction > 0) {
 24913  01488A  0101               	movlb	1	; () banked
 24914  01488C  BFF4               	btfsc	(_direction+1)& (0+255),7,b
 24915  01488E  D010               	goto	l2065
 24916  014890  0101               	movlb	1	; () banked
 24917  014892  51F4               	movf	(_direction+1)& (0+255),w,b
 24918  014894  E104               	bnz	u12440
 24919  014896  0101               	movlb	1	; () banked
 24920  014898  05F3               	decf	_direction& (0+255),w,b
 24921  01489A  A0D8               	btfss	status,0,c
 24922  01489C  D009               	goto	l2065
 24923  01489E                     u12440:
 24924                           
 24925                           ; BSR set to: 1
 24926                           ;main.c: 158: printf("CW\n");
 24927  01489E  0EF8               	movlw	low (STR_5+1)
 24928  0148A0  0100               	movlb	0	; () banked
 24929  0148A2  6F7B               	movwf	printf@f& (0+255),b
 24930  0148A4  0EFF               	movlw	high (STR_5+1)
 24931  0148A6  0100               	movlb	0	; () banked
 24932  0148A8  6F7C               	movwf	(printf@f+1)& (0+255),b
 24933  0148AA  EC7C  F096         	call	_printf	;wreg free
 24934                           
 24935                           ;main.c: 159: } else {
 24936  0148AE  D008               	goto	l2066
 24937  0148B0                     l2065:
 24938                           
 24939                           ;main.c: 160: printf("CCW\n");
 24940  0148B0  0EF7               	movlw	low STR_5
 24941  0148B2  0100               	movlb	0	; () banked
 24942  0148B4  6F7B               	movwf	printf@f& (0+255),b
 24943  0148B6  0EFF               	movlw	high STR_5
 24944  0148B8  0100               	movlb	0	; () banked
 24945  0148BA  6F7C               	movwf	(printf@f+1)& (0+255),b
 24946  0148BC  EC7C  F096         	call	_printf	;wreg free
 24947  0148C0                     l2066:
 24948                           
 24949                           ;main.c: 161: }
 24950                           ;main.c: 163: printf("Speed: %d\n", speed);
 24951  0148C0  0EE1               	movlw	low STR_6
 24952  0148C2  0100               	movlb	0	; () banked
 24953  0148C4  6F7B               	movwf	printf@f& (0+255),b
 24954  0148C6  0EFF               	movlw	high STR_6
 24955  0148C8  0100               	movlb	0	; () banked
 24956  0148CA  6F7C               	movwf	(printf@f+1)& (0+255),b
 24957  0148CC  C02F  F07D         	movff	_speed,?_printf+2
 24958  0148D0  C030  F07E         	movff	_speed+1,?_printf+3
 24959  0148D4  EC7C  F096         	call	_printf	;wreg free
 24960                           
 24961                           ;main.c: 170: if (rightState) {
 24962  0148D8  5039               	movf	_rightState,w,c
 24963  0148DA  B4D8               	btfsc	status,2,c
 24964  0148DC  D006               	goto	l2067
 24965                           
 24966                           ;main.c: 171: direction = 200;
 24967  0148DE  0E00               	movlw	0
 24968  0148E0  0101               	movlb	1	; () banked
 24969  0148E2  6FF4               	movwf	(_direction+1)& (0+255),b
 24970  0148E4  0EC8               	movlw	200
 24971  0148E6  6FF3               	movwf	_direction& (0+255),b
 24972                           
 24973                           ;main.c: 172: } else if (leftState) {
 24974  0148E8  0012               	return	
 24975  0148EA                     l2067:
 24976                           
 24977                           ; BSR set to: 1
 24978  0148EA  503A               	movf	_leftState,w,c
 24979  0148EC  B4D8               	btfsc	status,2,c
 24980  0148EE  D006               	goto	l2069
 24981                           
 24982                           ;main.c: 173: direction = -200;
 24983  0148F0  0EFF               	movlw	255
 24984  0148F2  0101               	movlb	1	; () banked
 24985  0148F4  6FF4               	movwf	(_direction+1)& (0+255),b
 24986  0148F6  0E38               	movlw	56
 24987  0148F8  6FF3               	movwf	_direction& (0+255),b
 24988                           
 24989                           ;main.c: 174: } else if (upState) {
 24990  0148FA  0012               	return	
 24991  0148FC                     l2069:
 24992                           
 24993                           ; BSR set to: 1
 24994  0148FC  0100               	movlb	0	; () banked
 24995  0148FE  51F6               	movf	_upState& (0+255),w,b
 24996  014900  B4D8               	btfsc	status,2,c
 24997  014902  D003               	goto	l2071
 24998                           
 24999                           ; BSR set to: 0
 25000                           ;main.c: 175: speed++;
 25001  014904  4A2F               	infsnz	_speed,f,c
 25002  014906  2A30               	incf	_speed+1,f,c
 25003                           
 25004                           ;main.c: 176: } else if (downState && speed > 0) {
 25005  014908  0012               	return	
 25006  01490A                     l2071:
 25007                           
 25008                           ; BSR set to: 0
 25009                           
 25010                           ; BSR set to: 0
 25011  01490A  0100               	movlb	0	; () banked
 25012  01490C  51F5               	movf	_downState& (0+255),w,b
 25013  01490E  B4D8               	btfsc	status,2,c
 25014  014910  0012               	return	
 25015                           
 25016                           ; BSR set to: 0
 25017  014912  BE30               	btfsc	_speed+1,7,c
 25018  014914  0012               	return	
 25019  014916  5030               	movf	_speed+1,w,c
 25020  014918  E103               	bnz	u12490
 25021  01491A  042F               	decf	_speed,w,c
 25022  01491C  A0D8               	btfss	status,0,c
 25023  01491E  0012               	return	
 25024  014920                     u12490:
 25025                           
 25026                           ; BSR set to: 0
 25027                           ;main.c: 177: speed--;
 25028  014920  062F               	decf	_speed,f,c
 25029  014922  A0D8               	btfss	status,0,c
 25030  014924  0630               	decf	_speed+1,f,c
 25031                           
 25032                           ; BSR set to: 0
 25033                           
 25034                           ; BSR set to: 0
 25035                           
 25036                           ; BSR set to: 0
 25037  014926  0012               	return	
 25038  014928                     __end_of_displayContinuousMode:
 25039                           	opt stack 0
 25040                           tosu	equ	0xFFF
 25041                           tosh	equ	0xFFE
 25042                           tosl	equ	0xFFD
 25043                           pclath	equ	0xFFA
 25044                           tblptru	equ	0xFF8
 25045                           tblptrh	equ	0xFF7
 25046                           tblptrl	equ	0xFF6
 25047                           tablat	equ	0xFF5
 25048                           prodh	equ	0xFF4
 25049                           prodl	equ	0xFF3
 25050                           intcon	equ	0xFF2
 25051                           indf0	equ	0xFEF
 25052                           postinc0	equ	0xFEE
 25053                           fsr0h	equ	0xFEA
 25054                           fsr0l	equ	0xFE9
 25055                           wreg	equ	0xFE8
 25056                           indf1	equ	0xFE7
 25057                           postdec1	equ	0xFE5
 25058                           fsr1h	equ	0xFE2
 25059                           fsr1l	equ	0xFE1
 25060                           indf2	equ	0xFDF
 25061                           postinc2	equ	0xFDE
 25062                           postdec2	equ	0xFDD
 25063                           plusw2	equ	0xFDB
 25064                           fsr2h	equ	0xFDA
 25065                           fsr2l	equ	0xFD9
 25066                           status	equ	0xFD8
 25067                           
 25068 ;; *************** function _printf *****************
 25069 ;; Defined at:
 25070 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
 25071 ;; Parameters:    Size  Location     Type
 25072 ;;  f               2   27[BANK0 ] PTR const unsigned char 
 25073 ;;		 -> STR_16(3), STR_15(24), STR_14(24), STR_13(24), 
 25074 ;;		 -> STR_12(26), STR_11(20), STR_10(31), STR_9(22), 
 25075 ;;		 -> STR_8(11), STR_7(26), STR_6(11), STR_5(5), 
 25076 ;;		 -> STR_4(4), STR_3(12), STR_2(32), STR_1(23), 
 25077 ;; Auto vars:     Size  Location     Type
 25078 ;;  tmpval          4    0        struct .
 25079 ;;  cp              3    0        PTR const unsigned char 
 25080 ;;  val             2   36[BANK0 ] unsigned int 
 25081 ;;  ap              2   34[BANK0 ] PTR void [1]
 25082 ;;		 -> ?_printf(2), 
 25083 ;;  len             2    0        unsigned int 
 25084 ;;  c               1   38[BANK0 ] char 
 25085 ;;  prec            1   33[BANK0 ] char 
 25086 ;;  flag            1   32[BANK0 ] unsigned char 
 25087 ;; Return value:  Size  Location     Type
 25088 ;;                  2   27[BANK0 ] int 
 25089 ;; Registers used:
 25090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25091 ;; Tracked objects:
 25092 ;;		On entry : 0/0
 25093 ;;		On exit  : 0/0
 25094 ;;		Unchanged: 0/0
 25095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25097 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25099 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25100 ;;Total ram usage:       12 bytes
 25101 ;; Hardware stack levels used:    1
 25102 ;; Hardware stack levels required when called:   12
 25103 ;; This function calls:
 25104 ;;		___lwdiv
 25105 ;;		___lwmod
 25106 ;;		_putch
 25107 ;; This function is called by:
 25108 ;;		_displaySID
 25109 ;;		_displayContinuousMode
 25110 ;;		_displayStepMode
 25111 ;;		_displayPositionMode
 25112 ;;		_displayNullMode
 25113 ;;		_main
 25114 ;; This function uses a non-reentrant model
 25115 ;;
 25116                           
 25117                           	psect	text124
 25118  012CF8                     __ptext124:
 25119                           	opt stack 0
 25120  012CF8                     _printf:
 25121                           	opt stack 18
 25122                           
 25123                           ;doprnt.c: 466: va_list ap;
 25124                           ;doprnt.c: 499: signed char c;
 25125                           ;doprnt.c: 506: signed char prec;
 25126                           ;doprnt.c: 508: unsigned char flag;
 25127                           ;doprnt.c: 523: union {
 25128                           ;doprnt.c: 524: unsigned long vd;
 25129                           ;doprnt.c: 525: double integ;
 25130                           ;doprnt.c: 526: } tmpval;
 25131                           ;doprnt.c: 528: unsigned int val;
 25132                           ;doprnt.c: 529: unsigned len;
 25133                           ;doprnt.c: 530: const char * cp;
 25134                           ;doprnt.c: 533: *ap = __va_start();
 25135                           
 25136                           ;incstack = 0
 25137  012CF8  0E7D               	movlw	low (?_printf+2)
 25138  012CFA  0100               	movlb	0	; () banked
 25139  012CFC  6F82               	movwf	printf@ap& (0+255),b
 25140  012CFE  0E00               	movlw	high (?_printf+2)
 25141  012D00  0100               	movlb	0	; () banked
 25142  012D02  6F83               	movwf	(printf@ap+1)& (0+255),b
 25143                           
 25144                           ;doprnt.c: 536: while(c = *f++) {
 25145  012D04  D0B1               	goto	u11900
 25146  012D06                     
 25147                           ; BSR set to: 0
 25148                           ;doprnt.c: 538: if(c != '%')
 25149                           
 25150                           ; BSR set to: 0
 25151  012D06  0E25               	movlw	37
 25152  012D08  0100               	movlb	0	; () banked
 25153  012D0A  1986               	xorwf	printf@c& (0+255),w,b
 25154  012D0C  B4D8               	btfsc	status,2,c
 25155  012D0E  D005               	goto	l2144
 25156                           
 25157                           ; BSR set to: 0
 25158                           ;doprnt.c: 540: {
 25159                           ;doprnt.c: 541: (putch(c) );
 25160  012D10  0100               	movlb	0	; () banked
 25161  012D12  5186               	movf	printf@c& (0+255),w,b
 25162  012D14  ECFF  F0B6         	call	_putch
 25163                           
 25164                           ;doprnt.c: 542: continue;
 25165  012D18  D0A7               	goto	u11900
 25166  012D1A                     l2144:
 25167                           
 25168                           ;doprnt.c: 543: }
 25169                           ;doprnt.c: 548: flag = 0;
 25170  012D1A  0E00               	movlw	0
 25171  012D1C  0100               	movlb	0	; () banked
 25172  012D1E  6F80               	movwf	printf@flag& (0+255),b
 25173                           
 25174                           ;doprnt.c: 635: switch(c = *f++) {
 25175  012D20  D011               	goto	l2145
 25176  012D22                     
 25177                           ; BSR set to: 0
 25178                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 25179                           
 25180                           ; BSR set to: 0
 25181  012D22  C082  FFD9         	movff	printf@ap,fsr2l
 25182  012D26  C083  FFDA         	movff	printf@ap+1,fsr2h
 25183  012D2A  50DF               	movf	indf2,w,c
 25184  012D2C  0100               	movlb	0	; () banked
 25185  012D2E  6F86               	movwf	printf@c& (0+255),b
 25186                           
 25187                           ; BSR set to: 0
 25188  012D30  0E02               	movlw	2
 25189  012D32  0100               	movlb	0	; () banked
 25190  012D34  2782               	addwf	printf@ap& (0+255),f,b
 25191  012D36  0E00               	movlw	0
 25192  012D38  2383               	addwfc	(printf@ap+1)& (0+255),f,b
 25193  012D3A                     
 25194                           ; BSR set to: 0
 25195                           ;doprnt.c: 809: (putch(c) );
 25196                           
 25197                           ; BSR set to: 0
 25198  012D3A  0100               	movlb	0	; () banked
 25199  012D3C  5186               	movf	printf@c& (0+255),w,b
 25200  012D3E  ECFF  F0B6         	call	_putch
 25201                           
 25202                           ;doprnt.c: 810: continue;
 25203  012D42  D092               	goto	u11900
 25204  012D44                     l2145:
 25205  012D44  C07B  FFF6         	movff	printf@f,tblptrl
 25206  012D48  C07C  FFF7         	movff	printf@f+1,tblptrh
 25207  012D4C  0100               	movlb	0	; () banked
 25208  012D4E  4B7B               	infsnz	printf@f& (0+255),f,b
 25209  012D50  2B7C               	incf	(printf@f+1)& (0+255),f,b
 25210  012D52                     	if	0	;tblptru may be non-zero
 25211  012D52                     	endif
 25212  012D52                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 25213  012D52  0E00               	movlw	low (__mediumconst shr (0+16))
 25214  012D54  6EF8               	movwf	tblptru,c
 25215  012D56                     	endif
 25216  012D56  0008               	tblrd		*
 25217  012D58  CFF5 F086          	movff	tablat,printf@c
 25218  012D5C  0100               	movlb	0	; () banked
 25219  012D5E  5186               	movf	printf@c& (0+255),w,b
 25220                           
 25221                           ; Switch size 1, requested type "space"
 25222                           ; Number of cases is 4, Range of values is 0 to 105
 25223                           ; switch strategies available:
 25224                           ; Name         Instructions Cycles
 25225                           ; simple_byte           13     7 (average)
 25226                           ;	Chosen strategy is simple_byte
 25227  012D60  0A00               	xorlw	0	; case 0
 25228  012D62  B4D8               	btfsc	status,2,c
 25229  012D64  0012               	return	
 25230  012D66  0A63               	xorlw	99	; case 99
 25231  012D68  B4D8               	btfsc	status,2,c
 25232  012D6A  D7DB               	goto	l2151
 25233  012D6C  0A07               	xorlw	7	; case 100
 25234  012D6E  B4D8               	btfsc	status,2,c
 25235  012D70  D003               	goto	l2150
 25236  012D72  0A0D               	xorlw	13	; case 105
 25237  012D74  A4D8               	btfss	status,2,c
 25238  012D76  D7E1               	goto	l2152
 25239  012D78                     l2150:
 25240                           
 25241                           ;doprnt.c: 1253: {
 25242                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 25243                           
 25244                           ; BSR set to: 0
 25245  012D78  C082  FFD9         	movff	printf@ap,fsr2l
 25246  012D7C  C083  FFDA         	movff	printf@ap+1,fsr2h
 25247  012D80  CFDE F084          	movff	postinc2,printf@val
 25248  012D84  CFDD F085          	movff	postdec2,printf@val+1
 25249  012D88  0E02               	movlw	2
 25250  012D8A  0100               	movlb	0	; () banked
 25251  012D8C  2782               	addwf	printf@ap& (0+255),f,b
 25252  012D8E  0E00               	movlw	0
 25253  012D90  2383               	addwfc	(printf@ap+1)& (0+255),f,b
 25254                           
 25255                           ; BSR set to: 0
 25256                           ;doprnt.c: 1261: if((int)val < 0) {
 25257  012D92  0100               	movlb	0	; () banked
 25258  012D94  AF85               	btfss	(printf@val+1)& (0+255),7,b
 25259  012D96  D008               	goto	l2153
 25260                           
 25261                           ; BSR set to: 0
 25262                           ;doprnt.c: 1262: flag |= 0x03;
 25263  012D98  0E03               	movlw	3
 25264  012D9A  0100               	movlb	0	; () banked
 25265  012D9C  1380               	iorwf	printf@flag& (0+255),f,b
 25266                           
 25267                           ; BSR set to: 0
 25268                           ;doprnt.c: 1263: val = -val;
 25269  012D9E  0100               	movlb	0	; () banked
 25270  012DA0  6D84               	negf	printf@val& (0+255),b
 25271  012DA2  1F85               	comf	(printf@val+1)& (0+255),f,b
 25272  012DA4  B0D8               	btfsc	status,0,c
 25273  012DA6  2B85               	incf	(printf@val+1)& (0+255),f,b
 25274  012DA8                     l2153:
 25275                           
 25276                           ; BSR set to: 0
 25277                           ;doprnt.c: 1264: }
 25278                           ;doprnt.c: 1266: }
 25279                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 25280                           
 25281                           ; BSR set to: 0
 25282  012DA8  0E01               	movlw	1
 25283  012DAA  0100               	movlb	0	; () banked
 25284  012DAC  6F86               	movwf	printf@c& (0+255),b
 25285  012DAE                     l14469:
 25286                           
 25287                           ; BSR set to: 0
 25288  012DAE  0E05               	movlw	5
 25289  012DB0  0100               	movlb	0	; () banked
 25290  012DB2  1986               	xorwf	printf@c& (0+255),w,b
 25291  012DB4  B4D8               	btfsc	status,2,c
 25292  012DB6  D019               	goto	u11880
 25293                           
 25294                           ; BSR set to: 0
 25295                           ;doprnt.c: 1306: if(val < dpowers[c])
 25296                           
 25297                           ; BSR set to: 0
 25298                           
 25299                           ; BSR set to: 0
 25300  012DB8  0100               	movlb	0	; () banked
 25301  012DBA  5186               	movf	printf@c& (0+255),w,b
 25302  012DBC  0D02               	mullw	2
 25303  012DBE  0EB5               	movlw	low _dpowers
 25304  012DC0  24F3               	addwf	prodl,w,c
 25305  012DC2  6EF6               	movwf	tblptrl,c
 25306  012DC4  0EFC               	movlw	high _dpowers
 25307  012DC6  20F4               	addwfc	prodh,w,c
 25308  012DC8  6EF7               	movwf	tblptrh,c
 25309  012DCA                     	if	1	;There are 3 active tblptr bytes
 25310  012DCA  6AF8               	clrf	tblptru,c
 25311  012DCC  0E00               	movlw	low (__mediumconst shr (0+16))
 25312  012DCE  22F8               	addwfc	tblptru,f,c
 25313  012DD0                     	endif
 25314  012DD0  0009               	tblrd		*+
 25315  012DD2  50F5               	movf	tablat,w,c
 25316  012DD4  0100               	movlb	0	; () banked
 25317  012DD6  5D84               	subwf	printf@val& (0+255),w,b
 25318  012DD8  0009               	tblrd		*+
 25319  012DDA  50F5               	movf	tablat,w,c
 25320  012DDC  0100               	movlb	0	; () banked
 25321  012DDE  5985               	subwfb	(printf@val+1)& (0+255),w,b
 25322  012DE0  A0D8               	btfss	status,0,c
 25323  012DE2  D003               	goto	u11880
 25324                           
 25325                           ; BSR set to: 0
 25326                           
 25327                           ; BSR set to: 0
 25328                           
 25329                           ; BSR set to: 0
 25330                           ;doprnt.c: 1307: break;
 25331  012DE4  0100               	movlb	0	; () banked
 25332  012DE6  2B86               	incf	printf@c& (0+255),f,b
 25333  012DE8  D7E2               	goto	l14469
 25334  012DEA                     u11880:
 25335                           
 25336                           ; BSR set to: 0
 25337                           ;doprnt.c: 1422: {
 25338                           ;doprnt.c: 1438: if(flag & 0x03)
 25339                           
 25340                           ; BSR set to: 0
 25341  012DEA  C080  F07F         	movff	printf@flag,??_printf
 25342  012DEE  0E03               	movlw	3
 25343  012DF0  0100               	movlb	0	; () banked
 25344  012DF2  177F               	andwf	??_printf& (0+255),f,b
 25345  012DF4  B4D8               	btfsc	status,2,c
 25346  012DF6  D003               	goto	l2157
 25347                           
 25348                           ; BSR set to: 0
 25349                           ;doprnt.c: 1439: (putch('-') );
 25350  012DF8  0E2D               	movlw	45
 25351  012DFA  ECFF  F0B6         	call	_putch
 25352  012DFE                     l2157:
 25353                           
 25354                           ;doprnt.c: 1469: }
 25355                           ;doprnt.c: 1472: prec = c;
 25356  012DFE  C086  F081         	movff	printf@c,printf@prec
 25357                           
 25358                           ;doprnt.c: 1474: while(prec--) {
 25359  012E02  D02C               	goto	l2158
 25360  012E04                     
 25361                           ;doprnt.c: 1478: {
 25362                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 25363  012E04  0100               	movlb	0	; () banked
 25364  012E06  5181               	movf	printf@prec& (0+255),w,b
 25365  012E08  0D02               	mullw	2
 25366  012E0A  0EB5               	movlw	low _dpowers
 25367  012E0C  24F3               	addwf	prodl,w,c
 25368  012E0E  6EF6               	movwf	tblptrl,c
 25369  012E10  0EFC               	movlw	high _dpowers
 25370  012E12  20F4               	addwfc	prodh,w,c
 25371  012E14  6EF7               	movwf	tblptrh,c
 25372  012E16                     	if	1	;There are 3 active tblptr bytes
 25373  012E16  6AF8               	clrf	tblptru,c
 25374  012E18  0E00               	movlw	low (__mediumconst shr (0+16))
 25375  012E1A  22F8               	addwfc	tblptru,f,c
 25376  012E1C                     	endif
 25377  012E1C  0009               	tblrd		*+
 25378  012E1E  CFF5 F062          	movff	tablat,___lwdiv@divisor
 25379  012E22  000A               	tblrd		*-
 25380  012E24  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
 25381  012E28  C084  F060         	movff	printf@val,___lwdiv@dividend
 25382  012E2C  C085  F061         	movff	printf@val+1,___lwdiv@dividend+1
 25383  012E30  EC19  F0AD         	call	___lwdiv	;wreg free
 25384  012E34  C060  F067         	movff	?___lwdiv,___lwmod@dividend
 25385  012E38  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
 25386  012E3C  0E00               	movlw	0
 25387  012E3E  0100               	movlb	0	; () banked
 25388  012E40  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 25389  012E42  0E0A               	movlw	10
 25390  012E44  6F69               	movwf	___lwmod@divisor& (0+255),b
 25391  012E46  EC50  F0B0         	call	___lwmod	;wreg free
 25392  012E4A  0100               	movlb	0	; () banked
 25393  012E4C  5167               	movf	?___lwmod& (0+255),w,b
 25394  012E4E  0F30               	addlw	48
 25395  012E50  0100               	movlb	0	; () banked
 25396  012E52  6F86               	movwf	printf@c& (0+255),b
 25397                           
 25398                           ; BSR set to: 0
 25399                           ;doprnt.c: 1523: }
 25400                           ;doprnt.c: 1524: (putch(c) );
 25401  012E54  0100               	movlb	0	; () banked
 25402  012E56  5186               	movf	printf@c& (0+255),w,b
 25403  012E58  ECFF  F0B6         	call	_putch
 25404  012E5C                     l2158:
 25405  012E5C  0100               	movlb	0	; () banked
 25406  012E5E  0781               	decf	printf@prec& (0+255),f,b
 25407  012E60  0100               	movlb	0	; () banked
 25408  012E62  2981               	incf	printf@prec& (0+255),w,b
 25409  012E64  A4D8               	btfss	status,2,c
 25410  012E66  D7CE               	goto	l2159
 25411  012E68                     u11900:
 25412                           
 25413                           ; BSR set to: 0
 25414                           
 25415                           ; BSR set to: 0
 25416  012E68  C07B  FFF6         	movff	printf@f,tblptrl
 25417  012E6C  C07C  FFF7         	movff	printf@f+1,tblptrh
 25418  012E70  0100               	movlb	0	; () banked
 25419  012E72  4B7B               	infsnz	printf@f& (0+255),f,b
 25420  012E74  2B7C               	incf	(printf@f+1)& (0+255),f,b
 25421  012E76                     	if	0	;tblptru may be non-zero
 25422  012E76                     	endif
 25423  012E76                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 25424  012E76  0E00               	movlw	low (__mediumconst shr (0+16))
 25425  012E78  6EF8               	movwf	tblptru,c
 25426  012E7A                     	endif
 25427  012E7A  0008               	tblrd		*
 25428  012E7C  CFF5 F086          	movff	tablat,printf@c
 25429  012E80  0100               	movlb	0	; () banked
 25430  012E82  5186               	movf	printf@c& (0+255),w,b
 25431  012E84  B4D8               	btfsc	status,2,c
 25432  012E86  0012               	return	
 25433  012E88  D73E               	goto	l2143
 25434  012E8A                     __end_of_printf:
 25435                           	opt stack 0
 25436                           tosu	equ	0xFFF
 25437                           tosh	equ	0xFFE
 25438                           tosl	equ	0xFFD
 25439                           pclath	equ	0xFFA
 25440                           tblptru	equ	0xFF8
 25441                           tblptrh	equ	0xFF7
 25442                           tblptrl	equ	0xFF6
 25443                           tablat	equ	0xFF5
 25444                           prodh	equ	0xFF4
 25445                           prodl	equ	0xFF3
 25446                           intcon	equ	0xFF2
 25447                           indf0	equ	0xFEF
 25448                           postinc0	equ	0xFEE
 25449                           fsr0h	equ	0xFEA
 25450                           fsr0l	equ	0xFE9
 25451                           wreg	equ	0xFE8
 25452                           indf1	equ	0xFE7
 25453                           postdec1	equ	0xFE5
 25454                           fsr1h	equ	0xFE2
 25455                           fsr1l	equ	0xFE1
 25456                           indf2	equ	0xFDF
 25457                           postinc2	equ	0xFDE
 25458                           postdec2	equ	0xFDD
 25459                           plusw2	equ	0xFDB
 25460                           fsr2h	equ	0xFDA
 25461                           fsr2l	equ	0xFD9
 25462                           status	equ	0xFD8
 25463                           
 25464 ;; *************** function _putch *****************
 25465 ;; Defined at:
 25466 ;;		line 454 in file "Library/Console.c"
 25467 ;; Parameters:    Size  Location     Type
 25468 ;;  c               1    wreg     unsigned char 
 25469 ;; Auto vars:     Size  Location     Type
 25470 ;;  c               1   26[BANK0 ] unsigned char 
 25471 ;; Return value:  Size  Location     Type
 25472 ;;                  1    wreg      void 
 25473 ;; Registers used:
 25474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25475 ;; Tracked objects:
 25476 ;;		On entry : 0/0
 25477 ;;		On exit  : 0/0
 25478 ;;		Unchanged: 0/0
 25479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25481 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25483 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25484 ;;Total ram usage:        1 bytes
 25485 ;; Hardware stack levels used:    1
 25486 ;; Hardware stack levels required when called:   11
 25487 ;; This function calls:
 25488 ;;		_Console_PrintChar
 25489 ;; This function is called by:
 25490 ;;		_printf
 25491 ;; This function uses a non-reentrant model
 25492 ;;
 25493                           
 25494                           	psect	text125
 25495  016DFE                     __ptext125:
 25496                           	opt stack 0
 25497  016DFE                     _putch:
 25498                           	opt stack 18
 25499                           
 25500                           ; BSR set to: 0
 25501                           ;incstack = 0
 25502                           ;putch@c stored from wreg
 25503  016DFE  0100               	movlb	0	; () banked
 25504  016E00  6F7A               	movwf	putch@c& (0+255),b
 25505                           
 25506                           ;Console.c: 456: Console_PrintChar(c);
 25507  016E02  0100               	movlb	0	; () banked
 25508  016E04  517A               	movf	putch@c& (0+255),w,b
 25509  016E06  ECE6  F094         	call	_Console_PrintChar
 25510  016E0A  0012               	return		;funcret
 25511  016E0C                     __end_of_putch:
 25512                           	opt stack 0
 25513                           tosu	equ	0xFFF
 25514                           tosh	equ	0xFFE
 25515                           tosl	equ	0xFFD
 25516                           pclath	equ	0xFFA
 25517                           tblptru	equ	0xFF8
 25518                           tblptrh	equ	0xFF7
 25519                           tblptrl	equ	0xFF6
 25520                           tablat	equ	0xFF5
 25521                           prodh	equ	0xFF4
 25522                           prodl	equ	0xFF3
 25523                           intcon	equ	0xFF2
 25524                           indf0	equ	0xFEF
 25525                           postinc0	equ	0xFEE
 25526                           fsr0h	equ	0xFEA
 25527                           fsr0l	equ	0xFE9
 25528                           wreg	equ	0xFE8
 25529                           indf1	equ	0xFE7
 25530                           postdec1	equ	0xFE5
 25531                           fsr1h	equ	0xFE2
 25532                           fsr1l	equ	0xFE1
 25533                           indf2	equ	0xFDF
 25534                           postinc2	equ	0xFDE
 25535                           postdec2	equ	0xFDD
 25536                           plusw2	equ	0xFDB
 25537                           fsr2h	equ	0xFDA
 25538                           fsr2l	equ	0xFD9
 25539                           status	equ	0xFD8
 25540                           
 25541 ;; *************** function _Console_PrintChar *****************
 25542 ;; Defined at:
 25543 ;;		line 322 in file "Library/Console.c"
 25544 ;; Parameters:    Size  Location     Type
 25545 ;;  pInput          1    wreg     unsigned char 
 25546 ;; Auto vars:     Size  Location     Type
 25547 ;;  pInput          1   25[BANK0 ] unsigned char 
 25548 ;; Return value:  Size  Location     Type
 25549 ;;                  1    wreg      void 
 25550 ;; Registers used:
 25551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25552 ;; Tracked objects:
 25553 ;;		On entry : 0/0
 25554 ;;		On exit  : 0/0
 25555 ;;		Unchanged: 0/0
 25556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25558 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25559 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25560 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25561 ;;Total ram usage:        4 bytes
 25562 ;; Hardware stack levels used:    1
 25563 ;; Hardware stack levels required when called:   10
 25564 ;; This function calls:
 25565 ;;		_Console_Backspace
 25566 ;;		_Console_FormFeed
 25567 ;;		_Console_IncrementCursor
 25568 ;;		_Console_NewLine
 25569 ;;		_Console_ResetCursor
 25570 ;;		_Console_Tab
 25571 ;; This function is called by:
 25572 ;;		_putch
 25573 ;;		_Console_PrintString
 25574 ;; This function uses a non-reentrant model
 25575 ;;
 25576                           
 25577                           	psect	text126
 25578  0129CC                     __ptext126:
 25579                           	opt stack 0
 25580  0129CC                     _Console_PrintChar:
 25581                           	opt stack 18
 25582                           
 25583                           ;incstack = 0
 25584                           ;Console_PrintChar@pInput stored from wreg
 25585  0129CC  0100               	movlb	0	; () banked
 25586  0129CE  6F79               	movwf	Console_PrintChar@pInput& (0+255),b
 25587                           
 25588                           ;Console.c: 324: switch(pInput)
 25589  0129D0  D0AF               	goto	l1036
 25590  0129D2                     
 25591                           ;Console.c: 327: case '\n':
 25592                           ;Console.c: 328: Console_NewLine();
 25593  0129D2  EC59  F0A9         	call	_Console_NewLine	;wreg free
 25594                           
 25595                           ;Console.c: 329: return;
 25596  0129D6  0012               	return	
 25597  0129D8                     
 25598                           ;Console.c: 331: Console_Backspace();
 25599  0129D8  ECAF  F0B0         	call	_Console_Backspace	;wreg free
 25600                           
 25601                           ;Console.c: 332: return;
 25602  0129DC  0012               	return	
 25603  0129DE                     
 25604                           ;Console.c: 334: Console_FormFeed();
 25605  0129DE  ECD2  F0AA         	call	_Console_FormFeed	;wreg free
 25606                           
 25607                           ;Console.c: 335: return;
 25608  0129E2  0012               	return	
 25609  0129E4                     
 25610                           ;Console.c: 337: Console_Tab();
 25611  0129E4  ECD4  F0A3         	call	_Console_Tab	;wreg free
 25612                           
 25613                           ;Console.c: 338: return;
 25614  0129E8  0012               	return	
 25615  0129EA                     
 25616                           ;Console.c: 340: Console_IncrementCursor();
 25617  0129EA  ECBA  F0AF         	call	_Console_IncrementCursor	;wreg free
 25618                           
 25619                           ;Console.c: 341: return;
 25620  0129EE  0012               	return	
 25621  0129F0                     
 25622                           ;Console.c: 343: Console_ResetCursor();
 25623  0129F0  EC30  F0B6         	call	_Console_ResetCursor	;wreg free
 25624                           
 25625                           ;Console.c: 344: return;
 25626  0129F4  0012               	return	
 25627  0129F6                     
 25628                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 25629                           
 25630                           ;Console.c: 349: default:
 25631  0129F6  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 25632  0129FA  0E7F               	movlw	127
 25633  0129FC  0100               	movlb	0	; () banked
 25634  0129FE  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 25635  012A00  0100               	movlb	0	; () banked
 25636  012A02  51FA               	movf	_lBufferY& (0+255),w,b
 25637  012A04  0D14               	mullw	20
 25638  012A06  0E8F               	movlw	low _lBuffer
 25639  012A08  0100               	movlb	0	; () banked
 25640  012A0A  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 25641  012A0C  0E02               	movlw	high _lBuffer
 25642  012A0E  0100               	movlb	0	; () banked
 25643  012A10  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 25644  012A12  50F3               	movf	prodl,w,c
 25645  012A14  0100               	movlb	0	; () banked
 25646  012A16  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 25647  012A18  50F4               	movf	prodh,w,c
 25648  012A1A  0100               	movlb	0	; () banked
 25649  012A1C  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 25650  012A1E  0100               	movlb	0	; () banked
 25651  012A20  51FB               	movf	_lBufferX& (0+255),w,b
 25652  012A22  0D01               	mullw	1
 25653  012A24  50F3               	movf	prodl,w,c
 25654  012A26  0100               	movlb	0	; () banked
 25655  012A28  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 25656  012A2A  6ED9               	movwf	fsr2l,c
 25657  012A2C  50F4               	movf	prodh,w,c
 25658  012A2E  0100               	movlb	0	; () banked
 25659  012A30  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 25660  012A32  6EDA               	movwf	fsr2h,c
 25661  012A34  50DF               	movf	indf2,w,c
 25662  012A36  0B7F               	andlw	127
 25663  012A38  0100               	movlb	0	; () banked
 25664  012A3A  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 25665  012A3C  B4D8               	btfsc	status,2,c
 25666  012A3E  D02D               	goto	l1047
 25667                           
 25668                           ; BSR set to: 0
 25669                           ;Console.c: 351: {
 25670                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 25671  012A40  0E01               	movlw	1
 25672  012A42  6E4D               	movwf	_change,c
 25673                           
 25674                           ; BSR set to: 0
 25675  012A44  0100               	movlb	0	; () banked
 25676  012A46  51FA               	movf	_lBufferY& (0+255),w,b
 25677  012A48  0D14               	mullw	20
 25678  012A4A  0E8F               	movlw	low _lBuffer
 25679  012A4C  0100               	movlb	0	; () banked
 25680  012A4E  6F76               	movwf	??_Console_PrintChar& (0+255),b
 25681  012A50  0E02               	movlw	high _lBuffer
 25682  012A52  0100               	movlb	0	; () banked
 25683  012A54  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 25684  012A56  50F3               	movf	prodl,w,c
 25685  012A58  0100               	movlb	0	; () banked
 25686  012A5A  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 25687  012A5C  50F4               	movf	prodh,w,c
 25688  012A5E  0100               	movlb	0	; () banked
 25689  012A60  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 25690  012A62  0100               	movlb	0	; () banked
 25691  012A64  51FB               	movf	_lBufferX& (0+255),w,b
 25692  012A66  0D01               	mullw	1
 25693  012A68  50F3               	movf	prodl,w,c
 25694  012A6A  0100               	movlb	0	; () banked
 25695  012A6C  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 25696  012A6E  6ED9               	movwf	fsr2l,c
 25697  012A70  50F4               	movf	prodh,w,c
 25698  012A72  0100               	movlb	0	; () banked
 25699  012A74  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 25700  012A76  6EDA               	movwf	fsr2h,c
 25701  012A78  0100               	movlb	0	; () banked
 25702  012A7A  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 25703  012A7C  0980               	iorlw	128
 25704  012A7E  6EDF               	movwf	indf2,c
 25705                           
 25706                           ; BSR set to: 0
 25707                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
 25708  012A80  0100               	movlb	0	; () banked
 25709  012A82  51FA               	movf	_lBufferY& (0+255),w,b
 25710  012A84  0D02               	mullw	2
 25711  012A86  0E00               	movlw	low _lCBuffer
 25712  012A88  24F3               	addwf	prodl,w,c
 25713  012A8A  6ED9               	movwf	fsr2l,c
 25714  012A8C  0E02               	movlw	high _lCBuffer
 25715  012A8E  20F4               	addwfc	prodh,w,c
 25716  012A90  6EDA               	movwf	fsr2h,c
 25717  012A92  C1F5  FFDE         	movff	_gForecolour,postinc2
 25718  012A96  C1F6  FFDD         	movff	_gForecolour+1,postdec2
 25719  012A9A                     l1047:
 25720                           
 25721                           ; BSR set to: 0
 25722                           ;Console.c: 354: }
 25723                           ;Console.c: 368: if(Console_IncrementCursor())
 25724                           
 25725                           ; BSR set to: 0
 25726  012A9A  ECBA  F0AF         	call	_Console_IncrementCursor	;wreg free
 25727  012A9E  0900               	iorlw	0
 25728  012AA0  B4D8               	btfsc	status,2,c
 25729  012AA2  0012               	return	
 25730                           
 25731                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
 25732  012AA4  C079  F076         	movff	Console_PrintChar@pInput,??_Console_PrintChar
 25733  012AA8  0E7F               	movlw	127
 25734  012AAA  0100               	movlb	0	; () banked
 25735  012AAC  1776               	andwf	??_Console_PrintChar& (0+255),f,b
 25736  012AAE  0100               	movlb	0	; () banked
 25737  012AB0  51FA               	movf	_lBufferY& (0+255),w,b
 25738  012AB2  0D14               	mullw	20
 25739  012AB4  0E8F               	movlw	low _lBuffer
 25740  012AB6  0100               	movlb	0	; () banked
 25741  012AB8  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 25742  012ABA  0E02               	movlw	high _lBuffer
 25743  012ABC  0100               	movlb	0	; () banked
 25744  012ABE  6F78               	movwf	(??_Console_PrintChar+2)& (0+255),b
 25745  012AC0  50F3               	movf	prodl,w,c
 25746  012AC2  0100               	movlb	0	; () banked
 25747  012AC4  2777               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
 25748  012AC6  50F4               	movf	prodh,w,c
 25749  012AC8  0100               	movlb	0	; () banked
 25750  012ACA  2378               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
 25751  012ACC  0100               	movlb	0	; () banked
 25752  012ACE  51FB               	movf	_lBufferX& (0+255),w,b
 25753  012AD0  0D01               	mullw	1
 25754  012AD2  50F3               	movf	prodl,w,c
 25755  012AD4  0100               	movlb	0	; () banked
 25756  012AD6  2577               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
 25757  012AD8  6ED9               	movwf	fsr2l,c
 25758  012ADA  50F4               	movf	prodh,w,c
 25759  012ADC  0100               	movlb	0	; () banked
 25760  012ADE  2178               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
 25761  012AE0  6EDA               	movwf	fsr2h,c
 25762  012AE2  50DF               	movf	indf2,w,c
 25763  012AE4  0B7F               	andlw	127
 25764  012AE6  0100               	movlb	0	; () banked
 25765  012AE8  1976               	xorwf	??_Console_PrintChar& (0+255),w,b
 25766  012AEA  B4D8               	btfsc	status,2,c
 25767  012AEC  0012               	return	
 25768                           
 25769                           ; BSR set to: 0
 25770                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
 25771  012AEE  0E01               	movlw	1
 25772  012AF0  6E4D               	movwf	_change,c
 25773                           
 25774                           ; BSR set to: 0
 25775  012AF2  0100               	movlb	0	; () banked
 25776  012AF4  51FA               	movf	_lBufferY& (0+255),w,b
 25777  012AF6  0D14               	mullw	20
 25778  012AF8  0E8F               	movlw	low _lBuffer
 25779  012AFA  0100               	movlb	0	; () banked
 25780  012AFC  6F76               	movwf	??_Console_PrintChar& (0+255),b
 25781  012AFE  0E02               	movlw	high _lBuffer
 25782  012B00  0100               	movlb	0	; () banked
 25783  012B02  6F77               	movwf	(??_Console_PrintChar+1)& (0+255),b
 25784  012B04  50F3               	movf	prodl,w,c
 25785  012B06  0100               	movlb	0	; () banked
 25786  012B08  2776               	addwf	??_Console_PrintChar& (0+255),f,b
 25787  012B0A  50F4               	movf	prodh,w,c
 25788  012B0C  0100               	movlb	0	; () banked
 25789  012B0E  2377               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
 25790  012B10  0100               	movlb	0	; () banked
 25791  012B12  51FB               	movf	_lBufferX& (0+255),w,b
 25792  012B14  0D01               	mullw	1
 25793  012B16  50F3               	movf	prodl,w,c
 25794  012B18  0100               	movlb	0	; () banked
 25795  012B1A  2576               	addwf	??_Console_PrintChar& (0+255),w,b
 25796  012B1C  6ED9               	movwf	fsr2l,c
 25797  012B1E  50F4               	movf	prodh,w,c
 25798  012B20  0100               	movlb	0	; () banked
 25799  012B22  2177               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
 25800  012B24  6EDA               	movwf	fsr2h,c
 25801  012B26  0100               	movlb	0	; () banked
 25802  012B28  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 25803  012B2A  0980               	iorlw	128
 25804  012B2C  6EDF               	movwf	indf2,c
 25805                           
 25806                           ; BSR set to: 0
 25807                           ;Console.c: 372: };
 25808                           
 25809                           ; BSR set to: 0
 25810                           ;Console.c: 371: return;
 25811                           
 25812                           ; BSR set to: 0
 25813                           
 25814                           ; BSR set to: 0
 25815  012B2E  0012               	return	
 25816  012B30                     l1036:
 25817                           
 25818                           ; BSR set to: 0
 25819  012B30  0100               	movlb	0	; () banked
 25820  012B32  5179               	movf	Console_PrintChar@pInput& (0+255),w,b
 25821                           
 25822                           ; Switch size 1, requested type "space"
 25823                           ; Number of cases is 8, Range of values is 7 to 35
 25824                           ; switch strategies available:
 25825                           ; Name         Instructions Cycles
 25826                           ; simple_byte           25    13 (average)
 25827                           ;	Chosen strategy is simple_byte
 25828  012B34  0A07               	xorlw	7	; case 7
 25829  012B36  B4D8               	btfsc	status,2,c
 25830  012B38  D758               	goto	l1043
 25831  012B3A  0A0F               	xorlw	15	; case 8
 25832  012B3C  B4D8               	btfsc	status,2,c
 25833  012B3E  D74C               	goto	l1040
 25834  012B40  0A01               	xorlw	1	; case 9
 25835  012B42  B4D8               	btfsc	status,2,c
 25836  012B44  D74F               	goto	l1042
 25837  012B46  0A03               	xorlw	3	; case 10
 25838  012B48  B4D8               	btfsc	status,2,c
 25839  012B4A  D743               	goto	l1037
 25840  012B4C  0A06               	xorlw	6	; case 12
 25841  012B4E  B4D8               	btfsc	status,2,c
 25842  012B50  D746               	goto	l1041
 25843  012B52  0A01               	xorlw	1	; case 13
 25844  012B54  B4D8               	btfsc	status,2,c
 25845  012B56  D73D               	goto	l1037
 25846  012B58  0A2D               	xorlw	45	; case 32
 25847  012B5A  B4D8               	btfsc	status,2,c
 25848  012B5C  D74C               	goto	l1045
 25849  012B5E  0A03               	xorlw	3	; case 35
 25850  012B60  B4D8               	btfsc	status,2,c
 25851  012B62  D746               	goto	l1044
 25852  012B64  D748               	goto	l1045
 25853  012B66                     __end_of_Console_PrintChar:
 25854                           	opt stack 0
 25855                           tosu	equ	0xFFF
 25856                           tosh	equ	0xFFE
 25857                           tosl	equ	0xFFD
 25858                           pclath	equ	0xFFA
 25859                           tblptru	equ	0xFF8
 25860                           tblptrh	equ	0xFF7
 25861                           tblptrl	equ	0xFF6
 25862                           tablat	equ	0xFF5
 25863                           prodh	equ	0xFF4
 25864                           prodl	equ	0xFF3
 25865                           intcon	equ	0xFF2
 25866                           indf0	equ	0xFEF
 25867                           postinc0	equ	0xFEE
 25868                           fsr0h	equ	0xFEA
 25869                           fsr0l	equ	0xFE9
 25870                           wreg	equ	0xFE8
 25871                           indf1	equ	0xFE7
 25872                           postdec1	equ	0xFE5
 25873                           fsr1h	equ	0xFE2
 25874                           fsr1l	equ	0xFE1
 25875                           indf2	equ	0xFDF
 25876                           postinc2	equ	0xFDE
 25877                           postdec2	equ	0xFDD
 25878                           plusw2	equ	0xFDB
 25879                           fsr2h	equ	0xFDA
 25880                           fsr2l	equ	0xFD9
 25881                           status	equ	0xFD8
 25882                           
 25883 ;; *************** function _Console_Tab *****************
 25884 ;; Defined at:
 25885 ;;		line 260 in file "Library/Console.c"
 25886 ;; Parameters:    Size  Location     Type
 25887 ;;		None
 25888 ;; Auto vars:     Size  Location     Type
 25889 ;;  c               1   21[BANK0 ] unsigned char 
 25890 ;;  i               1   20[BANK0 ] unsigned char 
 25891 ;;  t               1   19[BANK0 ] unsigned char 
 25892 ;; Return value:  Size  Location     Type
 25893 ;;                  1    wreg      void 
 25894 ;; Registers used:
 25895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25896 ;; Tracked objects:
 25897 ;;		On entry : 0/0
 25898 ;;		On exit  : 0/0
 25899 ;;		Unchanged: 0/0
 25900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25902 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25903 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25904 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25905 ;;Total ram usage:        8 bytes
 25906 ;; Hardware stack levels used:    1
 25907 ;; Hardware stack levels required when called:    9
 25908 ;; This function calls:
 25909 ;;		_Console_ClearCursor
 25910 ;;		_Console_IncrementCursor
 25911 ;;		___awdiv
 25912 ;; This function is called by:
 25913 ;;		_Console_PrintChar
 25914 ;; This function uses a non-reentrant model
 25915 ;;
 25916                           
 25917                           	psect	text127
 25918  0147A8                     __ptext127:
 25919                           	opt stack 0
 25920  0147A8                     _Console_Tab:
 25921                           	opt stack 18
 25922                           
 25923                           ;Console.c: 262: UINT8 i = 0;
 25924                           
 25925                           ;incstack = 0
 25926  0147A8  0E00               	movlw	0
 25927  0147AA  0100               	movlb	0	; () banked
 25928  0147AC  6F74               	movwf	Console_Tab@i& (0+255),b
 25929                           
 25930                           ; BSR set to: 0
 25931                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
 25932  0147AE  0EFA               	movlw	250
 25933  0147B0  2448               	addwf	_gCursor,w,c
 25934  0147B2  0100               	movlb	0	; () banked
 25935  0147B4  6F66               	movwf	___awdiv@dividend& (0+255),b
 25936  0147B6  0EFF               	movlw	255
 25937  0147B8  2049               	addwfc	_gCursor+1,w,c
 25938  0147BA  0100               	movlb	0	; () banked
 25939  0147BC  6F67               	movwf	(___awdiv@dividend+1)& (0+255),b
 25940  0147BE  0E00               	movlw	0
 25941  0147C0  0100               	movlb	0	; () banked
 25942  0147C2  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 25943  0147C4  0E06               	movlw	6
 25944  0147C6  6F68               	movwf	___awdiv@divisor& (0+255),b
 25945  0147C8  EC94  F0A4         	call	___awdiv	;wreg free
 25946  0147CC  0100               	movlb	0	; () banked
 25947  0147CE  5166               	movf	?___awdiv& (0+255),w,b
 25948  0147D0  0100               	movlb	0	; () banked
 25949  0147D2  6F75               	movwf	Console_Tab@c& (0+255),b
 25950                           
 25951                           ; BSR set to: 0
 25952                           ;Console.c: 264: UINT8 t = c/4;
 25953  0147D4  C075  F066         	movff	Console_Tab@c,___awdiv@dividend
 25954  0147D8  0100               	movlb	0	; () banked
 25955  0147DA  6B67               	clrf	(___awdiv@dividend+1)& (0+255),b
 25956  0147DC  0E00               	movlw	0
 25957  0147DE  0100               	movlb	0	; () banked
 25958  0147E0  6F69               	movwf	(___awdiv@divisor+1)& (0+255),b
 25959  0147E2  0E04               	movlw	4
 25960  0147E4  6F68               	movwf	___awdiv@divisor& (0+255),b
 25961  0147E6  EC94  F0A4         	call	___awdiv	;wreg free
 25962  0147EA  0100               	movlb	0	; () banked
 25963  0147EC  5166               	movf	?___awdiv& (0+255),w,b
 25964  0147EE  0100               	movlb	0	; () banked
 25965  0147F0  6F73               	movwf	Console_Tab@t& (0+255),b
 25966                           
 25967                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
 25968  0147F2  0E00               	movlw	0
 25969  0147F4  0100               	movlb	0	; () banked
 25970  0147F6  6F74               	movwf	Console_Tab@i& (0+255),b
 25971  0147F8  D006               	goto	l1009
 25972  0147FA                     
 25973                           ; BSR set to: 0
 25974                           ;Console.c: 266: {
 25975                           ;Console.c: 267: Console_ClearCursor();
 25976                           
 25977                           ; BSR set to: 0
 25978  0147FA  ECB2  F0B3         	call	_Console_ClearCursor	;wreg free
 25979                           
 25980                           ;Console.c: 268: Console_IncrementCursor();
 25981  0147FE  ECBA  F0AF         	call	_Console_IncrementCursor	;wreg free
 25982  014802  0100               	movlb	0	; () banked
 25983  014804  2B74               	incf	Console_Tab@i& (0+255),f,b
 25984  014806                     l1009:
 25985                           
 25986                           ; BSR set to: 0
 25987                           
 25988                           ; BSR set to: 0
 25989  014806  0100               	movlb	0	; () banked
 25990  014808  5173               	movf	Console_Tab@t& (0+255),w,b
 25991  01480A  0D04               	mullw	4
 25992  01480C  1EF3               	comf	prodl,f,c
 25993  01480E  1EF4               	comf	prodh,f,c
 25994  014810  4AF3               	infsnz	prodl,f,c
 25995  014812  2AF4               	incf	prodh,f,c
 25996  014814  0100               	movlb	0	; () banked
 25997  014816  5175               	movf	Console_Tab@c& (0+255),w,b
 25998  014818  0100               	movlb	0	; () banked
 25999  01481A  6F6E               	movwf	??_Console_Tab& (0+255),b
 26000  01481C  6B6F               	clrf	(??_Console_Tab+1)& (0+255),b
 26001  01481E  50F3               	movf	prodl,w,c
 26002  014820  0100               	movlb	0	; () banked
 26003  014822  276E               	addwf	??_Console_Tab& (0+255),f,b
 26004  014824  50F4               	movf	prodh,w,c
 26005  014826  0100               	movlb	0	; () banked
 26006  014828  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 26007  01482A  0100               	movlb	0	; () banked
 26008  01482C  1F6E               	comf	??_Console_Tab& (0+255),f,b
 26009  01482E  1F6F               	comf	(??_Console_Tab+1)& (0+255),f,b
 26010  014830  4B6E               	infsnz	??_Console_Tab& (0+255),f,b
 26011  014832  2B6F               	incf	(??_Console_Tab+1)& (0+255),f,b
 26012  014834  0E04               	movlw	4
 26013  014836  0100               	movlb	0	; () banked
 26014  014838  276E               	addwf	??_Console_Tab& (0+255),f,b
 26015  01483A  0E00               	movlw	0
 26016  01483C  236F               	addwfc	(??_Console_Tab+1)& (0+255),f,b
 26017  01483E  0100               	movlb	0	; () banked
 26018  014840  5174               	movf	Console_Tab@i& (0+255),w,b
 26019  014842  0100               	movlb	0	; () banked
 26020  014844  6F70               	movwf	(??_Console_Tab+2)& (0+255),b
 26021  014846  6B71               	clrf	(??_Console_Tab+3)& (0+255),b
 26022  014848  0100               	movlb	0	; () banked
 26023  01484A  516E               	movf	??_Console_Tab& (0+255),w,b
 26024  01484C  0100               	movlb	0	; () banked
 26025  01484E  5D70               	subwf	(??_Console_Tab+2)& (0+255),w,b
 26026  014850  0100               	movlb	0	; () banked
 26027  014852  5171               	movf	(??_Console_Tab+3)& (0+255),w,b
 26028  014854  0A80               	xorlw	128
 26029  014856  0100               	movlb	0	; () banked
 26030  014858  6F72               	movwf	(??_Console_Tab+4)& (0+255),b
 26031  01485A  0100               	movlb	0	; () banked
 26032  01485C  516F               	movf	(??_Console_Tab+1)& (0+255),w,b
 26033  01485E  0A80               	xorlw	128
 26034  014860  0100               	movlb	0	; () banked
 26035  014862  5972               	subwfb	(??_Console_Tab+4)& (0+255),w,b
 26036  014864  B0D8               	btfsc	status,0,c
 26037  014866  0012               	return	
 26038  014868  D7C8               	goto	l1010
 26039  01486A                     __end_of_Console_Tab:
 26040                           	opt stack 0
 26041                           tosu	equ	0xFFF
 26042                           tosh	equ	0xFFE
 26043                           tosl	equ	0xFFD
 26044                           pclath	equ	0xFFA
 26045                           tblptru	equ	0xFF8
 26046                           tblptrh	equ	0xFF7
 26047                           tblptrl	equ	0xFF6
 26048                           tablat	equ	0xFF5
 26049                           prodh	equ	0xFF4
 26050                           prodl	equ	0xFF3
 26051                           intcon	equ	0xFF2
 26052                           indf0	equ	0xFEF
 26053                           postinc0	equ	0xFEE
 26054                           fsr0h	equ	0xFEA
 26055                           fsr0l	equ	0xFE9
 26056                           wreg	equ	0xFE8
 26057                           indf1	equ	0xFE7
 26058                           postdec1	equ	0xFE5
 26059                           fsr1h	equ	0xFE2
 26060                           fsr1l	equ	0xFE1
 26061                           indf2	equ	0xFDF
 26062                           postinc2	equ	0xFDE
 26063                           postdec2	equ	0xFDD
 26064                           plusw2	equ	0xFDB
 26065                           fsr2h	equ	0xFDA
 26066                           fsr2l	equ	0xFD9
 26067                           status	equ	0xFD8
 26068                           
 26069 ;; *************** function ___awdiv *****************
 26070 ;; Defined at:
 26071 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
 26072 ;; Parameters:    Size  Location     Type
 26073 ;;  dividend        2    6[BANK0 ] int 
 26074 ;;  divisor         2    8[BANK0 ] int 
 26075 ;; Auto vars:     Size  Location     Type
 26076 ;;  quotient        2   12[BANK0 ] int 
 26077 ;;  sign            1   11[BANK0 ] unsigned char 
 26078 ;;  counter         1   10[BANK0 ] unsigned char 
 26079 ;; Return value:  Size  Location     Type
 26080 ;;                  2    6[BANK0 ] int 
 26081 ;; Registers used:
 26082 ;;		wreg, status,2, status,0
 26083 ;; Tracked objects:
 26084 ;;		On entry : 0/0
 26085 ;;		On exit  : 0/0
 26086 ;;		Unchanged: 0/0
 26087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26088 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26089 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26091 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26092 ;;Total ram usage:        8 bytes
 26093 ;; Hardware stack levels used:    1
 26094 ;; Hardware stack levels required when called:    7
 26095 ;; This function calls:
 26096 ;;		Nothing
 26097 ;; This function is called by:
 26098 ;;		_Console_Tab
 26099 ;;		_displayPositionMode
 26100 ;; This function uses a non-reentrant model
 26101 ;;
 26102                           
 26103                           	psect	text128
 26104  014928                     __ptext128:
 26105                           	opt stack 0
 26106  014928                     ___awdiv:
 26107                           	opt stack 19
 26108                           
 26109                           ; BSR set to: 0
 26110                           ;incstack = 0
 26111  014928  0E00               	movlw	0
 26112  01492A  0100               	movlb	0	; () banked
 26113  01492C  6F6B               	movwf	___awdiv@sign& (0+255),b
 26114                           
 26115                           ; BSR set to: 0
 26116  01492E  0100               	movlb	0	; () banked
 26117  014930  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26118  014932  D008               	goto	l2330
 26119                           
 26120                           ; BSR set to: 0
 26121  014934  0100               	movlb	0	; () banked
 26122  014936  6D68               	negf	___awdiv@divisor& (0+255),b
 26123  014938  1F69               	comf	(___awdiv@divisor+1)& (0+255),f,b
 26124  01493A  B0D8               	btfsc	status,0,c
 26125  01493C  2B69               	incf	(___awdiv@divisor+1)& (0+255),f,b
 26126                           
 26127                           ; BSR set to: 0
 26128  01493E  0E01               	movlw	1
 26129  014940  0100               	movlb	0	; () banked
 26130  014942  6F6B               	movwf	___awdiv@sign& (0+255),b
 26131  014944                     l2330:
 26132                           
 26133                           ; BSR set to: 0
 26134                           
 26135                           ; BSR set to: 0
 26136  014944  0100               	movlb	0	; () banked
 26137  014946  AF67               	btfss	(___awdiv@dividend+1)& (0+255),7,b
 26138  014948  D008               	goto	l2331
 26139                           
 26140                           ; BSR set to: 0
 26141  01494A  0100               	movlb	0	; () banked
 26142  01494C  6D66               	negf	___awdiv@dividend& (0+255),b
 26143  01494E  1F67               	comf	(___awdiv@dividend+1)& (0+255),f,b
 26144  014950  B0D8               	btfsc	status,0,c
 26145  014952  2B67               	incf	(___awdiv@dividend+1)& (0+255),f,b
 26146                           
 26147                           ; BSR set to: 0
 26148  014954  0E01               	movlw	1
 26149  014956  0100               	movlb	0	; () banked
 26150  014958  1B6B               	xorwf	___awdiv@sign& (0+255),f,b
 26151  01495A                     l2331:
 26152                           
 26153                           ; BSR set to: 0
 26154                           
 26155                           ; BSR set to: 0
 26156  01495A  0E00               	movlw	0
 26157  01495C  0100               	movlb	0	; () banked
 26158  01495E  6F6D               	movwf	(___awdiv@quotient+1)& (0+255),b
 26159  014960  0E00               	movlw	0
 26160  014962  6F6C               	movwf	___awdiv@quotient& (0+255),b
 26161                           
 26162                           ; BSR set to: 0
 26163  014964  0100               	movlb	0	; () banked
 26164  014966  5168               	movf	___awdiv@divisor& (0+255),w,b
 26165  014968  0100               	movlb	0	; () banked
 26166  01496A  1169               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
 26167  01496C  B4D8               	btfsc	status,2,c
 26168  01496E  D02C               	goto	l2338
 26169                           
 26170                           ; BSR set to: 0
 26171  014970  0E01               	movlw	1
 26172  014972  0100               	movlb	0	; () banked
 26173  014974  6F6A               	movwf	___awdiv@counter& (0+255),b
 26174  014976  D006               	goto	l2333
 26175  014978                     
 26176                           ; BSR set to: 0
 26177                           
 26178                           ; BSR set to: 0
 26179  014978  0100               	movlb	0	; () banked
 26180  01497A  90D8               	bcf	status,0,c
 26181  01497C  3768               	rlcf	___awdiv@divisor& (0+255),f,b
 26182  01497E  3769               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
 26183  014980  0100               	movlb	0	; () banked
 26184  014982  2B6A               	incf	___awdiv@counter& (0+255),f,b
 26185  014984                     l2333:
 26186                           
 26187                           ; BSR set to: 0
 26188                           
 26189                           ; BSR set to: 0
 26190  014984  0100               	movlb	0	; () banked
 26191  014986  AF69               	btfss	(___awdiv@divisor+1)& (0+255),7,b
 26192  014988  D7F7               	goto	l2334
 26193  01498A                     u9490:
 26194                           
 26195                           ; BSR set to: 0
 26196                           
 26197                           ; BSR set to: 0
 26198                           
 26199                           ; BSR set to: 0
 26200  01498A  0100               	movlb	0	; () banked
 26201  01498C  90D8               	bcf	status,0,c
 26202  01498E  376C               	rlcf	___awdiv@quotient& (0+255),f,b
 26203  014990  376D               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
 26204                           
 26205                           ; BSR set to: 0
 26206  014992  0100               	movlb	0	; () banked
 26207  014994  5168               	movf	___awdiv@divisor& (0+255),w,b
 26208  014996  0100               	movlb	0	; () banked
 26209  014998  5D66               	subwf	___awdiv@dividend& (0+255),w,b
 26210  01499A  0100               	movlb	0	; () banked
 26211  01499C  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26212  01499E  0100               	movlb	0	; () banked
 26213  0149A0  5967               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
 26214  0149A2  A0D8               	btfss	status,0,c
 26215  0149A4  D00A               	goto	l2337
 26216                           
 26217                           ; BSR set to: 0
 26218  0149A6  0100               	movlb	0	; () banked
 26219  0149A8  5168               	movf	___awdiv@divisor& (0+255),w,b
 26220  0149AA  0100               	movlb	0	; () banked
 26221  0149AC  5F66               	subwf	___awdiv@dividend& (0+255),f,b
 26222  0149AE  0100               	movlb	0	; () banked
 26223  0149B0  5169               	movf	(___awdiv@divisor+1)& (0+255),w,b
 26224  0149B2  0100               	movlb	0	; () banked
 26225  0149B4  5B67               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
 26226                           
 26227                           ; BSR set to: 0
 26228  0149B6  0100               	movlb	0	; () banked
 26229  0149B8  816C               	bsf	___awdiv@quotient& (0+255),0,b
 26230  0149BA                     l2337:
 26231                           
 26232                           ; BSR set to: 0
 26233                           
 26234                           ; BSR set to: 0
 26235  0149BA  0100               	movlb	0	; () banked
 26236  0149BC  90D8               	bcf	status,0,c
 26237  0149BE  3369               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
 26238  0149C0  3368               	rrcf	___awdiv@divisor& (0+255),f,b
 26239                           
 26240                           ; BSR set to: 0
 26241  0149C2  0100               	movlb	0	; () banked
 26242  0149C4  2F6A               	decfsz	___awdiv@counter& (0+255),f,b
 26243  0149C6  D7E1               	goto	u9490
 26244  0149C8                     l2338:
 26245                           
 26246                           ; BSR set to: 0
 26247                           
 26248                           ; BSR set to: 0
 26249                           
 26250                           ; BSR set to: 0
 26251  0149C8  0100               	movlb	0	; () banked
 26252  0149CA  516B               	movf	___awdiv@sign& (0+255),w,b
 26253  0149CC  0100               	movlb	0	; () banked
 26254  0149CE  B4D8               	btfsc	status,2,c
 26255  0149D0  D005               	goto	l2339
 26256                           
 26257                           ; BSR set to: 0
 26258  0149D2  0100               	movlb	0	; () banked
 26259  0149D4  6D6C               	negf	___awdiv@quotient& (0+255),b
 26260  0149D6  1F6D               	comf	(___awdiv@quotient+1)& (0+255),f,b
 26261  0149D8  B0D8               	btfsc	status,0,c
 26262  0149DA  2B6D               	incf	(___awdiv@quotient+1)& (0+255),f,b
 26263  0149DC                     l2339:
 26264                           
 26265                           ; BSR set to: 0
 26266                           
 26267                           ; BSR set to: 0
 26268  0149DC  C06C  F066         	movff	___awdiv@quotient,?___awdiv
 26269  0149E0  C06D  F067         	movff	___awdiv@quotient+1,?___awdiv+1
 26270  0149E4  0012               	return	
 26271  0149E6                     __end_of___awdiv:
 26272                           	opt stack 0
 26273                           tosu	equ	0xFFF
 26274                           tosh	equ	0xFFE
 26275                           tosl	equ	0xFFD
 26276                           pclath	equ	0xFFA
 26277                           tblptru	equ	0xFF8
 26278                           tblptrh	equ	0xFF7
 26279                           tblptrl	equ	0xFF6
 26280                           tablat	equ	0xFF5
 26281                           prodh	equ	0xFF4
 26282                           prodl	equ	0xFF3
 26283                           intcon	equ	0xFF2
 26284                           indf0	equ	0xFEF
 26285                           postinc0	equ	0xFEE
 26286                           fsr0h	equ	0xFEA
 26287                           fsr0l	equ	0xFE9
 26288                           wreg	equ	0xFE8
 26289                           indf1	equ	0xFE7
 26290                           postdec1	equ	0xFE5
 26291                           fsr1h	equ	0xFE2
 26292                           fsr1l	equ	0xFE1
 26293                           indf2	equ	0xFDF
 26294                           postinc2	equ	0xFDE
 26295                           postdec2	equ	0xFDD
 26296                           plusw2	equ	0xFDB
 26297                           fsr2h	equ	0xFDA
 26298                           fsr2l	equ	0xFD9
 26299                           status	equ	0xFD8
 26300                           
 26301 ;; *************** function _Console_IncrementCursor *****************
 26302 ;; Defined at:
 26303 ;;		line 243 in file "Library/Console.c"
 26304 ;; Parameters:    Size  Location     Type
 26305 ;;		None
 26306 ;; Auto vars:     Size  Location     Type
 26307 ;;		None
 26308 ;; Return value:  Size  Location     Type
 26309 ;;                  1    wreg      unsigned char 
 26310 ;; Registers used:
 26311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26312 ;; Tracked objects:
 26313 ;;		On entry : 0/0
 26314 ;;		On exit  : 0/0
 26315 ;;		Unchanged: 0/0
 26316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26320 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26321 ;;Total ram usage:        2 bytes
 26322 ;; Hardware stack levels used:    1
 26323 ;; Hardware stack levels required when called:    8
 26324 ;; This function calls:
 26325 ;;		_Console_FormFeed
 26326 ;;		_Console_NewLine
 26327 ;; This function is called by:
 26328 ;;		_Console_Tab
 26329 ;;		_Console_PrintChar
 26330 ;; This function uses a non-reentrant model
 26331 ;;
 26332                           
 26333                           	psect	text129
 26334  015F74                     __ptext129:
 26335                           	opt stack 0
 26336  015F74                     _Console_IncrementCursor:
 26337                           	opt stack 18
 26338                           
 26339                           ;Console.c: 246: lBufferX += 1;
 26340                           
 26341                           ; BSR set to: 0
 26342                           ;incstack = 0
 26343  015F74  0100               	movlb	0	; () banked
 26344  015F76  2BFB               	incf	_lBufferX& (0+255),f,b
 26345                           
 26346                           ; BSR set to: 0
 26347                           ;Console.c: 248: gCursor.x += 6;
 26348  015F78  0E06               	movlw	6
 26349  015F7A  2648               	addwf	_gCursor,f,c
 26350  015F7C  0E00               	movlw	0
 26351  015F7E  2249               	addwfc	_gCursor+1,f,c
 26352                           
 26353                           ; BSR set to: 0
 26354                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
 26355  015F80  0E06               	movlw	6
 26356  015F82  2448               	addwf	_gCursor,w,c
 26357  015F84  0100               	movlb	0	; () banked
 26358  015F86  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 26359  015F88  0E00               	movlw	0
 26360  015F8A  2049               	addwfc	_gCursor+1,w,c
 26361  015F8C  0100               	movlb	0	; () banked
 26362  015F8E  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 26363  015F90  0100               	movlb	0	; () banked
 26364  015F92  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 26365  015F94  D009               	goto	l1004
 26366  015F96  0100               	movlb	0	; () banked
 26367  015F98  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 26368  015F9A  E104               	bnz	u9400
 26369  015F9C  0E80               	movlw	128
 26370  015F9E  0100               	movlb	0	; () banked
 26371  015FA0  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 26372  015FA2  B0D8               	btfsc	status,0,c
 26373  015FA4                     u9400:
 26374                           
 26375                           ; BSR set to: 0
 26376                           ;Console.c: 250: Console_NewLine();
 26377  015FA4  EC59  F0A9         	call	_Console_NewLine	;wreg free
 26378  015FA8                     l1004:
 26379                           
 26380                           ;Console.c: 251: if (gCursor.y + 8>= 128)
 26381  015FA8  0E08               	movlw	8
 26382  015FAA  244A               	addwf	_gCursor+2,w,c
 26383  015FAC  0100               	movlb	0	; () banked
 26384  015FAE  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
 26385  015FB0  0E00               	movlw	0
 26386  015FB2  204B               	addwfc	_gCursor+3,w,c
 26387  015FB4  0100               	movlb	0	; () banked
 26388  015FB6  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
 26389  015FB8  0100               	movlb	0	; () banked
 26390  015FBA  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
 26391  015FBC  D00C               	goto	l1005
 26392  015FBE  0100               	movlb	0	; () banked
 26393  015FC0  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
 26394  015FC2  E105               	bnz	u9410
 26395  015FC4  0E80               	movlw	128
 26396  015FC6  0100               	movlb	0	; () banked
 26397  015FC8  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
 26398  015FCA  A0D8               	btfss	status,0,c
 26399  015FCC  D004               	goto	l1005
 26400  015FCE                     u9410:
 26401                           
 26402                           ; BSR set to: 0
 26403                           ;Console.c: 252: {
 26404                           ;Console.c: 253: Console_FormFeed();
 26405  015FCE  ECD2  F0AA         	call	_Console_FormFeed	;wreg free
 26406                           
 26407                           ;Console.c: 254: return 1;
 26408  015FD2  0E01               	movlw	1
 26409  015FD4  0012               	return	
 26410  015FD6                     l1005:
 26411                           
 26412                           ;Console.c: 255: }
 26413                           ;Console.c: 257: return 0;
 26414  015FD6  0E00               	movlw	0
 26415  015FD8  0012               	return	
 26416  015FDA                     __end_of_Console_IncrementCursor:
 26417                           	opt stack 0
 26418                           tosu	equ	0xFFF
 26419                           tosh	equ	0xFFE
 26420                           tosl	equ	0xFFD
 26421                           pclath	equ	0xFFA
 26422                           tblptru	equ	0xFF8
 26423                           tblptrh	equ	0xFF7
 26424                           tblptrl	equ	0xFF6
 26425                           tablat	equ	0xFF5
 26426                           prodh	equ	0xFF4
 26427                           prodl	equ	0xFF3
 26428                           intcon	equ	0xFF2
 26429                           indf0	equ	0xFEF
 26430                           postinc0	equ	0xFEE
 26431                           fsr0h	equ	0xFEA
 26432                           fsr0l	equ	0xFE9
 26433                           wreg	equ	0xFE8
 26434                           indf1	equ	0xFE7
 26435                           postdec1	equ	0xFE5
 26436                           fsr1h	equ	0xFE2
 26437                           fsr1l	equ	0xFE1
 26438                           indf2	equ	0xFDF
 26439                           postinc2	equ	0xFDE
 26440                           postdec2	equ	0xFDD
 26441                           plusw2	equ	0xFDB
 26442                           fsr2h	equ	0xFDA
 26443                           fsr2l	equ	0xFD9
 26444                           status	equ	0xFD8
 26445                           
 26446 ;; *************** function _Console_NewLine *****************
 26447 ;; Defined at:
 26448 ;;		line 175 in file "Library/Console.c"
 26449 ;; Parameters:    Size  Location     Type
 26450 ;;		None
 26451 ;; Auto vars:     Size  Location     Type
 26452 ;;		None
 26453 ;; Return value:  Size  Location     Type
 26454 ;;                  1    wreg      void 
 26455 ;; Registers used:
 26456 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26457 ;; Tracked objects:
 26458 ;;		On entry : 0/0
 26459 ;;		On exit  : 0/0
 26460 ;;		Unchanged: 0/0
 26461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26466 ;;Total ram usage:        2 bytes
 26467 ;; Hardware stack levels used:    1
 26468 ;; Hardware stack levels required when called:    7
 26469 ;; This function calls:
 26470 ;;		Nothing
 26471 ;; This function is called by:
 26472 ;;		_Console_IncrementCursor
 26473 ;;		_Console_PrintChar
 26474 ;; This function uses a non-reentrant model
 26475 ;;
 26476                           
 26477                           	psect	text130
 26478  0152B2                     __ptext130:
 26479                           	opt stack 0
 26480  0152B2                     _Console_NewLine:
 26481                           	opt stack 18
 26482                           
 26483                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
 26484                           
 26485                           ;incstack = 0
 26486  0152B2  D03D               	goto	l983
 26487  0152B4                     
 26488                           ;Console.c: 179: {
 26489                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
 26490  0152B4  0100               	movlb	0	; () banked
 26491  0152B6  51FA               	movf	_lBufferY& (0+255),w,b
 26492  0152B8  0D14               	mullw	20
 26493  0152BA  0E8F               	movlw	low _lBuffer
 26494  0152BC  0100               	movlb	0	; () banked
 26495  0152BE  6F60               	movwf	??_Console_NewLine& (0+255),b
 26496  0152C0  0E02               	movlw	high _lBuffer
 26497  0152C2  0100               	movlb	0	; () banked
 26498  0152C4  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 26499  0152C6  50F3               	movf	prodl,w,c
 26500  0152C8  0100               	movlb	0	; () banked
 26501  0152CA  2760               	addwf	??_Console_NewLine& (0+255),f,b
 26502  0152CC  50F4               	movf	prodh,w,c
 26503  0152CE  0100               	movlb	0	; () banked
 26504  0152D0  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 26505  0152D2  0100               	movlb	0	; () banked
 26506  0152D4  51FB               	movf	_lBufferX& (0+255),w,b
 26507  0152D6  0D01               	mullw	1
 26508  0152D8  50F3               	movf	prodl,w,c
 26509  0152DA  0100               	movlb	0	; () banked
 26510  0152DC  2560               	addwf	??_Console_NewLine& (0+255),w,b
 26511  0152DE  6ED9               	movwf	fsr2l,c
 26512  0152E0  50F4               	movf	prodh,w,c
 26513  0152E2  0100               	movlb	0	; () banked
 26514  0152E4  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 26515  0152E6  6EDA               	movwf	fsr2h,c
 26516  0152E8  50DF               	movf	indf2,w,c
 26517  0152EA  B4D8               	btfsc	status,2,c
 26518  0152EC  D01E               	goto	l985
 26519                           
 26520                           ; BSR set to: 0
 26521                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
 26522  0152EE  0E01               	movlw	1
 26523  0152F0  6E4D               	movwf	_change,c
 26524                           
 26525                           ; BSR set to: 0
 26526  0152F2  0100               	movlb	0	; () banked
 26527  0152F4  51FA               	movf	_lBufferY& (0+255),w,b
 26528  0152F6  0D14               	mullw	20
 26529  0152F8  0E8F               	movlw	low _lBuffer
 26530  0152FA  0100               	movlb	0	; () banked
 26531  0152FC  6F60               	movwf	??_Console_NewLine& (0+255),b
 26532  0152FE  0E02               	movlw	high _lBuffer
 26533  015300  0100               	movlb	0	; () banked
 26534  015302  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
 26535  015304  50F3               	movf	prodl,w,c
 26536  015306  0100               	movlb	0	; () banked
 26537  015308  2760               	addwf	??_Console_NewLine& (0+255),f,b
 26538  01530A  50F4               	movf	prodh,w,c
 26539  01530C  0100               	movlb	0	; () banked
 26540  01530E  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
 26541  015310  0100               	movlb	0	; () banked
 26542  015312  51FB               	movf	_lBufferX& (0+255),w,b
 26543  015314  0D01               	mullw	1
 26544  015316  50F3               	movf	prodl,w,c
 26545  015318  0100               	movlb	0	; () banked
 26546  01531A  2560               	addwf	??_Console_NewLine& (0+255),w,b
 26547  01531C  6ED9               	movwf	fsr2l,c
 26548  01531E  50F4               	movf	prodh,w,c
 26549  015320  0100               	movlb	0	; () banked
 26550  015322  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
 26551  015324  6EDA               	movwf	fsr2h,c
 26552  015326  0E80               	movlw	128
 26553  015328  6EDF               	movwf	indf2,c
 26554  01532A                     l985:
 26555                           
 26556                           ; BSR set to: 0
 26557                           ;Console.c: 182: lBufferX ++;
 26558                           
 26559                           ; BSR set to: 0
 26560  01532A  0100               	movlb	0	; () banked
 26561  01532C  2BFB               	incf	_lBufferX& (0+255),f,b
 26562  01532E                     l983:
 26563                           
 26564                           ; BSR set to: 0
 26565  01532E  0E13               	movlw	19
 26566  015330  0100               	movlb	0	; () banked
 26567  015332  65FB               	cpfsgt	_lBufferX& (0+255),b
 26568  015334  D7BF               	goto	l984
 26569                           
 26570                           ; BSR set to: 0
 26571                           ;Console.c: 183: }
 26572                           ;Console.c: 185: lBufferX = 0;
 26573                           
 26574                           ; BSR set to: 0
 26575  015336  0E00               	movlw	0
 26576  015338  0100               	movlb	0	; () banked
 26577  01533A  6FFB               	movwf	_lBufferX& (0+255),b
 26578                           
 26579                           ; BSR set to: 0
 26580                           ;Console.c: 186: lBufferY ++;
 26581  01533C  0100               	movlb	0	; () banked
 26582  01533E  2BFA               	incf	_lBufferY& (0+255),f,b
 26583                           
 26584                           ; BSR set to: 0
 26585                           ;Console.c: 188: gCursor.y += 8;
 26586  015340  0E08               	movlw	8
 26587  015342  264A               	addwf	_gCursor+2,f,c
 26588  015344  0E00               	movlw	0
 26589  015346  224B               	addwfc	_gCursor+3,f,c
 26590                           
 26591                           ; BSR set to: 0
 26592                           ;Console.c: 189: gCursor.x = 6;
 26593  015348  0E00               	movlw	0
 26594  01534A  6E49               	movwf	_gCursor+1,c
 26595  01534C  0E06               	movlw	6
 26596  01534E  6E48               	movwf	_gCursor,c
 26597                           
 26598                           ; BSR set to: 0
 26599  015350  0012               	return		;funcret
 26600  015352                     __end_of_Console_NewLine:
 26601                           	opt stack 0
 26602                           tosu	equ	0xFFF
 26603                           tosh	equ	0xFFE
 26604                           tosl	equ	0xFFD
 26605                           pclath	equ	0xFFA
 26606                           tblptru	equ	0xFF8
 26607                           tblptrh	equ	0xFF7
 26608                           tblptrl	equ	0xFF6
 26609                           tablat	equ	0xFF5
 26610                           prodh	equ	0xFF4
 26611                           prodl	equ	0xFF3
 26612                           intcon	equ	0xFF2
 26613                           indf0	equ	0xFEF
 26614                           postinc0	equ	0xFEE
 26615                           fsr0h	equ	0xFEA
 26616                           fsr0l	equ	0xFE9
 26617                           wreg	equ	0xFE8
 26618                           indf1	equ	0xFE7
 26619                           postdec1	equ	0xFE5
 26620                           fsr1h	equ	0xFE2
 26621                           fsr1l	equ	0xFE1
 26622                           indf2	equ	0xFDF
 26623                           postinc2	equ	0xFDE
 26624                           postdec2	equ	0xFDD
 26625                           plusw2	equ	0xFDB
 26626                           fsr2h	equ	0xFDA
 26627                           fsr2l	equ	0xFD9
 26628                           status	equ	0xFD8
 26629                           
 26630 ;; *************** function _Console_FormFeed *****************
 26631 ;; Defined at:
 26632 ;;		line 192 in file "Library/Console.c"
 26633 ;; Parameters:    Size  Location     Type
 26634 ;;		None
 26635 ;; Auto vars:     Size  Location     Type
 26636 ;;  y               1    3[BANK0 ] unsigned char 
 26637 ;;  x               1    2[BANK0 ] unsigned char 
 26638 ;; Return value:  Size  Location     Type
 26639 ;;                  1    wreg      void 
 26640 ;; Registers used:
 26641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26642 ;; Tracked objects:
 26643 ;;		On entry : 0/0
 26644 ;;		On exit  : 0/0
 26645 ;;		Unchanged: 0/0
 26646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26648 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26650 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26651 ;;Total ram usage:        4 bytes
 26652 ;; Hardware stack levels used:    1
 26653 ;; Hardware stack levels required when called:    7
 26654 ;; This function calls:
 26655 ;;		Nothing
 26656 ;; This function is called by:
 26657 ;;		_Console_IncrementCursor
 26658 ;;		_Console_PrintChar
 26659 ;; This function uses a non-reentrant model
 26660 ;;
 26661                           
 26662                           	psect	text131
 26663  0155A4                     __ptext131:
 26664                           	opt stack 0
 26665  0155A4                     _Console_FormFeed:
 26666                           	opt stack 18
 26667                           
 26668                           ;Console.c: 195: lBufferX = 0;
 26669                           
 26670                           ; BSR set to: 0
 26671                           ;incstack = 0
 26672  0155A4  0E00               	movlw	0
 26673  0155A6  0100               	movlb	0	; () banked
 26674  0155A8  6FFB               	movwf	_lBufferX& (0+255),b
 26675                           
 26676                           ;Console.c: 196: lBufferY = 0;
 26677  0155AA  0E00               	movlw	0
 26678  0155AC  0100               	movlb	0	; () banked
 26679  0155AE  6FFA               	movwf	_lBufferY& (0+255),b
 26680                           
 26681                           ;Console.c: 197: UINT8 x, y;
 26682                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26683  0155B0  0E00               	movlw	0
 26684  0155B2  0100               	movlb	0	; () banked
 26685  0155B4  6F63               	movwf	Console_FormFeed@y& (0+255),b
 26686  0155B6                     l12125:
 26687                           
 26688                           ; BSR set to: 0
 26689  0155B6  0E0E               	movlw	14
 26690  0155B8  0100               	movlb	0	; () banked
 26691  0155BA  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
 26692  0155BC  D001               	goto	l990
 26693  0155BE  D02C               	goto	u9250
 26694  0155C0                     l990:
 26695                           
 26696                           ; BSR set to: 0
 26697                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26698                           
 26699                           ; BSR set to: 0
 26700  0155C0  0E00               	movlw	0
 26701  0155C2  0100               	movlb	0	; () banked
 26702  0155C4  6F62               	movwf	Console_FormFeed@x& (0+255),b
 26703  0155C6                     l12131:
 26704                           
 26705                           ; BSR set to: 0
 26706  0155C6  0E13               	movlw	19
 26707  0155C8  0100               	movlb	0	; () banked
 26708  0155CA  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
 26709  0155CC  D001               	goto	l992
 26710  0155CE  D021               	goto	u9240
 26711  0155D0                     l992:
 26712                           
 26713                           ; BSR set to: 0
 26714                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
 26715                           
 26716                           ; BSR set to: 0
 26717  0155D0  0E01               	movlw	1
 26718  0155D2  6E4D               	movwf	_change,c
 26719                           
 26720                           ; BSR set to: 0
 26721  0155D4  0100               	movlb	0	; () banked
 26722  0155D6  5163               	movf	Console_FormFeed@y& (0+255),w,b
 26723  0155D8  0D14               	mullw	20
 26724  0155DA  0E8F               	movlw	low _lBuffer
 26725  0155DC  0100               	movlb	0	; () banked
 26726  0155DE  6F60               	movwf	??_Console_FormFeed& (0+255),b
 26727  0155E0  0E02               	movlw	high _lBuffer
 26728  0155E2  0100               	movlb	0	; () banked
 26729  0155E4  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
 26730  0155E6  50F3               	movf	prodl,w,c
 26731  0155E8  0100               	movlb	0	; () banked
 26732  0155EA  2760               	addwf	??_Console_FormFeed& (0+255),f,b
 26733  0155EC  50F4               	movf	prodh,w,c
 26734  0155EE  0100               	movlb	0	; () banked
 26735  0155F0  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
 26736  0155F2  0100               	movlb	0	; () banked
 26737  0155F4  5162               	movf	Console_FormFeed@x& (0+255),w,b
 26738  0155F6  0D01               	mullw	1
 26739  0155F8  50F3               	movf	prodl,w,c
 26740  0155FA  0100               	movlb	0	; () banked
 26741  0155FC  2560               	addwf	??_Console_FormFeed& (0+255),w,b
 26742  0155FE  6ED9               	movwf	fsr2l,c
 26743  015600  50F4               	movf	prodh,w,c
 26744  015602  0100               	movlb	0	; () banked
 26745  015604  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
 26746  015606  6EDA               	movwf	fsr2h,c
 26747  015608  0E80               	movlw	128
 26748  01560A  6EDF               	movwf	indf2,c
 26749                           
 26750                           ; BSR set to: 0
 26751  01560C  0100               	movlb	0	; () banked
 26752  01560E  2B62               	incf	Console_FormFeed@x& (0+255),f,b
 26753  015610  D7DA               	goto	l12131
 26754  015612                     u9240:
 26755                           
 26756                           ; BSR set to: 0
 26757                           
 26758                           ; BSR set to: 0
 26759  015612  0100               	movlb	0	; () banked
 26760  015614  2B63               	incf	Console_FormFeed@y& (0+255),f,b
 26761  015616  D7CF               	goto	l12125
 26762  015618                     u9250:
 26763                           
 26764                           ; BSR set to: 0
 26765                           ;Console.c: 204: clearall = 1;
 26766                           
 26767                           ; BSR set to: 0
 26768  015618  0E01               	movlw	1
 26769  01561A  0100               	movlb	0	; () banked
 26770  01561C  6FFC               	movwf	_clearall& (0+255),b
 26771                           
 26772                           ;Console.c: 205: gCursor.x = 6;
 26773  01561E  0E00               	movlw	0
 26774  015620  6E49               	movwf	_gCursor+1,c
 26775  015622  0E06               	movlw	6
 26776  015624  6E48               	movwf	_gCursor,c
 26777                           
 26778                           ;Console.c: 206: gCursor.y = 6;
 26779  015626  0E00               	movlw	0
 26780  015628  6E4B               	movwf	_gCursor+3,c
 26781  01562A  0E06               	movlw	6
 26782  01562C  6E4A               	movwf	_gCursor+2,c
 26783                           
 26784                           ; BSR set to: 0
 26785  01562E  0012               	return		;funcret
 26786  015630                     __end_of_Console_FormFeed:
 26787                           	opt stack 0
 26788                           tosu	equ	0xFFF
 26789                           tosh	equ	0xFFE
 26790                           tosl	equ	0xFFD
 26791                           pclath	equ	0xFFA
 26792                           tblptru	equ	0xFF8
 26793                           tblptrh	equ	0xFF7
 26794                           tblptrl	equ	0xFF6
 26795                           tablat	equ	0xFF5
 26796                           prodh	equ	0xFF4
 26797                           prodl	equ	0xFF3
 26798                           intcon	equ	0xFF2
 26799                           indf0	equ	0xFEF
 26800                           postinc0	equ	0xFEE
 26801                           fsr0h	equ	0xFEA
 26802                           fsr0l	equ	0xFE9
 26803                           wreg	equ	0xFE8
 26804                           indf1	equ	0xFE7
 26805                           postdec1	equ	0xFE5
 26806                           fsr1h	equ	0xFE2
 26807                           fsr1l	equ	0xFE1
 26808                           indf2	equ	0xFDF
 26809                           postinc2	equ	0xFDE
 26810                           postdec2	equ	0xFDD
 26811                           plusw2	equ	0xFDB
 26812                           fsr2h	equ	0xFDA
 26813                           fsr2l	equ	0xFD9
 26814                           status	equ	0xFD8
 26815                           
 26816 ;; *************** function _Console_ResetCursor *****************
 26817 ;; Defined at:
 26818 ;;		line 297 in file "Library/Console.c"
 26819 ;; Parameters:    Size  Location     Type
 26820 ;;		None
 26821 ;; Auto vars:     Size  Location     Type
 26822 ;;		None
 26823 ;; Return value:  Size  Location     Type
 26824 ;;                  1    wreg      void 
 26825 ;; Registers used:
 26826 ;;		wreg, status,2
 26827 ;; Tracked objects:
 26828 ;;		On entry : 0/0
 26829 ;;		On exit  : 0/0
 26830 ;;		Unchanged: 0/0
 26831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26836 ;;Total ram usage:        0 bytes
 26837 ;; Hardware stack levels used:    1
 26838 ;; Hardware stack levels required when called:    7
 26839 ;; This function calls:
 26840 ;;		Nothing
 26841 ;; This function is called by:
 26842 ;;		_Console_PrintChar
 26843 ;; This function uses a non-reentrant model
 26844 ;;
 26845                           
 26846                           	psect	text132
 26847  016C60                     __ptext132:
 26848                           	opt stack 0
 26849  016C60                     _Console_ResetCursor:
 26850                           	opt stack 20
 26851                           
 26852                           ;Console.c: 299: gCursor.x = 6;
 26853                           
 26854                           ; BSR set to: 0
 26855                           ;incstack = 0
 26856  016C60  0E00               	movlw	0
 26857  016C62  6E49               	movwf	_gCursor+1,c
 26858  016C64  0E06               	movlw	6
 26859  016C66  6E48               	movwf	_gCursor,c
 26860                           
 26861                           ;Console.c: 300: gCursor.y = 6;
 26862  016C68  0E00               	movlw	0
 26863  016C6A  6E4B               	movwf	_gCursor+3,c
 26864  016C6C  0E06               	movlw	6
 26865  016C6E  6E4A               	movwf	_gCursor+2,c
 26866                           
 26867                           ;Console.c: 303: lBufferX = 0;
 26868  016C70  0E00               	movlw	0
 26869  016C72  0100               	movlb	0	; () banked
 26870  016C74  6FFB               	movwf	_lBufferX& (0+255),b
 26871                           
 26872                           ;Console.c: 304: lBufferY = 0;
 26873  016C76  0E00               	movlw	0
 26874  016C78  0100               	movlb	0	; () banked
 26875  016C7A  6FFA               	movwf	_lBufferY& (0+255),b
 26876                           
 26877                           ; BSR set to: 0
 26878  016C7C  0012               	return		;funcret
 26879  016C7E                     __end_of_Console_ResetCursor:
 26880                           	opt stack 0
 26881                           tosu	equ	0xFFF
 26882                           tosh	equ	0xFFE
 26883                           tosl	equ	0xFFD
 26884                           pclath	equ	0xFFA
 26885                           tblptru	equ	0xFF8
 26886                           tblptrh	equ	0xFF7
 26887                           tblptrl	equ	0xFF6
 26888                           tablat	equ	0xFF5
 26889                           prodh	equ	0xFF4
 26890                           prodl	equ	0xFF3
 26891                           intcon	equ	0xFF2
 26892                           indf0	equ	0xFEF
 26893                           postinc0	equ	0xFEE
 26894                           fsr0h	equ	0xFEA
 26895                           fsr0l	equ	0xFE9
 26896                           wreg	equ	0xFE8
 26897                           indf1	equ	0xFE7
 26898                           postdec1	equ	0xFE5
 26899                           fsr1h	equ	0xFE2
 26900                           fsr1l	equ	0xFE1
 26901                           indf2	equ	0xFDF
 26902                           postinc2	equ	0xFDE
 26903                           postdec2	equ	0xFDD
 26904                           plusw2	equ	0xFDB
 26905                           fsr2h	equ	0xFDA
 26906                           fsr2l	equ	0xFD9
 26907                           status	equ	0xFD8
 26908                           
 26909 ;; *************** function _Console_Backspace *****************
 26910 ;; Defined at:
 26911 ;;		line 209 in file "Library/Console.c"
 26912 ;; Parameters:    Size  Location     Type
 26913 ;;		None
 26914 ;; Auto vars:     Size  Location     Type
 26915 ;;		None
 26916 ;; Return value:  Size  Location     Type
 26917 ;;                  1    wreg      void 
 26918 ;; Registers used:
 26919 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26920 ;; Tracked objects:
 26921 ;;		On entry : 0/0
 26922 ;;		On exit  : 0/0
 26923 ;;		Unchanged: 0/0
 26924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26929 ;;Total ram usage:        0 bytes
 26930 ;; Hardware stack levels used:    1
 26931 ;; Hardware stack levels required when called:    8
 26932 ;; This function calls:
 26933 ;;		_Console_ClearCursor
 26934 ;; This function is called by:
 26935 ;;		_Console_PrintChar
 26936 ;; This function uses a non-reentrant model
 26937 ;;
 26938                           
 26939                           	psect	text133
 26940  01615E                     __ptext133:
 26941                           	opt stack 0
 26942  01615E                     _Console_Backspace:
 26943                           	opt stack 19
 26944                           
 26945                           ;Console.c: 211: if (lBufferX > 0)
 26946                           
 26947                           ; BSR set to: 0
 26948                           ;incstack = 0
 26949  01615E  0100               	movlb	0	; () banked
 26950  016160  51FB               	movf	_lBufferX& (0+255),w,b
 26951  016162  B4D8               	btfsc	status,2,c
 26952  016164  D007               	goto	l997
 26953                           
 26954                           ; BSR set to: 0
 26955                           ;Console.c: 212: {
 26956                           ;Console.c: 213: gCursor.x -= 6;
 26957  016166  0EFA               	movlw	250
 26958  016168  2648               	addwf	_gCursor,f,c
 26959  01616A  0EFF               	movlw	255
 26960  01616C  2249               	addwfc	_gCursor+1,f,c
 26961                           
 26962                           ; BSR set to: 0
 26963                           ;Console.c: 216: lBufferX --;
 26964  01616E  0100               	movlb	0	; () banked
 26965  016170  07FB               	decf	_lBufferX& (0+255),f,b
 26966                           
 26967                           ;Console.c: 218: }
 26968  016172  D020               	goto	l1000
 26969  016174                     l997:
 26970                           
 26971                           ; BSR set to: 0
 26972                           ;Console.c: 219: else if (lBufferY > 0)
 26973                           
 26974                           ; BSR set to: 0
 26975  016174  0100               	movlb	0	; () banked
 26976  016176  51FA               	movf	_lBufferY& (0+255),w,b
 26977  016178  B4D8               	btfsc	status,2,c
 26978  01617A  D00E               	goto	l999
 26979                           
 26980                           ; BSR set to: 0
 26981                           ;Console.c: 220: {
 26982                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
 26983  01617C  0E00               	movlw	0
 26984  01617E  6E49               	movwf	_gCursor+1,c
 26985  016180  0E72               	movlw	114
 26986  016182  6E48               	movwf	_gCursor,c
 26987                           
 26988                           ; BSR set to: 0
 26989                           ;Console.c: 222: gCursor.y -= 8;
 26990  016184  0EF8               	movlw	248
 26991  016186  264A               	addwf	_gCursor+2,f,c
 26992  016188  0EFF               	movlw	255
 26993  01618A  224B               	addwfc	_gCursor+3,f,c
 26994                           
 26995                           ; BSR set to: 0
 26996                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
 26997  01618C  0E13               	movlw	19
 26998  01618E  0100               	movlb	0	; () banked
 26999  016190  6FFB               	movwf	_lBufferX& (0+255),b
 27000                           
 27001                           ; BSR set to: 0
 27002                           ;Console.c: 226: lBufferY --;
 27003  016192  0100               	movlb	0	; () banked
 27004  016194  07FA               	decf	_lBufferY& (0+255),f,b
 27005                           
 27006                           ;Console.c: 228: }
 27007  016196  D00E               	goto	l1000
 27008  016198                     l999:
 27009                           
 27010                           ; BSR set to: 0
 27011                           ;Console.c: 229: else
 27012                           ;Console.c: 230: {
 27013                           ;Console.c: 231: gCursor.x = 6;
 27014                           
 27015                           ; BSR set to: 0
 27016  016198  0E00               	movlw	0
 27017  01619A  6E49               	movwf	_gCursor+1,c
 27018  01619C  0E06               	movlw	6
 27019  01619E  6E48               	movwf	_gCursor,c
 27020                           
 27021                           ;Console.c: 232: gCursor.y = 6;
 27022  0161A0  0E00               	movlw	0
 27023  0161A2  6E4B               	movwf	_gCursor+3,c
 27024  0161A4  0E06               	movlw	6
 27025  0161A6  6E4A               	movwf	_gCursor+2,c
 27026                           
 27027                           ;Console.c: 235: lBufferX = 0;
 27028  0161A8  0E00               	movlw	0
 27029  0161AA  0100               	movlb	0	; () banked
 27030  0161AC  6FFB               	movwf	_lBufferX& (0+255),b
 27031                           
 27032                           ;Console.c: 236: lBufferY = 0;
 27033  0161AE  0E00               	movlw	0
 27034  0161B0  0100               	movlb	0	; () banked
 27035  0161B2  6FFA               	movwf	_lBufferY& (0+255),b
 27036  0161B4                     l1000:
 27037                           
 27038                           ; BSR set to: 0
 27039                           ;Console.c: 238: }
 27040                           ;Console.c: 240: Console_ClearCursor();
 27041                           
 27042                           ; BSR set to: 0
 27043                           
 27044                           ; BSR set to: 0
 27045  0161B4  ECB2  F0B3         	call	_Console_ClearCursor	;wreg free
 27046  0161B8  0012               	return		;funcret
 27047  0161BA                     __end_of_Console_Backspace:
 27048                           	opt stack 0
 27049                           tosu	equ	0xFFF
 27050                           tosh	equ	0xFFE
 27051                           tosl	equ	0xFFD
 27052                           pclath	equ	0xFFA
 27053                           tblptru	equ	0xFF8
 27054                           tblptrh	equ	0xFF7
 27055                           tblptrl	equ	0xFF6
 27056                           tablat	equ	0xFF5
 27057                           prodh	equ	0xFF4
 27058                           prodl	equ	0xFF3
 27059                           intcon	equ	0xFF2
 27060                           indf0	equ	0xFEF
 27061                           postinc0	equ	0xFEE
 27062                           fsr0h	equ	0xFEA
 27063                           fsr0l	equ	0xFE9
 27064                           wreg	equ	0xFE8
 27065                           indf1	equ	0xFE7
 27066                           postdec1	equ	0xFE5
 27067                           fsr1h	equ	0xFE2
 27068                           fsr1l	equ	0xFE1
 27069                           indf2	equ	0xFDF
 27070                           postinc2	equ	0xFDE
 27071                           postdec2	equ	0xFDD
 27072                           plusw2	equ	0xFDB
 27073                           fsr2h	equ	0xFDA
 27074                           fsr2l	equ	0xFD9
 27075                           status	equ	0xFD8
 27076                           
 27077 ;; *************** function _Console_ClearCursor *****************
 27078 ;; Defined at:
 27079 ;;		line 308 in file "Library/Console.c"
 27080 ;; Parameters:    Size  Location     Type
 27081 ;;		None
 27082 ;; Auto vars:     Size  Location     Type
 27083 ;;		None
 27084 ;; Return value:  Size  Location     Type
 27085 ;;                  1    wreg      void 
 27086 ;; Registers used:
 27087 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 27088 ;; Tracked objects:
 27089 ;;		On entry : 0/0
 27090 ;;		On exit  : 0/0
 27091 ;;		Unchanged: 0/0
 27092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27095 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27096 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27097 ;;Total ram usage:        2 bytes
 27098 ;; Hardware stack levels used:    1
 27099 ;; Hardware stack levels required when called:    7
 27100 ;; This function calls:
 27101 ;;		Nothing
 27102 ;; This function is called by:
 27103 ;;		_Console_Backspace
 27104 ;;		_Console_Tab
 27105 ;; This function uses a non-reentrant model
 27106 ;;
 27107                           
 27108                           	psect	text134
 27109  016764                     __ptext134:
 27110                           	opt stack 0
 27111  016764                     _Console_ClearCursor:
 27112                           	opt stack 19
 27113                           
 27114                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
 27115                           
 27116                           ;incstack = 0
 27117  016764  0E01               	movlw	1
 27118  016766  6E4D               	movwf	_change,c
 27119  016768  0100               	movlb	0	; () banked
 27120  01676A  51FA               	movf	_lBufferY& (0+255),w,b
 27121  01676C  0D14               	mullw	20
 27122  01676E  0E8F               	movlw	low _lBuffer
 27123  016770  0100               	movlb	0	; () banked
 27124  016772  6F60               	movwf	??_Console_ClearCursor& (0+255),b
 27125  016774  0E02               	movlw	high _lBuffer
 27126  016776  0100               	movlb	0	; () banked
 27127  016778  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
 27128  01677A  50F3               	movf	prodl,w,c
 27129  01677C  0100               	movlb	0	; () banked
 27130  01677E  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
 27131  016780  50F4               	movf	prodh,w,c
 27132  016782  0100               	movlb	0	; () banked
 27133  016784  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
 27134  016786  0100               	movlb	0	; () banked
 27135  016788  51FB               	movf	_lBufferX& (0+255),w,b
 27136  01678A  0D01               	mullw	1
 27137  01678C  50F3               	movf	prodl,w,c
 27138  01678E  0100               	movlb	0	; () banked
 27139  016790  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
 27140  016792  6ED9               	movwf	fsr2l,c
 27141  016794  50F4               	movf	prodh,w,c
 27142  016796  0100               	movlb	0	; () banked
 27143  016798  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
 27144  01679A  6EDA               	movwf	fsr2h,c
 27145  01679C  0E80               	movlw	128
 27146  01679E  6EDF               	movwf	indf2,c
 27147                           
 27148                           ; BSR set to: 0
 27149  0167A0  0012               	return		;funcret
 27150  0167A2                     __end_of_Console_ClearCursor:
 27151                           	opt stack 0
 27152                           tosu	equ	0xFFF
 27153                           tosh	equ	0xFFE
 27154                           tosl	equ	0xFFD
 27155                           pclath	equ	0xFFA
 27156                           tblptru	equ	0xFF8
 27157                           tblptrh	equ	0xFF7
 27158                           tblptrl	equ	0xFF6
 27159                           tablat	equ	0xFF5
 27160                           prodh	equ	0xFF4
 27161                           prodl	equ	0xFF3
 27162                           intcon	equ	0xFF2
 27163                           indf0	equ	0xFEF
 27164                           postinc0	equ	0xFEE
 27165                           fsr0h	equ	0xFEA
 27166                           fsr0l	equ	0xFE9
 27167                           wreg	equ	0xFE8
 27168                           indf1	equ	0xFE7
 27169                           postdec1	equ	0xFE5
 27170                           fsr1h	equ	0xFE2
 27171                           fsr1l	equ	0xFE1
 27172                           indf2	equ	0xFDF
 27173                           postinc2	equ	0xFDE
 27174                           postdec2	equ	0xFDD
 27175                           plusw2	equ	0xFDB
 27176                           fsr2h	equ	0xFDA
 27177                           fsr2l	equ	0xFD9
 27178                           status	equ	0xFD8
 27179                           
 27180 ;; *************** function ___lwmod *****************
 27181 ;; Defined at:
 27182 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 27183 ;; Parameters:    Size  Location     Type
 27184 ;;  dividend        2    7[BANK0 ] unsigned int 
 27185 ;;  divisor         2    9[BANK0 ] unsigned int 
 27186 ;; Auto vars:     Size  Location     Type
 27187 ;;  counter         1   11[BANK0 ] unsigned char 
 27188 ;; Return value:  Size  Location     Type
 27189 ;;                  2    7[BANK0 ] unsigned int 
 27190 ;; Registers used:
 27191 ;;		wreg, status,2, status,0
 27192 ;; Tracked objects:
 27193 ;;		On entry : 0/0
 27194 ;;		On exit  : 0/0
 27195 ;;		Unchanged: 0/0
 27196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27197 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27198 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27200 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27201 ;;Total ram usage:        5 bytes
 27202 ;; Hardware stack levels used:    1
 27203 ;; Hardware stack levels required when called:    7
 27204 ;; This function calls:
 27205 ;;		Nothing
 27206 ;; This function is called by:
 27207 ;;		_itos
 27208 ;;		_printf
 27209 ;; This function uses a non-reentrant model
 27210 ;;
 27211                           
 27212                           	psect	text135
 27213  0160A0                     __ptext135:
 27214                           	opt stack 0
 27215  0160A0                     ___lwmod:
 27216                           	opt stack 22
 27217                           
 27218                           ; BSR set to: 0
 27219                           ;incstack = 0
 27220  0160A0  0100               	movlb	0	; () banked
 27221  0160A2  5169               	movf	___lwmod@divisor& (0+255),w,b
 27222  0160A4  0100               	movlb	0	; () banked
 27223  0160A6  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27224  0160A8  B4D8               	btfsc	status,2,c
 27225  0160AA  D026               	goto	l2581
 27226                           
 27227                           ; BSR set to: 0
 27228  0160AC  0E01               	movlw	1
 27229  0160AE  0100               	movlb	0	; () banked
 27230  0160B0  6F6B               	movwf	___lwmod@counter& (0+255),b
 27231  0160B2  D006               	goto	l2576
 27232  0160B4                     
 27233                           ; BSR set to: 0
 27234                           
 27235                           ; BSR set to: 0
 27236  0160B4  0100               	movlb	0	; () banked
 27237  0160B6  90D8               	bcf	status,0,c
 27238  0160B8  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 27239  0160BA  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27240  0160BC  0100               	movlb	0	; () banked
 27241  0160BE  2B6B               	incf	___lwmod@counter& (0+255),f,b
 27242  0160C0                     l2576:
 27243                           
 27244                           ; BSR set to: 0
 27245                           
 27246                           ; BSR set to: 0
 27247  0160C0  0100               	movlb	0	; () banked
 27248  0160C2  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27249  0160C4  D7F7               	goto	l2577
 27250  0160C6                     u9300:
 27251                           
 27252                           ; BSR set to: 0
 27253                           
 27254                           ; BSR set to: 0
 27255                           
 27256                           ; BSR set to: 0
 27257  0160C6  0100               	movlb	0	; () banked
 27258  0160C8  5169               	movf	___lwmod@divisor& (0+255),w,b
 27259  0160CA  0100               	movlb	0	; () banked
 27260  0160CC  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 27261  0160CE  0100               	movlb	0	; () banked
 27262  0160D0  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27263  0160D2  0100               	movlb	0	; () banked
 27264  0160D4  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27265  0160D6  A0D8               	btfss	status,0,c
 27266  0160D8  D008               	goto	l2580
 27267                           
 27268                           ; BSR set to: 0
 27269  0160DA  0100               	movlb	0	; () banked
 27270  0160DC  5169               	movf	___lwmod@divisor& (0+255),w,b
 27271  0160DE  0100               	movlb	0	; () banked
 27272  0160E0  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 27273  0160E2  0100               	movlb	0	; () banked
 27274  0160E4  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27275  0160E6  0100               	movlb	0	; () banked
 27276  0160E8  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27277  0160EA                     l2580:
 27278                           
 27279                           ; BSR set to: 0
 27280                           
 27281                           ; BSR set to: 0
 27282  0160EA  0100               	movlb	0	; () banked
 27283  0160EC  90D8               	bcf	status,0,c
 27284  0160EE  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27285  0160F0  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 27286                           
 27287                           ; BSR set to: 0
 27288  0160F2  0100               	movlb	0	; () banked
 27289  0160F4  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 27290  0160F6  D7E7               	goto	u9300
 27291  0160F8                     l2581:
 27292                           
 27293                           ; BSR set to: 0
 27294                           
 27295                           ; BSR set to: 0
 27296  0160F8  C067  F067         	movff	___lwmod@dividend,?___lwmod
 27297  0160FC  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 27298                           
 27299                           ; BSR set to: 0
 27300  016100  0012               	return		;funcret
 27301  016102                     __end_of___lwmod:
 27302                           	opt stack 0
 27303                           tosu	equ	0xFFF
 27304                           tosh	equ	0xFFE
 27305                           tosl	equ	0xFFD
 27306                           pclath	equ	0xFFA
 27307                           tblptru	equ	0xFF8
 27308                           tblptrh	equ	0xFF7
 27309                           tblptrl	equ	0xFF6
 27310                           tablat	equ	0xFF5
 27311                           prodh	equ	0xFF4
 27312                           prodl	equ	0xFF3
 27313                           intcon	equ	0xFF2
 27314                           indf0	equ	0xFEF
 27315                           postinc0	equ	0xFEE
 27316                           fsr0h	equ	0xFEA
 27317                           fsr0l	equ	0xFE9
 27318                           wreg	equ	0xFE8
 27319                           indf1	equ	0xFE7
 27320                           postdec1	equ	0xFE5
 27321                           fsr1h	equ	0xFE2
 27322                           fsr1l	equ	0xFE1
 27323                           indf2	equ	0xFDF
 27324                           postinc2	equ	0xFDE
 27325                           postdec2	equ	0xFDD
 27326                           plusw2	equ	0xFDB
 27327                           fsr2h	equ	0xFDA
 27328                           fsr2l	equ	0xFD9
 27329                           status	equ	0xFD8
 27330                           
 27331 ;; *************** function ___lwdiv *****************
 27332 ;; Defined at:
 27333 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27334 ;; Parameters:    Size  Location     Type
 27335 ;;  dividend        2    0[BANK0 ] unsigned int 
 27336 ;;  divisor         2    2[BANK0 ] unsigned int 
 27337 ;; Auto vars:     Size  Location     Type
 27338 ;;  quotient        2    5[BANK0 ] unsigned int 
 27339 ;;  counter         1    4[BANK0 ] unsigned char 
 27340 ;; Return value:  Size  Location     Type
 27341 ;;                  2    0[BANK0 ] unsigned int 
 27342 ;; Registers used:
 27343 ;;		wreg, status,2, status,0
 27344 ;; Tracked objects:
 27345 ;;		On entry : 0/0
 27346 ;;		On exit  : 0/0
 27347 ;;		Unchanged: 0/0
 27348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27349 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27350 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27352 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27353 ;;Total ram usage:        7 bytes
 27354 ;; Hardware stack levels used:    1
 27355 ;; Hardware stack levels required when called:    7
 27356 ;; This function calls:
 27357 ;;		Nothing
 27358 ;; This function is called by:
 27359 ;;		_itos
 27360 ;;		_printf
 27361 ;; This function uses a non-reentrant model
 27362 ;;
 27363                           
 27364                           	psect	text136
 27365  015A32                     __ptext136:
 27366                           	opt stack 0
 27367  015A32                     ___lwdiv:
 27368                           	opt stack 22
 27369                           
 27370                           ; BSR set to: 0
 27371                           ;incstack = 0
 27372  015A32  0E00               	movlw	0
 27373  015A34  0100               	movlb	0	; () banked
 27374  015A36  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27375  015A38  0E00               	movlw	0
 27376  015A3A  6F65               	movwf	___lwdiv@quotient& (0+255),b
 27377                           
 27378                           ; BSR set to: 0
 27379  015A3C  0100               	movlb	0	; () banked
 27380  015A3E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27381  015A40  0100               	movlb	0	; () banked
 27382  015A42  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27383  015A44  B4D8               	btfsc	status,2,c
 27384  015A46  D02C               	goto	l2571
 27385                           
 27386                           ; BSR set to: 0
 27387  015A48  0E01               	movlw	1
 27388  015A4A  0100               	movlb	0	; () banked
 27389  015A4C  6F64               	movwf	___lwdiv@counter& (0+255),b
 27390  015A4E  D006               	goto	l2566
 27391  015A50                     
 27392                           ; BSR set to: 0
 27393                           
 27394                           ; BSR set to: 0
 27395  015A50  0100               	movlb	0	; () banked
 27396  015A52  90D8               	bcf	status,0,c
 27397  015A54  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 27398  015A56  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27399  015A58  0100               	movlb	0	; () banked
 27400  015A5A  2B64               	incf	___lwdiv@counter& (0+255),f,b
 27401  015A5C                     l2566:
 27402                           
 27403                           ; BSR set to: 0
 27404                           
 27405                           ; BSR set to: 0
 27406  015A5C  0100               	movlb	0	; () banked
 27407  015A5E  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27408  015A60  D7F7               	goto	l2567
 27409  015A62                     u9270:
 27410                           
 27411                           ; BSR set to: 0
 27412                           
 27413                           ; BSR set to: 0
 27414                           
 27415                           ; BSR set to: 0
 27416  015A62  0100               	movlb	0	; () banked
 27417  015A64  90D8               	bcf	status,0,c
 27418  015A66  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 27419  015A68  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27420                           
 27421                           ; BSR set to: 0
 27422  015A6A  0100               	movlb	0	; () banked
 27423  015A6C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27424  015A6E  0100               	movlb	0	; () banked
 27425  015A70  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 27426  015A72  0100               	movlb	0	; () banked
 27427  015A74  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27428  015A76  0100               	movlb	0	; () banked
 27429  015A78  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27430  015A7A  A0D8               	btfss	status,0,c
 27431  015A7C  D00A               	goto	l2570
 27432                           
 27433                           ; BSR set to: 0
 27434  015A7E  0100               	movlb	0	; () banked
 27435  015A80  5162               	movf	___lwdiv@divisor& (0+255),w,b
 27436  015A82  0100               	movlb	0	; () banked
 27437  015A84  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 27438  015A86  0100               	movlb	0	; () banked
 27439  015A88  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27440  015A8A  0100               	movlb	0	; () banked
 27441  015A8C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27442                           
 27443                           ; BSR set to: 0
 27444  015A8E  0100               	movlb	0	; () banked
 27445  015A90  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 27446  015A92                     l2570:
 27447                           
 27448                           ; BSR set to: 0
 27449                           
 27450                           ; BSR set to: 0
 27451  015A92  0100               	movlb	0	; () banked
 27452  015A94  90D8               	bcf	status,0,c
 27453  015A96  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27454  015A98  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 27455                           
 27456                           ; BSR set to: 0
 27457  015A9A  0100               	movlb	0	; () banked
 27458  015A9C  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 27459  015A9E  D7E1               	goto	u9270
 27460  015AA0                     l2571:
 27461                           
 27462                           ; BSR set to: 0
 27463                           
 27464                           ; BSR set to: 0
 27465  015AA0  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 27466  015AA4  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27467                           
 27468                           ; BSR set to: 0
 27469  015AA8  0012               	return		;funcret
 27470  015AAA                     __end_of___lwdiv:
 27471                           	opt stack 0
 27472                           tosu	equ	0xFFF
 27473                           tosh	equ	0xFFE
 27474                           tosl	equ	0xFFD
 27475                           pclath	equ	0xFFA
 27476                           tblptru	equ	0xFF8
 27477                           tblptrh	equ	0xFF7
 27478                           tblptrl	equ	0xFF6
 27479                           tablat	equ	0xFF5
 27480                           prodh	equ	0xFF4
 27481                           prodl	equ	0xFF3
 27482                           intcon	equ	0xFF2
 27483                           indf0	equ	0xFEF
 27484                           postinc0	equ	0xFEE
 27485                           fsr0h	equ	0xFEA
 27486                           fsr0l	equ	0xFE9
 27487                           wreg	equ	0xFE8
 27488                           indf1	equ	0xFE7
 27489                           postdec1	equ	0xFE5
 27490                           fsr1h	equ	0xFE2
 27491                           fsr1l	equ	0xFE1
 27492                           indf2	equ	0xFDF
 27493                           postinc2	equ	0xFDE
 27494                           postdec2	equ	0xFDD
 27495                           plusw2	equ	0xFDB
 27496                           fsr2h	equ	0xFDA
 27497                           fsr2l	equ	0xFD9
 27498                           status	equ	0xFD8
 27499                           
 27500 ;; *************** function _continuousMode *****************
 27501 ;; Defined at:
 27502 ;;		line 237 in file "main.c"
 27503 ;; Parameters:    Size  Location     Type
 27504 ;;		None
 27505 ;; Auto vars:     Size  Location     Type
 27506 ;;		None
 27507 ;; Return value:  Size  Location     Type
 27508 ;;                  1    wreg      void 
 27509 ;; Registers used:
 27510 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27511 ;; Tracked objects:
 27512 ;;		On entry : 0/0
 27513 ;;		On exit  : 0/0
 27514 ;;		Unchanged: 0/0
 27515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27520 ;;Total ram usage:        0 bytes
 27521 ;; Hardware stack levels used:    1
 27522 ;; Hardware stack levels required when called:   10
 27523 ;; This function calls:
 27524 ;;		_Motor_Move
 27525 ;;		_Motor_Speed
 27526 ;; This function is called by:
 27527 ;;		_main
 27528 ;; This function uses a non-reentrant model
 27529 ;;
 27530                           
 27531                           	psect	text137
 27532  01695E                     __ptext137:
 27533                           	opt stack 0
 27534  01695E                     _continuousMode:
 27535                           	opt stack 20
 27536                           
 27537                           ;main.c: 238: Motor_Speed(&Stepper, speed);
 27538                           
 27539                           ; BSR set to: 0
 27540                           ;incstack = 0
 27541  01695E  0EC3               	movlw	low _Stepper
 27542  016960  0100               	movlb	0	; () banked
 27543  016962  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
 27544  016964  0E01               	movlw	high _Stepper
 27545  016966  0100               	movlb	0	; () banked
 27546  016968  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
 27547  01696A  C02F  F07D         	movff	_speed,Motor_Speed@pFrequency
 27548  01696E  C030  F07E         	movff	_speed+1,Motor_Speed@pFrequency+1
 27549  016972  EC53  F0B5         	call	_Motor_Speed	;wreg free
 27550                           
 27551                           ;main.c: 239: Motor_Move(&Stepper, direction);
 27552  016976  0EC3               	movlw	low _Stepper
 27553  016978  0100               	movlb	0	; () banked
 27554  01697A  6F63               	movwf	Motor_Move@pMotor& (0+255),b
 27555  01697C  0E01               	movlw	high _Stepper
 27556  01697E  0100               	movlb	0	; () banked
 27557  016980  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
 27558  016982  C1F3  F065         	movff	_direction,Motor_Move@pDelta
 27559  016986  C1F4  F066         	movff	_direction+1,Motor_Move@pDelta+1
 27560  01698A  EC0D  F0B4         	call	_Motor_Move	;wreg free
 27561  01698E  0012               	return		;funcret
 27562  016990                     __end_of_continuousMode:
 27563                           	opt stack 0
 27564                           tosu	equ	0xFFF
 27565                           tosh	equ	0xFFE
 27566                           tosl	equ	0xFFD
 27567                           pclath	equ	0xFFA
 27568                           tblptru	equ	0xFF8
 27569                           tblptrh	equ	0xFF7
 27570                           tblptrl	equ	0xFF6
 27571                           tablat	equ	0xFF5
 27572                           prodh	equ	0xFF4
 27573                           prodl	equ	0xFF3
 27574                           intcon	equ	0xFF2
 27575                           indf0	equ	0xFEF
 27576                           postinc0	equ	0xFEE
 27577                           fsr0h	equ	0xFEA
 27578                           fsr0l	equ	0xFE9
 27579                           wreg	equ	0xFE8
 27580                           indf1	equ	0xFE7
 27581                           postdec1	equ	0xFE5
 27582                           fsr1h	equ	0xFE2
 27583                           fsr1l	equ	0xFE1
 27584                           indf2	equ	0xFDF
 27585                           postinc2	equ	0xFDE
 27586                           postdec2	equ	0xFDD
 27587                           plusw2	equ	0xFDB
 27588                           fsr2h	equ	0xFDA
 27589                           fsr2l	equ	0xFD9
 27590                           status	equ	0xFD8
 27591                           
 27592 ;; *************** function _Motor_Speed *****************
 27593 ;; Defined at:
 27594 ;;		line 117 in file "Library/Motor.c"
 27595 ;; Parameters:    Size  Location     Type
 27596 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 27597 ;;		 -> Stepper(6), 
 27598 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 27599 ;; Auto vars:     Size  Location     Type
 27600 ;;		None
 27601 ;; Return value:  Size  Location     Type
 27602 ;;                  1    wreg      unsigned char 
 27603 ;; Registers used:
 27604 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27605 ;; Tracked objects:
 27606 ;;		On entry : 0/0
 27607 ;;		On exit  : 0/0
 27608 ;;		Unchanged: 0/0
 27609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27610 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27611 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27613 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27614 ;;Total ram usage:        4 bytes
 27615 ;; Hardware stack levels used:    1
 27616 ;; Hardware stack levels required when called:    9
 27617 ;; This function calls:
 27618 ;;		_Timer0_Init
 27619 ;; This function is called by:
 27620 ;;		_continuousMode
 27621 ;;		_stepMode
 27622 ;;		_positionMode
 27623 ;; This function uses a non-reentrant model
 27624 ;;
 27625                           
 27626                           	psect	text138
 27627  016AA6                     __ptext138:
 27628                           	opt stack 0
 27629  016AA6                     _Motor_Speed:
 27630                           	opt stack 20
 27631                           
 27632                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 27633                           
 27634                           ;incstack = 0
 27635  016AA6  0100               	movlb	0	; () banked
 27636  016AA8  EE20 F002          	lfsr	2,2
 27637  016AAC  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
 27638  016AAE  26D9               	addwf	fsr2l,f,c
 27639  016AB0  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 27640  016AB2  22DA               	addwfc	fsr2h,f,c
 27641  016AB4  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 27642  016AB8  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 27643                           
 27644                           ; BSR set to: 0
 27645                           ;Motor.c: 120: Timer0_Init(pFrequency);
 27646  016ABC  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 27647  016AC0  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 27648  016AC4  0100               	movlb	0	; () banked
 27649  016AC6  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 27650  016AC8  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 27651  016ACA  EC6F  F09C         	call	_Timer0_Init	;wreg free
 27652  016ACE  0012               	return	
 27653  016AD0                     __end_of_Motor_Speed:
 27654                           	opt stack 0
 27655                           tosu	equ	0xFFF
 27656                           tosh	equ	0xFFE
 27657                           tosl	equ	0xFFD
 27658                           pclath	equ	0xFFA
 27659                           tblptru	equ	0xFF8
 27660                           tblptrh	equ	0xFF7
 27661                           tblptrl	equ	0xFF6
 27662                           tablat	equ	0xFF5
 27663                           prodh	equ	0xFF4
 27664                           prodl	equ	0xFF3
 27665                           intcon	equ	0xFF2
 27666                           indf0	equ	0xFEF
 27667                           postinc0	equ	0xFEE
 27668                           fsr0h	equ	0xFEA
 27669                           fsr0l	equ	0xFE9
 27670                           wreg	equ	0xFE8
 27671                           indf1	equ	0xFE7
 27672                           postdec1	equ	0xFE5
 27673                           fsr1h	equ	0xFE2
 27674                           fsr1l	equ	0xFE1
 27675                           indf2	equ	0xFDF
 27676                           postinc2	equ	0xFDE
 27677                           postdec2	equ	0xFDD
 27678                           plusw2	equ	0xFDB
 27679                           fsr2h	equ	0xFDA
 27680                           fsr2l	equ	0xFD9
 27681                           status	equ	0xFD8
 27682                           
 27683 ;; *************** function _Timer0_Init *****************
 27684 ;; Defined at:
 27685 ;;		line 25 in file "Library/Timer0.c"
 27686 ;; Parameters:    Size  Location     Type
 27687 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 27688 ;; Auto vars:     Size  Location     Type
 27689 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 27690 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 27691 ;; Return value:  Size  Location     Type
 27692 ;;                  1    wreg      void 
 27693 ;; Registers used:
 27694 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 27695 ;; Tracked objects:
 27696 ;;		On entry : 0/0
 27697 ;;		On exit  : 0/0
 27698 ;;		Unchanged: 0/0
 27699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27700 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27701 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27702 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27703 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27704 ;;Total ram usage:       14 bytes
 27705 ;; Hardware stack levels used:    1
 27706 ;; Hardware stack levels required when called:    8
 27707 ;; This function calls:
 27708 ;;		_Timer0_Clear
 27709 ;;		___lldiv
 27710 ;; This function is called by:
 27711 ;;		_Motor_Init
 27712 ;;		_Motor_Speed
 27713 ;; This function uses a non-reentrant model
 27714 ;;
 27715                           
 27716                           	psect	text139
 27717  0138DE                     __ptext139:
 27718                           	opt stack 0
 27719  0138DE                     _Timer0_Init:
 27720                           	opt stack 20
 27721                           
 27722                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 27723                           
 27724                           ;incstack = 0
 27725  0138DE  0E80               	movlw	128
 27726  0138E0  0100               	movlb	0	; () banked
 27727  0138E2  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
 27728  0138E4  0E8D               	movlw	141
 27729  0138E6  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 27730  0138E8  0E5B               	movlw	91
 27731  0138EA  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 27732  0138EC  0E00               	movlw	0
 27733  0138EE  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 27734                           
 27735                           ; BSR set to: 0
 27736                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 27737                           ;Timer0.c: 31: static UINT8 PRE = 0;
 27738                           ;Timer0.c: 32: static UINT32 DIV = 0;
 27739                           ;Timer0.c: 34: UINT32 DIVIDE;
 27740                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 27741  0138F0  9ED5               	bcf	4053,7,c	;volatile
 27742                           
 27743                           ; BSR set to: 0
 27744                           ;Timer0.c: 38: if (pFrequency == 0)
 27745  0138F2  0100               	movlb	0	; () banked
 27746  0138F4  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
 27747  0138F6  0100               	movlb	0	; () banked
 27748  0138F8  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 27749  0138FA  0100               	movlb	0	; () banked
 27750  0138FC  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 27751  0138FE  0100               	movlb	0	; () banked
 27752  013900  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 27753  013902  B4D8               	btfsc	status,2,c
 27754  013904  0012               	return	
 27755                           
 27756                           ; BSR set to: 0
 27757                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 27758                           
 27759                           ; BSR set to: 0
 27760                           ;Timer0.c: 39: return;
 27761  013906  96D5               	bcf	4053,3,c	;volatile
 27762                           
 27763                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 27764  013908  9CD5               	bcf	4053,6,c	;volatile
 27765                           
 27766                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 27767  01390A  9AD5               	bcf	4053,5,c	;volatile
 27768                           
 27769                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 27770  01390C  98D5               	bcf	4053,4,c	;volatile
 27771                           
 27772                           ; BSR set to: 0
 27773                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 27774  01390E  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 27775  013912  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 27776  013916  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 27777  01391A  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 27778  01391E  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 27779  013922  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 27780  013926  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 27781  01392A  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 27782  01392E  ECF3  F0A4         	call	___lldiv	;wreg free
 27783  013932  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
 27784  013936  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 27785  01393A  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 27786  01393E  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 27787                           
 27788                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 27789  013942  D00C               	goto	l1787
 27790  013944                     l13951:
 27791                           
 27792                           ;Timer0.c: 50: {
 27793                           ;Timer0.c: 51: INDEX ++;
 27794  013944  0100               	movlb	0	; () banked
 27795  013946  2BF9               	incf	_INDEX& (0+255),f,b
 27796                           
 27797                           ; BSR set to: 0
 27798                           ;Timer0.c: 52: if (INDEX >= 3)
 27799  013948  0E02               	movlw	2
 27800  01394A  0100               	movlb	0	; () banked
 27801  01394C  65F9               	cpfsgt	_INDEX& (0+255),b
 27802  01394E  D001               	goto	l1785
 27803  013950  D02F               	goto	u11360
 27804  013952                     l1785:
 27805                           
 27806                           ; BSR set to: 0
 27807                           ;Timer0.c: 56: if (INDEX >= 8)
 27808                           
 27809                           ; BSR set to: 0
 27810  013952  0E07               	movlw	7
 27811  013954  0100               	movlb	0	; () banked
 27812  013956  65F9               	cpfsgt	_INDEX& (0+255),b
 27813  013958  D001               	goto	l1787
 27814  01395A  0012               	return	
 27815  01395C                     l1787:
 27816                           
 27817                           ; BSR set to: 0
 27818                           
 27819                           ; BSR set to: 0
 27820  01395C  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 27821  013960  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 27822  013964  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 27823  013968  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 27824  01396C  0100               	movlb	0	; () banked
 27825  01396E  51F9               	movf	_INDEX& (0+255),w,b
 27826  013970  0D02               	mullw	2
 27827  013972  0E95               	movlw	low Timer0_Init@PRESCALE
 27828  013974  24F3               	addwf	prodl,w,c
 27829  013976  6EF6               	movwf	tblptrl,c
 27830  013978  0EFC               	movlw	high Timer0_Init@PRESCALE
 27831  01397A  20F4               	addwfc	prodh,w,c
 27832  01397C  6EF7               	movwf	tblptrh,c
 27833  01397E                     	if	1	;There are 3 active tblptr bytes
 27834  01397E  6AF8               	clrf	tblptru,c
 27835  013980  0E00               	movlw	low (__mediumconst shr (0+16))
 27836  013982  22F8               	addwfc	tblptru,f,c
 27837  013984                     	endif
 27838  013984  0009               	tblrd		*+
 27839  013986  CFF5 F071          	movff	tablat,??_Timer0_Init
 27840  01398A  0009               	tblrd		*+
 27841  01398C  CFF5 F072          	movff	tablat,??_Timer0_Init+1
 27842  013990  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
 27843  013994  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 27844  013998  0100               	movlb	0	; () banked
 27845  01399A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 27846  01399C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 27847  01399E  ECF3  F0A4         	call	___lldiv	;wreg free
 27848  0139A2  0100               	movlb	0	; () banked
 27849  0139A4  5163               	movf	(?___lldiv+3)& (0+255),w,b
 27850  0139A6  E1CE               	bnz	l13951
 27851  0139A8  0100               	movlb	0	; () banked
 27852  0139AA  0562               	decf	(?___lldiv+2)& (0+255),w,b
 27853  0139AC  B0D8               	btfsc	status,0,c
 27854  0139AE  D7CA               	goto	l1784
 27855  0139B0                     u11360:
 27856                           
 27857                           ; BSR set to: 0
 27858                           ;Timer0.c: 58: }
 27859                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 27860                           
 27861                           ; BSR set to: 0
 27862  0139B0  0100               	movlb	0	; () banked
 27863  0139B2  51F9               	movf	_INDEX& (0+255),w,b
 27864  0139B4  0D02               	mullw	2
 27865  0139B6  0E95               	movlw	low Timer0_Init@PRESCALE
 27866  0139B8  24F3               	addwf	prodl,w,c
 27867  0139BA  6EF6               	movwf	tblptrl,c
 27868  0139BC  0EFC               	movlw	high Timer0_Init@PRESCALE
 27869  0139BE  20F4               	addwfc	prodh,w,c
 27870  0139C0  6EF7               	movwf	tblptrh,c
 27871  0139C2                     	if	1	;There are 3 active tblptr bytes
 27872  0139C2  6AF8               	clrf	tblptru,c
 27873  0139C4  0E00               	movlw	low (__mediumconst shr (0+16))
 27874  0139C6  22F8               	addwfc	tblptru,f,c
 27875  0139C8                     	endif
 27876  0139C8  0008               	tblrd		*
 27877  0139CA  CFF5 F03C          	movff	tablat,Timer0_Init@PRE
 27878                           
 27879                           ; BSR set to: 0
 27880                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 27881  0139CE  0EFF               	movlw	255
 27882  0139D0  0100               	movlb	0	; () banked
 27883  0139D2  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 27884  0139D4  0101               	movlb	1	; () banked
 27885  0139D6  6F04               	movwf	Timer0_Init@DIV& (0+255),b
 27886  0139D8  0EFF               	movlw	255
 27887  0139DA  0100               	movlb	0	; () banked
 27888  0139DC  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 27889  0139DE  0101               	movlb	1	; () banked
 27890  0139E0  6F05               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 27891  0139E2  0EFF               	movlw	255
 27892  0139E4  0100               	movlb	0	; () banked
 27893  0139E6  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 27894  0139E8  0101               	movlb	1	; () banked
 27895  0139EA  6F06               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 27896  0139EC  0EFF               	movlw	255
 27897  0139EE  0100               	movlb	0	; () banked
 27898  0139F0  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 27899  0139F2  0101               	movlb	1	; () banked
 27900  0139F4  6F07               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 27901                           
 27902                           ; BSR set to: 1
 27903                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 27904  0139F6  C104  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
 27905  0139FA  C105  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 27906  0139FE  C106  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 27907  013A02  C107  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 27908  013A06  503C               	movf	Timer0_Init@PRE,w,c
 27909  013A08  0100               	movlb	0	; () banked
 27910  013A0A  6F64               	movwf	___lldiv@divisor& (0+255),b
 27911  013A0C  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 27912  013A0E  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 27913  013A10  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 27914  013A12  ECF3  F0A4         	call	___lldiv	;wreg free
 27915  013A16  0100               	movlb	0	; () banked
 27916  013A18  1F60               	comf	?___lldiv& (0+255),f,b
 27917  013A1A  0100               	movlb	0	; () banked
 27918  013A1C  1F61               	comf	(?___lldiv+1)& (0+255),f,b
 27919  013A1E  0100               	movlb	0	; () banked
 27920  013A20  4B60               	infsnz	?___lldiv& (0+255),f,b
 27921  013A22  2B61               	incf	(?___lldiv+1)& (0+255),f,b
 27922  013A24  0EFF               	movlw	255
 27923  013A26  0100               	movlb	0	; () banked
 27924  013A28  2560               	addwf	?___lldiv& (0+255),w,b
 27925  013A2A  6E33               	movwf	_COUNTER,c
 27926  013A2C  0EFF               	movlw	255
 27927  013A2E  0100               	movlb	0	; () banked
 27928  013A30  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
 27929  013A32  6E34               	movwf	_COUNTER+1,c
 27930                           
 27931                           ; BSR set to: 0
 27932                           ;Timer0.c: 68: Timer0_Clear();
 27933  013A34  EC13  F0B7         	call	_Timer0_Clear	;wreg free
 27934                           
 27935                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 27936  013A38  8ED5               	bsf	4053,7,c	;volatile
 27937  013A3A  0012               	return		;funcret
 27938  013A3C                     __end_of_Timer0_Init:
 27939                           	opt stack 0
 27940                           tosu	equ	0xFFF
 27941                           tosh	equ	0xFFE
 27942                           tosl	equ	0xFFD
 27943                           pclath	equ	0xFFA
 27944                           tblptru	equ	0xFF8
 27945                           tblptrh	equ	0xFF7
 27946                           tblptrl	equ	0xFF6
 27947                           tablat	equ	0xFF5
 27948                           prodh	equ	0xFF4
 27949                           prodl	equ	0xFF3
 27950                           intcon	equ	0xFF2
 27951                           indf0	equ	0xFEF
 27952                           postinc0	equ	0xFEE
 27953                           fsr0h	equ	0xFEA
 27954                           fsr0l	equ	0xFE9
 27955                           wreg	equ	0xFE8
 27956                           indf1	equ	0xFE7
 27957                           postdec1	equ	0xFE5
 27958                           fsr1h	equ	0xFE2
 27959                           fsr1l	equ	0xFE1
 27960                           indf2	equ	0xFDF
 27961                           postinc2	equ	0xFDE
 27962                           postdec2	equ	0xFDD
 27963                           plusw2	equ	0xFDB
 27964                           fsr2h	equ	0xFDA
 27965                           fsr2l	equ	0xFD9
 27966                           status	equ	0xFD8
 27967                           
 27968 ;; *************** function ___lldiv *****************
 27969 ;; Defined at:
 27970 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 27971 ;; Parameters:    Size  Location     Type
 27972 ;;  dividend        4    0[BANK0 ] unsigned long 
 27973 ;;  divisor         4    4[BANK0 ] unsigned long 
 27974 ;; Auto vars:     Size  Location     Type
 27975 ;;  quotient        4    8[BANK0 ] unsigned long 
 27976 ;;  counter         1   12[BANK0 ] unsigned char 
 27977 ;; Return value:  Size  Location     Type
 27978 ;;                  4    0[BANK0 ] unsigned long 
 27979 ;; Registers used:
 27980 ;;		wreg, status,2, status,0
 27981 ;; Tracked objects:
 27982 ;;		On entry : 0/0
 27983 ;;		On exit  : 0/0
 27984 ;;		Unchanged: 0/0
 27985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27986 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27987 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27989 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27990 ;;Total ram usage:       13 bytes
 27991 ;; Hardware stack levels used:    1
 27992 ;; Hardware stack levels required when called:    7
 27993 ;; This function calls:
 27994 ;;		Nothing
 27995 ;; This function is called by:
 27996 ;;		_Timer0_Init
 27997 ;;		_Timer2_Init
 27998 ;;		_rand_between
 27999 ;;		_I2C_Init
 28000 ;; This function uses a non-reentrant model
 28001 ;;
 28002                           
 28003                           	psect	text140
 28004  0149E6                     __ptext140:
 28005                           	opt stack 0
 28006  0149E6                     ___lldiv:
 28007                           	opt stack 20
 28008                           
 28009                           ;incstack = 0
 28010  0149E6  0E00               	movlw	0
 28011  0149E8  0100               	movlb	0	; () banked
 28012  0149EA  6F68               	movwf	___lldiv@quotient& (0+255),b
 28013  0149EC  0E00               	movlw	0
 28014  0149EE  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 28015  0149F0  0E00               	movlw	0
 28016  0149F2  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 28017  0149F4  0E00               	movlw	0
 28018  0149F6  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 28019                           
 28020                           ; BSR set to: 0
 28021  0149F8  0100               	movlb	0	; () banked
 28022  0149FA  5164               	movf	___lldiv@divisor& (0+255),w,b
 28023  0149FC  0100               	movlb	0	; () banked
 28024  0149FE  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 28025  014A00  0100               	movlb	0	; () banked
 28026  014A02  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 28027  014A04  0100               	movlb	0	; () banked
 28028  014A06  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 28029  014A08  B4D8               	btfsc	status,2,c
 28030  014A0A  D042               	goto	l2518
 28031                           
 28032                           ; BSR set to: 0
 28033  014A0C  0E01               	movlw	1
 28034  014A0E  0100               	movlb	0	; () banked
 28035  014A10  6F6C               	movwf	___lldiv@counter& (0+255),b
 28036  014A12  D008               	goto	l2513
 28037  014A14                     
 28038                           ; BSR set to: 0
 28039                           
 28040                           ; BSR set to: 0
 28041  014A14  0100               	movlb	0	; () banked
 28042  014A16  90D8               	bcf	status,0,c
 28043  014A18  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 28044  014A1A  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 28045  014A1C  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 28046  014A1E  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 28047  014A20  0100               	movlb	0	; () banked
 28048  014A22  2B6C               	incf	___lldiv@counter& (0+255),f,b
 28049  014A24                     l2513:
 28050                           
 28051                           ; BSR set to: 0
 28052                           
 28053                           ; BSR set to: 0
 28054  014A24  0100               	movlb	0	; () banked
 28055  014A26  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 28056  014A28  D7F5               	goto	l2514
 28057  014A2A                     u9530:
 28058                           
 28059                           ; BSR set to: 0
 28060                           
 28061                           ; BSR set to: 0
 28062                           
 28063                           ; BSR set to: 0
 28064  014A2A  0100               	movlb	0	; () banked
 28065  014A2C  90D8               	bcf	status,0,c
 28066  014A2E  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 28067  014A30  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 28068  014A32  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 28069  014A34  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 28070                           
 28071                           ; BSR set to: 0
 28072  014A36  0100               	movlb	0	; () banked
 28073  014A38  5164               	movf	___lldiv@divisor& (0+255),w,b
 28074  014A3A  0100               	movlb	0	; () banked
 28075  014A3C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 28076  014A3E  0100               	movlb	0	; () banked
 28077  014A40  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 28078  014A42  0100               	movlb	0	; () banked
 28079  014A44  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 28080  014A46  0100               	movlb	0	; () banked
 28081  014A48  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 28082  014A4A  0100               	movlb	0	; () banked
 28083  014A4C  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 28084  014A4E  0100               	movlb	0	; () banked
 28085  014A50  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 28086  014A52  0100               	movlb	0	; () banked
 28087  014A54  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 28088  014A56  A0D8               	btfss	status,0,c
 28089  014A58  D012               	goto	l2517
 28090                           
 28091                           ; BSR set to: 0
 28092  014A5A  0100               	movlb	0	; () banked
 28093  014A5C  5164               	movf	___lldiv@divisor& (0+255),w,b
 28094  014A5E  0100               	movlb	0	; () banked
 28095  014A60  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 28096  014A62  0100               	movlb	0	; () banked
 28097  014A64  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 28098  014A66  0100               	movlb	0	; () banked
 28099  014A68  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 28100  014A6A  0100               	movlb	0	; () banked
 28101  014A6C  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 28102  014A6E  0100               	movlb	0	; () banked
 28103  014A70  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 28104  014A72  0100               	movlb	0	; () banked
 28105  014A74  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 28106  014A76  0100               	movlb	0	; () banked
 28107  014A78  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 28108                           
 28109                           ; BSR set to: 0
 28110  014A7A  0100               	movlb	0	; () banked
 28111  014A7C  8168               	bsf	___lldiv@quotient& (0+255),0,b
 28112  014A7E                     l2517:
 28113                           
 28114                           ; BSR set to: 0
 28115                           
 28116                           ; BSR set to: 0
 28117  014A7E  0100               	movlb	0	; () banked
 28118  014A80  90D8               	bcf	status,0,c
 28119  014A82  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 28120  014A84  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 28121  014A86  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 28122  014A88  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 28123                           
 28124                           ; BSR set to: 0
 28125  014A8A  0100               	movlb	0	; () banked
 28126  014A8C  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 28127  014A8E  D7CD               	goto	u9530
 28128  014A90                     l2518:
 28129                           
 28130                           ; BSR set to: 0
 28131                           
 28132                           ; BSR set to: 0
 28133  014A90  C068  F060         	movff	___lldiv@quotient,?___lldiv
 28134  014A94  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 28135  014A98  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 28136  014A9C  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 28137                           
 28138                           ; BSR set to: 0
 28139  014AA0  0012               	return		;funcret
 28140  014AA2                     __end_of___lldiv:
 28141                           	opt stack 0
 28142                           tosu	equ	0xFFF
 28143                           tosh	equ	0xFFE
 28144                           tosl	equ	0xFFD
 28145                           pclath	equ	0xFFA
 28146                           tblptru	equ	0xFF8
 28147                           tblptrh	equ	0xFF7
 28148                           tblptrl	equ	0xFF6
 28149                           tablat	equ	0xFF5
 28150                           prodh	equ	0xFF4
 28151                           prodl	equ	0xFF3
 28152                           intcon	equ	0xFF2
 28153                           indf0	equ	0xFEF
 28154                           postinc0	equ	0xFEE
 28155                           fsr0h	equ	0xFEA
 28156                           fsr0l	equ	0xFE9
 28157                           wreg	equ	0xFE8
 28158                           indf1	equ	0xFE7
 28159                           postdec1	equ	0xFE5
 28160                           fsr1h	equ	0xFE2
 28161                           fsr1l	equ	0xFE1
 28162                           indf2	equ	0xFDF
 28163                           postinc2	equ	0xFDE
 28164                           postdec2	equ	0xFDD
 28165                           plusw2	equ	0xFDB
 28166                           fsr2h	equ	0xFDA
 28167                           fsr2l	equ	0xFD9
 28168                           status	equ	0xFD8
 28169                           
 28170 ;; *************** function _Timer0_Clear *****************
 28171 ;; Defined at:
 28172 ;;		line 20 in file "Library/Timer0.c"
 28173 ;; Parameters:    Size  Location     Type
 28174 ;;		None
 28175 ;; Auto vars:     Size  Location     Type
 28176 ;;		None
 28177 ;; Return value:  Size  Location     Type
 28178 ;;                  1    wreg      void 
 28179 ;; Registers used:
 28180 ;;		None
 28181 ;; Tracked objects:
 28182 ;;		On entry : 0/0
 28183 ;;		On exit  : 0/0
 28184 ;;		Unchanged: 0/0
 28185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28187 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28189 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28190 ;;Total ram usage:        0 bytes
 28191 ;; Hardware stack levels used:    1
 28192 ;; Hardware stack levels required when called:    7
 28193 ;; This function calls:
 28194 ;;		Nothing
 28195 ;; This function is called by:
 28196 ;;		_Timer0_Init
 28197 ;; This function uses a non-reentrant model
 28198 ;;
 28199                           
 28200                           	psect	text141
 28201  016E26                     __ptext141:
 28202                           	opt stack 0
 28203  016E26                     _Timer0_Clear:
 28204                           	opt stack 20
 28205                           
 28206                           ;Timer0.c: 22: TMR0 = COUNTER;
 28207                           
 28208                           ; BSR set to: 0
 28209                           ;incstack = 0
 28210  016E26  C033  FFD6         	movff	_COUNTER,4054	;volatile
 28211  016E2A  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
 28212                           
 28213                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 28214  016E2E  94F2               	bcf	intcon,2,c	;volatile
 28215  016E30  0012               	return		;funcret
 28216  016E32                     __end_of_Timer0_Clear:
 28217                           	opt stack 0
 28218                           tosu	equ	0xFFF
 28219                           tosh	equ	0xFFE
 28220                           tosl	equ	0xFFD
 28221                           pclath	equ	0xFFA
 28222                           tblptru	equ	0xFF8
 28223                           tblptrh	equ	0xFF7
 28224                           tblptrl	equ	0xFF6
 28225                           tablat	equ	0xFF5
 28226                           prodh	equ	0xFF4
 28227                           prodl	equ	0xFF3
 28228                           intcon	equ	0xFF2
 28229                           indf0	equ	0xFEF
 28230                           postinc0	equ	0xFEE
 28231                           fsr0h	equ	0xFEA
 28232                           fsr0l	equ	0xFE9
 28233                           wreg	equ	0xFE8
 28234                           indf1	equ	0xFE7
 28235                           postdec1	equ	0xFE5
 28236                           fsr1h	equ	0xFE2
 28237                           fsr1l	equ	0xFE1
 28238                           indf2	equ	0xFDF
 28239                           postinc2	equ	0xFDE
 28240                           postdec2	equ	0xFDD
 28241                           plusw2	equ	0xFDB
 28242                           fsr2h	equ	0xFDA
 28243                           fsr2l	equ	0xFD9
 28244                           status	equ	0xFD8
 28245                           
 28246 ;; *************** function _Motor_Move *****************
 28247 ;; Defined at:
 28248 ;;		line 51 in file "Library/Motor.c"
 28249 ;; Parameters:    Size  Location     Type
 28250 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 28251 ;;		 -> Stepper(6), 
 28252 ;;  pDelta          2    5[BANK0 ] short 
 28253 ;; Auto vars:     Size  Location     Type
 28254 ;;		None
 28255 ;; Return value:  Size  Location     Type
 28256 ;;                  1    wreg      unsigned char 
 28257 ;; Registers used:
 28258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28259 ;; Tracked objects:
 28260 ;;		On entry : 0/0
 28261 ;;		On exit  : 0/0
 28262 ;;		Unchanged: 0/0
 28263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28264 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28266 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28267 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28268 ;;Total ram usage:        6 bytes
 28269 ;; Hardware stack levels used:    1
 28270 ;; Hardware stack levels required when called:    8
 28271 ;; This function calls:
 28272 ;;		_Timer0_Start
 28273 ;; This function is called by:
 28274 ;;		_continuousMode
 28275 ;;		_stepMode
 28276 ;;		_positionMode
 28277 ;; This function uses a non-reentrant model
 28278 ;;
 28279                           
 28280                           	psect	text142
 28281  01681A                     __ptext142:
 28282                           	opt stack 0
 28283  01681A                     _Motor_Move:
 28284                           	opt stack 21
 28285                           
 28286                           ;Motor.c: 54: lMotor = pMotor;
 28287                           
 28288                           ;incstack = 0
 28289  01681A  C063  F0F1         	movff	Motor_Move@pMotor,_lMotor
 28290  01681E  C064  F0F2         	movff	Motor_Move@pMotor+1,_lMotor+1
 28291                           
 28292                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 28293  016822  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 28294  016826  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 28295  01682A  50DE               	movf	postinc2,w,c
 28296  01682C  10DE               	iorwf	postinc2,w,c
 28297  01682E  A4D8               	btfss	status,2,c
 28298  016830  0012               	return	
 28299                           
 28300                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 28301                           
 28302                           ;Motor.c: 59: return 0;
 28303                           ;	Return value of _Motor_Move is never used
 28304  016832  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
 28305  016836  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 28306  01683A  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
 28307  01683E  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 28308                           
 28309                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 28310  016842  C10B  F060         	movff	_lStepFunction,Timer0_Start@pFunction
 28311  016846  C10C  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 28312  01684A  C10D  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 28313  01684E  EC8F  F0B5         	call	_Timer0_Start	;wreg free
 28314  016852  0012               	return	
 28315  016854                     __end_of_Motor_Move:
 28316                           	opt stack 0
 28317                           tosu	equ	0xFFF
 28318                           tosh	equ	0xFFE
 28319                           tosl	equ	0xFFD
 28320                           pclath	equ	0xFFA
 28321                           tblptru	equ	0xFF8
 28322                           tblptrh	equ	0xFF7
 28323                           tblptrl	equ	0xFF6
 28324                           tablat	equ	0xFF5
 28325                           prodh	equ	0xFF4
 28326                           prodl	equ	0xFF3
 28327                           intcon	equ	0xFF2
 28328                           indf0	equ	0xFEF
 28329                           postinc0	equ	0xFEE
 28330                           fsr0h	equ	0xFEA
 28331                           fsr0l	equ	0xFE9
 28332                           wreg	equ	0xFE8
 28333                           indf1	equ	0xFE7
 28334                           postdec1	equ	0xFE5
 28335                           fsr1h	equ	0xFE2
 28336                           fsr1l	equ	0xFE1
 28337                           indf2	equ	0xFDF
 28338                           postinc2	equ	0xFDE
 28339                           postdec2	equ	0xFDD
 28340                           plusw2	equ	0xFDB
 28341                           fsr2h	equ	0xFDA
 28342                           fsr2l	equ	0xFD9
 28343                           status	equ	0xFD8
 28344                           
 28345 ;; *************** function _Timer0_Start *****************
 28346 ;; Defined at:
 28347 ;;		line 75 in file "Library/Timer0.c"
 28348 ;; Parameters:    Size  Location     Type
 28349 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 28350 ;;		 -> Absolute function(1), Motor_Step(1), 
 28351 ;; Auto vars:     Size  Location     Type
 28352 ;;		None
 28353 ;; Return value:  Size  Location     Type
 28354 ;;                  1    wreg      void 
 28355 ;; Registers used:
 28356 ;;		wreg, status,2, status,0
 28357 ;; Tracked objects:
 28358 ;;		On entry : 0/0
 28359 ;;		On exit  : 0/0
 28360 ;;		Unchanged: 0/0
 28361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28362 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28365 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28366 ;;Total ram usage:        3 bytes
 28367 ;; Hardware stack levels used:    1
 28368 ;; Hardware stack levels required when called:    7
 28369 ;; This function calls:
 28370 ;;		Nothing
 28371 ;; This function is called by:
 28372 ;;		_Motor_Move
 28373 ;; This function uses a non-reentrant model
 28374 ;;
 28375                           
 28376                           	psect	text143
 28377  016B1E                     __ptext143:
 28378                           	opt stack 0
 28379  016B1E                     _Timer0_Start:
 28380                           	opt stack 21
 28381                           
 28382                           ;Timer0.c: 77: gISR = pFunction;
 28383                           
 28384                           ;incstack = 0
 28385  016B1E  C060  F108         	movff	Timer0_Start@pFunction,_gISR
 28386  016B22  C061  F109         	movff	Timer0_Start@pFunction+1,_gISR+1
 28387  016B26  C062  F10A         	movff	Timer0_Start@pFunction+2,_gISR+2
 28388                           
 28389                           ;Timer0.c: 78: TMR0 = COUNTER;
 28390  016B2A  C033  FFD6         	movff	_COUNTER,4054	;volatile
 28391  016B2E  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
 28392                           
 28393                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 28394  016B32  50D5               	movf	4053,w,c	;volatile
 28395  016B34  0100               	movlb	0	; () banked
 28396  016B36  19F9               	xorwf	_INDEX& (0+255),w,b
 28397  016B38  0BF8               	andlw	-8
 28398  016B3A  19F9               	xorwf	_INDEX& (0+255),w,b
 28399  016B3C  6ED5               	movwf	4053,c	;volatile
 28400                           
 28401                           ; BSR set to: 0
 28402                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 28403  016B3E  94F2               	bcf	intcon,2,c	;volatile
 28404                           
 28405                           ; BSR set to: 0
 28406                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 28407  016B40  8AF2               	bsf	intcon,5,c	;volatile
 28408                           
 28409                           ; BSR set to: 0
 28410  016B42  0012               	return		;funcret
 28411  016B44                     __end_of_Timer0_Start:
 28412                           	opt stack 0
 28413                           tosu	equ	0xFFF
 28414                           tosh	equ	0xFFE
 28415                           tosl	equ	0xFFD
 28416                           pclath	equ	0xFFA
 28417                           tblptru	equ	0xFF8
 28418                           tblptrh	equ	0xFF7
 28419                           tblptrl	equ	0xFF6
 28420                           tablat	equ	0xFF5
 28421                           prodh	equ	0xFF4
 28422                           prodl	equ	0xFF3
 28423                           intcon	equ	0xFF2
 28424                           indf0	equ	0xFEF
 28425                           postinc0	equ	0xFEE
 28426                           fsr0h	equ	0xFEA
 28427                           fsr0l	equ	0xFE9
 28428                           wreg	equ	0xFE8
 28429                           indf1	equ	0xFE7
 28430                           postdec1	equ	0xFE5
 28431                           fsr1h	equ	0xFE2
 28432                           fsr1l	equ	0xFE1
 28433                           indf2	equ	0xFDF
 28434                           postinc2	equ	0xFDE
 28435                           postdec2	equ	0xFDD
 28436                           plusw2	equ	0xFDB
 28437                           fsr2h	equ	0xFDA
 28438                           fsr2l	equ	0xFD9
 28439                           status	equ	0xFD8
 28440                           
 28441 ;; *************** function _HMI_Render *****************
 28442 ;; Defined at:
 28443 ;;		line 138 in file "HMI.c"
 28444 ;; Parameters:    Size  Location     Type
 28445 ;;		None
 28446 ;; Auto vars:     Size  Location     Type
 28447 ;;  a               2    8[BANK0 ] unsigned short 
 28448 ;; Return value:  Size  Location     Type
 28449 ;;                  1    wreg      void 
 28450 ;; Registers used:
 28451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28452 ;; Tracked objects:
 28453 ;;		On entry : 0/0
 28454 ;;		On exit  : 0/0
 28455 ;;		Unchanged: 0/0
 28456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28458 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28461 ;;Total ram usage:        2 bytes
 28462 ;; Hardware stack levels used:    1
 28463 ;; Hardware stack levels required when called:    9
 28464 ;; This function calls:
 28465 ;;		_OutSeg
 28466 ;; This function is called by:
 28467 ;;		_main
 28468 ;; This function uses a non-reentrant model
 28469 ;;
 28470                           
 28471                           	psect	text144
 28472  0167A2                     __ptext144:
 28473                           	opt stack 0
 28474  0167A2                     _HMI_Render:
 28475                           	opt stack 21
 28476                           
 28477                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 28478                           
 28479                           ; BSR set to: 0
 28480                           ;incstack = 0
 28481  0167A2  0E00               	movlw	0
 28482  0167A4  0100               	movlb	0	; () banked
 28483  0167A6  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 28484  0167A8  0E00               	movlw	0
 28485  0167AA  6F68               	movwf	HMI_Render@a& (0+255),b
 28486  0167AC                     l14749:
 28487                           
 28488                           ; BSR set to: 0
 28489  0167AC  0100               	movlb	0	; () banked
 28490  0167AE  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 28491  0167B0  E116               	bnz	l1158
 28492  0167B2  0E08               	movlw	8
 28493  0167B4  0100               	movlb	0	; () banked
 28494  0167B6  5D68               	subwf	HMI_Render@a& (0+255),w,b
 28495  0167B8  B0D8               	btfsc	status,0,c
 28496  0167BA  0012               	return	
 28497                           
 28498                           ; BSR set to: 0
 28499                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 28500                           
 28501                           ; BSR set to: 0
 28502                           
 28503                           ; BSR set to: 0
 28504  0167BC  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 28505  0167C0  0E30               	movlw	low _HMIBoard
 28506  0167C2  0100               	movlb	0	; () banked
 28507  0167C4  2568               	addwf	HMI_Render@a& (0+255),w,b
 28508  0167C6  6ED9               	movwf	fsr2l,c
 28509  0167C8  0E01               	movlw	high _HMIBoard
 28510  0167CA  0100               	movlb	0	; () banked
 28511  0167CC  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 28512  0167CE  6EDA               	movwf	fsr2h,c
 28513  0167D0  50DF               	movf	indf2,w,c
 28514  0167D2  ECE4  F0AB         	call	_OutSeg
 28515  0167D6  0100               	movlb	0	; () banked
 28516  0167D8  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 28517  0167DA  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 28518  0167DC  D7E7               	goto	l14749
 28519  0167DE                     l1158:
 28520                           
 28521                           ; BSR set to: 0
 28522  0167DE  0012               	return		;funcret
 28523  0167E0                     __end_of_HMI_Render:
 28524                           	opt stack 0
 28525                           tosu	equ	0xFFF
 28526                           tosh	equ	0xFFE
 28527                           tosl	equ	0xFFD
 28528                           pclath	equ	0xFFA
 28529                           tblptru	equ	0xFF8
 28530                           tblptrh	equ	0xFF7
 28531                           tblptrl	equ	0xFF6
 28532                           tablat	equ	0xFF5
 28533                           prodh	equ	0xFF4
 28534                           prodl	equ	0xFF3
 28535                           intcon	equ	0xFF2
 28536                           indf0	equ	0xFEF
 28537                           postinc0	equ	0xFEE
 28538                           fsr0h	equ	0xFEA
 28539                           fsr0l	equ	0xFE9
 28540                           wreg	equ	0xFE8
 28541                           indf1	equ	0xFE7
 28542                           postdec1	equ	0xFE5
 28543                           fsr1h	equ	0xFE2
 28544                           fsr1l	equ	0xFE1
 28545                           indf2	equ	0xFDF
 28546                           postinc2	equ	0xFDE
 28547                           postdec2	equ	0xFDD
 28548                           plusw2	equ	0xFDB
 28549                           fsr2h	equ	0xFDA
 28550                           fsr2l	equ	0xFD9
 28551                           status	equ	0xFD8
 28552                           
 28553 ;; *************** function _OutSeg *****************
 28554 ;; Defined at:
 28555 ;;		line 54 in file "HMI.c"
 28556 ;; Parameters:    Size  Location     Type
 28557 ;;  pInput          1    wreg     unsigned char 
 28558 ;;  pSegment        1    3[BANK0 ] unsigned char 
 28559 ;; Auto vars:     Size  Location     Type
 28560 ;;  pInput          1    6[BANK0 ] unsigned char 
 28561 ;;  out             1    7[BANK0 ] volatile unsigned char 
 28562 ;; Return value:  Size  Location     Type
 28563 ;;                  1    wreg      void 
 28564 ;; Registers used:
 28565 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28566 ;; Tracked objects:
 28567 ;;		On entry : 0/0
 28568 ;;		On exit  : 0/0
 28569 ;;		Unchanged: 0/0
 28570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28571 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28572 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28573 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28574 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28575 ;;Total ram usage:        5 bytes
 28576 ;; Hardware stack levels used:    1
 28577 ;; Hardware stack levels required when called:    8
 28578 ;; This function calls:
 28579 ;;		_SPI_Send
 28580 ;; This function is called by:
 28581 ;;		_HMI_Render
 28582 ;;		_HMI_GRender
 28583 ;; This function uses a non-reentrant model
 28584 ;;
 28585                           
 28586                           	psect	text145
 28587  0157C8                     __ptext145:
 28588                           	opt stack 0
 28589  0157C8                     _OutSeg:
 28590                           	opt stack 21
 28591                           
 28592                           ; BSR set to: 0
 28593                           ;incstack = 0
 28594                           ;OutSeg@pInput stored from wreg
 28595  0157C8  0100               	movlb	0	; () banked
 28596  0157CA  6F66               	movwf	OutSeg@pInput& (0+255),b
 28597                           
 28598                           ;HMI.c: 58: static UINT8 cur;
 28599                           ;HMI.c: 59: volatile UINT8 out;
 28600                           ;HMI.c: 60: static UINT8 segset;
 28601                           ;HMI.c: 61: static UINT8 a;
 28602                           ;HMI.c: 83: if (pSegment <= 8)
 28603  0157CC  0E09               	movlw	9
 28604  0157CE  0100               	movlb	0	; () banked
 28605  0157D0  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 28606  0157D2  0012               	return	
 28607                           
 28608                           ; BSR set to: 0
 28609                           ;HMI.c: 84: {
 28610                           ;HMI.c: 85: cur = pInput;
 28611  0157D4  C066  F040         	movff	OutSeg@pInput,OutSeg@cur
 28612                           
 28613                           ; BSR set to: 0
 28614                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 28615  0157D8  0E00               	movlw	0
 28616  0157DA  6E3E               	movwf	OutSeg@a,c
 28617  0157DC                     l14247:
 28618                           
 28619                           ; BSR set to: 0
 28620  0157DC  0E07               	movlw	7
 28621  0157DE  643E               	cpfsgt	OutSeg@a,c
 28622  0157E0  D001               	goto	l1146
 28623  0157E2  D027               	goto	u11750
 28624  0157E4                     l1146:
 28625                           
 28626                           ;HMI.c: 87: {
 28627                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 28628                           
 28629                           ; BSR set to: 0
 28630  0157E4  C040  F064         	movff	OutSeg@cur,??_OutSeg
 28631  0157E8  0E01               	movlw	1
 28632  0157EA  0100               	movlb	0	; () banked
 28633  0157EC  1764               	andwf	??_OutSeg& (0+255),f,b
 28634  0157EE  0E06               	movlw	6
 28635  0157F0  0100               	movlb	0	; () banked
 28636  0157F2  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 28637  0157F4                     u11745:
 28638  0157F4  0100               	movlb	0	; () banked
 28639  0157F6  90D8               	bcf	status,0,c
 28640  0157F8  3764               	rlcf	??_OutSeg& (0+255),f,b
 28641  0157FA  0100               	movlb	0	; () banked
 28642  0157FC  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 28643  0157FE  D7FA               	goto	u11745
 28644  015800  0100               	movlb	0	; () banked
 28645  015802  5164               	movf	??_OutSeg& (0+255),w,b
 28646  015804  6E3F               	movwf	OutSeg@segset,c
 28647                           
 28648                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 28649  015806  0100               	movlb	0	; () banked
 28650  015808  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 28651  01580A  42E8               	rrncf	wreg,f,c
 28652  01580C  0BF8               	andlw	248
 28653  01580E  103E               	iorwf	OutSeg@a,w,c
 28654  015810  103F               	iorwf	OutSeg@segset,w,c
 28655  015812  0100               	movlb	0	; () banked
 28656  015814  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 28657                           
 28658                           ;HMI.c: 90: cur >>= 1;
 28659  015816  90D8               	bcf	status,0,c
 28660  015818  3240               	rrcf	OutSeg@cur,f,c
 28661                           
 28662                           ; BSR set to: 0
 28663                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 28664  01581A  0E6A               	movlw	low _SPI1
 28665  01581C  0100               	movlb	0	; () banked
 28666  01581E  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28667  015820  0E01               	movlw	high _SPI1
 28668  015822  0100               	movlb	0	; () banked
 28669  015824  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28670  015826  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 28671  01582A  ECE6  F0AE         	call	_SPI_Send	;wreg free
 28672  01582E  2A3E               	incf	OutSeg@a,f,c
 28673  015830  D7D5               	goto	l14247
 28674  015832                     u11750:
 28675                           
 28676                           ;HMI.c: 96: }
 28677                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 28678  015832  0E6A               	movlw	low _SPI1
 28679  015834  0100               	movlb	0	; () banked
 28680  015836  6F60               	movwf	SPI_Send@pInput& (0+255),b
 28681  015838  0E01               	movlw	high _SPI1
 28682  01583A  0100               	movlb	0	; () banked
 28683  01583C  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 28684  01583E  0E00               	movlw	0
 28685  015840  0100               	movlb	0	; () banked
 28686  015842  6F62               	movwf	SPI_Send@pData& (0+255),b
 28687  015844  ECE6  F0AE         	call	_SPI_Send	;wreg free
 28688  015848  0012               	return	
 28689  01584A                     __end_of_OutSeg:
 28690                           	opt stack 0
 28691                           tosu	equ	0xFFF
 28692                           tosh	equ	0xFFE
 28693                           tosl	equ	0xFFD
 28694                           pclath	equ	0xFFA
 28695                           tblptru	equ	0xFF8
 28696                           tblptrh	equ	0xFF7
 28697                           tblptrl	equ	0xFF6
 28698                           tablat	equ	0xFF5
 28699                           prodh	equ	0xFF4
 28700                           prodl	equ	0xFF3
 28701                           intcon	equ	0xFF2
 28702                           indf0	equ	0xFEF
 28703                           postinc0	equ	0xFEE
 28704                           fsr0h	equ	0xFEA
 28705                           fsr0l	equ	0xFE9
 28706                           wreg	equ	0xFE8
 28707                           indf1	equ	0xFE7
 28708                           postdec1	equ	0xFE5
 28709                           fsr1h	equ	0xFE2
 28710                           fsr1l	equ	0xFE1
 28711                           indf2	equ	0xFDF
 28712                           postinc2	equ	0xFDE
 28713                           postdec2	equ	0xFDD
 28714                           plusw2	equ	0xFDB
 28715                           fsr2h	equ	0xFDA
 28716                           fsr2l	equ	0xFD9
 28717                           status	equ	0xFD8
 28718                           
 28719 ;; *************** function _Console_Render *****************
 28720 ;; Defined at:
 28721 ;;		line 377 in file "Library/Console.c"
 28722 ;; Parameters:    Size  Location     Type
 28723 ;;		None
 28724 ;; Auto vars:     Size  Location     Type
 28725 ;;  lCursor         4   38[BANK0 ] struct Point
 28726 ;;  y               1   43[BANK0 ] unsigned char 
 28727 ;;  x               1   42[BANK0 ] unsigned char 
 28728 ;;  temp            1   37[BANK0 ] unsigned char 
 28729 ;;  Temp            2    0        unsigned short 
 28730 ;; Return value:  Size  Location     Type
 28731 ;;                  1    wreg      void 
 28732 ;; Registers used:
 28733 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28734 ;; Tracked objects:
 28735 ;;		On entry : 0/0
 28736 ;;		On exit  : 0/0
 28737 ;;		Unchanged: 0/0
 28738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28740 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28741 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28742 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28743 ;;Total ram usage:        9 bytes
 28744 ;; Hardware stack levels used:    1
 28745 ;; Hardware stack levels required when called:   11
 28746 ;; This function calls:
 28747 ;;		_Console_MakeField
 28748 ;;		_LCD_DrawField
 28749 ;;		_LCD_FillRectangle
 28750 ;; This function is called by:
 28751 ;;		_main
 28752 ;; This function uses a non-reentrant model
 28753 ;;
 28754                           
 28755                           	psect	text146
 28756  011E84                     __ptext146:
 28757                           	opt stack 0
 28758  011E84                     _Console_Render:
 28759                           	opt stack 19
 28760                           
 28761                           ;Console.c: 379: Colour Temp;
 28762                           ;Console.c: 380: if (change)
 28763                           
 28764                           ;incstack = 0
 28765  011E84  504D               	movf	_change,w,c
 28766  011E86  B4D8               	btfsc	status,2,c
 28767  011E88  0012               	return	
 28768                           
 28769                           ;Console.c: 381: {
 28770                           ;Console.c: 382: UINT8 x, y, temp;
 28771                           ;Console.c: 383: Point lCursor = {6,6};
 28772  011E8A  C1E5  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 28773  011E8E  C1E6  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 28774  011E92  C1E7  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 28775  011E96  C1E8  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 28776                           
 28777                           ;Console.c: 385: if (clearall)
 28778  011E9A  0100               	movlb	0	; () banked
 28779  011E9C  51FC               	movf	_clearall& (0+255),w,b
 28780  011E9E  B4D8               	btfsc	status,2,c
 28781  011EA0  D005               	goto	l1056
 28782                           
 28783                           ; BSR set to: 0
 28784                           ;Console.c: 386: {
 28785                           ;Console.c: 389: temp = lBufferY;
 28786  011EA2  C0FA  F085         	movff	_lBufferY,Console_Render@temp
 28787                           
 28788                           ; BSR set to: 0
 28789                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 28790  011EA6  0E0F               	movlw	15
 28791  011EA8  0100               	movlb	0	; () banked
 28792  011EAA  6FFA               	movwf	_lBufferY& (0+255),b
 28793  011EAC                     l1056:
 28794                           
 28795                           ; BSR set to: 0
 28796                           ;Console.c: 391: }
 28797                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 28798  011EAC  0E00               	movlw	0
 28799  011EAE  0100               	movlb	0	; () banked
 28800  011EB0  6F8B               	movwf	Console_Render@y& (0+255),b
 28801  011EB2  D0DF               	goto	l1057
 28802  011EB4                     
 28803                           ; BSR set to: 0
 28804                           ;Console.c: 394: {
 28805                           ;Console.c: 395: gForecolour = lCBuffer[y];
 28806                           
 28807                           ; BSR set to: 0
 28808  011EB4  0100               	movlb	0	; () banked
 28809  011EB6  518B               	movf	Console_Render@y& (0+255),w,b
 28810  011EB8  0D02               	mullw	2
 28811  011EBA  0E00               	movlw	low _lCBuffer
 28812  011EBC  24F3               	addwf	prodl,w,c
 28813  011EBE  6ED9               	movwf	fsr2l,c
 28814  011EC0  0E02               	movlw	high _lCBuffer
 28815  011EC2  20F4               	addwfc	prodh,w,c
 28816  011EC4  6EDA               	movwf	fsr2h,c
 28817  011EC6  CFDE F1F5          	movff	postinc2,_gForecolour
 28818  011ECA  CFDD F1F6          	movff	postdec2,_gForecolour+1
 28819                           
 28820                           ; BSR set to: 0
 28821                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 28822  011ECE  0E00               	movlw	0
 28823  011ED0  0100               	movlb	0	; () banked
 28824  011ED2  6F8A               	movwf	Console_Render@x& (0+255),b
 28825  011ED4                     l14713:
 28826                           
 28827                           ; BSR set to: 0
 28828  011ED4  0E13               	movlw	19
 28829  011ED6  0100               	movlb	0	; () banked
 28830  011ED8  658A               	cpfsgt	Console_Render@x& (0+255),b
 28831  011EDA  D001               	goto	l1059
 28832  011EDC  D0BE               	goto	u12260
 28833  011EDE                     l1059:
 28834                           
 28835                           ; BSR set to: 0
 28836                           ;Console.c: 397: {
 28837                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 28838                           
 28839                           ; BSR set to: 0
 28840  011EDE  0100               	movlb	0	; () banked
 28841  011EE0  518B               	movf	Console_Render@y& (0+255),w,b
 28842  011EE2  0D14               	mullw	20
 28843  011EE4  0E8F               	movlw	low _lBuffer
 28844  011EE6  0100               	movlb	0	; () banked
 28845  011EE8  6F83               	movwf	??_Console_Render& (0+255),b
 28846  011EEA  0E02               	movlw	high _lBuffer
 28847  011EEC  0100               	movlb	0	; () banked
 28848  011EEE  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 28849  011EF0  50F3               	movf	prodl,w,c
 28850  011EF2  0100               	movlb	0	; () banked
 28851  011EF4  2783               	addwf	??_Console_Render& (0+255),f,b
 28852  011EF6  50F4               	movf	prodh,w,c
 28853  011EF8  0100               	movlb	0	; () banked
 28854  011EFA  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 28855  011EFC  0100               	movlb	0	; () banked
 28856  011EFE  518A               	movf	Console_Render@x& (0+255),w,b
 28857  011F00  0D01               	mullw	1
 28858  011F02  50F3               	movf	prodl,w,c
 28859  011F04  0100               	movlb	0	; () banked
 28860  011F06  2583               	addwf	??_Console_Render& (0+255),w,b
 28861  011F08  6ED9               	movwf	fsr2l,c
 28862  011F0A  50F4               	movf	prodh,w,c
 28863  011F0C  0100               	movlb	0	; () banked
 28864  011F0E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 28865  011F10  6EDA               	movwf	fsr2h,c
 28866  011F12  AEDF               	btfss	indf2,7,c
 28867  011F14  D09A               	goto	l1063
 28868                           
 28869                           ; BSR set to: 0
 28870                           ;Console.c: 399: {
 28871                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 28872  011F16  0100               	movlb	0	; () banked
 28873  011F18  518B               	movf	Console_Render@y& (0+255),w,b
 28874  011F1A  0D14               	mullw	20
 28875  011F1C  0E8F               	movlw	low _lBuffer
 28876  011F1E  0100               	movlb	0	; () banked
 28877  011F20  6F83               	movwf	??_Console_Render& (0+255),b
 28878  011F22  0E02               	movlw	high _lBuffer
 28879  011F24  0100               	movlb	0	; () banked
 28880  011F26  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 28881  011F28  50F3               	movf	prodl,w,c
 28882  011F2A  0100               	movlb	0	; () banked
 28883  011F2C  2783               	addwf	??_Console_Render& (0+255),f,b
 28884  011F2E  50F4               	movf	prodh,w,c
 28885  011F30  0100               	movlb	0	; () banked
 28886  011F32  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 28887  011F34  0100               	movlb	0	; () banked
 28888  011F36  518A               	movf	Console_Render@x& (0+255),w,b
 28889  011F38  0D01               	mullw	1
 28890  011F3A  50F3               	movf	prodl,w,c
 28891  011F3C  0100               	movlb	0	; () banked
 28892  011F3E  2583               	addwf	??_Console_Render& (0+255),w,b
 28893  011F40  6ED9               	movwf	fsr2l,c
 28894  011F42  50F4               	movf	prodh,w,c
 28895  011F44  0100               	movlb	0	; () banked
 28896  011F46  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 28897  011F48  6EDA               	movwf	fsr2h,c
 28898  011F4A  0E7F               	movlw	127
 28899  011F4C  16DF               	andwf	indf2,f,c
 28900                           
 28901                           ;Console.c: 401: if (lBuffer[y][x])
 28902  011F4E  0100               	movlb	0	; () banked
 28903  011F50  518B               	movf	Console_Render@y& (0+255),w,b
 28904  011F52  0D14               	mullw	20
 28905  011F54  0E8F               	movlw	low _lBuffer
 28906  011F56  0100               	movlb	0	; () banked
 28907  011F58  6F83               	movwf	??_Console_Render& (0+255),b
 28908  011F5A  0E02               	movlw	high _lBuffer
 28909  011F5C  0100               	movlb	0	; () banked
 28910  011F5E  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 28911  011F60  50F3               	movf	prodl,w,c
 28912  011F62  0100               	movlb	0	; () banked
 28913  011F64  2783               	addwf	??_Console_Render& (0+255),f,b
 28914  011F66  50F4               	movf	prodh,w,c
 28915  011F68  0100               	movlb	0	; () banked
 28916  011F6A  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 28917  011F6C  0100               	movlb	0	; () banked
 28918  011F6E  518A               	movf	Console_Render@x& (0+255),w,b
 28919  011F70  0D01               	mullw	1
 28920  011F72  50F3               	movf	prodl,w,c
 28921  011F74  0100               	movlb	0	; () banked
 28922  011F76  2583               	addwf	??_Console_Render& (0+255),w,b
 28923  011F78  6ED9               	movwf	fsr2l,c
 28924  011F7A  50F4               	movf	prodh,w,c
 28925  011F7C  0100               	movlb	0	; () banked
 28926  011F7E  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 28927  011F80  6EDA               	movwf	fsr2h,c
 28928  011F82  50DF               	movf	indf2,w,c
 28929  011F84  B4D8               	btfsc	status,2,c
 28930  011F86  D04A               	goto	l1062
 28931                           
 28932                           ; BSR set to: 0
 28933                           ;Console.c: 402: {
 28934                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 28935  011F88  C037  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 28936  011F8C  C038  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 28937  011F90  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 28938  011F94  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 28939  011F98  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 28940  011F9C  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 28941  011FA0  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 28942  011FA4  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 28943  011FA8  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 28944  011FAC  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 28945  011FB0  EC3E  F0AE         	call	_LCD_FillRectangle	;wreg free
 28946                           
 28947                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 28948  011FB4  0100               	movlb	0	; () banked
 28949  011FB6  518B               	movf	Console_Render@y& (0+255),w,b
 28950  011FB8  0D14               	mullw	20
 28951  011FBA  0E8F               	movlw	low _lBuffer
 28952  011FBC  0100               	movlb	0	; () banked
 28953  011FBE  6F83               	movwf	??_Console_Render& (0+255),b
 28954  011FC0  0E02               	movlw	high _lBuffer
 28955  011FC2  0100               	movlb	0	; () banked
 28956  011FC4  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 28957  011FC6  50F3               	movf	prodl,w,c
 28958  011FC8  0100               	movlb	0	; () banked
 28959  011FCA  2783               	addwf	??_Console_Render& (0+255),f,b
 28960  011FCC  50F4               	movf	prodh,w,c
 28961  011FCE  0100               	movlb	0	; () banked
 28962  011FD0  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 28963  011FD2  0100               	movlb	0	; () banked
 28964  011FD4  518A               	movf	Console_Render@x& (0+255),w,b
 28965  011FD6  0D01               	mullw	1
 28966  011FD8  50F3               	movf	prodl,w,c
 28967  011FDA  0100               	movlb	0	; () banked
 28968  011FDC  2583               	addwf	??_Console_Render& (0+255),w,b
 28969  011FDE  6ED9               	movwf	fsr2l,c
 28970  011FE0  50F4               	movf	prodh,w,c
 28971  011FE2  0100               	movlb	0	; () banked
 28972  011FE4  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 28973  011FE6  6EDA               	movwf	fsr2h,c
 28974  011FE8  50DF               	movf	indf2,w,c
 28975  011FEA  ECA5  F0A2         	call	_Console_MakeField
 28976  011FEE  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 28977  011FF2  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 28978  011FF6  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 28979  011FFA  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 28980  011FFE  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 28981  012002  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 28982  012006  C1ED  F078         	movff	_gCharSize,LCD_DrawField@pSize
 28983  01200A  C1EE  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 28984  01200E  C1EF  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 28985  012012  C1F0  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 28986  012016  ECB6  F0A8         	call	_LCD_DrawField	;wreg free
 28987                           
 28988                           ;Console.c: 405: }
 28989  01201A  D017               	goto	l1063
 28990  01201C                     l1062:
 28991                           
 28992                           ;Console.c: 406: else
 28993                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 28994  01201C  0E00               	movlw	0
 28995  01201E  0100               	movlb	0	; () banked
 28996  012020  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 28997  012022  0E00               	movlw	0
 28998  012024  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 28999  012026  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 29000  01202A  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 29001  01202E  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 29002  012032  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 29003  012036  C1ED  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 29004  01203A  C1EE  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 29005  01203E  C1EF  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 29006  012042  C1F0  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 29007  012046  EC3E  F0AE         	call	_LCD_FillRectangle	;wreg free
 29008  01204A                     l1063:
 29009                           
 29010                           ;Console.c: 408: }
 29011                           ;Console.c: 409: lCursor.x += (5 + 1);
 29012  01204A  0E06               	movlw	6
 29013  01204C  0100               	movlb	0	; () banked
 29014  01204E  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 29015  012050  0E00               	movlw	0
 29016  012052  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 29017                           
 29018                           ; BSR set to: 0
 29019  012054  0100               	movlb	0	; () banked
 29020  012056  2B8A               	incf	Console_Render@x& (0+255),f,b
 29021  012058  D73D               	goto	l14713
 29022  01205A                     u12260:
 29023                           
 29024                           ; BSR set to: 0
 29025                           ;Console.c: 410: }
 29026                           ;Console.c: 411: lCursor.y += (7 + 1);
 29027                           
 29028                           ; BSR set to: 0
 29029  01205A  0E08               	movlw	8
 29030  01205C  0100               	movlb	0	; () banked
 29031  01205E  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 29032  012060  0E00               	movlw	0
 29033  012062  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 29034                           
 29035                           ; BSR set to: 0
 29036                           ;Console.c: 412: lCursor.x = 6;
 29037  012064  0E00               	movlw	0
 29038  012066  0100               	movlb	0	; () banked
 29039  012068  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 29040  01206A  0E06               	movlw	6
 29041  01206C  6F86               	movwf	Console_Render@lCursor& (0+255),b
 29042                           
 29043                           ; BSR set to: 0
 29044  01206E  0100               	movlb	0	; () banked
 29045  012070  2B8B               	incf	Console_Render@y& (0+255),f,b
 29046  012072                     l1057:
 29047                           
 29048                           ; BSR set to: 0
 29049                           
 29050                           ; BSR set to: 0
 29051  012072  0100               	movlb	0	; () banked
 29052  012074  518B               	movf	Console_Render@y& (0+255),w,b
 29053  012076  0100               	movlb	0	; () banked
 29054  012078  5DFA               	subwf	_lBufferY& (0+255),w,b
 29055  01207A  B0D8               	btfsc	status,0,c
 29056  01207C  D71B               	goto	l1058
 29057                           
 29058                           ; BSR set to: 0
 29059                           ;Console.c: 413: }
 29060                           ;Console.c: 415: if (clearall)
 29061                           
 29062                           ; BSR set to: 0
 29063  01207E  0100               	movlb	0	; () banked
 29064  012080  51FC               	movf	_clearall& (0+255),w,b
 29065  012082  B4D8               	btfsc	status,2,c
 29066  012084  0012               	return	
 29067                           
 29068                           ; BSR set to: 0
 29069                           ;Console.c: 416: {
 29070                           ;Console.c: 417: clearall = 0;
 29071  012086  0E00               	movlw	0
 29072  012088  0100               	movlb	0	; () banked
 29073  01208A  6FFC               	movwf	_clearall& (0+255),b
 29074                           
 29075                           ; BSR set to: 0
 29076                           ;Console.c: 418: lBufferY = temp;
 29077  01208C  C085  F0FA         	movff	Console_Render@temp,_lBufferY
 29078                           
 29079                           ; BSR set to: 0
 29080  012090  0012               	return	
 29081  012092                     __end_of_Console_Render:
 29082                           	opt stack 0
 29083                           tosu	equ	0xFFF
 29084                           tosh	equ	0xFFE
 29085                           tosl	equ	0xFFD
 29086                           pclath	equ	0xFFA
 29087                           tblptru	equ	0xFF8
 29088                           tblptrh	equ	0xFF7
 29089                           tblptrl	equ	0xFF6
 29090                           tablat	equ	0xFF5
 29091                           prodh	equ	0xFF4
 29092                           prodl	equ	0xFF3
 29093                           intcon	equ	0xFF2
 29094                           indf0	equ	0xFEF
 29095                           postinc0	equ	0xFEE
 29096                           fsr0h	equ	0xFEA
 29097                           fsr0l	equ	0xFE9
 29098                           wreg	equ	0xFE8
 29099                           indf1	equ	0xFE7
 29100                           postdec1	equ	0xFE5
 29101                           fsr1h	equ	0xFE2
 29102                           fsr1l	equ	0xFE1
 29103                           indf2	equ	0xFDF
 29104                           postinc2	equ	0xFDE
 29105                           postdec2	equ	0xFDD
 29106                           plusw2	equ	0xFDB
 29107                           fsr2h	equ	0xFDA
 29108                           fsr2l	equ	0xFD9
 29109                           status	equ	0xFD8
 29110                           
 29111 ;; *************** function _LCD_FillRectangle *****************
 29112 ;; Defined at:
 29113 ;;		line 318 in file "Library/LCD.c"
 29114 ;; Parameters:    Size  Location     Type
 29115 ;;  pColour         2    9[BANK0 ] unsigned short 
 29116 ;;  pPoint          4   11[BANK0 ] struct Point
 29117 ;;  pSize           4   15[BANK0 ] struct Point
 29118 ;; Auto vars:     Size  Location     Type
 29119 ;;  j               1   22[BANK0 ] unsigned char 
 29120 ;;  i               1   21[BANK0 ] unsigned char 
 29121 ;; Return value:  Size  Location     Type
 29122 ;;                  1    wreg      void 
 29123 ;; Registers used:
 29124 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29125 ;; Tracked objects:
 29126 ;;		On entry : 0/0
 29127 ;;		On exit  : 0/0
 29128 ;;		Unchanged: 0/0
 29129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29130 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29132 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29133 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29134 ;;Total ram usage:       14 bytes
 29135 ;; Hardware stack levels used:    1
 29136 ;; Hardware stack levels required when called:   10
 29137 ;; This function calls:
 29138 ;;		_LCD_Word_Write
 29139 ;;		_Set_Addr_Window
 29140 ;; This function is called by:
 29141 ;;		_Console_Render
 29142 ;;		_Console_ClearLine
 29143 ;; This function uses a non-reentrant model
 29144 ;;
 29145                           
 29146                           	psect	text147
 29147  015C7C                     __ptext147:
 29148                           	opt stack 0
 29149  015C7C                     _LCD_FillRectangle:
 29150                           	opt stack 19
 29151                           
 29152                           ;LCD.c: 320: UINT8 i = 0x00;
 29153                           
 29154                           ;incstack = 0
 29155  015C7C  0E00               	movlw	0
 29156  015C7E  0100               	movlb	0	; () banked
 29157  015C80  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 29158                           
 29159                           ;LCD.c: 321: UINT8 j = 0x00;
 29160  015C82  0E00               	movlw	0
 29161  015C84  0100               	movlb	0	; () banked
 29162  015C86  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 29163                           
 29164                           ; BSR set to: 0
 29165                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 29166  015C88  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 29167  015C8C  0100               	movlb	0	; () banked
 29168  015C8E  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 29169  015C90  0100               	movlb	0	; () banked
 29170  015C92  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 29171  015C94  0100               	movlb	0	; () banked
 29172  015C96  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 29173  015C98  0100               	movlb	0	; () banked
 29174  015C9A  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 29175  015C9C  0100               	movlb	0	; () banked
 29176  015C9E  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 29177  015CA0  0100               	movlb	0	; () banked
 29178  015CA2  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 29179  015CA4  0100               	movlb	0	; () banked
 29180  015CA6  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 29181  015CA8  0100               	movlb	0	; () banked
 29182  015CAA  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 29183  015CAC  0100               	movlb	0	; () banked
 29184  015CAE  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 29185  015CB0  0100               	movlb	0	; () banked
 29186  015CB2  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 29187  015CB4  0100               	movlb	0	; () banked
 29188  015CB6  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 29189  015CB8  EC13  F0A7         	call	_Set_Addr_Window
 29190                           
 29191                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 29192  015CBC  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 29193  015CC0                     l14143:
 29194  015CC0  0100               	movlb	0	; () banked
 29195  015CC2  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 29196  015CC4  0100               	movlb	0	; () banked
 29197  015CC6  B4D8               	btfsc	status,2,c
 29198  015CC8  0012               	return	
 29199                           
 29200                           ; BSR set to: 0
 29201                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 29202                           
 29203                           ; BSR set to: 0
 29204  015CCA  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 29205  015CCE                     l14147:
 29206                           
 29207                           ; BSR set to: 0
 29208  015CCE  0100               	movlb	0	; () banked
 29209  015CD0  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 29210  015CD2  0100               	movlb	0	; () banked
 29211  015CD4  B4D8               	btfsc	status,2,c
 29212  015CD6  D009               	goto	u11600
 29213                           
 29214                           ; BSR set to: 0
 29215                           ;LCD.c: 333: LCD_Word_Write(pColour);
 29216                           
 29217                           ; BSR set to: 0
 29218                           
 29219                           ; BSR set to: 0
 29220  015CD8  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 29221  015CDC  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 29222  015CE0  EC3F  F0B6         	call	_LCD_Word_Write	;wreg free
 29223  015CE4  0100               	movlb	0	; () banked
 29224  015CE6  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 29225  015CE8  D7F2               	goto	l14147
 29226  015CEA                     u11600:
 29227                           
 29228                           ; BSR set to: 0
 29229                           
 29230                           ; BSR set to: 0
 29231  015CEA  0100               	movlb	0	; () banked
 29232  015CEC  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 29233  015CEE  D7E8               	goto	l14143
 29234  015CF0                     __end_of_LCD_FillRectangle:
 29235                           	opt stack 0
 29236                           tosu	equ	0xFFF
 29237                           tosh	equ	0xFFE
 29238                           tosl	equ	0xFFD
 29239                           pclath	equ	0xFFA
 29240                           tblptru	equ	0xFF8
 29241                           tblptrh	equ	0xFF7
 29242                           tblptrl	equ	0xFF6
 29243                           tablat	equ	0xFF5
 29244                           prodh	equ	0xFF4
 29245                           prodl	equ	0xFF3
 29246                           intcon	equ	0xFF2
 29247                           indf0	equ	0xFEF
 29248                           postinc0	equ	0xFEE
 29249                           fsr0h	equ	0xFEA
 29250                           fsr0l	equ	0xFE9
 29251                           wreg	equ	0xFE8
 29252                           indf1	equ	0xFE7
 29253                           postdec1	equ	0xFE5
 29254                           fsr1h	equ	0xFE2
 29255                           fsr1l	equ	0xFE1
 29256                           indf2	equ	0xFDF
 29257                           postinc2	equ	0xFDE
 29258                           postdec2	equ	0xFDD
 29259                           plusw2	equ	0xFDB
 29260                           fsr2h	equ	0xFDA
 29261                           fsr2l	equ	0xFD9
 29262                           status	equ	0xFD8
 29263                           
 29264 ;; *************** function _LCD_DrawField *****************
 29265 ;; Defined at:
 29266 ;;		line 393 in file "Library/LCD.c"
 29267 ;; Parameters:    Size  Location     Type
 29268 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 29269 ;;		 -> Console_MakeField@Fill(70), 
 29270 ;;  pPoint          4   20[BANK0 ] struct Point
 29271 ;;  pSize           4   24[BANK0 ] struct Point
 29272 ;; Auto vars:     Size  Location     Type
 29273 ;;  count           2   30[BANK0 ] unsigned short 
 29274 ;;  i               1   34[BANK0 ] unsigned char 
 29275 ;;  ymax            1   33[BANK0 ] unsigned char 
 29276 ;;  xmax            1   32[BANK0 ] unsigned char 
 29277 ;; Return value:  Size  Location     Type
 29278 ;;                  1    wreg      void 
 29279 ;; Registers used:
 29280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 29281 ;; Tracked objects:
 29282 ;;		On entry : 0/0
 29283 ;;		On exit  : 0/0
 29284 ;;		Unchanged: 0/0
 29285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29286 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29287 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29288 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29289 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29290 ;;Total ram usage:       17 bytes
 29291 ;; Hardware stack levels used:    1
 29292 ;; Hardware stack levels required when called:   10
 29293 ;; This function calls:
 29294 ;;		_LCD_Word_Write
 29295 ;;		_Set_Addr_Window
 29296 ;;		___wmul
 29297 ;; This function is called by:
 29298 ;;		_Console_Render
 29299 ;; This function uses a non-reentrant model
 29300 ;;
 29301                           
 29302                           	psect	text148
 29303  01516C                     __ptext148:
 29304                           	opt stack 0
 29305  01516C                     _LCD_DrawField:
 29306                           	opt stack 19
 29307                           
 29308                           ;LCD.c: 396: UINT8 i = 0x00;
 29309                           
 29310                           ; BSR set to: 0
 29311                           ;incstack = 0
 29312  01516C  0E00               	movlw	0
 29313  01516E  0100               	movlb	0	; () banked
 29314  015170  6F82               	movwf	LCD_DrawField@i& (0+255),b
 29315                           
 29316                           ; BSR set to: 0
 29317                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 29318  015172  0100               	movlb	0	; () banked
 29319  015174  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 29320  015176  0100               	movlb	0	; () banked
 29321  015178  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 29322  01517A  0100               	movlb	0	; () banked
 29323  01517C  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 29324                           
 29325                           ; BSR set to: 0
 29326                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 29327  01517E  0100               	movlb	0	; () banked
 29328  015180  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 29329  015182  0100               	movlb	0	; () banked
 29330  015184  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 29331  015186  0100               	movlb	0	; () banked
 29332  015188  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 29333                           
 29334                           ; BSR set to: 0
 29335                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 29336  01518A  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 29337  01518E  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 29338  015192  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 29339  015196  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 29340  01519A  EC46  F0B4         	call	___wmul	;wreg free
 29341  01519E  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 29342  0151A2  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 29343                           
 29344                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 29345  0151A6  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 29346  0151AA  0100               	movlb	0	; () banked
 29347  0151AC  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 29348  0151AE  0100               	movlb	0	; () banked
 29349  0151B0  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 29350  0151B2  0100               	movlb	0	; () banked
 29351  0151B4  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 29352  0151B6  0100               	movlb	0	; () banked
 29353  0151B8  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 29354  0151BA  0100               	movlb	0	; () banked
 29355  0151BC  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 29356  0151BE  EC13  F0A7         	call	_Set_Addr_Window
 29357                           
 29358                           ;LCD.c: 403: for(i = 0; i < count; i++)
 29359  0151C2  0E00               	movlw	0
 29360  0151C4  0100               	movlb	0	; () banked
 29361  0151C6  6F82               	movwf	LCD_DrawField@i& (0+255),b
 29362  0151C8  D013               	goto	l183
 29363  0151CA                     
 29364                           ; BSR set to: 0
 29365                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 29366                           
 29367                           ; BSR set to: 0
 29368  0151CA  0100               	movlb	0	; () banked
 29369  0151CC  5182               	movf	LCD_DrawField@i& (0+255),w,b
 29370  0151CE  0D02               	mullw	2
 29371  0151D0  50F3               	movf	prodl,w,c
 29372  0151D2  0100               	movlb	0	; () banked
 29373  0151D4  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 29374  0151D6  6ED9               	movwf	fsr2l,c
 29375  0151D8  50F4               	movf	prodh,w,c
 29376  0151DA  0100               	movlb	0	; () banked
 29377  0151DC  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 29378  0151DE  6EDA               	movwf	fsr2h,c
 29379  0151E0  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 29380  0151E4  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 29381  0151E8  EC3F  F0B6         	call	_LCD_Word_Write	;wreg free
 29382  0151EC  0100               	movlb	0	; () banked
 29383  0151EE  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 29384  0151F0                     l183:
 29385                           
 29386                           ; BSR set to: 0
 29387                           
 29388                           ; BSR set to: 0
 29389  0151F0  0100               	movlb	0	; () banked
 29390  0151F2  5182               	movf	LCD_DrawField@i& (0+255),w,b
 29391  0151F4  0100               	movlb	0	; () banked
 29392  0151F6  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 29393  0151F8  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 29394  0151FA  0100               	movlb	0	; () banked
 29395  0151FC  517E               	movf	LCD_DrawField@count& (0+255),w,b
 29396  0151FE  0100               	movlb	0	; () banked
 29397  015200  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 29398  015202  0100               	movlb	0	; () banked
 29399  015204  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 29400  015206  0100               	movlb	0	; () banked
 29401  015208  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 29402  01520A  B0D8               	btfsc	status,0,c
 29403  01520C  0012               	return	
 29404  01520E  D7DD               	goto	l184
 29405  015210                     __end_of_LCD_DrawField:
 29406                           	opt stack 0
 29407                           tosu	equ	0xFFF
 29408                           tosh	equ	0xFFE
 29409                           tosl	equ	0xFFD
 29410                           pclath	equ	0xFFA
 29411                           tblptru	equ	0xFF8
 29412                           tblptrh	equ	0xFF7
 29413                           tblptrl	equ	0xFF6
 29414                           tablat	equ	0xFF5
 29415                           prodh	equ	0xFF4
 29416                           prodl	equ	0xFF3
 29417                           intcon	equ	0xFF2
 29418                           indf0	equ	0xFEF
 29419                           postinc0	equ	0xFEE
 29420                           fsr0h	equ	0xFEA
 29421                           fsr0l	equ	0xFE9
 29422                           wreg	equ	0xFE8
 29423                           indf1	equ	0xFE7
 29424                           postdec1	equ	0xFE5
 29425                           fsr1h	equ	0xFE2
 29426                           fsr1l	equ	0xFE1
 29427                           indf2	equ	0xFDF
 29428                           postinc2	equ	0xFDE
 29429                           postdec2	equ	0xFDD
 29430                           plusw2	equ	0xFDB
 29431                           fsr2h	equ	0xFDA
 29432                           fsr2l	equ	0xFD9
 29433                           status	equ	0xFD8
 29434                           
 29435 ;; *************** function ___wmul *****************
 29436 ;; Defined at:
 29437 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 29438 ;; Parameters:    Size  Location     Type
 29439 ;;  multiplier      2    0[BANK0 ] unsigned int 
 29440 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 29441 ;; Auto vars:     Size  Location     Type
 29442 ;;  product         2    4[BANK0 ] unsigned int 
 29443 ;; Return value:  Size  Location     Type
 29444 ;;                  2    0[BANK0 ] unsigned int 
 29445 ;; Registers used:
 29446 ;;		wreg, status,2, status,0, prodl, prodh
 29447 ;; Tracked objects:
 29448 ;;		On entry : 0/0
 29449 ;;		On exit  : 0/0
 29450 ;;		Unchanged: 0/0
 29451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29452 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29453 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29455 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29456 ;;Total ram usage:        6 bytes
 29457 ;; Hardware stack levels used:    1
 29458 ;; Hardware stack levels required when called:    7
 29459 ;; This function calls:
 29460 ;;		Nothing
 29461 ;; This function is called by:
 29462 ;;		_LCD_DrawField
 29463 ;;		_displayPositionMode
 29464 ;; This function uses a non-reentrant model
 29465 ;;
 29466                           
 29467                           	psect	text149
 29468  01688C                     __ptext149:
 29469                           	opt stack 0
 29470  01688C                     ___wmul:
 29471                           	opt stack 22
 29472                           
 29473                           ; BSR set to: 0
 29474                           ;incstack = 0
 29475  01688C  0100               	movlb	0	; () banked
 29476  01688E  5160               	movf	___wmul@multiplier& (0+255),w,b
 29477  016890  0100               	movlb	0	; () banked
 29478  016892  0362               	mulwf	___wmul@multiplicand& (0+255),b
 29479  016894  CFF3 F064          	movff	prodl,___wmul@product
 29480  016898  CFF4 F065          	movff	prodh,___wmul@product+1
 29481  01689C  0100               	movlb	0	; () banked
 29482  01689E  5160               	movf	___wmul@multiplier& (0+255),w,b
 29483  0168A0  0100               	movlb	0	; () banked
 29484  0168A2  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 29485  0168A4  50F3               	movf	prodl,w,c
 29486  0168A6  0100               	movlb	0	; () banked
 29487  0168A8  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 29488  0168AA  0100               	movlb	0	; () banked
 29489  0168AC  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 29490  0168AE  0100               	movlb	0	; () banked
 29491  0168B0  0362               	mulwf	___wmul@multiplicand& (0+255),b
 29492  0168B2  50F3               	movf	prodl,w,c
 29493  0168B4  0100               	movlb	0	; () banked
 29494  0168B6  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 29495                           
 29496                           ; BSR set to: 0
 29497  0168B8  C064  F060         	movff	___wmul@product,?___wmul
 29498  0168BC  C065  F061         	movff	___wmul@product+1,?___wmul+1
 29499  0168C0  0012               	return	
 29500  0168C2                     __end_of___wmul:
 29501                           	opt stack 0
 29502                           tosu	equ	0xFFF
 29503                           tosh	equ	0xFFE
 29504                           tosl	equ	0xFFD
 29505                           pclath	equ	0xFFA
 29506                           tblptru	equ	0xFF8
 29507                           tblptrh	equ	0xFF7
 29508                           tblptrl	equ	0xFF6
 29509                           tablat	equ	0xFF5
 29510                           prodh	equ	0xFF4
 29511                           prodl	equ	0xFF3
 29512                           intcon	equ	0xFF2
 29513                           indf0	equ	0xFEF
 29514                           postinc0	equ	0xFEE
 29515                           fsr0h	equ	0xFEA
 29516                           fsr0l	equ	0xFE9
 29517                           wreg	equ	0xFE8
 29518                           indf1	equ	0xFE7
 29519                           postdec1	equ	0xFE5
 29520                           fsr1h	equ	0xFE2
 29521                           fsr1l	equ	0xFE1
 29522                           indf2	equ	0xFDF
 29523                           postinc2	equ	0xFDE
 29524                           postdec2	equ	0xFDD
 29525                           plusw2	equ	0xFDB
 29526                           fsr2h	equ	0xFDA
 29527                           fsr2l	equ	0xFD9
 29528                           status	equ	0xFD8
 29529                           
 29530 ;; *************** function _Set_Addr_Window *****************
 29531 ;; Defined at:
 29532 ;;		line 214 in file "Library/LCD.c"
 29533 ;; Parameters:    Size  Location     Type
 29534 ;;  xs              1    wreg     unsigned char 
 29535 ;;  ys              1    5[BANK0 ] unsigned char 
 29536 ;;  xe              1    6[BANK0 ] unsigned char 
 29537 ;;  ye              1    7[BANK0 ] unsigned char 
 29538 ;; Auto vars:     Size  Location     Type
 29539 ;;  xs              1    8[BANK0 ] unsigned char 
 29540 ;; Return value:  Size  Location     Type
 29541 ;;                  1    wreg      void 
 29542 ;; Registers used:
 29543 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29544 ;; Tracked objects:
 29545 ;;		On entry : 0/0
 29546 ;;		On exit  : 0/0
 29547 ;;		Unchanged: 0/0
 29548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29549 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29550 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29552 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29553 ;;Total ram usage:        4 bytes
 29554 ;; Hardware stack levels used:    1
 29555 ;; Hardware stack levels required when called:    9
 29556 ;; This function calls:
 29557 ;;		_LCD_Write
 29558 ;; This function is called by:
 29559 ;;		_LCD_Fill
 29560 ;;		_LCD_FillRectangle
 29561 ;;		_LCD_DrawField
 29562 ;;		_RAM_Address_Set
 29563 ;;		_LCD_DrawPixel
 29564 ;; This function uses a non-reentrant model
 29565 ;;
 29566                           
 29567                           	psect	text150
 29568  014E26                     __ptext150:
 29569                           	opt stack 0
 29570  014E26                     _Set_Addr_Window:
 29571                           	opt stack 18
 29572                           
 29573                           ; BSR set to: 0
 29574                           ;incstack = 0
 29575                           ;Set_Addr_Window@xs stored from wreg
 29576  014E26  0100               	movlb	0	; () banked
 29577  014E28  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 29578                           
 29579                           ;LCD.c: 216: ys+=2;
 29580  014E2A  0E02               	movlw	2
 29581  014E2C  0100               	movlb	0	; () banked
 29582  014E2E  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 29583                           
 29584                           ;LCD.c: 217: ye+=2;
 29585  014E30  0E02               	movlw	2
 29586  014E32  0100               	movlb	0	; () banked
 29587  014E34  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 29588                           
 29589                           ;LCD.c: 218: xs+=3;
 29590  014E36  0E03               	movlw	3
 29591  014E38  0100               	movlb	0	; () banked
 29592  014E3A  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 29593                           
 29594                           ;LCD.c: 219: xe+=3;
 29595  014E3C  0E03               	movlw	3
 29596  014E3E  0100               	movlb	0	; () banked
 29597  014E40  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 29598                           
 29599                           ; BSR set to: 0
 29600                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 29601  014E42  0E00               	movlw	0
 29602  014E44  0100               	movlb	0	; () banked
 29603  014E46  6F63               	movwf	LCD_Write@mode& (0+255),b
 29604  014E48  0E2A               	movlw	42
 29605  014E4A  ECC4  F0B5         	call	_LCD_Write
 29606                           
 29607                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 29608  014E4E  0E01               	movlw	1
 29609  014E50  0100               	movlb	0	; () banked
 29610  014E52  6F63               	movwf	LCD_Write@mode& (0+255),b
 29611  014E54  0E00               	movlw	0
 29612  014E56  ECC4  F0B5         	call	_LCD_Write
 29613                           
 29614                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 29615  014E5A  0E01               	movlw	1
 29616  014E5C  0100               	movlb	0	; () banked
 29617  014E5E  6F63               	movwf	LCD_Write@mode& (0+255),b
 29618  014E60  0100               	movlb	0	; () banked
 29619  014E62  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 29620  014E64  ECC4  F0B5         	call	_LCD_Write
 29621                           
 29622                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 29623  014E68  0E01               	movlw	1
 29624  014E6A  0100               	movlb	0	; () banked
 29625  014E6C  6F63               	movwf	LCD_Write@mode& (0+255),b
 29626  014E6E  0E00               	movlw	0
 29627  014E70  ECC4  F0B5         	call	_LCD_Write
 29628                           
 29629                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 29630  014E74  0E01               	movlw	1
 29631  014E76  0100               	movlb	0	; () banked
 29632  014E78  6F63               	movwf	LCD_Write@mode& (0+255),b
 29633  014E7A  0100               	movlb	0	; () banked
 29634  014E7C  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 29635  014E7E  ECC4  F0B5         	call	_LCD_Write
 29636                           
 29637                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 29638  014E82  0E00               	movlw	0
 29639  014E84  0100               	movlb	0	; () banked
 29640  014E86  6F63               	movwf	LCD_Write@mode& (0+255),b
 29641  014E88  0E2B               	movlw	43
 29642  014E8A  ECC4  F0B5         	call	_LCD_Write
 29643                           
 29644                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 29645  014E8E  0E01               	movlw	1
 29646  014E90  0100               	movlb	0	; () banked
 29647  014E92  6F63               	movwf	LCD_Write@mode& (0+255),b
 29648  014E94  0E00               	movlw	0
 29649  014E96  ECC4  F0B5         	call	_LCD_Write
 29650                           
 29651                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 29652  014E9A  0E01               	movlw	1
 29653  014E9C  0100               	movlb	0	; () banked
 29654  014E9E  6F63               	movwf	LCD_Write@mode& (0+255),b
 29655  014EA0  0100               	movlb	0	; () banked
 29656  014EA2  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 29657  014EA4  ECC4  F0B5         	call	_LCD_Write
 29658                           
 29659                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 29660  014EA8  0E01               	movlw	1
 29661  014EAA  0100               	movlb	0	; () banked
 29662  014EAC  6F63               	movwf	LCD_Write@mode& (0+255),b
 29663  014EAE  0E00               	movlw	0
 29664  014EB0  ECC4  F0B5         	call	_LCD_Write
 29665                           
 29666                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 29667  014EB4  0E01               	movlw	1
 29668  014EB6  0100               	movlb	0	; () banked
 29669  014EB8  6F63               	movwf	LCD_Write@mode& (0+255),b
 29670  014EBA  0100               	movlb	0	; () banked
 29671  014EBC  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 29672  014EBE  ECC4  F0B5         	call	_LCD_Write
 29673                           
 29674                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 29675  014EC2  0E00               	movlw	0
 29676  014EC4  0100               	movlb	0	; () banked
 29677  014EC6  6F63               	movwf	LCD_Write@mode& (0+255),b
 29678  014EC8  0E2C               	movlw	44
 29679  014ECA  ECC4  F0B5         	call	_LCD_Write
 29680  014ECE  0012               	return		;funcret
 29681  014ED0                     __end_of_Set_Addr_Window:
 29682                           	opt stack 0
 29683                           tosu	equ	0xFFF
 29684                           tosh	equ	0xFFE
 29685                           tosl	equ	0xFFD
 29686                           pclath	equ	0xFFA
 29687                           tblptru	equ	0xFF8
 29688                           tblptrh	equ	0xFF7
 29689                           tblptrl	equ	0xFF6
 29690                           tablat	equ	0xFF5
 29691                           prodh	equ	0xFF4
 29692                           prodl	equ	0xFF3
 29693                           intcon	equ	0xFF2
 29694                           indf0	equ	0xFEF
 29695                           postinc0	equ	0xFEE
 29696                           fsr0h	equ	0xFEA
 29697                           fsr0l	equ	0xFE9
 29698                           wreg	equ	0xFE8
 29699                           indf1	equ	0xFE7
 29700                           postdec1	equ	0xFE5
 29701                           fsr1h	equ	0xFE2
 29702                           fsr1l	equ	0xFE1
 29703                           indf2	equ	0xFDF
 29704                           postinc2	equ	0xFDE
 29705                           postdec2	equ	0xFDD
 29706                           plusw2	equ	0xFDB
 29707                           fsr2h	equ	0xFDA
 29708                           fsr2l	equ	0xFD9
 29709                           status	equ	0xFD8
 29710                           
 29711 ;; *************** function _LCD_Word_Write *****************
 29712 ;; Defined at:
 29713 ;;		line 198 in file "Library/LCD.c"
 29714 ;; Parameters:    Size  Location     Type
 29715 ;;  value           2    5[BANK0 ] unsigned short 
 29716 ;; Auto vars:     Size  Location     Type
 29717 ;;		None
 29718 ;; Return value:  Size  Location     Type
 29719 ;;                  1    wreg      void 
 29720 ;; Registers used:
 29721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29722 ;; Tracked objects:
 29723 ;;		On entry : 0/0
 29724 ;;		On exit  : 0/0
 29725 ;;		Unchanged: 0/0
 29726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29727 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29731 ;;Total ram usage:        2 bytes
 29732 ;; Hardware stack levels used:    1
 29733 ;; Hardware stack levels required when called:    9
 29734 ;; This function calls:
 29735 ;;		_LCD_Write
 29736 ;; This function is called by:
 29737 ;;		_LCD_Fill
 29738 ;;		_LCD_FillRectangle
 29739 ;;		_LCD_DrawField
 29740 ;;		_LCD_DrawPixel
 29741 ;; This function uses a non-reentrant model
 29742 ;;
 29743                           
 29744                           	psect	text151
 29745  016C7E                     __ptext151:
 29746                           	opt stack 0
 29747  016C7E                     _LCD_Word_Write:
 29748                           	opt stack 18
 29749                           
 29750                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 29751                           
 29752                           ;incstack = 0
 29753  016C7E  0E01               	movlw	1
 29754  016C80  0100               	movlb	0	; () banked
 29755  016C82  6F63               	movwf	LCD_Write@mode& (0+255),b
 29756  016C84  0100               	movlb	0	; () banked
 29757  016C86  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 29758  016C88  ECC4  F0B5         	call	_LCD_Write
 29759                           
 29760                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 29761  016C8C  0E01               	movlw	1
 29762  016C8E  0100               	movlb	0	; () banked
 29763  016C90  6F63               	movwf	LCD_Write@mode& (0+255),b
 29764  016C92  0100               	movlb	0	; () banked
 29765  016C94  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 29766  016C96  ECC4  F0B5         	call	_LCD_Write
 29767  016C9A  0012               	return		;funcret
 29768  016C9C                     __end_of_LCD_Word_Write:
 29769                           	opt stack 0
 29770                           tosu	equ	0xFFF
 29771                           tosh	equ	0xFFE
 29772                           tosl	equ	0xFFD
 29773                           pclath	equ	0xFFA
 29774                           tblptru	equ	0xFF8
 29775                           tblptrh	equ	0xFF7
 29776                           tblptrl	equ	0xFF6
 29777                           tablat	equ	0xFF5
 29778                           prodh	equ	0xFF4
 29779                           prodl	equ	0xFF3
 29780                           intcon	equ	0xFF2
 29781                           indf0	equ	0xFEF
 29782                           postinc0	equ	0xFEE
 29783                           fsr0h	equ	0xFEA
 29784                           fsr0l	equ	0xFE9
 29785                           wreg	equ	0xFE8
 29786                           indf1	equ	0xFE7
 29787                           postdec1	equ	0xFE5
 29788                           fsr1h	equ	0xFE2
 29789                           fsr1l	equ	0xFE1
 29790                           indf2	equ	0xFDF
 29791                           postinc2	equ	0xFDE
 29792                           postdec2	equ	0xFDD
 29793                           plusw2	equ	0xFDB
 29794                           fsr2h	equ	0xFDA
 29795                           fsr2l	equ	0xFD9
 29796                           status	equ	0xFD8
 29797                           
 29798 ;; *************** function _LCD_Write *****************
 29799 ;; Defined at:
 29800 ;;		line 67 in file "Library/LCD.c"
 29801 ;; Parameters:    Size  Location     Type
 29802 ;;  value           1    wreg     unsigned char 
 29803 ;;  mode            1    3[BANK0 ] enum E6761
 29804 ;; Auto vars:     Size  Location     Type
 29805 ;;  value           1    4[BANK0 ] unsigned char 
 29806 ;; Return value:  Size  Location     Type
 29807 ;;                  1    wreg      void 
 29808 ;; Registers used:
 29809 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 29810 ;; Tracked objects:
 29811 ;;		On entry : 0/0
 29812 ;;		On exit  : 0/0
 29813 ;;		Unchanged: 0/0
 29814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29815 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29818 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29819 ;;Total ram usage:        2 bytes
 29820 ;; Hardware stack levels used:    1
 29821 ;; Hardware stack levels required when called:    8
 29822 ;; This function calls:
 29823 ;;		_Mode_Set
 29824 ;;		_SPI_Send
 29825 ;; This function is called by:
 29826 ;;		_LCD_Init
 29827 ;;		_LCD_Word_Write
 29828 ;;		_Set_Addr_Window
 29829 ;;		_Set_Rotation
 29830 ;;		_LCD_WriteCMD
 29831 ;;		_LCD_WriteData
 29832 ;;		_LCD_Data_Write
 29833 ;;		_LCD_Data_Write_4k
 29834 ;;		_Invert_Display
 29835 ;; This function uses a non-reentrant model
 29836 ;;
 29837                           
 29838                           	psect	text152
 29839  016B88                     __ptext152:
 29840                           	opt stack 0
 29841  016B88                     _LCD_Write:
 29842                           	opt stack 19
 29843                           
 29844                           ;incstack = 0
 29845                           ;LCD_Write@value stored from wreg
 29846  016B88  0100               	movlb	0	; () banked
 29847  016B8A  6F64               	movwf	LCD_Write@value& (0+255),b
 29848                           
 29849                           ;LCD.c: 89: Mode_Set(mode);
 29850  016B8C  0100               	movlb	0	; () banked
 29851  016B8E  5163               	movf	LCD_Write@mode& (0+255),w,b
 29852  016B90  ECE8  F0B6         	call	_Mode_Set
 29853                           
 29854                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 29855  016B94  0E75               	movlw	low _SPI2
 29856  016B96  0100               	movlb	0	; () banked
 29857  016B98  6F60               	movwf	SPI_Send@pInput& (0+255),b
 29858  016B9A  0E01               	movlw	high _SPI2
 29859  016B9C  0100               	movlb	0	; () banked
 29860  016B9E  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 29861  016BA0  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 29862  016BA4  ECE6  F0AE         	call	_SPI_Send	;wreg free
 29863  016BA8  0012               	return		;funcret
 29864  016BAA                     __end_of_LCD_Write:
 29865                           	opt stack 0
 29866                           tosu	equ	0xFFF
 29867                           tosh	equ	0xFFE
 29868                           tosl	equ	0xFFD
 29869                           pclath	equ	0xFFA
 29870                           tblptru	equ	0xFF8
 29871                           tblptrh	equ	0xFF7
 29872                           tblptrl	equ	0xFF6
 29873                           tablat	equ	0xFF5
 29874                           prodh	equ	0xFF4
 29875                           prodl	equ	0xFF3
 29876                           intcon	equ	0xFF2
 29877                           indf0	equ	0xFEF
 29878                           postinc0	equ	0xFEE
 29879                           fsr0h	equ	0xFEA
 29880                           fsr0l	equ	0xFE9
 29881                           wreg	equ	0xFE8
 29882                           indf1	equ	0xFE7
 29883                           postdec1	equ	0xFE5
 29884                           fsr1h	equ	0xFE2
 29885                           fsr1l	equ	0xFE1
 29886                           indf2	equ	0xFDF
 29887                           postinc2	equ	0xFDE
 29888                           postdec2	equ	0xFDD
 29889                           plusw2	equ	0xFDB
 29890                           fsr2h	equ	0xFDA
 29891                           fsr2l	equ	0xFD9
 29892                           status	equ	0xFD8
 29893                           
 29894 ;; *************** function _SPI_Send *****************
 29895 ;; Defined at:
 29896 ;;		line 226 in file "Library/SPI.c"
 29897 ;; Parameters:    Size  Location     Type
 29898 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 29899 ;;		 -> SPI1(11), SPI2(11), 
 29900 ;;  pData           1    2[BANK0 ] unsigned char 
 29901 ;; Auto vars:     Size  Location     Type
 29902 ;;		None
 29903 ;; Return value:  Size  Location     Type
 29904 ;;                  1    wreg      unsigned char 
 29905 ;; Registers used:
 29906 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29907 ;; Tracked objects:
 29908 ;;		On entry : 0/0
 29909 ;;		On exit  : 0/0
 29910 ;;		Unchanged: 0/0
 29911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29912 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29915 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29916 ;;Total ram usage:        3 bytes
 29917 ;; Hardware stack levels used:    1
 29918 ;; Hardware stack levels required when called:    7
 29919 ;; This function calls:
 29920 ;;		Nothing
 29921 ;; This function is called by:
 29922 ;;		_LCD_Write
 29923 ;;		_OutSeg
 29924 ;; This function uses a non-reentrant model
 29925 ;;
 29926                           
 29927                           	psect	text153
 29928  015DCC                     __ptext153:
 29929                           	opt stack 0
 29930  015DCC                     _SPI_Send:
 29931                           	opt stack 19
 29932                           
 29933                           ;SPI.c: 253: switch (pInput->mChannel)
 29934                           
 29935                           ;incstack = 0
 29936  015DCC  D026               	goto	l678
 29937  015DCE                     
 29938                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 29939  015DCE  C1AC  FFD9         	movff	_PortC+4,fsr2l
 29940  015DD2  C1AD  FFDA         	movff	_PortC+5,fsr2h
 29941  015DD6  0101               	movlb	1	; () banked
 29942  015DD8  94DF               	bcf	indf2,2,c
 29943                           
 29944                           ; BSR set to: 1
 29945                           ;SPI.c: 257: SSP1BUF = pData;
 29946  015DDA  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 29947  015DDE                     
 29948                           ; BSR set to: 1
 29949  015DDE  A0C7               	btfss	4039,0,c	;volatile
 29950  015DE0  D7FE               	goto	l681
 29951                           
 29952                           ;SPI.c: 259: pData = SSP1BUF;
 29953  015DE2  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 29954                           
 29955                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 29956  015DE6  C1AC  FFD9         	movff	_PortC+4,fsr2l
 29957  015DEA  C1AD  FFDA         	movff	_PortC+5,fsr2h
 29958  015DEE  0101               	movlb	1	; () banked
 29959  015DF0  84DF               	bsf	indf2,2,c
 29960                           
 29961                           ; BSR set to: 1
 29962                           ;SPI.c: 261: return pData;
 29963                           ;	Return value of _SPI_Send is never used
 29964  015DF2  0012               	return	
 29965  015DF4                     
 29966                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 29967                           
 29968                           ; BSR set to: 1
 29969  015DF4  C198  FFD9         	movff	_PortD+4,fsr2l
 29970  015DF8  C199  FFDA         	movff	_PortD+5,fsr2h
 29971  015DFC  0101               	movlb	1	; () banked
 29972  015DFE  9EDF               	bcf	indf2,7,c
 29973                           
 29974                           ; BSR set to: 1
 29975                           ;SPI.c: 264: SSP2BUF = pData;
 29976  015E00  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 29977  015E04                     
 29978                           ; BSR set to: 1
 29979  015E04  A06D               	btfss	3949,0,c	;volatile
 29980  015E06  D7FE               	goto	l686
 29981                           
 29982                           ;SPI.c: 266: pData = SSP2BUF;
 29983  015E08  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 29984                           
 29985                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 29986  015E0C  C198  FFD9         	movff	_PortD+4,fsr2l
 29987  015E10  C199  FFDA         	movff	_PortD+5,fsr2h
 29988  015E14  0101               	movlb	1	; () banked
 29989  015E16  8EDF               	bsf	indf2,7,c
 29990                           
 29991                           ; BSR set to: 1
 29992                           ;SPI.c: 269: };
 29993                           
 29994                           ; BSR set to: 1
 29995                           ;SPI.c: 268: return pData;
 29996                           ;	Return value of _SPI_Send is never used
 29997  015E18  0012               	return	
 29998  015E1A                     l678:
 29999                           
 30000                           ; BSR set to: 1
 30001  015E1A  0100               	movlb	0	; () banked
 30002  015E1C  EE20 F002          	lfsr	2,2
 30003  015E20  5160               	movf	SPI_Send@pInput& (0+255),w,b
 30004  015E22  26D9               	addwf	fsr2l,f,c
 30005  015E24  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 30006  015E26  22DA               	addwfc	fsr2h,f,c
 30007  015E28  50DF               	movf	indf2,w,c
 30008                           
 30009                           ; Switch size 1, requested type "space"
 30010                           ; Number of cases is 2, Range of values is 0 to 1
 30011                           ; switch strategies available:
 30012                           ; Name         Instructions Cycles
 30013                           ; simple_byte            7     4 (average)
 30014                           ;	Chosen strategy is simple_byte
 30015  015E2A  0A00               	xorlw	0	; case 0
 30016  015E2C  B4D8               	btfsc	status,2,c
 30017  015E2E  D7CF               	goto	l679
 30018  015E30  0A01               	xorlw	1	; case 1
 30019  015E32  A4D8               	btfss	status,2,c
 30020  015E34  0012               	return	
 30021  015E36  D7DE               	goto	l684
 30022  015E38                     __end_of_SPI_Send:
 30023                           	opt stack 0
 30024                           tosu	equ	0xFFF
 30025                           tosh	equ	0xFFE
 30026                           tosl	equ	0xFFD
 30027                           pclath	equ	0xFFA
 30028                           tblptru	equ	0xFF8
 30029                           tblptrh	equ	0xFF7
 30030                           tblptrl	equ	0xFF6
 30031                           tablat	equ	0xFF5
 30032                           prodh	equ	0xFF4
 30033                           prodl	equ	0xFF3
 30034                           intcon	equ	0xFF2
 30035                           indf0	equ	0xFEF
 30036                           postinc0	equ	0xFEE
 30037                           fsr0h	equ	0xFEA
 30038                           fsr0l	equ	0xFE9
 30039                           wreg	equ	0xFE8
 30040                           indf1	equ	0xFE7
 30041                           postdec1	equ	0xFE5
 30042                           fsr1h	equ	0xFE2
 30043                           fsr1l	equ	0xFE1
 30044                           indf2	equ	0xFDF
 30045                           postinc2	equ	0xFDE
 30046                           postdec2	equ	0xFDD
 30047                           plusw2	equ	0xFDB
 30048                           fsr2h	equ	0xFDA
 30049                           fsr2l	equ	0xFD9
 30050                           status	equ	0xFD8
 30051                           
 30052 ;; *************** function _Mode_Set *****************
 30053 ;; Defined at:
 30054 ;;		line 40 in file "Library/LCD.c"
 30055 ;; Parameters:    Size  Location     Type
 30056 ;;  pMode           1    wreg     enum E6761
 30057 ;; Auto vars:     Size  Location     Type
 30058 ;;  pMode           1    0[BANK0 ] enum E6761
 30059 ;; Return value:  Size  Location     Type
 30060 ;;                  1    wreg      void 
 30061 ;; Registers used:
 30062 ;;		wreg
 30063 ;; Tracked objects:
 30064 ;;		On entry : 0/0
 30065 ;;		On exit  : 0/0
 30066 ;;		Unchanged: 0/0
 30067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30068 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30069 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30070 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30071 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30072 ;;Total ram usage:        1 bytes
 30073 ;; Hardware stack levels used:    1
 30074 ;; Hardware stack levels required when called:    7
 30075 ;; This function calls:
 30076 ;;		Nothing
 30077 ;; This function is called by:
 30078 ;;		_LCD_Write
 30079 ;; This function uses a non-reentrant model
 30080 ;;
 30081                           
 30082                           	psect	text154
 30083  016DD0                     __ptext154:
 30084                           	opt stack 0
 30085  016DD0                     _Mode_Set:
 30086                           	opt stack 19
 30087                           
 30088                           ;incstack = 0
 30089                           ;Mode_Set@pMode stored from wreg
 30090  016DD0  0100               	movlb	0	; () banked
 30091  016DD2  6F60               	movwf	Mode_Set@pMode& (0+255),b
 30092                           
 30093                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 30094  016DD4  0100               	movlb	0	; () banked
 30095  016DD6  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 30096  016DD8  D002               	bra	u9325
 30097  016DDA  9E85               	bcf	3973,7,c	;volatile
 30098  016DDC  D001               	bra	u9326
 30099  016DDE                     u9325:
 30100  016DDE  8E85               	bsf	3973,7,c	;volatile
 30101  016DE0                     u9326:
 30102  016DE0  0012               	return		;funcret
 30103  016DE2                     __end_of_Mode_Set:
 30104                           	opt stack 0
 30105                           tosu	equ	0xFFF
 30106                           tosh	equ	0xFFE
 30107                           tosl	equ	0xFFD
 30108                           pclath	equ	0xFFA
 30109                           tblptru	equ	0xFF8
 30110                           tblptrh	equ	0xFF7
 30111                           tblptrl	equ	0xFF6
 30112                           tablat	equ	0xFF5
 30113                           prodh	equ	0xFF4
 30114                           prodl	equ	0xFF3
 30115                           intcon	equ	0xFF2
 30116                           indf0	equ	0xFEF
 30117                           postinc0	equ	0xFEE
 30118                           fsr0h	equ	0xFEA
 30119                           fsr0l	equ	0xFE9
 30120                           wreg	equ	0xFE8
 30121                           indf1	equ	0xFE7
 30122                           postdec1	equ	0xFE5
 30123                           fsr1h	equ	0xFE2
 30124                           fsr1l	equ	0xFE1
 30125                           indf2	equ	0xFDF
 30126                           postinc2	equ	0xFDE
 30127                           postdec2	equ	0xFDD
 30128                           plusw2	equ	0xFDB
 30129                           fsr2h	equ	0xFDA
 30130                           fsr2l	equ	0xFD9
 30131                           status	equ	0xFD8
 30132                           
 30133 ;; *************** function _Console_MakeField *****************
 30134 ;; Defined at:
 30135 ;;		line 435 in file "Library/Console.c"
 30136 ;; Parameters:    Size  Location     Type
 30137 ;;  pInput          1    wreg     unsigned char 
 30138 ;; Auto vars:     Size  Location     Type
 30139 ;;  pInput          1   11[BANK0 ] unsigned char 
 30140 ;;  y               1   17[BANK0 ] unsigned char 
 30141 ;;  x               1   16[BANK0 ] unsigned char 
 30142 ;;  Column          2   12[BANK0 ] PTR struct Byte
 30143 ;;		 -> Font5x7(480), 
 30144 ;;  Index           2    9[BANK0 ] unsigned short 
 30145 ;; Return value:  Size  Location     Type
 30146 ;;                  2    5[BANK0 ] PTR unsigned short 
 30147 ;; Registers used:
 30148 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30149 ;; Tracked objects:
 30150 ;;		On entry : 0/0
 30151 ;;		On exit  : 0/0
 30152 ;;		Unchanged: 0/0
 30153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30154 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30155 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30156 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30157 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30158 ;;Total ram usage:       13 bytes
 30159 ;; Hardware stack levels used:    1
 30160 ;; Hardware stack levels required when called:    8
 30161 ;; This function calls:
 30162 ;;		_Byte_GetBit
 30163 ;; This function is called by:
 30164 ;;		_Console_Render
 30165 ;; This function uses a non-reentrant model
 30166 ;;
 30167                           
 30168                           	psect	text155
 30169  01454A                     __ptext155:
 30170                           	opt stack 0
 30171  01454A                     _Console_MakeField:
 30172                           	opt stack 21
 30173                           
 30174                           ;incstack = 0
 30175                           ;Console_MakeField@pInput stored from wreg
 30176  01454A  0100               	movlb	0	; () banked
 30177  01454C  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 30178                           
 30179                           ;Console.c: 437: static Colour Fill[7][5];
 30180                           ;Console.c: 438: pInput -= 32;
 30181  01454E  0E20               	movlw	32
 30182  014550  0100               	movlb	0	; () banked
 30183  014552  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 30184                           
 30185                           ; BSR set to: 0
 30186                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 30187  014554  0100               	movlb	0	; () banked
 30188  014556  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 30189  014558  0D05               	mullw	5
 30190  01455A  CFF3 F069          	movff	prodl,Console_MakeField@Index
 30191  01455E  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 30192                           
 30193                           ; BSR set to: 0
 30194                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 30195  014562  0ECF               	movlw	low _Font5x7
 30196  014564  0100               	movlb	0	; () banked
 30197  014566  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 30198  014568  0100               	movlb	0	; () banked
 30199  01456A  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 30200  01456C  0EFC               	movlw	high _Font5x7
 30201  01456E  0100               	movlb	0	; () banked
 30202  014570  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 30203  014572  0100               	movlb	0	; () banked
 30204  014574  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 30205                           
 30206                           ; BSR set to: 0
 30207                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 30208  014576  0E00               	movlw	0
 30209  014578  0100               	movlb	0	; () banked
 30210  01457A  6F70               	movwf	Console_MakeField@x& (0+255),b
 30211  01457C                     l14213:
 30212                           
 30213                           ; BSR set to: 0
 30214  01457C  0E04               	movlw	4
 30215  01457E  0100               	movlb	0	; () banked
 30216  014580  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 30217  014582  D001               	goto	l1077
 30218  014584  D043               	goto	u11710
 30219  014586                     l1077:
 30220                           
 30221                           ; BSR set to: 0
 30222                           ;Console.c: 444: {
 30223                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 30224                           
 30225                           ; BSR set to: 0
 30226  014586  0E00               	movlw	0
 30227  014588  0100               	movlb	0	; () banked
 30228  01458A  6F71               	movwf	Console_MakeField@y& (0+255),b
 30229  01458C                     l14219:
 30230                           
 30231                           ; BSR set to: 0
 30232  01458C  0E06               	movlw	6
 30233  01458E  0100               	movlb	0	; () banked
 30234  014590  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 30235  014592  D001               	goto	l1079
 30236  014594  D035               	goto	u11700
 30237  014596                     l1079:
 30238                           
 30239                           ; BSR set to: 0
 30240                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 30241                           
 30242                           ; BSR set to: 0
 30243  014596  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 30244  01459A  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 30245  01459E  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 30246  0145A2  EC7C  F0B4         	call	_Byte_GetBit	;wreg free
 30247  0145A6  0900               	iorlw	0
 30248  0145A8  A4D8               	btfss	status,2,c
 30249  0145AA  D005               	goto	l1082
 30250  0145AC  C037  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 30251  0145B0  C038  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 30252  0145B4  D004               	goto	l1084
 30253  0145B6                     l1082:
 30254  0145B6  C1F5  F06E         	movff	_gForecolour,_Console_MakeField$10974
 30255  0145BA  C1F6  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 30256  0145BE                     l1084:
 30257  0145BE  0100               	movlb	0	; () banked
 30258  0145C0  5171               	movf	Console_MakeField@y& (0+255),w,b
 30259  0145C2  0D0A               	mullw	10
 30260  0145C4  0E1E               	movlw	low Console_MakeField@Fill
 30261  0145C6  0100               	movlb	0	; () banked
 30262  0145C8  6F67               	movwf	??_Console_MakeField& (0+255),b
 30263  0145CA  0E02               	movlw	high Console_MakeField@Fill
 30264  0145CC  0100               	movlb	0	; () banked
 30265  0145CE  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 30266  0145D0  50F3               	movf	prodl,w,c
 30267  0145D2  0100               	movlb	0	; () banked
 30268  0145D4  2767               	addwf	??_Console_MakeField& (0+255),f,b
 30269  0145D6  50F4               	movf	prodh,w,c
 30270  0145D8  0100               	movlb	0	; () banked
 30271  0145DA  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 30272  0145DC  0100               	movlb	0	; () banked
 30273  0145DE  5170               	movf	Console_MakeField@x& (0+255),w,b
 30274  0145E0  0D02               	mullw	2
 30275  0145E2  50F3               	movf	prodl,w,c
 30276  0145E4  0100               	movlb	0	; () banked
 30277  0145E6  2567               	addwf	??_Console_MakeField& (0+255),w,b
 30278  0145E8  6ED9               	movwf	fsr2l,c
 30279  0145EA  50F4               	movf	prodh,w,c
 30280  0145EC  0100               	movlb	0	; () banked
 30281  0145EE  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 30282  0145F0  6EDA               	movwf	fsr2h,c
 30283  0145F2  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 30284  0145F6  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 30285                           
 30286                           ; BSR set to: 0
 30287  0145FA  0100               	movlb	0	; () banked
 30288  0145FC  2B71               	incf	Console_MakeField@y& (0+255),f,b
 30289  0145FE  D7C6               	goto	l14219
 30290  014600                     u11700:
 30291                           
 30292                           ; BSR set to: 0
 30293                           ;Console.c: 447: Column += 1;
 30294                           
 30295                           ; BSR set to: 0
 30296  014600  0100               	movlb	0	; () banked
 30297  014602  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 30298  014604  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 30299  014606  0100               	movlb	0	; () banked
 30300  014608  2B70               	incf	Console_MakeField@x& (0+255),f,b
 30301  01460A  D7B8               	goto	l14213
 30302  01460C                     u11710:
 30303                           
 30304                           ; BSR set to: 0
 30305                           ;Console.c: 448: }
 30306                           ;Console.c: 449: return (ColourPtr)Fill;
 30307                           
 30308                           ; BSR set to: 0
 30309  01460C  0E1E               	movlw	low Console_MakeField@Fill
 30310  01460E  0100               	movlb	0	; () banked
 30311  014610  6F65               	movwf	?_Console_MakeField& (0+255),b
 30312  014612  0E02               	movlw	high Console_MakeField@Fill
 30313  014614  0100               	movlb	0	; () banked
 30314  014616  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 30315  014618  0012               	return	
 30316  01461A                     __end_of_Console_MakeField:
 30317                           	opt stack 0
 30318                           tosu	equ	0xFFF
 30319                           tosh	equ	0xFFE
 30320                           tosl	equ	0xFFD
 30321                           pclath	equ	0xFFA
 30322                           tblptru	equ	0xFF8
 30323                           tblptrh	equ	0xFF7
 30324                           tblptrl	equ	0xFF6
 30325                           tablat	equ	0xFF5
 30326                           prodh	equ	0xFF4
 30327                           prodl	equ	0xFF3
 30328                           intcon	equ	0xFF2
 30329                           indf0	equ	0xFEF
 30330                           postinc0	equ	0xFEE
 30331                           fsr0h	equ	0xFEA
 30332                           fsr0l	equ	0xFE9
 30333                           wreg	equ	0xFE8
 30334                           indf1	equ	0xFE7
 30335                           postdec1	equ	0xFE5
 30336                           fsr1h	equ	0xFE2
 30337                           fsr1l	equ	0xFE1
 30338                           indf2	equ	0xFDF
 30339                           postinc2	equ	0xFDE
 30340                           postdec2	equ	0xFDD
 30341                           plusw2	equ	0xFDB
 30342                           fsr2h	equ	0xFDA
 30343                           fsr2l	equ	0xFD9
 30344                           status	equ	0xFD8
 30345                           
 30346 ;; *************** function _Byte_GetBit *****************
 30347 ;; Defined at:
 30348 ;;		line 38 in file "Library/Types.c"
 30349 ;; Parameters:    Size  Location     Type
 30350 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 30351 ;;		 -> Font5x7(480), 
 30352 ;;  pBit            1    2[BANK0 ] unsigned char 
 30353 ;; Auto vars:     Size  Location     Type
 30354 ;;  Output          1    4[BANK0 ] unsigned char 
 30355 ;; Return value:  Size  Location     Type
 30356 ;;                  1    wreg      unsigned char 
 30357 ;; Registers used:
 30358 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 30359 ;; Tracked objects:
 30360 ;;		On entry : 0/0
 30361 ;;		On exit  : 0/0
 30362 ;;		Unchanged: 0/0
 30363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30364 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30366 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30367 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30368 ;;Total ram usage:        5 bytes
 30369 ;; Hardware stack levels used:    1
 30370 ;; Hardware stack levels required when called:    7
 30371 ;; This function calls:
 30372 ;;		Nothing
 30373 ;; This function is called by:
 30374 ;;		_Console_MakeField
 30375 ;;		_Word_GetBit
 30376 ;; This function uses a non-reentrant model
 30377 ;;
 30378                           
 30379                           	psect	text156
 30380  0168F8                     __ptext156:
 30381                           	opt stack 0
 30382  0168F8                     _Byte_GetBit:
 30383                           	opt stack 21
 30384                           
 30385                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 30386                           
 30387                           ; BSR set to: 0
 30388                           ;incstack = 0
 30389  0168F8  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 30390  0168FC  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 30391  016900                     	if	0	;tblptru may be non-zero
 30392  016900                     	endif
 30393  016900                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 30394  016900  0E00               	movlw	low (__mediumconst shr (0+16))
 30395  016902  6EF8               	movwf	tblptru,c
 30396  016904                     	endif
 30397  016904  0008               	tblrd		*
 30398  016906  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 30399                           
 30400                           ;Types.c: 42: Output >>= pBit;
 30401  01690A  0100               	movlb	0	; () banked
 30402  01690C  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 30403  01690E  0100               	movlb	0	; () banked
 30404  016910  6F63               	movwf	??_Byte_GetBit& (0+255),b
 30405  016912  D003               	goto	u11290
 30406  016914                     u11295:
 30407  016914  0100               	movlb	0	; () banked
 30408  016916  90D8               	bcf	status,0,c
 30409  016918  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 30410  01691A                     u11290:
 30411  01691A  0100               	movlb	0	; () banked
 30412  01691C  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 30413  01691E  D7FA               	goto	u11295
 30414                           
 30415                           ;Types.c: 43: Output &= 1;
 30416  016920  0E01               	movlw	1
 30417  016922  0100               	movlb	0	; () banked
 30418  016924  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 30419                           
 30420                           ; BSR set to: 0
 30421                           ;Types.c: 44: return Output;
 30422  016926  0100               	movlb	0	; () banked
 30423  016928  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 30424  01692A  0012               	return	
 30425  01692C                     __end_of_Byte_GetBit:
 30426                           	opt stack 0
 30427                           tosu	equ	0xFFF
 30428                           tosh	equ	0xFFE
 30429                           tosl	equ	0xFFD
 30430                           pclath	equ	0xFFA
 30431                           tblptru	equ	0xFF8
 30432                           tblptrh	equ	0xFF7
 30433                           tblptrl	equ	0xFF6
 30434                           tablat	equ	0xFF5
 30435                           prodh	equ	0xFF4
 30436                           prodl	equ	0xFF3
 30437                           intcon	equ	0xFF2
 30438                           indf0	equ	0xFEF
 30439                           postinc0	equ	0xFEE
 30440                           fsr0h	equ	0xFEA
 30441                           fsr0l	equ	0xFE9
 30442                           wreg	equ	0xFE8
 30443                           indf1	equ	0xFE7
 30444                           postdec1	equ	0xFE5
 30445                           fsr1h	equ	0xFE2
 30446                           fsr1l	equ	0xFE1
 30447                           indf2	equ	0xFDF
 30448                           postinc2	equ	0xFDE
 30449                           postdec2	equ	0xFDD
 30450                           plusw2	equ	0xFDB
 30451                           fsr2h	equ	0xFDA
 30452                           fsr2l	equ	0xFD9
 30453                           status	equ	0xFD8
 30454                           
 30455 ;; *************** function _ISR_Function *****************
 30456 ;; Defined at:
 30457 ;;		line 38 in file "Library/ISR.c"
 30458 ;; Parameters:    Size  Location     Type
 30459 ;;		None
 30460 ;; Auto vars:     Size  Location     Type
 30461 ;;		None
 30462 ;; Return value:  Size  Location     Type
 30463 ;;                  1    wreg      void 
 30464 ;; Registers used:
 30465 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30466 ;; Tracked objects:
 30467 ;;		On entry : 0/0
 30468 ;;		On exit  : 0/0
 30469 ;;		Unchanged: 0/0
 30470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30473 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30474 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30475 ;;Total ram usage:       18 bytes
 30476 ;; Hardware stack levels used:    1
 30477 ;; Hardware stack levels required when called:    6
 30478 ;; This function calls:
 30479 ;;		_Timer0_ISR
 30480 ;; This function is called by:
 30481 ;;		Interrupt level 2
 30482 ;; This function uses a non-reentrant model
 30483 ;;
 30484                           
 30485                           	psect	intcode
 30486  001408                     __pintcode:
 30487                           	opt stack 0
 30488  001408                     _ISR_Function:
 30489                           	opt stack 13
 30490                           
 30491                           ; BSR set to: 0
 30492                           ;incstack = 0
 30493  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 30494  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 30495  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 30496  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 30497  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 30498  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 30499  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 30500  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 30501  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 30502  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 30503  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 30504  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 30505  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 30506  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 30507  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 30508  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 30509  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 30510  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 30511  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 30512                           
 30513                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 30514  001452  92F2               	bcf	intcon,1,c	;volatile
 30515                           
 30516                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 30517  001454  B4F2               	btfsc	intcon,2,c	;volatile
 30518  001456  AAF2               	btfss	intcon,5,c	;volatile
 30519  001458  D002               	goto	i2l1590
 30520                           
 30521                           ;ISR.c: 68: Timer0_ISR();
 30522  00145A  EC27  F0B5         	call	_Timer0_ISR	;wreg free
 30523  00145E                     i2l1590:
 30524  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 30525  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 30526  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 30527  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 30528  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 30529  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 30530  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 30531  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 30532  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 30533  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 30534  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 30535  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 30536  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 30537  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 30538  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 30539  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 30540  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 30541  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 30542  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 30543  0014A8  0011               	retfie		f
 30544  0014AA                     __end_of_ISR_Function:
 30545                           	opt stack 0
 30546                           tosu	equ	0xFFF
 30547                           tosh	equ	0xFFE
 30548                           tosl	equ	0xFFD
 30549                           pclatu	equ	0xFFB
 30550                           pclath	equ	0xFFA
 30551                           tblptru	equ	0xFF8
 30552                           tblptrh	equ	0xFF7
 30553                           tblptrl	equ	0xFF6
 30554                           tablat	equ	0xFF5
 30555                           prodh	equ	0xFF4
 30556                           prodl	equ	0xFF3
 30557                           intcon	equ	0xFF2
 30558                           indf0	equ	0xFEF
 30559                           postinc0	equ	0xFEE
 30560                           fsr0h	equ	0xFEA
 30561                           fsr0l	equ	0xFE9
 30562                           wreg	equ	0xFE8
 30563                           indf1	equ	0xFE7
 30564                           postdec1	equ	0xFE5
 30565                           fsr1h	equ	0xFE2
 30566                           fsr1l	equ	0xFE1
 30567                           indf2	equ	0xFDF
 30568                           postinc2	equ	0xFDE
 30569                           postdec2	equ	0xFDD
 30570                           plusw2	equ	0xFDB
 30571                           fsr2h	equ	0xFDA
 30572                           fsr2l	equ	0xFD9
 30573                           status	equ	0xFD8
 30574                           
 30575 ;; *************** function _Timer0_ISR *****************
 30576 ;; Defined at:
 30577 ;;		line 94 in file "Library/Timer0.c"
 30578 ;; Parameters:    Size  Location     Type
 30579 ;;		None
 30580 ;; Auto vars:     Size  Location     Type
 30581 ;;		None
 30582 ;; Return value:  Size  Location     Type
 30583 ;;                  1    wreg      void 
 30584 ;; Registers used:
 30585 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30586 ;; Tracked objects:
 30587 ;;		On entry : 0/0
 30588 ;;		On exit  : 0/0
 30589 ;;		Unchanged: 0/0
 30590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30594 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30595 ;;Total ram usage:        0 bytes
 30596 ;; Hardware stack levels used:    1
 30597 ;; Hardware stack levels required when called:    5
 30598 ;; This function calls:
 30599 ;;		Absolute function
 30600 ;;		i2_Motor_Step
 30601 ;;		i2_Timer0_Stop
 30602 ;; This function is called by:
 30603 ;;		_ISR_Function
 30604 ;; This function uses a non-reentrant model
 30605 ;;
 30606                           
 30607                           	psect	text158
 30608  016A4E                     __ptext158:
 30609                           	opt stack 0
 30610  016A4E                     _Timer0_ISR:
 30611                           	opt stack 13
 30612                           
 30613                           ;Timer0.c: 96: Timer0_Stop();
 30614                           
 30615                           ;incstack = 0
 30616  016A4E  EC47  F0B7         	call	i2_Timer0_Stop	;wreg free
 30617                           
 30618                           ;Timer0.c: 99: if (gISR != 0)
 30619  016A52  0101               	movlb	1	; () banked
 30620  016A54  5108               	movf	_gISR& (0+255),w,b
 30621  016A56  0101               	movlb	1	; () banked
 30622  016A58  1109               	iorwf	(_gISR+1)& (0+255),w,b
 30623  016A5A  0101               	movlb	1	; () banked
 30624  016A5C  110A               	iorwf	(_gISR+2)& (0+255),w,b
 30625  016A5E  B4D8               	btfsc	status,2,c
 30626  016A60  0012               	return	
 30627                           
 30628                           ; BSR set to: 1
 30629                           ;Timer0.c: 100: gISR();
 30630  016A62  D801               	call	i2u1329_48
 30631  016A64  0012               	return	
 30632  016A66                     i2u1329_48:
 30633  016A66  0005               	push	
 30634  016A68  6EFA               	movwf	pclath,c
 30635  016A6A  0101               	movlb	1	; () banked
 30636  016A6C  5108               	movf	_gISR& (0+255),w,b
 30637  016A6E  6EFD               	movwf	tosl,c
 30638  016A70  5109               	movf	(_gISR+1)& (0+255),w,b
 30639  016A72  6EFE               	movwf	tosh,c
 30640  016A74  510A               	movf	(_gISR+2)& (0+255),w,b
 30641  016A76  6EFF               	movwf	tosu,c
 30642  016A78  50FA               	movf	pclath,w,c
 30643  016A7A  0012               	return		;indir
 30644  016A7C                     __end_of_Timer0_ISR:
 30645                           	opt stack 0
 30646                           tosu	equ	0xFFF
 30647                           tosh	equ	0xFFE
 30648                           tosl	equ	0xFFD
 30649                           pclatu	equ	0xFFB
 30650                           pclath	equ	0xFFA
 30651                           tblptru	equ	0xFF8
 30652                           tblptrh	equ	0xFF7
 30653                           tblptrl	equ	0xFF6
 30654                           tablat	equ	0xFF5
 30655                           prodh	equ	0xFF4
 30656                           prodl	equ	0xFF3
 30657                           intcon	equ	0xFF2
 30658                           indf0	equ	0xFEF
 30659                           postinc0	equ	0xFEE
 30660                           fsr0h	equ	0xFEA
 30661                           fsr0l	equ	0xFE9
 30662                           wreg	equ	0xFE8
 30663                           indf1	equ	0xFE7
 30664                           postdec1	equ	0xFE5
 30665                           fsr1h	equ	0xFE2
 30666                           fsr1l	equ	0xFE1
 30667                           indf2	equ	0xFDF
 30668                           postinc2	equ	0xFDE
 30669                           postdec2	equ	0xFDD
 30670                           plusw2	equ	0xFDB
 30671                           fsr2h	equ	0xFDA
 30672                           fsr2l	equ	0xFD9
 30673                           status	equ	0xFD8
 30674                           
 30675 ;; *************** function i2_Motor_Step *****************
 30676 ;; Defined at:
 30677 ;;		line 75 in file "Library/Motor.c"
 30678 ;; Parameters:    Size  Location     Type
 30679 ;;		None
 30680 ;; Auto vars:     Size  Location     Type
 30681 ;;		None
 30682 ;; Return value:  Size  Location     Type
 30683 ;;                  1    wreg      void 
 30684 ;; Registers used:
 30685 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30686 ;; Tracked objects:
 30687 ;;		On entry : 0/0
 30688 ;;		On exit  : 0/0
 30689 ;;		Unchanged: 0/0
 30690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30695 ;;Total ram usage:        2 bytes
 30696 ;; Hardware stack levels used:    1
 30697 ;; Hardware stack levels required when called:    4
 30698 ;; This function calls:
 30699 ;;		i2_MXK_Queue
 30700 ;;		i2_MXK_Release
 30701 ;;		i2_MXK_SwitchTo
 30702 ;;		i2_Port_SetPin
 30703 ;;		i2_Timer0_Restart
 30704 ;;		i2_Timer0_Stop
 30705 ;; This function is called by:
 30706 ;; This function uses a non-reentrant model
 30707 ;;
 30708                           
 30709                           	psect	text159
 30710  0140F0                     __ptext159:
 30711                           	opt stack 0
 30712  0140F0                     i2_Motor_Step:
 30713                           	opt stack 13
 30714                           
 30715                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 30716                           
 30717                           ;incstack = 0
 30718  0140F0  0100               	movlb	0	; () banked
 30719  0140F2  EE20 F004          	lfsr	2,4
 30720  0140F6  51F1               	movf	_lMotor& (0+255),w,b
 30721  0140F8  26D9               	addwf	fsr2l,f,c
 30722  0140FA  51F2               	movf	(_lMotor+1)& (0+255),w,b
 30723  0140FC  22DA               	addwfc	fsr2h,f,c
 30724  0140FE  50DF               	movf	indf2,w,c
 30725  014100  EC61  F0B4         	call	i2_MXK_SwitchTo
 30726  014104  0900               	iorlw	0
 30727  014106  B4D8               	btfsc	status,2,c
 30728  014108  D06A               	goto	i2l1627
 30729                           
 30730                           ;Motor.c: 78: {
 30731                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 30732  01410A  C0F1  FFD9         	movff	_lMotor,fsr2l
 30733  01410E  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 30734  014112  50DE               	movf	postinc2,w,c
 30735  014114  10DE               	iorwf	postinc2,w,c
 30736  014116  B4D8               	btfsc	status,2,c
 30737  014118  D05D               	goto	i2l1628
 30738                           
 30739                           ;Motor.c: 80: {
 30740                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 30741  01411A  C0F1  FFD9         	movff	_lMotor,fsr2l
 30742  01411E  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 30743  014122  0E01               	movlw	1
 30744  014124  BEDB               	btfsc	plusw2,7,c
 30745  014126  D022               	goto	i2l1629
 30746  014128  0E01               	movlw	1
 30747  01412A  50DB               	movf	plusw2,w,c
 30748  01412C  E103               	bnz	i2u769_40
 30749  01412E  04DE               	decf	postinc2,w,c
 30750  014130  A0D8               	btfss	status,0,c
 30751  014132  D01C               	goto	i2l1629
 30752  014134                     i2u769_40:
 30753                           
 30754                           ;Motor.c: 83: {
 30755                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 30756  014134  C0F1  FFD9         	movff	_lMotor,fsr2l
 30757  014138  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 30758  01413C  28DE               	incf	postinc2,w,c
 30759  01413E  E104               	bnz	i2u770_40
 30760  014140  0E7F               	movlw	127
 30761  014142  18DE               	xorwf	postinc2,w,c
 30762  014144  B4D8               	btfsc	status,2,c
 30763  014146  D007               	goto	i2l1630
 30764  014148                     i2u770_40:
 30765                           
 30766                           ;Motor.c: 85: lMotor->mDelta --;
 30767  014148  C0F1  FFD9         	movff	_lMotor,fsr2l
 30768  01414C  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 30769  014150  06DE               	decf	postinc2,f,c
 30770  014152  0E00               	movlw	0
 30771  014154  5ADD               	subwfb	postdec2,f,c
 30772  014156                     i2l1630:
 30773                           
 30774                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 30775  014156  0E8A               	movlw	low _PortE
 30776  014158  6E10               	movwf	i2Port_SetPin@pInput,c
 30777  01415A  0E01               	movlw	high _PortE
 30778  01415C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30779  01415E  0E00               	movlw	0
 30780  014160  6E12               	movwf	i2Port_SetPin@pPin,c
 30781  014162  0E01               	movlw	1
 30782  014164  6E13               	movwf	i2Port_SetPin@pValue,c
 30783  014166  EC68  F0A7         	call	i2_Port_SetPin	;wreg free
 30784                           
 30785                           ;Motor.c: 88: }
 30786  01416A  D01B               	goto	i2l1631
 30787  01416C                     i2l1629:
 30788                           
 30789                           ;Motor.c: 89: else
 30790                           ;Motor.c: 90: {
 30791                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 30792  01416C  C0F1  FFD9         	movff	_lMotor,fsr2l
 30793  014170  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 30794  014174  04DE               	decf	postinc2,w,c
 30795  014176  E104               	bnz	i2u771_40
 30796  014178  0E80               	movlw	128
 30797  01417A  18DE               	xorwf	postinc2,w,c
 30798  01417C  B4D8               	btfsc	status,2,c
 30799  01417E  D007               	goto	i2l1632
 30800  014180                     i2u771_40:
 30801                           
 30802                           ;Motor.c: 92: lMotor->mDelta ++;
 30803  014180  C0F1  FFD9         	movff	_lMotor,fsr2l
 30804  014184  C0F2  FFDA         	movff	_lMotor+1,fsr2h
 30805  014188  2ADE               	incf	postinc2,f,c
 30806  01418A  0E00               	movlw	0
 30807  01418C  22DD               	addwfc	postdec2,f,c
 30808  01418E                     i2l1632:
 30809                           
 30810                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 30811  01418E  0E8A               	movlw	low _PortE
 30812  014190  6E10               	movwf	i2Port_SetPin@pInput,c
 30813  014192  0E01               	movlw	high _PortE
 30814  014194  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30815  014196  0E00               	movlw	0
 30816  014198  6E12               	movwf	i2Port_SetPin@pPin,c
 30817  01419A  0E00               	movlw	0
 30818  01419C  6E13               	movwf	i2Port_SetPin@pValue,c
 30819  01419E  EC68  F0A7         	call	i2_Port_SetPin	;wreg free
 30820  0141A2                     i2l1631:
 30821                           
 30822                           ;Motor.c: 95: }
 30823                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 30824  0141A2  0E8A               	movlw	low _PortE
 30825  0141A4  6E10               	movwf	i2Port_SetPin@pInput,c
 30826  0141A6  0E01               	movlw	high _PortE
 30827  0141A8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30828  0141AA  0E01               	movlw	1
 30829  0141AC  6E12               	movwf	i2Port_SetPin@pPin,c
 30830  0141AE  0E01               	movlw	1
 30831  0141B0  6E13               	movwf	i2Port_SetPin@pValue,c
 30832  0141B2  EC68  F0A7         	call	i2_Port_SetPin	;wreg free
 30833                           
 30834                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 30835  0141B6  0E8A               	movlw	low _PortE
 30836  0141B8  6E10               	movwf	i2Port_SetPin@pInput,c
 30837  0141BA  0E01               	movlw	high _PortE
 30838  0141BC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 30839  0141BE  0E01               	movlw	1
 30840  0141C0  6E12               	movwf	i2Port_SetPin@pPin,c
 30841  0141C2  0E00               	movlw	0
 30842  0141C4  6E13               	movwf	i2Port_SetPin@pValue,c
 30843  0141C6  EC68  F0A7         	call	i2_Port_SetPin	;wreg free
 30844                           
 30845                           ;Motor.c: 101: MXK_Release();
 30846  0141CA  EC4A  F0B7         	call	i2_MXK_Release	;wreg free
 30847                           
 30848                           ;Motor.c: 102: Timer0_Restart();
 30849  0141CE  EC19  F0B7         	call	i2_Timer0_Restart	;wreg free
 30850                           
 30851                           ;Motor.c: 103: return;
 30852  0141D2  0012               	return	
 30853  0141D4                     i2l1628:
 30854                           
 30855                           ;Motor.c: 104: }
 30856                           ;Motor.c: 105: MXK_Release();
 30857  0141D4  EC4A  F0B7         	call	i2_MXK_Release	;wreg free
 30858                           
 30859                           ;Motor.c: 106: Timer0_Stop();
 30860  0141D8  EC47  F0B7         	call	i2_Timer0_Stop	;wreg free
 30861                           
 30862                           ;Motor.c: 107: return;
 30863  0141DC  0012               	return	
 30864  0141DE                     i2l1627:
 30865                           
 30866                           ;Motor.c: 108: }
 30867                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 30868  0141DE  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 30869  0141E2  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 30870  0141E6  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 30871  0141EA  EC06  F0B7         	call	i2_MXK_Queue	;wreg free
 30872  0141EE  0012               	return		;funcret
 30873  0141F0                     __end_ofi2_Motor_Step:
 30874                           	opt stack 0
 30875                           tosu	equ	0xFFF
 30876                           tosh	equ	0xFFE
 30877                           tosl	equ	0xFFD
 30878                           pclatu	equ	0xFFB
 30879                           pclath	equ	0xFFA
 30880                           tblptru	equ	0xFF8
 30881                           tblptrh	equ	0xFF7
 30882                           tblptrl	equ	0xFF6
 30883                           tablat	equ	0xFF5
 30884                           prodh	equ	0xFF4
 30885                           prodl	equ	0xFF3
 30886                           intcon	equ	0xFF2
 30887                           indf0	equ	0xFEF
 30888                           postinc0	equ	0xFEE
 30889                           fsr0h	equ	0xFEA
 30890                           fsr0l	equ	0xFE9
 30891                           wreg	equ	0xFE8
 30892                           indf1	equ	0xFE7
 30893                           postdec1	equ	0xFE5
 30894                           fsr1h	equ	0xFE2
 30895                           fsr1l	equ	0xFE1
 30896                           indf2	equ	0xFDF
 30897                           postinc2	equ	0xFDE
 30898                           postdec2	equ	0xFDD
 30899                           plusw2	equ	0xFDB
 30900                           fsr2h	equ	0xFDA
 30901                           fsr2l	equ	0xFD9
 30902                           status	equ	0xFD8
 30903                           
 30904 ;; *************** function i2_Timer0_Stop *****************
 30905 ;; Defined at:
 30906 ;;		line 89 in file "Library/Timer0.c"
 30907 ;; Parameters:    Size  Location     Type
 30908 ;;		None
 30909 ;; Auto vars:     Size  Location     Type
 30910 ;;		None
 30911 ;; Return value:  Size  Location     Type
 30912 ;;                  1    wreg      void 
 30913 ;; Registers used:
 30914 ;;		None
 30915 ;; Tracked objects:
 30916 ;;		On entry : 0/0
 30917 ;;		On exit  : 0/0
 30918 ;;		Unchanged: 0/0
 30919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30923 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30924 ;;Total ram usage:        0 bytes
 30925 ;; Hardware stack levels used:    1
 30926 ;; This function calls:
 30927 ;;		Nothing
 30928 ;; This function is called by:
 30929 ;;		_Timer0_ISR
 30930 ;;		i2_Motor_Step
 30931 ;; This function uses a non-reentrant model
 30932 ;;
 30933                           
 30934                           	psect	text160
 30935  016E8E                     __ptext160:
 30936                           	opt stack 0
 30937  016E8E                     i2_Timer0_Stop:
 30938                           	opt stack 17
 30939                           
 30940                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 30941                           
 30942                           ;incstack = 0
 30943  016E8E  9AF2               	bcf	intcon,5,c	;volatile
 30944                           
 30945                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 30946  016E90  94F2               	bcf	intcon,2,c	;volatile
 30947  016E92  0012               	return		;funcret
 30948  016E94                     __end_ofi2_Timer0_Stop:
 30949                           	opt stack 0
 30950                           tosu	equ	0xFFF
 30951                           tosh	equ	0xFFE
 30952                           tosl	equ	0xFFD
 30953                           pclatu	equ	0xFFB
 30954                           pclath	equ	0xFFA
 30955                           tblptru	equ	0xFF8
 30956                           tblptrh	equ	0xFF7
 30957                           tblptrl	equ	0xFF6
 30958                           tablat	equ	0xFF5
 30959                           prodh	equ	0xFF4
 30960                           prodl	equ	0xFF3
 30961                           intcon	equ	0xFF2
 30962                           indf0	equ	0xFEF
 30963                           postinc0	equ	0xFEE
 30964                           fsr0h	equ	0xFEA
 30965                           fsr0l	equ	0xFE9
 30966                           wreg	equ	0xFE8
 30967                           indf1	equ	0xFE7
 30968                           postdec1	equ	0xFE5
 30969                           fsr1h	equ	0xFE2
 30970                           fsr1l	equ	0xFE1
 30971                           indf2	equ	0xFDF
 30972                           postinc2	equ	0xFDE
 30973                           postdec2	equ	0xFDD
 30974                           plusw2	equ	0xFDB
 30975                           fsr2h	equ	0xFDA
 30976                           fsr2l	equ	0xFD9
 30977                           status	equ	0xFD8
 30978                           
 30979 ;; *************** function i2_Timer0_Restart *****************
 30980 ;; Defined at:
 30981 ;;		line 83 in file "Library/Timer0.c"
 30982 ;; Parameters:    Size  Location     Type
 30983 ;;		None
 30984 ;; Auto vars:     Size  Location     Type
 30985 ;;		None
 30986 ;; Return value:  Size  Location     Type
 30987 ;;                  1    wreg      void 
 30988 ;; Registers used:
 30989 ;;		None
 30990 ;; Tracked objects:
 30991 ;;		On entry : 0/0
 30992 ;;		On exit  : 0/0
 30993 ;;		Unchanged: 0/0
 30994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30999 ;;Total ram usage:        0 bytes
 31000 ;; Hardware stack levels used:    1
 31001 ;; This function calls:
 31002 ;;		Nothing
 31003 ;; This function is called by:
 31004 ;;		i2_Motor_Step
 31005 ;; This function uses a non-reentrant model
 31006 ;;
 31007                           
 31008                           	psect	text161
 31009  016E32                     __ptext161:
 31010                           	opt stack 0
 31011  016E32                     i2_Timer0_Restart:
 31012                           	opt stack 16
 31013                           
 31014                           ;Timer0.c: 85: TMR0 = COUNTER;
 31015                           
 31016                           ;incstack = 0
 31017  016E32  C033  FFD6         	movff	_COUNTER,4054	;volatile
 31018  016E36  C034  FFD7         	movff	_COUNTER+1,4055	;volatile
 31019                           
 31020                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 31021  016E3A  8AF2               	bsf	intcon,5,c	;volatile
 31022  016E3C  0012               	return		;funcret
 31023  016E3E                     __end_ofi2_Timer0_Restart:
 31024                           	opt stack 0
 31025                           tosu	equ	0xFFF
 31026                           tosh	equ	0xFFE
 31027                           tosl	equ	0xFFD
 31028                           pclatu	equ	0xFFB
 31029                           pclath	equ	0xFFA
 31030                           tblptru	equ	0xFF8
 31031                           tblptrh	equ	0xFF7
 31032                           tblptrl	equ	0xFF6
 31033                           tablat	equ	0xFF5
 31034                           prodh	equ	0xFF4
 31035                           prodl	equ	0xFF3
 31036                           intcon	equ	0xFF2
 31037                           indf0	equ	0xFEF
 31038                           postinc0	equ	0xFEE
 31039                           fsr0h	equ	0xFEA
 31040                           fsr0l	equ	0xFE9
 31041                           wreg	equ	0xFE8
 31042                           indf1	equ	0xFE7
 31043                           postdec1	equ	0xFE5
 31044                           fsr1h	equ	0xFE2
 31045                           fsr1l	equ	0xFE1
 31046                           indf2	equ	0xFDF
 31047                           postinc2	equ	0xFDE
 31048                           postdec2	equ	0xFDD
 31049                           plusw2	equ	0xFDB
 31050                           fsr2h	equ	0xFDA
 31051                           fsr2l	equ	0xFD9
 31052                           status	equ	0xFD8
 31053                           
 31054 ;; *************** function i2_Port_SetPin *****************
 31055 ;; Defined at:
 31056 ;;		line 247 in file "Library/Port.c"
 31057 ;; Parameters:    Size  Location     Type
 31058 ;;  pInput          2   15[COMRAM] const PTR struct Port
 31059 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 31060 ;;  pPin            1   17[COMRAM] enum E6750
 31061 ;;  pValue          1   18[COMRAM] unsigned char 
 31062 ;; Auto vars:     Size  Location     Type
 31063 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 31064 ;; Return value:  Size  Location     Type
 31065 ;;                  1    wreg      void 
 31066 ;; Registers used:
 31067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31068 ;; Tracked objects:
 31069 ;;		On entry : 0/0
 31070 ;;		On exit  : 0/0
 31071 ;;		Unchanged: 0/0
 31072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31074 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31076 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31077 ;;Total ram usage:        5 bytes
 31078 ;; Hardware stack levels used:    1
 31079 ;; Hardware stack levels required when called:    3
 31080 ;; This function calls:
 31081 ;;		i2_Byte_SetBit
 31082 ;;		i2_Word_GetPair
 31083 ;; This function is called by:
 31084 ;;		i2_Motor_Step
 31085 ;; This function uses a non-reentrant model
 31086 ;;
 31087                           
 31088                           	psect	text162
 31089  014ED0                     __ptext162:
 31090                           	opt stack 0
 31091  014ED0                     i2_Port_SetPin:
 31092                           	opt stack 13
 31093                           
 31094                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 31095                           
 31096                           ;incstack = 0
 31097  014ED0  0E08               	movlw	8
 31098  014ED2  2410               	addwf	i2Port_SetPin@pInput,w,c
 31099  014ED4  6E0D               	movwf	i2Word_GetPair@pInput,c
 31100  014ED6  0E00               	movlw	0
 31101  014ED8  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 31102  014EDA  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 31103  014EDC  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 31104  014EE0  ECF8  F0B4         	call	i2_Word_GetPair	;wreg free
 31105  014EE4  6E14               	movwf	i2Port_SetPin@Type,c
 31106                           
 31107                           ;Port.c: 250: switch (Type)
 31108  014EE6  D03B               	goto	i2l427
 31109  014EE8                     
 31110                           ;Port.c: 256: pValue &= 1;
 31111  014EE8  0E01               	movlw	1
 31112  014EEA  1613               	andwf	i2Port_SetPin@pValue,f,c
 31113                           
 31114                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31115  014EEC  EE20 F002          	lfsr	2,2
 31116  014EF0  5010               	movf	i2Port_SetPin@pInput,w,c
 31117  014EF2  26D9               	addwf	fsr2l,f,c
 31118  014EF4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31119  014EF6  22DA               	addwfc	fsr2h,f,c
 31120  014EF8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31121  014EFC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31122  014F00  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31123  014F04  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31124  014F08  ECAF  F0B1         	call	i2_Byte_SetBit	;wreg free
 31125                           
 31126                           ;Port.c: 258: break;
 31127  014F0C  0012               	return	
 31128  014F0E                     
 31129                           ;Port.c: 261: pValue &= 1;
 31130  014F0E  0E01               	movlw	1
 31131  014F10  1613               	andwf	i2Port_SetPin@pValue,f,c
 31132                           
 31133                           ;Port.c: 262: pValue ^= 1;
 31134  014F12  0E01               	movlw	1
 31135  014F14  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 31136                           
 31137                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 31138  014F16  EE20 F002          	lfsr	2,2
 31139  014F1A  5010               	movf	i2Port_SetPin@pInput,w,c
 31140  014F1C  26D9               	addwf	fsr2l,f,c
 31141  014F1E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31142  014F20  22DA               	addwfc	fsr2h,f,c
 31143  014F22  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31144  014F26  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31145  014F2A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31146  014F2E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31147  014F32  ECAF  F0B1         	call	i2_Byte_SetBit	;wreg free
 31148                           
 31149                           ;Port.c: 264: break;
 31150  014F36  0012               	return	
 31151  014F38                     
 31152                           ;Port.c: 266: pValue &= 1;
 31153  014F38  0E01               	movlw	1
 31154  014F3A  1613               	andwf	i2Port_SetPin@pValue,f,c
 31155                           
 31156                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 31157  014F3C  EE20 F004          	lfsr	2,4
 31158  014F40  5010               	movf	i2Port_SetPin@pInput,w,c
 31159  014F42  26D9               	addwf	fsr2l,f,c
 31160  014F44  5011               	movf	i2Port_SetPin@pInput+1,w,c
 31161  014F46  22DA               	addwfc	fsr2h,f,c
 31162  014F48  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 31163  014F4C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 31164  014F50  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 31165  014F54  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 31166  014F58  ECAF  F0B1         	call	i2_Byte_SetBit	;wreg free
 31167                           
 31168                           ;Port.c: 269: }
 31169                           
 31170                           ;Port.c: 268: break;
 31171  014F5C  0012               	return	
 31172  014F5E                     i2l427:
 31173  014F5E  5014               	movf	i2Port_SetPin@Type,w,c
 31174                           
 31175                           ; Switch size 1, requested type "space"
 31176                           ; Number of cases is 4, Range of values is 0 to 3
 31177                           ; switch strategies available:
 31178                           ; Name         Instructions Cycles
 31179                           ; simple_byte           13     7 (average)
 31180                           ;	Chosen strategy is simple_byte
 31181  014F60  0A00               	xorlw	0	; case 0
 31182  014F62  B4D8               	btfsc	status,2,c
 31183  014F64  0012               	return	
 31184  014F66  0A01               	xorlw	1	; case 1
 31185  014F68  B4D8               	btfsc	status,2,c
 31186  014F6A  D7BE               	goto	i2l430
 31187  014F6C  0A03               	xorlw	3	; case 2
 31188  014F6E  B4D8               	btfsc	status,2,c
 31189  014F70  D7CE               	goto	i2l432
 31190  014F72  0A01               	xorlw	1	; case 3
 31191  014F74  A4D8               	btfss	status,2,c
 31192  014F76  0012               	return	
 31193  014F78  D7DF               	goto	i2l433
 31194  014F7A                     __end_ofi2_Port_SetPin:
 31195                           	opt stack 0
 31196                           tosu	equ	0xFFF
 31197                           tosh	equ	0xFFE
 31198                           tosl	equ	0xFFD
 31199                           pclatu	equ	0xFFB
 31200                           pclath	equ	0xFFA
 31201                           tblptru	equ	0xFF8
 31202                           tblptrh	equ	0xFF7
 31203                           tblptrl	equ	0xFF6
 31204                           tablat	equ	0xFF5
 31205                           prodh	equ	0xFF4
 31206                           prodl	equ	0xFF3
 31207                           intcon	equ	0xFF2
 31208                           indf0	equ	0xFEF
 31209                           postinc0	equ	0xFEE
 31210                           fsr0h	equ	0xFEA
 31211                           fsr0l	equ	0xFE9
 31212                           wreg	equ	0xFE8
 31213                           indf1	equ	0xFE7
 31214                           postdec1	equ	0xFE5
 31215                           fsr1h	equ	0xFE2
 31216                           fsr1l	equ	0xFE1
 31217                           indf2	equ	0xFDF
 31218                           postinc2	equ	0xFDE
 31219                           postdec2	equ	0xFDD
 31220                           plusw2	equ	0xFDB
 31221                           fsr2h	equ	0xFDA
 31222                           fsr2l	equ	0xFD9
 31223                           status	equ	0xFD8
 31224                           
 31225 ;; *************** function i2_Word_GetPair *****************
 31226 ;; Defined at:
 31227 ;;		line 156 in file "Library/Types.c"
 31228 ;; Parameters:    Size  Location     Type
 31229 ;;  pInput          2   12[COMRAM] PTR struct Word
 31230 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 31231 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 31232 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 31233 ;;		 -> PortC(10), PortF(10), NULL(0), 
 31234 ;;  pPair           1   14[COMRAM] unsigned char 
 31235 ;; Auto vars:     Size  Location     Type
 31236 ;;		None
 31237 ;; Return value:  Size  Location     Type
 31238 ;;                  1    wreg      unsigned char 
 31239 ;; Registers used:
 31240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31241 ;; Tracked objects:
 31242 ;;		On entry : 0/0
 31243 ;;		On exit  : 0/0
 31244 ;;		Unchanged: 0/0
 31245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31246 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31247 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31250 ;;Total ram usage:        3 bytes
 31251 ;; Hardware stack levels used:    1
 31252 ;; Hardware stack levels required when called:    2
 31253 ;; This function calls:
 31254 ;;		i2_Byte_GetPair
 31255 ;; This function is called by:
 31256 ;;		i2_Port_SetPin
 31257 ;; This function uses a non-reentrant model
 31258 ;;
 31259                           
 31260                           	psect	text163
 31261  0169F0                     __ptext163:
 31262                           	opt stack 0
 31263  0169F0                     i2_Word_GetPair:
 31264                           	opt stack 13
 31265                           
 31266                           ;Types.c: 158: if (pPair >= 4)
 31267                           
 31268                           ;incstack = 0
 31269  0169F0  0E03               	movlw	3
 31270  0169F2  640F               	cpfsgt	i2Word_GetPair@pPair,c
 31271  0169F4  D00C               	goto	i2l781
 31272                           
 31273                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 31274  0169F6  0E01               	movlw	1
 31275  0169F8  240D               	addwf	i2Word_GetPair@pInput,w,c
 31276  0169FA  6E0A               	movwf	i2Byte_GetPair@pInput,c
 31277  0169FC  0E00               	movlw	0
 31278  0169FE  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 31279  016A00  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 31280  016A02  500F               	movf	i2Word_GetPair@pPair,w,c
 31281  016A04  0FFC               	addlw	252
 31282  016A06  6E0C               	movwf	i2Byte_GetPair@pPair,c
 31283  016A08  EC6A  F0B6         	call	i2_Byte_GetPair	;wreg free
 31284  016A0C  0012               	return	
 31285  016A0E                     i2l781:
 31286                           
 31287                           ;Types.c: 160: else
 31288                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 31289  016A0E  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 31290  016A12  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 31291  016A16  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 31292  016A1A  EC6A  F0B6         	call	i2_Byte_GetPair	;wreg free
 31293  016A1E  0012               	return	
 31294  016A20                     __end_ofi2_Word_GetPair:
 31295                           	opt stack 0
 31296                           tosu	equ	0xFFF
 31297                           tosh	equ	0xFFE
 31298                           tosl	equ	0xFFD
 31299                           pclatu	equ	0xFFB
 31300                           pclath	equ	0xFFA
 31301                           tblptru	equ	0xFF8
 31302                           tblptrh	equ	0xFF7
 31303                           tblptrl	equ	0xFF6
 31304                           tablat	equ	0xFF5
 31305                           prodh	equ	0xFF4
 31306                           prodl	equ	0xFF3
 31307                           intcon	equ	0xFF2
 31308                           indf0	equ	0xFEF
 31309                           postinc0	equ	0xFEE
 31310                           fsr0h	equ	0xFEA
 31311                           fsr0l	equ	0xFE9
 31312                           wreg	equ	0xFE8
 31313                           indf1	equ	0xFE7
 31314                           postdec1	equ	0xFE5
 31315                           fsr1h	equ	0xFE2
 31316                           fsr1l	equ	0xFE1
 31317                           indf2	equ	0xFDF
 31318                           postinc2	equ	0xFDE
 31319                           postdec2	equ	0xFDD
 31320                           plusw2	equ	0xFDB
 31321                           fsr2h	equ	0xFDA
 31322                           fsr2l	equ	0xFD9
 31323                           status	equ	0xFD8
 31324                           
 31325 ;; *************** function i2_Byte_GetPair *****************
 31326 ;; Defined at:
 31327 ;;		line 87 in file "Library/Types.c"
 31328 ;; Parameters:    Size  Location     Type
 31329 ;;  pInput          2    9[COMRAM] PTR struct Byte
 31330 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31331 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31332 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31333 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31334 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31335 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31336 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31337 ;;		 -> NULL(0), 
 31338 ;;  pPair           1   11[COMRAM] unsigned char 
 31339 ;; Auto vars:     Size  Location     Type
 31340 ;;		None
 31341 ;; Return value:  Size  Location     Type
 31342 ;;                  1    wreg      unsigned char 
 31343 ;; Registers used:
 31344 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 31345 ;; Tracked objects:
 31346 ;;		On entry : 0/0
 31347 ;;		On exit  : 0/0
 31348 ;;		Unchanged: 0/0
 31349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31350 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31353 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31354 ;;Total ram usage:        3 bytes
 31355 ;; Hardware stack levels used:    1
 31356 ;; Hardware stack levels required when called:    1
 31357 ;; This function calls:
 31358 ;;		i2_Byte_GetZone
 31359 ;; This function is called by:
 31360 ;;		i2_Word_GetPair
 31361 ;; This function uses a non-reentrant model
 31362 ;;
 31363                           
 31364                           	psect	text164
 31365  016CD4                     __ptext164:
 31366                           	opt stack 0
 31367  016CD4                     i2_Byte_GetPair:
 31368                           	opt stack 13
 31369                           
 31370                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 31371                           
 31372                           ;incstack = 0
 31373  016CD4  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 31374  016CD8  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 31375  016CDC  0E04               	movlw	4
 31376  016CDE  6E03               	movwf	i2Byte_GetZone@pMax,c
 31377  016CE0  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 31378  016CE4  0E02               	movlw	2
 31379  016CE6  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 31380  016CE8  EC55  F0AD         	call	i2_Byte_GetZone	;wreg free
 31381  016CEC  0012               	return	
 31382  016CEE                     __end_ofi2_Byte_GetPair:
 31383                           	opt stack 0
 31384                           tosu	equ	0xFFF
 31385                           tosh	equ	0xFFE
 31386                           tosl	equ	0xFFD
 31387                           pclatu	equ	0xFFB
 31388                           pclath	equ	0xFFA
 31389                           tblptru	equ	0xFF8
 31390                           tblptrh	equ	0xFF7
 31391                           tblptrl	equ	0xFF6
 31392                           tablat	equ	0xFF5
 31393                           prodh	equ	0xFF4
 31394                           prodl	equ	0xFF3
 31395                           intcon	equ	0xFF2
 31396                           indf0	equ	0xFEF
 31397                           postinc0	equ	0xFEE
 31398                           fsr0h	equ	0xFEA
 31399                           fsr0l	equ	0xFE9
 31400                           wreg	equ	0xFE8
 31401                           indf1	equ	0xFE7
 31402                           postdec1	equ	0xFE5
 31403                           fsr1h	equ	0xFE2
 31404                           fsr1l	equ	0xFE1
 31405                           indf2	equ	0xFDF
 31406                           postinc2	equ	0xFDE
 31407                           postdec2	equ	0xFDD
 31408                           plusw2	equ	0xFDB
 31409                           fsr2h	equ	0xFDA
 31410                           fsr2l	equ	0xFD9
 31411                           status	equ	0xFD8
 31412                           
 31413 ;; *************** function i2_Byte_GetZone *****************
 31414 ;; Defined at:
 31415 ;;		line 64 in file "Library/Types.c"
 31416 ;; Parameters:    Size  Location     Type
 31417 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31418 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 31419 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 31420 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 31421 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 31422 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 31423 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 31424 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 31425 ;;		 -> NULL(0), 
 31426 ;;  pMax            1    2[COMRAM] unsigned char 
 31427 ;;  pChunk          1    3[COMRAM] unsigned char 
 31428 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 31429 ;; Auto vars:     Size  Location     Type
 31430 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 31431 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 31432 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 31433 ;; Return value:  Size  Location     Type
 31434 ;;                  1    wreg      unsigned char 
 31435 ;; Registers used:
 31436 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 31437 ;; Tracked objects:
 31438 ;;		On entry : 0/0
 31439 ;;		On exit  : 0/0
 31440 ;;		Unchanged: 0/0
 31441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31442 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31443 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31445 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31446 ;;Total ram usage:        9 bytes
 31447 ;; Hardware stack levels used:    1
 31448 ;; This function calls:
 31449 ;;		Nothing
 31450 ;; This function is called by:
 31451 ;;		i2_Byte_GetPair
 31452 ;; This function uses a non-reentrant model
 31453 ;;
 31454                           
 31455                           	psect	text165
 31456  015AAA                     __ptext165:
 31457                           	opt stack 0
 31458  015AAA                     i2_Byte_GetZone:
 31459                           	opt stack 13
 31460                           
 31461                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 31462                           
 31463                           ;incstack = 0
 31464  015AAA  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 31465  015AAE  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 31466  015AB2  0E00               	movlw	low (__mediumconst shr (0+16))
 31467  015AB4  6EF8               	movwf	tblptru,c
 31468  015AB6  0E0F               	movlw	(high __ramtop+-1)
 31469  015AB8  64F7               	cpfsgt	tblptrh,c
 31470  015ABA  D003               	bra	i2u507_47
 31471  015ABC  0008               	tblrd		*
 31472  015ABE  50F5               	movf	tablat,w,c
 31473  015AC0  D005               	bra	i2u507_40
 31474  015AC2                     i2u507_47:
 31475  015AC2  CFF6 FFE9          	movff	tblptrl,fsr0l
 31476  015AC6  CFF7 FFEA          	movff	tblptrh,fsr0h
 31477  015ACA  50EF               	movf	indf0,w,c
 31478  015ACC                     i2u507_40:
 31479  015ACC  6E09               	movwf	i2Byte_GetZone@Output,c
 31480                           
 31481                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 31482  015ACE  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31483  015AD0  0D01               	mullw	1
 31484  015AD2  0EBF               	movlw	low _MASKS
 31485  015AD4  24F3               	addwf	prodl,w,c
 31486  015AD6  6EF6               	movwf	tblptrl,c
 31487  015AD8  0EFC               	movlw	high _MASKS
 31488  015ADA  20F4               	addwfc	prodh,w,c
 31489  015ADC  6EF7               	movwf	tblptrh,c
 31490  015ADE                     	if	1	;There are 3 active tblptr bytes
 31491  015ADE  6AF8               	clrf	tblptru,c
 31492  015AE0  0E00               	movlw	low (__mediumconst shr (0+16))
 31493  015AE2  22F8               	addwfc	tblptru,f,c
 31494  015AE4                     	endif
 31495  015AE4  0008               	tblrd		*
 31496  015AE6  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 31497                           
 31498                           ;Types.c: 68: UINT8 Offset = 0;
 31499  015AEA  0E00               	movlw	0
 31500  015AEC  6E08               	movwf	i2Byte_GetZone@Offset,c
 31501                           
 31502                           ;Types.c: 70: while (pChunk >= pMax)
 31503  015AEE  D003               	goto	i2l732
 31504  015AF0                     
 31505                           ;Types.c: 71: {
 31506                           ;Types.c: 72: pChunk -= pMax;
 31507  015AF0  5003               	movf	i2Byte_GetZone@pMax,w,c
 31508  015AF2  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 31509                           
 31510                           ;Types.c: 73: Offset += 1;
 31511  015AF4  2A08               	incf	i2Byte_GetZone@Offset,f,c
 31512  015AF6                     i2l732:
 31513  015AF6  5003               	movf	i2Byte_GetZone@pMax,w,c
 31514  015AF8  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 31515  015AFA  B0D8               	btfsc	status,0,c
 31516  015AFC  D7F9               	goto	i2l733
 31517                           
 31518                           ;Types.c: 74: }
 31519                           ;Types.c: 75: pChunk *= pChunkSize;
 31520  015AFE  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 31521  015B00  0204               	mulwf	i2Byte_GetZone@pChunk,c
 31522  015B02  50F3               	movf	prodl,w,c
 31523  015B04  6E04               	movwf	i2Byte_GetZone@pChunk,c
 31524                           
 31525                           ;Types.c: 76: pChunk += Offset;
 31526  015B06  5008               	movf	i2Byte_GetZone@Offset,w,c
 31527  015B08  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 31528                           
 31529                           ;Types.c: 78: Output >>= pChunk;
 31530  015B0A  2804               	incf	i2Byte_GetZone@pChunk,w,c
 31531  015B0C  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 31532  015B0E  D002               	goto	i2u509_40
 31533  015B10                     i2u509_45:
 31534  015B10  90D8               	bcf	status,0,c
 31535  015B12  3209               	rrcf	i2Byte_GetZone@Output,f,c
 31536  015B14                     i2u509_40:
 31537  015B14  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 31538  015B16  D7FC               	goto	i2u509_45
 31539                           
 31540                           ;Types.c: 79: Output &= MASK;
 31541  015B18  5007               	movf	i2Byte_GetZone@MASK,w,c
 31542  015B1A  1609               	andwf	i2Byte_GetZone@Output,f,c
 31543                           
 31544                           ;Types.c: 80: return Output;
 31545  015B1C  5009               	movf	i2Byte_GetZone@Output,w,c
 31546  015B1E  0012               	return	
 31547  015B20                     __end_ofi2_Byte_GetZone:
 31548                           	opt stack 0
 31549                           tosu	equ	0xFFF
 31550                           tosh	equ	0xFFE
 31551                           tosl	equ	0xFFD
 31552                           pclatu	equ	0xFFB
 31553                           pclath	equ	0xFFA
 31554                           tblptru	equ	0xFF8
 31555                           tblptrh	equ	0xFF7
 31556                           tblptrl	equ	0xFF6
 31557                           tablat	equ	0xFF5
 31558                           prodh	equ	0xFF4
 31559                           prodl	equ	0xFF3
 31560                           intcon	equ	0xFF2
 31561                           indf0	equ	0xFEF
 31562                           postinc0	equ	0xFEE
 31563                           fsr0h	equ	0xFEA
 31564                           fsr0l	equ	0xFE9
 31565                           wreg	equ	0xFE8
 31566                           indf1	equ	0xFE7
 31567                           postdec1	equ	0xFE5
 31568                           fsr1h	equ	0xFE2
 31569                           fsr1l	equ	0xFE1
 31570                           indf2	equ	0xFDF
 31571                           postinc2	equ	0xFDE
 31572                           postdec2	equ	0xFDD
 31573                           plusw2	equ	0xFDB
 31574                           fsr2h	equ	0xFDA
 31575                           fsr2l	equ	0xFD9
 31576                           status	equ	0xFD8
 31577                           
 31578 ;; *************** function i2_Byte_SetBit *****************
 31579 ;; Defined at:
 31580 ;;		line 32 in file "Library/Types.c"
 31581 ;; Parameters:    Size  Location     Type
 31582 ;;  pInput          2    0[COMRAM] PTR struct Byte
 31583 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 31584 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 31585 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 31586 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 31587 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 31588 ;;		 -> NULL(0), 
 31589 ;;  pBit            1    2[COMRAM] unsigned char 
 31590 ;;  pValue          1    3[COMRAM] unsigned char 
 31591 ;; Auto vars:     Size  Location     Type
 31592 ;;		None
 31593 ;; Return value:  Size  Location     Type
 31594 ;;                  1    wreg      void 
 31595 ;; Registers used:
 31596 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 31597 ;; Tracked objects:
 31598 ;;		On entry : 0/0
 31599 ;;		On exit  : 0/0
 31600 ;;		Unchanged: 0/0
 31601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31604 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31605 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31606 ;;Total ram usage:        7 bytes
 31607 ;; Hardware stack levels used:    1
 31608 ;; This function calls:
 31609 ;;		Nothing
 31610 ;; This function is called by:
 31611 ;;		i2_Port_SetPin
 31612 ;; This function uses a non-reentrant model
 31613 ;;
 31614                           
 31615                           	psect	text166
 31616  01635E                     __ptext166:
 31617                           	opt stack 0
 31618  01635E                     i2_Byte_SetBit:
 31619                           	opt stack 15
 31620                           
 31621                           ;Types.c: 34: pValue &= 1;
 31622                           
 31623                           ;incstack = 0
 31624  01635E  0E01               	movlw	1
 31625  016360  1604               	andwf	i2Byte_SetBit@pValue,f,c
 31626                           
 31627                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 31628  016362  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31629  016366  0E01               	movlw	1
 31630  016368  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 31631  01636A  2A05               	incf	??i2_Byte_SetBit,f,c
 31632  01636C  D002               	goto	i2u666_44
 31633  01636E                     i2u666_45:
 31634  01636E  90D8               	bcf	status,0,c
 31635  016370  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31636  016372                     i2u666_44:
 31637  016372  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31638  016374  D7FC               	goto	i2u666_45
 31639  016376  5006               	movf	??i2_Byte_SetBit+1,w,c
 31640  016378  0AFF               	xorlw	255
 31641  01637A  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 31642  01637C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31643  016380  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31644  016384  5007               	movf	??i2_Byte_SetBit+2,w,c
 31645  016386  16DF               	andwf	indf2,f,c
 31646                           
 31647                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 31648  016388  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 31649  01638C  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 31650  016390  2A05               	incf	??i2_Byte_SetBit,f,c
 31651  016392  D002               	goto	i2u667_44
 31652  016394                     i2u667_45:
 31653  016394  90D8               	bcf	status,0,c
 31654  016396  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 31655  016398                     i2u667_44:
 31656  016398  2E05               	decfsz	??i2_Byte_SetBit,f,c
 31657  01639A  D7FC               	goto	i2u667_45
 31658  01639C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 31659  0163A0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 31660  0163A4  5006               	movf	??i2_Byte_SetBit+1,w,c
 31661  0163A6  12DF               	iorwf	indf2,f,c
 31662  0163A8  0012               	return		;funcret
 31663  0163AA                     __end_ofi2_Byte_SetBit:
 31664                           	opt stack 0
 31665                           tosu	equ	0xFFF
 31666                           tosh	equ	0xFFE
 31667                           tosl	equ	0xFFD
 31668                           pclatu	equ	0xFFB
 31669                           pclath	equ	0xFFA
 31670                           tblptru	equ	0xFF8
 31671                           tblptrh	equ	0xFF7
 31672                           tblptrl	equ	0xFF6
 31673                           tablat	equ	0xFF5
 31674                           prodh	equ	0xFF4
 31675                           prodl	equ	0xFF3
 31676                           intcon	equ	0xFF2
 31677                           indf0	equ	0xFEF
 31678                           postinc0	equ	0xFEE
 31679                           fsr0h	equ	0xFEA
 31680                           fsr0l	equ	0xFE9
 31681                           wreg	equ	0xFE8
 31682                           indf1	equ	0xFE7
 31683                           postdec1	equ	0xFE5
 31684                           fsr1h	equ	0xFE2
 31685                           fsr1l	equ	0xFE1
 31686                           indf2	equ	0xFDF
 31687                           postinc2	equ	0xFDE
 31688                           postdec2	equ	0xFDD
 31689                           plusw2	equ	0xFDB
 31690                           fsr2h	equ	0xFDA
 31691                           fsr2l	equ	0xFD9
 31692                           status	equ	0xFD8
 31693                           
 31694 ;; *************** function i2_MXK_SwitchTo *****************
 31695 ;; Defined at:
 31696 ;;		line 105 in file "Library/MXK.c"
 31697 ;; Parameters:    Size  Location     Type
 31698 ;;  pModule         1    wreg     enum E6927
 31699 ;; Auto vars:     Size  Location     Type
 31700 ;;  pModule         1    7[COMRAM] enum E6927
 31701 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 31702 ;; Return value:  Size  Location     Type
 31703 ;;                  1    wreg      unsigned char 
 31704 ;; Registers used:
 31705 ;;		wreg, status,2, status,0, cstack
 31706 ;; Tracked objects:
 31707 ;;		On entry : 0/0
 31708 ;;		On exit  : 0/0
 31709 ;;		Unchanged: 0/0
 31710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31712 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31714 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31715 ;;Total ram usage:        2 bytes
 31716 ;; Hardware stack levels used:    1
 31717 ;; Hardware stack levels required when called:    1
 31718 ;; This function calls:
 31719 ;;		i2_delay_us
 31720 ;; This function is called by:
 31721 ;;		i2_Motor_Step
 31722 ;; This function uses a non-reentrant model
 31723 ;;
 31724                           
 31725                           	psect	text167
 31726  0168C2                     __ptext167:
 31727                           	opt stack 0
 31728  0168C2                     i2_MXK_SwitchTo:
 31729                           	opt stack 15
 31730                           
 31731                           ;incstack = 0
 31732                           ;i2MXK_SwitchTo@pModule stored from wreg
 31733  0168C2  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 31734                           
 31735                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 31736  0168C4  5086               	movf	3974,w,c	;volatile
 31737  0168C6  0B0F               	andlw	15
 31738  0168C8  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 31739                           
 31740                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 31741  0168CA  504C               	movf	_Bus_State,w,c
 31742  0168CC  A4D8               	btfss	status,2,c
 31743  0168CE  D002               	goto	i2l1730
 31744                           
 31745                           ;MXK.c: 110: return 0;
 31746  0168D0  0E00               	movlw	0
 31747  0168D2  0012               	return	
 31748  0168D4                     i2l1730:
 31749                           
 31750                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 31751  0168D4  0E00               	movlw	0
 31752  0168D6  6E4C               	movwf	_Bus_State,c
 31753                           
 31754                           ;MXK.c: 114: if (CUR != pModule)
 31755  0168D8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31756  0168DA  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 31757  0168DC  B4D8               	btfsc	status,2,c
 31758  0168DE  D00A               	goto	i2l1732
 31759                           
 31760                           ;MXK.c: 115: {
 31761                           ;MXK.c: 116: PORTG &= ~(0xF);
 31762  0168E0  0EF0               	movlw	240
 31763  0168E2  1686               	andwf	3974,f,c	;volatile
 31764                           
 31765                           ;MXK.c: 117: PORTG |= pModule;
 31766  0168E4  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 31767  0168E6  1286               	iorwf	3974,f,c	;volatile
 31768                           
 31769                           ;MXK.c: 120: delay_us(10);
 31770  0168E8  0E00               	movlw	0
 31771  0168EA  6E02               	movwf	i2delay_us@us+1,c
 31772  0168EC  0E0A               	movlw	10
 31773  0168EE  6E01               	movwf	i2delay_us@us,c
 31774  0168F0  EC35  F0B3         	call	i2_delay_us	;wreg free
 31775  0168F4                     i2l1732:
 31776                           
 31777                           ;MXK.c: 121: }
 31778                           ;MXK.c: 122: return 1;
 31779  0168F4  0E01               	movlw	1
 31780  0168F6  0012               	return	
 31781  0168F8                     __end_ofi2_MXK_SwitchTo:
 31782                           	opt stack 0
 31783                           tosu	equ	0xFFF
 31784                           tosh	equ	0xFFE
 31785                           tosl	equ	0xFFD
 31786                           pclatu	equ	0xFFB
 31787                           pclath	equ	0xFFA
 31788                           tblptru	equ	0xFF8
 31789                           tblptrh	equ	0xFF7
 31790                           tblptrl	equ	0xFF6
 31791                           tablat	equ	0xFF5
 31792                           prodh	equ	0xFF4
 31793                           prodl	equ	0xFF3
 31794                           intcon	equ	0xFF2
 31795                           indf0	equ	0xFEF
 31796                           postinc0	equ	0xFEE
 31797                           fsr0h	equ	0xFEA
 31798                           fsr0l	equ	0xFE9
 31799                           wreg	equ	0xFE8
 31800                           indf1	equ	0xFE7
 31801                           postdec1	equ	0xFE5
 31802                           fsr1h	equ	0xFE2
 31803                           fsr1l	equ	0xFE1
 31804                           indf2	equ	0xFDF
 31805                           postinc2	equ	0xFDE
 31806                           postdec2	equ	0xFDD
 31807                           plusw2	equ	0xFDB
 31808                           fsr2h	equ	0xFDA
 31809                           fsr2l	equ	0xFD9
 31810                           status	equ	0xFD8
 31811                           
 31812 ;; *************** function i2_delay_us *****************
 31813 ;; Defined at:
 31814 ;;		line 255 in file "Library/Types.c"
 31815 ;; Parameters:    Size  Location     Type
 31816 ;;  us              2    0[COMRAM] unsigned short 
 31817 ;; Auto vars:     Size  Location     Type
 31818 ;;  delay_us        4    2[COMRAM] unsigned long 
 31819 ;; Return value:  Size  Location     Type
 31820 ;;                  1    wreg      void 
 31821 ;; Registers used:
 31822 ;;		wreg, status,2, status,0
 31823 ;; Tracked objects:
 31824 ;;		On entry : 0/0
 31825 ;;		On exit  : 0/0
 31826 ;;		Unchanged: 0/0
 31827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31828 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31829 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31831 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31832 ;;Total ram usage:        6 bytes
 31833 ;; Hardware stack levels used:    1
 31834 ;; This function calls:
 31835 ;;		Nothing
 31836 ;; This function is called by:
 31837 ;;		i2_MXK_SwitchTo
 31838 ;; This function uses a non-reentrant model
 31839 ;;
 31840                           
 31841                           	psect	text168
 31842  01666A                     __ptext168:
 31843                           	opt stack 0
 31844  01666A                     i2_delay_us:
 31845                           	opt stack 15
 31846                           
 31847                           ;Types.c: 256: unsigned long u;
 31848                           ;Types.c: 257: while (us--) {
 31849                           
 31850                           ;incstack = 0
 31851  01666A  D016               	goto	i2u670_40
 31852  01666C                     i2l9457:
 31853                           
 31854                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 31855  01666C  0E00               	movlw	0
 31856  01666E  6E03               	movwf	i2delay_us@u,c
 31857  016670  0E00               	movlw	0
 31858  016672  6E04               	movwf	i2delay_us@u+1,c
 31859  016674  0E00               	movlw	0
 31860  016676  6E05               	movwf	i2delay_us@u+2,c
 31861  016678  0E00               	movlw	0
 31862  01667A  6E06               	movwf	i2delay_us@u+3,c
 31863  01667C                     i2l9459:
 31864  01667C  5003               	movf	i2delay_us@u,w,c
 31865  01667E  1004               	iorwf	i2delay_us@u+1,w,c
 31866  016680  1005               	iorwf	i2delay_us@u+2,w,c
 31867  016682  1006               	iorwf	i2delay_us@u+3,w,c
 31868  016684  A4D8               	btfss	status,2,c
 31869  016686  D008               	goto	i2u670_40
 31870  016688  F000               	nop		; ;# 
 31871  01668A  0E01               	movlw	1
 31872  01668C  2603               	addwf	i2delay_us@u,f,c
 31873  01668E  0E00               	movlw	0
 31874  016690  2204               	addwfc	i2delay_us@u+1,f,c
 31875  016692  2205               	addwfc	i2delay_us@u+2,f,c
 31876  016694  2206               	addwfc	i2delay_us@u+3,f,c
 31877  016696  D7F2               	goto	i2l9459
 31878  016698                     i2u670_40:
 31879  016698  0601               	decf	i2delay_us@us,f,c
 31880  01669A  A0D8               	btfss	status,0,c
 31881  01669C  0602               	decf	i2delay_us@us+1,f,c
 31882  01669E  2801               	incf	i2delay_us@us,w,c
 31883  0166A0  E1E5               	bnz	i2l9457
 31884  0166A2  2802               	incf	i2delay_us@us+1,w,c
 31885  0166A4  B4D8               	btfsc	status,2,c
 31886  0166A6  0012               	return	
 31887  0166A8  D7E1               	goto	i2l832
 31888  0166AA                     __end_ofi2_delay_us:
 31889                           	opt stack 0
 31890                           tosu	equ	0xFFF
 31891                           tosh	equ	0xFFE
 31892                           tosl	equ	0xFFD
 31893                           pclatu	equ	0xFFB
 31894                           pclath	equ	0xFFA
 31895                           tblptru	equ	0xFF8
 31896                           tblptrh	equ	0xFF7
 31897                           tblptrl	equ	0xFF6
 31898                           tablat	equ	0xFF5
 31899                           prodh	equ	0xFF4
 31900                           prodl	equ	0xFF3
 31901                           intcon	equ	0xFF2
 31902                           indf0	equ	0xFEF
 31903                           postinc0	equ	0xFEE
 31904                           fsr0h	equ	0xFEA
 31905                           fsr0l	equ	0xFE9
 31906                           wreg	equ	0xFE8
 31907                           indf1	equ	0xFE7
 31908                           postdec1	equ	0xFE5
 31909                           fsr1h	equ	0xFE2
 31910                           fsr1l	equ	0xFE1
 31911                           indf2	equ	0xFDF
 31912                           postinc2	equ	0xFDE
 31913                           postdec2	equ	0xFDD
 31914                           plusw2	equ	0xFDB
 31915                           fsr2h	equ	0xFDA
 31916                           fsr2l	equ	0xFD9
 31917                           status	equ	0xFD8
 31918                           
 31919 ;; *************** function i2_MXK_Release *****************
 31920 ;; Defined at:
 31921 ;;		line 130 in file "Library/MXK.c"
 31922 ;; Parameters:    Size  Location     Type
 31923 ;;		None
 31924 ;; Auto vars:     Size  Location     Type
 31925 ;;		None
 31926 ;; Return value:  Size  Location     Type
 31927 ;;                  1    wreg      unsigned char 
 31928 ;; Registers used:
 31929 ;;		wreg, status,2, status,0
 31930 ;; Tracked objects:
 31931 ;;		On entry : 0/0
 31932 ;;		On exit  : 0/0
 31933 ;;		Unchanged: 0/0
 31934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31939 ;;Total ram usage:        0 bytes
 31940 ;; Hardware stack levels used:    1
 31941 ;; This function calls:
 31942 ;;		Nothing
 31943 ;; This function is called by:
 31944 ;;		i2_Motor_Step
 31945 ;; This function uses a non-reentrant model
 31946 ;;
 31947                           
 31948                           	psect	text169
 31949  016E94                     __ptext169:
 31950                           	opt stack 0
 31951  016E94                     i2_MXK_Release:
 31952                           	opt stack 16
 31953                           
 31954                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 31955                           
 31956                           ;incstack = 0
 31957  016E94  0E01               	movlw	1
 31958  016E96  6E4C               	movwf	_Bus_State,c
 31959                           
 31960                           ;MXK.c: 135: return 1;
 31961                           ;	Return value of i2_MXK_Release is never used
 31962  016E98  0012               	return	
 31963  016E9A                     __end_ofi2_MXK_Release:
 31964                           	opt stack 0
 31965                           tosu	equ	0xFFF
 31966                           tosh	equ	0xFFE
 31967                           tosl	equ	0xFFD
 31968                           pclatu	equ	0xFFB
 31969                           pclath	equ	0xFFA
 31970                           tblptru	equ	0xFF8
 31971                           tblptrh	equ	0xFF7
 31972                           tblptrl	equ	0xFF6
 31973                           tablat	equ	0xFF5
 31974                           prodh	equ	0xFF4
 31975                           prodl	equ	0xFF3
 31976                           intcon	equ	0xFF2
 31977                           indf0	equ	0xFEF
 31978                           postinc0	equ	0xFEE
 31979                           fsr0h	equ	0xFEA
 31980                           fsr0l	equ	0xFE9
 31981                           wreg	equ	0xFE8
 31982                           indf1	equ	0xFE7
 31983                           postdec1	equ	0xFE5
 31984                           fsr1h	equ	0xFE2
 31985                           fsr1l	equ	0xFE1
 31986                           indf2	equ	0xFDF
 31987                           postinc2	equ	0xFDE
 31988                           postdec2	equ	0xFDD
 31989                           plusw2	equ	0xFDB
 31990                           fsr2h	equ	0xFDA
 31991                           fsr2l	equ	0xFD9
 31992                           status	equ	0xFD8
 31993                           
 31994 ;; *************** function i2_MXK_Queue *****************
 31995 ;; Defined at:
 31996 ;;		line 144 in file "Library/MXK.c"
 31997 ;; Parameters:    Size  Location     Type
 31998 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 31999 ;;		 -> Absolute function(1), Motor_Step(1), 
 32000 ;; Auto vars:     Size  Location     Type
 32001 ;;		None
 32002 ;; Return value:  Size  Location     Type
 32003 ;;                  1    wreg      void 
 32004 ;; Registers used:
 32005 ;;		wreg, status,2, status,0
 32006 ;; Tracked objects:
 32007 ;;		On entry : 0/0
 32008 ;;		On exit  : 0/0
 32009 ;;		Unchanged: 0/0
 32010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 32011 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32012 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32014 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 32015 ;;Total ram usage:        3 bytes
 32016 ;; Hardware stack levels used:    1
 32017 ;; This function calls:
 32018 ;;		Nothing
 32019 ;; This function is called by:
 32020 ;;		i2_Motor_Step
 32021 ;; This function uses a non-reentrant model
 32022 ;;
 32023                           
 32024                           	psect	text170
 32025  016E0C                     __ptext170:
 32026                           	opt stack 0
 32027  016E0C                     i2_MXK_Queue:
 32028                           	opt stack 16
 32029                           
 32030                           ;MXK.c: 146: lQueue = pCallback;
 32031                           
 32032                           ;incstack = 0
 32033  016E0C  C001  F0EC         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 32034  016E10  C002  F0ED         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 32035  016E14  C003  F0EE         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 32036  016E18  0012               	return		;funcret
 32037  016E1A                     __end_ofi2_MXK_Queue:
 32038                           	opt stack 0
 32039                           tosu	equ	0xFFF
 32040                           tosh	equ	0xFFE
 32041                           tosl	equ	0xFFD
 32042                           pclatu	equ	0xFFB
 32043                           pclath	equ	0xFFA
 32044                           tblptru	equ	0xFF8
 32045                           tblptrh	equ	0xFF7
 32046                           tblptrl	equ	0xFF6
 32047                           tablat	equ	0xFF5
 32048                           prodh	equ	0xFF4
 32049                           prodl	equ	0xFF3
 32050                           intcon	equ	0xFF2
 32051                           indf0	equ	0xFEF
 32052                           postinc0	equ	0xFEE
 32053                           fsr0h	equ	0xFEA
 32054                           fsr0l	equ	0xFE9
 32055                           wreg	equ	0xFE8
 32056                           indf1	equ	0xFE7
 32057                           postdec1	equ	0xFE5
 32058                           fsr1h	equ	0xFE2
 32059                           fsr1l	equ	0xFE1
 32060                           indf2	equ	0xFDF
 32061                           postinc2	equ	0xFDE
 32062                           postdec2	equ	0xFDD
 32063                           plusw2	equ	0xFDB
 32064                           fsr2h	equ	0xFDA
 32065                           fsr2l	equ	0xFD9
 32066                           status	equ	0xFD8
 32067                           tosu	equ	0xFFF
 32068                           tosh	equ	0xFFE
 32069                           tosl	equ	0xFFD
 32070                           pclatu	equ	0xFFB
 32071                           pclath	equ	0xFFA
 32072                           tblptru	equ	0xFF8
 32073                           tblptrh	equ	0xFF7
 32074                           tblptrl	equ	0xFF6
 32075                           tablat	equ	0xFF5
 32076                           prodh	equ	0xFF4
 32077                           prodl	equ	0xFF3
 32078                           intcon	equ	0xFF2
 32079                           indf0	equ	0xFEF
 32080                           postinc0	equ	0xFEE
 32081                           fsr0h	equ	0xFEA
 32082                           fsr0l	equ	0xFE9
 32083                           wreg	equ	0xFE8
 32084                           indf1	equ	0xFE7
 32085                           postdec1	equ	0xFE5
 32086                           fsr1h	equ	0xFE2
 32087                           fsr1l	equ	0xFE1
 32088                           indf2	equ	0xFDF
 32089                           postinc2	equ	0xFDE
 32090                           postdec2	equ	0xFDD
 32091                           plusw2	equ	0xFDB
 32092                           fsr2h	equ	0xFDA
 32093                           fsr2l	equ	0xFD9
 32094                           status	equ	0xFD8
 32095                           
 32096                           	psect	text171
 32097  000000                     __ptext171:
 32098                           	opt stack 0
 32099                           tosu	equ	0xFFF
 32100                           tosh	equ	0xFFE
 32101                           tosl	equ	0xFFD
 32102                           pclatu	equ	0xFFB
 32103                           pclath	equ	0xFFA
 32104                           tblptru	equ	0xFF8
 32105                           tblptrh	equ	0xFF7
 32106                           tblptrl	equ	0xFF6
 32107                           tablat	equ	0xFF5
 32108                           prodh	equ	0xFF4
 32109                           prodl	equ	0xFF3
 32110                           intcon	equ	0xFF2
 32111                           indf0	equ	0xFEF
 32112                           postinc0	equ	0xFEE
 32113                           fsr0h	equ	0xFEA
 32114                           fsr0l	equ	0xFE9
 32115                           wreg	equ	0xFE8
 32116                           indf1	equ	0xFE7
 32117                           postdec1	equ	0xFE5
 32118                           fsr1h	equ	0xFE2
 32119                           fsr1l	equ	0xFE1
 32120                           indf2	equ	0xFDF
 32121                           postinc2	equ	0xFDE
 32122                           postdec2	equ	0xFDD
 32123                           plusw2	equ	0xFDB
 32124                           fsr2h	equ	0xFDA
 32125                           fsr2l	equ	0xFD9
 32126                           status	equ	0xFD8
 32127                           
 32128                           	psect	rparam
 32129  0000                     tosu	equ	0xFFF
 32130                           tosh	equ	0xFFE
 32131                           tosl	equ	0xFFD
 32132                           pclatu	equ	0xFFB
 32133                           pclath	equ	0xFFA
 32134                           tblptru	equ	0xFF8
 32135                           tblptrh	equ	0xFF7
 32136                           tblptrl	equ	0xFF6
 32137                           tablat	equ	0xFF5
 32138                           prodh	equ	0xFF4
 32139                           prodl	equ	0xFF3
 32140                           intcon	equ	0xFF2
 32141                           indf0	equ	0xFEF
 32142                           postinc0	equ	0xFEE
 32143                           fsr0h	equ	0xFEA
 32144                           fsr0l	equ	0xFE9
 32145                           wreg	equ	0xFE8
 32146                           indf1	equ	0xFE7
 32147                           postdec1	equ	0xFE5
 32148                           fsr1h	equ	0xFE2
 32149                           fsr1l	equ	0xFE1
 32150                           indf2	equ	0xFDF
 32151                           postinc2	equ	0xFDE
 32152                           postdec2	equ	0xFDD
 32153                           plusw2	equ	0xFDB
 32154                           fsr2h	equ	0xFDA
 32155                           fsr2l	equ	0xFD9
 32156                           status	equ	0xFD8
 32157                           
 32158                           	psect	temp
 32159  000051                     btemp:
 32160                           	opt stack 0
 32161  000051                     	ds	1
 32162  0000                     int$flags	set	btemp
 32163  0000                     wtemp6	set	btemp+1
 32164                           tosu	equ	0xFFF
 32165                           tosh	equ	0xFFE
 32166                           tosl	equ	0xFFD
 32167                           pclatu	equ	0xFFB
 32168                           pclath	equ	0xFFA
 32169                           tblptru	equ	0xFF8
 32170                           tblptrh	equ	0xFF7
 32171                           tblptrl	equ	0xFF6
 32172                           tablat	equ	0xFF5
 32173                           prodh	equ	0xFF4
 32174                           prodl	equ	0xFF3
 32175                           intcon	equ	0xFF2
 32176                           indf0	equ	0xFEF
 32177                           postinc0	equ	0xFEE
 32178                           fsr0h	equ	0xFEA
 32179                           fsr0l	equ	0xFE9
 32180                           wreg	equ	0xFE8
 32181                           indf1	equ	0xFE7
 32182                           postdec1	equ	0xFE5
 32183                           fsr1h	equ	0xFE2
 32184                           fsr1l	equ	0xFE1
 32185                           indf2	equ	0xFDF
 32186                           postinc2	equ	0xFDE
 32187                           postdec2	equ	0xFDD
 32188                           plusw2	equ	0xFDB
 32189                           fsr2h	equ	0xFDA
 32190                           fsr2l	equ	0xFD9
 32191                           status	equ	0xFD8


Data Sizes:
    Strings     246
    Constant    806
    Data        29
    BSS         711
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160    136     157
    BANK1           256      4     253
    BANK2           256     13     143
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 32
		 -> STR_16(CODE[3]), STR_15(CODE[24]), STR_14(CODE[24]), STR_13(CODE[24]), 
		 -> STR_12(CODE[26]), STR_11(CODE[20]), STR_10(CODE[31]), STR_9(CODE[22]), 
		 -> STR_8(CODE[11]), STR_7(CODE[26]), STR_6(CODE[11]), STR_5(CODE[5]), 
		 -> STR_4(CODE[4]), STR_3(CODE[12]), STR_2(CODE[32]), STR_1(CODE[23]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK1[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK1[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), 

    ADC_Sequence@pItemA	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK2[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK1[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK1[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK2[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK1[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(BANK1[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK2[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK1[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK2[10]), TestButton(BANK2[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_pow
    _stepMode->_Motor_Speed
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fltol
    _eval_poly->___fladd
    ___flsub->___fladd
    _positionMode->___fltol
    ___flneg->___xxtofl
    _multiSampleADC->___fladd
    ___fladd->_ADC_Voltage
    _FunctADC->_ADC_Start
    _ADC_Start->_ADC_SetChannel
    _ADC_Voltage->___flmul
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _initialise->_HMI_Init
    _Motor_Init->_Port_SetPinType
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _FunctInitADC->_ADC_Init
    _ADC_Init->_ADC_SetupIO
    _displayStepMode->_printf
    _displaySID->_printf
    _displayPositionMode->___fltol
    ___xxtofl->___awdiv
    ___fltol->___fladd
    ___flmul->___xxtofl
    _displayNullMode->_printf
    _displayContinuousMode->_printf
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    ___awdiv->___wmul
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___lwmod->___lwdiv
    _continuousMode->_Motor_Speed
    _Motor_Speed->_Timer0_Init
    _Timer0_Init->___lldiv
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_pow

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 1461365
                                            134 BANK0      2     2      0
                                              0 BANK1      4     4      0
                     _Console_Render
              _Console_SetForecolour
                         _HMI_Render
                      _HMI_SetNumber
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                            ___flmul
                            ___fltol
                     _continuousMode
              _displayContinuousMode
                    _displayNullMode
                _displayPositionMode
                         _displaySID
                    _displayStepMode
                            _getMode
                         _initialise
                           _inputVar
                           _nullMode
                       _positionMode
                                _pow
                             _printf
                           _stepMode
 ---------------------------------------------------------------------------------
 (1) _stepMode                                             0     0      0    5362
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (1) _pow                                                 21    13      8   86100
                                            126 BANK0      8     0      8
                                              0 BANK2     13    13      0
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   27492
                                            107 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   47318
                                            115 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                8     2      6     663
                                            107 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4   12643
                                            101 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           16     8      8   12869
                                             91 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    7183
                                             91 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _positionMode                                         0     0      0   15442
                         _Motor_Move
                        _Motor_Speed
                            ___fladd
                            ___flneg
                            ___fltol
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     673
                                             28 BANK0      4     0      4
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _nullMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _inputVar                                             1     1      0  116227
                                             91 BANK0      1     1      0
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
                     _multiSampleADC
 ---------------------------------------------------------------------------------
 (2) _multiSampleADC                                       0     0      0   20012
                        _ADC_Voltage
                           _FunctADC
                            ___fladd
                            ___fldiv
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    6550
                                             71 BANK0     20    12      8
                        _ADC_Voltage (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) _FunctADC                                             0     0      0     310
                          _ADC_Start
 ---------------------------------------------------------------------------------
 (4) _ADC_Start                                            4     2      2     310
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4   10361
                                             53 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2791
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   84557
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   84557
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37189
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    4094
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (7) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0 1098738
                       _Console_Init
                       _FunctInitADC
                    _FunctInitButton
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (5) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (7) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (8) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (9) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (10) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _FunctInitADC                                         0     0      0    2935
                           _ADC_Init
                       _ADC_Sequence
 ---------------------------------------------------------------------------------
 (3) _ADC_Sequence                                         4     0      4    1067
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _ADC_Init                                             3     0      3    1868
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (4) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (5) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _displayStepMode                                      0     0      0    7028
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displaySID                                           0     0      0    7363
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (2) _Console_SetForecolour                                2     0      2     335
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _displayPositionMode                                  2     2      0   19055
                                            101 BANK0      2     2      0
                            ___awdiv
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                             _printf
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1456
                                             14 BANK0     14    10      4
                            ___awdiv (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4    1401
                                             91 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    5153
                                             28 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1786
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _displayNullMode                                      0     0      0    7028
                             _printf
 ---------------------------------------------------------------------------------
 (1) _displayContinuousMode                                0     0      0    7028
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    7028
                                             27 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    2276
                                             26 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    2245
                                             22 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1694
                                             14 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1357
                                              6 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _continuousMode                                       0     0      0    5362
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    4143
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4    1219
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (5) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _Console_SetForecolour
   _HMI_Render
     _OutSeg
       _SPI_Send
   _HMI_SetNumber
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   ___flmul
     ___xxtofl (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     _frexp (ARG)
   ___fltol
     ___fladd (ARG)
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___xxtofl
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flneg (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___xxtofl (ARG)
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
   _continuousMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _displayContinuousMode
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displayNullMode
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displayPositionMode
     ___awdiv
       ___wmul (ARG)
     ___flge
     ___flmul
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___fltol
       ___fladd (ARG)
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___xxtofl
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___wmul
     ___xxtofl
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displaySID
     _Console_SetForecolour
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _displayStepMode
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
               ___wmul (ARG)
   _getMode
   _initialise
     _Console_Init
     _FunctInitADC
       _ADC_Init
         _ADC_Calibrate
           _ADC_Off
           _ADC_On
         _ADC_ClockDivision
         _ADC_ConversionTime
         _ADC_SetChannel
         _ADC_SetupIO
       _ADC_Sequence
     _FunctInitButton
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _inputVar
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
     _multiSampleADC *
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___xxtofl
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       _FunctADC
         _ADC_Start
           _ADC_Off
           _ADC_On
           _ADC_SetChannel
       ___fladd
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___xxtofl
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___fldiv
   _nullMode
   _positionMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fladd
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___xxtofl
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___fltol
       ___fladd (ARG)
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___xxtofl
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___xxtofl
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
   _pow
     ___flge
     ___flmul
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___fltol
       ___fladd (ARG)
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___xxtofl
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl (ARG)
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
     ___xxtofl
       ___awdiv (ARG)
         ___wmul (ARG)
       ___wmul (ARG)
     _exp
       ___fldiv
       ___flge
       ___flmul
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flneg
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___flsub
         ___fladd
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___xxtofl
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___fltol
         ___fladd (ARG)
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___xxtofl
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
       ___xxtofl
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _eval_poly
         ___fladd
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___xxtofl
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
       _floor
         ___fladd
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___xxtofl
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flge
         ___fltol
           ___fladd (ARG)
             _ADC_Voltage (ARG)
               ___fldiv
               ___flmul
                 ___xxtofl (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                 _frexp (ARG)
               ___xxtofl
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp
       _ldexp
         _eval_poly (ARG)
           ___fladd
             _ADC_Voltage (ARG)
               ___fldiv
               ___flmul
                 ___xxtofl (ARG)
                   ___awdiv (ARG)
                     ___wmul (ARG)
                   ___wmul (ARG)
                 _frexp (ARG)
               ___xxtofl
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
             ___flmul (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
     _log
       ___fladd
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___xxtofl
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
           ___awdiv (ARG)
             ___wmul (ARG)
           ___wmul (ARG)
         _frexp (ARG)
       ___xxtofl
         ___awdiv (ARG)
           ___wmul (ARG)
         ___wmul (ARG)
       _eval_poly
         ___fladd
           _ADC_Voltage (ARG)
             ___fldiv
             ___flmul
               ___xxtofl (ARG)
                 ___awdiv (ARG)
                   ___wmul (ARG)
                 ___wmul (ARG)
               _frexp (ARG)
             ___xxtofl
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___flmul (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
             _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
               ___awdiv (ARG)
                 ___wmul (ARG)
               ___wmul (ARG)
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
             ___awdiv (ARG)
               ___wmul (ARG)
             ___wmul (ARG)
           _frexp (ARG)
       _frexp
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
             ___wmul (ARG)
   _stepMode
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      D      8F       9       55.9%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4      FD       7       98.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     88      9D       5       98.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     279      12        0.0%
DATA                 0      0     3A5       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Aug 27 11:19:11 2017

                   i2_Timer0_Stop 6E8E                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 40F0  
                               _A 01F7                                 l8 44C8  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 01F8                                 _i 012E  
                               _j 012D                                 _l 004F  
                               _u 012C                                 _w 0050  
                    ___fldiv@sign 006C                                l11 3698  
                              l12 3682                                l90 35CE  
                              l85 34CA                                l87 3538  
                              l89 35A4                      ___awdiv@sign 006B  
              __size_of_ADC_Start 0084               ___wmul@multiplicand 0062  
                   _HMI_DIPSwitch 6D06                LCD_DrawField@pSize 0078  
         __end_of_displayNullMode 666A                LCD_DrawField@count 007E  
               ?_Event_TestButton 0001                  i2_Timer0_Restart 6E32  
            ADC_ClockDivision@reg 0061                               l120 5426  
                             l121 543C                               l122 5452  
                             l220 6080                               l117 5468  
                             l221 6044                               l118 5410  
                             l230 62E0                               l222 6090  
                             l223 6062                       ?_LED_Toggle 0001  
                             l234 64BA                               l235 648A  
                             l227 62FC                               l403 2CAE  
                             l412 27DC                               l228 62C4  
                             l340 5034                               l404 2C4E  
                             l421 2770                               l413 2672  
                             l237 64A2                               l341 5042  
                             l405 2CDE                     ??_Console_Tab 006E  
                             l414 27F8                               l430 4706  
                             l350 513C                               l342 5050  
                             l510 1C62                               l406 2C66  
                             l183 51F0                               l415 2698  
                             l351 50CC                               l343 505E  
                             l511 1D72                               l407 2C7E  
                             l184 51CA                               l600 095A  
                             l432 4730                               l344 506C  
                             l512 1C84                               l408 2C96  
                             l417 2704                               l601 0AEE  
                             l433 4760                               l353 50DA  
                             l337 5096                               l345 507A  
                             l610 0B76                               l602 098C  
                             l354 50E8                               l346 5088  
                             l338 5026                               l370 4FC6  
                             l611 0BC4                               l603 0B00  
                             l427 478A                               l355 50F6  
                             l363 4FF0                               l371 4FD4  
                             l531 1482                       ?_HMI_GetBar 0001  
                             l612 0C12                               l604 0A3A  
                             l356 5104                               l372 4FE2  
                             l364 4F80                               l532 14A6  
                             l516 1CCC                               l357 5112  
                             l509 1D56                               l614 0CF4  
                             l358 5120                               l366 4F8E  
                             l526 14C6                               l615 0CEC  
                             l607 0C60                               l359 512E  
                             l367 4F9C                               l519 1D14  
                             l616 0D06                               l608 0B28  
                             l368 4FAA                               l528 14E4  
                             l393 620E                               l617 0CF0  
                             l609 0C7E                               l369 4FB8  
                             l529 1462                               l483 1AC2  
                             l732 53AA                               l476 1B9A  
                             l900 183A                               l733 539E  
                             l389 5F06                               l477 1A0C  
                             l397 647E                               l901 183E  
                             l726 4C44                               l478 1BB6  
                             l486 1B2E                               l654 6ADA  
                             l910 1862                               l902 1842  
                             l727 4C38                               l479 1A56  
                             l655 6AD2                               l911 1866  
                             l903 1846                               l824 5E3A  
                             l832 626E                               l912 186A  
                             l904 184A                               l681 5DDE  
                             l673 69E2                               l657 6AD6  
                             l913 186E                               l905 184E  
                             l921 5DAE                               l914 1872  
                             l906 1852                               l922 5D7A  
                             l930 4306                               l819 58C2  
                             l915 1876                               l907 1856  
                             l684 5DF4                               l916 187A  
                             l908 185A                               l860 179A  
                             l781 6752                               l597 0968  
                             l853 1882                               l917 187E  
                             l909 185E                               l861 179E  
                             l678 5E1A                               l686 5E04  
                             l598 0950                               l870 17C2  
                             l862 17A2                               l854 1786  
                             l679 5DCE                               l599 0978  
                             l871 17C6                               l863 17A6  
                             l776 658A                               l880 17EA  
                             l872 17CA                               l864 17AA  
                             l856 178A                               l928 4386  
                             l881 17EE                               l873 17CE  
                             l865 17AE                               l857 178E  
                             l929 4356                               l890 1812  
                             l882 17F2                               l874 17D2  
                             l866 17B2                               l858 1792  
                             l891 1816                               l883 17F6  
                             l875 17D6                               l867 17B6  
                             l859 1796                               l892 181A  
                             l884 17FA                               l876 17DA  
                             l868 17BA                               l893 181E  
                             l885 17FE                               l877 17DE  
                             l869 17BE                               l990 55C0  
                             l894 1822                               l886 1802  
                             l878 17E2                               l983 532E  
                             l895 1826                               l887 1806  
                             l879 17E6                               l992 55D0  
                             l984 52B4                               l976 56D6  
                             l896 182A                               l888 180A  
                             l985 532A                               l897 182E  
                             l889 180E                               l978 56E6  
                             l898 1832                               l899 1836  
                             l997 6174                               l999 6198  
                             _PR2 000FCB           __end_of_displayStepMode 5A32  
                             _dip 0126                               _exp 14E6  
                             _log 301A                               _val 0031  
                             _pow 2092                   __end_of_ADC_Off 6E76  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 0079  
                    _Word_GetPair 6726                               prod 000FF3  
                     ?_HMI_Render 0001               MXK_SwitchTo@pModule 0067  
      __end_of_ADC_ConversionTime 6514                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 0070  
              Console_MakeField@y 0071                      Console_Tab@c 0075  
                    Console_Tab@i 0074               LCD_DrawField@pField 0072  
                    Console_Tab@t 0073        __size_of_ADC_ClockDivision 008A  
                    ___flmul@aexp 0089                      ___flmul@bexp 008E  
                      i2_delay_us 666A              Port_Set@TypeRequired 0082  
                    ___flmul@sign 0088                      ___flmul@temp 0093  
                    ___flmul@prod 008F                 Console_FormFeed@x 0062  
               Console_FormFeed@y 0063               LCD_DrawField@pPoint 0074  
                  ?_LCD_DrawField 0072             Port_SetPinType@Output 008A  
                 Port_SetPin@Type 0073                   Port_SetPin@pPin 0071  
                   ?_Byte_GetPair 0069                   __end_of_LED_Set 630E  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 4ED0  
                    ___fltol@exp1 00C4                      _Word_SetPair 655A  
                            l1000 61B4                              l1010 47FA  
                            l1004 5FA8                     ?_Byte_GetZone 0060  
                            l1005 5FD6                              l1040 29D8  
                            l1200 4AAE                              l1009 4806  
                            l1041 29DE                              l1201 4B02  
                            l1042 29E4                              l1202 4B1E  
                            l1043 29EA                              l1036 2B30  
                            l1044 29F0                              l1300 5654  
                            l1204 4B48                              l1045 29F6  
                            l1037 29D2                              l1301 5658  
                            l1205 4B2E                              l1062 201C  
                            l1302 5662                              l1063 204A  
                            l1047 2A9A                              l1303 5670  
                            l1207 4B5A                              l1056 1EAC  
                            l2120 31FC                              l1057 2072  
                            l1313 64F4                              l1153 248A  
                            l2121 32C4                              l2113 31A8  
                            l1082 45B6                              l1058 1EB4  
                            l1146 57E4                              l1059 1EDE  
                            l2123 32EA                              l2115 3202  
                            l1084 45BE                              l2044 5F34  
                            l2124 32D2                              l2116 31EA  
                            l1077 4586                              l2053 6134  
                            l2125 3318                              l2117 322C  
                            l1158 67DE                              l2150 2D78  
                            l2054 6104                              l1254 6DB2  
                            l2046 5F66                              l2126 32D8  
                            l2118 31F0                              l1079 4596  
                            l2151 2D22                              l2143 2D06  
                            l2071 490A                              l2127 32DE  
                            l2119 31F6                              l2152 2D3A  
                            l2144 2D1A                              l2400 40B8  
                            l2056 6110                              l1280 5760  
                            l2128 32E4                              l2153 2DA8  
                            l2145 2D44                              l2065 48B0  
                            l2401 40A8                              l2057 611C  
                            l2330 4944                              l2066 48C0  
                            l2058 6128                              l2331 495A  
                            l2067 48EA                              l2403 40DE  
                            l1283 57C2                              l1276 5748  
                            l2333 4984                              l2157 2DFE  
                            l2069 48FC                              l2085 3E4C  
                            l2077 5A14                              l2334 4978  
                            l2158 2E5C                              l2086 3E60  
                            l1294 5678                              l1630 3AA8  
                            l2159 2E04                              l2079 5A20  
                            l1295 563E                              l1631 3B04  
                            l1296 56A2                              l1632 3AE8  
                            l2600 21D4                              l2513 4A24  
                            l2337 49BA                              l1297 5648  
                            l2601 21A6                              l2514 4A14  
                            l2338 49C8                              l2362 2ED8  
                            l1298 564C                              l1730 65FC  
                            l2610 008C                              l2602 2280  
                            l2339 49DC                              l2363 2F26  
                            l1299 5650                              l1627 3B50  
                            l2611 00BA                              l2099 5990  
                            l2364 2F78                              l2700 0520  
                            l1724 66F4                              l1732 6624  
                            l1628 3B46                              l2620 01B4  
                            l2612 00B0                              l2517 4A7E  
                            l2365 2FCA                              l2701 054A  
                            l1629 3AC6                              l2621 01BA  
                            l2605 001E                              l2518 4A90  
                            l2710 07F8                              l2702 0544  
                            l1726 6722                              l2630 0252  
                            l2622 01C4                              l2614 0120  
                            l2606 004C                              l2703 055C  
                            l1735 6CB4                              l2615 00E4  
                            l2607 0042                              l2720 090A  
                            l2704 0584                              l2392 400A  
                            l2632 0334                              l2624 0264  
                            l2800 3070                              l2721 0934  
                            l2641 03BC                              l2625 0204  
                            l2609 0078                              l2369 687A  
                            l2570 5A92                              l2722 092A  
                            l2394 408C                              l2730 2516  
                            l2634 0354                              l2618 01D4  
                            l2571 5AA0                              l2715 0866  
                            l2395 4078                              l1827 37EC  
                            l2619 01A0                              l2580 60EA  
                            l2708 080C                              l2740 25F6  
                            l2732 2582                              l1828 380C  
                            l2628 0242                              l2581 60F8  
                            l2717 08B6                              l2709 07E2  
                            l2741 2648                              l2733 2564  
                            l2725 24D6                              l2653 0472  
                            l2637 0386                              l2629 0248  
                            l2566 5A5C                              l2718 08DC  
                            l2726 24E6                              l2670 0E6A  
                            l2662 0D8A                              l2654 047E  
                            l2646 03E8                              l2638 039C  
                            l2806 3FC6                              l2567 5A50  
                            l2735 25D0                              l2727 250E  
                            l2663 0DB8                              l2655 0482  
                            l2639 03A8                              l2807 3F22  
                            l1784 3944                              l2576 60C0  
                            l2736 25C0                              l2680 0FE6  
                            l2672 0E98                              l2664 0DAE  
                            l2656 0496                              l2760 15E0  
                            l1785 3952                              l2577 60B4  
                            l2729 2526                              l1873 6812  
                            l2681 0FBC                              l2673 0F9A  
                            l2649 043E                              l2761 176E  
                            l2690 10BE                              l2682 0FD2  
                            l2674 0F16                              l2666 0DE8  
                            l2770 3CFC                              l2762 1736  
                            l1787 395C                              l2691 10F4  
                            l2675 0F4E                              l2667 0E16  
                            l2771 3D98                              l2692 1104  
                            l2676 0F42                              l2668 0E0C  
                            l2780 3B8A                              l2756 150E  
                            l2596 20F6                              l2693 1108  
                            l2677 0F96                              l2597 20E2  
                            l2782 3BF0                              l2758 1558  
                            l2687 1040                              l2767 3CDA  
                            l2759 15A2                              l2599 211E  
                            l2696 04C6                              l2776 4B94  
                            l2768 3CC6                              l2784 3C32  
                            l2697 04F0                              l2689 1090  
                            l2785 3C20                              l2698 04EA  
                            l2699 0502                              l2798 303E  
                            ?_exp 00D3                              ?_log 00CB  
                  ??_Console_Init 0060             Port_SetPinType@pInput 0086  
                            ?_pow 00DE                              STR_1 FF94  
                            STR_2 FF09                              STR_3 FFD5  
                            STR_4 FFF8                              STR_5 FFF7  
                            STR_6 FFE1                              STR_7 FF62  
                            STR_8 FFEC                              STR_9 FFAB  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              _LATD 000F8C  
                            _LATE 000F8D                              _LATF 000F8E  
     __size_of_MXK_InitTestButton 001E                              _LATG 000F8F  
             __end_of_GetPortPORT 516C                              _PIR1 000F9E  
                            _PIR2 000FA1                              _PIR3 000FA4  
             __end_of_GetPortTRIS 5020                              u9050 5374  
                            u9300 60C6                              u9124 5FF6  
                            u9125 5FF0                              u9070 53DA  
                            u9134 6028                              u9135 6022  
                            u9240 5612                              u9400 5FA4  
                            u9057 536A                              u9250 5618  
                            u9410 5FCE                              u9154 4C80  
                            u9090 585C                              u9155 4C7A  
                            u9075 53D4                              u9164 4CB2  
                            u9180 6548                              u9325 6DDE  
                            u9165 4CAC                              u9326 6DE0  
                            u9270 5A62                              u9185 6542  
                            u9530 4A2A                              u9710 62A6  
                            u9390 4372                              u9490 498A  
                            u9650 63E2                              _SPI1 016A  
                            _SPI2 0175                              u9805 115A  
                            u9590 5E78                              u9815 1172  
                            u9655 63DC                              u9680 3858  
                            u9665 37A4                              u9825 118A  
                            u9835 11AC                              u9940 64EE  
                            u9764 54E2                              u9845 132C  
                            u9765 54DC                              u9855 13AA  
                            _TMR0 000FD6                              u9865 13EC  
                            u9875 142E                              u9974 6946  
                            u9975 6940                              _gISR 0108  
              Event_DIPSwitch@Bar 007A                     ??_Byte_GetBit 0063  
                            _diff 0122              __size_of_ADC_SetupIO 0032  
              SPI_MaxSpeed@pInput 006F                     ?_Byte_SetByte 0060  
                   ?_Byte_SetPair 006B                   __end_of_SPI_DCS 69F0  
                            _main 31A4                              _mode 0128  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 42C8                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 0060                              btemp 0051  
                            _zero 004E                              exp@x 00D3  
                            log@x 00CB                  __end_of_ADC_Init 5942  
                   ??_Byte_SetBit 0064                              pow@x 00DE  
                            pow@y 00E2                __size_of_LCD_Reset 0050  
            __size_of_ADC_Voltage 00D8                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 0065  
                            start 14AA                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
               Timer0_Init@DIVIDE 0077                   ?_SPI_DisableISR 0060  
                Motor_Move@pMotor 0063               HMI_SetButton@pValue 0066  
                   Console_Init@x 0062                     Console_Init@y 0063  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FEAF  
            Set_Rotation@rotation 0066            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A                       ?_ISR_Enable 0001  
                           ??_exp 00D7                             ??_log 00CF  
                           ??_pow 00E6      __size_of_Console_ClearCursor 003E  
                __end_of_LCD_Fill 626C                  __end_of_LCD_Init 361A  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 60A0                  ??_multiSampleADC 00BB  
                   ??_Button_Init 00A8           GetPortProperties@pInput 0062  
                   ??_Button_Poll 007E                  __end_of_HMI_Init 248C  
                           l12131 55C6                             l12125 55B6  
                           l12315 4B48                             l12501 37EC  
                           l12263 4372                             l12435 5E3A  
                           l12443 5E78                             l14213 457C  
                           l12437 5E4C                             l12541 6280  
                           l14143 5CC0                             l14119 3538  
                           l14129 35DC                             l14219 458C  
                           l14147 5CCE                             l12539 626E  
                           l13437 10F4                             l14247 57DC  
                           l14183 56CC                             l11697 3016  
                           l13811 623C                             l14189 56DC  
                           l14269 245E                             l13815 624A  
                           l14713 1ED4                             l13851 2C44  
                           l14469 2DAE                  __end_of_HMI_Poll 5B94  
                           l13951 3944                             l14559 1736  
                           l14749 67AC                             _I2C1T 0041  
                           _I2C2T 01BC                     ___fltol@sign1 00C3  
                 __end_of___fladd 04A8                             ?_main 0001  
                 __end_of___fldiv 112C                   __end_of___awdiv 49E6  
                 __end_of___flneg 688C                             ?_itos 006C  
                           STR_10 FF29                             STR_11 FFC1  
                           STR_12 FF48                             STR_13 FF7C  
                           STR_14 FF7C                             STR_15 FF7C  
                           STR_16 FFFC                   __end_of___flmul 094E  
                 __end_of___flsub 643C                   __end_of___fltol 40F0  
                 _Event_DIPSwitch 6A20                   __end_of___lldiv 4AA2  
                           u10200 01E0                             u11100 4BC6  
                           u10150 016A                             u10160 0182  
                           u11050 25DE                             u10410 0450  
                           u10330 03C2                             u10170 0184  
                           u11108 4BCA                             u11400 3A9A  
                           u10360 03E2                             u11250 6266  
                           u11410 3ADA           __size_of_HMI_LeftSwitch 0018  
                           u11228 3768                             u10620 103A  
                 ___awdiv@divisor 0068                             u11600 5CEA  
                           u11360 39B0                             u11168 4534  
                           u11280 2CE4                             u11290 691A  
                           u10810 0860                             u11530 34C8  
                           u11178 362C                             u10650 10A4  
                           u11450 3CEA                             u11179 3640  
                           u11700 4600                             u12260 205A  
                           u10660 10D2                             u11710 460C  
                           u10750 0570                             u12510 5A0C  
                           u11390 3A86                             u11295 6914  
                           u12440 489E                             u10840 08CA  
                           u10760 0784                             u12408 4D02  
                           u12409 4D16                             u10850 08F0  
                           u10930 402A                             u11650 573E  
                           u11570 35DC                             u12418 4D22  
                           u11490 3BBC                             u12419 4D36  
                           u11900 2E68                             u12428 4D42  
                           u10765 0778                             u12429 4D56  
                           u11750 5832                             u12438 4D60  
                           u10935 401E                             u12439 4D74  
                           u11745 57F4                             u12490 4920  
                           u10970 40C2                             u11498 3BC0  
                           u12650 2188                             u13278 66BE  
                           u12398 4CD8                             u12590 59B0  
                           u13279 66D4                             u12399 4CEC  
                           u11880 2DEA                             u11970 15AC  
                           u11980 15AE                             _INDEX 00F9  
                 __end_of___lwdiv 5AAA                             _MASKS FCBF  
                 __end_of___lwmod 6102                             i2l430 4EE8  
                           i2l432 4F0E                             i2l433 4F38  
                           i2l427 4F5E                             i2l732 5AF6  
                           i2l733 5AF0                             i2l832 666C  
                           i2l781 6A0E                   ___awdiv@counter 006A  
                           _PORTA 000F80                             _PORTB 000F81  
                           _PORTC 000F82                             _PORTD 000F83  
                           _PORTE 000F84                             _PORTF 000F85  
                           _PORTG 000F86           __size_of_HMI_DownSwitch 0018  
                           _TRISA 000F92                             _TRISB 000F93  
                           _TRISC 000F94                             _TRISD 000F95  
                           _TRISE 000F96                             _TRISF 000F97  
                           _TRISG 000F98                  ??i2_Byte_GetPair 000D  
                   ?_FunctInitADC 0001                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 0076                   __end_of_getMode 615E  
                  __CFG_FCMEN$OFF 000000                             _PortA 0278  
                           _PortB 019E                             _PortC 01A8  
                           _PortD 0194                             _PortE 018A  
                           _PortF 01B2                             _PortG 0180  
         __end_of_Port_SetPinType 281A                   _ADC_Initialised 012F  
                  ??_Byte_GetPair 006C                             _angle 0029  
                  ?i2_Port_SetPin 0010                       LED_Set@pLED 0075  
           __size_of_ADC_Sequence 0046                   __end_of_dpowers FCBF  
                  ??_Byte_GetZone 0065                             _floor 3C86  
                           _ldexp 3B62                    Button_Poll@Pin 0083  
                           _frexp 4B5C                             _errno 011A  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 486A  
                __end_of_MXK_Init 34A8                             _speed 002F  
            i2Byte_GetPair@pInput 000A                             _putch 6DFE  
                           _steps 002D                  __end_of_SPI_Init 0D6C  
                __end_of_SPI_Send 5E38             __end_ofi2_MXK_Release 6E9A  
                           pclath 000FFA                             tablat 000FF5  
                 __end_of_reverse 5DCC                __size_of_MXK_Queue 000E  
                  ??_Byte_SetByte 0063                 __end_of_ADC_Start 57C8  
                  ??_Byte_SetPair 006F                             pow@yi 028B  
                  ??_Byte_SetQuad 006F                             plusw2 000FDB  
                  ??_Byte_SetZone 0066                             status 000FD8  
                           wtemp6 0052            __size_of_ADC_Calibrate 0014  
                 _Configure_GPIOs 5CF0              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 6C7E  
             __size_of_LED_Toggle 0048               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001                       exp@exponent 00DB  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 006A  
                     ldexp@newexp 00CF               __size_of_HMI_SetBar 000A  
                 __initialization 5516               __size_of_HMI_Render 003E  
                     log@exponent 00CF               __end_of_Byte_GetBit 692C  
                  _remainingSteps 0120                      __end_of_main 3328  
                    __end_of_itos 43A0              HMI_SetButton@reindex 0062  
                    SPI_Send9@dat 012A               __end_of_Byte_SetBit 603E  
                __end_of_FunctADC 6DD0                  __end_of_InitList FC95  
     __size_of_Port_CheckQuadType 005A                  __end_of_Mode_Set 6DE2  
                       ??_ADC_Off 0060       __size_of_Port_CheckPortType 0048  
                     HMI_Render@a 0068                            ??_main 00E6  
                ?_displayNullMode 0001                      _ADC_Sequence 65A0  
                          ??_itos 0070          __size_of_FunctInitButton 00A2  
         _Console_MakeField$10974 006E                     __activetblptr 000003  
               Port_SetPin@pInput 006F                 __end_of_LCD_Reset 635E  
               Port_SetPin@pValue 0072                  ?_displayStepMode 0001  
                  ??_FunctInitADC 0067                         ??_LED_Set 0075  
               _MXK_InitDIPSwitch 6C06                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 6BAA                       _GetPortPORT 50C6  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 4F7A  
                 ??_LCD_DrawField 007C        __end_of_PortProperty_Valid 58C6  
                __end_of_Port_Set 14E6                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0066               __end_of_Button_Init 454A  
             __end_of_Button_Poll 3780                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 5486                         ??_SPI_DCS 0062  
                          ?_floor 00C5                            ?_ldexp 00CB  
                          ?_frexp 0060                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _ADC_On 6E88  
                   _HMI_SetNumber 6A7C            Port_SetQuadType@Output 009A  
                          _ANCON0 000FC1                  ___awdiv@dividend 0066  
                  _continuousMode 695E                            ?_putch 0001  
                ??_Console_Render 0083                     ToSegment@pCHR 0060  
           _Console_SetForecolour 6E52                  _Console_FormFeed 55A4  
          Port_SetQuadType@pInput 0096                            i2l1630 4156  
                          i2l1631 41A2                            i2l1632 418E  
                          i2l1730 68D4                            i2l1627 41DE  
                          i2l1732 68F4                            i2l1628 41D4  
                          i2l1629 416C                            i2l1590 145E  
                  __CFG_WDTEN$OFF 000000               __size_of_ISR_Enable 000A  
                          i2l9457 666C                            i2l9459 667C  
          __end_of_LCD_Word_Write 6C9C                    _Timer0_Restart 6E1A  
             ??_MXK_InitDIPSwitch 009B                  __end_of___xxtofl 265A  
                  i2_MXK_SwitchTo 68C2                   Byte_GetBit@pBit 0062  
    Console_SetForecolour@pColour 0060                        _Reset_High 6BE8  
              Console_Render@temp 0085                    ??_HMI_UpSwitch 0066  
                  OutSeg@pSegment 0063                   ??i2_Timer0_Stop 0001  
             Port_TogglePin@Value 0077            ADC_SetChannel@pChannel 0061  
                __end_of_delay_ms 5EA2                      LED_Init@pLED 008D  
                __end_of_delay_us 62BE                     ??_Timer0_Init 0071  
                   ??_Timer2_Init 0071                     ??_Timer0_Stop 0060  
                      _Timer0_ISR 6A4E          __size_of_Console_NewLine 00A0  
               Timer2_Init@DIVIDE 007A                    __CFG_XINST$OFF 000000  
                          _OutSeg 57C8          __size_of_HMI_InitButtons 0006  
                      _Motor_Init 43A0                        _Motor_Move 681A  
                   ??_Motor_Speed 007F                            ___flge 2E8A  
                      _Motor_Step 3A3C                            _mDelta 011C  
         __end_of_Event_DIPSwitch 6A4E                         ??___fladd 00AF  
                          ___wmul 688C                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 006A  
                       ??___flneg 0080                    __CFG_STVREN$ON 000000  
                          _change 004D                         ??___flmul 0084  
                          _lMotor 00F1                         ??___flsub 00C3  
                       ??___fltol 00BF                         ??___lldiv 0068  
                          _lQueue 00EC                        _TestButton 026E  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 1C5A  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 0035  
            __end_of_Console_Init 5744                            _locked 011E  
               GetPortTRIS@pInput 0062                __size_of_Reset_Low 001E  
                          clear_0 555E                            clear_1 5570  
                          clear_2 557C                            clear_3 5588  
                          clear_4 5594                  ___awdiv@quotient 006C  
                      Port_Init@i 00A5                 __end_of_MXK_Queue 6DFE  
      __end_ofHMI_SetButton@F7213 FCCC                         ??_getMode 0060  
                          _printf 2CF8                  __end_of_inputVar 4D78  
       __end_of_MXK_InitDIPSwitch 6C24                     _ADC_Calibrate 6DAA  
                  HMI_SetButton@v 0067                            floor@i 00C9  
                          floor@x 00C5            HMI_SetSegments@pString 0061  
                     _Console_Tab 47A8               LCD_Word_Write@value 0065  
                    __pdataCOMRAM 0048                __size_of_Port_Init 0192  
                   ??_Port_GetPin 0063          Port_CheckPortType@Output 0099  
                __end_of_nullMode 6B1E                         ?_ADC_Init 0064  
                 ??i2_Port_SetPin 0014                      __mediumconst FBE2  
     __end_ofTimer2_Init@PRESCALE FCCF          Port_CheckPortType@pDrive 0098  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 0096  
                   ??_Port_SetPin 0073                         ??_reverse 0064  
          __end_of_continuousMode 6990                  __end_of_stepMode 59BA  
           Console_MakeField@Fill 021E                  ?_Port_SetPinType 0086  
                          putch@c 007A                 Motor_Speed@pMotor 007B  
                  ?_HMI_SetNumber 0076                    i2_Word_GetPair 69F0  
         __end_of_Configure_GPIOs 5D60                  ??_MXK_TestButton 0066  
          __end_of_Timer0_Restart 6E26                     Set_Rotation@m 0065  
                    ?_MXK_Release 0001                        ___flge@ff1 0060  
                      ___flge@ff2 0064                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 68F8                      ___xxtofl@arg 0078  
                __end_ofexp@coeff FED7                      i2delay_us@us 0001  
                    ___xxtofl@exp 0077                      ___xxtofl@val 006E  
                __end_oflog@coeff FEFB                   ?_LCD_Word_Write 0065  
                      __accesstop 0060           __end_of__initialization 559A  
                       ?_LCD_Fill 0069                         ?_LCD_Init 0001  
                   SPI_Init@pMode 0092                        ___flneg@f1 007C  
                     _Byte_GetBit 68F8                         ?_LED_Init 0001  
        __end_ofi2_Timer0_Restart 6E3E                         ?_HMI_Init 0001  
               ??_Set_Addr_Window 0068                         ?_HMI_Poll 0001  
                    eval_poly@res 00C7                     ___rparam_used 000001  
                      ___fltol@f1 00BB                       _Byte_SetBit 5FDA  
                   __end_of_MASKS FCC8                    _PortA_Property FF07  
                     ?_Event_NULL 0001                         LCD_Fill@i 006B  
                       LCD_Fill@j 006C                         LCD_Init@i 0097  
                  __pcstackCOMRAM 0001                    _PortB_Property FF05  
             __size_ofi2_delay_us 0040                      __pidataBANK1 6D96  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 6C60  
                 Console_Render@x 008A                   Console_Render@y 008B  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FC95              __end_of_Byte_GetZone 53EE  
              ADC_Sequence@pItemA 0060                ADC_Sequence@pItemB 0062  
                   __end_of_floor 3DAA                     __end_of_ldexp 3C86  
                   __end_of_frexp 4C12                    _PortC_Property FF03  
             __end_of_Timer0_Init 3A3C                     __end_of_putch 6E0C  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 38DE  
             __end_of_Timer0_Stop 6E82                    ?_ADC_Calibrate 0001  
                       ?_SPI_Init 008D                         ?_SPI_Send 0060  
                     _Button_Init 4476      __size_of_displayPositionMode 0122  
               Port_SetType@pType 009C                       _Button_Poll 361A  
            __end_of_Byte_SetByte 6DF0              __end_of_Byte_SetPair 6B66  
                  _HMI_LeftSwitch 6D66                    _PortD_Property FF01  
            __end_of_Byte_SetQuad 6B88                      ??_LED_Toggle 0078  
                    ??_HMI_GetBar 0060              __end_of_Byte_SetZone 4CC8  
             __end_of_Motor_Speed 6AD0                    _HMI_DownSwitch 6D1E  
                   SPI_Send@pData 0062             __end_of_MXK_DIPSwitch 6D06  
           _displayContinuousMode 486A                      ??_HMI_SetBar 0060  
                    ??_HMI_Render 0068                    _PortE_Property FEFF  
                      ??_ADC_Init 0067          __size_of_HMI_SetSegments 00BA  
          __end_ofi2_Word_GetPair 6A20                   ?_continuousMode 0001  
                  _PortF_Property FEFD           Port_CheckQuadType@Pair1 0093  
         Port_CheckQuadType@Pair2 0094          MXK_BlockSwitchTo@pModule 0067  
                         ??_floor 00C9                           ??_ldexp 00D1  
                         ??_frexp 0066            ?_Console_SetForecolour 0060  
               ??_FunctInitButton 00A8                           ?_ADC_On 0001  
               _Console_Backspace 615E                   ?_Timer0_Restart 0001  
                         ??_putch 007A          __size_of_HMI_RightSwitch 0018  
             _Console_ClearCursor 6764                 __end_of_ToSegment 1A04  
                  _PortG_Property FEFB                        __pbssBANK0 00E8  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 655A           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                __size_of_eval_poly 0118  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 6BE8  
                       ?_FunctADC 0001         __size_of_Event_TestButton 003A  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 006B  
                      ??_LCD_Init 0095               __end_of_Port_SetPin 47A8  
          __end_of_PortA_Property FF09                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 0060                        ??_LED_Init 008D  
        ADC_ClockDivision@pDivide 0060                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
              _ADC_ConversionTime 64CC                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00A8                        ??_HMI_Poll 0084  
                   ?_Timer2_Clear 0001                        _main$15226 01F9  
         Port_CheckPairType@Props 008D            __end_of_PortB_Property FF07  
                   ?_Timer0_Start 0060                 __end_of_Port_Init 2CF8  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 0088  
              __end_of_LED_Toggle 64CC                __end_of_HMI_GetBar 6E7C  
            __end_of_FunctInitADC 4E26          LCD_FillRectangle@pColour 0069  
             ??_Console_Backspace 0062                 Set_Addr_Window@xe 0066  
               Set_Addr_Window@ye 0067                 Set_Addr_Window@xs 0068  
               Set_Addr_Window@ys 0065                           ?_OutSeg 0063  
                     ?_Motor_Init 008D                Byte_SetPair@pInput 006B  
                     ?_Motor_Move 0063                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 006E                           ?___flge 0060  
              __end_of_HMI_SetBar 6E48            __end_of_PortC_Property FF05  
              Word_GetPair@pInput 006C                __end_of_HMI_Render 67E0  
                  ??_Set_Rotation 0065                         ?_Port_Set 006F  
             ?_ADC_ConversionTime 0001                           ?___wmul 0060  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 0065  
                    ??_ISR_Enable 0060      __size_of_Console_ResetCursor 001E  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 6D7E  
          __end_of_PortD_Property FF03                           _ADC_AN0 01D8  
                         _ADC_AN1 01D3                           _ADC_AN2 01CE  
                         _ADC_AN3 01C9                        ??_MXK_Init 00A6  
               Port_GetPin@pInput 0060                 _Console_MakeField 454A  
                         _ADC_Off 6E6E                 ??_Console_NewLine 0060  
        ADC_ClockDivision@unfound 0062            __end_of_HMI_DownSwitch 6D36  
                      ??_SPI_Init 0093            Event_TestButton@pState 0079  
                      ??_SPI_Send 0063                           ?_printf 007B  
               ??_HMI_InitButtons 0060        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FF01               Console_Render@F6956 01E5  
              ?_Console_MakeField 0065                           _COUNTER 0033  
                 ??_HMI_SetButton 0060              __end_of_HMI_UpSwitch 6D4E  
                         _LED_Set 62BE           _Console_IncrementCursor 5F74  
                       ?___xxtofl 006E            __end_of_PortF_Property FEFF  
                     _gBackcolour 0037                   ??_HMI_SetNumber 0078  
                       _I2C1_Done 0117                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0114                         _I2C1_More 0111  
                       _I2C2_More 010E                         ?_delay_ms 0060  
       __end_of_Console_Backspace 61BA                         ?_delay_us 0060  
             __size_of_Event_NULL 0002        __end_of_MXK_InitTestButton 6C42  
                         _SSP1ADD 000FC8                        _displaySID 6BAA  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
            ??_ADC_ConversionTime 0060            __end_of_PortG_Property FEFD  
             ??_Console_MakeField 0067           __size_of_ADC_SetChannel 001C  
                         _SPI_DCS 69C0              __size_ofi2_MXK_Queue 000E  
                   ??_ADC_SetupIO 0060                  ?_Configure_GPIOs 0001  
                 __size_of_ADC_On 0006                  ADC_Init@pChannel 0066  
            i2Byte_GetZone@Offset 0008                     ??_ADC_Voltage 0099  
                      ??_FunctADC 0066                __end_of_ISR_Enable 6E52  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
                  ??_Timer0_Clear 0060                 Event_TestButton@j 00F7  
                      ??_Mode_Set 0060                    ??_Timer2_Clear 0060  
                         _Font5x7 FCCF              i2Byte_GetZone@pChunk 0004  
        ADC_ConversionTime@pCount 0061              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 0063                         ?_inputVar 0001  
            SPI_DisableISR@pInput 0060                     ?_Port_GetQuad 0060  
                 Byte_SetBit@pBit 0062              Port_TogglePin@pInput 0074  
           __end_ofi2_Byte_SetBit 63AA                         _ADC_Start 5744  
                         __Hparam 0000                 Port_GetQuad@pQuad 0062  
                     _Timer0_Init 38DE                       _Timer2_Init 3780  
                         __Lparam 0000                       _Timer0_Stop 6E7C  
           __size_of_Console_Init 008A                           OutSeg@a 003E  
 __end_ofPortProperty_Valid@F6830 FCB5                     LCD_Write@mode 0063  
                       ?_nullMode 0001                   __size_of_OutSeg 0082  
                      ??_Port_Set 0072                   __size_of___flge 0190  
       __end_of_Console_MakeField 461A                 _Console_PrintChar 29CC  
                     _Motor_Speed 6AA6                           _Stepper 01C3  
                         ___fladd 0000                     ?_Port_SetType 009A  
                         _gCursor 0048                           ___fldiv 0D6C  
                         ___awdiv 4928                           ___flneg 6854  
           ??_Console_ClearCursor 0060                           ___flmul 04A8  
                         ___flsub 63F4                           ___fltol 3FE4  
                         _lBuffer 028F                           ___lldiv 49E6  
                 __size_of___wmul 0036                         ?_stepMode 0001  
                 ??_ADC_Calibrate 0060                           ___lwdiv 5A32  
                         ___lwmod 60A0                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 5630                        _currentPos 01F1  
              ?_Console_PrintChar 0001                           __pcinit 5516  
               __end_of_eval_poly 3FE4                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                        _initialise 5F0C  
                         _getMode 6102                           __ptext0 31A4  
                         __ptext1 5942                           __ptext2 2092  
                         __ptext3 301A                           __ptext4 14E6  
                         __ptext5 3B62                           __ptext6 3C86  
                         __ptext7 4B5C                           __ptext8 3ECC  
                         __ptext9 63F4            ?_displayContinuousMode 0001  
                 __size_of_printf 0192                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FCB5  
                       _T2CONbits 000FCA                     LED_Set@pValue 0074  
                    __size_of_exp 029A                      __size_of_log 018A  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 0079  
                    __size_of_pow 0200                        ??___xxtofl 0072  
                    ?_GetPortPORT 0060                      ?_GetPortTRIS 0060  
             ??_Console_PrintChar 0076                       _Port_GetPin 6514  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 01E1  
             LCD_DrawRectangle@p4 01DD                      ??i2_delay_us 0003  
                      ??_delay_ms 0062                        ??_delay_us 0062  
                         _reverse 5D60                         _DIPSwitch 0264  
             __size_of_Timer0_ISR 002E                           _upState 00F6  
                     _Port_SetPin 46E4                    LCD_DrawField@i 0082  
                       _LCD_Reset 630E               __size_of_Motor_Init 00D6  
             __size_of_Motor_Move 003A               __size_of_Motor_Step 0126  
                       _LCD_Write 6B88              __size_of_MXK_Dequeue 003E  
                      delay_ms@ms 0060              end_of_initialization 559A  
             ADC_SetupIO@pChannel 0062                           exp@sign 00DD  
                      delay_us@us 0060                 ??_HMI_SetSegments 0063  
         Console_PrintChar@pInput 0079                      _Console_Init 56BA  
            __size_of_MXK_Release 001C        __end_of_Port_CheckPairType 5F0C  
                         itos@Out 0074                    ??_Port_GetQuad 0063  
              _PortProperty_Valid 584A                        _rightState 0039  
              Byte_SetQuad@pInput 006B                         i2u1329_48 6A66  
                      ??_inputVar 00BB                SPI_MinSpeed@pInput 006F  
              Byte_SetQuad@pValue 006E               __end_of_ADC_SetupIO 695E  
           __size_of_Byte_GetPair 001E                   ___lldiv@divisor 0064  
           __size_of_Byte_GetZone 009C                        ?_ADC_Start 0062  
               ??_HMI_RightSwitch 0066                           pow@sign 028A  
                 ___lldiv@counter 006C         __end_of_Console_PrintChar 2B66  
             __end_of_ADC_Voltage 42C8                        ??_nullMode 0060  
                  ??_Port_SetType 009D        __end_of_Port_CheckQuadType 6214  
                         printf@c 0086                           printf@f 007B  
                  Port_Init@pPort 00A2                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 0069  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 006F             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 6484             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 66AA                        ??_stepMode 007F  
              Button_Init@pInitIO 009F             Timer0_Init@pFrequency 006D  
               ?_Port_SetQuadType 0096                       _gForecolour 01F5  
       ??_Console_IncrementCursor 0064            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 009A  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 0066  
                     ___fladd@grs 00BA             Console_Render@lCursor 0086  
                       _MXK_Queue 6DF0                  __CFG_CPUDIV$OSC1 000000  
                   ___xxtofl@sign 0076                  Byte_GetZone@pMax 0062  
      __size_of_Console_Backspace 005C                   _Set_Addr_Window 4E26  
                  SPI_Init@pClock 008D                  ??_LCD_Word_Write 0067  
                     ?_displaySID 0001                       ___fldiv@grs 0073  
                     ___fldiv@rem 006D             __end_of_LCD_DrawField 5210  
                  Port_Set@pInput 006F                    SPI_Init@pInput 0093  
            ??_PortProperty_Valid 0073                 __size_of_ADC_Init 007C  
                  Port_Set@pValue 0071                        ?_LCD_Reset 0001  
         __size_of_multiSampleADC 01B2          __size_of_displayNullMode 0042  
            __end_of_Set_Rotation 5486                        ?_LCD_Write 0063  
                    _Byte_GetPair 6C42                HMI_SetButton@F7213 FCC8  
                    _Byte_GetZone 5352                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 0080                 LCD_DrawField@ymax 0081  
        __size_of_displayStepMode 0078                    __end_of_ADC_On 6E8E  
                  _Port_TogglePin 6990                  _Event_TestButton 67E0  
           __size_of_FunctInitADC 00AE                       ___flmul@grs 008A  
             _displayPositionMode 3DAA              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060           __size_ofi2_Byte_GetPair 001A  
                   ?_positionMode 0001                      _Byte_SetByte 6DE2  
                    _Byte_SetPair 6B44                   ADC_SetupIO@MASK 0063  
                    _Byte_SetQuad 6B66           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 4C12              Port_SetPinType@pType 0089  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 0060  
                   ?_SPI_MaxSpeed 006F                 __size_of_LCD_Fill 0058  
                    ??_Event_NULL 0060                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 006F  
           __end_ofi2_Timer0_Stop 6E94                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0074  
                   ?i2_Motor_Step 0001        __size_of_Console_MakeField 00D0  
                  __end_of_OutSeg 584A                    __end_of___flge 301A  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 68C2  
           __end_of_HMI_DIPSwitch 6D1E                     __pidataCOMRAM 6E5C  
                     ?_initialise 0001                      ?_Button_Init 009B  
            ?_displayPositionMode 0001                   _FunctInitButton 5210  
                    ?_Button_Poll 007B                         _Bus_State 004C  
                ??_continuousMode 007F               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA              __end_of_Timer0_Clear 6E32  
               __size_of_MXK_Init 0180                        floor@expon 00CD  
            __end_of_Timer2_Clear 6E6E                    __end_of_printf 2E8A  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 006C                  ??_Timer0_Restart 0060  
            __end_of_Timer0_Start 6B44           ??_Console_SetForecolour 0062  
              Port_SetType@Output 009F               start_initialization 5516  
                      ?_MXK_Queue 0060                        eval_poly@d 00BF  
                      eval_poly@n 00C1                        eval_poly@x 00BB  
                    _FunctInitADC 4D78                        ldexp@value 00CB  
        PortProperty_Valid@Errors 0075                  ??i2_MXK_SwitchTo 0007  
               _LCD_FillRectangle 5C7C                Port_SetType@pInput 009A  
                  _ADC_SetChannel 6CB8                       __end_of_exp 1780  
                     __end_of_log 31A4                       __end_of_pow 2292  
                      HMI_Init@in 00A8               HMI_SetNumber@pInput 0076  
           __end_ofi2_Port_SetPin 4F7A                __end_of_Event_NULL 1406  
          __end_of_Port_TogglePin 69C0                     ?_Word_SetPair 006F  
               Byte_SetBit@pInput 0060                          ??_ADC_On 0060  
                  ??_MXK_SwitchTo 0066                 Byte_SetBit@pValue 0063  
              ?_LCD_FillRectangle 0069               _Console_ResetCursor 6C60  
     PortProperty_Valid@pPinDrive 0071                       _ADC_SetupIO 692C  
            MXK_BlockSwitchTo@CUR 0066          PortProperty_Valid@pInput 006F  
                   i2_MXK_Release 6E94                       _ADC_Voltage 41F0  
                      frexp@value 0060                    ??_positionMode 00C5  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 01C0  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1780               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Console_NewLine 52B2  
               __size_of_FunctADC 0012                    ??_SPI_MinSpeed 0071  
                     ??_ADC_Start 0064                      _HMI_UpSwitch 6D36  
                       _Reset_Low 6BCA                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 6E82                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 019A                    ADC_Init@pInput 0064  
                       _gCharSize 01ED                  Timer2_Init@INDEX 00F8  
                       OutSeg@cur 0040                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 0091                          ??_OutSeg 0064  
                       OutSeg@out 0067           __size_of_Console_Render 020E  
                    ??_Motor_Move 0067                      ??_Motor_Step 0074  
                        ??___flge 0068                Byte_SetZone@Offset 0069  
                        ??___wmul 0064               __size_of_displaySID 0020  
            ?_Console_ResetCursor 0001                         _Port_Init 2B66  
                     __pdataBANK1 01E5                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 0063             ??_displayPositionMode 00C5  
                        ?_ADC_Off 0001                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 0060                Byte_SetZone@pValue 0065  
                   Mode_Set@pMode 0060                          ??_printf 007F  
         __end_of_Set_Addr_Window 4ED0          Port_CheckQuadType@Output 0095  
                       _gLineSize 01E9          Port_CheckQuadType@pDrive 0092  
                       ___fladd@a 00AB                         ___fladd@b 00A7  
                  ??_Word_GetPair 006F          Port_CheckQuadType@pInput 008F  
            __end_of_Port_GetQuad 63F4                         ___fldiv@a 0064  
                       ___fldiv@b 0060         __end_of_LCD_FillRectangle 5CF0  
                     __pbssBIGRAM 028F            __end_of_ADC_SetChannel 6CD4  
                        ?_LED_Set 0074                         ___flmul@a 0080  
                       ___flmul@b 007C                       __pbssCOMRAM 0029  
                       ___flsub@a 00BF                         ___flsub@b 00BB  
                 ADC_Start@pInput 0062                __end_of_Reset_High 6C06  
                   __pcstackBANK0 0060                     __pcstackBANK1 01F9  
                   __pcstackBANK2 0282                        itos@Length 0072  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 01CE  
              __end_of_Timer0_ISR 6A7C              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 1E84                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
              __end_of_Motor_Init 4476               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Move 6854                __end_of_Motor_Step 3B62  
           Timer2_Init@pFrequency 006D                    ?i2_MXK_Release 0001  
                       _exp$15229 00D7               __size_of_initialise 0068  
        Port_CheckPairType@Output 008C                 ??_displayNullMode 0087  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 0089  
        Port_CheckPairType@pInput 0086                    reverse@tempVar 0064  
              _MXK_InitTestButton 6C24                        ?_Reset_Low 0001  
                    ?_Timer0_Init 006D            __size_of_MXK_DIPSwitch 0018  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
               ??_displayStepMode 0087                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 0060                     _lStepFunction 010B  
         __size_of_MXK_TestButton 0018                 Byte_SetPair@pPair 006D  
         __end_of_FunctInitButton 52B2                 __size_of_inputVar 00B0  
                ??_HMI_DownSwitch 0066                         __pintcode 1408  
                   __pmediumconst FBE2                      ?_Motor_Speed 007B  
           ??_Console_ResetCursor 0060                          ?___fladd 00A7  
                        ?___fldiv 0060                          ?___awdiv 0066  
                       __ptext100 6B66                         __ptext101 4C12  
                       __ptext110 6E88                         __ptext102 4D78  
                        ?___flneg 007C                         __ptext111 6E6E  
                       __ptext103 65A0                         __ptext120 04A8  
                       __ptext112 56BA                         __ptext104 58C6  
                       __ptext121 2E8A                         __ptext113 6102  
                       __ptext105 692C                         __ptext130 52B2  
                       __ptext122 6628                         __ptext114 59BA  
                       __ptext106 6CB8                         __ptext131 55A4  
                       __ptext123 486A                         __ptext115 6BAA  
                       __ptext107 64CC                         __ptext140 49E6  
                       __ptext132 6C60                         __ptext124 2CF8  
                       __ptext116 6E52                         __ptext108 5630  
                       __ptext141 6E26                         __ptext133 615E  
                       __ptext125 6DFE                         __ptext117 3DAA  
                       __ptext109 6DAA                         __ptext150 4E26  
                       __ptext142 681A                         __ptext134 6764  
                       __ptext126 29CC                         __ptext118 248C  
                       __ptext151 6C7E                         __ptext143 6B1E  
                       __ptext135 60A0                         __ptext127 47A8  
                       __ptext119 3FE4                         __ptext160 6E8E  
                       __ptext152 6B88                         __ptext144 67A2  
                       __ptext136 5A32                         __ptext128 4928  
                       __ptext161 6E32                         __ptext153 5DCC  
                       __ptext145 57C8                         __ptext137 695E  
                       __ptext129 5F74                         __ptext170 6E0C  
                       __ptext162 4ED0                         __ptext154 6DD0  
                       __ptext146 1E84                         __ptext138 6AA6  
                       __ptext171 0000                         __ptext163 69F0  
                       __ptext155 454A                         __ptext147 5C7C  
                       __ptext139 38DE                         __ptext164 6CD4  
                       __ptext156 68F8                         __ptext148 516C  
                       __ptext165 5AAA                         __ptext149 688C  
                       __ptext166 635E                         __ptext158 6A4E  
                       _pShiftVal 00EF                         __ptext167 68C2  
                       __ptext159 40F0                         __ptext168 666A  
                       __ptext169 6E94                          ?___flmul 007C  
                        ?___flsub 00BB                          ?___fltol 00BB  
                        ?___lldiv 0060                        ?_Port_Init 00A0  
            Timer0_Init@pCPUClock 0073           ??_displayContinuousMode 0087  
                        ?___lwdiv 0060                          ?___lwmod 0067  
             ?_MXK_InitTestButton 0001                 __size_of_nullMode 0026  
                       _direction 01F3                 ?_Console_FormFeed 0001  
               _GetPortProperties 5020                 __size_of_stepMode 0078  
                        ?_getMode 0001                     ?_ADC_Sequence 0060  
                       _pow$15227 0282                         _pow$15228 0286  
     __end_ofTimer0_Init@PRESCALE FCA5                ??_Console_FormFeed 0060  
                 _HMI_SetSegments 4AA2                ?_GetPortProperties 0060  
                Event_NULL@pState 0001          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                   ?_ADC_SetChannel 0001  
                   ??i2_MXK_Queue 0004                         _leftState 003A  
                       _eval_poly 3ECC                       ??_MXK_Queue 0063  
                    ?_Port_GetPin 0060                          _ADC_Init 58C6  
                       _downState 00F5             __end_of_HMI_SetButton 5516  
            __size_of_Console_Tab 00C2                          ?_reverse 0060  
                    ?_Port_SetPin 006F             __end_of_HMI_SetNumber 6AA6  
                  _multiSampleADC 281A                  ___lwdiv@quotient 0065  
                 _HMI_RightSwitch 6D4E       __size_of_ADC_ConversionTime 0048  
                  __size_of_floor 0124                    __size_of_ldexp 0124  
                  __size_of_frexp 00B6               ??_GetPortProperties 0062  
         __end_of_Console_NewLine 5352              ??_MXK_InitTestButton 008D  
              Byte_GetPair@pInput 0069                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 6E88                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 6CD4  
                        _LCD_Fill 6214                          _LCD_Init 34A8  
                  ___wmul@product 0064                          _HMIBoard 0130  
                  i2_Byte_GetZone 5AAA                          _LED_Init 603E  
                       delay_ms@u 0062                Button_Poll@pButton 007B  
                       delay_us@u 0062                          _HMI_Init 2292  
                        _HMI_Poll 5B20                MXK_Queue@pCallback 0060  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 67A2          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 006D  
                        _PIR1bits 000F9E                          i2u507_40 5ACC  
                        i2u507_47 5AC2                          i2u509_40 5B14  
                        _PIR3bits 000FA4                          i2u509_45 5B10  
                        i2u670_40 6698                          i2u770_40 4148  
                        i2u666_44 6372                          i2u666_45 636E  
                        i2u771_40 4180                          i2u667_44 6398  
                        i2u667_45 6394                          i2u769_40 4134  
            __size_of_Byte_SetBit 0064                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
                HMI_SetBar@pValue 0060                 Button_Init@pInput 009B  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 008A                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 50C6  
                        _SSP2STAT 000F6D                      _Set_Rotation 53EE  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 6628  
              _Port_CheckPairType 5EA2                          _MXK_Init 3328  
           __size_of_Timer0_Start 0026                    ??_ADC_Sequence 0064  
                 MXK_SwitchTo@CUR 0066             __end_of_ADC_Calibrate 6DBE  
                        _SPI_Init 094E          __end_of_Event_TestButton 681A  
                        _SPI_Send 5DCC                        _ADCON0bits 000FC2  
                __size_of_ADC_Off 0008                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 0065                 ___wmul@multiplier 0060  
            __end_of_positionMode 46E4                 Byte_GetBit@Output 0064  
                      printf@flag 0080              Timer2_Init@pCPUClock 0076  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 5C08                        printf@prec 0081  
           Motor_Speed@pFrequency 007D                 Byte_GetBit@pInput 0060  
             Port_SetPinType@pPin 0088              __size_of_Button_Poll 0166  
                      ?_eval_poly 00BB                _Port_CheckQuadType 61BA  
                   _MXK_DIPSwitch 6CEE            __end_of_multiSampleADC 29CC  
             ?_Port_CheckPairType 0086              __end_of_SPI_MinSpeed 5C7C  
                   ??_MXK_Dequeue 0076                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 643C  
           Button_Poll@pIncrement 007D                      ??_displaySID 0087  
         PortProperty_Valid@F6830 FCA5              __end_ofi2_Motor_Step 41F0  
                 ??i2_MXK_Release 0001                         copy_data0 552A  
                       copy_data1 554A                     ??_MXK_Release 0060  
          __end_ofi2_Byte_GetPair 6CEE         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 0030               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 5B20               __end_ofi2_MXK_Queue 6E1A  
             ?_Port_CheckPortType 0096                          _FunctADC 6DBE  
                 itos@destination 006E                          _InitList FBE3  
            _Motor_Step$intlevel0 3A42                          _Mode_Set 6DD0  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
                    _Timer0_Clear 6E26                Port_GetQuad@pInput 0060  
                    _Timer2_Clear 6E66              __end_of_Word_GetPair 6764  
                        _lCBuffer 0200              ??_Port_CheckPairType 008A  
                      _ADCVoltage 00E8                       ??_Reset_Low 0074  
                        __Hrparam 0000                      _Timer0_Start 6B1E  
                    OutSeg@pInput 0066                    _Console_Render 1E84  
                        __Lrparam 0000                   Timer2_Init@RDIV 0072  
                ?_FunctInitButton 0001                    LCD_Write@value 0064  
                        _Port_Set 112C                      OutSeg@segset 003F  
                       rand@screw 003D              __end_of_Word_SetPair 65A0  
                     ??_Port_Init 00A3           __end_of_HMI_SetSegments 4B5C  
            ??_Port_CheckQuadType 0093                  __size_of___fladd 04A8  
              __end_of_displaySID 6BCA                  __size_of___fldiv 03C0  
           __size_of_Port_GetQuad 004A                  __size_of___awdiv 00BE  
                __size_of___flneg 0038                  __size_of___flmul 04A6  
                __size_of___flsub 0048                  __size_of___fltol 010C  
                __size_of___lldiv 00BC                 _MXK_BlockSwitchTo 66E8  
                __size_of___lwdiv 0078              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0062                      ??_initialise 00AA  
                        _lBufferX 00FB                          _lBufferY 00FA  
             Timer2_Init@PRESCALE FCCC                   LCD_Fill@pColour 0069  
              ?_MXK_BlockSwitchTo 0001         __size_ofi2_Timer0_Restart 000C  
                        _lCurrent 00F3                  __size_of_getMode 005C  
         __end_of_HMI_RightSwitch 6D66            Byte_GetZone@pChunkSize 0064  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 0064  
           __size_of_Port_SetType 022A                     reverse@length 0062  
                       itos@input 006C             i2MXK_SwitchTo@pModule 0008  
                        ___xxtofl 248C                   ?_multiSampleADC 0001  
              Motor_Init@pAddress 008F                          _delay_ms 5E38  
                        _delay_us 626C                          _clearall 00FC  
                 ___lwdiv@divisor 0062    __size_of_Console_SetForecolour 000A  
                 ___lwdiv@counter 0064     __end_of_Console_SetForecolour 6E5C  
                 Port_GetPin@pPin 0062                          __ptext10 461A  
                        __ptext11 6854                          __ptext20 5B20  
                        __ptext12 6AF8                          __ptext21 361A  
                        __ptext13 4CC8                          __ptext30 6A20  
                        __ptext22 6CEE                          __ptext14 281A  
                        __ptext31 1404                          __ptext23 6D06  
                        __ptext15 0000                          __ptext40 6E76  
                        __ptext32 67E0                          __ptext24 6D1E  
                        __ptext16 6DBE                          __ptext41 5F0C  
                        __ptext33 6A7C                          __ptext25 6D36  
                        __ptext17 5744                          __ptext50 5020  
                        __ptext42 43A0                          __ptext34 42C8  
                        __ptext26 6D4E                          __ptext18 41F0  
                        __ptext51 50C6                          __ptext43 3328  
                        __ptext35 5D60                          __ptext27 6D66  
                        __ptext19 0D6C                          __ptext60 6DF0  
                        __ptext52 603E                          __ptext44 2B66  
                        __ptext36 4AA2                          __ptext28 6D7E  
                        __ptext61 66E8                          __ptext53 62BE  
                        __ptext45 1C5A                          __ptext37 1780  
                        __ptext29 63AA                          __ptext70 6BCA  
                        __ptext62 626C                          __ptext54 66AA  
                        __ptext46 643C                          __ptext38 5486  
                        __ptext71 6BE8                          __ptext63 34A8  
                        __ptext55 3A3C                          __ptext47 112C  
                        __ptext39 6E3E               ??_MXK_BlockSwitchTo 0066  
                        __ptext80 3780                          __ptext72 6484  
                        __ptext64 53EE                          __ptext56 6E7C  
                        __ptext48 6DE2                          __ptext81 6E66  
                        __ptext73 6990                          __ptext65 6214  
                        __ptext57 6E1A                          __ptext49 4F7A  
                        __ptext90 5FDA                          __ptext82 6AD0  
                        __ptext74 46E4                          __ptext66 5CF0  
                        __ptext58 65E6                          __ptext91 1A04  
                        __ptext83 69C0                          __ptext75 6514  
                        __ptext67 5B94                          __ptext59 6C9C  
                        __ptext92 655A                          __ptext84 5210  
                        __ptext76 6E48                          __ptext68 630E  
                        __ptext93 6B44                          __ptext85 4476  
                        __ptext77 2292                          __ptext69 5E38  
                        __ptext94 61BA                          __ptext86 6C06  
                        __ptext78 5C08                          __ptext95 5EA2  
                        __ptext87 6E82                          __ptext79 094E  
                        __ptext96 584A                          __ptext88 6C24  
                        __ptext97 6726                          __ptext89 265A  
                        __ptext98 6C42                          __ptext99 5352  
                    _SSP1CON1bits 000FC6                  __size_of_reverse 006C  
                    _SSP1CON2bits 000FC5       __size_of_PortProperty_Valid 007C  
              i2Byte_GetZone@MASK 0007                 _ADC_ClockDivision 5630  
                    ?_ADC_SetupIO 0001                      _SSP2CON1bits 000F6C  
                    _SSP2CON2bits 000F6B                   ?i2_Byte_GetPair 000A  
                ?_Console_NewLine 0001                 ??_Event_DIPSwitch 0079  
                 ?i2_Byte_GetZone 0001                i2Byte_GetZone@pMax 0003  
                ?_HMI_InitButtons 0001                ?_ADC_ClockDivision 0001  
                    ?_ADC_Voltage 0095               __end_of_MXK_Dequeue 66E8  
               HMI_SetSegments@in 0064             Button_Init@pThreshold 009D  
                   __size_of_main 0184                     __size_of_itos 00D8  
               Byte_GetPair@pPair 006B            __end_of_Console_Render 2092  
              __end_of_initialise 5F74                          _inputVar 4CC8  
             i2Port_SetPin@pInput 0010               i2Port_SetPin@pValue 0013  
                    _Port_GetQuad 63AA               __end_of_MXK_Release 6CB8  
                  _MXK_TestButton 6D7E                     i2_Byte_SetBit 635E  
             ??_ADC_ClockDivision 0060               i2Word_GetPair@pPair 000F  
                        _nullMode 6AF8                    ADC_Voltage@max 009B  
                  ADC_Voltage@ref 009F         __end_of_MXK_BlockSwitchTo 6726  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 015E  
            __size_of_Timer2_Init 015E                          int$flags 0051  
            __size_of_Timer0_Stop 0006                      _Port_SetType 1C5A  
                    Port_Set@Type 0086                          _stepMode 5942  
      __size_of_GetPortProperties 00A6            __size_of_LCD_DrawField 00A4  
               ??_Configure_GPIOs 0095                         printf@val 0084  
                    _SSP1STATbits 000FC7              __size_of_Motor_Speed 002A  
                  Timer0_Init@DIV 0104                    Timer0_Init@PRE 003C  
                    _SSP2STATbits 000F6D                          exp@coeff FEAF  
                      _LED_Toggle 6484                          log@coeff FED7  
                      _HMI_GetBar 6E76              Button_Init@pGetState 00A2  
          PortProperty_Valid@Pair 0085                  ??_Port_TogglePin 0077  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
          PortProperty_Valid@pPin 0072                       ??_eval_poly 00C3  
                      _HMI_SetBar 6E3E                        _HMI_Render 67A2  
                Byte_SetZone@MASK 006A                       i2_MXK_Queue 6E0C  
       __end_of_ADC_ClockDivision 56BA                    Timer2_Init@DIV 0100  
                  Timer2_Init@PRE 003B                   _displayNullMode 6628  
                Byte_SetZone@pMax 0062            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 00A5  
                        itos@Data 0070                   _displayStepMode 59BA  
              LCD_FillRectangle@i 0075                LCD_FillRectangle@j 0076  
            __size_of_Port_SetPin 00C4                          intlevel2 0000  
                    reverse@input 0060              __end_of_ADC_Sequence 65E6  
          __size_of_HMI_DIPSwitch 0018                  ___lwmod@dividend 0067  
                ___lldiv@dividend 0060            __end_of_MXK_TestButton 6D96  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
     __end_of_displayPositionMode 3ECC                    _SPI_DisableISR 6AD0  
 displayPositionMode@angleDegrees 00C5                   Port_Init@pInput 00A0  
                        printf@ap 0082             __size_of_positionMode 00CA  
          __size_ofi2_Port_SetPin 00AA                        _ISR_Enable 6E48  
                ?_HMI_SetSegments 0061           Console_MakeField@Column 006C  
                      _IRDistance 0124             __size_of_SPI_MaxSpeed 0074  
                ??_ADC_SetChannel 0060                     SPI_DCS@pInput 0060  
  __size_of_displayContinuousMode 00BE             __size_of_SPI_MinSpeed 0074  
   __end_of_displayContinuousMode 4928                   ??_MXK_DIPSwitch 0066  
           __size_ofi2_Motor_Step 0100                 ADC_Voltage@pInput 0095  
         Console_MakeField@pInput 006B                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 0068                     ??_GetPortPORT 0062  
                 ___lwmod@divisor 0069                     ??_GetPortTRIS 0062  
           Timer0_Start@pFunction 0060                Word_SetPair@pInput 006F  
                 ___lwmod@counter 006B                Word_SetPair@pValue 0072  
                Motor_Init@pMotor 008D                       _MXK_Dequeue 66AA  
               ADC_Voltage@output 00A3                    LED_Toggle@pLED 0078  
                   ___fladd@signs 00B7                     _LCD_DrawField 516C  
                _Port_SetQuadType 1A04           __size_of_continuousMode 0032  
                     _MXK_Release 6C9C         __size_of_Console_FormFeed 008C  
                    _MXK_SwitchTo 65E6             __size_of_Word_GetPair 003E  
              Byte_GetZone@Offset 0067                     ?_Console_Init 0001  
               Word_SetPair@pPair 0071                   _Port_SetPinType 265A  
                    ___fladd@aexp 00B8                      ___fladd@bexp 00B9  
         __size_of_Timer0_Restart 000C                Byte_GetZone@Output 0068  
              Byte_GetZone@pChunk 0063                      _positionMode 461A  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 6C7E  
              Byte_GetZone@pInput 0060           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 5FDA             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 6AF8                      _SPI_MaxSpeed 5B94  
                    _SPI_MinSpeed 5C08                Port_Set@TypeActual 0084  
