

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Wed Aug 23 16:37:51 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1,inline
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1,inline
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1,inline
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1,inline
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1,group=1
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	text132,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1,inline
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1,group=1
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1,group=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1,group=1
   164                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	text146,global,reloc=2,class=CODE,delta=1
   168                           	psect	text147,global,reloc=2,class=CODE,delta=1
   169                           	psect	text148,global,reloc=2,class=CODE,delta=1
   170                           	psect	text149,global,reloc=2,class=CODE,delta=1
   171                           	psect	text150,global,reloc=2,class=CODE,delta=1
   172                           	psect	text151,global,reloc=2,class=CODE,delta=1,inline
   173                           	psect	text152,global,reloc=2,class=CODE,delta=1
   174                           	psect	text153,global,reloc=2,class=CODE,delta=1
   175                           	psect	text154,global,reloc=2,class=CODE,delta=1
   176                           	psect	text155,global,reloc=2,class=CODE,delta=1
   177                           	psect	text156,global,reloc=2,class=CODE,delta=1
   178                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   179                           	psect	text157,global,reloc=2,class=CODE,delta=1
   180                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   181                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   182  0000                     
   183                           ; Version 1.43
   184                           ; Generated 25/07/2017 GMT
   185                           ; 
   186                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   187                           ; All rights reserved.
   188                           ; 
   189                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   190                           ; 
   191                           ; Redistribution and use in source and binary forms, with or without modification, are
   192                           ; permitted provided that the following conditions are met:
   193                           ; 
   194                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   195                           ;        conditions and the following disclaimer.
   196                           ; 
   197                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   198                           ;        of conditions and the following disclaimer in the documentation and/or other
   199                           ;        materials provided with the distribution.
   200                           ; 
   201                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   202                           ;        software without specific prior written permission.
   203                           ; 
   204                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   205                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   206                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   207                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   208                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   209                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   210                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   211                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   212                           ; 
   213                           ; 
   214                           ; Code-generator required, PIC18F67J50 Definitions
   215                           ; 
   216                           ; SFR Addresses
   217  0000                     
   218                           	psect	idataCOMRAM
   219  016A58                     __pidataCOMRAM:
   220                           	opt stack 0
   221                           
   222                           ;initializer for _gCursor
   223  016A58  0006               	dw	6
   224  016A5A  0006               	dw	6
   225                           
   226                           ;initializer for _Bus_State
   227  016A5C  01                 	db	1
   228                           
   229                           ;initializer for _A
   230  016A5D  41                 	db	65
   231                           
   232                           ;initializer for _a
   233  016A5E  61                 	db	97
   234                           
   235                           ;initializer for _zero
   236  016A5F  30                 	db	48
   237                           
   238                           ;initializer for _l
   239  016A60  80                 	db	128
   240                           
   241                           ;initializer for _w
   242  016A61  80                 	db	128
   243                           
   244                           	psect	idataBANK0
   245  016AAA                     __pidataBANK0:
   246                           	opt stack 0
   247                           
   248                           ;initializer for _gForecolour
   249  016AAA  FFFF               	dw	65535
   250                           
   251                           ;initializer for _change
   252  016AAC  01                 	db	1
   253                           
   254                           	psect	idataBANK1
   255  016A28                     __pidataBANK1:
   256                           	opt stack 0
   257                           
   258                           ;initializer for Console_Render@F6956
   259  016A28  0006               	dw	6
   260  016A2A  0006               	dw	6
   261                           
   262                           ;initializer for _gLineSize
   263  016A2C  0080               	dw	128
   264  016A2E  0007               	dw	7
   265                           
   266                           ;initializer for _gCharSize
   267  016A30  0005               	dw	5
   268  016A32  0007               	dw	7
   269                           
   270                           	psect	mediumconst
   271  00FC36                     __pmediumconst:
   272                           	opt stack 0
   273  00FC36  00                 	db	0
   274  00FC37                     _InitList:
   275                           	opt stack 0
   276  00FC37  1100               	dw	4352
   277  00FC39  0080               	dw	128
   278  00FC3B  012C               	dw	300
   279  00FC3D  B100               	dw	45312
   280  00FC3F  0002               	dw	2
   281  00FC41  0035               	dw	53
   282  00FC43  0036               	dw	54
   283  00FC45  B200               	dw	45568
   284  00FC47  0002               	dw	2
   285  00FC49  0035               	dw	53
   286  00FC4B  0036               	dw	54
   287  00FC4D  B300               	dw	45824
   288  00FC4F  0002               	dw	2
   289  00FC51  0035               	dw	53
   290  00FC53  0036               	dw	54
   291  00FC55  0002               	dw	2
   292  00FC57  0035               	dw	53
   293  00FC59  0036               	dw	54
   294  00FC5B  B400               	dw	46080
   295  00FC5D  0000               	dw	0
   296  00FC5F  C000               	dw	49152
   297  00FC61  00A2               	dw	162
   298  00FC63  0002               	dw	2
   299  00FC65  0084               	dw	132
   300  00FC67  C100               	dw	49408
   301  00FC69  00C5               	dw	197
   302  00FC6B  C200               	dw	49664
   303  00FC6D  000D               	dw	13
   304  00FC6F  0000               	dw	0
   305  00FC71  C300               	dw	49920
   306  00FC73  008D               	dw	141
   307  00FC75  002A               	dw	42
   308  00FC77  C400               	dw	50176
   309  00FC79  008D               	dw	141
   310  00FC7B  00EE               	dw	238
   311  00FC7D  C500               	dw	50432
   312  00FC7F  000A               	dw	10
   313  00FC81  3600               	dw	13824
   314  00FC83  00C8               	dw	200
   315  00FC85  E000               	dw	57344
   316  00FC87  0012               	dw	18
   317  00FC89  001C               	dw	28
   318  00FC8B  0010               	dw	16
   319  00FC8D  0018               	dw	24
   320  00FC8F  0033               	dw	51
   321  00FC91  002C               	dw	44
   322  00FC93  0025               	dw	37
   323  00FC95  0028               	dw	40
   324  00FC97  0028               	dw	40
   325  00FC99  0027               	dw	39
   326  00FC9B  002F               	dw	47
   327  00FC9D  003C               	dw	60
   328  00FC9F  0000               	dw	0
   329  00FCA1  0003               	dw	3
   330  00FCA3  0003               	dw	3
   331  00FCA5  0010               	dw	16
   332  00FCA7  0080               	dw	128
   333  00FCA9  0078               	dw	120
   334  00FCAB  E100               	dw	57600
   335  00FCAD  0012               	dw	18
   336  00FCAF  001C               	dw	28
   337  00FCB1  0010               	dw	16
   338  00FCB3  0018               	dw	24
   339  00FCB5  002D               	dw	45
   340  00FCB7  0028               	dw	40
   341  00FCB9  0023               	dw	35
   342  00FCBB  0028               	dw	40
   343  00FCBD  0028               	dw	40
   344  00FCBF  0026               	dw	38
   345  00FCC1  002F               	dw	47
   346  00FCC3  003B               	dw	59
   347  00FCC5  0000               	dw	0
   348  00FCC7  0003               	dw	3
   349  00FCC9  0003               	dw	3
   350  00FCCB  0010               	dw	16
   351  00FCCD  3A00               	dw	14848
   352  00FCCF  0005               	dw	5
   353  00FCD1  2A00               	dw	10752
   354  00FCD3  0000               	dw	0
   355  00FCD5  0002               	dw	2
   356  00FCD7  0000               	dw	0
   357  00FCD9  0081               	dw	129
   358  00FCDB  2B00               	dw	11008
   359  00FCDD  0000               	dw	0
   360  00FCDF  0003               	dw	3
   361  00FCE1  0000               	dw	0
   362  00FCE3  00A2               	dw	162
   363  00FCE5  2900               	dw	10496
   364  00FCE7  2C00               	dw	11264
   365  00FCE9                     __end_of_InitList:
   366                           	opt stack 0
   367  00FCE9                     Timer0_Init@PRESCALE:
   368                           	opt stack 0
   369  00FCE9  0002               	dw	2
   370  00FCEB  0004               	dw	4
   371  00FCED  0008               	dw	8
   372  00FCEF  0010               	dw	16
   373  00FCF1  0020               	dw	32
   374  00FCF3  0040               	dw	64
   375  00FCF5  0080               	dw	128
   376  00FCF7  0100               	dw	256
   377  00FCF9                     __end_ofTimer0_Init@PRESCALE:
   378                           	opt stack 0
   379  00FCF9                     PortProperty_Valid@F6830:
   380                           	opt stack 0
   381  00FCF9  00                 	db	0
   382  00FCFA  01                 	db	1
   383  00FCFB  02                 	db	2
   384  00FCFC  00                 	db	0
   385  00FCFD  01                 	db	1
   386  00FCFE  00                 	db	0
   387  00FCFF  01                 	db	1
   388  00FD00  00                 	db	0
   389  00FD01  02                 	db	2
   390  00FD02  02                 	db	2
   391  00FD03  00                 	db	0
   392  00FD04  00                 	db	0
   393  00FD05  03                 	db	3
   394  00FD06  03                 	db	3
   395  00FD07  03                 	db	3
   396  00FD08  00                 	db	0
   397  00FD09                     __end_ofPortProperty_Valid@F6830:
   398                           	opt stack 0
   399  00FD09                     _dpowers:
   400                           	opt stack 0
   401  00FD09  0001               	dw	1
   402  00FD0B  000A               	dw	10
   403  00FD0D  0064               	dw	100
   404  00FD0F  03E8               	dw	1000
   405  00FD11  2710               	dw	10000
   406  00FD13                     __end_of_dpowers:
   407                           	opt stack 0
   408  00FD13                     _MASKS:
   409                           	opt stack 0
   410  00FD13  00                 	db	0
   411  00FD14  01                 	db	1
   412  00FD15  03                 	db	3
   413  00FD16  07                 	db	7
   414  00FD17  0F                 	db	15
   415  00FD18  1F                 	db	31
   416  00FD19  3F                 	db	63
   417  00FD1A  7F                 	db	127
   418  00FD1B  FF                 	db	255
   419  00FD1C                     __end_of_MASKS:
   420                           	opt stack 0
   421  00FD1C                     HMI_SetButton@F7213:
   422                           	opt stack 0
   423  00FD1C  00                 	db	0
   424  00FD1D  02                 	db	2
   425  00FD1E  01                 	db	1
   426  00FD1F  03                 	db	3
   427  00FD20                     __end_ofHMI_SetButton@F7213:
   428                           	opt stack 0
   429  00FD20                     Timer2_Init@PRESCALE:
   430                           	opt stack 0
   431  00FD20  01                 	db	1
   432  00FD21  04                 	db	4
   433  00FD22  10                 	db	16
   434  00FD23                     __end_ofTimer2_Init@PRESCALE:
   435                           	opt stack 0
   436  00FD23                     _Font5x7:
   437                           	opt stack 0
   438  00FD23  00                 	db	0
   439  00FD24  00                 	db	0
   440  00FD25  00                 	db	0
   441  00FD26  00                 	db	0
   442  00FD27  00                 	db	0
   443  00FD28  00                 	db	0
   444  00FD29  00                 	db	0
   445  00FD2A  5F                 	db	95
   446  00FD2B  00                 	db	0
   447  00FD2C  00                 	db	0
   448  00FD2D  00                 	db	0
   449  00FD2E  07                 	db	7
   450  00FD2F  00                 	db	0
   451  00FD30  07                 	db	7
   452  00FD31  00                 	db	0
   453  00FD32  14                 	db	20
   454  00FD33  7F                 	db	127
   455  00FD34  14                 	db	20
   456  00FD35  7F                 	db	127
   457  00FD36  14                 	db	20
   458  00FD37  24                 	db	36
   459  00FD38  2A                 	db	42
   460  00FD39  7F                 	db	127
   461  00FD3A  2A                 	db	42
   462  00FD3B  12                 	db	18
   463  00FD3C  23                 	db	35
   464  00FD3D  13                 	db	19
   465  00FD3E  08                 	db	8
   466  00FD3F  64                 	db	100
   467  00FD40  62                 	db	98
   468  00FD41  36                 	db	54
   469  00FD42  49                 	db	73
   470  00FD43  55                 	db	85
   471  00FD44  22                 	db	34
   472  00FD45  50                 	db	80
   473  00FD46  00                 	db	0
   474  00FD47  05                 	db	5
   475  00FD48  03                 	db	3
   476  00FD49  00                 	db	0
   477  00FD4A  00                 	db	0
   478  00FD4B  00                 	db	0
   479  00FD4C  1C                 	db	28
   480  00FD4D  22                 	db	34
   481  00FD4E  41                 	db	65
   482  00FD4F  00                 	db	0
   483  00FD50  00                 	db	0
   484  00FD51  41                 	db	65
   485  00FD52  22                 	db	34
   486  00FD53  1C                 	db	28
   487  00FD54  00                 	db	0
   488  00FD55  08                 	db	8
   489  00FD56  2A                 	db	42
   490  00FD57  1C                 	db	28
   491  00FD58  2A                 	db	42
   492  00FD59  08                 	db	8
   493  00FD5A  08                 	db	8
   494  00FD5B  08                 	db	8
   495  00FD5C  3E                 	db	62
   496  00FD5D  08                 	db	8
   497  00FD5E  08                 	db	8
   498  00FD5F  00                 	db	0
   499  00FD60  50                 	db	80
   500  00FD61  30                 	db	48
   501  00FD62  00                 	db	0
   502  00FD63  00                 	db	0
   503  00FD64  08                 	db	8
   504  00FD65  08                 	db	8
   505  00FD66  08                 	db	8
   506  00FD67  08                 	db	8
   507  00FD68  08                 	db	8
   508  00FD69  00                 	db	0
   509  00FD6A  60                 	db	96
   510  00FD6B  60                 	db	96
   511  00FD6C  00                 	db	0
   512  00FD6D  00                 	db	0
   513  00FD6E  20                 	db	32
   514  00FD6F  10                 	db	16
   515  00FD70  08                 	db	8
   516  00FD71  04                 	db	4
   517  00FD72  02                 	db	2
   518  00FD73  3E                 	db	62
   519  00FD74  51                 	db	81
   520  00FD75  49                 	db	73
   521  00FD76  45                 	db	69
   522  00FD77  3E                 	db	62
   523  00FD78  00                 	db	0
   524  00FD79  42                 	db	66
   525  00FD7A  7F                 	db	127
   526  00FD7B  40                 	db	64
   527  00FD7C  00                 	db	0
   528  00FD7D  42                 	db	66
   529  00FD7E  61                 	db	97
   530  00FD7F  51                 	db	81
   531  00FD80  49                 	db	73
   532  00FD81  46                 	db	70
   533  00FD82  21                 	db	33
   534  00FD83  41                 	db	65
   535  00FD84  45                 	db	69
   536  00FD85  4B                 	db	75
   537  00FD86  31                 	db	49
   538  00FD87  18                 	db	24
   539  00FD88  14                 	db	20
   540  00FD89  12                 	db	18
   541  00FD8A  7F                 	db	127
   542  00FD8B  10                 	db	16
   543  00FD8C  27                 	db	39
   544  00FD8D  45                 	db	69
   545  00FD8E  45                 	db	69
   546  00FD8F  45                 	db	69
   547  00FD90  39                 	db	57
   548  00FD91  3C                 	db	60
   549  00FD92  4A                 	db	74
   550  00FD93  49                 	db	73
   551  00FD94  49                 	db	73
   552  00FD95  30                 	db	48
   553  00FD96  01                 	db	1
   554  00FD97  71                 	db	113
   555  00FD98  09                 	db	9
   556  00FD99  05                 	db	5
   557  00FD9A  03                 	db	3
   558  00FD9B  36                 	db	54
   559  00FD9C  49                 	db	73
   560  00FD9D  49                 	db	73
   561  00FD9E  49                 	db	73
   562  00FD9F  36                 	db	54
   563  00FDA0  06                 	db	6
   564  00FDA1  49                 	db	73
   565  00FDA2  49                 	db	73
   566  00FDA3  29                 	db	41
   567  00FDA4  1E                 	db	30
   568  00FDA5  00                 	db	0
   569  00FDA6  36                 	db	54
   570  00FDA7  36                 	db	54
   571  00FDA8  00                 	db	0
   572  00FDA9  00                 	db	0
   573  00FDAA  00                 	db	0
   574  00FDAB  56                 	db	86
   575  00FDAC  36                 	db	54
   576  00FDAD  00                 	db	0
   577  00FDAE  00                 	db	0
   578  00FDAF  00                 	db	0
   579  00FDB0  08                 	db	8
   580  00FDB1  14                 	db	20
   581  00FDB2  22                 	db	34
   582  00FDB3  41                 	db	65
   583  00FDB4  14                 	db	20
   584  00FDB5  14                 	db	20
   585  00FDB6  14                 	db	20
   586  00FDB7  14                 	db	20
   587  00FDB8  14                 	db	20
   588  00FDB9  41                 	db	65
   589  00FDBA  22                 	db	34
   590  00FDBB  14                 	db	20
   591  00FDBC  08                 	db	8
   592  00FDBD  00                 	db	0
   593  00FDBE  02                 	db	2
   594  00FDBF  01                 	db	1
   595  00FDC0  51                 	db	81
   596  00FDC1  09                 	db	9
   597  00FDC2  06                 	db	6
   598  00FDC3  32                 	db	50
   599  00FDC4  49                 	db	73
   600  00FDC5  79                 	db	121
   601  00FDC6  41                 	db	65
   602  00FDC7  3E                 	db	62
   603  00FDC8  7E                 	db	126
   604  00FDC9  11                 	db	17
   605  00FDCA  11                 	db	17
   606  00FDCB  11                 	db	17
   607  00FDCC  7E                 	db	126
   608  00FDCD  7F                 	db	127
   609  00FDCE  49                 	db	73
   610  00FDCF  49                 	db	73
   611  00FDD0  49                 	db	73
   612  00FDD1  36                 	db	54
   613  00FDD2  3E                 	db	62
   614  00FDD3  41                 	db	65
   615  00FDD4  41                 	db	65
   616  00FDD5  41                 	db	65
   617  00FDD6  22                 	db	34
   618  00FDD7  7F                 	db	127
   619  00FDD8  41                 	db	65
   620  00FDD9  41                 	db	65
   621  00FDDA  22                 	db	34
   622  00FDDB  1C                 	db	28
   623  00FDDC  7F                 	db	127
   624  00FDDD  49                 	db	73
   625  00FDDE  49                 	db	73
   626  00FDDF  49                 	db	73
   627  00FDE0  41                 	db	65
   628  00FDE1  7F                 	db	127
   629  00FDE2  09                 	db	9
   630  00FDE3  09                 	db	9
   631  00FDE4  01                 	db	1
   632  00FDE5  01                 	db	1
   633  00FDE6  3E                 	db	62
   634  00FDE7  41                 	db	65
   635  00FDE8  41                 	db	65
   636  00FDE9  51                 	db	81
   637  00FDEA  32                 	db	50
   638  00FDEB  7F                 	db	127
   639  00FDEC  08                 	db	8
   640  00FDED  08                 	db	8
   641  00FDEE  08                 	db	8
   642  00FDEF  7F                 	db	127
   643  00FDF0  00                 	db	0
   644  00FDF1  41                 	db	65
   645  00FDF2  7F                 	db	127
   646  00FDF3  41                 	db	65
   647  00FDF4  00                 	db	0
   648  00FDF5  20                 	db	32
   649  00FDF6  40                 	db	64
   650  00FDF7  41                 	db	65
   651  00FDF8  3F                 	db	63
   652  00FDF9  01                 	db	1
   653  00FDFA  7F                 	db	127
   654  00FDFB  08                 	db	8
   655  00FDFC  14                 	db	20
   656  00FDFD  22                 	db	34
   657  00FDFE  41                 	db	65
   658  00FDFF  7F                 	db	127
   659  00FE00  40                 	db	64
   660  00FE01  40                 	db	64
   661  00FE02  40                 	db	64
   662  00FE03  40                 	db	64
   663  00FE04  7F                 	db	127
   664  00FE05  02                 	db	2
   665  00FE06  04                 	db	4
   666  00FE07  02                 	db	2
   667  00FE08  7F                 	db	127
   668  00FE09  7F                 	db	127
   669  00FE0A  04                 	db	4
   670  00FE0B  08                 	db	8
   671  00FE0C  10                 	db	16
   672  00FE0D  7F                 	db	127
   673  00FE0E  3E                 	db	62
   674  00FE0F  41                 	db	65
   675  00FE10  41                 	db	65
   676  00FE11  41                 	db	65
   677  00FE12  3E                 	db	62
   678  00FE13  7F                 	db	127
   679  00FE14  09                 	db	9
   680  00FE15  09                 	db	9
   681  00FE16  09                 	db	9
   682  00FE17  06                 	db	6
   683  00FE18  3E                 	db	62
   684  00FE19  41                 	db	65
   685  00FE1A  51                 	db	81
   686  00FE1B  21                 	db	33
   687  00FE1C  5E                 	db	94
   688  00FE1D  7F                 	db	127
   689  00FE1E  09                 	db	9
   690  00FE1F  19                 	db	25
   691  00FE20  29                 	db	41
   692  00FE21  46                 	db	70
   693  00FE22  46                 	db	70
   694  00FE23  49                 	db	73
   695  00FE24  49                 	db	73
   696  00FE25  49                 	db	73
   697  00FE26  31                 	db	49
   698  00FE27  01                 	db	1
   699  00FE28  01                 	db	1
   700  00FE29  7F                 	db	127
   701  00FE2A  01                 	db	1
   702  00FE2B  01                 	db	1
   703  00FE2C  3F                 	db	63
   704  00FE2D  40                 	db	64
   705  00FE2E  40                 	db	64
   706  00FE2F  40                 	db	64
   707  00FE30  3F                 	db	63
   708  00FE31  1F                 	db	31
   709  00FE32  20                 	db	32
   710  00FE33  40                 	db	64
   711  00FE34  20                 	db	32
   712  00FE35  1F                 	db	31
   713  00FE36  7F                 	db	127
   714  00FE37  20                 	db	32
   715  00FE38  18                 	db	24
   716  00FE39  20                 	db	32
   717  00FE3A  7F                 	db	127
   718  00FE3B  63                 	db	99
   719  00FE3C  14                 	db	20
   720  00FE3D  08                 	db	8
   721  00FE3E  14                 	db	20
   722  00FE3F  63                 	db	99
   723  00FE40  03                 	db	3
   724  00FE41  04                 	db	4
   725  00FE42  78                 	db	120
   726  00FE43  04                 	db	4
   727  00FE44  03                 	db	3
   728  00FE45  61                 	db	97
   729  00FE46  51                 	db	81
   730  00FE47  49                 	db	73
   731  00FE48  45                 	db	69
   732  00FE49  43                 	db	67
   733  00FE4A  00                 	db	0
   734  00FE4B  00                 	db	0
   735  00FE4C  7F                 	db	127
   736  00FE4D  41                 	db	65
   737  00FE4E  41                 	db	65
   738  00FE4F  02                 	db	2
   739  00FE50  04                 	db	4
   740  00FE51  08                 	db	8
   741  00FE52  10                 	db	16
   742  00FE53  20                 	db	32
   743  00FE54  41                 	db	65
   744  00FE55  41                 	db	65
   745  00FE56  7F                 	db	127
   746  00FE57  00                 	db	0
   747  00FE58  00                 	db	0
   748  00FE59  04                 	db	4
   749  00FE5A  02                 	db	2
   750  00FE5B  01                 	db	1
   751  00FE5C  02                 	db	2
   752  00FE5D  04                 	db	4
   753  00FE5E  40                 	db	64
   754  00FE5F  40                 	db	64
   755  00FE60  40                 	db	64
   756  00FE61  40                 	db	64
   757  00FE62  40                 	db	64
   758  00FE63  00                 	db	0
   759  00FE64  01                 	db	1
   760  00FE65  02                 	db	2
   761  00FE66  04                 	db	4
   762  00FE67  00                 	db	0
   763  00FE68  20                 	db	32
   764  00FE69  54                 	db	84
   765  00FE6A  54                 	db	84
   766  00FE6B  54                 	db	84
   767  00FE6C  78                 	db	120
   768  00FE6D  7F                 	db	127
   769  00FE6E  48                 	db	72
   770  00FE6F  44                 	db	68
   771  00FE70  44                 	db	68
   772  00FE71  38                 	db	56
   773  00FE72  38                 	db	56
   774  00FE73  44                 	db	68
   775  00FE74  44                 	db	68
   776  00FE75  44                 	db	68
   777  00FE76  20                 	db	32
   778  00FE77  38                 	db	56
   779  00FE78  44                 	db	68
   780  00FE79  44                 	db	68
   781  00FE7A  48                 	db	72
   782  00FE7B  7F                 	db	127
   783  00FE7C  38                 	db	56
   784  00FE7D  54                 	db	84
   785  00FE7E  54                 	db	84
   786  00FE7F  54                 	db	84
   787  00FE80  18                 	db	24
   788  00FE81  08                 	db	8
   789  00FE82  7E                 	db	126
   790  00FE83  09                 	db	9
   791  00FE84  01                 	db	1
   792  00FE85  02                 	db	2
   793  00FE86  08                 	db	8
   794  00FE87  14                 	db	20
   795  00FE88  54                 	db	84
   796  00FE89  54                 	db	84
   797  00FE8A  3C                 	db	60
   798  00FE8B  7F                 	db	127
   799  00FE8C  08                 	db	8
   800  00FE8D  04                 	db	4
   801  00FE8E  04                 	db	4
   802  00FE8F  78                 	db	120
   803  00FE90  00                 	db	0
   804  00FE91  44                 	db	68
   805  00FE92  7D                 	db	125
   806  00FE93  40                 	db	64
   807  00FE94  00                 	db	0
   808  00FE95  20                 	db	32
   809  00FE96  40                 	db	64
   810  00FE97  44                 	db	68
   811  00FE98  3D                 	db	61
   812  00FE99  00                 	db	0
   813  00FE9A  00                 	db	0
   814  00FE9B  7F                 	db	127
   815  00FE9C  10                 	db	16
   816  00FE9D  28                 	db	40
   817  00FE9E  44                 	db	68
   818  00FE9F  00                 	db	0
   819  00FEA0  41                 	db	65
   820  00FEA1  7F                 	db	127
   821  00FEA2  40                 	db	64
   822  00FEA3  00                 	db	0
   823  00FEA4  7C                 	db	124
   824  00FEA5  04                 	db	4
   825  00FEA6  18                 	db	24
   826  00FEA7  04                 	db	4
   827  00FEA8  78                 	db	120
   828  00FEA9  7C                 	db	124
   829  00FEAA  08                 	db	8
   830  00FEAB  04                 	db	4
   831  00FEAC  04                 	db	4
   832  00FEAD  78                 	db	120
   833  00FEAE  38                 	db	56
   834  00FEAF  44                 	db	68
   835  00FEB0  44                 	db	68
   836  00FEB1  44                 	db	68
   837  00FEB2  38                 	db	56
   838  00FEB3  7C                 	db	124
   839  00FEB4  14                 	db	20
   840  00FEB5  14                 	db	20
   841  00FEB6  14                 	db	20
   842  00FEB7  08                 	db	8
   843  00FEB8  08                 	db	8
   844  00FEB9  14                 	db	20
   845  00FEBA  14                 	db	20
   846  00FEBB  18                 	db	24
   847  00FEBC  7C                 	db	124
   848  00FEBD  7C                 	db	124
   849  00FEBE  08                 	db	8
   850  00FEBF  04                 	db	4
   851  00FEC0  04                 	db	4
   852  00FEC1  08                 	db	8
   853  00FEC2  48                 	db	72
   854  00FEC3  54                 	db	84
   855  00FEC4  54                 	db	84
   856  00FEC5  54                 	db	84
   857  00FEC6  20                 	db	32
   858  00FEC7  04                 	db	4
   859  00FEC8  3F                 	db	63
   860  00FEC9  44                 	db	68
   861  00FECA  40                 	db	64
   862  00FECB  20                 	db	32
   863  00FECC  3C                 	db	60
   864  00FECD  40                 	db	64
   865  00FECE  40                 	db	64
   866  00FECF  20                 	db	32
   867  00FED0  7C                 	db	124
   868  00FED1  1C                 	db	28
   869  00FED2  20                 	db	32
   870  00FED3  40                 	db	64
   871  00FED4  20                 	db	32
   872  00FED5  1C                 	db	28
   873  00FED6  3C                 	db	60
   874  00FED7  40                 	db	64
   875  00FED8  30                 	db	48
   876  00FED9  40                 	db	64
   877  00FEDA  3C                 	db	60
   878  00FEDB  44                 	db	68
   879  00FEDC  28                 	db	40
   880  00FEDD  10                 	db	16
   881  00FEDE  28                 	db	40
   882  00FEDF  44                 	db	68
   883  00FEE0  0C                 	db	12
   884  00FEE1  50                 	db	80
   885  00FEE2  50                 	db	80
   886  00FEE3  50                 	db	80
   887  00FEE4  3C                 	db	60
   888  00FEE5  44                 	db	68
   889  00FEE6  64                 	db	100
   890  00FEE7  54                 	db	84
   891  00FEE8  4C                 	db	76
   892  00FEE9  44                 	db	68
   893  00FEEA  00                 	db	0
   894  00FEEB  08                 	db	8
   895  00FEEC  36                 	db	54
   896  00FEED  41                 	db	65
   897  00FEEE  00                 	db	0
   898  00FEEF  00                 	db	0
   899  00FEF0  00                 	db	0
   900  00FEF1  7F                 	db	127
   901  00FEF2  00                 	db	0
   902  00FEF3  00                 	db	0
   903  00FEF4  00                 	db	0
   904  00FEF5  41                 	db	65
   905  00FEF6  36                 	db	54
   906  00FEF7  08                 	db	8
   907  00FEF8  00                 	db	0
   908  00FEF9  08                 	db	8
   909  00FEFA  08                 	db	8
   910  00FEFB  2A                 	db	42
   911  00FEFC  1C                 	db	28
   912  00FEFD  08                 	db	8
   913  00FEFE  08                 	db	8
   914  00FEFF  1C                 	db	28
   915  00FF00  2A                 	db	42
   916  00FF01  08                 	db	8
   917  00FF02  08                 	db	8
   918  00FF03                     __end_of_Font5x7:
   919                           	opt stack 0
   920  00FF03                     exp@coeff:
   921                           	opt stack 0
   922  00FF03  0000               	dw	0
   923  00FF05  3F80               	dw	16256
   924  00FF07  7218               	dw	29208
   925  00FF09  3F31               	dw	16177
   926  00FF0B  FDF0               	dw	65008
   927  00FF0D  3E75               	dw	15989
   928  00FF0F  5847               	dw	22599
   929  00FF11  3D63               	dw	15715
   930  00FF13  9558               	dw	38232
   931  00FF15  3C1D               	dw	15389
   932  00FF17  C482               	dw	50306
   933  00FF19  3AAE               	dw	15022
   934  00FF1B  78A8               	dw	30888
   935  00FF1D  3921               	dw	14625
   936  00FF1F  93EF               	dw	37871
   937  00FF21  3780               	dw	14208
   938  00FF23  92A0               	dw	37536
   939  00FF25  35A7               	dw	13735
   940  00FF27  5646               	dw	22086
   941  00FF29  3415               	dw	13333
   942  00FF2B                     __end_ofexp@coeff:
   943                           	opt stack 0
   944  00FF2B                     log@coeff:
   945                           	opt stack 0
   946  00FF2B  0000               	dw	0
   947  00FF2D  0000               	dw	0
   948  00FF2F  FFC4               	dw	65476
   949  00FF31  3F7F               	dw	16255
   950  00FF33  EF80               	dw	61312
   951  00FF35  BEFF               	dw	48895
   952  00FF37  E190               	dw	57744
   953  00FF39  3EA9               	dw	16041
   954  00FF3B  82EC               	dw	33516
   955  00FF3D  BE76               	dw	48758
   956  00FF3F  AD82               	dw	44418
   957  00FF41  3E2B               	dw	15915
   958  00FF43  3C0E               	dw	15374
   959  00FF45  BDC3               	dw	48579
   960  00FF47  D187               	dw	53639
   961  00FF49  3D13               	dw	15635
   962  00FF4B  7841               	dw	30785
   963  00FF4D  BBD3               	dw	48083
   964  00FF4F                     __end_oflog@coeff:
   965                           	opt stack 0
   966  00FF4F                     _PortG_Property:
   967                           	opt stack 0
   968  00FF4F  FC00               	dw	64512
   969  00FF51                     __end_of_PortG_Property:
   970                           	opt stack 0
   971  00FF51                     _PortF_Property:
   972                           	opt stack 0
   973  00FF51  0FFF               	dw	4095
   974  00FF53                     __end_of_PortF_Property:
   975                           	opt stack 0
   976  00FF53                     _PortE_Property:
   977                           	opt stack 0
   978  00FF53  0000               	dw	0
   979  00FF55                     __end_of_PortE_Property:
   980                           	opt stack 0
   981  00FF55                     _PortD_Property:
   982                           	opt stack 0
   983  00FF55  FFFF               	dw	65535
   984  00FF57                     __end_of_PortD_Property:
   985                           	opt stack 0
   986  00FF57                     _PortC_Property:
   987                           	opt stack 0
   988  00FF57  FFF0               	dw	65520
   989  00FF59                     __end_of_PortC_Property:
   990                           	opt stack 0
   991  00FF59                     _PortB_Property:
   992                           	opt stack 0
   993  00FF59  FF00               	dw	65280
   994  00FF5B                     __end_of_PortB_Property:
   995                           	opt stack 0
   996  00FF5B                     _PortA_Property:
   997                           	opt stack 0
   998  00FF5B  00FF               	dw	255
   999  00FF5D                     __end_of_PortA_Property:
  1000                           	opt stack 0
  1001  0000                     _TMR0	set	4054
  1002  0000                     _PR2	set	4043
  1003  0000                     _T2CONbits	set	4042
  1004  0000                     _T0CONbits	set	4053
  1005  0000                     _RCONbits	set	4048
  1006  0000                     _OSCTUNEbits	set	3995
  1007  0000                     _PIR3	set	4004
  1008  0000                     _PIR2	set	4001
  1009  0000                     _PIR1	set	3998
  1010  0000                     _INTCONbits	set	4082
  1011  0000                     _SSP2CON2bits	set	3947
  1012  0000                     _SSP1CON2bits	set	4037
  1013  0000                     _SSP1ADD	set	4040
  1014  0000                     _ANCON0	set	4033
  1015  0000                     _ADRESL	set	4035
  1016  0000                     _ADRESH	set	4036
  1017  0000                     _ADCON1bits	set	4033
  1018  0000                     _ADCON0bits	set	4034
  1019  0000                     _SSP2CON1bits	set	3948
  1020  0000                     _SSP1CON1bits	set	4038
  1021  0000                     _SSP2STATbits	set	3949
  1022  0000                     _SSP1STATbits	set	4039
  1023  0000                     _PIE3bits	set	4003
  1024  0000                     _PIE1bits	set	3997
  1025  0000                     _PIR3bits	set	4004
  1026  0000                     _PIR1bits	set	3998
  1027  0000                     _IPR3bits	set	4005
  1028  0000                     _IPR1bits	set	3999
  1029  0000                     _PORTFbits	set	3973
  1030  0000                     _SSP2CON2	set	3947
  1031  0000                     _SSP1CON2	set	4037
  1032  0000                     _SSP2BUF	set	3951
  1033  0000                     _SSP2CON1	set	3948
  1034  0000                     _SSP2STAT	set	3949
  1035  0000                     _SSP1BUF	set	4041
  1036  0000                     _SSP1CON1	set	4038
  1037  0000                     _SSP1STAT	set	4039
  1038  0000                     _LATG	set	3983
  1039  0000                     _LATF	set	3982
  1040  0000                     _LATE	set	3981
  1041  0000                     _LATD	set	3980
  1042  0000                     _LATC	set	3979
  1043  0000                     _LATB	set	3978
  1044  0000                     _LATA	set	3977
  1045  0000                     _TRISG	set	3992
  1046  0000                     _TRISF	set	3991
  1047  0000                     _TRISE	set	3990
  1048  0000                     _TRISD	set	3989
  1049  0000                     _TRISC	set	3988
  1050  0000                     _TRISB	set	3987
  1051  0000                     _TRISA	set	3986
  1052  0000                     _PORTG	set	3974
  1053  0000                     _PORTF	set	3973
  1054  0000                     _PORTE	set	3972
  1055  0000                     _PORTD	set	3971
  1056  0000                     _PORTC	set	3970
  1057  0000                     _PORTB	set	3969
  1058  0000                     _PORTA	set	3968
  1059  00FF5D                     STR_2:
  1060  00FF5D  4D                 	db	77	;'M'
  1061  00FF5E  61                 	db	97	;'a'
  1062  00FF5F  74                 	db	116	;'t'
  1063  00FF60  74                 	db	116	;'t'
  1064  00FF61  20                 	db	32
  1065  00FF62  57                 	db	87	;'W'
  1066  00FF63  6F                 	db	111	;'o'
  1067  00FF64  6F                 	db	111	;'o'
  1068  00FF65  64                 	db	100	;'d'
  1069  00FF66  73                 	db	115	;'s'
  1070  00FF67  0A                 	db	10
  1071  00FF68  39                 	db	57	;'9'
  1072  00FF69  39                 	db	57	;'9'
  1073  00FF6A  31                 	db	49	;'1'
  1074  00FF6B  34                 	db	52	;'4'
  1075  00FF6C  35                 	db	53	;'5'
  1076  00FF6D  31                 	db	49	;'1'
  1077  00FF6E  37                 	db	55	;'7'
  1078  00FF6F  0A                 	db	10
  1079  00FF70  41                 	db	65	;'A'
  1080  00FF71  73                 	db	115	;'s'
  1081  00FF72  73                 	db	115	;'s'
  1082  00FF73  69                 	db	105	;'i'
  1083  00FF74  67                 	db	103	;'g'
  1084  00FF75  6E                 	db	110	;'n'
  1085  00FF76  6D                 	db	109	;'m'
  1086  00FF77  65                 	db	101	;'e'
  1087  00FF78  6E                 	db	110	;'n'
  1088  00FF79  74                 	db	116	;'t'
  1089  00FF7A  31                 	db	49	;'1'
  1090  00FF7B  0A                 	db	10
  1091  00FF7C  0A                 	db	10
  1092  00FF7D  00                 	db	0
  1093  00FF7E                     STR_12:
  1094  00FF7E  49                 	db	73	;'I'
  1095  00FF7F  6E                 	db	110	;'n'
  1096  00FF80  76                 	db	118	;'v'
  1097  00FF81  61                 	db	97	;'a'
  1098  00FF82  6C                 	db	108	;'l'
  1099  00FF83  69                 	db	105	;'i'
  1100  00FF84  64                 	db	100	;'d'
  1101  00FF85  20                 	db	32
  1102  00FF86  4D                 	db	77	;'M'
  1103  00FF87  6F                 	db	111	;'o'
  1104  00FF88  64                 	db	100	;'d'
  1105  00FF89  65                 	db	101	;'e'
  1106  00FF8A  21                 	db	33
  1107  00FF8B  0A                 	db	10
  1108  00FF8C  0A                 	db	10
  1109  00FF8D  0A                 	db	10
  1110  00FF8E  0A                 	db	10
  1111  00FF8F  0A                 	db	10
  1112  00FF90  0A                 	db	10
  1113  00FF91  00                 	db	0
  1114  00FF92                     STR_4:
  1115  00FF92  43                 	db	67	;'C'
  1116  00FF93  6F                 	db	111	;'o'
  1117  00FF94  6E                 	db	110	;'n'
  1118  00FF95  74                 	db	116	;'t'
  1119  00FF96  69                 	db	105	;'i'
  1120  00FF97  6E                 	db	110	;'n'
  1121  00FF98  75                 	db	117	;'u'
  1122  00FF99  6F                 	db	111	;'o'
  1123  00FF9A  75                 	db	117	;'u'
  1124  00FF9B  73                 	db	115	;'s'
  1125  00FF9C  20                 	db	32
  1126  00FF9D  4D                 	db	77	;'M'
  1127  00FF9E  6F                 	db	111	;'o'
  1128  00FF9F  64                 	db	100	;'d'
  1129  00FFA0  65                 	db	101	;'e'
  1130  00FFA1  3A                 	db	58	;':'
  1131  00FFA2  0A                 	db	10
  1132  00FFA3  00                 	db	0
  1133  00FFA4                     STR_3:
  1134  00FFA4  44                 	db	68	;'D'
  1135  00FFA5  49                 	db	73	;'I'
  1136  00FFA6  50                 	db	80	;'P'
  1137  00FFA7  20                 	db	32
  1138  00FFA8  53                 	db	83	;'S'
  1139  00FFA9  77                 	db	119	;'w'
  1140  00FFAA  69                 	db	105	;'i'
  1141  00FFAB  74                 	db	116	;'t'
  1142  00FFAC  63                 	db	99	;'c'
  1143  00FFAD  68                 	db	104	;'h'
  1144  00FFAE  65                 	db	101	;'e'
  1145  00FFAF  73                 	db	115	;'s'
  1146  00FFB0  3A                 	db	58	;':'
  1147  00FFB1  20                 	db	32
  1148  00FFB2  25                 	db	37
  1149  00FFB3  64                 	db	100	;'d'
  1150  00FFB4  0A                 	db	10
  1151  00FFB5  00                 	db	0
  1152  00FFB6                     STR_11:
  1153  00FFB6  50                 	db	80	;'P'
  1154  00FFB7  6F                 	db	111	;'o'
  1155  00FFB8  73                 	db	115	;'s'
  1156  00FFB9  69                 	db	105	;'i'
  1157  00FFBA  74                 	db	116	;'t'
  1158  00FFBB  69                 	db	105	;'i'
  1159  00FFBC  6F                 	db	111	;'o'
  1160  00FFBD  6E                 	db	110	;'n'
  1161  00FFBE  20                 	db	32
  1162  00FFBF  4D                 	db	77	;'M'
  1163  00FFC0  6F                 	db	111	;'o'
  1164  00FFC1  64                 	db	100	;'d'
  1165  00FFC2  65                 	db	101	;'e'
  1166  00FFC3  0A                 	db	10
  1167  00FFC4  00                 	db	0
  1168  00FFC5                     STR_8:
  1169  00FFC5  53                 	db	83	;'S'
  1170  00FFC6  70                 	db	112	;'p'
  1171  00FFC7  65                 	db	101	;'e'
  1172  00FFC8  65                 	db	101	;'e'
  1173  00FFC9  64                 	db	100	;'d'
  1174  00FFCA  3A                 	db	58	;':'
  1175  00FFCB  20                 	db	32
  1176  00FFCC  25                 	db	37
  1177  00FFCD  64                 	db	100	;'d'
  1178  00FFCE  48                 	db	72	;'H'
  1179  00FFCF  7A                 	db	122	;'z'
  1180  00FFD0  0A                 	db	10
  1181  00FFD1  00                 	db	0
  1182  00FFD2                     STR_10:
  1183  00FFD2  53                 	db	83	;'S'
  1184  00FFD3  74                 	db	116	;'t'
  1185  00FFD4  65                 	db	101	;'e'
  1186  00FFD5  70                 	db	112	;'p'
  1187  00FFD6  73                 	db	115	;'s'
  1188  00FFD7  3A                 	db	58	;':'
  1189  00FFD8  20                 	db	32
  1190  00FFD9  25                 	db	37
  1191  00FFDA  64                 	db	100	;'d'
  1192  00FFDB  0A                 	db	10
  1193  00FFDC  0A                 	db	10
  1194  00FFDD  00                 	db	0
  1195  00FFDE                     STR_9:
  1196  00FFDE  53                 	db	83	;'S'
  1197  00FFDF  74                 	db	116	;'t'
  1198  00FFE0  65                 	db	101	;'e'
  1199  00FFE1  70                 	db	112	;'p'
  1200  00FFE2  20                 	db	32
  1201  00FFE3  4D                 	db	77	;'M'
  1202  00FFE4  6F                 	db	111	;'o'
  1203  00FFE5  64                 	db	100	;'d'
  1204  00FFE6  65                 	db	101	;'e'
  1205  00FFE7  3A                 	db	58	;':'
  1206  00FFE8  0A                 	db	10
  1207  00FFE9  00                 	db	0
  1208  00FFEA                     STR_5:
  1209  00FFEA  44                 	db	68	;'D'
  1210  00FFEB  69                 	db	105	;'i'
  1211  00FFEC  72                 	db	114	;'r'
  1212  00FFED  65                 	db	101	;'e'
  1213  00FFEE  63                 	db	99	;'c'
  1214  00FFEF  74                 	db	116	;'t'
  1215  00FFF0  69                 	db	105	;'i'
  1216  00FFF1  6F                 	db	111	;'o'
  1217  00FFF2  6E                 	db	110	;'n'
  1218  00FFF3  3A                 	db	58	;':'
  1219  00FFF4  20                 	db	32
  1220  00FFF5  00                 	db	0
  1221  00FFF6                     STR_6:
  1222  00FFF6  43                 	db	67	;'C'
  1223  00FFF7  43                 	db	67	;'C'
  1224  00FFF8  57                 	db	87	;'W'
  1225  00FFF9  0A                 	db	10
  1226  00FFFA  00                 	db	0
  1227  00FFFB                     STR_1:
  1228  00FFFB  25                 	db	37
  1229  00FFFC  63                 	db	99	;'c'
  1230  00FFFD  00                 	db	0
  1231  0000                     
  1232                           ; #config settings
  1233  00FFFE  00                 	db	0	; dummy byte at the end
  1234  0000                     
  1235                           	psect	cinit
  1236  014C98                     __pcinit:
  1237                           	opt stack 0
  1238  014C98                     start_initialization:
  1239                           	opt stack 0
  1240  014C98                     __initialization:
  1241                           	opt stack 0
  1242                           
  1243                           ; Initialize objects allocated to BANK1 (12 bytes)
  1244                           ; load TBLPTR registers with __pidataBANK1
  1245  014C98  0E28               	movlw	low __pidataBANK1
  1246  014C9A  6EF6               	movwf	tblptrl,c
  1247  014C9C  0E6A               	movlw	high __pidataBANK1
  1248  014C9E  6EF7               	movwf	tblptrh,c
  1249  014CA0  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1250  014CA2  6EF8               	movwf	tblptru,c
  1251  014CA4  EE01  F0E1         	lfsr	0,__pdataBANK1
  1252  014CA8  EE10 F00C          	lfsr	1,12
  1253  014CAC                     copy_data0:
  1254  014CAC  0009               	tblrd		*+
  1255  014CAE  CFF5 FFEE          	movff	tablat,postinc0
  1256  014CB2  50E5               	movf	postdec1,w,c
  1257  014CB4  50E1               	movf	fsr1l,w,c
  1258  014CB6  E1FA               	bnz	copy_data0
  1259                           
  1260                           ; Initialize objects allocated to BANK0 (3 bytes)
  1261                           ; load TBLPTR registers with __pidataBANK0
  1262  014CB8  0EAA               	movlw	low __pidataBANK0
  1263  014CBA  6EF6               	movwf	tblptrl,c
  1264  014CBC  0E6A               	movlw	high __pidataBANK0
  1265  014CBE  6EF7               	movwf	tblptrh,c
  1266  014CC0  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1267  014CC2  6EF8               	movwf	tblptru,c
  1268  014CC4  0009               	tblrd		*+	;fetch initializer
  1269  014CC6  CFF5 F0EA          	movff	tablat,__pdataBANK0
  1270  014CCA  0009               	tblrd		*+	;fetch initializer
  1271  014CCC  CFF5 F0EB          	movff	tablat,__pdataBANK0+1
  1272  014CD0  0009               	tblrd		*+	;fetch initializer
  1273  014CD2  CFF5 F0EC          	movff	tablat,__pdataBANK0+2
  1274                           
  1275                           ; Initialize objects allocated to COMRAM (10 bytes)
  1276                           ; load TBLPTR registers with __pidataCOMRAM
  1277  014CD6  0E58               	movlw	low __pidataCOMRAM
  1278  014CD8  6EF6               	movwf	tblptrl,c
  1279  014CDA  0E6A               	movlw	high __pidataCOMRAM
  1280  014CDC  6EF7               	movwf	tblptrh,c
  1281  014CDE  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1282  014CE0  6EF8               	movwf	tblptru,c
  1283  014CE2  EE00  F046         	lfsr	0,__pdataCOMRAM
  1284  014CE6  EE10 F00A          	lfsr	1,10
  1285  014CEA                     copy_data1:
  1286  014CEA  0009               	tblrd		*+
  1287  014CEC  CFF5 FFEE          	movff	tablat,postinc0
  1288  014CF0  50E5               	movf	postdec1,w,c
  1289  014CF2  50E1               	movf	fsr1l,w,c
  1290  014CF4  E1FA               	bnz	copy_data1
  1291                           
  1292                           ; Clear objects allocated to BIGRAM (300 bytes)
  1293  014CF6  EE02  F085         	lfsr	0,__pbssBIGRAM
  1294  014CFA  EE11 F02C          	lfsr	1,300
  1295  014CFE                     clear_0:
  1296  014CFE  6AEE               	clrf	postinc0,c
  1297  014D00  50E5               	movf	postdec1,w,c
  1298  014D02  50E1               	movf	fsr1l,w,c
  1299  014D04  E1FC               	bnz	clear_0
  1300  014D06  50E2               	movf	fsr1h,w,c
  1301  014D08  E1FA               	bnz	clear_0
  1302                           
  1303                           ; Clear objects allocated to BANK2 (100 bytes)
  1304  014D0A  EE02  F000         	lfsr	0,__pbssBANK2
  1305  014D0E  0E64               	movlw	100
  1306  014D10                     clear_1:
  1307  014D10  6AEE               	clrf	postinc0,c
  1308  014D12  06E8               	decf	wreg,f,c
  1309  014D14  E1FD               	bnz	clear_1
  1310                           
  1311                           ; Clear objects allocated to BANK1 (225 bytes)
  1312  014D16  EE01  F000         	lfsr	0,__pbssBANK1
  1313  014D1A  0EE1               	movlw	225
  1314  014D1C                     clear_2:
  1315  014D1C  6AEE               	clrf	postinc0,c
  1316  014D1E  06E8               	decf	wreg,f,c
  1317  014D20  E1FD               	bnz	clear_2
  1318                           
  1319                           ; Clear objects allocated to BANK0 (21 bytes)
  1320  014D22  EE00  F0D5         	lfsr	0,__pbssBANK0
  1321  014D26  0E15               	movlw	21
  1322  014D28                     clear_3:
  1323  014D28  6AEE               	clrf	postinc0,c
  1324  014D2A  06E8               	decf	wreg,f,c
  1325  014D2C  E1FD               	bnz	clear_3
  1326                           
  1327                           ; Clear objects allocated to COMRAM (29 bytes)
  1328  014D2E  EE00  F029         	lfsr	0,__pbssCOMRAM
  1329  014D32  0E1D               	movlw	29
  1330  014D34                     clear_4:
  1331  014D34  6AEE               	clrf	postinc0,c
  1332  014D36  06E8               	decf	wreg,f,c
  1333  014D38  E1FD               	bnz	clear_4
  1334  014D3A                     end_of_initialization:
  1335                           	opt stack 0
  1336  014D3A                     __end_of__initialization:
  1337                           	opt stack 0
  1338  014D3A  9050               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1339  014D3C  9250               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1340  014D3E  0100               	movlb	0
  1341  014D40  EF00  F080         	goto	_main	;jump to C main() function
  1342                           tblptru	equ	0xFF8
  1343                           tblptrh	equ	0xFF7
  1344                           tblptrl	equ	0xFF6
  1345                           tablat	equ	0xFF5
  1346                           postinc0	equ	0xFEE
  1347                           wreg	equ	0xFE8
  1348                           postdec1	equ	0xFE5
  1349                           fsr1h	equ	0xFE2
  1350                           fsr1l	equ	0xFE1
  1351                           
  1352                           	psect	bssCOMRAM
  1353  000029                     __pbssCOMRAM:
  1354                           	opt stack 0
  1355  000029                     _COUNTER:
  1356                           	opt stack 0
  1357  000029                     	ds	2
  1358  00002B                     HMI_GRender@a:
  1359                           	opt stack 0
  1360  00002B                     	ds	2
  1361  00002D                     _u:
  1362                           	opt stack 0
  1363  00002D                     	ds	1
  1364  00002E                     _j:
  1365                           	opt stack 0
  1366  00002E                     	ds	1
  1367  00002F                     _i:
  1368                           	opt stack 0
  1369  00002F                     	ds	1
  1370  000030                     rand@screw:
  1371                           	opt stack 0
  1372  000030                     	ds	1
  1373  000031                     _ADC_Initialised:
  1374                           	opt stack 0
  1375  000031                     	ds	1
  1376  000032                     OutSeg@a:
  1377                           	opt stack 0
  1378  000032                     	ds	1
  1379  000033                     OutSeg@segset:
  1380                           	opt stack 0
  1381  000033                     	ds	1
  1382  000034                     OutSeg@cur:
  1383                           	opt stack 0
  1384  000034                     	ds	1
  1385  000035                     _PortC:
  1386                           	opt stack 0
  1387  000035                     	ds	10
  1388  00003F                     _I2C1T:
  1389                           	opt stack 0
  1390  00003F                     	ds	7
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           postdec1	equ	0xFE5
  1398                           fsr1h	equ	0xFE2
  1399                           fsr1l	equ	0xFE1
  1400                           
  1401                           	psect	dataCOMRAM
  1402  000046                     __pdataCOMRAM:
  1403                           	opt stack 0
  1404  000046                     _gCursor:
  1405                           	opt stack 0
  1406  000046                     	ds	4
  1407  00004A                     _Bus_State:
  1408                           	opt stack 0
  1409  00004A                     	ds	1
  1410  00004B                     	ds	1
  1411  00004C                     	ds	1
  1412  00004D                     	ds	1
  1413  00004E                     _l:
  1414                           	opt stack 0
  1415  00004E                     	ds	1
  1416  00004F                     _w:
  1417                           	opt stack 0
  1418  00004F                     	ds	1
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           tblptrl	equ	0xFF6
  1422                           tablat	equ	0xFF5
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           postdec1	equ	0xFE5
  1426                           fsr1h	equ	0xFE2
  1427                           fsr1l	equ	0xFE1
  1428                           
  1429                           	psect	bssBANK0
  1430  0000D5                     __pbssBANK0:
  1431                           	opt stack 0
  1432  0000D5                     _lQueue:
  1433                           	opt stack 0
  1434  0000D5                     	ds	3
  1435  0000D8                     _pShiftVal:
  1436                           	opt stack 0
  1437  0000D8                     	ds	2
  1438  0000DA                     _val:
  1439                           	opt stack 0
  1440  0000DA                     	ds	2
  1441  0000DC                     _lMotor:
  1442                           	opt stack 0
  1443  0000DC                     	ds	2
  1444  0000DE                     _lCurrent:
  1445                           	opt stack 0
  1446  0000DE                     	ds	2
  1447  0000E0                     _gBackcolour:
  1448                           	opt stack 0
  1449  0000E0                     	ds	2
  1450  0000E2                     Event_TestButton@j:
  1451                           	opt stack 0
  1452  0000E2                     	ds	1
  1453  0000E3                     Timer2_Init@PRE:
  1454                           	opt stack 0
  1455  0000E3                     	ds	1
  1456  0000E4                     Timer2_Init@INDEX:
  1457                           	opt stack 0
  1458  0000E4                     	ds	1
  1459  0000E5                     Timer0_Init@PRE:
  1460                           	opt stack 0
  1461  0000E5                     	ds	1
  1462  0000E6                     _INDEX:
  1463                           	opt stack 0
  1464  0000E6                     	ds	1
  1465  0000E7                     _lBufferY:
  1466                           	opt stack 0
  1467  0000E7                     	ds	1
  1468  0000E8                     _lBufferX:
  1469                           	opt stack 0
  1470  0000E8                     	ds	1
  1471  0000E9                     _clearall:
  1472                           	opt stack 0
  1473  0000E9                     	ds	1
  1474                           tblptru	equ	0xFF8
  1475                           tblptrh	equ	0xFF7
  1476                           tblptrl	equ	0xFF6
  1477                           tablat	equ	0xFF5
  1478                           postinc0	equ	0xFEE
  1479                           wreg	equ	0xFE8
  1480                           postdec1	equ	0xFE5
  1481                           fsr1h	equ	0xFE2
  1482                           fsr1l	equ	0xFE1
  1483                           
  1484                           	psect	dataBANK0
  1485  0000EA                     __pdataBANK0:
  1486                           	opt stack 0
  1487  0000EA                     _gForecolour:
  1488                           	opt stack 0
  1489  0000EA                     	ds	2
  1490  0000EC                     _change:
  1491                           	opt stack 0
  1492  0000EC                     	ds	1
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           postinc0	equ	0xFEE
  1498                           wreg	equ	0xFE8
  1499                           postdec1	equ	0xFE5
  1500                           fsr1h	equ	0xFE2
  1501                           fsr1l	equ	0xFE1
  1502                           
  1503                           	psect	bssBANK1
  1504  000100                     __pbssBANK1:
  1505                           	opt stack 0
  1506  000100                     Timer2_Init@DIV:
  1507                           	opt stack 0
  1508  000100                     	ds	4
  1509  000104                     Timer0_Init@DIV:
  1510                           	opt stack 0
  1511  000104                     	ds	4
  1512  000108                     _gISR:
  1513                           	opt stack 0
  1514  000108                     	ds	3
  1515  00010B                     _lStepFunction:
  1516                           	opt stack 0
  1517  00010B                     	ds	3
  1518  00010E                     _I2C2_More:
  1519                           	opt stack 0
  1520  00010E                     	ds	3
  1521  000111                     _I2C1_More:
  1522                           	opt stack 0
  1523  000111                     	ds	3
  1524  000114                     _I2C2_Done:
  1525                           	opt stack 0
  1526  000114                     	ds	3
  1527  000117                     _I2C1_Done:
  1528                           	opt stack 0
  1529  000117                     	ds	3
  1530  00011A                     _errno:
  1531                           	opt stack 0
  1532  00011A                     	ds	2
  1533  00011C                     SPI_Send9@dat:
  1534                           	opt stack 0
  1535  00011C                     	ds	2
  1536  00011E                     _HMIBoard:
  1537                           	opt stack 0
  1538  00011E                     	ds	58
  1539  000158                     _SPI1:
  1540                           	opt stack 0
  1541  000158                     	ds	11
  1542  000163                     _SPI2:
  1543                           	opt stack 0
  1544  000163                     	ds	11
  1545  00016E                     _DIPSwitch:
  1546                           	opt stack 0
  1547  00016E                     	ds	10
  1548  000178                     _TestButton:
  1549                           	opt stack 0
  1550  000178                     	ds	10
  1551  000182                     _PortG:
  1552                           	opt stack 0
  1553  000182                     	ds	10
  1554  00018C                     _PortE:
  1555                           	opt stack 0
  1556  00018C                     	ds	10
  1557  000196                     _PortD:
  1558                           	opt stack 0
  1559  000196                     	ds	10
  1560  0001A0                     _PortB:
  1561                           	opt stack 0
  1562  0001A0                     	ds	10
  1563  0001AA                     _PortA:
  1564                           	opt stack 0
  1565  0001AA                     	ds	10
  1566  0001B4                     _PortF:
  1567                           	opt stack 0
  1568  0001B4                     	ds	10
  1569  0001BE                     _I2C2T:
  1570                           	opt stack 0
  1571  0001BE                     	ds	7
  1572  0001C5                     _ADC_AN3:
  1573                           	opt stack 0
  1574  0001C5                     	ds	5
  1575  0001CA                     _ADC_AN2:
  1576                           	opt stack 0
  1577  0001CA                     	ds	5
  1578  0001CF                     _ADC_AN1:
  1579                           	opt stack 0
  1580  0001CF                     	ds	5
  1581  0001D4                     _ADC_AN0:
  1582                           	opt stack 0
  1583  0001D4                     	ds	5
  1584  0001D9                     LCD_DrawRectangle@p4:
  1585                           	opt stack 0
  1586  0001D9                     	ds	4
  1587  0001DD                     LCD_DrawRectangle@p2:
  1588                           	opt stack 0
  1589  0001DD                     	ds	4
  1590                           tblptru	equ	0xFF8
  1591                           tblptrh	equ	0xFF7
  1592                           tblptrl	equ	0xFF6
  1593                           tablat	equ	0xFF5
  1594                           postinc0	equ	0xFEE
  1595                           wreg	equ	0xFE8
  1596                           postdec1	equ	0xFE5
  1597                           fsr1h	equ	0xFE2
  1598                           fsr1l	equ	0xFE1
  1599                           
  1600                           	psect	dataBANK1
  1601  0001E1                     __pdataBANK1:
  1602                           	opt stack 0
  1603  0001E1                     Console_Render@F6956:
  1604                           	opt stack 0
  1605  0001E1                     	ds	4
  1606  0001E5                     _gLineSize:
  1607                           	opt stack 0
  1608  0001E5                     	ds	4
  1609  0001E9                     _gCharSize:
  1610                           	opt stack 0
  1611  0001E9                     	ds	4
  1612                           tblptru	equ	0xFF8
  1613                           tblptrh	equ	0xFF7
  1614                           tblptrl	equ	0xFF6
  1615                           tablat	equ	0xFF5
  1616                           postinc0	equ	0xFEE
  1617                           wreg	equ	0xFE8
  1618                           postdec1	equ	0xFE5
  1619                           fsr1h	equ	0xFE2
  1620                           fsr1l	equ	0xFE1
  1621                           
  1622                           	psect	bssBANK2
  1623  000200                     __pbssBANK2:
  1624                           	opt stack 0
  1625  000200                     _lCBuffer:
  1626                           	opt stack 0
  1627  000200                     	ds	30
  1628  00021E                     Console_MakeField@Fill:
  1629                           	opt stack 0
  1630  00021E                     	ds	70
  1631                           tblptru	equ	0xFF8
  1632                           tblptrh	equ	0xFF7
  1633                           tblptrl	equ	0xFF6
  1634                           tablat	equ	0xFF5
  1635                           postinc0	equ	0xFEE
  1636                           wreg	equ	0xFE8
  1637                           postdec1	equ	0xFE5
  1638                           fsr1h	equ	0xFE2
  1639                           fsr1l	equ	0xFE1
  1640                           
  1641                           	psect	bssBIGRAM
  1642  000285                     __pbssBIGRAM:
  1643                           	opt stack 0
  1644  000285                     _lBuffer:
  1645                           	opt stack 0
  1646  000285                     	ds	300
  1647                           tblptru	equ	0xFF8
  1648                           tblptrh	equ	0xFF7
  1649                           tblptrl	equ	0xFF6
  1650                           tablat	equ	0xFF5
  1651                           postinc0	equ	0xFEE
  1652                           wreg	equ	0xFE8
  1653                           postdec1	equ	0xFE5
  1654                           fsr1h	equ	0xFE2
  1655                           fsr1l	equ	0xFE1
  1656                           
  1657                           	psect	cstackBANK2
  1658  000264                     __pcstackBANK2:
  1659                           	opt stack 0
  1660  000264                     main@rotation:
  1661                           	opt stack 0
  1662                           
  1663                           ; 2 bytes @ 0x0
  1664  000264                     	ds	2
  1665  000266                     main@movetoPos:
  1666                           	opt stack 0
  1667                           
  1668                           ; 2 bytes @ 0x2
  1669  000266                     	ds	2
  1670  000268                     main@ADCVoltage:
  1671                           	opt stack 0
  1672                           
  1673                           ; 4 bytes @ 0x4
  1674  000268                     	ds	4
  1675  00026C                     _main$15162:
  1676                           	opt stack 0
  1677                           
  1678                           ; 4 bytes @ 0x8
  1679  00026C                     	ds	4
  1680  000270                     main@IRDistance:
  1681                           	opt stack 0
  1682                           
  1683                           ; 2 bytes @ 0xC
  1684  000270                     	ds	2
  1685  000272                     main@UpValue:
  1686                           	opt stack 0
  1687                           
  1688                           ; 1 bytes @ 0xE
  1689  000272                     	ds	1
  1690  000273                     main@LeftValue:
  1691                           	opt stack 0
  1692                           
  1693                           ; 1 bytes @ 0xF
  1694  000273                     	ds	1
  1695  000274                     main@RightValue:
  1696                           	opt stack 0
  1697                           
  1698                           ; 1 bytes @ 0x10
  1699  000274                     	ds	1
  1700  000275                     main@Direction:
  1701                           	opt stack 0
  1702                           
  1703                           ; 2 bytes @ 0x11
  1704  000275                     	ds	2
  1705  000277                     main@DipValue:
  1706                           	opt stack 0
  1707                           
  1708                           ; 2 bytes @ 0x13
  1709  000277                     	ds	2
  1710  000279                     main@DownValue:
  1711                           	opt stack 0
  1712                           
  1713                           ; 1 bytes @ 0x15
  1714  000279                     	ds	1
  1715  00027A                     main@lockedMode:
  1716                           	opt stack 0
  1717                           
  1718                           ; 1 bytes @ 0x16
  1719  00027A                     	ds	1
  1720  00027B                     main@Speed:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x17
  1724  00027B                     	ds	2
  1725  00027D                     main@Steps:
  1726                           	opt stack 0
  1727                           
  1728                           ; 2 bytes @ 0x19
  1729  00027D                     	ds	2
  1730  00027F                     main@Stepper:
  1731                           	opt stack 0
  1732                           
  1733                           ; 6 bytes @ 0x1B
  1734  00027F                     	ds	6
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           postinc0	equ	0xFEE
  1740                           wreg	equ	0xFE8
  1741                           postdec1	equ	0xFE5
  1742                           fsr1h	equ	0xFE2
  1743                           fsr1l	equ	0xFE1
  1744                           
  1745                           	psect	cstackBANK0
  1746  000060                     __pcstackBANK0:
  1747                           	opt stack 0
  1748  000060                     ??_Console_ClearCursor:
  1749  000060                     ??_ADC_SetChannel:
  1750  000060                     ??_ADC_ConversionTime:
  1751  000060                     ??_ADC_SetupIO:
  1752  000060                     ??_Console_Init:
  1753  000060                     ??_Console_NewLine:
  1754  000060                     ??_Console_FormFeed:
  1755  000060                     ??_HMI_SetButton:
  1756  000060                     ?_GetPortProperties:
  1757                           	opt stack 0
  1758  000060                     ?_GetPortPORT:
  1759                           	opt stack 0
  1760  000060                     ?_GetPortTRIS:
  1761                           	opt stack 0
  1762  000060                     ?___wmul:
  1763                           	opt stack 0
  1764  000060                     ?___awdiv:
  1765                           	opt stack 0
  1766  000060                     ?___lwdiv:
  1767                           	opt stack 0
  1768  000060                     ?___fldiv:
  1769                           	opt stack 0
  1770  000060                     ?_frexp:
  1771                           	opt stack 0
  1772  000060                     ?___flneg:
  1773                           	opt stack 0
  1774  000060                     ?___lldiv:
  1775                           	opt stack 0
  1776  000060                     ?___xxtofl:
  1777                           	opt stack 0
  1778  000060                     Mode_Set@pMode:
  1779                           	opt stack 0
  1780  000060                     ToSegment@pCHR:
  1781                           	opt stack 0
  1782  000060                     HMI_SetBar@pValue:
  1783                           	opt stack 0
  1784  000060                     ADC_ClockDivision@pDivide:
  1785                           	opt stack 0
  1786  000060                     Port_GetPin@pInput:
  1787                           	opt stack 0
  1788  000060                     Port_GetQuad@pInput:
  1789                           	opt stack 0
  1790  000060                     SPI_DisableISR@pInput:
  1791                           	opt stack 0
  1792  000060                     SPI_DCS@pInput:
  1793                           	opt stack 0
  1794  000060                     SPI_Send@pInput:
  1795                           	opt stack 0
  1796  000060                     Byte_SetBit@pInput:
  1797                           	opt stack 0
  1798  000060                     Byte_GetBit@pInput:
  1799                           	opt stack 0
  1800  000060                     Byte_SetZone@pInput:
  1801                           	opt stack 0
  1802  000060                     Byte_GetZone@pInput:
  1803                           	opt stack 0
  1804  000060                     Byte_SetByte@pInput:
  1805                           	opt stack 0
  1806  000060                     delay_ms@ms:
  1807                           	opt stack 0
  1808  000060                     delay_us@us:
  1809                           	opt stack 0
  1810  000060                     reverse@input:
  1811                           	opt stack 0
  1812  000060                     ADC_Sequence@pItemA:
  1813                           	opt stack 0
  1814  000060                     ___wmul@multiplier:
  1815                           	opt stack 0
  1816  000060                     ___awdiv@dividend:
  1817                           	opt stack 0
  1818  000060                     ___lwdiv@dividend:
  1819                           	opt stack 0
  1820  000060                     MXK_Queue@pCallback:
  1821                           	opt stack 0
  1822  000060                     Timer0_Start@pFunction:
  1823                           	opt stack 0
  1824  000060                     ___flge@ff1:
  1825                           	opt stack 0
  1826  000060                     ___flneg@f1:
  1827                           	opt stack 0
  1828  000060                     ___lldiv@dividend:
  1829                           	opt stack 0
  1830  000060                     ___fldiv@b:
  1831                           	opt stack 0
  1832  000060                     ___xxtofl@val:
  1833                           	opt stack 0
  1834  000060                     frexp@value:
  1835                           	opt stack 0
  1836                           
  1837                           ; 4 bytes @ 0x0
  1838  000060                     	ds	1
  1839  000061                     ADC_SetChannel@pChannel:
  1840                           	opt stack 0
  1841  000061                     ADC_ClockDivision@reg:
  1842                           	opt stack 0
  1843  000061                     ADC_ConversionTime@pCount:
  1844                           	opt stack 0
  1845  000061                     HMI_SetSegments@pString:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x1
  1849  000061                     	ds	1
  1850  000062                     GetPortProperties@pInput:
  1851                           	opt stack 0
  1852  000062                     GetPortPORT@pInput:
  1853                           	opt stack 0
  1854  000062                     GetPortTRIS@pInput:
  1855                           	opt stack 0
  1856  000062                     Port_GetPin@pPin:
  1857                           	opt stack 0
  1858  000062                     Port_GetQuad@pQuad:
  1859                           	opt stack 0
  1860  000062                     SPI_Send@pData:
  1861                           	opt stack 0
  1862  000062                     Byte_SetBit@pBit:
  1863                           	opt stack 0
  1864  000062                     Byte_GetBit@pBit:
  1865                           	opt stack 0
  1866  000062                     Byte_SetZone@pMax:
  1867                           	opt stack 0
  1868  000062                     Byte_GetZone@pMax:
  1869                           	opt stack 0
  1870  000062                     Byte_SetByte@pValue:
  1871                           	opt stack 0
  1872  000062                     Console_Init@x:
  1873                           	opt stack 0
  1874  000062                     Console_FormFeed@x:
  1875                           	opt stack 0
  1876  000062                     ADC_SetupIO@pChannel:
  1877                           	opt stack 0
  1878  000062                     ADC_ClockDivision@unfound:
  1879                           	opt stack 0
  1880  000062                     reverse@length:
  1881                           	opt stack 0
  1882  000062                     ADC_Sequence@pItemB:
  1883                           	opt stack 0
  1884  000062                     ADC_Start@pInput:
  1885                           	opt stack 0
  1886  000062                     ___wmul@multiplicand:
  1887                           	opt stack 0
  1888  000062                     ___awdiv@divisor:
  1889                           	opt stack 0
  1890  000062                     ___lwdiv@divisor:
  1891                           	opt stack 0
  1892  000062                     delay_ms@u:
  1893                           	opt stack 0
  1894  000062                     delay_us@u:
  1895                           	opt stack 0
  1896  000062                     HMI_SetButton@reindex:
  1897                           	opt stack 0
  1898                           
  1899                           ; 4 bytes @ 0x2
  1900  000062                     	ds	1
  1901  000063                     ??_Port_GetPin:
  1902  000063                     ??_Port_GetQuad:
  1903  000063                     ??_Byte_GetBit:
  1904  000063                     LCD_Write@mode:
  1905                           	opt stack 0
  1906  000063                     Byte_SetBit@pValue:
  1907                           	opt stack 0
  1908  000063                     Byte_SetZone@pChunk:
  1909                           	opt stack 0
  1910  000063                     Byte_GetZone@pChunk:
  1911                           	opt stack 0
  1912  000063                     Console_Init@y:
  1913                           	opt stack 0
  1914  000063                     Console_FormFeed@y:
  1915                           	opt stack 0
  1916  000063                     OutSeg@pSegment:
  1917                           	opt stack 0
  1918  000063                     ADC_SetupIO@MASK:
  1919                           	opt stack 0
  1920  000063                     Motor_Move@pMotor:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x3
  1924  000063                     	ds	1
  1925  000064                     ??_Byte_SetBit:
  1926  000064                     ??_Console_IncrementCursor:
  1927  000064                     ??_OutSeg:
  1928  000064                     ??_ADC_Start:
  1929  000064                     ??___xxtofl:
  1930  000064                     LCD_Write@value:
  1931                           	opt stack 0
  1932  000064                     Byte_GetBit@Output:
  1933                           	opt stack 0
  1934  000064                     Byte_SetZone@pChunkSize:
  1935                           	opt stack 0
  1936  000064                     Byte_GetZone@pChunkSize:
  1937                           	opt stack 0
  1938  000064                     reverse@tempVar:
  1939                           	opt stack 0
  1940  000064                     ___awdiv@counter:
  1941                           	opt stack 0
  1942  000064                     ___lwdiv@counter:
  1943                           	opt stack 0
  1944  000064                     HMI_SetSegments@in:
  1945                           	opt stack 0
  1946  000064                     ADC_Init@pInput:
  1947                           	opt stack 0
  1948  000064                     ___wmul@product:
  1949                           	opt stack 0
  1950  000064                     frexp@eptr:
  1951                           	opt stack 0
  1952  000064                     ___flge@ff2:
  1953                           	opt stack 0
  1954  000064                     ___lldiv@divisor:
  1955                           	opt stack 0
  1956  000064                     ___fldiv@a:
  1957                           	opt stack 0
  1958                           
  1959                           ; 4 bytes @ 0x4
  1960  000064                     	ds	1
  1961  000065                     ??_Byte_GetZone:
  1962  000065                     ?_Console_MakeField:
  1963                           	opt stack 0
  1964  000065                     Set_Addr_Window@ys:
  1965                           	opt stack 0
  1966  000065                     Set_Rotation@m:
  1967                           	opt stack 0
  1968  000065                     Port_GetPin@Output:
  1969                           	opt stack 0
  1970  000065                     Port_GetQuad@Output:
  1971                           	opt stack 0
  1972  000065                     Byte_SetZone@pValue:
  1973                           	opt stack 0
  1974  000065                     ___awdiv@sign:
  1975                           	opt stack 0
  1976  000065                     LCD_Word_Write@value:
  1977                           	opt stack 0
  1978  000065                     reverse@iterator:
  1979                           	opt stack 0
  1980  000065                     Motor_Move@pDelta:
  1981                           	opt stack 0
  1982  000065                     ___lwdiv@quotient:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x5
  1986  000065                     	ds	1
  1987  000066                     ??_frexp:
  1988  000066                     ??_Byte_SetZone:
  1989  000066                     Set_Addr_Window@xe:
  1990                           	opt stack 0
  1991  000066                     Set_Rotation@rotation:
  1992                           	opt stack 0
  1993  000066                     Byte_GetZone@MASK:
  1994                           	opt stack 0
  1995  000066                     OutSeg@pInput:
  1996                           	opt stack 0
  1997  000066                     HMI_SetButton@pValue:
  1998                           	opt stack 0
  1999  000066                     ADC_Init@pChannel:
  2000                           	opt stack 0
  2001  000066                     MXK_BlockSwitchTo@CUR:
  2002                           	opt stack 0
  2003  000066                     MXK_SwitchTo@CUR:
  2004                           	opt stack 0
  2005  000066                     ___awdiv@quotient:
  2006                           	opt stack 0
  2007                           
  2008                           ; 2 bytes @ 0x6
  2009  000066                     	ds	1
  2010  000067                     ??_Console_MakeField:
  2011  000067                     ?___lwmod:
  2012                           	opt stack 0
  2013  000067                     Set_Addr_Window@ye:
  2014                           	opt stack 0
  2015  000067                     Byte_GetZone@Offset:
  2016                           	opt stack 0
  2017  000067                     OutSeg@out:
  2018                           	opt stack 0
  2019  000067                     HMI_SetButton@v:
  2020                           	opt stack 0
  2021  000067                     MXK_BlockSwitchTo@pModule:
  2022                           	opt stack 0
  2023  000067                     MXK_SwitchTo@pModule:
  2024                           	opt stack 0
  2025  000067                     ___lwmod@dividend:
  2026                           	opt stack 0
  2027                           
  2028                           ; 2 bytes @ 0x7
  2029  000067                     	ds	1
  2030  000068                     ??___fldiv:
  2031  000068                     ??_Console_Tab:
  2032  000068                     ??___flge:
  2033  000068                     Set_Addr_Window@xs:
  2034                           	opt stack 0
  2035  000068                     Byte_GetZone@Output:
  2036                           	opt stack 0
  2037  000068                     ___xxtofl@sign:
  2038                           	opt stack 0
  2039  000068                     HMI_Render@a:
  2040                           	opt stack 0
  2041  000068                     ___lldiv@quotient:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x8
  2045  000068                     	ds	1
  2046  000069                     Byte_SetZone@Offset:
  2047                           	opt stack 0
  2048  000069                     ___xxtofl@exp:
  2049                           	opt stack 0
  2050  000069                     LCD_Fill@pColour:
  2051                           	opt stack 0
  2052  000069                     LCD_FillRectangle@pColour:
  2053                           	opt stack 0
  2054  000069                     Byte_GetPair@pInput:
  2055                           	opt stack 0
  2056  000069                     Console_MakeField@Index:
  2057                           	opt stack 0
  2058  000069                     ___lwmod@divisor:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x9
  2062  000069                     	ds	1
  2063  00006A                     Byte_SetZone@MASK:
  2064                           	opt stack 0
  2065  00006A                     ___xxtofl@arg:
  2066                           	opt stack 0
  2067                           
  2068                           ; 4 bytes @ 0xA
  2069  00006A                     	ds	1
  2070  00006B                     LCD_Fill@i:
  2071                           	opt stack 0
  2072  00006B                     Byte_GetPair@pPair:
  2073                           	opt stack 0
  2074  00006B                     Console_MakeField@pInput:
  2075                           	opt stack 0
  2076  00006B                     ___lwmod@counter:
  2077                           	opt stack 0
  2078  00006B                     Byte_SetPair@pInput:
  2079                           	opt stack 0
  2080  00006B                     Byte_SetQuad@pInput:
  2081                           	opt stack 0
  2082  00006B                     LCD_FillRectangle@pPoint:
  2083                           	opt stack 0
  2084                           
  2085                           ; 4 bytes @ 0xB
  2086  00006B                     	ds	1
  2087  00006C                     LCD_Fill@j:
  2088                           	opt stack 0
  2089  00006C                     ___lldiv@counter:
  2090                           	opt stack 0
  2091  00006C                     ___fldiv@sign:
  2092                           	opt stack 0
  2093  00006C                     Word_GetPair@pInput:
  2094                           	opt stack 0
  2095  00006C                     itos@input:
  2096                           	opt stack 0
  2097  00006C                     Console_MakeField@Column:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0xC
  2101  00006C                     	ds	1
  2102  00006D                     Byte_SetPair@pPair:
  2103                           	opt stack 0
  2104  00006D                     Byte_SetQuad@pQuad:
  2105                           	opt stack 0
  2106  00006D                     Console_Tab@t:
  2107                           	opt stack 0
  2108  00006D                     Timer0_Init@pFrequency:
  2109                           	opt stack 0
  2110  00006D                     Timer2_Init@pFrequency:
  2111                           	opt stack 0
  2112  00006D                     ___fldiv@rem:
  2113                           	opt stack 0
  2114                           
  2115                           ; 4 bytes @ 0xD
  2116  00006D                     	ds	1
  2117  00006E                     ?___flmul:
  2118                           	opt stack 0
  2119  00006E                     Byte_SetPair@pValue:
  2120                           	opt stack 0
  2121  00006E                     Byte_SetQuad@pValue:
  2122                           	opt stack 0
  2123  00006E                     Word_GetPair@pPair:
  2124                           	opt stack 0
  2125  00006E                     Console_Tab@i:
  2126                           	opt stack 0
  2127  00006E                     itos@destination:
  2128                           	opt stack 0
  2129  00006E                     _Console_MakeField$10974:
  2130                           	opt stack 0
  2131  00006E                     ___flmul@b:
  2132                           	opt stack 0
  2133                           
  2134                           ; 4 bytes @ 0xE
  2135  00006E                     	ds	1
  2136  00006F                     Console_Tab@c:
  2137                           	opt stack 0
  2138  00006F                     Port_SetPin@pInput:
  2139                           	opt stack 0
  2140  00006F                     Port_Set@pInput:
  2141                           	opt stack 0
  2142  00006F                     SPI_MinSpeed@pInput:
  2143                           	opt stack 0
  2144  00006F                     SPI_MaxSpeed@pInput:
  2145                           	opt stack 0
  2146  00006F                     Word_SetPair@pInput:
  2147                           	opt stack 0
  2148  00006F                     PortProperty_Valid@pInput:
  2149                           	opt stack 0
  2150  00006F                     LCD_FillRectangle@pSize:
  2151                           	opt stack 0
  2152                           
  2153                           ; 4 bytes @ 0xF
  2154  00006F                     	ds	1
  2155  000070                     ??_Console_PrintChar:
  2156  000070                     Console_MakeField@x:
  2157                           	opt stack 0
  2158  000070                     itos@Data:
  2159                           	opt stack 0
  2160                           
  2161                           ; 2 bytes @ 0x10
  2162  000070                     	ds	1
  2163  000071                     ??_Timer2_Init:
  2164  000071                     ??_Timer0_Init:
  2165  000071                     Port_SetPin@pPin:
  2166                           	opt stack 0
  2167  000071                     Port_Set@pValue:
  2168                           	opt stack 0
  2169  000071                     Word_SetPair@pPair:
  2170                           	opt stack 0
  2171  000071                     PortProperty_Valid@pPinDrive:
  2172                           	opt stack 0
  2173  000071                     Console_MakeField@y:
  2174                           	opt stack 0
  2175  000071                     ___fldiv@new_exp:
  2176                           	opt stack 0
  2177                           
  2178                           ; 2 bytes @ 0x11
  2179  000071                     	ds	1
  2180  000072                     ??_Port_Set:
  2181  000072                     Port_SetPin@pValue:
  2182                           	opt stack 0
  2183  000072                     Word_SetPair@pValue:
  2184                           	opt stack 0
  2185  000072                     PortProperty_Valid@pPin:
  2186                           	opt stack 0
  2187  000072                     LCD_DrawField@pField:
  2188                           	opt stack 0
  2189  000072                     itos@Length:
  2190                           	opt stack 0
  2191  000072                     Timer2_Init@RDIV:
  2192                           	opt stack 0
  2193  000072                     ___flmul@a:
  2194                           	opt stack 0
  2195                           
  2196                           ; 4 bytes @ 0x12
  2197  000072                     	ds	1
  2198  000073                     ??_PortProperty_Valid:
  2199  000073                     ??_LCD_FillRectangle:
  2200  000073                     Port_SetPin@Type:
  2201                           	opt stack 0
  2202  000073                     Console_PrintChar@pInput:
  2203                           	opt stack 0
  2204  000073                     Timer0_Init@pCPUClock:
  2205                           	opt stack 0
  2206  000073                     ___fldiv@grs:
  2207                           	opt stack 0
  2208                           
  2209                           ; 4 bytes @ 0x13
  2210  000073                     	ds	1
  2211  000074                     LED_Set@pValue:
  2212                           	opt stack 0
  2213  000074                     putch@c:
  2214                           	opt stack 0
  2215  000074                     Port_TogglePin@pInput:
  2216                           	opt stack 0
  2217  000074                     itos@Out:
  2218                           	opt stack 0
  2219  000074                     LCD_DrawField@pPoint:
  2220                           	opt stack 0
  2221                           
  2222                           ; 4 bytes @ 0x14
  2223  000074                     	ds	1
  2224  000075                     ?_printf:
  2225                           	opt stack 0
  2226  000075                     LCD_FillRectangle@i:
  2227                           	opt stack 0
  2228  000075                     LED_Set@pLED:
  2229                           	opt stack 0
  2230  000075                     printf@f:
  2231                           	opt stack 0
  2232  000075                     PortProperty_Valid@Errors:
  2233                           	opt stack 0
  2234                           
  2235                           ; 16 bytes @ 0x15
  2236  000075                     	ds	1
  2237  000076                     ??___flmul:
  2238  000076                     LCD_FillRectangle@j:
  2239                           	opt stack 0
  2240  000076                     Port_TogglePin@pPin:
  2241                           	opt stack 0
  2242  000076                     HMI_SetNumber@pInput:
  2243                           	opt stack 0
  2244  000076                     Timer2_Init@pCPUClock:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0x16
  2248  000076                     	ds	1
  2249  000077                     Port_TogglePin@Value:
  2250                           	opt stack 0
  2251  000077                     ___fldiv@bexp:
  2252                           	opt stack 0
  2253  000077                     Timer0_Init@DIVIDE:
  2254                           	opt stack 0
  2255                           
  2256                           ; 4 bytes @ 0x17
  2257  000077                     	ds	1
  2258  000078                     LED_Toggle@pLED:
  2259                           	opt stack 0
  2260  000078                     ___fldiv@aexp:
  2261                           	opt stack 0
  2262  000078                     LCD_DrawField@pSize:
  2263                           	opt stack 0
  2264                           
  2265                           ; 4 bytes @ 0x18
  2266  000078                     	ds	1
  2267  000079                     ??_printf:
  2268  000079                     Event_DIPSwitch@pState:
  2269                           	opt stack 0
  2270  000079                     Event_TestButton@pState:
  2271                           	opt stack 0
  2272                           
  2273                           ; 1 bytes @ 0x19
  2274  000079                     	ds	1
  2275  00007A                     Event_DIPSwitch@Bar:
  2276                           	opt stack 0
  2277  00007A                     printf@flag:
  2278                           	opt stack 0
  2279  00007A                     ___flmul@sign:
  2280                           	opt stack 0
  2281  00007A                     Timer2_Init@DIVIDE:
  2282                           	opt stack 0
  2283                           
  2284                           ; 4 bytes @ 0x1A
  2285  00007A                     	ds	1
  2286  00007B                     printf@prec:
  2287                           	opt stack 0
  2288  00007B                     ___flmul@aexp:
  2289                           	opt stack 0
  2290  00007B                     Button_Poll@pButton:
  2291                           	opt stack 0
  2292  00007B                     Motor_Speed@pMotor:
  2293                           	opt stack 0
  2294                           
  2295                           ; 2 bytes @ 0x1B
  2296  00007B                     	ds	1
  2297  00007C                     ??_LCD_DrawField:
  2298  00007C                     printf@ap:
  2299                           	opt stack 0
  2300  00007C                     ___flmul@grs:
  2301                           	opt stack 0
  2302                           
  2303                           ; 4 bytes @ 0x1C
  2304  00007C                     	ds	1
  2305  00007D                     Button_Poll@pIncrement:
  2306                           	opt stack 0
  2307  00007D                     Motor_Speed@pFrequency:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x1D
  2311  00007D                     	ds	1
  2312  00007E                     ??_Button_Poll:
  2313  00007E                     LCD_DrawField@count:
  2314                           	opt stack 0
  2315  00007E                     printf@val:
  2316                           	opt stack 0
  2317                           
  2318                           ; 2 bytes @ 0x1E
  2319  00007E                     	ds	1
  2320  00007F                     
  2321                           ; 1 bytes @ 0x1F
  2322  00007F                     	ds	1
  2323  000080                     LCD_DrawField@xmax:
  2324                           	opt stack 0
  2325  000080                     printf@c:
  2326                           	opt stack 0
  2327  000080                     ___flmul@bexp:
  2328                           	opt stack 0
  2329                           
  2330                           ; 1 bytes @ 0x20
  2331  000080                     	ds	1
  2332  000081                     LCD_DrawField@ymax:
  2333                           	opt stack 0
  2334  000081                     ___flmul@prod:
  2335                           	opt stack 0
  2336                           
  2337                           ; 4 bytes @ 0x21
  2338  000081                     	ds	1
  2339  000082                     LCD_DrawField@i:
  2340                           	opt stack 0
  2341  000082                     Port_Set@TypeRequired:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x22
  2345  000082                     	ds	1
  2346  000083                     ??_Console_Render:
  2347  000083                     Button_Poll@Pin:
  2348                           	opt stack 0
  2349                           
  2350                           ; 1 bytes @ 0x23
  2351  000083                     	ds	1
  2352  000084                     Port_Set@TypeActual:
  2353                           	opt stack 0
  2354                           
  2355                           ; 2 bytes @ 0x24
  2356  000084                     	ds	1
  2357  000085                     PortProperty_Valid@Pair:
  2358                           	opt stack 0
  2359  000085                     Console_Render@temp:
  2360                           	opt stack 0
  2361  000085                     ___flmul@temp:
  2362                           	opt stack 0
  2363                           
  2364                           ; 2 bytes @ 0x25
  2365  000085                     	ds	1
  2366  000086                     Port_Set@Type:
  2367                           	opt stack 0
  2368  000086                     Port_CheckPairType@pInput:
  2369                           	opt stack 0
  2370  000086                     Port_SetPinType@pInput:
  2371                           	opt stack 0
  2372  000086                     Console_Render@lCursor:
  2373                           	opt stack 0
  2374                           
  2375                           ; 4 bytes @ 0x26
  2376  000086                     	ds	1
  2377  000087                     ?___fladd:
  2378                           	opt stack 0
  2379  000087                     ?_ADC_Voltage:
  2380                           	opt stack 0
  2381  000087                     ?___fltol:
  2382                           	opt stack 0
  2383  000087                     ADC_Voltage@pInput:
  2384                           	opt stack 0
  2385  000087                     ___fltol@f1:
  2386                           	opt stack 0
  2387  000087                     ___fladd@b:
  2388                           	opt stack 0
  2389                           
  2390                           ; 4 bytes @ 0x27
  2391  000087                     	ds	1
  2392  000088                     Port_CheckPairType@pPair:
  2393                           	opt stack 0
  2394  000088                     Port_SetPinType@pPin:
  2395                           	opt stack 0
  2396                           
  2397                           ; 1 bytes @ 0x28
  2398  000088                     	ds	1
  2399  000089                     Port_CheckPairType@pDrive:
  2400                           	opt stack 0
  2401  000089                     Port_SetPinType@pType:
  2402                           	opt stack 0
  2403                           
  2404                           ; 1 bytes @ 0x29
  2405  000089                     	ds	1
  2406  00008A                     Port_CheckPairType@Pin1:
  2407                           	opt stack 0
  2408  00008A                     Port_SetPinType@Output:
  2409                           	opt stack 0
  2410  00008A                     Console_Render@x:
  2411                           	opt stack 0
  2412                           
  2413                           ; 1 bytes @ 0x2A
  2414  00008A                     	ds	1
  2415  00008B                     ??_ADC_Voltage:
  2416  00008B                     ??___fltol:
  2417  00008B                     Port_CheckPairType@Pin2:
  2418                           	opt stack 0
  2419  00008B                     Console_Render@y:
  2420                           	opt stack 0
  2421  00008B                     Port_SetPinType@Props:
  2422                           	opt stack 0
  2423  00008B                     ___fladd@a:
  2424                           	opt stack 0
  2425                           
  2426                           ; 4 bytes @ 0x2B
  2427  00008B                     	ds	1
  2428  00008C                     Port_CheckPairType@Output:
  2429                           	opt stack 0
  2430                           
  2431                           ; 1 bytes @ 0x2C
  2432  00008C                     	ds	1
  2433  00008D                     LED_Init@pLED:
  2434                           	opt stack 0
  2435  00008D                     Port_CheckPairType@Props:
  2436                           	opt stack 0
  2437  00008D                     Motor_Init@pMotor:
  2438                           	opt stack 0
  2439  00008D                     SPI_Init@pClock:
  2440                           	opt stack 0
  2441  00008D                     ADC_Voltage@max:
  2442                           	opt stack 0
  2443                           
  2444                           ; 4 bytes @ 0x2D
  2445  00008D                     	ds	2
  2446  00008F                     ??___fladd:
  2447  00008F                     ___fltol@sign1:
  2448                           	opt stack 0
  2449  00008F                     Port_CheckQuadType@pInput:
  2450                           	opt stack 0
  2451  00008F                     Motor_Init@pAddress:
  2452                           	opt stack 0
  2453                           
  2454                           ; 2 bytes @ 0x2F
  2455  00008F                     	ds	1
  2456  000090                     ___fltol@exp1:
  2457                           	opt stack 0
  2458                           
  2459                           ; 1 bytes @ 0x30
  2460  000090                     	ds	1
  2461  000091                     Port_CheckQuadType@pQuad:
  2462                           	opt stack 0
  2463  000091                     SPI_Init@pChannel:
  2464                           	opt stack 0
  2465  000091                     ADC_Voltage@ref:
  2466                           	opt stack 0
  2467                           
  2468                           ; 4 bytes @ 0x31
  2469  000091                     	ds	1
  2470  000092                     Port_CheckQuadType@pDrive:
  2471                           	opt stack 0
  2472  000092                     SPI_Init@pMode:
  2473                           	opt stack 0
  2474                           
  2475                           ; 1 bytes @ 0x32
  2476  000092                     	ds	1
  2477  000093                     Port_CheckQuadType@Pair1:
  2478                           	opt stack 0
  2479  000093                     SPI_Init@pInput:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x33
  2483  000093                     	ds	1
  2484  000094                     Port_CheckQuadType@Pair2:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0x34
  2488  000094                     	ds	1
  2489  000095                     ??_LCD_Init:
  2490  000095                     Port_CheckQuadType@Output:
  2491                           	opt stack 0
  2492  000095                     ADC_Voltage@output:
  2493                           	opt stack 0
  2494                           
  2495                           ; 4 bytes @ 0x35
  2496  000095                     	ds	1
  2497  000096                     Port_CheckPortType@pInput:
  2498                           	opt stack 0
  2499  000096                     Port_SetQuadType@pInput:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0x36
  2503  000096                     	ds	1
  2504  000097                     ___fladd@signs:
  2505                           	opt stack 0
  2506  000097                     LCD_Init@i:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x37
  2510  000097                     	ds	1
  2511  000098                     Port_CheckPortType@pDrive:
  2512                           	opt stack 0
  2513  000098                     Port_SetQuadType@pQuad:
  2514                           	opt stack 0
  2515  000098                     ___fladd@aexp:
  2516                           	opt stack 0
  2517                           
  2518                           ; 1 bytes @ 0x38
  2519  000098                     	ds	1
  2520  000099                     Port_CheckPortType@Output:
  2521                           	opt stack 0
  2522  000099                     Port_SetQuadType@pType:
  2523                           	opt stack 0
  2524  000099                     ___fladd@bexp:
  2525                           	opt stack 0
  2526                           
  2527                           ; 1 bytes @ 0x39
  2528  000099                     	ds	1
  2529  00009A                     Port_SetQuadType@Output:
  2530                           	opt stack 0
  2531  00009A                     ___fladd@grs:
  2532                           	opt stack 0
  2533  00009A                     Port_SetType@pInput:
  2534                           	opt stack 0
  2535                           
  2536                           ; 2 bytes @ 0x3A
  2537  00009A                     	ds	1
  2538  00009B                     ?___flsub:
  2539                           	opt stack 0
  2540  00009B                     ?_floor:
  2541                           	opt stack 0
  2542  00009B                     ?_eval_poly:
  2543                           	opt stack 0
  2544  00009B                     Button_Init@pInput:
  2545                           	opt stack 0
  2546  00009B                     ___flsub@b:
  2547                           	opt stack 0
  2548  00009B                     floor@x:
  2549                           	opt stack 0
  2550  00009B                     eval_poly@x:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x3B
  2554  00009B                     	ds	1
  2555  00009C                     Port_SetType@pType:
  2556                           	opt stack 0
  2557                           
  2558                           ; 1 bytes @ 0x3C
  2559  00009C                     	ds	1
  2560  00009D                     ??_Port_SetType:
  2561  00009D                     Button_Init@pThreshold:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x3D
  2565  00009D                     	ds	2
  2566  00009F                     Port_SetType@Output:
  2567                           	opt stack 0
  2568  00009F                     eval_poly@d:
  2569                           	opt stack 0
  2570  00009F                     Button_Init@pInitIO:
  2571                           	opt stack 0
  2572  00009F                     ___flsub@a:
  2573                           	opt stack 0
  2574  00009F                     floor@i:
  2575                           	opt stack 0
  2576                           
  2577                           ; 4 bytes @ 0x3F
  2578  00009F                     	ds	1
  2579  0000A0                     Port_Init@pInput:
  2580                           	opt stack 0
  2581                           
  2582                           ; 2 bytes @ 0x40
  2583  0000A0                     	ds	1
  2584  0000A1                     eval_poly@n:
  2585                           	opt stack 0
  2586                           
  2587                           ; 2 bytes @ 0x41
  2588  0000A1                     	ds	1
  2589  0000A2                     Port_Init@pPort:
  2590                           	opt stack 0
  2591  0000A2                     Button_Init@pGetState:
  2592                           	opt stack 0
  2593                           
  2594                           ; 3 bytes @ 0x42
  2595  0000A2                     	ds	1
  2596  0000A3                     ??_eval_poly:
  2597  0000A3                     ??_Port_Init:
  2598  0000A3                     floor@expon:
  2599                           	opt stack 0
  2600                           
  2601                           ; 2 bytes @ 0x43
  2602  0000A3                     	ds	2
  2603  0000A5                     Port_Init@i:
  2604                           	opt stack 0
  2605  0000A5                     Button_Init@pFunction:
  2606                           	opt stack 0
  2607                           
  2608                           ; 3 bytes @ 0x45
  2609  0000A5                     	ds	1
  2610  0000A6                     
  2611                           ; 1 bytes @ 0x46
  2612  0000A6                     	ds	1
  2613  0000A7                     eval_poly@res:
  2614                           	opt stack 0
  2615                           
  2616                           ; 4 bytes @ 0x47
  2617  0000A7                     	ds	1
  2618  0000A8                     HMI_Init@in:
  2619                           	opt stack 0
  2620                           
  2621                           ; 2 bytes @ 0x48
  2622  0000A8                     	ds	3
  2623  0000AB                     ?_log:
  2624                           	opt stack 0
  2625  0000AB                     ?_ldexp:
  2626                           	opt stack 0
  2627  0000AB                     ldexp@value:
  2628                           	opt stack 0
  2629  0000AB                     log@x:
  2630                           	opt stack 0
  2631                           
  2632                           ; 4 bytes @ 0x4B
  2633  0000AB                     	ds	4
  2634  0000AF                     ldexp@newexp:
  2635                           	opt stack 0
  2636  0000AF                     log@exponent:
  2637                           	opt stack 0
  2638                           
  2639                           ; 2 bytes @ 0x4F
  2640  0000AF                     	ds	2
  2641  0000B1                     ??_ldexp:
  2642                           
  2643                           ; 1 bytes @ 0x51
  2644  0000B1                     	ds	2
  2645  0000B3                     ?_exp:
  2646                           	opt stack 0
  2647  0000B3                     exp@x:
  2648                           	opt stack 0
  2649                           
  2650                           ; 4 bytes @ 0x53
  2651  0000B3                     	ds	4
  2652  0000B7                     _exp$15165:
  2653                           	opt stack 0
  2654                           
  2655                           ; 4 bytes @ 0x57
  2656  0000B7                     	ds	4
  2657  0000BB                     exp@exponent:
  2658                           	opt stack 0
  2659                           
  2660                           ; 2 bytes @ 0x5B
  2661  0000BB                     	ds	2
  2662  0000BD                     exp@sign:
  2663                           	opt stack 0
  2664                           
  2665                           ; 1 bytes @ 0x5D
  2666  0000BD                     	ds	1
  2667  0000BE                     ?_pow:
  2668                           	opt stack 0
  2669  0000BE                     pow@x:
  2670                           	opt stack 0
  2671                           
  2672                           ; 4 bytes @ 0x5E
  2673  0000BE                     	ds	4
  2674  0000C2                     pow@y:
  2675                           	opt stack 0
  2676                           
  2677                           ; 4 bytes @ 0x62
  2678  0000C2                     	ds	4
  2679  0000C6                     _pow$15163:
  2680                           	opt stack 0
  2681                           
  2682                           ; 4 bytes @ 0x66
  2683  0000C6                     	ds	4
  2684  0000CA                     _pow$15164:
  2685                           	opt stack 0
  2686                           
  2687                           ; 4 bytes @ 0x6A
  2688  0000CA                     	ds	4
  2689  0000CE                     pow@sign:
  2690                           	opt stack 0
  2691                           
  2692                           ; 1 bytes @ 0x6E
  2693  0000CE                     	ds	1
  2694  0000CF                     pow@yi:
  2695                           	opt stack 0
  2696                           
  2697                           ; 4 bytes @ 0x6F
  2698  0000CF                     	ds	4
  2699  0000D3                     ??_main:
  2700                           
  2701                           ; 1 bytes @ 0x73
  2702  0000D3                     	ds	2
  2703                           tblptru	equ	0xFF8
  2704                           tblptrh	equ	0xFF7
  2705                           tblptrl	equ	0xFF6
  2706                           tablat	equ	0xFF5
  2707                           postinc0	equ	0xFEE
  2708                           wreg	equ	0xFE8
  2709                           postdec1	equ	0xFE5
  2710                           fsr1h	equ	0xFE2
  2711                           fsr1l	equ	0xFE1
  2712                           
  2713                           	psect	cstackCOMRAM
  2714  000001                     __pcstackCOMRAM:
  2715                           	opt stack 0
  2716  000001                     i2Byte_SetBit@pInput:
  2717                           	opt stack 0
  2718  000001                     i2Byte_GetZone@pInput:
  2719                           	opt stack 0
  2720  000001                     i2delay_us@us:
  2721                           	opt stack 0
  2722  000001                     i2MXK_Queue@pCallback:
  2723                           	opt stack 0
  2724                           
  2725                           ; 3 bytes @ 0x0
  2726  000001                     	ds	2
  2727  000003                     i2Byte_SetBit@pBit:
  2728                           	opt stack 0
  2729  000003                     i2Byte_GetZone@pMax:
  2730                           	opt stack 0
  2731  000003                     i2delay_us@u:
  2732                           	opt stack 0
  2733                           
  2734                           ; 4 bytes @ 0x2
  2735  000003                     	ds	1
  2736  000004                     i2Byte_SetBit@pValue:
  2737                           	opt stack 0
  2738  000004                     i2Byte_GetZone@pChunk:
  2739                           	opt stack 0
  2740                           
  2741                           ; 1 bytes @ 0x3
  2742  000004                     	ds	1
  2743  000005                     ??i2_Byte_SetBit:
  2744  000005                     i2Byte_GetZone@pChunkSize:
  2745                           	opt stack 0
  2746                           
  2747                           ; 1 bytes @ 0x4
  2748  000005                     	ds	1
  2749  000006                     ??i2_Byte_GetZone:
  2750                           
  2751                           ; 1 bytes @ 0x5
  2752  000006                     	ds	1
  2753  000007                     i2Byte_GetZone@MASK:
  2754                           	opt stack 0
  2755  000007                     i2MXK_SwitchTo@CUR:
  2756                           	opt stack 0
  2757                           
  2758                           ; 1 bytes @ 0x6
  2759  000007                     	ds	1
  2760  000008                     i2Byte_GetZone@Offset:
  2761                           	opt stack 0
  2762  000008                     i2MXK_SwitchTo@pModule:
  2763                           	opt stack 0
  2764                           
  2765                           ; 1 bytes @ 0x7
  2766  000008                     	ds	1
  2767  000009                     i2Byte_GetZone@Output:
  2768                           	opt stack 0
  2769                           
  2770                           ; 1 bytes @ 0x8
  2771  000009                     	ds	1
  2772  00000A                     i2Byte_GetPair@pInput:
  2773                           	opt stack 0
  2774                           
  2775                           ; 2 bytes @ 0x9
  2776  00000A                     	ds	2
  2777  00000C                     i2Byte_GetPair@pPair:
  2778                           	opt stack 0
  2779                           
  2780                           ; 1 bytes @ 0xB
  2781  00000C                     	ds	1
  2782  00000D                     i2Word_GetPair@pInput:
  2783                           	opt stack 0
  2784                           
  2785                           ; 2 bytes @ 0xC
  2786  00000D                     	ds	2
  2787  00000F                     i2Word_GetPair@pPair:
  2788                           	opt stack 0
  2789                           
  2790                           ; 1 bytes @ 0xE
  2791  00000F                     	ds	1
  2792  000010                     i2Port_SetPin@pInput:
  2793                           	opt stack 0
  2794                           
  2795                           ; 2 bytes @ 0xF
  2796  000010                     	ds	2
  2797  000012                     i2Port_SetPin@pPin:
  2798                           	opt stack 0
  2799                           
  2800                           ; 1 bytes @ 0x11
  2801  000012                     	ds	1
  2802  000013                     i2Port_SetPin@pValue:
  2803                           	opt stack 0
  2804                           
  2805                           ; 1 bytes @ 0x12
  2806  000013                     	ds	1
  2807  000014                     i2Port_SetPin@Type:
  2808                           	opt stack 0
  2809                           
  2810                           ; 1 bytes @ 0x13
  2811  000014                     	ds	1
  2812  000015                     
  2813                           ; 1 bytes @ 0x14
  2814  000015                     	ds	2
  2815  000017                     ??_ISR_Function:
  2816                           
  2817                           ; 1 bytes @ 0x16
  2818  000017                     	ds	18
  2819                           tblptru	equ	0xFF8
  2820                           tblptrh	equ	0xFF7
  2821                           tblptrl	equ	0xFF6
  2822                           tablat	equ	0xFF5
  2823                           postinc0	equ	0xFEE
  2824                           wreg	equ	0xFE8
  2825                           postdec1	equ	0xFE5
  2826                           fsr1h	equ	0xFE2
  2827                           fsr1l	equ	0xFE1
  2828                           
  2829 ;;
  2830 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2831 ;;
  2832 ;; *************** function _main *****************
  2833 ;; Defined at:
  2834 ;;		line 27 in file "main.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  movetoPos       2    2[BANK2 ] int 
  2839 ;;  rotation        2    0[BANK2 ] int 
  2840 ;;  ADCVoltage      4    4[BANK2 ] float 
  2841 ;;  IRDistance      2   12[BANK2 ] int 
  2842 ;;  DipValue        2   19[BANK2 ] int 
  2843 ;;  DownValue       1   21[BANK2 ] unsigned char 
  2844 ;;  RightValue      1   16[BANK2 ] unsigned char 
  2845 ;;  LeftValue       1   15[BANK2 ] unsigned char 
  2846 ;;  UpValue         1   14[BANK2 ] unsigned char 
  2847 ;;  Stepper         6   27[BANK2 ] struct Motor
  2848 ;;  Steps           2   25[BANK2 ] int 
  2849 ;;  Speed           2   23[BANK2 ] int 
  2850 ;;  Direction       2   17[BANK2 ] int 
  2851 ;;  lockedMode      1   22[BANK2 ] unsigned char 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2862 ;;      Locals:         0       0       0      33       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2864 ;;      Totals:         0       2       0      33       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2865 ;;Total ram usage:       35 bytes
  2866 ;; Hardware stack levels required when called:   17
  2867 ;; This function calls:
  2868 ;;		_ADC_Voltage
  2869 ;;		_Console_Init
  2870 ;;		_Console_Render
  2871 ;;		_FunctADC
  2872 ;;		_FunctInitADC
  2873 ;;		_FunctInitButton
  2874 ;;		_HMI_DIPSwitch
  2875 ;;		_HMI_DownSwitch
  2876 ;;		_HMI_Init
  2877 ;;		_HMI_LeftSwitch
  2878 ;;		_HMI_Poll
  2879 ;;		_HMI_Render
  2880 ;;		_HMI_RightSwitch
  2881 ;;		_HMI_SetNumber
  2882 ;;		_HMI_UpSwitch
  2883 ;;		_ISR_Enable
  2884 ;;		_LCD_Init
  2885 ;;		_MXK_BlockSwitchTo
  2886 ;;		_MXK_DIPSwitch
  2887 ;;		_MXK_Dequeue
  2888 ;;		_MXK_Init
  2889 ;;		_MXK_Release
  2890 ;;		_MXK_TestButton
  2891 ;;		_Motor_Init
  2892 ;;		_Motor_Move
  2893 ;;		_Motor_Speed
  2894 ;;		___flmul
  2895 ;;		___fltol
  2896 ;;		___wmul
  2897 ;;		_pow
  2898 ;;		_printf
  2899 ;; This function is called by:
  2900 ;;		Startup code after reset
  2901 ;; This function uses a non-reentrant model
  2902 ;;
  2903                           
  2904                           	psect	text0
  2905  010000                     __ptext0:
  2906                           	opt stack 0
  2907  010000                     _main:
  2908                           	opt stack 14
  2909                           
  2910                           ;main.c: 30: MXK_Init();
  2911                           
  2912                           ;incstack = 0
  2913  010000  EC78  F09A         	call	_MXK_Init	;wreg free
  2914                           
  2915                           ;main.c: 32: bool lockedMode = 1;
  2916  010004  0E01               	movlw	1
  2917  010006  0102               	movlb	2	; () banked
  2918  010008  6F7A               	movwf	main@lockedMode& (0+255),b
  2919                           
  2920                           ; BSR set to: 2
  2921                           ;main.c: 34: int Direction = 200;
  2922  01000A  0E00               	movlw	0
  2923  01000C  0102               	movlb	2	; () banked
  2924  01000E  6F76               	movwf	(main@Direction+1)& (0+255),b
  2925  010010  0EC8               	movlw	200
  2926  010012  6F75               	movwf	main@Direction& (0+255),b
  2927                           
  2928                           ; BSR set to: 2
  2929                           ;main.c: 35: int Speed = 0;
  2930  010014  0E00               	movlw	0
  2931  010016  0102               	movlb	2	; () banked
  2932  010018  6F7C               	movwf	(main@Speed+1)& (0+255),b
  2933  01001A  0E00               	movlw	0
  2934  01001C  6F7B               	movwf	main@Speed& (0+255),b
  2935                           
  2936                           ; BSR set to: 2
  2937                           ;main.c: 37: int Steps = 0;
  2938  01001E  0E00               	movlw	0
  2939  010020  0102               	movlb	2	; () banked
  2940  010022  6F7E               	movwf	(main@Steps+1)& (0+255),b
  2941  010024  0E00               	movlw	0
  2942  010026  6F7D               	movwf	main@Steps& (0+255),b
  2943                           
  2944                           ; BSR set to: 2
  2945                           ;main.c: 43: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2946  010028  0E01               	movlw	1
  2947  01002A  ECE0  F0B1         	call	_MXK_BlockSwitchTo
  2948  01002E  0900               	iorlw	0
  2949  010030  B4D8               	btfsc	status,2,c
  2950  010032  D00C               	goto	l2004
  2951                           
  2952                           ;main.c: 44: HMI_Init();
  2953  010034  ECC6  F093         	call	_HMI_Init	;wreg free
  2954                           
  2955                           ;main.c: 45: LCD_Init();
  2956  010038  EC38  F09B         	call	_LCD_Init	;wreg free
  2957                           
  2958                           ;main.c: 46: Console_Init();
  2959  01003C  ECA7  F0AA         	call	_Console_Init	;wreg free
  2960                           
  2961                           ;main.c: 47: if (MXK_Release())
  2962  010040  EC5F  F0B4         	call	_MXK_Release	;wreg free
  2963  010044  0900               	iorlw	0
  2964  010046  A4D8               	btfss	status,2,c
  2965                           
  2966                           ;main.c: 48: MXK_Dequeue();
  2967  010048  ECC1  F0B1         	call	_MXK_Dequeue	;wreg free
  2968  01004C                     l2004:
  2969                           
  2970                           ;main.c: 49: }
  2971                           ;main.c: 52: Motor Stepper;
  2972                           ;main.c: 53: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  2973  01004C  0E08               	movlw	8
  2974  01004E  ECE0  F0B1         	call	_MXK_BlockSwitchTo
  2975  010052  0900               	iorlw	0
  2976  010054  B4D8               	btfsc	status,2,c
  2977  010056  D013               	goto	l2006
  2978                           
  2979                           ;main.c: 54: Motor_Init(&Stepper,0b1000);
  2980  010058  0E7F               	movlw	low main@Stepper
  2981  01005A  0100               	movlb	0	; () banked
  2982  01005C  6F8D               	movwf	Motor_Init@pMotor& (0+255),b
  2983  01005E  0E02               	movlw	high main@Stepper
  2984  010060  0100               	movlb	0	; () banked
  2985  010062  6F8E               	movwf	(Motor_Init@pMotor+1)& (0+255),b
  2986  010064  0E00               	movlw	0
  2987  010066  0100               	movlb	0	; () banked
  2988  010068  6F90               	movwf	(Motor_Init@pAddress+1)& (0+255),b
  2989  01006A  0E08               	movlw	8
  2990  01006C  6F8F               	movwf	Motor_Init@pAddress& (0+255),b
  2991  01006E  EC25  F0A2         	call	_Motor_Init	;wreg free
  2992                           
  2993                           ;main.c: 55: if (MXK_Release())
  2994  010072  EC5F  F0B4         	call	_MXK_Release	;wreg free
  2995  010076  0900               	iorlw	0
  2996  010078  A4D8               	btfss	status,2,c
  2997                           
  2998                           ;main.c: 56: MXK_Dequeue();
  2999  01007A  ECC1  F0B1         	call	_MXK_Dequeue	;wreg free
  3000  01007E                     l2006:
  3001                           
  3002                           ;main.c: 57: }
  3003                           ;main.c: 62: ISR_Enable();
  3004  01007E  EC31  F0B5         	call	_ISR_Enable	;wreg free
  3005                           
  3006                           ;main.c: 63: extern ADC ADC_AN0;
  3007                           ;main.c: 64: FunctInitADC();
  3008  010082  ECF5  F0A5         	call	_FunctInitADC	;wreg free
  3009                           
  3010                           ;main.c: 65: FunctInitButton();
  3011  010086  ECE8  F0A8         	call	_FunctInitButton	;wreg free
  3012  01008A                     
  3013                           ;main.c: 68: {
  3014                           ;main.c: 72: FunctADC();
  3015  01008A  ECE6  F0B4         	call	_FunctADC	;wreg free
  3016                           
  3017                           ;main.c: 73: HMI_Poll();
  3018  01008E  EC9B  F0AC         	call	_HMI_Poll	;wreg free
  3019                           
  3020                           ;main.c: 74: int DipValue = DIPSwitch.mGetState();
  3021  010092  EE21  F075         	lfsr	2,_DIPSwitch+7
  3022  010096  D801               	call	u13818
  3023  010098  D00A               	goto	u13819
  3024  01009A                     u13818:
  3025  01009A  0005               	push	
  3026  01009C  6EFA               	movwf	pclath,c
  3027  01009E  50DE               	movf	postinc2,w,c
  3028  0100A0  6EFD               	movwf	tosl,c
  3029  0100A2  50DE               	movf	postinc2,w,c
  3030  0100A4  6EFE               	movwf	tosh,c
  3031  0100A6  50DE               	movf	postinc2,w,c
  3032  0100A8  6EFF               	movwf	tosu,c
  3033  0100AA  50FA               	movf	pclath,w,c
  3034  0100AC  0012               	return		;indir
  3035  0100AE                     u13819:
  3036  0100AE  0100               	movlb	0	; () banked
  3037  0100B0  6FD3               	movwf	??_main& (0+255),b
  3038  0100B2  0100               	movlb	0	; () banked
  3039  0100B4  51D3               	movf	??_main& (0+255),w,b
  3040  0100B6  0102               	movlb	2	; () banked
  3041  0100B8  6F77               	movwf	main@DipValue& (0+255),b
  3042  0100BA  6B78               	clrf	(main@DipValue+1)& (0+255),b
  3043                           
  3044                           ; BSR set to: 2
  3045                           ;main.c: 75: bool UpValue = HMIBoard.mUp.mGetState();
  3046  0100BC  EE21  F041         	lfsr	2,_HMIBoard+35
  3047  0100C0  D801               	call	u13828
  3048  0100C2  D00A               	goto	u13829
  3049  0100C4                     u13828:
  3050  0100C4  0005               	push	
  3051  0100C6  6EFA               	movwf	pclath,c
  3052  0100C8  50DE               	movf	postinc2,w,c
  3053  0100CA  6EFD               	movwf	tosl,c
  3054  0100CC  50DE               	movf	postinc2,w,c
  3055  0100CE  6EFE               	movwf	tosh,c
  3056  0100D0  50DE               	movf	postinc2,w,c
  3057  0100D2  6EFF               	movwf	tosu,c
  3058  0100D4  50FA               	movf	pclath,w,c
  3059  0100D6  0012               	return		;indir
  3060  0100D8                     u13829:
  3061  0100D8  0102               	movlb	2	; () banked
  3062  0100DA  6F72               	movwf	main@UpValue& (0+255),b
  3063                           
  3064                           ; BSR set to: 2
  3065                           ;main.c: 76: bool DownValue = HMIBoard.mDown.mGetState();
  3066  0100DC  EE21  F04B         	lfsr	2,_HMIBoard+45
  3067  0100E0  D801               	call	u13838
  3068  0100E2  D00A               	goto	u13839
  3069  0100E4                     u13838:
  3070  0100E4  0005               	push	
  3071  0100E6  6EFA               	movwf	pclath,c
  3072  0100E8  50DE               	movf	postinc2,w,c
  3073  0100EA  6EFD               	movwf	tosl,c
  3074  0100EC  50DE               	movf	postinc2,w,c
  3075  0100EE  6EFE               	movwf	tosh,c
  3076  0100F0  50DE               	movf	postinc2,w,c
  3077  0100F2  6EFF               	movwf	tosu,c
  3078  0100F4  50FA               	movf	pclath,w,c
  3079  0100F6  0012               	return		;indir
  3080  0100F8                     u13839:
  3081  0100F8  0102               	movlb	2	; () banked
  3082  0100FA  6F79               	movwf	main@DownValue& (0+255),b
  3083                           
  3084                           ; BSR set to: 2
  3085                           ;main.c: 77: bool LeftValue = HMIBoard.mLeft.mGetState();
  3086  0100FC  EE21  F037         	lfsr	2,_HMIBoard+25
  3087  010100  D801               	call	u13848
  3088  010102  D00A               	goto	u13849
  3089  010104                     u13848:
  3090  010104  0005               	push	
  3091  010106  6EFA               	movwf	pclath,c
  3092  010108  50DE               	movf	postinc2,w,c
  3093  01010A  6EFD               	movwf	tosl,c
  3094  01010C  50DE               	movf	postinc2,w,c
  3095  01010E  6EFE               	movwf	tosh,c
  3096  010110  50DE               	movf	postinc2,w,c
  3097  010112  6EFF               	movwf	tosu,c
  3098  010114  50FA               	movf	pclath,w,c
  3099  010116  0012               	return		;indir
  3100  010118                     u13849:
  3101  010118  0102               	movlb	2	; () banked
  3102  01011A  6F73               	movwf	main@LeftValue& (0+255),b
  3103                           
  3104                           ; BSR set to: 2
  3105                           ;main.c: 78: bool RightValue = HMIBoard.mRight.mGetState();
  3106  01011C  EE21  F02D         	lfsr	2,_HMIBoard+15
  3107  010120  D801               	call	u13858
  3108  010122  D00A               	goto	u13859
  3109  010124                     u13858:
  3110  010124  0005               	push	
  3111  010126  6EFA               	movwf	pclath,c
  3112  010128  50DE               	movf	postinc2,w,c
  3113  01012A  6EFD               	movwf	tosl,c
  3114  01012C  50DE               	movf	postinc2,w,c
  3115  01012E  6EFE               	movwf	tosh,c
  3116  010130  50DE               	movf	postinc2,w,c
  3117  010132  6EFF               	movwf	tosu,c
  3118  010134  50FA               	movf	pclath,w,c
  3119  010136  0012               	return		;indir
  3120  010138                     u13859:
  3121  010138  0102               	movlb	2	; () banked
  3122  01013A  6F74               	movwf	main@RightValue& (0+255),b
  3123                           
  3124                           ; BSR set to: 2
  3125                           ;main.c: 82: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  3126  01013C  0E01               	movlw	1
  3127  01013E  ECE0  F0B1         	call	_MXK_BlockSwitchTo
  3128  010142  0900               	iorlw	0
  3129  010144  B4D8               	btfsc	status,2,c
  3130  010146  D14C               	goto	l2033
  3131                           
  3132                           ;main.c: 83: printf("%c",(char)35);
  3133  010148  0EFB               	movlw	low STR_1
  3134  01014A  0100               	movlb	0	; () banked
  3135  01014C  6F75               	movwf	printf@f& (0+255),b
  3136  01014E  0EFF               	movlw	high STR_1
  3137  010150  0100               	movlb	0	; () banked
  3138  010152  6F76               	movwf	(printf@f+1)& (0+255),b
  3139  010154  0E00               	movlw	0
  3140  010156  0100               	movlb	0	; () banked
  3141  010158  6F78               	movwf	(?_printf+3)& (0+255),b
  3142  01015A  0E23               	movlw	35
  3143  01015C  6F77               	movwf	(?_printf+2)& (0+255),b
  3144  01015E  EC59  F097         	call	_printf	;wreg free
  3145                           
  3146                           ;main.c: 84: printf("Matt Woods\n9914517\nAssignment1\n\n");
  3147  010162  0E5D               	movlw	low STR_2
  3148  010164  0100               	movlb	0	; () banked
  3149  010166  6F75               	movwf	printf@f& (0+255),b
  3150  010168  0EFF               	movlw	high STR_2
  3151  01016A  0100               	movlb	0	; () banked
  3152  01016C  6F76               	movwf	(printf@f+1)& (0+255),b
  3153  01016E  EC59  F097         	call	_printf	;wreg free
  3154                           
  3155                           ;main.c: 87: printf("DIP Switches: %d\n",DipValue);
  3156  010172  0EA4               	movlw	low STR_3
  3157  010174  0100               	movlb	0	; () banked
  3158  010176  6F75               	movwf	printf@f& (0+255),b
  3159  010178  0EFF               	movlw	high STR_3
  3160  01017A  0100               	movlb	0	; () banked
  3161  01017C  6F76               	movwf	(printf@f+1)& (0+255),b
  3162  01017E  C277  F077         	movff	main@DipValue,?_printf+2
  3163  010182  C278  F078         	movff	main@DipValue+1,?_printf+3
  3164  010186  EC59  F097         	call	_printf	;wreg free
  3165                           
  3166                           ;main.c: 88: switch (DipValue){
  3167  01018A  D0B9               	goto	l2011
  3168  01018C                     
  3169                           ;main.c: 90: printf("Continuous Mode:\n");
  3170  01018C  0E92               	movlw	low STR_4
  3171  01018E  0100               	movlb	0	; () banked
  3172  010190  6F75               	movwf	printf@f& (0+255),b
  3173  010192  0EFF               	movlw	high STR_4
  3174  010194  0100               	movlb	0	; () banked
  3175  010196  6F76               	movwf	(printf@f+1)& (0+255),b
  3176  010198  EC59  F097         	call	_printf	;wreg free
  3177                           
  3178                           ;main.c: 91: printf("Direction: ");
  3179  01019C  0EEA               	movlw	low STR_5
  3180  01019E  0100               	movlb	0	; () banked
  3181  0101A0  6F75               	movwf	printf@f& (0+255),b
  3182  0101A2  0EFF               	movlw	high STR_5
  3183  0101A4  0100               	movlb	0	; () banked
  3184  0101A6  6F76               	movwf	(printf@f+1)& (0+255),b
  3185  0101A8  EC59  F097         	call	_printf	;wreg free
  3186                           
  3187                           ;main.c: 92: if(Direction>0){
  3188  0101AC  0102               	movlb	2	; () banked
  3189  0101AE  BF76               	btfsc	(main@Direction+1)& (0+255),7,b
  3190  0101B0  D010               	goto	l2013
  3191  0101B2  0102               	movlb	2	; () banked
  3192  0101B4  5176               	movf	(main@Direction+1)& (0+255),w,b
  3193  0101B6  E104               	bnz	u13870
  3194  0101B8  0102               	movlb	2	; () banked
  3195  0101BA  0575               	decf	main@Direction& (0+255),w,b
  3196  0101BC  A0D8               	btfss	status,0,c
  3197  0101BE  D009               	goto	l2013
  3198  0101C0                     u13870:
  3199                           
  3200                           ; BSR set to: 2
  3201                           ;main.c: 93: printf("CCW\n");
  3202  0101C0  0EF6               	movlw	low STR_6
  3203  0101C2  0100               	movlb	0	; () banked
  3204  0101C4  6F75               	movwf	printf@f& (0+255),b
  3205  0101C6  0EFF               	movlw	high STR_6
  3206  0101C8  0100               	movlb	0	; () banked
  3207  0101CA  6F76               	movwf	(printf@f+1)& (0+255),b
  3208  0101CC  EC59  F097         	call	_printf	;wreg free
  3209                           
  3210                           ;main.c: 94: }else{
  3211  0101D0  D008               	goto	l2014
  3212  0101D2                     l2013:
  3213                           
  3214                           ;main.c: 95: printf("CW\n");
  3215  0101D2  0EF7               	movlw	low (STR_6+1)
  3216  0101D4  0100               	movlb	0	; () banked
  3217  0101D6  6F75               	movwf	printf@f& (0+255),b
  3218  0101D8  0EFF               	movlw	high (STR_6+1)
  3219  0101DA  0100               	movlb	0	; () banked
  3220  0101DC  6F76               	movwf	(printf@f+1)& (0+255),b
  3221  0101DE  EC59  F097         	call	_printf	;wreg free
  3222  0101E2                     l2014:
  3223                           
  3224                           ;main.c: 96: }
  3225                           ;main.c: 97: printf("Speed: %dHz\n",Speed);
  3226  0101E2  0EC5               	movlw	low STR_8
  3227  0101E4  0100               	movlb	0	; () banked
  3228  0101E6  6F75               	movwf	printf@f& (0+255),b
  3229  0101E8  0EFF               	movlw	high STR_8
  3230  0101EA  0100               	movlb	0	; () banked
  3231  0101EC  6F76               	movwf	(printf@f+1)& (0+255),b
  3232  0101EE  C27B  F077         	movff	main@Speed,?_printf+2
  3233  0101F2  C27C  F078         	movff	main@Speed+1,?_printf+3
  3234  0101F6  EC59  F097         	call	_printf	;wreg free
  3235                           
  3236                           ;main.c: 98: if(LeftValue){
  3237  0101FA  0102               	movlb	2	; () banked
  3238  0101FC  5173               	movf	main@LeftValue& (0+255),w,b
  3239  0101FE  0102               	movlb	2	; () banked
  3240  010200  B4D8               	btfsc	status,2,c
  3241  010202  D005               	goto	l2015
  3242                           
  3243                           ; BSR set to: 2
  3244                           ;main.c: 99: Direction = -200;
  3245  010204  0EFF               	movlw	255
  3246  010206  0102               	movlb	2	; () banked
  3247  010208  6F76               	movwf	(main@Direction+1)& (0+255),b
  3248  01020A  0E38               	movlw	56
  3249  01020C  D009               	goto	L1
  3250  01020E                     l2015:
  3251                           
  3252                           ; BSR set to: 2
  3253                           
  3254                           ; BSR set to: 2
  3255  01020E  0102               	movlb	2	; () banked
  3256  010210  5174               	movf	main@RightValue& (0+255),w,b
  3257  010212  0102               	movlb	2	; () banked
  3258  010214  B4D8               	btfsc	status,2,c
  3259  010216  D006               	goto	l2017
  3260                           
  3261                           ; BSR set to: 2
  3262                           ;main.c: 101: Direction = 200;
  3263  010218  0E00               	movlw	0
  3264  01021A  0102               	movlb	2	; () banked
  3265  01021C  6F76               	movwf	(main@Direction+1)& (0+255),b
  3266  01021E  0EC8               	movlw	200
  3267  010220                     L1:
  3268  010220  6F75               	movwf	main@Direction& (0+255),b
  3269                           
  3270                           ;main.c: 102: }else if(UpValue){
  3271  010222  D082               	goto	l2022
  3272  010224                     l2017:
  3273                           
  3274                           ; BSR set to: 2
  3275                           
  3276                           ; BSR set to: 2
  3277  010224  0102               	movlb	2	; () banked
  3278  010226  5172               	movf	main@UpValue& (0+255),w,b
  3279  010228  0102               	movlb	2	; () banked
  3280  01022A  B4D8               	btfsc	status,2,c
  3281  01022C  D004               	goto	l2019
  3282                           
  3283                           ; BSR set to: 2
  3284                           ;main.c: 103: Speed++;
  3285  01022E  0102               	movlb	2	; () banked
  3286  010230  4B7B               	infsnz	main@Speed& (0+255),f,b
  3287  010232  2B7C               	incf	(main@Speed+1)& (0+255),f,b
  3288                           
  3289                           ;main.c: 104: }else if (DownValue && Speed>0){
  3290  010234  D079               	goto	l2022
  3291  010236                     l2019:
  3292                           
  3293                           ; BSR set to: 2
  3294                           
  3295                           ; BSR set to: 2
  3296  010236  0102               	movlb	2	; () banked
  3297  010238  5179               	movf	main@DownValue& (0+255),w,b
  3298  01023A  0102               	movlb	2	; () banked
  3299  01023C  B4D8               	btfsc	status,2,c
  3300  01023E  D074               	goto	l2022
  3301                           
  3302                           ; BSR set to: 2
  3303  010240  0102               	movlb	2	; () banked
  3304  010242  BF7C               	btfsc	(main@Speed+1)& (0+255),7,b
  3305  010244  D071               	goto	l2022
  3306  010246  0102               	movlb	2	; () banked
  3307  010248  517C               	movf	(main@Speed+1)& (0+255),w,b
  3308  01024A  E104               	bnz	u13920
  3309  01024C  0102               	movlb	2	; () banked
  3310  01024E  057B               	decf	main@Speed& (0+255),w,b
  3311  010250  A0D8               	btfss	status,0,c
  3312  010252  D06A               	goto	l2022
  3313  010254                     u13920:
  3314                           
  3315                           ; BSR set to: 2
  3316                           ;main.c: 105: Speed--;
  3317  010254  0102               	movlb	2	; () banked
  3318  010256  077B               	decf	main@Speed& (0+255),f,b
  3319  010258  A0D8               	btfss	status,0,c
  3320  01025A  077C               	decf	(main@Speed+1)& (0+255),f,b
  3321                           
  3322                           ; BSR set to: 2
  3323                           ;main.c: 106: }
  3324                           ;main.c: 107: break;
  3325                           
  3326                           ; BSR set to: 2
  3327                           
  3328                           ; BSR set to: 2
  3329                           
  3330                           ; BSR set to: 2
  3331  01025C  D065               	goto	l2022
  3332  01025E                     
  3333                           ;main.c: 109: printf("Step Mode:\n");
  3334                           
  3335                           ; BSR set to: 2
  3336  01025E  0EDE               	movlw	low STR_9
  3337  010260  0100               	movlb	0	; () banked
  3338  010262  6F75               	movwf	printf@f& (0+255),b
  3339  010264  0EFF               	movlw	high STR_9
  3340  010266  0100               	movlb	0	; () banked
  3341  010268  6F76               	movwf	(printf@f+1)& (0+255),b
  3342  01026A  EC59  F097         	call	_printf	;wreg free
  3343                           
  3344                           ;main.c: 110: printf("Steps: %d\n\n",Steps);
  3345  01026E  0ED2               	movlw	low STR_10
  3346  010270  0100               	movlb	0	; () banked
  3347  010272  6F75               	movwf	printf@f& (0+255),b
  3348  010274  0EFF               	movlw	high STR_10
  3349  010276  0100               	movlb	0	; () banked
  3350  010278  6F76               	movwf	(printf@f+1)& (0+255),b
  3351  01027A  C27D  F077         	movff	main@Steps,?_printf+2
  3352  01027E  C27E  F078         	movff	main@Steps+1,?_printf+3
  3353  010282  EC59  F097         	call	_printf	;wreg free
  3354                           
  3355                           ;main.c: 111: if(LeftValue == 1 && Steps > 0){
  3356  010286  0102               	movlb	2	; () banked
  3357  010288  0573               	decf	main@LeftValue& (0+255),w,b
  3358  01028A  A4D8               	btfss	status,2,c
  3359  01028C  D00F               	goto	l2024
  3360                           
  3361                           ; BSR set to: 2
  3362  01028E  0102               	movlb	2	; () banked
  3363  010290  BF7E               	btfsc	(main@Steps+1)& (0+255),7,b
  3364  010292  D00C               	goto	l2024
  3365  010294  0102               	movlb	2	; () banked
  3366  010296  517E               	movf	(main@Steps+1)& (0+255),w,b
  3367  010298  E104               	bnz	u13940
  3368  01029A  0102               	movlb	2	; () banked
  3369  01029C  057D               	decf	main@Steps& (0+255),w,b
  3370  01029E  A0D8               	btfss	status,0,c
  3371  0102A0  D005               	goto	l2024
  3372  0102A2                     u13940:
  3373                           
  3374                           ; BSR set to: 2
  3375                           ;main.c: 112: Steps--;
  3376  0102A2  0102               	movlb	2	; () banked
  3377  0102A4  077D               	decf	main@Steps& (0+255),f,b
  3378  0102A6  A0D8               	btfss	status,0,c
  3379  0102A8  077E               	decf	(main@Steps+1)& (0+255),f,b
  3380                           
  3381                           ;main.c: 113: }else if(RightValue){
  3382  0102AA  D03E               	goto	l2022
  3383  0102AC                     l2024:
  3384                           
  3385                           ; BSR set to: 2
  3386                           
  3387                           ; BSR set to: 2
  3388  0102AC  0102               	movlb	2	; () banked
  3389  0102AE  5174               	movf	main@RightValue& (0+255),w,b
  3390  0102B0  0102               	movlb	2	; () banked
  3391  0102B2  B4D8               	btfsc	status,2,c
  3392  0102B4  D004               	goto	l2026
  3393                           
  3394                           ; BSR set to: 2
  3395                           ;main.c: 114: Steps++;
  3396  0102B6  0102               	movlb	2	; () banked
  3397  0102B8  4B7D               	infsnz	main@Steps& (0+255),f,b
  3398  0102BA  2B7E               	incf	(main@Steps+1)& (0+255),f,b
  3399                           
  3400                           ;main.c: 115: }else if(UpValue){
  3401  0102BC  D035               	goto	l2022
  3402  0102BE                     l2026:
  3403                           
  3404                           ; BSR set to: 2
  3405                           
  3406                           ; BSR set to: 2
  3407  0102BE  0102               	movlb	2	; () banked
  3408  0102C0  5172               	movf	main@UpValue& (0+255),w,b
  3409  0102C2  0102               	movlb	2	; () banked
  3410  0102C4  B4D8               	btfsc	status,2,c
  3411  0102C6  D030               	goto	l2022
  3412                           
  3413                           ; BSR set to: 2
  3414                           ;main.c: 116: Steps=0;
  3415  0102C8  0E00               	movlw	0
  3416  0102CA  0102               	movlb	2	; () banked
  3417  0102CC  6F7E               	movwf	(main@Steps+1)& (0+255),b
  3418  0102CE  0E00               	movlw	0
  3419  0102D0  6F7D               	movwf	main@Steps& (0+255),b
  3420                           
  3421                           ; BSR set to: 2
  3422                           ;main.c: 119: }
  3423                           ;main.c: 120: break;
  3424                           
  3425                           ; BSR set to: 2
  3426                           
  3427                           ; BSR set to: 2
  3428                           
  3429                           ; BSR set to: 2
  3430                           
  3431                           ; BSR set to: 2
  3432                           
  3433                           ; BSR set to: 2
  3434                           
  3435                           ;main.c: 117: }else if (DownValue){
  3436  0102D2  D02A               	goto	l2022
  3437  0102D4                     
  3438                           ;main.c: 122: printf("Position Mode\n");
  3439                           
  3440                           ; BSR set to: 2
  3441  0102D4  0EB6               	movlw	low STR_11
  3442  0102D6  0100               	movlb	0	; () banked
  3443  0102D8  6F75               	movwf	printf@f& (0+255),b
  3444  0102DA  0EFF               	movlw	high STR_11
  3445  0102DC  0100               	movlb	0	; () banked
  3446  0102DE  6F76               	movwf	(printf@f+1)& (0+255),b
  3447  0102E0  EC59  F097         	call	_printf	;wreg free
  3448                           
  3449                           ;main.c: 124: break;
  3450  0102E4  D021               	goto	l2022
  3451  0102E6                     
  3452                           ;main.c: 126: lockedMode = 1;
  3453  0102E6  0E01               	movlw	1
  3454  0102E8  0102               	movlb	2	; () banked
  3455  0102EA  6F7A               	movwf	main@lockedMode& (0+255),b
  3456                           
  3457                           ; BSR set to: 2
  3458                           ;main.c: 127: printf("Invalid Mode!\n\n\n\n\n\n");
  3459  0102EC  0E7E               	movlw	low STR_12
  3460  0102EE  0100               	movlb	0	; () banked
  3461  0102F0  6F75               	movwf	printf@f& (0+255),b
  3462  0102F2  0EFF               	movlw	high STR_12
  3463  0102F4  0100               	movlb	0	; () banked
  3464  0102F6  6F76               	movwf	(printf@f+1)& (0+255),b
  3465  0102F8  EC59  F097         	call	_printf	;wreg free
  3466                           
  3467                           ;main.c: 129: }
  3468  0102FC  D015               	goto	l2022
  3469  0102FE                     l2011:
  3470  0102FE  C277  F0D3         	movff	main@DipValue,??_main
  3471  010302  C278  F0D4         	movff	main@DipValue+1,??_main+1
  3472                           
  3473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3474                           ; Switch size 1, requested type "space"
  3475                           ; Number of cases is 1, Range of values is 0 to 0
  3476                           ; switch strategies available:
  3477                           ; Name         Instructions Cycles
  3478                           ; simple_byte            4     3 (average)
  3479                           ;	Chosen strategy is simple_byte
  3480  010306  0100               	movlb	0	; () banked
  3481  010308  51D4               	movf	(??_main+1)& (0+255),w,b
  3482  01030A  0A00               	xorlw	0	; case 0
  3483  01030C  A4D8               	btfss	status,2,c
  3484  01030E  D7EB               	goto	l2032
  3485                           
  3486                           ; BSR set to: 0
  3487                           ; Switch size 1, requested type "space"
  3488                           ; Number of cases is 3, Range of values is 1 to 4
  3489                           ; switch strategies available:
  3490                           ; Name         Instructions Cycles
  3491                           ; simple_byte           10     6 (average)
  3492                           ;	Chosen strategy is simple_byte
  3493  010310  0100               	movlb	0	; () banked
  3494  010312  51D3               	movf	??_main& (0+255),w,b
  3495  010314  0A01               	xorlw	1	; case 1
  3496  010316  B4D8               	btfsc	status,2,c
  3497  010318  D739               	goto	l2012
  3498  01031A  0A03               	xorlw	3	; case 2
  3499  01031C  B4D8               	btfsc	status,2,c
  3500  01031E  D79F               	goto	l2023
  3501  010320  0A06               	xorlw	6	; case 4
  3502  010322  B4D8               	btfsc	status,2,c
  3503  010324  D7D7               	goto	l2031
  3504  010326  D7DF               	goto	l2032
  3505  010328                     l2022:
  3506                           
  3507                           ;main.c: 130: Console_Render();
  3508                           
  3509                           ; BSR set to: 0
  3510  010328  ECBE  F091         	call	_Console_Render	;wreg free
  3511                           
  3512                           ;main.c: 131: float ADCVoltage = ADC_Voltage(&ADC_AN0);
  3513  01032C  0ED4               	movlw	low _ADC_AN0
  3514  01032E  0100               	movlb	0	; () banked
  3515  010330  6F87               	movwf	ADC_Voltage@pInput& (0+255),b
  3516  010332  0E01               	movlw	high _ADC_AN0
  3517  010334  0100               	movlb	0	; () banked
  3518  010336  6F88               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3519  010338  ECB9  F0A1         	call	_ADC_Voltage	;wreg free
  3520  01033C  C087  F268         	movff	?_ADC_Voltage,main@ADCVoltage
  3521  010340  C088  F269         	movff	?_ADC_Voltage+1,main@ADCVoltage+1
  3522  010344  C089  F26A         	movff	?_ADC_Voltage+2,main@ADCVoltage+2
  3523  010348  C08A  F26B         	movff	?_ADC_Voltage+3,main@ADCVoltage+3
  3524                           
  3525                           ;main.c: 133: int IRDistance = 65*pow(ADCVoltage, -1.10);
  3526  01034C  0ECD               	movlw	205
  3527  01034E  0100               	movlb	0	; () banked
  3528  010350  6FC2               	movwf	pow@y& (0+255),b
  3529  010352  0ECC               	movlw	204
  3530  010354  6FC3               	movwf	(pow@y+1)& (0+255),b
  3531  010356  0E8C               	movlw	140
  3532  010358  6FC4               	movwf	(pow@y+2)& (0+255),b
  3533  01035A  0EBF               	movlw	191
  3534  01035C  6FC5               	movwf	(pow@y+3)& (0+255),b
  3535  01035E  C268  F0BE         	movff	main@ADCVoltage,pow@x
  3536  010362  C269  F0BF         	movff	main@ADCVoltage+1,pow@x+1
  3537  010366  C26A  F0C0         	movff	main@ADCVoltage+2,pow@x+2
  3538  01036A  C26B  F0C1         	movff	main@ADCVoltage+3,pow@x+3
  3539  01036E  ECC6  F092         	call	_pow	;wreg free
  3540  010372  C0BE  F26C         	movff	?_pow,_main$15162
  3541  010376  C0BF  F26D         	movff	?_pow+1,_main$15162+1
  3542  01037A  C0C0  F26E         	movff	?_pow+2,_main$15162+2
  3543  01037E  C0C1  F26F         	movff	?_pow+3,_main$15162+3
  3544                           
  3545                           ;main.c: 133: int IRDistance = 65*pow(ADCVoltage, -1.10);
  3546  010382  0E00               	movlw	0
  3547  010384  0100               	movlb	0	; () banked
  3548  010386  6F72               	movwf	___flmul@a& (0+255),b
  3549  010388  0E00               	movlw	0
  3550  01038A  6F73               	movwf	(___flmul@a+1)& (0+255),b
  3551  01038C  0E82               	movlw	130
  3552  01038E  6F74               	movwf	(___flmul@a+2)& (0+255),b
  3553  010390  0E42               	movlw	66
  3554  010392  6F75               	movwf	(___flmul@a+3)& (0+255),b
  3555  010394  C26C  F06E         	movff	_main$15162,___flmul@b
  3556  010398  C26D  F06F         	movff	_main$15162+1,___flmul@b+1
  3557  01039C  C26E  F070         	movff	_main$15162+2,___flmul@b+2
  3558  0103A0  C26F  F071         	movff	_main$15162+3,___flmul@b+3
  3559  0103A4  ECD0  F084         	call	___flmul	;wreg free
  3560  0103A8  C06E  F087         	movff	?___flmul,___fltol@f1
  3561  0103AC  C06F  F088         	movff	?___flmul+1,___fltol@f1+1
  3562  0103B0  C070  F089         	movff	?___flmul+2,___fltol@f1+2
  3563  0103B4  C071  F08A         	movff	?___flmul+3,___fltol@f1+3
  3564  0103B8  EC47  F0A0         	call	___fltol	;wreg free
  3565  0103BC  C087  F270         	movff	?___fltol,main@IRDistance
  3566  0103C0  C088  F271         	movff	?___fltol+1,main@IRDistance+1
  3567                           
  3568                           ;main.c: 135: HMI_SetNumber(IRDistance);
  3569  0103C4  C270  F076         	movff	main@IRDistance,HMI_SetNumber@pInput
  3570  0103C8  C271  F077         	movff	main@IRDistance+1,HMI_SetNumber@pInput+1
  3571  0103CC  EC87  F0B3         	call	_HMI_SetNumber	;wreg free
  3572                           
  3573                           ;main.c: 136: HMI_Render();
  3574  0103D0  ECFF  F0B1         	call	_HMI_Render	;wreg free
  3575                           
  3576                           ;main.c: 137: if (MXK_Release())
  3577  0103D4  EC5F  F0B4         	call	_MXK_Release	;wreg free
  3578  0103D8  0900               	iorlw	0
  3579  0103DA  A4D8               	btfss	status,2,c
  3580                           
  3581                           ;main.c: 138: MXK_Dequeue();
  3582  0103DC  ECC1  F0B1         	call	_MXK_Dequeue	;wreg free
  3583  0103E0                     l2033:
  3584                           
  3585                           ;main.c: 139: }
  3586                           ;main.c: 142: if (MXK_BlockSwitchTo(eMXK_Motor)) {
  3587  0103E0  0E08               	movlw	8
  3588  0103E2  ECE0  F0B1         	call	_MXK_BlockSwitchTo
  3589  0103E6  0900               	iorlw	0
  3590  0103E8  A4D8               	btfss	status,2,c
  3591  0103EA  D06A               	goto	l2035
  3592  0103EC  D64E               	goto	l2009
  3593  0103EE                     
  3594                           ;main.c: 145: Motor_Speed(&Stepper,(Speed*1000L));
  3595  0103EE  0E7F               	movlw	low main@Stepper
  3596  0103F0  0100               	movlb	0	; () banked
  3597  0103F2  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3598  0103F4  0E02               	movlw	high main@Stepper
  3599  0103F6  0100               	movlb	0	; () banked
  3600  0103F8  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3601  0103FA  C27B  F060         	movff	main@Speed,___wmul@multiplier
  3602  0103FE  C27C  F061         	movff	main@Speed+1,___wmul@multiplier+1
  3603  010402  0E03               	movlw	3
  3604  010404  0100               	movlb	0	; () banked
  3605  010406  6F63               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3606  010408  0EE8               	movlw	232
  3607  01040A  6F62               	movwf	___wmul@multiplicand& (0+255),b
  3608  01040C  EC94  F0B2         	call	___wmul	;wreg free
  3609  010410  C060  F07D         	movff	?___wmul,Motor_Speed@pFrequency
  3610  010414  C061  F07E         	movff	?___wmul+1,Motor_Speed@pFrequency+1
  3611  010418  EC72  F0B3         	call	_Motor_Speed	;wreg free
  3612                           
  3613                           ;main.c: 146: Motor_Move(&Stepper,Direction);
  3614  01041C  0E7F               	movlw	low main@Stepper
  3615  01041E  0100               	movlb	0	; () banked
  3616  010420  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3617  010422  0E02               	movlw	high main@Stepper
  3618  010424  0100               	movlb	0	; () banked
  3619  010426  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3620  010428  C275  F065         	movff	main@Direction,Motor_Move@pDelta
  3621  01042C  C276  F066         	movff	main@Direction+1,Motor_Move@pDelta+1
  3622  010430  EC5B  F0B2         	call	_Motor_Move	;wreg free
  3623                           
  3624                           ;main.c: 147: break;
  3625  010434  D059               	goto	l2037
  3626  010436                     
  3627                           ;main.c: 149: if(lockedMode){
  3628  010436  0102               	movlb	2	; () banked
  3629  010438  517A               	movf	main@lockedMode& (0+255),w,b
  3630  01043A  0102               	movlb	2	; () banked
  3631  01043C  B4D8               	btfsc	status,2,c
  3632  01043E  D008               	goto	l2039
  3633                           
  3634                           ; BSR set to: 2
  3635                           ;main.c: 150: lockedMode=0;
  3636  010440  0E00               	movlw	0
  3637  010442  0102               	movlb	2	; () banked
  3638  010444  6F7A               	movwf	main@lockedMode& (0+255),b
  3639                           
  3640                           ;main.c: 151: Stepper.mDelta = 0;
  3641  010446  0E00               	movlw	0
  3642  010448  0102               	movlb	2	; () banked
  3643  01044A  6F80               	movwf	(main@Stepper+1)& (0+255),b
  3644  01044C  0E00               	movlw	0
  3645  01044E  6F7F               	movwf	main@Stepper& (0+255),b
  3646  010450                     l2039:
  3647                           
  3648                           ; BSR set to: 2
  3649                           ;main.c: 152: }
  3650                           ;main.c: 153: if(DownValue && Stepper.mDelta == 0){
  3651  010450  0102               	movlb	2	; () banked
  3652  010452  5179               	movf	main@DownValue& (0+255),w,b
  3653  010454  0102               	movlb	2	; () banked
  3654  010456  B4D8               	btfsc	status,2,c
  3655  010458  D047               	goto	l2037
  3656                           
  3657                           ; BSR set to: 2
  3658  01045A  0102               	movlb	2	; () banked
  3659  01045C  517F               	movf	main@Stepper& (0+255),w,b
  3660  01045E  0102               	movlb	2	; () banked
  3661  010460  1180               	iorwf	(main@Stepper+1)& (0+255),w,b
  3662  010462  A4D8               	btfss	status,2,c
  3663  010464  D041               	goto	l2037
  3664                           
  3665                           ; BSR set to: 2
  3666                           ;main.c: 154: Motor_Speed(&Stepper, (1*1000L));
  3667  010466  0E7F               	movlw	low main@Stepper
  3668  010468  0100               	movlb	0	; () banked
  3669  01046A  6F7B               	movwf	Motor_Speed@pMotor& (0+255),b
  3670  01046C  0E02               	movlw	high main@Stepper
  3671  01046E  0100               	movlb	0	; () banked
  3672  010470  6F7C               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3673  010472  0E03               	movlw	3
  3674  010474  0100               	movlb	0	; () banked
  3675  010476  6F7E               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3676  010478  0EE8               	movlw	232
  3677  01047A  6F7D               	movwf	Motor_Speed@pFrequency& (0+255),b
  3678  01047C  EC72  F0B3         	call	_Motor_Speed	;wreg free
  3679                           
  3680                           ;main.c: 155: Motor_Move(&Stepper, Steps);
  3681  010480  0E7F               	movlw	low main@Stepper
  3682  010482  0100               	movlb	0	; () banked
  3683  010484  6F63               	movwf	Motor_Move@pMotor& (0+255),b
  3684  010486  0E02               	movlw	high main@Stepper
  3685  010488  0100               	movlb	0	; () banked
  3686  01048A  6F64               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3687  01048C  C27D  F065         	movff	main@Steps,Motor_Move@pDelta
  3688  010490  C27E  F066         	movff	main@Steps+1,Motor_Move@pDelta+1
  3689  010494  EC5B  F0B2         	call	_Motor_Move	;wreg free
  3690                           
  3691                           ;main.c: 156: }
  3692                           ;main.c: 157: break;
  3693  010498  D027               	goto	l2037
  3694  01049A                     
  3695                           ;main.c: 159: if(lockedMode){
  3696  01049A  0102               	movlb	2	; () banked
  3697  01049C  517A               	movf	main@lockedMode& (0+255),w,b
  3698  01049E  0102               	movlb	2	; () banked
  3699  0104A0  B4D8               	btfsc	status,2,c
  3700  0104A2  D022               	goto	l2037
  3701                           
  3702                           ; BSR set to: 2
  3703                           ;main.c: 160: int rotation = 0;
  3704  0104A4  0E00               	movlw	0
  3705  0104A6  0102               	movlb	2	; () banked
  3706  0104A8  6F65               	movwf	(main@rotation+1)& (0+255),b
  3707  0104AA  0E00               	movlw	0
  3708  0104AC  6F64               	movwf	main@rotation& (0+255),b
  3709                           
  3710                           ;main.c: 161: lockedMode = 0;
  3711  0104AE  0E00               	movlw	0
  3712  0104B0  0102               	movlb	2	; () banked
  3713  0104B2  6F7A               	movwf	main@lockedMode& (0+255),b
  3714                           
  3715                           ;main.c: 162: int movetoPos = 0;
  3716  0104B4  0E00               	movlw	0
  3717  0104B6  0102               	movlb	2	; () banked
  3718  0104B8  6F67               	movwf	(main@movetoPos+1)& (0+255),b
  3719  0104BA  0E00               	movlw	0
  3720  0104BC  6F66               	movwf	main@movetoPos& (0+255),b
  3721                           
  3722                           ; BSR set to: 2
  3723                           ;main.c: 169: }
  3724                           
  3725                           ; BSR set to: 2
  3726                           ;main.c: 168: break;
  3727                           
  3728                           ;main.c: 167: default:
  3729                           
  3730                           ; BSR set to: 2
  3731                           ;main.c: 163: }
  3732                           ;main.c: 166: break;
  3733  0104BE  D014               	goto	l2037
  3734  0104C0                     l2035:
  3735                           
  3736                           ; BSR set to: 2
  3737  0104C0  C277  F0D3         	movff	main@DipValue,??_main
  3738  0104C4  C278  F0D4         	movff	main@DipValue+1,??_main+1
  3739                           
  3740                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3741                           ; Switch size 1, requested type "space"
  3742                           ; Number of cases is 1, Range of values is 0 to 0
  3743                           ; switch strategies available:
  3744                           ; Name         Instructions Cycles
  3745                           ; simple_byte            4     3 (average)
  3746                           ;	Chosen strategy is simple_byte
  3747  0104C8  0100               	movlb	0	; () banked
  3748  0104CA  51D4               	movf	(??_main+1)& (0+255),w,b
  3749  0104CC  0A00               	xorlw	0	; case 0
  3750  0104CE  A4D8               	btfss	status,2,c
  3751  0104D0  D00B               	goto	l2037
  3752                           
  3753                           ; BSR set to: 0
  3754                           ; Switch size 1, requested type "space"
  3755                           ; Number of cases is 3, Range of values is 1 to 4
  3756                           ; switch strategies available:
  3757                           ; Name         Instructions Cycles
  3758                           ; simple_byte           10     6 (average)
  3759                           ;	Chosen strategy is simple_byte
  3760  0104D2  0100               	movlb	0	; () banked
  3761  0104D4  51D3               	movf	??_main& (0+255),w,b
  3762  0104D6  0A01               	xorlw	1	; case 1
  3763  0104D8  B4D8               	btfsc	status,2,c
  3764  0104DA  D789               	goto	l2036
  3765  0104DC  0A03               	xorlw	3	; case 2
  3766  0104DE  B4D8               	btfsc	status,2,c
  3767  0104E0  D7AA               	goto	l2038
  3768  0104E2  0A06               	xorlw	6	; case 4
  3769  0104E4  B4D8               	btfsc	status,2,c
  3770  0104E6  D7D9               	goto	l2041
  3771  0104E8                     l2037:
  3772                           
  3773                           ;main.c: 170: if (MXK_Release())
  3774                           
  3775                           ; BSR set to: 0
  3776  0104E8  EC5F  F0B4         	call	_MXK_Release	;wreg free
  3777  0104EC  0900               	iorlw	0
  3778  0104EE  B4D8               	btfsc	status,2,c
  3779  0104F0  D5CC               	goto	l2009
  3780                           
  3781                           ;main.c: 171: MXK_Dequeue();
  3782  0104F2  ECC1  F0B1         	call	_MXK_Dequeue	;wreg free
  3783                           
  3784                           ;main.c: 172: }
  3785                           ;main.c: 173: }
  3786  0104F6  D5C9               	goto	l2009
  3787  0104F8                     __end_of_main:
  3788                           	opt stack 0
  3789                           tosu	equ	0xFFF
  3790                           tosh	equ	0xFFE
  3791                           tosl	equ	0xFFD
  3792                           pclath	equ	0xFFA
  3793                           tblptru	equ	0xFF8
  3794                           tblptrh	equ	0xFF7
  3795                           tblptrl	equ	0xFF6
  3796                           tablat	equ	0xFF5
  3797                           postinc0	equ	0xFEE
  3798                           wreg	equ	0xFE8
  3799                           postdec1	equ	0xFE5
  3800                           fsr1h	equ	0xFE2
  3801                           fsr1l	equ	0xFE1
  3802                           postinc2	equ	0xFDE
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function _printf *****************
  3806 ;; Defined at:
  3807 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3810 ;;		 -> STR_12(20), STR_11(15), STR_10(12), STR_9(12), 
  3811 ;;		 -> STR_8(13), STR_7(4), STR_6(5), STR_5(12), 
  3812 ;;		 -> STR_4(18), STR_3(18), STR_2(33), STR_1(3), 
  3813 ;; Auto vars:     Size  Location     Type
  3814 ;;  tmpval          4    0        struct .
  3815 ;;  cp              3    0        PTR const unsigned char 
  3816 ;;  val             2   30[BANK0 ] unsigned int 
  3817 ;;  ap              2   28[BANK0 ] PTR void [1]
  3818 ;;		 -> ?_printf(2), 
  3819 ;;  len             2    0        unsigned int 
  3820 ;;  c               1   32[BANK0 ] char 
  3821 ;;  prec            1   27[BANK0 ] char 
  3822 ;;  flag            1   26[BANK0 ] unsigned char 
  3823 ;; Return value:  Size  Location     Type
  3824 ;;                  2   21[BANK0 ] int 
  3825 ;; Registers used:
  3826 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3832 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3833 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3834 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3835 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;Total ram usage:       12 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:   12
  3839 ;; This function calls:
  3840 ;;		___lwdiv
  3841 ;;		___lwmod
  3842 ;;		_putch
  3843 ;; This function is called by:
  3844 ;;		_main
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text1
  3849  012EB2                     __ptext1:
  3850                           	opt stack 0
  3851  012EB2                     _printf:
  3852                           	opt stack 18
  3853                           
  3854                           ;doprnt.c: 466: va_list ap;
  3855                           ;doprnt.c: 499: signed char c;
  3856                           ;doprnt.c: 506: signed char prec;
  3857                           ;doprnt.c: 508: unsigned char flag;
  3858                           ;doprnt.c: 523: union {
  3859                           ;doprnt.c: 524: unsigned long vd;
  3860                           ;doprnt.c: 525: double integ;
  3861                           ;doprnt.c: 526: } tmpval;
  3862                           ;doprnt.c: 528: unsigned int val;
  3863                           ;doprnt.c: 529: unsigned len;
  3864                           ;doprnt.c: 530: const char * cp;
  3865                           ;doprnt.c: 533: *ap = __va_start();
  3866                           
  3867                           ;incstack = 0
  3868  012EB2  0E77               	movlw	low (?_printf+2)
  3869  012EB4  0100               	movlb	0	; () banked
  3870  012EB6  6F7C               	movwf	printf@ap& (0+255),b
  3871  012EB8  0E00               	movlw	high (?_printf+2)
  3872  012EBA  0100               	movlb	0	; () banked
  3873  012EBC  6F7D               	movwf	(printf@ap+1)& (0+255),b
  3874                           
  3875                           ;doprnt.c: 536: while(c = *f++) {
  3876  012EBE  D0B1               	goto	u12430
  3877  012EC0                     
  3878                           ; BSR set to: 0
  3879                           ;doprnt.c: 538: if(c != '%')
  3880                           
  3881                           ; BSR set to: 0
  3882  012EC0  0E25               	movlw	37
  3883  012EC2  0100               	movlb	0	; () banked
  3884  012EC4  1980               	xorwf	printf@c& (0+255),w,b
  3885  012EC6  B4D8               	btfsc	status,2,c
  3886  012EC8  D005               	goto	l2059
  3887                           
  3888                           ; BSR set to: 0
  3889                           ;doprnt.c: 540: {
  3890                           ;doprnt.c: 541: (putch(c) );
  3891  012ECA  0100               	movlb	0	; () banked
  3892  012ECC  5180               	movf	printf@c& (0+255),w,b
  3893  012ECE  ECF8  F0B4         	call	_putch
  3894                           
  3895                           ;doprnt.c: 542: continue;
  3896  012ED2  D0A7               	goto	u12430
  3897  012ED4                     l2059:
  3898                           
  3899                           ;doprnt.c: 543: }
  3900                           ;doprnt.c: 548: flag = 0;
  3901  012ED4  0E00               	movlw	0
  3902  012ED6  0100               	movlb	0	; () banked
  3903  012ED8  6F7A               	movwf	printf@flag& (0+255),b
  3904                           
  3905                           ;doprnt.c: 635: switch(c = *f++) {
  3906  012EDA  D011               	goto	l2060
  3907  012EDC                     
  3908                           ; BSR set to: 0
  3909                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3910                           
  3911                           ; BSR set to: 0
  3912  012EDC  C07C  FFD9         	movff	printf@ap,fsr2l
  3913  012EE0  C07D  FFDA         	movff	printf@ap+1,fsr2h
  3914  012EE4  50DF               	movf	indf2,w,c
  3915  012EE6  0100               	movlb	0	; () banked
  3916  012EE8  6F80               	movwf	printf@c& (0+255),b
  3917                           
  3918                           ; BSR set to: 0
  3919  012EEA  0E02               	movlw	2
  3920  012EEC  0100               	movlb	0	; () banked
  3921  012EEE  277C               	addwf	printf@ap& (0+255),f,b
  3922  012EF0  0E00               	movlw	0
  3923  012EF2  237D               	addwfc	(printf@ap+1)& (0+255),f,b
  3924  012EF4                     
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 809: (putch(c) );
  3927                           
  3928                           ; BSR set to: 0
  3929  012EF4  0100               	movlb	0	; () banked
  3930  012EF6  5180               	movf	printf@c& (0+255),w,b
  3931  012EF8  ECF8  F0B4         	call	_putch
  3932                           
  3933                           ;doprnt.c: 810: continue;
  3934  012EFC  D092               	goto	u12430
  3935  012EFE                     l2060:
  3936  012EFE  C075  FFF6         	movff	printf@f,tblptrl
  3937  012F02  C076  FFF7         	movff	printf@f+1,tblptrh
  3938  012F06  0100               	movlb	0	; () banked
  3939  012F08  4B75               	infsnz	printf@f& (0+255),f,b
  3940  012F0A  2B76               	incf	(printf@f+1)& (0+255),f,b
  3941  012F0C                     	if	0	;tblptru may be non-zero
  3942  012F0C                     	endif
  3943  012F0C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3944  012F0C  0E00               	movlw	low (__mediumconst shr (0+16))
  3945  012F0E  6EF8               	movwf	tblptru,c
  3946  012F10                     	endif
  3947  012F10  0008               	tblrd		*
  3948  012F12  CFF5 F080          	movff	tablat,printf@c
  3949  012F16  0100               	movlb	0	; () banked
  3950  012F18  5180               	movf	printf@c& (0+255),w,b
  3951                           
  3952                           ; Switch size 1, requested type "space"
  3953                           ; Number of cases is 4, Range of values is 0 to 105
  3954                           ; switch strategies available:
  3955                           ; Name         Instructions Cycles
  3956                           ; simple_byte           13     7 (average)
  3957                           ;	Chosen strategy is simple_byte
  3958  012F1A  0A00               	xorlw	0	; case 0
  3959  012F1C  B4D8               	btfsc	status,2,c
  3960  012F1E  0012               	return	
  3961  012F20  0A63               	xorlw	99	; case 99
  3962  012F22  B4D8               	btfsc	status,2,c
  3963  012F24  D7DB               	goto	l2066
  3964  012F26  0A07               	xorlw	7	; case 100
  3965  012F28  B4D8               	btfsc	status,2,c
  3966  012F2A  D003               	goto	l2065
  3967  012F2C  0A0D               	xorlw	13	; case 105
  3968  012F2E  A4D8               	btfss	status,2,c
  3969  012F30  D7E1               	goto	l2067
  3970  012F32                     l2065:
  3971                           
  3972                           ;doprnt.c: 1253: {
  3973                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3974                           
  3975                           ; BSR set to: 0
  3976  012F32  C07C  FFD9         	movff	printf@ap,fsr2l
  3977  012F36  C07D  FFDA         	movff	printf@ap+1,fsr2h
  3978  012F3A  CFDE F07E          	movff	postinc2,printf@val
  3979  012F3E  CFDD F07F          	movff	postdec2,printf@val+1
  3980  012F42  0E02               	movlw	2
  3981  012F44  0100               	movlb	0	; () banked
  3982  012F46  277C               	addwf	printf@ap& (0+255),f,b
  3983  012F48  0E00               	movlw	0
  3984  012F4A  237D               	addwfc	(printf@ap+1)& (0+255),f,b
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;doprnt.c: 1261: if((int)val < 0) {
  3988  012F4C  0100               	movlb	0	; () banked
  3989  012F4E  AF7F               	btfss	(printf@val+1)& (0+255),7,b
  3990  012F50  D008               	goto	l2068
  3991                           
  3992                           ; BSR set to: 0
  3993                           ;doprnt.c: 1262: flag |= 0x03;
  3994  012F52  0E03               	movlw	3
  3995  012F54  0100               	movlb	0	; () banked
  3996  012F56  137A               	iorwf	printf@flag& (0+255),f,b
  3997                           
  3998                           ; BSR set to: 0
  3999                           ;doprnt.c: 1263: val = -val;
  4000  012F58  0100               	movlb	0	; () banked
  4001  012F5A  6D7E               	negf	printf@val& (0+255),b
  4002  012F5C  1F7F               	comf	(printf@val+1)& (0+255),f,b
  4003  012F5E  B0D8               	btfsc	status,0,c
  4004  012F60  2B7F               	incf	(printf@val+1)& (0+255),f,b
  4005  012F62                     l2068:
  4006                           
  4007                           ; BSR set to: 0
  4008                           ;doprnt.c: 1264: }
  4009                           ;doprnt.c: 1266: }
  4010                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4011                           
  4012                           ; BSR set to: 0
  4013  012F62  0E01               	movlw	1
  4014  012F64  0100               	movlb	0	; () banked
  4015  012F66  6F80               	movwf	printf@c& (0+255),b
  4016  012F68                     l14572:
  4017                           
  4018                           ; BSR set to: 0
  4019  012F68  0E05               	movlw	5
  4020  012F6A  0100               	movlb	0	; () banked
  4021  012F6C  1980               	xorwf	printf@c& (0+255),w,b
  4022  012F6E  B4D8               	btfsc	status,2,c
  4023  012F70  D019               	goto	u12410
  4024                           
  4025                           ; BSR set to: 0
  4026                           ;doprnt.c: 1306: if(val < dpowers[c])
  4027                           
  4028                           ; BSR set to: 0
  4029                           
  4030                           ; BSR set to: 0
  4031  012F72  0100               	movlb	0	; () banked
  4032  012F74  5180               	movf	printf@c& (0+255),w,b
  4033  012F76  0D02               	mullw	2
  4034  012F78  0E09               	movlw	low _dpowers
  4035  012F7A  24F3               	addwf	prodl,w,c
  4036  012F7C  6EF6               	movwf	tblptrl,c
  4037  012F7E  0EFD               	movlw	high _dpowers
  4038  012F80  20F4               	addwfc	prodh,w,c
  4039  012F82  6EF7               	movwf	tblptrh,c
  4040  012F84                     	if	1	;There are 3 active tblptr bytes
  4041  012F84  6AF8               	clrf	tblptru,c
  4042  012F86  0E00               	movlw	low (__mediumconst shr (0+16))
  4043  012F88  22F8               	addwfc	tblptru,f,c
  4044  012F8A                     	endif
  4045  012F8A  0009               	tblrd		*+
  4046  012F8C  50F5               	movf	tablat,w,c
  4047  012F8E  0100               	movlb	0	; () banked
  4048  012F90  5D7E               	subwf	printf@val& (0+255),w,b
  4049  012F92  0009               	tblrd		*+
  4050  012F94  50F5               	movf	tablat,w,c
  4051  012F96  0100               	movlb	0	; () banked
  4052  012F98  597F               	subwfb	(printf@val+1)& (0+255),w,b
  4053  012F9A  A0D8               	btfss	status,0,c
  4054  012F9C  D003               	goto	u12410
  4055                           
  4056                           ; BSR set to: 0
  4057                           
  4058                           ; BSR set to: 0
  4059                           
  4060                           ; BSR set to: 0
  4061                           ;doprnt.c: 1307: break;
  4062  012F9E  0100               	movlb	0	; () banked
  4063  012FA0  2B80               	incf	printf@c& (0+255),f,b
  4064  012FA2  D7E2               	goto	l14572
  4065  012FA4                     u12410:
  4066                           
  4067                           ; BSR set to: 0
  4068                           ;doprnt.c: 1422: {
  4069                           ;doprnt.c: 1438: if(flag & 0x03)
  4070                           
  4071                           ; BSR set to: 0
  4072  012FA4  C07A  F079         	movff	printf@flag,??_printf
  4073  012FA8  0E03               	movlw	3
  4074  012FAA  0100               	movlb	0	; () banked
  4075  012FAC  1779               	andwf	??_printf& (0+255),f,b
  4076  012FAE  B4D8               	btfsc	status,2,c
  4077  012FB0  D003               	goto	l2072
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;doprnt.c: 1439: (putch('-') );
  4081  012FB2  0E2D               	movlw	45
  4082  012FB4  ECF8  F0B4         	call	_putch
  4083  012FB8                     l2072:
  4084                           
  4085                           ;doprnt.c: 1469: }
  4086                           ;doprnt.c: 1472: prec = c;
  4087  012FB8  C080  F07B         	movff	printf@c,printf@prec
  4088                           
  4089                           ;doprnt.c: 1474: while(prec--) {
  4090  012FBC  D02C               	goto	l2073
  4091  012FBE                     
  4092                           ;doprnt.c: 1478: {
  4093                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4094  012FBE  0100               	movlb	0	; () banked
  4095  012FC0  517B               	movf	printf@prec& (0+255),w,b
  4096  012FC2  0D02               	mullw	2
  4097  012FC4  0E09               	movlw	low _dpowers
  4098  012FC6  24F3               	addwf	prodl,w,c
  4099  012FC8  6EF6               	movwf	tblptrl,c
  4100  012FCA  0EFD               	movlw	high _dpowers
  4101  012FCC  20F4               	addwfc	prodh,w,c
  4102  012FCE  6EF7               	movwf	tblptrh,c
  4103  012FD0                     	if	1	;There are 3 active tblptr bytes
  4104  012FD0  6AF8               	clrf	tblptru,c
  4105  012FD2  0E00               	movlw	low (__mediumconst shr (0+16))
  4106  012FD4  22F8               	addwfc	tblptru,f,c
  4107  012FD6                     	endif
  4108  012FD6  0009               	tblrd		*+
  4109  012FD8  CFF5 F062          	movff	tablat,___lwdiv@divisor
  4110  012FDC  000A               	tblrd		*-
  4111  012FDE  CFF5 F063          	movff	tablat,___lwdiv@divisor+1
  4112  012FE2  C07E  F060         	movff	printf@val,___lwdiv@dividend
  4113  012FE6  C07F  F061         	movff	printf@val+1,___lwdiv@dividend+1
  4114  012FEA  ECEA  F0AB         	call	___lwdiv	;wreg free
  4115  012FEE  C060  F067         	movff	?___lwdiv,___lwmod@dividend
  4116  012FF2  C061  F068         	movff	?___lwdiv+1,___lwmod@dividend+1
  4117  012FF6  0E00               	movlw	0
  4118  012FF8  0100               	movlb	0	; () banked
  4119  012FFA  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
  4120  012FFC  0E0A               	movlw	10
  4121  012FFE  6F69               	movwf	___lwmod@divisor& (0+255),b
  4122  013000  ECEB  F0AE         	call	___lwmod	;wreg free
  4123  013004  0100               	movlb	0	; () banked
  4124  013006  5167               	movf	?___lwmod& (0+255),w,b
  4125  013008  0F30               	addlw	48
  4126  01300A  0100               	movlb	0	; () banked
  4127  01300C  6F80               	movwf	printf@c& (0+255),b
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;doprnt.c: 1523: }
  4131                           ;doprnt.c: 1524: (putch(c) );
  4132  01300E  0100               	movlb	0	; () banked
  4133  013010  5180               	movf	printf@c& (0+255),w,b
  4134  013012  ECF8  F0B4         	call	_putch
  4135  013016                     l2073:
  4136  013016  0100               	movlb	0	; () banked
  4137  013018  077B               	decf	printf@prec& (0+255),f,b
  4138  01301A  0100               	movlb	0	; () banked
  4139  01301C  297B               	incf	printf@prec& (0+255),w,b
  4140  01301E  A4D8               	btfss	status,2,c
  4141  013020  D7CE               	goto	l2074
  4142  013022                     u12430:
  4143                           
  4144                           ; BSR set to: 0
  4145                           
  4146                           ; BSR set to: 0
  4147  013022  C075  FFF6         	movff	printf@f,tblptrl
  4148  013026  C076  FFF7         	movff	printf@f+1,tblptrh
  4149  01302A  0100               	movlb	0	; () banked
  4150  01302C  4B75               	infsnz	printf@f& (0+255),f,b
  4151  01302E  2B76               	incf	(printf@f+1)& (0+255),f,b
  4152  013030                     	if	0	;tblptru may be non-zero
  4153  013030                     	endif
  4154  013030                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4155  013030  0E00               	movlw	low (__mediumconst shr (0+16))
  4156  013032  6EF8               	movwf	tblptru,c
  4157  013034                     	endif
  4158  013034  0008               	tblrd		*
  4159  013036  CFF5 F080          	movff	tablat,printf@c
  4160  01303A  0100               	movlb	0	; () banked
  4161  01303C  5180               	movf	printf@c& (0+255),w,b
  4162  01303E  B4D8               	btfsc	status,2,c
  4163  013040  0012               	return	
  4164  013042  D73E               	goto	l2058
  4165  013044                     __end_of_printf:
  4166                           	opt stack 0
  4167                           tosu	equ	0xFFF
  4168                           tosh	equ	0xFFE
  4169                           tosl	equ	0xFFD
  4170                           pclath	equ	0xFFA
  4171                           tblptru	equ	0xFF8
  4172                           tblptrh	equ	0xFF7
  4173                           tblptrl	equ	0xFF6
  4174                           tablat	equ	0xFF5
  4175                           prodh	equ	0xFF4
  4176                           prodl	equ	0xFF3
  4177                           postinc0	equ	0xFEE
  4178                           wreg	equ	0xFE8
  4179                           postdec1	equ	0xFE5
  4180                           fsr1h	equ	0xFE2
  4181                           fsr1l	equ	0xFE1
  4182                           indf2	equ	0xFDF
  4183                           postinc2	equ	0xFDE
  4184                           postdec2	equ	0xFDD
  4185                           fsr2h	equ	0xFDA
  4186                           fsr2l	equ	0xFD9
  4187                           status	equ	0xFD8
  4188                           
  4189 ;; *************** function _putch *****************
  4190 ;; Defined at:
  4191 ;;		line 454 in file "Library/Console.c"
  4192 ;; Parameters:    Size  Location     Type
  4193 ;;  c               1    wreg     unsigned char 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  c               1   20[BANK0 ] unsigned char 
  4196 ;; Return value:  Size  Location     Type
  4197 ;;                  1    wreg      void 
  4198 ;; Registers used:
  4199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4200 ;; Tracked objects:
  4201 ;;		On entry : 0/0
  4202 ;;		On exit  : 0/0
  4203 ;;		Unchanged: 0/0
  4204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4207 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;Total ram usage:        1 bytes
  4210 ;; Hardware stack levels used:    1
  4211 ;; Hardware stack levels required when called:   11
  4212 ;; This function calls:
  4213 ;;		_Console_PrintChar
  4214 ;; This function is called by:
  4215 ;;		_printf
  4216 ;; This function uses a non-reentrant model
  4217 ;;
  4218                           
  4219                           	psect	text2
  4220  0169F0                     __ptext2:
  4221                           	opt stack 0
  4222  0169F0                     _putch:
  4223                           	opt stack 18
  4224                           
  4225                           ; BSR set to: 0
  4226                           ;incstack = 0
  4227                           ;putch@c stored from wreg
  4228  0169F0  0100               	movlb	0	; () banked
  4229  0169F2  6F74               	movwf	putch@c& (0+255),b
  4230                           
  4231                           ;Console.c: 456: Console_PrintChar(c);
  4232  0169F4  0100               	movlb	0	; () banked
  4233  0169F6  5174               	movf	putch@c& (0+255),w,b
  4234  0169F8  EC8A  F096         	call	_Console_PrintChar
  4235  0169FC  0012               	return		;funcret
  4236  0169FE                     __end_of_putch:
  4237                           	opt stack 0
  4238                           tosu	equ	0xFFF
  4239                           tosh	equ	0xFFE
  4240                           tosl	equ	0xFFD
  4241                           pclath	equ	0xFFA
  4242                           tblptru	equ	0xFF8
  4243                           tblptrh	equ	0xFF7
  4244                           tblptrl	equ	0xFF6
  4245                           tablat	equ	0xFF5
  4246                           prodh	equ	0xFF4
  4247                           prodl	equ	0xFF3
  4248                           postinc0	equ	0xFEE
  4249                           wreg	equ	0xFE8
  4250                           postdec1	equ	0xFE5
  4251                           fsr1h	equ	0xFE2
  4252                           fsr1l	equ	0xFE1
  4253                           indf2	equ	0xFDF
  4254                           postinc2	equ	0xFDE
  4255                           postdec2	equ	0xFDD
  4256                           fsr2h	equ	0xFDA
  4257                           fsr2l	equ	0xFD9
  4258                           status	equ	0xFD8
  4259                           
  4260 ;; *************** function _Console_PrintChar *****************
  4261 ;; Defined at:
  4262 ;;		line 322 in file "Library/Console.c"
  4263 ;; Parameters:    Size  Location     Type
  4264 ;;  pInput          1    wreg     unsigned char 
  4265 ;; Auto vars:     Size  Location     Type
  4266 ;;  pInput          1   19[BANK0 ] unsigned char 
  4267 ;; Return value:  Size  Location     Type
  4268 ;;                  1    wreg      void 
  4269 ;; Registers used:
  4270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4271 ;; Tracked objects:
  4272 ;;		On entry : 0/0
  4273 ;;		On exit  : 0/0
  4274 ;;		Unchanged: 0/0
  4275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4277 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;Total ram usage:        4 bytes
  4281 ;; Hardware stack levels used:    1
  4282 ;; Hardware stack levels required when called:   10
  4283 ;; This function calls:
  4284 ;;		_Console_Backspace
  4285 ;;		_Console_FormFeed
  4286 ;;		_Console_IncrementCursor
  4287 ;;		_Console_NewLine
  4288 ;;		_Console_ResetCursor
  4289 ;;		_Console_Tab
  4290 ;; This function is called by:
  4291 ;;		_putch
  4292 ;;		_Console_PrintString
  4293 ;; This function uses a non-reentrant model
  4294 ;;
  4295                           
  4296                           	psect	text3
  4297  012D14                     __ptext3:
  4298                           	opt stack 0
  4299  012D14                     _Console_PrintChar:
  4300                           	opt stack 18
  4301                           
  4302                           ;incstack = 0
  4303                           ;Console_PrintChar@pInput stored from wreg
  4304  012D14  0100               	movlb	0	; () banked
  4305  012D16  6F73               	movwf	Console_PrintChar@pInput& (0+255),b
  4306                           
  4307                           ;Console.c: 324: switch(pInput)
  4308  012D18  D0B1               	goto	l1036
  4309  012D1A                     
  4310                           ;Console.c: 327: case '\n':
  4311                           ;Console.c: 328: Console_NewLine();
  4312  012D1A  EC97  F0A8         	call	_Console_NewLine	;wreg free
  4313                           
  4314                           ;Console.c: 329: return;
  4315  012D1E  0012               	return	
  4316  012D20                     
  4317                           ;Console.c: 331: Console_Backspace();
  4318  012D20  EC1C  F0AF         	call	_Console_Backspace	;wreg free
  4319                           
  4320                           ;Console.c: 332: return;
  4321  012D24  0012               	return	
  4322  012D26                     
  4323                           ;Console.c: 334: Console_FormFeed();
  4324  012D26  EC1B  F0AA         	call	_Console_FormFeed	;wreg free
  4325                           
  4326                           ;Console.c: 335: return;
  4327  012D2A  0012               	return	
  4328  012D2C                     
  4329                           ;Console.c: 337: Console_Tab();
  4330  012D2C  ECC4  F0A3         	call	_Console_Tab	;wreg free
  4331                           
  4332                           ;Console.c: 338: return;
  4333  012D30  0012               	return	
  4334  012D32                     
  4335                           ;Console.c: 340: Console_IncrementCursor();
  4336  012D32  EC55  F0AE         	call	_Console_IncrementCursor	;wreg free
  4337                           
  4338                           ;Console.c: 341: return;
  4339  012D36  0012               	return	
  4340  012D38                     
  4341                           ;Console.c: 343: Console_ResetCursor();
  4342  012D38  ECF6  F0B3         	call	_Console_ResetCursor	;wreg free
  4343                           
  4344                           ;Console.c: 344: return;
  4345  012D3C  0012               	return	
  4346  012D3E                     
  4347                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4348                           
  4349                           ;Console.c: 349: default:
  4350  012D3E  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4351  012D42  0E7F               	movlw	127
  4352  012D44  0100               	movlb	0	; () banked
  4353  012D46  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  4354  012D48  0100               	movlb	0	; () banked
  4355  012D4A  51E7               	movf	_lBufferY& (0+255),w,b
  4356  012D4C  0D14               	mullw	20
  4357  012D4E  0E85               	movlw	low _lBuffer
  4358  012D50  0100               	movlb	0	; () banked
  4359  012D52  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4360  012D54  0E02               	movlw	high _lBuffer
  4361  012D56  0100               	movlb	0	; () banked
  4362  012D58  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4363  012D5A  50F3               	movf	prodl,w,c
  4364  012D5C  0100               	movlb	0	; () banked
  4365  012D5E  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4366  012D60  50F4               	movf	prodh,w,c
  4367  012D62  0100               	movlb	0	; () banked
  4368  012D64  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4369  012D66  0100               	movlb	0	; () banked
  4370  012D68  51E8               	movf	_lBufferX& (0+255),w,b
  4371  012D6A  0D01               	mullw	1
  4372  012D6C  50F3               	movf	prodl,w,c
  4373  012D6E  0100               	movlb	0	; () banked
  4374  012D70  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4375  012D72  6ED9               	movwf	fsr2l,c
  4376  012D74  50F4               	movf	prodh,w,c
  4377  012D76  0100               	movlb	0	; () banked
  4378  012D78  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4379  012D7A  6EDA               	movwf	fsr2h,c
  4380  012D7C  50DF               	movf	indf2,w,c
  4381  012D7E  0B7F               	andlw	127
  4382  012D80  0100               	movlb	0	; () banked
  4383  012D82  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  4384  012D84  B4D8               	btfsc	status,2,c
  4385  012D86  D02E               	goto	l1047
  4386                           
  4387                           ; BSR set to: 0
  4388                           ;Console.c: 351: {
  4389                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4390  012D88  0E01               	movlw	1
  4391  012D8A  0100               	movlb	0	; () banked
  4392  012D8C  6FEC               	movwf	_change& (0+255),b
  4393                           
  4394                           ; BSR set to: 0
  4395  012D8E  0100               	movlb	0	; () banked
  4396  012D90  51E7               	movf	_lBufferY& (0+255),w,b
  4397  012D92  0D14               	mullw	20
  4398  012D94  0E85               	movlw	low _lBuffer
  4399  012D96  0100               	movlb	0	; () banked
  4400  012D98  6F70               	movwf	??_Console_PrintChar& (0+255),b
  4401  012D9A  0E02               	movlw	high _lBuffer
  4402  012D9C  0100               	movlb	0	; () banked
  4403  012D9E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4404  012DA0  50F3               	movf	prodl,w,c
  4405  012DA2  0100               	movlb	0	; () banked
  4406  012DA4  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  4407  012DA6  50F4               	movf	prodh,w,c
  4408  012DA8  0100               	movlb	0	; () banked
  4409  012DAA  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4410  012DAC  0100               	movlb	0	; () banked
  4411  012DAE  51E8               	movf	_lBufferX& (0+255),w,b
  4412  012DB0  0D01               	mullw	1
  4413  012DB2  50F3               	movf	prodl,w,c
  4414  012DB4  0100               	movlb	0	; () banked
  4415  012DB6  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  4416  012DB8  6ED9               	movwf	fsr2l,c
  4417  012DBA  50F4               	movf	prodh,w,c
  4418  012DBC  0100               	movlb	0	; () banked
  4419  012DBE  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4420  012DC0  6EDA               	movwf	fsr2h,c
  4421  012DC2  0100               	movlb	0	; () banked
  4422  012DC4  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4423  012DC6  0980               	iorlw	128
  4424  012DC8  6EDF               	movwf	indf2,c
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4428  012DCA  0100               	movlb	0	; () banked
  4429  012DCC  51E7               	movf	_lBufferY& (0+255),w,b
  4430  012DCE  0D02               	mullw	2
  4431  012DD0  0E00               	movlw	low _lCBuffer
  4432  012DD2  24F3               	addwf	prodl,w,c
  4433  012DD4  6ED9               	movwf	fsr2l,c
  4434  012DD6  0E02               	movlw	high _lCBuffer
  4435  012DD8  20F4               	addwfc	prodh,w,c
  4436  012DDA  6EDA               	movwf	fsr2h,c
  4437  012DDC  C0EA  FFDE         	movff	_gForecolour,postinc2
  4438  012DE0  C0EB  FFDD         	movff	_gForecolour+1,postdec2
  4439  012DE4                     l1047:
  4440                           
  4441                           ; BSR set to: 0
  4442                           ;Console.c: 354: }
  4443                           ;Console.c: 368: if(Console_IncrementCursor())
  4444                           
  4445                           ; BSR set to: 0
  4446  012DE4  EC55  F0AE         	call	_Console_IncrementCursor	;wreg free
  4447  012DE8  0900               	iorlw	0
  4448  012DEA  B4D8               	btfsc	status,2,c
  4449  012DEC  0012               	return	
  4450                           
  4451                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4452  012DEE  C073  F070         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4453  012DF2  0E7F               	movlw	127
  4454  012DF4  0100               	movlb	0	; () banked
  4455  012DF6  1770               	andwf	??_Console_PrintChar& (0+255),f,b
  4456  012DF8  0100               	movlb	0	; () banked
  4457  012DFA  51E7               	movf	_lBufferY& (0+255),w,b
  4458  012DFC  0D14               	mullw	20
  4459  012DFE  0E85               	movlw	low _lBuffer
  4460  012E00  0100               	movlb	0	; () banked
  4461  012E02  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4462  012E04  0E02               	movlw	high _lBuffer
  4463  012E06  0100               	movlb	0	; () banked
  4464  012E08  6F72               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4465  012E0A  50F3               	movf	prodl,w,c
  4466  012E0C  0100               	movlb	0	; () banked
  4467  012E0E  2771               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4468  012E10  50F4               	movf	prodh,w,c
  4469  012E12  0100               	movlb	0	; () banked
  4470  012E14  2372               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4471  012E16  0100               	movlb	0	; () banked
  4472  012E18  51E8               	movf	_lBufferX& (0+255),w,b
  4473  012E1A  0D01               	mullw	1
  4474  012E1C  50F3               	movf	prodl,w,c
  4475  012E1E  0100               	movlb	0	; () banked
  4476  012E20  2571               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4477  012E22  6ED9               	movwf	fsr2l,c
  4478  012E24  50F4               	movf	prodh,w,c
  4479  012E26  0100               	movlb	0	; () banked
  4480  012E28  2172               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4481  012E2A  6EDA               	movwf	fsr2h,c
  4482  012E2C  50DF               	movf	indf2,w,c
  4483  012E2E  0B7F               	andlw	127
  4484  012E30  0100               	movlb	0	; () banked
  4485  012E32  1970               	xorwf	??_Console_PrintChar& (0+255),w,b
  4486  012E34  B4D8               	btfsc	status,2,c
  4487  012E36  0012               	return	
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4491  012E38  0E01               	movlw	1
  4492  012E3A  0100               	movlb	0	; () banked
  4493  012E3C  6FEC               	movwf	_change& (0+255),b
  4494                           
  4495                           ; BSR set to: 0
  4496  012E3E  0100               	movlb	0	; () banked
  4497  012E40  51E7               	movf	_lBufferY& (0+255),w,b
  4498  012E42  0D14               	mullw	20
  4499  012E44  0E85               	movlw	low _lBuffer
  4500  012E46  0100               	movlb	0	; () banked
  4501  012E48  6F70               	movwf	??_Console_PrintChar& (0+255),b
  4502  012E4A  0E02               	movlw	high _lBuffer
  4503  012E4C  0100               	movlb	0	; () banked
  4504  012E4E  6F71               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4505  012E50  50F3               	movf	prodl,w,c
  4506  012E52  0100               	movlb	0	; () banked
  4507  012E54  2770               	addwf	??_Console_PrintChar& (0+255),f,b
  4508  012E56  50F4               	movf	prodh,w,c
  4509  012E58  0100               	movlb	0	; () banked
  4510  012E5A  2371               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4511  012E5C  0100               	movlb	0	; () banked
  4512  012E5E  51E8               	movf	_lBufferX& (0+255),w,b
  4513  012E60  0D01               	mullw	1
  4514  012E62  50F3               	movf	prodl,w,c
  4515  012E64  0100               	movlb	0	; () banked
  4516  012E66  2570               	addwf	??_Console_PrintChar& (0+255),w,b
  4517  012E68  6ED9               	movwf	fsr2l,c
  4518  012E6A  50F4               	movf	prodh,w,c
  4519  012E6C  0100               	movlb	0	; () banked
  4520  012E6E  2171               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4521  012E70  6EDA               	movwf	fsr2h,c
  4522  012E72  0100               	movlb	0	; () banked
  4523  012E74  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4524  012E76  0980               	iorlw	128
  4525  012E78  6EDF               	movwf	indf2,c
  4526                           
  4527                           ; BSR set to: 0
  4528                           ;Console.c: 372: };
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;Console.c: 371: return;
  4532                           
  4533                           ; BSR set to: 0
  4534                           
  4535                           ; BSR set to: 0
  4536  012E7A  0012               	return	
  4537  012E7C                     l1036:
  4538                           
  4539                           ; BSR set to: 0
  4540  012E7C  0100               	movlb	0	; () banked
  4541  012E7E  5173               	movf	Console_PrintChar@pInput& (0+255),w,b
  4542                           
  4543                           ; Switch size 1, requested type "space"
  4544                           ; Number of cases is 8, Range of values is 7 to 35
  4545                           ; switch strategies available:
  4546                           ; Name         Instructions Cycles
  4547                           ; simple_byte           25    13 (average)
  4548                           ;	Chosen strategy is simple_byte
  4549  012E80  0A07               	xorlw	7	; case 7
  4550  012E82  B4D8               	btfsc	status,2,c
  4551  012E84  D756               	goto	l1043
  4552  012E86  0A0F               	xorlw	15	; case 8
  4553  012E88  B4D8               	btfsc	status,2,c
  4554  012E8A  D74A               	goto	l1040
  4555  012E8C  0A01               	xorlw	1	; case 9
  4556  012E8E  B4D8               	btfsc	status,2,c
  4557  012E90  D74D               	goto	l1042
  4558  012E92  0A03               	xorlw	3	; case 10
  4559  012E94  B4D8               	btfsc	status,2,c
  4560  012E96  D741               	goto	l1037
  4561  012E98  0A06               	xorlw	6	; case 12
  4562  012E9A  B4D8               	btfsc	status,2,c
  4563  012E9C  D744               	goto	l1041
  4564  012E9E  0A01               	xorlw	1	; case 13
  4565  012EA0  B4D8               	btfsc	status,2,c
  4566  012EA2  D73B               	goto	l1037
  4567  012EA4  0A2D               	xorlw	45	; case 32
  4568  012EA6  B4D8               	btfsc	status,2,c
  4569  012EA8  D74A               	goto	l1045
  4570  012EAA  0A03               	xorlw	3	; case 35
  4571  012EAC  B4D8               	btfsc	status,2,c
  4572  012EAE  D744               	goto	l1044
  4573  012EB0  D746               	goto	l1045
  4574  012EB2                     __end_of_Console_PrintChar:
  4575                           	opt stack 0
  4576                           tosu	equ	0xFFF
  4577                           tosh	equ	0xFFE
  4578                           tosl	equ	0xFFD
  4579                           pclath	equ	0xFFA
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           postinc0	equ	0xFEE
  4587                           wreg	equ	0xFE8
  4588                           postdec1	equ	0xFE5
  4589                           fsr1h	equ	0xFE2
  4590                           fsr1l	equ	0xFE1
  4591                           indf2	equ	0xFDF
  4592                           postinc2	equ	0xFDE
  4593                           postdec2	equ	0xFDD
  4594                           fsr2h	equ	0xFDA
  4595                           fsr2l	equ	0xFD9
  4596                           status	equ	0xFD8
  4597                           
  4598 ;; *************** function _Console_Tab *****************
  4599 ;; Defined at:
  4600 ;;		line 260 in file "Library/Console.c"
  4601 ;; Parameters:    Size  Location     Type
  4602 ;;		None
  4603 ;; Auto vars:     Size  Location     Type
  4604 ;;  c               1   15[BANK0 ] unsigned char 
  4605 ;;  i               1   14[BANK0 ] unsigned char 
  4606 ;;  t               1   13[BANK0 ] unsigned char 
  4607 ;; Return value:  Size  Location     Type
  4608 ;;                  1    wreg      void 
  4609 ;; Registers used:
  4610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;Total ram usage:        8 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    9
  4623 ;; This function calls:
  4624 ;;		_Console_ClearCursor
  4625 ;;		_Console_IncrementCursor
  4626 ;;		___awdiv
  4627 ;; This function is called by:
  4628 ;;		_Console_PrintChar
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text4
  4633  014788                     __ptext4:
  4634                           	opt stack 0
  4635  014788                     _Console_Tab:
  4636                           	opt stack 18
  4637                           
  4638                           ;Console.c: 262: UINT8 i = 0;
  4639                           
  4640                           ;incstack = 0
  4641  014788  0E00               	movlw	0
  4642  01478A  0100               	movlb	0	; () banked
  4643  01478C  6F6E               	movwf	Console_Tab@i& (0+255),b
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4647  01478E  0EFA               	movlw	250
  4648  014790  2446               	addwf	_gCursor,w,c
  4649  014792  0100               	movlb	0	; () banked
  4650  014794  6F60               	movwf	___awdiv@dividend& (0+255),b
  4651  014796  0EFF               	movlw	255
  4652  014798  2047               	addwfc	_gCursor+1,w,c
  4653  01479A  0100               	movlb	0	; () banked
  4654  01479C  6F61               	movwf	(___awdiv@dividend+1)& (0+255),b
  4655  01479E  0E00               	movlw	0
  4656  0147A0  0100               	movlb	0	; () banked
  4657  0147A2  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4658  0147A4  0E06               	movlw	6
  4659  0147A6  6F62               	movwf	___awdiv@divisor& (0+255),b
  4660  0147A8  EC25  F0A4         	call	___awdiv	;wreg free
  4661  0147AC  0100               	movlb	0	; () banked
  4662  0147AE  5160               	movf	?___awdiv& (0+255),w,b
  4663  0147B0  0100               	movlb	0	; () banked
  4664  0147B2  6F6F               	movwf	Console_Tab@c& (0+255),b
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;Console.c: 264: UINT8 t = c/4;
  4668  0147B4  C06F  F060         	movff	Console_Tab@c,___awdiv@dividend
  4669  0147B8  0100               	movlb	0	; () banked
  4670  0147BA  6B61               	clrf	(___awdiv@dividend+1)& (0+255),b
  4671  0147BC  0E00               	movlw	0
  4672  0147BE  0100               	movlb	0	; () banked
  4673  0147C0  6F63               	movwf	(___awdiv@divisor+1)& (0+255),b
  4674  0147C2  0E04               	movlw	4
  4675  0147C4  6F62               	movwf	___awdiv@divisor& (0+255),b
  4676  0147C6  EC25  F0A4         	call	___awdiv	;wreg free
  4677  0147CA  0100               	movlb	0	; () banked
  4678  0147CC  5160               	movf	?___awdiv& (0+255),w,b
  4679  0147CE  0100               	movlb	0	; () banked
  4680  0147D0  6F6D               	movwf	Console_Tab@t& (0+255),b
  4681                           
  4682                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4683  0147D2  0E00               	movlw	0
  4684  0147D4  0100               	movlb	0	; () banked
  4685  0147D6  6F6E               	movwf	Console_Tab@i& (0+255),b
  4686  0147D8  D006               	goto	l1009
  4687  0147DA                     
  4688                           ; BSR set to: 0
  4689                           ;Console.c: 266: {
  4690                           ;Console.c: 267: Console_ClearCursor();
  4691                           
  4692                           ; BSR set to: 0
  4693  0147DA  EC81  F0B1         	call	_Console_ClearCursor	;wreg free
  4694                           
  4695                           ;Console.c: 268: Console_IncrementCursor();
  4696  0147DE  EC55  F0AE         	call	_Console_IncrementCursor	;wreg free
  4697  0147E2  0100               	movlb	0	; () banked
  4698  0147E4  2B6E               	incf	Console_Tab@i& (0+255),f,b
  4699  0147E6                     l1009:
  4700                           
  4701                           ; BSR set to: 0
  4702                           
  4703                           ; BSR set to: 0
  4704  0147E6  0100               	movlb	0	; () banked
  4705  0147E8  516D               	movf	Console_Tab@t& (0+255),w,b
  4706  0147EA  0D04               	mullw	4
  4707  0147EC  1EF3               	comf	prodl,f,c
  4708  0147EE  1EF4               	comf	prodh,f,c
  4709  0147F0  4AF3               	infsnz	prodl,f,c
  4710  0147F2  2AF4               	incf	prodh,f,c
  4711  0147F4  0100               	movlb	0	; () banked
  4712  0147F6  516F               	movf	Console_Tab@c& (0+255),w,b
  4713  0147F8  0100               	movlb	0	; () banked
  4714  0147FA  6F68               	movwf	??_Console_Tab& (0+255),b
  4715  0147FC  6B69               	clrf	(??_Console_Tab+1)& (0+255),b
  4716  0147FE  50F3               	movf	prodl,w,c
  4717  014800  0100               	movlb	0	; () banked
  4718  014802  2768               	addwf	??_Console_Tab& (0+255),f,b
  4719  014804  50F4               	movf	prodh,w,c
  4720  014806  0100               	movlb	0	; () banked
  4721  014808  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4722  01480A  0100               	movlb	0	; () banked
  4723  01480C  1F68               	comf	??_Console_Tab& (0+255),f,b
  4724  01480E  1F69               	comf	(??_Console_Tab+1)& (0+255),f,b
  4725  014810  4B68               	infsnz	??_Console_Tab& (0+255),f,b
  4726  014812  2B69               	incf	(??_Console_Tab+1)& (0+255),f,b
  4727  014814  0E04               	movlw	4
  4728  014816  0100               	movlb	0	; () banked
  4729  014818  2768               	addwf	??_Console_Tab& (0+255),f,b
  4730  01481A  0E00               	movlw	0
  4731  01481C  2369               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4732  01481E  0100               	movlb	0	; () banked
  4733  014820  516E               	movf	Console_Tab@i& (0+255),w,b
  4734  014822  0100               	movlb	0	; () banked
  4735  014824  6F6A               	movwf	(??_Console_Tab+2)& (0+255),b
  4736  014826  6B6B               	clrf	(??_Console_Tab+3)& (0+255),b
  4737  014828  0100               	movlb	0	; () banked
  4738  01482A  5168               	movf	??_Console_Tab& (0+255),w,b
  4739  01482C  0100               	movlb	0	; () banked
  4740  01482E  5D6A               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4741  014830  0100               	movlb	0	; () banked
  4742  014832  516B               	movf	(??_Console_Tab+3)& (0+255),w,b
  4743  014834  0A80               	xorlw	128
  4744  014836  0100               	movlb	0	; () banked
  4745  014838  6F6C               	movwf	(??_Console_Tab+4)& (0+255),b
  4746  01483A  0100               	movlb	0	; () banked
  4747  01483C  5169               	movf	(??_Console_Tab+1)& (0+255),w,b
  4748  01483E  0A80               	xorlw	128
  4749  014840  0100               	movlb	0	; () banked
  4750  014842  596C               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4751  014844  B0D8               	btfsc	status,0,c
  4752  014846  0012               	return	
  4753  014848  D7C8               	goto	l1010
  4754  01484A                     __end_of_Console_Tab:
  4755                           	opt stack 0
  4756                           tosu	equ	0xFFF
  4757                           tosh	equ	0xFFE
  4758                           tosl	equ	0xFFD
  4759                           pclath	equ	0xFFA
  4760                           tblptru	equ	0xFF8
  4761                           tblptrh	equ	0xFF7
  4762                           tblptrl	equ	0xFF6
  4763                           tablat	equ	0xFF5
  4764                           prodh	equ	0xFF4
  4765                           prodl	equ	0xFF3
  4766                           postinc0	equ	0xFEE
  4767                           wreg	equ	0xFE8
  4768                           postdec1	equ	0xFE5
  4769                           fsr1h	equ	0xFE2
  4770                           fsr1l	equ	0xFE1
  4771                           indf2	equ	0xFDF
  4772                           postinc2	equ	0xFDE
  4773                           postdec2	equ	0xFDD
  4774                           fsr2h	equ	0xFDA
  4775                           fsr2l	equ	0xFD9
  4776                           status	equ	0xFD8
  4777                           
  4778 ;; *************** function ___awdiv *****************
  4779 ;; Defined at:
  4780 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4781 ;; Parameters:    Size  Location     Type
  4782 ;;  dividend        2    0[BANK0 ] int 
  4783 ;;  divisor         2    2[BANK0 ] int 
  4784 ;; Auto vars:     Size  Location     Type
  4785 ;;  quotient        2    6[BANK0 ] int 
  4786 ;;  sign            1    5[BANK0 ] unsigned char 
  4787 ;;  counter         1    4[BANK0 ] unsigned char 
  4788 ;; Return value:  Size  Location     Type
  4789 ;;                  2    0[BANK0 ] int 
  4790 ;; Registers used:
  4791 ;;		wreg, status,2, status,0
  4792 ;; Tracked objects:
  4793 ;;		On entry : 0/0
  4794 ;;		On exit  : 0/0
  4795 ;;		Unchanged: 0/0
  4796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4797 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4798 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4799 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4800 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4801 ;;Total ram usage:        8 bytes
  4802 ;; Hardware stack levels used:    1
  4803 ;; Hardware stack levels required when called:    7
  4804 ;; This function calls:
  4805 ;;		Nothing
  4806 ;; This function is called by:
  4807 ;;		_Console_Tab
  4808 ;; This function uses a non-reentrant model
  4809 ;;
  4810                           
  4811                           	psect	text5
  4812  01484A                     __ptext5:
  4813                           	opt stack 0
  4814  01484A                     ___awdiv:
  4815                           	opt stack 19
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;incstack = 0
  4819  01484A  0E00               	movlw	0
  4820  01484C  0100               	movlb	0	; () banked
  4821  01484E  6F65               	movwf	___awdiv@sign& (0+255),b
  4822                           
  4823                           ; BSR set to: 0
  4824  014850  0100               	movlb	0	; () banked
  4825  014852  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4826  014854  D008               	goto	l2245
  4827                           
  4828                           ; BSR set to: 0
  4829  014856  0100               	movlb	0	; () banked
  4830  014858  6D62               	negf	___awdiv@divisor& (0+255),b
  4831  01485A  1F63               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4832  01485C  B0D8               	btfsc	status,0,c
  4833  01485E  2B63               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4834                           
  4835                           ; BSR set to: 0
  4836  014860  0E01               	movlw	1
  4837  014862  0100               	movlb	0	; () banked
  4838  014864  6F65               	movwf	___awdiv@sign& (0+255),b
  4839  014866                     l2245:
  4840                           
  4841                           ; BSR set to: 0
  4842                           
  4843                           ; BSR set to: 0
  4844  014866  0100               	movlb	0	; () banked
  4845  014868  AF61               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4846  01486A  D008               	goto	l2246
  4847                           
  4848                           ; BSR set to: 0
  4849  01486C  0100               	movlb	0	; () banked
  4850  01486E  6D60               	negf	___awdiv@dividend& (0+255),b
  4851  014870  1F61               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4852  014872  B0D8               	btfsc	status,0,c
  4853  014874  2B61               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4854                           
  4855                           ; BSR set to: 0
  4856  014876  0E01               	movlw	1
  4857  014878  0100               	movlb	0	; () banked
  4858  01487A  1B65               	xorwf	___awdiv@sign& (0+255),f,b
  4859  01487C                     l2246:
  4860                           
  4861                           ; BSR set to: 0
  4862                           
  4863                           ; BSR set to: 0
  4864  01487C  0E00               	movlw	0
  4865  01487E  0100               	movlb	0	; () banked
  4866  014880  6F67               	movwf	(___awdiv@quotient+1)& (0+255),b
  4867  014882  0E00               	movlw	0
  4868  014884  6F66               	movwf	___awdiv@quotient& (0+255),b
  4869                           
  4870                           ; BSR set to: 0
  4871  014886  0100               	movlb	0	; () banked
  4872  014888  5162               	movf	___awdiv@divisor& (0+255),w,b
  4873  01488A  0100               	movlb	0	; () banked
  4874  01488C  1163               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4875  01488E  B4D8               	btfsc	status,2,c
  4876  014890  D02C               	goto	l2253
  4877                           
  4878                           ; BSR set to: 0
  4879  014892  0E01               	movlw	1
  4880  014894  0100               	movlb	0	; () banked
  4881  014896  6F64               	movwf	___awdiv@counter& (0+255),b
  4882  014898  D006               	goto	l2248
  4883  01489A                     
  4884                           ; BSR set to: 0
  4885                           
  4886                           ; BSR set to: 0
  4887  01489A  0100               	movlb	0	; () banked
  4888  01489C  90D8               	bcf	status,0,c
  4889  01489E  3762               	rlcf	___awdiv@divisor& (0+255),f,b
  4890  0148A0  3763               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4891  0148A2  0100               	movlb	0	; () banked
  4892  0148A4  2B64               	incf	___awdiv@counter& (0+255),f,b
  4893  0148A6                     l2248:
  4894                           
  4895                           ; BSR set to: 0
  4896                           
  4897                           ; BSR set to: 0
  4898  0148A6  0100               	movlb	0	; () banked
  4899  0148A8  AF63               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4900  0148AA  D7F7               	goto	l2249
  4901  0148AC                     u9460:
  4902                           
  4903                           ; BSR set to: 0
  4904                           
  4905                           ; BSR set to: 0
  4906                           
  4907                           ; BSR set to: 0
  4908  0148AC  0100               	movlb	0	; () banked
  4909  0148AE  90D8               	bcf	status,0,c
  4910  0148B0  3766               	rlcf	___awdiv@quotient& (0+255),f,b
  4911  0148B2  3767               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4912                           
  4913                           ; BSR set to: 0
  4914  0148B4  0100               	movlb	0	; () banked
  4915  0148B6  5162               	movf	___awdiv@divisor& (0+255),w,b
  4916  0148B8  0100               	movlb	0	; () banked
  4917  0148BA  5D60               	subwf	___awdiv@dividend& (0+255),w,b
  4918  0148BC  0100               	movlb	0	; () banked
  4919  0148BE  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4920  0148C0  0100               	movlb	0	; () banked
  4921  0148C2  5961               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4922  0148C4  A0D8               	btfss	status,0,c
  4923  0148C6  D00A               	goto	l2252
  4924                           
  4925                           ; BSR set to: 0
  4926  0148C8  0100               	movlb	0	; () banked
  4927  0148CA  5162               	movf	___awdiv@divisor& (0+255),w,b
  4928  0148CC  0100               	movlb	0	; () banked
  4929  0148CE  5F60               	subwf	___awdiv@dividend& (0+255),f,b
  4930  0148D0  0100               	movlb	0	; () banked
  4931  0148D2  5163               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4932  0148D4  0100               	movlb	0	; () banked
  4933  0148D6  5B61               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4934                           
  4935                           ; BSR set to: 0
  4936  0148D8  0100               	movlb	0	; () banked
  4937  0148DA  8166               	bsf	___awdiv@quotient& (0+255),0,b
  4938  0148DC                     l2252:
  4939                           
  4940                           ; BSR set to: 0
  4941                           
  4942                           ; BSR set to: 0
  4943  0148DC  0100               	movlb	0	; () banked
  4944  0148DE  90D8               	bcf	status,0,c
  4945  0148E0  3363               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4946  0148E2  3362               	rrcf	___awdiv@divisor& (0+255),f,b
  4947                           
  4948                           ; BSR set to: 0
  4949  0148E4  0100               	movlb	0	; () banked
  4950  0148E6  2F64               	decfsz	___awdiv@counter& (0+255),f,b
  4951  0148E8  D7E1               	goto	u9460
  4952  0148EA                     l2253:
  4953                           
  4954                           ; BSR set to: 0
  4955                           
  4956                           ; BSR set to: 0
  4957                           
  4958                           ; BSR set to: 0
  4959  0148EA  0100               	movlb	0	; () banked
  4960  0148EC  5165               	movf	___awdiv@sign& (0+255),w,b
  4961  0148EE  0100               	movlb	0	; () banked
  4962  0148F0  B4D8               	btfsc	status,2,c
  4963  0148F2  D005               	goto	l2254
  4964                           
  4965                           ; BSR set to: 0
  4966  0148F4  0100               	movlb	0	; () banked
  4967  0148F6  6D66               	negf	___awdiv@quotient& (0+255),b
  4968  0148F8  1F67               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4969  0148FA  B0D8               	btfsc	status,0,c
  4970  0148FC  2B67               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4971  0148FE                     l2254:
  4972                           
  4973                           ; BSR set to: 0
  4974                           
  4975                           ; BSR set to: 0
  4976  0148FE  C066  F060         	movff	___awdiv@quotient,?___awdiv
  4977  014902  C067  F061         	movff	___awdiv@quotient+1,?___awdiv+1
  4978  014906  0012               	return	
  4979  014908                     __end_of___awdiv:
  4980                           	opt stack 0
  4981                           tosu	equ	0xFFF
  4982                           tosh	equ	0xFFE
  4983                           tosl	equ	0xFFD
  4984                           pclath	equ	0xFFA
  4985                           tblptru	equ	0xFF8
  4986                           tblptrh	equ	0xFF7
  4987                           tblptrl	equ	0xFF6
  4988                           tablat	equ	0xFF5
  4989                           prodh	equ	0xFF4
  4990                           prodl	equ	0xFF3
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           postdec1	equ	0xFE5
  4994                           fsr1h	equ	0xFE2
  4995                           fsr1l	equ	0xFE1
  4996                           indf2	equ	0xFDF
  4997                           postinc2	equ	0xFDE
  4998                           postdec2	equ	0xFDD
  4999                           fsr2h	equ	0xFDA
  5000                           fsr2l	equ	0xFD9
  5001                           status	equ	0xFD8
  5002                           
  5003 ;; *************** function _Console_IncrementCursor *****************
  5004 ;; Defined at:
  5005 ;;		line 243 in file "Library/Console.c"
  5006 ;; Parameters:    Size  Location     Type
  5007 ;;		None
  5008 ;; Auto vars:     Size  Location     Type
  5009 ;;		None
  5010 ;; Return value:  Size  Location     Type
  5011 ;;                  1    wreg      unsigned char 
  5012 ;; Registers used:
  5013 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5014 ;; Tracked objects:
  5015 ;;		On entry : 0/0
  5016 ;;		On exit  : 0/0
  5017 ;;		Unchanged: 0/0
  5018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5021 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5022 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5023 ;;Total ram usage:        2 bytes
  5024 ;; Hardware stack levels used:    1
  5025 ;; Hardware stack levels required when called:    8
  5026 ;; This function calls:
  5027 ;;		_Console_FormFeed
  5028 ;;		_Console_NewLine
  5029 ;; This function is called by:
  5030 ;;		_Console_Tab
  5031 ;;		_Console_PrintChar
  5032 ;; This function uses a non-reentrant model
  5033 ;;
  5034                           
  5035                           	psect	text6
  5036  015CAA                     __ptext6:
  5037                           	opt stack 0
  5038  015CAA                     _Console_IncrementCursor:
  5039                           	opt stack 18
  5040                           
  5041                           ;Console.c: 246: lBufferX += 1;
  5042                           
  5043                           ; BSR set to: 0
  5044                           ;incstack = 0
  5045  015CAA  0100               	movlb	0	; () banked
  5046  015CAC  2BE8               	incf	_lBufferX& (0+255),f,b
  5047                           
  5048                           ; BSR set to: 0
  5049                           ;Console.c: 248: gCursor.x += 6;
  5050  015CAE  0E06               	movlw	6
  5051  015CB0  2646               	addwf	_gCursor,f,c
  5052  015CB2  0E00               	movlw	0
  5053  015CB4  2247               	addwfc	_gCursor+1,f,c
  5054                           
  5055                           ; BSR set to: 0
  5056                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5057  015CB6  0E06               	movlw	6
  5058  015CB8  2446               	addwf	_gCursor,w,c
  5059  015CBA  0100               	movlb	0	; () banked
  5060  015CBC  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5061  015CBE  0E00               	movlw	0
  5062  015CC0  2047               	addwfc	_gCursor+1,w,c
  5063  015CC2  0100               	movlb	0	; () banked
  5064  015CC4  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5065  015CC6  0100               	movlb	0	; () banked
  5066  015CC8  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5067  015CCA  D009               	goto	l1004
  5068  015CCC  0100               	movlb	0	; () banked
  5069  015CCE  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5070  015CD0  E104               	bnz	u9370
  5071  015CD2  0E80               	movlw	128
  5072  015CD4  0100               	movlb	0	; () banked
  5073  015CD6  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5074  015CD8  B0D8               	btfsc	status,0,c
  5075  015CDA                     u9370:
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;Console.c: 250: Console_NewLine();
  5079  015CDA  EC97  F0A8         	call	_Console_NewLine	;wreg free
  5080  015CDE                     l1004:
  5081                           
  5082                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5083  015CDE  0E08               	movlw	8
  5084  015CE0  2448               	addwf	_gCursor+2,w,c
  5085  015CE2  0100               	movlb	0	; () banked
  5086  015CE4  6F64               	movwf	??_Console_IncrementCursor& (0+255),b
  5087  015CE6  0E00               	movlw	0
  5088  015CE8  2049               	addwfc	_gCursor+3,w,c
  5089  015CEA  0100               	movlb	0	; () banked
  5090  015CEC  6F65               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5091  015CEE  0100               	movlb	0	; () banked
  5092  015CF0  BF65               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5093  015CF2  D00C               	goto	l1005
  5094  015CF4  0100               	movlb	0	; () banked
  5095  015CF6  5165               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5096  015CF8  E105               	bnz	u9380
  5097  015CFA  0E80               	movlw	128
  5098  015CFC  0100               	movlb	0	; () banked
  5099  015CFE  5D64               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5100  015D00  A0D8               	btfss	status,0,c
  5101  015D02  D004               	goto	l1005
  5102  015D04                     u9380:
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;Console.c: 252: {
  5106                           ;Console.c: 253: Console_FormFeed();
  5107  015D04  EC1B  F0AA         	call	_Console_FormFeed	;wreg free
  5108                           
  5109                           ;Console.c: 254: return 1;
  5110  015D08  0E01               	movlw	1
  5111  015D0A  0012               	return	
  5112  015D0C                     l1005:
  5113                           
  5114                           ;Console.c: 255: }
  5115                           ;Console.c: 257: return 0;
  5116  015D0C  0E00               	movlw	0
  5117  015D0E  0012               	return	
  5118  015D10                     __end_of_Console_IncrementCursor:
  5119                           	opt stack 0
  5120                           tosu	equ	0xFFF
  5121                           tosh	equ	0xFFE
  5122                           tosl	equ	0xFFD
  5123                           pclath	equ	0xFFA
  5124                           tblptru	equ	0xFF8
  5125                           tblptrh	equ	0xFF7
  5126                           tblptrl	equ	0xFF6
  5127                           tablat	equ	0xFF5
  5128                           prodh	equ	0xFF4
  5129                           prodl	equ	0xFF3
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           postdec1	equ	0xFE5
  5133                           fsr1h	equ	0xFE2
  5134                           fsr1l	equ	0xFE1
  5135                           indf2	equ	0xFDF
  5136                           postinc2	equ	0xFDE
  5137                           postdec2	equ	0xFDD
  5138                           fsr2h	equ	0xFDA
  5139                           fsr2l	equ	0xFD9
  5140                           status	equ	0xFD8
  5141                           
  5142 ;; *************** function _Console_NewLine *****************
  5143 ;; Defined at:
  5144 ;;		line 175 in file "Library/Console.c"
  5145 ;; Parameters:    Size  Location     Type
  5146 ;;		None
  5147 ;; Auto vars:     Size  Location     Type
  5148 ;;		None
  5149 ;; Return value:  Size  Location     Type
  5150 ;;                  1    wreg      void 
  5151 ;; Registers used:
  5152 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5153 ;; Tracked objects:
  5154 ;;		On entry : 0/0
  5155 ;;		On exit  : 0/0
  5156 ;;		Unchanged: 0/0
  5157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;Total ram usage:        2 bytes
  5163 ;; Hardware stack levels used:    1
  5164 ;; Hardware stack levels required when called:    7
  5165 ;; This function calls:
  5166 ;;		Nothing
  5167 ;; This function is called by:
  5168 ;;		_Console_IncrementCursor
  5169 ;;		_Console_PrintChar
  5170 ;; This function uses a non-reentrant model
  5171 ;;
  5172                           
  5173                           	psect	text7
  5174  01512E                     __ptext7:
  5175                           	opt stack 0
  5176  01512E                     _Console_NewLine:
  5177                           	opt stack 18
  5178                           
  5179                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5180                           
  5181                           ;incstack = 0
  5182  01512E  D03E               	goto	l983
  5183  015130                     
  5184                           ;Console.c: 179: {
  5185                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5186  015130  0100               	movlb	0	; () banked
  5187  015132  51E7               	movf	_lBufferY& (0+255),w,b
  5188  015134  0D14               	mullw	20
  5189  015136  0E85               	movlw	low _lBuffer
  5190  015138  0100               	movlb	0	; () banked
  5191  01513A  6F60               	movwf	??_Console_NewLine& (0+255),b
  5192  01513C  0E02               	movlw	high _lBuffer
  5193  01513E  0100               	movlb	0	; () banked
  5194  015140  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5195  015142  50F3               	movf	prodl,w,c
  5196  015144  0100               	movlb	0	; () banked
  5197  015146  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5198  015148  50F4               	movf	prodh,w,c
  5199  01514A  0100               	movlb	0	; () banked
  5200  01514C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5201  01514E  0100               	movlb	0	; () banked
  5202  015150  51E8               	movf	_lBufferX& (0+255),w,b
  5203  015152  0D01               	mullw	1
  5204  015154  50F3               	movf	prodl,w,c
  5205  015156  0100               	movlb	0	; () banked
  5206  015158  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5207  01515A  6ED9               	movwf	fsr2l,c
  5208  01515C  50F4               	movf	prodh,w,c
  5209  01515E  0100               	movlb	0	; () banked
  5210  015160  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5211  015162  6EDA               	movwf	fsr2h,c
  5212  015164  50DF               	movf	indf2,w,c
  5213  015166  B4D8               	btfsc	status,2,c
  5214  015168  D01F               	goto	l985
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5218  01516A  0E01               	movlw	1
  5219  01516C  0100               	movlb	0	; () banked
  5220  01516E  6FEC               	movwf	_change& (0+255),b
  5221                           
  5222                           ; BSR set to: 0
  5223  015170  0100               	movlb	0	; () banked
  5224  015172  51E7               	movf	_lBufferY& (0+255),w,b
  5225  015174  0D14               	mullw	20
  5226  015176  0E85               	movlw	low _lBuffer
  5227  015178  0100               	movlb	0	; () banked
  5228  01517A  6F60               	movwf	??_Console_NewLine& (0+255),b
  5229  01517C  0E02               	movlw	high _lBuffer
  5230  01517E  0100               	movlb	0	; () banked
  5231  015180  6F61               	movwf	(??_Console_NewLine+1)& (0+255),b
  5232  015182  50F3               	movf	prodl,w,c
  5233  015184  0100               	movlb	0	; () banked
  5234  015186  2760               	addwf	??_Console_NewLine& (0+255),f,b
  5235  015188  50F4               	movf	prodh,w,c
  5236  01518A  0100               	movlb	0	; () banked
  5237  01518C  2361               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5238  01518E  0100               	movlb	0	; () banked
  5239  015190  51E8               	movf	_lBufferX& (0+255),w,b
  5240  015192  0D01               	mullw	1
  5241  015194  50F3               	movf	prodl,w,c
  5242  015196  0100               	movlb	0	; () banked
  5243  015198  2560               	addwf	??_Console_NewLine& (0+255),w,b
  5244  01519A  6ED9               	movwf	fsr2l,c
  5245  01519C  50F4               	movf	prodh,w,c
  5246  01519E  0100               	movlb	0	; () banked
  5247  0151A0  2161               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5248  0151A2  6EDA               	movwf	fsr2h,c
  5249  0151A4  0E80               	movlw	128
  5250  0151A6  6EDF               	movwf	indf2,c
  5251  0151A8                     l985:
  5252                           
  5253                           ; BSR set to: 0
  5254                           ;Console.c: 182: lBufferX ++;
  5255                           
  5256                           ; BSR set to: 0
  5257  0151A8  0100               	movlb	0	; () banked
  5258  0151AA  2BE8               	incf	_lBufferX& (0+255),f,b
  5259  0151AC                     l983:
  5260                           
  5261                           ; BSR set to: 0
  5262  0151AC  0E13               	movlw	19
  5263  0151AE  0100               	movlb	0	; () banked
  5264  0151B0  65E8               	cpfsgt	_lBufferX& (0+255),b
  5265  0151B2  D7BE               	goto	l984
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;Console.c: 183: }
  5269                           ;Console.c: 185: lBufferX = 0;
  5270                           
  5271                           ; BSR set to: 0
  5272  0151B4  0E00               	movlw	0
  5273  0151B6  0100               	movlb	0	; () banked
  5274  0151B8  6FE8               	movwf	_lBufferX& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;Console.c: 186: lBufferY ++;
  5278  0151BA  0100               	movlb	0	; () banked
  5279  0151BC  2BE7               	incf	_lBufferY& (0+255),f,b
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;Console.c: 188: gCursor.y += 8;
  5283  0151BE  0E08               	movlw	8
  5284  0151C0  2648               	addwf	_gCursor+2,f,c
  5285  0151C2  0E00               	movlw	0
  5286  0151C4  2249               	addwfc	_gCursor+3,f,c
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;Console.c: 189: gCursor.x = 6;
  5290  0151C6  0E00               	movlw	0
  5291  0151C8  6E47               	movwf	_gCursor+1,c
  5292  0151CA  0E06               	movlw	6
  5293  0151CC  6E46               	movwf	_gCursor,c
  5294                           
  5295                           ; BSR set to: 0
  5296  0151CE  0012               	return		;funcret
  5297  0151D0                     __end_of_Console_NewLine:
  5298                           	opt stack 0
  5299                           tosu	equ	0xFFF
  5300                           tosh	equ	0xFFE
  5301                           tosl	equ	0xFFD
  5302                           pclath	equ	0xFFA
  5303                           tblptru	equ	0xFF8
  5304                           tblptrh	equ	0xFF7
  5305                           tblptrl	equ	0xFF6
  5306                           tablat	equ	0xFF5
  5307                           prodh	equ	0xFF4
  5308                           prodl	equ	0xFF3
  5309                           postinc0	equ	0xFEE
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           fsr1h	equ	0xFE2
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           fsr2h	equ	0xFDA
  5318                           fsr2l	equ	0xFD9
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function _Console_FormFeed *****************
  5322 ;; Defined at:
  5323 ;;		line 192 in file "Library/Console.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;		None
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  y               1    3[BANK0 ] unsigned char 
  5328 ;;  x               1    2[BANK0 ] unsigned char 
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  1    wreg      void 
  5331 ;; Registers used:
  5332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;Total ram usage:        4 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    7
  5345 ;; This function calls:
  5346 ;;		Nothing
  5347 ;; This function is called by:
  5348 ;;		_Console_IncrementCursor
  5349 ;;		_Console_PrintChar
  5350 ;; This function uses a non-reentrant model
  5351 ;;
  5352                           
  5353                           	psect	text8
  5354  015436                     __ptext8:
  5355                           	opt stack 0
  5356  015436                     _Console_FormFeed:
  5357                           	opt stack 18
  5358                           
  5359                           ;Console.c: 195: lBufferX = 0;
  5360                           
  5361                           ; BSR set to: 0
  5362                           ;incstack = 0
  5363  015436  0E00               	movlw	0
  5364  015438  0100               	movlb	0	; () banked
  5365  01543A  6FE8               	movwf	_lBufferX& (0+255),b
  5366                           
  5367                           ;Console.c: 196: lBufferY = 0;
  5368  01543C  0E00               	movlw	0
  5369  01543E  0100               	movlb	0	; () banked
  5370  015440  6FE7               	movwf	_lBufferY& (0+255),b
  5371                           
  5372                           ;Console.c: 197: UINT8 x, y;
  5373                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5374  015442  0E00               	movlw	0
  5375  015444  0100               	movlb	0	; () banked
  5376  015446  6F63               	movwf	Console_FormFeed@y& (0+255),b
  5377  015448                     l11818:
  5378                           
  5379                           ; BSR set to: 0
  5380  015448  0E0E               	movlw	14
  5381  01544A  0100               	movlb	0	; () banked
  5382  01544C  6563               	cpfsgt	Console_FormFeed@y& (0+255),b
  5383  01544E  D001               	goto	l990
  5384  015450  D02D               	goto	u9190
  5385  015452                     l990:
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5389                           
  5390                           ; BSR set to: 0
  5391  015452  0E00               	movlw	0
  5392  015454  0100               	movlb	0	; () banked
  5393  015456  6F62               	movwf	Console_FormFeed@x& (0+255),b
  5394  015458                     l11824:
  5395                           
  5396                           ; BSR set to: 0
  5397  015458  0E13               	movlw	19
  5398  01545A  0100               	movlb	0	; () banked
  5399  01545C  6562               	cpfsgt	Console_FormFeed@x& (0+255),b
  5400  01545E  D001               	goto	l992
  5401  015460  D022               	goto	u9180
  5402  015462                     l992:
  5403                           
  5404                           ; BSR set to: 0
  5405                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5406                           
  5407                           ; BSR set to: 0
  5408  015462  0E01               	movlw	1
  5409  015464  0100               	movlb	0	; () banked
  5410  015466  6FEC               	movwf	_change& (0+255),b
  5411                           
  5412                           ; BSR set to: 0
  5413  015468  0100               	movlb	0	; () banked
  5414  01546A  5163               	movf	Console_FormFeed@y& (0+255),w,b
  5415  01546C  0D14               	mullw	20
  5416  01546E  0E85               	movlw	low _lBuffer
  5417  015470  0100               	movlb	0	; () banked
  5418  015472  6F60               	movwf	??_Console_FormFeed& (0+255),b
  5419  015474  0E02               	movlw	high _lBuffer
  5420  015476  0100               	movlb	0	; () banked
  5421  015478  6F61               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5422  01547A  50F3               	movf	prodl,w,c
  5423  01547C  0100               	movlb	0	; () banked
  5424  01547E  2760               	addwf	??_Console_FormFeed& (0+255),f,b
  5425  015480  50F4               	movf	prodh,w,c
  5426  015482  0100               	movlb	0	; () banked
  5427  015484  2361               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5428  015486  0100               	movlb	0	; () banked
  5429  015488  5162               	movf	Console_FormFeed@x& (0+255),w,b
  5430  01548A  0D01               	mullw	1
  5431  01548C  50F3               	movf	prodl,w,c
  5432  01548E  0100               	movlb	0	; () banked
  5433  015490  2560               	addwf	??_Console_FormFeed& (0+255),w,b
  5434  015492  6ED9               	movwf	fsr2l,c
  5435  015494  50F4               	movf	prodh,w,c
  5436  015496  0100               	movlb	0	; () banked
  5437  015498  2161               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5438  01549A  6EDA               	movwf	fsr2h,c
  5439  01549C  0E80               	movlw	128
  5440  01549E  6EDF               	movwf	indf2,c
  5441                           
  5442                           ; BSR set to: 0
  5443  0154A0  0100               	movlb	0	; () banked
  5444  0154A2  2B62               	incf	Console_FormFeed@x& (0+255),f,b
  5445  0154A4  D7D9               	goto	l11824
  5446  0154A6                     u9180:
  5447                           
  5448                           ; BSR set to: 0
  5449                           
  5450                           ; BSR set to: 0
  5451  0154A6  0100               	movlb	0	; () banked
  5452  0154A8  2B63               	incf	Console_FormFeed@y& (0+255),f,b
  5453  0154AA  D7CE               	goto	l11818
  5454  0154AC                     u9190:
  5455                           
  5456                           ; BSR set to: 0
  5457                           ;Console.c: 204: clearall = 1;
  5458                           
  5459                           ; BSR set to: 0
  5460  0154AC  0E01               	movlw	1
  5461  0154AE  0100               	movlb	0	; () banked
  5462  0154B0  6FE9               	movwf	_clearall& (0+255),b
  5463                           
  5464                           ;Console.c: 205: gCursor.x = 6;
  5465  0154B2  0E00               	movlw	0
  5466  0154B4  6E47               	movwf	_gCursor+1,c
  5467  0154B6  0E06               	movlw	6
  5468  0154B8  6E46               	movwf	_gCursor,c
  5469                           
  5470                           ;Console.c: 206: gCursor.y = 6;
  5471  0154BA  0E00               	movlw	0
  5472  0154BC  6E49               	movwf	_gCursor+3,c
  5473  0154BE  0E06               	movlw	6
  5474  0154C0  6E48               	movwf	_gCursor+2,c
  5475                           
  5476                           ; BSR set to: 0
  5477  0154C2  0012               	return		;funcret
  5478  0154C4                     __end_of_Console_FormFeed:
  5479                           	opt stack 0
  5480                           tosu	equ	0xFFF
  5481                           tosh	equ	0xFFE
  5482                           tosl	equ	0xFFD
  5483                           pclath	equ	0xFFA
  5484                           tblptru	equ	0xFF8
  5485                           tblptrh	equ	0xFF7
  5486                           tblptrl	equ	0xFF6
  5487                           tablat	equ	0xFF5
  5488                           prodh	equ	0xFF4
  5489                           prodl	equ	0xFF3
  5490                           postinc0	equ	0xFEE
  5491                           wreg	equ	0xFE8
  5492                           postdec1	equ	0xFE5
  5493                           fsr1h	equ	0xFE2
  5494                           fsr1l	equ	0xFE1
  5495                           indf2	equ	0xFDF
  5496                           postinc2	equ	0xFDE
  5497                           postdec2	equ	0xFDD
  5498                           fsr2h	equ	0xFDA
  5499                           fsr2l	equ	0xFD9
  5500                           status	equ	0xFD8
  5501                           
  5502 ;; *************** function _Console_ResetCursor *****************
  5503 ;; Defined at:
  5504 ;;		line 297 in file "Library/Console.c"
  5505 ;; Parameters:    Size  Location     Type
  5506 ;;		None
  5507 ;; Auto vars:     Size  Location     Type
  5508 ;;		None
  5509 ;; Return value:  Size  Location     Type
  5510 ;;                  1    wreg      void 
  5511 ;; Registers used:
  5512 ;;		wreg, status,2
  5513 ;; Tracked objects:
  5514 ;;		On entry : 0/0
  5515 ;;		On exit  : 0/0
  5516 ;;		Unchanged: 0/0
  5517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5522 ;;Total ram usage:        0 bytes
  5523 ;; Hardware stack levels used:    1
  5524 ;; Hardware stack levels required when called:    7
  5525 ;; This function calls:
  5526 ;;		Nothing
  5527 ;; This function is called by:
  5528 ;;		_Console_PrintChar
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           	psect	text9
  5533  0167EC                     __ptext9:
  5534                           	opt stack 0
  5535  0167EC                     _Console_ResetCursor:
  5536                           	opt stack 20
  5537                           
  5538                           ;Console.c: 299: gCursor.x = 6;
  5539                           
  5540                           ; BSR set to: 0
  5541                           ;incstack = 0
  5542  0167EC  0E00               	movlw	0
  5543  0167EE  6E47               	movwf	_gCursor+1,c
  5544  0167F0  0E06               	movlw	6
  5545  0167F2  6E46               	movwf	_gCursor,c
  5546                           
  5547                           ;Console.c: 300: gCursor.y = 6;
  5548  0167F4  0E00               	movlw	0
  5549  0167F6  6E49               	movwf	_gCursor+3,c
  5550  0167F8  0E06               	movlw	6
  5551  0167FA  6E48               	movwf	_gCursor+2,c
  5552                           
  5553                           ;Console.c: 303: lBufferX = 0;
  5554  0167FC  0E00               	movlw	0
  5555  0167FE  0100               	movlb	0	; () banked
  5556  016800  6FE8               	movwf	_lBufferX& (0+255),b
  5557                           
  5558                           ;Console.c: 304: lBufferY = 0;
  5559  016802  0E00               	movlw	0
  5560  016804  0100               	movlb	0	; () banked
  5561  016806  6FE7               	movwf	_lBufferY& (0+255),b
  5562                           
  5563                           ; BSR set to: 0
  5564  016808  0012               	return		;funcret
  5565  01680A                     __end_of_Console_ResetCursor:
  5566                           	opt stack 0
  5567                           tosu	equ	0xFFF
  5568                           tosh	equ	0xFFE
  5569                           tosl	equ	0xFFD
  5570                           pclath	equ	0xFFA
  5571                           tblptru	equ	0xFF8
  5572                           tblptrh	equ	0xFF7
  5573                           tblptrl	equ	0xFF6
  5574                           tablat	equ	0xFF5
  5575                           prodh	equ	0xFF4
  5576                           prodl	equ	0xFF3
  5577                           postinc0	equ	0xFEE
  5578                           wreg	equ	0xFE8
  5579                           postdec1	equ	0xFE5
  5580                           fsr1h	equ	0xFE2
  5581                           fsr1l	equ	0xFE1
  5582                           indf2	equ	0xFDF
  5583                           postinc2	equ	0xFDE
  5584                           postdec2	equ	0xFDD
  5585                           fsr2h	equ	0xFDA
  5586                           fsr2l	equ	0xFD9
  5587                           status	equ	0xFD8
  5588                           
  5589 ;; *************** function _Console_Backspace *****************
  5590 ;; Defined at:
  5591 ;;		line 209 in file "Library/Console.c"
  5592 ;; Parameters:    Size  Location     Type
  5593 ;;		None
  5594 ;; Auto vars:     Size  Location     Type
  5595 ;;		None
  5596 ;; Return value:  Size  Location     Type
  5597 ;;                  1    wreg      void 
  5598 ;; Registers used:
  5599 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5600 ;; Tracked objects:
  5601 ;;		On entry : 0/0
  5602 ;;		On exit  : 0/0
  5603 ;;		Unchanged: 0/0
  5604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5609 ;;Total ram usage:        0 bytes
  5610 ;; Hardware stack levels used:    1
  5611 ;; Hardware stack levels required when called:    8
  5612 ;; This function calls:
  5613 ;;		_Console_ClearCursor
  5614 ;; This function is called by:
  5615 ;;		_Console_PrintChar
  5616 ;; This function uses a non-reentrant model
  5617 ;;
  5618                           
  5619                           	psect	text10
  5620  015E38                     __ptext10:
  5621                           	opt stack 0
  5622  015E38                     _Console_Backspace:
  5623                           	opt stack 19
  5624                           
  5625                           ;Console.c: 211: if (lBufferX > 0)
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;incstack = 0
  5629  015E38  0100               	movlb	0	; () banked
  5630  015E3A  51E8               	movf	_lBufferX& (0+255),w,b
  5631  015E3C  B4D8               	btfsc	status,2,c
  5632  015E3E  D007               	goto	l997
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;Console.c: 212: {
  5636                           ;Console.c: 213: gCursor.x -= 6;
  5637  015E40  0EFA               	movlw	250
  5638  015E42  2646               	addwf	_gCursor,f,c
  5639  015E44  0EFF               	movlw	255
  5640  015E46  2247               	addwfc	_gCursor+1,f,c
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;Console.c: 216: lBufferX --;
  5644  015E48  0100               	movlb	0	; () banked
  5645  015E4A  07E8               	decf	_lBufferX& (0+255),f,b
  5646                           
  5647                           ;Console.c: 218: }
  5648  015E4C  D020               	goto	l1000
  5649  015E4E                     l997:
  5650                           
  5651                           ; BSR set to: 0
  5652                           ;Console.c: 219: else if (lBufferY > 0)
  5653                           
  5654                           ; BSR set to: 0
  5655  015E4E  0100               	movlb	0	; () banked
  5656  015E50  51E7               	movf	_lBufferY& (0+255),w,b
  5657  015E52  B4D8               	btfsc	status,2,c
  5658  015E54  D00E               	goto	l999
  5659                           
  5660                           ; BSR set to: 0
  5661                           ;Console.c: 220: {
  5662                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5663  015E56  0E00               	movlw	0
  5664  015E58  6E47               	movwf	_gCursor+1,c
  5665  015E5A  0E72               	movlw	114
  5666  015E5C  6E46               	movwf	_gCursor,c
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;Console.c: 222: gCursor.y -= 8;
  5670  015E5E  0EF8               	movlw	248
  5671  015E60  2648               	addwf	_gCursor+2,f,c
  5672  015E62  0EFF               	movlw	255
  5673  015E64  2249               	addwfc	_gCursor+3,f,c
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5677  015E66  0E13               	movlw	19
  5678  015E68  0100               	movlb	0	; () banked
  5679  015E6A  6FE8               	movwf	_lBufferX& (0+255),b
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;Console.c: 226: lBufferY --;
  5683  015E6C  0100               	movlb	0	; () banked
  5684  015E6E  07E7               	decf	_lBufferY& (0+255),f,b
  5685                           
  5686                           ;Console.c: 228: }
  5687  015E70  D00E               	goto	l1000
  5688  015E72                     l999:
  5689                           
  5690                           ; BSR set to: 0
  5691                           ;Console.c: 229: else
  5692                           ;Console.c: 230: {
  5693                           ;Console.c: 231: gCursor.x = 6;
  5694                           
  5695                           ; BSR set to: 0
  5696  015E72  0E00               	movlw	0
  5697  015E74  6E47               	movwf	_gCursor+1,c
  5698  015E76  0E06               	movlw	6
  5699  015E78  6E46               	movwf	_gCursor,c
  5700                           
  5701                           ;Console.c: 232: gCursor.y = 6;
  5702  015E7A  0E00               	movlw	0
  5703  015E7C  6E49               	movwf	_gCursor+3,c
  5704  015E7E  0E06               	movlw	6
  5705  015E80  6E48               	movwf	_gCursor+2,c
  5706                           
  5707                           ;Console.c: 235: lBufferX = 0;
  5708  015E82  0E00               	movlw	0
  5709  015E84  0100               	movlb	0	; () banked
  5710  015E86  6FE8               	movwf	_lBufferX& (0+255),b
  5711                           
  5712                           ;Console.c: 236: lBufferY = 0;
  5713  015E88  0E00               	movlw	0
  5714  015E8A  0100               	movlb	0	; () banked
  5715  015E8C  6FE7               	movwf	_lBufferY& (0+255),b
  5716  015E8E                     l1000:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;Console.c: 238: }
  5720                           ;Console.c: 240: Console_ClearCursor();
  5721                           
  5722                           ; BSR set to: 0
  5723                           
  5724                           ; BSR set to: 0
  5725  015E8E  EC81  F0B1         	call	_Console_ClearCursor	;wreg free
  5726  015E92  0012               	return		;funcret
  5727  015E94                     __end_of_Console_Backspace:
  5728                           	opt stack 0
  5729                           tosu	equ	0xFFF
  5730                           tosh	equ	0xFFE
  5731                           tosl	equ	0xFFD
  5732                           pclath	equ	0xFFA
  5733                           tblptru	equ	0xFF8
  5734                           tblptrh	equ	0xFF7
  5735                           tblptrl	equ	0xFF6
  5736                           tablat	equ	0xFF5
  5737                           prodh	equ	0xFF4
  5738                           prodl	equ	0xFF3
  5739                           postinc0	equ	0xFEE
  5740                           wreg	equ	0xFE8
  5741                           postdec1	equ	0xFE5
  5742                           fsr1h	equ	0xFE2
  5743                           fsr1l	equ	0xFE1
  5744                           indf2	equ	0xFDF
  5745                           postinc2	equ	0xFDE
  5746                           postdec2	equ	0xFDD
  5747                           fsr2h	equ	0xFDA
  5748                           fsr2l	equ	0xFD9
  5749                           status	equ	0xFD8
  5750                           
  5751 ;; *************** function _Console_ClearCursor *****************
  5752 ;; Defined at:
  5753 ;;		line 308 in file "Library/Console.c"
  5754 ;; Parameters:    Size  Location     Type
  5755 ;;		None
  5756 ;; Auto vars:     Size  Location     Type
  5757 ;;		None
  5758 ;; Return value:  Size  Location     Type
  5759 ;;                  1    wreg      void 
  5760 ;; Registers used:
  5761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5762 ;; Tracked objects:
  5763 ;;		On entry : 0/0
  5764 ;;		On exit  : 0/0
  5765 ;;		Unchanged: 0/0
  5766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;Total ram usage:        2 bytes
  5772 ;; Hardware stack levels used:    1
  5773 ;; Hardware stack levels required when called:    7
  5774 ;; This function calls:
  5775 ;;		Nothing
  5776 ;; This function is called by:
  5777 ;;		_Console_Backspace
  5778 ;;		_Console_Tab
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text11
  5783  016302                     __ptext11:
  5784                           	opt stack 0
  5785  016302                     _Console_ClearCursor:
  5786                           	opt stack 19
  5787                           
  5788                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5789                           
  5790                           ;incstack = 0
  5791  016302  0E01               	movlw	1
  5792  016304  0100               	movlb	0	; () banked
  5793  016306  6FEC               	movwf	_change& (0+255),b
  5794                           
  5795                           ; BSR set to: 0
  5796  016308  0100               	movlb	0	; () banked
  5797  01630A  51E7               	movf	_lBufferY& (0+255),w,b
  5798  01630C  0D14               	mullw	20
  5799  01630E  0E85               	movlw	low _lBuffer
  5800  016310  0100               	movlb	0	; () banked
  5801  016312  6F60               	movwf	??_Console_ClearCursor& (0+255),b
  5802  016314  0E02               	movlw	high _lBuffer
  5803  016316  0100               	movlb	0	; () banked
  5804  016318  6F61               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5805  01631A  50F3               	movf	prodl,w,c
  5806  01631C  0100               	movlb	0	; () banked
  5807  01631E  2760               	addwf	??_Console_ClearCursor& (0+255),f,b
  5808  016320  50F4               	movf	prodh,w,c
  5809  016322  0100               	movlb	0	; () banked
  5810  016324  2361               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5811  016326  0100               	movlb	0	; () banked
  5812  016328  51E8               	movf	_lBufferX& (0+255),w,b
  5813  01632A  0D01               	mullw	1
  5814  01632C  50F3               	movf	prodl,w,c
  5815  01632E  0100               	movlb	0	; () banked
  5816  016330  2560               	addwf	??_Console_ClearCursor& (0+255),w,b
  5817  016332  6ED9               	movwf	fsr2l,c
  5818  016334  50F4               	movf	prodh,w,c
  5819  016336  0100               	movlb	0	; () banked
  5820  016338  2161               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5821  01633A  6EDA               	movwf	fsr2h,c
  5822  01633C  0E80               	movlw	128
  5823  01633E  6EDF               	movwf	indf2,c
  5824                           
  5825                           ; BSR set to: 0
  5826  016340  0012               	return		;funcret
  5827  016342                     __end_of_Console_ClearCursor:
  5828                           	opt stack 0
  5829                           tosu	equ	0xFFF
  5830                           tosh	equ	0xFFE
  5831                           tosl	equ	0xFFD
  5832                           pclath	equ	0xFFA
  5833                           tblptru	equ	0xFF8
  5834                           tblptrh	equ	0xFF7
  5835                           tblptrl	equ	0xFF6
  5836                           tablat	equ	0xFF5
  5837                           prodh	equ	0xFF4
  5838                           prodl	equ	0xFF3
  5839                           postinc0	equ	0xFEE
  5840                           wreg	equ	0xFE8
  5841                           postdec1	equ	0xFE5
  5842                           fsr1h	equ	0xFE2
  5843                           fsr1l	equ	0xFE1
  5844                           indf2	equ	0xFDF
  5845                           postinc2	equ	0xFDE
  5846                           postdec2	equ	0xFDD
  5847                           fsr2h	equ	0xFDA
  5848                           fsr2l	equ	0xFD9
  5849                           status	equ	0xFD8
  5850                           
  5851 ;; *************** function _pow *****************
  5852 ;; Defined at:
  5853 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\pow.c"
  5854 ;; Parameters:    Size  Location     Type
  5855 ;;  x               4   94[BANK0 ] void 
  5856 ;;  y               4   98[BANK0 ] void 
  5857 ;; Auto vars:     Size  Location     Type
  5858 ;;  yi              4  111[BANK0 ] unsigned long 
  5859 ;;  sign            1  110[BANK0 ] unsigned char 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;                  4   94[BANK0 ] unsigned char 
  5862 ;; Registers used:
  5863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5869 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;Total ram usage:       21 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:   10
  5876 ;; This function calls:
  5877 ;;		___flge
  5878 ;;		___flmul
  5879 ;;		___flneg
  5880 ;;		___fltol
  5881 ;;		___xxtofl
  5882 ;;		_exp
  5883 ;;		_log
  5884 ;; This function is called by:
  5885 ;;		_main
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text12
  5890  01258C                     __ptext12:
  5891                           	opt stack 0
  5892  01258C                     _pow:
  5893                           	opt stack 20
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;incstack = 0
  5897  01258C  0E00               	movlw	0
  5898  01258E  0100               	movlb	0	; () banked
  5899  012590  6FCE               	movwf	pow@sign& (0+255),b
  5900                           
  5901                           ; BSR set to: 0
  5902  012592  0100               	movlb	0	; () banked
  5903  012594  51BE               	movf	pow@x& (0+255),w,b
  5904  012596  0100               	movlb	0	; () banked
  5905  012598  11BF               	iorwf	(pow@x+1)& (0+255),w,b
  5906  01259A  0100               	movlb	0	; () banked
  5907  01259C  11C0               	iorwf	(pow@x+2)& (0+255),w,b
  5908  01259E  0100               	movlb	0	; () banked
  5909  0125A0  11C1               	iorwf	(pow@x+3)& (0+255),w,b
  5910  0125A2  A4D8               	btfss	status,2,c
  5911  0125A4  D025               	goto	l2511
  5912                           
  5913                           ; BSR set to: 0
  5914  0125A6  0E00               	movlw	0
  5915  0125A8  0100               	movlb	0	; () banked
  5916  0125AA  6F60               	movwf	___flge@ff1& (0+255),b
  5917  0125AC  0E00               	movlw	0
  5918  0125AE  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  5919  0125B0  0E00               	movlw	0
  5920  0125B2  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  5921  0125B4  0E00               	movlw	0
  5922  0125B6  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  5923  0125B8  C0C2  F064         	movff	pow@y,___flge@ff2
  5924  0125BC  C0C3  F065         	movff	pow@y+1,___flge@ff2+1
  5925  0125C0  C0C4  F066         	movff	pow@y+2,___flge@ff2+2
  5926  0125C4  C0C5  F067         	movff	pow@y+3,___flge@ff2+3
  5927  0125C8  ECEB  F098         	call	___flge	;wreg free
  5928  0125CC  0100               	movlb	0	; () banked
  5929  0125CE  A0D8               	btfss	status,0,c
  5930  0125D0  D005               	goto	l2512
  5931                           
  5932                           ; BSR set to: 0
  5933  0125D2  0E00               	movlw	0
  5934  0125D4  0101               	movlb	1	; () banked
  5935  0125D6  6F1B               	movwf	(_errno+1)& (0+255),b
  5936  0125D8  0E21               	movlw	33
  5937  0125DA  6F1A               	movwf	_errno& (0+255),b
  5938  0125DC                     l2512:
  5939  0125DC  0E00               	movlw	0
  5940  0125DE  0100               	movlb	0	; () banked
  5941  0125E0  6FBE               	movwf	?_pow& (0+255),b
  5942  0125E2  0E00               	movlw	0
  5943  0125E4  6FBF               	movwf	(?_pow+1)& (0+255),b
  5944  0125E6  0E00               	movlw	0
  5945  0125E8  6FC0               	movwf	(?_pow+2)& (0+255),b
  5946  0125EA  0E00               	movlw	0
  5947  0125EC  6FC1               	movwf	(?_pow+3)& (0+255),b
  5948                           
  5949                           ; BSR set to: 0
  5950  0125EE  0012               	return	
  5951  0125F0                     l2511:
  5952                           
  5953                           ; BSR set to: 0
  5954                           
  5955                           ; BSR set to: 0
  5956  0125F0  0100               	movlb	0	; () banked
  5957  0125F2  51C2               	movf	pow@y& (0+255),w,b
  5958  0125F4  0100               	movlb	0	; () banked
  5959  0125F6  11C3               	iorwf	(pow@y+1)& (0+255),w,b
  5960  0125F8  0100               	movlb	0	; () banked
  5961  0125FA  11C4               	iorwf	(pow@y+2)& (0+255),w,b
  5962  0125FC  0100               	movlb	0	; () banked
  5963  0125FE  11C5               	iorwf	(pow@y+3)& (0+255),w,b
  5964  012600  A4D8               	btfss	status,2,c
  5965  012602  D00A               	goto	l2514
  5966                           
  5967                           ; BSR set to: 0
  5968  012604  0E00               	movlw	0
  5969  012606  0100               	movlb	0	; () banked
  5970  012608  6FBE               	movwf	?_pow& (0+255),b
  5971  01260A  0E00               	movlw	0
  5972  01260C  6FBF               	movwf	(?_pow+1)& (0+255),b
  5973  01260E  0E80               	movlw	128
  5974  012610  6FC0               	movwf	(?_pow+2)& (0+255),b
  5975  012612  0E3F               	movlw	63
  5976  012614  6FC1               	movwf	(?_pow+3)& (0+255),b
  5977                           
  5978                           ; BSR set to: 0
  5979  012616  0012               	return	
  5980  012618                     l2514:
  5981                           
  5982                           ; BSR set to: 0
  5983                           
  5984                           ; BSR set to: 0
  5985  012618  0100               	movlb	0	; () banked
  5986  01261A  AFC1               	btfss	(pow@x+3)& (0+255),7,b
  5987  01261C  D058               	goto	l2515
  5988                           
  5989                           ; BSR set to: 0
  5990  01261E  C0C2  F087         	movff	pow@y,___fltol@f1
  5991  012622  C0C3  F088         	movff	pow@y+1,___fltol@f1+1
  5992  012626  C0C4  F089         	movff	pow@y+2,___fltol@f1+2
  5993  01262A  C0C5  F08A         	movff	pow@y+3,___fltol@f1+3
  5994  01262E  EC47  F0A0         	call	___fltol	;wreg free
  5995  012632  C087  F0CF         	movff	?___fltol,pow@yi
  5996  012636  C088  F0D0         	movff	?___fltol+1,pow@yi+1
  5997  01263A  C089  F0D1         	movff	?___fltol+2,pow@yi+2
  5998  01263E  C08A  F0D2         	movff	?___fltol+3,pow@yi+3
  5999  012642  C0CF  F060         	movff	pow@yi,___xxtofl@val
  6000  012646  C0D0  F061         	movff	pow@yi+1,___xxtofl@val+1
  6001  01264A  C0D1  F062         	movff	pow@yi+2,___xxtofl@val+2
  6002  01264E  C0D2  F063         	movff	pow@yi+3,___xxtofl@val+3
  6003  012652  0E00               	movlw	0
  6004  012654  ECC3  F094         	call	___xxtofl
  6005  012658  0100               	movlb	0	; () banked
  6006  01265A  51C2               	movf	pow@y& (0+255),w,b
  6007  01265C  0100               	movlb	0	; () banked
  6008  01265E  1960               	xorwf	?___xxtofl& (0+255),w,b
  6009  012660  E110               	bnz	u12490
  6010  012662  0100               	movlb	0	; () banked
  6011  012664  51C3               	movf	(pow@y+1)& (0+255),w,b
  6012  012666  0100               	movlb	0	; () banked
  6013  012668  1961               	xorwf	(?___xxtofl+1)& (0+255),w,b
  6014  01266A  E10B               	bnz	u12490
  6015  01266C  0100               	movlb	0	; () banked
  6016  01266E  51C4               	movf	(pow@y+2)& (0+255),w,b
  6017  012670  0100               	movlb	0	; () banked
  6018  012672  1962               	xorwf	(?___xxtofl+2)& (0+255),w,b
  6019  012674  E106               	bnz	u12490
  6020  012676  0100               	movlb	0	; () banked
  6021  012678  51C5               	movf	(pow@y+3)& (0+255),w,b
  6022  01267A  0100               	movlb	0	; () banked
  6023  01267C  1963               	xorwf	(?___xxtofl+3)& (0+255),w,b
  6024  01267E  B4D8               	btfsc	status,2,c
  6025  012680  D00F               	goto	l2516
  6026  012682                     u12490:
  6027                           
  6028                           ; BSR set to: 0
  6029  012682  0E00               	movlw	0
  6030  012684  0101               	movlb	1	; () banked
  6031  012686  6F1B               	movwf	(_errno+1)& (0+255),b
  6032  012688  0E21               	movlw	33
  6033  01268A  6F1A               	movwf	_errno& (0+255),b
  6034  01268C  0E00               	movlw	0
  6035  01268E  0100               	movlb	0	; () banked
  6036  012690  6FBE               	movwf	?_pow& (0+255),b
  6037  012692  0E00               	movlw	0
  6038  012694  6FBF               	movwf	(?_pow+1)& (0+255),b
  6039  012696  0E00               	movlw	0
  6040  012698  6FC0               	movwf	(?_pow+2)& (0+255),b
  6041  01269A  0E00               	movlw	0
  6042  01269C  6FC1               	movwf	(?_pow+3)& (0+255),b
  6043                           
  6044                           ; BSR set to: 0
  6045  01269E  0012               	return	
  6046  0126A0                     l2516:
  6047                           
  6048                           ; BSR set to: 0
  6049                           
  6050                           ; BSR set to: 0
  6051  0126A0  0100               	movlb	0	; () banked
  6052  0126A2  51CF               	movf	pow@yi& (0+255),w,b
  6053  0126A4  0B01               	andlw	1
  6054  0126A6  0100               	movlb	0	; () banked
  6055  0126A8  6FCE               	movwf	pow@sign& (0+255),b
  6056                           
  6057                           ; BSR set to: 0
  6058  0126AA  C0BE  F060         	movff	pow@x,___flneg@f1
  6059  0126AE  C0BF  F061         	movff	pow@x+1,___flneg@f1+1
  6060  0126B2  C0C0  F062         	movff	pow@x+2,___flneg@f1+2
  6061  0126B6  C0C1  F063         	movff	pow@x+3,___flneg@f1+3
  6062  0126BA  EC78  F0B2         	call	___flneg	;wreg free
  6063  0126BE  C060  F0BE         	movff	?___flneg,pow@x
  6064  0126C2  C061  F0BF         	movff	?___flneg+1,pow@x+1
  6065  0126C6  C062  F0C0         	movff	?___flneg+2,pow@x+2
  6066  0126CA  C063  F0C1         	movff	?___flneg+3,pow@x+3
  6067  0126CE                     l2515:
  6068  0126CE  C0BE  F0AB         	movff	pow@x,log@x
  6069  0126D2  C0BF  F0AC         	movff	pow@x+1,log@x+1
  6070  0126D6  C0C0  F0AD         	movff	pow@x+2,log@x+2
  6071  0126DA  C0C1  F0AE         	movff	pow@x+3,log@x+3
  6072  0126DE  ECB3  F099         	call	_log	;wreg free
  6073  0126E2  C0AB  F0C6         	movff	?_log,_pow$15163
  6074  0126E6  C0AC  F0C7         	movff	?_log+1,_pow$15163+1
  6075  0126EA  C0AD  F0C8         	movff	?_log+2,_pow$15163+2
  6076  0126EE  C0AE  F0C9         	movff	?_log+3,_pow$15163+3
  6077  0126F2  C0C6  F06E         	movff	_pow$15163,___flmul@b
  6078  0126F6  C0C7  F06F         	movff	_pow$15163+1,___flmul@b+1
  6079  0126FA  C0C8  F070         	movff	_pow$15163+2,___flmul@b+2
  6080  0126FE  C0C9  F071         	movff	_pow$15163+3,___flmul@b+3
  6081  012702  C0C2  F072         	movff	pow@y,___flmul@a
  6082  012706  C0C3  F073         	movff	pow@y+1,___flmul@a+1
  6083  01270A  C0C4  F074         	movff	pow@y+2,___flmul@a+2
  6084  01270E  C0C5  F075         	movff	pow@y+3,___flmul@a+3
  6085  012712  ECD0  F084         	call	___flmul	;wreg free
  6086  012716  C06E  F0CA         	movff	?___flmul,_pow$15164
  6087  01271A  C06F  F0CB         	movff	?___flmul+1,_pow$15164+1
  6088  01271E  C070  F0CC         	movff	?___flmul+2,_pow$15164+2
  6089  012722  C071  F0CD         	movff	?___flmul+3,_pow$15164+3
  6090  012726  C0CA  F0B3         	movff	_pow$15164,exp@x
  6091  01272A  C0CB  F0B4         	movff	_pow$15164+1,exp@x+1
  6092  01272E  C0CC  F0B5         	movff	_pow$15164+2,exp@x+2
  6093  012732  C0CD  F0B6         	movff	_pow$15164+3,exp@x+3
  6094  012736  ECEF  F08C         	call	_exp	;wreg free
  6095  01273A  C0B3  F0BE         	movff	?_exp,pow@x
  6096  01273E  C0B4  F0BF         	movff	?_exp+1,pow@x+1
  6097  012742  C0B5  F0C0         	movff	?_exp+2,pow@x+2
  6098  012746  C0B6  F0C1         	movff	?_exp+3,pow@x+3
  6099  01274A  0100               	movlb	0	; () banked
  6100  01274C  51CE               	movf	pow@sign& (0+255),w,b
  6101  01274E  0100               	movlb	0	; () banked
  6102  012750  B4D8               	btfsc	status,2,c
  6103  012752  D013               	goto	l2517
  6104                           
  6105                           ; BSR set to: 0
  6106  012754  C0BE  F060         	movff	pow@x,___flneg@f1
  6107  012758  C0BF  F061         	movff	pow@x+1,___flneg@f1+1
  6108  01275C  C0C0  F062         	movff	pow@x+2,___flneg@f1+2
  6109  012760  C0C1  F063         	movff	pow@x+3,___flneg@f1+3
  6110  012764  EC78  F0B2         	call	___flneg	;wreg free
  6111  012768  C060  F0BE         	movff	?___flneg,?_pow
  6112  01276C  C061  F0BF         	movff	?___flneg+1,?_pow+1
  6113  012770  C062  F0C0         	movff	?___flneg+2,?_pow+2
  6114  012774  C063  F0C1         	movff	?___flneg+3,?_pow+3
  6115  012778  0012               	return	
  6116  01277A                     l2517:
  6117                           
  6118                           ; BSR set to: 0
  6119  01277A  C0BE  F0BE         	movff	pow@x,?_pow
  6120  01277E  C0BF  F0BF         	movff	pow@x+1,?_pow+1
  6121  012782  C0C0  F0C0         	movff	pow@x+2,?_pow+2
  6122  012786  C0C1  F0C1         	movff	pow@x+3,?_pow+3
  6123  01278A  0012               	return		;funcret
  6124  01278C                     __end_of_pow:
  6125                           	opt stack 0
  6126                           tosu	equ	0xFFF
  6127                           tosh	equ	0xFFE
  6128                           tosl	equ	0xFFD
  6129                           pclath	equ	0xFFA
  6130                           tblptru	equ	0xFF8
  6131                           tblptrh	equ	0xFF7
  6132                           tblptrl	equ	0xFF6
  6133                           tablat	equ	0xFF5
  6134                           prodh	equ	0xFF4
  6135                           prodl	equ	0xFF3
  6136                           postinc0	equ	0xFEE
  6137                           wreg	equ	0xFE8
  6138                           postdec1	equ	0xFE5
  6139                           fsr1h	equ	0xFE2
  6140                           fsr1l	equ	0xFE1
  6141                           indf2	equ	0xFDF
  6142                           postinc2	equ	0xFDE
  6143                           postdec2	equ	0xFDD
  6144                           fsr2h	equ	0xFDA
  6145                           fsr2l	equ	0xFD9
  6146                           status	equ	0xFD8
  6147                           
  6148 ;; *************** function _log *****************
  6149 ;; Defined at:
  6150 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\log.c"
  6151 ;; Parameters:    Size  Location     Type
  6152 ;;  x               4   75[BANK0 ] unsigned char 
  6153 ;; Auto vars:     Size  Location     Type
  6154 ;;  exponent        2   79[BANK0 ] int 
  6155 ;; Return value:  Size  Location     Type
  6156 ;;                  4   75[BANK0 ] int 
  6157 ;; Registers used:
  6158 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6159 ;; Tracked objects:
  6160 ;;		On entry : 0/0
  6161 ;;		On exit  : 0/0
  6162 ;;		Unchanged: 0/0
  6163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6164 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6168 ;;Total ram usage:        6 bytes
  6169 ;; Hardware stack levels used:    1
  6170 ;; Hardware stack levels required when called:    9
  6171 ;; This function calls:
  6172 ;;		___fladd
  6173 ;;		___flmul
  6174 ;;		___xxtofl
  6175 ;;		_eval_poly
  6176 ;;		_frexp
  6177 ;; This function is called by:
  6178 ;;		_pow
  6179 ;; This function uses a non-reentrant model
  6180 ;;
  6181                           
  6182                           	psect	text13
  6183  013366                     __ptext13:
  6184                           	opt stack 0
  6185  013366                     _log:
  6186                           	opt stack 20
  6187                           
  6188                           ;incstack = 0
  6189  013366  0100               	movlb	0	; () banked
  6190  013368  AFAE               	btfss	(log@x+3)& (0+255),7,b
  6191  01336A  D00F               	goto	l2713
  6192                           
  6193                           ; BSR set to: 0
  6194  01336C  0E00               	movlw	0
  6195  01336E  0101               	movlb	1	; () banked
  6196  013370  6F1B               	movwf	(_errno+1)& (0+255),b
  6197  013372  0E21               	movlw	33
  6198  013374  6F1A               	movwf	_errno& (0+255),b
  6199  013376  0E00               	movlw	0
  6200  013378  0100               	movlb	0	; () banked
  6201  01337A  6FAB               	movwf	?_log& (0+255),b
  6202  01337C  0E00               	movlw	0
  6203  01337E  6FAC               	movwf	(?_log+1)& (0+255),b
  6204  013380  0E00               	movlw	0
  6205  013382  6FAD               	movwf	(?_log+2)& (0+255),b
  6206  013384  0E00               	movlw	0
  6207  013386  6FAE               	movwf	(?_log+3)& (0+255),b
  6208                           
  6209                           ; BSR set to: 0
  6210  013388  0012               	return	
  6211  01338A                     l2713:
  6212                           
  6213                           ; BSR set to: 0
  6214                           
  6215                           ; BSR set to: 0
  6216  01338A  0100               	movlb	0	; () banked
  6217  01338C  51AB               	movf	log@x& (0+255),w,b
  6218  01338E  0100               	movlb	0	; () banked
  6219  013390  11AC               	iorwf	(log@x+1)& (0+255),w,b
  6220  013392  0100               	movlb	0	; () banked
  6221  013394  11AD               	iorwf	(log@x+2)& (0+255),w,b
  6222  013396  0100               	movlb	0	; () banked
  6223  013398  11AE               	iorwf	(log@x+3)& (0+255),w,b
  6224  01339A  A4D8               	btfss	status,2,c
  6225  01339C  D00F               	goto	l2715
  6226                           
  6227                           ; BSR set to: 0
  6228  01339E  0E00               	movlw	0
  6229  0133A0  0101               	movlb	1	; () banked
  6230  0133A2  6F1B               	movwf	(_errno+1)& (0+255),b
  6231  0133A4  0E22               	movlw	34
  6232  0133A6  6F1A               	movwf	_errno& (0+255),b
  6233  0133A8  0E00               	movlw	0
  6234  0133AA  0100               	movlb	0	; () banked
  6235  0133AC  6FAB               	movwf	?_log& (0+255),b
  6236  0133AE  0E00               	movlw	0
  6237  0133B0  6FAC               	movwf	(?_log+1)& (0+255),b
  6238  0133B2  0E00               	movlw	0
  6239  0133B4  6FAD               	movwf	(?_log+2)& (0+255),b
  6240  0133B6  0E00               	movlw	0
  6241  0133B8  6FAE               	movwf	(?_log+3)& (0+255),b
  6242                           
  6243                           ; BSR set to: 0
  6244  0133BA  0012               	return	
  6245  0133BC                     l2715:
  6246                           
  6247                           ; BSR set to: 0
  6248                           
  6249                           ; BSR set to: 0
  6250  0133BC  0E00               	movlw	0
  6251  0133BE  0100               	movlb	0	; () banked
  6252  0133C0  6F72               	movwf	___flmul@a& (0+255),b
  6253  0133C2  0E00               	movlw	0
  6254  0133C4  6F73               	movwf	(___flmul@a+1)& (0+255),b
  6255  0133C6  0E00               	movlw	0
  6256  0133C8  6F74               	movwf	(___flmul@a+2)& (0+255),b
  6257  0133CA  0E40               	movlw	64
  6258  0133CC  6F75               	movwf	(___flmul@a+3)& (0+255),b
  6259  0133CE  0EAF               	movlw	low log@exponent
  6260  0133D0  0100               	movlb	0	; () banked
  6261  0133D2  6F64               	movwf	frexp@eptr& (0+255),b
  6262  0133D4  0E00               	movlw	high log@exponent
  6263  0133D6  0100               	movlb	0	; () banked
  6264  0133D8  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  6265  0133DA  C0AB  F060         	movff	log@x,frexp@value
  6266  0133DE  C0AC  F061         	movff	log@x+1,frexp@value+1
  6267  0133E2  C0AD  F062         	movff	log@x+2,frexp@value+2
  6268  0133E6  C0AE  F063         	movff	log@x+3,frexp@value+3
  6269  0133EA  EC3F  F0A5         	call	_frexp	;wreg free
  6270  0133EE  C060  F06E         	movff	?_frexp,___flmul@b
  6271  0133F2  C061  F06F         	movff	?_frexp+1,___flmul@b+1
  6272  0133F6  C062  F070         	movff	?_frexp+2,___flmul@b+2
  6273  0133FA  C063  F071         	movff	?_frexp+3,___flmul@b+3
  6274  0133FE  ECD0  F084         	call	___flmul	;wreg free
  6275  013402  C06E  F087         	movff	?___flmul,___fladd@b
  6276  013406  C06F  F088         	movff	?___flmul+1,___fladd@b+1
  6277  01340A  C070  F089         	movff	?___flmul+2,___fladd@b+2
  6278  01340E  C071  F08A         	movff	?___flmul+3,___fladd@b+3
  6279  013412  0E00               	movlw	0
  6280  013414  0100               	movlb	0	; () banked
  6281  013416  6F8B               	movwf	___fladd@a& (0+255),b
  6282  013418  0E00               	movlw	0
  6283  01341A  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  6284  01341C  0E80               	movlw	128
  6285  01341E  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  6286  013420  0EBF               	movlw	191
  6287  013422  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  6288  013424  EC7C  F082         	call	___fladd	;wreg free
  6289  013428  C087  F0AB         	movff	?___fladd,log@x
  6290  01342C  C088  F0AC         	movff	?___fladd+1,log@x+1
  6291  013430  C089  F0AD         	movff	?___fladd+2,log@x+2
  6292  013434  C08A  F0AE         	movff	?___fladd+3,log@x+3
  6293  013438  0100               	movlb	0	; () banked
  6294  01343A  07AF               	decf	log@exponent& (0+255),f,b
  6295  01343C  A0D8               	btfss	status,0,c
  6296  01343E  07B0               	decf	(log@exponent+1)& (0+255),f,b
  6297                           
  6298                           ; BSR set to: 0
  6299  013440  C0AB  F09B         	movff	log@x,eval_poly@x
  6300  013444  C0AC  F09C         	movff	log@x+1,eval_poly@x+1
  6301  013448  C0AD  F09D         	movff	log@x+2,eval_poly@x+2
  6302  01344C  C0AE  F09E         	movff	log@x+3,eval_poly@x+3
  6303  013450  0E2B               	movlw	low log@coeff
  6304  013452  0100               	movlb	0	; () banked
  6305  013454  6F9F               	movwf	eval_poly@d& (0+255),b
  6306  013456  0EFF               	movlw	high log@coeff
  6307  013458  0100               	movlb	0	; () banked
  6308  01345A  6FA0               	movwf	(eval_poly@d+1)& (0+255),b
  6309  01345C  0E00               	movlw	0
  6310  01345E  0100               	movlb	0	; () banked
  6311  013460  6FA2               	movwf	(eval_poly@n+1)& (0+255),b
  6312  013462  0E08               	movlw	8
  6313  013464  6FA1               	movwf	eval_poly@n& (0+255),b
  6314  013466  ECBB  F09F         	call	_eval_poly	;wreg free
  6315  01346A  C09B  F0AB         	movff	?_eval_poly,log@x
  6316  01346E  C09C  F0AC         	movff	?_eval_poly+1,log@x+1
  6317  013472  C09D  F0AD         	movff	?_eval_poly+2,log@x+2
  6318  013476  C09E  F0AE         	movff	?_eval_poly+3,log@x+3
  6319  01347A  0E18               	movlw	24
  6320  01347C  0100               	movlb	0	; () banked
  6321  01347E  6F72               	movwf	___flmul@a& (0+255),b
  6322  013480  0E72               	movlw	114
  6323  013482  6F73               	movwf	(___flmul@a+1)& (0+255),b
  6324  013484  0E31               	movlw	49
  6325  013486  6F74               	movwf	(___flmul@a+2)& (0+255),b
  6326  013488  0E3F               	movlw	63
  6327  01348A  6F75               	movwf	(___flmul@a+3)& (0+255),b
  6328  01348C  C0AF  F060         	movff	log@exponent,___xxtofl@val
  6329  013490  C0B0  F061         	movff	log@exponent+1,___xxtofl@val+1
  6330  013494  0100               	movlb	0	; () banked
  6331  013496  0E00               	movlw	0
  6332  013498  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  6333  01349A  0EFF               	movlw	-1
  6334  01349C  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  6335  01349E  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  6336  0134A0  0E01               	movlw	1
  6337  0134A2  ECC3  F094         	call	___xxtofl
  6338  0134A6  C060  F06E         	movff	?___xxtofl,___flmul@b
  6339  0134AA  C061  F06F         	movff	?___xxtofl+1,___flmul@b+1
  6340  0134AE  C062  F070         	movff	?___xxtofl+2,___flmul@b+2
  6341  0134B2  C063  F071         	movff	?___xxtofl+3,___flmul@b+3
  6342  0134B6  ECD0  F084         	call	___flmul	;wreg free
  6343  0134BA  C06E  F087         	movff	?___flmul,___fladd@b
  6344  0134BE  C06F  F088         	movff	?___flmul+1,___fladd@b+1
  6345  0134C2  C070  F089         	movff	?___flmul+2,___fladd@b+2
  6346  0134C6  C071  F08A         	movff	?___flmul+3,___fladd@b+3
  6347  0134CA  C0AB  F08B         	movff	log@x,___fladd@a
  6348  0134CE  C0AC  F08C         	movff	log@x+1,___fladd@a+1
  6349  0134D2  C0AD  F08D         	movff	log@x+2,___fladd@a+2
  6350  0134D6  C0AE  F08E         	movff	log@x+3,___fladd@a+3
  6351  0134DA  EC7C  F082         	call	___fladd	;wreg free
  6352  0134DE  C087  F0AB         	movff	?___fladd,?_log
  6353  0134E2  C088  F0AC         	movff	?___fladd+1,?_log+1
  6354  0134E6  C089  F0AD         	movff	?___fladd+2,?_log+2
  6355  0134EA  C08A  F0AE         	movff	?___fladd+3,?_log+3
  6356  0134EE  0012               	return	
  6357  0134F0                     __end_of_log:
  6358                           	opt stack 0
  6359                           tosu	equ	0xFFF
  6360                           tosh	equ	0xFFE
  6361                           tosl	equ	0xFFD
  6362                           pclath	equ	0xFFA
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           postinc0	equ	0xFEE
  6370                           wreg	equ	0xFE8
  6371                           postdec1	equ	0xFE5
  6372                           fsr1h	equ	0xFE2
  6373                           fsr1l	equ	0xFE1
  6374                           indf2	equ	0xFDF
  6375                           postinc2	equ	0xFDE
  6376                           postdec2	equ	0xFDD
  6377                           fsr2h	equ	0xFDA
  6378                           fsr2l	equ	0xFD9
  6379                           status	equ	0xFD8
  6380                           
  6381 ;; *************** function _exp *****************
  6382 ;; Defined at:
  6383 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\exp.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  x               4   83[BANK0 ] int 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  exponent        2   91[BANK0 ] int 
  6388 ;;  sign            1   93[BANK0 ] unsigned char 
  6389 ;; Return value:  Size  Location     Type
  6390 ;;                  4   83[BANK0 ] unsigned char 
  6391 ;; Registers used:
  6392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6393 ;; Tracked objects:
  6394 ;;		On entry : 0/0
  6395 ;;		On exit  : 0/0
  6396 ;;		Unchanged: 0/0
  6397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6398 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6399 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6401 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;Total ram usage:       11 bytes
  6403 ;; Hardware stack levels used:    1
  6404 ;; Hardware stack levels required when called:    9
  6405 ;; This function calls:
  6406 ;;		___fldiv
  6407 ;;		___flge
  6408 ;;		___flmul
  6409 ;;		___flneg
  6410 ;;		___flsub
  6411 ;;		___fltol
  6412 ;;		___xxtofl
  6413 ;;		_eval_poly
  6414 ;;		_floor
  6415 ;;		_ldexp
  6416 ;; This function is called by:
  6417 ;;		_pow
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	text14
  6422  0119DE                     __ptext14:
  6423                           	opt stack 0
  6424  0119DE                     _exp:
  6425                           	opt stack 20
  6426                           
  6427                           ;incstack = 0
  6428  0119DE  0100               	movlb	0	; () banked
  6429  0119E0  51B3               	movf	exp@x& (0+255),w,b
  6430  0119E2  0100               	movlb	0	; () banked
  6431  0119E4  11B4               	iorwf	(exp@x+1)& (0+255),w,b
  6432  0119E6  0100               	movlb	0	; () banked
  6433  0119E8  11B5               	iorwf	(exp@x+2)& (0+255),w,b
  6434  0119EA  0100               	movlb	0	; () banked
  6435  0119EC  11B6               	iorwf	(exp@x+3)& (0+255),w,b
  6436  0119EE  A4D8               	btfss	status,2,c
  6437  0119F0  D00A               	goto	l2671
  6438                           
  6439                           ; BSR set to: 0
  6440  0119F2  0E00               	movlw	0
  6441  0119F4  0100               	movlb	0	; () banked
  6442  0119F6  6FB3               	movwf	?_exp& (0+255),b
  6443  0119F8  0E00               	movlw	0
  6444  0119FA  6FB4               	movwf	(?_exp+1)& (0+255),b
  6445  0119FC  0E80               	movlw	128
  6446  0119FE  6FB5               	movwf	(?_exp+2)& (0+255),b
  6447  011A00  0E3F               	movlw	63
  6448  011A02  6FB6               	movwf	(?_exp+3)& (0+255),b
  6449                           
  6450                           ; BSR set to: 0
  6451  011A04  0012               	return	
  6452  011A06                     l2671:
  6453                           
  6454                           ; BSR set to: 0
  6455                           
  6456                           ; BSR set to: 0
  6457  011A06  0E18               	movlw	24
  6458  011A08  0100               	movlb	0	; () banked
  6459  011A0A  6F60               	movwf	___flge@ff1& (0+255),b
  6460  011A0C  0E72               	movlw	114
  6461  011A0E  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  6462  011A10  0E31               	movlw	49
  6463  011A12  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  6464  011A14  0E44               	movlw	68
  6465  011A16  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  6466  011A18  C0B3  F064         	movff	exp@x,___flge@ff2
  6467  011A1C  C0B4  F065         	movff	exp@x+1,___flge@ff2+1
  6468  011A20  C0B5  F066         	movff	exp@x+2,___flge@ff2+2
  6469  011A24  C0B6  F067         	movff	exp@x+3,___flge@ff2+3
  6470  011A28  ECEB  F098         	call	___flge	;wreg free
  6471  011A2C  0100               	movlb	0	; () banked
  6472  011A2E  B0D8               	btfsc	status,0,c
  6473  011A30  D00F               	goto	l2673
  6474                           
  6475                           ; BSR set to: 0
  6476  011A32  0E00               	movlw	0
  6477  011A34  0101               	movlb	1	; () banked
  6478  011A36  6F1B               	movwf	(_errno+1)& (0+255),b
  6479  011A38  0E22               	movlw	34
  6480  011A3A  6F1A               	movwf	_errno& (0+255),b
  6481  011A3C  0EFF               	movlw	255
  6482  011A3E  0100               	movlb	0	; () banked
  6483  011A40  6FB3               	movwf	?_exp& (0+255),b
  6484  011A42  0EFF               	movlw	255
  6485  011A44  6FB4               	movwf	(?_exp+1)& (0+255),b
  6486  011A46  0E7F               	movlw	127
  6487  011A48  6FB5               	movwf	(?_exp+2)& (0+255),b
  6488  011A4A  0E7F               	movlw	127
  6489  011A4C  6FB6               	movwf	(?_exp+3)& (0+255),b
  6490                           
  6491                           ; BSR set to: 0
  6492  011A4E  0012               	return	
  6493  011A50                     l2673:
  6494                           
  6495                           ; BSR set to: 0
  6496                           
  6497                           ; BSR set to: 0
  6498  011A50  C0B3  F060         	movff	exp@x,___flge@ff1
  6499  011A54  C0B4  F061         	movff	exp@x+1,___flge@ff1+1
  6500  011A58  C0B5  F062         	movff	exp@x+2,___flge@ff1+2
  6501  011A5C  C0B6  F063         	movff	exp@x+3,___flge@ff1+3
  6502  011A60  0E87               	movlw	135
  6503  011A62  0100               	movlb	0	; () banked
  6504  011A64  6F64               	movwf	___flge@ff2& (0+255),b
  6505  011A66  0E48               	movlw	72
  6506  011A68  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  6507  011A6A  0E3A               	movlw	58
  6508  011A6C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  6509  011A6E  0EC4               	movlw	196
  6510  011A70  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  6511  011A72  ECEB  F098         	call	___flge	;wreg free
  6512  011A76  0100               	movlb	0	; () banked
  6513  011A78  B0D8               	btfsc	status,0,c
  6514  011A7A  D00F               	goto	l2674
  6515                           
  6516                           ; BSR set to: 0
  6517  011A7C  0E00               	movlw	0
  6518  011A7E  0101               	movlb	1	; () banked
  6519  011A80  6F1B               	movwf	(_errno+1)& (0+255),b
  6520  011A82  0E22               	movlw	34
  6521  011A84  6F1A               	movwf	_errno& (0+255),b
  6522  011A86  0E00               	movlw	0
  6523  011A88  0100               	movlb	0	; () banked
  6524  011A8A  6FB3               	movwf	?_exp& (0+255),b
  6525  011A8C  0E00               	movlw	0
  6526  011A8E  6FB4               	movwf	(?_exp+1)& (0+255),b
  6527  011A90  0E00               	movlw	0
  6528  011A92  6FB5               	movwf	(?_exp+2)& (0+255),b
  6529  011A94  0E00               	movlw	0
  6530  011A96  6FB6               	movwf	(?_exp+3)& (0+255),b
  6531                           
  6532                           ; BSR set to: 0
  6533  011A98  0012               	return	
  6534  011A9A                     l2674:
  6535                           
  6536                           ; BSR set to: 0
  6537                           
  6538                           ; BSR set to: 0
  6539  011A9A  0100               	movlb	0	; () banked
  6540  011A9C  AFB6               	btfss	(exp@x+3)& (0+255),7,b
  6541  011A9E  D002               	goto	u11780
  6542  011AA0  0E01               	movlw	1
  6543  011AA2  D001               	goto	u11790
  6544  011AA4                     u11780:
  6545  011AA4  0E00               	movlw	0
  6546  011AA6                     u11790:
  6547  011AA6  0100               	movlb	0	; () banked
  6548  011AA8  6FBD               	movwf	exp@sign& (0+255),b
  6549                           
  6550                           ; BSR set to: 0
  6551  011AAA  0100               	movlb	0	; () banked
  6552  011AAC  51BD               	movf	exp@sign& (0+255),w,b
  6553  011AAE  0100               	movlb	0	; () banked
  6554  011AB0  B4D8               	btfsc	status,2,c
  6555  011AB2  D012               	goto	l2675
  6556                           
  6557                           ; BSR set to: 0
  6558  011AB4  C0B3  F060         	movff	exp@x,___flneg@f1
  6559  011AB8  C0B4  F061         	movff	exp@x+1,___flneg@f1+1
  6560  011ABC  C0B5  F062         	movff	exp@x+2,___flneg@f1+2
  6561  011AC0  C0B6  F063         	movff	exp@x+3,___flneg@f1+3
  6562  011AC4  EC78  F0B2         	call	___flneg	;wreg free
  6563  011AC8  C060  F0B3         	movff	?___flneg,exp@x
  6564  011ACC  C061  F0B4         	movff	?___flneg+1,exp@x+1
  6565  011AD0  C062  F0B5         	movff	?___flneg+2,exp@x+2
  6566  011AD4  C063  F0B6         	movff	?___flneg+3,exp@x+3
  6567  011AD8                     l2675:
  6568  011AD8  C0B3  F06E         	movff	exp@x,___flmul@b
  6569  011ADC  C0B4  F06F         	movff	exp@x+1,___flmul@b+1
  6570  011AE0  C0B5  F070         	movff	exp@x+2,___flmul@b+2
  6571  011AE4  C0B6  F071         	movff	exp@x+3,___flmul@b+3
  6572  011AE8  0E3B               	movlw	59
  6573  011AEA  0100               	movlb	0	; () banked
  6574  011AEC  6F72               	movwf	___flmul@a& (0+255),b
  6575  011AEE  0EAA               	movlw	170
  6576  011AF0  6F73               	movwf	(___flmul@a+1)& (0+255),b
  6577  011AF2  0EB8               	movlw	184
  6578  011AF4  6F74               	movwf	(___flmul@a+2)& (0+255),b
  6579  011AF6  0E3F               	movlw	63
  6580  011AF8  6F75               	movwf	(___flmul@a+3)& (0+255),b
  6581  011AFA  ECD0  F084         	call	___flmul	;wreg free
  6582  011AFE  C06E  F0B3         	movff	?___flmul,exp@x
  6583  011B02  C06F  F0B4         	movff	?___flmul+1,exp@x+1
  6584  011B06  C070  F0B5         	movff	?___flmul+2,exp@x+2
  6585  011B0A  C071  F0B6         	movff	?___flmul+3,exp@x+3
  6586  011B0E  C0B3  F09B         	movff	exp@x,floor@x
  6587  011B12  C0B4  F09C         	movff	exp@x+1,floor@x+1
  6588  011B16  C0B5  F09D         	movff	exp@x+2,floor@x+2
  6589  011B1A  C0B6  F09E         	movff	exp@x+3,floor@x+3
  6590  011B1E  EC29  F09F         	call	_floor	;wreg free
  6591  011B22  C09B  F0B7         	movff	?_floor,_exp$15165
  6592  011B26  C09C  F0B8         	movff	?_floor+1,_exp$15165+1
  6593  011B2A  C09D  F0B9         	movff	?_floor+2,_exp$15165+2
  6594  011B2E  C09E  F0BA         	movff	?_floor+3,_exp$15165+3
  6595  011B32  C0B7  F087         	movff	_exp$15165,___fltol@f1
  6596  011B36  C0B8  F088         	movff	_exp$15165+1,___fltol@f1+1
  6597  011B3A  C0B9  F089         	movff	_exp$15165+2,___fltol@f1+2
  6598  011B3E  C0BA  F08A         	movff	_exp$15165+3,___fltol@f1+3
  6599  011B42  EC47  F0A0         	call	___fltol	;wreg free
  6600  011B46  C087  F0BB         	movff	?___fltol,exp@exponent
  6601  011B4A  C088  F0BC         	movff	?___fltol+1,exp@exponent+1
  6602  011B4E  C0B3  F09B         	movff	exp@x,___flsub@b
  6603  011B52  C0B4  F09C         	movff	exp@x+1,___flsub@b+1
  6604  011B56  C0B5  F09D         	movff	exp@x+2,___flsub@b+2
  6605  011B5A  C0B6  F09E         	movff	exp@x+3,___flsub@b+3
  6606  011B5E  C0BB  F060         	movff	exp@exponent,___xxtofl@val
  6607  011B62  C0BC  F061         	movff	exp@exponent+1,___xxtofl@val+1
  6608  011B66  0100               	movlb	0	; () banked
  6609  011B68  0E00               	movlw	0
  6610  011B6A  BF61               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  6611  011B6C  0EFF               	movlw	-1
  6612  011B6E  6F62               	movwf	(___xxtofl@val+2)& (0+255),b
  6613  011B70  6F63               	movwf	(___xxtofl@val+3)& (0+255),b
  6614  011B72  0E01               	movlw	1
  6615  011B74  ECC3  F094         	call	___xxtofl
  6616  011B78  C060  F09F         	movff	?___xxtofl,___flsub@a
  6617  011B7C  C061  F0A0         	movff	?___xxtofl+1,___flsub@a+1
  6618  011B80  C062  F0A1         	movff	?___xxtofl+2,___flsub@a+2
  6619  011B84  C063  F0A2         	movff	?___xxtofl+3,___flsub@a+3
  6620  011B88  EC67  F0B0         	call	___flsub	;wreg free
  6621  011B8C  C09B  F0B3         	movff	?___flsub,exp@x
  6622  011B90  C09C  F0B4         	movff	?___flsub+1,exp@x+1
  6623  011B94  C09D  F0B5         	movff	?___flsub+2,exp@x+2
  6624  011B98  C09E  F0B6         	movff	?___flsub+3,exp@x+3
  6625  011B9C  C0B3  F09B         	movff	exp@x,eval_poly@x
  6626  011BA0  C0B4  F09C         	movff	exp@x+1,eval_poly@x+1
  6627  011BA4  C0B5  F09D         	movff	exp@x+2,eval_poly@x+2
  6628  011BA8  C0B6  F09E         	movff	exp@x+3,eval_poly@x+3
  6629  011BAC  0E03               	movlw	low exp@coeff
  6630  011BAE  0100               	movlb	0	; () banked
  6631  011BB0  6F9F               	movwf	eval_poly@d& (0+255),b
  6632  011BB2  0EFF               	movlw	high exp@coeff
  6633  011BB4  0100               	movlb	0	; () banked
  6634  011BB6  6FA0               	movwf	(eval_poly@d+1)& (0+255),b
  6635  011BB8  0E00               	movlw	0
  6636  011BBA  0100               	movlb	0	; () banked
  6637  011BBC  6FA2               	movwf	(eval_poly@n+1)& (0+255),b
  6638  011BBE  0E09               	movlw	9
  6639  011BC0  6FA1               	movwf	eval_poly@n& (0+255),b
  6640  011BC2  ECBB  F09F         	call	_eval_poly	;wreg free
  6641  011BC6  C09B  F0AB         	movff	?_eval_poly,ldexp@value
  6642  011BCA  C09C  F0AC         	movff	?_eval_poly+1,ldexp@value+1
  6643  011BCE  C09D  F0AD         	movff	?_eval_poly+2,ldexp@value+2
  6644  011BD2  C09E  F0AE         	movff	?_eval_poly+3,ldexp@value+3
  6645  011BD6  C0BB  F0AF         	movff	exp@exponent,ldexp@newexp
  6646  011BDA  C0BC  F0B0         	movff	exp@exponent+1,ldexp@newexp+1
  6647  011BDE  EC97  F09E         	call	_ldexp	;wreg free
  6648  011BE2  C0AB  F0B3         	movff	?_ldexp,exp@x
  6649  011BE6  C0AC  F0B4         	movff	?_ldexp+1,exp@x+1
  6650  011BEA  C0AD  F0B5         	movff	?_ldexp+2,exp@x+2
  6651  011BEE  C0AE  F0B6         	movff	?_ldexp+3,exp@x+3
  6652  011BF2  0100               	movlb	0	; () banked
  6653  011BF4  51BD               	movf	exp@sign& (0+255),w,b
  6654  011BF6  0100               	movlb	0	; () banked
  6655  011BF8  B4D8               	btfsc	status,2,c
  6656  011BFA  D035               	goto	l2676
  6657                           
  6658                           ; BSR set to: 0
  6659  011BFC  0100               	movlb	0	; () banked
  6660  011BFE  29B3               	incf	exp@x& (0+255),w,b
  6661  011C00  E116               	bnz	l14068
  6662  011C02  0100               	movlb	0	; () banked
  6663  011C04  29B4               	incf	(exp@x+1)& (0+255),w,b
  6664  011C06  E113               	bnz	l14068
  6665  011C08  0E7F               	movlw	127
  6666  011C0A  0100               	movlb	0	; () banked
  6667  011C0C  19B5               	xorwf	(exp@x+2)& (0+255),w,b
  6668  011C0E  E10F               	bnz	l14068
  6669  011C10  0E7F               	movlw	127
  6670  011C12  0100               	movlb	0	; () banked
  6671  011C14  19B6               	xorwf	(exp@x+3)& (0+255),w,b
  6672  011C16  A4D8               	btfss	status,2,c
  6673  011C18  D00A               	goto	l2677
  6674                           
  6675                           ; BSR set to: 0
  6676  011C1A  0E00               	movlw	0
  6677  011C1C  0100               	movlb	0	; () banked
  6678  011C1E  6FB3               	movwf	?_exp& (0+255),b
  6679  011C20  0E00               	movlw	0
  6680  011C22  6FB4               	movwf	(?_exp+1)& (0+255),b
  6681  011C24  0E00               	movlw	0
  6682  011C26  6FB5               	movwf	(?_exp+2)& (0+255),b
  6683  011C28  0E00               	movlw	0
  6684  011C2A  6FB6               	movwf	(?_exp+3)& (0+255),b
  6685                           
  6686                           ; BSR set to: 0
  6687  011C2C  0012               	return	
  6688  011C2E                     l2677:
  6689  011C2E                     l14068:
  6690                           
  6691                           ; BSR set to: 0
  6692  011C2E  0E00               	movlw	0
  6693  011C30  0100               	movlb	0	; () banked
  6694  011C32  6F60               	movwf	___fldiv@b& (0+255),b
  6695  011C34  0E00               	movlw	0
  6696  011C36  6F61               	movwf	(___fldiv@b+1)& (0+255),b
  6697  011C38  0E80               	movlw	128
  6698  011C3A  6F62               	movwf	(___fldiv@b+2)& (0+255),b
  6699  011C3C  0E3F               	movlw	63
  6700  011C3E  6F63               	movwf	(___fldiv@b+3)& (0+255),b
  6701  011C40  C0B3  F064         	movff	exp@x,___fldiv@a
  6702  011C44  C0B4  F065         	movff	exp@x+1,___fldiv@a+1
  6703  011C48  C0B5  F066         	movff	exp@x+2,___fldiv@a+2
  6704  011C4C  C0B6  F067         	movff	exp@x+3,___fldiv@a+3
  6705  011C50  EC32  F089         	call	___fldiv	;wreg free
  6706  011C54  C060  F0B3         	movff	?___fldiv,?_exp
  6707  011C58  C061  F0B4         	movff	?___fldiv+1,?_exp+1
  6708  011C5C  C062  F0B5         	movff	?___fldiv+2,?_exp+2
  6709  011C60  C063  F0B6         	movff	?___fldiv+3,?_exp+3
  6710  011C64  0012               	return	
  6711  011C66                     l2676:
  6712                           
  6713                           ; BSR set to: 0
  6714  011C66  C0B3  F0B3         	movff	exp@x,?_exp
  6715  011C6A  C0B4  F0B4         	movff	exp@x+1,?_exp+1
  6716  011C6E  C0B5  F0B5         	movff	exp@x+2,?_exp+2
  6717  011C72  C0B6  F0B6         	movff	exp@x+3,?_exp+3
  6718  011C76  0012               	return		;funcret
  6719  011C78                     __end_of_exp:
  6720                           	opt stack 0
  6721                           tosu	equ	0xFFF
  6722                           tosh	equ	0xFFE
  6723                           tosl	equ	0xFFD
  6724                           pclath	equ	0xFFA
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           postdec1	equ	0xFE5
  6734                           fsr1h	equ	0xFE2
  6735                           fsr1l	equ	0xFE1
  6736                           indf2	equ	0xFDF
  6737                           postinc2	equ	0xFDE
  6738                           postdec2	equ	0xFDD
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _ldexp *****************
  6744 ;; Defined at:
  6745 ;;		line 277 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;  value           4   75[BANK0 ] unsigned char 
  6748 ;;  newexp          2   79[BANK0 ] int 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;		None
  6751 ;; Return value:  Size  Location     Type
  6752 ;;                  4   75[BANK0 ] int 
  6753 ;; Registers used:
  6754 ;;		wreg, status,2, status,0
  6755 ;; Tracked objects:
  6756 ;;		On entry : 0/0
  6757 ;;		On exit  : 0/0
  6758 ;;		Unchanged: 0/0
  6759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6760 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;Total ram usage:        8 bytes
  6765 ;; Hardware stack levels used:    1
  6766 ;; Hardware stack levels required when called:    7
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		_exp
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text15
  6775  013D2E                     __ptext15:
  6776                           	opt stack 0
  6777  013D2E                     _ldexp:
  6778                           	opt stack 21
  6779                           
  6780                           ;incstack = 0
  6781  013D2E  0100               	movlb	0	; () banked
  6782  013D30  51AB               	movf	ldexp@value& (0+255),w,b
  6783  013D32  0100               	movlb	0	; () banked
  6784  013D34  11AC               	iorwf	(ldexp@value+1)& (0+255),w,b
  6785  013D36  0100               	movlb	0	; () banked
  6786  013D38  11AD               	iorwf	(ldexp@value+2)& (0+255),w,b
  6787  013D3A  0100               	movlb	0	; () banked
  6788  013D3C  11AE               	iorwf	(ldexp@value+3)& (0+255),w,b
  6789  013D3E  A4D8               	btfss	status,2,c
  6790  013D40  D00A               	goto	l2695
  6791                           
  6792                           ; BSR set to: 0
  6793  013D42  0E00               	movlw	0
  6794  013D44  0100               	movlb	0	; () banked
  6795  013D46  6FAB               	movwf	?_ldexp& (0+255),b
  6796  013D48  0E00               	movlw	0
  6797  013D4A  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6798  013D4C  0E00               	movlw	0
  6799  013D4E  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6800  013D50  0E00               	movlw	0
  6801  013D52  6FAE               	movwf	(?_ldexp+3)& (0+255),b
  6802                           
  6803                           ; BSR set to: 0
  6804  013D54  0012               	return	
  6805  013D56                     l2695:
  6806                           
  6807                           ; BSR set to: 0
  6808                           
  6809                           ; BSR set to: 0
  6810  013D56  0100               	movlb	0	; () banked
  6811  013D58  51AE               	movf	(ldexp@value+3)& (0+255),w,b
  6812  013D5A  0B7F               	andlw	127
  6813  013D5C  0100               	movlb	0	; () banked
  6814  013D5E  6FB1               	movwf	??_ldexp& (0+255),b
  6815  013D60  6BB2               	clrf	(??_ldexp+1)& (0+255),b
  6816  013D62  90D8               	bcf	status,0,c
  6817  013D64  0100               	movlb	0	; () banked
  6818  013D66  37B1               	rlcf	??_ldexp& (0+255),f,b
  6819  013D68  37B2               	rlcf	(??_ldexp+1)& (0+255),f,b
  6820  013D6A  0100               	movlb	0	; () banked
  6821  013D6C  51B1               	movf	??_ldexp& (0+255),w,b
  6822  013D6E  0100               	movlb	0	; () banked
  6823  013D70  27AF               	addwf	ldexp@newexp& (0+255),f,b
  6824  013D72  0100               	movlb	0	; () banked
  6825  013D74  51B2               	movf	(??_ldexp+1)& (0+255),w,b
  6826  013D76  0100               	movlb	0	; () banked
  6827  013D78  23B0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6828  013D7A  0100               	movlb	0	; () banked
  6829  013D7C  AFAD               	btfss	(ldexp@value+2)& (0+255),7,b
  6830  013D7E  D004               	goto	u11190
  6831  013D80  0100               	movlb	0	; () banked
  6832  013D82  6BB1               	clrf	??_ldexp& (0+255),b
  6833  013D84  2BB1               	incf	??_ldexp& (0+255),f,b
  6834  013D86  D002               	goto	u11198
  6835  013D88                     u11190:
  6836  013D88  0100               	movlb	0	; () banked
  6837  013D8A  6BB1               	clrf	??_ldexp& (0+255),b
  6838  013D8C                     u11198:
  6839  013D8C  0100               	movlb	0	; () banked
  6840  013D8E  51B1               	movf	??_ldexp& (0+255),w,b
  6841  013D90  0100               	movlb	0	; () banked
  6842  013D92  27AF               	addwf	ldexp@newexp& (0+255),f,b
  6843  013D94  0E00               	movlw	0
  6844  013D96  23B0               	addwfc	(ldexp@newexp+1)& (0+255),f,b
  6845  013D98  0100               	movlb	0	; () banked
  6846  013D9A  AFB0               	btfss	(ldexp@newexp+1)& (0+255),7,b
  6847  013D9C  D00F               	goto	l2697
  6848                           
  6849                           ; BSR set to: 0
  6850  013D9E  0E00               	movlw	0
  6851  013DA0  0101               	movlb	1	; () banked
  6852  013DA2  6F1B               	movwf	(_errno+1)& (0+255),b
  6853  013DA4  0E22               	movlw	34
  6854  013DA6  6F1A               	movwf	_errno& (0+255),b
  6855  013DA8  0E00               	movlw	0
  6856  013DAA  0100               	movlb	0	; () banked
  6857  013DAC  6FAB               	movwf	?_ldexp& (0+255),b
  6858  013DAE  0E00               	movlw	0
  6859  013DB0  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6860  013DB2  0E00               	movlw	0
  6861  013DB4  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6862  013DB6  0E00               	movlw	0
  6863  013DB8                     L2:
  6864  013DB8  6FAE               	movwf	(?_ldexp+3)& (0+255),b
  6865                           
  6866                           ; BSR set to: 0
  6867  013DBA  0012               	return	
  6868  013DBC                     l2697:
  6869                           
  6870                           ; BSR set to: 0
  6871                           
  6872                           ; BSR set to: 0
  6873  013DBC  0100               	movlb	0	; () banked
  6874  013DBE  BFB0               	btfsc	(ldexp@newexp+1)& (0+255),7,b
  6875  013DC0  D01E               	goto	l2699
  6876  013DC2  0100               	movlb	0	; () banked
  6877  013DC4  05B0               	decf	(ldexp@newexp+1)& (0+255),w,b
  6878  013DC6  A0D8               	btfss	status,0,c
  6879  013DC8  D01A               	goto	l2699
  6880                           
  6881                           ; BSR set to: 0
  6882  013DCA  0E00               	movlw	0
  6883  013DCC  0101               	movlb	1	; () banked
  6884  013DCE  6F1B               	movwf	(_errno+1)& (0+255),b
  6885  013DD0  0E22               	movlw	34
  6886  013DD2  6F1A               	movwf	_errno& (0+255),b
  6887                           
  6888                           ; BSR set to: 1
  6889  013DD4  0100               	movlb	0	; () banked
  6890  013DD6  AFAE               	btfss	(ldexp@value+3)& (0+255),7,b
  6891  013DD8  D009               	goto	l2700
  6892                           
  6893                           ; BSR set to: 0
  6894  013DDA  0EFF               	movlw	255
  6895  013DDC  0100               	movlb	0	; () banked
  6896  013DDE  6FAB               	movwf	?_ldexp& (0+255),b
  6897  013DE0  0EFF               	movlw	255
  6898  013DE2  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6899  013DE4  0E7F               	movlw	127
  6900  013DE6  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6901  013DE8  0EFF               	movlw	255
  6902  013DEA  D7E6               	goto	L2
  6903  013DEC                     l2700:
  6904                           
  6905                           ; BSR set to: 0
  6906                           
  6907                           ; BSR set to: 0
  6908  013DEC  0EFF               	movlw	255
  6909  013DEE  0100               	movlb	0	; () banked
  6910  013DF0  6FAB               	movwf	?_ldexp& (0+255),b
  6911  013DF2  0EFF               	movlw	255
  6912  013DF4  6FAC               	movwf	(?_ldexp+1)& (0+255),b
  6913  013DF6  0E7F               	movlw	127
  6914  013DF8  6FAD               	movwf	(?_ldexp+2)& (0+255),b
  6915  013DFA  0E7F               	movlw	127
  6916  013DFC  D7DD               	goto	L2
  6917  013DFE                     l2699:
  6918                           
  6919                           ; BSR set to: 0
  6920                           
  6921                           ; BSR set to: 0
  6922  013DFE  0100               	movlb	0	; () banked
  6923  013E00  35B0               	rlcf	(ldexp@newexp+1)& (0+255),w,b
  6924  013E02  31B0               	rrcf	(ldexp@newexp+1)& (0+255),w,b
  6925  013E04  0100               	movlb	0	; () banked
  6926  013E06  6FB2               	movwf	(??_ldexp+1)& (0+255),b
  6927  013E08  0100               	movlb	0	; () banked
  6928  013E0A  31AF               	rrcf	ldexp@newexp& (0+255),w,b
  6929  013E0C  0100               	movlb	0	; () banked
  6930  013E0E  6FB1               	movwf	??_ldexp& (0+255),b
  6931  013E10  0100               	movlb	0	; () banked
  6932  013E12  51AE               	movf	(ldexp@value+3)& (0+255),w,b
  6933  013E14  0100               	movlb	0	; () banked
  6934  013E16  19B1               	xorwf	??_ldexp& (0+255),w,b
  6935  013E18  0B80               	andlw	-128
  6936  013E1A  19B1               	xorwf	??_ldexp& (0+255),w,b
  6937  013E1C  0100               	movlb	0	; () banked
  6938  013E1E  6FAE               	movwf	(ldexp@value+3)& (0+255),b
  6939  013E20  C0AF  F0B1         	movff	ldexp@newexp,??_ldexp
  6940  013E24  0E01               	movlw	1
  6941  013E26  0100               	movlb	0	; () banked
  6942  013E28  17B1               	andwf	??_ldexp& (0+255),f,b
  6943  013E2A  0100               	movlb	0	; () banked
  6944  013E2C  33B1               	rrcf	??_ldexp& (0+255),f,b
  6945  013E2E  33B1               	rrcf	??_ldexp& (0+255),f,b
  6946  013E30  0100               	movlb	0	; () banked
  6947  013E32  51AD               	movf	(ldexp@value+2)& (0+255),w,b
  6948  013E34  0100               	movlb	0	; () banked
  6949  013E36  19B1               	xorwf	??_ldexp& (0+255),w,b
  6950  013E38  0B7F               	andlw	-129
  6951  013E3A  19B1               	xorwf	??_ldexp& (0+255),w,b
  6952  013E3C  0100               	movlb	0	; () banked
  6953  013E3E  6FAD               	movwf	(ldexp@value+2)& (0+255),b
  6954                           
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958                           
  6959                           ; BSR set to: 0
  6960  013E40  C0AB  F0AB         	movff	ldexp@value,?_ldexp
  6961  013E44  C0AC  F0AC         	movff	ldexp@value+1,?_ldexp+1
  6962  013E48  C0AD  F0AD         	movff	ldexp@value+2,?_ldexp+2
  6963  013E4C  C0AE  F0AE         	movff	ldexp@value+3,?_ldexp+3
  6964  013E50  0012               	return	
  6965  013E52                     __end_of_ldexp:
  6966                           	opt stack 0
  6967                           tosu	equ	0xFFF
  6968                           tosh	equ	0xFFE
  6969                           tosl	equ	0xFFD
  6970                           pclath	equ	0xFFA
  6971                           tblptru	equ	0xFF8
  6972                           tblptrh	equ	0xFF7
  6973                           tblptrl	equ	0xFF6
  6974                           tablat	equ	0xFF5
  6975                           prodh	equ	0xFF4
  6976                           prodl	equ	0xFF3
  6977                           postinc0	equ	0xFEE
  6978                           wreg	equ	0xFE8
  6979                           postdec1	equ	0xFE5
  6980                           fsr1h	equ	0xFE2
  6981                           fsr1l	equ	0xFE1
  6982                           indf2	equ	0xFDF
  6983                           postinc2	equ	0xFDE
  6984                           postdec2	equ	0xFDD
  6985                           fsr2h	equ	0xFDA
  6986                           fsr2l	equ	0xFD9
  6987                           status	equ	0xFD8
  6988                           
  6989 ;; *************** function _floor *****************
  6990 ;; Defined at:
  6991 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\floor.c"
  6992 ;; Parameters:    Size  Location     Type
  6993 ;;  x               4   59[BANK0 ] int 
  6994 ;; Auto vars:     Size  Location     Type
  6995 ;;  i               4   63[BANK0 ] int 
  6996 ;;  expon           2   67[BANK0 ] int 
  6997 ;; Return value:  Size  Location     Type
  6998 ;;                  4   59[BANK0 ] int 
  6999 ;; Registers used:
  7000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7001 ;; Tracked objects:
  7002 ;;		On entry : 0/0
  7003 ;;		On exit  : 0/0
  7004 ;;		Unchanged: 0/0
  7005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7006 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7007 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7009 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7010 ;;Total ram usage:       10 bytes
  7011 ;; Hardware stack levels used:    1
  7012 ;; Hardware stack levels required when called:    8
  7013 ;; This function calls:
  7014 ;;		___fladd
  7015 ;;		___flge
  7016 ;;		___fltol
  7017 ;;		___xxtofl
  7018 ;;		_frexp
  7019 ;; This function is called by:
  7020 ;;		_exp
  7021 ;; This function uses a non-reentrant model
  7022 ;;
  7023                           
  7024                           	psect	text16
  7025  013E52                     __ptext16:
  7026                           	opt stack 0
  7027  013E52                     _floor:
  7028                           	opt stack 20
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;incstack = 0
  7032  013E52  C09B  F060         	movff	floor@x,frexp@value
  7033  013E56  C09C  F061         	movff	floor@x+1,frexp@value+1
  7034  013E5A  C09D  F062         	movff	floor@x+2,frexp@value+2
  7035  013E5E  C09E  F063         	movff	floor@x+3,frexp@value+3
  7036  013E62  0EA3               	movlw	low floor@expon
  7037  013E64  0100               	movlb	0	; () banked
  7038  013E66  6F64               	movwf	frexp@eptr& (0+255),b
  7039  013E68  0E00               	movlw	high floor@expon
  7040  013E6A  0100               	movlb	0	; () banked
  7041  013E6C  6F65               	movwf	(frexp@eptr+1)& (0+255),b
  7042  013E6E  EC3F  F0A5         	call	_frexp	;wreg free
  7043  013E72  0100               	movlb	0	; () banked
  7044  013E74  AFA4               	btfss	(floor@expon+1)& (0+255),7,b
  7045  013E76  D017               	goto	l2682
  7046                           
  7047                           ; BSR set to: 0
  7048  013E78  0100               	movlb	0	; () banked
  7049  013E7A  AF9E               	btfss	(floor@x+3)& (0+255),7,b
  7050  013E7C  D00A               	goto	l2683
  7051                           
  7052                           ; BSR set to: 0
  7053  013E7E  0E00               	movlw	0
  7054  013E80  0100               	movlb	0	; () banked
  7055  013E82  6F9B               	movwf	?_floor& (0+255),b
  7056  013E84  0E00               	movlw	0
  7057  013E86  6F9C               	movwf	(?_floor+1)& (0+255),b
  7058  013E88  0E80               	movlw	128
  7059  013E8A  6F9D               	movwf	(?_floor+2)& (0+255),b
  7060  013E8C  0EBF               	movlw	191
  7061  013E8E  6F9E               	movwf	(?_floor+3)& (0+255),b
  7062                           
  7063                           ; BSR set to: 0
  7064  013E90  0012               	return	
  7065  013E92                     l2683:
  7066                           
  7067                           ; BSR set to: 0
  7068                           
  7069                           ; BSR set to: 0
  7070  013E92  0E00               	movlw	0
  7071  013E94  0100               	movlb	0	; () banked
  7072  013E96  6F9B               	movwf	?_floor& (0+255),b
  7073  013E98  0E00               	movlw	0
  7074  013E9A  6F9C               	movwf	(?_floor+1)& (0+255),b
  7075  013E9C  0E00               	movlw	0
  7076  013E9E  6F9D               	movwf	(?_floor+2)& (0+255),b
  7077  013EA0  0E00               	movlw	0
  7078  013EA2  6F9E               	movwf	(?_floor+3)& (0+255),b
  7079                           
  7080                           ; BSR set to: 0
  7081  013EA4  0012               	return	
  7082  013EA6                     l2682:
  7083                           
  7084                           ; BSR set to: 0
  7085                           
  7086                           ; BSR set to: 0
  7087  013EA6  0100               	movlb	0	; () banked
  7088  013EA8  51A4               	movf	(floor@expon+1)& (0+255),w,b
  7089  013EAA  E105               	bnz	u11150
  7090  013EAC  0E1D               	movlw	29
  7091  013EAE  0100               	movlb	0	; () banked
  7092  013EB0  5DA3               	subwf	floor@expon& (0+255),w,b
  7093  013EB2  A0D8               	btfss	status,0,c
  7094  013EB4  D009               	goto	l2685
  7095  013EB6                     u11150:
  7096                           
  7097                           ; BSR set to: 0
  7098  013EB6  C09B  F09B         	movff	floor@x,?_floor
  7099  013EBA  C09C  F09C         	movff	floor@x+1,?_floor+1
  7100  013EBE  C09D  F09D         	movff	floor@x+2,?_floor+2
  7101  013EC2  C09E  F09E         	movff	floor@x+3,?_floor+3
  7102  013EC6  0012               	return	
  7103  013EC8                     l2685:
  7104                           
  7105                           ; BSR set to: 0
  7106                           
  7107                           ; BSR set to: 0
  7108  013EC8  C09B  F087         	movff	floor@x,___fltol@f1
  7109  013ECC  C09C  F088         	movff	floor@x+1,___fltol@f1+1
  7110  013ED0  C09D  F089         	movff	floor@x+2,___fltol@f1+2
  7111  013ED4  C09E  F08A         	movff	floor@x+3,___fltol@f1+3
  7112  013ED8  EC47  F0A0         	call	___fltol	;wreg free
  7113  013EDC  C087  F060         	movff	?___fltol,___xxtofl@val
  7114  013EE0  C088  F061         	movff	?___fltol+1,___xxtofl@val+1
  7115  013EE4  C089  F062         	movff	?___fltol+2,___xxtofl@val+2
  7116  013EE8  C08A  F063         	movff	?___fltol+3,___xxtofl@val+3
  7117  013EEC  0E01               	movlw	1
  7118  013EEE  ECC3  F094         	call	___xxtofl
  7119  013EF2  C060  F09F         	movff	?___xxtofl,floor@i
  7120  013EF6  C061  F0A0         	movff	?___xxtofl+1,floor@i+1
  7121  013EFA  C062  F0A1         	movff	?___xxtofl+2,floor@i+2
  7122  013EFE  C063  F0A2         	movff	?___xxtofl+3,floor@i+3
  7123  013F02  C09B  F060         	movff	floor@x,___flge@ff1
  7124  013F06  C09C  F061         	movff	floor@x+1,___flge@ff1+1
  7125  013F0A  C09D  F062         	movff	floor@x+2,___flge@ff1+2
  7126  013F0E  C09E  F063         	movff	floor@x+3,___flge@ff1+3
  7127  013F12  C09F  F064         	movff	floor@i,___flge@ff2
  7128  013F16  C0A0  F065         	movff	floor@i+1,___flge@ff2+1
  7129  013F1A  C0A1  F066         	movff	floor@i+2,___flge@ff2+2
  7130  013F1E  C0A2  F067         	movff	floor@i+3,___flge@ff2+3
  7131  013F22  ECEB  F098         	call	___flge	;wreg free
  7132  013F26  0100               	movlb	0	; () banked
  7133  013F28  B0D8               	btfsc	status,0,c
  7134  013F2A  D01C               	goto	l2686
  7135                           
  7136                           ; BSR set to: 0
  7137  013F2C  C09F  F087         	movff	floor@i,___fladd@b
  7138  013F30  C0A0  F088         	movff	floor@i+1,___fladd@b+1
  7139  013F34  C0A1  F089         	movff	floor@i+2,___fladd@b+2
  7140  013F38  C0A2  F08A         	movff	floor@i+3,___fladd@b+3
  7141  013F3C  0E00               	movlw	0
  7142  013F3E  0100               	movlb	0	; () banked
  7143  013F40  6F8B               	movwf	___fladd@a& (0+255),b
  7144  013F42  0E00               	movlw	0
  7145  013F44  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  7146  013F46  0E80               	movlw	128
  7147  013F48  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  7148  013F4A  0EBF               	movlw	191
  7149  013F4C  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  7150  013F4E  EC7C  F082         	call	___fladd	;wreg free
  7151  013F52  C087  F09B         	movff	?___fladd,?_floor
  7152  013F56  C088  F09C         	movff	?___fladd+1,?_floor+1
  7153  013F5A  C089  F09D         	movff	?___fladd+2,?_floor+2
  7154  013F5E  C08A  F09E         	movff	?___fladd+3,?_floor+3
  7155  013F62  0012               	return	
  7156  013F64                     l2686:
  7157                           
  7158                           ; BSR set to: 0
  7159  013F64  C09F  F09B         	movff	floor@i,?_floor
  7160  013F68  C0A0  F09C         	movff	floor@i+1,?_floor+1
  7161  013F6C  C0A1  F09D         	movff	floor@i+2,?_floor+2
  7162  013F70  C0A2  F09E         	movff	floor@i+3,?_floor+3
  7163  013F74  0012               	return		;funcret
  7164  013F76                     __end_of_floor:
  7165                           	opt stack 0
  7166                           tosu	equ	0xFFF
  7167                           tosh	equ	0xFFE
  7168                           tosl	equ	0xFFD
  7169                           pclath	equ	0xFFA
  7170                           tblptru	equ	0xFF8
  7171                           tblptrh	equ	0xFF7
  7172                           tblptrl	equ	0xFF6
  7173                           tablat	equ	0xFF5
  7174                           prodh	equ	0xFF4
  7175                           prodl	equ	0xFF3
  7176                           postinc0	equ	0xFEE
  7177                           wreg	equ	0xFE8
  7178                           postdec1	equ	0xFE5
  7179                           fsr1h	equ	0xFE2
  7180                           fsr1l	equ	0xFE1
  7181                           indf2	equ	0xFDF
  7182                           postinc2	equ	0xFDE
  7183                           postdec2	equ	0xFDD
  7184                           fsr2h	equ	0xFDA
  7185                           fsr2l	equ	0xFD9
  7186                           status	equ	0xFD8
  7187                           
  7188 ;; *************** function _frexp *****************
  7189 ;; Defined at:
  7190 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\frexp.c"
  7191 ;; Parameters:    Size  Location     Type
  7192 ;;  value           4    0[BANK0 ] int 
  7193 ;;  eptr            2    4[BANK0 ] PTR int 
  7194 ;;		 -> log@exponent(2), floor@expon(2), 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;		None
  7197 ;; Return value:  Size  Location     Type
  7198 ;;                  4    0[BANK0 ] PTR int 
  7199 ;; Registers used:
  7200 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  7201 ;; Tracked objects:
  7202 ;;		On entry : 0/0
  7203 ;;		On exit  : 0/0
  7204 ;;		Unchanged: 0/0
  7205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7206 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7208 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7209 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7210 ;;Total ram usage:        8 bytes
  7211 ;; Hardware stack levels used:    1
  7212 ;; Hardware stack levels required when called:    7
  7213 ;; This function calls:
  7214 ;;		Nothing
  7215 ;; This function is called by:
  7216 ;;		_floor
  7217 ;;		_log
  7218 ;; This function uses a non-reentrant model
  7219 ;;
  7220                           
  7221                           	psect	text17
  7222  014A7E                     __ptext17:
  7223                           	opt stack 0
  7224  014A7E                     _frexp:
  7225                           	opt stack 21
  7226                           
  7227                           ;incstack = 0
  7228  014A7E  0100               	movlb	0	; () banked
  7229  014A80  5160               	movf	frexp@value& (0+255),w,b
  7230  014A82  0100               	movlb	0	; () banked
  7231  014A84  1161               	iorwf	(frexp@value+1)& (0+255),w,b
  7232  014A86  0100               	movlb	0	; () banked
  7233  014A88  1162               	iorwf	(frexp@value+2)& (0+255),w,b
  7234  014A8A  0100               	movlb	0	; () banked
  7235  014A8C  1163               	iorwf	(frexp@value+3)& (0+255),w,b
  7236  014A8E  A4D8               	btfss	status,2,c
  7237  014A90  D012               	goto	l2691
  7238                           
  7239                           ; BSR set to: 0
  7240  014A92  C064  FFD9         	movff	frexp@eptr,fsr2l
  7241  014A96  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  7242  014A9A  0E00               	movlw	0
  7243  014A9C  6EDE               	movwf	postinc2,c
  7244  014A9E  0E00               	movlw	0
  7245  014AA0  6EDD               	movwf	postdec2,c
  7246                           
  7247                           ; BSR set to: 0
  7248  014AA2  0E00               	movlw	0
  7249  014AA4  0100               	movlb	0	; () banked
  7250  014AA6  6F60               	movwf	?_frexp& (0+255),b
  7251  014AA8  0E00               	movlw	0
  7252  014AAA  6F61               	movwf	(?_frexp+1)& (0+255),b
  7253  014AAC  0E00               	movlw	0
  7254  014AAE  6F62               	movwf	(?_frexp+2)& (0+255),b
  7255  014AB0  0E00               	movlw	0
  7256  014AB2  6F63               	movwf	(?_frexp+3)& (0+255),b
  7257                           
  7258                           ; BSR set to: 0
  7259  014AB4  0012               	return	
  7260  014AB6                     l2691:
  7261                           
  7262                           ; BSR set to: 0
  7263                           
  7264                           ; BSR set to: 0
  7265  014AB6  0100               	movlb	0	; () banked
  7266  014AB8  5163               	movf	(frexp@value+3)& (0+255),w,b
  7267  014ABA  0B7F               	andlw	127
  7268  014ABC  0100               	movlb	0	; () banked
  7269  014ABE  6F66               	movwf	??_frexp& (0+255),b
  7270  014AC0  6B67               	clrf	(??_frexp+1)& (0+255),b
  7271  014AC2  90D8               	bcf	status,0,c
  7272  014AC4  0100               	movlb	0	; () banked
  7273  014AC6  3766               	rlcf	??_frexp& (0+255),f,b
  7274  014AC8  3767               	rlcf	(??_frexp+1)& (0+255),f,b
  7275  014ACA  C064  FFD9         	movff	frexp@eptr,fsr2l
  7276  014ACE  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  7277  014AD2  C066  FFDE         	movff	??_frexp,postinc2
  7278  014AD6  C067  FFDD         	movff	??_frexp+1,postdec2
  7279  014ADA  0100               	movlb	0	; () banked
  7280  014ADC  AF62               	btfss	(frexp@value+2)& (0+255),7,b
  7281  014ADE  D004               	goto	u10550
  7282  014AE0  0100               	movlb	0	; () banked
  7283  014AE2  6B66               	clrf	??_frexp& (0+255),b
  7284  014AE4  2B66               	incf	??_frexp& (0+255),f,b
  7285  014AE6  D002               	goto	u10558
  7286  014AE8                     u10550:
  7287  014AE8  0100               	movlb	0	; () banked
  7288  014AEA  6B66               	clrf	??_frexp& (0+255),b
  7289  014AEC                     u10558:
  7290  014AEC  0100               	movlb	0	; () banked
  7291  014AEE  5166               	movf	??_frexp& (0+255),w,b
  7292  014AF0  C064  FFD9         	movff	frexp@eptr,fsr2l
  7293  014AF4  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  7294  014AF8  12DE               	iorwf	postinc2,f,c
  7295  014AFA  0E00               	movlw	0
  7296  014AFC  12DD               	iorwf	postdec2,f,c
  7297                           
  7298                           ; BSR set to: 0
  7299  014AFE  C064  FFD9         	movff	frexp@eptr,fsr2l
  7300  014B02  C065  FFDA         	movff	frexp@eptr+1,fsr2h
  7301  014B06  0E82               	movlw	130
  7302  014B08  26DE               	addwf	postinc2,f,c
  7303  014B0A  0EFF               	movlw	255
  7304  014B0C  22DD               	addwfc	postdec2,f,c
  7305                           
  7306                           ; BSR set to: 0
  7307  014B0E  0100               	movlb	0	; () banked
  7308  014B10  8163               	bsf	(frexp@value+3)& (0+255),0,b
  7309  014B12  8363               	bsf	(frexp@value+3)& (0+255),1,b
  7310  014B14  8563               	bsf	(frexp@value+3)& (0+255),2,b
  7311  014B16  8763               	bsf	(frexp@value+3)& (0+255),3,b
  7312  014B18  8963               	bsf	(frexp@value+3)& (0+255),4,b
  7313  014B1A  8B63               	bsf	(frexp@value+3)& (0+255),5,b
  7314  014B1C  9D63               	bcf	(frexp@value+3)& (0+255),6,b
  7315                           
  7316                           ; BSR set to: 0
  7317  014B1E  0100               	movlb	0	; () banked
  7318  014B20  9F62               	bcf	(frexp@value+2)& (0+255),7,b
  7319                           
  7320                           ; BSR set to: 0
  7321  014B22  C060  F060         	movff	frexp@value,?_frexp
  7322  014B26  C061  F061         	movff	frexp@value+1,?_frexp+1
  7323  014B2A  C062  F062         	movff	frexp@value+2,?_frexp+2
  7324  014B2E  C063  F063         	movff	frexp@value+3,?_frexp+3
  7325  014B32  0012               	return	
  7326  014B34                     __end_of_frexp:
  7327                           	opt stack 0
  7328                           tosu	equ	0xFFF
  7329                           tosh	equ	0xFFE
  7330                           tosl	equ	0xFFD
  7331                           pclath	equ	0xFFA
  7332                           tblptru	equ	0xFF8
  7333                           tblptrh	equ	0xFF7
  7334                           tblptrl	equ	0xFF6
  7335                           tablat	equ	0xFF5
  7336                           prodh	equ	0xFF4
  7337                           prodl	equ	0xFF3
  7338                           postinc0	equ	0xFEE
  7339                           wreg	equ	0xFE8
  7340                           postdec1	equ	0xFE5
  7341                           fsr1h	equ	0xFE2
  7342                           fsr1l	equ	0xFE1
  7343                           indf2	equ	0xFDF
  7344                           postinc2	equ	0xFDE
  7345                           postdec2	equ	0xFDD
  7346                           fsr2h	equ	0xFDA
  7347                           fsr2l	equ	0xFD9
  7348                           status	equ	0xFD8
  7349                           
  7350 ;; *************** function ___fltol *****************
  7351 ;; Defined at:
  7352 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  7353 ;; Parameters:    Size  Location     Type
  7354 ;;  f1              4   39[BANK0 ] PTR int 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  exp1            1   48[BANK0 ] unsigned char 
  7357 ;;  sign1           1   47[BANK0 ] unsigned char 
  7358 ;; Return value:  Size  Location     Type
  7359 ;;                  4   39[BANK0 ] long 
  7360 ;; Registers used:
  7361 ;;		wreg, status,2, status,0
  7362 ;; Tracked objects:
  7363 ;;		On entry : 0/0
  7364 ;;		On exit  : 0/0
  7365 ;;		Unchanged: 0/0
  7366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7367 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7370 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7371 ;;Total ram usage:       10 bytes
  7372 ;; Hardware stack levels used:    1
  7373 ;; Hardware stack levels required when called:    7
  7374 ;; This function calls:
  7375 ;;		Nothing
  7376 ;; This function is called by:
  7377 ;;		_main
  7378 ;;		_pow
  7379 ;;		_exp
  7380 ;;		_floor
  7381 ;; This function uses a non-reentrant model
  7382 ;;
  7383                           
  7384                           	psect	text18
  7385  01408E                     __ptext18:
  7386                           	opt stack 0
  7387  01408E                     ___fltol:
  7388                           	opt stack 20
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;incstack = 0
  7392  01408E  0100               	movlb	0	; () banked
  7393  014090  3589               	rlcf	(___fltol@f1+2)& (0+255),w,b
  7394  014092  358A               	rlcf	(___fltol@f1+3)& (0+255),w,b
  7395  014094  0100               	movlb	0	; () banked
  7396  014096  6F90               	movwf	___fltol@exp1& (0+255),b
  7397  014098  0100               	movlb	0	; () banked
  7398  01409A  5190               	movf	___fltol@exp1& (0+255),w,b
  7399  01409C  A4D8               	btfss	status,2,c
  7400  01409E  D00A               	goto	l2307
  7401                           
  7402                           ; BSR set to: 0
  7403  0140A0  0E00               	movlw	0
  7404  0140A2  0100               	movlb	0	; () banked
  7405  0140A4  6F87               	movwf	?___fltol& (0+255),b
  7406  0140A6  0E00               	movlw	0
  7407  0140A8  6F88               	movwf	(?___fltol+1)& (0+255),b
  7408  0140AA  0E00               	movlw	0
  7409  0140AC  6F89               	movwf	(?___fltol+2)& (0+255),b
  7410  0140AE  0E00               	movlw	0
  7411  0140B0  6F8A               	movwf	(?___fltol+3)& (0+255),b
  7412                           
  7413                           ; BSR set to: 0
  7414  0140B2  0012               	return	
  7415  0140B4                     l2307:
  7416                           
  7417                           ; BSR set to: 0
  7418                           
  7419                           ; BSR set to: 0
  7420  0140B4  C087  F08B         	movff	___fltol@f1,??___fltol
  7421  0140B8  C088  F08C         	movff	___fltol@f1+1,??___fltol+1
  7422  0140BC  C089  F08D         	movff	___fltol@f1+2,??___fltol+2
  7423  0140C0  C08A  F08E         	movff	___fltol@f1+3,??___fltol+3
  7424  0140C4  0E20               	movlw	32
  7425  0140C6  D006               	goto	u10380
  7426  0140C8                     u10385:
  7427  0140C8  0100               	movlb	0	; () banked
  7428  0140CA  90D8               	bcf	status,0,c
  7429  0140CC  338E               	rrcf	(??___fltol+3)& (0+255),f,b
  7430  0140CE  338D               	rrcf	(??___fltol+2)& (0+255),f,b
  7431  0140D0  338C               	rrcf	(??___fltol+1)& (0+255),f,b
  7432  0140D2  338B               	rrcf	??___fltol& (0+255),f,b
  7433  0140D4                     u10380:
  7434  0140D4  2EE8               	decfsz	wreg,f,c
  7435  0140D6  D7F8               	goto	u10385
  7436  0140D8  0100               	movlb	0	; () banked
  7437  0140DA  518B               	movf	??___fltol& (0+255),w,b
  7438  0140DC  0100               	movlb	0	; () banked
  7439  0140DE  6F8F               	movwf	___fltol@sign1& (0+255),b
  7440                           
  7441                           ; BSR set to: 0
  7442  0140E0  0100               	movlb	0	; () banked
  7443  0140E2  8F89               	bsf	(___fltol@f1+2)& (0+255),7,b
  7444                           
  7445                           ; BSR set to: 0
  7446  0140E4  0EFF               	movlw	255
  7447  0140E6  0100               	movlb	0	; () banked
  7448  0140E8  1787               	andwf	___fltol@f1& (0+255),f,b
  7449  0140EA  0EFF               	movlw	255
  7450  0140EC  1788               	andwf	(___fltol@f1+1)& (0+255),f,b
  7451  0140EE  0EFF               	movlw	255
  7452  0140F0  1789               	andwf	(___fltol@f1+2)& (0+255),f,b
  7453  0140F2  0E00               	movlw	0
  7454  0140F4  178A               	andwf	(___fltol@f1+3)& (0+255),f,b
  7455                           
  7456                           ; BSR set to: 0
  7457  0140F6  0E96               	movlw	150
  7458  0140F8  0100               	movlb	0	; () banked
  7459  0140FA  5F90               	subwf	___fltol@exp1& (0+255),f,b
  7460                           
  7461                           ; BSR set to: 0
  7462  0140FC  0100               	movlb	0	; () banked
  7463  0140FE  AF90               	btfss	___fltol@exp1& (0+255),7,b
  7464  014100  D01A               	goto	l2309
  7465                           
  7466                           ; BSR set to: 0
  7467  014102  0100               	movlb	0	; () banked
  7468  014104  5190               	movf	___fltol@exp1& (0+255),w,b
  7469  014106  0A80               	xorlw	128
  7470  014108  0F97               	addlw	151
  7471  01410A  B0D8               	btfsc	status,0,c
  7472  01410C  D00A               	goto	l2310
  7473                           
  7474                           ; BSR set to: 0
  7475  01410E  0E00               	movlw	0
  7476  014110  0100               	movlb	0	; () banked
  7477  014112  6F87               	movwf	?___fltol& (0+255),b
  7478  014114  0E00               	movlw	0
  7479  014116  6F88               	movwf	(?___fltol+1)& (0+255),b
  7480  014118  0E00               	movlw	0
  7481  01411A  6F89               	movwf	(?___fltol+2)& (0+255),b
  7482  01411C  0E00               	movlw	0
  7483  01411E  6F8A               	movwf	(?___fltol+3)& (0+255),b
  7484                           
  7485                           ; BSR set to: 0
  7486  014120  0012               	return	
  7487  014122                     l2310:
  7488                           
  7489                           ; BSR set to: 0
  7490                           
  7491                           ; BSR set to: 0
  7492                           
  7493                           ; BSR set to: 0
  7494  014122  0100               	movlb	0	; () banked
  7495  014124  90D8               	bcf	status,0,c
  7496  014126  338A               	rrcf	(___fltol@f1+3)& (0+255),f,b
  7497  014128  3389               	rrcf	(___fltol@f1+2)& (0+255),f,b
  7498  01412A  3388               	rrcf	(___fltol@f1+1)& (0+255),f,b
  7499  01412C  3387               	rrcf	___fltol@f1& (0+255),f,b
  7500                           
  7501                           ; BSR set to: 0
  7502  01412E  0100               	movlb	0	; () banked
  7503  014130  3F90               	incfsz	___fltol@exp1& (0+255),f,b
  7504  014132  D7F7               	goto	l2310
  7505                           
  7506                           ; BSR set to: 0
  7507  014134  D01B               	goto	u10420
  7508  014136                     l2309:
  7509                           
  7510                           ; BSR set to: 0
  7511                           
  7512                           ; BSR set to: 0
  7513  014136  0E1F               	movlw	31
  7514  014138  0100               	movlb	0	; () banked
  7515  01413A  6590               	cpfsgt	___fltol@exp1& (0+255),b
  7516  01413C  D012               	goto	l2315
  7517                           
  7518                           ; BSR set to: 0
  7519  01413E  0E00               	movlw	0
  7520  014140  0100               	movlb	0	; () banked
  7521  014142  6F87               	movwf	?___fltol& (0+255),b
  7522  014144  0E00               	movlw	0
  7523  014146  6F88               	movwf	(?___fltol+1)& (0+255),b
  7524  014148  0E00               	movlw	0
  7525  01414A  6F89               	movwf	(?___fltol+2)& (0+255),b
  7526  01414C  0E00               	movlw	0
  7527  01414E  6F8A               	movwf	(?___fltol+3)& (0+255),b
  7528                           
  7529                           ; BSR set to: 0
  7530  014150  0012               	return	
  7531  014152                     
  7532                           ; BSR set to: 0
  7533                           
  7534                           ; BSR set to: 0
  7535  014152  0100               	movlb	0	; () banked
  7536  014154  90D8               	bcf	status,0,c
  7537  014156  3787               	rlcf	___fltol@f1& (0+255),f,b
  7538  014158  3788               	rlcf	(___fltol@f1+1)& (0+255),f,b
  7539  01415A  3789               	rlcf	(___fltol@f1+2)& (0+255),f,b
  7540  01415C  378A               	rlcf	(___fltol@f1+3)& (0+255),f,b
  7541  01415E  0100               	movlb	0	; () banked
  7542  014160  0790               	decf	___fltol@exp1& (0+255),f,b
  7543  014162                     l2315:
  7544                           
  7545                           ; BSR set to: 0
  7546                           
  7547                           ; BSR set to: 0
  7548  014162  0100               	movlb	0	; () banked
  7549  014164  5190               	movf	___fltol@exp1& (0+255),w,b
  7550  014166  0100               	movlb	0	; () banked
  7551  014168  A4D8               	btfss	status,2,c
  7552  01416A  D7F3               	goto	l2316
  7553  01416C                     u10420:
  7554                           
  7555                           ; BSR set to: 0
  7556                           
  7557                           ; BSR set to: 0
  7558                           
  7559                           ; BSR set to: 0
  7560  01416C  0100               	movlb	0	; () banked
  7561  01416E  518F               	movf	___fltol@sign1& (0+255),w,b
  7562  014170  0100               	movlb	0	; () banked
  7563  014172  B4D8               	btfsc	status,2,c
  7564  014174  D009               	goto	l2318
  7565                           
  7566                           ; BSR set to: 0
  7567  014176  0100               	movlb	0	; () banked
  7568  014178  1F8A               	comf	(___fltol@f1+3)& (0+255),f,b
  7569  01417A  1F89               	comf	(___fltol@f1+2)& (0+255),f,b
  7570  01417C  1F88               	comf	(___fltol@f1+1)& (0+255),f,b
  7571  01417E  6D87               	negf	___fltol@f1& (0+255),b
  7572  014180  0E00               	movlw	0
  7573  014182  2388               	addwfc	(___fltol@f1+1)& (0+255),f,b
  7574  014184  2389               	addwfc	(___fltol@f1+2)& (0+255),f,b
  7575  014186  238A               	addwfc	(___fltol@f1+3)& (0+255),f,b
  7576  014188                     l2318:
  7577                           
  7578                           ; BSR set to: 0
  7579                           
  7580                           ; BSR set to: 0
  7581  014188  C087  F087         	movff	___fltol@f1,?___fltol
  7582  01418C  C088  F088         	movff	___fltol@f1+1,?___fltol+1
  7583  014190  C089  F089         	movff	___fltol@f1+2,?___fltol+2
  7584  014194  C08A  F08A         	movff	___fltol@f1+3,?___fltol+3
  7585  014198  0012               	return	
  7586  01419A                     __end_of___fltol:
  7587                           	opt stack 0
  7588                           tosu	equ	0xFFF
  7589                           tosh	equ	0xFFE
  7590                           tosl	equ	0xFFD
  7591                           pclath	equ	0xFFA
  7592                           tblptru	equ	0xFF8
  7593                           tblptrh	equ	0xFF7
  7594                           tblptrl	equ	0xFF6
  7595                           tablat	equ	0xFF5
  7596                           prodh	equ	0xFF4
  7597                           prodl	equ	0xFF3
  7598                           postinc0	equ	0xFEE
  7599                           wreg	equ	0xFE8
  7600                           postdec1	equ	0xFE5
  7601                           fsr1h	equ	0xFE2
  7602                           fsr1l	equ	0xFE1
  7603                           indf2	equ	0xFDF
  7604                           postinc2	equ	0xFDE
  7605                           postdec2	equ	0xFDD
  7606                           fsr2h	equ	0xFDA
  7607                           fsr2l	equ	0xFD9
  7608                           status	equ	0xFD8
  7609                           
  7610 ;; *************** function ___flge *****************
  7611 ;; Defined at:
  7612 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flge.c"
  7613 ;; Parameters:    Size  Location     Type
  7614 ;;  ff1             4    0[BANK0 ] long 
  7615 ;;  ff2             4    4[BANK0 ] long 
  7616 ;; Auto vars:     Size  Location     Type
  7617 ;;		None
  7618 ;; Return value:  Size  Location     Type
  7619 ;;		None               void
  7620 ;; Registers used:
  7621 ;;		wreg, status,2, status,0
  7622 ;; Tracked objects:
  7623 ;;		On entry : 0/0
  7624 ;;		On exit  : 0/0
  7625 ;;		Unchanged: 0/0
  7626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7627 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7629 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;Total ram usage:       12 bytes
  7632 ;; Hardware stack levels used:    1
  7633 ;; Hardware stack levels required when called:    7
  7634 ;; This function calls:
  7635 ;;		Nothing
  7636 ;; This function is called by:
  7637 ;;		_pow
  7638 ;;		_exp
  7639 ;;		_floor
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text19
  7644  0131D6                     __ptext19:
  7645                           	opt stack 0
  7646  0131D6                     ___flge:
  7647                           	opt stack 20
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;incstack = 0
  7651  0131D6  0E00               	movlw	0
  7652  0131D8  0100               	movlb	0	; () banked
  7653  0131DA  1560               	andwf	___flge@ff1& (0+255),w,b
  7654  0131DC  0100               	movlb	0	; () banked
  7655  0131DE  6F68               	movwf	??___flge& (0+255),b
  7656  0131E0  0E00               	movlw	0
  7657  0131E2  0100               	movlb	0	; () banked
  7658  0131E4  1561               	andwf	(___flge@ff1+1)& (0+255),w,b
  7659  0131E6  0100               	movlb	0	; () banked
  7660  0131E8  6F69               	movwf	(??___flge+1)& (0+255),b
  7661  0131EA  0E80               	movlw	128
  7662  0131EC  0100               	movlb	0	; () banked
  7663  0131EE  1562               	andwf	(___flge@ff1+2)& (0+255),w,b
  7664  0131F0  0100               	movlb	0	; () banked
  7665  0131F2  6F6A               	movwf	(??___flge+2)& (0+255),b
  7666  0131F4  0E7F               	movlw	127
  7667  0131F6  0100               	movlb	0	; () banked
  7668  0131F8  1563               	andwf	(___flge@ff1+3)& (0+255),w,b
  7669  0131FA  0100               	movlb	0	; () banked
  7670  0131FC  6F6B               	movwf	(??___flge+3)& (0+255),b
  7671  0131FE  0100               	movlb	0	; () banked
  7672  013200  5168               	movf	??___flge& (0+255),w,b
  7673  013202  0100               	movlb	0	; () banked
  7674  013204  1169               	iorwf	(??___flge+1)& (0+255),w,b
  7675  013206  0100               	movlb	0	; () banked
  7676  013208  116A               	iorwf	(??___flge+2)& (0+255),w,b
  7677  01320A  0100               	movlb	0	; () banked
  7678  01320C  116B               	iorwf	(??___flge+3)& (0+255),w,b
  7679  01320E  A4D8               	btfss	status,2,c
  7680  013210  D009               	goto	l2277
  7681                           
  7682                           ; BSR set to: 0
  7683  013212  0E00               	movlw	0
  7684  013214  0100               	movlb	0	; () banked
  7685  013216  6F60               	movwf	___flge@ff1& (0+255),b
  7686  013218  0E00               	movlw	0
  7687  01321A  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  7688  01321C  0E00               	movlw	0
  7689  01321E  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  7690  013220  0E00               	movlw	0
  7691  013222  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  7692  013224                     l2277:
  7693                           
  7694                           ; BSR set to: 0
  7695                           
  7696                           ; BSR set to: 0
  7697  013224  0E00               	movlw	0
  7698  013226  0100               	movlb	0	; () banked
  7699  013228  1564               	andwf	___flge@ff2& (0+255),w,b
  7700  01322A  0100               	movlb	0	; () banked
  7701  01322C  6F68               	movwf	??___flge& (0+255),b
  7702  01322E  0E00               	movlw	0
  7703  013230  0100               	movlb	0	; () banked
  7704  013232  1565               	andwf	(___flge@ff2+1)& (0+255),w,b
  7705  013234  0100               	movlb	0	; () banked
  7706  013236  6F69               	movwf	(??___flge+1)& (0+255),b
  7707  013238  0E80               	movlw	128
  7708  01323A  0100               	movlb	0	; () banked
  7709  01323C  1566               	andwf	(___flge@ff2+2)& (0+255),w,b
  7710  01323E  0100               	movlb	0	; () banked
  7711  013240  6F6A               	movwf	(??___flge+2)& (0+255),b
  7712  013242  0E7F               	movlw	127
  7713  013244  0100               	movlb	0	; () banked
  7714  013246  1567               	andwf	(___flge@ff2+3)& (0+255),w,b
  7715  013248  0100               	movlb	0	; () banked
  7716  01324A  6F6B               	movwf	(??___flge+3)& (0+255),b
  7717  01324C  0100               	movlb	0	; () banked
  7718  01324E  5168               	movf	??___flge& (0+255),w,b
  7719  013250  0100               	movlb	0	; () banked
  7720  013252  1169               	iorwf	(??___flge+1)& (0+255),w,b
  7721  013254  0100               	movlb	0	; () banked
  7722  013256  116A               	iorwf	(??___flge+2)& (0+255),w,b
  7723  013258  0100               	movlb	0	; () banked
  7724  01325A  116B               	iorwf	(??___flge+3)& (0+255),w,b
  7725  01325C  A4D8               	btfss	status,2,c
  7726  01325E  D009               	goto	l2278
  7727                           
  7728                           ; BSR set to: 0
  7729  013260  0E00               	movlw	0
  7730  013262  0100               	movlb	0	; () banked
  7731  013264  6F64               	movwf	___flge@ff2& (0+255),b
  7732  013266  0E00               	movlw	0
  7733  013268  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  7734  01326A  0E00               	movlw	0
  7735  01326C  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  7736  01326E  0E00               	movlw	0
  7737  013270  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  7738  013272                     l2278:
  7739                           
  7740                           ; BSR set to: 0
  7741                           
  7742                           ; BSR set to: 0
  7743  013272  0100               	movlb	0	; () banked
  7744  013274  AF63               	btfss	(___flge@ff1+3)& (0+255),7,b
  7745  013276  D026               	goto	l2279
  7746                           
  7747                           ; BSR set to: 0
  7748  013278  C060  F068         	movff	___flge@ff1,??___flge
  7749  01327C  C061  F069         	movff	___flge@ff1+1,??___flge+1
  7750  013280  C062  F06A         	movff	___flge@ff1+2,??___flge+2
  7751  013284  C063  F06B         	movff	___flge@ff1+3,??___flge+3
  7752  013288  0100               	movlb	0	; () banked
  7753  01328A  1F68               	comf	??___flge& (0+255),f,b
  7754  01328C  1F69               	comf	(??___flge+1)& (0+255),f,b
  7755  01328E  1F6A               	comf	(??___flge+2)& (0+255),f,b
  7756  013290  1F6B               	comf	(??___flge+3)& (0+255),f,b
  7757  013292  2B68               	incf	??___flge& (0+255),f,b
  7758  013294  0E00               	movlw	0
  7759  013296  2369               	addwfc	(??___flge+1)& (0+255),f,b
  7760  013298  236A               	addwfc	(??___flge+2)& (0+255),f,b
  7761  01329A  236B               	addwfc	(??___flge+3)& (0+255),f,b
  7762  01329C  0E00               	movlw	0
  7763  01329E  0100               	movlb	0	; () banked
  7764  0132A0  2568               	addwf	??___flge& (0+255),w,b
  7765  0132A2  0100               	movlb	0	; () banked
  7766  0132A4  6F60               	movwf	___flge@ff1& (0+255),b
  7767  0132A6  0E00               	movlw	0
  7768  0132A8  0100               	movlb	0	; () banked
  7769  0132AA  2169               	addwfc	(??___flge+1)& (0+255),w,b
  7770  0132AC  0100               	movlb	0	; () banked
  7771  0132AE  6F61               	movwf	(___flge@ff1+1)& (0+255),b
  7772  0132B0  0E00               	movlw	0
  7773  0132B2  0100               	movlb	0	; () banked
  7774  0132B4  216A               	addwfc	(??___flge+2)& (0+255),w,b
  7775  0132B6  0100               	movlb	0	; () banked
  7776  0132B8  6F62               	movwf	(___flge@ff1+2)& (0+255),b
  7777  0132BA  0E80               	movlw	128
  7778  0132BC  0100               	movlb	0	; () banked
  7779  0132BE  216B               	addwfc	(??___flge+3)& (0+255),w,b
  7780  0132C0  0100               	movlb	0	; () banked
  7781  0132C2  6F63               	movwf	(___flge@ff1+3)& (0+255),b
  7782  0132C4                     l2279:
  7783                           
  7784                           ; BSR set to: 0
  7785                           
  7786                           ; BSR set to: 0
  7787  0132C4  0100               	movlb	0	; () banked
  7788  0132C6  AF67               	btfss	(___flge@ff2+3)& (0+255),7,b
  7789  0132C8  D026               	goto	l2280
  7790                           
  7791                           ; BSR set to: 0
  7792  0132CA  C064  F068         	movff	___flge@ff2,??___flge
  7793  0132CE  C065  F069         	movff	___flge@ff2+1,??___flge+1
  7794  0132D2  C066  F06A         	movff	___flge@ff2+2,??___flge+2
  7795  0132D6  C067  F06B         	movff	___flge@ff2+3,??___flge+3
  7796  0132DA  0100               	movlb	0	; () banked
  7797  0132DC  1F68               	comf	??___flge& (0+255),f,b
  7798  0132DE  1F69               	comf	(??___flge+1)& (0+255),f,b
  7799  0132E0  1F6A               	comf	(??___flge+2)& (0+255),f,b
  7800  0132E2  1F6B               	comf	(??___flge+3)& (0+255),f,b
  7801  0132E4  2B68               	incf	??___flge& (0+255),f,b
  7802  0132E6  0E00               	movlw	0
  7803  0132E8  2369               	addwfc	(??___flge+1)& (0+255),f,b
  7804  0132EA  236A               	addwfc	(??___flge+2)& (0+255),f,b
  7805  0132EC  236B               	addwfc	(??___flge+3)& (0+255),f,b
  7806  0132EE  0E00               	movlw	0
  7807  0132F0  0100               	movlb	0	; () banked
  7808  0132F2  2568               	addwf	??___flge& (0+255),w,b
  7809  0132F4  0100               	movlb	0	; () banked
  7810  0132F6  6F64               	movwf	___flge@ff2& (0+255),b
  7811  0132F8  0E00               	movlw	0
  7812  0132FA  0100               	movlb	0	; () banked
  7813  0132FC  2169               	addwfc	(??___flge+1)& (0+255),w,b
  7814  0132FE  0100               	movlb	0	; () banked
  7815  013300  6F65               	movwf	(___flge@ff2+1)& (0+255),b
  7816  013302  0E00               	movlw	0
  7817  013304  0100               	movlb	0	; () banked
  7818  013306  216A               	addwfc	(??___flge+2)& (0+255),w,b
  7819  013308  0100               	movlb	0	; () banked
  7820  01330A  6F66               	movwf	(___flge@ff2+2)& (0+255),b
  7821  01330C  0E80               	movlw	128
  7822  01330E  0100               	movlb	0	; () banked
  7823  013310  216B               	addwfc	(??___flge+3)& (0+255),w,b
  7824  013312  0100               	movlb	0	; () banked
  7825  013314  6F67               	movwf	(___flge@ff2+3)& (0+255),b
  7826  013316                     l2280:
  7827                           
  7828                           ; BSR set to: 0
  7829  013316  0E00               	movlw	0
  7830  013318  0100               	movlb	0	; () banked
  7831  01331A  1B60               	xorwf	___flge@ff1& (0+255),f,b
  7832  01331C  0E00               	movlw	0
  7833  01331E  1B61               	xorwf	(___flge@ff1+1)& (0+255),f,b
  7834  013320  0E00               	movlw	0
  7835  013322  1B62               	xorwf	(___flge@ff1+2)& (0+255),f,b
  7836  013324  0E80               	movlw	128
  7837  013326  1B63               	xorwf	(___flge@ff1+3)& (0+255),f,b
  7838  013328  0E00               	movlw	0
  7839  01332A  0100               	movlb	0	; () banked
  7840  01332C  1B64               	xorwf	___flge@ff2& (0+255),f,b
  7841  01332E  0E00               	movlw	0
  7842  013330  1B65               	xorwf	(___flge@ff2+1)& (0+255),f,b
  7843  013332  0E00               	movlw	0
  7844  013334  1B66               	xorwf	(___flge@ff2+2)& (0+255),f,b
  7845  013336  0E80               	movlw	128
  7846  013338  1B67               	xorwf	(___flge@ff2+3)& (0+255),f,b
  7847  01333A  0100               	movlb	0	; () banked
  7848  01333C  5164               	movf	___flge@ff2& (0+255),w,b
  7849  01333E  0100               	movlb	0	; () banked
  7850  013340  5D60               	subwf	___flge@ff1& (0+255),w,b
  7851  013342  0100               	movlb	0	; () banked
  7852  013344  5165               	movf	(___flge@ff2+1)& (0+255),w,b
  7853  013346  0100               	movlb	0	; () banked
  7854  013348  5961               	subwfb	(___flge@ff1+1)& (0+255),w,b
  7855  01334A  0100               	movlb	0	; () banked
  7856  01334C  5166               	movf	(___flge@ff2+2)& (0+255),w,b
  7857  01334E  0100               	movlb	0	; () banked
  7858  013350  5962               	subwfb	(___flge@ff1+2)& (0+255),w,b
  7859  013352  0100               	movlb	0	; () banked
  7860  013354  5167               	movf	(___flge@ff2+3)& (0+255),w,b
  7861  013356  0100               	movlb	0	; () banked
  7862  013358  5963               	subwfb	(___flge@ff1+3)& (0+255),w,b
  7863  01335A  B0D8               	btfsc	status,0,c
  7864  01335C  D002               	goto	l11390
  7865                           
  7866                           ; BSR set to: 0
  7867  01335E  90D8               	bcf	status,0,c
  7868  013360  0012               	return	
  7869  013362                     l11390:
  7870                           
  7871                           ; BSR set to: 0
  7872                           
  7873                           ; BSR set to: 0
  7874  013362  80D8               	bsf	status,0,c
  7875                           
  7876                           ; BSR set to: 0
  7877  013364  0012               	return	
  7878  013366                     __end_of___flge:
  7879                           	opt stack 0
  7880                           tosu	equ	0xFFF
  7881                           tosh	equ	0xFFE
  7882                           tosl	equ	0xFFD
  7883                           pclath	equ	0xFFA
  7884                           tblptru	equ	0xFF8
  7885                           tblptrh	equ	0xFF7
  7886                           tblptrl	equ	0xFF6
  7887                           tablat	equ	0xFF5
  7888                           prodh	equ	0xFF4
  7889                           prodl	equ	0xFF3
  7890                           postinc0	equ	0xFEE
  7891                           wreg	equ	0xFE8
  7892                           postdec1	equ	0xFE5
  7893                           fsr1h	equ	0xFE2
  7894                           fsr1l	equ	0xFE1
  7895                           indf2	equ	0xFDF
  7896                           postinc2	equ	0xFDE
  7897                           postdec2	equ	0xFDD
  7898                           fsr2h	equ	0xFDA
  7899                           fsr2l	equ	0xFD9
  7900                           status	equ	0xFD8
  7901                           
  7902 ;; *************** function _eval_poly *****************
  7903 ;; Defined at:
  7904 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\evalpoly.c"
  7905 ;; Parameters:    Size  Location     Type
  7906 ;;  x               4   59[BANK0 ] long 
  7907 ;;  d               2   63[BANK0 ] PTR const 
  7908 ;;		 -> log@coeff(36), exp@coeff(40), 
  7909 ;;  n               2   65[BANK0 ] int 
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  res             4   71[BANK0 ] int 
  7912 ;; Return value:  Size  Location     Type
  7913 ;;                  4   59[BANK0 ] int 
  7914 ;; Registers used:
  7915 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7916 ;; Tracked objects:
  7917 ;;		On entry : 0/0
  7918 ;;		On exit  : 0/0
  7919 ;;		Unchanged: 0/0
  7920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7921 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7922 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7923 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;Total ram usage:       16 bytes
  7926 ;; Hardware stack levels used:    1
  7927 ;; Hardware stack levels required when called:    8
  7928 ;; This function calls:
  7929 ;;		___fladd
  7930 ;;		___flmul
  7931 ;; This function is called by:
  7932 ;;		_exp
  7933 ;;		_log
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text20
  7938  013F76                     __ptext20:
  7939                           	opt stack 0
  7940  013F76                     _eval_poly:
  7941                           	opt stack 20
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;incstack = 0
  7945  013F76  C0A1  F0A3         	movff	eval_poly@n,??_eval_poly
  7946  013F7A  C0A2  F0A4         	movff	eval_poly@n+1,??_eval_poly+1
  7947  013F7E  0100               	movlb	0	; () banked
  7948  013F80  90D8               	bcf	status,0,c
  7949  013F82  37A3               	rlcf	??_eval_poly& (0+255),f,b
  7950  013F84  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7951  013F86  0100               	movlb	0	; () banked
  7952  013F88  90D8               	bcf	status,0,c
  7953  013F8A  37A3               	rlcf	??_eval_poly& (0+255),f,b
  7954  013F8C  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7955  013F8E  C09F  F0A5         	movff	eval_poly@d,??_eval_poly+2
  7956  013F92  C0A0  F0A6         	movff	eval_poly@d+1,??_eval_poly+3
  7957  013F96  0100               	movlb	0	; () banked
  7958  013F98  51A3               	movf	??_eval_poly& (0+255),w,b
  7959  013F9A  0100               	movlb	0	; () banked
  7960  013F9C  27A5               	addwf	(??_eval_poly+2)& (0+255),f,b
  7961  013F9E  0100               	movlb	0	; () banked
  7962  013FA0  51A4               	movf	(??_eval_poly+1)& (0+255),w,b
  7963  013FA2  0100               	movlb	0	; () banked
  7964  013FA4  23A6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7965  013FA6  C0A5  FFF6         	movff	??_eval_poly+2,tblptrl
  7966  013FAA  C0A6  FFF7         	movff	??_eval_poly+3,tblptrh
  7967  013FAE                     	if	0	;tblptru may be non-zero
  7968  013FAE                     	endif
  7969  013FAE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7970  013FAE  0E00               	movlw	low (__mediumconst shr (0+16))
  7971  013FB0  6EF8               	movwf	tblptru,c
  7972  013FB2                     	endif
  7973  013FB2  0009               	tblrd		*+
  7974  013FB4  CFF5 F0A7          	movff	tablat,eval_poly@res
  7975  013FB8  0009               	tblrd		*+
  7976  013FBA  CFF5 F0A8          	movff	tablat,eval_poly@res+1
  7977  013FBE  0009               	tblrd		*+
  7978  013FC0  CFF5 F0A9          	movff	tablat,eval_poly@res+2
  7979  013FC4  000A               	tblrd		*-
  7980  013FC6  CFF5 F0AA          	movff	tablat,eval_poly@res+3
  7981  013FCA  D052               	goto	l2721
  7982  013FCC                     
  7983                           ; BSR set to: 0
  7984                           
  7985                           ; BSR set to: 0
  7986  013FCC  C0A7  F072         	movff	eval_poly@res,___flmul@a
  7987  013FD0  C0A8  F073         	movff	eval_poly@res+1,___flmul@a+1
  7988  013FD4  C0A9  F074         	movff	eval_poly@res+2,___flmul@a+2
  7989  013FD8  C0AA  F075         	movff	eval_poly@res+3,___flmul@a+3
  7990  013FDC  C09B  F06E         	movff	eval_poly@x,___flmul@b
  7991  013FE0  C09C  F06F         	movff	eval_poly@x+1,___flmul@b+1
  7992  013FE4  C09D  F070         	movff	eval_poly@x+2,___flmul@b+2
  7993  013FE8  C09E  F071         	movff	eval_poly@x+3,___flmul@b+3
  7994  013FEC  ECD0  F084         	call	___flmul	;wreg free
  7995  013FF0  C06E  F087         	movff	?___flmul,___fladd@b
  7996  013FF4  C06F  F088         	movff	?___flmul+1,___fladd@b+1
  7997  013FF8  C070  F089         	movff	?___flmul+2,___fladd@b+2
  7998  013FFC  C071  F08A         	movff	?___flmul+3,___fladd@b+3
  7999  014000  0100               	movlb	0	; () banked
  8000  014002  07A1               	decf	eval_poly@n& (0+255),f,b
  8001  014004  A0D8               	btfss	status,0,c
  8002  014006  07A2               	decf	(eval_poly@n+1)& (0+255),f,b
  8003  014008  C0A1  F0A3         	movff	eval_poly@n,??_eval_poly
  8004  01400C  C0A2  F0A4         	movff	eval_poly@n+1,??_eval_poly+1
  8005  014010  0100               	movlb	0	; () banked
  8006  014012  90D8               	bcf	status,0,c
  8007  014014  37A3               	rlcf	??_eval_poly& (0+255),f,b
  8008  014016  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8009  014018  0100               	movlb	0	; () banked
  8010  01401A  90D8               	bcf	status,0,c
  8011  01401C  37A3               	rlcf	??_eval_poly& (0+255),f,b
  8012  01401E  37A4               	rlcf	(??_eval_poly+1)& (0+255),f,b
  8013  014020  C09F  F0A5         	movff	eval_poly@d,??_eval_poly+2
  8014  014024  C0A0  F0A6         	movff	eval_poly@d+1,??_eval_poly+3
  8015  014028  0100               	movlb	0	; () banked
  8016  01402A  51A3               	movf	??_eval_poly& (0+255),w,b
  8017  01402C  0100               	movlb	0	; () banked
  8018  01402E  27A5               	addwf	(??_eval_poly+2)& (0+255),f,b
  8019  014030  0100               	movlb	0	; () banked
  8020  014032  51A4               	movf	(??_eval_poly+1)& (0+255),w,b
  8021  014034  0100               	movlb	0	; () banked
  8022  014036  23A6               	addwfc	(??_eval_poly+3)& (0+255),f,b
  8023  014038  C0A5  FFF6         	movff	??_eval_poly+2,tblptrl
  8024  01403C  C0A6  FFF7         	movff	??_eval_poly+3,tblptrh
  8025  014040                     	if	0	;tblptru may be non-zero
  8026  014040                     	endif
  8027  014040                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  8028  014040  0E00               	movlw	low (__mediumconst shr (0+16))
  8029  014042  6EF8               	movwf	tblptru,c
  8030  014044                     	endif
  8031  014044  0009               	tblrd		*+
  8032  014046  CFF5 F08B          	movff	tablat,___fladd@a
  8033  01404A  0009               	tblrd		*+
  8034  01404C  CFF5 F08C          	movff	tablat,___fladd@a+1
  8035  014050  0009               	tblrd		*+
  8036  014052  CFF5 F08D          	movff	tablat,___fladd@a+2
  8037  014056  000A               	tblrd		*-
  8038  014058  CFF5 F08E          	movff	tablat,___fladd@a+3
  8039  01405C  EC7C  F082         	call	___fladd	;wreg free
  8040  014060  C087  F0A7         	movff	?___fladd,eval_poly@res
  8041  014064  C088  F0A8         	movff	?___fladd+1,eval_poly@res+1
  8042  014068  C089  F0A9         	movff	?___fladd+2,eval_poly@res+2
  8043  01406C  C08A  F0AA         	movff	?___fladd+3,eval_poly@res+3
  8044  014070                     l2721:
  8045  014070  0100               	movlb	0	; () banked
  8046  014072  51A1               	movf	eval_poly@n& (0+255),w,b
  8047  014074  0100               	movlb	0	; () banked
  8048  014076  11A2               	iorwf	(eval_poly@n+1)& (0+255),w,b
  8049  014078  A4D8               	btfss	status,2,c
  8050  01407A  D7A8               	goto	l2722
  8051                           
  8052                           ; BSR set to: 0
  8053  01407C  C0A7  F09B         	movff	eval_poly@res,?_eval_poly
  8054  014080  C0A8  F09C         	movff	eval_poly@res+1,?_eval_poly+1
  8055  014084  C0A9  F09D         	movff	eval_poly@res+2,?_eval_poly+2
  8056  014088  C0AA  F09E         	movff	eval_poly@res+3,?_eval_poly+3
  8057                           
  8058                           ; BSR set to: 0
  8059  01408C  0012               	return		;funcret
  8060  01408E                     __end_of_eval_poly:
  8061                           	opt stack 0
  8062                           tosu	equ	0xFFF
  8063                           tosh	equ	0xFFE
  8064                           tosl	equ	0xFFD
  8065                           pclath	equ	0xFFA
  8066                           tblptru	equ	0xFF8
  8067                           tblptrh	equ	0xFF7
  8068                           tblptrl	equ	0xFF6
  8069                           tablat	equ	0xFF5
  8070                           prodh	equ	0xFF4
  8071                           prodl	equ	0xFF3
  8072                           postinc0	equ	0xFEE
  8073                           wreg	equ	0xFE8
  8074                           postdec1	equ	0xFE5
  8075                           fsr1h	equ	0xFE2
  8076                           fsr1l	equ	0xFE1
  8077                           indf2	equ	0xFDF
  8078                           postinc2	equ	0xFDE
  8079                           postdec2	equ	0xFDD
  8080                           fsr2h	equ	0xFDA
  8081                           fsr2l	equ	0xFD9
  8082                           status	equ	0xFD8
  8083                           
  8084 ;; *************** function ___flsub *****************
  8085 ;; Defined at:
  8086 ;;		line 245 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
  8087 ;; Parameters:    Size  Location     Type
  8088 ;;  b               4   59[BANK0 ] int 
  8089 ;;  a               4   63[BANK0 ] int 
  8090 ;; Auto vars:     Size  Location     Type
  8091 ;;		None
  8092 ;; Return value:  Size  Location     Type
  8093 ;;                  4   59[BANK0 ] int 
  8094 ;; Registers used:
  8095 ;;		wreg, status,2, status,0, cstack
  8096 ;; Tracked objects:
  8097 ;;		On entry : 0/0
  8098 ;;		On exit  : 0/0
  8099 ;;		Unchanged: 0/0
  8100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8101 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8104 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8105 ;;Total ram usage:        8 bytes
  8106 ;; Hardware stack levels used:    1
  8107 ;; Hardware stack levels required when called:    8
  8108 ;; This function calls:
  8109 ;;		___fladd
  8110 ;; This function is called by:
  8111 ;;		_exp
  8112 ;; This function uses a non-reentrant model
  8113 ;;
  8114                           
  8115                           	psect	text21
  8116  0160CE                     __ptext21:
  8117                           	opt stack 0
  8118  0160CE                     ___flsub:
  8119                           	opt stack 20
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;incstack = 0
  8123  0160CE  0E00               	movlw	0
  8124  0160D0  0100               	movlb	0	; () banked
  8125  0160D2  1B9F               	xorwf	___flsub@a& (0+255),f,b
  8126  0160D4  0E00               	movlw	0
  8127  0160D6  1BA0               	xorwf	(___flsub@a+1)& (0+255),f,b
  8128  0160D8  0E00               	movlw	0
  8129  0160DA  1BA1               	xorwf	(___flsub@a+2)& (0+255),f,b
  8130  0160DC  0E80               	movlw	128
  8131  0160DE  1BA2               	xorwf	(___flsub@a+3)& (0+255),f,b
  8132                           
  8133                           ; BSR set to: 0
  8134  0160E0  C09B  F087         	movff	___flsub@b,___fladd@b
  8135  0160E4  C09C  F088         	movff	___flsub@b+1,___fladd@b+1
  8136  0160E8  C09D  F089         	movff	___flsub@b+2,___fladd@b+2
  8137  0160EC  C09E  F08A         	movff	___flsub@b+3,___fladd@b+3
  8138  0160F0  C09F  F08B         	movff	___flsub@a,___fladd@a
  8139  0160F4  C0A0  F08C         	movff	___flsub@a+1,___fladd@a+1
  8140  0160F8  C0A1  F08D         	movff	___flsub@a+2,___fladd@a+2
  8141  0160FC  C0A2  F08E         	movff	___flsub@a+3,___fladd@a+3
  8142  016100  EC7C  F082         	call	___fladd	;wreg free
  8143  016104  C087  F09B         	movff	?___fladd,?___flsub
  8144  016108  C088  F09C         	movff	?___fladd+1,?___flsub+1
  8145  01610C  C089  F09D         	movff	?___fladd+2,?___flsub+2
  8146  016110  C08A  F09E         	movff	?___fladd+3,?___flsub+3
  8147  016114  0012               	return	
  8148  016116                     __end_of___flsub:
  8149                           	opt stack 0
  8150                           tosu	equ	0xFFF
  8151                           tosh	equ	0xFFE
  8152                           tosl	equ	0xFFD
  8153                           pclath	equ	0xFFA
  8154                           tblptru	equ	0xFF8
  8155                           tblptrh	equ	0xFF7
  8156                           tblptrl	equ	0xFF6
  8157                           tablat	equ	0xFF5
  8158                           prodh	equ	0xFF4
  8159                           prodl	equ	0xFF3
  8160                           postinc0	equ	0xFEE
  8161                           wreg	equ	0xFE8
  8162                           postdec1	equ	0xFE5
  8163                           fsr1h	equ	0xFE2
  8164                           fsr1l	equ	0xFE1
  8165                           indf2	equ	0xFDF
  8166                           postinc2	equ	0xFDE
  8167                           postdec2	equ	0xFDD
  8168                           fsr2h	equ	0xFDA
  8169                           fsr2l	equ	0xFD9
  8170                           status	equ	0xFD8
  8171                           
  8172 ;; *************** function ___fladd *****************
  8173 ;; Defined at:
  8174 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcadd.c"
  8175 ;; Parameters:    Size  Location     Type
  8176 ;;  b               4   39[BANK0 ] int 
  8177 ;;  a               4   43[BANK0 ] int 
  8178 ;; Auto vars:     Size  Location     Type
  8179 ;;  grs             1   58[BANK0 ] unsigned char 
  8180 ;;  bexp            1   57[BANK0 ] unsigned char 
  8181 ;;  aexp            1   56[BANK0 ] unsigned char 
  8182 ;;  signs           1   55[BANK0 ] unsigned char 
  8183 ;; Return value:  Size  Location     Type
  8184 ;;                  4   39[BANK0 ] unsigned char 
  8185 ;; Registers used:
  8186 ;;		wreg, status,2, status,0
  8187 ;; Tracked objects:
  8188 ;;		On entry : 0/0
  8189 ;;		On exit  : 0/0
  8190 ;;		Unchanged: 0/0
  8191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8192 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8193 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8194 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8195 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8196 ;;Total ram usage:       20 bytes
  8197 ;; Hardware stack levels used:    1
  8198 ;; Hardware stack levels required when called:    7
  8199 ;; This function calls:
  8200 ;;		Nothing
  8201 ;; This function is called by:
  8202 ;;		___flsub
  8203 ;;		_floor
  8204 ;;		_log
  8205 ;;		_eval_poly
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           	psect	text22
  8210  0104F8                     __ptext22:
  8211                           	opt stack 0
  8212  0104F8                     ___fladd:
  8213                           	opt stack 20
  8214                           
  8215                           ;incstack = 0
  8216  0104F8  0100               	movlb	0	; () banked
  8217  0104FA  518A               	movf	(___fladd@b+3)& (0+255),w,b
  8218  0104FC  0B80               	andlw	128
  8219  0104FE  0100               	movlb	0	; () banked
  8220  010500  6F97               	movwf	___fladd@signs& (0+255),b
  8221  010502  0100               	movlb	0	; () banked
  8222  010504  518A               	movf	(___fladd@b+3)& (0+255),w,b
  8223  010506  258A               	addwf	(___fladd@b+3)& (0+255),w,b
  8224  010508  0100               	movlb	0	; () banked
  8225  01050A  6F99               	movwf	___fladd@bexp& (0+255),b
  8226                           
  8227                           ; BSR set to: 0
  8228  01050C  0100               	movlb	0	; () banked
  8229  01050E  AF89               	btfss	(___fladd@b+2)& (0+255),7,b
  8230  010510  D002               	goto	l2520
  8231                           
  8232                           ; BSR set to: 0
  8233  010512  0100               	movlb	0	; () banked
  8234  010514  8199               	bsf	___fladd@bexp& (0+255),0,b
  8235  010516                     l2520:
  8236                           
  8237                           ; BSR set to: 0
  8238                           
  8239                           ; BSR set to: 0
  8240  010516  0100               	movlb	0	; () banked
  8241  010518  5199               	movf	___fladd@bexp& (0+255),w,b
  8242  01051A  0100               	movlb	0	; () banked
  8243  01051C  B4D8               	btfsc	status,2,c
  8244  01051E  D012               	goto	l2521
  8245                           
  8246                           ; BSR set to: 0
  8247  010520  0100               	movlb	0	; () banked
  8248  010522  2999               	incf	___fladd@bexp& (0+255),w,b
  8249  010524  A4D8               	btfss	status,2,c
  8250  010526  D009               	goto	l2522
  8251                           
  8252                           ; BSR set to: 0
  8253  010528  0E00               	movlw	0
  8254  01052A  0100               	movlb	0	; () banked
  8255  01052C  6F87               	movwf	___fladd@b& (0+255),b
  8256  01052E  0E00               	movlw	0
  8257  010530  6F88               	movwf	(___fladd@b+1)& (0+255),b
  8258  010532  0E00               	movlw	0
  8259  010534  6F89               	movwf	(___fladd@b+2)& (0+255),b
  8260  010536  0E00               	movlw	0
  8261  010538  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8262  01053A                     l2522:
  8263                           
  8264                           ; BSR set to: 0
  8265                           
  8266                           ; BSR set to: 0
  8267  01053A  0100               	movlb	0	; () banked
  8268  01053C  8F89               	bsf	(___fladd@b+2)& (0+255),7,b
  8269                           
  8270                           ; BSR set to: 0
  8271  01053E  0E00               	movlw	0
  8272  010540  0100               	movlb	0	; () banked
  8273  010542  D008               	goto	L3
  8274  010544                     l2521:
  8275                           
  8276                           ; BSR set to: 0
  8277                           
  8278                           ; BSR set to: 0
  8279  010544  0E00               	movlw	0
  8280  010546  0100               	movlb	0	; () banked
  8281  010548  6F87               	movwf	___fladd@b& (0+255),b
  8282  01054A  0E00               	movlw	0
  8283  01054C  6F88               	movwf	(___fladd@b+1)& (0+255),b
  8284  01054E  0E00               	movlw	0
  8285  010550  6F89               	movwf	(___fladd@b+2)& (0+255),b
  8286  010552  0E00               	movlw	0
  8287  010554                     L3:
  8288  010554  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8289                           
  8290                           ; BSR set to: 0
  8291                           
  8292                           ; BSR set to: 0
  8293  010556  0100               	movlb	0	; () banked
  8294  010558  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8295  01055A  0B80               	andlw	128
  8296  01055C  0100               	movlb	0	; () banked
  8297  01055E  6F98               	movwf	___fladd@aexp& (0+255),b
  8298                           
  8299                           ; BSR set to: 0
  8300  010560  0100               	movlb	0	; () banked
  8301  010562  5197               	movf	___fladd@signs& (0+255),w,b
  8302  010564  0100               	movlb	0	; () banked
  8303  010566  1998               	xorwf	___fladd@aexp& (0+255),w,b
  8304  010568  B4D8               	btfsc	status,2,c
  8305  01056A  D002               	goto	l2524
  8306                           
  8307                           ; BSR set to: 0
  8308  01056C  0100               	movlb	0	; () banked
  8309  01056E  8D97               	bsf	___fladd@signs& (0+255),6,b
  8310  010570                     l2524:
  8311                           
  8312                           ; BSR set to: 0
  8313                           
  8314                           ; BSR set to: 0
  8315  010570  0100               	movlb	0	; () banked
  8316  010572  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8317  010574  258E               	addwf	(___fladd@a+3)& (0+255),w,b
  8318  010576  0100               	movlb	0	; () banked
  8319  010578  6F98               	movwf	___fladd@aexp& (0+255),b
  8320                           
  8321                           ; BSR set to: 0
  8322  01057A  0100               	movlb	0	; () banked
  8323  01057C  AF8D               	btfss	(___fladd@a+2)& (0+255),7,b
  8324  01057E  D002               	goto	l2525
  8325                           
  8326                           ; BSR set to: 0
  8327  010580  0100               	movlb	0	; () banked
  8328  010582  8198               	bsf	___fladd@aexp& (0+255),0,b
  8329  010584                     l2525:
  8330                           
  8331                           ; BSR set to: 0
  8332                           
  8333                           ; BSR set to: 0
  8334  010584  0100               	movlb	0	; () banked
  8335  010586  5198               	movf	___fladd@aexp& (0+255),w,b
  8336  010588  0100               	movlb	0	; () banked
  8337  01058A  B4D8               	btfsc	status,2,c
  8338  01058C  D012               	goto	l2526
  8339                           
  8340                           ; BSR set to: 0
  8341  01058E  0100               	movlb	0	; () banked
  8342  010590  2998               	incf	___fladd@aexp& (0+255),w,b
  8343  010592  A4D8               	btfss	status,2,c
  8344  010594  D009               	goto	l2527
  8345                           
  8346                           ; BSR set to: 0
  8347  010596  0E00               	movlw	0
  8348  010598  0100               	movlb	0	; () banked
  8349  01059A  6F8B               	movwf	___fladd@a& (0+255),b
  8350  01059C  0E00               	movlw	0
  8351  01059E  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  8352  0105A0  0E00               	movlw	0
  8353  0105A2  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  8354  0105A4  0E00               	movlw	0
  8355  0105A6  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  8356  0105A8                     l2527:
  8357                           
  8358                           ; BSR set to: 0
  8359                           
  8360                           ; BSR set to: 0
  8361  0105A8  0100               	movlb	0	; () banked
  8362  0105AA  8F8D               	bsf	(___fladd@a+2)& (0+255),7,b
  8363                           
  8364                           ; BSR set to: 0
  8365  0105AC  0E00               	movlw	0
  8366  0105AE  0100               	movlb	0	; () banked
  8367  0105B0  D008               	goto	L4
  8368  0105B2                     l2526:
  8369                           
  8370                           ; BSR set to: 0
  8371                           
  8372                           ; BSR set to: 0
  8373  0105B2  0E00               	movlw	0
  8374  0105B4  0100               	movlb	0	; () banked
  8375  0105B6  6F8B               	movwf	___fladd@a& (0+255),b
  8376  0105B8  0E00               	movlw	0
  8377  0105BA  6F8C               	movwf	(___fladd@a+1)& (0+255),b
  8378  0105BC  0E00               	movlw	0
  8379  0105BE  6F8D               	movwf	(___fladd@a+2)& (0+255),b
  8380  0105C0  0E00               	movlw	0
  8381  0105C2                     L4:
  8382  0105C2  6F8E               	movwf	(___fladd@a+3)& (0+255),b
  8383                           
  8384                           ; BSR set to: 0
  8385                           
  8386                           ; BSR set to: 0
  8387  0105C4  0100               	movlb	0	; () banked
  8388  0105C6  5199               	movf	___fladd@bexp& (0+255),w,b
  8389  0105C8  0100               	movlb	0	; () banked
  8390  0105CA  5D98               	subwf	___fladd@aexp& (0+255),w,b
  8391  0105CC  B0D8               	btfsc	status,0,c
  8392  0105CE  D024               	goto	l2529
  8393                           
  8394                           ; BSR set to: 0
  8395  0105D0  0100               	movlb	0	; () banked
  8396  0105D2  AD97               	btfss	___fladd@signs& (0+255),6,b
  8397  0105D4  D003               	goto	l2530
  8398                           
  8399                           ; BSR set to: 0
  8400  0105D6  0E80               	movlw	128
  8401  0105D8  0100               	movlb	0	; () banked
  8402  0105DA  1B97               	xorwf	___fladd@signs& (0+255),f,b
  8403  0105DC                     l2530:
  8404                           
  8405                           ; BSR set to: 0
  8406                           
  8407                           ; BSR set to: 0
  8408  0105DC  C099  F09A         	movff	___fladd@bexp,___fladd@grs
  8409                           
  8410                           ; BSR set to: 0
  8411  0105E0  C098  F099         	movff	___fladd@aexp,___fladd@bexp
  8412                           
  8413                           ; BSR set to: 0
  8414  0105E4  C09A  F098         	movff	___fladd@grs,___fladd@aexp
  8415                           
  8416                           ; BSR set to: 0
  8417  0105E8  C087  F09A         	movff	___fladd@b,___fladd@grs
  8418                           
  8419                           ; BSR set to: 0
  8420  0105EC  C08B  F087         	movff	___fladd@a,___fladd@b
  8421                           
  8422                           ; BSR set to: 0
  8423  0105F0  C09A  F08B         	movff	___fladd@grs,___fladd@a
  8424                           
  8425                           ; BSR set to: 0
  8426  0105F4  C088  F09A         	movff	___fladd@b+1,___fladd@grs
  8427                           
  8428                           ; BSR set to: 0
  8429  0105F8  C08C  F088         	movff	___fladd@a+1,___fladd@b+1
  8430                           
  8431                           ; BSR set to: 0
  8432  0105FC  C09A  F08C         	movff	___fladd@grs,___fladd@a+1
  8433                           
  8434                           ; BSR set to: 0
  8435  010600  C089  F09A         	movff	___fladd@b+2,___fladd@grs
  8436                           
  8437                           ; BSR set to: 0
  8438  010604  C08D  F089         	movff	___fladd@a+2,___fladd@b+2
  8439                           
  8440                           ; BSR set to: 0
  8441  010608  C09A  F08D         	movff	___fladd@grs,___fladd@a+2
  8442                           
  8443                           ; BSR set to: 0
  8444  01060C  C08A  F09A         	movff	___fladd@b+3,___fladd@grs
  8445                           
  8446                           ; BSR set to: 0
  8447  010610  C08E  F08A         	movff	___fladd@a+3,___fladd@b+3
  8448                           
  8449                           ; BSR set to: 0
  8450  010614  C09A  F08E         	movff	___fladd@grs,___fladd@a+3
  8451  010618                     l2529:
  8452                           
  8453                           ; BSR set to: 0
  8454                           
  8455                           ; BSR set to: 0
  8456  010618  0E00               	movlw	0
  8457  01061A  0100               	movlb	0	; () banked
  8458  01061C  6F9A               	movwf	___fladd@grs& (0+255),b
  8459                           
  8460                           ; BSR set to: 0
  8461  01061E  0100               	movlb	0	; () banked
  8462  010620  5199               	movf	___fladd@bexp& (0+255),w,b
  8463  010622  0100               	movlb	0	; () banked
  8464  010624  6F8F               	movwf	??___fladd& (0+255),b
  8465  010626  6B90               	clrf	(??___fladd+1)& (0+255),b
  8466  010628  0100               	movlb	0	; () banked
  8467  01062A  1F8F               	comf	??___fladd& (0+255),f,b
  8468  01062C  1F90               	comf	(??___fladd+1)& (0+255),f,b
  8469  01062E  4B8F               	infsnz	??___fladd& (0+255),f,b
  8470  010630  2B90               	incf	(??___fladd+1)& (0+255),f,b
  8471  010632  0100               	movlb	0	; () banked
  8472  010634  5198               	movf	___fladd@aexp& (0+255),w,b
  8473  010636  0100               	movlb	0	; () banked
  8474  010638  6F91               	movwf	(??___fladd+2)& (0+255),b
  8475  01063A  6B92               	clrf	(??___fladd+3)& (0+255),b
  8476  01063C  0100               	movlb	0	; () banked
  8477  01063E  518F               	movf	??___fladd& (0+255),w,b
  8478  010640  0100               	movlb	0	; () banked
  8479  010642  2791               	addwf	(??___fladd+2)& (0+255),f,b
  8480  010644  0100               	movlb	0	; () banked
  8481  010646  5190               	movf	(??___fladd+1)& (0+255),w,b
  8482  010648  0100               	movlb	0	; () banked
  8483  01064A  2392               	addwfc	(??___fladd+3)& (0+255),f,b
  8484  01064C  0100               	movlb	0	; () banked
  8485  01064E  BF92               	btfsc	(??___fladd+3)& (0+255),7,b
  8486  010650  D03D               	goto	l2533
  8487  010652  0100               	movlb	0	; () banked
  8488  010654  5192               	movf	(??___fladd+3)& (0+255),w,b
  8489  010656  E105               	bnz	u9830
  8490  010658  0E1A               	movlw	26
  8491  01065A  0100               	movlb	0	; () banked
  8492  01065C  5D91               	subwf	(??___fladd+2)& (0+255),w,b
  8493  01065E  A0D8               	btfss	status,0,c
  8494  010660  D035               	goto	l2533
  8495  010662                     u9830:
  8496                           
  8497                           ; BSR set to: 0
  8498  010662  0100               	movlb	0	; () banked
  8499  010664  5187               	movf	___fladd@b& (0+255),w,b
  8500  010666  0100               	movlb	0	; () banked
  8501  010668  1188               	iorwf	(___fladd@b+1)& (0+255),w,b
  8502  01066A  0100               	movlb	0	; () banked
  8503  01066C  1189               	iorwf	(___fladd@b+2)& (0+255),w,b
  8504  01066E  0100               	movlb	0	; () banked
  8505  010670  118A               	iorwf	(___fladd@b+3)& (0+255),w,b
  8506  010672  B4D8               	btfsc	status,2,c
  8507  010674  D002               	goto	u9840
  8508  010676  0E01               	movlw	1
  8509  010678  D001               	goto	u9850
  8510  01067A                     u9840:
  8511  01067A  0E00               	movlw	0
  8512  01067C                     u9850:
  8513  01067C  0100               	movlb	0	; () banked
  8514  01067E  6F9A               	movwf	___fladd@grs& (0+255),b
  8515                           
  8516                           ; BSR set to: 0
  8517  010680  0E00               	movlw	0
  8518  010682  0100               	movlb	0	; () banked
  8519  010684  6F87               	movwf	___fladd@b& (0+255),b
  8520  010686  0E00               	movlw	0
  8521  010688  6F88               	movwf	(___fladd@b+1)& (0+255),b
  8522  01068A  0E00               	movlw	0
  8523  01068C  6F89               	movwf	(___fladd@b+2)& (0+255),b
  8524  01068E  0E00               	movlw	0
  8525  010690  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8526                           
  8527                           ; BSR set to: 0
  8528  010692  C098  F099         	movff	___fladd@aexp,___fladd@bexp
  8529  010696  D020               	goto	u9880
  8530  010698                     l2534:
  8531                           
  8532                           ; BSR set to: 0
  8533  010698  0100               	movlb	0	; () banked
  8534  01069A  A19A               	btfss	___fladd@grs& (0+255),0,b
  8535  01069C  D007               	goto	l2535
  8536                           
  8537                           ; BSR set to: 0
  8538  01069E  0100               	movlb	0	; () banked
  8539  0106A0  90D8               	bcf	status,0,c
  8540  0106A2  319A               	rrcf	___fladd@grs& (0+255),w,b
  8541  0106A4  0901               	iorlw	1
  8542  0106A6  0100               	movlb	0	; () banked
  8543  0106A8  6F9A               	movwf	___fladd@grs& (0+255),b
  8544  0106AA  D003               	goto	l2536
  8545  0106AC                     l2535:
  8546                           
  8547                           ; BSR set to: 0
  8548                           
  8549                           ; BSR set to: 0
  8550  0106AC  0100               	movlb	0	; () banked
  8551  0106AE  90D8               	bcf	status,0,c
  8552  0106B0  339A               	rrcf	___fladd@grs& (0+255),f,b
  8553  0106B2                     l2536:
  8554                           
  8555                           ; BSR set to: 0
  8556                           
  8557                           ; BSR set to: 0
  8558  0106B2  0100               	movlb	0	; () banked
  8559  0106B4  A187               	btfss	___fladd@b& (0+255),0,b
  8560  0106B6  D002               	goto	l2537
  8561                           
  8562                           ; BSR set to: 0
  8563  0106B8  0100               	movlb	0	; () banked
  8564  0106BA  8F9A               	bsf	___fladd@grs& (0+255),7,b
  8565  0106BC                     l2537:
  8566                           
  8567                           ; BSR set to: 0
  8568                           
  8569                           ; BSR set to: 0
  8570  0106BC  0100               	movlb	0	; () banked
  8571  0106BE  358A               	rlcf	(___fladd@b+3)& (0+255),w,b
  8572  0106C0  338A               	rrcf	(___fladd@b+3)& (0+255),f,b
  8573  0106C2  3389               	rrcf	(___fladd@b+2)& (0+255),f,b
  8574  0106C4  3388               	rrcf	(___fladd@b+1)& (0+255),f,b
  8575  0106C6  3387               	rrcf	___fladd@b& (0+255),f,b
  8576                           
  8577                           ; BSR set to: 0
  8578  0106C8  0100               	movlb	0	; () banked
  8579  0106CA  2B99               	incf	___fladd@bexp& (0+255),f,b
  8580  0106CC                     l2533:
  8581                           
  8582                           ; BSR set to: 0
  8583  0106CC  0100               	movlb	0	; () banked
  8584  0106CE  5198               	movf	___fladd@aexp& (0+255),w,b
  8585  0106D0  0100               	movlb	0	; () banked
  8586  0106D2  5D99               	subwf	___fladd@bexp& (0+255),w,b
  8587  0106D4  A0D8               	btfss	status,0,c
  8588  0106D6  D7E0               	goto	l2534
  8589  0106D8                     u9880:
  8590                           
  8591                           ; BSR set to: 0
  8592                           
  8593                           ; BSR set to: 0
  8594  0106D8  0100               	movlb	0	; () banked
  8595  0106DA  BD97               	btfsc	___fladd@signs& (0+255),6,b
  8596  0106DC  D03F               	goto	l2539
  8597                           
  8598                           ; BSR set to: 0
  8599  0106DE  0100               	movlb	0	; () banked
  8600  0106E0  5199               	movf	___fladd@bexp& (0+255),w,b
  8601  0106E2  0100               	movlb	0	; () banked
  8602  0106E4  A4D8               	btfss	status,2,c
  8603  0106E6  D00A               	goto	l2540
  8604                           
  8605                           ; BSR set to: 0
  8606  0106E8  0E00               	movlw	0
  8607  0106EA  0100               	movlb	0	; () banked
  8608  0106EC  6F87               	movwf	?___fladd& (0+255),b
  8609  0106EE  0E00               	movlw	0
  8610  0106F0  6F88               	movwf	(?___fladd+1)& (0+255),b
  8611  0106F2  0E00               	movlw	0
  8612  0106F4  6F89               	movwf	(?___fladd+2)& (0+255),b
  8613  0106F6  0E00               	movlw	0
  8614  0106F8  6F8A               	movwf	(?___fladd+3)& (0+255),b
  8615                           
  8616                           ; BSR set to: 0
  8617  0106FA  0012               	return	
  8618  0106FC                     l2540:
  8619                           
  8620                           ; BSR set to: 0
  8621                           
  8622                           ; BSR set to: 0
  8623  0106FC  0100               	movlb	0	; () banked
  8624  0106FE  518B               	movf	___fladd@a& (0+255),w,b
  8625  010700  0100               	movlb	0	; () banked
  8626  010702  2787               	addwf	___fladd@b& (0+255),f,b
  8627  010704  0100               	movlb	0	; () banked
  8628  010706  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8629  010708  0100               	movlb	0	; () banked
  8630  01070A  2388               	addwfc	(___fladd@b+1)& (0+255),f,b
  8631  01070C  0100               	movlb	0	; () banked
  8632  01070E  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8633  010710  0100               	movlb	0	; () banked
  8634  010712  2389               	addwfc	(___fladd@b+2)& (0+255),f,b
  8635  010714  0100               	movlb	0	; () banked
  8636  010716  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8637  010718  0100               	movlb	0	; () banked
  8638  01071A  238A               	addwfc	(___fladd@b+3)& (0+255),f,b
  8639                           
  8640                           ; BSR set to: 0
  8641  01071C  0100               	movlb	0	; () banked
  8642  01071E  A18A               	btfss	(___fladd@b+3)& (0+255),0,b
  8643  010720  D0CC               	goto	u10010
  8644                           
  8645                           ; BSR set to: 0
  8646  010722  0100               	movlb	0	; () banked
  8647  010724  A19A               	btfss	___fladd@grs& (0+255),0,b
  8648  010726  D009               	goto	l2543
  8649                           
  8650                           ; BSR set to: 0
  8651  010728  0100               	movlb	0	; () banked
  8652  01072A  90D8               	bcf	status,0,c
  8653  01072C  339A               	rrcf	___fladd@grs& (0+255),f,b
  8654  01072E  0100               	movlb	0	; () banked
  8655  010730  519A               	movf	___fladd@grs& (0+255),w,b
  8656  010732  0901               	iorlw	1
  8657  010734  0100               	movlb	0	; () banked
  8658  010736  6F9A               	movwf	___fladd@grs& (0+255),b
  8659  010738  D003               	goto	l2544
  8660  01073A                     l2543:
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665  01073A  0100               	movlb	0	; () banked
  8666  01073C  90D8               	bcf	status,0,c
  8667  01073E  339A               	rrcf	___fladd@grs& (0+255),f,b
  8668  010740                     l2544:
  8669                           
  8670                           ; BSR set to: 0
  8671                           
  8672                           ; BSR set to: 0
  8673  010740  0100               	movlb	0	; () banked
  8674  010742  A187               	btfss	___fladd@b& (0+255),0,b
  8675  010744  D002               	goto	l2545
  8676                           
  8677                           ; BSR set to: 0
  8678  010746  0100               	movlb	0	; () banked
  8679  010748  8F9A               	bsf	___fladd@grs& (0+255),7,b
  8680  01074A                     l2545:
  8681                           
  8682                           ; BSR set to: 0
  8683                           
  8684                           ; BSR set to: 0
  8685  01074A  0100               	movlb	0	; () banked
  8686  01074C  358A               	rlcf	(___fladd@b+3)& (0+255),w,b
  8687  01074E  338A               	rrcf	(___fladd@b+3)& (0+255),f,b
  8688  010750  3389               	rrcf	(___fladd@b+2)& (0+255),f,b
  8689  010752  3388               	rrcf	(___fladd@b+1)& (0+255),f,b
  8690  010754  3387               	rrcf	___fladd@b& (0+255),f,b
  8691                           
  8692                           ; BSR set to: 0
  8693  010756  0100               	movlb	0	; () banked
  8694  010758  2B99               	incf	___fladd@bexp& (0+255),f,b
  8695                           
  8696                           ; BSR set to: 0
  8697  01075A  D0AF               	goto	u10010
  8698  01075C                     l2539:
  8699                           
  8700                           ; BSR set to: 0
  8701                           
  8702                           ; BSR set to: 0
  8703  01075C  0100               	movlb	0	; () banked
  8704  01075E  518B               	movf	___fladd@a& (0+255),w,b
  8705  010760  0100               	movlb	0	; () banked
  8706  010762  5D87               	subwf	___fladd@b& (0+255),w,b
  8707  010764  0100               	movlb	0	; () banked
  8708  010766  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8709  010768  0100               	movlb	0	; () banked
  8710  01076A  5988               	subwfb	(___fladd@b+1)& (0+255),w,b
  8711  01076C  0100               	movlb	0	; () banked
  8712  01076E  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8713  010770  0100               	movlb	0	; () banked
  8714  010772  5989               	subwfb	(___fladd@b+2)& (0+255),w,b
  8715  010774  0100               	movlb	0	; () banked
  8716  010776  518A               	movf	(___fladd@b+3)& (0+255),w,b
  8717  010778  0A80               	xorlw	128
  8718  01077A  0100               	movlb	0	; () banked
  8719  01077C  6F8F               	movwf	??___fladd& (0+255),b
  8720  01077E  0100               	movlb	0	; () banked
  8721  010780  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8722  010782  0A80               	xorlw	128
  8723  010784  0100               	movlb	0	; () banked
  8724  010786  598F               	subwfb	??___fladd& (0+255),w,b
  8725  010788  B0D8               	btfsc	status,0,c
  8726  01078A  D050               	goto	l2547
  8727                           
  8728                           ; BSR set to: 0
  8729  01078C  C087  F08F         	movff	___fladd@b,??___fladd
  8730  010790  C088  F090         	movff	___fladd@b+1,??___fladd+1
  8731  010794  C089  F091         	movff	___fladd@b+2,??___fladd+2
  8732  010798  C08A  F092         	movff	___fladd@b+3,??___fladd+3
  8733  01079C  0100               	movlb	0	; () banked
  8734  01079E  1F8F               	comf	??___fladd& (0+255),f,b
  8735  0107A0  1F90               	comf	(??___fladd+1)& (0+255),f,b
  8736  0107A2  1F91               	comf	(??___fladd+2)& (0+255),f,b
  8737  0107A4  1F92               	comf	(??___fladd+3)& (0+255),f,b
  8738  0107A6  2B8F               	incf	??___fladd& (0+255),f,b
  8739  0107A8  0E00               	movlw	0
  8740  0107AA  2390               	addwfc	(??___fladd+1)& (0+255),f,b
  8741  0107AC  2391               	addwfc	(??___fladd+2)& (0+255),f,b
  8742  0107AE  2392               	addwfc	(??___fladd+3)& (0+255),f,b
  8743  0107B0  0100               	movlb	0	; () banked
  8744  0107B2  518B               	movf	___fladd@a& (0+255),w,b
  8745  0107B4  0100               	movlb	0	; () banked
  8746  0107B6  258F               	addwf	??___fladd& (0+255),w,b
  8747  0107B8  0100               	movlb	0	; () banked
  8748  0107BA  6F93               	movwf	(??___fladd+4)& (0+255),b
  8749  0107BC  0100               	movlb	0	; () banked
  8750  0107BE  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8751  0107C0  0100               	movlb	0	; () banked
  8752  0107C2  2190               	addwfc	(??___fladd+1)& (0+255),w,b
  8753  0107C4  0100               	movlb	0	; () banked
  8754  0107C6  6F94               	movwf	(??___fladd+5)& (0+255),b
  8755  0107C8  0100               	movlb	0	; () banked
  8756  0107CA  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8757  0107CC  0100               	movlb	0	; () banked
  8758  0107CE  2191               	addwfc	(??___fladd+2)& (0+255),w,b
  8759  0107D0  0100               	movlb	0	; () banked
  8760  0107D2  6F95               	movwf	(??___fladd+6)& (0+255),b
  8761  0107D4  0100               	movlb	0	; () banked
  8762  0107D6  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8763  0107D8  0100               	movlb	0	; () banked
  8764  0107DA  2192               	addwfc	(??___fladd+3)& (0+255),w,b
  8765  0107DC  0100               	movlb	0	; () banked
  8766  0107DE  6F96               	movwf	(??___fladd+7)& (0+255),b
  8767  0107E0  0EFF               	movlw	255
  8768  0107E2  0100               	movlb	0	; () banked
  8769  0107E4  2593               	addwf	(??___fladd+4)& (0+255),w,b
  8770  0107E6  0100               	movlb	0	; () banked
  8771  0107E8  6F87               	movwf	___fladd@b& (0+255),b
  8772  0107EA  0EFF               	movlw	255
  8773  0107EC  0100               	movlb	0	; () banked
  8774  0107EE  2194               	addwfc	(??___fladd+5)& (0+255),w,b
  8775  0107F0  0100               	movlb	0	; () banked
  8776  0107F2  6F88               	movwf	(___fladd@b+1)& (0+255),b
  8777  0107F4  0EFF               	movlw	255
  8778  0107F6  0100               	movlb	0	; () banked
  8779  0107F8  2195               	addwfc	(??___fladd+6)& (0+255),w,b
  8780  0107FA  0100               	movlb	0	; () banked
  8781  0107FC  6F89               	movwf	(___fladd@b+2)& (0+255),b
  8782  0107FE  0EFF               	movlw	255
  8783  010800  0100               	movlb	0	; () banked
  8784  010802  2196               	addwfc	(??___fladd+7)& (0+255),w,b
  8785  010804  0100               	movlb	0	; () banked
  8786  010806  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  8787  010808  0E80               	movlw	128
  8788  01080A  0100               	movlb	0	; () banked
  8789  01080C  1B97               	xorwf	___fladd@signs& (0+255),f,b
  8790                           
  8791                           ; BSR set to: 0
  8792  01080E  0100               	movlb	0	; () banked
  8793  010810  6D9A               	negf	___fladd@grs& (0+255),b
  8794                           
  8795                           ; BSR set to: 0
  8796  010812  0100               	movlb	0	; () banked
  8797  010814  519A               	movf	___fladd@grs& (0+255),w,b
  8798  010816  0100               	movlb	0	; () banked
  8799  010818  A4D8               	btfss	status,2,c
  8800  01081A  D018               	goto	l2549
  8801                           
  8802                           ; BSR set to: 0
  8803  01081C  0E01               	movlw	1
  8804  01081E  0100               	movlb	0	; () banked
  8805  010820  2787               	addwf	___fladd@b& (0+255),f,b
  8806  010822  0E00               	movlw	0
  8807  010824  2388               	addwfc	(___fladd@b+1)& (0+255),f,b
  8808  010826  2389               	addwfc	(___fladd@b+2)& (0+255),f,b
  8809  010828  238A               	addwfc	(___fladd@b+3)& (0+255),f,b
  8810                           
  8811                           ; BSR set to: 0
  8812  01082A  D010               	goto	l2549
  8813  01082C                     l2547:
  8814                           
  8815                           ; BSR set to: 0
  8816                           
  8817                           ; BSR set to: 0
  8818  01082C  0100               	movlb	0	; () banked
  8819  01082E  518B               	movf	___fladd@a& (0+255),w,b
  8820  010830  0100               	movlb	0	; () banked
  8821  010832  5F87               	subwf	___fladd@b& (0+255),f,b
  8822  010834  0100               	movlb	0	; () banked
  8823  010836  518C               	movf	(___fladd@a+1)& (0+255),w,b
  8824  010838  0100               	movlb	0	; () banked
  8825  01083A  5B88               	subwfb	(___fladd@b+1)& (0+255),f,b
  8826  01083C  0100               	movlb	0	; () banked
  8827  01083E  518D               	movf	(___fladd@a+2)& (0+255),w,b
  8828  010840  0100               	movlb	0	; () banked
  8829  010842  5B89               	subwfb	(___fladd@b+2)& (0+255),f,b
  8830  010844  0100               	movlb	0	; () banked
  8831  010846  518E               	movf	(___fladd@a+3)& (0+255),w,b
  8832  010848  0100               	movlb	0	; () banked
  8833  01084A  5B8A               	subwfb	(___fladd@b+3)& (0+255),f,b
  8834  01084C                     l2549:
  8835                           
  8836                           ; BSR set to: 0
  8837  01084C  0100               	movlb	0	; () banked
  8838  01084E  5187               	movf	___fladd@b& (0+255),w,b
  8839  010850  0100               	movlb	0	; () banked
  8840  010852  1188               	iorwf	(___fladd@b+1)& (0+255),w,b
  8841  010854  0100               	movlb	0	; () banked
  8842  010856  1189               	iorwf	(___fladd@b+2)& (0+255),w,b
  8843  010858  0100               	movlb	0	; () banked
  8844  01085A  118A               	iorwf	(___fladd@b+3)& (0+255),w,b
  8845  01085C  A4D8               	btfss	status,2,c
  8846  01085E  D02A               	goto	l2556
  8847                           
  8848                           ; BSR set to: 0
  8849  010860  0100               	movlb	0	; () banked
  8850  010862  519A               	movf	___fladd@grs& (0+255),w,b
  8851  010864  0100               	movlb	0	; () banked
  8852  010866  A4D8               	btfss	status,2,c
  8853  010868  D025               	goto	l2556
  8854                           
  8855                           ; BSR set to: 0
  8856  01086A  0E00               	movlw	0
  8857  01086C  0100               	movlb	0	; () banked
  8858  01086E  6F87               	movwf	?___fladd& (0+255),b
  8859  010870  0E00               	movlw	0
  8860  010872  6F88               	movwf	(?___fladd+1)& (0+255),b
  8861  010874  0E00               	movlw	0
  8862  010876  6F89               	movwf	(?___fladd+2)& (0+255),b
  8863  010878  0E00               	movlw	0
  8864  01087A  6F8A               	movwf	(?___fladd+3)& (0+255),b
  8865                           
  8866                           ; BSR set to: 0
  8867  01087C  0012               	return	
  8868  01087E                     
  8869                           ; BSR set to: 0
  8870                           
  8871                           ; BSR set to: 0
  8872  01087E  0100               	movlb	0	; () banked
  8873  010880  90D8               	bcf	status,0,c
  8874  010882  3787               	rlcf	___fladd@b& (0+255),f,b
  8875  010884  3788               	rlcf	(___fladd@b+1)& (0+255),f,b
  8876  010886  3789               	rlcf	(___fladd@b+2)& (0+255),f,b
  8877  010888  378A               	rlcf	(___fladd@b+3)& (0+255),f,b
  8878                           
  8879                           ; BSR set to: 0
  8880  01088A  0100               	movlb	0	; () banked
  8881  01088C  AF9A               	btfss	___fladd@grs& (0+255),7,b
  8882  01088E  D002               	goto	l2553
  8883                           
  8884                           ; BSR set to: 0
  8885  010890  0100               	movlb	0	; () banked
  8886  010892  8187               	bsf	___fladd@b& (0+255),0,b
  8887  010894                     l2553:
  8888                           
  8889                           ; BSR set to: 0
  8890                           
  8891                           ; BSR set to: 0
  8892  010894  0100               	movlb	0	; () banked
  8893  010896  A19A               	btfss	___fladd@grs& (0+255),0,b
  8894  010898  D003               	goto	l2554
  8895                           
  8896                           ; BSR set to: 0
  8897  01089A  80D8               	bsf	status,0,c
  8898  01089C  0100               	movlb	0	; () banked
  8899  01089E  D002               	goto	L5
  8900  0108A0                     l2554:
  8901                           
  8902                           ; BSR set to: 0
  8903                           
  8904                           ; BSR set to: 0
  8905  0108A0  0100               	movlb	0	; () banked
  8906  0108A2  90D8               	bcf	status,0,c
  8907  0108A4                     L5:
  8908  0108A4  379A               	rlcf	___fladd@grs& (0+255),f,b
  8909                           
  8910                           ; BSR set to: 0
  8911                           
  8912                           ; BSR set to: 0
  8913  0108A6  0100               	movlb	0	; () banked
  8914  0108A8  5199               	movf	___fladd@bexp& (0+255),w,b
  8915  0108AA  0100               	movlb	0	; () banked
  8916  0108AC  B4D8               	btfsc	status,2,c
  8917  0108AE  D002               	goto	l2556
  8918                           
  8919                           ; BSR set to: 0
  8920  0108B0  0100               	movlb	0	; () banked
  8921  0108B2  0799               	decf	___fladd@bexp& (0+255),f,b
  8922  0108B4                     l2556:
  8923                           
  8924                           ; BSR set to: 0
  8925                           
  8926                           ; BSR set to: 0
  8927                           
  8928                           ; BSR set to: 0
  8929  0108B4  0100               	movlb	0	; () banked
  8930  0108B6  AF89               	btfss	(___fladd@b+2)& (0+255),7,b
  8931  0108B8  D7E2               	goto	l2552
  8932  0108BA                     u10010:
  8933                           
  8934                           ; BSR set to: 0
  8935                           
  8936                           ; BSR set to: 0
  8937                           
  8938                           ; BSR set to: 0
  8939  0108BA  0E00               	movlw	0
  8940  0108BC  0100               	movlb	0	; () banked
  8941  0108BE  6F98               	movwf	___fladd@aexp& (0+255),b
  8942                           
  8943                           ; BSR set to: 0
  8944  0108C0  0100               	movlb	0	; () banked
  8945  0108C2  AF9A               	btfss	___fladd@grs& (0+255),7,b
  8946  0108C4  D00D               	goto	l2561
  8947                           
  8948                           ; BSR set to: 0
  8949  0108C6  C09A  F08F         	movff	___fladd@grs,??___fladd
  8950  0108CA  0E7F               	movlw	127
  8951  0108CC  0100               	movlb	0	; () banked
  8952  0108CE  178F               	andwf	??___fladd& (0+255),f,b
  8953  0108D0  A4D8               	btfss	status,2,c
  8954  0108D2  D003               	goto	u10040
  8955                           
  8956                           ; BSR set to: 0
  8957                           
  8958                           ; BSR set to: 0
  8959  0108D4  0100               	movlb	0	; () banked
  8960  0108D6  A187               	btfss	___fladd@b& (0+255),0,b
  8961  0108D8  D003               	goto	l2561
  8962  0108DA                     u10040:
  8963                           
  8964                           ; BSR set to: 0
  8965  0108DA  0E01               	movlw	1
  8966  0108DC  0100               	movlb	0	; () banked
  8967  0108DE  6F98               	movwf	___fladd@aexp& (0+255),b
  8968  0108E0                     l2561:
  8969                           
  8970                           ; BSR set to: 0
  8971                           
  8972                           ; BSR set to: 0
  8973                           
  8974                           ; BSR set to: 0
  8975  0108E0  0100               	movlb	0	; () banked
  8976  0108E2  5198               	movf	___fladd@aexp& (0+255),w,b
  8977  0108E4  0100               	movlb	0	; () banked
  8978  0108E6  B4D8               	btfsc	status,2,c
  8979  0108E8  D026               	goto	l2564
  8980                           
  8981                           ; BSR set to: 0
  8982  0108EA  0E01               	movlw	1
  8983  0108EC  0100               	movlb	0	; () banked
  8984  0108EE  2787               	addwf	___fladd@b& (0+255),f,b
  8985  0108F0  0E00               	movlw	0
  8986  0108F2  2388               	addwfc	(___fladd@b+1)& (0+255),f,b
  8987  0108F4  2389               	addwfc	(___fladd@b+2)& (0+255),f,b
  8988  0108F6  238A               	addwfc	(___fladd@b+3)& (0+255),f,b
  8989                           
  8990                           ; BSR set to: 0
  8991  0108F8  0100               	movlb	0	; () banked
  8992  0108FA  A18A               	btfss	(___fladd@b+3)& (0+255),0,b
  8993  0108FC  D01C               	goto	l2564
  8994                           
  8995                           ; BSR set to: 0
  8996  0108FE  C087  F08F         	movff	___fladd@b,??___fladd
  8997  010902  C088  F090         	movff	___fladd@b+1,??___fladd+1
  8998  010906  C089  F091         	movff	___fladd@b+2,??___fladd+2
  8999  01090A  C08A  F092         	movff	___fladd@b+3,??___fladd+3
  9000  01090E  0100               	movlb	0	; () banked
  9001  010910  3592               	rlcf	(??___fladd+3)& (0+255),w,b
  9002  010912  3392               	rrcf	(??___fladd+3)& (0+255),f,b
  9003  010914  3391               	rrcf	(??___fladd+2)& (0+255),f,b
  9004  010916  3390               	rrcf	(??___fladd+1)& (0+255),f,b
  9005  010918  338F               	rrcf	??___fladd& (0+255),f,b
  9006  01091A  C08F  F087         	movff	??___fladd,___fladd@b
  9007  01091E  C090  F088         	movff	??___fladd+1,___fladd@b+1
  9008  010922  C091  F089         	movff	??___fladd+2,___fladd@b+2
  9009  010926  C092  F08A         	movff	??___fladd+3,___fladd@b+3
  9010  01092A  0100               	movlb	0	; () banked
  9011  01092C  2999               	incf	___fladd@bexp& (0+255),w,b
  9012  01092E  B4D8               	btfsc	status,2,c
  9013  010930  D002               	goto	l2564
  9014                           
  9015                           ; BSR set to: 0
  9016  010932  0100               	movlb	0	; () banked
  9017  010934  2B99               	incf	___fladd@bexp& (0+255),f,b
  9018  010936                     l2564:
  9019                           
  9020                           ; BSR set to: 0
  9021                           
  9022                           ; BSR set to: 0
  9023                           
  9024                           ; BSR set to: 0
  9025                           
  9026                           ; BSR set to: 0
  9027  010936  0100               	movlb	0	; () banked
  9028  010938  2999               	incf	___fladd@bexp& (0+255),w,b
  9029  01093A  B4D8               	btfsc	status,2,c
  9030  01093C  D005               	goto	u10090
  9031                           
  9032                           ; BSR set to: 0
  9033  01093E  0100               	movlb	0	; () banked
  9034  010940  5199               	movf	___fladd@bexp& (0+255),w,b
  9035  010942  0100               	movlb	0	; () banked
  9036  010944  A4D8               	btfss	status,2,c
  9037  010946  D011               	goto	l2568
  9038  010948                     u10090:
  9039                           
  9040                           ; BSR set to: 0
  9041                           
  9042                           ; BSR set to: 0
  9043  010948  0E00               	movlw	0
  9044  01094A  0100               	movlb	0	; () banked
  9045  01094C  6F87               	movwf	___fladd@b& (0+255),b
  9046  01094E  0E00               	movlw	0
  9047  010950  6F88               	movwf	(___fladd@b+1)& (0+255),b
  9048  010952  0E00               	movlw	0
  9049  010954  6F89               	movwf	(___fladd@b+2)& (0+255),b
  9050  010956  0E00               	movlw	0
  9051  010958  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  9052  01095A  0100               	movlb	0	; () banked
  9053  01095C  5199               	movf	___fladd@bexp& (0+255),w,b
  9054  01095E  0100               	movlb	0	; () banked
  9055  010960  A4D8               	btfss	status,2,c
  9056  010962  D003               	goto	l2568
  9057                           
  9058                           ; BSR set to: 0
  9059  010964  0E00               	movlw	0
  9060  010966  0100               	movlb	0	; () banked
  9061  010968  6F97               	movwf	___fladd@signs& (0+255),b
  9062  01096A                     l2568:
  9063                           
  9064                           ; BSR set to: 0
  9065                           
  9066                           ; BSR set to: 0
  9067                           
  9068                           ; BSR set to: 0
  9069  01096A  0100               	movlb	0	; () banked
  9070  01096C  A199               	btfss	___fladd@bexp& (0+255),0,b
  9071  01096E  D003               	goto	l2569
  9072                           
  9073                           ; BSR set to: 0
  9074  010970  0100               	movlb	0	; () banked
  9075  010972  8F89               	bsf	(___fladd@b+2)& (0+255),7,b
  9076  010974  D002               	goto	l2570
  9077  010976                     l2569:
  9078                           
  9079                           ; BSR set to: 0
  9080                           
  9081                           ; BSR set to: 0
  9082  010976  0100               	movlb	0	; () banked
  9083  010978  9F89               	bcf	(___fladd@b+2)& (0+255),7,b
  9084  01097A                     l2570:
  9085                           
  9086                           ; BSR set to: 0
  9087                           
  9088                           ; BSR set to: 0
  9089  01097A  0100               	movlb	0	; () banked
  9090  01097C  90D8               	bcf	status,0,c
  9091  01097E  3199               	rrcf	___fladd@bexp& (0+255),w,b
  9092  010980  0100               	movlb	0	; () banked
  9093  010982  6F8A               	movwf	(___fladd@b+3)& (0+255),b
  9094                           
  9095                           ; BSR set to: 0
  9096  010984  0100               	movlb	0	; () banked
  9097  010986  AF97               	btfss	___fladd@signs& (0+255),7,b
  9098  010988  D002               	goto	l2571
  9099                           
  9100                           ; BSR set to: 0
  9101  01098A  0100               	movlb	0	; () banked
  9102  01098C  8F8A               	bsf	(___fladd@b+3)& (0+255),7,b
  9103  01098E                     l2571:
  9104                           
  9105                           ; BSR set to: 0
  9106                           
  9107                           ; BSR set to: 0
  9108  01098E  C087  F087         	movff	___fladd@b,?___fladd
  9109  010992  C088  F088         	movff	___fladd@b+1,?___fladd+1
  9110  010996  C089  F089         	movff	___fladd@b+2,?___fladd+2
  9111  01099A  C08A  F08A         	movff	___fladd@b+3,?___fladd+3
  9112  01099E  0012               	return	
  9113  0109A0                     __end_of___fladd:
  9114                           	opt stack 0
  9115                           tosu	equ	0xFFF
  9116                           tosh	equ	0xFFE
  9117                           tosl	equ	0xFFD
  9118                           pclath	equ	0xFFA
  9119                           tblptru	equ	0xFF8
  9120                           tblptrh	equ	0xFF7
  9121                           tblptrl	equ	0xFF6
  9122                           tablat	equ	0xFF5
  9123                           prodh	equ	0xFF4
  9124                           prodl	equ	0xFF3
  9125                           postinc0	equ	0xFEE
  9126                           wreg	equ	0xFE8
  9127                           postdec1	equ	0xFE5
  9128                           fsr1h	equ	0xFE2
  9129                           fsr1l	equ	0xFE1
  9130                           indf2	equ	0xFDF
  9131                           postinc2	equ	0xFDE
  9132                           postdec2	equ	0xFDD
  9133                           fsr2h	equ	0xFDA
  9134                           fsr2l	equ	0xFD9
  9135                           status	equ	0xFD8
  9136                           
  9137 ;; *************** function ___flneg *****************
  9138 ;; Defined at:
  9139 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\flneg.c"
  9140 ;; Parameters:    Size  Location     Type
  9141 ;;  f1              4    0[BANK0 ] unsigned char 
  9142 ;; Auto vars:     Size  Location     Type
  9143 ;;		None
  9144 ;; Return value:  Size  Location     Type
  9145 ;;                  4    0[BANK0 ] unsigned char 
  9146 ;; Registers used:
  9147 ;;		wreg, status,2, status,0
  9148 ;; Tracked objects:
  9149 ;;		On entry : 0/0
  9150 ;;		On exit  : 0/0
  9151 ;;		Unchanged: 0/0
  9152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9153 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9155 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9156 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9157 ;;Total ram usage:        4 bytes
  9158 ;; Hardware stack levels used:    1
  9159 ;; Hardware stack levels required when called:    7
  9160 ;; This function calls:
  9161 ;;		Nothing
  9162 ;; This function is called by:
  9163 ;;		_pow
  9164 ;;		_exp
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text23
  9169  0164F0                     __ptext23:
  9170                           	opt stack 0
  9171  0164F0                     ___flneg:
  9172                           	opt stack 21
  9173                           
  9174                           ; BSR set to: 0
  9175                           ;incstack = 0
  9176  0164F0  0100               	movlb	0	; () banked
  9177  0164F2  5160               	movf	___flneg@f1& (0+255),w,b
  9178  0164F4  0100               	movlb	0	; () banked
  9179  0164F6  1161               	iorwf	(___flneg@f1+1)& (0+255),w,b
  9180  0164F8  0100               	movlb	0	; () banked
  9181  0164FA  1162               	iorwf	(___flneg@f1+2)& (0+255),w,b
  9182  0164FC  0100               	movlb	0	; () banked
  9183  0164FE  1163               	iorwf	(___flneg@f1+3)& (0+255),w,b
  9184  016500  B4D8               	btfsc	status,2,c
  9185  016502  D009               	goto	l2284
  9186                           
  9187                           ; BSR set to: 0
  9188  016504  0E00               	movlw	0
  9189  016506  0100               	movlb	0	; () banked
  9190  016508  1B60               	xorwf	___flneg@f1& (0+255),f,b
  9191  01650A  0E00               	movlw	0
  9192  01650C  1B61               	xorwf	(___flneg@f1+1)& (0+255),f,b
  9193  01650E  0E00               	movlw	0
  9194  016510  1B62               	xorwf	(___flneg@f1+2)& (0+255),f,b
  9195  016512  0E80               	movlw	128
  9196  016514  1B63               	xorwf	(___flneg@f1+3)& (0+255),f,b
  9197  016516                     l2284:
  9198                           
  9199                           ; BSR set to: 0
  9200                           
  9201                           ; BSR set to: 0
  9202  016516  C060  F060         	movff	___flneg@f1,?___flneg
  9203  01651A  C061  F061         	movff	___flneg@f1+1,?___flneg+1
  9204  01651E  C062  F062         	movff	___flneg@f1+2,?___flneg+2
  9205  016522  C063  F063         	movff	___flneg@f1+3,?___flneg+3
  9206  016526  0012               	return	
  9207  016528                     __end_of___flneg:
  9208                           	opt stack 0
  9209                           tosu	equ	0xFFF
  9210                           tosh	equ	0xFFE
  9211                           tosl	equ	0xFFD
  9212                           pclath	equ	0xFFA
  9213                           tblptru	equ	0xFF8
  9214                           tblptrh	equ	0xFF7
  9215                           tblptrl	equ	0xFF6
  9216                           tablat	equ	0xFF5
  9217                           prodh	equ	0xFF4
  9218                           prodl	equ	0xFF3
  9219                           postinc0	equ	0xFEE
  9220                           wreg	equ	0xFE8
  9221                           postdec1	equ	0xFE5
  9222                           fsr1h	equ	0xFE2
  9223                           fsr1l	equ	0xFE1
  9224                           indf2	equ	0xFDF
  9225                           postinc2	equ	0xFDE
  9226                           postdec2	equ	0xFDD
  9227                           fsr2h	equ	0xFDA
  9228                           fsr2l	equ	0xFD9
  9229                           status	equ	0xFD8
  9230                           
  9231 ;; *************** function _Motor_Speed *****************
  9232 ;; Defined at:
  9233 ;;		line 117 in file "Library/Motor.c"
  9234 ;; Parameters:    Size  Location     Type
  9235 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9236 ;;		 -> main@Stepper(6), 
  9237 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;		None
  9240 ;; Return value:  Size  Location     Type
  9241 ;;                  1    wreg      unsigned char 
  9242 ;; Registers used:
  9243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9249 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9252 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9253 ;;Total ram usage:        4 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    9
  9256 ;; This function calls:
  9257 ;;		_Timer0_Init
  9258 ;; This function is called by:
  9259 ;;		_main
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           	psect	text24
  9264  0166E4                     __ptext24:
  9265                           	opt stack 0
  9266  0166E4                     _Motor_Speed:
  9267                           	opt stack 21
  9268                           
  9269                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9270                           
  9271                           ; BSR set to: 0
  9272                           ;incstack = 0
  9273  0166E4  0100               	movlb	0	; () banked
  9274  0166E6  EE20 F002          	lfsr	2,2
  9275  0166EA  517B               	movf	Motor_Speed@pMotor& (0+255),w,b
  9276  0166EC  26D9               	addwf	fsr2l,f,c
  9277  0166EE  517C               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9278  0166F0  22DA               	addwfc	fsr2h,f,c
  9279  0166F2  C07D  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9280  0166F6  C07E  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9281                           
  9282                           ; BSR set to: 0
  9283                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9284  0166FA  C07D  F06D         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9285  0166FE  C07E  F06E         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9286  016702  0100               	movlb	0	; () banked
  9287  016704  6B6F               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9288  016706  6B70               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9289  016708  ECA4  F09C         	call	_Timer0_Init	;wreg free
  9290  01670C  0012               	return	
  9291  01670E                     __end_of_Motor_Speed:
  9292                           	opt stack 0
  9293                           tosu	equ	0xFFF
  9294                           tosh	equ	0xFFE
  9295                           tosl	equ	0xFFD
  9296                           pclath	equ	0xFFA
  9297                           tblptru	equ	0xFF8
  9298                           tblptrh	equ	0xFF7
  9299                           tblptrl	equ	0xFF6
  9300                           tablat	equ	0xFF5
  9301                           prodh	equ	0xFF4
  9302                           prodl	equ	0xFF3
  9303                           postinc0	equ	0xFEE
  9304                           wreg	equ	0xFE8
  9305                           postdec1	equ	0xFE5
  9306                           fsr1h	equ	0xFE2
  9307                           fsr1l	equ	0xFE1
  9308                           indf2	equ	0xFDF
  9309                           postinc2	equ	0xFDE
  9310                           postdec2	equ	0xFDD
  9311                           fsr2h	equ	0xFDA
  9312                           fsr2l	equ	0xFD9
  9313                           status	equ	0xFD8
  9314                           
  9315 ;; *************** function _Motor_Move *****************
  9316 ;; Defined at:
  9317 ;;		line 51 in file "Library/Motor.c"
  9318 ;; Parameters:    Size  Location     Type
  9319 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9320 ;;		 -> main@Stepper(6), 
  9321 ;;  pDelta          2    5[BANK0 ] short 
  9322 ;; Auto vars:     Size  Location     Type
  9323 ;;		None
  9324 ;; Return value:  Size  Location     Type
  9325 ;;                  1    wreg      unsigned char 
  9326 ;; Registers used:
  9327 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9328 ;; Tracked objects:
  9329 ;;		On entry : 0/0
  9330 ;;		On exit  : 0/0
  9331 ;;		Unchanged: 0/0
  9332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9333 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9335 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9336 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9337 ;;Total ram usage:        6 bytes
  9338 ;; Hardware stack levels used:    1
  9339 ;; Hardware stack levels required when called:    8
  9340 ;; This function calls:
  9341 ;;		_Timer0_Start
  9342 ;; This function is called by:
  9343 ;;		_main
  9344 ;; This function uses a non-reentrant model
  9345 ;;
  9346                           
  9347                           	psect	text25
  9348  0164B6                     __ptext25:
  9349                           	opt stack 0
  9350  0164B6                     _Motor_Move:
  9351                           	opt stack 22
  9352                           
  9353                           ;Motor.c: 54: lMotor = pMotor;
  9354                           
  9355                           ;incstack = 0
  9356  0164B6  C063  F0DC         	movff	Motor_Move@pMotor,_lMotor
  9357  0164BA  C064  F0DD         	movff	Motor_Move@pMotor+1,_lMotor+1
  9358                           
  9359                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9360  0164BE  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9361  0164C2  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9362  0164C6  50DE               	movf	postinc2,w,c
  9363  0164C8  10DE               	iorwf	postinc2,w,c
  9364  0164CA  A4D8               	btfss	status,2,c
  9365  0164CC  0012               	return	
  9366                           
  9367                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9368                           
  9369                           ;Motor.c: 59: return 0;
  9370                           ;	Return value of _Motor_Move is never used
  9371  0164CE  C063  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9372  0164D2  C064  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9373  0164D6  C065  FFDE         	movff	Motor_Move@pDelta,postinc2
  9374  0164DA  C066  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9375                           
  9376                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9377  0164DE  C10B  F060         	movff	_lStepFunction,Timer0_Start@pFunction
  9378  0164E2  C10C  F061         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9379  0164E6  C10D  F062         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9380  0164EA  ECB0  F0B3         	call	_Timer0_Start	;wreg free
  9381  0164EE  0012               	return	
  9382  0164F0                     __end_of_Motor_Move:
  9383                           	opt stack 0
  9384                           tosu	equ	0xFFF
  9385                           tosh	equ	0xFFE
  9386                           tosl	equ	0xFFD
  9387                           pclath	equ	0xFFA
  9388                           tblptru	equ	0xFF8
  9389                           tblptrh	equ	0xFF7
  9390                           tblptrl	equ	0xFF6
  9391                           tablat	equ	0xFF5
  9392                           prodh	equ	0xFF4
  9393                           prodl	equ	0xFF3
  9394                           postinc0	equ	0xFEE
  9395                           wreg	equ	0xFE8
  9396                           postdec1	equ	0xFE5
  9397                           fsr1h	equ	0xFE2
  9398                           fsr1l	equ	0xFE1
  9399                           indf2	equ	0xFDF
  9400                           postinc2	equ	0xFDE
  9401                           postdec2	equ	0xFDD
  9402                           fsr2h	equ	0xFDA
  9403                           fsr2l	equ	0xFD9
  9404                           status	equ	0xFD8
  9405                           
  9406 ;; *************** function _Timer0_Start *****************
  9407 ;; Defined at:
  9408 ;;		line 75 in file "Library/Timer0.c"
  9409 ;; Parameters:    Size  Location     Type
  9410 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9411 ;;		 -> Absolute function(1), Motor_Step(1), 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;		None
  9414 ;; Return value:  Size  Location     Type
  9415 ;;                  1    wreg      void 
  9416 ;; Registers used:
  9417 ;;		wreg, status,2, status,0
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9423 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9426 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9427 ;;Total ram usage:        3 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    7
  9430 ;; This function calls:
  9431 ;;		Nothing
  9432 ;; This function is called by:
  9433 ;;		_Motor_Move
  9434 ;; This function uses a non-reentrant model
  9435 ;;
  9436                           
  9437                           	psect	text26
  9438  016760                     __ptext26:
  9439                           	opt stack 0
  9440  016760                     _Timer0_Start:
  9441                           	opt stack 22
  9442                           
  9443                           ;Timer0.c: 77: gISR = pFunction;
  9444                           
  9445                           ;incstack = 0
  9446  016760  C060  F108         	movff	Timer0_Start@pFunction,_gISR
  9447  016764  C061  F109         	movff	Timer0_Start@pFunction+1,_gISR+1
  9448  016768  C062  F10A         	movff	Timer0_Start@pFunction+2,_gISR+2
  9449                           
  9450                           ;Timer0.c: 78: TMR0 = COUNTER;
  9451  01676C  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9452  016770  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9453                           
  9454                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9455  016774  50D5               	movf	4053,w,c	;volatile
  9456  016776  0100               	movlb	0	; () banked
  9457  016778  19E6               	xorwf	_INDEX& (0+255),w,b
  9458  01677A  0BF8               	andlw	-8
  9459  01677C  19E6               	xorwf	_INDEX& (0+255),w,b
  9460  01677E  6ED5               	movwf	4053,c	;volatile
  9461                           
  9462                           ; BSR set to: 0
  9463                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9464  016780  94F2               	bcf	intcon,2,c	;volatile
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9468  016782  8AF2               	bsf	intcon,5,c	;volatile
  9469                           
  9470                           ; BSR set to: 0
  9471  016784  0012               	return		;funcret
  9472  016786                     __end_of_Timer0_Start:
  9473                           	opt stack 0
  9474                           tosu	equ	0xFFF
  9475                           tosh	equ	0xFFE
  9476                           tosl	equ	0xFFD
  9477                           pclath	equ	0xFFA
  9478                           tblptru	equ	0xFF8
  9479                           tblptrh	equ	0xFF7
  9480                           tblptrl	equ	0xFF6
  9481                           tablat	equ	0xFF5
  9482                           prodh	equ	0xFF4
  9483                           prodl	equ	0xFF3
  9484                           intcon	equ	0xFF2
  9485                           postinc0	equ	0xFEE
  9486                           wreg	equ	0xFE8
  9487                           postdec1	equ	0xFE5
  9488                           fsr1h	equ	0xFE2
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           fsr2h	equ	0xFDA
  9494                           fsr2l	equ	0xFD9
  9495                           status	equ	0xFD8
  9496                           
  9497 ;; *************** function _Motor_Init *****************
  9498 ;; Defined at:
  9499 ;;		line 26 in file "Library/Motor.c"
  9500 ;; Parameters:    Size  Location     Type
  9501 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
  9502 ;;		 -> main@Stepper(6), 
  9503 ;;  pAddress        2   47[BANK0 ] unsigned short 
  9504 ;; Auto vars:     Size  Location     Type
  9505 ;;		None
  9506 ;; Return value:  Size  Location     Type
  9507 ;;                  1    wreg      void 
  9508 ;; Registers used:
  9509 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9510 ;; Tracked objects:
  9511 ;;		On entry : 0/0
  9512 ;;		On exit  : 0/0
  9513 ;;		Unchanged: 0/0
  9514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9515 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9519 ;;Total ram usage:        4 bytes
  9520 ;; Hardware stack levels used:    1
  9521 ;; Hardware stack levels required when called:   12
  9522 ;; This function calls:
  9523 ;;		_Port_SetPin
  9524 ;;		_Port_SetPinType
  9525 ;;		_Timer0_Init
  9526 ;; This function is called by:
  9527 ;;		_main
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           	psect	text27
  9532  01444A                     __ptext27:
  9533                           	opt stack 0
  9534  01444A                     _Motor_Init:
  9535                           	opt stack 18
  9536                           
  9537                           ;Motor.c: 28: pMotor->mDelta = 0;
  9538                           
  9539                           ; BSR set to: 0
  9540                           ;incstack = 0
  9541  01444A  C08D  FFD9         	movff	Motor_Init@pMotor,fsr2l
  9542  01444E  C08E  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
  9543  014452  0E00               	movlw	0
  9544  014454  6EDE               	movwf	postinc2,c
  9545  014456  0E00               	movlw	0
  9546  014458  6EDD               	movwf	postdec2,c
  9547                           
  9548                           ;Motor.c: 29: pMotor->mFrequency = 0;
  9549  01445A  0100               	movlb	0	; () banked
  9550  01445C  EE20 F002          	lfsr	2,2
  9551  014460  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  9552  014462  26D9               	addwf	fsr2l,f,c
  9553  014464  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  9554  014466  22DA               	addwfc	fsr2h,f,c
  9555  014468  0E00               	movlw	0
  9556  01446A  6EDE               	movwf	postinc2,c
  9557  01446C  0E00               	movlw	0
  9558  01446E  6EDD               	movwf	postdec2,c
  9559                           
  9560                           ; BSR set to: 0
  9561                           ;Motor.c: 30: pMotor->mAddress = pAddress;
  9562  014470  0100               	movlb	0	; () banked
  9563  014472  EE20 F004          	lfsr	2,4
  9564  014476  518D               	movf	Motor_Init@pMotor& (0+255),w,b
  9565  014478  26D9               	addwf	fsr2l,f,c
  9566  01447A  518E               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
  9567  01447C  22DA               	addwfc	fsr2h,f,c
  9568  01447E  C08F  FFDE         	movff	Motor_Init@pAddress,postinc2
  9569  014482  C090  FFDD         	movff	Motor_Init@pAddress+1,postdec2
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
  9573  014486  0E8C               	movlw	low _PortE
  9574  014488  0100               	movlb	0	; () banked
  9575  01448A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9576  01448C  0E01               	movlw	high _PortE
  9577  01448E  0100               	movlb	0	; () banked
  9578  014490  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9579  014492  0E00               	movlw	0
  9580  014494  0100               	movlb	0	; () banked
  9581  014496  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9582  014498  0E03               	movlw	3
  9583  01449A  0100               	movlb	0	; () banked
  9584  01449C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9585  01449E  ECAA  F095         	call	_Port_SetPinType	;wreg free
  9586                           
  9587                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
  9588  0144A2  0E8C               	movlw	low _PortE
  9589  0144A4  0100               	movlb	0	; () banked
  9590  0144A6  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
  9591  0144A8  0E01               	movlw	high _PortE
  9592  0144AA  0100               	movlb	0	; () banked
  9593  0144AC  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9594  0144AE  0E01               	movlw	1
  9595  0144B0  0100               	movlb	0	; () banked
  9596  0144B2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
  9597  0144B4  0E03               	movlw	3
  9598  0144B6  0100               	movlb	0	; () banked
  9599  0144B8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
  9600  0144BA  ECAA  F095         	call	_Port_SetPinType	;wreg free
  9601                           
  9602                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
  9603  0144BE  0E8C               	movlw	low _PortE
  9604  0144C0  0100               	movlb	0	; () banked
  9605  0144C2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9606  0144C4  0E01               	movlw	high _PortE
  9607  0144C6  0100               	movlb	0	; () banked
  9608  0144C8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9609  0144CA  0E00               	movlw	0
  9610  0144CC  0100               	movlb	0	; () banked
  9611  0144CE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9612  0144D0  0E00               	movlw	0
  9613  0144D2  0100               	movlb	0	; () banked
  9614  0144D4  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9615  0144D6  EC62  F0A3         	call	_Port_SetPin	;wreg free
  9616                           
  9617                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
  9618  0144DA  0E8C               	movlw	low _PortE
  9619  0144DC  0100               	movlb	0	; () banked
  9620  0144DE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
  9621  0144E0  0E01               	movlw	high _PortE
  9622  0144E2  0100               	movlb	0	; () banked
  9623  0144E4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9624  0144E6  0E01               	movlw	1
  9625  0144E8  0100               	movlb	0	; () banked
  9626  0144EA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
  9627  0144EC  0E00               	movlw	0
  9628  0144EE  0100               	movlb	0	; () banked
  9629  0144F0  6F72               	movwf	Port_SetPin@pValue& (0+255),b
  9630  0144F2  EC62  F0A3         	call	_Port_SetPin	;wreg free
  9631                           
  9632                           ;Motor.c: 38: lStepFunction = Motor_Step;
  9633  0144F6  0E08               	movlw	low _Motor_Step
  9634  0144F8  0101               	movlb	1	; () banked
  9635  0144FA  6F0B               	movwf	_lStepFunction& (0+255),b
  9636  0144FC  0E3C               	movlw	high _Motor_Step
  9637  0144FE  0101               	movlb	1	; () banked
  9638  014500  6F0C               	movwf	(_lStepFunction+1)& (0+255),b
  9639  014502  0E01               	movlw	low (_Motor_Step shr (0+16))
  9640  014504  0101               	movlb	1	; () banked
  9641  014506  6F0D               	movwf	(_lStepFunction+2)& (0+255),b
  9642                           
  9643                           ; BSR set to: 1
  9644                           ;Motor.c: 39: Timer0_Init(1000);
  9645  014508  0EE8               	movlw	232
  9646  01450A  0100               	movlb	0	; () banked
  9647  01450C  6F6D               	movwf	Timer0_Init@pFrequency& (0+255),b
  9648  01450E  0E03               	movlw	3
  9649  014510  6F6E               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
  9650  014512  0E00               	movlw	0
  9651  014514  6F6F               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
  9652  014516  0E00               	movlw	0
  9653  014518  6F70               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
  9654  01451A  ECA4  F09C         	call	_Timer0_Init	;wreg free
  9655  01451E  0012               	return		;funcret
  9656  014520                     __end_of_Motor_Init:
  9657                           	opt stack 0
  9658                           tosu	equ	0xFFF
  9659                           tosh	equ	0xFFE
  9660                           tosl	equ	0xFFD
  9661                           pclath	equ	0xFFA
  9662                           tblptru	equ	0xFF8
  9663                           tblptrh	equ	0xFF7
  9664                           tblptrl	equ	0xFF6
  9665                           tablat	equ	0xFF5
  9666                           prodh	equ	0xFF4
  9667                           prodl	equ	0xFF3
  9668                           intcon	equ	0xFF2
  9669                           postinc0	equ	0xFEE
  9670                           wreg	equ	0xFE8
  9671                           postdec1	equ	0xFE5
  9672                           fsr1h	equ	0xFE2
  9673                           fsr1l	equ	0xFE1
  9674                           indf2	equ	0xFDF
  9675                           postinc2	equ	0xFDE
  9676                           postdec2	equ	0xFDD
  9677                           fsr2h	equ	0xFDA
  9678                           fsr2l	equ	0xFD9
  9679                           status	equ	0xFD8
  9680                           
  9681 ;; *************** function _Timer0_Init *****************
  9682 ;; Defined at:
  9683 ;;		line 25 in file "Library/Timer0.c"
  9684 ;; Parameters:    Size  Location     Type
  9685 ;;  pFrequency      4   13[BANK0 ] unsigned long 
  9686 ;; Auto vars:     Size  Location     Type
  9687 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
  9688 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
  9689 ;; Return value:  Size  Location     Type
  9690 ;;                  1    wreg      void 
  9691 ;; Registers used:
  9692 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9698 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9699 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9701 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9702 ;;Total ram usage:       14 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    8
  9705 ;; This function calls:
  9706 ;;		_Timer0_Clear
  9707 ;;		___lldiv
  9708 ;; This function is called by:
  9709 ;;		_Motor_Init
  9710 ;;		_Motor_Speed
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           	psect	text28
  9715  013948                     __ptext28:
  9716                           	opt stack 0
  9717  013948                     _Timer0_Init:
  9718                           	opt stack 21
  9719                           
  9720                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
  9721                           
  9722                           ;incstack = 0
  9723  013948  0E80               	movlw	128
  9724  01394A  0100               	movlb	0	; () banked
  9725  01394C  6F73               	movwf	Timer0_Init@pCPUClock& (0+255),b
  9726  01394E  0E8D               	movlw	141
  9727  013950  6F74               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
  9728  013952  0E5B               	movlw	91
  9729  013954  6F75               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
  9730  013956  0E00               	movlw	0
  9731  013958  6F76               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
  9732                           
  9733                           ; BSR set to: 0
  9734                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
  9735                           ;Timer0.c: 31: static UINT8 PRE = 0;
  9736                           ;Timer0.c: 32: static UINT32 DIV = 0;
  9737                           ;Timer0.c: 34: UINT32 DIVIDE;
  9738                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
  9739  01395A  9ED5               	bcf	4053,7,c	;volatile
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;Timer0.c: 38: if (pFrequency == 0)
  9743  01395C  0100               	movlb	0	; () banked
  9744  01395E  516D               	movf	Timer0_Init@pFrequency& (0+255),w,b
  9745  013960  0100               	movlb	0	; () banked
  9746  013962  116E               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
  9747  013964  0100               	movlb	0	; () banked
  9748  013966  116F               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
  9749  013968  0100               	movlb	0	; () banked
  9750  01396A  1170               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
  9751  01396C  B4D8               	btfsc	status,2,c
  9752  01396E  0012               	return	
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;Timer0.c: 41: T0CONbits.PSA = 0;
  9756                           
  9757                           ; BSR set to: 0
  9758                           ;Timer0.c: 39: return;
  9759  013970  96D5               	bcf	4053,3,c	;volatile
  9760                           
  9761                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
  9762  013972  9CD5               	bcf	4053,6,c	;volatile
  9763                           
  9764                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
  9765  013974  9AD5               	bcf	4053,5,c	;volatile
  9766                           
  9767                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
  9768  013976  98D5               	bcf	4053,4,c	;volatile
  9769                           
  9770                           ; BSR set to: 0
  9771                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
  9772  013978  C073  F060         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
  9773  01397C  C074  F061         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
  9774  013980  C075  F062         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
  9775  013984  C076  F063         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
  9776  013988  C06D  F064         	movff	Timer0_Init@pFrequency,___lldiv@divisor
  9777  01398C  C06E  F065         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
  9778  013990  C06F  F066         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
  9779  013994  C070  F067         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
  9780  013998  EC84  F0A4         	call	___lldiv	;wreg free
  9781  01399C  C060  F077         	movff	?___lldiv,Timer0_Init@DIVIDE
  9782  0139A0  C061  F078         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
  9783  0139A4  C062  F079         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
  9784  0139A8  C063  F07A         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
  9785                           
  9786                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
  9787  0139AC  D00C               	goto	l1787
  9788  0139AE                     l13938:
  9789                           
  9790                           ;Timer0.c: 50: {
  9791                           ;Timer0.c: 51: INDEX ++;
  9792  0139AE  0100               	movlb	0	; () banked
  9793  0139B0  2BE6               	incf	_INDEX& (0+255),f,b
  9794                           
  9795                           ; BSR set to: 0
  9796                           ;Timer0.c: 52: if (INDEX >= 3)
  9797  0139B2  0E02               	movlw	2
  9798  0139B4  0100               	movlb	0	; () banked
  9799  0139B6  65E6               	cpfsgt	_INDEX& (0+255),b
  9800  0139B8  D001               	goto	l1785
  9801  0139BA  D02F               	goto	u11670
  9802  0139BC                     l1785:
  9803                           
  9804                           ; BSR set to: 0
  9805                           ;Timer0.c: 56: if (INDEX >= 8)
  9806                           
  9807                           ; BSR set to: 0
  9808  0139BC  0E07               	movlw	7
  9809  0139BE  0100               	movlb	0	; () banked
  9810  0139C0  65E6               	cpfsgt	_INDEX& (0+255),b
  9811  0139C2  D001               	goto	l1787
  9812  0139C4  0012               	return	
  9813  0139C6                     l1787:
  9814                           
  9815                           ; BSR set to: 0
  9816                           
  9817                           ; BSR set to: 0
  9818  0139C6  C077  F060         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
  9819  0139CA  C078  F061         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
  9820  0139CE  C079  F062         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
  9821  0139D2  C07A  F063         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
  9822  0139D6  0100               	movlb	0	; () banked
  9823  0139D8  51E6               	movf	_INDEX& (0+255),w,b
  9824  0139DA  0D02               	mullw	2
  9825  0139DC  0EE9               	movlw	low Timer0_Init@PRESCALE
  9826  0139DE  24F3               	addwf	prodl,w,c
  9827  0139E0  6EF6               	movwf	tblptrl,c
  9828  0139E2  0EFC               	movlw	high Timer0_Init@PRESCALE
  9829  0139E4  20F4               	addwfc	prodh,w,c
  9830  0139E6  6EF7               	movwf	tblptrh,c
  9831  0139E8                     	if	1	;There are 3 active tblptr bytes
  9832  0139E8  6AF8               	clrf	tblptru,c
  9833  0139EA  0E00               	movlw	low (__mediumconst shr (0+16))
  9834  0139EC  22F8               	addwfc	tblptru,f,c
  9835  0139EE                     	endif
  9836  0139EE  0009               	tblrd		*+
  9837  0139F0  CFF5 F071          	movff	tablat,??_Timer0_Init
  9838  0139F4  0009               	tblrd		*+
  9839  0139F6  CFF5 F072          	movff	tablat,??_Timer0_Init+1
  9840  0139FA  C071  F064         	movff	??_Timer0_Init,___lldiv@divisor
  9841  0139FE  C072  F065         	movff	??_Timer0_Init+1,___lldiv@divisor+1
  9842  013A02  0100               	movlb	0	; () banked
  9843  013A04  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  9844  013A06  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  9845  013A08  EC84  F0A4         	call	___lldiv	;wreg free
  9846  013A0C  0100               	movlb	0	; () banked
  9847  013A0E  5163               	movf	(?___lldiv+3)& (0+255),w,b
  9848  013A10  E1CE               	bnz	l13938
  9849  013A12  0100               	movlb	0	; () banked
  9850  013A14  0562               	decf	(?___lldiv+2)& (0+255),w,b
  9851  013A16  B0D8               	btfsc	status,0,c
  9852  013A18  D7CA               	goto	l1784
  9853  013A1A                     u11670:
  9854                           
  9855                           ; BSR set to: 0
  9856                           ;Timer0.c: 58: }
  9857                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
  9858                           
  9859                           ; BSR set to: 0
  9860  013A1A  0100               	movlb	0	; () banked
  9861  013A1C  51E6               	movf	_INDEX& (0+255),w,b
  9862  013A1E  0D02               	mullw	2
  9863  013A20  0EE9               	movlw	low Timer0_Init@PRESCALE
  9864  013A22  24F3               	addwf	prodl,w,c
  9865  013A24  6EF6               	movwf	tblptrl,c
  9866  013A26  0EFC               	movlw	high Timer0_Init@PRESCALE
  9867  013A28  20F4               	addwfc	prodh,w,c
  9868  013A2A  6EF7               	movwf	tblptrh,c
  9869  013A2C                     	if	1	;There are 3 active tblptr bytes
  9870  013A2C  6AF8               	clrf	tblptru,c
  9871  013A2E  0E00               	movlw	low (__mediumconst shr (0+16))
  9872  013A30  22F8               	addwfc	tblptru,f,c
  9873  013A32                     	endif
  9874  013A32  0008               	tblrd		*
  9875  013A34  CFF5 F0E5          	movff	tablat,Timer0_Init@PRE
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;Timer0.c: 63: DIV = (DIVIDE-1);
  9879  013A38  0EFF               	movlw	255
  9880  013A3A  0100               	movlb	0	; () banked
  9881  013A3C  2577               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
  9882  013A3E  0101               	movlb	1	; () banked
  9883  013A40  6F04               	movwf	Timer0_Init@DIV& (0+255),b
  9884  013A42  0EFF               	movlw	255
  9885  013A44  0100               	movlb	0	; () banked
  9886  013A46  2178               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
  9887  013A48  0101               	movlb	1	; () banked
  9888  013A4A  6F05               	movwf	(Timer0_Init@DIV+1)& (0+255),b
  9889  013A4C  0EFF               	movlw	255
  9890  013A4E  0100               	movlb	0	; () banked
  9891  013A50  2179               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
  9892  013A52  0101               	movlb	1	; () banked
  9893  013A54  6F06               	movwf	(Timer0_Init@DIV+2)& (0+255),b
  9894  013A56  0EFF               	movlw	255
  9895  013A58  0100               	movlb	0	; () banked
  9896  013A5A  217A               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
  9897  013A5C  0101               	movlb	1	; () banked
  9898  013A5E  6F07               	movwf	(Timer0_Init@DIV+3)& (0+255),b
  9899                           
  9900                           ; BSR set to: 1
  9901                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
  9902  013A60  C104  F060         	movff	Timer0_Init@DIV,___lldiv@dividend
  9903  013A64  C105  F061         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
  9904  013A68  C106  F062         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
  9905  013A6C  C107  F063         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
  9906  013A70  0100               	movlb	0	; () banked
  9907  013A72  51E5               	movf	Timer0_Init@PRE& (0+255),w,b
  9908  013A74  0100               	movlb	0	; () banked
  9909  013A76  6F64               	movwf	___lldiv@divisor& (0+255),b
  9910  013A78  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
  9911  013A7A  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
  9912  013A7C  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
  9913  013A7E  EC84  F0A4         	call	___lldiv	;wreg free
  9914  013A82  0100               	movlb	0	; () banked
  9915  013A84  1F60               	comf	?___lldiv& (0+255),f,b
  9916  013A86  0100               	movlb	0	; () banked
  9917  013A88  1F61               	comf	(?___lldiv+1)& (0+255),f,b
  9918  013A8A  0100               	movlb	0	; () banked
  9919  013A8C  4B60               	infsnz	?___lldiv& (0+255),f,b
  9920  013A8E  2B61               	incf	(?___lldiv+1)& (0+255),f,b
  9921  013A90  0EFF               	movlw	255
  9922  013A92  0100               	movlb	0	; () banked
  9923  013A94  2560               	addwf	?___lldiv& (0+255),w,b
  9924  013A96  6E29               	movwf	_COUNTER,c
  9925  013A98  0EFF               	movlw	255
  9926  013A9A  0100               	movlb	0	; () banked
  9927  013A9C  2161               	addwfc	(?___lldiv+1)& (0+255),w,b
  9928  013A9E  6E2A               	movwf	_COUNTER+1,c
  9929                           
  9930                           ; BSR set to: 0
  9931                           ;Timer0.c: 68: Timer0_Clear();
  9932  013AA0  EC1A  F0B5         	call	_Timer0_Clear	;wreg free
  9933                           
  9934                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
  9935  013AA4  8ED5               	bsf	4053,7,c	;volatile
  9936  013AA6  0012               	return		;funcret
  9937  013AA8                     __end_of_Timer0_Init:
  9938                           	opt stack 0
  9939                           tosu	equ	0xFFF
  9940                           tosh	equ	0xFFE
  9941                           tosl	equ	0xFFD
  9942                           pclath	equ	0xFFA
  9943                           tblptru	equ	0xFF8
  9944                           tblptrh	equ	0xFF7
  9945                           tblptrl	equ	0xFF6
  9946                           tablat	equ	0xFF5
  9947                           prodh	equ	0xFF4
  9948                           prodl	equ	0xFF3
  9949                           intcon	equ	0xFF2
  9950                           postinc0	equ	0xFEE
  9951                           wreg	equ	0xFE8
  9952                           postdec1	equ	0xFE5
  9953                           fsr1h	equ	0xFE2
  9954                           fsr1l	equ	0xFE1
  9955                           indf2	equ	0xFDF
  9956                           postinc2	equ	0xFDE
  9957                           postdec2	equ	0xFDD
  9958                           fsr2h	equ	0xFDA
  9959                           fsr2l	equ	0xFD9
  9960                           status	equ	0xFD8
  9961                           
  9962 ;; *************** function _Timer0_Clear *****************
  9963 ;; Defined at:
  9964 ;;		line 20 in file "Library/Timer0.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;		None
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;		None
  9969 ;; Return value:  Size  Location     Type
  9970 ;;                  1    wreg      void 
  9971 ;; Registers used:
  9972 ;;		None
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;Total ram usage:        0 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; Hardware stack levels required when called:    7
  9985 ;; This function calls:
  9986 ;;		Nothing
  9987 ;; This function is called by:
  9988 ;;		_Timer0_Init
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           	psect	text29
  9993  016A34                     __ptext29:
  9994                           	opt stack 0
  9995  016A34                     _Timer0_Clear:
  9996                           	opt stack 21
  9997                           
  9998                           ;Timer0.c: 22: TMR0 = COUNTER;
  9999                           
 10000                           ;incstack = 0
 10001  016A34  C029  FFD6         	movff	_COUNTER,4054	;volatile
 10002  016A38  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 10003                           
 10004                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 10005  016A3C  94F2               	bcf	intcon,2,c	;volatile
 10006  016A3E  0012               	return		;funcret
 10007  016A40                     __end_of_Timer0_Clear:
 10008                           	opt stack 0
 10009                           tosu	equ	0xFFF
 10010                           tosh	equ	0xFFE
 10011                           tosl	equ	0xFFD
 10012                           pclath	equ	0xFFA
 10013                           tblptru	equ	0xFF8
 10014                           tblptrh	equ	0xFF7
 10015                           tblptrl	equ	0xFF6
 10016                           tablat	equ	0xFF5
 10017                           prodh	equ	0xFF4
 10018                           prodl	equ	0xFF3
 10019                           intcon	equ	0xFF2
 10020                           postinc0	equ	0xFEE
 10021                           wreg	equ	0xFE8
 10022                           postdec1	equ	0xFE5
 10023                           fsr1h	equ	0xFE2
 10024                           fsr1l	equ	0xFE1
 10025                           indf2	equ	0xFDF
 10026                           postinc2	equ	0xFDE
 10027                           postdec2	equ	0xFDD
 10028                           fsr2h	equ	0xFDA
 10029                           fsr2l	equ	0xFD9
 10030                           status	equ	0xFD8
 10031                           
 10032 ;; *************** function _MXK_Init *****************
 10033 ;; Defined at:
 10034 ;;		line 33 in file "Library/MXK.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;		None
 10039 ;; Return value:  Size  Location     Type
 10040 ;;                  1    wreg      void 
 10041 ;; Registers used:
 10042 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10043 ;; Tracked objects:
 10044 ;;		On entry : 0/0
 10045 ;;		On exit  : 0/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10052 ;;Total ram usage:        0 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; Hardware stack levels required when called:   16
 10055 ;; This function calls:
 10056 ;;		_LED_Init
 10057 ;;		_Port_Init
 10058 ;;		_Port_SetPin
 10059 ;;		_Port_SetPinType
 10060 ;;		_Port_SetQuadType
 10061 ;;		_Port_SetType
 10062 ;;		_delay_ms
 10063 ;; This function is called by:
 10064 ;;		_main
 10065 ;; This function uses a non-reentrant model
 10066 ;;
 10067                           
 10068                           	psect	text30
 10069  0134F0                     __ptext30:
 10070                           	opt stack 0
 10071  0134F0                     _MXK_Init:
 10072                           	opt stack 14
 10073                           
 10074                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 10075                           
 10076                           ;incstack = 0
 10077  0134F0  0E01               	movlw	1
 10078  0134F2  6E4A               	movwf	_Bus_State,c
 10079                           
 10080                           ;MXK.c: 36: lQueue = (Function)0;
 10081  0134F4  0E00               	movlw	0
 10082  0134F6  0100               	movlb	0	; () banked
 10083  0134F8  6FD5               	movwf	_lQueue& (0+255),b	;volatile
 10084  0134FA  0E00               	movlw	0
 10085  0134FC  0100               	movlb	0	; () banked
 10086  0134FE  6FD6               	movwf	(_lQueue+1)& (0+255),b	;volatile
 10087  013500  0E00               	movlw	0
 10088  013502  0100               	movlb	0	; () banked
 10089  013504  6FD7               	movwf	(_lQueue+2)& (0+255),b	;volatile
 10090                           
 10091                           ; BSR set to: 0
 10092                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 10093  013506  0EAA               	movlw	low _PortA
 10094  013508  0100               	movlb	0	; () banked
 10095  01350A  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10096  01350C  0E01               	movlw	high _PortA
 10097  01350E  0100               	movlb	0	; () banked
 10098  013510  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10099  013512  0E00               	movlw	0
 10100  013514  0100               	movlb	0	; () banked
 10101  013516  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10102  013518  EC22  F098         	call	_Port_Init	;wreg free
 10103                           
 10104                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 10105  01351C  0EA0               	movlw	low _PortB
 10106  01351E  0100               	movlb	0	; () banked
 10107  013520  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10108  013522  0E01               	movlw	high _PortB
 10109  013524  0100               	movlb	0	; () banked
 10110  013526  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10111  013528  0E01               	movlw	1
 10112  01352A  0100               	movlb	0	; () banked
 10113  01352C  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10114  01352E  EC22  F098         	call	_Port_Init	;wreg free
 10115                           
 10116                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 10117  013532  0E35               	movlw	low _PortC
 10118  013534  0100               	movlb	0	; () banked
 10119  013536  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10120  013538  0E00               	movlw	high _PortC
 10121  01353A  0100               	movlb	0	; () banked
 10122  01353C  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10123  01353E  0E02               	movlw	2
 10124  013540  0100               	movlb	0	; () banked
 10125  013542  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10126  013544  EC22  F098         	call	_Port_Init	;wreg free
 10127                           
 10128                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 10129  013548  0E96               	movlw	low _PortD
 10130  01354A  0100               	movlb	0	; () banked
 10131  01354C  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10132  01354E  0E01               	movlw	high _PortD
 10133  013550  0100               	movlb	0	; () banked
 10134  013552  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10135  013554  0E03               	movlw	3
 10136  013556  0100               	movlb	0	; () banked
 10137  013558  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10138  01355A  EC22  F098         	call	_Port_Init	;wreg free
 10139                           
 10140                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 10141  01355E  0E8C               	movlw	low _PortE
 10142  013560  0100               	movlb	0	; () banked
 10143  013562  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10144  013564  0E01               	movlw	high _PortE
 10145  013566  0100               	movlb	0	; () banked
 10146  013568  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10147  01356A  0E04               	movlw	4
 10148  01356C  0100               	movlb	0	; () banked
 10149  01356E  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10150  013570  EC22  F098         	call	_Port_Init	;wreg free
 10151                           
 10152                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 10153  013574  0EB4               	movlw	low _PortF
 10154  013576  0100               	movlb	0	; () banked
 10155  013578  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10156  01357A  0E01               	movlw	high _PortF
 10157  01357C  0100               	movlb	0	; () banked
 10158  01357E  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10159  013580  0E05               	movlw	5
 10160  013582  0100               	movlb	0	; () banked
 10161  013584  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10162  013586  EC22  F098         	call	_Port_Init	;wreg free
 10163                           
 10164                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 10165  01358A  0E82               	movlw	low _PortG
 10166  01358C  0100               	movlb	0	; () banked
 10167  01358E  6FA0               	movwf	Port_Init@pInput& (0+255),b
 10168  013590  0E01               	movlw	high _PortG
 10169  013592  0100               	movlb	0	; () banked
 10170  013594  6FA1               	movwf	(Port_Init@pInput+1)& (0+255),b
 10171  013596  0E06               	movlw	6
 10172  013598  0100               	movlb	0	; () banked
 10173  01359A  6FA2               	movwf	Port_Init@pPort& (0+255),b
 10174  01359C  EC22  F098         	call	_Port_Init	;wreg free
 10175                           
 10176                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 10177  0135A0  0EB4               	movlw	low _PortF
 10178  0135A2  0100               	movlb	0	; () banked
 10179  0135A4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 10180  0135A6  0E01               	movlw	high _PortF
 10181  0135A8  0100               	movlb	0	; () banked
 10182  0135AA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10183  0135AC  0E05               	movlw	5
 10184  0135AE  0100               	movlb	0	; () banked
 10185  0135B0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 10186  0135B2  0E00               	movlw	0
 10187  0135B4  0100               	movlb	0	; () banked
 10188  0135B6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10189  0135B8  ECAA  F095         	call	_Port_SetPinType	;wreg free
 10190                           
 10191                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 10192  0135BC  0EA0               	movlw	low _PortB
 10193  0135BE  0100               	movlb	0	; () banked
 10194  0135C0  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 10195  0135C2  0E01               	movlw	high _PortB
 10196  0135C4  0100               	movlb	0	; () banked
 10197  0135C6  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 10198  0135C8  0E00               	movlw	0
 10199  0135CA  0100               	movlb	0	; () banked
 10200  0135CC  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 10201  0135CE  0E00               	movlw	0
 10202  0135D0  0100               	movlb	0	; () banked
 10203  0135D2  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 10204  0135D4  EC7E  F08F         	call	_Port_SetQuadType	;wreg free
 10205                           
 10206                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 10207  0135D8  0EB4               	movlw	low _PortF
 10208  0135DA  0100               	movlb	0	; () banked
 10209  0135DC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 10210  0135DE  0E01               	movlw	high _PortF
 10211  0135E0  0100               	movlb	0	; () banked
 10212  0135E2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 10213  0135E4  0E06               	movlw	6
 10214  0135E6  0100               	movlb	0	; () banked
 10215  0135E8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 10216  0135EA  0E03               	movlw	3
 10217  0135EC  0100               	movlb	0	; () banked
 10218  0135EE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10219  0135F0  ECAA  F095         	call	_Port_SetPinType	;wreg free
 10220                           
 10221                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 10222  0135F4  0E82               	movlw	low _PortG
 10223  0135F6  0100               	movlb	0	; () banked
 10224  0135F8  6F9A               	movwf	Port_SetType@pInput& (0+255),b
 10225  0135FA  0E01               	movlw	high _PortG
 10226  0135FC  0100               	movlb	0	; () banked
 10227  0135FE  6F9B               	movwf	(Port_SetType@pInput+1)& (0+255),b
 10228  013600  0E03               	movlw	3
 10229  013602  0100               	movlb	0	; () banked
 10230  013604  6F9C               	movwf	Port_SetType@pType& (0+255),b
 10231  013606  ECA9  F090         	call	_Port_SetType	;wreg free
 10232                           
 10233                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 10234  01360A  0E82               	movlw	low _PortG
 10235  01360C  0100               	movlb	0	; () banked
 10236  01360E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10237  013610  0E01               	movlw	high _PortG
 10238  013612  0100               	movlb	0	; () banked
 10239  013614  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10240  013616  0E04               	movlw	4
 10241  013618  0100               	movlb	0	; () banked
 10242  01361A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10243  01361C  0E00               	movlw	0
 10244  01361E  0100               	movlb	0	; () banked
 10245  013620  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10246  013622  EC62  F0A3         	call	_Port_SetPin	;wreg free
 10247                           
 10248                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 10249  013626  0EB4               	movlw	low _PortF
 10250  013628  0100               	movlb	0	; () banked
 10251  01362A  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 10252  01362C  0E01               	movlw	high _PortF
 10253  01362E  0100               	movlb	0	; () banked
 10254  013630  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10255  013632  0E06               	movlw	6
 10256  013634  0100               	movlb	0	; () banked
 10257  013636  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 10258  013638  0E01               	movlw	1
 10259  01363A  0100               	movlb	0	; () banked
 10260  01363C  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 10261  01363E  EC62  F0A3         	call	_Port_SetPin	;wreg free
 10262                           
 10263                           ;MXK.c: 55: LED_Init(eLED1);
 10264  013642  0E00               	movlw	0
 10265  013644  ECBA  F0AE         	call	_LED_Init
 10266                           
 10267                           ;MXK.c: 56: LED_Init(eLED2);
 10268  013648  0E01               	movlw	1
 10269  01364A  ECBA  F0AE         	call	_LED_Init
 10270                           
 10271                           ;MXK.c: 58: PIR1 = 0;
 10272  01364E  0E00               	movlw	0
 10273  013650  6E9E               	movwf	3998,c	;volatile
 10274                           
 10275                           ;MXK.c: 59: PIR2 = 0;
 10276  013652  0E00               	movlw	0
 10277  013654  6EA1               	movwf	4001,c	;volatile
 10278                           
 10279                           ;MXK.c: 60: PIR3 = 0;
 10280  013656  0E00               	movlw	0
 10281  013658  6EA4               	movwf	4004,c	;volatile
 10282                           
 10283                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 10284  01365A  8E9B               	bsf	3995,7,c	;volatile
 10285                           
 10286                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 10287  01365C  8C9B               	bsf	3995,6,c	;volatile
 10288                           
 10289                           ;MXK.c: 66: delay_ms(100);
 10290  01365E  0E00               	movlw	0
 10291  013660  0100               	movlb	0	; () banked
 10292  013662  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 10293  013664  0E64               	movlw	100
 10294  013666  6F60               	movwf	delay_ms@ms& (0+255),b
 10295  013668  ECB7  F0AD         	call	_delay_ms	;wreg free
 10296                           
 10297                           ;MXK.c: 68: RCONbits.IPEN = 1;
 10298  01366C  8ED0               	bsf	4048,7,c	;volatile
 10299  01366E  0012               	return		;funcret
 10300  013670                     __end_of_MXK_Init:
 10301                           	opt stack 0
 10302                           tosu	equ	0xFFF
 10303                           tosh	equ	0xFFE
 10304                           tosl	equ	0xFFD
 10305                           pclath	equ	0xFFA
 10306                           tblptru	equ	0xFF8
 10307                           tblptrh	equ	0xFF7
 10308                           tblptrl	equ	0xFF6
 10309                           tablat	equ	0xFF5
 10310                           prodh	equ	0xFF4
 10311                           prodl	equ	0xFF3
 10312                           intcon	equ	0xFF2
 10313                           postinc0	equ	0xFEE
 10314                           wreg	equ	0xFE8
 10315                           postdec1	equ	0xFE5
 10316                           fsr1h	equ	0xFE2
 10317                           fsr1l	equ	0xFE1
 10318                           indf2	equ	0xFDF
 10319                           postinc2	equ	0xFDE
 10320                           postdec2	equ	0xFDD
 10321                           fsr2h	equ	0xFDA
 10322                           fsr2l	equ	0xFD9
 10323                           status	equ	0xFD8
 10324                           
 10325 ;; *************** function _Port_Init *****************
 10326 ;; Defined at:
 10327 ;;		line 150 in file "Library/Port.c"
 10328 ;; Parameters:    Size  Location     Type
 10329 ;;  pInput          2   64[BANK0 ] const PTR struct Port
 10330 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10331 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10332 ;;  pPort           1   66[BANK0 ] enum E6786
 10333 ;; Auto vars:     Size  Location     Type
 10334 ;;  i               1   69[BANK0 ] unsigned char 
 10335 ;; Return value:  Size  Location     Type
 10336 ;;                  1    wreg      void 
 10337 ;; Registers used:
 10338 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10339 ;; Tracked objects:
 10340 ;;		On entry : 0/0
 10341 ;;		On exit  : 0/0
 10342 ;;		Unchanged: 0/0
 10343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10344 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10346 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10347 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10348 ;;Total ram usage:        6 bytes
 10349 ;; Hardware stack levels used:    1
 10350 ;; Hardware stack levels required when called:   15
 10351 ;; This function calls:
 10352 ;;		_GetPortPORT
 10353 ;;		_GetPortProperties
 10354 ;;		_GetPortTRIS
 10355 ;;		_Port_Set
 10356 ;;		_Port_SetPinType
 10357 ;;		_Port_SetType
 10358 ;;		_Word_GetPair
 10359 ;; This function is called by:
 10360 ;;		_MXK_Init
 10361 ;; This function uses a non-reentrant model
 10362 ;;
 10363                           
 10364                           	psect	text31
 10365  013044                     __ptext31:
 10366                           	opt stack 0
 10367  013044                     _Port_Init:
 10368                           	opt stack 14
 10369                           
 10370                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 10371                           
 10372                           ;incstack = 0
 10373  013044  0100               	movlb	0	; () banked
 10374  013046  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10375  013048  EC9F  F0A7         	call	_GetPortProperties
 10376  01304C  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 10377  013050  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 10378  013054  0100               	movlb	0	; () banked
 10379  013056  C060  FFDE         	movff	?_GetPortProperties,postinc2
 10380  01305A  0100               	movlb	0	; () banked
 10381  01305C  C061  FFDD         	movff	?_GetPortProperties+1,postdec2
 10382                           
 10383                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 10384  013060  0100               	movlb	0	; () banked
 10385  013062  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10386  013064  ECF2  F0A7         	call	_GetPortPORT
 10387  013068  0100               	movlb	0	; () banked
 10388  01306A  EE20 F006          	lfsr	2,6
 10389  01306E  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10390  013070  26D9               	addwf	fsr2l,f,c
 10391  013072  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10392  013074  22DA               	addwfc	fsr2h,f,c
 10393  013076  0100               	movlb	0	; () banked
 10394  013078  C060  FFDE         	movff	?_GetPortPORT,postinc2
 10395  01307C  0100               	movlb	0	; () banked
 10396  01307E  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 10397                           
 10398                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 10399  013082  0100               	movlb	0	; () banked
 10400  013084  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10401  013086  ECF2  F0A7         	call	_GetPortPORT
 10402  01308A  0100               	movlb	0	; () banked
 10403  01308C  EE20 F004          	lfsr	2,4
 10404  013090  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10405  013092  26D9               	addwf	fsr2l,f,c
 10406  013094  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10407  013096  22DA               	addwfc	fsr2h,f,c
 10408  013098  0100               	movlb	0	; () banked
 10409  01309A  C060  FFDE         	movff	?_GetPortPORT,postinc2
 10410  01309E  0100               	movlb	0	; () banked
 10411  0130A0  C061  FFDD         	movff	?_GetPortPORT+1,postdec2
 10412                           
 10413                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 10414  0130A4  0100               	movlb	0	; () banked
 10415  0130A6  51A2               	movf	Port_Init@pPort& (0+255),w,b
 10416  0130A8  EC4C  F0A7         	call	_GetPortTRIS
 10417  0130AC  0100               	movlb	0	; () banked
 10418  0130AE  EE20 F002          	lfsr	2,2
 10419  0130B2  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10420  0130B4  26D9               	addwf	fsr2l,f,c
 10421  0130B6  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10422  0130B8  22DA               	addwfc	fsr2h,f,c
 10423  0130BA  0100               	movlb	0	; () banked
 10424  0130BC  C060  FFDE         	movff	?_GetPortTRIS,postinc2
 10425  0130C0  0100               	movlb	0	; () banked
 10426  0130C2  C061  FFDD         	movff	?_GetPortTRIS+1,postdec2
 10427                           
 10428                           ; BSR set to: 0
 10429                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 10430  0130C6  0100               	movlb	0	; () banked
 10431  0130C8  EE20 F004          	lfsr	2,4
 10432  0130CC  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10433  0130CE  26D9               	addwf	fsr2l,f,c
 10434  0130D0  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10435  0130D2  22DA               	addwfc	fsr2h,f,c
 10436  0130D4  CFDE F0A3          	movff	postinc2,??_Port_Init
 10437  0130D8  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 10438  0130DC  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 10439  0130E0  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 10440  0130E4  0E00               	movlw	0
 10441  0130E6  6EDF               	movwf	indf2,c
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 10445  0130E8  0100               	movlb	0	; () banked
 10446  0130EA  EE20 F002          	lfsr	2,2
 10447  0130EE  51A0               	movf	Port_Init@pInput& (0+255),w,b
 10448  0130F0  26D9               	addwf	fsr2l,f,c
 10449  0130F2  51A1               	movf	(Port_Init@pInput+1)& (0+255),w,b
 10450  0130F4  22DA               	addwfc	fsr2h,f,c
 10451  0130F6  CFDE F0A3          	movff	postinc2,??_Port_Init
 10452  0130FA  CFDD F0A4          	movff	postdec2,??_Port_Init+1
 10453  0130FE  C0A3  FFD9         	movff	??_Port_Init,fsr2l
 10454  013102  C0A4  FFDA         	movff	??_Port_Init+1,fsr2h
 10455  013106  0EFF               	movlw	255
 10456  013108  6EDF               	movwf	indf2,c
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 10460  01310A  C0A0  F09A         	movff	Port_Init@pInput,Port_SetType@pInput
 10461  01310E  C0A1  F09B         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 10462  013112  0E00               	movlw	0
 10463  013114  0100               	movlb	0	; () banked
 10464  013116  6F9C               	movwf	Port_SetType@pType& (0+255),b
 10465  013118  ECA9  F090         	call	_Port_SetType	;wreg free
 10466                           
 10467                           ;Port.c: 166: UINT8 i;
 10468                           ;Port.c: 167: for (i=0; i<8; i++)
 10469  01311C  0E00               	movlw	0
 10470  01311E  0100               	movlb	0	; () banked
 10471  013120  6FA5               	movwf	Port_Init@i& (0+255),b
 10472  013122                     l13772:
 10473                           
 10474                           ; BSR set to: 0
 10475  013122  0E07               	movlw	7
 10476  013124  0100               	movlb	0	; () banked
 10477  013126  65A5               	cpfsgt	Port_Init@i& (0+255),b
 10478  013128  D031               	goto	l403
 10479  01312A  D04B               	goto	u11470
 10480  01312C                     
 10481                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 10482                           
 10483                           ; BSR set to: 0
 10484  01312C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10485  013130  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10486  013134  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10487  013138  0E03               	movlw	3
 10488  01313A  0100               	movlb	0	; () banked
 10489  01313C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10490  01313E  ECAA  F095         	call	_Port_SetPinType	;wreg free
 10491                           
 10492                           ;Port.c: 173: break;
 10493  013142  D03C               	goto	l405
 10494  013144                     
 10495                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 10496  013144  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10497  013148  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10498  01314C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10499  013150  0E02               	movlw	2
 10500  013152  0100               	movlb	0	; () banked
 10501  013154  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10502  013156  ECAA  F095         	call	_Port_SetPinType	;wreg free
 10503                           
 10504                           ;Port.c: 176: break;
 10505  01315A  D030               	goto	l405
 10506  01315C                     
 10507                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 10508  01315C  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10509  013160  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10510  013164  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10511  013168  0E01               	movlw	1
 10512  01316A  0100               	movlb	0	; () banked
 10513  01316C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10514  01316E  ECAA  F095         	call	_Port_SetPinType	;wreg free
 10515                           
 10516                           ;Port.c: 179: break;
 10517  013172  D024               	goto	l405
 10518  013174                     
 10519                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 10520  013174  C0A0  F086         	movff	Port_Init@pInput,Port_SetPinType@pInput
 10521  013178  C0A1  F087         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 10522  01317C  C0A5  F088         	movff	Port_Init@i,Port_SetPinType@pPin
 10523  013180  0E00               	movlw	0
 10524  013182  0100               	movlb	0	; () banked
 10525  013184  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 10526  013186  ECAA  F095         	call	_Port_SetPinType	;wreg free
 10527                           
 10528                           ;Port.c: 183: }
 10529                           
 10530                           ;Port.c: 182: break;
 10531  01318A  D018               	goto	l405
 10532  01318C                     l403:
 10533  01318C  C0A0  FFD9         	movff	Port_Init@pInput,fsr2l
 10534  013190  C0A1  FFDA         	movff	Port_Init@pInput+1,fsr2h
 10535  013194  CFDE F06C          	movff	postinc2,Word_GetPair@pInput
 10536  013198  CFDD F06D          	movff	postdec2,Word_GetPair@pInput+1
 10537  01319C  C0A5  F06E         	movff	Port_Init@i,Word_GetPair@pPair
 10538  0131A0  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 10539                           
 10540                           ; Switch size 1, requested type "space"
 10541                           ; Number of cases is 4, Range of values is 0 to 3
 10542                           ; switch strategies available:
 10543                           ; Name         Instructions Cycles
 10544                           ; simple_byte           13     7 (average)
 10545                           ;	Chosen strategy is simple_byte
 10546  0131A4  0A00               	xorlw	0	; case 0
 10547  0131A6  B4D8               	btfsc	status,2,c
 10548  0131A8  D7C1               	goto	l404
 10549  0131AA  0A01               	xorlw	1	; case 1
 10550  0131AC  B4D8               	btfsc	status,2,c
 10551  0131AE  D7D6               	goto	l407
 10552  0131B0  0A03               	xorlw	3	; case 2
 10553  0131B2  B4D8               	btfsc	status,2,c
 10554  0131B4  D7C7               	goto	l406
 10555  0131B6  0A01               	xorlw	1	; case 3
 10556  0131B8  B4D8               	btfsc	status,2,c
 10557  0131BA  D7DC               	goto	l408
 10558  0131BC                     l405:
 10559  0131BC  0100               	movlb	0	; () banked
 10560  0131BE  2BA5               	incf	Port_Init@i& (0+255),f,b
 10561  0131C0  D7B0               	goto	l13772
 10562  0131C2                     u11470:
 10563                           
 10564                           ; BSR set to: 0
 10565                           ;Port.c: 184: }
 10566                           ;Port.c: 185: Port_Set(pInput, 0x00);
 10567                           
 10568                           ; BSR set to: 0
 10569  0131C2  C0A0  F06F         	movff	Port_Init@pInput,Port_Set@pInput
 10570  0131C6  C0A1  F070         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 10571  0131CA  0E00               	movlw	0
 10572  0131CC  0100               	movlb	0	; () banked
 10573  0131CE  6F71               	movwf	Port_Set@pValue& (0+255),b
 10574  0131D0  EC12  F08B         	call	_Port_Set	;wreg free
 10575  0131D4  0012               	return		;funcret
 10576  0131D6                     __end_of_Port_Init:
 10577                           	opt stack 0
 10578                           tosu	equ	0xFFF
 10579                           tosh	equ	0xFFE
 10580                           tosl	equ	0xFFD
 10581                           pclath	equ	0xFFA
 10582                           tblptru	equ	0xFF8
 10583                           tblptrh	equ	0xFF7
 10584                           tblptrl	equ	0xFF6
 10585                           tablat	equ	0xFF5
 10586                           prodh	equ	0xFF4
 10587                           prodl	equ	0xFF3
 10588                           intcon	equ	0xFF2
 10589                           postinc0	equ	0xFEE
 10590                           wreg	equ	0xFE8
 10591                           postdec1	equ	0xFE5
 10592                           fsr1h	equ	0xFE2
 10593                           fsr1l	equ	0xFE1
 10594                           indf2	equ	0xFDF
 10595                           postinc2	equ	0xFDE
 10596                           postdec2	equ	0xFDD
 10597                           fsr2h	equ	0xFDA
 10598                           fsr2l	equ	0xFD9
 10599                           status	equ	0xFD8
 10600                           
 10601 ;; *************** function _Port_SetType *****************
 10602 ;; Defined at:
 10603 ;;		line 513 in file "Library/Port.c"
 10604 ;; Parameters:    Size  Location     Type
 10605 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 10606 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10607 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10608 ;;  pType           1   60[BANK0 ] enum E6795
 10609 ;; Auto vars:     Size  Location     Type
 10610 ;;  Output          1   63[BANK0 ] enum E6475
 10611 ;; Return value:  Size  Location     Type
 10612 ;;                  1    wreg      enum E6475
 10613 ;; Registers used:
 10614 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10615 ;; Tracked objects:
 10616 ;;		On entry : 0/0
 10617 ;;		On exit  : 0/0
 10618 ;;		Unchanged: 0/0
 10619 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10620 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10621 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10622 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10623 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10624 ;;Total ram usage:        6 bytes
 10625 ;; Hardware stack levels used:    1
 10626 ;; Hardware stack levels required when called:   14
 10627 ;; This function calls:
 10628 ;;		_Port_CheckPortType
 10629 ;;		_Word_SetPair
 10630 ;; This function is called by:
 10631 ;;		_Port_Init
 10632 ;;		_MXK_Init
 10633 ;; This function uses a non-reentrant model
 10634 ;;
 10635                           
 10636                           	psect	text32
 10637  012152                     __ptext32:
 10638                           	opt stack 0
 10639  012152                     _Port_SetType:
 10640                           	opt stack 15
 10641                           
 10642                           ;Port.c: 515: ePinError Output = ePinErrorState;
 10643                           
 10644                           ;incstack = 0
 10645  012152  0E05               	movlw	5
 10646  012154  0100               	movlb	0	; () banked
 10647  012156  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10648                           
 10649                           ;Port.c: 517: switch (pType)
 10650  012158  D07A               	goto	l509
 10651  01215A                     
 10652                           ; BSR set to: 0
 10653                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 10654                           
 10655                           ; BSR set to: 0
 10656  01215A  0100               	movlb	0	; () banked
 10657  01215C  EE20 F002          	lfsr	2,2
 10658  012160  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10659  012162  26D9               	addwf	fsr2l,f,c
 10660  012164  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10661  012166  22DA               	addwfc	fsr2h,f,c
 10662  012168  CFDE F09D          	movff	postinc2,??_Port_SetType
 10663  01216C  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10664  012170  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10665  012174  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10666  012178  0EFF               	movlw	255
 10667  01217A  D067               	goto	L8
 10668  01217C                     
 10669                           ; BSR set to: 0
 10670                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 10671                           
 10672                           ; BSR set to: 0
 10673  01217C  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 10674  012180  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 10675  012184  0E01               	movlw	1
 10676  012186  0100               	movlb	0	; () banked
 10677  012188  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 10678  01218A  EC8B  F0B0         	call	_Port_CheckPortType	;wreg free
 10679  01218E  0100               	movlb	0	; () banked
 10680  012190  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10681  012192  0100               	movlb	0	; () banked
 10682  012194  519F               	movf	Port_SetType@Output& (0+255),w,b
 10683  012196  A4D8               	btfss	status,2,c
 10684  012198  0012               	return	
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;Port.c: 527: {
 10688                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 10689  01219A  0100               	movlb	0	; () banked
 10690  01219C  EE20 F002          	lfsr	2,2
 10691  0121A0  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10692  0121A2  26D9               	addwf	fsr2l,f,c
 10693  0121A4  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10694  0121A6  22DA               	addwfc	fsr2h,f,c
 10695  0121A8  CFDE F09D          	movff	postinc2,??_Port_SetType
 10696  0121AC  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10697  0121B0  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10698  0121B4  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10699  0121B8  0E00               	movlw	0
 10700  0121BA  6EDF               	movwf	indf2,c
 10701                           
 10702                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 10703  0121BC  0100               	movlb	0	; () banked
 10704  0121BE  EE20 F004          	lfsr	2,4
 10705  0121C2  D036               	goto	L22
 10706  0121C4                     
 10707                           ; BSR set to: 0
 10708                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 10709                           
 10710                           ; BSR set to: 0
 10711  0121C4  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 10712  0121C8  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 10713  0121CC  0E02               	movlw	2
 10714  0121CE  0100               	movlb	0	; () banked
 10715  0121D0  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 10716  0121D2  EC8B  F0B0         	call	_Port_CheckPortType	;wreg free
 10717  0121D6  0100               	movlb	0	; () banked
 10718  0121D8  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10719  0121DA  0100               	movlb	0	; () banked
 10720  0121DC  519F               	movf	Port_SetType@Output& (0+255),w,b
 10721  0121DE  A4D8               	btfss	status,2,c
 10722  0121E0  0012               	return	
 10723                           
 10724                           ; BSR set to: 0
 10725                           ;Port.c: 538: {
 10726                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 10727  0121E2  0100               	movlb	0	; () banked
 10728  0121E4  EE20 F002          	lfsr	2,2
 10729  0121E8  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10730  0121EA  26D9               	addwf	fsr2l,f,c
 10731  0121EC  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10732  0121EE  22DA               	addwfc	fsr2h,f,c
 10733  0121F0  CFDE F09D          	movff	postinc2,??_Port_SetType
 10734  0121F4  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10735  0121F8  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10736  0121FC  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10737  012200  0EFF               	movlw	255
 10738  012202  6EDF               	movwf	indf2,c
 10739                           
 10740                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 10741  012204  0100               	movlb	0	; () banked
 10742  012206  EE20 F004          	lfsr	2,4
 10743  01220A  D7AA               	goto	L9
 10744  01220C                     
 10745                           ; BSR set to: 0
 10746                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 10747                           
 10748                           ; BSR set to: 0
 10749  01220C  C09A  F096         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 10750  012210  C09B  F097         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 10751  012214  0E00               	movlw	0
 10752  012216  0100               	movlb	0	; () banked
 10753  012218  6F98               	movwf	Port_CheckPortType@pDrive& (0+255),b
 10754  01221A  EC8B  F0B0         	call	_Port_CheckPortType	;wreg free
 10755  01221E  0100               	movlb	0	; () banked
 10756  012220  6F9F               	movwf	Port_SetType@Output& (0+255),b
 10757  012222  0100               	movlb	0	; () banked
 10758  012224  519F               	movf	Port_SetType@Output& (0+255),w,b
 10759  012226  A4D8               	btfss	status,2,c
 10760  012228  0012               	return	
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;Port.c: 549: {
 10764                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 10765  01222A  0100               	movlb	0	; () banked
 10766  01222C  EE20 F002          	lfsr	2,2
 10767  012230                     L22:
 10768  012230  519A               	movf	Port_SetType@pInput& (0+255),w,b
 10769  012232  26D9               	addwf	fsr2l,f,c
 10770  012234  519B               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 10771  012236  22DA               	addwfc	fsr2h,f,c
 10772  012238  CFDE F09D          	movff	postinc2,??_Port_SetType
 10773  01223C  CFDD F09E          	movff	postdec2,??_Port_SetType+1
 10774  012240  C09D  FFD9         	movff	??_Port_SetType,fsr2l
 10775  012244  C09E  FFDA         	movff	??_Port_SetType+1,fsr2h
 10776  012248  0E00               	movlw	0
 10777  01224A                     L8:
 10778  01224A  6EDF               	movwf	indf2,c
 10779                           
 10780                           ;Port.c: 552: }
 10781  01224C  D00E               	goto	l511
 10782  01224E                     l509:
 10783                           
 10784                           ; BSR set to: 0
 10785                           
 10786                           ; BSR set to: 0
 10787  01224E  0100               	movlb	0	; () banked
 10788  012250  519C               	movf	Port_SetType@pType& (0+255),w,b
 10789                           
 10790                           ; Switch size 1, requested type "space"
 10791                           ; Number of cases is 4, Range of values is 0 to 3
 10792                           ; switch strategies available:
 10793                           ; Name         Instructions Cycles
 10794                           ; simple_byte           13     7 (average)
 10795                           ;	Chosen strategy is simple_byte
 10796  012252  0A00               	xorlw	0	; case 0
 10797  012254  B4D8               	btfsc	status,2,c
 10798  012256  D781               	goto	l510
 10799  012258  0A01               	xorlw	1	; case 1
 10800  01225A  B4D8               	btfsc	status,2,c
 10801  01225C  D78F               	goto	l512
 10802  01225E  0A03               	xorlw	3	; case 2
 10803  012260  B4D8               	btfsc	status,2,c
 10804  012262  D7B0               	goto	l516
 10805  012264  0A01               	xorlw	1	; case 3
 10806  012266  B4D8               	btfsc	status,2,c
 10807  012268  D7D1               	goto	l519
 10808  01226A                     l511:
 10809                           
 10810                           ; BSR set to: 0
 10811                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 10812                           
 10813                           ; BSR set to: 0
 10814  01226A  0E08               	movlw	8
 10815  01226C  0100               	movlb	0	; () banked
 10816  01226E  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10817  012270  0100               	movlb	0	; () banked
 10818  012272  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10819  012274  0E00               	movlw	0
 10820  012276  0100               	movlb	0	; () banked
 10821  012278  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10822  01227A  0100               	movlb	0	; () banked
 10823  01227C  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10824  01227E  0E00               	movlw	0
 10825  012280  0100               	movlb	0	; () banked
 10826  012282  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10827  012284  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10828  012288  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10829                           
 10830                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 10831  01228C  0E08               	movlw	8
 10832  01228E  0100               	movlb	0	; () banked
 10833  012290  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10834  012292  0100               	movlb	0	; () banked
 10835  012294  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10836  012296  0E00               	movlw	0
 10837  012298  0100               	movlb	0	; () banked
 10838  01229A  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10839  01229C  0100               	movlb	0	; () banked
 10840  01229E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10841  0122A0  0E01               	movlw	1
 10842  0122A2  0100               	movlb	0	; () banked
 10843  0122A4  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10844  0122A6  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10845  0122AA  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10846                           
 10847                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 10848  0122AE  0E08               	movlw	8
 10849  0122B0  0100               	movlb	0	; () banked
 10850  0122B2  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10851  0122B4  0100               	movlb	0	; () banked
 10852  0122B6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10853  0122B8  0E00               	movlw	0
 10854  0122BA  0100               	movlb	0	; () banked
 10855  0122BC  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10856  0122BE  0100               	movlb	0	; () banked
 10857  0122C0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10858  0122C2  0E02               	movlw	2
 10859  0122C4  0100               	movlb	0	; () banked
 10860  0122C6  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10861  0122C8  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10862  0122CC  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10863                           
 10864                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 10865  0122D0  0E08               	movlw	8
 10866  0122D2  0100               	movlb	0	; () banked
 10867  0122D4  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10868  0122D6  0100               	movlb	0	; () banked
 10869  0122D8  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10870  0122DA  0E00               	movlw	0
 10871  0122DC  0100               	movlb	0	; () banked
 10872  0122DE  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10873  0122E0  0100               	movlb	0	; () banked
 10874  0122E2  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10875  0122E4  0E03               	movlw	3
 10876  0122E6  0100               	movlb	0	; () banked
 10877  0122E8  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10878  0122EA  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10879  0122EE  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10880                           
 10881                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 10882  0122F2  0E08               	movlw	8
 10883  0122F4  0100               	movlb	0	; () banked
 10884  0122F6  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10885  0122F8  0100               	movlb	0	; () banked
 10886  0122FA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10887  0122FC  0E00               	movlw	0
 10888  0122FE  0100               	movlb	0	; () banked
 10889  012300  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10890  012302  0100               	movlb	0	; () banked
 10891  012304  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10892  012306  0E04               	movlw	4
 10893  012308  0100               	movlb	0	; () banked
 10894  01230A  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10895  01230C  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10896  012310  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10897                           
 10898                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 10899  012314  0E08               	movlw	8
 10900  012316  0100               	movlb	0	; () banked
 10901  012318  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10902  01231A  0100               	movlb	0	; () banked
 10903  01231C  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10904  01231E  0E00               	movlw	0
 10905  012320  0100               	movlb	0	; () banked
 10906  012322  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10907  012324  0100               	movlb	0	; () banked
 10908  012326  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10909  012328  0E05               	movlw	5
 10910  01232A  0100               	movlb	0	; () banked
 10911  01232C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10912  01232E  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10913  012332  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10914                           
 10915                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 10916  012336  0E08               	movlw	8
 10917  012338  0100               	movlb	0	; () banked
 10918  01233A  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10919  01233C  0100               	movlb	0	; () banked
 10920  01233E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10921  012340  0E00               	movlw	0
 10922  012342  0100               	movlb	0	; () banked
 10923  012344  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10924  012346  0100               	movlb	0	; () banked
 10925  012348  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10926  01234A  0E06               	movlw	6
 10927  01234C  0100               	movlb	0	; () banked
 10928  01234E  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10929  012350  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10930  012354  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10931                           
 10932                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 10933  012358  0E08               	movlw	8
 10934  01235A  0100               	movlb	0	; () banked
 10935  01235C  259A               	addwf	Port_SetType@pInput& (0+255),w,b
 10936  01235E  0100               	movlb	0	; () banked
 10937  012360  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 10938  012362  0E00               	movlw	0
 10939  012364  0100               	movlb	0	; () banked
 10940  012366  219B               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 10941  012368  0100               	movlb	0	; () banked
 10942  01236A  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 10943  01236C  0E07               	movlw	7
 10944  01236E  0100               	movlb	0	; () banked
 10945  012370  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 10946  012372  C09C  F072         	movff	Port_SetType@pType,Word_SetPair@pValue
 10947  012376  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 10948  01237A  0012               	return	
 10949  01237C                     __end_of_Port_SetType:
 10950                           	opt stack 0
 10951                           tosu	equ	0xFFF
 10952                           tosh	equ	0xFFE
 10953                           tosl	equ	0xFFD
 10954                           pclath	equ	0xFFA
 10955                           tblptru	equ	0xFF8
 10956                           tblptrh	equ	0xFF7
 10957                           tblptrl	equ	0xFF6
 10958                           tablat	equ	0xFF5
 10959                           prodh	equ	0xFF4
 10960                           prodl	equ	0xFF3
 10961                           intcon	equ	0xFF2
 10962                           postinc0	equ	0xFEE
 10963                           wreg	equ	0xFE8
 10964                           postdec1	equ	0xFE5
 10965                           fsr1h	equ	0xFE2
 10966                           fsr1l	equ	0xFE1
 10967                           indf2	equ	0xFDF
 10968                           postinc2	equ	0xFDE
 10969                           postdec2	equ	0xFDD
 10970                           fsr2h	equ	0xFDA
 10971                           fsr2l	equ	0xFD9
 10972                           status	equ	0xFD8
 10973                           
 10974 ;; *************** function _Port_CheckPortType *****************
 10975 ;; Defined at:
 10976 ;;		line 138 in file "Library/Port.c"
 10977 ;; Parameters:    Size  Location     Type
 10978 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 10979 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 10980 ;;		 -> PortD(10), PortC(10), PortF(10), 
 10981 ;;  pDrive          1   56[BANK0 ] enum E6469
 10982 ;; Auto vars:     Size  Location     Type
 10983 ;;  Output          1   57[BANK0 ] enum E6475
 10984 ;; Return value:  Size  Location     Type
 10985 ;;                  1    wreg      enum E6475
 10986 ;; Registers used:
 10987 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10988 ;; Tracked objects:
 10989 ;;		On entry : 0/0
 10990 ;;		On exit  : 0/0
 10991 ;;		Unchanged: 0/0
 10992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10993 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10994 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;Total ram usage:        4 bytes
 10998 ;; Hardware stack levels used:    1
 10999 ;; Hardware stack levels required when called:   13
 11000 ;; This function calls:
 11001 ;;		_Port_CheckQuadType
 11002 ;; This function is called by:
 11003 ;;		_Port_SetType
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           	psect	text33
 11008  016116                     __ptext33:
 11009                           	opt stack 0
 11010  016116                     _Port_CheckPortType:
 11011                           	opt stack 15
 11012                           
 11013                           ;Port.c: 140: ePinError Output = ePinErrorState;
 11014                           
 11015                           ;incstack = 0
 11016  016116  0E05               	movlw	5
 11017  016118  0100               	movlb	0	; () banked
 11018  01611A  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 11019                           
 11020                           ; BSR set to: 0
 11021                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 11022  01611C  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 11023  016120  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 11024  016124  0E00               	movlw	0
 11025  016126  0100               	movlb	0	; () banked
 11026  016128  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 11027  01612A  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 11028  01612E  EC4A  F0AF         	call	_Port_CheckQuadType	;wreg free
 11029  016132  0100               	movlb	0	; () banked
 11030  016134  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 11031  016136  0100               	movlb	0	; () banked
 11032  016138  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 11033  01613A  A4D8               	btfss	status,2,c
 11034  01613C  D00D               	goto	l397
 11035                           
 11036                           ; BSR set to: 0
 11037                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 11038  01613E  C096  F08F         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 11039  016142  C097  F090         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 11040  016146  0E01               	movlw	1
 11041  016148  0100               	movlb	0	; () banked
 11042  01614A  6F91               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 11043  01614C  C098  F092         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 11044  016150  EC4A  F0AF         	call	_Port_CheckQuadType	;wreg free
 11045  016154  0100               	movlb	0	; () banked
 11046  016156  6F99               	movwf	Port_CheckPortType@Output& (0+255),b
 11047  016158                     l397:
 11048                           
 11049                           ; BSR set to: 0
 11050                           ;Port.c: 146: return Output;
 11051                           
 11052                           ; BSR set to: 0
 11053  016158  0100               	movlb	0	; () banked
 11054  01615A  5199               	movf	Port_CheckPortType@Output& (0+255),w,b
 11055  01615C  0012               	return	
 11056  01615E                     __end_of_Port_CheckPortType:
 11057                           	opt stack 0
 11058                           tosu	equ	0xFFF
 11059                           tosh	equ	0xFFE
 11060                           tosl	equ	0xFFD
 11061                           pclath	equ	0xFFA
 11062                           tblptru	equ	0xFF8
 11063                           tblptrh	equ	0xFF7
 11064                           tblptrl	equ	0xFF6
 11065                           tablat	equ	0xFF5
 11066                           prodh	equ	0xFF4
 11067                           prodl	equ	0xFF3
 11068                           intcon	equ	0xFF2
 11069                           postinc0	equ	0xFEE
 11070                           wreg	equ	0xFE8
 11071                           postdec1	equ	0xFE5
 11072                           fsr1h	equ	0xFE2
 11073                           fsr1l	equ	0xFE1
 11074                           indf2	equ	0xFDF
 11075                           postinc2	equ	0xFDE
 11076                           postdec2	equ	0xFDD
 11077                           fsr2h	equ	0xFDA
 11078                           fsr2l	equ	0xFD9
 11079                           status	equ	0xFD8
 11080                           
 11081 ;; *************** function _Port_Set *****************
 11082 ;; Defined at:
 11083 ;;		line 570 in file "Library/Port.c"
 11084 ;; Parameters:    Size  Location     Type
 11085 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 11086 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 11087 ;;		 -> PortD(10), PortC(10), PortF(10), 
 11088 ;;  pValue          1   17[BANK0 ] unsigned char 
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 11091 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 11092 ;;  Type            1   38[BANK0 ] enum E6795
 11093 ;; Return value:  Size  Location     Type
 11094 ;;                  1    wreg      void 
 11095 ;; Registers used:
 11096 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11097 ;; Tracked objects:
 11098 ;;		On entry : 0/0
 11099 ;;		On exit  : 0/0
 11100 ;;		Unchanged: 0/0
 11101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11102 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11103 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11104 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11105 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11106 ;;Total ram usage:       24 bytes
 11107 ;; Hardware stack levels used:    1
 11108 ;; Hardware stack levels required when called:   10
 11109 ;; This function calls:
 11110 ;;		_Byte_SetByte
 11111 ;;		_Word_GetPair
 11112 ;; This function is called by:
 11113 ;;		_Port_Init
 11114 ;;		_Port_Toggle
 11115 ;; This function uses a non-reentrant model
 11116 ;;
 11117                           
 11118                           	psect	text34
 11119  011624                     __ptext34:
 11120                           	opt stack 0
 11121  011624                     _Port_Set:
 11122                           	opt stack 18
 11123                           
 11124                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 11125                           
 11126                           ; BSR set to: 0
 11127                           ;incstack = 0
 11128  011624  0E08               	movlw	8
 11129  011626  0100               	movlb	0	; () banked
 11130  011628  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11131  01162A  0100               	movlb	0	; () banked
 11132  01162C  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11133  01162E  0E00               	movlw	0
 11134  011630  0100               	movlb	0	; () banked
 11135  011632  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11136  011634  0100               	movlb	0	; () banked
 11137  011636  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11138  011638  0E00               	movlw	0
 11139  01163A  0100               	movlb	0	; () banked
 11140  01163C  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11141  01163E  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11142  011642  0100               	movlb	0	; () banked
 11143  011644  6F86               	movwf	Port_Set@Type& (0+255),b
 11144                           
 11145                           ; BSR set to: 0
 11146                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 11147  011646  0100               	movlb	0	; () banked
 11148  011648  5186               	movf	Port_Set@Type& (0+255),w,b
 11149  01164A  0100               	movlb	0	; () banked
 11150  01164C  6F72               	movwf	??_Port_Set& (0+255),b
 11151  01164E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11152  011650  0E0E               	movlw	14
 11153  011652                     u10655:
 11154  011652  90D8               	bcf	status,0,c
 11155  011654  0100               	movlb	0	; () banked
 11156  011656  3772               	rlcf	??_Port_Set& (0+255),f,b
 11157  011658  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11158  01165A  2EE8               	decfsz	wreg,f,c
 11159  01165C  D7FA               	goto	u10655
 11160  01165E  0100               	movlb	0	; () banked
 11161  011660  5186               	movf	Port_Set@Type& (0+255),w,b
 11162  011662  0100               	movlb	0	; () banked
 11163  011664  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 11164  011666  6B75               	clrf	(??_Port_Set+3)& (0+255),b
 11165  011668  0E0C               	movlw	12
 11166  01166A                     u10665:
 11167  01166A  90D8               	bcf	status,0,c
 11168  01166C  0100               	movlb	0	; () banked
 11169  01166E  3774               	rlcf	(??_Port_Set+2)& (0+255),f,b
 11170  011670  3775               	rlcf	(??_Port_Set+3)& (0+255),f,b
 11171  011672  2EE8               	decfsz	wreg,f,c
 11172  011674  D7FA               	goto	u10665
 11173  011676  0100               	movlb	0	; () banked
 11174  011678  5186               	movf	Port_Set@Type& (0+255),w,b
 11175  01167A  0100               	movlb	0	; () banked
 11176  01167C  6F76               	movwf	(??_Port_Set+4)& (0+255),b
 11177  01167E  6B77               	clrf	(??_Port_Set+5)& (0+255),b
 11178  011680  0E0A               	movlw	10
 11179  011682                     u10675:
 11180  011682  90D8               	bcf	status,0,c
 11181  011684  0100               	movlb	0	; () banked
 11182  011686  3776               	rlcf	(??_Port_Set+4)& (0+255),f,b
 11183  011688  3777               	rlcf	(??_Port_Set+5)& (0+255),f,b
 11184  01168A  2EE8               	decfsz	wreg,f,c
 11185  01168C  D7FA               	goto	u10675
 11186  01168E  0100               	movlb	0	; () banked
 11187  011690  5186               	movf	Port_Set@Type& (0+255),w,b
 11188  011692  0100               	movlb	0	; () banked
 11189  011694  6F79               	movwf	(??_Port_Set+7)& (0+255),b
 11190  011696  6B78               	clrf	(??_Port_Set+6)& (0+255),b
 11191  011698  0100               	movlb	0	; () banked
 11192  01169A  5186               	movf	Port_Set@Type& (0+255),w,b
 11193  01169C  0100               	movlb	0	; () banked
 11194  01169E  6F7A               	movwf	(??_Port_Set+8)& (0+255),b
 11195  0116A0  6B7B               	clrf	(??_Port_Set+9)& (0+255),b
 11196  0116A2  0E06               	movlw	6
 11197  0116A4                     u10685:
 11198  0116A4  90D8               	bcf	status,0,c
 11199  0116A6  0100               	movlb	0	; () banked
 11200  0116A8  377A               	rlcf	(??_Port_Set+8)& (0+255),f,b
 11201  0116AA  377B               	rlcf	(??_Port_Set+9)& (0+255),f,b
 11202  0116AC  2EE8               	decfsz	wreg,f,c
 11203  0116AE  D7FA               	goto	u10685
 11204  0116B0  0100               	movlb	0	; () banked
 11205  0116B2  5186               	movf	Port_Set@Type& (0+255),w,b
 11206  0116B4  0100               	movlb	0	; () banked
 11207  0116B6  6F7C               	movwf	(??_Port_Set+10)& (0+255),b
 11208  0116B8  6B7D               	clrf	(??_Port_Set+11)& (0+255),b
 11209  0116BA  0100               	movlb	0	; () banked
 11210  0116BC  3B7C               	swapf	(??_Port_Set+10)& (0+255),f,b
 11211  0116BE  3B7D               	swapf	(??_Port_Set+11)& (0+255),f,b
 11212  0116C0  0EF0               	movlw	240
 11213  0116C2  177D               	andwf	(??_Port_Set+11)& (0+255),f,b
 11214  0116C4  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 11215  0116C6  0B0F               	andlw	15
 11216  0116C8  137D               	iorwf	(??_Port_Set+11)& (0+255),f,b
 11217  0116CA  0EF0               	movlw	240
 11218  0116CC  177C               	andwf	(??_Port_Set+10)& (0+255),f,b
 11219  0116CE  0100               	movlb	0	; () banked
 11220  0116D0  5186               	movf	Port_Set@Type& (0+255),w,b
 11221  0116D2  0100               	movlb	0	; () banked
 11222  0116D4  6F7E               	movwf	(??_Port_Set+12)& (0+255),b
 11223  0116D6  6B7F               	clrf	(??_Port_Set+13)& (0+255),b
 11224  0116D8  0100               	movlb	0	; () banked
 11225  0116DA  90D8               	bcf	status,0,c
 11226  0116DC  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 11227  0116DE  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 11228  0116E0  0100               	movlb	0	; () banked
 11229  0116E2  90D8               	bcf	status,0,c
 11230  0116E4  377E               	rlcf	(??_Port_Set+12)& (0+255),f,b
 11231  0116E6  377F               	rlcf	(??_Port_Set+13)& (0+255),f,b
 11232  0116E8  0100               	movlb	0	; () banked
 11233  0116EA  5186               	movf	Port_Set@Type& (0+255),w,b
 11234  0116EC  0100               	movlb	0	; () banked
 11235  0116EE  6F80               	movwf	(??_Port_Set+14)& (0+255),b
 11236  0116F0  6B81               	clrf	(??_Port_Set+15)& (0+255),b
 11237  0116F2  0100               	movlb	0	; () banked
 11238  0116F4  517E               	movf	(??_Port_Set+12)& (0+255),w,b
 11239  0116F6  0100               	movlb	0	; () banked
 11240  0116F8  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11241  0116FA  0100               	movlb	0	; () banked
 11242  0116FC  517F               	movf	(??_Port_Set+13)& (0+255),w,b
 11243  0116FE  0100               	movlb	0	; () banked
 11244  011700  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11245  011702  0100               	movlb	0	; () banked
 11246  011704  517C               	movf	(??_Port_Set+10)& (0+255),w,b
 11247  011706  0100               	movlb	0	; () banked
 11248  011708  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11249  01170A  0100               	movlb	0	; () banked
 11250  01170C  517D               	movf	(??_Port_Set+11)& (0+255),w,b
 11251  01170E  0100               	movlb	0	; () banked
 11252  011710  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11253  011712  0100               	movlb	0	; () banked
 11254  011714  517A               	movf	(??_Port_Set+8)& (0+255),w,b
 11255  011716  0100               	movlb	0	; () banked
 11256  011718  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11257  01171A  0100               	movlb	0	; () banked
 11258  01171C  517B               	movf	(??_Port_Set+9)& (0+255),w,b
 11259  01171E  0100               	movlb	0	; () banked
 11260  011720  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11261  011722  0100               	movlb	0	; () banked
 11262  011724  5178               	movf	(??_Port_Set+6)& (0+255),w,b
 11263  011726  0100               	movlb	0	; () banked
 11264  011728  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11265  01172A  0100               	movlb	0	; () banked
 11266  01172C  5179               	movf	(??_Port_Set+7)& (0+255),w,b
 11267  01172E  0100               	movlb	0	; () banked
 11268  011730  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11269  011732  0100               	movlb	0	; () banked
 11270  011734  5176               	movf	(??_Port_Set+4)& (0+255),w,b
 11271  011736  0100               	movlb	0	; () banked
 11272  011738  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11273  01173A  0100               	movlb	0	; () banked
 11274  01173C  5177               	movf	(??_Port_Set+5)& (0+255),w,b
 11275  01173E  0100               	movlb	0	; () banked
 11276  011740  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11277  011742  0100               	movlb	0	; () banked
 11278  011744  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 11279  011746  0100               	movlb	0	; () banked
 11280  011748  1380               	iorwf	(??_Port_Set+14)& (0+255),f,b
 11281  01174A  0100               	movlb	0	; () banked
 11282  01174C  5175               	movf	(??_Port_Set+3)& (0+255),w,b
 11283  01174E  0100               	movlb	0	; () banked
 11284  011750  1381               	iorwf	(??_Port_Set+15)& (0+255),f,b
 11285  011752  0100               	movlb	0	; () banked
 11286  011754  5172               	movf	??_Port_Set& (0+255),w,b
 11287  011756  0100               	movlb	0	; () banked
 11288  011758  1180               	iorwf	(??_Port_Set+14)& (0+255),w,b
 11289  01175A  0100               	movlb	0	; () banked
 11290  01175C  6F82               	movwf	Port_Set@TypeRequired& (0+255),b
 11291  01175E  0100               	movlb	0	; () banked
 11292  011760  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11293  011762  0100               	movlb	0	; () banked
 11294  011764  1181               	iorwf	(??_Port_Set+15)& (0+255),w,b
 11295  011766  0100               	movlb	0	; () banked
 11296  011768  6F83               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;Port.c: 574: UINT16 TypeActual = Type;
 11300  01176A  C086  F084         	movff	Port_Set@Type,Port_Set@TypeActual
 11301  01176E  0100               	movlb	0	; () banked
 11302  011770  6B85               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 11303                           
 11304                           ; BSR set to: 0
 11305                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 11306  011772  0E08               	movlw	8
 11307  011774  0100               	movlb	0	; () banked
 11308  011776  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11309  011778  0100               	movlb	0	; () banked
 11310  01177A  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11311  01177C  0E00               	movlw	0
 11312  01177E  0100               	movlb	0	; () banked
 11313  011780  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11314  011782  0100               	movlb	0	; () banked
 11315  011784  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11316  011786  0E01               	movlw	1
 11317  011788  0100               	movlb	0	; () banked
 11318  01178A  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11319  01178C  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11320  011790  0100               	movlb	0	; () banked
 11321  011792  6F72               	movwf	??_Port_Set& (0+255),b
 11322  011794  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11323  011796  0100               	movlb	0	; () banked
 11324  011798  90D8               	bcf	status,0,c
 11325  01179A  3772               	rlcf	??_Port_Set& (0+255),f,b
 11326  01179C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11327  01179E  0100               	movlb	0	; () banked
 11328  0117A0  90D8               	bcf	status,0,c
 11329  0117A2  3772               	rlcf	??_Port_Set& (0+255),f,b
 11330  0117A4  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11331  0117A6  0100               	movlb	0	; () banked
 11332  0117A8  5172               	movf	??_Port_Set& (0+255),w,b
 11333  0117AA  0100               	movlb	0	; () banked
 11334  0117AC  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11335  0117AE  0100               	movlb	0	; () banked
 11336  0117B0  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11337  0117B2  0100               	movlb	0	; () banked
 11338  0117B4  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11339                           
 11340                           ; BSR set to: 0
 11341                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 11342  0117B6  0E08               	movlw	8
 11343  0117B8  0100               	movlb	0	; () banked
 11344  0117BA  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11345  0117BC  0100               	movlb	0	; () banked
 11346  0117BE  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11347  0117C0  0E00               	movlw	0
 11348  0117C2  0100               	movlb	0	; () banked
 11349  0117C4  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11350  0117C6  0100               	movlb	0	; () banked
 11351  0117C8  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11352  0117CA  0E02               	movlw	2
 11353  0117CC  0100               	movlb	0	; () banked
 11354  0117CE  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11355  0117D0  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11356  0117D4  0100               	movlb	0	; () banked
 11357  0117D6  6F72               	movwf	??_Port_Set& (0+255),b
 11358  0117D8  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11359  0117DA  0100               	movlb	0	; () banked
 11360  0117DC  3B72               	swapf	??_Port_Set& (0+255),f,b
 11361  0117DE  3B73               	swapf	(??_Port_Set+1)& (0+255),f,b
 11362  0117E0  0EF0               	movlw	240
 11363  0117E2  1773               	andwf	(??_Port_Set+1)& (0+255),f,b
 11364  0117E4  5172               	movf	??_Port_Set& (0+255),w,b
 11365  0117E6  0B0F               	andlw	15
 11366  0117E8  1373               	iorwf	(??_Port_Set+1)& (0+255),f,b
 11367  0117EA  0EF0               	movlw	240
 11368  0117EC  1772               	andwf	??_Port_Set& (0+255),f,b
 11369  0117EE  0100               	movlb	0	; () banked
 11370  0117F0  5172               	movf	??_Port_Set& (0+255),w,b
 11371  0117F2  0100               	movlb	0	; () banked
 11372  0117F4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11373  0117F6  0100               	movlb	0	; () banked
 11374  0117F8  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11375  0117FA  0100               	movlb	0	; () banked
 11376  0117FC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11377                           
 11378                           ; BSR set to: 0
 11379                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 11380  0117FE  0E08               	movlw	8
 11381  011800  0100               	movlb	0	; () banked
 11382  011802  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11383  011804  0100               	movlb	0	; () banked
 11384  011806  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11385  011808  0E00               	movlw	0
 11386  01180A  0100               	movlb	0	; () banked
 11387  01180C  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11388  01180E  0100               	movlb	0	; () banked
 11389  011810  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11390  011812  0E03               	movlw	3
 11391  011814  0100               	movlb	0	; () banked
 11392  011816  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11393  011818  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11394  01181C  0100               	movlb	0	; () banked
 11395  01181E  6F72               	movwf	??_Port_Set& (0+255),b
 11396  011820  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11397  011822  0E06               	movlw	6
 11398  011824                     u10695:
 11399  011824  90D8               	bcf	status,0,c
 11400  011826  0100               	movlb	0	; () banked
 11401  011828  3772               	rlcf	??_Port_Set& (0+255),f,b
 11402  01182A  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11403  01182C  2EE8               	decfsz	wreg,f,c
 11404  01182E  D7FA               	goto	u10695
 11405  011830  0100               	movlb	0	; () banked
 11406  011832  5172               	movf	??_Port_Set& (0+255),w,b
 11407  011834  0100               	movlb	0	; () banked
 11408  011836  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11409  011838  0100               	movlb	0	; () banked
 11410  01183A  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11411  01183C  0100               	movlb	0	; () banked
 11412  01183E  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 11416  011840  0E08               	movlw	8
 11417  011842  0100               	movlb	0	; () banked
 11418  011844  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11419  011846  0100               	movlb	0	; () banked
 11420  011848  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11421  01184A  0E00               	movlw	0
 11422  01184C  0100               	movlb	0	; () banked
 11423  01184E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11424  011850  0100               	movlb	0	; () banked
 11425  011852  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11426  011854  0E04               	movlw	4
 11427  011856  0100               	movlb	0	; () banked
 11428  011858  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11429  01185A  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11430  01185E  0100               	movlb	0	; () banked
 11431  011860  6F72               	movwf	??_Port_Set& (0+255),b
 11432  011862  0100               	movlb	0	; () banked
 11433  011864  5172               	movf	??_Port_Set& (0+255),w,b
 11434  011866  0100               	movlb	0	; () banked
 11435  011868  6F74               	movwf	(??_Port_Set+2)& (0+255),b
 11436  01186A  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11437  01186C  0100               	movlb	0	; () banked
 11438  01186E  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11439  011870  0100               	movlb	0	; () banked
 11440  011872  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11441  011874  0100               	movlb	0	; () banked
 11442  011876  5174               	movf	(??_Port_Set+2)& (0+255),w,b
 11443  011878  0100               	movlb	0	; () banked
 11444  01187A  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11445                           
 11446                           ; BSR set to: 0
 11447                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 11448  01187C  0E08               	movlw	8
 11449  01187E  0100               	movlb	0	; () banked
 11450  011880  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11451  011882  0100               	movlb	0	; () banked
 11452  011884  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11453  011886  0E00               	movlw	0
 11454  011888  0100               	movlb	0	; () banked
 11455  01188A  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11456  01188C  0100               	movlb	0	; () banked
 11457  01188E  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11458  011890  0E05               	movlw	5
 11459  011892  0100               	movlb	0	; () banked
 11460  011894  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11461  011896  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11462  01189A  0100               	movlb	0	; () banked
 11463  01189C  6F72               	movwf	??_Port_Set& (0+255),b
 11464  01189E  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11465  0118A0  0E0A               	movlw	10
 11466  0118A2                     u10705:
 11467  0118A2  90D8               	bcf	status,0,c
 11468  0118A4  0100               	movlb	0	; () banked
 11469  0118A6  3772               	rlcf	??_Port_Set& (0+255),f,b
 11470  0118A8  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11471  0118AA  2EE8               	decfsz	wreg,f,c
 11472  0118AC  D7FA               	goto	u10705
 11473  0118AE  0100               	movlb	0	; () banked
 11474  0118B0  5172               	movf	??_Port_Set& (0+255),w,b
 11475  0118B2  0100               	movlb	0	; () banked
 11476  0118B4  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11477  0118B6  0100               	movlb	0	; () banked
 11478  0118B8  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11479  0118BA  0100               	movlb	0	; () banked
 11480  0118BC  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11481                           
 11482                           ; BSR set to: 0
 11483                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 11484  0118BE  0E08               	movlw	8
 11485  0118C0  0100               	movlb	0	; () banked
 11486  0118C2  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11487  0118C4  0100               	movlb	0	; () banked
 11488  0118C6  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11489  0118C8  0E00               	movlw	0
 11490  0118CA  0100               	movlb	0	; () banked
 11491  0118CC  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11492  0118CE  0100               	movlb	0	; () banked
 11493  0118D0  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11494  0118D2  0E06               	movlw	6
 11495  0118D4  0100               	movlb	0	; () banked
 11496  0118D6  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11497  0118D8  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11498  0118DC  0100               	movlb	0	; () banked
 11499  0118DE  6F72               	movwf	??_Port_Set& (0+255),b
 11500  0118E0  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11501  0118E2  0E0C               	movlw	12
 11502  0118E4                     u10715:
 11503  0118E4  90D8               	bcf	status,0,c
 11504  0118E6  0100               	movlb	0	; () banked
 11505  0118E8  3772               	rlcf	??_Port_Set& (0+255),f,b
 11506  0118EA  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11507  0118EC  2EE8               	decfsz	wreg,f,c
 11508  0118EE  D7FA               	goto	u10715
 11509  0118F0  0100               	movlb	0	; () banked
 11510  0118F2  5172               	movf	??_Port_Set& (0+255),w,b
 11511  0118F4  0100               	movlb	0	; () banked
 11512  0118F6  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11513  0118F8  0100               	movlb	0	; () banked
 11514  0118FA  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11515  0118FC  0100               	movlb	0	; () banked
 11516  0118FE  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 11520  011900  0E08               	movlw	8
 11521  011902  0100               	movlb	0	; () banked
 11522  011904  256F               	addwf	Port_Set@pInput& (0+255),w,b
 11523  011906  0100               	movlb	0	; () banked
 11524  011908  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 11525  01190A  0E00               	movlw	0
 11526  01190C  0100               	movlb	0	; () banked
 11527  01190E  2170               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 11528  011910  0100               	movlb	0	; () banked
 11529  011912  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 11530  011914  0E07               	movlw	7
 11531  011916  0100               	movlb	0	; () banked
 11532  011918  6F6E               	movwf	Word_GetPair@pPair& (0+255),b
 11533  01191A  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 11534  01191E  0100               	movlb	0	; () banked
 11535  011920  6F72               	movwf	??_Port_Set& (0+255),b
 11536  011922  6B73               	clrf	(??_Port_Set+1)& (0+255),b
 11537  011924  0E0E               	movlw	14
 11538  011926                     u10725:
 11539  011926  90D8               	bcf	status,0,c
 11540  011928  0100               	movlb	0	; () banked
 11541  01192A  3772               	rlcf	??_Port_Set& (0+255),f,b
 11542  01192C  3773               	rlcf	(??_Port_Set+1)& (0+255),f,b
 11543  01192E  2EE8               	decfsz	wreg,f,c
 11544  011930  D7FA               	goto	u10725
 11545  011932  0100               	movlb	0	; () banked
 11546  011934  5172               	movf	??_Port_Set& (0+255),w,b
 11547  011936  0100               	movlb	0	; () banked
 11548  011938  1384               	iorwf	Port_Set@TypeActual& (0+255),f,b
 11549  01193A  0100               	movlb	0	; () banked
 11550  01193C  5173               	movf	(??_Port_Set+1)& (0+255),w,b
 11551  01193E  0100               	movlb	0	; () banked
 11552  011940  1385               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 11553                           
 11554                           ;Port.c: 584: if (TypeRequired == TypeActual)
 11555  011942  0100               	movlb	0	; () banked
 11556  011944  5184               	movf	Port_Set@TypeActual& (0+255),w,b
 11557  011946  0100               	movlb	0	; () banked
 11558  011948  1982               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 11559  01194A  E148               	bnz	l528
 11560  01194C  0100               	movlb	0	; () banked
 11561  01194E  5185               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 11562  011950  0100               	movlb	0	; () banked
 11563  011952  1983               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 11564  011954  A4D8               	btfss	status,2,c
 11565  011956  0012               	return	
 11566  011958  D032               	goto	l526
 11567  01195A                     
 11568                           ; BSR set to: 0
 11569                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 11570                           
 11571                           ; BSR set to: 0
 11572  01195A  0100               	movlb	0	; () banked
 11573  01195C  EE20 F002          	lfsr	2,2
 11574  011960  516F               	movf	Port_Set@pInput& (0+255),w,b
 11575  011962  26D9               	addwf	fsr2l,f,c
 11576  011964  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 11577  011966  22DA               	addwfc	fsr2h,f,c
 11578  011968  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 11579  01196C  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 11580  011970  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 11581  011974  ECFF  F0B4         	call	_Byte_SetByte	;wreg free
 11582                           
 11583                           ;Port.c: 594: break;
 11584  011978  0012               	return	
 11585  01197A                     
 11586                           ;Port.c: 597: pValue = ~pValue;
 11587  01197A  0100               	movlb	0	; () banked
 11588  01197C  1F71               	comf	Port_Set@pValue& (0+255),f,b
 11589                           
 11590                           ; BSR set to: 0
 11591                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 11592  01197E  0100               	movlb	0	; () banked
 11593  011980  EE20 F002          	lfsr	2,2
 11594  011984  516F               	movf	Port_Set@pInput& (0+255),w,b
 11595  011986  26D9               	addwf	fsr2l,f,c
 11596  011988  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 11597  01198A  22DA               	addwfc	fsr2h,f,c
 11598  01198C  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 11599  011990  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 11600  011994  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 11601  011998  ECFF  F0B4         	call	_Byte_SetByte	;wreg free
 11602                           
 11603                           ;Port.c: 599: break;
 11604  01199C  0012               	return	
 11605  01199E                     
 11606                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 11607  01199E  0100               	movlb	0	; () banked
 11608  0119A0  EE20 F004          	lfsr	2,4
 11609  0119A4  516F               	movf	Port_Set@pInput& (0+255),w,b
 11610  0119A6  26D9               	addwf	fsr2l,f,c
 11611  0119A8  5170               	movf	(Port_Set@pInput+1)& (0+255),w,b
 11612  0119AA  22DA               	addwfc	fsr2h,f,c
 11613  0119AC  CFDE F060          	movff	postinc2,Byte_SetByte@pInput
 11614  0119B0  CFDD F061          	movff	postdec2,Byte_SetByte@pInput+1
 11615  0119B4  C071  F062         	movff	Port_Set@pValue,Byte_SetByte@pValue
 11616  0119B8  ECFF  F0B4         	call	_Byte_SetByte	;wreg free
 11617                           
 11618                           ;Port.c: 606: }
 11619                           
 11620                           ;Port.c: 605: break;
 11621                           
 11622                           ;Port.c: 604: default:
 11623                           
 11624                           ;Port.c: 603: break;
 11625  0119BC  0012               	return	
 11626  0119BE                     l526:
 11627  0119BE  0100               	movlb	0	; () banked
 11628  0119C0  5186               	movf	Port_Set@Type& (0+255),w,b
 11629                           
 11630                           ; Switch size 1, requested type "space"
 11631                           ; Number of cases is 4, Range of values is 0 to 3
 11632                           ; switch strategies available:
 11633                           ; Name         Instructions Cycles
 11634                           ; simple_byte           13     7 (average)
 11635                           ;	Chosen strategy is simple_byte
 11636  0119C2  0A00               	xorlw	0	; case 0
 11637  0119C4  B4D8               	btfsc	status,2,c
 11638  0119C6  0012               	return	
 11639  0119C8  0A01               	xorlw	1	; case 1
 11640  0119CA  B4D8               	btfsc	status,2,c
 11641  0119CC  D7C6               	goto	l529
 11642  0119CE  0A03               	xorlw	3	; case 2
 11643  0119D0  B4D8               	btfsc	status,2,c
 11644  0119D2  D7D3               	goto	l531
 11645  0119D4  0A01               	xorlw	1	; case 3
 11646  0119D6  A4D8               	btfss	status,2,c
 11647                           
 11648                           ; BSR set to: 0
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;Port.c: 607: }
 11652  0119D8  0012               	return	
 11653  0119DA  D7E1               	goto	l532
 11654  0119DC                     l528:
 11655  0119DC  0012               	return		;funcret
 11656  0119DE                     __end_of_Port_Set:
 11657                           	opt stack 0
 11658                           tosu	equ	0xFFF
 11659                           tosh	equ	0xFFE
 11660                           tosl	equ	0xFFD
 11661                           pclath	equ	0xFFA
 11662                           tblptru	equ	0xFF8
 11663                           tblptrh	equ	0xFF7
 11664                           tblptrl	equ	0xFF6
 11665                           tablat	equ	0xFF5
 11666                           prodh	equ	0xFF4
 11667                           prodl	equ	0xFF3
 11668                           intcon	equ	0xFF2
 11669                           postinc0	equ	0xFEE
 11670                           wreg	equ	0xFE8
 11671                           postdec1	equ	0xFE5
 11672                           fsr1h	equ	0xFE2
 11673                           fsr1l	equ	0xFE1
 11674                           indf2	equ	0xFDF
 11675                           postinc2	equ	0xFDE
 11676                           postdec2	equ	0xFDD
 11677                           fsr2h	equ	0xFDA
 11678                           fsr2l	equ	0xFD9
 11679                           status	equ	0xFD8
 11680                           
 11681 ;; *************** function _Byte_SetByte *****************
 11682 ;; Defined at:
 11683 ;;		line 110 in file "Library/Types.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11686 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 11687 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 11688 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 11689 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 11690 ;;		 -> NULL(0), 
 11691 ;;  pValue          1    2[BANK0 ] unsigned char 
 11692 ;; Auto vars:     Size  Location     Type
 11693 ;;		None
 11694 ;; Return value:  Size  Location     Type
 11695 ;;                  1    wreg      void 
 11696 ;; Registers used:
 11697 ;;		fsr2l, fsr2h
 11698 ;; Tracked objects:
 11699 ;;		On entry : 0/0
 11700 ;;		On exit  : 0/0
 11701 ;;		Unchanged: 0/0
 11702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11703 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11707 ;;Total ram usage:        3 bytes
 11708 ;; Hardware stack levels used:    1
 11709 ;; Hardware stack levels required when called:    7
 11710 ;; This function calls:
 11711 ;;		Nothing
 11712 ;; This function is called by:
 11713 ;;		_Port_Set
 11714 ;;		_I2C_Init
 11715 ;; This function uses a non-reentrant model
 11716 ;;
 11717                           
 11718                           	psect	text35
 11719  0169FE                     __ptext35:
 11720                           	opt stack 0
 11721  0169FE                     _Byte_SetByte:
 11722                           	opt stack 20
 11723                           
 11724                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 11725                           
 11726                           ;incstack = 0
 11727  0169FE  C060  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 11728  016A02  C061  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 11729  016A06  C062  FFDF         	movff	Byte_SetByte@pValue,indf2
 11730  016A0A  0012               	return		;funcret
 11731  016A0C                     __end_of_Byte_SetByte:
 11732                           	opt stack 0
 11733                           tosu	equ	0xFFF
 11734                           tosh	equ	0xFFE
 11735                           tosl	equ	0xFFD
 11736                           pclath	equ	0xFFA
 11737                           tblptru	equ	0xFF8
 11738                           tblptrh	equ	0xFF7
 11739                           tblptrl	equ	0xFF6
 11740                           tablat	equ	0xFF5
 11741                           prodh	equ	0xFF4
 11742                           prodl	equ	0xFF3
 11743                           intcon	equ	0xFF2
 11744                           postinc0	equ	0xFEE
 11745                           wreg	equ	0xFE8
 11746                           postdec1	equ	0xFE5
 11747                           fsr1h	equ	0xFE2
 11748                           fsr1l	equ	0xFE1
 11749                           indf2	equ	0xFDF
 11750                           postinc2	equ	0xFDE
 11751                           postdec2	equ	0xFDD
 11752                           fsr2h	equ	0xFDA
 11753                           fsr2l	equ	0xFD9
 11754                           status	equ	0xFD8
 11755                           
 11756 ;; *************** function _GetPortTRIS *****************
 11757 ;; Defined at:
 11758 ;;		line 67 in file "Library/Port.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;  pInput          1    wreg     enum E6786
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;  pInput          1    2[BANK0 ] enum E6786
 11763 ;; Return value:  Size  Location     Type
 11764 ;;                  2    0[BANK0 ] PTR struct Byte
 11765 ;; Registers used:
 11766 ;;		wreg, status,2, status,0
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11773 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11775 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11776 ;;Total ram usage:        3 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    7
 11779 ;; This function calls:
 11780 ;;		Nothing
 11781 ;; This function is called by:
 11782 ;;		_Port_Init
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           	psect	text36
 11787  014E98                     __ptext36:
 11788                           	opt stack 0
 11789  014E98                     _GetPortTRIS:
 11790                           	opt stack 21
 11791                           
 11792                           ;incstack = 0
 11793                           ;GetPortTRIS@pInput stored from wreg
 11794  014E98  0100               	movlb	0	; () banked
 11795  014E9A  6F62               	movwf	GetPortTRIS@pInput& (0+255),b
 11796                           
 11797                           ;Port.c: 69: switch (pInput)
 11798  014E9C  D038               	goto	l363
 11799  014E9E                     
 11800                           ;Port.c: 72: return (BytePtr)&TRISA;
 11801  014E9E  0E92               	movlw	146
 11802  014EA0  0100               	movlb	0	; () banked
 11803  014EA2  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11804  014EA4  0E0F               	movlw	15
 11805  014EA6  0100               	movlb	0	; () banked
 11806  014EA8  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11807                           
 11808                           ; BSR set to: 0
 11809  014EAA  0012               	return	
 11810  014EAC                     
 11811                           ; BSR set to: 0
 11812                           ;Port.c: 74: return (BytePtr)&TRISB;
 11813                           
 11814                           ; BSR set to: 0
 11815  014EAC  0E93               	movlw	147
 11816  014EAE  0100               	movlb	0	; () banked
 11817  014EB0  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11818  014EB2  0E0F               	movlw	15
 11819  014EB4  0100               	movlb	0	; () banked
 11820  014EB6  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11821                           
 11822                           ; BSR set to: 0
 11823  014EB8  0012               	return	
 11824  014EBA                     
 11825                           ; BSR set to: 0
 11826                           ;Port.c: 76: return (BytePtr)&TRISC;
 11827                           
 11828                           ; BSR set to: 0
 11829  014EBA  0E94               	movlw	148
 11830  014EBC  0100               	movlb	0	; () banked
 11831  014EBE  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11832  014EC0  0E0F               	movlw	15
 11833  014EC2  0100               	movlb	0	; () banked
 11834  014EC4  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11835                           
 11836                           ; BSR set to: 0
 11837  014EC6  0012               	return	
 11838  014EC8                     
 11839                           ; BSR set to: 0
 11840                           ;Port.c: 78: return (BytePtr)&TRISD;
 11841                           
 11842                           ; BSR set to: 0
 11843  014EC8  0E95               	movlw	149
 11844  014ECA  0100               	movlb	0	; () banked
 11845  014ECC  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11846  014ECE  0E0F               	movlw	15
 11847  014ED0  0100               	movlb	0	; () banked
 11848  014ED2  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11849                           
 11850                           ; BSR set to: 0
 11851  014ED4  0012               	return	
 11852  014ED6                     
 11853                           ; BSR set to: 0
 11854                           ;Port.c: 80: return (BytePtr)&TRISE;
 11855                           
 11856                           ; BSR set to: 0
 11857  014ED6  0E96               	movlw	150
 11858  014ED8  0100               	movlb	0	; () banked
 11859  014EDA  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11860  014EDC  0E0F               	movlw	15
 11861  014EDE  0100               	movlb	0	; () banked
 11862  014EE0  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11863                           
 11864                           ; BSR set to: 0
 11865  014EE2  0012               	return	
 11866  014EE4                     
 11867                           ; BSR set to: 0
 11868                           ;Port.c: 82: return (BytePtr)&TRISF;
 11869                           
 11870                           ; BSR set to: 0
 11871  014EE4  0E97               	movlw	151
 11872  014EE6  0100               	movlb	0	; () banked
 11873  014EE8  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11874  014EEA  0E0F               	movlw	15
 11875  014EEC  0100               	movlb	0	; () banked
 11876  014EEE  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11877                           
 11878                           ; BSR set to: 0
 11879  014EF0  0012               	return	
 11880  014EF2                     
 11881                           ; BSR set to: 0
 11882                           ;Port.c: 84: return (BytePtr)&TRISG;
 11883                           
 11884                           ; BSR set to: 0
 11885  014EF2  0E98               	movlw	152
 11886  014EF4  0100               	movlb	0	; () banked
 11887  014EF6  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11888  014EF8  0E0F               	movlw	15
 11889  014EFA  0100               	movlb	0	; () banked
 11890  014EFC  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11891                           
 11892                           ; BSR set to: 0
 11893  014EFE  0012               	return	
 11894  014F00                     
 11895                           ; BSR set to: 0
 11896                           ;Port.c: 86: return (void*)0;
 11897                           
 11898                           ; BSR set to: 0
 11899  014F00  0E00               	movlw	0
 11900  014F02  0100               	movlb	0	; () banked
 11901  014F04  6F60               	movwf	?_GetPortTRIS& (0+255),b
 11902  014F06  0E00               	movlw	0
 11903  014F08  0100               	movlb	0	; () banked
 11904  014F0A  6F61               	movwf	(?_GetPortTRIS+1)& (0+255),b
 11905                           
 11906                           ; BSR set to: 0
 11907                           ;Port.c: 87: }
 11908                           
 11909                           ; BSR set to: 0
 11910  014F0C  0012               	return	
 11911  014F0E                     l363:
 11912                           
 11913                           ; BSR set to: 0
 11914  014F0E  0100               	movlb	0	; () banked
 11915  014F10  5162               	movf	GetPortTRIS@pInput& (0+255),w,b
 11916                           
 11917                           ; Switch size 1, requested type "space"
 11918                           ; Number of cases is 7, Range of values is 0 to 6
 11919                           ; switch strategies available:
 11920                           ; Name         Instructions Cycles
 11921                           ; simple_byte           22    12 (average)
 11922                           ;	Chosen strategy is simple_byte
 11923  014F12  0A00               	xorlw	0	; case 0
 11924  014F14  B4D8               	btfsc	status,2,c
 11925  014F16  D7C3               	goto	l364
 11926  014F18  0A01               	xorlw	1	; case 1
 11927  014F1A  B4D8               	btfsc	status,2,c
 11928  014F1C  D7C7               	goto	l366
 11929  014F1E  0A03               	xorlw	3	; case 2
 11930  014F20  B4D8               	btfsc	status,2,c
 11931  014F22  D7CB               	goto	l367
 11932  014F24  0A01               	xorlw	1	; case 3
 11933  014F26  B4D8               	btfsc	status,2,c
 11934  014F28  D7CF               	goto	l368
 11935  014F2A  0A07               	xorlw	7	; case 4
 11936  014F2C  B4D8               	btfsc	status,2,c
 11937  014F2E  D7D3               	goto	l369
 11938  014F30  0A01               	xorlw	1	; case 5
 11939  014F32  B4D8               	btfsc	status,2,c
 11940  014F34  D7D7               	goto	l370
 11941  014F36  0A03               	xorlw	3	; case 6
 11942  014F38  B4D8               	btfsc	status,2,c
 11943  014F3A  D7DB               	goto	l371
 11944  014F3C  D7E1               	goto	l372
 11945  014F3E                     __end_of_GetPortTRIS:
 11946                           	opt stack 0
 11947                           tosu	equ	0xFFF
 11948                           tosh	equ	0xFFE
 11949                           tosl	equ	0xFFD
 11950                           pclath	equ	0xFFA
 11951                           tblptru	equ	0xFF8
 11952                           tblptrh	equ	0xFF7
 11953                           tblptrl	equ	0xFF6
 11954                           tablat	equ	0xFF5
 11955                           prodh	equ	0xFF4
 11956                           prodl	equ	0xFF3
 11957                           intcon	equ	0xFF2
 11958                           postinc0	equ	0xFEE
 11959                           wreg	equ	0xFE8
 11960                           postdec1	equ	0xFE5
 11961                           fsr1h	equ	0xFE2
 11962                           fsr1l	equ	0xFE1
 11963                           indf2	equ	0xFDF
 11964                           postinc2	equ	0xFDE
 11965                           postdec2	equ	0xFDD
 11966                           fsr2h	equ	0xFDA
 11967                           fsr2l	equ	0xFD9
 11968                           status	equ	0xFD8
 11969                           
 11970 ;; *************** function _GetPortProperties *****************
 11971 ;; Defined at:
 11972 ;;		line 21 in file "Library/Port.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;  pInput          1    wreg     enum E6786
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;  pInput          1    2[BANK0 ] enum E6786
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  2    0[BANK0 ] PTR struct PortProperty
 11979 ;; Registers used:
 11980 ;;		wreg, status,2, status,0
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11986 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11989 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;Total ram usage:        3 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; Hardware stack levels required when called:    7
 11993 ;; This function calls:
 11994 ;;		Nothing
 11995 ;; This function is called by:
 11996 ;;		_Port_Init
 11997 ;; This function uses a non-reentrant model
 11998 ;;
 11999                           
 12000                           	psect	text37
 12001  014F3E                     __ptext37:
 12002                           	opt stack 0
 12003  014F3E                     _GetPortProperties:
 12004                           	opt stack 21
 12005                           
 12006                           ; BSR set to: 0
 12007                           ;incstack = 0
 12008                           ;GetPortProperties@pInput stored from wreg
 12009  014F3E  0100               	movlb	0	; () banked
 12010  014F40  6F62               	movwf	GetPortProperties@pInput& (0+255),b
 12011                           
 12012                           ;Port.c: 23: switch (pInput)
 12013  014F42  D038               	goto	l337
 12014  014F44                     
 12015                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 12016  014F44  0E5B               	movlw	low _PortA_Property
 12017  014F46  0100               	movlb	0	; () banked
 12018  014F48  6F60               	movwf	?_GetPortProperties& (0+255),b
 12019  014F4A  0EFF               	movlw	high _PortA_Property
 12020  014F4C  0100               	movlb	0	; () banked
 12021  014F4E  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12022                           
 12023                           ; BSR set to: 0
 12024  014F50  0012               	return	
 12025  014F52                     
 12026                           ; BSR set to: 0
 12027                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 12028                           
 12029                           ; BSR set to: 0
 12030  014F52  0E59               	movlw	low _PortB_Property
 12031  014F54  0100               	movlb	0	; () banked
 12032  014F56  6F60               	movwf	?_GetPortProperties& (0+255),b
 12033  014F58  0EFF               	movlw	high _PortB_Property
 12034  014F5A  0100               	movlb	0	; () banked
 12035  014F5C  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12036                           
 12037                           ; BSR set to: 0
 12038  014F5E  0012               	return	
 12039  014F60                     
 12040                           ; BSR set to: 0
 12041                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 12042                           
 12043                           ; BSR set to: 0
 12044  014F60  0E57               	movlw	low _PortC_Property
 12045  014F62  0100               	movlb	0	; () banked
 12046  014F64  6F60               	movwf	?_GetPortProperties& (0+255),b
 12047  014F66  0EFF               	movlw	high _PortC_Property
 12048  014F68  0100               	movlb	0	; () banked
 12049  014F6A  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12050                           
 12051                           ; BSR set to: 0
 12052  014F6C  0012               	return	
 12053  014F6E                     
 12054                           ; BSR set to: 0
 12055                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 12056                           
 12057                           ; BSR set to: 0
 12058  014F6E  0E55               	movlw	low _PortD_Property
 12059  014F70  0100               	movlb	0	; () banked
 12060  014F72  6F60               	movwf	?_GetPortProperties& (0+255),b
 12061  014F74  0EFF               	movlw	high _PortD_Property
 12062  014F76  0100               	movlb	0	; () banked
 12063  014F78  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12064                           
 12065                           ; BSR set to: 0
 12066  014F7A  0012               	return	
 12067  014F7C                     
 12068                           ; BSR set to: 0
 12069                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 12070                           
 12071                           ; BSR set to: 0
 12072  014F7C  0E53               	movlw	low _PortE_Property
 12073  014F7E  0100               	movlb	0	; () banked
 12074  014F80  6F60               	movwf	?_GetPortProperties& (0+255),b
 12075  014F82  0EFF               	movlw	high _PortE_Property
 12076  014F84  0100               	movlb	0	; () banked
 12077  014F86  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12078                           
 12079                           ; BSR set to: 0
 12080  014F88  0012               	return	
 12081  014F8A                     
 12082                           ; BSR set to: 0
 12083                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 12084                           
 12085                           ; BSR set to: 0
 12086  014F8A  0E51               	movlw	low _PortF_Property
 12087  014F8C  0100               	movlb	0	; () banked
 12088  014F8E  6F60               	movwf	?_GetPortProperties& (0+255),b
 12089  014F90  0EFF               	movlw	high _PortF_Property
 12090  014F92  0100               	movlb	0	; () banked
 12091  014F94  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12092                           
 12093                           ; BSR set to: 0
 12094  014F96  0012               	return	
 12095  014F98                     
 12096                           ; BSR set to: 0
 12097                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 12098                           
 12099                           ; BSR set to: 0
 12100  014F98  0E4F               	movlw	low _PortG_Property
 12101  014F9A  0100               	movlb	0	; () banked
 12102  014F9C  6F60               	movwf	?_GetPortProperties& (0+255),b
 12103  014F9E  0EFF               	movlw	high _PortG_Property
 12104  014FA0  0100               	movlb	0	; () banked
 12105  014FA2  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12106                           
 12107                           ; BSR set to: 0
 12108  014FA4  0012               	return	
 12109  014FA6                     
 12110                           ; BSR set to: 0
 12111                           ;Port.c: 40: return (void*)0;
 12112                           
 12113                           ; BSR set to: 0
 12114  014FA6  0E00               	movlw	0
 12115  014FA8  0100               	movlb	0	; () banked
 12116  014FAA  6F60               	movwf	?_GetPortProperties& (0+255),b
 12117  014FAC  0E00               	movlw	0
 12118  014FAE  0100               	movlb	0	; () banked
 12119  014FB0  6F61               	movwf	(?_GetPortProperties+1)& (0+255),b
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;Port.c: 41: }
 12123                           
 12124                           ; BSR set to: 0
 12125  014FB2  0012               	return	
 12126  014FB4                     l337:
 12127                           
 12128                           ; BSR set to: 0
 12129  014FB4  0100               	movlb	0	; () banked
 12130  014FB6  5162               	movf	GetPortProperties@pInput& (0+255),w,b
 12131                           
 12132                           ; Switch size 1, requested type "space"
 12133                           ; Number of cases is 7, Range of values is 0 to 6
 12134                           ; switch strategies available:
 12135                           ; Name         Instructions Cycles
 12136                           ; simple_byte           22    12 (average)
 12137                           ;	Chosen strategy is simple_byte
 12138  014FB8  0A00               	xorlw	0	; case 0
 12139  014FBA  B4D8               	btfsc	status,2,c
 12140  014FBC  D7C3               	goto	l338
 12141  014FBE  0A01               	xorlw	1	; case 1
 12142  014FC0  B4D8               	btfsc	status,2,c
 12143  014FC2  D7C7               	goto	l340
 12144  014FC4  0A03               	xorlw	3	; case 2
 12145  014FC6  B4D8               	btfsc	status,2,c
 12146  014FC8  D7CB               	goto	l341
 12147  014FCA  0A01               	xorlw	1	; case 3
 12148  014FCC  B4D8               	btfsc	status,2,c
 12149  014FCE  D7CF               	goto	l342
 12150  014FD0  0A07               	xorlw	7	; case 4
 12151  014FD2  B4D8               	btfsc	status,2,c
 12152  014FD4  D7D3               	goto	l343
 12153  014FD6  0A01               	xorlw	1	; case 5
 12154  014FD8  B4D8               	btfsc	status,2,c
 12155  014FDA  D7D7               	goto	l344
 12156  014FDC  0A03               	xorlw	3	; case 6
 12157  014FDE  B4D8               	btfsc	status,2,c
 12158  014FE0  D7DB               	goto	l345
 12159  014FE2  D7E1               	goto	l346
 12160  014FE4                     __end_of_GetPortProperties:
 12161                           	opt stack 0
 12162                           tosu	equ	0xFFF
 12163                           tosh	equ	0xFFE
 12164                           tosl	equ	0xFFD
 12165                           pclath	equ	0xFFA
 12166                           tblptru	equ	0xFF8
 12167                           tblptrh	equ	0xFF7
 12168                           tblptrl	equ	0xFF6
 12169                           tablat	equ	0xFF5
 12170                           prodh	equ	0xFF4
 12171                           prodl	equ	0xFF3
 12172                           intcon	equ	0xFF2
 12173                           postinc0	equ	0xFEE
 12174                           wreg	equ	0xFE8
 12175                           postdec1	equ	0xFE5
 12176                           fsr1h	equ	0xFE2
 12177                           fsr1l	equ	0xFE1
 12178                           indf2	equ	0xFDF
 12179                           postinc2	equ	0xFDE
 12180                           postdec2	equ	0xFDD
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185 ;; *************** function _GetPortPORT *****************
 12186 ;; Defined at:
 12187 ;;		line 44 in file "Library/Port.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;  pInput          1    wreg     enum E6786
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;  pInput          1    2[BANK0 ] enum E6786
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  2    0[BANK0 ] PTR struct Byte
 12194 ;; Registers used:
 12195 ;;		wreg, status,2, status,0
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 0/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12204 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12205 ;;Total ram usage:        3 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:    7
 12208 ;; This function calls:
 12209 ;;		Nothing
 12210 ;; This function is called by:
 12211 ;;		_Port_Init
 12212 ;; This function uses a non-reentrant model
 12213 ;;
 12214                           
 12215                           	psect	text38
 12216  014FE4                     __ptext38:
 12217                           	opt stack 0
 12218  014FE4                     _GetPortPORT:
 12219                           	opt stack 21
 12220                           
 12221                           ; BSR set to: 0
 12222                           ;incstack = 0
 12223                           ;GetPortPORT@pInput stored from wreg
 12224  014FE4  0100               	movlb	0	; () banked
 12225  014FE6  6F62               	movwf	GetPortPORT@pInput& (0+255),b
 12226                           
 12227                           ;Port.c: 46: switch (pInput)
 12228  014FE8  D038               	goto	l350
 12229  014FEA                     
 12230                           ;Port.c: 49: return (BytePtr)&PORTA;
 12231  014FEA  0E80               	movlw	128
 12232  014FEC  0100               	movlb	0	; () banked
 12233  014FEE  6F60               	movwf	?_GetPortPORT& (0+255),b
 12234  014FF0  0E0F               	movlw	15
 12235  014FF2  0100               	movlb	0	; () banked
 12236  014FF4  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12237                           
 12238                           ; BSR set to: 0
 12239  014FF6  0012               	return	
 12240  014FF8                     
 12241                           ; BSR set to: 0
 12242                           ;Port.c: 51: return (BytePtr)&PORTB;
 12243                           
 12244                           ; BSR set to: 0
 12245  014FF8  0E81               	movlw	129
 12246  014FFA  0100               	movlb	0	; () banked
 12247  014FFC  6F60               	movwf	?_GetPortPORT& (0+255),b
 12248  014FFE  0E0F               	movlw	15
 12249  015000  0100               	movlb	0	; () banked
 12250  015002  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12251                           
 12252                           ; BSR set to: 0
 12253  015004  0012               	return	
 12254  015006                     
 12255                           ; BSR set to: 0
 12256                           ;Port.c: 53: return (BytePtr)&PORTC;
 12257                           
 12258                           ; BSR set to: 0
 12259  015006  0E82               	movlw	130
 12260  015008  0100               	movlb	0	; () banked
 12261  01500A  6F60               	movwf	?_GetPortPORT& (0+255),b
 12262  01500C  0E0F               	movlw	15
 12263  01500E  0100               	movlb	0	; () banked
 12264  015010  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12265                           
 12266                           ; BSR set to: 0
 12267  015012  0012               	return	
 12268  015014                     
 12269                           ; BSR set to: 0
 12270                           ;Port.c: 55: return (BytePtr)&PORTD;
 12271                           
 12272                           ; BSR set to: 0
 12273  015014  0E83               	movlw	131
 12274  015016  0100               	movlb	0	; () banked
 12275  015018  6F60               	movwf	?_GetPortPORT& (0+255),b
 12276  01501A  0E0F               	movlw	15
 12277  01501C  0100               	movlb	0	; () banked
 12278  01501E  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12279                           
 12280                           ; BSR set to: 0
 12281  015020  0012               	return	
 12282  015022                     
 12283                           ; BSR set to: 0
 12284                           ;Port.c: 57: return (BytePtr)&PORTE;
 12285                           
 12286                           ; BSR set to: 0
 12287  015022  0E84               	movlw	132
 12288  015024  0100               	movlb	0	; () banked
 12289  015026  6F60               	movwf	?_GetPortPORT& (0+255),b
 12290  015028  0E0F               	movlw	15
 12291  01502A  0100               	movlb	0	; () banked
 12292  01502C  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12293                           
 12294                           ; BSR set to: 0
 12295  01502E  0012               	return	
 12296  015030                     
 12297                           ; BSR set to: 0
 12298                           ;Port.c: 59: return (BytePtr)&PORTF;
 12299                           
 12300                           ; BSR set to: 0
 12301  015030  0E85               	movlw	133
 12302  015032  0100               	movlb	0	; () banked
 12303  015034  6F60               	movwf	?_GetPortPORT& (0+255),b
 12304  015036  0E0F               	movlw	15
 12305  015038  0100               	movlb	0	; () banked
 12306  01503A  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12307                           
 12308                           ; BSR set to: 0
 12309  01503C  0012               	return	
 12310  01503E                     
 12311                           ; BSR set to: 0
 12312                           ;Port.c: 61: return (BytePtr)&PORTG;
 12313                           
 12314                           ; BSR set to: 0
 12315  01503E  0E86               	movlw	134
 12316  015040  0100               	movlb	0	; () banked
 12317  015042  6F60               	movwf	?_GetPortPORT& (0+255),b
 12318  015044  0E0F               	movlw	15
 12319  015046  0100               	movlb	0	; () banked
 12320  015048  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12321                           
 12322                           ; BSR set to: 0
 12323  01504A  0012               	return	
 12324  01504C                     
 12325                           ; BSR set to: 0
 12326                           ;Port.c: 63: return (void*)0;
 12327                           
 12328                           ; BSR set to: 0
 12329  01504C  0E00               	movlw	0
 12330  01504E  0100               	movlb	0	; () banked
 12331  015050  6F60               	movwf	?_GetPortPORT& (0+255),b
 12332  015052  0E00               	movlw	0
 12333  015054  0100               	movlb	0	; () banked
 12334  015056  6F61               	movwf	(?_GetPortPORT+1)& (0+255),b
 12335                           
 12336                           ; BSR set to: 0
 12337                           ;Port.c: 64: }
 12338                           
 12339                           ; BSR set to: 0
 12340  015058  0012               	return	
 12341  01505A                     l350:
 12342                           
 12343                           ; BSR set to: 0
 12344  01505A  0100               	movlb	0	; () banked
 12345  01505C  5162               	movf	GetPortPORT@pInput& (0+255),w,b
 12346                           
 12347                           ; Switch size 1, requested type "space"
 12348                           ; Number of cases is 7, Range of values is 0 to 6
 12349                           ; switch strategies available:
 12350                           ; Name         Instructions Cycles
 12351                           ; simple_byte           22    12 (average)
 12352                           ;	Chosen strategy is simple_byte
 12353  01505E  0A00               	xorlw	0	; case 0
 12354  015060  B4D8               	btfsc	status,2,c
 12355  015062  D7C3               	goto	l351
 12356  015064  0A01               	xorlw	1	; case 1
 12357  015066  B4D8               	btfsc	status,2,c
 12358  015068  D7C7               	goto	l353
 12359  01506A  0A03               	xorlw	3	; case 2
 12360  01506C  B4D8               	btfsc	status,2,c
 12361  01506E  D7CB               	goto	l354
 12362  015070  0A01               	xorlw	1	; case 3
 12363  015072  B4D8               	btfsc	status,2,c
 12364  015074  D7CF               	goto	l355
 12365  015076  0A07               	xorlw	7	; case 4
 12366  015078  B4D8               	btfsc	status,2,c
 12367  01507A  D7D3               	goto	l356
 12368  01507C  0A01               	xorlw	1	; case 5
 12369  01507E  B4D8               	btfsc	status,2,c
 12370  015080  D7D7               	goto	l357
 12371  015082  0A03               	xorlw	3	; case 6
 12372  015084  B4D8               	btfsc	status,2,c
 12373  015086  D7DB               	goto	l358
 12374  015088  D7E1               	goto	l359
 12375  01508A                     __end_of_GetPortPORT:
 12376                           	opt stack 0
 12377                           tosu	equ	0xFFF
 12378                           tosh	equ	0xFFE
 12379                           tosl	equ	0xFFD
 12380                           pclath	equ	0xFFA
 12381                           tblptru	equ	0xFF8
 12382                           tblptrh	equ	0xFF7
 12383                           tblptrl	equ	0xFF6
 12384                           tablat	equ	0xFF5
 12385                           prodh	equ	0xFF4
 12386                           prodl	equ	0xFF3
 12387                           intcon	equ	0xFF2
 12388                           postinc0	equ	0xFEE
 12389                           wreg	equ	0xFE8
 12390                           postdec1	equ	0xFE5
 12391                           fsr1h	equ	0xFE2
 12392                           fsr1l	equ	0xFE1
 12393                           indf2	equ	0xFDF
 12394                           postinc2	equ	0xFDE
 12395                           postdec2	equ	0xFDD
 12396                           fsr2h	equ	0xFDA
 12397                           fsr2l	equ	0xFD9
 12398                           status	equ	0xFD8
 12399                           
 12400 ;; *************** function _LED_Init *****************
 12401 ;; Defined at:
 12402 ;;		line 15 in file "Library/LED.c"
 12403 ;; Parameters:    Size  Location     Type
 12404 ;;  pLED            1    wreg     enum E6739
 12405 ;; Auto vars:     Size  Location     Type
 12406 ;;  pLED            1   45[BANK0 ] enum E6739
 12407 ;; Return value:  Size  Location     Type
 12408 ;;                  1    wreg      void 
 12409 ;; Registers used:
 12410 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12411 ;; Tracked objects:
 12412 ;;		On entry : 0/0
 12413 ;;		On exit  : 0/0
 12414 ;;		Unchanged: 0/0
 12415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12419 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12420 ;;Total ram usage:        1 bytes
 12421 ;; Hardware stack levels used:    1
 12422 ;; Hardware stack levels required when called:   12
 12423 ;; This function calls:
 12424 ;;		_LED_Set
 12425 ;;		_Port_SetPinType
 12426 ;; This function is called by:
 12427 ;;		_MXK_Init
 12428 ;; This function uses a non-reentrant model
 12429 ;;
 12430                           
 12431                           	psect	text39
 12432  015D74                     __ptext39:
 12433                           	opt stack 0
 12434  015D74                     _LED_Init:
 12435                           	opt stack 17
 12436                           
 12437                           ; BSR set to: 0
 12438                           ;incstack = 0
 12439                           ;LED_Init@pLED stored from wreg
 12440  015D74  0100               	movlb	0	; () banked
 12441  015D76  6F8D               	movwf	LED_Init@pLED& (0+255),b
 12442                           
 12443                           ;LED.c: 17: switch (pLED)
 12444  015D78  D01E               	goto	l220
 12445  015D7A                     
 12446                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 12447  015D7A  0E35               	movlw	low _PortC
 12448  015D7C  0100               	movlb	0	; () banked
 12449  015D7E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12450  015D80  0E00               	movlw	high _PortC
 12451  015D82  0100               	movlb	0	; () banked
 12452  015D84  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12453  015D86  0E00               	movlw	0
 12454  015D88  0100               	movlb	0	; () banked
 12455  015D8A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12456  015D8C  0E03               	movlw	3
 12457  015D8E  0100               	movlb	0	; () banked
 12458  015D90  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12459  015D92  ECAA  F095         	call	_Port_SetPinType	;wreg free
 12460                           
 12461                           ;LED.c: 21: break;
 12462  015D96  D017               	goto	l222
 12463  015D98                     
 12464                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 12465  015D98  0E35               	movlw	low _PortC
 12466  015D9A  0100               	movlb	0	; () banked
 12467  015D9C  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 12468  015D9E  0E00               	movlw	high _PortC
 12469  015DA0  0100               	movlb	0	; () banked
 12470  015DA2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12471  015DA4  0E01               	movlw	1
 12472  015DA6  0100               	movlb	0	; () banked
 12473  015DA8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 12474  015DAA  0E03               	movlw	3
 12475  015DAC  0100               	movlb	0	; () banked
 12476  015DAE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 12477  015DB0  ECAA  F095         	call	_Port_SetPinType	;wreg free
 12478                           
 12479                           ;LED.c: 25: }
 12480                           
 12481                           ;LED.c: 24: break;
 12482  015DB4  D008               	goto	l222
 12483  015DB6                     l220:
 12484  015DB6  0100               	movlb	0	; () banked
 12485  015DB8  518D               	movf	LED_Init@pLED& (0+255),w,b
 12486                           
 12487                           ; Switch size 1, requested type "space"
 12488                           ; Number of cases is 2, Range of values is 0 to 1
 12489                           ; switch strategies available:
 12490                           ; Name         Instructions Cycles
 12491                           ; simple_byte            7     4 (average)
 12492                           ;	Chosen strategy is simple_byte
 12493  015DBA  0A00               	xorlw	0	; case 0
 12494  015DBC  B4D8               	btfsc	status,2,c
 12495  015DBE  D7DD               	goto	l221
 12496  015DC0  0A01               	xorlw	1	; case 1
 12497  015DC2  B4D8               	btfsc	status,2,c
 12498  015DC4  D7E9               	goto	l223
 12499  015DC6                     l222:
 12500                           
 12501                           ;LED.c: 26: LED_Set(pLED, 0);
 12502                           
 12503                           ; BSR set to: 0
 12504  015DC6  0E00               	movlw	0
 12505  015DC8  0100               	movlb	0	; () banked
 12506  015DCA  6F74               	movwf	LED_Set@pValue& (0+255),b
 12507  015DCC  0100               	movlb	0	; () banked
 12508  015DCE  518D               	movf	LED_Init@pLED& (0+255),w,b
 12509  015DD0  ECCC  F0AF         	call	_LED_Set
 12510  015DD4  0012               	return		;funcret
 12511  015DD6                     __end_of_LED_Init:
 12512                           	opt stack 0
 12513                           tosu	equ	0xFFF
 12514                           tosh	equ	0xFFE
 12515                           tosl	equ	0xFFD
 12516                           pclath	equ	0xFFA
 12517                           tblptru	equ	0xFF8
 12518                           tblptrh	equ	0xFF7
 12519                           tblptrl	equ	0xFF6
 12520                           tablat	equ	0xFF5
 12521                           prodh	equ	0xFF4
 12522                           prodl	equ	0xFF3
 12523                           intcon	equ	0xFF2
 12524                           postinc0	equ	0xFEE
 12525                           wreg	equ	0xFE8
 12526                           postdec1	equ	0xFE5
 12527                           fsr1h	equ	0xFE2
 12528                           fsr1l	equ	0xFE1
 12529                           indf2	equ	0xFDF
 12530                           postinc2	equ	0xFDE
 12531                           postdec2	equ	0xFDD
 12532                           fsr2h	equ	0xFDA
 12533                           fsr2l	equ	0xFD9
 12534                           status	equ	0xFD8
 12535                           
 12536 ;; *************** function _LED_Set *****************
 12537 ;; Defined at:
 12538 ;;		line 33 in file "Library/LED.c"
 12539 ;; Parameters:    Size  Location     Type
 12540 ;;  pLED            1    wreg     enum E6739
 12541 ;;  pValue          1   20[BANK0 ] unsigned char 
 12542 ;; Auto vars:     Size  Location     Type
 12543 ;;  pLED            1   21[BANK0 ] enum E6739
 12544 ;; Return value:  Size  Location     Type
 12545 ;;                  1    wreg      void 
 12546 ;; Registers used:
 12547 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12548 ;; Tracked objects:
 12549 ;;		On entry : 0/0
 12550 ;;		On exit  : 0/0
 12551 ;;		Unchanged: 0/0
 12552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12553 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12557 ;;Total ram usage:        2 bytes
 12558 ;; Hardware stack levels used:    1
 12559 ;; Hardware stack levels required when called:   11
 12560 ;; This function calls:
 12561 ;;		_Port_SetPin
 12562 ;; This function is called by:
 12563 ;;		_LED_Init
 12564 ;;		_SYSTEM_Initialize
 12565 ;; This function uses a non-reentrant model
 12566 ;;
 12567                           
 12568                           	psect	text40
 12569  015F98                     __ptext40:
 12570                           	opt stack 0
 12571  015F98                     _LED_Set:
 12572                           	opt stack 17
 12573                           
 12574                           ;incstack = 0
 12575                           ;LED_Set@pLED stored from wreg
 12576  015F98  0100               	movlb	0	; () banked
 12577  015F9A  6F75               	movwf	LED_Set@pLED& (0+255),b
 12578                           
 12579                           ;LED.c: 35: switch (pLED)
 12580  015F9C  D01C               	goto	l227
 12581  015F9E                     
 12582                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 12583  015F9E  0E35               	movlw	low _PortC
 12584  015FA0  0100               	movlb	0	; () banked
 12585  015FA2  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12586  015FA4  0E00               	movlw	high _PortC
 12587  015FA6  0100               	movlb	0	; () banked
 12588  015FA8  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12589  015FAA  0E00               	movlw	0
 12590  015FAC  0100               	movlb	0	; () banked
 12591  015FAE  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12592  015FB0  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 12593  015FB4  EC62  F0A3         	call	_Port_SetPin	;wreg free
 12594                           
 12595                           ;LED.c: 39: break;
 12596  015FB8  0012               	return	
 12597  015FBA                     
 12598                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 12599  015FBA  0E35               	movlw	low _PortC
 12600  015FBC  0100               	movlb	0	; () banked
 12601  015FBE  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12602  015FC0  0E00               	movlw	high _PortC
 12603  015FC2  0100               	movlb	0	; () banked
 12604  015FC4  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12605  015FC6  0E01               	movlw	1
 12606  015FC8  0100               	movlb	0	; () banked
 12607  015FCA  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12608  015FCC  C074  F072         	movff	LED_Set@pValue,Port_SetPin@pValue
 12609  015FD0  EC62  F0A3         	call	_Port_SetPin	;wreg free
 12610                           
 12611                           ;LED.c: 43: }
 12612                           
 12613                           ;LED.c: 42: break;
 12614  015FD4  0012               	return	
 12615  015FD6                     l227:
 12616  015FD6  0100               	movlb	0	; () banked
 12617  015FD8  5175               	movf	LED_Set@pLED& (0+255),w,b
 12618                           
 12619                           ; Switch size 1, requested type "space"
 12620                           ; Number of cases is 2, Range of values is 0 to 1
 12621                           ; switch strategies available:
 12622                           ; Name         Instructions Cycles
 12623                           ; simple_byte            7     4 (average)
 12624                           ;	Chosen strategy is simple_byte
 12625  015FDA  0A00               	xorlw	0	; case 0
 12626  015FDC  B4D8               	btfsc	status,2,c
 12627  015FDE  D7DF               	goto	l228
 12628  015FE0  0A01               	xorlw	1	; case 1
 12629  015FE2  A4D8               	btfss	status,2,c
 12630  015FE4  0012               	return	
 12631  015FE6  D7E9               	goto	l230
 12632  015FE8                     __end_of_LED_Set:
 12633                           	opt stack 0
 12634                           tosu	equ	0xFFF
 12635                           tosh	equ	0xFFE
 12636                           tosl	equ	0xFFD
 12637                           pclath	equ	0xFFA
 12638                           tblptru	equ	0xFF8
 12639                           tblptrh	equ	0xFF7
 12640                           tblptrl	equ	0xFF6
 12641                           tablat	equ	0xFF5
 12642                           prodh	equ	0xFF4
 12643                           prodl	equ	0xFF3
 12644                           intcon	equ	0xFF2
 12645                           postinc0	equ	0xFEE
 12646                           wreg	equ	0xFE8
 12647                           postdec1	equ	0xFE5
 12648                           fsr1h	equ	0xFE2
 12649                           fsr1l	equ	0xFE1
 12650                           indf2	equ	0xFDF
 12651                           postinc2	equ	0xFDE
 12652                           postdec2	equ	0xFDD
 12653                           fsr2h	equ	0xFDA
 12654                           fsr2l	equ	0xFD9
 12655                           status	equ	0xFD8
 12656                           
 12657 ;; *************** function _MXK_Dequeue *****************
 12658 ;; Defined at:
 12659 ;;		line 153 in file "Library/MXK.c"
 12660 ;; Parameters:    Size  Location     Type
 12661 ;;		None
 12662 ;; Auto vars:     Size  Location     Type
 12663 ;;		None
 12664 ;; Return value:  Size  Location     Type
 12665 ;;                  1    wreg      void 
 12666 ;; Registers used:
 12667 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12668 ;; Tracked objects:
 12669 ;;		On entry : 0/0
 12670 ;;		On exit  : 0/0
 12671 ;;		Unchanged: 0/0
 12672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12677 ;;Total ram usage:        0 bytes
 12678 ;; Hardware stack levels used:    1
 12679 ;; Hardware stack levels required when called:   12
 12680 ;; This function calls:
 12681 ;;		Absolute function
 12682 ;;		_Motor_Step
 12683 ;; This function is called by:
 12684 ;;		_main
 12685 ;; This function uses a non-reentrant model
 12686 ;;
 12687                           
 12688                           	psect	text41
 12689  016382                     __ptext41:
 12690                           	opt stack 0
 12691  016382                     _MXK_Dequeue:
 12692                           	opt stack 18
 12693                           
 12694                           ;MXK.c: 155: if (lQueue)
 12695                           
 12696                           ;incstack = 0
 12697  016382  0100               	movlb	0	; () banked
 12698  016384  51D5               	movf	_lQueue& (0+255),w,b	;volatile
 12699  016386  0100               	movlb	0	; () banked
 12700  016388  11D6               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 12701  01638A  0100               	movlb	0	; () banked
 12702  01638C  11D7               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 12703  01638E  B4D8               	btfsc	status,2,c
 12704  016390  D00D               	goto	u13749
 12705                           
 12706                           ; BSR set to: 0
 12707                           ;MXK.c: 156: lQueue();
 12708  016392  D801               	call	u13748
 12709  016394  D00B               	goto	u13749
 12710  016396                     u13748:
 12711  016396  0005               	push	
 12712  016398  6EFA               	movwf	pclath,c
 12713  01639A  0100               	movlb	0	; () banked
 12714  01639C  51D5               	movf	_lQueue& (0+255),w,b	;volatile
 12715  01639E  6EFD               	movwf	tosl,c
 12716  0163A0  51D6               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 12717  0163A2  6EFE               	movwf	tosh,c
 12718  0163A4  51D7               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 12719  0163A6  6EFF               	movwf	tosu,c
 12720  0163A8  50FA               	movf	pclath,w,c
 12721  0163AA  0012               	return		;indir
 12722  0163AC                     u13749:
 12723                           
 12724                           ;MXK.c: 157: lQueue = 0;
 12725  0163AC  0E00               	movlw	0
 12726  0163AE  0100               	movlb	0	; () banked
 12727  0163B0  6FD5               	movwf	_lQueue& (0+255),b	;volatile
 12728  0163B2  0E00               	movlw	0
 12729  0163B4  0100               	movlb	0	; () banked
 12730  0163B6  6FD6               	movwf	(_lQueue+1)& (0+255),b	;volatile
 12731  0163B8  0E00               	movlw	0
 12732  0163BA  0100               	movlb	0	; () banked
 12733  0163BC  6FD7               	movwf	(_lQueue+2)& (0+255),b	;volatile
 12734                           
 12735                           ; BSR set to: 0
 12736  0163BE  0012               	return		;funcret
 12737  0163C0                     __end_of_MXK_Dequeue:
 12738                           	opt stack 0
 12739                           tosu	equ	0xFFF
 12740                           tosh	equ	0xFFE
 12741                           tosl	equ	0xFFD
 12742                           pclath	equ	0xFFA
 12743                           tblptru	equ	0xFF8
 12744                           tblptrh	equ	0xFF7
 12745                           tblptrl	equ	0xFF6
 12746                           tablat	equ	0xFF5
 12747                           prodh	equ	0xFF4
 12748                           prodl	equ	0xFF3
 12749                           intcon	equ	0xFF2
 12750                           postinc0	equ	0xFEE
 12751                           wreg	equ	0xFE8
 12752                           postdec1	equ	0xFE5
 12753                           fsr1h	equ	0xFE2
 12754                           fsr1l	equ	0xFE1
 12755                           indf2	equ	0xFDF
 12756                           postinc2	equ	0xFDE
 12757                           postdec2	equ	0xFDD
 12758                           fsr2h	equ	0xFDA
 12759                           fsr2l	equ	0xFD9
 12760                           status	equ	0xFD8
 12761                           
 12762 ;; *************** function _Motor_Step *****************
 12763 ;; Defined at:
 12764 ;;		line 75 in file "Library/Motor.c"
 12765 ;; Parameters:    Size  Location     Type
 12766 ;;		None
 12767 ;; Auto vars:     Size  Location     Type
 12768 ;;		None
 12769 ;; Return value:  Size  Location     Type
 12770 ;;                  1    wreg      void 
 12771 ;; Registers used:
 12772 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12773 ;; Tracked objects:
 12774 ;;		On entry : 0/0
 12775 ;;		On exit  : 0/0
 12776 ;;		Unchanged: 0/0
 12777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12780 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12781 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12782 ;;Total ram usage:        2 bytes
 12783 ;; Hardware stack levels used:    1
 12784 ;; Hardware stack levels required when called:   11
 12785 ;; This function calls:
 12786 ;;		_MXK_Queue
 12787 ;;		_MXK_Release
 12788 ;;		_MXK_SwitchTo
 12789 ;;		_Port_SetPin
 12790 ;;		_Timer0_Restart
 12791 ;;		_Timer0_Stop
 12792 ;; This function is called by:
 12793 ;;		_Motor_Init
 12794 ;;		_Timer0_ISR
 12795 ;;		_MXK_Dequeue
 12796 ;; This function uses a non-reentrant model
 12797 ;;
 12798                           
 12799                           	psect	text42
 12800  013C08                     __ptext42:
 12801                           	opt stack 0
 12802  013C08                     _Motor_Step:
 12803                           	opt stack 0
 12804                           
 12805                           ; BSR set to: 0
 12806                           ;Skip over the trampoline to the duplicate function for level 2
 12807  013C08  B250               	btfsc	btemp,1,c
 12808  013C0A  EFCD  F0A0         	goto	i2_Motor_Step
 12809  013C0E                     _Motor_Step$intlevel0:
 12810                           	opt stack 18
 12811                           
 12812                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 12813                           
 12814                           ;incstack = 0
 12815  013C0E  0100               	movlb	0	; () banked
 12816  013C10  EE20 F004          	lfsr	2,4
 12817  013C14  51DC               	movf	_lMotor& (0+255),w,b
 12818  013C16  26D9               	addwf	fsr2l,f,c
 12819  013C18  51DD               	movf	(_lMotor+1)& (0+255),w,b
 12820  013C1A  22DA               	addwfc	fsr2h,f,c
 12821  013C1C  50DF               	movf	indf2,w,c
 12822  013C1E  EC60  F0B1         	call	_MXK_SwitchTo
 12823  013C22  0900               	iorlw	0
 12824  013C24  B4D8               	btfsc	status,2,c
 12825  013C26  D07A               	goto	l1627
 12826                           
 12827                           ;Motor.c: 78: {
 12828                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 12829  013C28  C0DC  FFD9         	movff	_lMotor,fsr2l
 12830  013C2C  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 12831  013C30  50DE               	movf	postinc2,w,c
 12832  013C32  10DE               	iorwf	postinc2,w,c
 12833  013C34  B4D8               	btfsc	status,2,c
 12834  013C36  D06D               	goto	l1628
 12835                           
 12836                           ;Motor.c: 80: {
 12837                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 12838  013C38  C0DC  FFD9         	movff	_lMotor,fsr2l
 12839  013C3C  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 12840  013C40  0E01               	movlw	1
 12841  013C42  BEDB               	btfsc	plusw2,7,c
 12842  013C44  D026               	goto	l1629
 12843  013C46  0E01               	movlw	1
 12844  013C48  50DB               	movf	plusw2,w,c
 12845  013C4A  E103               	bnz	u11700
 12846  013C4C  04DE               	decf	postinc2,w,c
 12847  013C4E  A0D8               	btfss	status,0,c
 12848  013C50  D020               	goto	l1629
 12849  013C52                     u11700:
 12850                           
 12851                           ;Motor.c: 83: {
 12852                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 12853  013C52  C0DC  FFD9         	movff	_lMotor,fsr2l
 12854  013C56  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 12855  013C5A  28DE               	incf	postinc2,w,c
 12856  013C5C  E104               	bnz	u11710
 12857  013C5E  0E7F               	movlw	127
 12858  013C60  18DE               	xorwf	postinc2,w,c
 12859  013C62  B4D8               	btfsc	status,2,c
 12860  013C64  D007               	goto	l1630
 12861  013C66                     u11710:
 12862                           
 12863                           ;Motor.c: 85: lMotor->mDelta --;
 12864  013C66  C0DC  FFD9         	movff	_lMotor,fsr2l
 12865  013C6A  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 12866  013C6E  06DE               	decf	postinc2,f,c
 12867  013C70  0E00               	movlw	0
 12868  013C72  5ADD               	subwfb	postdec2,f,c
 12869  013C74                     l1630:
 12870                           
 12871                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 12872  013C74  0E8C               	movlw	low _PortE
 12873  013C76  0100               	movlb	0	; () banked
 12874  013C78  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12875  013C7A  0E01               	movlw	high _PortE
 12876  013C7C  0100               	movlb	0	; () banked
 12877  013C7E  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12878  013C80  0E00               	movlw	0
 12879  013C82  0100               	movlb	0	; () banked
 12880  013C84  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12881  013C86  0E01               	movlw	1
 12882  013C88  0100               	movlb	0	; () banked
 12883  013C8A  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12884  013C8C  EC62  F0A3         	call	_Port_SetPin	;wreg free
 12885                           
 12886                           ;Motor.c: 88: }
 12887  013C90  D01F               	goto	l1631
 12888  013C92                     l1629:
 12889                           
 12890                           ;Motor.c: 89: else
 12891                           ;Motor.c: 90: {
 12892                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 12893  013C92  C0DC  FFD9         	movff	_lMotor,fsr2l
 12894  013C96  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 12895  013C9A  04DE               	decf	postinc2,w,c
 12896  013C9C  E104               	bnz	u11720
 12897  013C9E  0E80               	movlw	128
 12898  013CA0  18DE               	xorwf	postinc2,w,c
 12899  013CA2  B4D8               	btfsc	status,2,c
 12900  013CA4  D007               	goto	l1632
 12901  013CA6                     u11720:
 12902                           
 12903                           ;Motor.c: 92: lMotor->mDelta ++;
 12904  013CA6  C0DC  FFD9         	movff	_lMotor,fsr2l
 12905  013CAA  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 12906  013CAE  2ADE               	incf	postinc2,f,c
 12907  013CB0  0E00               	movlw	0
 12908  013CB2  22DD               	addwfc	postdec2,f,c
 12909  013CB4                     l1632:
 12910                           
 12911                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 12912  013CB4  0E8C               	movlw	low _PortE
 12913  013CB6  0100               	movlb	0	; () banked
 12914  013CB8  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12915  013CBA  0E01               	movlw	high _PortE
 12916  013CBC  0100               	movlb	0	; () banked
 12917  013CBE  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12918  013CC0  0E00               	movlw	0
 12919  013CC2  0100               	movlb	0	; () banked
 12920  013CC4  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12921  013CC6  0E00               	movlw	0
 12922  013CC8  0100               	movlb	0	; () banked
 12923  013CCA  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12924  013CCC  EC62  F0A3         	call	_Port_SetPin	;wreg free
 12925  013CD0                     l1631:
 12926                           
 12927                           ;Motor.c: 95: }
 12928                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 12929  013CD0  0E8C               	movlw	low _PortE
 12930  013CD2  0100               	movlb	0	; () banked
 12931  013CD4  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12932  013CD6  0E01               	movlw	high _PortE
 12933  013CD8  0100               	movlb	0	; () banked
 12934  013CDA  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12935  013CDC  0E01               	movlw	1
 12936  013CDE  0100               	movlb	0	; () banked
 12937  013CE0  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12938  013CE2  0E01               	movlw	1
 12939  013CE4  0100               	movlb	0	; () banked
 12940  013CE6  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12941  013CE8  EC62  F0A3         	call	_Port_SetPin	;wreg free
 12942                           
 12943                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 12944  013CEC  0E8C               	movlw	low _PortE
 12945  013CEE  0100               	movlb	0	; () banked
 12946  013CF0  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 12947  013CF2  0E01               	movlw	high _PortE
 12948  013CF4  0100               	movlb	0	; () banked
 12949  013CF6  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12950  013CF8  0E01               	movlw	1
 12951  013CFA  0100               	movlb	0	; () banked
 12952  013CFC  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 12953  013CFE  0E00               	movlw	0
 12954  013D00  0100               	movlb	0	; () banked
 12955  013D02  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 12956  013D04  EC62  F0A3         	call	_Port_SetPin	;wreg free
 12957                           
 12958                           ;Motor.c: 101: MXK_Release();
 12959  013D08  EC5F  F0B4         	call	_MXK_Release	;wreg free
 12960                           
 12961                           ;Motor.c: 102: Timer0_Restart();
 12962  013D0C  EC20  F0B5         	call	_Timer0_Restart	;wreg free
 12963                           
 12964                           ;Motor.c: 103: return;
 12965  013D10  0012               	return	
 12966  013D12                     l1628:
 12967                           
 12968                           ;Motor.c: 104: }
 12969                           ;Motor.c: 105: MXK_Release();
 12970  013D12  EC5F  F0B4         	call	_MXK_Release	;wreg free
 12971                           
 12972                           ;Motor.c: 106: Timer0_Stop();
 12973  013D16  EC43  F0B5         	call	_Timer0_Stop	;wreg free
 12974                           
 12975                           ;Motor.c: 107: return;
 12976  013D1A  0012               	return	
 12977  013D1C                     l1627:
 12978                           
 12979                           ;Motor.c: 108: }
 12980                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 12981  013D1C  C10B  F060         	movff	_lStepFunction,MXK_Queue@pCallback
 12982  013D20  C10C  F061         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 12983  013D24  C10D  F062         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 12984  013D28  EC06  F0B5         	call	_MXK_Queue	;wreg free
 12985  013D2C  0012               	return		;funcret
 12986  013D2E                     __end_of_Motor_Step:
 12987                           	opt stack 0
 12988                           tosu	equ	0xFFF
 12989                           tosh	equ	0xFFE
 12990                           tosl	equ	0xFFD
 12991                           pclath	equ	0xFFA
 12992                           tblptru	equ	0xFF8
 12993                           tblptrh	equ	0xFF7
 12994                           tblptrl	equ	0xFF6
 12995                           tablat	equ	0xFF5
 12996                           prodh	equ	0xFF4
 12997                           prodl	equ	0xFF3
 12998                           intcon	equ	0xFF2
 12999                           postinc0	equ	0xFEE
 13000                           wreg	equ	0xFE8
 13001                           postdec1	equ	0xFE5
 13002                           fsr1h	equ	0xFE2
 13003                           fsr1l	equ	0xFE1
 13004                           indf2	equ	0xFDF
 13005                           postinc2	equ	0xFDE
 13006                           postdec2	equ	0xFDD
 13007                           plusw2	equ	0xFDB
 13008                           fsr2h	equ	0xFDA
 13009                           fsr2l	equ	0xFD9
 13010                           status	equ	0xFD8
 13011                           
 13012 ;; *************** function _Timer0_Stop *****************
 13013 ;; Defined at:
 13014 ;;		line 89 in file "Library/Timer0.c"
 13015 ;; Parameters:    Size  Location     Type
 13016 ;;		None
 13017 ;; Auto vars:     Size  Location     Type
 13018 ;;		None
 13019 ;; Return value:  Size  Location     Type
 13020 ;;                  1    wreg      void 
 13021 ;; Registers used:
 13022 ;;		None
 13023 ;; Tracked objects:
 13024 ;;		On entry : 0/0
 13025 ;;		On exit  : 0/0
 13026 ;;		Unchanged: 0/0
 13027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13031 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13032 ;;Total ram usage:        0 bytes
 13033 ;; Hardware stack levels used:    1
 13034 ;; Hardware stack levels required when called:    7
 13035 ;; This function calls:
 13036 ;;		Nothing
 13037 ;; This function is called by:
 13038 ;;		_Motor_Step
 13039 ;; This function uses a non-reentrant model
 13040 ;;
 13041                           
 13042                           	psect	text43
 13043  016A86                     __ptext43:
 13044                           	opt stack 0
 13045  016A86                     _Timer0_Stop:
 13046                           	opt stack 21
 13047                           
 13048                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 13049                           
 13050                           ;incstack = 0
 13051  016A86  9AF2               	bcf	intcon,5,c	;volatile
 13052                           
 13053                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 13054  016A88  94F2               	bcf	intcon,2,c	;volatile
 13055  016A8A  0012               	return		;funcret
 13056  016A8C                     __end_of_Timer0_Stop:
 13057                           	opt stack 0
 13058                           tosu	equ	0xFFF
 13059                           tosh	equ	0xFFE
 13060                           tosl	equ	0xFFD
 13061                           pclath	equ	0xFFA
 13062                           tblptru	equ	0xFF8
 13063                           tblptrh	equ	0xFF7
 13064                           tblptrl	equ	0xFF6
 13065                           tablat	equ	0xFF5
 13066                           prodh	equ	0xFF4
 13067                           prodl	equ	0xFF3
 13068                           intcon	equ	0xFF2
 13069                           postinc0	equ	0xFEE
 13070                           wreg	equ	0xFE8
 13071                           postdec1	equ	0xFE5
 13072                           fsr1h	equ	0xFE2
 13073                           fsr1l	equ	0xFE1
 13074                           indf2	equ	0xFDF
 13075                           postinc2	equ	0xFDE
 13076                           postdec2	equ	0xFDD
 13077                           plusw2	equ	0xFDB
 13078                           fsr2h	equ	0xFDA
 13079                           fsr2l	equ	0xFD9
 13080                           status	equ	0xFD8
 13081                           
 13082 ;; *************** function _Timer0_Restart *****************
 13083 ;; Defined at:
 13084 ;;		line 83 in file "Library/Timer0.c"
 13085 ;; Parameters:    Size  Location     Type
 13086 ;;		None
 13087 ;; Auto vars:     Size  Location     Type
 13088 ;;		None
 13089 ;; Return value:  Size  Location     Type
 13090 ;;                  1    wreg      void 
 13091 ;; Registers used:
 13092 ;;		None
 13093 ;; Tracked objects:
 13094 ;;		On entry : 0/0
 13095 ;;		On exit  : 0/0
 13096 ;;		Unchanged: 0/0
 13097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13102 ;;Total ram usage:        0 bytes
 13103 ;; Hardware stack levels used:    1
 13104 ;; Hardware stack levels required when called:    7
 13105 ;; This function calls:
 13106 ;;		Nothing
 13107 ;; This function is called by:
 13108 ;;		_Motor_Step
 13109 ;; This function uses a non-reentrant model
 13110 ;;
 13111                           
 13112                           	psect	text44
 13113  016A40                     __ptext44:
 13114                           	opt stack 0
 13115  016A40                     _Timer0_Restart:
 13116                           	opt stack 21
 13117                           
 13118                           ;Timer0.c: 85: TMR0 = COUNTER;
 13119                           
 13120                           ;incstack = 0
 13121  016A40  C029  FFD6         	movff	_COUNTER,4054	;volatile
 13122  016A44  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 13123                           
 13124                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 13125  016A48  8AF2               	bsf	intcon,5,c	;volatile
 13126  016A4A  0012               	return		;funcret
 13127  016A4C                     __end_of_Timer0_Restart:
 13128                           	opt stack 0
 13129                           tosu	equ	0xFFF
 13130                           tosh	equ	0xFFE
 13131                           tosl	equ	0xFFD
 13132                           pclath	equ	0xFFA
 13133                           tblptru	equ	0xFF8
 13134                           tblptrh	equ	0xFF7
 13135                           tblptrl	equ	0xFF6
 13136                           tablat	equ	0xFF5
 13137                           prodh	equ	0xFF4
 13138                           prodl	equ	0xFF3
 13139                           intcon	equ	0xFF2
 13140                           postinc0	equ	0xFEE
 13141                           wreg	equ	0xFE8
 13142                           postdec1	equ	0xFE5
 13143                           fsr1h	equ	0xFE2
 13144                           fsr1l	equ	0xFE1
 13145                           indf2	equ	0xFDF
 13146                           postinc2	equ	0xFDE
 13147                           postdec2	equ	0xFDD
 13148                           plusw2	equ	0xFDB
 13149                           fsr2h	equ	0xFDA
 13150                           fsr2l	equ	0xFD9
 13151                           status	equ	0xFD8
 13152                           
 13153 ;; *************** function _MXK_SwitchTo *****************
 13154 ;; Defined at:
 13155 ;;		line 105 in file "Library/MXK.c"
 13156 ;; Parameters:    Size  Location     Type
 13157 ;;  pModule         1    wreg     enum E6927
 13158 ;; Auto vars:     Size  Location     Type
 13159 ;;  pModule         1    7[BANK0 ] enum E6927
 13160 ;;  CUR             1    6[BANK0 ] unsigned char 
 13161 ;; Return value:  Size  Location     Type
 13162 ;;                  1    wreg      unsigned char 
 13163 ;; Registers used:
 13164 ;;		wreg, status,2, status,0, cstack
 13165 ;; Tracked objects:
 13166 ;;		On entry : 0/0
 13167 ;;		On exit  : 0/0
 13168 ;;		Unchanged: 0/0
 13169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13171 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13173 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13174 ;;Total ram usage:        2 bytes
 13175 ;; Hardware stack levels used:    1
 13176 ;; Hardware stack levels required when called:    8
 13177 ;; This function calls:
 13178 ;;		_delay_us
 13179 ;; This function is called by:
 13180 ;;		_Motor_Step
 13181 ;; This function uses a non-reentrant model
 13182 ;;
 13183                           
 13184                           	psect	text45
 13185  0162C0                     __ptext45:
 13186                           	opt stack 0
 13187  0162C0                     _MXK_SwitchTo:
 13188                           	opt stack 20
 13189                           
 13190                           ;incstack = 0
 13191                           ;MXK_SwitchTo@pModule stored from wreg
 13192  0162C0  0100               	movlb	0	; () banked
 13193  0162C2  6F67               	movwf	MXK_SwitchTo@pModule& (0+255),b
 13194                           
 13195                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 13196  0162C4  5086               	movf	3974,w,c	;volatile
 13197  0162C6  0B0F               	andlw	15
 13198  0162C8  0100               	movlb	0	; () banked
 13199  0162CA  6F66               	movwf	MXK_SwitchTo@CUR& (0+255),b
 13200                           
 13201                           ; BSR set to: 0
 13202                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 13203  0162CC  504A               	movf	_Bus_State,w,c
 13204  0162CE  A4D8               	btfss	status,2,c
 13205  0162D0  D002               	goto	l1730
 13206                           
 13207                           ; BSR set to: 0
 13208                           ;MXK.c: 110: return 0;
 13209  0162D2  0E00               	movlw	0
 13210                           
 13211                           ; BSR set to: 0
 13212  0162D4  0012               	return	
 13213  0162D6                     l1730:
 13214                           
 13215                           ; BSR set to: 0
 13216                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 13217                           
 13218                           ; BSR set to: 0
 13219  0162D6  0E00               	movlw	0
 13220  0162D8  6E4A               	movwf	_Bus_State,c
 13221                           
 13222                           ; BSR set to: 0
 13223                           ;MXK.c: 114: if (CUR != pModule)
 13224  0162DA  0100               	movlb	0	; () banked
 13225  0162DC  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 13226  0162DE  0100               	movlb	0	; () banked
 13227  0162E0  1966               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 13228  0162E2  B4D8               	btfsc	status,2,c
 13229  0162E4  D00C               	goto	l1732
 13230                           
 13231                           ; BSR set to: 0
 13232                           ;MXK.c: 115: {
 13233                           ;MXK.c: 116: PORTG &= ~(0xF);
 13234  0162E6  0EF0               	movlw	240
 13235  0162E8  1686               	andwf	3974,f,c	;volatile
 13236                           
 13237                           ;MXK.c: 117: PORTG |= pModule;
 13238  0162EA  0100               	movlb	0	; () banked
 13239  0162EC  5167               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 13240  0162EE  1286               	iorwf	3974,f,c	;volatile
 13241                           
 13242                           ; BSR set to: 0
 13243                           ;MXK.c: 120: delay_us(10);
 13244  0162F0  0E00               	movlw	0
 13245  0162F2  0100               	movlb	0	; () banked
 13246  0162F4  6F61               	movwf	(delay_us@us+1)& (0+255),b
 13247  0162F6  0E0A               	movlw	10
 13248  0162F8  6F60               	movwf	delay_us@us& (0+255),b
 13249  0162FA  ECA3  F0AF         	call	_delay_us	;wreg free
 13250  0162FE                     l1732:
 13251                           
 13252                           ;MXK.c: 121: }
 13253                           ;MXK.c: 122: return 1;
 13254  0162FE  0E01               	movlw	1
 13255  016300  0012               	return	
 13256  016302                     __end_of_MXK_SwitchTo:
 13257                           	opt stack 0
 13258                           tosu	equ	0xFFF
 13259                           tosh	equ	0xFFE
 13260                           tosl	equ	0xFFD
 13261                           pclath	equ	0xFFA
 13262                           tblptru	equ	0xFF8
 13263                           tblptrh	equ	0xFF7
 13264                           tblptrl	equ	0xFF6
 13265                           tablat	equ	0xFF5
 13266                           prodh	equ	0xFF4
 13267                           prodl	equ	0xFF3
 13268                           intcon	equ	0xFF2
 13269                           postinc0	equ	0xFEE
 13270                           wreg	equ	0xFE8
 13271                           postdec1	equ	0xFE5
 13272                           fsr1h	equ	0xFE2
 13273                           fsr1l	equ	0xFE1
 13274                           indf2	equ	0xFDF
 13275                           postinc2	equ	0xFDE
 13276                           postdec2	equ	0xFDD
 13277                           plusw2	equ	0xFDB
 13278                           fsr2h	equ	0xFDA
 13279                           fsr2l	equ	0xFD9
 13280                           status	equ	0xFD8
 13281                           
 13282 ;; *************** function _MXK_Release *****************
 13283 ;; Defined at:
 13284 ;;		line 130 in file "Library/MXK.c"
 13285 ;; Parameters:    Size  Location     Type
 13286 ;;		None
 13287 ;; Auto vars:     Size  Location     Type
 13288 ;;		None
 13289 ;; Return value:  Size  Location     Type
 13290 ;;                  1    wreg      unsigned char 
 13291 ;; Registers used:
 13292 ;;		wreg, status,2, status,0
 13293 ;; Tracked objects:
 13294 ;;		On entry : 0/0
 13295 ;;		On exit  : 0/0
 13296 ;;		Unchanged: 0/0
 13297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13298 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13301 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13302 ;;Total ram usage:        0 bytes
 13303 ;; Hardware stack levels used:    1
 13304 ;; Hardware stack levels required when called:    7
 13305 ;; This function calls:
 13306 ;;		Nothing
 13307 ;; This function is called by:
 13308 ;;		_Motor_Step
 13309 ;;		_main
 13310 ;; This function uses a non-reentrant model
 13311 ;;
 13312                           
 13313                           	psect	text46
 13314  0168BE                     __ptext46:
 13315                           	opt stack 0
 13316  0168BE                     _MXK_Release:
 13317                           	opt stack 23
 13318                           
 13319                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 13320                           
 13321                           ;incstack = 0
 13322  0168BE  0E01               	movlw	1
 13323  0168C0  6E4A               	movwf	_Bus_State,c
 13324                           
 13325                           ;MXK.c: 134: if (lQueue != 0)
 13326  0168C2  0100               	movlb	0	; () banked
 13327  0168C4  51D5               	movf	_lQueue& (0+255),w,b	;volatile
 13328  0168C6  0100               	movlb	0	; () banked
 13329  0168C8  11D6               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 13330  0168CA  0100               	movlb	0	; () banked
 13331  0168CC  11D7               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 13332  0168CE  B4D8               	btfsc	status,2,c
 13333  0168D0  D002               	goto	l1735
 13334                           
 13335                           ; BSR set to: 0
 13336                           ;MXK.c: 135: return 1;
 13337  0168D2  0E01               	movlw	1
 13338                           
 13339                           ; BSR set to: 0
 13340  0168D4  0012               	return	
 13341  0168D6                     l1735:
 13342                           
 13343                           ; BSR set to: 0
 13344                           ;MXK.c: 137: return 0;
 13345                           
 13346                           ; BSR set to: 0
 13347  0168D6  0E00               	movlw	0
 13348  0168D8  0012               	return	
 13349  0168DA                     __end_of_MXK_Release:
 13350                           	opt stack 0
 13351                           tosu	equ	0xFFF
 13352                           tosh	equ	0xFFE
 13353                           tosl	equ	0xFFD
 13354                           pclath	equ	0xFFA
 13355                           tblptru	equ	0xFF8
 13356                           tblptrh	equ	0xFF7
 13357                           tblptrl	equ	0xFF6
 13358                           tablat	equ	0xFF5
 13359                           prodh	equ	0xFF4
 13360                           prodl	equ	0xFF3
 13361                           intcon	equ	0xFF2
 13362                           postinc0	equ	0xFEE
 13363                           wreg	equ	0xFE8
 13364                           postdec1	equ	0xFE5
 13365                           fsr1h	equ	0xFE2
 13366                           fsr1l	equ	0xFE1
 13367                           indf2	equ	0xFDF
 13368                           postinc2	equ	0xFDE
 13369                           postdec2	equ	0xFDD
 13370                           plusw2	equ	0xFDB
 13371                           fsr2h	equ	0xFDA
 13372                           fsr2l	equ	0xFD9
 13373                           status	equ	0xFD8
 13374                           
 13375 ;; *************** function _MXK_Queue *****************
 13376 ;; Defined at:
 13377 ;;		line 144 in file "Library/MXK.c"
 13378 ;; Parameters:    Size  Location     Type
 13379 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 13380 ;;		 -> Absolute function(1), Motor_Step(1), 
 13381 ;; Auto vars:     Size  Location     Type
 13382 ;;		None
 13383 ;; Return value:  Size  Location     Type
 13384 ;;                  1    wreg      void 
 13385 ;; Registers used:
 13386 ;;		wreg, status,2, status,0
 13387 ;; Tracked objects:
 13388 ;;		On entry : 0/0
 13389 ;;		On exit  : 0/0
 13390 ;;		Unchanged: 0/0
 13391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13392 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13396 ;;Total ram usage:        3 bytes
 13397 ;; Hardware stack levels used:    1
 13398 ;; Hardware stack levels required when called:    7
 13399 ;; This function calls:
 13400 ;;		Nothing
 13401 ;; This function is called by:
 13402 ;;		_Motor_Step
 13403 ;; This function uses a non-reentrant model
 13404 ;;
 13405                           
 13406                           	psect	text47
 13407  016A0C                     __ptext47:
 13408                           	opt stack 0
 13409  016A0C                     _MXK_Queue:
 13410                           	opt stack 21
 13411                           
 13412                           ;MXK.c: 146: lQueue = pCallback;
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;incstack = 0
 13416  016A0C  C060  F0D5         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 13417  016A10  C061  F0D6         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 13418  016A14  C062  F0D7         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 13419  016A18  0012               	return		;funcret
 13420  016A1A                     __end_of_MXK_Queue:
 13421                           	opt stack 0
 13422                           tosu	equ	0xFFF
 13423                           tosh	equ	0xFFE
 13424                           tosl	equ	0xFFD
 13425                           pclath	equ	0xFFA
 13426                           tblptru	equ	0xFF8
 13427                           tblptrh	equ	0xFF7
 13428                           tblptrl	equ	0xFF6
 13429                           tablat	equ	0xFF5
 13430                           prodh	equ	0xFF4
 13431                           prodl	equ	0xFF3
 13432                           intcon	equ	0xFF2
 13433                           postinc0	equ	0xFEE
 13434                           wreg	equ	0xFE8
 13435                           postdec1	equ	0xFE5
 13436                           fsr1h	equ	0xFE2
 13437                           fsr1l	equ	0xFE1
 13438                           indf2	equ	0xFDF
 13439                           postinc2	equ	0xFDE
 13440                           postdec2	equ	0xFDD
 13441                           plusw2	equ	0xFDB
 13442                           fsr2h	equ	0xFDA
 13443                           fsr2l	equ	0xFD9
 13444                           status	equ	0xFD8
 13445                           
 13446 ;; *************** function _MXK_BlockSwitchTo *****************
 13447 ;; Defined at:
 13448 ;;		line 82 in file "Library/MXK.c"
 13449 ;; Parameters:    Size  Location     Type
 13450 ;;  pModule         1    wreg     enum E6927
 13451 ;; Auto vars:     Size  Location     Type
 13452 ;;  pModule         1    7[BANK0 ] enum E6927
 13453 ;;  CUR             1    6[BANK0 ] unsigned char 
 13454 ;; Return value:  Size  Location     Type
 13455 ;;                  1    wreg      unsigned char 
 13456 ;; Registers used:
 13457 ;;		wreg, status,2, status,0, cstack
 13458 ;; Tracked objects:
 13459 ;;		On entry : 0/0
 13460 ;;		On exit  : 0/0
 13461 ;;		Unchanged: 0/0
 13462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13464 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13466 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13467 ;;Total ram usage:        2 bytes
 13468 ;; Hardware stack levels used:    1
 13469 ;; Hardware stack levels required when called:    8
 13470 ;; This function calls:
 13471 ;;		_delay_us
 13472 ;; This function is called by:
 13473 ;;		_main
 13474 ;; This function uses a non-reentrant model
 13475 ;;
 13476                           
 13477                           	psect	text48
 13478  0163C0                     __ptext48:
 13479                           	opt stack 0
 13480  0163C0                     _MXK_BlockSwitchTo:
 13481                           	opt stack 22
 13482                           
 13483                           ;incstack = 0
 13484                           ;MXK_BlockSwitchTo@pModule stored from wreg
 13485  0163C0  0100               	movlb	0	; () banked
 13486  0163C2  6F67               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 13487                           
 13488                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 13489  0163C4  5086               	movf	3974,w,c	;volatile
 13490  0163C6  0B0F               	andlw	15
 13491  0163C8  0100               	movlb	0	; () banked
 13492  0163CA  6F66               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 13493  0163CC                     
 13494                           ; BSR set to: 0
 13495                           
 13496                           ; BSR set to: 0
 13497  0163CC  504A               	movf	_Bus_State,w,c
 13498  0163CE  B4D8               	btfsc	status,2,c
 13499  0163D0  D7FD               	goto	l1724
 13500                           
 13501                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 13502  0163D2  0E00               	movlw	0
 13503  0163D4  6E4A               	movwf	_Bus_State,c
 13504                           
 13505                           ;MXK.c: 90: if (CUR != pModule)
 13506  0163D6  0100               	movlb	0	; () banked
 13507  0163D8  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 13508  0163DA  0100               	movlb	0	; () banked
 13509  0163DC  1966               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 13510  0163DE  B4D8               	btfsc	status,2,c
 13511  0163E0  D00C               	goto	l1726
 13512                           
 13513                           ; BSR set to: 0
 13514                           ;MXK.c: 91: {
 13515                           ;MXK.c: 92: PORTG &= ~(0xF);
 13516  0163E2  0EF0               	movlw	240
 13517  0163E4  1686               	andwf	3974,f,c	;volatile
 13518                           
 13519                           ;MXK.c: 93: PORTG |= pModule;
 13520  0163E6  0100               	movlb	0	; () banked
 13521  0163E8  5167               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 13522  0163EA  1286               	iorwf	3974,f,c	;volatile
 13523                           
 13524                           ; BSR set to: 0
 13525                           ;MXK.c: 96: delay_us(10);
 13526  0163EC  0E00               	movlw	0
 13527  0163EE  0100               	movlb	0	; () banked
 13528  0163F0  6F61               	movwf	(delay_us@us+1)& (0+255),b
 13529  0163F2  0E0A               	movlw	10
 13530  0163F4  6F60               	movwf	delay_us@us& (0+255),b
 13531  0163F6  ECA3  F0AF         	call	_delay_us	;wreg free
 13532  0163FA                     l1726:
 13533                           
 13534                           ;MXK.c: 97: }
 13535                           ;MXK.c: 98: return 1;
 13536  0163FA  0E01               	movlw	1
 13537  0163FC  0012               	return	
 13538  0163FE                     __end_of_MXK_BlockSwitchTo:
 13539                           	opt stack 0
 13540                           tosu	equ	0xFFF
 13541                           tosh	equ	0xFFE
 13542                           tosl	equ	0xFFD
 13543                           pclath	equ	0xFFA
 13544                           tblptru	equ	0xFF8
 13545                           tblptrh	equ	0xFF7
 13546                           tblptrl	equ	0xFF6
 13547                           tablat	equ	0xFF5
 13548                           prodh	equ	0xFF4
 13549                           prodl	equ	0xFF3
 13550                           intcon	equ	0xFF2
 13551                           postinc0	equ	0xFEE
 13552                           wreg	equ	0xFE8
 13553                           postdec1	equ	0xFE5
 13554                           fsr1h	equ	0xFE2
 13555                           fsr1l	equ	0xFE1
 13556                           indf2	equ	0xFDF
 13557                           postinc2	equ	0xFDE
 13558                           postdec2	equ	0xFDD
 13559                           plusw2	equ	0xFDB
 13560                           fsr2h	equ	0xFDA
 13561                           fsr2l	equ	0xFD9
 13562                           status	equ	0xFD8
 13563                           
 13564 ;; *************** function _delay_us *****************
 13565 ;; Defined at:
 13566 ;;		line 255 in file "Library/Types.c"
 13567 ;; Parameters:    Size  Location     Type
 13568 ;;  us              2    0[BANK0 ] unsigned short 
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  u               4    2[BANK0 ] unsigned long 
 13571 ;; Return value:  Size  Location     Type
 13572 ;;                  1    wreg      void 
 13573 ;; Registers used:
 13574 ;;		wreg, status,2, status,0
 13575 ;; Tracked objects:
 13576 ;;		On entry : 0/0
 13577 ;;		On exit  : 0/0
 13578 ;;		Unchanged: 0/0
 13579 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13580 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13581 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13583 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13584 ;;Total ram usage:        6 bytes
 13585 ;; Hardware stack levels used:    1
 13586 ;; Hardware stack levels required when called:    7
 13587 ;; This function calls:
 13588 ;;		Nothing
 13589 ;; This function is called by:
 13590 ;;		_MXK_BlockSwitchTo
 13591 ;;		_MXK_SwitchTo
 13592 ;; This function uses a non-reentrant model
 13593 ;;
 13594                           
 13595                           	psect	text49
 13596  015F46                     __ptext49:
 13597                           	opt stack 0
 13598  015F46                     _delay_us:
 13599                           	opt stack 20
 13600                           
 13601                           ;Types.c: 256: unsigned long u;
 13602                           ;Types.c: 257: while (us--) {
 13603                           
 13604                           ;incstack = 0
 13605  015F46  D01C               	goto	u9680
 13606  015F48                     l12260:
 13607                           
 13608                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 13609  015F48  0E00               	movlw	0
 13610  015F4A  0100               	movlb	0	; () banked
 13611  015F4C  6F62               	movwf	delay_us@u& (0+255),b
 13612  015F4E  0E00               	movlw	0
 13613  015F50  6F63               	movwf	(delay_us@u+1)& (0+255),b
 13614  015F52  0E00               	movlw	0
 13615  015F54  6F64               	movwf	(delay_us@u+2)& (0+255),b
 13616  015F56  0E00               	movlw	0
 13617  015F58  6F65               	movwf	(delay_us@u+3)& (0+255),b
 13618  015F5A                     l12262:
 13619                           
 13620                           ; BSR set to: 0
 13621  015F5A  0100               	movlb	0	; () banked
 13622  015F5C  5162               	movf	delay_us@u& (0+255),w,b
 13623  015F5E  0100               	movlb	0	; () banked
 13624  015F60  1163               	iorwf	(delay_us@u+1)& (0+255),w,b
 13625  015F62  0100               	movlb	0	; () banked
 13626  015F64  1164               	iorwf	(delay_us@u+2)& (0+255),w,b
 13627  015F66  0100               	movlb	0	; () banked
 13628  015F68  1165               	iorwf	(delay_us@u+3)& (0+255),w,b
 13629  015F6A  A4D8               	btfss	status,2,c
 13630  015F6C  D009               	goto	u9680
 13631                           
 13632                           ; BSR set to: 0
 13633                           
 13634                           ; BSR set to: 0
 13635  015F6E  F000               	nop		; ;# 
 13636  015F70  0E01               	movlw	1
 13637  015F72  0100               	movlb	0	; () banked
 13638  015F74  2762               	addwf	delay_us@u& (0+255),f,b
 13639  015F76  0E00               	movlw	0
 13640  015F78  2363               	addwfc	(delay_us@u+1)& (0+255),f,b
 13641  015F7A  2364               	addwfc	(delay_us@u+2)& (0+255),f,b
 13642  015F7C  2365               	addwfc	(delay_us@u+3)& (0+255),f,b
 13643  015F7E  D7ED               	goto	l12262
 13644  015F80                     u9680:
 13645                           
 13646                           ; BSR set to: 0
 13647                           
 13648                           ; BSR set to: 0
 13649  015F80  0100               	movlb	0	; () banked
 13650  015F82  0760               	decf	delay_us@us& (0+255),f,b
 13651  015F84  A0D8               	btfss	status,0,c
 13652  015F86  0761               	decf	(delay_us@us+1)& (0+255),f,b
 13653  015F88  0100               	movlb	0	; () banked
 13654  015F8A  2960               	incf	delay_us@us& (0+255),w,b
 13655  015F8C  E1DD               	bnz	l12260
 13656  015F8E  0100               	movlb	0	; () banked
 13657  015F90  2961               	incf	(delay_us@us+1)& (0+255),w,b
 13658  015F92  B4D8               	btfsc	status,2,c
 13659  015F94  0012               	return	
 13660  015F96  D7D8               	goto	l832
 13661  015F98                     __end_of_delay_us:
 13662                           	opt stack 0
 13663                           tosu	equ	0xFFF
 13664                           tosh	equ	0xFFE
 13665                           tosl	equ	0xFFD
 13666                           pclath	equ	0xFFA
 13667                           tblptru	equ	0xFF8
 13668                           tblptrh	equ	0xFF7
 13669                           tblptrl	equ	0xFF6
 13670                           tablat	equ	0xFF5
 13671                           prodh	equ	0xFF4
 13672                           prodl	equ	0xFF3
 13673                           intcon	equ	0xFF2
 13674                           postinc0	equ	0xFEE
 13675                           wreg	equ	0xFE8
 13676                           postdec1	equ	0xFE5
 13677                           fsr1h	equ	0xFE2
 13678                           fsr1l	equ	0xFE1
 13679                           indf2	equ	0xFDF
 13680                           postinc2	equ	0xFDE
 13681                           postdec2	equ	0xFDD
 13682                           plusw2	equ	0xFDB
 13683                           fsr2h	equ	0xFDA
 13684                           fsr2l	equ	0xFD9
 13685                           status	equ	0xFD8
 13686                           
 13687 ;; *************** function _LCD_Init *****************
 13688 ;; Defined at:
 13689 ;;		line 172 in file "Library/LCD.c"
 13690 ;; Parameters:    Size  Location     Type
 13691 ;;		None
 13692 ;; Auto vars:     Size  Location     Type
 13693 ;;  i               2   55[BANK0 ] unsigned short 
 13694 ;; Return value:  Size  Location     Type
 13695 ;;                  1    wreg      void 
 13696 ;; Registers used:
 13697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13698 ;; Tracked objects:
 13699 ;;		On entry : 0/0
 13700 ;;		On exit  : 0/0
 13701 ;;		Unchanged: 0/0
 13702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13704 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13706 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13707 ;;Total ram usage:        4 bytes
 13708 ;; Hardware stack levels used:    1
 13709 ;; Hardware stack levels required when called:   15
 13710 ;; This function calls:
 13711 ;;		_Configure_GPIOs
 13712 ;;		_LCD_Fill
 13713 ;;		_LCD_Write
 13714 ;;		_Set_Rotation
 13715 ;;		_delay_ms
 13716 ;; This function is called by:
 13717 ;;		_main
 13718 ;; This function uses a non-reentrant model
 13719 ;;
 13720                           
 13721                           	psect	text50
 13722  013670                     __ptext50:
 13723                           	opt stack 0
 13724  013670                     _LCD_Init:
 13725                           	opt stack 15
 13726                           
 13727                           ;LCD.c: 174: UINT16 i;
 13728                           ;LCD.c: 175: Configure_GPIOs();
 13729                           
 13730                           ; BSR set to: 0
 13731                           ;incstack = 0
 13732  013670  EC49  F0AD         	call	_Configure_GPIOs	;wreg free
 13733                           
 13734                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 13735  013674  0E00               	movlw	0
 13736  013676  0100               	movlb	0	; () banked
 13737  013678  6F98               	movwf	(LCD_Init@i+1)& (0+255),b
 13738  01367A  0E00               	movlw	0
 13739  01367C  6F97               	movwf	LCD_Init@i& (0+255),b
 13740                           
 13741                           ; BSR set to: 0
 13742  01367E  0100               	movlb	0	; () banked
 13743  013680  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 13744  013682  E106               	bnz	u11880
 13745  013684  0E59               	movlw	89
 13746  013686  0100               	movlb	0	; () banked
 13747  013688  5D97               	subwf	LCD_Init@i& (0+255),w,b
 13748  01368A  B0D8               	btfsc	status,0,c
 13749  01368C  D08B               	goto	u11920
 13750  01368E  D001               	goto	l85
 13751  013690                     u11880:
 13752                           
 13753                           ; BSR set to: 0
 13754  013690  D089               	goto	u11920
 13755  013692                     l85:
 13756                           
 13757                           ; BSR set to: 0
 13758                           ;LCD.c: 178: {
 13759                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 13760                           
 13761                           ; BSR set to: 0
 13762  013692  90D8               	bcf	status,0,c
 13763  013694  0100               	movlb	0	; () banked
 13764  013696  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13765  013698  6EF6               	movwf	tblptrl,c
 13766  01369A  0100               	movlb	0	; () banked
 13767  01369C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13768  01369E  6EF7               	movwf	tblptrh,c
 13769  0136A0  0E37               	movlw	low _InitList
 13770  0136A2  26F6               	addwf	tblptrl,f,c
 13771  0136A4  0EFC               	movlw	high _InitList
 13772  0136A6  22F7               	addwfc	tblptrh,f,c
 13773  0136A8                     	if	1	;There are 3 active tblptr bytes
 13774  0136A8  6AF8               	clrf	tblptru,c
 13775  0136AA  0E00               	movlw	low (__mediumconst shr (0+16))
 13776  0136AC  22F8               	addwfc	tblptru,f,c
 13777  0136AE                     	endif
 13778  0136AE  0009               	tblrd		*+
 13779  0136B0  0E80               	movlw	128
 13780  0136B2  18F5               	xorwf	tablat,w,c
 13781  0136B4  0009               	tblrd		*+
 13782  0136B6  10F5               	iorwf	tablat,w,c
 13783  0136B8  A4D8               	btfss	status,2,c
 13784  0136BA  D022               	goto	l87
 13785                           
 13786                           ; BSR set to: 0
 13787  0136BC  0100               	movlb	0	; () banked
 13788  0136BE  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 13789  0136C0  E11F               	bnz	l14122
 13790  0136C2  0E58               	movlw	88
 13791  0136C4  0100               	movlb	0	; () banked
 13792  0136C6  5D97               	subwf	LCD_Init@i& (0+255),w,b
 13793  0136C8  B0D8               	btfsc	status,0,c
 13794  0136CA  D01A               	goto	l87
 13795                           
 13796                           ; BSR set to: 0
 13797                           ;LCD.c: 180: delay_ms(InitList[++i]);
 13798  0136CC  0100               	movlb	0	; () banked
 13799  0136CE  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 13800  0136D0  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 13801  0136D2  90D8               	bcf	status,0,c
 13802  0136D4  0100               	movlb	0	; () banked
 13803  0136D6  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13804  0136D8  6EF6               	movwf	tblptrl,c
 13805  0136DA  0100               	movlb	0	; () banked
 13806  0136DC  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13807  0136DE  6EF7               	movwf	tblptrh,c
 13808  0136E0  0E37               	movlw	low _InitList
 13809  0136E2  26F6               	addwf	tblptrl,f,c
 13810  0136E4  0EFC               	movlw	high _InitList
 13811  0136E6  22F7               	addwfc	tblptrh,f,c
 13812  0136E8                     	if	1	;There are 3 active tblptr bytes
 13813  0136E8  6AF8               	clrf	tblptru,c
 13814  0136EA  0E00               	movlw	low (__mediumconst shr (0+16))
 13815  0136EC  22F8               	addwfc	tblptru,f,c
 13816  0136EE                     	endif
 13817  0136EE  0009               	tblrd		*+
 13818  0136F0  CFF5 F060          	movff	tablat,delay_ms@ms
 13819  0136F4  000A               	tblrd		*-
 13820  0136F6  CFF5 F061          	movff	tablat,delay_ms@ms+1
 13821  0136FA  ECB7  F0AD         	call	_delay_ms	;wreg free
 13822  0136FE  D04B               	goto	l90
 13823  013700                     l87:
 13824  013700                     l14122:
 13825                           
 13826                           ;LCD.c: 181: else
 13827                           ;LCD.c: 182: {
 13828                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 13829  013700  90D8               	bcf	status,0,c
 13830  013702  0100               	movlb	0	; () banked
 13831  013704  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13832  013706  6EF6               	movwf	tblptrl,c
 13833  013708  0100               	movlb	0	; () banked
 13834  01370A  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13835  01370C  6EF7               	movwf	tblptrh,c
 13836  01370E  0E37               	movlw	low _InitList
 13837  013710  26F6               	addwf	tblptrl,f,c
 13838  013712  0EFC               	movlw	high _InitList
 13839  013714  22F7               	addwfc	tblptrh,f,c
 13840  013716                     	if	1	;There are 3 active tblptr bytes
 13841  013716  6AF8               	clrf	tblptru,c
 13842  013718  0E00               	movlw	low (__mediumconst shr (0+16))
 13843  01371A  22F8               	addwfc	tblptru,f,c
 13844  01371C                     	endif
 13845  01371C  0009               	tblrd		*+
 13846  01371E  0E00               	movlw	0
 13847  013720  5EF5               	subwf	tablat,f,c
 13848  013722  0009               	tblrd		*+
 13849  013724  0E01               	movlw	1
 13850  013726  5AF5               	subwfb	tablat,f,c
 13851  013728  A0D8               	btfss	status,0,c
 13852  01372A  D020               	goto	l89
 13853                           
 13854                           ; BSR set to: 0
 13855  01372C  0E00               	movlw	0
 13856  01372E  0100               	movlb	0	; () banked
 13857  013730  6F63               	movwf	LCD_Write@mode& (0+255),b
 13858  013732  90D8               	bcf	status,0,c
 13859  013734  0100               	movlb	0	; () banked
 13860  013736  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13861  013738  6EF6               	movwf	tblptrl,c
 13862  01373A  0100               	movlb	0	; () banked
 13863  01373C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13864  01373E  6EF7               	movwf	tblptrh,c
 13865  013740  0E37               	movlw	low _InitList
 13866  013742  26F6               	addwf	tblptrl,f,c
 13867  013744  0EFC               	movlw	high _InitList
 13868  013746  22F7               	addwfc	tblptrh,f,c
 13869  013748                     	if	1	;There are 3 active tblptr bytes
 13870  013748  6AF8               	clrf	tblptru,c
 13871  01374A  0E00               	movlw	low (__mediumconst shr (0+16))
 13872  01374C  22F8               	addwfc	tblptru,f,c
 13873  01374E                     	endif
 13874  01374E  0009               	tblrd		*+
 13875  013750  CFF5 F095          	movff	tablat,??_LCD_Init
 13876  013754  0009               	tblrd		*+
 13877  013756  CFF5 F096          	movff	tablat,??_LCD_Init+1
 13878  01375A  C096  F095         	movff	??_LCD_Init+1,??_LCD_Init
 13879  01375E  0100               	movlb	0	; () banked
 13880  013760  6B96               	clrf	(??_LCD_Init+1)& (0+255),b
 13881  013762  0100               	movlb	0	; () banked
 13882  013764  5195               	movf	??_LCD_Init& (0+255),w,b
 13883  013766  ECE5  F0B3         	call	_LCD_Write
 13884  01376A  D015               	goto	l90
 13885  01376C                     l89:
 13886                           
 13887                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 13888  01376C  0E01               	movlw	1
 13889  01376E  0100               	movlb	0	; () banked
 13890  013770  6F63               	movwf	LCD_Write@mode& (0+255),b
 13891  013772  90D8               	bcf	status,0,c
 13892  013774  0100               	movlb	0	; () banked
 13893  013776  3597               	rlcf	LCD_Init@i& (0+255),w,b
 13894  013778  6EF6               	movwf	tblptrl,c
 13895  01377A  0100               	movlb	0	; () banked
 13896  01377C  3598               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 13897  01377E  6EF7               	movwf	tblptrh,c
 13898  013780  0E37               	movlw	low _InitList
 13899  013782  26F6               	addwf	tblptrl,f,c
 13900  013784  0EFC               	movlw	high _InitList
 13901  013786  22F7               	addwfc	tblptrh,f,c
 13902  013788                     	if	1	;There are 3 active tblptr bytes
 13903  013788  6AF8               	clrf	tblptru,c
 13904  01378A  0E00               	movlw	low (__mediumconst shr (0+16))
 13905  01378C  22F8               	addwfc	tblptru,f,c
 13906  01378E                     	endif
 13907  01378E  0008               	tblrd		*
 13908  013790  50F5               	movf	tablat,w,c
 13909  013792  ECE5  F0B3         	call	_LCD_Write
 13910  013796                     l90:
 13911  013796  0100               	movlb	0	; () banked
 13912  013798  4B97               	infsnz	LCD_Init@i& (0+255),f,b
 13913  01379A  2B98               	incf	(LCD_Init@i+1)& (0+255),f,b
 13914                           
 13915                           ; BSR set to: 0
 13916  01379C  0100               	movlb	0	; () banked
 13917  01379E  5198               	movf	(LCD_Init@i+1)& (0+255),w,b
 13918  0137A0  E101               	bnz	l14132
 13919  0137A2  D770               	goto	L10
 13920  0137A4                     u11920:
 13921  0137A4                     l14132:
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;LCD.c: 185: }
 13925                           ;LCD.c: 186: }
 13926                           ;LCD.c: 187: delay_ms(100);
 13927  0137A4  0E00               	movlw	0
 13928  0137A6  0100               	movlb	0	; () banked
 13929  0137A8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13930  0137AA  0E64               	movlw	100
 13931  0137AC  6F60               	movwf	delay_ms@ms& (0+255),b
 13932  0137AE  ECB7  F0AD         	call	_delay_ms	;wreg free
 13933                           
 13934                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 13935  0137B2  0E00               	movlw	0
 13936  0137B4  0100               	movlb	0	; () banked
 13937  0137B6  6F63               	movwf	LCD_Write@mode& (0+255),b
 13938  0137B8  0E29               	movlw	41
 13939  0137BA  ECE5  F0B3         	call	_LCD_Write
 13940                           
 13941                           ;LCD.c: 189: Set_Rotation(1);
 13942  0137BE  0E01               	movlw	1
 13943  0137C0  EC87  F0A9         	call	_Set_Rotation
 13944                           
 13945                           ;LCD.c: 191: delay_ms(100);
 13946  0137C4  0E00               	movlw	0
 13947  0137C6  0100               	movlb	0	; () banked
 13948  0137C8  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 13949  0137CA  0E64               	movlw	100
 13950  0137CC  6F60               	movwf	delay_ms@ms& (0+255),b
 13951  0137CE  ECB7  F0AD         	call	_delay_ms	;wreg free
 13952                           
 13953                           ;LCD.c: 192: LCD_Fill(0x0000);
 13954  0137D2  0E00               	movlw	0
 13955  0137D4  0100               	movlb	0	; () banked
 13956  0137D6  6F6A               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 13957  0137D8  0E00               	movlw	0
 13958  0137DA  6F69               	movwf	LCD_Fill@pColour& (0+255),b
 13959  0137DC  EC77  F0AF         	call	_LCD_Fill	;wreg free
 13960  0137E0  0012               	return		;funcret
 13961  0137E2                     __end_of_LCD_Init:
 13962                           	opt stack 0
 13963                           tosu	equ	0xFFF
 13964                           tosh	equ	0xFFE
 13965                           tosl	equ	0xFFD
 13966                           pclath	equ	0xFFA
 13967                           tblptru	equ	0xFF8
 13968                           tblptrh	equ	0xFF7
 13969                           tblptrl	equ	0xFF6
 13970                           tablat	equ	0xFF5
 13971                           prodh	equ	0xFF4
 13972                           prodl	equ	0xFF3
 13973                           intcon	equ	0xFF2
 13974                           postinc0	equ	0xFEE
 13975                           wreg	equ	0xFE8
 13976                           postdec1	equ	0xFE5
 13977                           fsr1h	equ	0xFE2
 13978                           fsr1l	equ	0xFE1
 13979                           indf2	equ	0xFDF
 13980                           postinc2	equ	0xFDE
 13981                           postdec2	equ	0xFDD
 13982                           plusw2	equ	0xFDB
 13983                           fsr2h	equ	0xFDA
 13984                           fsr2l	equ	0xFD9
 13985                           status	equ	0xFD8
 13986                           
 13987 ;; *************** function _Set_Rotation *****************
 13988 ;; Defined at:
 13989 ;;		line 248 in file "Library/LCD.c"
 13990 ;; Parameters:    Size  Location     Type
 13991 ;;  m               1    wreg     unsigned char 
 13992 ;; Auto vars:     Size  Location     Type
 13993 ;;  m               1    5[BANK0 ] unsigned char 
 13994 ;;  rotation        1    6[BANK0 ] unsigned char 
 13995 ;; Return value:  Size  Location     Type
 13996 ;;                  1    wreg      void 
 13997 ;; Registers used:
 13998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13999 ;; Tracked objects:
 14000 ;;		On entry : 0/0
 14001 ;;		On exit  : 0/0
 14002 ;;		Unchanged: 0/0
 14003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14005 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14007 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14008 ;;Total ram usage:        2 bytes
 14009 ;; Hardware stack levels used:    1
 14010 ;; Hardware stack levels required when called:    9
 14011 ;; This function calls:
 14012 ;;		_LCD_Write
 14013 ;; This function is called by:
 14014 ;;		_LCD_Init
 14015 ;; This function uses a non-reentrant model
 14016 ;;
 14017                           
 14018                           	psect	text51
 14019  01530E                     __ptext51:
 14020                           	opt stack 0
 14021  01530E                     _Set_Rotation:
 14022                           	opt stack 20
 14023                           
 14024                           ;incstack = 0
 14025                           ;Set_Rotation@m stored from wreg
 14026  01530E  0100               	movlb	0	; () banked
 14027  015310  6F65               	movwf	Set_Rotation@m& (0+255),b
 14028                           
 14029                           ;LCD.c: 250: UINT8 rotation = 0x00;
 14030  015312  0E00               	movlw	0
 14031  015314  0100               	movlb	0	; () banked
 14032  015316  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 14033                           
 14034                           ; BSR set to: 0
 14035                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 14036  015318  0E00               	movlw	0
 14037  01531A  0100               	movlb	0	; () banked
 14038  01531C  6F63               	movwf	LCD_Write@mode& (0+255),b
 14039  01531E  0E36               	movlw	54
 14040  015320  ECE5  F0B3         	call	_LCD_Write
 14041                           
 14042                           ;LCD.c: 253: rotation = (m % 4);
 14043  015324  0100               	movlb	0	; () banked
 14044  015326  5165               	movf	Set_Rotation@m& (0+255),w,b
 14045  015328  0B03               	andlw	3
 14046  01532A  0100               	movlb	0	; () banked
 14047  01532C  6F66               	movwf	Set_Rotation@rotation& (0+255),b
 14048                           
 14049                           ;LCD.c: 255: switch(rotation)
 14050  01532E  D02C               	goto	l117
 14051  015330                     
 14052                           ; BSR set to: 0
 14053                           ;LCD.c: 258: {
 14054                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 14055                           
 14056                           ; BSR set to: 0
 14057  015330  0E01               	movlw	1
 14058  015332  0100               	movlb	0	; () banked
 14059  015334  6F63               	movwf	LCD_Write@mode& (0+255),b
 14060  015336  0EC8               	movlw	200
 14061  015338  ECE5  F0B3         	call	_LCD_Write
 14062                           
 14063                           ;LCD.c: 260: w = 128;
 14064  01533C  0E80               	movlw	128
 14065  01533E  6E4F               	movwf	_w,c
 14066                           
 14067                           ;LCD.c: 261: l = 128;
 14068  015340  0E80               	movlw	128
 14069  015342  6E4E               	movwf	_l,c
 14070                           
 14071                           ;LCD.c: 262: break;
 14072  015344  0012               	return	
 14073  015346                     
 14074                           ;LCD.c: 265: {
 14075                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 14076  015346  0E01               	movlw	1
 14077  015348  0100               	movlb	0	; () banked
 14078  01534A  6F63               	movwf	LCD_Write@mode& (0+255),b
 14079  01534C  0EA8               	movlw	168
 14080  01534E  ECE5  F0B3         	call	_LCD_Write
 14081                           
 14082                           ;LCD.c: 267: w = 128;
 14083  015352  0E80               	movlw	128
 14084  015354  6E4F               	movwf	_w,c
 14085                           
 14086                           ;LCD.c: 268: l = 128;
 14087  015356  0E80               	movlw	128
 14088  015358  6E4E               	movwf	_l,c
 14089                           
 14090                           ;LCD.c: 269: break;
 14091  01535A  0012               	return	
 14092  01535C                     
 14093                           ;LCD.c: 272: {
 14094                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 14095  01535C  0E01               	movlw	1
 14096  01535E  0100               	movlb	0	; () banked
 14097  015360  6F63               	movwf	LCD_Write@mode& (0+255),b
 14098  015362  0E08               	movlw	8
 14099  015364  ECE5  F0B3         	call	_LCD_Write
 14100                           
 14101                           ;LCD.c: 274: w = 128;
 14102  015368  0E80               	movlw	128
 14103  01536A  6E4F               	movwf	_w,c
 14104                           
 14105                           ;LCD.c: 275: l = 128;
 14106  01536C  0E80               	movlw	128
 14107  01536E  6E4E               	movwf	_l,c
 14108                           
 14109                           ;LCD.c: 276: break;
 14110  015370  0012               	return	
 14111  015372                     
 14112                           ;LCD.c: 279: {
 14113                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 14114  015372  0E01               	movlw	1
 14115  015374  0100               	movlb	0	; () banked
 14116  015376  6F63               	movwf	LCD_Write@mode& (0+255),b
 14117  015378  0E68               	movlw	104
 14118  01537A  ECE5  F0B3         	call	_LCD_Write
 14119                           
 14120                           ;LCD.c: 281: w = 128;
 14121  01537E  0E80               	movlw	128
 14122  015380  6E4F               	movwf	_w,c
 14123                           
 14124                           ;LCD.c: 282: l = 128;
 14125  015382  0E80               	movlw	128
 14126  015384  6E4E               	movwf	_l,c
 14127                           
 14128                           ;LCD.c: 284: }
 14129                           ;LCD.c: 285: }
 14130                           
 14131                           ;LCD.c: 283: break;
 14132  015386  0012               	return	
 14133  015388                     l117:
 14134  015388  0100               	movlb	0	; () banked
 14135  01538A  5166               	movf	Set_Rotation@rotation& (0+255),w,b
 14136                           
 14137                           ; Switch size 1, requested type "space"
 14138                           ; Number of cases is 4, Range of values is 0 to 3
 14139                           ; switch strategies available:
 14140                           ; Name         Instructions Cycles
 14141                           ; simple_byte           13     7 (average)
 14142                           ;	Chosen strategy is simple_byte
 14143  01538C  0A00               	xorlw	0	; case 0
 14144  01538E  B4D8               	btfsc	status,2,c
 14145  015390  D7CF               	goto	l118
 14146  015392  0A01               	xorlw	1	; case 1
 14147  015394  B4D8               	btfsc	status,2,c
 14148  015396  D7D7               	goto	l120
 14149  015398  0A03               	xorlw	3	; case 2
 14150  01539A  B4D8               	btfsc	status,2,c
 14151  01539C  D7DF               	goto	l121
 14152  01539E  0A01               	xorlw	1	; case 3
 14153  0153A0  A4D8               	btfss	status,2,c
 14154  0153A2  0012               	return	
 14155  0153A4  D7E6               	goto	l122
 14156  0153A6                     __end_of_Set_Rotation:
 14157                           	opt stack 0
 14158                           tosu	equ	0xFFF
 14159                           tosh	equ	0xFFE
 14160                           tosl	equ	0xFFD
 14161                           pclath	equ	0xFFA
 14162                           tblptru	equ	0xFF8
 14163                           tblptrh	equ	0xFF7
 14164                           tblptrl	equ	0xFF6
 14165                           tablat	equ	0xFF5
 14166                           prodh	equ	0xFF4
 14167                           prodl	equ	0xFF3
 14168                           intcon	equ	0xFF2
 14169                           postinc0	equ	0xFEE
 14170                           wreg	equ	0xFE8
 14171                           postdec1	equ	0xFE5
 14172                           fsr1h	equ	0xFE2
 14173                           fsr1l	equ	0xFE1
 14174                           indf2	equ	0xFDF
 14175                           postinc2	equ	0xFDE
 14176                           postdec2	equ	0xFDD
 14177                           plusw2	equ	0xFDB
 14178                           fsr2h	equ	0xFDA
 14179                           fsr2l	equ	0xFD9
 14180                           status	equ	0xFD8
 14181                           
 14182 ;; *************** function _LCD_Fill *****************
 14183 ;; Defined at:
 14184 ;;		line 287 in file "Library/LCD.c"
 14185 ;; Parameters:    Size  Location     Type
 14186 ;;  pColour         2    9[BANK0 ] unsigned short 
 14187 ;; Auto vars:     Size  Location     Type
 14188 ;;  j               1   12[BANK0 ] unsigned char 
 14189 ;;  i               1   11[BANK0 ] unsigned char 
 14190 ;; Return value:  Size  Location     Type
 14191 ;;                  1    wreg      void 
 14192 ;; Registers used:
 14193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 14194 ;; Tracked objects:
 14195 ;;		On entry : 0/0
 14196 ;;		On exit  : 0/0
 14197 ;;		Unchanged: 0/0
 14198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14199 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14200 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14202 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14203 ;;Total ram usage:        4 bytes
 14204 ;; Hardware stack levels used:    1
 14205 ;; Hardware stack levels required when called:   10
 14206 ;; This function calls:
 14207 ;;		_LCD_Word_Write
 14208 ;;		_Set_Addr_Window
 14209 ;; This function is called by:
 14210 ;;		_LCD_Init
 14211 ;; This function uses a non-reentrant model
 14212 ;;
 14213                           
 14214                           	psect	text52
 14215  015EEE                     __ptext52:
 14216                           	opt stack 0
 14217  015EEE                     _LCD_Fill:
 14218                           	opt stack 19
 14219                           
 14220                           ;LCD.c: 296: UINT8 i = 0x00;
 14221                           
 14222                           ;incstack = 0
 14223  015EEE  0E00               	movlw	0
 14224  015EF0  0100               	movlb	0	; () banked
 14225  015EF2  6F6B               	movwf	LCD_Fill@i& (0+255),b
 14226                           
 14227                           ;LCD.c: 297: UINT8 j = 0x00;
 14228  015EF4  0E00               	movlw	0
 14229  015EF6  0100               	movlb	0	; () banked
 14230  015EF8  6F6C               	movwf	LCD_Fill@j& (0+255),b
 14231                           
 14232                           ; BSR set to: 0
 14233                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 14234  015EFA  0E00               	movlw	0
 14235  015EFC  0100               	movlb	0	; () banked
 14236  015EFE  6F65               	movwf	Set_Addr_Window@ys& (0+255),b
 14237  015F00  044F               	decf	_w,w,c
 14238  015F02  0100               	movlb	0	; () banked
 14239  015F04  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 14240  015F06  044E               	decf	_l,w,c
 14241  015F08  0100               	movlb	0	; () banked
 14242  015F0A  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 14243  015F0C  0E00               	movlw	0
 14244  015F0E  ECA2  F0A6         	call	_Set_Addr_Window
 14245                           
 14246                           ;LCD.c: 299: for (j = l; j > 0; j--)
 14247  015F12  C04E  F06C         	movff	_l,LCD_Fill@j
 14248  015F16                     l13688:
 14249  015F16  0100               	movlb	0	; () banked
 14250  015F18  516C               	movf	LCD_Fill@j& (0+255),w,b
 14251  015F1A  0100               	movlb	0	; () banked
 14252  015F1C  B4D8               	btfsc	status,2,c
 14253  015F1E  0012               	return	
 14254                           
 14255                           ; BSR set to: 0
 14256                           ;LCD.c: 300: for (i = w; i > 0; i--)
 14257                           
 14258                           ; BSR set to: 0
 14259  015F20  C04F  F06B         	movff	_w,LCD_Fill@i
 14260  015F24                     l13692:
 14261                           
 14262                           ; BSR set to: 0
 14263  015F24  0100               	movlb	0	; () banked
 14264  015F26  516B               	movf	LCD_Fill@i& (0+255),w,b
 14265  015F28  0100               	movlb	0	; () banked
 14266  015F2A  B4D8               	btfsc	status,2,c
 14267  015F2C  D009               	goto	u11390
 14268                           
 14269                           ; BSR set to: 0
 14270                           ;LCD.c: 301: LCD_Word_Write(pColour);
 14271                           
 14272                           ; BSR set to: 0
 14273                           
 14274                           ; BSR set to: 0
 14275  015F2E  C069  F065         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 14276  015F32  C06A  F066         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 14277  015F36  EC50  F0B4         	call	_LCD_Word_Write	;wreg free
 14278  015F3A  0100               	movlb	0	; () banked
 14279  015F3C  076B               	decf	LCD_Fill@i& (0+255),f,b
 14280  015F3E  D7F2               	goto	l13692
 14281  015F40                     u11390:
 14282                           
 14283                           ; BSR set to: 0
 14284                           
 14285                           ; BSR set to: 0
 14286  015F40  0100               	movlb	0	; () banked
 14287  015F42  076C               	decf	LCD_Fill@j& (0+255),f,b
 14288  015F44  D7E8               	goto	l13688
 14289  015F46                     __end_of_LCD_Fill:
 14290                           	opt stack 0
 14291                           tosu	equ	0xFFF
 14292                           tosh	equ	0xFFE
 14293                           tosl	equ	0xFFD
 14294                           pclath	equ	0xFFA
 14295                           tblptru	equ	0xFF8
 14296                           tblptrh	equ	0xFF7
 14297                           tblptrl	equ	0xFF6
 14298                           tablat	equ	0xFF5
 14299                           prodh	equ	0xFF4
 14300                           prodl	equ	0xFF3
 14301                           intcon	equ	0xFF2
 14302                           postinc0	equ	0xFEE
 14303                           wreg	equ	0xFE8
 14304                           postdec1	equ	0xFE5
 14305                           fsr1h	equ	0xFE2
 14306                           fsr1l	equ	0xFE1
 14307                           indf2	equ	0xFDF
 14308                           postinc2	equ	0xFDE
 14309                           postdec2	equ	0xFDD
 14310                           plusw2	equ	0xFDB
 14311                           fsr2h	equ	0xFDA
 14312                           fsr2l	equ	0xFD9
 14313                           status	equ	0xFD8
 14314                           
 14315 ;; *************** function _Configure_GPIOs *****************
 14316 ;; Defined at:
 14317 ;;		line 46 in file "Library/LCD.c"
 14318 ;; Parameters:    Size  Location     Type
 14319 ;;		None
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;		None
 14322 ;; Return value:  Size  Location     Type
 14323 ;;                  1    wreg      void 
 14324 ;; Registers used:
 14325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14326 ;; Tracked objects:
 14327 ;;		On entry : 0/0
 14328 ;;		On exit  : 0/0
 14329 ;;		Unchanged: 0/0
 14330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14335 ;;Total ram usage:        0 bytes
 14336 ;; Hardware stack levels used:    1
 14337 ;; Hardware stack levels required when called:   14
 14338 ;; This function calls:
 14339 ;;		_LCD_Reset
 14340 ;;		_Port_SetPinType
 14341 ;;		_SPI_Init
 14342 ;;		_SPI_MaxSpeed
 14343 ;; This function is called by:
 14344 ;;		_LCD_Init
 14345 ;; This function uses a non-reentrant model
 14346 ;;
 14347                           
 14348                           	psect	text53
 14349  015A92                     __ptext53:
 14350                           	opt stack 0
 14351  015A92                     _Configure_GPIOs:
 14352                           	opt stack 15
 14353                           
 14354                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;incstack = 0
 14358  015A92  0EB4               	movlw	low _PortF
 14359  015A94  0100               	movlb	0	; () banked
 14360  015A96  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14361  015A98  0E01               	movlw	high _PortF
 14362  015A9A  0100               	movlb	0	; () banked
 14363  015A9C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14364  015A9E  0E07               	movlw	7
 14365  015AA0  0100               	movlb	0	; () banked
 14366  015AA2  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14367  015AA4  0E03               	movlw	3
 14368  015AA6  0100               	movlb	0	; () banked
 14369  015AA8  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14370  015AAA  ECAA  F095         	call	_Port_SetPinType	;wreg free
 14371                           
 14372                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 14373  015AAE  0EB4               	movlw	low _PortF
 14374  015AB0  0100               	movlb	0	; () banked
 14375  015AB2  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 14376  015AB4  0E01               	movlw	high _PortF
 14377  015AB6  0100               	movlb	0	; () banked
 14378  015AB8  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14379  015ABA  0E06               	movlw	6
 14380  015ABC  0100               	movlb	0	; () banked
 14381  015ABE  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 14382  015AC0  0E03               	movlw	3
 14383  015AC2  0100               	movlb	0	; () banked
 14384  015AC4  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 14385  015AC6  ECAA  F095         	call	_Port_SetPinType	;wreg free
 14386                           
 14387                           ;LCD.c: 55: LCD_Reset();
 14388  015ACA  ECF4  F0AF         	call	_LCD_Reset	;wreg free
 14389                           
 14390                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 14391  015ACE  0EC0               	movlw	192
 14392  015AD0  0100               	movlb	0	; () banked
 14393  015AD2  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 14394  015AD4  0EC6               	movlw	198
 14395  015AD6  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 14396  015AD8  0E2D               	movlw	45
 14397  015ADA  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 14398  015ADC  0E00               	movlw	0
 14399  015ADE  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 14400  015AE0  0E01               	movlw	1
 14401  015AE2  0100               	movlb	0	; () banked
 14402  015AE4  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 14403  015AE6  0E01               	movlw	1
 14404  015AE8  0100               	movlb	0	; () banked
 14405  015AEA  6F92               	movwf	SPI_Init@pMode& (0+255),b
 14406  015AEC  EC23  F087         	call	_SPI_Init	;wreg free
 14407                           
 14408                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 14409  015AF0  0E63               	movlw	low _SPI2
 14410  015AF2  0100               	movlb	0	; () banked
 14411  015AF4  6F6F               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 14412  015AF6  0E01               	movlw	high _SPI2
 14413  015AF8  0100               	movlb	0	; () banked
 14414  015AFA  6F70               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 14415  015AFC  EC61  F0AC         	call	_SPI_MaxSpeed	;wreg free
 14416  015B00  0012               	return		;funcret
 14417  015B02                     __end_of_Configure_GPIOs:
 14418                           	opt stack 0
 14419                           tosu	equ	0xFFF
 14420                           tosh	equ	0xFFE
 14421                           tosl	equ	0xFFD
 14422                           pclath	equ	0xFFA
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           postinc0	equ	0xFEE
 14431                           wreg	equ	0xFE8
 14432                           postdec1	equ	0xFE5
 14433                           fsr1h	equ	0xFE2
 14434                           fsr1l	equ	0xFE1
 14435                           indf2	equ	0xFDF
 14436                           postinc2	equ	0xFDE
 14437                           postdec2	equ	0xFDD
 14438                           plusw2	equ	0xFDB
 14439                           fsr2h	equ	0xFDA
 14440                           fsr2l	equ	0xFD9
 14441                           status	equ	0xFD8
 14442                           
 14443 ;; *************** function _SPI_MaxSpeed *****************
 14444 ;; Defined at:
 14445 ;;		line 201 in file "Library/SPI.c"
 14446 ;; Parameters:    Size  Location     Type
 14447 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 14448 ;;		 -> SPI2(11), 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;		None
 14451 ;; Return value:  Size  Location     Type
 14452 ;;                  1    wreg      void 
 14453 ;; Registers used:
 14454 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14455 ;; Tracked objects:
 14456 ;;		On entry : 0/0
 14457 ;;		On exit  : 0/0
 14458 ;;		Unchanged: 0/0
 14459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14460 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14463 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;Total ram usage:        2 bytes
 14465 ;; Hardware stack levels used:    1
 14466 ;; Hardware stack levels required when called:    9
 14467 ;; This function calls:
 14468 ;;		_Byte_SetBit
 14469 ;;		_Byte_SetQuad
 14470 ;; This function is called by:
 14471 ;;		_Configure_GPIOs
 14472 ;; This function uses a non-reentrant model
 14473 ;;
 14474                           
 14475                           	psect	text54
 14476  0158C2                     __ptext54:
 14477                           	opt stack 0
 14478  0158C2                     _SPI_MaxSpeed:
 14479                           	opt stack 19
 14480                           
 14481                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 14482                           
 14483                           ;incstack = 0
 14484  0158C2  0100               	movlb	0	; () banked
 14485  0158C4  EE20 F006          	lfsr	2,6
 14486  0158C8  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 14487  0158CA  26D9               	addwf	fsr2l,f,c
 14488  0158CC  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 14489  0158CE  22DA               	addwfc	fsr2h,f,c
 14490  0158D0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14491  0158D4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14492  0158D8  0E05               	movlw	5
 14493  0158DA  0100               	movlb	0	; () banked
 14494  0158DC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14495  0158DE  0E00               	movlw	0
 14496  0158E0  0100               	movlb	0	; () banked
 14497  0158E2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14498  0158E4  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 14499                           
 14500                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 14501  0158E8  0100               	movlb	0	; () banked
 14502  0158EA  EE20 F006          	lfsr	2,6
 14503  0158EE  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 14504  0158F0  26D9               	addwf	fsr2l,f,c
 14505  0158F2  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 14506  0158F4  22DA               	addwfc	fsr2h,f,c
 14507  0158F6  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 14508  0158FA  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 14509  0158FE  0E00               	movlw	0
 14510  015900  0100               	movlb	0	; () banked
 14511  015902  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 14512  015904  0E00               	movlw	0
 14513  015906  0100               	movlb	0	; () banked
 14514  015908  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 14515  01590A  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 14516                           
 14517                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 14518  01590E  0100               	movlb	0	; () banked
 14519  015910  EE20 F006          	lfsr	2,6
 14520  015914  516F               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 14521  015916  26D9               	addwf	fsr2l,f,c
 14522  015918  5170               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 14523  01591A  22DA               	addwfc	fsr2h,f,c
 14524  01591C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 14525  015920  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 14526  015924  0E05               	movlw	5
 14527  015926  0100               	movlb	0	; () banked
 14528  015928  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 14529  01592A  0E01               	movlw	1
 14530  01592C  0100               	movlb	0	; () banked
 14531  01592E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 14532  015930  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 14533  015934  0012               	return		;funcret
 14534  015936                     __end_of_SPI_MaxSpeed:
 14535                           	opt stack 0
 14536                           tosu	equ	0xFFF
 14537                           tosh	equ	0xFFE
 14538                           tosl	equ	0xFFD
 14539                           pclath	equ	0xFFA
 14540                           tblptru	equ	0xFF8
 14541                           tblptrh	equ	0xFF7
 14542                           tblptrl	equ	0xFF6
 14543                           tablat	equ	0xFF5
 14544                           prodh	equ	0xFF4
 14545                           prodl	equ	0xFF3
 14546                           intcon	equ	0xFF2
 14547                           postinc0	equ	0xFEE
 14548                           wreg	equ	0xFE8
 14549                           postdec1	equ	0xFE5
 14550                           fsr1h	equ	0xFE2
 14551                           fsr1l	equ	0xFE1
 14552                           indf2	equ	0xFDF
 14553                           postinc2	equ	0xFDE
 14554                           postdec2	equ	0xFDD
 14555                           plusw2	equ	0xFDB
 14556                           fsr2h	equ	0xFDA
 14557                           fsr2l	equ	0xFD9
 14558                           status	equ	0xFD8
 14559                           
 14560 ;; *************** function _LCD_Reset *****************
 14561 ;; Defined at:
 14562 ;;		line 95 in file "Library/LCD.c"
 14563 ;; Parameters:    Size  Location     Type
 14564 ;;		None
 14565 ;; Auto vars:     Size  Location     Type
 14566 ;;		None
 14567 ;; Return value:  Size  Location     Type
 14568 ;;                  1    wreg      void 
 14569 ;; Registers used:
 14570 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14571 ;; Tracked objects:
 14572 ;;		On entry : 0/0
 14573 ;;		On exit  : 0/0
 14574 ;;		Unchanged: 0/0
 14575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14580 ;;Total ram usage:        0 bytes
 14581 ;; Hardware stack levels used:    1
 14582 ;; Hardware stack levels required when called:   13
 14583 ;; This function calls:
 14584 ;;		_LED_Toggle
 14585 ;;		_Reset_High
 14586 ;;		_Reset_Low
 14587 ;;		_delay_ms
 14588 ;; This function is called by:
 14589 ;;		_Configure_GPIOs
 14590 ;; This function uses a non-reentrant model
 14591 ;;
 14592                           
 14593                           	psect	text55
 14594  015FE8                     __ptext55:
 14595                           	opt stack 0
 14596  015FE8                     _LCD_Reset:
 14597                           	opt stack 15
 14598                           
 14599                           ;LCD.c: 97: Reset_High();
 14600                           
 14601                           ;incstack = 0
 14602  015FE8  EC14  F0B4         	call	_Reset_High	;wreg free
 14603                           
 14604                           ;LCD.c: 98: LED_Toggle(eLED2);
 14605  015FEC  0E01               	movlw	1
 14606  015FEE  ECAF  F0B0         	call	_LED_Toggle
 14607                           
 14608                           ;LCD.c: 99: delay_ms(0x80);
 14609  015FF2  0E00               	movlw	0
 14610  015FF4  0100               	movlb	0	; () banked
 14611  015FF6  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14612  015FF8  0E80               	movlw	128
 14613  015FFA  6F60               	movwf	delay_ms@ms& (0+255),b
 14614  015FFC  ECB7  F0AD         	call	_delay_ms	;wreg free
 14615                           
 14616                           ;LCD.c: 100: LED_Toggle(eLED2);
 14617  016000  0E01               	movlw	1
 14618  016002  ECAF  F0B0         	call	_LED_Toggle
 14619                           
 14620                           ;LCD.c: 101: Reset_Low();
 14621  016006  EC05  F0B4         	call	_Reset_Low	;wreg free
 14622                           
 14623                           ;LCD.c: 102: delay_ms(0x80);
 14624  01600A  0E00               	movlw	0
 14625  01600C  0100               	movlb	0	; () banked
 14626  01600E  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14627  016010  0E80               	movlw	128
 14628  016012  6F60               	movwf	delay_ms@ms& (0+255),b
 14629  016014  ECB7  F0AD         	call	_delay_ms	;wreg free
 14630                           
 14631                           ;LCD.c: 103: LED_Toggle(eLED2);
 14632  016018  0E01               	movlw	1
 14633  01601A  ECAF  F0B0         	call	_LED_Toggle
 14634                           
 14635                           ;LCD.c: 104: Reset_High();
 14636  01601E  EC14  F0B4         	call	_Reset_High	;wreg free
 14637                           
 14638                           ;LCD.c: 105: delay_ms(0x80);
 14639  016022  0E00               	movlw	0
 14640  016024  0100               	movlb	0	; () banked
 14641  016026  6F61               	movwf	(delay_ms@ms+1)& (0+255),b
 14642  016028  0E80               	movlw	128
 14643  01602A  6F60               	movwf	delay_ms@ms& (0+255),b
 14644  01602C  ECB7  F0AD         	call	_delay_ms	;wreg free
 14645                           
 14646                           ;LCD.c: 106: LED_Toggle(eLED2);
 14647  016030  0E01               	movlw	1
 14648  016032  ECAF  F0B0         	call	_LED_Toggle
 14649  016036  0012               	return		;funcret
 14650  016038                     __end_of_LCD_Reset:
 14651                           	opt stack 0
 14652                           tosu	equ	0xFFF
 14653                           tosh	equ	0xFFE
 14654                           tosl	equ	0xFFD
 14655                           pclath	equ	0xFFA
 14656                           tblptru	equ	0xFF8
 14657                           tblptrh	equ	0xFF7
 14658                           tblptrl	equ	0xFF6
 14659                           tablat	equ	0xFF5
 14660                           prodh	equ	0xFF4
 14661                           prodl	equ	0xFF3
 14662                           intcon	equ	0xFF2
 14663                           postinc0	equ	0xFEE
 14664                           wreg	equ	0xFE8
 14665                           postdec1	equ	0xFE5
 14666                           fsr1h	equ	0xFE2
 14667                           fsr1l	equ	0xFE1
 14668                           indf2	equ	0xFDF
 14669                           postinc2	equ	0xFDE
 14670                           postdec2	equ	0xFDD
 14671                           plusw2	equ	0xFDB
 14672                           fsr2h	equ	0xFDA
 14673                           fsr2l	equ	0xFD9
 14674                           status	equ	0xFD8
 14675                           
 14676 ;; *************** function _delay_ms *****************
 14677 ;; Defined at:
 14678 ;;		line 240 in file "Library/Types.c"
 14679 ;; Parameters:    Size  Location     Type
 14680 ;;  ms              2    0[BANK0 ] unsigned short 
 14681 ;; Auto vars:     Size  Location     Type
 14682 ;;  u               4    2[BANK0 ] volatile unsigned long 
 14683 ;; Return value:  Size  Location     Type
 14684 ;;                  1    wreg      void 
 14685 ;; Registers used:
 14686 ;;		wreg, status,2, status,0
 14687 ;; Tracked objects:
 14688 ;;		On entry : 0/0
 14689 ;;		On exit  : 0/0
 14690 ;;		Unchanged: 0/0
 14691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14692 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14693 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14694 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14695 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14696 ;;Total ram usage:        6 bytes
 14697 ;; Hardware stack levels used:    1
 14698 ;; Hardware stack levels required when called:    7
 14699 ;; This function calls:
 14700 ;;		Nothing
 14701 ;; This function is called by:
 14702 ;;		_LCD_Reset
 14703 ;;		_LCD_Init
 14704 ;;		_MXK_Init
 14705 ;; This function uses a non-reentrant model
 14706 ;;
 14707                           
 14708                           	psect	text56
 14709  015B6E                     __ptext56:
 14710                           	opt stack 0
 14711  015B6E                     _delay_ms:
 14712                           	opt stack 22
 14713                           
 14714                           ;Types.c: 242: volatile unsigned long u;
 14715                           ;Types.c: 243: while (ms--)
 14716                           
 14717                           ;incstack = 0
 14718  015B6E  D01F               	goto	u9560
 14719  015B70                     l12156:
 14720                           
 14721                           ;Types.c: 244: {
 14722                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 14723  015B70  0E00               	movlw	0
 14724  015B72  0100               	movlb	0	; () banked
 14725  015B74  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 14726  015B76  0E00               	movlw	0
 14727  015B78  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 14728  015B7A  0E00               	movlw	0
 14729  015B7C  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 14730  015B7E  0E00               	movlw	0
 14731  015B80  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 14732  015B82                     l12158:
 14733                           
 14734                           ; BSR set to: 0
 14735  015B82  0100               	movlb	0	; () banked
 14736  015B84  5165               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 14737  015B86  0100               	movlb	0	; () banked
 14738  015B88  1164               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 14739  015B8A  E111               	bnz	l12164
 14740  015B8C  0EB0               	movlw	176
 14741  015B8E  0100               	movlb	0	; () banked
 14742  015B90  5D62               	subwf	delay_ms@u& (0+255),w,b	;volatile
 14743  015B92  0E04               	movlw	4
 14744  015B94  0100               	movlb	0	; () banked
 14745  015B96  5963               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 14746  015B98  B0D8               	btfsc	status,0,c
 14747  015B9A  D009               	goto	u9560
 14748                           
 14749                           ; BSR set to: 0
 14750                           
 14751                           ; BSR set to: 0
 14752  015B9C  F000               	nop		; ;# 
 14753  015B9E  0E01               	movlw	1
 14754  015BA0  0100               	movlb	0	; () banked
 14755  015BA2  2762               	addwf	delay_ms@u& (0+255),f,b	;volatile
 14756  015BA4  0E00               	movlw	0
 14757  015BA6  2363               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 14758  015BA8  2364               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 14759  015BAA  2365               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 14760  015BAC  D7EA               	goto	l12158
 14761  015BAE                     u9560:
 14762  015BAE                     l12164:
 14763  015BAE  0100               	movlb	0	; () banked
 14764  015BB0  0760               	decf	delay_ms@ms& (0+255),f,b
 14765  015BB2  A0D8               	btfss	status,0,c
 14766  015BB4  0761               	decf	(delay_ms@ms+1)& (0+255),f,b
 14767  015BB6  0100               	movlb	0	; () banked
 14768  015BB8  2960               	incf	delay_ms@ms& (0+255),w,b
 14769  015BBA  E1DA               	bnz	l12156
 14770  015BBC  0100               	movlb	0	; () banked
 14771  015BBE  2961               	incf	(delay_ms@ms+1)& (0+255),w,b
 14772  015BC0  A4D8               	btfss	status,2,c
 14773  015BC2  D7D6               	goto	l824
 14774                           
 14775                           ; BSR set to: 0
 14776                           ;Types.c: 251: }
 14777                           ;Types.c: 252: }
 14778                           ;Types.c: 253: u = 0x8008;
 14779                           
 14780                           ; BSR set to: 0
 14781  015BC4  0E08               	movlw	8
 14782  015BC6  0100               	movlb	0	; () banked
 14783  015BC8  6F62               	movwf	delay_ms@u& (0+255),b	;volatile
 14784  015BCA  0E80               	movlw	128
 14785  015BCC  6F63               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 14786  015BCE  0E00               	movlw	0
 14787  015BD0  6F64               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 14788  015BD2  0E00               	movlw	0
 14789  015BD4  6F65               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 14790                           
 14791                           ; BSR set to: 0
 14792  015BD6  0012               	return		;funcret
 14793  015BD8                     __end_of_delay_ms:
 14794                           	opt stack 0
 14795                           tosu	equ	0xFFF
 14796                           tosh	equ	0xFFE
 14797                           tosl	equ	0xFFD
 14798                           pclath	equ	0xFFA
 14799                           tblptru	equ	0xFF8
 14800                           tblptrh	equ	0xFF7
 14801                           tblptrl	equ	0xFF6
 14802                           tablat	equ	0xFF5
 14803                           prodh	equ	0xFF4
 14804                           prodl	equ	0xFF3
 14805                           intcon	equ	0xFF2
 14806                           postinc0	equ	0xFEE
 14807                           wreg	equ	0xFE8
 14808                           postdec1	equ	0xFE5
 14809                           fsr1h	equ	0xFE2
 14810                           fsr1l	equ	0xFE1
 14811                           indf2	equ	0xFDF
 14812                           postinc2	equ	0xFDE
 14813                           postdec2	equ	0xFDD
 14814                           plusw2	equ	0xFDB
 14815                           fsr2h	equ	0xFDA
 14816                           fsr2l	equ	0xFD9
 14817                           status	equ	0xFD8
 14818                           
 14819 ;; *************** function _Reset_Low *****************
 14820 ;; Defined at:
 14821 ;;		line 32 in file "Library/LCD.c"
 14822 ;; Parameters:    Size  Location     Type
 14823 ;;		None
 14824 ;; Auto vars:     Size  Location     Type
 14825 ;;		None
 14826 ;; Return value:  Size  Location     Type
 14827 ;;                  1    wreg      void 
 14828 ;; Registers used:
 14829 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14830 ;; Tracked objects:
 14831 ;;		On entry : 0/0
 14832 ;;		On exit  : 0/0
 14833 ;;		Unchanged: 0/0
 14834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14838 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14839 ;;Total ram usage:        0 bytes
 14840 ;; Hardware stack levels used:    1
 14841 ;; Hardware stack levels required when called:   11
 14842 ;; This function calls:
 14843 ;;		_Port_SetPin
 14844 ;; This function is called by:
 14845 ;;		_LCD_Reset
 14846 ;; This function uses a non-reentrant model
 14847 ;;
 14848                           
 14849                           	psect	text57
 14850  01680A                     __ptext57:
 14851                           	opt stack 0
 14852  01680A                     _Reset_Low:
 14853                           	opt stack 16
 14854                           
 14855                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 14856                           
 14857                           ; BSR set to: 0
 14858                           ;incstack = 0
 14859  01680A  0EB4               	movlw	low _PortF
 14860  01680C  0100               	movlb	0	; () banked
 14861  01680E  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14862  016810  0E01               	movlw	high _PortF
 14863  016812  0100               	movlb	0	; () banked
 14864  016814  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14865  016816  0E06               	movlw	6
 14866  016818  0100               	movlb	0	; () banked
 14867  01681A  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14868  01681C  0E01               	movlw	1
 14869  01681E  0100               	movlb	0	; () banked
 14870  016820  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14871  016822  EC62  F0A3         	call	_Port_SetPin	;wreg free
 14872  016826  0012               	return		;funcret
 14873  016828                     __end_of_Reset_Low:
 14874                           	opt stack 0
 14875                           tosu	equ	0xFFF
 14876                           tosh	equ	0xFFE
 14877                           tosl	equ	0xFFD
 14878                           pclath	equ	0xFFA
 14879                           tblptru	equ	0xFF8
 14880                           tblptrh	equ	0xFF7
 14881                           tblptrl	equ	0xFF6
 14882                           tablat	equ	0xFF5
 14883                           prodh	equ	0xFF4
 14884                           prodl	equ	0xFF3
 14885                           intcon	equ	0xFF2
 14886                           postinc0	equ	0xFEE
 14887                           wreg	equ	0xFE8
 14888                           postdec1	equ	0xFE5
 14889                           fsr1h	equ	0xFE2
 14890                           fsr1l	equ	0xFE1
 14891                           indf2	equ	0xFDF
 14892                           postinc2	equ	0xFDE
 14893                           postdec2	equ	0xFDD
 14894                           plusw2	equ	0xFDB
 14895                           fsr2h	equ	0xFDA
 14896                           fsr2l	equ	0xFD9
 14897                           status	equ	0xFD8
 14898                           
 14899 ;; *************** function _Reset_High *****************
 14900 ;; Defined at:
 14901 ;;		line 36 in file "Library/LCD.c"
 14902 ;; Parameters:    Size  Location     Type
 14903 ;;		None
 14904 ;; Auto vars:     Size  Location     Type
 14905 ;;		None
 14906 ;; Return value:  Size  Location     Type
 14907 ;;                  1    wreg      void 
 14908 ;; Registers used:
 14909 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14910 ;; Tracked objects:
 14911 ;;		On entry : 0/0
 14912 ;;		On exit  : 0/0
 14913 ;;		Unchanged: 0/0
 14914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14919 ;;Total ram usage:        0 bytes
 14920 ;; Hardware stack levels used:    1
 14921 ;; Hardware stack levels required when called:   11
 14922 ;; This function calls:
 14923 ;;		_Port_SetPin
 14924 ;; This function is called by:
 14925 ;;		_LCD_Reset
 14926 ;; This function uses a non-reentrant model
 14927 ;;
 14928                           
 14929                           	psect	text58
 14930  016828                     __ptext58:
 14931                           	opt stack 0
 14932  016828                     _Reset_High:
 14933                           	opt stack 16
 14934                           
 14935                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 14936                           
 14937                           ;incstack = 0
 14938  016828  0EB4               	movlw	low _PortF
 14939  01682A  0100               	movlb	0	; () banked
 14940  01682C  6F6F               	movwf	Port_SetPin@pInput& (0+255),b
 14941  01682E  0E01               	movlw	high _PortF
 14942  016830  0100               	movlb	0	; () banked
 14943  016832  6F70               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14944  016834  0E06               	movlw	6
 14945  016836  0100               	movlb	0	; () banked
 14946  016838  6F71               	movwf	Port_SetPin@pPin& (0+255),b
 14947  01683A  0E00               	movlw	0
 14948  01683C  0100               	movlb	0	; () banked
 14949  01683E  6F72               	movwf	Port_SetPin@pValue& (0+255),b
 14950  016840  EC62  F0A3         	call	_Port_SetPin	;wreg free
 14951  016844  0012               	return		;funcret
 14952  016846                     __end_of_Reset_High:
 14953                           	opt stack 0
 14954                           tosu	equ	0xFFF
 14955                           tosh	equ	0xFFE
 14956                           tosl	equ	0xFFD
 14957                           pclath	equ	0xFFA
 14958                           tblptru	equ	0xFF8
 14959                           tblptrh	equ	0xFF7
 14960                           tblptrl	equ	0xFF6
 14961                           tablat	equ	0xFF5
 14962                           prodh	equ	0xFF4
 14963                           prodl	equ	0xFF3
 14964                           intcon	equ	0xFF2
 14965                           postinc0	equ	0xFEE
 14966                           wreg	equ	0xFE8
 14967                           postdec1	equ	0xFE5
 14968                           fsr1h	equ	0xFE2
 14969                           fsr1l	equ	0xFE1
 14970                           indf2	equ	0xFDF
 14971                           postinc2	equ	0xFDE
 14972                           postdec2	equ	0xFDD
 14973                           plusw2	equ	0xFDB
 14974                           fsr2h	equ	0xFDA
 14975                           fsr2l	equ	0xFD9
 14976                           status	equ	0xFD8
 14977                           
 14978 ;; *************** function _ISR_Enable *****************
 14979 ;; Defined at:
 14980 ;;		line 27 in file "Library/ISR.c"
 14981 ;; Parameters:    Size  Location     Type
 14982 ;;		None
 14983 ;; Auto vars:     Size  Location     Type
 14984 ;;		None
 14985 ;; Return value:  Size  Location     Type
 14986 ;;                  1    wreg      void 
 14987 ;; Registers used:
 14988 ;;		None
 14989 ;; Tracked objects:
 14990 ;;		On entry : 0/0
 14991 ;;		On exit  : 0/0
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14998 ;;Total ram usage:        0 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:    7
 15001 ;; This function calls:
 15002 ;;		Nothing
 15003 ;; This function is called by:
 15004 ;;		_main
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           	psect	text59
 15009  016A62                     __ptext59:
 15010                           	opt stack 0
 15011  016A62                     _ISR_Enable:
 15012                           	opt stack 23
 15013                           
 15014                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 15015                           
 15016                           ;incstack = 0
 15017  016A62  8CF2               	bsf	intcon,6,c	;volatile
 15018                           
 15019                           ;ISR.c: 30: INTCONbits.GIE = 1;
 15020  016A64  8EF2               	bsf	intcon,7,c	;volatile
 15021                           
 15022                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 15023  016A66  88F2               	bsf	intcon,4,c	;volatile
 15024                           
 15025                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 15026  016A68  92F2               	bcf	intcon,1,c	;volatile
 15027  016A6A  0012               	return		;funcret
 15028  016A6C                     __end_of_ISR_Enable:
 15029                           	opt stack 0
 15030                           tosu	equ	0xFFF
 15031                           tosh	equ	0xFFE
 15032                           tosl	equ	0xFFD
 15033                           pclath	equ	0xFFA
 15034                           tblptru	equ	0xFF8
 15035                           tblptrh	equ	0xFF7
 15036                           tblptrl	equ	0xFF6
 15037                           tablat	equ	0xFF5
 15038                           prodh	equ	0xFF4
 15039                           prodl	equ	0xFF3
 15040                           intcon	equ	0xFF2
 15041                           postinc0	equ	0xFEE
 15042                           wreg	equ	0xFE8
 15043                           postdec1	equ	0xFE5
 15044                           fsr1h	equ	0xFE2
 15045                           fsr1l	equ	0xFE1
 15046                           indf2	equ	0xFDF
 15047                           postinc2	equ	0xFDE
 15048                           postdec2	equ	0xFDD
 15049                           plusw2	equ	0xFDB
 15050                           fsr2h	equ	0xFDA
 15051                           fsr2l	equ	0xFD9
 15052                           status	equ	0xFD8
 15053                           
 15054 ;; *************** function _HMI_Render *****************
 15055 ;; Defined at:
 15056 ;;		line 138 in file "HMI.c"
 15057 ;; Parameters:    Size  Location     Type
 15058 ;;		None
 15059 ;; Auto vars:     Size  Location     Type
 15060 ;;  a               2    8[BANK0 ] unsigned short 
 15061 ;; Return value:  Size  Location     Type
 15062 ;;                  1    wreg      void 
 15063 ;; Registers used:
 15064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15065 ;; Tracked objects:
 15066 ;;		On entry : 0/0
 15067 ;;		On exit  : 0/0
 15068 ;;		Unchanged: 0/0
 15069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15073 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15074 ;;Total ram usage:        2 bytes
 15075 ;; Hardware stack levels used:    1
 15076 ;; Hardware stack levels required when called:    9
 15077 ;; This function calls:
 15078 ;;		_OutSeg
 15079 ;; This function is called by:
 15080 ;;		_main
 15081 ;; This function uses a non-reentrant model
 15082 ;;
 15083                           
 15084                           	psect	text60
 15085  0163FE                     __ptext60:
 15086                           	opt stack 0
 15087  0163FE                     _HMI_Render:
 15088                           	opt stack 21
 15089                           
 15090                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
 15091                           
 15092                           ;incstack = 0
 15093  0163FE  0E00               	movlw	0
 15094  016400  0100               	movlb	0	; () banked
 15095  016402  6F69               	movwf	(HMI_Render@a+1)& (0+255),b
 15096  016404  0E00               	movlw	0
 15097  016406  6F68               	movwf	HMI_Render@a& (0+255),b
 15098  016408                     l14366:
 15099                           
 15100                           ; BSR set to: 0
 15101  016408  0100               	movlb	0	; () banked
 15102  01640A  5169               	movf	(HMI_Render@a+1)& (0+255),w,b
 15103  01640C  E116               	bnz	l1158
 15104  01640E  0E08               	movlw	8
 15105  016410  0100               	movlb	0	; () banked
 15106  016412  5D68               	subwf	HMI_Render@a& (0+255),w,b
 15107  016414  B0D8               	btfsc	status,0,c
 15108  016416  0012               	return	
 15109                           
 15110                           ; BSR set to: 0
 15111                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
 15112                           
 15113                           ; BSR set to: 0
 15114                           
 15115                           ; BSR set to: 0
 15116  016418  C068  F063         	movff	HMI_Render@a,OutSeg@pSegment
 15117  01641C  0E1E               	movlw	low _HMIBoard
 15118  01641E  0100               	movlb	0	; () banked
 15119  016420  2568               	addwf	HMI_Render@a& (0+255),w,b
 15120  016422  6ED9               	movwf	fsr2l,c
 15121  016424  0E01               	movlw	high _HMIBoard
 15122  016426  0100               	movlb	0	; () banked
 15123  016428  2169               	addwfc	(HMI_Render@a+1)& (0+255),w,b
 15124  01642A  6EDA               	movwf	fsr2h,c
 15125  01642C  50DF               	movf	indf2,w,c
 15126  01642E  EC2E  F0AB         	call	_OutSeg
 15127  016432  0100               	movlb	0	; () banked
 15128  016434  4B68               	infsnz	HMI_Render@a& (0+255),f,b
 15129  016436  2B69               	incf	(HMI_Render@a+1)& (0+255),f,b
 15130  016438  D7E7               	goto	l14366
 15131  01643A                     l1158:
 15132                           
 15133                           ; BSR set to: 0
 15134  01643A  0012               	return		;funcret
 15135  01643C                     __end_of_HMI_Render:
 15136                           	opt stack 0
 15137                           tosu	equ	0xFFF
 15138                           tosh	equ	0xFFE
 15139                           tosl	equ	0xFFD
 15140                           pclath	equ	0xFFA
 15141                           tblptru	equ	0xFF8
 15142                           tblptrh	equ	0xFF7
 15143                           tblptrl	equ	0xFF6
 15144                           tablat	equ	0xFF5
 15145                           prodh	equ	0xFF4
 15146                           prodl	equ	0xFF3
 15147                           intcon	equ	0xFF2
 15148                           postinc0	equ	0xFEE
 15149                           wreg	equ	0xFE8
 15150                           postdec1	equ	0xFE5
 15151                           fsr1h	equ	0xFE2
 15152                           fsr1l	equ	0xFE1
 15153                           indf2	equ	0xFDF
 15154                           postinc2	equ	0xFDE
 15155                           postdec2	equ	0xFDD
 15156                           plusw2	equ	0xFDB
 15157                           fsr2h	equ	0xFDA
 15158                           fsr2l	equ	0xFD9
 15159                           status	equ	0xFD8
 15160                           
 15161 ;; *************** function _OutSeg *****************
 15162 ;; Defined at:
 15163 ;;		line 54 in file "HMI.c"
 15164 ;; Parameters:    Size  Location     Type
 15165 ;;  pInput          1    wreg     unsigned char 
 15166 ;;  pSegment        1    3[BANK0 ] unsigned char 
 15167 ;; Auto vars:     Size  Location     Type
 15168 ;;  pInput          1    6[BANK0 ] unsigned char 
 15169 ;;  out             1    7[BANK0 ] volatile unsigned char 
 15170 ;; Return value:  Size  Location     Type
 15171 ;;                  1    wreg      void 
 15172 ;; Registers used:
 15173 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15174 ;; Tracked objects:
 15175 ;;		On entry : 0/0
 15176 ;;		On exit  : 0/0
 15177 ;;		Unchanged: 0/0
 15178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15179 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15182 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15183 ;;Total ram usage:        5 bytes
 15184 ;; Hardware stack levels used:    1
 15185 ;; Hardware stack levels required when called:    8
 15186 ;; This function calls:
 15187 ;;		_SPI_Send
 15188 ;; This function is called by:
 15189 ;;		_HMI_Render
 15190 ;;		_HMI_GRender
 15191 ;; This function uses a non-reentrant model
 15192 ;;
 15193                           
 15194                           	psect	text61
 15195  01565C                     __ptext61:
 15196                           	opt stack 0
 15197  01565C                     _OutSeg:
 15198                           	opt stack 21
 15199                           
 15200                           ; BSR set to: 0
 15201                           ;incstack = 0
 15202                           ;OutSeg@pInput stored from wreg
 15203  01565C  0100               	movlb	0	; () banked
 15204  01565E  6F66               	movwf	OutSeg@pInput& (0+255),b
 15205                           
 15206                           ;HMI.c: 58: static UINT8 cur;
 15207                           ;HMI.c: 59: volatile UINT8 out;
 15208                           ;HMI.c: 60: static UINT8 segset;
 15209                           ;HMI.c: 61: static UINT8 a;
 15210                           ;HMI.c: 83: if (pSegment <= 8)
 15211  015660  0E09               	movlw	9
 15212  015662  0100               	movlb	0	; () banked
 15213  015664  6163               	cpfslt	OutSeg@pSegment& (0+255),b
 15214  015666  0012               	return	
 15215                           
 15216                           ; BSR set to: 0
 15217                           ;HMI.c: 84: {
 15218                           ;HMI.c: 85: cur = pInput;
 15219  015668  C066  F034         	movff	OutSeg@pInput,OutSeg@cur
 15220                           
 15221                           ; BSR set to: 0
 15222                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
 15223  01566C  0E00               	movlw	0
 15224  01566E  6E32               	movwf	OutSeg@a,c
 15225  015670                     l13844:
 15226                           
 15227                           ; BSR set to: 0
 15228  015670  0E07               	movlw	7
 15229  015672  6432               	cpfsgt	OutSeg@a,c
 15230  015674  D001               	goto	l1146
 15231  015676  D027               	goto	u11560
 15232  015678                     l1146:
 15233                           
 15234                           ;HMI.c: 87: {
 15235                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
 15236                           
 15237                           ; BSR set to: 0
 15238  015678  C034  F064         	movff	OutSeg@cur,??_OutSeg
 15239  01567C  0E01               	movlw	1
 15240  01567E  0100               	movlb	0	; () banked
 15241  015680  1764               	andwf	??_OutSeg& (0+255),f,b
 15242  015682  0E06               	movlw	6
 15243  015684  0100               	movlb	0	; () banked
 15244  015686  6F65               	movwf	(??_OutSeg+1)& (0+255),b
 15245  015688                     u11555:
 15246  015688  0100               	movlb	0	; () banked
 15247  01568A  90D8               	bcf	status,0,c
 15248  01568C  3764               	rlcf	??_OutSeg& (0+255),f,b
 15249  01568E  0100               	movlb	0	; () banked
 15250  015690  2F65               	decfsz	(??_OutSeg+1)& (0+255),f,b
 15251  015692  D7FA               	goto	u11555
 15252  015694  0100               	movlb	0	; () banked
 15253  015696  5164               	movf	??_OutSeg& (0+255),w,b
 15254  015698  6E33               	movwf	OutSeg@segset,c
 15255                           
 15256                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
 15257  01569A  0100               	movlb	0	; () banked
 15258  01569C  3963               	swapf	OutSeg@pSegment& (0+255),w,b
 15259  01569E  42E8               	rrncf	wreg,f,c
 15260  0156A0  0BF8               	andlw	248
 15261  0156A2  1032               	iorwf	OutSeg@a,w,c
 15262  0156A4  1033               	iorwf	OutSeg@segset,w,c
 15263  0156A6  0100               	movlb	0	; () banked
 15264  0156A8  6F67               	movwf	OutSeg@out& (0+255),b	;volatile
 15265                           
 15266                           ;HMI.c: 90: cur >>= 1;
 15267  0156AA  90D8               	bcf	status,0,c
 15268  0156AC  3234               	rrcf	OutSeg@cur,f,c
 15269                           
 15270                           ; BSR set to: 0
 15271                           ;HMI.c: 91: SPI_Send(&SPI1, out);
 15272  0156AE  0E58               	movlw	low _SPI1
 15273  0156B0  0100               	movlb	0	; () banked
 15274  0156B2  6F60               	movwf	SPI_Send@pInput& (0+255),b
 15275  0156B4  0E01               	movlw	high _SPI1
 15276  0156B6  0100               	movlb	0	; () banked
 15277  0156B8  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 15278  0156BA  C067  F062         	movff	OutSeg@out,SPI_Send@pData	;volatile
 15279  0156BE  EC21  F0AE         	call	_SPI_Send	;wreg free
 15280  0156C2  2A32               	incf	OutSeg@a,f,c
 15281  0156C4  D7D5               	goto	l13844
 15282  0156C6                     u11560:
 15283                           
 15284                           ;HMI.c: 96: }
 15285                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
 15286  0156C6  0E58               	movlw	low _SPI1
 15287  0156C8  0100               	movlb	0	; () banked
 15288  0156CA  6F60               	movwf	SPI_Send@pInput& (0+255),b
 15289  0156CC  0E01               	movlw	high _SPI1
 15290  0156CE  0100               	movlb	0	; () banked
 15291  0156D0  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 15292  0156D2  0E00               	movlw	0
 15293  0156D4  0100               	movlb	0	; () banked
 15294  0156D6  6F62               	movwf	SPI_Send@pData& (0+255),b
 15295  0156D8  EC21  F0AE         	call	_SPI_Send	;wreg free
 15296  0156DC  0012               	return	
 15297  0156DE                     __end_of_OutSeg:
 15298                           	opt stack 0
 15299                           tosu	equ	0xFFF
 15300                           tosh	equ	0xFFE
 15301                           tosl	equ	0xFFD
 15302                           pclath	equ	0xFFA
 15303                           tblptru	equ	0xFF8
 15304                           tblptrh	equ	0xFF7
 15305                           tblptrl	equ	0xFF6
 15306                           tablat	equ	0xFF5
 15307                           prodh	equ	0xFF4
 15308                           prodl	equ	0xFF3
 15309                           intcon	equ	0xFF2
 15310                           postinc0	equ	0xFEE
 15311                           wreg	equ	0xFE8
 15312                           postdec1	equ	0xFE5
 15313                           fsr1h	equ	0xFE2
 15314                           fsr1l	equ	0xFE1
 15315                           indf2	equ	0xFDF
 15316                           postinc2	equ	0xFDE
 15317                           postdec2	equ	0xFDD
 15318                           plusw2	equ	0xFDB
 15319                           fsr2h	equ	0xFDA
 15320                           fsr2l	equ	0xFD9
 15321                           status	equ	0xFD8
 15322                           
 15323 ;; *************** function _HMI_Poll *****************
 15324 ;; Defined at:
 15325 ;;		line 252 in file "HMI.c"
 15326 ;; Parameters:    Size  Location     Type
 15327 ;;		None
 15328 ;; Auto vars:     Size  Location     Type
 15329 ;;		None
 15330 ;; Return value:  Size  Location     Type
 15331 ;;                  1    wreg      void 
 15332 ;; Registers used:
 15333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15334 ;; Tracked objects:
 15335 ;;		On entry : 0/0
 15336 ;;		On exit  : 0/0
 15337 ;;		Unchanged: 0/0
 15338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15343 ;;Total ram usage:        0 bytes
 15344 ;; Hardware stack levels used:    1
 15345 ;; Hardware stack levels required when called:   15
 15346 ;; This function calls:
 15347 ;;		_Button_Poll
 15348 ;; This function is called by:
 15349 ;;		_main
 15350 ;; This function uses a non-reentrant model
 15351 ;;
 15352                           
 15353                           	psect	text62
 15354  015936                     __ptext62:
 15355                           	opt stack 0
 15356  015936                     _HMI_Poll:
 15357                           	opt stack 15
 15358                           
 15359                           ;HMI.c: 254: TRISE = 0xFC;
 15360                           
 15361                           ;incstack = 0
 15362  015936  0EFC               	movlw	252
 15363  015938  6E96               	movwf	3990,c	;volatile
 15364                           
 15365                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 15366  01593A  0E4E               	movlw	low (_HMIBoard+48)
 15367  01593C  0100               	movlb	0	; () banked
 15368  01593E  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 15369  015940  0E01               	movlw	high (_HMIBoard+48)
 15370  015942  0100               	movlb	0	; () banked
 15371  015944  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15372  015946  0E01               	movlw	1
 15373  015948  0100               	movlb	0	; () banked
 15374  01594A  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 15375  01594C  ECF1  F09B         	call	_Button_Poll	;wreg free
 15376                           
 15377                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 15378  015950  0E30               	movlw	low (_HMIBoard+18)
 15379  015952  0100               	movlb	0	; () banked
 15380  015954  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 15381  015956  0E01               	movlw	high (_HMIBoard+18)
 15382  015958  0100               	movlb	0	; () banked
 15383  01595A  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15384  01595C  0E01               	movlw	1
 15385  01595E  0100               	movlb	0	; () banked
 15386  015960  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 15387  015962  ECF1  F09B         	call	_Button_Poll	;wreg free
 15388                           
 15389                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 15390  015966  0E26               	movlw	low (_HMIBoard+8)
 15391  015968  0100               	movlb	0	; () banked
 15392  01596A  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 15393  01596C  0E01               	movlw	high (_HMIBoard+8)
 15394  01596E  0100               	movlb	0	; () banked
 15395  015970  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15396  015972  0E01               	movlw	1
 15397  015974  0100               	movlb	0	; () banked
 15398  015976  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 15399  015978  ECF1  F09B         	call	_Button_Poll	;wreg free
 15400                           
 15401                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 15402  01597C  0E3A               	movlw	low (_HMIBoard+28)
 15403  01597E  0100               	movlb	0	; () banked
 15404  015980  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 15405  015982  0E01               	movlw	high (_HMIBoard+28)
 15406  015984  0100               	movlb	0	; () banked
 15407  015986  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15408  015988  0E01               	movlw	1
 15409  01598A  0100               	movlb	0	; () banked
 15410  01598C  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 15411  01598E  ECF1  F09B         	call	_Button_Poll	;wreg free
 15412                           
 15413                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 15414  015992  0E44               	movlw	low (_HMIBoard+38)
 15415  015994  0100               	movlb	0	; () banked
 15416  015996  6F7B               	movwf	Button_Poll@pButton& (0+255),b
 15417  015998  0E01               	movlw	high (_HMIBoard+38)
 15418  01599A  0100               	movlb	0	; () banked
 15419  01599C  6F7C               	movwf	(Button_Poll@pButton+1)& (0+255),b
 15420  01599E  0E01               	movlw	1
 15421  0159A0  0100               	movlb	0	; () banked
 15422  0159A2  6F7D               	movwf	Button_Poll@pIncrement& (0+255),b
 15423  0159A4  ECF1  F09B         	call	_Button_Poll	;wreg free
 15424  0159A8  0012               	return		;funcret
 15425  0159AA                     __end_of_HMI_Poll:
 15426                           	opt stack 0
 15427                           tosu	equ	0xFFF
 15428                           tosh	equ	0xFFE
 15429                           tosl	equ	0xFFD
 15430                           pclath	equ	0xFFA
 15431                           tblptru	equ	0xFF8
 15432                           tblptrh	equ	0xFF7
 15433                           tblptrl	equ	0xFF6
 15434                           tablat	equ	0xFF5
 15435                           prodh	equ	0xFF4
 15436                           prodl	equ	0xFF3
 15437                           intcon	equ	0xFF2
 15438                           postinc0	equ	0xFEE
 15439                           wreg	equ	0xFE8
 15440                           postdec1	equ	0xFE5
 15441                           fsr1h	equ	0xFE2
 15442                           fsr1l	equ	0xFE1
 15443                           indf2	equ	0xFDF
 15444                           postinc2	equ	0xFDE
 15445                           postdec2	equ	0xFDD
 15446                           plusw2	equ	0xFDB
 15447                           fsr2h	equ	0xFDA
 15448                           fsr2l	equ	0xFD9
 15449                           status	equ	0xFD8
 15450                           
 15451 ;; *************** function _Button_Poll *****************
 15452 ;; Defined at:
 15453 ;;		line 57 in file "Library/Button.c"
 15454 ;; Parameters:    Size  Location     Type
 15455 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 15456 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 15457 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 15458 ;; Auto vars:     Size  Location     Type
 15459 ;;  Pin             1   35[BANK0 ] unsigned char 
 15460 ;; Return value:  Size  Location     Type
 15461 ;;                  1    wreg      unsigned char 
 15462 ;; Registers used:
 15463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 15464 ;; Tracked objects:
 15465 ;;		On entry : 0/0
 15466 ;;		On exit  : 0/0
 15467 ;;		Unchanged: 0/0
 15468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15469 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15471 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15472 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15473 ;;Total ram usage:        9 bytes
 15474 ;; Hardware stack levels used:    1
 15475 ;; Hardware stack levels required when called:   14
 15476 ;; This function calls:
 15477 ;;		_Event_DIPSwitch
 15478 ;;		_Event_NULL
 15479 ;;		_Event_TestButton
 15480 ;;		_HMI_DIPSwitch
 15481 ;;		_HMI_DownSwitch
 15482 ;;		_HMI_LeftSwitch
 15483 ;;		_HMI_RightSwitch
 15484 ;;		_HMI_UpSwitch
 15485 ;;		_MXK_DIPSwitch
 15486 ;;		_MXK_TestButton
 15487 ;; This function is called by:
 15488 ;;		_HMI_Poll
 15489 ;;		_MXK_Poll
 15490 ;; This function uses a non-reentrant model
 15491 ;;
 15492                           
 15493                           	psect	text63
 15494  0137E2                     __ptext63:
 15495                           	opt stack 0
 15496  0137E2                     _Button_Poll:
 15497                           	opt stack 15
 15498                           
 15499                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 15500                           
 15501                           ;incstack = 0
 15502  0137E2  0100               	movlb	0	; () banked
 15503  0137E4  EE20 F007          	lfsr	2,7
 15504  0137E8  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15505  0137EA  26D9               	addwf	fsr2l,f,c
 15506  0137EC  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15507  0137EE  22DA               	addwfc	fsr2h,f,c
 15508  0137F0  D801               	call	u11318
 15509  0137F2  D00A               	goto	u11319
 15510  0137F4                     u11318:
 15511  0137F4  0005               	push	
 15512  0137F6  6EFA               	movwf	pclath,c
 15513  0137F8  50DE               	movf	postinc2,w,c
 15514  0137FA  6EFD               	movwf	tosl,c
 15515  0137FC  50DE               	movf	postinc2,w,c
 15516  0137FE  6EFE               	movwf	tosh,c
 15517  013800  50DE               	movf	postinc2,w,c
 15518  013802  6EFF               	movwf	tosu,c
 15519  013804  50FA               	movf	pclath,w,c
 15520  013806  0012               	return		;indir
 15521  013808                     u11319:
 15522  013808  0100               	movlb	0	; () banked
 15523  01380A  6F83               	movwf	Button_Poll@Pin& (0+255),b
 15524                           
 15525                           ; BSR set to: 0
 15526                           ;Button.c: 61: if (pButton->mState == Pin)
 15527  01380C  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 15528  013810  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 15529  013814  0100               	movlb	0	; () banked
 15530  013816  5183               	movf	Button_Poll@Pin& (0+255),w,b
 15531  013818  18DE               	xorwf	postinc2,w,c
 15532  01381A  A4D8               	btfss	status,2,c
 15533  01381C  D021               	goto	l11
 15534                           
 15535                           ; BSR set to: 0
 15536                           ;Button.c: 62: {
 15537                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 15538  01381E  0100               	movlb	0	; () banked
 15539  013820  EE20 F001          	lfsr	2,1
 15540  013824  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15541  013826  26D9               	addwf	fsr2l,f,c
 15542  013828  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15543  01382A  22DA               	addwfc	fsr2h,f,c
 15544  01382C  0100               	movlb	0	; () banked
 15545  01382E  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 15546  013830  5CDE               	subwf	postinc2,w,c
 15547  013832  B0D8               	btfsc	status,0,c
 15548  013834  D00A               	goto	l12
 15549                           
 15550                           ; BSR set to: 0
 15551                           ;Button.c: 66: pButton->mCount = 0;
 15552  013836  0100               	movlb	0	; () banked
 15553  013838  EE20 F001          	lfsr	2,1
 15554  01383C  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15555  01383E  26D9               	addwf	fsr2l,f,c
 15556  013840  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15557  013842  22DA               	addwfc	fsr2h,f,c
 15558  013844  0E00               	movlw	0
 15559  013846  6EDF               	movwf	indf2,c
 15560  013848  0012               	return	
 15561  01384A                     l12:
 15562                           
 15563                           ; BSR set to: 0
 15564                           ;Button.c: 67: else
 15565                           ;Button.c: 68: pButton->mCount -= pIncrement;
 15566                           
 15567                           ; BSR set to: 0
 15568  01384A  0100               	movlb	0	; () banked
 15569  01384C  EE20 F001          	lfsr	2,1
 15570  013850  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15571  013852  26D9               	addwf	fsr2l,f,c
 15572  013854  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15573  013856  22DA               	addwfc	fsr2h,f,c
 15574  013858  0100               	movlb	0	; () banked
 15575  01385A  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 15576  01385C  5EDF               	subwf	indf2,f,c
 15577                           
 15578                           ; BSR set to: 0
 15579                           ;Button.c: 69: }
 15580  01385E  0012               	return	
 15581  013860                     l11:
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 15585                           
 15586                           ; BSR set to: 0
 15587  013860  0100               	movlb	0	; () banked
 15588  013862  EE20 F001          	lfsr	2,1
 15589  013866  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15590  013868  26D9               	addwf	fsr2l,f,c
 15591  01386A  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15592  01386C  22DA               	addwfc	fsr2h,f,c
 15593  01386E  50DF               	movf	indf2,w,c
 15594  013870  0100               	movlb	0	; () banked
 15595  013872  6F7E               	movwf	??_Button_Poll& (0+255),b
 15596  013874  6B7F               	clrf	(??_Button_Poll+1)& (0+255),b
 15597  013876  0100               	movlb	0	; () banked
 15598  013878  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 15599  01387A  0100               	movlb	0	; () banked
 15600  01387C  277E               	addwf	??_Button_Poll& (0+255),f,b
 15601  01387E  0E00               	movlw	0
 15602  013880  237F               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 15603  013882  0100               	movlb	0	; () banked
 15604  013884  EE20 F001          	lfsr	2,1
 15605  013888  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15606  01388A  26D9               	addwf	fsr2l,f,c
 15607  01388C  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15608  01388E  22DA               	addwfc	fsr2h,f,c
 15609  013890  50DF               	movf	indf2,w,c
 15610  013892  0100               	movlb	0	; () banked
 15611  013894  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 15612  013896  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 15613  013898  0100               	movlb	0	; () banked
 15614  01389A  517E               	movf	??_Button_Poll& (0+255),w,b
 15615  01389C  0100               	movlb	0	; () banked
 15616  01389E  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 15617  0138A0  0100               	movlb	0	; () banked
 15618  0138A2  5181               	movf	(??_Button_Poll+3)& (0+255),w,b
 15619  0138A4  0A80               	xorlw	128
 15620  0138A6  0100               	movlb	0	; () banked
 15621  0138A8  6F82               	movwf	(??_Button_Poll+4)& (0+255),b
 15622  0138AA  0100               	movlb	0	; () banked
 15623  0138AC  517F               	movf	(??_Button_Poll+1)& (0+255),w,b
 15624  0138AE  0A80               	xorlw	128
 15625  0138B0  0100               	movlb	0	; () banked
 15626  0138B2  5982               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 15627  0138B4  B0D8               	btfsc	status,0,c
 15628  0138B6  0012               	return	
 15629                           
 15630                           ; BSR set to: 0
 15631                           ;Button.c: 73: {
 15632                           ;Button.c: 75: pButton->mCount += pIncrement;
 15633  0138B8  0100               	movlb	0	; () banked
 15634  0138BA  EE20 F001          	lfsr	2,1
 15635  0138BE  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15636  0138C0  26D9               	addwf	fsr2l,f,c
 15637  0138C2  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15638  0138C4  22DA               	addwfc	fsr2h,f,c
 15639  0138C6  0100               	movlb	0	; () banked
 15640  0138C8  517D               	movf	Button_Poll@pIncrement& (0+255),w,b
 15641  0138CA  26DF               	addwf	indf2,f,c
 15642                           
 15643                           ; BSR set to: 0
 15644                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 15645  0138CC  0100               	movlb	0	; () banked
 15646  0138CE  EE20 F002          	lfsr	2,2
 15647  0138D2  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15648  0138D4  26D9               	addwf	fsr2l,f,c
 15649  0138D6  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15650  0138D8  22DA               	addwfc	fsr2h,f,c
 15651  0138DA  0100               	movlb	0	; () banked
 15652  0138DC  EE10 F001          	lfsr	1,1
 15653  0138E0  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15654  0138E2  26E1               	addwf	fsr1l,f,c
 15655  0138E4  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15656  0138E6  22E2               	addwfc	fsr1h,f,c
 15657  0138E8  50E7               	movf	indf1,w,c
 15658  0138EA  0100               	movlb	0	; () banked
 15659  0138EC  6F80               	movwf	(??_Button_Poll+2)& (0+255),b
 15660  0138EE  6B81               	clrf	(??_Button_Poll+3)& (0+255),b
 15661  0138F0  50DE               	movf	postinc2,w,c
 15662  0138F2  0100               	movlb	0	; () banked
 15663  0138F4  5D80               	subwf	(??_Button_Poll+2)& (0+255),w,b
 15664  0138F6  50DE               	movf	postinc2,w,c
 15665  0138F8  0100               	movlb	0	; () banked
 15666  0138FA  5981               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 15667  0138FC  A0D8               	btfss	status,0,c
 15668  0138FE  0012               	return	
 15669                           
 15670                           ; BSR set to: 0
 15671                           ;Button.c: 77: {
 15672                           ;Button.c: 79: pButton->mState = Pin;
 15673  013900  C07B  FFD9         	movff	Button_Poll@pButton,fsr2l
 15674  013904  C07C  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 15675  013908  C083  FFDF         	movff	Button_Poll@Pin,indf2
 15676                           
 15677                           ; BSR set to: 0
 15678                           ;Button.c: 80: pButton->mCount = 0;
 15679  01390C  0100               	movlb	0	; () banked
 15680  01390E  EE20 F001          	lfsr	2,1
 15681  013912  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15682  013914  26D9               	addwf	fsr2l,f,c
 15683  013916  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15684  013918  22DA               	addwfc	fsr2h,f,c
 15685  01391A  0E00               	movlw	0
 15686  01391C  6EDF               	movwf	indf2,c
 15687                           
 15688                           ; BSR set to: 0
 15689                           ;Button.c: 83: pButton->mFunction(Pin);
 15690  01391E  0100               	movlb	0	; () banked
 15691  013920  EE20 F004          	lfsr	2,4
 15692  013924  517B               	movf	Button_Poll@pButton& (0+255),w,b
 15693  013926  26D9               	addwf	fsr2l,f,c
 15694  013928  517C               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 15695  01392A  22DA               	addwfc	fsr2h,f,c
 15696  01392C  D801               	call	u11368
 15697  01392E  0012               	return	
 15698  013930                     u11368:
 15699  013930  0005               	push	
 15700  013932  6EFA               	movwf	pclath,c
 15701  013934  50DE               	movf	postinc2,w,c
 15702  013936  6EFD               	movwf	tosl,c
 15703  013938  50DE               	movf	postinc2,w,c
 15704  01393A  6EFE               	movwf	tosh,c
 15705  01393C  50DE               	movf	postinc2,w,c
 15706  01393E  6EFF               	movwf	tosu,c
 15707  013940  50FA               	movf	pclath,w,c
 15708  013942  0100               	movlb	0	; () banked
 15709  013944  5183               	movf	Button_Poll@Pin& (0+255),w,b
 15710  013946  0012               	return		;indir
 15711  013948                     __end_of_Button_Poll:
 15712                           	opt stack 0
 15713                           tosu	equ	0xFFF
 15714                           tosh	equ	0xFFE
 15715                           tosl	equ	0xFFD
 15716                           pclath	equ	0xFFA
 15717                           tblptru	equ	0xFF8
 15718                           tblptrh	equ	0xFF7
 15719                           tblptrl	equ	0xFF6
 15720                           tablat	equ	0xFF5
 15721                           prodh	equ	0xFF4
 15722                           prodl	equ	0xFF3
 15723                           intcon	equ	0xFF2
 15724                           postinc0	equ	0xFEE
 15725                           wreg	equ	0xFE8
 15726                           indf1	equ	0xFE7
 15727                           postdec1	equ	0xFE5
 15728                           fsr1h	equ	0xFE2
 15729                           fsr1l	equ	0xFE1
 15730                           indf2	equ	0xFDF
 15731                           postinc2	equ	0xFDE
 15732                           postdec2	equ	0xFDD
 15733                           plusw2	equ	0xFDB
 15734                           fsr2h	equ	0xFDA
 15735                           fsr2l	equ	0xFD9
 15736                           status	equ	0xFD8
 15737                           
 15738 ;; *************** function _MXK_DIPSwitch *****************
 15739 ;; Defined at:
 15740 ;;		line 24 in file "Library/MXK.c"
 15741 ;; Parameters:    Size  Location     Type
 15742 ;;		None
 15743 ;; Auto vars:     Size  Location     Type
 15744 ;;		None
 15745 ;; Return value:  Size  Location     Type
 15746 ;;                  1    wreg      unsigned char 
 15747 ;; Registers used:
 15748 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15749 ;; Tracked objects:
 15750 ;;		On entry : 0/0
 15751 ;;		On exit  : 0/0
 15752 ;;		Unchanged: 0/0
 15753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15758 ;;Total ram usage:        0 bytes
 15759 ;; Hardware stack levels used:    1
 15760 ;; Hardware stack levels required when called:    8
 15761 ;; This function calls:
 15762 ;;		_Port_GetQuad
 15763 ;; This function is called by:
 15764 ;;		_FunctInitButton
 15765 ;;		_Button_Poll
 15766 ;;		_main
 15767 ;; This function uses a non-reentrant model
 15768 ;;
 15769                           
 15770                           	psect	text64
 15771  016910                     __ptext64:
 15772                           	opt stack 0
 15773  016910                     _MXK_DIPSwitch:
 15774                           	opt stack 22
 15775                           
 15776                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 15777                           
 15778                           ;incstack = 0
 15779  016910  0E96               	movlw	low _PortD
 15780  016912  0100               	movlb	0	; () banked
 15781  016914  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 15782  016916  0E01               	movlw	high _PortD
 15783  016918  0100               	movlb	0	; () banked
 15784  01691A  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 15785  01691C  0E00               	movlw	0
 15786  01691E  0100               	movlb	0	; () banked
 15787  016920  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 15788  016922  EC42  F0B0         	call	_Port_GetQuad
 15789  016926  0012               	return	
 15790  016928                     __end_of_MXK_DIPSwitch:
 15791                           	opt stack 0
 15792                           tosu	equ	0xFFF
 15793                           tosh	equ	0xFFE
 15794                           tosl	equ	0xFFD
 15795                           pclath	equ	0xFFA
 15796                           tblptru	equ	0xFF8
 15797                           tblptrh	equ	0xFF7
 15798                           tblptrl	equ	0xFF6
 15799                           tablat	equ	0xFF5
 15800                           prodh	equ	0xFF4
 15801                           prodl	equ	0xFF3
 15802                           intcon	equ	0xFF2
 15803                           postinc0	equ	0xFEE
 15804                           wreg	equ	0xFE8
 15805                           indf1	equ	0xFE7
 15806                           postdec1	equ	0xFE5
 15807                           fsr1h	equ	0xFE2
 15808                           fsr1l	equ	0xFE1
 15809                           indf2	equ	0xFDF
 15810                           postinc2	equ	0xFDE
 15811                           postdec2	equ	0xFDD
 15812                           plusw2	equ	0xFDB
 15813                           fsr2h	equ	0xFDA
 15814                           fsr2l	equ	0xFD9
 15815                           status	equ	0xFD8
 15816                           
 15817 ;; *************** function _HMI_DIPSwitch *****************
 15818 ;; Defined at:
 15819 ;;		line 47 in file "HMI.c"
 15820 ;; Parameters:    Size  Location     Type
 15821 ;;		None
 15822 ;; Auto vars:     Size  Location     Type
 15823 ;;		None
 15824 ;; Return value:  Size  Location     Type
 15825 ;;                  1    wreg      unsigned char 
 15826 ;; Registers used:
 15827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15828 ;; Tracked objects:
 15829 ;;		On entry : 0/0
 15830 ;;		On exit  : 0/0
 15831 ;;		Unchanged: 0/0
 15832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15836 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15837 ;;Total ram usage:        0 bytes
 15838 ;; Hardware stack levels used:    1
 15839 ;; Hardware stack levels required when called:    8
 15840 ;; This function calls:
 15841 ;;		_Port_GetQuad
 15842 ;; This function is called by:
 15843 ;;		_HMI_Init
 15844 ;;		_Button_Poll
 15845 ;;		_main
 15846 ;; This function uses a non-reentrant model
 15847 ;;
 15848                           
 15849                           	psect	text65
 15850  016928                     __ptext65:
 15851                           	opt stack 0
 15852  016928                     _HMI_DIPSwitch:
 15853                           	opt stack 20
 15854                           
 15855                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 15856                           
 15857                           ;incstack = 0
 15858  016928  0E8C               	movlw	low _PortE
 15859  01692A  0100               	movlb	0	; () banked
 15860  01692C  6F60               	movwf	Port_GetQuad@pInput& (0+255),b
 15861  01692E  0E01               	movlw	high _PortE
 15862  016930  0100               	movlb	0	; () banked
 15863  016932  6F61               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 15864  016934  0E00               	movlw	0
 15865  016936  0100               	movlb	0	; () banked
 15866  016938  6F62               	movwf	Port_GetQuad@pQuad& (0+255),b
 15867  01693A  EC42  F0B0         	call	_Port_GetQuad	;wreg free
 15868  01693E  0012               	return	
 15869  016940                     __end_of_HMI_DIPSwitch:
 15870                           	opt stack 0
 15871                           tosu	equ	0xFFF
 15872                           tosh	equ	0xFFE
 15873                           tosl	equ	0xFFD
 15874                           pclath	equ	0xFFA
 15875                           tblptru	equ	0xFF8
 15876                           tblptrh	equ	0xFF7
 15877                           tblptrl	equ	0xFF6
 15878                           tablat	equ	0xFF5
 15879                           prodh	equ	0xFF4
 15880                           prodl	equ	0xFF3
 15881                           intcon	equ	0xFF2
 15882                           postinc0	equ	0xFEE
 15883                           wreg	equ	0xFE8
 15884                           indf1	equ	0xFE7
 15885                           postdec1	equ	0xFE5
 15886                           fsr1h	equ	0xFE2
 15887                           fsr1l	equ	0xFE1
 15888                           indf2	equ	0xFDF
 15889                           postinc2	equ	0xFDE
 15890                           postdec2	equ	0xFDD
 15891                           plusw2	equ	0xFDB
 15892                           fsr2h	equ	0xFDA
 15893                           fsr2l	equ	0xFD9
 15894                           status	equ	0xFD8
 15895                           
 15896 ;; *************** function _HMI_DownSwitch *****************
 15897 ;; Defined at:
 15898 ;;		line 42 in file "HMI.c"
 15899 ;; Parameters:    Size  Location     Type
 15900 ;;		None
 15901 ;; Auto vars:     Size  Location     Type
 15902 ;;		None
 15903 ;; Return value:  Size  Location     Type
 15904 ;;                  1    wreg      unsigned char 
 15905 ;; Registers used:
 15906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15907 ;; Tracked objects:
 15908 ;;		On entry : 0/0
 15909 ;;		On exit  : 0/0
 15910 ;;		Unchanged: 0/0
 15911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15916 ;;Total ram usage:        0 bytes
 15917 ;; Hardware stack levels used:    1
 15918 ;; Hardware stack levels required when called:    8
 15919 ;; This function calls:
 15920 ;;		_Port_GetPin
 15921 ;; This function is called by:
 15922 ;;		_HMI_Init
 15923 ;;		_Button_Poll
 15924 ;;		_main
 15925 ;; This function uses a non-reentrant model
 15926 ;;
 15927                           
 15928                           	psect	text66
 15929  016940                     __ptext66:
 15930                           	opt stack 0
 15931  016940                     _HMI_DownSwitch:
 15932                           	opt stack 20
 15933                           
 15934                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 15935                           
 15936                           ;incstack = 0
 15937  016940  0E8C               	movlw	low _PortE
 15938  016942  0100               	movlb	0	; () banked
 15939  016944  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 15940  016946  0E01               	movlw	high _PortE
 15941  016948  0100               	movlb	0	; () banked
 15942  01694A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 15943  01694C  0E06               	movlw	6
 15944  01694E  0100               	movlb	0	; () banked
 15945  016950  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 15946  016952  ECF7  F0B0         	call	_Port_GetPin	;wreg free
 15947  016956  0012               	return	
 15948  016958                     __end_of_HMI_DownSwitch:
 15949                           	opt stack 0
 15950                           tosu	equ	0xFFF
 15951                           tosh	equ	0xFFE
 15952                           tosl	equ	0xFFD
 15953                           pclath	equ	0xFFA
 15954                           tblptru	equ	0xFF8
 15955                           tblptrh	equ	0xFF7
 15956                           tblptrl	equ	0xFF6
 15957                           tablat	equ	0xFF5
 15958                           prodh	equ	0xFF4
 15959                           prodl	equ	0xFF3
 15960                           intcon	equ	0xFF2
 15961                           postinc0	equ	0xFEE
 15962                           wreg	equ	0xFE8
 15963                           indf1	equ	0xFE7
 15964                           postdec1	equ	0xFE5
 15965                           fsr1h	equ	0xFE2
 15966                           fsr1l	equ	0xFE1
 15967                           indf2	equ	0xFDF
 15968                           postinc2	equ	0xFDE
 15969                           postdec2	equ	0xFDD
 15970                           plusw2	equ	0xFDB
 15971                           fsr2h	equ	0xFDA
 15972                           fsr2l	equ	0xFD9
 15973                           status	equ	0xFD8
 15974                           
 15975 ;; *************** function _HMI_UpSwitch *****************
 15976 ;; Defined at:
 15977 ;;		line 37 in file "HMI.c"
 15978 ;; Parameters:    Size  Location     Type
 15979 ;;		None
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;		None
 15982 ;; Return value:  Size  Location     Type
 15983 ;;                  1    wreg      unsigned char 
 15984 ;; Registers used:
 15985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 15986 ;; Tracked objects:
 15987 ;;		On entry : 0/0
 15988 ;;		On exit  : 0/0
 15989 ;;		Unchanged: 0/0
 15990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15995 ;;Total ram usage:        0 bytes
 15996 ;; Hardware stack levels used:    1
 15997 ;; Hardware stack levels required when called:    8
 15998 ;; This function calls:
 15999 ;;		_Port_GetPin
 16000 ;; This function is called by:
 16001 ;;		_HMI_Init
 16002 ;;		_Button_Poll
 16003 ;;		_main
 16004 ;; This function uses a non-reentrant model
 16005 ;;
 16006                           
 16007                           	psect	text67
 16008  016958                     __ptext67:
 16009                           	opt stack 0
 16010  016958                     _HMI_UpSwitch:
 16011                           	opt stack 22
 16012                           
 16013                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 16014                           
 16015                           ;incstack = 0
 16016  016958  0E8C               	movlw	low _PortE
 16017  01695A  0100               	movlb	0	; () banked
 16018  01695C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 16019  01695E  0E01               	movlw	high _PortE
 16020  016960  0100               	movlb	0	; () banked
 16021  016962  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 16022  016964  0E07               	movlw	7
 16023  016966  0100               	movlb	0	; () banked
 16024  016968  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 16025  01696A  ECF7  F0B0         	call	_Port_GetPin	;wreg free
 16026  01696E  0012               	return	
 16027  016970                     __end_of_HMI_UpSwitch:
 16028                           	opt stack 0
 16029                           tosu	equ	0xFFF
 16030                           tosh	equ	0xFFE
 16031                           tosl	equ	0xFFD
 16032                           pclath	equ	0xFFA
 16033                           tblptru	equ	0xFF8
 16034                           tblptrh	equ	0xFF7
 16035                           tblptrl	equ	0xFF6
 16036                           tablat	equ	0xFF5
 16037                           prodh	equ	0xFF4
 16038                           prodl	equ	0xFF3
 16039                           intcon	equ	0xFF2
 16040                           postinc0	equ	0xFEE
 16041                           wreg	equ	0xFE8
 16042                           indf1	equ	0xFE7
 16043                           postdec1	equ	0xFE5
 16044                           fsr1h	equ	0xFE2
 16045                           fsr1l	equ	0xFE1
 16046                           indf2	equ	0xFDF
 16047                           postinc2	equ	0xFDE
 16048                           postdec2	equ	0xFDD
 16049                           plusw2	equ	0xFDB
 16050                           fsr2h	equ	0xFDA
 16051                           fsr2l	equ	0xFD9
 16052                           status	equ	0xFD8
 16053                           
 16054 ;; *************** function _HMI_RightSwitch *****************
 16055 ;; Defined at:
 16056 ;;		line 32 in file "HMI.c"
 16057 ;; Parameters:    Size  Location     Type
 16058 ;;		None
 16059 ;; Auto vars:     Size  Location     Type
 16060 ;;		None
 16061 ;; Return value:  Size  Location     Type
 16062 ;;                  1    wreg      unsigned char 
 16063 ;; Registers used:
 16064 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16065 ;; Tracked objects:
 16066 ;;		On entry : 0/0
 16067 ;;		On exit  : 0/0
 16068 ;;		Unchanged: 0/0
 16069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16074 ;;Total ram usage:        0 bytes
 16075 ;; Hardware stack levels used:    1
 16076 ;; Hardware stack levels required when called:    8
 16077 ;; This function calls:
 16078 ;;		_Port_GetPin
 16079 ;; This function is called by:
 16080 ;;		_HMI_Init
 16081 ;;		_Button_Poll
 16082 ;;		_main
 16083 ;; This function uses a non-reentrant model
 16084 ;;
 16085                           
 16086                           	psect	text68
 16087  016970                     __ptext68:
 16088                           	opt stack 0
 16089  016970                     _HMI_RightSwitch:
 16090                           	opt stack 22
 16091                           
 16092                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 16093                           
 16094                           ;incstack = 0
 16095  016970  0E8C               	movlw	low _PortE
 16096  016972  0100               	movlb	0	; () banked
 16097  016974  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 16098  016976  0E01               	movlw	high _PortE
 16099  016978  0100               	movlb	0	; () banked
 16100  01697A  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 16101  01697C  0E04               	movlw	4
 16102  01697E  0100               	movlb	0	; () banked
 16103  016980  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 16104  016982  ECF7  F0B0         	call	_Port_GetPin	;wreg free
 16105  016986  0012               	return	
 16106  016988                     __end_of_HMI_RightSwitch:
 16107                           	opt stack 0
 16108                           tosu	equ	0xFFF
 16109                           tosh	equ	0xFFE
 16110                           tosl	equ	0xFFD
 16111                           pclath	equ	0xFFA
 16112                           tblptru	equ	0xFF8
 16113                           tblptrh	equ	0xFF7
 16114                           tblptrl	equ	0xFF6
 16115                           tablat	equ	0xFF5
 16116                           prodh	equ	0xFF4
 16117                           prodl	equ	0xFF3
 16118                           intcon	equ	0xFF2
 16119                           postinc0	equ	0xFEE
 16120                           wreg	equ	0xFE8
 16121                           indf1	equ	0xFE7
 16122                           postdec1	equ	0xFE5
 16123                           fsr1h	equ	0xFE2
 16124                           fsr1l	equ	0xFE1
 16125                           indf2	equ	0xFDF
 16126                           postinc2	equ	0xFDE
 16127                           postdec2	equ	0xFDD
 16128                           plusw2	equ	0xFDB
 16129                           fsr2h	equ	0xFDA
 16130                           fsr2l	equ	0xFD9
 16131                           status	equ	0xFD8
 16132                           
 16133 ;; *************** function _HMI_LeftSwitch *****************
 16134 ;; Defined at:
 16135 ;;		line 27 in file "HMI.c"
 16136 ;; Parameters:    Size  Location     Type
 16137 ;;		None
 16138 ;; Auto vars:     Size  Location     Type
 16139 ;;		None
 16140 ;; Return value:  Size  Location     Type
 16141 ;;                  1    wreg      unsigned char 
 16142 ;; Registers used:
 16143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16144 ;; Tracked objects:
 16145 ;;		On entry : 0/0
 16146 ;;		On exit  : 0/0
 16147 ;;		Unchanged: 0/0
 16148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16153 ;;Total ram usage:        0 bytes
 16154 ;; Hardware stack levels used:    1
 16155 ;; Hardware stack levels required when called:    8
 16156 ;; This function calls:
 16157 ;;		_Port_GetPin
 16158 ;; This function is called by:
 16159 ;;		_HMI_Init
 16160 ;;		_Button_Poll
 16161 ;;		_main
 16162 ;; This function uses a non-reentrant model
 16163 ;;
 16164                           
 16165                           	psect	text69
 16166  016988                     __ptext69:
 16167                           	opt stack 0
 16168  016988                     _HMI_LeftSwitch:
 16169                           	opt stack 20
 16170                           
 16171                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 16172                           
 16173                           ;incstack = 0
 16174  016988  0E8C               	movlw	low _PortE
 16175  01698A  0100               	movlb	0	; () banked
 16176  01698C  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 16177  01698E  0E01               	movlw	high _PortE
 16178  016990  0100               	movlb	0	; () banked
 16179  016992  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 16180  016994  0E05               	movlw	5
 16181  016996  0100               	movlb	0	; () banked
 16182  016998  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 16183  01699A  ECF7  F0B0         	call	_Port_GetPin	;wreg free
 16184  01699E  0012               	return	
 16185  0169A0                     __end_of_HMI_LeftSwitch:
 16186                           	opt stack 0
 16187                           tosu	equ	0xFFF
 16188                           tosh	equ	0xFFE
 16189                           tosl	equ	0xFFD
 16190                           pclath	equ	0xFFA
 16191                           tblptru	equ	0xFF8
 16192                           tblptrh	equ	0xFF7
 16193                           tblptrl	equ	0xFF6
 16194                           tablat	equ	0xFF5
 16195                           prodh	equ	0xFF4
 16196                           prodl	equ	0xFF3
 16197                           intcon	equ	0xFF2
 16198                           postinc0	equ	0xFEE
 16199                           wreg	equ	0xFE8
 16200                           indf1	equ	0xFE7
 16201                           postdec1	equ	0xFE5
 16202                           fsr1h	equ	0xFE2
 16203                           fsr1l	equ	0xFE1
 16204                           indf2	equ	0xFDF
 16205                           postinc2	equ	0xFDE
 16206                           postdec2	equ	0xFDD
 16207                           plusw2	equ	0xFDB
 16208                           fsr2h	equ	0xFDA
 16209                           fsr2l	equ	0xFD9
 16210                           status	equ	0xFD8
 16211                           
 16212 ;; *************** function _MXK_TestButton *****************
 16213 ;; Defined at:
 16214 ;;		line 14 in file "Library/MXK.c"
 16215 ;; Parameters:    Size  Location     Type
 16216 ;;		None
 16217 ;; Auto vars:     Size  Location     Type
 16218 ;;		None
 16219 ;; Return value:  Size  Location     Type
 16220 ;;                  1    wreg      unsigned char 
 16221 ;; Registers used:
 16222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16223 ;; Tracked objects:
 16224 ;;		On entry : 0/0
 16225 ;;		On exit  : 0/0
 16226 ;;		Unchanged: 0/0
 16227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16232 ;;Total ram usage:        0 bytes
 16233 ;; Hardware stack levels used:    1
 16234 ;; Hardware stack levels required when called:    8
 16235 ;; This function calls:
 16236 ;;		_Port_GetPin
 16237 ;; This function is called by:
 16238 ;;		_FunctInitButton
 16239 ;;		_Button_Poll
 16240 ;;		_main
 16241 ;; This function uses a non-reentrant model
 16242 ;;
 16243                           
 16244                           	psect	text70
 16245  0169A0                     __ptext70:
 16246                           	opt stack 0
 16247  0169A0                     _MXK_TestButton:
 16248                           	opt stack 22
 16249                           
 16250                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 16251                           
 16252                           ;incstack = 0
 16253  0169A0  0EA0               	movlw	low _PortB
 16254  0169A2  0100               	movlb	0	; () banked
 16255  0169A4  6F60               	movwf	Port_GetPin@pInput& (0+255),b
 16256  0169A6  0E01               	movlw	high _PortB
 16257  0169A8  0100               	movlb	0	; () banked
 16258  0169AA  6F61               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 16259  0169AC  0E04               	movlw	4
 16260  0169AE  0100               	movlb	0	; () banked
 16261  0169B0  6F62               	movwf	Port_GetPin@pPin& (0+255),b
 16262  0169B2  ECF7  F0B0         	call	_Port_GetPin	;wreg free
 16263  0169B6  0012               	return	
 16264  0169B8                     __end_of_MXK_TestButton:
 16265                           	opt stack 0
 16266                           tosu	equ	0xFFF
 16267                           tosh	equ	0xFFE
 16268                           tosl	equ	0xFFD
 16269                           pclath	equ	0xFFA
 16270                           tblptru	equ	0xFF8
 16271                           tblptrh	equ	0xFF7
 16272                           tblptrl	equ	0xFF6
 16273                           tablat	equ	0xFF5
 16274                           prodh	equ	0xFF4
 16275                           prodl	equ	0xFF3
 16276                           intcon	equ	0xFF2
 16277                           postinc0	equ	0xFEE
 16278                           wreg	equ	0xFE8
 16279                           indf1	equ	0xFE7
 16280                           postdec1	equ	0xFE5
 16281                           fsr1h	equ	0xFE2
 16282                           fsr1l	equ	0xFE1
 16283                           indf2	equ	0xFDF
 16284                           postinc2	equ	0xFDE
 16285                           postdec2	equ	0xFDD
 16286                           plusw2	equ	0xFDB
 16287                           fsr2h	equ	0xFDA
 16288                           fsr2l	equ	0xFD9
 16289                           status	equ	0xFD8
 16290                           
 16291 ;; *************** function _Port_GetQuad *****************
 16292 ;; Defined at:
 16293 ;;		line 498 in file "Library/Port.c"
 16294 ;; Parameters:    Size  Location     Type
 16295 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 16296 ;;		 -> PortE(10), PortD(10), 
 16297 ;;  pQuad           1    2[BANK0 ] enum E6776
 16298 ;; Auto vars:     Size  Location     Type
 16299 ;;  Output          1    5[BANK0 ] unsigned char 
 16300 ;; Return value:  Size  Location     Type
 16301 ;;                  1    wreg      unsigned char 
 16302 ;; Registers used:
 16303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 16304 ;; Tracked objects:
 16305 ;;		On entry : 0/0
 16306 ;;		On exit  : 0/0
 16307 ;;		Unchanged: 0/0
 16308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16309 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16312 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16313 ;;Total ram usage:        6 bytes
 16314 ;; Hardware stack levels used:    1
 16315 ;; Hardware stack levels required when called:    7
 16316 ;; This function calls:
 16317 ;;		Nothing
 16318 ;; This function is called by:
 16319 ;;		_HMI_DIPSwitch
 16320 ;;		_MXK_DIPSwitch
 16321 ;;		_Port_ToggleQuad
 16322 ;; This function uses a non-reentrant model
 16323 ;;
 16324                           
 16325                           	psect	text71
 16326  016084                     __ptext71:
 16327                           	opt stack 0
 16328  016084                     _Port_GetQuad:
 16329                           	opt stack 22
 16330                           
 16331                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 16332                           
 16333                           ;incstack = 0
 16334  016084  0100               	movlb	0	; () banked
 16335  016086  EE20 F006          	lfsr	2,6
 16336  01608A  5160               	movf	Port_GetQuad@pInput& (0+255),w,b
 16337  01608C  26D9               	addwf	fsr2l,f,c
 16338  01608E  5161               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 16339  016090  22DA               	addwfc	fsr2h,f,c
 16340  016092  CFDE F063          	movff	postinc2,??_Port_GetQuad
 16341  016096  CFDD F064          	movff	postdec2,??_Port_GetQuad+1
 16342  01609A  C063  FFD9         	movff	??_Port_GetQuad,fsr2l
 16343  01609E  C064  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 16344  0160A2  50DF               	movf	indf2,w,c
 16345  0160A4  0100               	movlb	0	; () banked
 16346  0160A6  6F65               	movwf	Port_GetQuad@Output& (0+255),b
 16347                           
 16348                           ; BSR set to: 0
 16349                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 16350  0160A8  0100               	movlb	0	; () banked
 16351  0160AA  5162               	movf	Port_GetQuad@pQuad& (0+255),w,b
 16352  0160AC  0D04               	mullw	4
 16353  0160AE  28F3               	incf	prodl,w,c
 16354  0160B0  0100               	movlb	0	; () banked
 16355  0160B2  6F63               	movwf	??_Port_GetQuad& (0+255),b
 16356  0160B4  D003               	goto	u9620
 16357  0160B6                     u9625:
 16358  0160B6  0100               	movlb	0	; () banked
 16359  0160B8  90D8               	bcf	status,0,c
 16360  0160BA  3365               	rrcf	Port_GetQuad@Output& (0+255),f,b
 16361  0160BC                     u9620:
 16362  0160BC  0100               	movlb	0	; () banked
 16363  0160BE  2F63               	decfsz	??_Port_GetQuad& (0+255),f,b
 16364  0160C0  D7FA               	goto	u9625
 16365                           
 16366                           ;Port.c: 502: Output &= 0xF;
 16367  0160C2  0E0F               	movlw	15
 16368  0160C4  0100               	movlb	0	; () banked
 16369  0160C6  1765               	andwf	Port_GetQuad@Output& (0+255),f,b
 16370                           
 16371                           ; BSR set to: 0
 16372                           ;Port.c: 503: return Output;
 16373  0160C8  0100               	movlb	0	; () banked
 16374  0160CA  5165               	movf	Port_GetQuad@Output& (0+255),w,b
 16375  0160CC  0012               	return	
 16376  0160CE                     __end_of_Port_GetQuad:
 16377                           	opt stack 0
 16378                           tosu	equ	0xFFF
 16379                           tosh	equ	0xFFE
 16380                           tosl	equ	0xFFD
 16381                           pclath	equ	0xFFA
 16382                           tblptru	equ	0xFF8
 16383                           tblptrh	equ	0xFF7
 16384                           tblptrl	equ	0xFF6
 16385                           tablat	equ	0xFF5
 16386                           prodh	equ	0xFF4
 16387                           prodl	equ	0xFF3
 16388                           intcon	equ	0xFF2
 16389                           postinc0	equ	0xFEE
 16390                           wreg	equ	0xFE8
 16391                           indf1	equ	0xFE7
 16392                           postdec1	equ	0xFE5
 16393                           fsr1h	equ	0xFE2
 16394                           fsr1l	equ	0xFE1
 16395                           indf2	equ	0xFDF
 16396                           postinc2	equ	0xFDE
 16397                           postdec2	equ	0xFDD
 16398                           plusw2	equ	0xFDB
 16399                           fsr2h	equ	0xFDA
 16400                           fsr2l	equ	0xFD9
 16401                           status	equ	0xFD8
 16402                           
 16403 ;; *************** function _Event_DIPSwitch *****************
 16404 ;; Defined at:
 16405 ;;		line 22 in file "Events.c"
 16406 ;; Parameters:    Size  Location     Type
 16407 ;;  pState          1    wreg     unsigned char 
 16408 ;; Auto vars:     Size  Location     Type
 16409 ;;  pState          1   25[BANK0 ] unsigned char 
 16410 ;;  Bar             1   26[BANK0 ] unsigned char 
 16411 ;; Return value:  Size  Location     Type
 16412 ;;                  1    wreg      void 
 16413 ;; Registers used:
 16414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16415 ;; Tracked objects:
 16416 ;;		On entry : 0/0
 16417 ;;		On exit  : 0/0
 16418 ;;		Unchanged: 0/0
 16419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16421 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16423 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16424 ;;Total ram usage:        2 bytes
 16425 ;; Hardware stack levels used:    1
 16426 ;; Hardware stack levels required when called:   13
 16427 ;; This function calls:
 16428 ;;		_HMI_GetBar
 16429 ;;		_HMI_SetBar
 16430 ;;		_LED_Toggle
 16431 ;; This function is called by:
 16432 ;;		_FunctInitButton
 16433 ;;		_Button_Poll
 16434 ;; This function uses a non-reentrant model
 16435 ;;
 16436                           
 16437                           	psect	text72
 16438  01665A                     __ptext72:
 16439                           	opt stack 0
 16440  01665A                     _Event_DIPSwitch:
 16441                           	opt stack 15
 16442                           
 16443                           ; BSR set to: 0
 16444                           ;incstack = 0
 16445                           ;Event_DIPSwitch@pState stored from wreg
 16446  01665A  0100               	movlb	0	; () banked
 16447  01665C  6F79               	movwf	Event_DIPSwitch@pState& (0+255),b
 16448                           
 16449                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 16450  01665E  EC46  F0B5         	call	_HMI_GetBar	;wreg free
 16451  016662  0100               	movlb	0	; () banked
 16452  016664  6F7A               	movwf	Event_DIPSwitch@Bar& (0+255),b
 16453                           
 16454                           ; BSR set to: 0
 16455                           ;Events.c: 25: Bar &= 0x0F;
 16456  016666  0E0F               	movlw	15
 16457  016668  0100               	movlb	0	; () banked
 16458  01666A  177A               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;Events.c: 26: pState <<= 4;
 16462  01666C  0100               	movlb	0	; () banked
 16463  01666E  3B79               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 16464  016670  0EF0               	movlw	240
 16465  016672  1779               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 16466                           
 16467                           ; BSR set to: 0
 16468                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 16469  016674  0100               	movlb	0	; () banked
 16470  016676  5179               	movf	Event_DIPSwitch@pState& (0+255),w,b
 16471  016678  0100               	movlb	0	; () banked
 16472  01667A  117A               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 16473  01667C  EC36  F0B5         	call	_HMI_SetBar
 16474                           
 16475                           ;Events.c: 32: LED_Toggle(eLED1);
 16476  016680  0E00               	movlw	0
 16477  016682  ECAF  F0B0         	call	_LED_Toggle
 16478  016686  0012               	return		;funcret
 16479  016688                     __end_of_Event_DIPSwitch:
 16480                           	opt stack 0
 16481                           tosu	equ	0xFFF
 16482                           tosh	equ	0xFFE
 16483                           tosl	equ	0xFFD
 16484                           pclath	equ	0xFFA
 16485                           tblptru	equ	0xFF8
 16486                           tblptrh	equ	0xFF7
 16487                           tblptrl	equ	0xFF6
 16488                           tablat	equ	0xFF5
 16489                           prodh	equ	0xFF4
 16490                           prodl	equ	0xFF3
 16491                           intcon	equ	0xFF2
 16492                           postinc0	equ	0xFEE
 16493                           wreg	equ	0xFE8
 16494                           indf1	equ	0xFE7
 16495                           postdec1	equ	0xFE5
 16496                           fsr1h	equ	0xFE2
 16497                           fsr1l	equ	0xFE1
 16498                           indf2	equ	0xFDF
 16499                           postinc2	equ	0xFDE
 16500                           postdec2	equ	0xFDD
 16501                           plusw2	equ	0xFDB
 16502                           fsr2h	equ	0xFDA
 16503                           fsr2l	equ	0xFD9
 16504                           status	equ	0xFD8
 16505                           
 16506 ;; *************** function _Event_NULL *****************
 16507 ;; Defined at:
 16508 ;;		line 9 in file "Events.c"
 16509 ;; Parameters:    Size  Location     Type
 16510 ;;  pState          1    wreg     unsigned char 
 16511 ;; Auto vars:     Size  Location     Type
 16512 ;;  pState          1    0[COMRAM] unsigned char 
 16513 ;; Return value:  Size  Location     Type
 16514 ;;                  1    wreg      void 
 16515 ;; Registers used:
 16516 ;;		wreg
 16517 ;; Tracked objects:
 16518 ;;		On entry : 0/0
 16519 ;;		On exit  : 0/0
 16520 ;;		Unchanged: 0/0
 16521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16526 ;;Total ram usage:        0 bytes
 16527 ;; Hardware stack levels used:    1
 16528 ;; Hardware stack levels required when called:    7
 16529 ;; This function calls:
 16530 ;;		Nothing
 16531 ;; This function is called by:
 16532 ;;		_HMI_Init
 16533 ;;		_Button_Poll
 16534 ;; This function uses a non-reentrant model
 16535 ;;
 16536                           
 16537                           	psect	text73
 16538  001404                     __ptext73:
 16539                           	opt stack 0
 16540  001404                     _Event_NULL:
 16541                           	opt stack 21
 16542                           
 16543                           ;incstack = 0
 16544  001404  0012               	return		;funcret
 16545  001406                     __end_of_Event_NULL:
 16546                           	opt stack 0
 16547                           tosu	equ	0xFFF
 16548                           tosh	equ	0xFFE
 16549                           tosl	equ	0xFFD
 16550                           pclath	equ	0xFFA
 16551                           tblptru	equ	0xFF8
 16552                           tblptrh	equ	0xFF7
 16553                           tblptrl	equ	0xFF6
 16554                           tablat	equ	0xFF5
 16555                           prodh	equ	0xFF4
 16556                           prodl	equ	0xFF3
 16557                           intcon	equ	0xFF2
 16558                           postinc0	equ	0xFEE
 16559                           wreg	equ	0xFE8
 16560                           indf1	equ	0xFE7
 16561                           postdec1	equ	0xFE5
 16562                           fsr1h	equ	0xFE2
 16563                           fsr1l	equ	0xFE1
 16564                           indf2	equ	0xFDF
 16565                           postinc2	equ	0xFDE
 16566                           postdec2	equ	0xFDD
 16567                           plusw2	equ	0xFDB
 16568                           fsr2h	equ	0xFDA
 16569                           fsr2l	equ	0xFD9
 16570                           status	equ	0xFD8
 16571                           
 16572 ;; *************** function _Event_TestButton *****************
 16573 ;; Defined at:
 16574 ;;		line 52 in file "Events.c"
 16575 ;; Parameters:    Size  Location     Type
 16576 ;;  pState          1    wreg     unsigned char 
 16577 ;; Auto vars:     Size  Location     Type
 16578 ;;  pState          1   25[BANK0 ] unsigned char 
 16579 ;; Return value:  Size  Location     Type
 16580 ;;                  1    wreg      void 
 16581 ;; Registers used:
 16582 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16591 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16592 ;;Total ram usage:        1 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; Hardware stack levels required when called:   13
 16595 ;; This function calls:
 16596 ;;		_HMI_SetButton
 16597 ;;		_HMI_SetNumber
 16598 ;;		_LED_Toggle
 16599 ;; This function is called by:
 16600 ;;		_FunctInitButton
 16601 ;;		_Button_Poll
 16602 ;; This function uses a non-reentrant model
 16603 ;;
 16604                           
 16605                           	psect	text74
 16606  01647A                     __ptext74:
 16607                           	opt stack 0
 16608  01647A                     _Event_TestButton:
 16609                           	opt stack 15
 16610                           
 16611                           ;incstack = 0
 16612                           ;Event_TestButton@pState stored from wreg
 16613  01647A  0100               	movlb	0	; () banked
 16614  01647C  6F79               	movwf	Event_TestButton@pState& (0+255),b
 16615                           
 16616                           ;Events.c: 56: static UINT8 j = 0;
 16617                           ;Events.c: 60: if (pState == 0)
 16618  01647E  0100               	movlb	0	; () banked
 16619  016480  5179               	movf	Event_TestButton@pState& (0+255),w,b
 16620  016482  0100               	movlb	0	; () banked
 16621  016484  A4D8               	btfss	status,2,c
 16622  016486  D013               	goto	l1873
 16623                           
 16624                           ; BSR set to: 0
 16625                           ;Events.c: 61: {
 16626                           ;Events.c: 62: j++;
 16627  016488  0100               	movlb	0	; () banked
 16628  01648A  2BE2               	incf	Event_TestButton@j& (0+255),f,b
 16629                           
 16630                           ; BSR set to: 0
 16631                           ;Events.c: 63: val += j;
 16632  01648C  0100               	movlb	0	; () banked
 16633  01648E  51E2               	movf	Event_TestButton@j& (0+255),w,b
 16634  016490  0100               	movlb	0	; () banked
 16635  016492  27DA               	addwf	_val& (0+255),f,b
 16636  016494  0E00               	movlw	0
 16637  016496  23DB               	addwfc	(_val+1)& (0+255),f,b
 16638                           
 16639                           ; BSR set to: 0
 16640                           ;Events.c: 64: HMI_SetNumber( val );
 16641  016498  C0DA  F076         	movff	_val,HMI_SetNumber@pInput
 16642  01649C  C0DB  F077         	movff	_val+1,HMI_SetNumber@pInput+1
 16643  0164A0  EC87  F0B3         	call	_HMI_SetNumber	;wreg free
 16644                           
 16645                           ;Events.c: 67: HMI_SetButton( j & 3 );
 16646  0164A4  0100               	movlb	0	; () banked
 16647  0164A6  51E2               	movf	Event_TestButton@j& (0+255),w,b
 16648  0164A8  0B03               	andlw	3
 16649  0164AA  ECD3  F0A9         	call	_HMI_SetButton
 16650  0164AE                     l1873:
 16651                           
 16652                           ;Events.c: 68: }
 16653                           ;Events.c: 72: LED_Toggle(eLED1);
 16654  0164AE  0E00               	movlw	0
 16655  0164B0  ECAF  F0B0         	call	_LED_Toggle
 16656  0164B4  0012               	return		;funcret
 16657  0164B6                     __end_of_Event_TestButton:
 16658                           	opt stack 0
 16659                           tosu	equ	0xFFF
 16660                           tosh	equ	0xFFE
 16661                           tosl	equ	0xFFD
 16662                           pclath	equ	0xFFA
 16663                           tblptru	equ	0xFF8
 16664                           tblptrh	equ	0xFF7
 16665                           tblptrl	equ	0xFF6
 16666                           tablat	equ	0xFF5
 16667                           prodh	equ	0xFF4
 16668                           prodl	equ	0xFF3
 16669                           intcon	equ	0xFF2
 16670                           postinc0	equ	0xFEE
 16671                           wreg	equ	0xFE8
 16672                           indf1	equ	0xFE7
 16673                           postdec1	equ	0xFE5
 16674                           fsr1h	equ	0xFE2
 16675                           fsr1l	equ	0xFE1
 16676                           indf2	equ	0xFDF
 16677                           postinc2	equ	0xFDE
 16678                           postdec2	equ	0xFDD
 16679                           plusw2	equ	0xFDB
 16680                           fsr2h	equ	0xFDA
 16681                           fsr2l	equ	0xFD9
 16682                           status	equ	0xFD8
 16683                           
 16684 ;; *************** function _HMI_SetNumber *****************
 16685 ;; Defined at:
 16686 ;;		line 221 in file "HMI.c"
 16687 ;; Parameters:    Size  Location     Type
 16688 ;;  pInput          2   22[BANK0 ] int 
 16689 ;; Auto vars:     Size  Location     Type
 16690 ;;		None
 16691 ;; Return value:  Size  Location     Type
 16692 ;;                  1    wreg      void 
 16693 ;; Registers used:
 16694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16695 ;; Tracked objects:
 16696 ;;		On entry : 0/0
 16697 ;;		On exit  : 0/0
 16698 ;;		Unchanged: 0/0
 16699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16700 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16703 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16704 ;;Total ram usage:        2 bytes
 16705 ;; Hardware stack levels used:    1
 16706 ;; Hardware stack levels required when called:    9
 16707 ;; This function calls:
 16708 ;;		_HMI_SetSegments
 16709 ;;		_itos
 16710 ;; This function is called by:
 16711 ;;		_Event_TestButton
 16712 ;;		_main
 16713 ;;		_Event_HMI_UpButton
 16714 ;;		_Event_HMI_DownButton
 16715 ;; This function uses a non-reentrant model
 16716 ;;
 16717                           
 16718                           	psect	text75
 16719  01670E                     __ptext75:
 16720                           	opt stack 0
 16721  01670E                     _HMI_SetNumber:
 16722                           	opt stack 21
 16723                           
 16724                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 16725                           
 16726                           ;incstack = 0
 16727  01670E  C076  F06C         	movff	HMI_SetNumber@pInput,itos@input
 16728  016712  C077  F06D         	movff	HMI_SetNumber@pInput+1,itos@input+1
 16729  016716  0E1E               	movlw	low _HMIBoard
 16730  016718  0100               	movlb	0	; () banked
 16731  01671A  6F6E               	movwf	itos@destination& (0+255),b
 16732  01671C  0E01               	movlw	high _HMIBoard
 16733  01671E  0100               	movlb	0	; () banked
 16734  016720  6F6F               	movwf	(itos@destination+1)& (0+255),b
 16735  016722  EC4D  F0A1         	call	_itos	;wreg free
 16736                           
 16737                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 16738  016726  0E1E               	movlw	low _HMIBoard
 16739  016728  0100               	movlb	0	; () banked
 16740  01672A  6F61               	movwf	HMI_SetSegments@pString& (0+255),b
 16741  01672C  0E01               	movlw	high _HMIBoard
 16742  01672E  0100               	movlb	0	; () banked
 16743  016730  6F62               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 16744  016732  ECE2  F0A4         	call	_HMI_SetSegments	;wreg free
 16745  016736  0012               	return		;funcret
 16746  016738                     __end_of_HMI_SetNumber:
 16747                           	opt stack 0
 16748                           tosu	equ	0xFFF
 16749                           tosh	equ	0xFFE
 16750                           tosl	equ	0xFFD
 16751                           pclath	equ	0xFFA
 16752                           tblptru	equ	0xFF8
 16753                           tblptrh	equ	0xFF7
 16754                           tblptrl	equ	0xFF6
 16755                           tablat	equ	0xFF5
 16756                           prodh	equ	0xFF4
 16757                           prodl	equ	0xFF3
 16758                           intcon	equ	0xFF2
 16759                           postinc0	equ	0xFEE
 16760                           wreg	equ	0xFE8
 16761                           indf1	equ	0xFE7
 16762                           postdec1	equ	0xFE5
 16763                           fsr1h	equ	0xFE2
 16764                           fsr1l	equ	0xFE1
 16765                           indf2	equ	0xFDF
 16766                           postinc2	equ	0xFDE
 16767                           postdec2	equ	0xFDD
 16768                           plusw2	equ	0xFDB
 16769                           fsr2h	equ	0xFDA
 16770                           fsr2l	equ	0xFD9
 16771                           status	equ	0xFD8
 16772                           
 16773 ;; *************** function _itos *****************
 16774 ;; Defined at:
 16775 ;;		line 369 in file "Library/Types.c"
 16776 ;; Parameters:    Size  Location     Type
 16777 ;;  input           2   12[BANK0 ] unsigned short 
 16778 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 16779 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 16780 ;; Auto vars:     Size  Location     Type
 16781 ;;  Out             2   20[BANK0 ] unsigned short 
 16782 ;;  Length          2   18[BANK0 ] unsigned short 
 16783 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 16784 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 16785 ;; Return value:  Size  Location     Type
 16786 ;;                  1    wreg      void 
 16787 ;; Registers used:
 16788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16794 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16795 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16797 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16798 ;;Total ram usage:       10 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    8
 16801 ;; This function calls:
 16802 ;;		___lwdiv
 16803 ;;		___lwmod
 16804 ;;		_reverse
 16805 ;; This function is called by:
 16806 ;;		_HMI_SetNumber
 16807 ;; This function uses a non-reentrant model
 16808 ;;
 16809                           
 16810                           	psect	text76
 16811  01429A                     __ptext76:
 16812                           	opt stack 0
 16813  01429A                     _itos:
 16814                           	opt stack 21
 16815                           
 16816                           ;Types.c: 371: UINT16 Out = input;
 16817                           
 16818                           ;incstack = 0
 16819  01429A  C06C  F074         	movff	itos@input,itos@Out
 16820  01429E  C06D  F075         	movff	itos@input+1,itos@Out+1
 16821                           
 16822                           ;Types.c: 372: UINT16 Length = 0;
 16823  0142A2  0E00               	movlw	0
 16824  0142A4  0100               	movlb	0	; () banked
 16825  0142A6  6F73               	movwf	(itos@Length+1)& (0+255),b
 16826  0142A8  0E00               	movlw	0
 16827  0142AA  6F72               	movwf	itos@Length& (0+255),b
 16828                           
 16829                           ; BSR set to: 0
 16830                           ;Types.c: 373: char *Data = destination;
 16831  0142AC  C06E  F070         	movff	itos@destination,itos@Data
 16832  0142B0  C06F  F071         	movff	itos@destination+1,itos@Data+1
 16833                           
 16834                           ; BSR set to: 0
 16835                           ;Types.c: 374: if(Out == 0)
 16836  0142B4  0100               	movlb	0	; () banked
 16837  0142B6  5174               	movf	itos@Out& (0+255),w,b
 16838  0142B8  0100               	movlb	0	; () banked
 16839  0142BA  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 16840  0142BC  A4D8               	btfss	status,2,c
 16841  0142BE  D034               	goto	l929
 16842                           
 16843                           ; BSR set to: 0
 16844                           ;Types.c: 375: {
 16845                           ;Types.c: 376: Data[0] = (UINT16)'0';
 16846  0142C0  C070  FFD9         	movff	itos@Data,fsr2l
 16847  0142C4  C071  FFDA         	movff	itos@Data+1,fsr2h
 16848  0142C8  0E30               	movlw	48
 16849  0142CA  6EDF               	movwf	indf2,c
 16850                           
 16851                           ; BSR set to: 0
 16852                           ;Types.c: 377: Length = 1;
 16853  0142CC  0E00               	movlw	0
 16854  0142CE  0100               	movlb	0	; () banked
 16855  0142D0  6F73               	movwf	(itos@Length+1)& (0+255),b
 16856  0142D2  0E01               	movlw	1
 16857  0142D4  6F72               	movwf	itos@Length& (0+255),b
 16858                           
 16859                           ;Types.c: 378: }
 16860  0142D6  D040               	goto	l928
 16861  0142D8                     
 16862                           ; BSR set to: 0
 16863                           ;Types.c: 382: {
 16864                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 16865                           
 16866                           ; BSR set to: 0
 16867  0142D8  C074  F067         	movff	itos@Out,___lwmod@dividend
 16868  0142DC  C075  F068         	movff	itos@Out+1,___lwmod@dividend+1
 16869  0142E0  0E00               	movlw	0
 16870  0142E2  0100               	movlb	0	; () banked
 16871  0142E4  6F6A               	movwf	(___lwmod@divisor+1)& (0+255),b
 16872  0142E6  0E0A               	movlw	10
 16873  0142E8  6F69               	movwf	___lwmod@divisor& (0+255),b
 16874  0142EA  ECEB  F0AE         	call	___lwmod	;wreg free
 16875  0142EE  0100               	movlb	0	; () banked
 16876  0142F0  5167               	movf	?___lwmod& (0+255),w,b
 16877  0142F2  0F30               	addlw	48
 16878  0142F4  C070  FFD9         	movff	itos@Data,fsr2l
 16879  0142F8  C071  FFDA         	movff	itos@Data+1,fsr2h
 16880  0142FC  6EDF               	movwf	indf2,c
 16881                           
 16882                           ; BSR set to: 0
 16883                           ;Types.c: 384: Out /= 10;
 16884  0142FE  C074  F060         	movff	itos@Out,___lwdiv@dividend
 16885  014302  C075  F061         	movff	itos@Out+1,___lwdiv@dividend+1
 16886  014306  0E00               	movlw	0
 16887  014308  0100               	movlb	0	; () banked
 16888  01430A  6F63               	movwf	(___lwdiv@divisor+1)& (0+255),b
 16889  01430C  0E0A               	movlw	10
 16890  01430E  6F62               	movwf	___lwdiv@divisor& (0+255),b
 16891  014310  ECEA  F0AB         	call	___lwdiv	;wreg free
 16892  014314  C060  F074         	movff	?___lwdiv,itos@Out
 16893  014318  C061  F075         	movff	?___lwdiv+1,itos@Out+1
 16894                           
 16895                           ;Types.c: 385: Length ++;
 16896  01431C  0100               	movlb	0	; () banked
 16897  01431E  4B72               	infsnz	itos@Length& (0+255),f,b
 16898  014320  2B73               	incf	(itos@Length+1)& (0+255),f,b
 16899                           
 16900                           ; BSR set to: 0
 16901                           ;Types.c: 386: Data++;
 16902  014322  0100               	movlb	0	; () banked
 16903  014324  4B70               	infsnz	itos@Data& (0+255),f,b
 16904  014326  2B71               	incf	(itos@Data+1)& (0+255),f,b
 16905  014328                     l929:
 16906                           
 16907                           ; BSR set to: 0
 16908                           
 16909                           ; BSR set to: 0
 16910  014328  0100               	movlb	0	; () banked
 16911  01432A  5174               	movf	itos@Out& (0+255),w,b
 16912  01432C  0100               	movlb	0	; () banked
 16913  01432E  1175               	iorwf	(itos@Out+1)& (0+255),w,b
 16914  014330  B4D8               	btfsc	status,2,c
 16915  014332  D008               	goto	u9360
 16916                           
 16917                           ; BSR set to: 0
 16918  014334  0100               	movlb	0	; () banked
 16919  014336  5173               	movf	(itos@Length+1)& (0+255),w,b
 16920  014338  E105               	bnz	l11980
 16921  01433A  0E06               	movlw	6
 16922  01433C  0100               	movlb	0	; () banked
 16923  01433E  5D72               	subwf	itos@Length& (0+255),w,b
 16924  014340  A0D8               	btfss	status,0,c
 16925  014342  D7CA               	goto	l930
 16926  014344                     u9360:
 16927  014344                     l11980:
 16928                           
 16929                           ; BSR set to: 0
 16930                           ;Types.c: 387: }
 16931                           ;Types.c: 388: reverse(destination, Length);
 16932  014344  C06E  F060         	movff	itos@destination,reverse@input
 16933  014348  C06F  F061         	movff	itos@destination+1,reverse@input+1
 16934  01434C  C072  F062         	movff	itos@Length,reverse@length
 16935  014350  C073  F063         	movff	itos@Length+1,reverse@length+1
 16936  014354  EC81  F0AD         	call	_reverse	;wreg free
 16937  014358                     l928:
 16938                           
 16939                           ;Types.c: 389: }
 16940                           ;Types.c: 390: destination[Length] = '\0';
 16941  014358  0100               	movlb	0	; () banked
 16942  01435A  5172               	movf	itos@Length& (0+255),w,b
 16943  01435C  0100               	movlb	0	; () banked
 16944  01435E  256E               	addwf	itos@destination& (0+255),w,b
 16945  014360  6ED9               	movwf	fsr2l,c
 16946  014362  0100               	movlb	0	; () banked
 16947  014364  5173               	movf	(itos@Length+1)& (0+255),w,b
 16948  014366  0100               	movlb	0	; () banked
 16949  014368  216F               	addwfc	(itos@destination+1)& (0+255),w,b
 16950  01436A  6EDA               	movwf	fsr2h,c
 16951  01436C  0E00               	movlw	0
 16952  01436E  6EDF               	movwf	indf2,c
 16953                           
 16954                           ; BSR set to: 0
 16955  014370  0012               	return		;funcret
 16956  014372                     __end_of_itos:
 16957                           	opt stack 0
 16958                           tosu	equ	0xFFF
 16959                           tosh	equ	0xFFE
 16960                           tosl	equ	0xFFD
 16961                           pclath	equ	0xFFA
 16962                           tblptru	equ	0xFF8
 16963                           tblptrh	equ	0xFF7
 16964                           tblptrl	equ	0xFF6
 16965                           tablat	equ	0xFF5
 16966                           prodh	equ	0xFF4
 16967                           prodl	equ	0xFF3
 16968                           intcon	equ	0xFF2
 16969                           postinc0	equ	0xFEE
 16970                           wreg	equ	0xFE8
 16971                           indf1	equ	0xFE7
 16972                           postdec1	equ	0xFE5
 16973                           fsr1h	equ	0xFE2
 16974                           fsr1l	equ	0xFE1
 16975                           indf2	equ	0xFDF
 16976                           postinc2	equ	0xFDE
 16977                           postdec2	equ	0xFDD
 16978                           plusw2	equ	0xFDB
 16979                           fsr2h	equ	0xFDA
 16980                           fsr2l	equ	0xFD9
 16981                           status	equ	0xFD8
 16982                           
 16983 ;; *************** function _reverse *****************
 16984 ;; Defined at:
 16985 ;;		line 357 in file "Library/Types.c"
 16986 ;; Parameters:    Size  Location     Type
 16987 ;;  input           2    0[BANK0 ] PTR unsigned char 
 16988 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 16989 ;;  length          2    2[BANK0 ] unsigned short 
 16990 ;; Auto vars:     Size  Location     Type
 16991 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 16992 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 16993 ;;  tempVar         1    4[BANK0 ] unsigned char 
 16994 ;; Return value:  Size  Location     Type
 16995 ;;                  1    wreg      void 
 16996 ;; Registers used:
 16997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16998 ;; Tracked objects:
 16999 ;;		On entry : 0/0
 17000 ;;		On exit  : 0/0
 17001 ;;		Unchanged: 0/0
 17002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17003 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17004 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17006 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17007 ;;Total ram usage:        7 bytes
 17008 ;; Hardware stack levels used:    1
 17009 ;; Hardware stack levels required when called:    7
 17010 ;; This function calls:
 17011 ;;		Nothing
 17012 ;; This function is called by:
 17013 ;;		_itos
 17014 ;; This function uses a non-reentrant model
 17015 ;;
 17016                           
 17017                           	psect	text77
 17018  015B02                     __ptext77:
 17019                           	opt stack 0
 17020  015B02                     _reverse:
 17021                           	opt stack 21
 17022                           
 17023                           ;Types.c: 359: char tempVar,
 17024                           ;Types.c: 360: *iterator = input + length;
 17025                           
 17026                           ; BSR set to: 0
 17027                           ;incstack = 0
 17028  015B02  0100               	movlb	0	; () banked
 17029  015B04  5162               	movf	reverse@length& (0+255),w,b
 17030  015B06  0100               	movlb	0	; () banked
 17031  015B08  2560               	addwf	reverse@input& (0+255),w,b
 17032  015B0A  0100               	movlb	0	; () banked
 17033  015B0C  6F65               	movwf	reverse@iterator& (0+255),b
 17034  015B0E  0100               	movlb	0	; () banked
 17035  015B10  5163               	movf	(reverse@length+1)& (0+255),w,b
 17036  015B12  0100               	movlb	0	; () banked
 17037  015B14  2161               	addwfc	(reverse@input+1)& (0+255),w,b
 17038  015B16  0100               	movlb	0	; () banked
 17039  015B18  6F66               	movwf	(reverse@iterator+1)& (0+255),b
 17040                           
 17041                           ;Types.c: 362: while ( --iterator > input )
 17042  015B1A  D01A               	goto	l921
 17043  015B1C                     
 17044                           ; BSR set to: 0
 17045                           ;Types.c: 363: {
 17046                           ;Types.c: 364: tempVar = *input;
 17047                           
 17048                           ; BSR set to: 0
 17049  015B1C  C060  FFD9         	movff	reverse@input,fsr2l
 17050  015B20  C061  FFDA         	movff	reverse@input+1,fsr2h
 17051  015B24  50DF               	movf	indf2,w,c
 17052  015B26  0100               	movlb	0	; () banked
 17053  015B28  6F64               	movwf	reverse@tempVar& (0+255),b
 17054                           
 17055                           ; BSR set to: 0
 17056                           ;Types.c: 365: *input++=*iterator;
 17057  015B2A  C065  FFD9         	movff	reverse@iterator,fsr2l
 17058  015B2E  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 17059  015B32  C060  FFE1         	movff	reverse@input,fsr1l
 17060  015B36  C061  FFE2         	movff	reverse@input+1,fsr1h
 17061  015B3A  CFDF FFE7          	movff	indf2,indf1
 17062                           
 17063                           ; BSR set to: 0
 17064  015B3E  0100               	movlb	0	; () banked
 17065  015B40  4B60               	infsnz	reverse@input& (0+255),f,b
 17066  015B42  2B61               	incf	(reverse@input+1)& (0+255),f,b
 17067                           
 17068                           ; BSR set to: 0
 17069                           ;Types.c: 366: *iterator=tempVar;
 17070  015B44  C065  FFD9         	movff	reverse@iterator,fsr2l
 17071  015B48  C066  FFDA         	movff	reverse@iterator+1,fsr2h
 17072  015B4C  C064  FFDF         	movff	reverse@tempVar,indf2
 17073  015B50                     l921:
 17074                           
 17075                           ; BSR set to: 0
 17076                           
 17077                           ; BSR set to: 0
 17078  015B50  0100               	movlb	0	; () banked
 17079  015B52  0765               	decf	reverse@iterator& (0+255),f,b
 17080  015B54  A0D8               	btfss	status,0,c
 17081  015B56  0766               	decf	(reverse@iterator+1)& (0+255),f,b
 17082  015B58  0100               	movlb	0	; () banked
 17083  015B5A  5165               	movf	reverse@iterator& (0+255),w,b
 17084  015B5C  0100               	movlb	0	; () banked
 17085  015B5E  5D60               	subwf	reverse@input& (0+255),w,b
 17086  015B60  0100               	movlb	0	; () banked
 17087  015B62  5166               	movf	(reverse@iterator+1)& (0+255),w,b
 17088  015B64  0100               	movlb	0	; () banked
 17089  015B66  5961               	subwfb	(reverse@input+1)& (0+255),w,b
 17090  015B68  B0D8               	btfsc	status,0,c
 17091  015B6A  0012               	return	
 17092  015B6C  D7D7               	goto	l922
 17093  015B6E                     __end_of_reverse:
 17094                           	opt stack 0
 17095                           tosu	equ	0xFFF
 17096                           tosh	equ	0xFFE
 17097                           tosl	equ	0xFFD
 17098                           pclath	equ	0xFFA
 17099                           tblptru	equ	0xFF8
 17100                           tblptrh	equ	0xFF7
 17101                           tblptrl	equ	0xFF6
 17102                           tablat	equ	0xFF5
 17103                           prodh	equ	0xFF4
 17104                           prodl	equ	0xFF3
 17105                           intcon	equ	0xFF2
 17106                           postinc0	equ	0xFEE
 17107                           wreg	equ	0xFE8
 17108                           indf1	equ	0xFE7
 17109                           postdec1	equ	0xFE5
 17110                           fsr1h	equ	0xFE2
 17111                           fsr1l	equ	0xFE1
 17112                           indf2	equ	0xFDF
 17113                           postinc2	equ	0xFDE
 17114                           postdec2	equ	0xFDD
 17115                           plusw2	equ	0xFDB
 17116                           fsr2h	equ	0xFDA
 17117                           fsr2l	equ	0xFD9
 17118                           status	equ	0xFD8
 17119                           
 17120 ;; *************** function ___lwmod *****************
 17121 ;; Defined at:
 17122 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 17123 ;; Parameters:    Size  Location     Type
 17124 ;;  dividend        2    7[BANK0 ] unsigned int 
 17125 ;;  divisor         2    9[BANK0 ] unsigned int 
 17126 ;; Auto vars:     Size  Location     Type
 17127 ;;  counter         1   11[BANK0 ] unsigned char 
 17128 ;; Return value:  Size  Location     Type
 17129 ;;                  2    7[BANK0 ] unsigned int 
 17130 ;; Registers used:
 17131 ;;		wreg, status,2, status,0
 17132 ;; Tracked objects:
 17133 ;;		On entry : 0/0
 17134 ;;		On exit  : 0/0
 17135 ;;		Unchanged: 0/0
 17136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17137 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17140 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17141 ;;Total ram usage:        5 bytes
 17142 ;; Hardware stack levels used:    1
 17143 ;; Hardware stack levels required when called:    7
 17144 ;; This function calls:
 17145 ;;		Nothing
 17146 ;; This function is called by:
 17147 ;;		_itos
 17148 ;;		_printf
 17149 ;; This function uses a non-reentrant model
 17150 ;;
 17151                           
 17152                           	psect	text78
 17153  015DD6                     __ptext78:
 17154                           	opt stack 0
 17155  015DD6                     ___lwmod:
 17156                           	opt stack 22
 17157                           
 17158                           ; BSR set to: 0
 17159                           ;incstack = 0
 17160  015DD6  0100               	movlb	0	; () banked
 17161  015DD8  5169               	movf	___lwmod@divisor& (0+255),w,b
 17162  015DDA  0100               	movlb	0	; () banked
 17163  015DDC  116A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 17164  015DDE  B4D8               	btfsc	status,2,c
 17165  015DE0  D026               	goto	l2496
 17166                           
 17167                           ; BSR set to: 0
 17168  015DE2  0E01               	movlw	1
 17169  015DE4  0100               	movlb	0	; () banked
 17170  015DE6  6F6B               	movwf	___lwmod@counter& (0+255),b
 17171  015DE8  D006               	goto	l2491
 17172  015DEA                     
 17173                           ; BSR set to: 0
 17174                           
 17175                           ; BSR set to: 0
 17176  015DEA  0100               	movlb	0	; () banked
 17177  015DEC  90D8               	bcf	status,0,c
 17178  015DEE  3769               	rlcf	___lwmod@divisor& (0+255),f,b
 17179  015DF0  376A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 17180  015DF2  0100               	movlb	0	; () banked
 17181  015DF4  2B6B               	incf	___lwmod@counter& (0+255),f,b
 17182  015DF6                     l2491:
 17183                           
 17184                           ; BSR set to: 0
 17185                           
 17186                           ; BSR set to: 0
 17187  015DF6  0100               	movlb	0	; () banked
 17188  015DF8  AF6A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 17189  015DFA  D7F7               	goto	l2492
 17190  015DFC                     u9240:
 17191                           
 17192                           ; BSR set to: 0
 17193                           
 17194                           ; BSR set to: 0
 17195                           
 17196                           ; BSR set to: 0
 17197  015DFC  0100               	movlb	0	; () banked
 17198  015DFE  5169               	movf	___lwmod@divisor& (0+255),w,b
 17199  015E00  0100               	movlb	0	; () banked
 17200  015E02  5D67               	subwf	___lwmod@dividend& (0+255),w,b
 17201  015E04  0100               	movlb	0	; () banked
 17202  015E06  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17203  015E08  0100               	movlb	0	; () banked
 17204  015E0A  5968               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 17205  015E0C  A0D8               	btfss	status,0,c
 17206  015E0E  D008               	goto	l2495
 17207                           
 17208                           ; BSR set to: 0
 17209  015E10  0100               	movlb	0	; () banked
 17210  015E12  5169               	movf	___lwmod@divisor& (0+255),w,b
 17211  015E14  0100               	movlb	0	; () banked
 17212  015E16  5F67               	subwf	___lwmod@dividend& (0+255),f,b
 17213  015E18  0100               	movlb	0	; () banked
 17214  015E1A  516A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 17215  015E1C  0100               	movlb	0	; () banked
 17216  015E1E  5B68               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 17217  015E20                     l2495:
 17218                           
 17219                           ; BSR set to: 0
 17220                           
 17221                           ; BSR set to: 0
 17222  015E20  0100               	movlb	0	; () banked
 17223  015E22  90D8               	bcf	status,0,c
 17224  015E24  336A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 17225  015E26  3369               	rrcf	___lwmod@divisor& (0+255),f,b
 17226                           
 17227                           ; BSR set to: 0
 17228  015E28  0100               	movlb	0	; () banked
 17229  015E2A  2F6B               	decfsz	___lwmod@counter& (0+255),f,b
 17230  015E2C  D7E7               	goto	u9240
 17231  015E2E                     l2496:
 17232                           
 17233                           ; BSR set to: 0
 17234                           
 17235                           ; BSR set to: 0
 17236  015E2E  C067  F067         	movff	___lwmod@dividend,?___lwmod
 17237  015E32  C068  F068         	movff	___lwmod@dividend+1,?___lwmod+1
 17238                           
 17239                           ; BSR set to: 0
 17240  015E36  0012               	return		;funcret
 17241  015E38                     __end_of___lwmod:
 17242                           	opt stack 0
 17243                           tosu	equ	0xFFF
 17244                           tosh	equ	0xFFE
 17245                           tosl	equ	0xFFD
 17246                           pclath	equ	0xFFA
 17247                           tblptru	equ	0xFF8
 17248                           tblptrh	equ	0xFF7
 17249                           tblptrl	equ	0xFF6
 17250                           tablat	equ	0xFF5
 17251                           prodh	equ	0xFF4
 17252                           prodl	equ	0xFF3
 17253                           intcon	equ	0xFF2
 17254                           postinc0	equ	0xFEE
 17255                           wreg	equ	0xFE8
 17256                           indf1	equ	0xFE7
 17257                           postdec1	equ	0xFE5
 17258                           fsr1h	equ	0xFE2
 17259                           fsr1l	equ	0xFE1
 17260                           indf2	equ	0xFDF
 17261                           postinc2	equ	0xFDE
 17262                           postdec2	equ	0xFDD
 17263                           plusw2	equ	0xFDB
 17264                           fsr2h	equ	0xFDA
 17265                           fsr2l	equ	0xFD9
 17266                           status	equ	0xFD8
 17267                           
 17268 ;; *************** function ___lwdiv *****************
 17269 ;; Defined at:
 17270 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 17271 ;; Parameters:    Size  Location     Type
 17272 ;;  dividend        2    0[BANK0 ] unsigned int 
 17273 ;;  divisor         2    2[BANK0 ] unsigned int 
 17274 ;; Auto vars:     Size  Location     Type
 17275 ;;  quotient        2    5[BANK0 ] unsigned int 
 17276 ;;  counter         1    4[BANK0 ] unsigned char 
 17277 ;; Return value:  Size  Location     Type
 17278 ;;                  2    0[BANK0 ] unsigned int 
 17279 ;; Registers used:
 17280 ;;		wreg, status,2, status,0
 17281 ;; Tracked objects:
 17282 ;;		On entry : 0/0
 17283 ;;		On exit  : 0/0
 17284 ;;		Unchanged: 0/0
 17285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17286 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17287 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17289 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17290 ;;Total ram usage:        7 bytes
 17291 ;; Hardware stack levels used:    1
 17292 ;; Hardware stack levels required when called:    7
 17293 ;; This function calls:
 17294 ;;		Nothing
 17295 ;; This function is called by:
 17296 ;;		_itos
 17297 ;;		_printf
 17298 ;; This function uses a non-reentrant model
 17299 ;;
 17300                           
 17301                           	psect	text79
 17302  0157D4                     __ptext79:
 17303                           	opt stack 0
 17304  0157D4                     ___lwdiv:
 17305                           	opt stack 22
 17306                           
 17307                           ; BSR set to: 0
 17308                           ;incstack = 0
 17309  0157D4  0E00               	movlw	0
 17310  0157D6  0100               	movlb	0	; () banked
 17311  0157D8  6F66               	movwf	(___lwdiv@quotient+1)& (0+255),b
 17312  0157DA  0E00               	movlw	0
 17313  0157DC  6F65               	movwf	___lwdiv@quotient& (0+255),b
 17314                           
 17315                           ; BSR set to: 0
 17316  0157DE  0100               	movlb	0	; () banked
 17317  0157E0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17318  0157E2  0100               	movlb	0	; () banked
 17319  0157E4  1163               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 17320  0157E6  B4D8               	btfsc	status,2,c
 17321  0157E8  D02C               	goto	l2486
 17322                           
 17323                           ; BSR set to: 0
 17324  0157EA  0E01               	movlw	1
 17325  0157EC  0100               	movlb	0	; () banked
 17326  0157EE  6F64               	movwf	___lwdiv@counter& (0+255),b
 17327  0157F0  D006               	goto	l2481
 17328  0157F2                     
 17329                           ; BSR set to: 0
 17330                           
 17331                           ; BSR set to: 0
 17332  0157F2  0100               	movlb	0	; () banked
 17333  0157F4  90D8               	bcf	status,0,c
 17334  0157F6  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 17335  0157F8  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 17336  0157FA  0100               	movlb	0	; () banked
 17337  0157FC  2B64               	incf	___lwdiv@counter& (0+255),f,b
 17338  0157FE                     l2481:
 17339                           
 17340                           ; BSR set to: 0
 17341                           
 17342                           ; BSR set to: 0
 17343  0157FE  0100               	movlb	0	; () banked
 17344  015800  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 17345  015802  D7F7               	goto	l2482
 17346  015804                     u9210:
 17347                           
 17348                           ; BSR set to: 0
 17349                           
 17350                           ; BSR set to: 0
 17351                           
 17352                           ; BSR set to: 0
 17353  015804  0100               	movlb	0	; () banked
 17354  015806  90D8               	bcf	status,0,c
 17355  015808  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 17356  01580A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 17357                           
 17358                           ; BSR set to: 0
 17359  01580C  0100               	movlb	0	; () banked
 17360  01580E  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17361  015810  0100               	movlb	0	; () banked
 17362  015812  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 17363  015814  0100               	movlb	0	; () banked
 17364  015816  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17365  015818  0100               	movlb	0	; () banked
 17366  01581A  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 17367  01581C  A0D8               	btfss	status,0,c
 17368  01581E  D00A               	goto	l2485
 17369                           
 17370                           ; BSR set to: 0
 17371  015820  0100               	movlb	0	; () banked
 17372  015822  5162               	movf	___lwdiv@divisor& (0+255),w,b
 17373  015824  0100               	movlb	0	; () banked
 17374  015826  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 17375  015828  0100               	movlb	0	; () banked
 17376  01582A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 17377  01582C  0100               	movlb	0	; () banked
 17378  01582E  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 17379                           
 17380                           ; BSR set to: 0
 17381  015830  0100               	movlb	0	; () banked
 17382  015832  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 17383  015834                     l2485:
 17384                           
 17385                           ; BSR set to: 0
 17386                           
 17387                           ; BSR set to: 0
 17388  015834  0100               	movlb	0	; () banked
 17389  015836  90D8               	bcf	status,0,c
 17390  015838  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 17391  01583A  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 17392                           
 17393                           ; BSR set to: 0
 17394  01583C  0100               	movlb	0	; () banked
 17395  01583E  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 17396  015840  D7E1               	goto	u9210
 17397  015842                     l2486:
 17398                           
 17399                           ; BSR set to: 0
 17400                           
 17401                           ; BSR set to: 0
 17402  015842  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 17403  015846  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 17404                           
 17405                           ; BSR set to: 0
 17406  01584A  0012               	return		;funcret
 17407  01584C                     __end_of___lwdiv:
 17408                           	opt stack 0
 17409                           tosu	equ	0xFFF
 17410                           tosh	equ	0xFFE
 17411                           tosl	equ	0xFFD
 17412                           pclath	equ	0xFFA
 17413                           tblptru	equ	0xFF8
 17414                           tblptrh	equ	0xFF7
 17415                           tblptrl	equ	0xFF6
 17416                           tablat	equ	0xFF5
 17417                           prodh	equ	0xFF4
 17418                           prodl	equ	0xFF3
 17419                           intcon	equ	0xFF2
 17420                           postinc0	equ	0xFEE
 17421                           wreg	equ	0xFE8
 17422                           indf1	equ	0xFE7
 17423                           postdec1	equ	0xFE5
 17424                           fsr1h	equ	0xFE2
 17425                           fsr1l	equ	0xFE1
 17426                           indf2	equ	0xFDF
 17427                           postinc2	equ	0xFDE
 17428                           postdec2	equ	0xFDD
 17429                           plusw2	equ	0xFDB
 17430                           fsr2h	equ	0xFDA
 17431                           fsr2l	equ	0xFD9
 17432                           status	equ	0xFD8
 17433                           
 17434 ;; *************** function _HMI_SetSegments *****************
 17435 ;; Defined at:
 17436 ;;		line 226 in file "HMI.c"
 17437 ;; Parameters:    Size  Location     Type
 17438 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 17439 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 17440 ;; Auto vars:     Size  Location     Type
 17441 ;;  in              2    4[BANK0 ] unsigned short 
 17442 ;; Return value:  Size  Location     Type
 17443 ;;                  1    wreg      void 
 17444 ;; Registers used:
 17445 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 17446 ;; Tracked objects:
 17447 ;;		On entry : 0/0
 17448 ;;		On exit  : 0/0
 17449 ;;		Unchanged: 0/0
 17450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17451 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17452 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17454 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17455 ;;Total ram usage:        5 bytes
 17456 ;; Hardware stack levels used:    1
 17457 ;; Hardware stack levels required when called:    8
 17458 ;; This function calls:
 17459 ;;		_ToSegment
 17460 ;; This function is called by:
 17461 ;;		_HMI_SetNumber
 17462 ;; This function uses a non-reentrant model
 17463 ;;
 17464                           
 17465                           	psect	text80
 17466  0149C4                     __ptext80:
 17467                           	opt stack 0
 17468  0149C4                     _HMI_SetSegments:
 17469                           	opt stack 21
 17470                           
 17471                           ;HMI.c: 228: UINT16 in=0;
 17472                           
 17473                           ; BSR set to: 0
 17474                           ;incstack = 0
 17475  0149C4  0E00               	movlw	0
 17476  0149C6  0100               	movlb	0	; () banked
 17477  0149C8  6F65               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 17478  0149CA  0E00               	movlw	0
 17479  0149CC  6F64               	movwf	HMI_SetSegments@in& (0+255),b
 17480                           
 17481                           ;HMI.c: 229: while(*pString)
 17482  0149CE  D038               	goto	l1202
 17483  0149D0                     
 17484                           ; BSR set to: 0
 17485                           ;HMI.c: 230: {
 17486                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 17487                           
 17488                           ; BSR set to: 0
 17489  0149D0  0E1E               	movlw	low _HMIBoard
 17490  0149D2  0100               	movlb	0	; () banked
 17491  0149D4  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 17492  0149D6  6ED9               	movwf	fsr2l,c
 17493  0149D8  0E01               	movlw	high _HMIBoard
 17494  0149DA  0100               	movlb	0	; () banked
 17495  0149DC  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 17496  0149DE  6EDA               	movwf	fsr2h,c
 17497  0149E0  C061  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 17498  0149E4  C062  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 17499  0149E8  50E7               	movf	indf1,w,c
 17500  0149EA  EC3C  F08E         	call	_ToSegment
 17501  0149EE  6EDF               	movwf	indf2,c
 17502                           
 17503                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 17504  0149F0  0E1E               	movlw	low _HMIBoard
 17505  0149F2  0100               	movlb	0	; () banked
 17506  0149F4  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 17507  0149F6  6ED9               	movwf	fsr2l,c
 17508  0149F8  0E01               	movlw	high _HMIBoard
 17509  0149FA  0100               	movlb	0	; () banked
 17510  0149FC  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 17511  0149FE  6EDA               	movwf	fsr2h,c
 17512  014A00  0E80               	movlw	128
 17513  014A02  18DE               	xorwf	postinc2,w,c
 17514  014A04  A4D8               	btfss	status,2,c
 17515  014A06  D00E               	goto	l1201
 17516                           
 17517                           ; BSR set to: 0
 17518                           ;HMI.c: 234: {
 17519                           ;HMI.c: 235: in--;
 17520  014A08  0100               	movlb	0	; () banked
 17521  014A0A  0764               	decf	HMI_SetSegments@in& (0+255),f,b
 17522  014A0C  A0D8               	btfss	status,0,c
 17523  014A0E  0765               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 17527  014A10  0E1E               	movlw	low _HMIBoard
 17528  014A12  0100               	movlb	0	; () banked
 17529  014A14  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 17530  014A16  6ED9               	movwf	fsr2l,c
 17531  014A18  0E01               	movlw	high _HMIBoard
 17532  014A1A  0100               	movlb	0	; () banked
 17533  014A1C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 17534  014A1E  6EDA               	movwf	fsr2h,c
 17535  014A20  0E00               	movlw	0
 17536  014A22  8EDB               	bsf	plusw2,7,c
 17537  014A24                     l1201:
 17538                           
 17539                           ; BSR set to: 0
 17540                           ;HMI.c: 237: }
 17541                           ;HMI.c: 239: pString++;
 17542                           
 17543                           ; BSR set to: 0
 17544  014A24  0100               	movlb	0	; () banked
 17545  014A26  4B61               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 17546  014A28  2B62               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;HMI.c: 240: in++;
 17550  014A2A  0100               	movlb	0	; () banked
 17551  014A2C  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 17552  014A2E  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;HMI.c: 241: if (in>=6)
 17556  014A30  0100               	movlb	0	; () banked
 17557  014A32  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 17558  014A34  E11A               	bnz	l12032
 17559  014A36  0E06               	movlw	6
 17560  014A38  0100               	movlb	0	; () banked
 17561  014A3A  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 17562  014A3C  B0D8               	btfsc	status,0,c
 17563  014A3E  D015               	goto	l1204
 17564  014A40                     l1202:
 17565                           
 17566                           ; BSR set to: 0
 17567                           
 17568                           ; BSR set to: 0
 17569                           
 17570                           ; BSR set to: 0
 17571  014A40  C061  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 17572  014A44  C062  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 17573  014A48  50DF               	movf	indf2,w,c
 17574  014A4A  B4D8               	btfsc	status,2,c
 17575  014A4C  D00E               	goto	l1204
 17576  014A4E  D7C0               	goto	l1200
 17577  014A50                     
 17578                           ; BSR set to: 0
 17579                           ;HMI.c: 245: {
 17580                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 17581                           
 17582                           ; BSR set to: 0
 17583  014A50  0E1E               	movlw	low _HMIBoard
 17584  014A52  0100               	movlb	0	; () banked
 17585  014A54  2564               	addwf	HMI_SetSegments@in& (0+255),w,b
 17586  014A56  6ED9               	movwf	fsr2l,c
 17587  014A58  0E01               	movlw	high _HMIBoard
 17588  014A5A  0100               	movlb	0	; () banked
 17589  014A5C  2165               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 17590  014A5E  6EDA               	movwf	fsr2h,c
 17591  014A60  0E00               	movlw	0
 17592  014A62  6EDF               	movwf	indf2,c
 17593                           
 17594                           ; BSR set to: 0
 17595                           ;HMI.c: 247: in++;
 17596  014A64  0100               	movlb	0	; () banked
 17597  014A66  4B64               	infsnz	HMI_SetSegments@in& (0+255),f,b
 17598  014A68  2B65               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 17599  014A6A                     l1204:
 17600  014A6A                     l12032:
 17601                           
 17602                           ; BSR set to: 0
 17603  014A6A  0100               	movlb	0	; () banked
 17604  014A6C  5165               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 17605  014A6E  E106               	bnz	l1207
 17606  014A70  0E06               	movlw	6
 17607  014A72  0100               	movlb	0	; () banked
 17608  014A74  5D64               	subwf	HMI_SetSegments@in& (0+255),w,b
 17609  014A76  B0D8               	btfsc	status,0,c
 17610  014A78  0012               	return	
 17611  014A7A  D7EA               	goto	l1205
 17612  014A7C                     l1207:
 17613                           
 17614                           ; BSR set to: 0
 17615  014A7C  0012               	return		;funcret
 17616  014A7E                     __end_of_HMI_SetSegments:
 17617                           	opt stack 0
 17618                           tosu	equ	0xFFF
 17619                           tosh	equ	0xFFE
 17620                           tosl	equ	0xFFD
 17621                           pclath	equ	0xFFA
 17622                           tblptru	equ	0xFF8
 17623                           tblptrh	equ	0xFF7
 17624                           tblptrl	equ	0xFF6
 17625                           tablat	equ	0xFF5
 17626                           prodh	equ	0xFF4
 17627                           prodl	equ	0xFF3
 17628                           intcon	equ	0xFF2
 17629                           postinc0	equ	0xFEE
 17630                           wreg	equ	0xFE8
 17631                           indf1	equ	0xFE7
 17632                           postdec1	equ	0xFE5
 17633                           fsr1h	equ	0xFE2
 17634                           fsr1l	equ	0xFE1
 17635                           indf2	equ	0xFDF
 17636                           postinc2	equ	0xFDE
 17637                           postdec2	equ	0xFDD
 17638                           plusw2	equ	0xFDB
 17639                           fsr2h	equ	0xFDA
 17640                           fsr2l	equ	0xFD9
 17641                           status	equ	0xFD8
 17642                           
 17643 ;; *************** function _ToSegment *****************
 17644 ;; Defined at:
 17645 ;;		line 284 in file "Library/Types.c"
 17646 ;; Parameters:    Size  Location     Type
 17647 ;;  pCHR            1    wreg     unsigned char 
 17648 ;; Auto vars:     Size  Location     Type
 17649 ;;  pCHR            1    0[BANK0 ] unsigned char 
 17650 ;; Return value:  Size  Location     Type
 17651 ;;                  1    wreg      unsigned char 
 17652 ;; Registers used:
 17653 ;;		wreg, status,2, status,0
 17654 ;; Tracked objects:
 17655 ;;		On entry : 0/0
 17656 ;;		On exit  : 0/0
 17657 ;;		Unchanged: 0/0
 17658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17662 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17663 ;;Total ram usage:        1 bytes
 17664 ;; Hardware stack levels used:    1
 17665 ;; Hardware stack levels required when called:    7
 17666 ;; This function calls:
 17667 ;;		Nothing
 17668 ;; This function is called by:
 17669 ;;		_HMI_SetSegments
 17670 ;; This function uses a non-reentrant model
 17671 ;;
 17672                           
 17673                           	psect	text81
 17674  011C78                     __ptext81:
 17675                           	opt stack 0
 17676  011C78                     _ToSegment:
 17677                           	opt stack 21
 17678                           
 17679                           ; BSR set to: 0
 17680                           ;incstack = 0
 17681                           ;ToSegment@pCHR stored from wreg
 17682  011C78  0100               	movlb	0	; () banked
 17683  011C7A  6F60               	movwf	ToSegment@pCHR& (0+255),b
 17684                           
 17685                           ;Types.c: 286: switch(pCHR)
 17686  011C7C  D07E               	goto	l853
 17687  011C7E  0E3F               	movlw	63
 17688  011C80  0012               	return	
 17689  011C82  0E06               	movlw	6
 17690  011C84  0012               	return	
 17691  011C86  0E5B               	movlw	91
 17692  011C88  0012               	return	
 17693  011C8A  0E4F               	movlw	79
 17694  011C8C  0012               	return	
 17695  011C8E  0E66               	movlw	102
 17696  011C90  0012               	return	
 17697  011C92  0E6D               	movlw	109
 17698  011C94  0012               	return	
 17699  011C96  0E7D               	movlw	125
 17700  011C98  0012               	return	
 17701  011C9A  0E07               	movlw	7
 17702  011C9C  0012               	return	
 17703  011C9E  0E7F               	movlw	127
 17704  011CA0  0012               	return	
 17705  011CA2  0E6F               	movlw	111
 17706  011CA4  0012               	return	
 17707  011CA6  0E5F               	movlw	95
 17708  011CA8  0012               	return	
 17709  011CAA  0E7C               	movlw	124
 17710  011CAC  0012               	return	
 17711  011CAE  0E58               	movlw	88
 17712  011CB0  0012               	return	
 17713  011CB2  0E5E               	movlw	94
 17714  011CB4  0012               	return	
 17715  011CB6  0E7B               	movlw	123
 17716  011CB8  0012               	return	
 17717  011CBA  0E71               	movlw	113
 17718  011CBC  0012               	return	
 17719  011CBE  0E6F               	movlw	111
 17720  011CC0  0012               	return	
 17721  011CC2  0E74               	movlw	116
 17722  011CC4  0012               	return	
 17723  011CC6  0E04               	movlw	4
 17724  011CC8  0012               	return	
 17725  011CCA  0E0E               	movlw	14
 17726  011CCC  0012               	return	
 17727  011CCE  0E7A               	movlw	122
 17728  011CD0  0012               	return	
 17729  011CD2  0E06               	movlw	6
 17730  011CD4  0012               	return	
 17731  011CD6  0E14               	movlw	20
 17732  011CD8  0012               	return	
 17733  011CDA  0E54               	movlw	84
 17734  011CDC  0012               	return	
 17735  011CDE  0E5C               	movlw	92
 17736  011CE0  0012               	return	
 17737  011CE2  0E73               	movlw	115
 17738  011CE4  0012               	return	
 17739  011CE6  0E67               	movlw	103
 17740  011CE8  0012               	return	
 17741  011CEA  0E50               	movlw	80
 17742  011CEC  0012               	return	
 17743  011CEE  0E6D               	movlw	109
 17744  011CF0  0012               	return	
 17745  011CF2  0E78               	movlw	120
 17746  011CF4  0012               	return	
 17747  011CF6  0E1C               	movlw	28
 17748  011CF8  0012               	return	
 17749  011CFA  0E62               	movlw	98
 17750  011CFC  0012               	return	
 17751  011CFE  0E2A               	movlw	42
 17752  011D00  0012               	return	
 17753  011D02  0E64               	movlw	100
 17754  011D04  0012               	return	
 17755  011D06  0E6E               	movlw	110
 17756  011D08  0012               	return	
 17757  011D0A  0E5B               	movlw	91
 17758  011D0C  0012               	return	
 17759  011D0E  0E77               	movlw	119
 17760  011D10  0012               	return	
 17761  011D12  0E7F               	movlw	127
 17762  011D14  0012               	return	
 17763  011D16  0E39               	movlw	57
 17764  011D18  0012               	return	
 17765  011D1A  0E3F               	movlw	63
 17766  011D1C  0012               	return	
 17767  011D1E  0E79               	movlw	121
 17768  011D20  0012               	return	
 17769  011D22  0E71               	movlw	113
 17770  011D24  0012               	return	
 17771  011D26  0E3D               	movlw	61
 17772  011D28  0012               	return	
 17773  011D2A  0E76               	movlw	118
 17774  011D2C  0012               	return	
 17775  011D2E  0E06               	movlw	6
 17776  011D30  0012               	return	
 17777  011D32  0E1E               	movlw	30
 17778  011D34  0012               	return	
 17779  011D36  0E57               	movlw	87
 17780  011D38  0012               	return	
 17781  011D3A  0E38               	movlw	56
 17782  011D3C  0012               	return	
 17783  011D3E  0E76               	movlw	118
 17784  011D40  0012               	return	
 17785  011D42  0E76               	movlw	118
 17786  011D44  0012               	return	
 17787  011D46  0E3F               	movlw	63
 17788  011D48  0012               	return	
 17789  011D4A  0E73               	movlw	115
 17790  011D4C  0012               	return	
 17791  011D4E  0E3F               	movlw	63
 17792  011D50  0012               	return	
 17793  011D52  0E77               	movlw	119
 17794  011D54  0012               	return	
 17795  011D56  0E6D               	movlw	109
 17796  011D58  0012               	return	
 17797  011D5A  0E31               	movlw	49
 17798  011D5C  0012               	return	
 17799  011D5E  0E3E               	movlw	62
 17800  011D60  0012               	return	
 17801  011D62  0E3E               	movlw	62
 17802  011D64  0012               	return	
 17803  011D66  0E7E               	movlw	126
 17804  011D68  0012               	return	
 17805  011D6A  0E76               	movlw	118
 17806  011D6C  0012               	return	
 17807  011D6E  0E66               	movlw	102
 17808  011D70  0012               	return	
 17809  011D72  0E5B               	movlw	91
 17810  011D74  0012               	return	
 17811  011D76  0E80               	movlw	128
 17812  011D78  0012               	return	
 17813  011D7A                     l853:
 17814  011D7A  0100               	movlb	0	; () banked
 17815  011D7C  5160               	movf	ToSegment@pCHR& (0+255),w,b
 17816                           
 17817                           ; Switch size 1, requested type "space"
 17818                           ; Number of cases is 63, Range of values is 46 to 122
 17819                           ; switch strategies available:
 17820                           ; Name         Instructions Cycles
 17821                           ; simple_byte          190    96 (average)
 17822                           ;	Chosen strategy is simple_byte
 17823  011D7E  0A2E               	xorlw	46	; case 46
 17824  011D80  B4D8               	btfsc	status,2,c
 17825  011D82  D7F9               	goto	l917
 17826  011D84  0A1E               	xorlw	30	; case 48
 17827  011D86  B4D8               	btfsc	status,2,c
 17828  011D88  D77A               	goto	l854
 17829  011D8A  0A01               	xorlw	1	; case 49
 17830  011D8C  B4D8               	btfsc	status,2,c
 17831  011D8E  D779               	goto	l856
 17832  011D90  0A03               	xorlw	3	; case 50
 17833  011D92  B4D8               	btfsc	status,2,c
 17834  011D94  D778               	goto	l857
 17835  011D96  0A01               	xorlw	1	; case 51
 17836  011D98  B4D8               	btfsc	status,2,c
 17837  011D9A  D777               	goto	l858
 17838  011D9C  0A07               	xorlw	7	; case 52
 17839  011D9E  B4D8               	btfsc	status,2,c
 17840  011DA0  D776               	goto	l859
 17841  011DA2  0A01               	xorlw	1	; case 53
 17842  011DA4  B4D8               	btfsc	status,2,c
 17843  011DA6  D775               	goto	l860
 17844  011DA8  0A03               	xorlw	3	; case 54
 17845  011DAA  B4D8               	btfsc	status,2,c
 17846  011DAC  D774               	goto	l861
 17847  011DAE  0A01               	xorlw	1	; case 55
 17848  011DB0  B4D8               	btfsc	status,2,c
 17849  011DB2  D773               	goto	l862
 17850  011DB4  0A0F               	xorlw	15	; case 56
 17851  011DB6  B4D8               	btfsc	status,2,c
 17852  011DB8  D772               	goto	l863
 17853  011DBA  0A01               	xorlw	1	; case 57
 17854  011DBC  B4D8               	btfsc	status,2,c
 17855  011DBE  D771               	goto	l864
 17856  011DC0  0A78               	xorlw	120	; case 65
 17857  011DC2  B4D8               	btfsc	status,2,c
 17858  011DC4  D7A4               	goto	l891
 17859  011DC6  0A03               	xorlw	3	; case 66
 17860  011DC8  B4D8               	btfsc	status,2,c
 17861  011DCA  D7A3               	goto	l892
 17862  011DCC  0A01               	xorlw	1	; case 67
 17863  011DCE  B4D8               	btfsc	status,2,c
 17864  011DD0  D7A2               	goto	l893
 17865  011DD2  0A07               	xorlw	7	; case 68
 17866  011DD4  B4D8               	btfsc	status,2,c
 17867  011DD6  D7A1               	goto	l894
 17868  011DD8  0A01               	xorlw	1	; case 69
 17869  011DDA  B4D8               	btfsc	status,2,c
 17870  011DDC  D7A0               	goto	l895
 17871  011DDE  0A03               	xorlw	3	; case 70
 17872  011DE0  B4D8               	btfsc	status,2,c
 17873  011DE2  D79F               	goto	l896
 17874  011DE4  0A01               	xorlw	1	; case 71
 17875  011DE6  B4D8               	btfsc	status,2,c
 17876  011DE8  D79E               	goto	l897
 17877  011DEA  0A0F               	xorlw	15	; case 72
 17878  011DEC  B4D8               	btfsc	status,2,c
 17879  011DEE  D79D               	goto	l898
 17880  011DF0  0A01               	xorlw	1	; case 73
 17881  011DF2  B4D8               	btfsc	status,2,c
 17882  011DF4  D79C               	goto	l899
 17883  011DF6  0A03               	xorlw	3	; case 74
 17884  011DF8  B4D8               	btfsc	status,2,c
 17885  011DFA  D79B               	goto	l900
 17886  011DFC  0A01               	xorlw	1	; case 75
 17887  011DFE  B4D8               	btfsc	status,2,c
 17888  011E00  D79A               	goto	l901
 17889  011E02  0A07               	xorlw	7	; case 76
 17890  011E04  B4D8               	btfsc	status,2,c
 17891  011E06  D799               	goto	l902
 17892  011E08  0A01               	xorlw	1	; case 77
 17893  011E0A  B4D8               	btfsc	status,2,c
 17894  011E0C  D798               	goto	l903
 17895  011E0E  0A03               	xorlw	3	; case 78
 17896  011E10  B4D8               	btfsc	status,2,c
 17897  011E12  D797               	goto	l904
 17898  011E14  0A01               	xorlw	1	; case 79
 17899  011E16  B4D8               	btfsc	status,2,c
 17900  011E18  D796               	goto	l905
 17901  011E1A  0A1F               	xorlw	31	; case 80
 17902  011E1C  B4D8               	btfsc	status,2,c
 17903  011E1E  D795               	goto	l906
 17904  011E20  0A01               	xorlw	1	; case 81
 17905  011E22  B4D8               	btfsc	status,2,c
 17906  011E24  D794               	goto	l907
 17907  011E26  0A03               	xorlw	3	; case 82
 17908  011E28  B4D8               	btfsc	status,2,c
 17909  011E2A  D793               	goto	l908
 17910  011E2C  0A01               	xorlw	1	; case 83
 17911  011E2E  B4D8               	btfsc	status,2,c
 17912  011E30  D792               	goto	l909
 17913  011E32  0A07               	xorlw	7	; case 84
 17914  011E34  B4D8               	btfsc	status,2,c
 17915  011E36  D791               	goto	l910
 17916  011E38  0A01               	xorlw	1	; case 85
 17917  011E3A  B4D8               	btfsc	status,2,c
 17918  011E3C  D790               	goto	l911
 17919  011E3E  0A03               	xorlw	3	; case 86
 17920  011E40  B4D8               	btfsc	status,2,c
 17921  011E42  D78F               	goto	l912
 17922  011E44  0A01               	xorlw	1	; case 87
 17923  011E46  B4D8               	btfsc	status,2,c
 17924  011E48  D78E               	goto	l913
 17925  011E4A  0A0F               	xorlw	15	; case 88
 17926  011E4C  B4D8               	btfsc	status,2,c
 17927  011E4E  D78D               	goto	l914
 17928  011E50  0A01               	xorlw	1	; case 89
 17929  011E52  B4D8               	btfsc	status,2,c
 17930  011E54  D78C               	goto	l915
 17931  011E56  0A03               	xorlw	3	; case 90
 17932  011E58  B4D8               	btfsc	status,2,c
 17933  011E5A  D78B               	goto	l916
 17934  011E5C  0A3B               	xorlw	59	; case 97
 17935  011E5E  B4D8               	btfsc	status,2,c
 17936  011E60  D722               	goto	l865
 17937  011E62  0A03               	xorlw	3	; case 98
 17938  011E64  B4D8               	btfsc	status,2,c
 17939  011E66  D721               	goto	l866
 17940  011E68  0A01               	xorlw	1	; case 99
 17941  011E6A  B4D8               	btfsc	status,2,c
 17942  011E6C  D720               	goto	l867
 17943  011E6E  0A07               	xorlw	7	; case 100
 17944  011E70  B4D8               	btfsc	status,2,c
 17945  011E72  D71F               	goto	l868
 17946  011E74  0A01               	xorlw	1	; case 101
 17947  011E76  B4D8               	btfsc	status,2,c
 17948  011E78  D71E               	goto	l869
 17949  011E7A  0A03               	xorlw	3	; case 102
 17950  011E7C  B4D8               	btfsc	status,2,c
 17951  011E7E  D71D               	goto	l870
 17952  011E80  0A01               	xorlw	1	; case 103
 17953  011E82  B4D8               	btfsc	status,2,c
 17954  011E84  D71C               	goto	l871
 17955  011E86  0A0F               	xorlw	15	; case 104
 17956  011E88  B4D8               	btfsc	status,2,c
 17957  011E8A  D71B               	goto	l872
 17958  011E8C  0A01               	xorlw	1	; case 105
 17959  011E8E  B4D8               	btfsc	status,2,c
 17960  011E90  D71A               	goto	l873
 17961  011E92  0A03               	xorlw	3	; case 106
 17962  011E94  B4D8               	btfsc	status,2,c
 17963  011E96  D719               	goto	l874
 17964  011E98  0A01               	xorlw	1	; case 107
 17965  011E9A  B4D8               	btfsc	status,2,c
 17966  011E9C  D718               	goto	l875
 17967  011E9E  0A07               	xorlw	7	; case 108
 17968  011EA0  B4D8               	btfsc	status,2,c
 17969  011EA2  D717               	goto	l876
 17970  011EA4  0A01               	xorlw	1	; case 109
 17971  011EA6  B4D8               	btfsc	status,2,c
 17972  011EA8  D716               	goto	l877
 17973  011EAA  0A03               	xorlw	3	; case 110
 17974  011EAC  B4D8               	btfsc	status,2,c
 17975  011EAE  D715               	goto	l878
 17976  011EB0  0A01               	xorlw	1	; case 111
 17977  011EB2  B4D8               	btfsc	status,2,c
 17978  011EB4  D714               	goto	l879
 17979  011EB6  0A1F               	xorlw	31	; case 112
 17980  011EB8  B4D8               	btfsc	status,2,c
 17981  011EBA  D713               	goto	l880
 17982  011EBC  0A01               	xorlw	1	; case 113
 17983  011EBE  B4D8               	btfsc	status,2,c
 17984  011EC0  D712               	goto	l881
 17985  011EC2  0A03               	xorlw	3	; case 114
 17986  011EC4  B4D8               	btfsc	status,2,c
 17987  011EC6  D711               	goto	l882
 17988  011EC8  0A01               	xorlw	1	; case 115
 17989  011ECA  B4D8               	btfsc	status,2,c
 17990  011ECC  D710               	goto	l883
 17991  011ECE  0A07               	xorlw	7	; case 116
 17992  011ED0  B4D8               	btfsc	status,2,c
 17993  011ED2  D70F               	goto	l884
 17994  011ED4  0A01               	xorlw	1	; case 117
 17995  011ED6  B4D8               	btfsc	status,2,c
 17996  011ED8  D70E               	goto	l885
 17997  011EDA  0A03               	xorlw	3	; case 118
 17998  011EDC  B4D8               	btfsc	status,2,c
 17999  011EDE  D70D               	goto	l886
 18000  011EE0  0A01               	xorlw	1	; case 119
 18001  011EE2  B4D8               	btfsc	status,2,c
 18002  011EE4  D70C               	goto	l887
 18003  011EE6  0A0F               	xorlw	15	; case 120
 18004  011EE8  B4D8               	btfsc	status,2,c
 18005  011EEA  D70B               	goto	l888
 18006  011EEC  0A01               	xorlw	1	; case 121
 18007  011EEE  B4D8               	btfsc	status,2,c
 18008  011EF0  D70A               	goto	l889
 18009  011EF2  0A03               	xorlw	3	; case 122
 18010  011EF4  B4D8               	btfsc	status,2,c
 18011  011EF6  D709               	goto	l890
 18012                           
 18013                           ;Types.c: 354: return 0;
 18014                           
 18015                           ; BSR set to: 0
 18016  011EF8  0E00               	movlw	0
 18017  011EFA  0012               	return	
 18018  011EFC                     __end_of_ToSegment:
 18019                           	opt stack 0
 18020                           tosu	equ	0xFFF
 18021                           tosh	equ	0xFFE
 18022                           tosl	equ	0xFFD
 18023                           pclath	equ	0xFFA
 18024                           tblptru	equ	0xFF8
 18025                           tblptrh	equ	0xFF7
 18026                           tblptrl	equ	0xFF6
 18027                           tablat	equ	0xFF5
 18028                           prodh	equ	0xFF4
 18029                           prodl	equ	0xFF3
 18030                           intcon	equ	0xFF2
 18031                           postinc0	equ	0xFEE
 18032                           wreg	equ	0xFE8
 18033                           indf1	equ	0xFE7
 18034                           postdec1	equ	0xFE5
 18035                           fsr1h	equ	0xFE2
 18036                           fsr1l	equ	0xFE1
 18037                           indf2	equ	0xFDF
 18038                           postinc2	equ	0xFDE
 18039                           postdec2	equ	0xFDD
 18040                           plusw2	equ	0xFDB
 18041                           fsr2h	equ	0xFDA
 18042                           fsr2l	equ	0xFD9
 18043                           status	equ	0xFD8
 18044                           
 18045 ;; *************** function _HMI_SetButton *****************
 18046 ;; Defined at:
 18047 ;;		line 186 in file "HMI.c"
 18048 ;; Parameters:    Size  Location     Type
 18049 ;;  pValue          1    wreg     unsigned char 
 18050 ;; Auto vars:     Size  Location     Type
 18051 ;;  pValue          1    6[BANK0 ] unsigned char 
 18052 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 18053 ;;  v               1    7[BANK0 ] unsigned char 
 18054 ;; Return value:  Size  Location     Type
 18055 ;;                  1    wreg      void 
 18056 ;; Registers used:
 18057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18058 ;; Tracked objects:
 18059 ;;		On entry : 0/0
 18060 ;;		On exit  : 0/0
 18061 ;;		Unchanged: 0/0
 18062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18064 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18065 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18066 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18067 ;;Total ram usage:        8 bytes
 18068 ;; Hardware stack levels used:    1
 18069 ;; Hardware stack levels required when called:    7
 18070 ;; This function calls:
 18071 ;;		Nothing
 18072 ;; This function is called by:
 18073 ;;		_Event_TestButton
 18074 ;; This function uses a non-reentrant model
 18075 ;;
 18076                           
 18077                           	psect	text82
 18078  0153A6                     __ptext82:
 18079                           	opt stack 0
 18080  0153A6                     _HMI_SetButton:
 18081                           	opt stack 20
 18082                           
 18083                           ;incstack = 0
 18084                           ;HMI_SetButton@pValue stored from wreg
 18085  0153A6  0100               	movlb	0	; () banked
 18086  0153A8  6F66               	movwf	HMI_SetButton@pValue& (0+255),b
 18087                           
 18088                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 18089  0153AA  0E1C               	movlw	low HMI_SetButton@F7213
 18090  0153AC  6EF6               	movwf	tblptrl,c
 18091  0153AE                     	if	1	;There is more than 1 active tblptr byte
 18092  0153AE  0EFD               	movlw	high HMI_SetButton@F7213
 18093  0153B0  6EF7               	movwf	tblptrh,c
 18094  0153B2                     	endif
 18095  0153B2                     	if	1	;There are 3 active tblptr bytes
 18096  0153B2  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 18097  0153B4  6EF8               	movwf	tblptru,c
 18098  0153B6                     	endif
 18099  0153B6  0009               	tblrd		*+
 18100  0153B8  CFF5 F062          	movff	tablat,HMI_SetButton@reindex
 18101  0153BC  0009               	tblrd		*+
 18102  0153BE  CFF5 F063          	movff	tablat,HMI_SetButton@reindex+1
 18103  0153C2  0009               	tblrd		*+
 18104  0153C4  CFF5 F064          	movff	tablat,HMI_SetButton@reindex+2
 18105  0153C8  000A               	tblrd		*-
 18106  0153CA  CFF5 F065          	movff	tablat,HMI_SetButton@reindex+3
 18107                           
 18108                           ;HMI.c: 189: UINT8 v = 0b00010001;
 18109  0153CE  0E11               	movlw	17
 18110  0153D0  0100               	movlb	0	; () banked
 18111  0153D2  6F67               	movwf	HMI_SetButton@v& (0+255),b
 18112                           
 18113                           ; BSR set to: 0
 18114                           ;HMI.c: 190: pValue &= 3;
 18115  0153D4  0E03               	movlw	3
 18116  0153D6  0100               	movlb	0	; () banked
 18117  0153D8  1766               	andwf	HMI_SetButton@pValue& (0+255),f,b
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;HMI.c: 191: v = v << reindex[pValue];
 18121  0153DA  0100               	movlb	0	; () banked
 18122  0153DC  5166               	movf	HMI_SetButton@pValue& (0+255),w,b
 18123  0153DE  0D01               	mullw	1
 18124  0153E0  0E62               	movlw	low HMI_SetButton@reindex
 18125  0153E2  24F3               	addwf	prodl,w,c
 18126  0153E4  6ED9               	movwf	fsr2l,c
 18127  0153E6  0E00               	movlw	high HMI_SetButton@reindex
 18128  0153E8  20F4               	addwfc	prodh,w,c
 18129  0153EA  6EDA               	movwf	fsr2h,c
 18130  0153EC  50DF               	movf	indf2,w,c
 18131  0153EE  0100               	movlb	0	; () banked
 18132  0153F0  6F60               	movwf	??_HMI_SetButton& (0+255),b
 18133  0153F2  C067  F061         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 18134  0153F6  0100               	movlb	0	; () banked
 18135  0153F8  2B60               	incf	??_HMI_SetButton& (0+255),f,b
 18136  0153FA  D003               	goto	u9734
 18137  0153FC                     u9735:
 18138  0153FC  0100               	movlb	0	; () banked
 18139  0153FE  90D8               	bcf	status,0,c
 18140  015400  3761               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 18141  015402                     u9734:
 18142  015402  0100               	movlb	0	; () banked
 18143  015404  2F60               	decfsz	??_HMI_SetButton& (0+255),f,b
 18144  015406  D7FA               	goto	u9735
 18145  015408  0100               	movlb	0	; () banked
 18146  01540A  5161               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 18147  01540C  0100               	movlb	0	; () banked
 18148  01540E  6F67               	movwf	HMI_SetButton@v& (0+255),b
 18149                           
 18150                           ; BSR set to: 0
 18151                           ;HMI.c: 192: v = v >> 4;
 18152  015410  0100               	movlb	0	; () banked
 18153  015412  3967               	swapf	HMI_SetButton@v& (0+255),w,b
 18154  015414  0B0F               	andlw	15
 18155  015416  0100               	movlb	0	; () banked
 18156  015418  6F67               	movwf	HMI_SetButton@v& (0+255),b
 18157                           
 18158                           ; BSR set to: 0
 18159                           ;HMI.c: 193: v = v & 0x0F;
 18160  01541A  0100               	movlb	0	; () banked
 18161  01541C  5167               	movf	HMI_SetButton@v& (0+255),w,b
 18162  01541E  0B0F               	andlw	15
 18163  015420  0100               	movlb	0	; () banked
 18164  015422  6F67               	movwf	HMI_SetButton@v& (0+255),b
 18165                           
 18166                           ; BSR set to: 0
 18167                           ;HMI.c: 194: HMIBoard.pButton = v;
 18168  015424  0101               	movlb	1	; () banked
 18169  015426  5124               	movf	(_HMIBoard+6)& (0+255),w,b
 18170  015428  0100               	movlb	0	; () banked
 18171  01542A  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 18172  01542C  0BF0               	andlw	-16
 18173  01542E  1967               	xorwf	HMI_SetButton@v& (0+255),w,b
 18174  015430  0101               	movlb	1	; () banked
 18175  015432  6F24               	movwf	(_HMIBoard+6)& (0+255),b
 18176                           
 18177                           ; BSR set to: 1
 18178  015434  0012               	return		;funcret
 18179  015436                     __end_of_HMI_SetButton:
 18180                           	opt stack 0
 18181                           tosu	equ	0xFFF
 18182                           tosh	equ	0xFFE
 18183                           tosl	equ	0xFFD
 18184                           pclath	equ	0xFFA
 18185                           tblptru	equ	0xFF8
 18186                           tblptrh	equ	0xFF7
 18187                           tblptrl	equ	0xFF6
 18188                           tablat	equ	0xFF5
 18189                           prodh	equ	0xFF4
 18190                           prodl	equ	0xFF3
 18191                           intcon	equ	0xFF2
 18192                           postinc0	equ	0xFEE
 18193                           wreg	equ	0xFE8
 18194                           indf1	equ	0xFE7
 18195                           postdec1	equ	0xFE5
 18196                           fsr1h	equ	0xFE2
 18197                           fsr1l	equ	0xFE1
 18198                           indf2	equ	0xFDF
 18199                           postinc2	equ	0xFDE
 18200                           postdec2	equ	0xFDD
 18201                           plusw2	equ	0xFDB
 18202                           fsr2h	equ	0xFDA
 18203                           fsr2l	equ	0xFD9
 18204                           status	equ	0xFD8
 18205                           
 18206 ;; *************** function _LED_Toggle *****************
 18207 ;; Defined at:
 18208 ;;		line 50 in file "Library/LED.c"
 18209 ;; Parameters:    Size  Location     Type
 18210 ;;  pLED            1    wreg     enum E6739
 18211 ;; Auto vars:     Size  Location     Type
 18212 ;;  pLED            1   24[BANK0 ] enum E6739
 18213 ;; Return value:  Size  Location     Type
 18214 ;;                  1    wreg      void 
 18215 ;; Registers used:
 18216 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18217 ;; Tracked objects:
 18218 ;;		On entry : 0/0
 18219 ;;		On exit  : 0/0
 18220 ;;		Unchanged: 0/0
 18221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18225 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18226 ;;Total ram usage:        1 bytes
 18227 ;; Hardware stack levels used:    1
 18228 ;; Hardware stack levels required when called:   12
 18229 ;; This function calls:
 18230 ;;		_Port_TogglePin
 18231 ;; This function is called by:
 18232 ;;		_LCD_Reset
 18233 ;;		_Event_DIPSwitch
 18234 ;;		_Event_TestButton
 18235 ;;		_Event_ADCSequenceComplete
 18236 ;;		_Event_HMI_DIPSwitch
 18237 ;;		_Event_HMI_LeftButton
 18238 ;;		_Event_HMI_RightButton
 18239 ;;		_Event_HMI_UpButton
 18240 ;;		_Event_HMI_DownButton
 18241 ;; This function uses a non-reentrant model
 18242 ;;
 18243                           
 18244                           	psect	text83
 18245  01615E                     __ptext83:
 18246                           	opt stack 0
 18247  01615E                     _LED_Toggle:
 18248                           	opt stack 15
 18249                           
 18250                           ; BSR set to: 1
 18251                           ;incstack = 0
 18252                           ;LED_Toggle@pLED stored from wreg
 18253  01615E  0100               	movlb	0	; () banked
 18254  016160  6F78               	movwf	LED_Toggle@pLED& (0+255),b
 18255                           
 18256                           ;LED.c: 52: switch (pLED)
 18257  016162  D018               	goto	l234
 18258  016164                     
 18259                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 18260  016164  0E35               	movlw	low _PortC
 18261  016166  0100               	movlb	0	; () banked
 18262  016168  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 18263  01616A  0E00               	movlw	high _PortC
 18264  01616C  0100               	movlb	0	; () banked
 18265  01616E  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 18266  016170  0E00               	movlw	0
 18267  016172  0100               	movlb	0	; () banked
 18268  016174  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 18269  016176  ECFD  F0B2         	call	_Port_TogglePin	;wreg free
 18270                           
 18271                           ;LED.c: 56: break;
 18272  01617A  0012               	return	
 18273  01617C                     
 18274                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 18275  01617C  0E35               	movlw	low _PortC
 18276  01617E  0100               	movlb	0	; () banked
 18277  016180  6F74               	movwf	Port_TogglePin@pInput& (0+255),b
 18278  016182  0E00               	movlw	high _PortC
 18279  016184  0100               	movlb	0	; () banked
 18280  016186  6F75               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 18281  016188  0E01               	movlw	1
 18282  01618A  0100               	movlb	0	; () banked
 18283  01618C  6F76               	movwf	Port_TogglePin@pPin& (0+255),b
 18284  01618E  ECFD  F0B2         	call	_Port_TogglePin	;wreg free
 18285                           
 18286                           ;LED.c: 60: }
 18287                           
 18288                           ;LED.c: 59: break;
 18289  016192  0012               	return	
 18290  016194                     l234:
 18291  016194  0100               	movlb	0	; () banked
 18292  016196  5178               	movf	LED_Toggle@pLED& (0+255),w,b
 18293                           
 18294                           ; Switch size 1, requested type "space"
 18295                           ; Number of cases is 2, Range of values is 0 to 1
 18296                           ; switch strategies available:
 18297                           ; Name         Instructions Cycles
 18298                           ; simple_byte            7     4 (average)
 18299                           ;	Chosen strategy is simple_byte
 18300  016198  0A00               	xorlw	0	; case 0
 18301  01619A  B4D8               	btfsc	status,2,c
 18302  01619C  D7E3               	goto	l235
 18303  01619E  0A01               	xorlw	1	; case 1
 18304  0161A0  A4D8               	btfss	status,2,c
 18305  0161A2  0012               	return	
 18306  0161A4  D7EB               	goto	l237
 18307  0161A6                     __end_of_LED_Toggle:
 18308                           	opt stack 0
 18309                           tosu	equ	0xFFF
 18310                           tosh	equ	0xFFE
 18311                           tosl	equ	0xFFD
 18312                           pclath	equ	0xFFA
 18313                           tblptru	equ	0xFF8
 18314                           tblptrh	equ	0xFF7
 18315                           tblptrl	equ	0xFF6
 18316                           tablat	equ	0xFF5
 18317                           prodh	equ	0xFF4
 18318                           prodl	equ	0xFF3
 18319                           intcon	equ	0xFF2
 18320                           postinc0	equ	0xFEE
 18321                           wreg	equ	0xFE8
 18322                           indf1	equ	0xFE7
 18323                           postdec1	equ	0xFE5
 18324                           fsr1h	equ	0xFE2
 18325                           fsr1l	equ	0xFE1
 18326                           indf2	equ	0xFDF
 18327                           postinc2	equ	0xFDE
 18328                           postdec2	equ	0xFDD
 18329                           plusw2	equ	0xFDB
 18330                           fsr2h	equ	0xFDA
 18331                           fsr2l	equ	0xFD9
 18332                           status	equ	0xFD8
 18333                           
 18334 ;; *************** function _Port_TogglePin *****************
 18335 ;; Defined at:
 18336 ;;		line 278 in file "Library/Port.c"
 18337 ;; Parameters:    Size  Location     Type
 18338 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 18339 ;;		 -> PortC(10), 
 18340 ;;  pPin            1   22[BANK0 ] enum E6750
 18341 ;; Auto vars:     Size  Location     Type
 18342 ;;  Value           1   23[BANK0 ] unsigned char 
 18343 ;; Return value:  Size  Location     Type
 18344 ;;                  1    wreg      void 
 18345 ;; Registers used:
 18346 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18347 ;; Tracked objects:
 18348 ;;		On entry : 0/0
 18349 ;;		On exit  : 0/0
 18350 ;;		Unchanged: 0/0
 18351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18352 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18354 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18355 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18356 ;;Total ram usage:        4 bytes
 18357 ;; Hardware stack levels used:    1
 18358 ;; Hardware stack levels required when called:   11
 18359 ;; This function calls:
 18360 ;;		_Port_GetPin
 18361 ;;		_Port_SetPin
 18362 ;; This function is called by:
 18363 ;;		_LED_Toggle
 18364 ;; This function uses a non-reentrant model
 18365 ;;
 18366                           
 18367                           	psect	text84
 18368  0165FA                     __ptext84:
 18369                           	opt stack 0
 18370  0165FA                     _Port_TogglePin:
 18371                           	opt stack 15
 18372                           
 18373                           ;Port.c: 280: UINT8 Value;
 18374                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 18375                           
 18376                           ;incstack = 0
 18377  0165FA  C074  F060         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 18378  0165FE  C075  F061         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 18379  016602  C076  F062         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 18380  016606  ECF7  F0B0         	call	_Port_GetPin	;wreg free
 18381  01660A  0100               	movlb	0	; () banked
 18382  01660C  6F77               	movwf	Port_TogglePin@Value& (0+255),b
 18383                           
 18384                           ; BSR set to: 0
 18385                           ;Port.c: 282: Value ^= 0x01;
 18386  01660E  0E01               	movlw	1
 18387  016610  0100               	movlb	0	; () banked
 18388  016612  1B77               	xorwf	Port_TogglePin@Value& (0+255),f,b
 18389                           
 18390                           ; BSR set to: 0
 18391                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 18392  016614  C074  F06F         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 18393  016618  C075  F070         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 18394  01661C  C076  F071         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 18395  016620  C077  F072         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 18396  016624  EC62  F0A3         	call	_Port_SetPin	;wreg free
 18397  016628  0012               	return		;funcret
 18398  01662A                     __end_of_Port_TogglePin:
 18399                           	opt stack 0
 18400                           tosu	equ	0xFFF
 18401                           tosh	equ	0xFFE
 18402                           tosl	equ	0xFFD
 18403                           pclath	equ	0xFFA
 18404                           tblptru	equ	0xFF8
 18405                           tblptrh	equ	0xFF7
 18406                           tblptrl	equ	0xFF6
 18407                           tablat	equ	0xFF5
 18408                           prodh	equ	0xFF4
 18409                           prodl	equ	0xFF3
 18410                           intcon	equ	0xFF2
 18411                           postinc0	equ	0xFEE
 18412                           wreg	equ	0xFE8
 18413                           indf1	equ	0xFE7
 18414                           postdec1	equ	0xFE5
 18415                           fsr1h	equ	0xFE2
 18416                           fsr1l	equ	0xFE1
 18417                           indf2	equ	0xFDF
 18418                           postinc2	equ	0xFDE
 18419                           postdec2	equ	0xFDD
 18420                           plusw2	equ	0xFDB
 18421                           fsr2h	equ	0xFDA
 18422                           fsr2l	equ	0xFD9
 18423                           status	equ	0xFD8
 18424                           
 18425 ;; *************** function _Port_SetPin *****************
 18426 ;; Defined at:
 18427 ;;		line 247 in file "Library/Port.c"
 18428 ;; Parameters:    Size  Location     Type
 18429 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 18430 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 18431 ;;  pPin            1   17[BANK0 ] enum E6750
 18432 ;;  pValue          1   18[BANK0 ] unsigned char 
 18433 ;; Auto vars:     Size  Location     Type
 18434 ;;  Type            1   19[BANK0 ] enum E6795
 18435 ;; Return value:  Size  Location     Type
 18436 ;;                  1    wreg      void 
 18437 ;; Registers used:
 18438 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18439 ;; Tracked objects:
 18440 ;;		On entry : 0/0
 18441 ;;		On exit  : 0/0
 18442 ;;		Unchanged: 0/0
 18443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18444 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18445 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18446 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18447 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18448 ;;Total ram usage:        5 bytes
 18449 ;; Hardware stack levels used:    1
 18450 ;; Hardware stack levels required when called:   10
 18451 ;; This function calls:
 18452 ;;		_Byte_SetBit
 18453 ;;		_Word_GetPair
 18454 ;; This function is called by:
 18455 ;;		_Reset_Low
 18456 ;;		_Reset_High
 18457 ;;		_LED_Set
 18458 ;;		_Port_TogglePin
 18459 ;;		_Motor_Init
 18460 ;;		_Motor_Step
 18461 ;;		_MXK_Init
 18462 ;; This function uses a non-reentrant model
 18463 ;;
 18464                           
 18465                           	psect	text85
 18466  0146C4                     __ptext85:
 18467                           	opt stack 0
 18468  0146C4                     _Port_SetPin:
 18469                           	opt stack 19
 18470                           
 18471                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 18472                           
 18473                           ;incstack = 0
 18474  0146C4  0E08               	movlw	8
 18475  0146C6  0100               	movlb	0	; () banked
 18476  0146C8  256F               	addwf	Port_SetPin@pInput& (0+255),w,b
 18477  0146CA  0100               	movlb	0	; () banked
 18478  0146CC  6F6C               	movwf	Word_GetPair@pInput& (0+255),b
 18479  0146CE  0E00               	movlw	0
 18480  0146D0  0100               	movlb	0	; () banked
 18481  0146D2  2170               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 18482  0146D4  0100               	movlb	0	; () banked
 18483  0146D6  6F6D               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 18484  0146D8  C071  F06E         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 18485  0146DC  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 18486  0146E0  0100               	movlb	0	; () banked
 18487  0146E2  6F73               	movwf	Port_SetPin@Type& (0+255),b
 18488                           
 18489                           ;Port.c: 250: switch (Type)
 18490  0146E4  D042               	goto	l427
 18491  0146E6                     
 18492                           ; BSR set to: 0
 18493                           ;Port.c: 256: pValue &= 1;
 18494                           
 18495                           ; BSR set to: 0
 18496  0146E6  0E01               	movlw	1
 18497  0146E8  0100               	movlb	0	; () banked
 18498  0146EA  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 18499                           
 18500                           ; BSR set to: 0
 18501                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18502  0146EC  0100               	movlb	0	; () banked
 18503  0146EE  EE20 F002          	lfsr	2,2
 18504  0146F2  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 18505  0146F4  26D9               	addwf	fsr2l,f,c
 18506  0146F6  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18507  0146F8  22DA               	addwfc	fsr2h,f,c
 18508  0146FA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18509  0146FE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18510  014702  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18511  014706  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18512  01470A  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 18513                           
 18514                           ;Port.c: 258: break;
 18515  01470E  0012               	return	
 18516  014710                     
 18517                           ;Port.c: 261: pValue &= 1;
 18518  014710  0E01               	movlw	1
 18519  014712  0100               	movlb	0	; () banked
 18520  014714  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 18521                           
 18522                           ;Port.c: 262: pValue ^= 1;
 18523  014716  0E01               	movlw	1
 18524  014718  0100               	movlb	0	; () banked
 18525  01471A  1B72               	xorwf	Port_SetPin@pValue& (0+255),f,b
 18526                           
 18527                           ; BSR set to: 0
 18528                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18529  01471C  0100               	movlb	0	; () banked
 18530  01471E  EE20 F002          	lfsr	2,2
 18531  014722  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 18532  014724  26D9               	addwf	fsr2l,f,c
 18533  014726  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18534  014728  22DA               	addwfc	fsr2h,f,c
 18535  01472A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18536  01472E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18537  014732  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18538  014736  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18539  01473A  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 18540                           
 18541                           ;Port.c: 264: break;
 18542  01473E  0012               	return	
 18543  014740                     
 18544                           ;Port.c: 266: pValue &= 1;
 18545  014740  0E01               	movlw	1
 18546  014742  0100               	movlb	0	; () banked
 18547  014744  1772               	andwf	Port_SetPin@pValue& (0+255),f,b
 18548                           
 18549                           ; BSR set to: 0
 18550                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 18551  014746  0100               	movlb	0	; () banked
 18552  014748  EE20 F004          	lfsr	2,4
 18553  01474C  516F               	movf	Port_SetPin@pInput& (0+255),w,b
 18554  01474E  26D9               	addwf	fsr2l,f,c
 18555  014750  5170               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18556  014752  22DA               	addwfc	fsr2h,f,c
 18557  014754  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 18558  014758  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 18559  01475C  C071  F062         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18560  014760  C072  F063         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18561  014764  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 18562                           
 18563                           ;Port.c: 269: }
 18564                           
 18565                           ;Port.c: 268: break;
 18566  014768  0012               	return	
 18567  01476A                     l427:
 18568  01476A  0100               	movlb	0	; () banked
 18569  01476C  5173               	movf	Port_SetPin@Type& (0+255),w,b
 18570                           
 18571                           ; Switch size 1, requested type "space"
 18572                           ; Number of cases is 4, Range of values is 0 to 3
 18573                           ; switch strategies available:
 18574                           ; Name         Instructions Cycles
 18575                           ; simple_byte           13     7 (average)
 18576                           ;	Chosen strategy is simple_byte
 18577  01476E  0A00               	xorlw	0	; case 0
 18578  014770  B4D8               	btfsc	status,2,c
 18579  014772  0012               	return	
 18580  014774  0A01               	xorlw	1	; case 1
 18581  014776  B4D8               	btfsc	status,2,c
 18582  014778  D7B6               	goto	l430
 18583  01477A  0A03               	xorlw	3	; case 2
 18584  01477C  B4D8               	btfsc	status,2,c
 18585  01477E  D7C8               	goto	l432
 18586  014780  0A01               	xorlw	1	; case 3
 18587  014782  A4D8               	btfss	status,2,c
 18588  014784  0012               	return	
 18589  014786  D7DC               	goto	l433
 18590  014788                     __end_of_Port_SetPin:
 18591                           	opt stack 0
 18592                           tosu	equ	0xFFF
 18593                           tosh	equ	0xFFE
 18594                           tosl	equ	0xFFD
 18595                           pclath	equ	0xFFA
 18596                           tblptru	equ	0xFF8
 18597                           tblptrh	equ	0xFF7
 18598                           tblptrl	equ	0xFF6
 18599                           tablat	equ	0xFF5
 18600                           prodh	equ	0xFF4
 18601                           prodl	equ	0xFF3
 18602                           intcon	equ	0xFF2
 18603                           postinc0	equ	0xFEE
 18604                           wreg	equ	0xFE8
 18605                           indf1	equ	0xFE7
 18606                           postdec1	equ	0xFE5
 18607                           fsr1h	equ	0xFE2
 18608                           fsr1l	equ	0xFE1
 18609                           indf2	equ	0xFDF
 18610                           postinc2	equ	0xFDE
 18611                           postdec2	equ	0xFDD
 18612                           plusw2	equ	0xFDB
 18613                           fsr2h	equ	0xFDA
 18614                           fsr2l	equ	0xFD9
 18615                           status	equ	0xFD8
 18616                           
 18617 ;; *************** function _Port_GetPin *****************
 18618 ;; Defined at:
 18619 ;;		line 271 in file "Library/Port.c"
 18620 ;; Parameters:    Size  Location     Type
 18621 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 18622 ;;		 -> PortB(10), PortE(10), PortC(10), 
 18623 ;;  pPin            1    2[BANK0 ] enum E6750
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;  Output          1    5[BANK0 ] unsigned char 
 18626 ;; Return value:  Size  Location     Type
 18627 ;;                  1    wreg      unsigned char 
 18628 ;; Registers used:
 18629 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18630 ;; Tracked objects:
 18631 ;;		On entry : 0/0
 18632 ;;		On exit  : 0/0
 18633 ;;		Unchanged: 0/0
 18634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18635 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18637 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18638 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18639 ;;Total ram usage:        6 bytes
 18640 ;; Hardware stack levels used:    1
 18641 ;; Hardware stack levels required when called:    7
 18642 ;; This function calls:
 18643 ;;		Nothing
 18644 ;; This function is called by:
 18645 ;;		_Port_TogglePin
 18646 ;;		_HMI_LeftSwitch
 18647 ;;		_HMI_RightSwitch
 18648 ;;		_HMI_UpSwitch
 18649 ;;		_HMI_DownSwitch
 18650 ;;		_MXK_TestButton
 18651 ;; This function uses a non-reentrant model
 18652 ;;
 18653                           
 18654                           	psect	text86
 18655  0161EE                     __ptext86:
 18656                           	opt stack 0
 18657  0161EE                     _Port_GetPin:
 18658                           	opt stack 22
 18659                           
 18660                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 18661                           
 18662                           ;incstack = 0
 18663  0161EE  0100               	movlb	0	; () banked
 18664  0161F0  EE20 F006          	lfsr	2,6
 18665  0161F4  5160               	movf	Port_GetPin@pInput& (0+255),w,b
 18666  0161F6  26D9               	addwf	fsr2l,f,c
 18667  0161F8  5161               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 18668  0161FA  22DA               	addwfc	fsr2h,f,c
 18669  0161FC  CFDE F063          	movff	postinc2,??_Port_GetPin
 18670  016200  CFDD F064          	movff	postdec2,??_Port_GetPin+1
 18671  016204  C063  FFD9         	movff	??_Port_GetPin,fsr2l
 18672  016208  C064  FFDA         	movff	??_Port_GetPin+1,fsr2h
 18673  01620C  50DF               	movf	indf2,w,c
 18674  01620E  0100               	movlb	0	; () banked
 18675  016210  6F65               	movwf	Port_GetPin@Output& (0+255),b
 18676                           
 18677                           ; BSR set to: 0
 18678                           ;Port.c: 274: Output >>= (UINT8)pPin;
 18679  016212  0100               	movlb	0	; () banked
 18680  016214  2962               	incf	Port_GetPin@pPin& (0+255),w,b
 18681  016216  0100               	movlb	0	; () banked
 18682  016218  6F63               	movwf	??_Port_GetPin& (0+255),b
 18683  01621A  D003               	goto	u9120
 18684  01621C                     u9125:
 18685  01621C  0100               	movlb	0	; () banked
 18686  01621E  90D8               	bcf	status,0,c
 18687  016220  3365               	rrcf	Port_GetPin@Output& (0+255),f,b
 18688  016222                     u9120:
 18689  016222  0100               	movlb	0	; () banked
 18690  016224  2F63               	decfsz	??_Port_GetPin& (0+255),f,b
 18691  016226  D7FA               	goto	u9125
 18692                           
 18693                           ;Port.c: 275: Output &= 1;
 18694  016228  0E01               	movlw	1
 18695  01622A  0100               	movlb	0	; () banked
 18696  01622C  1765               	andwf	Port_GetPin@Output& (0+255),f,b
 18697                           
 18698                           ; BSR set to: 0
 18699                           ;Port.c: 276: return Output;
 18700  01622E  0100               	movlb	0	; () banked
 18701  016230  5165               	movf	Port_GetPin@Output& (0+255),w,b
 18702  016232  0012               	return	
 18703  016234                     __end_of_Port_GetPin:
 18704                           	opt stack 0
 18705                           tosu	equ	0xFFF
 18706                           tosh	equ	0xFFE
 18707                           tosl	equ	0xFFD
 18708                           pclath	equ	0xFFA
 18709                           tblptru	equ	0xFF8
 18710                           tblptrh	equ	0xFF7
 18711                           tblptrl	equ	0xFF6
 18712                           tablat	equ	0xFF5
 18713                           prodh	equ	0xFF4
 18714                           prodl	equ	0xFF3
 18715                           intcon	equ	0xFF2
 18716                           postinc0	equ	0xFEE
 18717                           wreg	equ	0xFE8
 18718                           indf1	equ	0xFE7
 18719                           postdec1	equ	0xFE5
 18720                           fsr1h	equ	0xFE2
 18721                           fsr1l	equ	0xFE1
 18722                           indf2	equ	0xFDF
 18723                           postinc2	equ	0xFDE
 18724                           postdec2	equ	0xFDD
 18725                           plusw2	equ	0xFDB
 18726                           fsr2h	equ	0xFDA
 18727                           fsr2l	equ	0xFD9
 18728                           status	equ	0xFD8
 18729                           
 18730 ;; *************** function _HMI_SetBar *****************
 18731 ;; Defined at:
 18732 ;;		line 205 in file "HMI.c"
 18733 ;; Parameters:    Size  Location     Type
 18734 ;;  pValue          1    wreg     unsigned char 
 18735 ;; Auto vars:     Size  Location     Type
 18736 ;;  pValue          1    0[BANK0 ] unsigned char 
 18737 ;; Return value:  Size  Location     Type
 18738 ;;                  1    wreg      void 
 18739 ;; Registers used:
 18740 ;;		wreg
 18741 ;; Tracked objects:
 18742 ;;		On entry : 0/0
 18743 ;;		On exit  : 0/0
 18744 ;;		Unchanged: 0/0
 18745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18747 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18749 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18750 ;;Total ram usage:        1 bytes
 18751 ;; Hardware stack levels used:    1
 18752 ;; Hardware stack levels required when called:    7
 18753 ;; This function calls:
 18754 ;;		Nothing
 18755 ;; This function is called by:
 18756 ;;		_Event_DIPSwitch
 18757 ;;		_Event_HMI_DIPSwitch
 18758 ;;		_Event_HMI_LeftButton
 18759 ;;		_Event_HMI_RightButton
 18760 ;; This function uses a non-reentrant model
 18761 ;;
 18762                           
 18763                           	psect	text87
 18764  016A6C                     __ptext87:
 18765                           	opt stack 0
 18766  016A6C                     _HMI_SetBar:
 18767                           	opt stack 20
 18768                           
 18769                           ; BSR set to: 0
 18770                           ;incstack = 0
 18771                           ;HMI_SetBar@pValue stored from wreg
 18772  016A6C  0100               	movlb	0	; () banked
 18773  016A6E  6F60               	movwf	HMI_SetBar@pValue& (0+255),b
 18774                           
 18775                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 18776  016A70  C060  F125         	movff	HMI_SetBar@pValue,_HMIBoard+7
 18777  016A74  0012               	return		;funcret
 18778  016A76                     __end_of_HMI_SetBar:
 18779                           	opt stack 0
 18780                           tosu	equ	0xFFF
 18781                           tosh	equ	0xFFE
 18782                           tosl	equ	0xFFD
 18783                           pclath	equ	0xFFA
 18784                           tblptru	equ	0xFF8
 18785                           tblptrh	equ	0xFF7
 18786                           tblptrl	equ	0xFF6
 18787                           tablat	equ	0xFF5
 18788                           prodh	equ	0xFF4
 18789                           prodl	equ	0xFF3
 18790                           intcon	equ	0xFF2
 18791                           postinc0	equ	0xFEE
 18792                           wreg	equ	0xFE8
 18793                           indf1	equ	0xFE7
 18794                           postdec1	equ	0xFE5
 18795                           fsr1h	equ	0xFE2
 18796                           fsr1l	equ	0xFE1
 18797                           indf2	equ	0xFDF
 18798                           postinc2	equ	0xFDE
 18799                           postdec2	equ	0xFDD
 18800                           plusw2	equ	0xFDB
 18801                           fsr2h	equ	0xFDA
 18802                           fsr2l	equ	0xFD9
 18803                           status	equ	0xFD8
 18804                           
 18805 ;; *************** function _HMI_GetBar *****************
 18806 ;; Defined at:
 18807 ;;		line 209 in file "HMI.c"
 18808 ;; Parameters:    Size  Location     Type
 18809 ;;		None
 18810 ;; Auto vars:     Size  Location     Type
 18811 ;;		None
 18812 ;; Return value:  Size  Location     Type
 18813 ;;                  1    wreg      unsigned char 
 18814 ;; Registers used:
 18815 ;;		wreg, status,2
 18816 ;; Tracked objects:
 18817 ;;		On entry : 0/0
 18818 ;;		On exit  : 0/0
 18819 ;;		Unchanged: 0/0
 18820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18825 ;;Total ram usage:        0 bytes
 18826 ;; Hardware stack levels used:    1
 18827 ;; Hardware stack levels required when called:    7
 18828 ;; This function calls:
 18829 ;;		Nothing
 18830 ;; This function is called by:
 18831 ;;		_Event_DIPSwitch
 18832 ;;		_Event_HMI_DIPSwitch
 18833 ;; This function uses a non-reentrant model
 18834 ;;
 18835                           
 18836                           	psect	text88
 18837  016A8C                     __ptext88:
 18838                           	opt stack 0
 18839  016A8C                     _HMI_GetBar:
 18840                           	opt stack 20
 18841                           
 18842                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 18843                           
 18844                           ;incstack = 0
 18845  016A8C  0101               	movlb	1	; () banked
 18846  016A8E  5125               	movf	(_HMIBoard+7)& (0+255),w,b
 18847  016A90  0012               	return	
 18848  016A92                     __end_of_HMI_GetBar:
 18849                           	opt stack 0
 18850                           tosu	equ	0xFFF
 18851                           tosh	equ	0xFFE
 18852                           tosl	equ	0xFFD
 18853                           pclath	equ	0xFFA
 18854                           tblptru	equ	0xFF8
 18855                           tblptrh	equ	0xFF7
 18856                           tblptrl	equ	0xFF6
 18857                           tablat	equ	0xFF5
 18858                           prodh	equ	0xFF4
 18859                           prodl	equ	0xFF3
 18860                           intcon	equ	0xFF2
 18861                           postinc0	equ	0xFEE
 18862                           wreg	equ	0xFE8
 18863                           indf1	equ	0xFE7
 18864                           postdec1	equ	0xFE5
 18865                           fsr1h	equ	0xFE2
 18866                           fsr1l	equ	0xFE1
 18867                           indf2	equ	0xFDF
 18868                           postinc2	equ	0xFDE
 18869                           postdec2	equ	0xFDD
 18870                           plusw2	equ	0xFDB
 18871                           fsr2h	equ	0xFDA
 18872                           fsr2l	equ	0xFD9
 18873                           status	equ	0xFD8
 18874                           
 18875 ;; *************** function _HMI_Init *****************
 18876 ;; Defined at:
 18877 ;;		line 104 in file "HMI.c"
 18878 ;; Parameters:    Size  Location     Type
 18879 ;;		None
 18880 ;; Auto vars:     Size  Location     Type
 18881 ;;  in              2   72[BANK0 ] unsigned short 
 18882 ;; Return value:  Size  Location     Type
 18883 ;;                  1    wreg      void 
 18884 ;; Registers used:
 18885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18886 ;; Tracked objects:
 18887 ;;		On entry : 0/0
 18888 ;;		On exit  : 0/0
 18889 ;;		Unchanged: 0/0
 18890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18894 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18895 ;;Total ram usage:        2 bytes
 18896 ;; Hardware stack levels used:    1
 18897 ;; Hardware stack levels required when called:   16
 18898 ;; This function calls:
 18899 ;;		_Button_Init
 18900 ;;		_SPI_Init
 18901 ;;		_SPI_MinSpeed
 18902 ;; This function is called by:
 18903 ;;		_main
 18904 ;; This function uses a non-reentrant model
 18905 ;;
 18906                           
 18907                           	psect	text89
 18908  01278C                     __ptext89:
 18909                           	opt stack 0
 18910  01278C                     _HMI_Init:
 18911                           	opt stack 14
 18912                           
 18913                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 18914                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 18915                           
 18916                           ; BSR set to: 1
 18917                           ;incstack = 0
 18918  01278C  0E4E               	movlw	low (_HMIBoard+48)
 18919  01278E  0100               	movlb	0	; () banked
 18920  012790  6F9B               	movwf	Button_Init@pInput& (0+255),b
 18921  012792  0E01               	movlw	high (_HMIBoard+48)
 18922  012794  0100               	movlb	0	; () banked
 18923  012796  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 18924  012798  0E00               	movlw	0
 18925  01279A  0100               	movlb	0	; () banked
 18926  01279C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18927  01279E  0E02               	movlw	2
 18928  0127A0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 18929  0127A2  0E92               	movlw	low _HMI_InitButtons
 18930  0127A4  0100               	movlb	0	; () banked
 18931  0127A6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 18932  0127A8  0E6A               	movlw	high _HMI_InitButtons
 18933  0127AA  0100               	movlb	0	; () banked
 18934  0127AC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18935  0127AE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18936  0127B0  0100               	movlb	0	; () banked
 18937  0127B2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18938  0127B4  0E28               	movlw	low _HMI_DIPSwitch
 18939  0127B6  0100               	movlb	0	; () banked
 18940  0127B8  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 18941  0127BA  0E69               	movlw	high _HMI_DIPSwitch
 18942  0127BC  0100               	movlb	0	; () banked
 18943  0127BE  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18944  0127C0  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 18945  0127C2  0100               	movlb	0	; () banked
 18946  0127C4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18947  0127C6  0E04               	movlw	low _Event_NULL
 18948  0127C8  0100               	movlb	0	; () banked
 18949  0127CA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 18950  0127CC  0E14               	movlw	high _Event_NULL
 18951  0127CE  0100               	movlb	0	; () banked
 18952  0127D0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18953  0127D2  0E00               	movlw	low (_Event_NULL shr (0+16))
 18954  0127D4  0100               	movlb	0	; () banked
 18955  0127D6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18956  0127D8  EC90  F0A2         	call	_Button_Init	;wreg free
 18957                           
 18958                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 18959                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 18960  0127DC  0E30               	movlw	low (_HMIBoard+18)
 18961  0127DE  0100               	movlb	0	; () banked
 18962  0127E0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 18963  0127E2  0E01               	movlw	high (_HMIBoard+18)
 18964  0127E4  0100               	movlb	0	; () banked
 18965  0127E6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 18966  0127E8  0E00               	movlw	0
 18967  0127EA  0100               	movlb	0	; () banked
 18968  0127EC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18969  0127EE  0E02               	movlw	2
 18970  0127F0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 18971  0127F2  0E92               	movlw	low _HMI_InitButtons
 18972  0127F4  0100               	movlb	0	; () banked
 18973  0127F6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 18974  0127F8  0E6A               	movlw	high _HMI_InitButtons
 18975  0127FA  0100               	movlb	0	; () banked
 18976  0127FC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18977  0127FE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18978  012800  0100               	movlb	0	; () banked
 18979  012802  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18980  012804  0E88               	movlw	low _HMI_LeftSwitch
 18981  012806  0100               	movlb	0	; () banked
 18982  012808  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 18983  01280A  0E69               	movlw	high _HMI_LeftSwitch
 18984  01280C  0100               	movlb	0	; () banked
 18985  01280E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18986  012810  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 18987  012812  0100               	movlb	0	; () banked
 18988  012814  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18989  012816  0E04               	movlw	low _Event_NULL
 18990  012818  0100               	movlb	0	; () banked
 18991  01281A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 18992  01281C  0E14               	movlw	high _Event_NULL
 18993  01281E  0100               	movlb	0	; () banked
 18994  012820  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18995  012822  0E00               	movlw	low (_Event_NULL shr (0+16))
 18996  012824  0100               	movlb	0	; () banked
 18997  012826  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18998  012828  EC90  F0A2         	call	_Button_Init	;wreg free
 18999                           
 19000                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19001                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19002  01282C  0E26               	movlw	low (_HMIBoard+8)
 19003  01282E  0100               	movlb	0	; () banked
 19004  012830  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19005  012832  0E01               	movlw	high (_HMIBoard+8)
 19006  012834  0100               	movlb	0	; () banked
 19007  012836  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19008  012838  0E00               	movlw	0
 19009  01283A  0100               	movlb	0	; () banked
 19010  01283C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19011  01283E  0E02               	movlw	2
 19012  012840  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19013  012842  0E92               	movlw	low _HMI_InitButtons
 19014  012844  0100               	movlb	0	; () banked
 19015  012846  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19016  012848  0E6A               	movlw	high _HMI_InitButtons
 19017  01284A  0100               	movlb	0	; () banked
 19018  01284C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19019  01284E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19020  012850  0100               	movlb	0	; () banked
 19021  012852  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19022  012854  0E70               	movlw	low _HMI_RightSwitch
 19023  012856  0100               	movlb	0	; () banked
 19024  012858  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19025  01285A  0E69               	movlw	high _HMI_RightSwitch
 19026  01285C  0100               	movlb	0	; () banked
 19027  01285E  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19028  012860  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19029  012862  0100               	movlb	0	; () banked
 19030  012864  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19031  012866  0E04               	movlw	low _Event_NULL
 19032  012868  0100               	movlb	0	; () banked
 19033  01286A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19034  01286C  0E14               	movlw	high _Event_NULL
 19035  01286E  0100               	movlb	0	; () banked
 19036  012870  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19037  012872  0E00               	movlw	low (_Event_NULL shr (0+16))
 19038  012874  0100               	movlb	0	; () banked
 19039  012876  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19040  012878  EC90  F0A2         	call	_Button_Init	;wreg free
 19041                           
 19042                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 19043                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 19044  01287C  0E3A               	movlw	low (_HMIBoard+28)
 19045  01287E  0100               	movlb	0	; () banked
 19046  012880  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19047  012882  0E01               	movlw	high (_HMIBoard+28)
 19048  012884  0100               	movlb	0	; () banked
 19049  012886  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19050  012888  0E00               	movlw	0
 19051  01288A  0100               	movlb	0	; () banked
 19052  01288C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19053  01288E  0E02               	movlw	2
 19054  012890  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19055  012892  0E92               	movlw	low _HMI_InitButtons
 19056  012894  0100               	movlb	0	; () banked
 19057  012896  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19058  012898  0E6A               	movlw	high _HMI_InitButtons
 19059  01289A  0100               	movlb	0	; () banked
 19060  01289C  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19061  01289E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19062  0128A0  0100               	movlb	0	; () banked
 19063  0128A2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19064  0128A4  0E58               	movlw	low _HMI_UpSwitch
 19065  0128A6  0100               	movlb	0	; () banked
 19066  0128A8  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19067  0128AA  0E69               	movlw	high _HMI_UpSwitch
 19068  0128AC  0100               	movlb	0	; () banked
 19069  0128AE  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19070  0128B0  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 19071  0128B2  0100               	movlb	0	; () banked
 19072  0128B4  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19073  0128B6  0E04               	movlw	low _Event_NULL
 19074  0128B8  0100               	movlb	0	; () banked
 19075  0128BA  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19076  0128BC  0E14               	movlw	high _Event_NULL
 19077  0128BE  0100               	movlb	0	; () banked
 19078  0128C0  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19079  0128C2  0E00               	movlw	low (_Event_NULL shr (0+16))
 19080  0128C4  0100               	movlb	0	; () banked
 19081  0128C6  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19082  0128C8  EC90  F0A2         	call	_Button_Init	;wreg free
 19083                           
 19084                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 19085                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 19086  0128CC  0E44               	movlw	low (_HMIBoard+38)
 19087  0128CE  0100               	movlb	0	; () banked
 19088  0128D0  6F9B               	movwf	Button_Init@pInput& (0+255),b
 19089  0128D2  0E01               	movlw	high (_HMIBoard+38)
 19090  0128D4  0100               	movlb	0	; () banked
 19091  0128D6  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 19092  0128D8  0E00               	movlw	0
 19093  0128DA  0100               	movlb	0	; () banked
 19094  0128DC  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19095  0128DE  0E02               	movlw	2
 19096  0128E0  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 19097  0128E2  0E92               	movlw	low _HMI_InitButtons
 19098  0128E4  0100               	movlb	0	; () banked
 19099  0128E6  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 19100  0128E8  0E6A               	movlw	high _HMI_InitButtons
 19101  0128EA  0100               	movlb	0	; () banked
 19102  0128EC  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19103  0128EE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19104  0128F0  0100               	movlb	0	; () banked
 19105  0128F2  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19106  0128F4  0E40               	movlw	low _HMI_DownSwitch
 19107  0128F6  0100               	movlb	0	; () banked
 19108  0128F8  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 19109  0128FA  0E69               	movlw	high _HMI_DownSwitch
 19110  0128FC  0100               	movlb	0	; () banked
 19111  0128FE  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19112  012900  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 19113  012902  0100               	movlb	0	; () banked
 19114  012904  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19115  012906  0E04               	movlw	low _Event_NULL
 19116  012908  0100               	movlb	0	; () banked
 19117  01290A  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 19118  01290C  0E14               	movlw	high _Event_NULL
 19119  01290E  0100               	movlb	0	; () banked
 19120  012910  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19121  012912  0E00               	movlw	low (_Event_NULL shr (0+16))
 19122  012914  0100               	movlb	0	; () banked
 19123  012916  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19124  012918  EC90  F0A2         	call	_Button_Init	;wreg free
 19125                           
 19126                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 19127  01291C  0EA0               	movlw	160
 19128  01291E  0100               	movlb	0	; () banked
 19129  012920  6F8D               	movwf	SPI_Init@pClock& (0+255),b
 19130  012922  0E86               	movlw	134
 19131  012924  6F8E               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19132  012926  0E01               	movlw	1
 19133  012928  6F8F               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19134  01292A  0E00               	movlw	0
 19135  01292C  6F90               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19136  01292E  0E00               	movlw	0
 19137  012930  0100               	movlb	0	; () banked
 19138  012932  6F91               	movwf	SPI_Init@pChannel& (0+255),b
 19139  012934  0E02               	movlw	2
 19140  012936  0100               	movlb	0	; () banked
 19141  012938  6F92               	movwf	SPI_Init@pMode& (0+255),b
 19142  01293A  EC23  F087         	call	_SPI_Init	;wreg free
 19143                           
 19144                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 19145  01293E  0E58               	movlw	low _SPI1
 19146  012940  0100               	movlb	0	; () banked
 19147  012942  6F6F               	movwf	SPI_MinSpeed@pInput& (0+255),b
 19148  012944  0E01               	movlw	high _SPI1
 19149  012946  0100               	movlb	0	; () banked
 19150  012948  6F70               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 19151  01294A  ECD5  F0AC         	call	_SPI_MinSpeed	;wreg free
 19152                           
 19153                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 19154  01294E  0E00               	movlw	0
 19155  012950  0100               	movlb	0	; () banked
 19156  012952  6FA9               	movwf	(HMI_Init@in+1)& (0+255),b
 19157  012954  0E00               	movlw	0
 19158  012956  6FA8               	movwf	HMI_Init@in& (0+255),b
 19159  012958                     l14354:
 19160                           
 19161                           ; BSR set to: 0
 19162  012958  0100               	movlb	0	; () banked
 19163  01295A  51A9               	movf	(HMI_Init@in+1)& (0+255),w,b
 19164  01295C  E113               	bnz	l1153
 19165  01295E  0E08               	movlw	8
 19166  012960  0100               	movlb	0	; () banked
 19167  012962  5DA8               	subwf	HMI_Init@in& (0+255),w,b
 19168  012964  B0D8               	btfsc	status,0,c
 19169  012966  0012               	return	
 19170                           
 19171                           ; BSR set to: 0
 19172                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 19173                           
 19174                           ; BSR set to: 0
 19175                           
 19176                           ; BSR set to: 0
 19177  012968  0E1E               	movlw	low _HMIBoard
 19178  01296A  0100               	movlb	0	; () banked
 19179  01296C  25A8               	addwf	HMI_Init@in& (0+255),w,b
 19180  01296E  6ED9               	movwf	fsr2l,c
 19181  012970  0E01               	movlw	high _HMIBoard
 19182  012972  0100               	movlb	0	; () banked
 19183  012974  21A9               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 19184  012976  6EDA               	movwf	fsr2h,c
 19185  012978  0E00               	movlw	0
 19186  01297A  6EDF               	movwf	indf2,c
 19187                           
 19188                           ; BSR set to: 0
 19189  01297C  0100               	movlb	0	; () banked
 19190  01297E  4BA8               	infsnz	HMI_Init@in& (0+255),f,b
 19191  012980  2BA9               	incf	(HMI_Init@in+1)& (0+255),f,b
 19192  012982  D7EA               	goto	l14354
 19193  012984                     l1153:
 19194                           
 19195                           ; BSR set to: 0
 19196  012984  0012               	return		;funcret
 19197  012986                     __end_of_HMI_Init:
 19198                           	opt stack 0
 19199                           tosu	equ	0xFFF
 19200                           tosh	equ	0xFFE
 19201                           tosl	equ	0xFFD
 19202                           pclath	equ	0xFFA
 19203                           tblptru	equ	0xFF8
 19204                           tblptrh	equ	0xFF7
 19205                           tblptrl	equ	0xFF6
 19206                           tablat	equ	0xFF5
 19207                           prodh	equ	0xFF4
 19208                           prodl	equ	0xFF3
 19209                           intcon	equ	0xFF2
 19210                           postinc0	equ	0xFEE
 19211                           wreg	equ	0xFE8
 19212                           indf1	equ	0xFE7
 19213                           postdec1	equ	0xFE5
 19214                           fsr1h	equ	0xFE2
 19215                           fsr1l	equ	0xFE1
 19216                           indf2	equ	0xFDF
 19217                           postinc2	equ	0xFDE
 19218                           postdec2	equ	0xFDD
 19219                           plusw2	equ	0xFDB
 19220                           fsr2h	equ	0xFDA
 19221                           fsr2l	equ	0xFD9
 19222                           status	equ	0xFD8
 19223                           
 19224 ;; *************** function _SPI_MinSpeed *****************
 19225 ;; Defined at:
 19226 ;;		line 190 in file "Library/SPI.c"
 19227 ;; Parameters:    Size  Location     Type
 19228 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19229 ;;		 -> SPI1(11), 
 19230 ;; Auto vars:     Size  Location     Type
 19231 ;;		None
 19232 ;; Return value:  Size  Location     Type
 19233 ;;                  1    wreg      void 
 19234 ;; Registers used:
 19235 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19236 ;; Tracked objects:
 19237 ;;		On entry : 0/0
 19238 ;;		On exit  : 0/0
 19239 ;;		Unchanged: 0/0
 19240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19241 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19244 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19245 ;;Total ram usage:        2 bytes
 19246 ;; Hardware stack levels used:    1
 19247 ;; Hardware stack levels required when called:    9
 19248 ;; This function calls:
 19249 ;;		_Byte_SetBit
 19250 ;;		_Byte_SetQuad
 19251 ;; This function is called by:
 19252 ;;		_HMI_Init
 19253 ;; This function uses a non-reentrant model
 19254 ;;
 19255                           
 19256                           	psect	text90
 19257  0159AA                     __ptext90:
 19258                           	opt stack 0
 19259  0159AA                     _SPI_MinSpeed:
 19260                           	opt stack 20
 19261                           
 19262                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19263                           
 19264                           ; BSR set to: 0
 19265                           ;incstack = 0
 19266  0159AA  0100               	movlb	0	; () banked
 19267  0159AC  EE20 F006          	lfsr	2,6
 19268  0159B0  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19269  0159B2  26D9               	addwf	fsr2l,f,c
 19270  0159B4  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19271  0159B6  22DA               	addwfc	fsr2h,f,c
 19272  0159B8  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19273  0159BC  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19274  0159C0  0E05               	movlw	5
 19275  0159C2  0100               	movlb	0	; () banked
 19276  0159C4  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19277  0159C6  0E00               	movlw	0
 19278  0159C8  0100               	movlb	0	; () banked
 19279  0159CA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19280  0159CC  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19281                           
 19282                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 19283  0159D0  0100               	movlb	0	; () banked
 19284  0159D2  EE20 F006          	lfsr	2,6
 19285  0159D6  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19286  0159D8  26D9               	addwf	fsr2l,f,c
 19287  0159DA  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19288  0159DC  22DA               	addwfc	fsr2h,f,c
 19289  0159DE  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19290  0159E2  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19291  0159E6  0E00               	movlw	0
 19292  0159E8  0100               	movlb	0	; () banked
 19293  0159EA  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19294  0159EC  0E02               	movlw	2
 19295  0159EE  0100               	movlb	0	; () banked
 19296  0159F0  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19297  0159F2  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 19298                           
 19299                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19300  0159F6  0100               	movlb	0	; () banked
 19301  0159F8  EE20 F006          	lfsr	2,6
 19302  0159FC  516F               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19303  0159FE  26D9               	addwf	fsr2l,f,c
 19304  015A00  5170               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19305  015A02  22DA               	addwfc	fsr2h,f,c
 19306  015A04  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19307  015A08  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19308  015A0C  0E05               	movlw	5
 19309  015A0E  0100               	movlb	0	; () banked
 19310  015A10  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19311  015A12  0E01               	movlw	1
 19312  015A14  0100               	movlb	0	; () banked
 19313  015A16  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19314  015A18  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19315  015A1C  0012               	return		;funcret
 19316  015A1E                     __end_of_SPI_MinSpeed:
 19317                           	opt stack 0
 19318                           tosu	equ	0xFFF
 19319                           tosh	equ	0xFFE
 19320                           tosl	equ	0xFFD
 19321                           pclath	equ	0xFFA
 19322                           tblptru	equ	0xFF8
 19323                           tblptrh	equ	0xFF7
 19324                           tblptrl	equ	0xFF6
 19325                           tablat	equ	0xFF5
 19326                           prodh	equ	0xFF4
 19327                           prodl	equ	0xFF3
 19328                           intcon	equ	0xFF2
 19329                           postinc0	equ	0xFEE
 19330                           wreg	equ	0xFE8
 19331                           indf1	equ	0xFE7
 19332                           postdec1	equ	0xFE5
 19333                           fsr1h	equ	0xFE2
 19334                           fsr1l	equ	0xFE1
 19335                           indf2	equ	0xFDF
 19336                           postinc2	equ	0xFDE
 19337                           postdec2	equ	0xFDD
 19338                           plusw2	equ	0xFDB
 19339                           fsr2h	equ	0xFDA
 19340                           fsr2l	equ	0xFD9
 19341                           status	equ	0xFD8
 19342                           
 19343 ;; *************** function _SPI_Init *****************
 19344 ;; Defined at:
 19345 ;;		line 12 in file "Library/SPI.c"
 19346 ;; Parameters:    Size  Location     Type
 19347 ;;  pClock          4   45[BANK0 ] unsigned long 
 19348 ;;  pChannel        1   49[BANK0 ] enum E6744
 19349 ;;  pMode           1   50[BANK0 ] enum E6748
 19350 ;; Auto vars:     Size  Location     Type
 19351 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 19352 ;;		 -> SPI1(11), SPI2(11), 
 19353 ;; Return value:  Size  Location     Type
 19354 ;;                  1    wreg      void 
 19355 ;; Registers used:
 19356 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19357 ;; Tracked objects:
 19358 ;;		On entry : 0/0
 19359 ;;		On exit  : 0/0
 19360 ;;		Unchanged: 0/0
 19361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19362 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19365 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19366 ;;Total ram usage:        8 bytes
 19367 ;; Hardware stack levels used:    1
 19368 ;; Hardware stack levels required when called:   12
 19369 ;; This function calls:
 19370 ;;		_Byte_SetBit
 19371 ;;		_Byte_SetQuad
 19372 ;;		_Port_SetPinType
 19373 ;;		_SPI_DCS
 19374 ;;		_SPI_DisableISR
 19375 ;;		_Timer2_Init
 19376 ;; This function is called by:
 19377 ;;		_Configure_GPIOs
 19378 ;;		_HMI_Init
 19379 ;; This function uses a non-reentrant model
 19380 ;;
 19381                           
 19382                           	psect	text91
 19383  010E46                     __ptext91:
 19384                           	opt stack 0
 19385  010E46                     _SPI_Init:
 19386                           	opt stack 16
 19387                           
 19388                           ;SPI.c: 14: SPIPtr pInput;
 19389                           ;SPI.c: 16: switch (pChannel)
 19390                           
 19391                           ;incstack = 0
 19392  010E46  D00C               	goto	l597
 19393  010E48                     
 19394                           ;SPI.c: 19: pInput = &SPI1;
 19395  010E48  0E58               	movlw	low _SPI1
 19396  010E4A  0100               	movlb	0	; () banked
 19397  010E4C  6F93               	movwf	SPI_Init@pInput& (0+255),b
 19398  010E4E  0E01               	movlw	high _SPI1
 19399  010E50  D004               	goto	L11
 19400  010E52                     
 19401                           ; BSR set to: 0
 19402                           ;SPI.c: 22: pInput = &SPI2;
 19403                           
 19404                           ; BSR set to: 0
 19405  010E52  0E63               	movlw	low _SPI2
 19406  010E54  0100               	movlb	0	; () banked
 19407  010E56  6F93               	movwf	SPI_Init@pInput& (0+255),b
 19408  010E58  0E01               	movlw	high _SPI2
 19409  010E5A                     L11:
 19410  010E5A  0100               	movlb	0	; () banked
 19411  010E5C  6F94               	movwf	(SPI_Init@pInput+1)& (0+255),b
 19412                           
 19413                           ; BSR set to: 0
 19414                           ;SPI.c: 24: };
 19415                           
 19416                           ;SPI.c: 23: break;
 19417  010E5E  D008               	goto	l599
 19418  010E60                     l597:
 19419                           
 19420                           ; BSR set to: 0
 19421  010E60  0100               	movlb	0	; () banked
 19422  010E62  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 19423                           
 19424                           ; Switch size 1, requested type "space"
 19425                           ; Number of cases is 2, Range of values is 0 to 1
 19426                           ; switch strategies available:
 19427                           ; Name         Instructions Cycles
 19428                           ; simple_byte            7     4 (average)
 19429                           ;	Chosen strategy is simple_byte
 19430  010E64  0A00               	xorlw	0	; case 0
 19431  010E66  B4D8               	btfsc	status,2,c
 19432  010E68  D7EF               	goto	l598
 19433  010E6A  0A01               	xorlw	1	; case 1
 19434  010E6C  B4D8               	btfsc	status,2,c
 19435  010E6E  D7F1               	goto	l600
 19436  010E70                     l599:
 19437                           
 19438                           ; BSR set to: 0
 19439                           ;SPI.c: 26: pInput->mChannel = pChannel;
 19440                           
 19441                           ; BSR set to: 0
 19442  010E70  0100               	movlb	0	; () banked
 19443  010E72  EE20 F002          	lfsr	2,2
 19444  010E76  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19445  010E78  26D9               	addwf	fsr2l,f,c
 19446  010E7A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19447  010E7C  22DA               	addwfc	fsr2h,f,c
 19448  010E7E  C091  FFDF         	movff	SPI_Init@pChannel,indf2
 19449                           
 19450                           ;SPI.c: 35: switch (pChannel)
 19451  010E82  D0B1               	goto	l601
 19452  010E84                     
 19453                           ; BSR set to: 0
 19454                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 19455                           
 19456                           ; BSR set to: 0
 19457  010E84  0E35               	movlw	low _PortC
 19458  010E86  0100               	movlb	0	; () banked
 19459  010E88  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19460  010E8A  0E00               	movlw	high _PortC
 19461  010E8C  0100               	movlb	0	; () banked
 19462  010E8E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19463  010E90  0E02               	movlw	2
 19464  010E92  0100               	movlb	0	; () banked
 19465  010E94  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19466  010E96  0E03               	movlw	3
 19467  010E98  0100               	movlb	0	; () banked
 19468  010E9A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19469  010E9C  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19470                           
 19471                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 19472  010EA0  0E35               	movlw	low _PortC
 19473  010EA2  0100               	movlb	0	; () banked
 19474  010EA4  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19475  010EA6  0E00               	movlw	high _PortC
 19476  010EA8  0100               	movlb	0	; () banked
 19477  010EAA  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19478  010EAC  0E03               	movlw	3
 19479  010EAE  0100               	movlb	0	; () banked
 19480  010EB0  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19481  010EB2  0E03               	movlw	3
 19482  010EB4  0100               	movlb	0	; () banked
 19483  010EB6  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19484  010EB8  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19485                           
 19486                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 19487  010EBC  0E35               	movlw	low _PortC
 19488  010EBE  0100               	movlb	0	; () banked
 19489  010EC0  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19490  010EC2  0E00               	movlw	high _PortC
 19491  010EC4  0100               	movlb	0	; () banked
 19492  010EC6  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19493  010EC8  0E05               	movlw	5
 19494  010ECA  0100               	movlb	0	; () banked
 19495  010ECC  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19496  010ECE  0E03               	movlw	3
 19497  010ED0  0100               	movlb	0	; () banked
 19498  010ED2  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19499  010ED4  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19500                           
 19501                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 19502  010ED8  0E35               	movlw	low _PortC
 19503  010EDA  0100               	movlb	0	; () banked
 19504  010EDC  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19505  010EDE  0E00               	movlw	high _PortC
 19506  010EE0  0100               	movlb	0	; () banked
 19507  010EE2  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19508  010EE4  0E04               	movlw	4
 19509  010EE6  0100               	movlb	0	; () banked
 19510  010EE8  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19511  010EEA  0E00               	movlw	0
 19512  010EEC  0100               	movlb	0	; () banked
 19513  010EEE  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19514  010EF0  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19515                           
 19516                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 19517  010EF4  0100               	movlb	0	; () banked
 19518  010EF6  EE20 F003          	lfsr	2,3
 19519  010EFA  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19520  010EFC  26D9               	addwf	fsr2l,f,c
 19521  010EFE  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19522  010F00  22DA               	addwfc	fsr2h,f,c
 19523  010F02  0EC7               	movlw	199
 19524  010F04  6EDE               	movwf	postinc2,c
 19525  010F06  0E0F               	movlw	15
 19526  010F08  6EDD               	movwf	postdec2,c
 19527                           
 19528                           ; BSR set to: 0
 19529                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 19530  010F0A  0100               	movlb	0	; () banked
 19531  010F0C  EE20 F006          	lfsr	2,6
 19532  010F10  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19533  010F12  26D9               	addwf	fsr2l,f,c
 19534  010F14  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19535  010F16  22DA               	addwfc	fsr2h,f,c
 19536  010F18  0EC6               	movlw	198
 19537  010F1A  6EDE               	movwf	postinc2,c
 19538  010F1C  0E0F               	movlw	15
 19539  010F1E  6EDD               	movwf	postdec2,c
 19540                           
 19541                           ; BSR set to: 0
 19542                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 19543  010F20  0100               	movlb	0	; () banked
 19544  010F22  EE20 F009          	lfsr	2,9
 19545  010F26  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19546  010F28  26D9               	addwf	fsr2l,f,c
 19547  010F2A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19548  010F2C  22DA               	addwfc	fsr2h,f,c
 19549  010F2E  0EC9               	movlw	201
 19550  010F30  D056               	goto	L12
 19551  010F32                     
 19552                           ; BSR set to: 0
 19553                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 19554                           
 19555                           ; BSR set to: 0
 19556  010F32  0E96               	movlw	low _PortD
 19557  010F34  0100               	movlb	0	; () banked
 19558  010F36  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19559  010F38  0E01               	movlw	high _PortD
 19560  010F3A  0100               	movlb	0	; () banked
 19561  010F3C  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19562  010F3E  0E07               	movlw	7
 19563  010F40  0100               	movlb	0	; () banked
 19564  010F42  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19565  010F44  0E03               	movlw	3
 19566  010F46  0100               	movlb	0	; () banked
 19567  010F48  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19568  010F4A  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19569                           
 19570                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 19571  010F4E  0E96               	movlw	low _PortD
 19572  010F50  0100               	movlb	0	; () banked
 19573  010F52  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19574  010F54  0E01               	movlw	high _PortD
 19575  010F56  0100               	movlb	0	; () banked
 19576  010F58  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19577  010F5A  0E06               	movlw	6
 19578  010F5C  0100               	movlb	0	; () banked
 19579  010F5E  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19580  010F60  0E03               	movlw	3
 19581  010F62  0100               	movlb	0	; () banked
 19582  010F64  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19583  010F66  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19584                           
 19585                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 19586  010F6A  0E96               	movlw	low _PortD
 19587  010F6C  0100               	movlb	0	; () banked
 19588  010F6E  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19589  010F70  0E01               	movlw	high _PortD
 19590  010F72  0100               	movlb	0	; () banked
 19591  010F74  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19592  010F76  0E04               	movlw	4
 19593  010F78  0100               	movlb	0	; () banked
 19594  010F7A  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19595  010F7C  0E03               	movlw	3
 19596  010F7E  0100               	movlb	0	; () banked
 19597  010F80  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19598  010F82  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19599                           
 19600                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 19601  010F86  0E96               	movlw	low _PortD
 19602  010F88  0100               	movlb	0	; () banked
 19603  010F8A  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 19604  010F8C  0E01               	movlw	high _PortD
 19605  010F8E  0100               	movlb	0	; () banked
 19606  010F90  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19607  010F92  0E05               	movlw	5
 19608  010F94  0100               	movlb	0	; () banked
 19609  010F96  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 19610  010F98  0E00               	movlw	0
 19611  010F9A  0100               	movlb	0	; () banked
 19612  010F9C  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 19613  010F9E  ECAA  F095         	call	_Port_SetPinType	;wreg free
 19614                           
 19615                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 19616  010FA2  0100               	movlb	0	; () banked
 19617  010FA4  EE20 F003          	lfsr	2,3
 19618  010FA8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19619  010FAA  26D9               	addwf	fsr2l,f,c
 19620  010FAC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19621  010FAE  22DA               	addwfc	fsr2h,f,c
 19622  010FB0  0E6D               	movlw	109
 19623  010FB2  6EDE               	movwf	postinc2,c
 19624  010FB4  0E0F               	movlw	15
 19625  010FB6  6EDD               	movwf	postdec2,c
 19626                           
 19627                           ; BSR set to: 0
 19628                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 19629  010FB8  0100               	movlb	0	; () banked
 19630  010FBA  EE20 F006          	lfsr	2,6
 19631  010FBE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19632  010FC0  26D9               	addwf	fsr2l,f,c
 19633  010FC2  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19634  010FC4  22DA               	addwfc	fsr2h,f,c
 19635  010FC6  0E6C               	movlw	108
 19636  010FC8  6EDE               	movwf	postinc2,c
 19637  010FCA  0E0F               	movlw	15
 19638  010FCC  6EDD               	movwf	postdec2,c
 19639                           
 19640                           ; BSR set to: 0
 19641                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 19642  010FCE  0100               	movlb	0	; () banked
 19643  010FD0  EE20 F009          	lfsr	2,9
 19644  010FD4  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19645  010FD6  26D9               	addwf	fsr2l,f,c
 19646  010FD8  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19647  010FDA  22DA               	addwfc	fsr2h,f,c
 19648  010FDC  0E6F               	movlw	111
 19649  010FDE                     L12:
 19650  010FDE  6EDE               	movwf	postinc2,c
 19651  010FE0  0E0F               	movlw	15
 19652  010FE2  6EDD               	movwf	postdec2,c
 19653                           
 19654                           ;SPI.c: 68: break;
 19655  010FE4  D009               	goto	l603
 19656  010FE6                     l601:
 19657                           
 19658                           ; BSR set to: 0
 19659                           
 19660                           ; BSR set to: 0
 19661  010FE6  0100               	movlb	0	; () banked
 19662  010FE8  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 19663                           
 19664                           ; Switch size 1, requested type "space"
 19665                           ; Number of cases is 2, Range of values is 0 to 1
 19666                           ; switch strategies available:
 19667                           ; Name         Instructions Cycles
 19668                           ; simple_byte            7     4 (average)
 19669                           ;	Chosen strategy is simple_byte
 19670  010FEA  0A00               	xorlw	0	; case 0
 19671  010FEC  B4D8               	btfsc	status,2,c
 19672  010FEE  D74A               	goto	l602
 19673  010FF0  0A01               	xorlw	1	; case 1
 19674  010FF2  A4D8               	btfss	status,2,c
 19675  010FF4  0012               	return	
 19676  010FF6  D79D               	goto	l604
 19677  010FF8                     l603:
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19681                           
 19682                           ; BSR set to: 0
 19683  010FF8  0100               	movlb	0	; () banked
 19684  010FFA  EE20 F006          	lfsr	2,6
 19685  010FFE  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19686  011000  26D9               	addwf	fsr2l,f,c
 19687  011002  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19688  011004  22DA               	addwfc	fsr2h,f,c
 19689  011006  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19690  01100A  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19691  01100E  0E05               	movlw	5
 19692  011010  0100               	movlb	0	; () banked
 19693  011012  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19694  011014  0E00               	movlw	0
 19695  011016  0100               	movlb	0	; () banked
 19696  011018  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19697  01101A  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19698                           
 19699                           ;SPI.c: 77: switch(pMode)
 19700  01101E  D09C               	goto	l607
 19701  011020                     
 19702                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19703  011020  0100               	movlb	0	; () banked
 19704  011022  EE20 F006          	lfsr	2,6
 19705  011026  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19706  011028  26D9               	addwf	fsr2l,f,c
 19707  01102A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19708  01102C  22DA               	addwfc	fsr2h,f,c
 19709  01102E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19710  011032  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19711  011036  0E04               	movlw	4
 19712  011038  0100               	movlb	0	; () banked
 19713  01103A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19714  01103C  0E00               	movlw	0
 19715  01103E  0100               	movlb	0	; () banked
 19716  011040  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19717  011042  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19718                           
 19719                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19720  011046  0100               	movlb	0	; () banked
 19721  011048  EE20 F003          	lfsr	2,3
 19722  01104C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19723  01104E  26D9               	addwf	fsr2l,f,c
 19724  011050  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19725  011052  22DA               	addwfc	fsr2h,f,c
 19726  011054  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19727  011058  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19728  01105C  0E06               	movlw	6
 19729  01105E  0100               	movlb	0	; () banked
 19730  011060  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19731  011062  0E00               	movlw	0
 19732  011064  0100               	movlb	0	; () banked
 19733  011066  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19734  011068  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19735                           
 19736                           ;SPI.c: 82: break;
 19737  01106C  D084               	goto	l609
 19738  01106E                     
 19739                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19740  01106E  0100               	movlb	0	; () banked
 19741  011070  EE20 F006          	lfsr	2,6
 19742  011074  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19743  011076  26D9               	addwf	fsr2l,f,c
 19744  011078  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19745  01107A  22DA               	addwfc	fsr2h,f,c
 19746  01107C  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19747  011080  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19748  011084  0E04               	movlw	4
 19749  011086  0100               	movlb	0	; () banked
 19750  011088  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19751  01108A  0E00               	movlw	0
 19752  01108C  0100               	movlb	0	; () banked
 19753  01108E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19754  011090  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19755                           
 19756                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19757  011094  0100               	movlb	0	; () banked
 19758  011096  EE20 F003          	lfsr	2,3
 19759  01109A  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19760  01109C  26D9               	addwf	fsr2l,f,c
 19761  01109E  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19762  0110A0  22DA               	addwfc	fsr2h,f,c
 19763  0110A2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19764  0110A6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19765  0110AA  0E06               	movlw	6
 19766  0110AC  0100               	movlb	0	; () banked
 19767  0110AE  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19768  0110B0  0E01               	movlw	1
 19769  0110B2  0100               	movlb	0	; () banked
 19770  0110B4  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19771  0110B6  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19772                           
 19773                           ;SPI.c: 86: break;
 19774  0110BA  D05D               	goto	l609
 19775  0110BC                     
 19776                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19777  0110BC  0100               	movlb	0	; () banked
 19778  0110BE  EE20 F006          	lfsr	2,6
 19779  0110C2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19780  0110C4  26D9               	addwf	fsr2l,f,c
 19781  0110C6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19782  0110C8  22DA               	addwfc	fsr2h,f,c
 19783  0110CA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19784  0110CE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19785  0110D2  0E04               	movlw	4
 19786  0110D4  0100               	movlb	0	; () banked
 19787  0110D6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19788  0110D8  0E01               	movlw	1
 19789  0110DA  0100               	movlb	0	; () banked
 19790  0110DC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19791  0110DE  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19792                           
 19793                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19794  0110E2  0100               	movlb	0	; () banked
 19795  0110E4  EE20 F003          	lfsr	2,3
 19796  0110E8  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19797  0110EA  26D9               	addwf	fsr2l,f,c
 19798  0110EC  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19799  0110EE  22DA               	addwfc	fsr2h,f,c
 19800  0110F0  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19801  0110F4  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19802  0110F8  0E06               	movlw	6
 19803  0110FA  0100               	movlb	0	; () banked
 19804  0110FC  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19805  0110FE  0E00               	movlw	0
 19806  011100  0100               	movlb	0	; () banked
 19807  011102  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19808  011104  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19809                           
 19810                           ;SPI.c: 90: break;
 19811  011108  D036               	goto	l609
 19812  01110A                     
 19813                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19814  01110A  0100               	movlb	0	; () banked
 19815  01110C  EE20 F006          	lfsr	2,6
 19816  011110  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19817  011112  26D9               	addwf	fsr2l,f,c
 19818  011114  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19819  011116  22DA               	addwfc	fsr2h,f,c
 19820  011118  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19821  01111C  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19822  011120  0E04               	movlw	4
 19823  011122  0100               	movlb	0	; () banked
 19824  011124  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19825  011126  0E01               	movlw	1
 19826  011128  0100               	movlb	0	; () banked
 19827  01112A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19828  01112C  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19829                           
 19830                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19831  011130  0100               	movlb	0	; () banked
 19832  011132  EE20 F003          	lfsr	2,3
 19833  011136  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19834  011138  26D9               	addwf	fsr2l,f,c
 19835  01113A  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19836  01113C  22DA               	addwfc	fsr2h,f,c
 19837  01113E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19838  011142  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19839  011146  0E06               	movlw	6
 19840  011148  0100               	movlb	0	; () banked
 19841  01114A  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19842  01114C  0E01               	movlw	1
 19843  01114E  0100               	movlb	0	; () banked
 19844  011150  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19845  011152  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19846                           
 19847                           ;SPI.c: 94: break;
 19848  011156  D00F               	goto	l609
 19849  011158                     l607:
 19850  011158  0100               	movlb	0	; () banked
 19851  01115A  5192               	movf	SPI_Init@pMode& (0+255),w,b
 19852                           
 19853                           ; Switch size 1, requested type "space"
 19854                           ; Number of cases is 4, Range of values is 0 to 3
 19855                           ; switch strategies available:
 19856                           ; Name         Instructions Cycles
 19857                           ; simple_byte           13     7 (average)
 19858                           ;	Chosen strategy is simple_byte
 19859  01115C  0A00               	xorlw	0	; case 0
 19860  01115E  B4D8               	btfsc	status,2,c
 19861  011160  D75F               	goto	l608
 19862  011162  0A01               	xorlw	1	; case 1
 19863  011164  B4D8               	btfsc	status,2,c
 19864  011166  D783               	goto	l610
 19865  011168  0A03               	xorlw	3	; case 2
 19866  01116A  B4D8               	btfsc	status,2,c
 19867  01116C  D7A7               	goto	l611
 19868  01116E  0A01               	xorlw	1	; case 3
 19869  011170  A4D8               	btfss	status,2,c
 19870  011172  0012               	return	
 19871  011174  D7CA               	goto	l612
 19872  011176                     l609:
 19873                           
 19874                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 19875                           
 19876                           ; BSR set to: 0
 19877  011176  0100               	movlb	0	; () banked
 19878  011178  EE20 F006          	lfsr	2,6
 19879  01117C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19880  01117E  26D9               	addwf	fsr2l,f,c
 19881  011180  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19882  011182  22DA               	addwfc	fsr2h,f,c
 19883  011184  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19884  011188  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19885  01118C  0E07               	movlw	7
 19886  01118E  0100               	movlb	0	; () banked
 19887  011190  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19888  011192  0E00               	movlw	0
 19889  011194  0100               	movlb	0	; () banked
 19890  011196  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19891  011198  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19892                           
 19893                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 19894  01119C  0100               	movlb	0	; () banked
 19895  01119E  EE20 F006          	lfsr	2,6
 19896  0111A2  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19897  0111A4  26D9               	addwf	fsr2l,f,c
 19898  0111A6  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19899  0111A8  22DA               	addwfc	fsr2h,f,c
 19900  0111AA  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19901  0111AE  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19902  0111B2  0E06               	movlw	6
 19903  0111B4  0100               	movlb	0	; () banked
 19904  0111B6  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19905  0111B8  0E00               	movlw	0
 19906  0111BA  0100               	movlb	0	; () banked
 19907  0111BC  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 19908  0111BE  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 19909                           
 19910                           ;SPI.c: 106: Timer2_Init(pClock);
 19911  0111C2  C08D  F06D         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 19912  0111C6  C08E  F06E         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 19913  0111CA  C08F  F06F         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 19914  0111CE  C090  F070         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 19915  0111D2  EC54  F09D         	call	_Timer2_Init	;wreg free
 19916                           
 19917                           ;SPI.c: 112: SPI_DisableISR(pInput);
 19918  0111D6  C093  F060         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 19919  0111DA  C094  F061         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 19920  0111DE  EC9C  F0B3         	call	_SPI_DisableISR	;wreg free
 19921                           
 19922                           ;SPI.c: 116: switch (pChannel)
 19923  0111E2  D004               	goto	l614
 19924  0111E4                     l615:
 19925                           
 19926                           ; BSR set to: 0
 19927  0111E4  869F               	bsf	3999,3,c	;volatile
 19928  0111E6  D00B               	goto	l616
 19929  0111E8                     l617:
 19930                           
 19931                           ; BSR set to: 0
 19932  0111E8  8EA5               	bsf	4005,7,c	;volatile
 19933  0111EA  D009               	goto	l616
 19934  0111EC                     l614:
 19935                           
 19936                           ; BSR set to: 0
 19937  0111EC  0100               	movlb	0	; () banked
 19938  0111EE  5191               	movf	SPI_Init@pChannel& (0+255),w,b
 19939                           
 19940                           ; Switch size 1, requested type "space"
 19941                           ; Number of cases is 2, Range of values is 0 to 1
 19942                           ; switch strategies available:
 19943                           ; Name         Instructions Cycles
 19944                           ; simple_byte            7     4 (average)
 19945                           ;	Chosen strategy is simple_byte
 19946  0111F0  0A00               	xorlw	0	; case 0
 19947  0111F2  B4D8               	btfsc	status,2,c
 19948  0111F4  D7F7               	goto	l615
 19949  0111F6  0A01               	xorlw	1	; case 1
 19950  0111F8  A4D8               	btfss	status,2,c
 19951  0111FA  0012               	return	
 19952  0111FC  D7F5               	goto	l617
 19953  0111FE                     l616:
 19954                           
 19955                           ; BSR set to: 0
 19956                           ;SPI.c: 124: SPI_DCS(pInput);
 19957                           
 19958                           ; BSR set to: 0
 19959  0111FE  C093  F060         	movff	SPI_Init@pInput,SPI_DCS@pInput
 19960  011202  C094  F061         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 19961  011206  EC44  F0B3         	call	_SPI_DCS	;wreg free
 19962                           
 19963                           ;SPI.c: 126: pInput->mBusy = 0;
 19964  01120A  C093  FFD9         	movff	SPI_Init@pInput,fsr2l
 19965  01120E  C094  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 19966  011212  0E00               	movlw	0
 19967  011214  6EDF               	movwf	indf2,c
 19968                           
 19969                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 19970  011216  0100               	movlb	0	; () banked
 19971  011218  EE20 F006          	lfsr	2,6
 19972  01121C  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19973  01121E  26D9               	addwf	fsr2l,f,c
 19974  011220  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19975  011222  22DA               	addwfc	fsr2h,f,c
 19976  011224  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 19977  011228  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 19978  01122C  0E00               	movlw	0
 19979  01122E  0100               	movlb	0	; () banked
 19980  011230  6F6D               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19981  011232  0E03               	movlw	3
 19982  011234  0100               	movlb	0	; () banked
 19983  011236  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 19984  011238  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 19985                           
 19986                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19987  01123C  0100               	movlb	0	; () banked
 19988  01123E  EE20 F006          	lfsr	2,6
 19989  011242  5193               	movf	SPI_Init@pInput& (0+255),w,b
 19990  011244  26D9               	addwf	fsr2l,f,c
 19991  011246  5194               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19992  011248  22DA               	addwfc	fsr2h,f,c
 19993  01124A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 19994  01124E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 19995  011252  0E05               	movlw	5
 19996  011254  0100               	movlb	0	; () banked
 19997  011256  6F62               	movwf	Byte_SetBit@pBit& (0+255),b
 19998  011258  0E01               	movlw	1
 19999  01125A  0100               	movlb	0	; () banked
 20000  01125C  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 20001  01125E  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 20002  011262  0012               	return		;funcret
 20003  011264                     __end_of_SPI_Init:
 20004                           	opt stack 0
 20005                           tosu	equ	0xFFF
 20006                           tosh	equ	0xFFE
 20007                           tosl	equ	0xFFD
 20008                           pclath	equ	0xFFA
 20009                           tblptru	equ	0xFF8
 20010                           tblptrh	equ	0xFF7
 20011                           tblptrl	equ	0xFF6
 20012                           tablat	equ	0xFF5
 20013                           prodh	equ	0xFF4
 20014                           prodl	equ	0xFF3
 20015                           intcon	equ	0xFF2
 20016                           postinc0	equ	0xFEE
 20017                           wreg	equ	0xFE8
 20018                           indf1	equ	0xFE7
 20019                           postdec1	equ	0xFE5
 20020                           fsr1h	equ	0xFE2
 20021                           fsr1l	equ	0xFE1
 20022                           indf2	equ	0xFDF
 20023                           postinc2	equ	0xFDE
 20024                           postdec2	equ	0xFDD
 20025                           plusw2	equ	0xFDB
 20026                           fsr2h	equ	0xFDA
 20027                           fsr2l	equ	0xFD9
 20028                           status	equ	0xFD8
 20029                           
 20030 ;; *************** function _Timer2_Init *****************
 20031 ;; Defined at:
 20032 ;;		line 10 in file "Library/Timer2.c"
 20033 ;; Parameters:    Size  Location     Type
 20034 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20035 ;; Auto vars:     Size  Location     Type
 20036 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20037 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20038 ;;  RDIV            4   18[BANK0 ] unsigned long 
 20039 ;; Return value:  Size  Location     Type
 20040 ;;                  1    wreg      void 
 20041 ;; Registers used:
 20042 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20043 ;; Tracked objects:
 20044 ;;		On entry : 0/0
 20045 ;;		On exit  : 0/0
 20046 ;;		Unchanged: 0/0
 20047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20048 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20049 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20051 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20052 ;;Total ram usage:       17 bytes
 20053 ;; Hardware stack levels used:    1
 20054 ;; Hardware stack levels required when called:    8
 20055 ;; This function calls:
 20056 ;;		_Timer2_Clear
 20057 ;;		___lldiv
 20058 ;; This function is called by:
 20059 ;;		_SPI_Init
 20060 ;; This function uses a non-reentrant model
 20061 ;;
 20062                           
 20063                           	psect	text92
 20064  013AA8                     __ptext92:
 20065                           	opt stack 0
 20066  013AA8                     _Timer2_Init:
 20067                           	opt stack 19
 20068                           
 20069                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 20070                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 20071                           ;Timer2.c: 14: static UINT8 PRE = 0;
 20072                           ;Timer2.c: 15: static UINT32 DIV = 0;
 20073                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 20074                           
 20075                           ;incstack = 0
 20076  013AA8  0E00               	movlw	0
 20077  013AAA  0100               	movlb	0	; () banked
 20078  013AAC  6F76               	movwf	Timer2_Init@pCPUClock& (0+255),b
 20079  013AAE  0E6C               	movlw	108
 20080  013AB0  6F77               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 20081  013AB2  0EDC               	movlw	220
 20082  013AB4  6F78               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 20083  013AB6  0E02               	movlw	2
 20084  013AB8  6F79               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 20085                           
 20086                           ; BSR set to: 0
 20087                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 20088                           ;Timer2.c: 20: pFrequency *= 2;
 20089  013ABA  0100               	movlb	0	; () banked
 20090  013ABC  90D8               	bcf	status,0,c
 20091  013ABE  376D               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 20092  013AC0  376E               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 20093  013AC2  376F               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 20094  013AC4  3770               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 20095                           
 20096                           ; BSR set to: 0
 20097                           ;Timer2.c: 23: pCPUClock /= 4;
 20098  013AC6  0E02               	movlw	2
 20099  013AC8  0100               	movlb	0	; () banked
 20100  013ACA  6F71               	movwf	??_Timer2_Init& (0+255),b
 20101  013ACC                     u9635:
 20102  013ACC  90D8               	bcf	status,0,c
 20103  013ACE  0100               	movlb	0	; () banked
 20104  013AD0  3379               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 20105  013AD2  3378               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 20106  013AD4  3377               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 20107  013AD6  3376               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 20108  013AD8  0100               	movlb	0	; () banked
 20109  013ADA  2F71               	decfsz	??_Timer2_Init& (0+255),f,b
 20110  013ADC  D7F7               	goto	u9635
 20111                           
 20112                           ; BSR set to: 0
 20113                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 20114  013ADE  C076  F060         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 20115  013AE2  C077  F061         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 20116  013AE6  C078  F062         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 20117  013AEA  C079  F063         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 20118  013AEE  C06D  F064         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 20119  013AF2  C06E  F065         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 20120  013AF6  C06F  F066         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 20121  013AFA  C070  F067         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 20122  013AFE  EC84  F0A4         	call	___lldiv	;wreg free
 20123  013B02  C060  F07A         	movff	?___lldiv,Timer2_Init@DIVIDE
 20124  013B06  C061  F07B         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 20125  013B0A  C062  F07C         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 20126  013B0E  C063  F07D         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 20127                           
 20128                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 20129  013B12  D010               	goto	l1828
 20130  013B14                     l12222:
 20131                           
 20132                           ;Timer2.c: 28: {
 20133                           ;Timer2.c: 29: RDIV = 0;
 20134  013B14  0E00               	movlw	0
 20135  013B16  0100               	movlb	0	; () banked
 20136  013B18  6F72               	movwf	Timer2_Init@RDIV& (0+255),b
 20137  013B1A  0E00               	movlw	0
 20138  013B1C  6F73               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 20139  013B1E  0E00               	movlw	0
 20140  013B20  6F74               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 20141  013B22  0E00               	movlw	0
 20142  013B24  6F75               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 20143                           
 20144                           ; BSR set to: 0
 20145                           ;Timer2.c: 30: INDEX ++;
 20146  013B26  0100               	movlb	0	; () banked
 20147  013B28  2BE4               	incf	Timer2_Init@INDEX& (0+255),f,b
 20148                           
 20149                           ; BSR set to: 0
 20150                           ;Timer2.c: 31: if (INDEX >= 3)
 20151  013B2A  0E02               	movlw	2
 20152  013B2C  0100               	movlb	0	; () banked
 20153  013B2E  65E4               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 20154  013B30  D001               	goto	l1828
 20155  013B32  D026               	goto	u9650
 20156  013B34                     l1828:
 20157                           
 20158                           ; BSR set to: 0
 20159                           
 20160                           ; BSR set to: 0
 20161  013B34  C07A  F060         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 20162  013B38  C07B  F061         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 20163  013B3C  C07C  F062         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 20164  013B40  C07D  F063         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 20165  013B44  0100               	movlb	0	; () banked
 20166  013B46  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 20167  013B48  0D01               	mullw	1
 20168  013B4A  0E20               	movlw	low Timer2_Init@PRESCALE
 20169  013B4C  24F3               	addwf	prodl,w,c
 20170  013B4E  6EF6               	movwf	tblptrl,c
 20171  013B50  0EFD               	movlw	high Timer2_Init@PRESCALE
 20172  013B52  20F4               	addwfc	prodh,w,c
 20173  013B54  6EF7               	movwf	tblptrh,c
 20174  013B56                     	if	1	;There are 3 active tblptr bytes
 20175  013B56  6AF8               	clrf	tblptru,c
 20176  013B58  0E00               	movlw	low (__mediumconst shr (0+16))
 20177  013B5A  22F8               	addwfc	tblptru,f,c
 20178  013B5C                     	endif
 20179  013B5C  0008               	tblrd		*
 20180  013B5E  50F5               	movf	tablat,w,c
 20181  013B60  0100               	movlb	0	; () banked
 20182  013B62  6F64               	movwf	___lldiv@divisor& (0+255),b
 20183  013B64  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 20184  013B66  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 20185  013B68  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 20186  013B6A  EC84  F0A4         	call	___lldiv	;wreg free
 20187  013B6E  0100               	movlb	0	; () banked
 20188  013B70  5163               	movf	(?___lldiv+3)& (0+255),w,b
 20189  013B72  0100               	movlb	0	; () banked
 20190  013B74  1162               	iorwf	(?___lldiv+2)& (0+255),w,b
 20191  013B76  E1CE               	bnz	l12222
 20192  013B78  0100               	movlb	0	; () banked
 20193  013B7A  0561               	decf	(?___lldiv+1)& (0+255),w,b
 20194  013B7C  B0D8               	btfsc	status,0,c
 20195  013B7E  D7CA               	goto	l1827
 20196  013B80                     u9650:
 20197                           
 20198                           ; BSR set to: 0
 20199                           ;Timer2.c: 33: }
 20200                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 20201                           
 20202                           ; BSR set to: 0
 20203  013B80  50CA               	movf	4042,w,c	;volatile
 20204  013B82  0100               	movlb	0	; () banked
 20205  013B84  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20206  013B86  0BFC               	andlw	-4
 20207  013B88  19E4               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 20208  013B8A  6ECA               	movwf	4042,c	;volatile
 20209                           
 20210                           ; BSR set to: 0
 20211                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 20212  013B8C  84CA               	bsf	4042,2,c	;volatile
 20213                           
 20214                           ; BSR set to: 0
 20215                           ;Timer2.c: 44: Timer2_Clear();
 20216  013B8E  EC3B  F0B5         	call	_Timer2_Clear	;wreg free
 20217                           
 20218                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 20219  013B92  0100               	movlb	0	; () banked
 20220  013B94  51E4               	movf	Timer2_Init@INDEX& (0+255),w,b
 20221  013B96  0D01               	mullw	1
 20222  013B98  0E20               	movlw	low Timer2_Init@PRESCALE
 20223  013B9A  24F3               	addwf	prodl,w,c
 20224  013B9C  6EF6               	movwf	tblptrl,c
 20225  013B9E  0EFD               	movlw	high Timer2_Init@PRESCALE
 20226  013BA0  20F4               	addwfc	prodh,w,c
 20227  013BA2  6EF7               	movwf	tblptrh,c
 20228  013BA4                     	if	1	;There are 3 active tblptr bytes
 20229  013BA4  6AF8               	clrf	tblptru,c
 20230  013BA6  0E00               	movlw	low (__mediumconst shr (0+16))
 20231  013BA8  22F8               	addwfc	tblptru,f,c
 20232  013BAA                     	endif
 20233  013BAA  0008               	tblrd		*
 20234  013BAC  CFF5 F0E3          	movff	tablat,Timer2_Init@PRE
 20235                           
 20236                           ; BSR set to: 0
 20237                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 20238  013BB0  0EFF               	movlw	255
 20239  013BB2  0100               	movlb	0	; () banked
 20240  013BB4  257A               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 20241  013BB6  0101               	movlb	1	; () banked
 20242  013BB8  6F00               	movwf	Timer2_Init@DIV& (0+255),b
 20243  013BBA  0EFF               	movlw	255
 20244  013BBC  0100               	movlb	0	; () banked
 20245  013BBE  217B               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 20246  013BC0  0101               	movlb	1	; () banked
 20247  013BC2  6F01               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 20248  013BC4  0EFF               	movlw	255
 20249  013BC6  0100               	movlb	0	; () banked
 20250  013BC8  217C               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 20251  013BCA  0101               	movlb	1	; () banked
 20252  013BCC  6F02               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 20253  013BCE  0EFF               	movlw	255
 20254  013BD0  0100               	movlb	0	; () banked
 20255  013BD2  217D               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 20256  013BD4  0101               	movlb	1	; () banked
 20257  013BD6  6F03               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 20258                           
 20259                           ; BSR set to: 1
 20260                           ;Timer2.c: 48: INDEX = DIV/PRE;
 20261  013BD8  C100  F060         	movff	Timer2_Init@DIV,___lldiv@dividend
 20262  013BDC  C101  F061         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 20263  013BE0  C102  F062         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 20264  013BE4  C103  F063         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 20265  013BE8  0100               	movlb	0	; () banked
 20266  013BEA  51E3               	movf	Timer2_Init@PRE& (0+255),w,b
 20267  013BEC  0100               	movlb	0	; () banked
 20268  013BEE  6F64               	movwf	___lldiv@divisor& (0+255),b
 20269  013BF0  6B65               	clrf	(___lldiv@divisor+1)& (0+255),b
 20270  013BF2  6B66               	clrf	(___lldiv@divisor+2)& (0+255),b
 20271  013BF4  6B67               	clrf	(___lldiv@divisor+3)& (0+255),b
 20272  013BF6  EC84  F0A4         	call	___lldiv	;wreg free
 20273  013BFA  0100               	movlb	0	; () banked
 20274  013BFC  5160               	movf	?___lldiv& (0+255),w,b
 20275  013BFE  0100               	movlb	0	; () banked
 20276  013C00  6FE4               	movwf	Timer2_Init@INDEX& (0+255),b
 20277                           
 20278                           ; BSR set to: 0
 20279                           ;Timer2.c: 49: PR2 = INDEX;
 20280  013C02  C0E4  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 20281                           
 20282                           ; BSR set to: 0
 20283  013C06  0012               	return		;funcret
 20284  013C08                     __end_of_Timer2_Init:
 20285                           	opt stack 0
 20286                           tosu	equ	0xFFF
 20287                           tosh	equ	0xFFE
 20288                           tosl	equ	0xFFD
 20289                           pclath	equ	0xFFA
 20290                           tblptru	equ	0xFF8
 20291                           tblptrh	equ	0xFF7
 20292                           tblptrl	equ	0xFF6
 20293                           tablat	equ	0xFF5
 20294                           prodh	equ	0xFF4
 20295                           prodl	equ	0xFF3
 20296                           intcon	equ	0xFF2
 20297                           postinc0	equ	0xFEE
 20298                           wreg	equ	0xFE8
 20299                           indf1	equ	0xFE7
 20300                           postdec1	equ	0xFE5
 20301                           fsr1h	equ	0xFE2
 20302                           fsr1l	equ	0xFE1
 20303                           indf2	equ	0xFDF
 20304                           postinc2	equ	0xFDE
 20305                           postdec2	equ	0xFDD
 20306                           plusw2	equ	0xFDB
 20307                           fsr2h	equ	0xFDA
 20308                           fsr2l	equ	0xFD9
 20309                           status	equ	0xFD8
 20310                           
 20311 ;; *************** function ___lldiv *****************
 20312 ;; Defined at:
 20313 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 20314 ;; Parameters:    Size  Location     Type
 20315 ;;  dividend        4    0[BANK0 ] unsigned long 
 20316 ;;  divisor         4    4[BANK0 ] unsigned long 
 20317 ;; Auto vars:     Size  Location     Type
 20318 ;;  quotient        4    8[BANK0 ] unsigned long 
 20319 ;;  counter         1   12[BANK0 ] unsigned char 
 20320 ;; Return value:  Size  Location     Type
 20321 ;;                  4    0[BANK0 ] unsigned long 
 20322 ;; Registers used:
 20323 ;;		wreg, status,2, status,0
 20324 ;; Tracked objects:
 20325 ;;		On entry : 0/0
 20326 ;;		On exit  : 0/0
 20327 ;;		Unchanged: 0/0
 20328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20329 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20330 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20332 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20333 ;;Total ram usage:       13 bytes
 20334 ;; Hardware stack levels used:    1
 20335 ;; Hardware stack levels required when called:    7
 20336 ;; This function calls:
 20337 ;;		Nothing
 20338 ;; This function is called by:
 20339 ;;		_Timer0_Init
 20340 ;;		_Timer2_Init
 20341 ;;		_rand_between
 20342 ;;		_I2C_Init
 20343 ;; This function uses a non-reentrant model
 20344 ;;
 20345                           
 20346                           	psect	text93
 20347  014908                     __ptext93:
 20348                           	opt stack 0
 20349  014908                     ___lldiv:
 20350                           	opt stack 21
 20351                           
 20352                           ; BSR set to: 0
 20353                           ;incstack = 0
 20354  014908  0E00               	movlw	0
 20355  01490A  0100               	movlb	0	; () banked
 20356  01490C  6F68               	movwf	___lldiv@quotient& (0+255),b
 20357  01490E  0E00               	movlw	0
 20358  014910  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
 20359  014912  0E00               	movlw	0
 20360  014914  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
 20361  014916  0E00               	movlw	0
 20362  014918  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
 20363                           
 20364                           ; BSR set to: 0
 20365  01491A  0100               	movlb	0	; () banked
 20366  01491C  5164               	movf	___lldiv@divisor& (0+255),w,b
 20367  01491E  0100               	movlb	0	; () banked
 20368  014920  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 20369  014922  0100               	movlb	0	; () banked
 20370  014924  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 20371  014926  0100               	movlb	0	; () banked
 20372  014928  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 20373  01492A  B4D8               	btfsc	status,2,c
 20374  01492C  D042               	goto	l2433
 20375                           
 20376                           ; BSR set to: 0
 20377  01492E  0E01               	movlw	1
 20378  014930  0100               	movlb	0	; () banked
 20379  014932  6F6C               	movwf	___lldiv@counter& (0+255),b
 20380  014934  D008               	goto	l2428
 20381  014936                     
 20382                           ; BSR set to: 0
 20383                           
 20384                           ; BSR set to: 0
 20385  014936  0100               	movlb	0	; () banked
 20386  014938  90D8               	bcf	status,0,c
 20387  01493A  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 20388  01493C  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 20389  01493E  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 20390  014940  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 20391  014942  0100               	movlb	0	; () banked
 20392  014944  2B6C               	incf	___lldiv@counter& (0+255),f,b
 20393  014946                     l2428:
 20394                           
 20395                           ; BSR set to: 0
 20396                           
 20397                           ; BSR set to: 0
 20398  014946  0100               	movlb	0	; () banked
 20399  014948  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 20400  01494A  D7F5               	goto	l2429
 20401  01494C                     u9500:
 20402                           
 20403                           ; BSR set to: 0
 20404                           
 20405                           ; BSR set to: 0
 20406                           
 20407                           ; BSR set to: 0
 20408  01494C  0100               	movlb	0	; () banked
 20409  01494E  90D8               	bcf	status,0,c
 20410  014950  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 20411  014952  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 20412  014954  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 20413  014956  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 20414                           
 20415                           ; BSR set to: 0
 20416  014958  0100               	movlb	0	; () banked
 20417  01495A  5164               	movf	___lldiv@divisor& (0+255),w,b
 20418  01495C  0100               	movlb	0	; () banked
 20419  01495E  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 20420  014960  0100               	movlb	0	; () banked
 20421  014962  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20422  014964  0100               	movlb	0	; () banked
 20423  014966  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 20424  014968  0100               	movlb	0	; () banked
 20425  01496A  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20426  01496C  0100               	movlb	0	; () banked
 20427  01496E  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 20428  014970  0100               	movlb	0	; () banked
 20429  014972  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20430  014974  0100               	movlb	0	; () banked
 20431  014976  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 20432  014978  A0D8               	btfss	status,0,c
 20433  01497A  D012               	goto	l2432
 20434                           
 20435                           ; BSR set to: 0
 20436  01497C  0100               	movlb	0	; () banked
 20437  01497E  5164               	movf	___lldiv@divisor& (0+255),w,b
 20438  014980  0100               	movlb	0	; () banked
 20439  014982  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 20440  014984  0100               	movlb	0	; () banked
 20441  014986  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20442  014988  0100               	movlb	0	; () banked
 20443  01498A  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 20444  01498C  0100               	movlb	0	; () banked
 20445  01498E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20446  014990  0100               	movlb	0	; () banked
 20447  014992  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 20448  014994  0100               	movlb	0	; () banked
 20449  014996  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20450  014998  0100               	movlb	0	; () banked
 20451  01499A  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 20452                           
 20453                           ; BSR set to: 0
 20454  01499C  0100               	movlb	0	; () banked
 20455  01499E  8168               	bsf	___lldiv@quotient& (0+255),0,b
 20456  0149A0                     l2432:
 20457                           
 20458                           ; BSR set to: 0
 20459                           
 20460                           ; BSR set to: 0
 20461  0149A0  0100               	movlb	0	; () banked
 20462  0149A2  90D8               	bcf	status,0,c
 20463  0149A4  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 20464  0149A6  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 20465  0149A8  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 20466  0149AA  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 20467                           
 20468                           ; BSR set to: 0
 20469  0149AC  0100               	movlb	0	; () banked
 20470  0149AE  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 20471  0149B0  D7CD               	goto	u9500
 20472  0149B2                     l2433:
 20473                           
 20474                           ; BSR set to: 0
 20475                           
 20476                           ; BSR set to: 0
 20477  0149B2  C068  F060         	movff	___lldiv@quotient,?___lldiv
 20478  0149B6  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 20479  0149BA  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 20480  0149BE  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 20481                           
 20482                           ; BSR set to: 0
 20483  0149C2  0012               	return		;funcret
 20484  0149C4                     __end_of___lldiv:
 20485                           	opt stack 0
 20486                           tosu	equ	0xFFF
 20487                           tosh	equ	0xFFE
 20488                           tosl	equ	0xFFD
 20489                           pclath	equ	0xFFA
 20490                           tblptru	equ	0xFF8
 20491                           tblptrh	equ	0xFF7
 20492                           tblptrl	equ	0xFF6
 20493                           tablat	equ	0xFF5
 20494                           prodh	equ	0xFF4
 20495                           prodl	equ	0xFF3
 20496                           intcon	equ	0xFF2
 20497                           postinc0	equ	0xFEE
 20498                           wreg	equ	0xFE8
 20499                           indf1	equ	0xFE7
 20500                           postdec1	equ	0xFE5
 20501                           fsr1h	equ	0xFE2
 20502                           fsr1l	equ	0xFE1
 20503                           indf2	equ	0xFDF
 20504                           postinc2	equ	0xFDE
 20505                           postdec2	equ	0xFDD
 20506                           plusw2	equ	0xFDB
 20507                           fsr2h	equ	0xFDA
 20508                           fsr2l	equ	0xFD9
 20509                           status	equ	0xFD8
 20510                           
 20511 ;; *************** function _Timer2_Clear *****************
 20512 ;; Defined at:
 20513 ;;		line 3 in file "Library/Timer2.c"
 20514 ;; Parameters:    Size  Location     Type
 20515 ;;		None
 20516 ;; Auto vars:     Size  Location     Type
 20517 ;;		None
 20518 ;; Return value:  Size  Location     Type
 20519 ;;                  1    wreg      void 
 20520 ;; Registers used:
 20521 ;;		None
 20522 ;; Tracked objects:
 20523 ;;		On entry : 0/0
 20524 ;;		On exit  : 0/0
 20525 ;;		Unchanged: 0/0
 20526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20531 ;;Total ram usage:        0 bytes
 20532 ;; Hardware stack levels used:    1
 20533 ;; Hardware stack levels required when called:    7
 20534 ;; This function calls:
 20535 ;;		Nothing
 20536 ;; This function is called by:
 20537 ;;		_Timer2_Init
 20538 ;; This function uses a non-reentrant model
 20539 ;;
 20540                           
 20541                           	psect	text94
 20542  016A76                     __ptext94:
 20543                           	opt stack 0
 20544  016A76                     _Timer2_Clear:
 20545                           	opt stack 19
 20546                           
 20547                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 20548                           
 20549                           ; BSR set to: 0
 20550                           ;incstack = 0
 20551  016A76  929E               	bcf	3998,1,c	;volatile
 20552                           
 20553                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 20554  016A78  929D               	bcf	3997,1,c	;volatile
 20555                           
 20556                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 20557  016A7A  929F               	bcf	3999,1,c	;volatile
 20558  016A7C  0012               	return		;funcret
 20559  016A7E                     __end_of_Timer2_Clear:
 20560                           	opt stack 0
 20561                           tosu	equ	0xFFF
 20562                           tosh	equ	0xFFE
 20563                           tosl	equ	0xFFD
 20564                           pclath	equ	0xFFA
 20565                           tblptru	equ	0xFF8
 20566                           tblptrh	equ	0xFF7
 20567                           tblptrl	equ	0xFF6
 20568                           tablat	equ	0xFF5
 20569                           prodh	equ	0xFF4
 20570                           prodl	equ	0xFF3
 20571                           intcon	equ	0xFF2
 20572                           postinc0	equ	0xFEE
 20573                           wreg	equ	0xFE8
 20574                           indf1	equ	0xFE7
 20575                           postdec1	equ	0xFE5
 20576                           fsr1h	equ	0xFE2
 20577                           fsr1l	equ	0xFE1
 20578                           indf2	equ	0xFDF
 20579                           postinc2	equ	0xFDE
 20580                           postdec2	equ	0xFDD
 20581                           plusw2	equ	0xFDB
 20582                           fsr2h	equ	0xFDA
 20583                           fsr2l	equ	0xFD9
 20584                           status	equ	0xFD8
 20585                           
 20586 ;; *************** function _SPI_DisableISR *****************
 20587 ;; Defined at:
 20588 ;;		line 181 in file "Library/SPI.c"
 20589 ;; Parameters:    Size  Location     Type
 20590 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20591 ;;		 -> SPI1(11), SPI2(11), 
 20592 ;; Auto vars:     Size  Location     Type
 20593 ;;		None
 20594 ;; Return value:  Size  Location     Type
 20595 ;;                  1    wreg      void 
 20596 ;; Registers used:
 20597 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20598 ;; Tracked objects:
 20599 ;;		On entry : 0/0
 20600 ;;		On exit  : 0/0
 20601 ;;		Unchanged: 0/0
 20602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20603 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20606 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20607 ;;Total ram usage:        2 bytes
 20608 ;; Hardware stack levels used:    1
 20609 ;; Hardware stack levels required when called:    7
 20610 ;; This function calls:
 20611 ;;		Nothing
 20612 ;; This function is called by:
 20613 ;;		_SPI_Init
 20614 ;; This function uses a non-reentrant model
 20615 ;;
 20616                           
 20617                           	psect	text95
 20618  016738                     __ptext95:
 20619                           	opt stack 0
 20620  016738                     _SPI_DisableISR:
 20621                           	opt stack 20
 20622                           
 20623                           ;SPI.c: 183: switch (pInput->mChannel)
 20624                           
 20625                           ;incstack = 0
 20626  016738  D004               	goto	l654
 20627  01673A                     l655:
 20628                           
 20629                           ; BSR set to: 0
 20630  01673A  969D               	bcf	3997,3,c	;volatile
 20631  01673C  0012               	return	
 20632  01673E                     l657:
 20633                           
 20634                           ; BSR set to: 0
 20635  01673E  9EA3               	bcf	4003,7,c	;volatile
 20636                           
 20637                           ; BSR set to: 0
 20638                           ;SPI.c: 188: };
 20639                           
 20640                           ; BSR set to: 0
 20641                           
 20642                           ;SPI.c: 187: default: return;
 20643  016740  0012               	return	
 20644  016742                     l654:
 20645                           
 20646                           ; BSR set to: 0
 20647  016742  0100               	movlb	0	; () banked
 20648  016744  EE20 F002          	lfsr	2,2
 20649  016748  5160               	movf	SPI_DisableISR@pInput& (0+255),w,b
 20650  01674A  26D9               	addwf	fsr2l,f,c
 20651  01674C  5161               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 20652  01674E  22DA               	addwfc	fsr2h,f,c
 20653  016750  50DF               	movf	indf2,w,c
 20654                           
 20655                           ; Switch size 1, requested type "space"
 20656                           ; Number of cases is 2, Range of values is 0 to 1
 20657                           ; switch strategies available:
 20658                           ; Name         Instructions Cycles
 20659                           ; simple_byte            7     4 (average)
 20660                           ;	Chosen strategy is simple_byte
 20661  016752  0A00               	xorlw	0	; case 0
 20662  016754  B4D8               	btfsc	status,2,c
 20663  016756  D7F1               	goto	l655
 20664  016758  0A01               	xorlw	1	; case 1
 20665  01675A  A4D8               	btfss	status,2,c
 20666  01675C  0012               	return	
 20667  01675E  D7EF               	goto	l657
 20668  016760                     __end_of_SPI_DisableISR:
 20669                           	opt stack 0
 20670                           tosu	equ	0xFFF
 20671                           tosh	equ	0xFFE
 20672                           tosl	equ	0xFFD
 20673                           pclath	equ	0xFFA
 20674                           tblptru	equ	0xFF8
 20675                           tblptrh	equ	0xFF7
 20676                           tblptrl	equ	0xFF6
 20677                           tablat	equ	0xFF5
 20678                           prodh	equ	0xFF4
 20679                           prodl	equ	0xFF3
 20680                           intcon	equ	0xFF2
 20681                           postinc0	equ	0xFEE
 20682                           wreg	equ	0xFE8
 20683                           indf1	equ	0xFE7
 20684                           postdec1	equ	0xFE5
 20685                           fsr1h	equ	0xFE2
 20686                           fsr1l	equ	0xFE1
 20687                           indf2	equ	0xFDF
 20688                           postinc2	equ	0xFDE
 20689                           postdec2	equ	0xFDD
 20690                           plusw2	equ	0xFDB
 20691                           fsr2h	equ	0xFDA
 20692                           fsr2l	equ	0xFD9
 20693                           status	equ	0xFD8
 20694                           
 20695 ;; *************** function _SPI_DCS *****************
 20696 ;; Defined at:
 20697 ;;		line 219 in file "Library/SPI.c"
 20698 ;; Parameters:    Size  Location     Type
 20699 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20700 ;;		 -> SPI1(11), SPI2(11), 
 20701 ;; Auto vars:     Size  Location     Type
 20702 ;;		None
 20703 ;; Return value:  Size  Location     Type
 20704 ;;                  1    wreg      void 
 20705 ;; Registers used:
 20706 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20707 ;; Tracked objects:
 20708 ;;		On entry : 0/0
 20709 ;;		On exit  : 0/0
 20710 ;;		Unchanged: 0/0
 20711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20712 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20713 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20715 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20716 ;;Total ram usage:        2 bytes
 20717 ;; Hardware stack levels used:    1
 20718 ;; Hardware stack levels required when called:    7
 20719 ;; This function calls:
 20720 ;;		Nothing
 20721 ;; This function is called by:
 20722 ;;		_SPI_Init
 20723 ;; This function uses a non-reentrant model
 20724 ;;
 20725                           
 20726                           	psect	text96
 20727  016688                     __ptext96:
 20728                           	opt stack 0
 20729  016688                     _SPI_DCS:
 20730                           	opt stack 20
 20731                           
 20732                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 20733                           
 20734                           ; BSR set to: 0
 20735                           ;incstack = 0
 20736  016688  0100               	movlb	0	; () banked
 20737  01668A  EE20 F002          	lfsr	2,2
 20738  01668E  5160               	movf	SPI_DCS@pInput& (0+255),w,b
 20739  016690  26D9               	addwf	fsr2l,f,c
 20740  016692  5161               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 20741  016694  22DA               	addwfc	fsr2h,f,c
 20742  016696  50DF               	movf	indf2,w,c
 20743  016698  A4D8               	btfss	status,2,c
 20744  01669A  D006               	goto	l673
 20745                           
 20746                           ; BSR set to: 0
 20747                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 20748  01669C  C039  FFD9         	movff	_PortC+4,fsr2l
 20749  0166A0  C03A  FFDA         	movff	_PortC+5,fsr2h
 20750  0166A4  84DF               	bsf	indf2,2,c
 20751  0166A6  0012               	return	
 20752  0166A8                     l673:
 20753                           
 20754                           ; BSR set to: 0
 20755                           ;SPI.c: 223: else
 20756                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 20757                           
 20758                           ; BSR set to: 0
 20759  0166A8  C19A  FFD9         	movff	_PortD+4,fsr2l
 20760  0166AC  C19B  FFDA         	movff	_PortD+5,fsr2h
 20761  0166B0  0101               	movlb	1	; () banked
 20762  0166B2  8EDF               	bsf	indf2,7,c
 20763  0166B4  0012               	return	
 20764  0166B6                     __end_of_SPI_DCS:
 20765                           	opt stack 0
 20766                           tosu	equ	0xFFF
 20767                           tosh	equ	0xFFE
 20768                           tosl	equ	0xFFD
 20769                           pclath	equ	0xFFA
 20770                           tblptru	equ	0xFF8
 20771                           tblptrh	equ	0xFF7
 20772                           tblptrl	equ	0xFF6
 20773                           tablat	equ	0xFF5
 20774                           prodh	equ	0xFF4
 20775                           prodl	equ	0xFF3
 20776                           intcon	equ	0xFF2
 20777                           postinc0	equ	0xFEE
 20778                           wreg	equ	0xFE8
 20779                           indf1	equ	0xFE7
 20780                           postdec1	equ	0xFE5
 20781                           fsr1h	equ	0xFE2
 20782                           fsr1l	equ	0xFE1
 20783                           indf2	equ	0xFDF
 20784                           postinc2	equ	0xFDE
 20785                           postdec2	equ	0xFDD
 20786                           plusw2	equ	0xFDB
 20787                           fsr2h	equ	0xFDA
 20788                           fsr2l	equ	0xFD9
 20789                           status	equ	0xFD8
 20790                           
 20791 ;; *************** function _FunctInitButton *****************
 20792 ;; Defined at:
 20793 ;;		line 16 in file "Functions.c"
 20794 ;; Parameters:    Size  Location     Type
 20795 ;;		None
 20796 ;; Auto vars:     Size  Location     Type
 20797 ;;		None
 20798 ;; Return value:  Size  Location     Type
 20799 ;;                  1    wreg      void 
 20800 ;; Registers used:
 20801 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20802 ;; Tracked objects:
 20803 ;;		On entry : 0/0
 20804 ;;		On exit  : 0/0
 20805 ;;		Unchanged: 0/0
 20806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20811 ;;Total ram usage:        0 bytes
 20812 ;; Hardware stack levels used:    1
 20813 ;; Hardware stack levels required when called:   16
 20814 ;; This function calls:
 20815 ;;		_Button_Init
 20816 ;; This function is called by:
 20817 ;;		_main
 20818 ;; This function uses a non-reentrant model
 20819 ;;
 20820                           
 20821                           	psect	text97
 20822  0151D0                     __ptext97:
 20823                           	opt stack 0
 20824  0151D0                     _FunctInitButton:
 20825                           	opt stack 14
 20826                           
 20827                           ;Functions.c: 19: Button_Init(&TestButton, 2, MXK_InitTestButton, MXK_TestButton, Event_
      +                          TestButton);
 20828                           
 20829                           ;incstack = 0
 20830  0151D0  0E78               	movlw	low _TestButton
 20831  0151D2  0100               	movlb	0	; () banked
 20832  0151D4  6F9B               	movwf	Button_Init@pInput& (0+255),b
 20833  0151D6  0E01               	movlw	high _TestButton
 20834  0151D8  0100               	movlb	0	; () banked
 20835  0151DA  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 20836  0151DC  0E00               	movlw	0
 20837  0151DE  0100               	movlb	0	; () banked
 20838  0151E0  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20839  0151E2  0E02               	movlw	2
 20840  0151E4  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 20841  0151E6  0E64               	movlw	low _MXK_InitTestButton
 20842  0151E8  0100               	movlb	0	; () banked
 20843  0151EA  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 20844  0151EC  0E68               	movlw	high _MXK_InitTestButton
 20845  0151EE  0100               	movlb	0	; () banked
 20846  0151F0  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20847  0151F2  0E01               	movlw	low (_MXK_InitTestButton shr (0+16))
 20848  0151F4  0100               	movlb	0	; () banked
 20849  0151F6  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20850  0151F8  0EA0               	movlw	low _MXK_TestButton
 20851  0151FA  0100               	movlb	0	; () banked
 20852  0151FC  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 20853  0151FE  0E69               	movlw	high _MXK_TestButton
 20854  015200  0100               	movlb	0	; () banked
 20855  015202  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20856  015204  0E01               	movlw	low (_MXK_TestButton shr (0+16))
 20857  015206  0100               	movlb	0	; () banked
 20858  015208  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20859  01520A  0E7A               	movlw	low _Event_TestButton
 20860  01520C  0100               	movlb	0	; () banked
 20861  01520E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 20862  015210  0E64               	movlw	high _Event_TestButton
 20863  015212  0100               	movlb	0	; () banked
 20864  015214  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20865  015216  0E01               	movlw	low (_Event_TestButton shr (0+16))
 20866  015218  0100               	movlb	0	; () banked
 20867  01521A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20868  01521C  EC90  F0A2         	call	_Button_Init	;wreg free
 20869                           
 20870                           ;Functions.c: 23: Button_Init(&DIPSwitch, 2, MXK_InitDIPSwitch, MXK_DIPSwitch, Event_DIP
      +                          Switch);
 20871  015220  0E6E               	movlw	low _DIPSwitch
 20872  015222  0100               	movlb	0	; () banked
 20873  015224  6F9B               	movwf	Button_Init@pInput& (0+255),b
 20874  015226  0E01               	movlw	high _DIPSwitch
 20875  015228  0100               	movlb	0	; () banked
 20876  01522A  6F9C               	movwf	(Button_Init@pInput+1)& (0+255),b
 20877  01522C  0E00               	movlw	0
 20878  01522E  0100               	movlb	0	; () banked
 20879  015230  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20880  015232  0E02               	movlw	2
 20881  015234  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 20882  015236  0E46               	movlw	low _MXK_InitDIPSwitch
 20883  015238  0100               	movlb	0	; () banked
 20884  01523A  6F9F               	movwf	Button_Init@pInitIO& (0+255),b
 20885  01523C  0E68               	movlw	high _MXK_InitDIPSwitch
 20886  01523E  0100               	movlb	0	; () banked
 20887  015240  6FA0               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20888  015242  0E01               	movlw	low (_MXK_InitDIPSwitch shr (0+16))
 20889  015244  0100               	movlb	0	; () banked
 20890  015246  6FA1               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20891  015248  0E10               	movlw	low _MXK_DIPSwitch
 20892  01524A  0100               	movlb	0	; () banked
 20893  01524C  6FA2               	movwf	Button_Init@pGetState& (0+255),b
 20894  01524E  0E69               	movlw	high _MXK_DIPSwitch
 20895  015250  0100               	movlb	0	; () banked
 20896  015252  6FA3               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20897  015254  0E01               	movlw	low (_MXK_DIPSwitch shr (0+16))
 20898  015256  0100               	movlb	0	; () banked
 20899  015258  6FA4               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20900  01525A  0E5A               	movlw	low _Event_DIPSwitch
 20901  01525C  0100               	movlb	0	; () banked
 20902  01525E  6FA5               	movwf	Button_Init@pFunction& (0+255),b
 20903  015260  0E66               	movlw	high _Event_DIPSwitch
 20904  015262  0100               	movlb	0	; () banked
 20905  015264  6FA6               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20906  015266  0E01               	movlw	low (_Event_DIPSwitch shr (0+16))
 20907  015268  0100               	movlb	0	; () banked
 20908  01526A  6FA7               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20909  01526C  EC90  F0A2         	call	_Button_Init	;wreg free
 20910  015270  0012               	return		;funcret
 20911  015272                     __end_of_FunctInitButton:
 20912                           	opt stack 0
 20913                           tosu	equ	0xFFF
 20914                           tosh	equ	0xFFE
 20915                           tosl	equ	0xFFD
 20916                           pclath	equ	0xFFA
 20917                           tblptru	equ	0xFF8
 20918                           tblptrh	equ	0xFF7
 20919                           tblptrl	equ	0xFF6
 20920                           tablat	equ	0xFF5
 20921                           prodh	equ	0xFF4
 20922                           prodl	equ	0xFF3
 20923                           intcon	equ	0xFF2
 20924                           postinc0	equ	0xFEE
 20925                           wreg	equ	0xFE8
 20926                           indf1	equ	0xFE7
 20927                           postdec1	equ	0xFE5
 20928                           fsr1h	equ	0xFE2
 20929                           fsr1l	equ	0xFE1
 20930                           indf2	equ	0xFDF
 20931                           postinc2	equ	0xFDE
 20932                           postdec2	equ	0xFDD
 20933                           plusw2	equ	0xFDB
 20934                           fsr2h	equ	0xFDA
 20935                           fsr2l	equ	0xFD9
 20936                           status	equ	0xFD8
 20937                           
 20938 ;; *************** function _Button_Init *****************
 20939 ;; Defined at:
 20940 ;;		line 18 in file "Library/Button.c"
 20941 ;; Parameters:    Size  Location     Type
 20942 ;;  pInput          2   59[BANK0 ] const PTR struct Button
 20943 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 20944 ;;  pThreshold      2   61[BANK0 ] unsigned short 
 20945 ;;  pInitIO         3   63[BANK0 ] PTR FTN()void 
 20946 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 20947 ;;  pGetState       3   66[BANK0 ] PTR FTN()unsigned char 
 20948 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 20949 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 20950 ;;  pFunction       3   69[BANK0 ] PTR FTN(unsigned char ,)
 20951 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 20952 ;; Auto vars:     Size  Location     Type
 20953 ;;		None
 20954 ;; Return value:  Size  Location     Type
 20955 ;;                  1    wreg      void 
 20956 ;; Registers used:
 20957 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20958 ;; Tracked objects:
 20959 ;;		On entry : 0/0
 20960 ;;		On exit  : 0/0
 20961 ;;		Unchanged: 0/0
 20962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20963 ;;      Params:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20966 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20967 ;;Total ram usage:       13 bytes
 20968 ;; Hardware stack levels used:    1
 20969 ;; Hardware stack levels required when called:   15
 20970 ;; This function calls:
 20971 ;;		_HMI_InitButtons
 20972 ;;		_MXK_InitDIPSwitch
 20973 ;;		_MXK_InitTestButton
 20974 ;; This function is called by:
 20975 ;;		_HMI_Init
 20976 ;;		_FunctInitButton
 20977 ;; This function uses a non-reentrant model
 20978 ;;
 20979                           
 20980                           	psect	text98
 20981  014520                     __ptext98:
 20982                           	opt stack 0
 20983  014520                     _Button_Init:
 20984                           	opt stack 14
 20985                           
 20986                           ;Button.c: 21: if(pInput==(void*)0)
 20987                           
 20988                           ;incstack = 0
 20989  014520  0100               	movlb	0	; () banked
 20990  014522  519B               	movf	Button_Init@pInput& (0+255),w,b
 20991  014524  0100               	movlb	0	; () banked
 20992  014526  119C               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 20993  014528  B4D8               	btfsc	status,2,c
 20994  01452A  0012               	return	
 20995                           
 20996                           ; BSR set to: 0
 20997                           ;Button.c: 23: if(pInitIO==(void*)0)
 20998                           
 20999                           ; BSR set to: 0
 21000                           
 21001                           ; BSR set to: 0
 21002                           ;Button.c: 22: return;
 21003  01452C  0100               	movlb	0	; () banked
 21004  01452E  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21005  014530  0100               	movlb	0	; () banked
 21006  014532  11A0               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21007  014534  0100               	movlb	0	; () banked
 21008  014536  11A1               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21009  014538  B4D8               	btfsc	status,2,c
 21010  01453A  0012               	return	
 21011                           
 21012                           ; BSR set to: 0
 21013                           ;Button.c: 25: if(pGetState==(void*)0)
 21014                           
 21015                           ; BSR set to: 0
 21016                           
 21017                           ; BSR set to: 0
 21018                           ;Button.c: 24: return;
 21019  01453C  0100               	movlb	0	; () banked
 21020  01453E  51A2               	movf	Button_Init@pGetState& (0+255),w,b
 21021  014540  0100               	movlb	0	; () banked
 21022  014542  11A3               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21023  014544  0100               	movlb	0	; () banked
 21024  014546  11A4               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21025  014548  B4D8               	btfsc	status,2,c
 21026  01454A  0012               	return	
 21027                           
 21028                           ; BSR set to: 0
 21029                           ;Button.c: 27: if(pFunction==(void*)0)
 21030                           
 21031                           ; BSR set to: 0
 21032                           
 21033                           ; BSR set to: 0
 21034                           ;Button.c: 26: return;
 21035  01454C  0100               	movlb	0	; () banked
 21036  01454E  51A5               	movf	Button_Init@pFunction& (0+255),w,b
 21037  014550  0100               	movlb	0	; () banked
 21038  014552  11A6               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21039  014554  0100               	movlb	0	; () banked
 21040  014556  11A7               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21041  014558  B4D8               	btfsc	status,2,c
 21042  01455A  0012               	return	
 21043                           
 21044                           ; BSR set to: 0
 21045                           ;Button.c: 30: if(pThreshold == 0)
 21046                           
 21047                           ; BSR set to: 0
 21048                           
 21049                           ; BSR set to: 0
 21050                           ;Button.c: 28: return;
 21051  01455C  0100               	movlb	0	; () banked
 21052  01455E  519D               	movf	Button_Init@pThreshold& (0+255),w,b
 21053  014560  0100               	movlb	0	; () banked
 21054  014562  119E               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21055  014564  A4D8               	btfss	status,2,c
 21056  014566  D005               	goto	l8
 21057                           
 21058                           ; BSR set to: 0
 21059                           ;Button.c: 31: pThreshold = 1;
 21060  014568  0E00               	movlw	0
 21061  01456A  0100               	movlb	0	; () banked
 21062  01456C  6F9E               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21063  01456E  0E01               	movlw	1
 21064  014570  6F9D               	movwf	Button_Init@pThreshold& (0+255),b
 21065  014572                     l8:
 21066                           
 21067                           ; BSR set to: 0
 21068                           ;Button.c: 34: pInput->mState = 0;
 21069                           
 21070                           ; BSR set to: 0
 21071  014572  C09B  FFD9         	movff	Button_Init@pInput,fsr2l
 21072  014576  C09C  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21073  01457A  0E00               	movlw	0
 21074  01457C  6EDF               	movwf	indf2,c
 21075                           
 21076                           ; BSR set to: 0
 21077                           ;Button.c: 35: pInput->mCount = 0;
 21078  01457E  0100               	movlb	0	; () banked
 21079  014580  EE20 F001          	lfsr	2,1
 21080  014584  519B               	movf	Button_Init@pInput& (0+255),w,b
 21081  014586  26D9               	addwf	fsr2l,f,c
 21082  014588  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21083  01458A  22DA               	addwfc	fsr2h,f,c
 21084  01458C  0E00               	movlw	0
 21085  01458E  6EDF               	movwf	indf2,c
 21086                           
 21087                           ; BSR set to: 0
 21088                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21089  014590  0100               	movlb	0	; () banked
 21090  014592  EE20 F002          	lfsr	2,2
 21091  014596  519B               	movf	Button_Init@pInput& (0+255),w,b
 21092  014598  26D9               	addwf	fsr2l,f,c
 21093  01459A  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21094  01459C  22DA               	addwfc	fsr2h,f,c
 21095  01459E  C09D  FFDE         	movff	Button_Init@pThreshold,postinc2
 21096  0145A2  C09E  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21097                           
 21098                           ; BSR set to: 0
 21099                           ;Button.c: 37: pInput->mFunction = pFunction;
 21100  0145A6  0100               	movlb	0	; () banked
 21101  0145A8  EE20 F004          	lfsr	2,4
 21102  0145AC  519B               	movf	Button_Init@pInput& (0+255),w,b
 21103  0145AE  26D9               	addwf	fsr2l,f,c
 21104  0145B0  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21105  0145B2  22DA               	addwfc	fsr2h,f,c
 21106  0145B4  C0A5  FFDE         	movff	Button_Init@pFunction,postinc2
 21107  0145B8  C0A6  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21108  0145BC  C0A7  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21109                           
 21110                           ; BSR set to: 0
 21111                           ;Button.c: 38: pInput->mGetState = pGetState;
 21112  0145C0  0100               	movlb	0	; () banked
 21113  0145C2  EE20 F007          	lfsr	2,7
 21114  0145C6  519B               	movf	Button_Init@pInput& (0+255),w,b
 21115  0145C8  26D9               	addwf	fsr2l,f,c
 21116  0145CA  519C               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21117  0145CC  22DA               	addwfc	fsr2h,f,c
 21118  0145CE  C0A2  FFDE         	movff	Button_Init@pGetState,postinc2
 21119  0145D2  C0A3  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21120  0145D6  C0A4  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21121                           
 21122                           ; BSR set to: 0
 21123                           ;Button.c: 41: pInitIO();
 21124  0145DA  D801               	call	u11308
 21125  0145DC  0012               	return	
 21126  0145DE                     u11308:
 21127  0145DE  0005               	push	
 21128  0145E0  6EFA               	movwf	pclath,c
 21129  0145E2  0100               	movlb	0	; () banked
 21130  0145E4  519F               	movf	Button_Init@pInitIO& (0+255),w,b
 21131  0145E6  6EFD               	movwf	tosl,c
 21132  0145E8  51A0               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21133  0145EA  6EFE               	movwf	tosh,c
 21134  0145EC  51A1               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21135  0145EE  6EFF               	movwf	tosu,c
 21136  0145F0  50FA               	movf	pclath,w,c
 21137  0145F2  0012               	return		;indir
 21138  0145F4                     __end_of_Button_Init:
 21139                           	opt stack 0
 21140                           tosu	equ	0xFFF
 21141                           tosh	equ	0xFFE
 21142                           tosl	equ	0xFFD
 21143                           pclath	equ	0xFFA
 21144                           tblptru	equ	0xFF8
 21145                           tblptrh	equ	0xFF7
 21146                           tblptrl	equ	0xFF6
 21147                           tablat	equ	0xFF5
 21148                           prodh	equ	0xFF4
 21149                           prodl	equ	0xFF3
 21150                           intcon	equ	0xFF2
 21151                           postinc0	equ	0xFEE
 21152                           wreg	equ	0xFE8
 21153                           indf1	equ	0xFE7
 21154                           postdec1	equ	0xFE5
 21155                           fsr1h	equ	0xFE2
 21156                           fsr1l	equ	0xFE1
 21157                           indf2	equ	0xFDF
 21158                           postinc2	equ	0xFDE
 21159                           postdec2	equ	0xFDD
 21160                           plusw2	equ	0xFDB
 21161                           fsr2h	equ	0xFDA
 21162                           fsr2l	equ	0xFD9
 21163                           status	equ	0xFD8
 21164                           
 21165 ;; *************** function _MXK_InitDIPSwitch *****************
 21166 ;; Defined at:
 21167 ;;		line 20 in file "Library/MXK.c"
 21168 ;; Parameters:    Size  Location     Type
 21169 ;;		None
 21170 ;; Auto vars:     Size  Location     Type
 21171 ;;		None
 21172 ;; Return value:  Size  Location     Type
 21173 ;;                  1    wreg      void 
 21174 ;; Registers used:
 21175 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21176 ;; Tracked objects:
 21177 ;;		On entry : 0/0
 21178 ;;		On exit  : 0/0
 21179 ;;		Unchanged: 0/0
 21180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21183 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21184 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21185 ;;Total ram usage:        0 bytes
 21186 ;; Hardware stack levels used:    1
 21187 ;; Hardware stack levels required when called:   14
 21188 ;; This function calls:
 21189 ;;		_Port_SetQuadType
 21190 ;; This function is called by:
 21191 ;;		_FunctInitButton
 21192 ;;		_Button_Init
 21193 ;; This function uses a non-reentrant model
 21194 ;;
 21195                           
 21196                           	psect	text99
 21197  016846                     __ptext99:
 21198                           	opt stack 0
 21199  016846                     _MXK_InitDIPSwitch:
 21200                           	opt stack 14
 21201                           
 21202                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 21203                           
 21204                           ;incstack = 0
 21205  016846  0E96               	movlw	low _PortD
 21206  016848  0100               	movlb	0	; () banked
 21207  01684A  6F96               	movwf	Port_SetQuadType@pInput& (0+255),b
 21208  01684C  0E01               	movlw	high _PortD
 21209  01684E  0100               	movlb	0	; () banked
 21210  016850  6F97               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 21211  016852  0E00               	movlw	0
 21212  016854  0100               	movlb	0	; () banked
 21213  016856  6F98               	movwf	Port_SetQuadType@pQuad& (0+255),b
 21214  016858  0E00               	movlw	0
 21215  01685A  0100               	movlb	0	; () banked
 21216  01685C  6F99               	movwf	Port_SetQuadType@pType& (0+255),b
 21217  01685E  EC7E  F08F         	call	_Port_SetQuadType	;wreg free
 21218  016862  0012               	return		;funcret
 21219  016864                     __end_of_MXK_InitDIPSwitch:
 21220                           	opt stack 0
 21221                           tosu	equ	0xFFF
 21222                           tosh	equ	0xFFE
 21223                           tosl	equ	0xFFD
 21224                           pclath	equ	0xFFA
 21225                           tblptru	equ	0xFF8
 21226                           tblptrh	equ	0xFF7
 21227                           tblptrl	equ	0xFF6
 21228                           tablat	equ	0xFF5
 21229                           prodh	equ	0xFF4
 21230                           prodl	equ	0xFF3
 21231                           intcon	equ	0xFF2
 21232                           postinc0	equ	0xFEE
 21233                           wreg	equ	0xFE8
 21234                           indf1	equ	0xFE7
 21235                           postdec1	equ	0xFE5
 21236                           fsr1h	equ	0xFE2
 21237                           fsr1l	equ	0xFE1
 21238                           indf2	equ	0xFDF
 21239                           postinc2	equ	0xFDE
 21240                           postdec2	equ	0xFDD
 21241                           plusw2	equ	0xFDB
 21242                           fsr2h	equ	0xFDA
 21243                           fsr2l	equ	0xFD9
 21244                           status	equ	0xFD8
 21245                           
 21246 ;; *************** function _HMI_InitButtons *****************
 21247 ;; Defined at:
 21248 ;;		line 21 in file "HMI.c"
 21249 ;; Parameters:    Size  Location     Type
 21250 ;;		None
 21251 ;; Auto vars:     Size  Location     Type
 21252 ;;		None
 21253 ;; Return value:  Size  Location     Type
 21254 ;;                  1    wreg      void 
 21255 ;; Registers used:
 21256 ;;		wreg, status,2
 21257 ;; Tracked objects:
 21258 ;;		On entry : 0/0
 21259 ;;		On exit  : 0/0
 21260 ;;		Unchanged: 0/0
 21261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21266 ;;Total ram usage:        0 bytes
 21267 ;; Hardware stack levels used:    1
 21268 ;; Hardware stack levels required when called:    7
 21269 ;; This function calls:
 21270 ;;		Nothing
 21271 ;; This function is called by:
 21272 ;;		_HMI_Init
 21273 ;;		_Button_Init
 21274 ;; This function uses a non-reentrant model
 21275 ;;
 21276                           
 21277                           	psect	text100
 21278  016A92                     __ptext100:
 21279                           	opt stack 0
 21280  016A92                     _HMI_InitButtons:
 21281                           	opt stack 21
 21282                           
 21283                           ;HMI.c: 23: TRISE = 0xFC;
 21284                           
 21285                           ;incstack = 0
 21286  016A92  0EFC               	movlw	252
 21287  016A94  6E96               	movwf	3990,c	;volatile
 21288  016A96  0012               	return		;funcret
 21289  016A98                     __end_of_HMI_InitButtons:
 21290                           	opt stack 0
 21291                           tosu	equ	0xFFF
 21292                           tosh	equ	0xFFE
 21293                           tosl	equ	0xFFD
 21294                           pclath	equ	0xFFA
 21295                           tblptru	equ	0xFF8
 21296                           tblptrh	equ	0xFF7
 21297                           tblptrl	equ	0xFF6
 21298                           tablat	equ	0xFF5
 21299                           prodh	equ	0xFF4
 21300                           prodl	equ	0xFF3
 21301                           intcon	equ	0xFF2
 21302                           postinc0	equ	0xFEE
 21303                           wreg	equ	0xFE8
 21304                           indf1	equ	0xFE7
 21305                           postdec1	equ	0xFE5
 21306                           fsr1h	equ	0xFE2
 21307                           fsr1l	equ	0xFE1
 21308                           indf2	equ	0xFDF
 21309                           postinc2	equ	0xFDE
 21310                           postdec2	equ	0xFDD
 21311                           plusw2	equ	0xFDB
 21312                           fsr2h	equ	0xFDA
 21313                           fsr2l	equ	0xFD9
 21314                           status	equ	0xFD8
 21315                           
 21316 ;; *************** function _MXK_InitTestButton *****************
 21317 ;; Defined at:
 21318 ;;		line 10 in file "Library/MXK.c"
 21319 ;; Parameters:    Size  Location     Type
 21320 ;;		None
 21321 ;; Auto vars:     Size  Location     Type
 21322 ;;		None
 21323 ;; Return value:  Size  Location     Type
 21324 ;;                  1    wreg      void 
 21325 ;; Registers used:
 21326 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21327 ;; Tracked objects:
 21328 ;;		On entry : 0/0
 21329 ;;		On exit  : 0/0
 21330 ;;		Unchanged: 0/0
 21331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21336 ;;Total ram usage:        0 bytes
 21337 ;; Hardware stack levels used:    1
 21338 ;; Hardware stack levels required when called:   12
 21339 ;; This function calls:
 21340 ;;		_Port_SetPinType
 21341 ;; This function is called by:
 21342 ;;		_FunctInitButton
 21343 ;;		_Button_Init
 21344 ;; This function uses a non-reentrant model
 21345 ;;
 21346                           
 21347                           	psect	text101
 21348  016864                     __ptext101:
 21349                           	opt stack 0
 21350  016864                     _MXK_InitTestButton:
 21351                           	opt stack 16
 21352                           
 21353                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 21354                           
 21355                           ;incstack = 0
 21356  016864  0EA0               	movlw	low _PortB
 21357  016866  0100               	movlb	0	; () banked
 21358  016868  6F86               	movwf	Port_SetPinType@pInput& (0+255),b
 21359  01686A  0E01               	movlw	high _PortB
 21360  01686C  0100               	movlb	0	; () banked
 21361  01686E  6F87               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 21362  016870  0E04               	movlw	4
 21363  016872  0100               	movlb	0	; () banked
 21364  016874  6F88               	movwf	Port_SetPinType@pPin& (0+255),b
 21365  016876  0E00               	movlw	0
 21366  016878  0100               	movlb	0	; () banked
 21367  01687A  6F89               	movwf	Port_SetPinType@pType& (0+255),b
 21368  01687C  ECAA  F095         	call	_Port_SetPinType	;wreg free
 21369  016880  0012               	return		;funcret
 21370  016882                     __end_of_MXK_InitTestButton:
 21371                           	opt stack 0
 21372                           tosu	equ	0xFFF
 21373                           tosh	equ	0xFFE
 21374                           tosl	equ	0xFFD
 21375                           pclath	equ	0xFFA
 21376                           tblptru	equ	0xFF8
 21377                           tblptrh	equ	0xFF7
 21378                           tblptrl	equ	0xFF6
 21379                           tablat	equ	0xFF5
 21380                           prodh	equ	0xFF4
 21381                           prodl	equ	0xFF3
 21382                           intcon	equ	0xFF2
 21383                           postinc0	equ	0xFEE
 21384                           wreg	equ	0xFE8
 21385                           indf1	equ	0xFE7
 21386                           postdec1	equ	0xFE5
 21387                           fsr1h	equ	0xFE2
 21388                           fsr1l	equ	0xFE1
 21389                           indf2	equ	0xFDF
 21390                           postinc2	equ	0xFDE
 21391                           postdec2	equ	0xFDD
 21392                           plusw2	equ	0xFDB
 21393                           fsr2h	equ	0xFDA
 21394                           fsr2l	equ	0xFD9
 21395                           status	equ	0xFD8
 21396                           
 21397 ;; *************** function _Port_SetPinType *****************
 21398 ;; Defined at:
 21399 ;;		line 189 in file "Library/Port.c"
 21400 ;; Parameters:    Size  Location     Type
 21401 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 21402 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21403 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21404 ;;  pPin            1   40[BANK0 ] enum E6750
 21405 ;;  pType           1   41[BANK0 ] enum E6795
 21406 ;; Auto vars:     Size  Location     Type
 21407 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 21408 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 21409 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 21410 ;;  Output          1   42[BANK0 ] enum E6475
 21411 ;; Return value:  Size  Location     Type
 21412 ;;                  1    wreg      enum E6475
 21413 ;; Registers used:
 21414 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21415 ;; Tracked objects:
 21416 ;;		On entry : 0/0
 21417 ;;		On exit  : 0/0
 21418 ;;		Unchanged: 0/0
 21419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21420 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21421 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21423 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21424 ;;Total ram usage:        7 bytes
 21425 ;; Hardware stack levels used:    1
 21426 ;; Hardware stack levels required when called:   11
 21427 ;; This function calls:
 21428 ;;		_Byte_SetBit
 21429 ;;		_PortProperty_Valid
 21430 ;;		_Word_SetPair
 21431 ;; This function is called by:
 21432 ;;		_Configure_GPIOs
 21433 ;;		_LED_Init
 21434 ;;		_Port_Init
 21435 ;;		_SPI_Init
 21436 ;;		_Motor_Init
 21437 ;;		_MXK_InitTestButton
 21438 ;;		_MXK_Init
 21439 ;;		_I2C_Init
 21440 ;; This function uses a non-reentrant model
 21441 ;;
 21442                           
 21443                           	psect	text102
 21444  012B54                     __ptext102:
 21445                           	opt stack 0
 21446  012B54                     _Port_SetPinType:
 21447                           	opt stack 18
 21448                           
 21449                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 21450                           
 21451                           ;incstack = 0
 21452  012B54  C086  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 21453  012B58  C087  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 21454  012B5C  CFDE F08B          	movff	postinc2,Port_SetPinType@Props
 21455  012B60  CFDD F08C          	movff	postdec2,Port_SetPinType@Props+1
 21456                           
 21457                           ;Port.c: 192: ePinError Output = ePinErrorState;
 21458  012B64  0E05               	movlw	5
 21459  012B66  0100               	movlb	0	; () banked
 21460  012B68  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21461                           
 21462                           ;Port.c: 193: switch (pType)
 21463  012B6A  D0B5               	goto	l412
 21464  012B6C                     
 21465                           ; BSR set to: 0
 21466                           ;Port.c: 197: {
 21467                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 21468                           
 21469                           ; BSR set to: 0
 21470  012B6C  0100               	movlb	0	; () banked
 21471  012B6E  EE20 F002          	lfsr	2,2
 21472  012B72  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21473  012B74  26D9               	addwf	fsr2l,f,c
 21474  012B76  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21475  012B78  22DA               	addwfc	fsr2h,f,c
 21476  012B7A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21477  012B7E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21478  012B82  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21479  012B86  0E01               	movlw	1
 21480  012B88  0100               	movlb	0	; () banked
 21481  012B8A  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21482  012B8C  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 21483                           
 21484                           ;Port.c: 203: break;
 21485  012B90  D0B0               	goto	l414
 21486  012B92                     
 21487                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 21488  012B92  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21489  012B96  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21490  012B9A  0E01               	movlw	1
 21491  012B9C  0100               	movlb	0	; () banked
 21492  012B9E  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21493  012BA0  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21494  012BA4  EC6F  F0AB         	call	_PortProperty_Valid	;wreg free
 21495  012BA8  0100               	movlb	0	; () banked
 21496  012BAA  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21497  012BAC  0100               	movlb	0	; () banked
 21498  012BAE  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 21499  012BB0  A4D8               	btfss	status,2,c
 21500  012BB2  0012               	return	
 21501                           
 21502                           ; BSR set to: 0
 21503                           ;Port.c: 208: {
 21504                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 21505  012BB4  0100               	movlb	0	; () banked
 21506  012BB6  EE20 F002          	lfsr	2,2
 21507  012BBA  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21508  012BBC  26D9               	addwf	fsr2l,f,c
 21509  012BBE  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21510  012BC0  22DA               	addwfc	fsr2h,f,c
 21511  012BC2  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21512  012BC6  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21513  012BCA  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21514  012BCE  0E00               	movlw	0
 21515  012BD0  0100               	movlb	0	; () banked
 21516  012BD2  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21517  012BD4  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 21518                           
 21519                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 21520  012BD8  0100               	movlb	0	; () banked
 21521  012BDA  EE20 F004          	lfsr	2,4
 21522  012BDE  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21523  012BE0  26D9               	addwf	fsr2l,f,c
 21524  012BE2  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21525  012BE4  22DA               	addwfc	fsr2h,f,c
 21526  012BE6  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21527  012BEA  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21528  012BEE  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21529  012BF2  0E00               	movlw	0
 21530  012BF4  0100               	movlb	0	; () banked
 21531  012BF6  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21532  012BF8  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 21533                           
 21534                           ;Port.c: 214: break;
 21535  012BFC  D07A               	goto	l414
 21536  012BFE                     
 21537                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 21538                           
 21539                           ;Port.c: 218: case eTypeOutputOpenSource:
 21540  012BFE  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21541  012C02  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21542  012C06  0E02               	movlw	2
 21543  012C08  0100               	movlb	0	; () banked
 21544  012C0A  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21545  012C0C  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21546  012C10  EC6F  F0AB         	call	_PortProperty_Valid	;wreg free
 21547  012C14  0100               	movlb	0	; () banked
 21548  012C16  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21549  012C18  0100               	movlb	0	; () banked
 21550  012C1A  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 21551  012C1C  A4D8               	btfss	status,2,c
 21552  012C1E  0012               	return	
 21553                           
 21554                           ; BSR set to: 0
 21555                           ;Port.c: 220: {
 21556                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 21557  012C20  0100               	movlb	0	; () banked
 21558  012C22  EE20 F002          	lfsr	2,2
 21559  012C26  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21560  012C28  26D9               	addwf	fsr2l,f,c
 21561  012C2A  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21562  012C2C  22DA               	addwfc	fsr2h,f,c
 21563  012C2E  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21564  012C32  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21565  012C36  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21566  012C3A  0E01               	movlw	1
 21567  012C3C  0100               	movlb	0	; () banked
 21568  012C3E  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21569  012C40  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 21570                           
 21571                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 21572  012C44  0100               	movlb	0	; () banked
 21573  012C46  EE20 F004          	lfsr	2,4
 21574  012C4A  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21575  012C4C  26D9               	addwf	fsr2l,f,c
 21576  012C4E  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21577  012C50  22DA               	addwfc	fsr2h,f,c
 21578  012C52  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21579  012C56  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21580  012C5A  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21581  012C5E  0E01               	movlw	1
 21582  012C60  0100               	movlb	0	; () banked
 21583  012C62  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21584  012C64  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 21585                           
 21586                           ;Port.c: 226: break;
 21587  012C68  D044               	goto	l414
 21588  012C6A                     
 21589                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 21590                           
 21591                           ;Port.c: 230: case eTypeOutputPushPull:
 21592  012C6A  C08B  F06F         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21593  012C6E  C08C  F070         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21594  012C72  0E00               	movlw	0
 21595  012C74  0100               	movlb	0	; () banked
 21596  012C76  6F71               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21597  012C78  C088  F072         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21598  012C7C  EC6F  F0AB         	call	_PortProperty_Valid	;wreg free
 21599  012C80  0100               	movlb	0	; () banked
 21600  012C82  6F8A               	movwf	Port_SetPinType@Output& (0+255),b
 21601  012C84  0100               	movlb	0	; () banked
 21602  012C86  518A               	movf	Port_SetPinType@Output& (0+255),w,b
 21603  012C88  A4D8               	btfss	status,2,c
 21604  012C8A  0012               	return	
 21605                           
 21606                           ; BSR set to: 0
 21607                           ;Port.c: 232: {
 21608                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 21609  012C8C  0100               	movlb	0	; () banked
 21610  012C8E  EE20 F002          	lfsr	2,2
 21611  012C92  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21612  012C94  26D9               	addwf	fsr2l,f,c
 21613  012C96  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21614  012C98  22DA               	addwfc	fsr2h,f,c
 21615  012C9A  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21616  012C9E  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21617  012CA2  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21618  012CA6  0E00               	movlw	0
 21619  012CA8  0100               	movlb	0	; () banked
 21620  012CAA  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21621  012CAC  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 21622                           
 21623                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 21624  012CB0  0100               	movlb	0	; () banked
 21625  012CB2  EE20 F004          	lfsr	2,4
 21626  012CB6  5186               	movf	Port_SetPinType@pInput& (0+255),w,b
 21627  012CB8  26D9               	addwf	fsr2l,f,c
 21628  012CBA  5187               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21629  012CBC  22DA               	addwfc	fsr2h,f,c
 21630  012CBE  CFDE F060          	movff	postinc2,Byte_SetBit@pInput
 21631  012CC2  CFDD F061          	movff	postdec2,Byte_SetBit@pInput+1
 21632  012CC6  C088  F062         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21633  012CCA  0E00               	movlw	0
 21634  012CCC  0100               	movlb	0	; () banked
 21635  012CCE  6F63               	movwf	Byte_SetBit@pValue& (0+255),b
 21636  012CD0  EC88  F0AE         	call	_Byte_SetBit	;wreg free
 21637                           
 21638                           ;Port.c: 239: }
 21639                           
 21640                           ;Port.c: 238: break;
 21641  012CD4  D00E               	goto	l414
 21642  012CD6                     l412:
 21643  012CD6  0100               	movlb	0	; () banked
 21644  012CD8  5189               	movf	Port_SetPinType@pType& (0+255),w,b
 21645                           
 21646                           ; Switch size 1, requested type "space"
 21647                           ; Number of cases is 4, Range of values is 0 to 3
 21648                           ; switch strategies available:
 21649                           ; Name         Instructions Cycles
 21650                           ; simple_byte           13     7 (average)
 21651                           ;	Chosen strategy is simple_byte
 21652  012CDA  0A00               	xorlw	0	; case 0
 21653  012CDC  B4D8               	btfsc	status,2,c
 21654  012CDE  D746               	goto	l413
 21655  012CE0  0A01               	xorlw	1	; case 1
 21656  012CE2  B4D8               	btfsc	status,2,c
 21657  012CE4  D756               	goto	l415
 21658  012CE6  0A03               	xorlw	3	; case 2
 21659  012CE8  B4D8               	btfsc	status,2,c
 21660  012CEA  D789               	goto	l417
 21661  012CEC  0A01               	xorlw	1	; case 3
 21662  012CEE  B4D8               	btfsc	status,2,c
 21663  012CF0  D7BC               	goto	l421
 21664  012CF2                     l414:
 21665                           
 21666                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 21667                           
 21668                           ; BSR set to: 0
 21669  012CF2  0E08               	movlw	8
 21670  012CF4  0100               	movlb	0	; () banked
 21671  012CF6  2586               	addwf	Port_SetPinType@pInput& (0+255),w,b
 21672  012CF8  0100               	movlb	0	; () banked
 21673  012CFA  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 21674  012CFC  0E00               	movlw	0
 21675  012CFE  0100               	movlb	0	; () banked
 21676  012D00  2187               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 21677  012D02  0100               	movlb	0	; () banked
 21678  012D04  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21679  012D06  C088  F071         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 21680  012D0A  C089  F072         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 21681  012D0E  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 21682  012D12  0012               	return	
 21683  012D14                     __end_of_Port_SetPinType:
 21684                           	opt stack 0
 21685                           tosu	equ	0xFFF
 21686                           tosh	equ	0xFFE
 21687                           tosl	equ	0xFFD
 21688                           pclath	equ	0xFFA
 21689                           tblptru	equ	0xFF8
 21690                           tblptrh	equ	0xFF7
 21691                           tblptrl	equ	0xFF6
 21692                           tablat	equ	0xFF5
 21693                           prodh	equ	0xFF4
 21694                           prodl	equ	0xFF3
 21695                           intcon	equ	0xFF2
 21696                           postinc0	equ	0xFEE
 21697                           wreg	equ	0xFE8
 21698                           indf1	equ	0xFE7
 21699                           postdec1	equ	0xFE5
 21700                           fsr1h	equ	0xFE2
 21701                           fsr1l	equ	0xFE1
 21702                           indf2	equ	0xFDF
 21703                           postinc2	equ	0xFDE
 21704                           postdec2	equ	0xFDD
 21705                           plusw2	equ	0xFDB
 21706                           fsr2h	equ	0xFDA
 21707                           fsr2l	equ	0xFD9
 21708                           status	equ	0xFD8
 21709                           
 21710 ;; *************** function _Byte_SetBit *****************
 21711 ;; Defined at:
 21712 ;;		line 32 in file "Library/Types.c"
 21713 ;; Parameters:    Size  Location     Type
 21714 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21715 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 21716 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 21717 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 21718 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 21719 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 21720 ;;		 -> NULL(0), 
 21721 ;;  pBit            1    2[BANK0 ] unsigned char 
 21722 ;;  pValue          1    3[BANK0 ] unsigned char 
 21723 ;; Auto vars:     Size  Location     Type
 21724 ;;		None
 21725 ;; Return value:  Size  Location     Type
 21726 ;;                  1    wreg      void 
 21727 ;; Registers used:
 21728 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21729 ;; Tracked objects:
 21730 ;;		On entry : 0/0
 21731 ;;		On exit  : 0/0
 21732 ;;		Unchanged: 0/0
 21733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21736 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21737 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21738 ;;Total ram usage:        7 bytes
 21739 ;; Hardware stack levels used:    1
 21740 ;; Hardware stack levels required when called:    7
 21741 ;; This function calls:
 21742 ;;		Nothing
 21743 ;; This function is called by:
 21744 ;;		_Port_SetPinType
 21745 ;;		_Port_SetPin
 21746 ;;		_SPI_Init
 21747 ;;		_SPI_MinSpeed
 21748 ;;		_SPI_MaxSpeed
 21749 ;;		_Word_SetBit
 21750 ;;		_I2C_Init
 21751 ;; This function uses a non-reentrant model
 21752 ;;
 21753                           
 21754                           	psect	text103
 21755  015D10                     __ptext103:
 21756                           	opt stack 0
 21757  015D10                     _Byte_SetBit:
 21758                           	opt stack 21
 21759                           
 21760                           ;Types.c: 34: pValue &= 1;
 21761                           
 21762                           ;incstack = 0
 21763  015D10  0E01               	movlw	1
 21764  015D12  0100               	movlb	0	; () banked
 21765  015D14  1763               	andwf	Byte_SetBit@pValue& (0+255),f,b
 21766                           
 21767                           ; BSR set to: 0
 21768                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 21769  015D16  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21770  015D1A  0E01               	movlw	1
 21771  015D1C  0100               	movlb	0	; () banked
 21772  015D1E  6F65               	movwf	(??_Byte_SetBit+1)& (0+255),b
 21773  015D20  0100               	movlb	0	; () banked
 21774  015D22  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 21775  015D24  D003               	goto	u9064
 21776  015D26                     u9065:
 21777  015D26  0100               	movlb	0	; () banked
 21778  015D28  90D8               	bcf	status,0,c
 21779  015D2A  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21780  015D2C                     u9064:
 21781  015D2C  0100               	movlb	0	; () banked
 21782  015D2E  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 21783  015D30  D7FA               	goto	u9065
 21784  015D32  0100               	movlb	0	; () banked
 21785  015D34  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 21786  015D36  0AFF               	xorlw	255
 21787  015D38  0100               	movlb	0	; () banked
 21788  015D3A  6F66               	movwf	(??_Byte_SetBit+2)& (0+255),b
 21789  015D3C  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21790  015D40  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21791  015D44  0100               	movlb	0	; () banked
 21792  015D46  5166               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 21793  015D48  16DF               	andwf	indf2,f,c
 21794                           
 21795                           ; BSR set to: 0
 21796                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 21797  015D4A  C062  F064         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21798  015D4E  C063  F065         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 21799  015D52  0100               	movlb	0	; () banked
 21800  015D54  2B64               	incf	??_Byte_SetBit& (0+255),f,b
 21801  015D56  D003               	goto	u9074
 21802  015D58                     u9075:
 21803  015D58  0100               	movlb	0	; () banked
 21804  015D5A  90D8               	bcf	status,0,c
 21805  015D5C  3765               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21806  015D5E                     u9074:
 21807  015D5E  0100               	movlb	0	; () banked
 21808  015D60  2F64               	decfsz	??_Byte_SetBit& (0+255),f,b
 21809  015D62  D7FA               	goto	u9075
 21810  015D64  C060  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21811  015D68  C061  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21812  015D6C  0100               	movlb	0	; () banked
 21813  015D6E  5165               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 21814  015D70  12DF               	iorwf	indf2,f,c
 21815                           
 21816                           ; BSR set to: 0
 21817  015D72  0012               	return		;funcret
 21818  015D74                     __end_of_Byte_SetBit:
 21819                           	opt stack 0
 21820                           tosu	equ	0xFFF
 21821                           tosh	equ	0xFFE
 21822                           tosl	equ	0xFFD
 21823                           pclath	equ	0xFFA
 21824                           tblptru	equ	0xFF8
 21825                           tblptrh	equ	0xFF7
 21826                           tblptrl	equ	0xFF6
 21827                           tablat	equ	0xFF5
 21828                           prodh	equ	0xFF4
 21829                           prodl	equ	0xFF3
 21830                           intcon	equ	0xFF2
 21831                           postinc0	equ	0xFEE
 21832                           wreg	equ	0xFE8
 21833                           indf1	equ	0xFE7
 21834                           postdec1	equ	0xFE5
 21835                           fsr1h	equ	0xFE2
 21836                           fsr1l	equ	0xFE1
 21837                           indf2	equ	0xFDF
 21838                           postinc2	equ	0xFDE
 21839                           postdec2	equ	0xFDD
 21840                           plusw2	equ	0xFDB
 21841                           fsr2h	equ	0xFDA
 21842                           fsr2l	equ	0xFD9
 21843                           status	equ	0xFD8
 21844                           
 21845 ;; *************** function _Port_SetQuadType *****************
 21846 ;; Defined at:
 21847 ;;		line 399 in file "Library/Port.c"
 21848 ;; Parameters:    Size  Location     Type
 21849 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 21850 ;;		 -> PortB(10), PortD(10), 
 21851 ;;  pQuad           1   56[BANK0 ] enum E6776
 21852 ;;  pType           1   57[BANK0 ] enum E6795
 21853 ;; Auto vars:     Size  Location     Type
 21854 ;;  Output          1   58[BANK0 ] enum E6475
 21855 ;; Return value:  Size  Location     Type
 21856 ;;                  1    wreg      enum E6475
 21857 ;; Registers used:
 21858 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21859 ;; Tracked objects:
 21860 ;;		On entry : 0/0
 21861 ;;		On exit  : 0/0
 21862 ;;		Unchanged: 0/0
 21863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21864 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21867 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21868 ;;Total ram usage:        5 bytes
 21869 ;; Hardware stack levels used:    1
 21870 ;; Hardware stack levels required when called:   13
 21871 ;; This function calls:
 21872 ;;		_Byte_SetQuad
 21873 ;;		_Port_CheckQuadType
 21874 ;;		_Word_SetPair
 21875 ;; This function is called by:
 21876 ;;		_MXK_InitDIPSwitch
 21877 ;;		_MXK_Init
 21878 ;; This function uses a non-reentrant model
 21879 ;;
 21880                           
 21881                           	psect	text104
 21882  011EFC                     __ptext104:
 21883                           	opt stack 0
 21884  011EFC                     _Port_SetQuadType:
 21885                           	opt stack 16
 21886                           
 21887                           ;Port.c: 401: ePinError Output = ePinErrorState;
 21888                           
 21889                           ; BSR set to: 0
 21890                           ;incstack = 0
 21891  011EFC  0E05               	movlw	5
 21892  011EFE  0100               	movlb	0	; () banked
 21893  011F00  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 21894                           
 21895                           ;Port.c: 403: switch (pType)
 21896  011F02  D0C7               	goto	l476
 21897  011F04                     
 21898                           ; BSR set to: 0
 21899                           ;Port.c: 407: {
 21900                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21901                           
 21902                           ; BSR set to: 0
 21903  011F04  0100               	movlb	0	; () banked
 21904  011F06  EE20 F002          	lfsr	2,2
 21905  011F0A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21906  011F0C  26D9               	addwf	fsr2l,f,c
 21907  011F0E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21908  011F10  22DA               	addwfc	fsr2h,f,c
 21909  011F12  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 21910  011F16  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 21911  011F1A  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21912  011F1E  0E0F               	movlw	15
 21913  011F20  0100               	movlb	0	; () banked
 21914  011F22  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 21915  011F24  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 21916                           
 21917                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21918  011F28  0100               	movlb	0	; () banked
 21919  011F2A  EE20 F004          	lfsr	2,4
 21920  011F2E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21921  011F30  26D9               	addwf	fsr2l,f,c
 21922  011F32  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21923  011F34  22DA               	addwfc	fsr2h,f,c
 21924  011F36  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 21925  011F3A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 21926  011F3E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21927  011F42  0E00               	movlw	0
 21928  011F44  0100               	movlb	0	; () banked
 21929  011F46  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 21930  011F48  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 21931                           
 21932                           ;Port.c: 413: }
 21933                           ;Port.c: 415: break;
 21934  011F4C  D0B0               	goto	l478
 21935  011F4E                     
 21936                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21937  011F4E  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21938  011F52  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21939  011F56  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21940  011F5A  0E03               	movlw	3
 21941  011F5C  0100               	movlb	0	; () banked
 21942  011F5E  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21943  011F60  EC4A  F0AF         	call	_Port_CheckQuadType	;wreg free
 21944  011F64  0100               	movlb	0	; () banked
 21945  011F66  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 21946  011F68  0100               	movlb	0	; () banked
 21947  011F6A  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 21948  011F6C  A4D8               	btfss	status,2,c
 21949  011F6E  0012               	return	
 21950                           
 21951                           ; BSR set to: 0
 21952                           ;Port.c: 418: {
 21953                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21954  011F70  0100               	movlb	0	; () banked
 21955  011F72  EE20 F002          	lfsr	2,2
 21956  011F76  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21957  011F78  26D9               	addwf	fsr2l,f,c
 21958  011F7A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21959  011F7C  22DA               	addwfc	fsr2h,f,c
 21960  011F7E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 21961  011F82  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 21962  011F86  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21963  011F8A  0E00               	movlw	0
 21964  011F8C  0100               	movlb	0	; () banked
 21965  011F8E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 21966  011F90  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 21967                           
 21968                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21969  011F94  0100               	movlb	0	; () banked
 21970  011F96  EE20 F004          	lfsr	2,4
 21971  011F9A  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21972  011F9C  26D9               	addwf	fsr2l,f,c
 21973  011F9E  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21974  011FA0  22DA               	addwfc	fsr2h,f,c
 21975  011FA2  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 21976  011FA6  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 21977  011FAA  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21978  011FAE  0E00               	movlw	0
 21979  011FB0  0100               	movlb	0	; () banked
 21980  011FB2  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 21981  011FB4  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 21982                           
 21983                           ;Port.c: 424: }
 21984  011FB8  D07A               	goto	l478
 21985  011FBA                     
 21986                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21987  011FBA  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21988  011FBE  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21989  011FC2  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21990  011FC6  0E03               	movlw	3
 21991  011FC8  0100               	movlb	0	; () banked
 21992  011FCA  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21993  011FCC  EC4A  F0AF         	call	_Port_CheckQuadType	;wreg free
 21994  011FD0  0100               	movlb	0	; () banked
 21995  011FD2  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 21996  011FD4  0100               	movlb	0	; () banked
 21997  011FD6  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 21998  011FD8  A4D8               	btfss	status,2,c
 21999  011FDA  0012               	return	
 22000                           
 22001                           ; BSR set to: 0
 22002                           ;Port.c: 429: {
 22003                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22004  011FDC  0100               	movlb	0	; () banked
 22005  011FDE  EE20 F002          	lfsr	2,2
 22006  011FE2  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22007  011FE4  26D9               	addwf	fsr2l,f,c
 22008  011FE6  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22009  011FE8  22DA               	addwfc	fsr2h,f,c
 22010  011FEA  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22011  011FEE  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22012  011FF2  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22013  011FF6  0E0F               	movlw	15
 22014  011FF8  0100               	movlb	0	; () banked
 22015  011FFA  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22016  011FFC  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 22017                           
 22018                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22019  012000  0100               	movlb	0	; () banked
 22020  012002  EE20 F004          	lfsr	2,4
 22021  012006  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22022  012008  26D9               	addwf	fsr2l,f,c
 22023  01200A  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22024  01200C  22DA               	addwfc	fsr2h,f,c
 22025  01200E  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22026  012012  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22027  012016  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22028  01201A  0E0F               	movlw	15
 22029  01201C  0100               	movlb	0	; () banked
 22030  01201E  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22031  012020  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 22032                           
 22033                           ;Port.c: 435: }
 22034  012024  D044               	goto	l478
 22035  012026                     
 22036                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22037  012026  C096  F08F         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22038  01202A  C097  F090         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22039  01202E  C098  F091         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22040  012032  0E03               	movlw	3
 22041  012034  0100               	movlb	0	; () banked
 22042  012036  6F92               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22043  012038  EC4A  F0AF         	call	_Port_CheckQuadType	;wreg free
 22044  01203C  0100               	movlb	0	; () banked
 22045  01203E  6F9A               	movwf	Port_SetQuadType@Output& (0+255),b
 22046  012040  0100               	movlb	0	; () banked
 22047  012042  519A               	movf	Port_SetQuadType@Output& (0+255),w,b
 22048  012044  A4D8               	btfss	status,2,c
 22049  012046  0012               	return	
 22050                           
 22051                           ; BSR set to: 0
 22052                           ;Port.c: 440: {
 22053                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22054  012048  0100               	movlb	0	; () banked
 22055  01204A  EE20 F002          	lfsr	2,2
 22056  01204E  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22057  012050  26D9               	addwf	fsr2l,f,c
 22058  012052  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22059  012054  22DA               	addwfc	fsr2h,f,c
 22060  012056  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22061  01205A  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22062  01205E  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22063  012062  0E00               	movlw	0
 22064  012064  0100               	movlb	0	; () banked
 22065  012066  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22066  012068  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 22067                           
 22068                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22069  01206C  0100               	movlb	0	; () banked
 22070  01206E  EE20 F004          	lfsr	2,4
 22071  012072  5196               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22072  012074  26D9               	addwf	fsr2l,f,c
 22073  012076  5197               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22074  012078  22DA               	addwfc	fsr2h,f,c
 22075  01207A  CFDE F06B          	movff	postinc2,Byte_SetQuad@pInput
 22076  01207E  CFDD F06C          	movff	postdec2,Byte_SetQuad@pInput+1
 22077  012082  C098  F06D         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22078  012086  0E00               	movlw	0
 22079  012088  0100               	movlb	0	; () banked
 22080  01208A  6F6E               	movwf	Byte_SetQuad@pValue& (0+255),b
 22081  01208C  ECD4  F0B3         	call	_Byte_SetQuad	;wreg free
 22082                           
 22083                           ;Port.c: 446: }
 22084  012090  D00E               	goto	l478
 22085  012092                     l476:
 22086  012092  0100               	movlb	0	; () banked
 22087  012094  5199               	movf	Port_SetQuadType@pType& (0+255),w,b
 22088                           
 22089                           ; Switch size 1, requested type "space"
 22090                           ; Number of cases is 4, Range of values is 0 to 3
 22091                           ; switch strategies available:
 22092                           ; Name         Instructions Cycles
 22093                           ; simple_byte           13     7 (average)
 22094                           ;	Chosen strategy is simple_byte
 22095  012096  0A00               	xorlw	0	; case 0
 22096  012098  B4D8               	btfsc	status,2,c
 22097  01209A  D734               	goto	l477
 22098  01209C  0A01               	xorlw	1	; case 1
 22099  01209E  B4D8               	btfsc	status,2,c
 22100  0120A0  D756               	goto	l479
 22101  0120A2  0A03               	xorlw	3	; case 2
 22102  0120A4  B4D8               	btfsc	status,2,c
 22103  0120A6  D789               	goto	l483
 22104  0120A8  0A01               	xorlw	1	; case 3
 22105  0120AA  B4D8               	btfsc	status,2,c
 22106  0120AC  D7BC               	goto	l486
 22107  0120AE                     l478:
 22108                           
 22109                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22110                           
 22111                           ; BSR set to: 0
 22112  0120AE  0E08               	movlw	8
 22113  0120B0  0100               	movlb	0	; () banked
 22114  0120B2  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22115  0120B4  0100               	movlb	0	; () banked
 22116  0120B6  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22117  0120B8  0E00               	movlw	0
 22118  0120BA  0100               	movlb	0	; () banked
 22119  0120BC  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22120  0120BE  0100               	movlb	0	; () banked
 22121  0120C0  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22122  0120C2  0100               	movlb	0	; () banked
 22123  0120C4  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22124  0120C6  0D04               	mullw	4
 22125  0120C8  CFF3 F071          	movff	prodl,Word_SetPair@pPair
 22126  0120CC  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22127  0120D0  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 22128                           
 22129                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22130  0120D4  0E08               	movlw	8
 22131  0120D6  0100               	movlb	0	; () banked
 22132  0120D8  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22133  0120DA  0100               	movlb	0	; () banked
 22134  0120DC  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22135  0120DE  0E00               	movlw	0
 22136  0120E0  0100               	movlb	0	; () banked
 22137  0120E2  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22138  0120E4  0100               	movlb	0	; () banked
 22139  0120E6  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22140  0120E8  0100               	movlb	0	; () banked
 22141  0120EA  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22142  0120EC  0D04               	mullw	4
 22143  0120EE  28F3               	incf	prodl,w,c
 22144  0120F0  0100               	movlb	0	; () banked
 22145  0120F2  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22146  0120F4  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22147  0120F8  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 22148                           
 22149                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22150  0120FC  0E08               	movlw	8
 22151  0120FE  0100               	movlb	0	; () banked
 22152  012100  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22153  012102  0100               	movlb	0	; () banked
 22154  012104  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22155  012106  0E00               	movlw	0
 22156  012108  0100               	movlb	0	; () banked
 22157  01210A  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22158  01210C  0100               	movlb	0	; () banked
 22159  01210E  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22160  012110  0100               	movlb	0	; () banked
 22161  012112  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22162  012114  0D04               	mullw	4
 22163  012116  50F3               	movf	prodl,w,c
 22164  012118  0F02               	addlw	2
 22165  01211A  0100               	movlb	0	; () banked
 22166  01211C  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22167  01211E  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22168  012122  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 22169                           
 22170                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22171  012126  0E08               	movlw	8
 22172  012128  0100               	movlb	0	; () banked
 22173  01212A  2596               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22174  01212C  0100               	movlb	0	; () banked
 22175  01212E  6F6F               	movwf	Word_SetPair@pInput& (0+255),b
 22176  012130  0E00               	movlw	0
 22177  012132  0100               	movlb	0	; () banked
 22178  012134  2197               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22179  012136  0100               	movlb	0	; () banked
 22180  012138  6F70               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22181  01213A  0100               	movlb	0	; () banked
 22182  01213C  5198               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22183  01213E  0D04               	mullw	4
 22184  012140  50F3               	movf	prodl,w,c
 22185  012142  0F03               	addlw	3
 22186  012144  0100               	movlb	0	; () banked
 22187  012146  6F71               	movwf	Word_SetPair@pPair& (0+255),b
 22188  012148  C099  F072         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22189  01214C  EC1A  F0B1         	call	_Word_SetPair	;wreg free
 22190  012150  0012               	return	
 22191  012152                     __end_of_Port_SetQuadType:
 22192                           	opt stack 0
 22193                           tosu	equ	0xFFF
 22194                           tosh	equ	0xFFE
 22195                           tosl	equ	0xFFD
 22196                           pclath	equ	0xFFA
 22197                           tblptru	equ	0xFF8
 22198                           tblptrh	equ	0xFF7
 22199                           tblptrl	equ	0xFF6
 22200                           tablat	equ	0xFF5
 22201                           prodh	equ	0xFF4
 22202                           prodl	equ	0xFF3
 22203                           intcon	equ	0xFF2
 22204                           postinc0	equ	0xFEE
 22205                           wreg	equ	0xFE8
 22206                           indf1	equ	0xFE7
 22207                           postdec1	equ	0xFE5
 22208                           fsr1h	equ	0xFE2
 22209                           fsr1l	equ	0xFE1
 22210                           indf2	equ	0xFDF
 22211                           postinc2	equ	0xFDE
 22212                           postdec2	equ	0xFDD
 22213                           plusw2	equ	0xFDB
 22214                           fsr2h	equ	0xFDA
 22215                           fsr2l	equ	0xFD9
 22216                           status	equ	0xFD8
 22217                           
 22218 ;; *************** function _Word_SetPair *****************
 22219 ;; Defined at:
 22220 ;;		line 149 in file "Library/Types.c"
 22221 ;; Parameters:    Size  Location     Type
 22222 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22223 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22224 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22225 ;;  pPair           1   17[BANK0 ] unsigned char 
 22226 ;;  pValue          1   18[BANK0 ] unsigned char 
 22227 ;; Auto vars:     Size  Location     Type
 22228 ;;		None
 22229 ;; Return value:  Size  Location     Type
 22230 ;;                  1    wreg      void 
 22231 ;; Registers used:
 22232 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22233 ;; Tracked objects:
 22234 ;;		On entry : 0/0
 22235 ;;		On exit  : 0/0
 22236 ;;		Unchanged: 0/0
 22237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22238 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22241 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22242 ;;Total ram usage:        4 bytes
 22243 ;; Hardware stack levels used:    1
 22244 ;; Hardware stack levels required when called:    9
 22245 ;; This function calls:
 22246 ;;		_Byte_SetPair
 22247 ;; This function is called by:
 22248 ;;		_Port_SetPinType
 22249 ;;		_Port_SetQuadType
 22250 ;;		_Port_SetType
 22251 ;;		_Port_SetPairType
 22252 ;;		_PortProperty_Init
 22253 ;; This function uses a non-reentrant model
 22254 ;;
 22255                           
 22256                           	psect	text105
 22257  016234                     __ptext105:
 22258                           	opt stack 0
 22259  016234                     _Word_SetPair:
 22260                           	opt stack 19
 22261                           
 22262                           ;Types.c: 151: if (pPair >= 4)
 22263                           
 22264                           ;incstack = 0
 22265  016234  0E03               	movlw	3
 22266  016236  0100               	movlb	0	; () banked
 22267  016238  6571               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22268  01623A  D014               	goto	l776
 22269                           
 22270                           ; BSR set to: 0
 22271                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22272  01623C  0E01               	movlw	1
 22273  01623E  0100               	movlb	0	; () banked
 22274  016240  256F               	addwf	Word_SetPair@pInput& (0+255),w,b
 22275  016242  0100               	movlb	0	; () banked
 22276  016244  6F6B               	movwf	Byte_SetPair@pInput& (0+255),b
 22277  016246  0E00               	movlw	0
 22278  016248  0100               	movlb	0	; () banked
 22279  01624A  2170               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22280  01624C  0100               	movlb	0	; () banked
 22281  01624E  6F6C               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22282  016250  0100               	movlb	0	; () banked
 22283  016252  5171               	movf	Word_SetPair@pPair& (0+255),w,b
 22284  016254  0FFC               	addlw	252
 22285  016256  0100               	movlb	0	; () banked
 22286  016258  6F6D               	movwf	Byte_SetPair@pPair& (0+255),b
 22287  01625A  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22288  01625E  ECC3  F0B3         	call	_Byte_SetPair	;wreg free
 22289  016262  0012               	return	
 22290  016264                     l776:
 22291                           
 22292                           ;Types.c: 153: else
 22293                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22294  016264  C06F  F06B         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22295  016268  C070  F06C         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22296  01626C  C071  F06D         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22297  016270  C072  F06E         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22298  016274  ECC3  F0B3         	call	_Byte_SetPair	;wreg free
 22299  016278  0012               	return	
 22300  01627A                     __end_of_Word_SetPair:
 22301                           	opt stack 0
 22302                           tosu	equ	0xFFF
 22303                           tosh	equ	0xFFE
 22304                           tosl	equ	0xFFD
 22305                           pclath	equ	0xFFA
 22306                           tblptru	equ	0xFF8
 22307                           tblptrh	equ	0xFF7
 22308                           tblptrl	equ	0xFF6
 22309                           tablat	equ	0xFF5
 22310                           prodh	equ	0xFF4
 22311                           prodl	equ	0xFF3
 22312                           intcon	equ	0xFF2
 22313                           postinc0	equ	0xFEE
 22314                           wreg	equ	0xFE8
 22315                           indf1	equ	0xFE7
 22316                           postdec1	equ	0xFE5
 22317                           fsr1h	equ	0xFE2
 22318                           fsr1l	equ	0xFE1
 22319                           indf2	equ	0xFDF
 22320                           postinc2	equ	0xFDE
 22321                           postdec2	equ	0xFDD
 22322                           plusw2	equ	0xFDB
 22323                           fsr2h	equ	0xFDA
 22324                           fsr2l	equ	0xFD9
 22325                           status	equ	0xFD8
 22326                           
 22327 ;; *************** function _Byte_SetPair *****************
 22328 ;; Defined at:
 22329 ;;		line 83 in file "Library/Types.c"
 22330 ;; Parameters:    Size  Location     Type
 22331 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22332 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22333 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22334 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 22335 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 22336 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 22337 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 22338 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 22339 ;;		 -> NULL(0), 
 22340 ;;  pPair           1   13[BANK0 ] unsigned char 
 22341 ;;  pValue          1   14[BANK0 ] unsigned char 
 22342 ;; Auto vars:     Size  Location     Type
 22343 ;;		None
 22344 ;; Return value:  Size  Location     Type
 22345 ;;                  1    wreg      void 
 22346 ;; Registers used:
 22347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22348 ;; Tracked objects:
 22349 ;;		On entry : 0/0
 22350 ;;		On exit  : 0/0
 22351 ;;		Unchanged: 0/0
 22352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22353 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22356 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22357 ;;Total ram usage:        4 bytes
 22358 ;; Hardware stack levels used:    1
 22359 ;; Hardware stack levels required when called:    8
 22360 ;; This function calls:
 22361 ;;		_Byte_SetZone
 22362 ;; This function is called by:
 22363 ;;		_Word_SetPair
 22364 ;;		_Port_SetPairType
 22365 ;;		_Port_SetPair
 22366 ;; This function uses a non-reentrant model
 22367 ;;
 22368                           
 22369                           	psect	text106
 22370  016786                     __ptext106:
 22371                           	opt stack 0
 22372  016786                     _Byte_SetPair:
 22373                           	opt stack 19
 22374                           
 22375                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 22376                           
 22377                           ;incstack = 0
 22378  016786  C06B  F060         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 22379  01678A  C06C  F061         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 22380  01678E  0E04               	movlw	4
 22381  016790  0100               	movlb	0	; () banked
 22382  016792  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 22383  016794  C06D  F063         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 22384  016798  0E02               	movlw	2
 22385  01679A  0100               	movlb	0	; () banked
 22386  01679C  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22387  01679E  C06E  F065         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 22388  0167A2  EC9A  F0A5         	call	_Byte_SetZone	;wreg free
 22389  0167A6  0012               	return		;funcret
 22390  0167A8                     __end_of_Byte_SetPair:
 22391                           	opt stack 0
 22392                           tosu	equ	0xFFF
 22393                           tosh	equ	0xFFE
 22394                           tosl	equ	0xFFD
 22395                           pclath	equ	0xFFA
 22396                           tblptru	equ	0xFF8
 22397                           tblptrh	equ	0xFF7
 22398                           tblptrl	equ	0xFF6
 22399                           tablat	equ	0xFF5
 22400                           prodh	equ	0xFF4
 22401                           prodl	equ	0xFF3
 22402                           intcon	equ	0xFF2
 22403                           postinc0	equ	0xFEE
 22404                           wreg	equ	0xFE8
 22405                           indf1	equ	0xFE7
 22406                           postdec1	equ	0xFE5
 22407                           fsr1h	equ	0xFE2
 22408                           fsr1l	equ	0xFE1
 22409                           indf2	equ	0xFDF
 22410                           postinc2	equ	0xFDE
 22411                           postdec2	equ	0xFDD
 22412                           plusw2	equ	0xFDB
 22413                           fsr2h	equ	0xFDA
 22414                           fsr2l	equ	0xFD9
 22415                           status	equ	0xFD8
 22416                           
 22417 ;; *************** function _Port_CheckQuadType *****************
 22418 ;; Defined at:
 22419 ;;		line 126 in file "Library/Port.c"
 22420 ;; Parameters:    Size  Location     Type
 22421 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 22422 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22423 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22424 ;;  pQuad           1   49[BANK0 ] enum E6776
 22425 ;;  pDrive          1   50[BANK0 ] enum E6469
 22426 ;; Auto vars:     Size  Location     Type
 22427 ;;  Output          1   53[BANK0 ] enum E6475
 22428 ;;  Pair2           1   52[BANK0 ] enum E6760
 22429 ;;  Pair1           1   51[BANK0 ] enum E6760
 22430 ;; Return value:  Size  Location     Type
 22431 ;;                  1    wreg      enum E6475
 22432 ;; Registers used:
 22433 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22434 ;; Tracked objects:
 22435 ;;		On entry : 0/0
 22436 ;;		On exit  : 0/0
 22437 ;;		Unchanged: 0/0
 22438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22439 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22440 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22442 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22443 ;;Total ram usage:        7 bytes
 22444 ;; Hardware stack levels used:    1
 22445 ;; Hardware stack levels required when called:   12
 22446 ;; This function calls:
 22447 ;;		_Port_CheckPairType
 22448 ;; This function is called by:
 22449 ;;		_Port_CheckPortType
 22450 ;;		_Port_SetQuadType
 22451 ;; This function uses a non-reentrant model
 22452 ;;
 22453                           
 22454                           	psect	text107
 22455  015E94                     __ptext107:
 22456                           	opt stack 0
 22457  015E94                     _Port_CheckQuadType:
 22458                           	opt stack 15
 22459                           
 22460                           ;Port.c: 128: ePinError Output = ePinErrorState;
 22461                           
 22462                           ;incstack = 0
 22463  015E94  0E05               	movlw	5
 22464  015E96  0100               	movlb	0	; () banked
 22465  015E98  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22466                           
 22467                           ; BSR set to: 0
 22468                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 22469  015E9A  0100               	movlb	0	; () banked
 22470  015E9C  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22471  015E9E  0D02               	mullw	2
 22472  015EA0  CFF3 F093          	movff	prodl,Port_CheckQuadType@Pair1
 22473                           
 22474                           ; BSR set to: 0
 22475                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 22476  015EA4  0100               	movlb	0	; () banked
 22477  015EA6  5191               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22478  015EA8  0D02               	mullw	2
 22479  015EAA  28F3               	incf	prodl,w,c
 22480  015EAC  0100               	movlb	0	; () banked
 22481  015EAE  6F94               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 22482                           
 22483                           ; BSR set to: 0
 22484                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 22485  015EB0  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22486  015EB4  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22487  015EB8  C093  F088         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 22488  015EBC  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22489  015EC0  ECEC  F0AD         	call	_Port_CheckPairType	;wreg free
 22490  015EC4  0100               	movlb	0	; () banked
 22491  015EC6  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22492  015EC8  0100               	movlb	0	; () banked
 22493  015ECA  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22494  015ECC  A4D8               	btfss	status,2,c
 22495  015ECE  D00C               	goto	l393
 22496                           
 22497                           ; BSR set to: 0
 22498                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 22499  015ED0  C08F  F086         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22500  015ED4  C090  F087         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22501  015ED8  C094  F088         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 22502  015EDC  C092  F089         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22503  015EE0  ECEC  F0AD         	call	_Port_CheckPairType	;wreg free
 22504  015EE4  0100               	movlb	0	; () banked
 22505  015EE6  6F95               	movwf	Port_CheckQuadType@Output& (0+255),b
 22506  015EE8                     l393:
 22507                           
 22508                           ; BSR set to: 0
 22509                           ;Port.c: 136: return Output;
 22510                           
 22511                           ; BSR set to: 0
 22512  015EE8  0100               	movlb	0	; () banked
 22513  015EEA  5195               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22514  015EEC  0012               	return	
 22515  015EEE                     __end_of_Port_CheckQuadType:
 22516                           	opt stack 0
 22517                           tosu	equ	0xFFF
 22518                           tosh	equ	0xFFE
 22519                           tosl	equ	0xFFD
 22520                           pclath	equ	0xFFA
 22521                           tblptru	equ	0xFF8
 22522                           tblptrh	equ	0xFF7
 22523                           tblptrl	equ	0xFF6
 22524                           tablat	equ	0xFF5
 22525                           prodh	equ	0xFF4
 22526                           prodl	equ	0xFF3
 22527                           intcon	equ	0xFF2
 22528                           postinc0	equ	0xFEE
 22529                           wreg	equ	0xFE8
 22530                           indf1	equ	0xFE7
 22531                           postdec1	equ	0xFE5
 22532                           fsr1h	equ	0xFE2
 22533                           fsr1l	equ	0xFE1
 22534                           indf2	equ	0xFDF
 22535                           postinc2	equ	0xFDE
 22536                           postdec2	equ	0xFDD
 22537                           plusw2	equ	0xFDB
 22538                           fsr2h	equ	0xFDA
 22539                           fsr2l	equ	0xFD9
 22540                           status	equ	0xFD8
 22541                           
 22542 ;; *************** function _Port_CheckPairType *****************
 22543 ;; Defined at:
 22544 ;;		line 112 in file "Library/Port.c"
 22545 ;; Parameters:    Size  Location     Type
 22546 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22547 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22548 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22549 ;;  pPair           1   40[BANK0 ] enum E6760
 22550 ;;  pDrive          1   41[BANK0 ] enum E6469
 22551 ;; Auto vars:     Size  Location     Type
 22552 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 22553 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22554 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22555 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22556 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22557 ;;  Output          1   44[BANK0 ] enum E6475
 22558 ;;  Pin2            1   43[BANK0 ] enum E6750
 22559 ;;  Pin1            1   42[BANK0 ] enum E6750
 22560 ;; Return value:  Size  Location     Type
 22561 ;;                  1    wreg      enum E6475
 22562 ;; Registers used:
 22563 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22564 ;; Tracked objects:
 22565 ;;		On entry : 0/0
 22566 ;;		On exit  : 0/0
 22567 ;;		Unchanged: 0/0
 22568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22569 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22570 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22571 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22572 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22573 ;;Total ram usage:        9 bytes
 22574 ;; Hardware stack levels used:    1
 22575 ;; Hardware stack levels required when called:   11
 22576 ;; This function calls:
 22577 ;;		_PortProperty_Valid
 22578 ;; This function is called by:
 22579 ;;		_Port_CheckQuadType
 22580 ;;		_Port_SetPairType
 22581 ;; This function uses a non-reentrant model
 22582 ;;
 22583                           
 22584                           	psect	text108
 22585  015BD8                     __ptext108:
 22586                           	opt stack 0
 22587  015BD8                     _Port_CheckPairType:
 22588                           	opt stack 15
 22589                           
 22590                           ;Port.c: 114: ePinError Output = ePinErrorState;
 22591                           
 22592                           ; BSR set to: 0
 22593                           ;incstack = 0
 22594  015BD8  0E05               	movlw	5
 22595  015BDA  0100               	movlb	0	; () banked
 22596  015BDC  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 22597                           
 22598                           ; BSR set to: 0
 22599                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 22600  015BDE  C086  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 22601  015BE2  C087  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 22602  015BE6  CFDE F08D          	movff	postinc2,Port_CheckPairType@Props
 22603  015BEA  CFDD F08E          	movff	postdec2,Port_CheckPairType@Props+1
 22604                           
 22605                           ; BSR set to: 0
 22606                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 22607  015BEE  0100               	movlb	0	; () banked
 22608  015BF0  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 22609  015BF2  0D02               	mullw	2
 22610  015BF4  CFF3 F08A          	movff	prodl,Port_CheckPairType@Pin1
 22611                           
 22612                           ; BSR set to: 0
 22613                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 22614  015BF8  0100               	movlb	0	; () banked
 22615  015BFA  5188               	movf	Port_CheckPairType@pPair& (0+255),w,b
 22616  015BFC  0D02               	mullw	2
 22617  015BFE  28F3               	incf	prodl,w,c
 22618  015C00  0100               	movlb	0	; () banked
 22619  015C02  6F8B               	movwf	Port_CheckPairType@Pin2& (0+255),b
 22620                           
 22621                           ; BSR set to: 0
 22622                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 22623  015C04  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 22624  015C08  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 22625  015C0C  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 22626  015C10  C08A  F072         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 22627  015C14  EC6F  F0AB         	call	_PortProperty_Valid	;wreg free
 22628  015C18  0100               	movlb	0	; () banked
 22629  015C1A  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 22630  015C1C  0100               	movlb	0	; () banked
 22631  015C1E  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 22632  015C20  A4D8               	btfss	status,2,c
 22633  015C22  D00C               	goto	l389
 22634                           
 22635                           ; BSR set to: 0
 22636                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 22637  015C24  C08D  F06F         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 22638  015C28  C08E  F070         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 22639  015C2C  C089  F071         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 22640  015C30  C08B  F072         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 22641  015C34  EC6F  F0AB         	call	_PortProperty_Valid	;wreg free
 22642  015C38  0100               	movlb	0	; () banked
 22643  015C3A  6F8C               	movwf	Port_CheckPairType@Output& (0+255),b
 22644  015C3C                     l389:
 22645                           
 22646                           ; BSR set to: 0
 22647                           ;Port.c: 124: return Output;
 22648                           
 22649                           ; BSR set to: 0
 22650  015C3C  0100               	movlb	0	; () banked
 22651  015C3E  518C               	movf	Port_CheckPairType@Output& (0+255),w,b
 22652  015C40  0012               	return	
 22653  015C42                     __end_of_Port_CheckPairType:
 22654                           	opt stack 0
 22655                           tosu	equ	0xFFF
 22656                           tosh	equ	0xFFE
 22657                           tosl	equ	0xFFD
 22658                           pclath	equ	0xFFA
 22659                           tblptru	equ	0xFF8
 22660                           tblptrh	equ	0xFF7
 22661                           tblptrl	equ	0xFF6
 22662                           tablat	equ	0xFF5
 22663                           prodh	equ	0xFF4
 22664                           prodl	equ	0xFF3
 22665                           intcon	equ	0xFF2
 22666                           postinc0	equ	0xFEE
 22667                           wreg	equ	0xFE8
 22668                           indf1	equ	0xFE7
 22669                           postdec1	equ	0xFE5
 22670                           fsr1h	equ	0xFE2
 22671                           fsr1l	equ	0xFE1
 22672                           indf2	equ	0xFDF
 22673                           postinc2	equ	0xFDE
 22674                           postdec2	equ	0xFDD
 22675                           plusw2	equ	0xFDB
 22676                           fsr2h	equ	0xFDA
 22677                           fsr2l	equ	0xFD9
 22678                           status	equ	0xFD8
 22679                           
 22680 ;; *************** function _PortProperty_Valid *****************
 22681 ;; Defined at:
 22682 ;;		line 220 in file "Library/Types.c"
 22683 ;; Parameters:    Size  Location     Type
 22684 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 22685 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22686 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22687 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22688 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22689 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 22690 ;;  pPin            1   18[BANK0 ] unsigned char 
 22691 ;; Auto vars:     Size  Location     Type
 22692 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 22693 ;;  Pair            1   37[BANK0 ] enum E6469
 22694 ;; Return value:  Size  Location     Type
 22695 ;;                  1    wreg      enum E6475
 22696 ;; Registers used:
 22697 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22698 ;; Tracked objects:
 22699 ;;		On entry : 0/0
 22700 ;;		On exit  : 0/0
 22701 ;;		Unchanged: 0/0
 22702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22703 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22704 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22706 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22707 ;;Total ram usage:       23 bytes
 22708 ;; Hardware stack levels used:    1
 22709 ;; Hardware stack levels required when called:   10
 22710 ;; This function calls:
 22711 ;;		_Word_GetPair
 22712 ;; This function is called by:
 22713 ;;		_Port_CheckPairType
 22714 ;;		_Port_SetPinType
 22715 ;; This function uses a non-reentrant model
 22716 ;;
 22717                           
 22718                           	psect	text109
 22719  0156DE                     __ptext109:
 22720                           	opt stack 0
 22721  0156DE                     _PortProperty_Valid:
 22722                           	opt stack 18
 22723                           
 22724                           ;Types.c: 222: ePinDrive Pair;
 22725                           ;Types.c: 223: const ePinError Errors[4][4] =
 22726                           ;Types.c: 224: {
 22727                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 22728                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 22729                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 22730                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 22731                           ;Types.c: 230: };
 22732                           
 22733                           ; BSR set to: 0
 22734                           ;incstack = 0
 22735  0156DE  0EF9               	movlw	low PortProperty_Valid@F6830
 22736  0156E0  6EF6               	movwf	tblptrl,c
 22737  0156E2                     	if	1	;There is more than 1 active tblptr byte
 22738  0156E2  0EFC               	movlw	high PortProperty_Valid@F6830
 22739  0156E4  6EF7               	movwf	tblptrh,c
 22740  0156E6                     	endif
 22741  0156E6                     	if	1	;There are 3 active tblptr bytes
 22742  0156E6  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 22743  0156E8  6EF8               	movwf	tblptru,c
 22744  0156EA                     	endif
 22745  0156EA  EE20  F075         	lfsr	2,PortProperty_Valid@Errors
 22746  0156EE  0E0F               	movlw	15
 22747  0156F0                     u9030:
 22748  0156F0  0009               	tblrd		*+
 22749  0156F2  CFF5 FFDE          	movff	tablat,postinc2
 22750  0156F6  06E8               	decf	wreg,f,c
 22751  0156F8  E2FB               	bc	u9030
 22752                           
 22753                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 22754  0156FA  C06F  F06C         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 22755  0156FE  C070  F06D         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 22756  015702  C072  F06E         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 22757  015706  EC1E  F0B2         	call	_Word_GetPair	;wreg free
 22758  01570A  0100               	movlb	0	; () banked
 22759  01570C  6F85               	movwf	PortProperty_Valid@Pair& (0+255),b
 22760                           
 22761                           ; BSR set to: 0
 22762                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 22763  01570E  0E04               	movlw	4
 22764  015710  0100               	movlb	0	; () banked
 22765  015712  6171               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 22766  015714  D020               	goto	l819
 22767                           
 22768                           ; BSR set to: 0
 22769  015716  0E04               	movlw	4
 22770  015718  0100               	movlb	0	; () banked
 22771  01571A  6185               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 22772  01571C  D01C               	goto	l819
 22773                           
 22774                           ; BSR set to: 0
 22775                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 22776  01571E  0100               	movlb	0	; () banked
 22777  015720  5171               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 22778  015722  0D04               	mullw	4
 22779  015724  0E75               	movlw	low PortProperty_Valid@Errors
 22780  015726  0100               	movlb	0	; () banked
 22781  015728  6F73               	movwf	??_PortProperty_Valid& (0+255),b
 22782  01572A  0E00               	movlw	high PortProperty_Valid@Errors
 22783  01572C  0100               	movlb	0	; () banked
 22784  01572E  6F74               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 22785  015730  50F3               	movf	prodl,w,c
 22786  015732  0100               	movlb	0	; () banked
 22787  015734  2773               	addwf	??_PortProperty_Valid& (0+255),f,b
 22788  015736  50F4               	movf	prodh,w,c
 22789  015738  0100               	movlb	0	; () banked
 22790  01573A  2374               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 22791  01573C  0100               	movlb	0	; () banked
 22792  01573E  5185               	movf	PortProperty_Valid@Pair& (0+255),w,b
 22793  015740  0D01               	mullw	1
 22794  015742  50F3               	movf	prodl,w,c
 22795  015744  0100               	movlb	0	; () banked
 22796  015746  2573               	addwf	??_PortProperty_Valid& (0+255),w,b
 22797  015748  6ED9               	movwf	fsr2l,c
 22798  01574A  50F4               	movf	prodh,w,c
 22799  01574C  0100               	movlb	0	; () banked
 22800  01574E  2174               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 22801  015750  6EDA               	movwf	fsr2h,c
 22802  015752  50DF               	movf	indf2,w,c
 22803                           
 22804                           ; BSR set to: 0
 22805  015754  0012               	return	
 22806  015756                     l819:
 22807                           
 22808                           ; BSR set to: 0
 22809                           ;Types.c: 237: return ePinErrorState;
 22810                           
 22811                           ; BSR set to: 0
 22812  015756  0E05               	movlw	5
 22813  015758  0012               	return	
 22814  01575A                     __end_of_PortProperty_Valid:
 22815                           	opt stack 0
 22816                           tosu	equ	0xFFF
 22817                           tosh	equ	0xFFE
 22818                           tosl	equ	0xFFD
 22819                           pclath	equ	0xFFA
 22820                           tblptru	equ	0xFF8
 22821                           tblptrh	equ	0xFF7
 22822                           tblptrl	equ	0xFF6
 22823                           tablat	equ	0xFF5
 22824                           prodh	equ	0xFF4
 22825                           prodl	equ	0xFF3
 22826                           intcon	equ	0xFF2
 22827                           postinc0	equ	0xFEE
 22828                           wreg	equ	0xFE8
 22829                           indf1	equ	0xFE7
 22830                           postdec1	equ	0xFE5
 22831                           fsr1h	equ	0xFE2
 22832                           fsr1l	equ	0xFE1
 22833                           indf2	equ	0xFDF
 22834                           postinc2	equ	0xFDE
 22835                           postdec2	equ	0xFDD
 22836                           plusw2	equ	0xFDB
 22837                           fsr2h	equ	0xFDA
 22838                           fsr2l	equ	0xFD9
 22839                           status	equ	0xFD8
 22840                           
 22841 ;; *************** function _Word_GetPair *****************
 22842 ;; Defined at:
 22843 ;;		line 156 in file "Library/Types.c"
 22844 ;; Parameters:    Size  Location     Type
 22845 ;;  pInput          2   12[BANK0 ] PTR struct Word
 22846 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22847 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22848 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22849 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22850 ;;  pPair           1   14[BANK0 ] unsigned char 
 22851 ;; Auto vars:     Size  Location     Type
 22852 ;;		None
 22853 ;; Return value:  Size  Location     Type
 22854 ;;                  1    wreg      unsigned char 
 22855 ;; Registers used:
 22856 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22857 ;; Tracked objects:
 22858 ;;		On entry : 0/0
 22859 ;;		On exit  : 0/0
 22860 ;;		Unchanged: 0/0
 22861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22862 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;Total ram usage:        3 bytes
 22867 ;; Hardware stack levels used:    1
 22868 ;; Hardware stack levels required when called:    9
 22869 ;; This function calls:
 22870 ;;		_Byte_GetPair
 22871 ;; This function is called by:
 22872 ;;		_Port_Init
 22873 ;;		_Port_SetPin
 22874 ;;		_Port_Set
 22875 ;;		_PortProperty_Valid
 22876 ;;		_Port_SetPair
 22877 ;;		_Port_SetQuad
 22878 ;; This function uses a non-reentrant model
 22879 ;;
 22880                           
 22881                           	psect	text110
 22882  01643C                     __ptext110:
 22883                           	opt stack 0
 22884  01643C                     _Word_GetPair:
 22885                           	opt stack 18
 22886                           
 22887                           ;Types.c: 158: if (pPair >= 4)
 22888                           
 22889                           ; BSR set to: 0
 22890                           ;incstack = 0
 22891  01643C  0E03               	movlw	3
 22892  01643E  0100               	movlb	0	; () banked
 22893  016440  656E               	cpfsgt	Word_GetPair@pPair& (0+255),b
 22894  016442  D012               	goto	l781
 22895                           
 22896                           ; BSR set to: 0
 22897                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 22898  016444  0E01               	movlw	1
 22899  016446  0100               	movlb	0	; () banked
 22900  016448  256C               	addwf	Word_GetPair@pInput& (0+255),w,b
 22901  01644A  0100               	movlb	0	; () banked
 22902  01644C  6F69               	movwf	Byte_GetPair@pInput& (0+255),b
 22903  01644E  0E00               	movlw	0
 22904  016450  0100               	movlb	0	; () banked
 22905  016452  216D               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 22906  016454  0100               	movlb	0	; () banked
 22907  016456  6F6A               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 22908  016458  0100               	movlb	0	; () banked
 22909  01645A  516E               	movf	Word_GetPair@pPair& (0+255),w,b
 22910  01645C  0FFC               	addlw	252
 22911  01645E  0100               	movlb	0	; () banked
 22912  016460  6F6B               	movwf	Byte_GetPair@pPair& (0+255),b
 22913  016462  EC41  F0B4         	call	_Byte_GetPair	;wreg free
 22914  016466  0012               	return	
 22915  016468                     l781:
 22916                           
 22917                           ;Types.c: 160: else
 22918                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 22919  016468  C06C  F069         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 22920  01646C  C06D  F06A         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 22921  016470  C06E  F06B         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 22922  016474  EC41  F0B4         	call	_Byte_GetPair	;wreg free
 22923  016478  0012               	return	
 22924  01647A                     __end_of_Word_GetPair:
 22925                           	opt stack 0
 22926                           tosu	equ	0xFFF
 22927                           tosh	equ	0xFFE
 22928                           tosl	equ	0xFFD
 22929                           pclath	equ	0xFFA
 22930                           tblptru	equ	0xFF8
 22931                           tblptrh	equ	0xFF7
 22932                           tblptrl	equ	0xFF6
 22933                           tablat	equ	0xFF5
 22934                           prodh	equ	0xFF4
 22935                           prodl	equ	0xFF3
 22936                           intcon	equ	0xFF2
 22937                           postinc0	equ	0xFEE
 22938                           wreg	equ	0xFE8
 22939                           indf1	equ	0xFE7
 22940                           postdec1	equ	0xFE5
 22941                           fsr1h	equ	0xFE2
 22942                           fsr1l	equ	0xFE1
 22943                           indf2	equ	0xFDF
 22944                           postinc2	equ	0xFDE
 22945                           postdec2	equ	0xFDD
 22946                           plusw2	equ	0xFDB
 22947                           fsr2h	equ	0xFDA
 22948                           fsr2l	equ	0xFD9
 22949                           status	equ	0xFD8
 22950                           
 22951 ;; *************** function _Byte_GetPair *****************
 22952 ;; Defined at:
 22953 ;;		line 87 in file "Library/Types.c"
 22954 ;; Parameters:    Size  Location     Type
 22955 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 22956 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22957 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22958 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22959 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22960 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22961 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22962 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22963 ;;		 -> NULL(0), 
 22964 ;;  pPair           1   11[BANK0 ] unsigned char 
 22965 ;; Auto vars:     Size  Location     Type
 22966 ;;		None
 22967 ;; Return value:  Size  Location     Type
 22968 ;;                  1    wreg      unsigned char 
 22969 ;; Registers used:
 22970 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22971 ;; Tracked objects:
 22972 ;;		On entry : 0/0
 22973 ;;		On exit  : 0/0
 22974 ;;		Unchanged: 0/0
 22975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22976 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22979 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22980 ;;Total ram usage:        3 bytes
 22981 ;; Hardware stack levels used:    1
 22982 ;; Hardware stack levels required when called:    8
 22983 ;; This function calls:
 22984 ;;		_Byte_GetZone
 22985 ;; This function is called by:
 22986 ;;		_Word_GetPair
 22987 ;; This function uses a non-reentrant model
 22988 ;;
 22989                           
 22990                           	psect	text111
 22991  016882                     __ptext111:
 22992                           	opt stack 0
 22993  016882                     _Byte_GetPair:
 22994                           	opt stack 18
 22995                           
 22996                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22997                           
 22998                           ;incstack = 0
 22999  016882  C069  F060         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 23000  016886  C06A  F061         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 23001  01688A  0E04               	movlw	4
 23002  01688C  0100               	movlb	0	; () banked
 23003  01688E  6F62               	movwf	Byte_GetZone@pMax& (0+255),b
 23004  016890  C06B  F063         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 23005  016894  0E02               	movlw	2
 23006  016896  0100               	movlb	0	; () banked
 23007  016898  6F64               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 23008  01689A  EC39  F0A9         	call	_Byte_GetZone	;wreg free
 23009  01689E  0012               	return	
 23010  0168A0                     __end_of_Byte_GetPair:
 23011                           	opt stack 0
 23012                           tosu	equ	0xFFF
 23013                           tosh	equ	0xFFE
 23014                           tosl	equ	0xFFD
 23015                           pclath	equ	0xFFA
 23016                           tblptru	equ	0xFF8
 23017                           tblptrh	equ	0xFF7
 23018                           tblptrl	equ	0xFF6
 23019                           tablat	equ	0xFF5
 23020                           prodh	equ	0xFF4
 23021                           prodl	equ	0xFF3
 23022                           intcon	equ	0xFF2
 23023                           postinc0	equ	0xFEE
 23024                           wreg	equ	0xFE8
 23025                           indf1	equ	0xFE7
 23026                           postdec1	equ	0xFE5
 23027                           fsr1h	equ	0xFE2
 23028                           fsr1l	equ	0xFE1
 23029                           indf2	equ	0xFDF
 23030                           postinc2	equ	0xFDE
 23031                           postdec2	equ	0xFDD
 23032                           plusw2	equ	0xFDB
 23033                           fsr2h	equ	0xFDA
 23034                           fsr2l	equ	0xFD9
 23035                           status	equ	0xFD8
 23036                           
 23037 ;; *************** function _Byte_GetZone *****************
 23038 ;; Defined at:
 23039 ;;		line 64 in file "Library/Types.c"
 23040 ;; Parameters:    Size  Location     Type
 23041 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23042 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23043 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23044 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23045 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23046 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23047 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23048 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23049 ;;		 -> NULL(0), 
 23050 ;;  pMax            1    2[BANK0 ] unsigned char 
 23051 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23052 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23053 ;; Auto vars:     Size  Location     Type
 23054 ;;  Output          1    8[BANK0 ] unsigned char 
 23055 ;;  Offset          1    7[BANK0 ] unsigned char 
 23056 ;;  MASK            1    6[BANK0 ] unsigned char 
 23057 ;; Return value:  Size  Location     Type
 23058 ;;                  1    wreg      unsigned char 
 23059 ;; Registers used:
 23060 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23061 ;; Tracked objects:
 23062 ;;		On entry : 0/0
 23063 ;;		On exit  : 0/0
 23064 ;;		Unchanged: 0/0
 23065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23066 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23067 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23069 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23070 ;;Total ram usage:        9 bytes
 23071 ;; Hardware stack levels used:    1
 23072 ;; Hardware stack levels required when called:    7
 23073 ;; This function calls:
 23074 ;;		Nothing
 23075 ;; This function is called by:
 23076 ;;		_Byte_GetPair
 23077 ;;		_Byte_GetTriple
 23078 ;;		_Byte_GetQuad
 23079 ;; This function uses a non-reentrant model
 23080 ;;
 23081                           
 23082                           	psect	text112
 23083  015272                     __ptext112:
 23084                           	opt stack 0
 23085  015272                     _Byte_GetZone:
 23086                           	opt stack 18
 23087                           
 23088                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23089                           
 23090                           ;incstack = 0
 23091  015272  C060  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 23092  015276  C061  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 23093  01527A  0E00               	movlw	low (__mediumconst shr (0+16))
 23094  01527C  6EF8               	movwf	tblptru,c
 23095  01527E  0E0F               	movlw	(high __ramtop+-1)
 23096  015280  64F7               	cpfsgt	tblptrh,c
 23097  015282  D003               	bra	u8997
 23098  015284  0008               	tblrd		*
 23099  015286  50F5               	movf	tablat,w,c
 23100  015288  D005               	bra	u8990
 23101  01528A                     u8997:
 23102  01528A  CFF6 FFE9          	movff	tblptrl,fsr0l
 23103  01528E  CFF7 FFEA          	movff	tblptrh,fsr0h
 23104  015292  50EF               	movf	indf0,w,c
 23105  015294                     u8990:
 23106  015294  0100               	movlb	0	; () banked
 23107  015296  6F68               	movwf	Byte_GetZone@Output& (0+255),b
 23108                           
 23109                           ; BSR set to: 0
 23110                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23111  015298  0100               	movlb	0	; () banked
 23112  01529A  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 23113  01529C  0D01               	mullw	1
 23114  01529E  0E13               	movlw	low _MASKS
 23115  0152A0  24F3               	addwf	prodl,w,c
 23116  0152A2  6EF6               	movwf	tblptrl,c
 23117  0152A4  0EFD               	movlw	high _MASKS
 23118  0152A6  20F4               	addwfc	prodh,w,c
 23119  0152A8  6EF7               	movwf	tblptrh,c
 23120  0152AA                     	if	1	;There are 3 active tblptr bytes
 23121  0152AA  6AF8               	clrf	tblptru,c
 23122  0152AC  0E00               	movlw	low (__mediumconst shr (0+16))
 23123  0152AE  22F8               	addwfc	tblptru,f,c
 23124  0152B0                     	endif
 23125  0152B0  0008               	tblrd		*
 23126  0152B2  CFF5 F066          	movff	tablat,Byte_GetZone@MASK
 23127                           
 23128                           ; BSR set to: 0
 23129                           ;Types.c: 68: UINT8 Offset = 0;
 23130  0152B6  0E00               	movlw	0
 23131  0152B8  0100               	movlb	0	; () banked
 23132  0152BA  6F67               	movwf	Byte_GetZone@Offset& (0+255),b
 23133                           
 23134                           ;Types.c: 70: while (pChunk >= pMax)
 23135  0152BC  D006               	goto	l732
 23136  0152BE                     
 23137                           ; BSR set to: 0
 23138                           ;Types.c: 71: {
 23139                           ;Types.c: 72: pChunk -= pMax;
 23140                           
 23141                           ; BSR set to: 0
 23142  0152BE  0100               	movlb	0	; () banked
 23143  0152C0  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 23144  0152C2  0100               	movlb	0	; () banked
 23145  0152C4  5F63               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 23146                           
 23147                           ; BSR set to: 0
 23148                           ;Types.c: 73: Offset += 1;
 23149  0152C6  0100               	movlb	0	; () banked
 23150  0152C8  2B67               	incf	Byte_GetZone@Offset& (0+255),f,b
 23151  0152CA                     l732:
 23152                           
 23153                           ; BSR set to: 0
 23154                           
 23155                           ; BSR set to: 0
 23156  0152CA  0100               	movlb	0	; () banked
 23157  0152CC  5162               	movf	Byte_GetZone@pMax& (0+255),w,b
 23158  0152CE  0100               	movlb	0	; () banked
 23159  0152D0  5D63               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 23160  0152D2  B0D8               	btfsc	status,0,c
 23161  0152D4  D7F4               	goto	l733
 23162                           
 23163                           ; BSR set to: 0
 23164                           ;Types.c: 74: }
 23165                           ;Types.c: 75: pChunk *= pChunkSize;
 23166                           
 23167                           ; BSR set to: 0
 23168  0152D6  0100               	movlb	0	; () banked
 23169  0152D8  5164               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 23170  0152DA  0100               	movlb	0	; () banked
 23171  0152DC  0363               	mulwf	Byte_GetZone@pChunk& (0+255),b
 23172  0152DE  50F3               	movf	prodl,w,c
 23173  0152E0  6F63               	movwf	Byte_GetZone@pChunk& (0+255),b
 23174                           
 23175                           ; BSR set to: 0
 23176                           ;Types.c: 76: pChunk += Offset;
 23177  0152E2  0100               	movlb	0	; () banked
 23178  0152E4  5167               	movf	Byte_GetZone@Offset& (0+255),w,b
 23179  0152E6  0100               	movlb	0	; () banked
 23180  0152E8  2763               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 23181                           
 23182                           ; BSR set to: 0
 23183                           ;Types.c: 78: Output >>= pChunk;
 23184  0152EA  0100               	movlb	0	; () banked
 23185  0152EC  2963               	incf	Byte_GetZone@pChunk& (0+255),w,b
 23186  0152EE  0100               	movlb	0	; () banked
 23187  0152F0  6F65               	movwf	??_Byte_GetZone& (0+255),b
 23188  0152F2  D003               	goto	u9010
 23189  0152F4                     u9015:
 23190  0152F4  0100               	movlb	0	; () banked
 23191  0152F6  90D8               	bcf	status,0,c
 23192  0152F8  3368               	rrcf	Byte_GetZone@Output& (0+255),f,b
 23193  0152FA                     u9010:
 23194  0152FA  0100               	movlb	0	; () banked
 23195  0152FC  2F65               	decfsz	??_Byte_GetZone& (0+255),f,b
 23196  0152FE  D7FA               	goto	u9015
 23197                           
 23198                           ;Types.c: 79: Output &= MASK;
 23199  015300  0100               	movlb	0	; () banked
 23200  015302  5166               	movf	Byte_GetZone@MASK& (0+255),w,b
 23201  015304  0100               	movlb	0	; () banked
 23202  015306  1768               	andwf	Byte_GetZone@Output& (0+255),f,b
 23203                           
 23204                           ; BSR set to: 0
 23205                           ;Types.c: 80: return Output;
 23206  015308  0100               	movlb	0	; () banked
 23207  01530A  5168               	movf	Byte_GetZone@Output& (0+255),w,b
 23208  01530C  0012               	return	
 23209  01530E                     __end_of_Byte_GetZone:
 23210                           	opt stack 0
 23211                           tosu	equ	0xFFF
 23212                           tosh	equ	0xFFE
 23213                           tosl	equ	0xFFD
 23214                           pclath	equ	0xFFA
 23215                           tblptru	equ	0xFF8
 23216                           tblptrh	equ	0xFF7
 23217                           tblptrl	equ	0xFF6
 23218                           tablat	equ	0xFF5
 23219                           prodh	equ	0xFF4
 23220                           prodl	equ	0xFF3
 23221                           intcon	equ	0xFF2
 23222                           indf0	equ	0xFEF
 23223                           postinc0	equ	0xFEE
 23224                           fsr0h	equ	0xFEA
 23225                           fsr0l	equ	0xFE9
 23226                           wreg	equ	0xFE8
 23227                           indf1	equ	0xFE7
 23228                           postdec1	equ	0xFE5
 23229                           fsr1h	equ	0xFE2
 23230                           fsr1l	equ	0xFE1
 23231                           indf2	equ	0xFDF
 23232                           postinc2	equ	0xFDE
 23233                           postdec2	equ	0xFDD
 23234                           plusw2	equ	0xFDB
 23235                           fsr2h	equ	0xFDA
 23236                           fsr2l	equ	0xFD9
 23237                           status	equ	0xFD8
 23238                           
 23239 ;; *************** function _Byte_SetQuad *****************
 23240 ;; Defined at:
 23241 ;;		line 101 in file "Library/Types.c"
 23242 ;; Parameters:    Size  Location     Type
 23243 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23244 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23245 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23246 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23247 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23248 ;;		 -> NULL(0), 
 23249 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23250 ;;  pValue          1   14[BANK0 ] unsigned char 
 23251 ;; Auto vars:     Size  Location     Type
 23252 ;;		None
 23253 ;; Return value:  Size  Location     Type
 23254 ;;                  1    wreg      void 
 23255 ;; Registers used:
 23256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23257 ;; Tracked objects:
 23258 ;;		On entry : 0/0
 23259 ;;		On exit  : 0/0
 23260 ;;		Unchanged: 0/0
 23261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23262 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23265 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23266 ;;Total ram usage:        4 bytes
 23267 ;; Hardware stack levels used:    1
 23268 ;; Hardware stack levels required when called:    8
 23269 ;; This function calls:
 23270 ;;		_Byte_SetZone
 23271 ;; This function is called by:
 23272 ;;		_Port_SetQuadType
 23273 ;;		_SPI_Init
 23274 ;;		_SPI_MinSpeed
 23275 ;;		_SPI_MaxSpeed
 23276 ;;		_Port_SetQuad
 23277 ;;		_Word_SetQuad
 23278 ;;		_I2C_Init
 23279 ;; This function uses a non-reentrant model
 23280 ;;
 23281                           
 23282                           	psect	text113
 23283  0167A8                     __ptext113:
 23284                           	opt stack 0
 23285  0167A8                     _Byte_SetQuad:
 23286                           	opt stack 20
 23287                           
 23288                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23289                           
 23290                           ; BSR set to: 0
 23291                           ;incstack = 0
 23292  0167A8  C06B  F060         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23293  0167AC  C06C  F061         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23294  0167B0  0E02               	movlw	2
 23295  0167B2  0100               	movlb	0	; () banked
 23296  0167B4  6F62               	movwf	Byte_SetZone@pMax& (0+255),b
 23297  0167B6  C06D  F063         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23298  0167BA  0E04               	movlw	4
 23299  0167BC  0100               	movlb	0	; () banked
 23300  0167BE  6F64               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23301  0167C0  C06E  F065         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23302  0167C4  EC9A  F0A5         	call	_Byte_SetZone	;wreg free
 23303  0167C8  0012               	return		;funcret
 23304  0167CA                     __end_of_Byte_SetQuad:
 23305                           	opt stack 0
 23306                           tosu	equ	0xFFF
 23307                           tosh	equ	0xFFE
 23308                           tosl	equ	0xFFD
 23309                           pclath	equ	0xFFA
 23310                           tblptru	equ	0xFF8
 23311                           tblptrh	equ	0xFF7
 23312                           tblptrl	equ	0xFF6
 23313                           tablat	equ	0xFF5
 23314                           prodh	equ	0xFF4
 23315                           prodl	equ	0xFF3
 23316                           intcon	equ	0xFF2
 23317                           indf0	equ	0xFEF
 23318                           postinc0	equ	0xFEE
 23319                           fsr0h	equ	0xFEA
 23320                           fsr0l	equ	0xFE9
 23321                           wreg	equ	0xFE8
 23322                           indf1	equ	0xFE7
 23323                           postdec1	equ	0xFE5
 23324                           fsr1h	equ	0xFE2
 23325                           fsr1l	equ	0xFE1
 23326                           indf2	equ	0xFDF
 23327                           postinc2	equ	0xFDE
 23328                           postdec2	equ	0xFDD
 23329                           plusw2	equ	0xFDB
 23330                           fsr2h	equ	0xFDA
 23331                           fsr2l	equ	0xFD9
 23332                           status	equ	0xFD8
 23333                           
 23334 ;; *************** function _Byte_SetZone *****************
 23335 ;; Defined at:
 23336 ;;		line 47 in file "Library/Types.c"
 23337 ;; Parameters:    Size  Location     Type
 23338 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23339 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23340 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23341 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23342 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23343 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23344 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23345 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23346 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23347 ;;  pMax            1    2[BANK0 ] unsigned char 
 23348 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23349 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23350 ;;  pValue          1    5[BANK0 ] unsigned char 
 23351 ;; Auto vars:     Size  Location     Type
 23352 ;;  MASK            1   10[BANK0 ] unsigned char 
 23353 ;;  Offset          1    9[BANK0 ] unsigned char 
 23354 ;; Return value:  Size  Location     Type
 23355 ;;                  1    wreg      void 
 23356 ;; Registers used:
 23357 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23358 ;; Tracked objects:
 23359 ;;		On entry : 0/0
 23360 ;;		On exit  : 0/0
 23361 ;;		Unchanged: 0/0
 23362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23363 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23365 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23366 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23367 ;;Total ram usage:       11 bytes
 23368 ;; Hardware stack levels used:    1
 23369 ;; Hardware stack levels required when called:    7
 23370 ;; This function calls:
 23371 ;;		Nothing
 23372 ;; This function is called by:
 23373 ;;		_Byte_SetPair
 23374 ;;		_Byte_SetQuad
 23375 ;;		_Byte_SetTriple
 23376 ;; This function uses a non-reentrant model
 23377 ;;
 23378                           
 23379                           	psect	text114
 23380  014B34                     __ptext114:
 23381                           	opt stack 0
 23382  014B34                     _Byte_SetZone:
 23383                           	opt stack 19
 23384                           
 23385                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23386                           
 23387                           ;incstack = 0
 23388  014B34  0100               	movlb	0	; () banked
 23389  014B36  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23390  014B38  0D01               	mullw	1
 23391  014B3A  0E13               	movlw	low _MASKS
 23392  014B3C  24F3               	addwf	prodl,w,c
 23393  014B3E  6EF6               	movwf	tblptrl,c
 23394  014B40  0EFD               	movlw	high _MASKS
 23395  014B42  20F4               	addwfc	prodh,w,c
 23396  014B44  6EF7               	movwf	tblptrh,c
 23397  014B46                     	if	1	;There are 3 active tblptr bytes
 23398  014B46  6AF8               	clrf	tblptru,c
 23399  014B48  0E00               	movlw	low (__mediumconst shr (0+16))
 23400  014B4A  22F8               	addwfc	tblptru,f,c
 23401  014B4C                     	endif
 23402  014B4C  0008               	tblrd		*
 23403  014B4E  CFF5 F06A          	movff	tablat,Byte_SetZone@MASK
 23404                           
 23405                           ; BSR set to: 0
 23406                           ;Types.c: 50: UINT8 Offset = 0;
 23407  014B52  0E00               	movlw	0
 23408  014B54  0100               	movlb	0	; () banked
 23409  014B56  6F69               	movwf	Byte_SetZone@Offset& (0+255),b
 23410                           
 23411                           ;Types.c: 52: while (pChunk >= pMax)
 23412  014B58  D006               	goto	l726
 23413  014B5A                     
 23414                           ; BSR set to: 0
 23415                           ;Types.c: 53: {
 23416                           ;Types.c: 54: pChunk -= pMax;
 23417                           
 23418                           ; BSR set to: 0
 23419  014B5A  0100               	movlb	0	; () banked
 23420  014B5C  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23421  014B5E  0100               	movlb	0	; () banked
 23422  014B60  5F63               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23423                           
 23424                           ; BSR set to: 0
 23425                           ;Types.c: 55: Offset += 1;
 23426  014B62  0100               	movlb	0	; () banked
 23427  014B64  2B69               	incf	Byte_SetZone@Offset& (0+255),f,b
 23428  014B66                     l726:
 23429                           
 23430                           ; BSR set to: 0
 23431                           
 23432                           ; BSR set to: 0
 23433  014B66  0100               	movlb	0	; () banked
 23434  014B68  5162               	movf	Byte_SetZone@pMax& (0+255),w,b
 23435  014B6A  0100               	movlb	0	; () banked
 23436  014B6C  5D63               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23437  014B6E  B0D8               	btfsc	status,0,c
 23438  014B70  D7F4               	goto	l727
 23439                           
 23440                           ; BSR set to: 0
 23441                           ;Types.c: 56: }
 23442                           ;Types.c: 57: pChunk *= pChunkSize;
 23443                           
 23444                           ; BSR set to: 0
 23445  014B72  0100               	movlb	0	; () banked
 23446  014B74  5164               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23447  014B76  0100               	movlb	0	; () banked
 23448  014B78  0363               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23449  014B7A  50F3               	movf	prodl,w,c
 23450  014B7C  6F63               	movwf	Byte_SetZone@pChunk& (0+255),b
 23451                           
 23452                           ; BSR set to: 0
 23453                           ;Types.c: 58: pChunk += Offset;
 23454  014B7E  0100               	movlb	0	; () banked
 23455  014B80  5169               	movf	Byte_SetZone@Offset& (0+255),w,b
 23456  014B82  0100               	movlb	0	; () banked
 23457  014B84  2763               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23458                           
 23459                           ; BSR set to: 0
 23460                           ;Types.c: 60: pValue &= MASK;
 23461  014B86  0100               	movlb	0	; () banked
 23462  014B88  516A               	movf	Byte_SetZone@MASK& (0+255),w,b
 23463  014B8A  0100               	movlb	0	; () banked
 23464  014B8C  1765               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23465                           
 23466                           ; BSR set to: 0
 23467                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23468  014B8E  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23469  014B92  C06A  F067         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23470  014B96  0100               	movlb	0	; () banked
 23471  014B98  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23472  014B9A  D003               	goto	u9094
 23473  014B9C                     u9095:
 23474  014B9C  0100               	movlb	0	; () banked
 23475  014B9E  90D8               	bcf	status,0,c
 23476  014BA0  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23477  014BA2                     u9094:
 23478  014BA2  0100               	movlb	0	; () banked
 23479  014BA4  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23480  014BA6  D7FA               	goto	u9095
 23481  014BA8  0100               	movlb	0	; () banked
 23482  014BAA  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23483  014BAC  0AFF               	xorlw	255
 23484  014BAE  0100               	movlb	0	; () banked
 23485  014BB0  6F68               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23486  014BB2  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23487  014BB6  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23488  014BBA  0100               	movlb	0	; () banked
 23489  014BBC  5168               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23490  014BBE  16DF               	andwf	indf2,f,c
 23491                           
 23492                           ; BSR set to: 0
 23493                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23494  014BC0  C063  F066         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23495  014BC4  C065  F067         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23496  014BC8  0100               	movlb	0	; () banked
 23497  014BCA  2B66               	incf	??_Byte_SetZone& (0+255),f,b
 23498  014BCC  D003               	goto	u9104
 23499  014BCE                     u9105:
 23500  014BCE  0100               	movlb	0	; () banked
 23501  014BD0  90D8               	bcf	status,0,c
 23502  014BD2  3767               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23503  014BD4                     u9104:
 23504  014BD4  0100               	movlb	0	; () banked
 23505  014BD6  2F66               	decfsz	??_Byte_SetZone& (0+255),f,b
 23506  014BD8  D7FA               	goto	u9105
 23507  014BDA  C060  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23508  014BDE  C061  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23509  014BE2  0100               	movlb	0	; () banked
 23510  014BE4  5167               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23511  014BE6  12DF               	iorwf	indf2,f,c
 23512                           
 23513                           ; BSR set to: 0
 23514  014BE8  0012               	return		;funcret
 23515  014BEA                     __end_of_Byte_SetZone:
 23516                           	opt stack 0
 23517                           tosu	equ	0xFFF
 23518                           tosh	equ	0xFFE
 23519                           tosl	equ	0xFFD
 23520                           pclath	equ	0xFFA
 23521                           tblptru	equ	0xFF8
 23522                           tblptrh	equ	0xFF7
 23523                           tblptrl	equ	0xFF6
 23524                           tablat	equ	0xFF5
 23525                           prodh	equ	0xFF4
 23526                           prodl	equ	0xFF3
 23527                           intcon	equ	0xFF2
 23528                           indf0	equ	0xFEF
 23529                           postinc0	equ	0xFEE
 23530                           fsr0h	equ	0xFEA
 23531                           fsr0l	equ	0xFE9
 23532                           wreg	equ	0xFE8
 23533                           indf1	equ	0xFE7
 23534                           postdec1	equ	0xFE5
 23535                           fsr1h	equ	0xFE2
 23536                           fsr1l	equ	0xFE1
 23537                           indf2	equ	0xFDF
 23538                           postinc2	equ	0xFDE
 23539                           postdec2	equ	0xFDD
 23540                           plusw2	equ	0xFDB
 23541                           fsr2h	equ	0xFDA
 23542                           fsr2l	equ	0xFD9
 23543                           status	equ	0xFD8
 23544                           
 23545 ;; *************** function _FunctInitADC *****************
 23546 ;; Defined at:
 23547 ;;		line 31 in file "Functions.c"
 23548 ;; Parameters:    Size  Location     Type
 23549 ;;		None
 23550 ;; Auto vars:     Size  Location     Type
 23551 ;;		None
 23552 ;; Return value:  Size  Location     Type
 23553 ;;                  1    wreg      void 
 23554 ;; Registers used:
 23555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23556 ;; Tracked objects:
 23557 ;;		On entry : 0/0
 23558 ;;		On exit  : 0/0
 23559 ;;		Unchanged: 0/0
 23560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23565 ;;Total ram usage:        0 bytes
 23566 ;; Hardware stack levels used:    1
 23567 ;; Hardware stack levels required when called:   10
 23568 ;; This function calls:
 23569 ;;		_ADC_Init
 23570 ;;		_ADC_Sequence
 23571 ;; This function is called by:
 23572 ;;		_main
 23573 ;; This function uses a non-reentrant model
 23574 ;;
 23575                           
 23576                           	psect	text115
 23577  014BEA                     __ptext115:
 23578                           	opt stack 0
 23579  014BEA                     _FunctInitADC:
 23580                           	opt stack 20
 23581                           
 23582                           ;Functions.c: 33: ADC_Init(&ADC_AN0, eADC_Ch0);
 23583                           
 23584                           ; BSR set to: 0
 23585                           ;incstack = 0
 23586  014BEA  0ED4               	movlw	low _ADC_AN0
 23587  014BEC  0100               	movlb	0	; () banked
 23588  014BEE  6F64               	movwf	ADC_Init@pInput& (0+255),b
 23589  014BF0  0E01               	movlw	high _ADC_AN0
 23590  014BF2  0100               	movlb	0	; () banked
 23591  014BF4  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 23592  014BF6  0E00               	movlw	0
 23593  014BF8  0100               	movlb	0	; () banked
 23594  014BFA  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 23595  014BFC  ECAD  F0AB         	call	_ADC_Init	;wreg free
 23596                           
 23597                           ;Functions.c: 34: ADC_Init(&ADC_AN1, eADC_Ch1);
 23598  014C00  0ECF               	movlw	low _ADC_AN1
 23599  014C02  0100               	movlb	0	; () banked
 23600  014C04  6F64               	movwf	ADC_Init@pInput& (0+255),b
 23601  014C06  0E01               	movlw	high _ADC_AN1
 23602  014C08  0100               	movlb	0	; () banked
 23603  014C0A  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 23604  014C0C  0E01               	movlw	1
 23605  014C0E  0100               	movlb	0	; () banked
 23606  014C10  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 23607  014C12  ECAD  F0AB         	call	_ADC_Init	;wreg free
 23608                           
 23609                           ;Functions.c: 35: ADC_Init(&ADC_AN2, eADC_Ch2);
 23610  014C16  0ECA               	movlw	low _ADC_AN2
 23611  014C18  0100               	movlb	0	; () banked
 23612  014C1A  6F64               	movwf	ADC_Init@pInput& (0+255),b
 23613  014C1C  0E01               	movlw	high _ADC_AN2
 23614  014C1E  0100               	movlb	0	; () banked
 23615  014C20  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 23616  014C22  0E02               	movlw	2
 23617  014C24  0100               	movlb	0	; () banked
 23618  014C26  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 23619  014C28  ECAD  F0AB         	call	_ADC_Init	;wreg free
 23620                           
 23621                           ;Functions.c: 36: ADC_Init(&ADC_AN3, eADC_Ch3);
 23622  014C2C  0EC5               	movlw	low _ADC_AN3
 23623  014C2E  0100               	movlb	0	; () banked
 23624  014C30  6F64               	movwf	ADC_Init@pInput& (0+255),b
 23625  014C32  0E01               	movlw	high _ADC_AN3
 23626  014C34  0100               	movlb	0	; () banked
 23627  014C36  6F65               	movwf	(ADC_Init@pInput+1)& (0+255),b
 23628  014C38  0E03               	movlw	3
 23629  014C3A  0100               	movlb	0	; () banked
 23630  014C3C  6F66               	movwf	ADC_Init@pChannel& (0+255),b
 23631  014C3E  ECAD  F0AB         	call	_ADC_Init	;wreg free
 23632                           
 23633                           ;Functions.c: 39: ADC_Sequence(&ADC_AN0, &ADC_AN1);
 23634  014C42  0ED4               	movlw	low _ADC_AN0
 23635  014C44  0100               	movlb	0	; () banked
 23636  014C46  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 23637  014C48  0E01               	movlw	high _ADC_AN0
 23638  014C4A  0100               	movlb	0	; () banked
 23639  014C4C  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 23640  014C4E  0ECF               	movlw	low _ADC_AN1
 23641  014C50  0100               	movlb	0	; () banked
 23642  014C52  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 23643  014C54  0E01               	movlw	high _ADC_AN1
 23644  014C56  0100               	movlb	0	; () banked
 23645  014C58  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 23646  014C5A  EC3D  F0B1         	call	_ADC_Sequence	;wreg free
 23647                           
 23648                           ;Functions.c: 40: ADC_Sequence(&ADC_AN1, &ADC_AN2);
 23649  014C5E  0ECF               	movlw	low _ADC_AN1
 23650  014C60  0100               	movlb	0	; () banked
 23651  014C62  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 23652  014C64  0E01               	movlw	high _ADC_AN1
 23653  014C66  0100               	movlb	0	; () banked
 23654  014C68  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 23655  014C6A  0ECA               	movlw	low _ADC_AN2
 23656  014C6C  0100               	movlb	0	; () banked
 23657  014C6E  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 23658  014C70  0E01               	movlw	high _ADC_AN2
 23659  014C72  0100               	movlb	0	; () banked
 23660  014C74  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 23661  014C76  EC3D  F0B1         	call	_ADC_Sequence	;wreg free
 23662                           
 23663                           ;Functions.c: 41: ADC_Sequence(&ADC_AN2, &ADC_AN3);
 23664  014C7A  0ECA               	movlw	low _ADC_AN2
 23665  014C7C  0100               	movlb	0	; () banked
 23666  014C7E  6F60               	movwf	ADC_Sequence@pItemA& (0+255),b
 23667  014C80  0E01               	movlw	high _ADC_AN2
 23668  014C82  0100               	movlb	0	; () banked
 23669  014C84  6F61               	movwf	(ADC_Sequence@pItemA+1)& (0+255),b
 23670  014C86  0EC5               	movlw	low _ADC_AN3
 23671  014C88  0100               	movlb	0	; () banked
 23672  014C8A  6F62               	movwf	ADC_Sequence@pItemB& (0+255),b
 23673  014C8C  0E01               	movlw	high _ADC_AN3
 23674  014C8E  0100               	movlb	0	; () banked
 23675  014C90  6F63               	movwf	(ADC_Sequence@pItemB+1)& (0+255),b
 23676  014C92  EC3D  F0B1         	call	_ADC_Sequence	;wreg free
 23677  014C96  0012               	return		;funcret
 23678  014C98                     __end_of_FunctInitADC:
 23679                           	opt stack 0
 23680                           tosu	equ	0xFFF
 23681                           tosh	equ	0xFFE
 23682                           tosl	equ	0xFFD
 23683                           pclath	equ	0xFFA
 23684                           tblptru	equ	0xFF8
 23685                           tblptrh	equ	0xFF7
 23686                           tblptrl	equ	0xFF6
 23687                           tablat	equ	0xFF5
 23688                           prodh	equ	0xFF4
 23689                           prodl	equ	0xFF3
 23690                           intcon	equ	0xFF2
 23691                           indf0	equ	0xFEF
 23692                           postinc0	equ	0xFEE
 23693                           fsr0h	equ	0xFEA
 23694                           fsr0l	equ	0xFE9
 23695                           wreg	equ	0xFE8
 23696                           indf1	equ	0xFE7
 23697                           postdec1	equ	0xFE5
 23698                           fsr1h	equ	0xFE2
 23699                           fsr1l	equ	0xFE1
 23700                           indf2	equ	0xFDF
 23701                           postinc2	equ	0xFDE
 23702                           postdec2	equ	0xFDD
 23703                           plusw2	equ	0xFDB
 23704                           fsr2h	equ	0xFDA
 23705                           fsr2l	equ	0xFD9
 23706                           status	equ	0xFD8
 23707                           
 23708 ;; *************** function _ADC_Sequence *****************
 23709 ;; Defined at:
 23710 ;;		line 101 in file "Library/ADC.c"
 23711 ;; Parameters:    Size  Location     Type
 23712 ;;  pItemA          2    0[BANK0 ] PTR struct ADC
 23713 ;;		 -> ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23714 ;;  pItemB          2    2[BANK0 ] PTR struct ADC
 23715 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), 
 23716 ;; Auto vars:     Size  Location     Type
 23717 ;;		None
 23718 ;; Return value:  Size  Location     Type
 23719 ;;                  1    wreg      void 
 23720 ;; Registers used:
 23721 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23722 ;; Tracked objects:
 23723 ;;		On entry : 0/0
 23724 ;;		On exit  : 0/0
 23725 ;;		Unchanged: 0/0
 23726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23727 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23730 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23731 ;;Total ram usage:        4 bytes
 23732 ;; Hardware stack levels used:    1
 23733 ;; Hardware stack levels required when called:    7
 23734 ;; This function calls:
 23735 ;;		Nothing
 23736 ;; This function is called by:
 23737 ;;		_FunctInitADC
 23738 ;; This function uses a non-reentrant model
 23739 ;;
 23740                           
 23741                           	psect	text116
 23742  01627A                     __ptext116:
 23743                           	opt stack 0
 23744  01627A                     _ADC_Sequence:
 23745                           	opt stack 22
 23746                           
 23747                           ;ADC.c: 103: if(pItemA==(void*)0)
 23748                           
 23749                           ;incstack = 0
 23750  01627A  0100               	movlb	0	; () banked
 23751  01627C  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 23752  01627E  0100               	movlb	0	; () banked
 23753  016280  1161               	iorwf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 23754  016282  B4D8               	btfsc	status,2,c
 23755  016284  0012               	return	
 23756                           
 23757                           ; BSR set to: 0
 23758                           ;ADC.c: 105: if(pItemB==(void*)0)
 23759                           
 23760                           ; BSR set to: 0
 23761                           
 23762                           ; BSR set to: 0
 23763                           ;ADC.c: 104: return;
 23764  016286  0100               	movlb	0	; () banked
 23765  016288  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 23766  01628A  0100               	movlb	0	; () banked
 23767  01628C  1163               	iorwf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 23768  01628E  B4D8               	btfsc	status,2,c
 23769  016290  0012               	return	
 23770                           
 23771                           ; BSR set to: 0
 23772                           ;ADC.c: 109: pItemA->mNext = pItemB;
 23773                           
 23774                           ; BSR set to: 0
 23775                           
 23776                           ; BSR set to: 0
 23777                           ;ADC.c: 106: return;
 23778  016292  0100               	movlb	0	; () banked
 23779  016294  EE20 F003          	lfsr	2,3
 23780  016298  5160               	movf	ADC_Sequence@pItemA& (0+255),w,b
 23781  01629A  26D9               	addwf	fsr2l,f,c
 23782  01629C  5161               	movf	(ADC_Sequence@pItemA+1)& (0+255),w,b
 23783  01629E  22DA               	addwfc	fsr2h,f,c
 23784  0162A0  C062  FFDE         	movff	ADC_Sequence@pItemB,postinc2
 23785  0162A4  C063  FFDD         	movff	ADC_Sequence@pItemB+1,postdec2
 23786                           
 23787                           ;ADC.c: 110: pItemB->mNext = 0;
 23788  0162A8  0100               	movlb	0	; () banked
 23789  0162AA  EE20 F003          	lfsr	2,3
 23790  0162AE  5162               	movf	ADC_Sequence@pItemB& (0+255),w,b
 23791  0162B0  26D9               	addwf	fsr2l,f,c
 23792  0162B2  5163               	movf	(ADC_Sequence@pItemB+1)& (0+255),w,b
 23793  0162B4  22DA               	addwfc	fsr2h,f,c
 23794  0162B6  0E00               	movlw	0
 23795  0162B8  6EDE               	movwf	postinc2,c
 23796  0162BA  0E00               	movlw	0
 23797  0162BC  6EDD               	movwf	postdec2,c
 23798                           
 23799                           ; BSR set to: 0
 23800  0162BE  0012               	return		;funcret
 23801  0162C0                     __end_of_ADC_Sequence:
 23802                           	opt stack 0
 23803                           tosu	equ	0xFFF
 23804                           tosh	equ	0xFFE
 23805                           tosl	equ	0xFFD
 23806                           pclath	equ	0xFFA
 23807                           tblptru	equ	0xFF8
 23808                           tblptrh	equ	0xFF7
 23809                           tblptrl	equ	0xFF6
 23810                           tablat	equ	0xFF5
 23811                           prodh	equ	0xFF4
 23812                           prodl	equ	0xFF3
 23813                           intcon	equ	0xFF2
 23814                           indf0	equ	0xFEF
 23815                           postinc0	equ	0xFEE
 23816                           fsr0h	equ	0xFEA
 23817                           fsr0l	equ	0xFE9
 23818                           wreg	equ	0xFE8
 23819                           indf1	equ	0xFE7
 23820                           postdec1	equ	0xFE5
 23821                           fsr1h	equ	0xFE2
 23822                           fsr1l	equ	0xFE1
 23823                           indf2	equ	0xFDF
 23824                           postinc2	equ	0xFDE
 23825                           postdec2	equ	0xFDD
 23826                           plusw2	equ	0xFDB
 23827                           fsr2h	equ	0xFDA
 23828                           fsr2l	equ	0xFD9
 23829                           status	equ	0xFD8
 23830                           
 23831 ;; *************** function _ADC_Init *****************
 23832 ;; Defined at:
 23833 ;;		line 19 in file "Library/ADC.c"
 23834 ;; Parameters:    Size  Location     Type
 23835 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 23836 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23837 ;;  pChannel        1    6[BANK0 ] enum E6742
 23838 ;; Auto vars:     Size  Location     Type
 23839 ;;		None
 23840 ;; Return value:  Size  Location     Type
 23841 ;;                  1    wreg      void 
 23842 ;; Registers used:
 23843 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23844 ;; Tracked objects:
 23845 ;;		On entry : 0/0
 23846 ;;		On exit  : 0/0
 23847 ;;		Unchanged: 0/0
 23848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23849 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23852 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23853 ;;Total ram usage:        3 bytes
 23854 ;; Hardware stack levels used:    1
 23855 ;; Hardware stack levels required when called:    9
 23856 ;; This function calls:
 23857 ;;		_ADC_Calibrate
 23858 ;;		_ADC_ClockDivision
 23859 ;;		_ADC_ConversionTime
 23860 ;;		_ADC_SetChannel
 23861 ;;		_ADC_SetupIO
 23862 ;; This function is called by:
 23863 ;;		_FunctInitADC
 23864 ;; This function uses a non-reentrant model
 23865 ;;
 23866                           
 23867                           	psect	text117
 23868  01575A                     __ptext117:
 23869                           	opt stack 0
 23870  01575A                     _ADC_Init:
 23871                           	opt stack 20
 23872                           
 23873                           ;ADC.c: 21: if(pInput==(void*)0)
 23874                           
 23875                           ; BSR set to: 0
 23876                           ;incstack = 0
 23877  01575A  0100               	movlb	0	; () banked
 23878  01575C  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23879  01575E  0100               	movlb	0	; () banked
 23880  015760  1165               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 23881  015762  B4D8               	btfsc	status,2,c
 23882  015764  0012               	return	
 23883                           
 23884                           ; BSR set to: 0
 23885                           ;ADC.c: 25: lCurrent = pInput;
 23886                           
 23887                           ; BSR set to: 0
 23888                           
 23889                           ; BSR set to: 0
 23890                           ;ADC.c: 22: return;
 23891  015766  C064  F0DE         	movff	ADC_Init@pInput,_lCurrent
 23892  01576A  C065  F0DF         	movff	ADC_Init@pInput+1,_lCurrent+1
 23893                           
 23894                           ; BSR set to: 0
 23895                           ;ADC.c: 27: pInput->mChannel = pChannel;
 23896  01576E  C064  FFD9         	movff	ADC_Init@pInput,fsr2l
 23897  015772  C065  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 23898  015776  C066  FFDF         	movff	ADC_Init@pChannel,indf2
 23899                           
 23900                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 23901  01577A  0100               	movlb	0	; () banked
 23902  01577C  EE20 F003          	lfsr	2,3
 23903  015780  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23904  015782  26D9               	addwf	fsr2l,f,c
 23905  015784  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23906  015786  22DA               	addwfc	fsr2h,f,c
 23907  015788  0E00               	movlw	0
 23908  01578A  6EDE               	movwf	postinc2,c
 23909  01578C  0E00               	movlw	0
 23910  01578E  6EDD               	movwf	postdec2,c
 23911                           
 23912                           ;ADC.c: 29: pInput->mValue = 0;
 23913  015790  0100               	movlb	0	; () banked
 23914  015792  EE20 F001          	lfsr	2,1
 23915  015796  5164               	movf	ADC_Init@pInput& (0+255),w,b
 23916  015798  26D9               	addwf	fsr2l,f,c
 23917  01579A  5165               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 23918  01579C  22DA               	addwfc	fsr2h,f,c
 23919  01579E  0E00               	movlw	0
 23920  0157A0  6EDE               	movwf	postinc2,c
 23921  0157A2  0E00               	movlw	0
 23922  0157A4  6EDD               	movwf	postdec2,c
 23923                           
 23924                           ; BSR set to: 0
 23925                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 23926  0157A6  0100               	movlb	0	; () banked
 23927  0157A8  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 23928  0157AA  EC6D  F0B4         	call	_ADC_SetChannel
 23929                           
 23930                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 23931  0157AE  9EC2               	bcf	4034,7,c	;volatile
 23932                           
 23933                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 23934  0157B0  9CC2               	bcf	4034,6,c	;volatile
 23935                           
 23936                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 23937  0157B2  8EC1               	bsf	4033,7,c	;volatile
 23938                           
 23939                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 23940  0157B4  8CC1               	bsf	4033,6,c	;volatile
 23941                           
 23942                           ;ADC.c: 43: ADC_ConversionTime(12);
 23943  0157B6  0E0C               	movlw	12
 23944  0157B8  ECD3  F0B0         	call	_ADC_ConversionTime
 23945                           
 23946                           ;ADC.c: 47: ADC_ClockDivision(16);
 23947  0157BC  0E10               	movlw	16
 23948  0157BE  EC62  F0AA         	call	_ADC_ClockDivision
 23949                           
 23950                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 23951  0157C2  0100               	movlb	0	; () banked
 23952  0157C4  5166               	movf	ADC_Init@pChannel& (0+255),w,b
 23953  0157C6  ECE4  F0B2         	call	_ADC_SetupIO
 23954                           
 23955                           ;ADC.c: 58: ADC_Initialised = 1;
 23956  0157CA  0E01               	movlw	1
 23957  0157CC  6E31               	movwf	_ADC_Initialised,c
 23958                           
 23959                           ;ADC.c: 61: ADC_Calibrate();
 23960  0157CE  ECDC  F0B4         	call	_ADC_Calibrate	;wreg free
 23961  0157D2  0012               	return		;funcret
 23962  0157D4                     __end_of_ADC_Init:
 23963                           	opt stack 0
 23964                           tosu	equ	0xFFF
 23965                           tosh	equ	0xFFE
 23966                           tosl	equ	0xFFD
 23967                           pclath	equ	0xFFA
 23968                           tblptru	equ	0xFF8
 23969                           tblptrh	equ	0xFF7
 23970                           tblptrl	equ	0xFF6
 23971                           tablat	equ	0xFF5
 23972                           prodh	equ	0xFF4
 23973                           prodl	equ	0xFF3
 23974                           intcon	equ	0xFF2
 23975                           indf0	equ	0xFEF
 23976                           postinc0	equ	0xFEE
 23977                           fsr0h	equ	0xFEA
 23978                           fsr0l	equ	0xFE9
 23979                           wreg	equ	0xFE8
 23980                           indf1	equ	0xFE7
 23981                           postdec1	equ	0xFE5
 23982                           fsr1h	equ	0xFE2
 23983                           fsr1l	equ	0xFE1
 23984                           indf2	equ	0xFDF
 23985                           postinc2	equ	0xFDE
 23986                           postdec2	equ	0xFDD
 23987                           plusw2	equ	0xFDB
 23988                           fsr2h	equ	0xFDA
 23989                           fsr2l	equ	0xFD9
 23990                           status	equ	0xFD8
 23991                           
 23992 ;; *************** function _ADC_SetupIO *****************
 23993 ;; Defined at:
 23994 ;;		line 150 in file "Library/ADC.c"
 23995 ;; Parameters:    Size  Location     Type
 23996 ;;  pChannel        1    wreg     enum E6742
 23997 ;; Auto vars:     Size  Location     Type
 23998 ;;  pChannel        1    2[BANK0 ] enum E6742
 23999 ;;  MASK            1    3[BANK0 ] unsigned char 
 24000 ;; Return value:  Size  Location     Type
 24001 ;;                  1    wreg      void 
 24002 ;; Registers used:
 24003 ;;		wreg, status,2, status,0
 24004 ;; Tracked objects:
 24005 ;;		On entry : 0/0
 24006 ;;		On exit  : 0/0
 24007 ;;		Unchanged: 0/0
 24008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24010 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24011 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24012 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24013 ;;Total ram usage:        4 bytes
 24014 ;; Hardware stack levels used:    1
 24015 ;; Hardware stack levels required when called:    7
 24016 ;; This function calls:
 24017 ;;		Nothing
 24018 ;; This function is called by:
 24019 ;;		_ADC_Init
 24020 ;; This function uses a non-reentrant model
 24021 ;;
 24022                           
 24023                           	psect	text118
 24024  0165C8                     __ptext118:
 24025                           	opt stack 0
 24026  0165C8                     _ADC_SetupIO:
 24027                           	opt stack 21
 24028                           
 24029                           ;incstack = 0
 24030                           ;ADC_SetupIO@pChannel stored from wreg
 24031  0165C8  0100               	movlb	0	; () banked
 24032  0165CA  6F62               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24033                           
 24034                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24035  0165CC  C062  F060         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24036  0165D0  0E01               	movlw	1
 24037  0165D2  0100               	movlb	0	; () banked
 24038  0165D4  6F61               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24039  0165D6  0100               	movlb	0	; () banked
 24040  0165D8  2B60               	incf	??_ADC_SetupIO& (0+255),f,b
 24041  0165DA  D003               	goto	u10834
 24042  0165DC                     u10835:
 24043  0165DC  0100               	movlb	0	; () banked
 24044  0165DE  90D8               	bcf	status,0,c
 24045  0165E0  3761               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24046  0165E2                     u10834:
 24047  0165E2  0100               	movlb	0	; () banked
 24048  0165E4  2F60               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24049  0165E6  D7FA               	goto	u10835
 24050  0165E8  0100               	movlb	0	; () banked
 24051  0165EA  5161               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24052  0165EC  0AFF               	xorlw	255
 24053  0165EE  0100               	movlb	0	; () banked
 24054  0165F0  6F63               	movwf	ADC_SetupIO@MASK& (0+255),b
 24055                           
 24056                           ;ADC.c: 153: ANCON0 &= MASK;
 24057  0165F2  0100               	movlb	0	; () banked
 24058  0165F4  5163               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24059  0165F6  16C1               	andwf	4033,f,c	;volatile
 24060                           
 24061                           ; BSR set to: 0
 24062  0165F8  0012               	return		;funcret
 24063  0165FA                     __end_of_ADC_SetupIO:
 24064                           	opt stack 0
 24065                           tosu	equ	0xFFF
 24066                           tosh	equ	0xFFE
 24067                           tosl	equ	0xFFD
 24068                           pclath	equ	0xFFA
 24069                           tblptru	equ	0xFF8
 24070                           tblptrh	equ	0xFF7
 24071                           tblptrl	equ	0xFF6
 24072                           tablat	equ	0xFF5
 24073                           prodh	equ	0xFF4
 24074                           prodl	equ	0xFF3
 24075                           intcon	equ	0xFF2
 24076                           indf0	equ	0xFEF
 24077                           postinc0	equ	0xFEE
 24078                           fsr0h	equ	0xFEA
 24079                           fsr0l	equ	0xFE9
 24080                           wreg	equ	0xFE8
 24081                           indf1	equ	0xFE7
 24082                           postdec1	equ	0xFE5
 24083                           fsr1h	equ	0xFE2
 24084                           fsr1l	equ	0xFE1
 24085                           indf2	equ	0xFDF
 24086                           postinc2	equ	0xFDE
 24087                           postdec2	equ	0xFDD
 24088                           plusw2	equ	0xFDB
 24089                           fsr2h	equ	0xFDA
 24090                           fsr2l	equ	0xFD9
 24091                           status	equ	0xFD8
 24092                           
 24093 ;; *************** function _ADC_ConversionTime *****************
 24094 ;; Defined at:
 24095 ;;		line 199 in file "Library/ADC.c"
 24096 ;; Parameters:    Size  Location     Type
 24097 ;;  pCount          1    wreg     unsigned char 
 24098 ;; Auto vars:     Size  Location     Type
 24099 ;;  pCount          1    1[BANK0 ] unsigned char 
 24100 ;; Return value:  Size  Location     Type
 24101 ;;                  1    wreg      void 
 24102 ;; Registers used:
 24103 ;;		wreg, status,2, status,0
 24104 ;; Tracked objects:
 24105 ;;		On entry : 0/0
 24106 ;;		On exit  : 0/0
 24107 ;;		Unchanged: 0/0
 24108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24110 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24111 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24112 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24113 ;;Total ram usage:        2 bytes
 24114 ;; Hardware stack levels used:    1
 24115 ;; Hardware stack levels required when called:    7
 24116 ;; This function calls:
 24117 ;;		Nothing
 24118 ;; This function is called by:
 24119 ;;		_ADC_Init
 24120 ;; This function uses a non-reentrant model
 24121 ;;
 24122                           
 24123                           	psect	text119
 24124  0161A6                     __ptext119:
 24125                           	opt stack 0
 24126  0161A6                     _ADC_ConversionTime:
 24127                           	opt stack 21
 24128                           
 24129                           ; BSR set to: 0
 24130                           ;incstack = 0
 24131                           ;ADC_ConversionTime@pCount stored from wreg
 24132  0161A6  0100               	movlb	0	; () banked
 24133  0161A8  6F61               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24134                           
 24135                           ;ADC.c: 201: if (pCount == 10)
 24136  0161AA  0E0A               	movlw	10
 24137  0161AC  0100               	movlb	0	; () banked
 24138  0161AE  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24139  0161B0  B4D8               	btfsc	status,2,c
 24140  0161B2  D00A               	goto	u10800
 24141                           
 24142                           ; BSR set to: 0
 24143                           ;ADC.c: 203: else if (pCount == 14)
 24144                           
 24145                           ; BSR set to: 0
 24146                           
 24147                           ; BSR set to: 0
 24148                           ;ADC.c: 202: pCount -= 2;
 24149  0161B4  0E0E               	movlw	14
 24150  0161B6  0100               	movlb	0	; () banked
 24151  0161B8  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24152  0161BA  B4D8               	btfsc	status,2,c
 24153  0161BC  D005               	goto	u10800
 24154                           
 24155                           ; BSR set to: 0
 24156                           ;ADC.c: 205: else if (pCount == 18)
 24157                           
 24158                           ; BSR set to: 0
 24159                           
 24160                           ; BSR set to: 0
 24161                           ;ADC.c: 204: pCount -= 2;
 24162  0161BE  0E12               	movlw	18
 24163  0161C0  0100               	movlb	0	; () banked
 24164  0161C2  1961               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24165  0161C4  A4D8               	btfss	status,2,c
 24166  0161C6  D003               	goto	l1313
 24167  0161C8                     u10800:
 24168                           
 24169                           ; BSR set to: 0
 24170                           ;ADC.c: 206: pCount -= 2;
 24171  0161C8  0E02               	movlw	2
 24172  0161CA  0100               	movlb	0	; () banked
 24173  0161CC  5F61               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24174  0161CE                     l1313:
 24175                           
 24176                           ; BSR set to: 0
 24177                           ;ADC.c: 208: pCount <<= 1;
 24178                           
 24179                           ; BSR set to: 0
 24180                           
 24181                           ; BSR set to: 0
 24182  0161CE  0100               	movlb	0	; () banked
 24183  0161D0  90D8               	bcf	status,0,c
 24184  0161D2  3761               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24185                           
 24186                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24187  0161D4  C061  F060         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24188  0161D8  0100               	movlb	0	; () banked
 24189  0161DA  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24190  0161DC  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24191  0161DE  4760               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24192  0161E0  50C1               	movf	4033,w,c	;volatile
 24193  0161E2  0100               	movlb	0	; () banked
 24194  0161E4  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24195  0161E6  0BC7               	andlw	-57
 24196  0161E8  1960               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24197  0161EA  6EC1               	movwf	4033,c	;volatile
 24198                           
 24199                           ; BSR set to: 0
 24200  0161EC  0012               	return		;funcret
 24201  0161EE                     __end_of_ADC_ConversionTime:
 24202                           	opt stack 0
 24203                           tosu	equ	0xFFF
 24204                           tosh	equ	0xFFE
 24205                           tosl	equ	0xFFD
 24206                           pclath	equ	0xFFA
 24207                           tblptru	equ	0xFF8
 24208                           tblptrh	equ	0xFF7
 24209                           tblptrl	equ	0xFF6
 24210                           tablat	equ	0xFF5
 24211                           prodh	equ	0xFF4
 24212                           prodl	equ	0xFF3
 24213                           intcon	equ	0xFF2
 24214                           indf0	equ	0xFEF
 24215                           postinc0	equ	0xFEE
 24216                           fsr0h	equ	0xFEA
 24217                           fsr0l	equ	0xFE9
 24218                           wreg	equ	0xFE8
 24219                           indf1	equ	0xFE7
 24220                           postdec1	equ	0xFE5
 24221                           fsr1h	equ	0xFE2
 24222                           fsr1l	equ	0xFE1
 24223                           indf2	equ	0xFDF
 24224                           postinc2	equ	0xFDE
 24225                           postdec2	equ	0xFDD
 24226                           plusw2	equ	0xFDB
 24227                           fsr2h	equ	0xFDA
 24228                           fsr2l	equ	0xFD9
 24229                           status	equ	0xFD8
 24230                           
 24231 ;; *************** function _ADC_ClockDivision *****************
 24232 ;; Defined at:
 24233 ;;		line 159 in file "Library/ADC.c"
 24234 ;; Parameters:    Size  Location     Type
 24235 ;;  pDivide         1    wreg     unsigned char 
 24236 ;; Auto vars:     Size  Location     Type
 24237 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24238 ;;  unfound         1    2[BANK0 ] unsigned char 
 24239 ;;  reg             1    1[BANK0 ] unsigned char 
 24240 ;; Return value:  Size  Location     Type
 24241 ;;                  1    wreg      void 
 24242 ;; Registers used:
 24243 ;;		wreg, status,2, status,0
 24244 ;; Tracked objects:
 24245 ;;		On entry : 0/0
 24246 ;;		On exit  : 0/0
 24247 ;;		Unchanged: 0/0
 24248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24250 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24252 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24253 ;;Total ram usage:        3 bytes
 24254 ;; Hardware stack levels used:    1
 24255 ;; Hardware stack levels required when called:    7
 24256 ;; This function calls:
 24257 ;;		Nothing
 24258 ;; This function is called by:
 24259 ;;		_ADC_Init
 24260 ;; This function uses a non-reentrant model
 24261 ;;
 24262                           
 24263                           	psect	text120
 24264  0154C4                     __ptext120:
 24265                           	opt stack 0
 24266  0154C4                     _ADC_ClockDivision:
 24267                           	opt stack 21
 24268                           
 24269                           ; BSR set to: 0
 24270                           ;incstack = 0
 24271                           ;ADC_ClockDivision@pDivide stored from wreg
 24272  0154C4  0100               	movlb	0	; () banked
 24273  0154C6  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24274                           
 24275                           ;ADC.c: 161: UINT8 reg = 0;
 24276  0154C8  0E00               	movlw	0
 24277  0154CA  0100               	movlb	0	; () banked
 24278  0154CC  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24279                           
 24280                           ;ADC.c: 162: bool unfound = 1;
 24281  0154CE  0E01               	movlw	1
 24282  0154D0  D002               	goto	L13
 24283  0154D2                     
 24284                           ; BSR set to: 0
 24285                           ;ADC.c: 167: reg = 0;
 24286                           
 24287                           ; BSR set to: 0
 24288  0154D2  0E00               	movlw	0
 24289  0154D4  D00C               	goto	L18
 24290  0154D6                     L13:
 24291  0154D6  0100               	movlb	0	; () banked
 24292  0154D8  6F62               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24293                           
 24294                           ;ADC.c: 169: break;
 24295  0154DA  D02D               	goto	l1296
 24296  0154DC                     
 24297                           ; BSR set to: 0
 24298                           ;ADC.c: 171: reg = 0b100;
 24299                           
 24300                           ; BSR set to: 0
 24301  0154DC  0E04               	movlw	4
 24302  0154DE  D007               	goto	L18
 24303  0154E0                     
 24304                           ; BSR set to: 0
 24305                           ;ADC.c: 175: reg = 0b001;
 24306                           
 24307                           ; BSR set to: 0
 24308  0154E0  0E01               	movlw	1
 24309  0154E2  D005               	goto	L18
 24310  0154E4                     
 24311                           ; BSR set to: 0
 24312                           ;ADC.c: 179: reg = 0b101;
 24313                           
 24314                           ; BSR set to: 0
 24315  0154E4  0E05               	movlw	5
 24316  0154E6  D003               	goto	L18
 24317  0154E8                     
 24318                           ; BSR set to: 0
 24319                           ;ADC.c: 183: reg = 0b010;
 24320                           
 24321                           ; BSR set to: 0
 24322  0154E8  0E02               	movlw	2
 24323  0154EA  D001               	goto	L18
 24324  0154EC                     
 24325                           ; BSR set to: 0
 24326                           ;ADC.c: 187: reg = 0b110;
 24327                           
 24328                           ; BSR set to: 0
 24329  0154EC  0E06               	movlw	6
 24330  0154EE                     L18:
 24331  0154EE  0100               	movlb	0	; () banked
 24332  0154F0  6F61               	movwf	ADC_ClockDivision@reg& (0+255),b
 24333                           
 24334                           ;ADC.c: 188: unfound = 0;
 24335  0154F2  0E00               	movlw	0
 24336  0154F4  D7F0               	goto	L13
 24337  0154F6                     
 24338                           ; BSR set to: 0
 24339                           ;ADC.c: 191: if (pDivide > 2)
 24340                           
 24341                           ; BSR set to: 0
 24342  0154F6  0E02               	movlw	2
 24343  0154F8  0100               	movlb	0	; () banked
 24344  0154FA  6560               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24345  0154FC  D003               	goto	l1303
 24346                           
 24347                           ; BSR set to: 0
 24348                           ;ADC.c: 192: pDivide --;
 24349  0154FE  0100               	movlb	0	; () banked
 24350  015500  0760               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24351  015502  D019               	goto	l1296
 24352  015504                     l1303:
 24353                           
 24354                           ; BSR set to: 0
 24355                           ;ADC.c: 193: else
 24356                           ;ADC.c: 194: pDivide = 2;
 24357                           
 24358                           ; BSR set to: 0
 24359  015504  0E02               	movlw	2
 24360  015506  0100               	movlb	0	; () banked
 24361  015508  6F60               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24362                           
 24363                           ; BSR set to: 0
 24364                           ;ADC.c: 195: };
 24365  01550A  D015               	goto	l1296
 24366  01550C                     
 24367                           ; BSR set to: 0
 24368                           
 24369                           ; BSR set to: 0
 24370  01550C  0100               	movlb	0	; () banked
 24371  01550E  5160               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24372                           
 24373                           ; Switch size 1, requested type "space"
 24374                           ; Number of cases is 6, Range of values is 2 to 64
 24375                           ; switch strategies available:
 24376                           ; Name         Instructions Cycles
 24377                           ; simple_byte           19    10 (average)
 24378                           ;	Chosen strategy is simple_byte
 24379  015510  0A02               	xorlw	2	; case 2
 24380  015512  B4D8               	btfsc	status,2,c
 24381  015514  D7DE               	goto	l1295
 24382  015516  0A06               	xorlw	6	; case 4
 24383  015518  B4D8               	btfsc	status,2,c
 24384  01551A  D7E0               	goto	l1297
 24385  01551C  0A0C               	xorlw	12	; case 8
 24386  01551E  B4D8               	btfsc	status,2,c
 24387  015520  D7DF               	goto	l1298
 24388  015522  0A18               	xorlw	24	; case 16
 24389  015524  B4D8               	btfsc	status,2,c
 24390  015526  D7DE               	goto	l1299
 24391  015528  0A30               	xorlw	48	; case 32
 24392  01552A  B4D8               	btfsc	status,2,c
 24393  01552C  D7DD               	goto	l1300
 24394  01552E  0A60               	xorlw	96	; case 64
 24395  015530  B4D8               	btfsc	status,2,c
 24396  015532  D7DC               	goto	l1301
 24397  015534  D7E0               	goto	l1302
 24398  015536                     l1296:
 24399                           
 24400                           ; BSR set to: 0
 24401                           
 24402                           ; BSR set to: 0
 24403                           
 24404                           ; BSR set to: 0
 24405  015536  0100               	movlb	0	; () banked
 24406  015538  5162               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24407  01553A  0100               	movlb	0	; () banked
 24408  01553C  A4D8               	btfss	status,2,c
 24409  01553E  D7E6               	goto	l1294
 24410                           
 24411                           ; BSR set to: 0
 24412                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24413                           
 24414                           ; BSR set to: 0
 24415  015540  50C1               	movf	4033,w,c	;volatile
 24416  015542  0100               	movlb	0	; () banked
 24417  015544  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24418  015546  0BF8               	andlw	-8
 24419  015548  1961               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24420  01554A  6EC1               	movwf	4033,c	;volatile
 24421                           
 24422                           ; BSR set to: 0
 24423  01554C  0012               	return		;funcret
 24424  01554E                     __end_of_ADC_ClockDivision:
 24425                           	opt stack 0
 24426                           tosu	equ	0xFFF
 24427                           tosh	equ	0xFFE
 24428                           tosl	equ	0xFFD
 24429                           pclath	equ	0xFFA
 24430                           tblptru	equ	0xFF8
 24431                           tblptrh	equ	0xFF7
 24432                           tblptrl	equ	0xFF6
 24433                           tablat	equ	0xFF5
 24434                           prodh	equ	0xFF4
 24435                           prodl	equ	0xFF3
 24436                           intcon	equ	0xFF2
 24437                           indf0	equ	0xFEF
 24438                           postinc0	equ	0xFEE
 24439                           fsr0h	equ	0xFEA
 24440                           fsr0l	equ	0xFE9
 24441                           wreg	equ	0xFE8
 24442                           indf1	equ	0xFE7
 24443                           postdec1	equ	0xFE5
 24444                           fsr1h	equ	0xFE2
 24445                           fsr1l	equ	0xFE1
 24446                           indf2	equ	0xFDF
 24447                           postinc2	equ	0xFDE
 24448                           postdec2	equ	0xFDD
 24449                           plusw2	equ	0xFDB
 24450                           fsr2h	equ	0xFDA
 24451                           fsr2l	equ	0xFD9
 24452                           status	equ	0xFD8
 24453                           
 24454 ;; *************** function _ADC_Calibrate *****************
 24455 ;; Defined at:
 24456 ;;		line 63 in file "Library/ADC.c"
 24457 ;; Parameters:    Size  Location     Type
 24458 ;;		None
 24459 ;; Auto vars:     Size  Location     Type
 24460 ;;		None
 24461 ;; Return value:  Size  Location     Type
 24462 ;;                  1    wreg      void 
 24463 ;; Registers used:
 24464 ;;		cstack
 24465 ;; Tracked objects:
 24466 ;;		On entry : 0/0
 24467 ;;		On exit  : 0/0
 24468 ;;		Unchanged: 0/0
 24469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24470 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24471 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24473 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24474 ;;Total ram usage:        0 bytes
 24475 ;; Hardware stack levels used:    1
 24476 ;; Hardware stack levels required when called:    8
 24477 ;; This function calls:
 24478 ;;		_ADC_Off
 24479 ;;		_ADC_On
 24480 ;; This function is called by:
 24481 ;;		_ADC_Init
 24482 ;; This function uses a non-reentrant model
 24483 ;;
 24484                           
 24485                           	psect	text121
 24486  0169B8                     __ptext121:
 24487                           	opt stack 0
 24488  0169B8                     _ADC_Calibrate:
 24489                           	opt stack 20
 24490                           
 24491                           ;ADC.c: 65: ADC_On();
 24492                           
 24493                           ; BSR set to: 0
 24494                           ;incstack = 0
 24495  0169B8  EC4C  F0B5         	call	_ADC_On	;wreg free
 24496                           
 24497                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24498  0169BC  8CC1               	bsf	4033,6,c	;volatile
 24499                           
 24500                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24501  0169BE  82C2               	bsf	4034,1,c	;volatile
 24502  0169C0  B2C2               	btfsc	4034,1,c	;volatile
 24503  0169C2  D7FE               	goto	l1254
 24504                           
 24505                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24506  0169C4  9CC1               	bcf	4033,6,c	;volatile
 24507                           
 24508                           ;ADC.c: 73: ADC_Off();
 24509  0169C6  EC3F  F0B5         	call	_ADC_Off	;wreg free
 24510  0169CA  0012               	return		;funcret
 24511  0169CC                     __end_of_ADC_Calibrate:
 24512                           	opt stack 0
 24513                           tosu	equ	0xFFF
 24514                           tosh	equ	0xFFE
 24515                           tosl	equ	0xFFD
 24516                           pclath	equ	0xFFA
 24517                           tblptru	equ	0xFF8
 24518                           tblptrh	equ	0xFF7
 24519                           tblptrl	equ	0xFF6
 24520                           tablat	equ	0xFF5
 24521                           prodh	equ	0xFF4
 24522                           prodl	equ	0xFF3
 24523                           intcon	equ	0xFF2
 24524                           indf0	equ	0xFEF
 24525                           postinc0	equ	0xFEE
 24526                           fsr0h	equ	0xFEA
 24527                           fsr0l	equ	0xFE9
 24528                           wreg	equ	0xFE8
 24529                           indf1	equ	0xFE7
 24530                           postdec1	equ	0xFE5
 24531                           fsr1h	equ	0xFE2
 24532                           fsr1l	equ	0xFE1
 24533                           indf2	equ	0xFDF
 24534                           postinc2	equ	0xFDE
 24535                           postdec2	equ	0xFDD
 24536                           plusw2	equ	0xFDB
 24537                           fsr2h	equ	0xFDA
 24538                           fsr2l	equ	0xFD9
 24539                           status	equ	0xFD8
 24540                           
 24541 ;; *************** function _FunctADC *****************
 24542 ;; Defined at:
 24543 ;;		line 57 in file "Functions.c"
 24544 ;; Parameters:    Size  Location     Type
 24545 ;;		None
 24546 ;; Auto vars:     Size  Location     Type
 24547 ;;		None
 24548 ;; Return value:  Size  Location     Type
 24549 ;;                  1    wreg      void 
 24550 ;; Registers used:
 24551 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24552 ;; Tracked objects:
 24553 ;;		On entry : 0/0
 24554 ;;		On exit  : 0/0
 24555 ;;		Unchanged: 0/0
 24556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24561 ;;Total ram usage:        0 bytes
 24562 ;; Hardware stack levels used:    1
 24563 ;; Hardware stack levels required when called:    9
 24564 ;; This function calls:
 24565 ;;		_ADC_Start
 24566 ;; This function is called by:
 24567 ;;		_main
 24568 ;; This function uses a non-reentrant model
 24569 ;;
 24570                           
 24571                           	psect	text122
 24572  0169CC                     __ptext122:
 24573                           	opt stack 0
 24574  0169CC                     _FunctADC:
 24575                           	opt stack 21
 24576                           
 24577                           ;Functions.c: 58: ADC_Start(&ADC_AN0);
 24578                           
 24579                           ;incstack = 0
 24580  0169CC  0ED4               	movlw	low _ADC_AN0
 24581  0169CE  0100               	movlb	0	; () banked
 24582  0169D0  6F62               	movwf	ADC_Start@pInput& (0+255),b
 24583  0169D2  0E01               	movlw	high _ADC_AN0
 24584  0169D4  0100               	movlb	0	; () banked
 24585  0169D6  6F63               	movwf	(ADC_Start@pInput+1)& (0+255),b
 24586  0169D8  ECEC  F0AA         	call	_ADC_Start	;wreg free
 24587  0169DC  0012               	return		;funcret
 24588  0169DE                     __end_of_FunctADC:
 24589                           	opt stack 0
 24590                           tosu	equ	0xFFF
 24591                           tosh	equ	0xFFE
 24592                           tosl	equ	0xFFD
 24593                           pclath	equ	0xFFA
 24594                           tblptru	equ	0xFF8
 24595                           tblptrh	equ	0xFF7
 24596                           tblptrl	equ	0xFF6
 24597                           tablat	equ	0xFF5
 24598                           prodh	equ	0xFF4
 24599                           prodl	equ	0xFF3
 24600                           intcon	equ	0xFF2
 24601                           indf0	equ	0xFEF
 24602                           postinc0	equ	0xFEE
 24603                           fsr0h	equ	0xFEA
 24604                           fsr0l	equ	0xFE9
 24605                           wreg	equ	0xFE8
 24606                           indf1	equ	0xFE7
 24607                           postdec1	equ	0xFE5
 24608                           fsr1h	equ	0xFE2
 24609                           fsr1l	equ	0xFE1
 24610                           indf2	equ	0xFDF
 24611                           postinc2	equ	0xFDE
 24612                           postdec2	equ	0xFDD
 24613                           plusw2	equ	0xFDB
 24614                           fsr2h	equ	0xFDA
 24615                           fsr2l	equ	0xFD9
 24616                           status	equ	0xFD8
 24617                           
 24618 ;; *************** function _ADC_Start *****************
 24619 ;; Defined at:
 24620 ;;		line 114 in file "Library/ADC.c"
 24621 ;; Parameters:    Size  Location     Type
 24622 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 24623 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24624 ;;		 -> NULL(0), 
 24625 ;; Auto vars:     Size  Location     Type
 24626 ;;		None
 24627 ;; Return value:  Size  Location     Type
 24628 ;;                  1    wreg      void 
 24629 ;; Registers used:
 24630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24631 ;; Tracked objects:
 24632 ;;		On entry : 0/0
 24633 ;;		On exit  : 0/0
 24634 ;;		Unchanged: 0/0
 24635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24636 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24639 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24640 ;;Total ram usage:        4 bytes
 24641 ;; Hardware stack levels used:    1
 24642 ;; Hardware stack levels required when called:    8
 24643 ;; This function calls:
 24644 ;;		_ADC_Off
 24645 ;;		_ADC_On
 24646 ;;		_ADC_SetChannel
 24647 ;; This function is called by:
 24648 ;;		_FunctADC
 24649 ;; This function uses a non-reentrant model
 24650 ;;
 24651                           
 24652                           	psect	text123
 24653  0155D8                     __ptext123:
 24654                           	opt stack 0
 24655  0155D8                     _ADC_Start:
 24656                           	opt stack 21
 24657                           
 24658                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 24659                           
 24660                           ;incstack = 0
 24661  0155D8  B2C2               	btfsc	4034,1,c	;volatile
 24662  0155DA  0012               	return	
 24663  0155DC                     
 24664                           ;ADC.c: 128: {
 24665                           ;ADC.c: 129: ADC_Off();
 24666                           
 24667                           ;ADC.c: 127: for(;;)
 24668  0155DC  EC3F  F0B5         	call	_ADC_Off	;wreg free
 24669                           
 24670                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 24671  0155E0  C062  FFD9         	movff	ADC_Start@pInput,fsr2l
 24672  0155E4  C063  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 24673  0155E8  50DF               	movf	indf2,w,c
 24674  0155EA  EC6D  F0B4         	call	_ADC_SetChannel
 24675                           
 24676                           ;ADC.c: 131: ADC_On();
 24677  0155EE  EC4C  F0B5         	call	_ADC_On	;wreg free
 24678                           
 24679                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 24680  0155F2  82C2               	bsf	4034,1,c	;volatile
 24681  0155F4  B2C2               	btfsc	4034,1,c	;volatile
 24682  0155F6  D7FE               	goto	l1280
 24683                           
 24684                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 24685  0155F8  50C3               	movf	4035,w,c	;volatile
 24686  0155FA  CFC4 F064          	movff	4036,??_ADC_Start	;volatile
 24687  0155FE  0100               	movlb	0	; () banked
 24688  015600  6B65               	clrf	(??_ADC_Start+1)& (0+255),b
 24689  015602  C064  F065         	movff	??_ADC_Start,??_ADC_Start+1
 24690  015606  0100               	movlb	0	; () banked
 24691  015608  6B64               	clrf	??_ADC_Start& (0+255),b
 24692  01560A  0100               	movlb	0	; () banked
 24693  01560C  1364               	iorwf	??_ADC_Start& (0+255),f,b
 24694  01560E  0E00               	movlw	0
 24695  015610  1365               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 24696  015612  0100               	movlb	0	; () banked
 24697  015614  EE20 F001          	lfsr	2,1
 24698  015618  5162               	movf	ADC_Start@pInput& (0+255),w,b
 24699  01561A  26D9               	addwf	fsr2l,f,c
 24700  01561C  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24701  01561E  22DA               	addwfc	fsr2h,f,c
 24702  015620  C064  FFDE         	movff	??_ADC_Start,postinc2
 24703  015624  C065  FFDD         	movff	??_ADC_Start+1,postdec2
 24704                           
 24705                           ;ADC.c: 141: if (pInput->mNext == 0)
 24706  015628  0100               	movlb	0	; () banked
 24707  01562A  EE20 F003          	lfsr	2,3
 24708  01562E  5162               	movf	ADC_Start@pInput& (0+255),w,b
 24709  015630  26D9               	addwf	fsr2l,f,c
 24710  015632  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24711  015634  22DA               	addwfc	fsr2h,f,c
 24712  015636  50DE               	movf	postinc2,w,c
 24713  015638  10DE               	iorwf	postinc2,w,c
 24714  01563A  B4D8               	btfsc	status,2,c
 24715  01563C  D00C               	goto	l1283
 24716                           
 24717                           ; BSR set to: 0
 24718                           ;ADC.c: 145: pInput = pInput->mNext;
 24719                           
 24720                           ; BSR set to: 0
 24721                           
 24722                           ; BSR set to: 0
 24723                           ;ADC.c: 142: break;
 24724  01563E  0100               	movlb	0	; () banked
 24725  015640  EE20 F003          	lfsr	2,3
 24726  015644  5162               	movf	ADC_Start@pInput& (0+255),w,b
 24727  015646  26D9               	addwf	fsr2l,f,c
 24728  015648  5163               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24729  01564A  22DA               	addwfc	fsr2h,f,c
 24730  01564C  CFDE F062          	movff	postinc2,ADC_Start@pInput
 24731  015650  CFDD F063          	movff	postdec2,ADC_Start@pInput+1
 24732                           
 24733                           ;ADC.c: 146: }
 24734  015654  D7C3               	goto	l1276
 24735  015656                     l1283:
 24736                           
 24737                           ; BSR set to: 0
 24738                           ;ADC.c: 147: ADC_Off();
 24739                           
 24740                           ; BSR set to: 0
 24741  015656  EC3F  F0B5         	call	_ADC_Off	;wreg free
 24742  01565A  0012               	return		;funcret
 24743  01565C                     __end_of_ADC_Start:
 24744                           	opt stack 0
 24745                           tosu	equ	0xFFF
 24746                           tosh	equ	0xFFE
 24747                           tosl	equ	0xFFD
 24748                           pclath	equ	0xFFA
 24749                           tblptru	equ	0xFF8
 24750                           tblptrh	equ	0xFF7
 24751                           tblptrl	equ	0xFF6
 24752                           tablat	equ	0xFF5
 24753                           prodh	equ	0xFF4
 24754                           prodl	equ	0xFF3
 24755                           intcon	equ	0xFF2
 24756                           indf0	equ	0xFEF
 24757                           postinc0	equ	0xFEE
 24758                           fsr0h	equ	0xFEA
 24759                           fsr0l	equ	0xFE9
 24760                           wreg	equ	0xFE8
 24761                           indf1	equ	0xFE7
 24762                           postdec1	equ	0xFE5
 24763                           fsr1h	equ	0xFE2
 24764                           fsr1l	equ	0xFE1
 24765                           indf2	equ	0xFDF
 24766                           postinc2	equ	0xFDE
 24767                           postdec2	equ	0xFDD
 24768                           plusw2	equ	0xFDB
 24769                           fsr2h	equ	0xFDA
 24770                           fsr2l	equ	0xFD9
 24771                           status	equ	0xFD8
 24772                           
 24773 ;; *************** function _ADC_SetChannel *****************
 24774 ;; Defined at:
 24775 ;;		line 155 in file "Library/ADC.c"
 24776 ;; Parameters:    Size  Location     Type
 24777 ;;  pChannel        1    wreg     enum E6742
 24778 ;; Auto vars:     Size  Location     Type
 24779 ;;  pChannel        1    1[BANK0 ] enum E6742
 24780 ;; Return value:  Size  Location     Type
 24781 ;;                  1    wreg      void 
 24782 ;; Registers used:
 24783 ;;		wreg, status,2, status,0
 24784 ;; Tracked objects:
 24785 ;;		On entry : 0/0
 24786 ;;		On exit  : 0/0
 24787 ;;		Unchanged: 0/0
 24788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24792 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24793 ;;Total ram usage:        2 bytes
 24794 ;; Hardware stack levels used:    1
 24795 ;; Hardware stack levels required when called:    7
 24796 ;; This function calls:
 24797 ;;		Nothing
 24798 ;; This function is called by:
 24799 ;;		_ADC_Init
 24800 ;;		_ADC_Start
 24801 ;;		_ADC_ISR
 24802 ;;		_ADC_Sample
 24803 ;; This function uses a non-reentrant model
 24804 ;;
 24805                           
 24806                           	psect	text124
 24807  0168DA                     __ptext124:
 24808                           	opt stack 0
 24809  0168DA                     _ADC_SetChannel:
 24810                           	opt stack 21
 24811                           
 24812                           ;incstack = 0
 24813                           ;ADC_SetChannel@pChannel stored from wreg
 24814  0168DA  0100               	movlb	0	; () banked
 24815  0168DC  6F61               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24816                           
 24817                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24818  0168DE  C061  F060         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24819  0168E2  0100               	movlb	0	; () banked
 24820  0168E4  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24821  0168E6  4760               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24822  0168E8  50C2               	movf	4034,w,c	;volatile
 24823  0168EA  0100               	movlb	0	; () banked
 24824  0168EC  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24825  0168EE  0BC3               	andlw	-61
 24826  0168F0  1960               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24827  0168F2  6EC2               	movwf	4034,c	;volatile
 24828                           
 24829                           ; BSR set to: 0
 24830  0168F4  0012               	return		;funcret
 24831  0168F6                     __end_of_ADC_SetChannel:
 24832                           	opt stack 0
 24833                           tosu	equ	0xFFF
 24834                           tosh	equ	0xFFE
 24835                           tosl	equ	0xFFD
 24836                           pclath	equ	0xFFA
 24837                           tblptru	equ	0xFF8
 24838                           tblptrh	equ	0xFF7
 24839                           tblptrl	equ	0xFF6
 24840                           tablat	equ	0xFF5
 24841                           prodh	equ	0xFF4
 24842                           prodl	equ	0xFF3
 24843                           intcon	equ	0xFF2
 24844                           indf0	equ	0xFEF
 24845                           postinc0	equ	0xFEE
 24846                           fsr0h	equ	0xFEA
 24847                           fsr0l	equ	0xFE9
 24848                           wreg	equ	0xFE8
 24849                           indf1	equ	0xFE7
 24850                           postdec1	equ	0xFE5
 24851                           fsr1h	equ	0xFE2
 24852                           fsr1l	equ	0xFE1
 24853                           indf2	equ	0xFDF
 24854                           postinc2	equ	0xFDE
 24855                           postdec2	equ	0xFDD
 24856                           plusw2	equ	0xFDB
 24857                           fsr2h	equ	0xFDA
 24858                           fsr2l	equ	0xFD9
 24859                           status	equ	0xFD8
 24860                           
 24861 ;; *************** function _ADC_On *****************
 24862 ;; Defined at:
 24863 ;;		line 85 in file "Library/ADC.c"
 24864 ;; Parameters:    Size  Location     Type
 24865 ;;		None
 24866 ;; Auto vars:     Size  Location     Type
 24867 ;;		None
 24868 ;; Return value:  Size  Location     Type
 24869 ;;                  1    wreg      void 
 24870 ;; Registers used:
 24871 ;;		None
 24872 ;; Tracked objects:
 24873 ;;		On entry : 0/0
 24874 ;;		On exit  : 0/0
 24875 ;;		Unchanged: 0/0
 24876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24881 ;;Total ram usage:        0 bytes
 24882 ;; Hardware stack levels used:    1
 24883 ;; Hardware stack levels required when called:    7
 24884 ;; This function calls:
 24885 ;;		Nothing
 24886 ;; This function is called by:
 24887 ;;		_ADC_Calibrate
 24888 ;;		_ADC_Start
 24889 ;;		_ADC_ISR
 24890 ;;		_ADC_Sample
 24891 ;; This function uses a non-reentrant model
 24892 ;;
 24893                           
 24894                           	psect	text125
 24895  016A98                     __ptext125:
 24896                           	opt stack 0
 24897  016A98                     _ADC_On:
 24898                           	opt stack 20
 24899                           
 24900                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24901                           
 24902                           ; BSR set to: 0
 24903                           ;incstack = 0
 24904  016A98  80C2               	bsf	4034,0,c	;volatile
 24905                           
 24906                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24907  016A9A  9C9E               	bcf	3998,6,c	;volatile
 24908  016A9C  0012               	return		;funcret
 24909  016A9E                     __end_of_ADC_On:
 24910                           	opt stack 0
 24911                           tosu	equ	0xFFF
 24912                           tosh	equ	0xFFE
 24913                           tosl	equ	0xFFD
 24914                           pclath	equ	0xFFA
 24915                           tblptru	equ	0xFF8
 24916                           tblptrh	equ	0xFF7
 24917                           tblptrl	equ	0xFF6
 24918                           tablat	equ	0xFF5
 24919                           prodh	equ	0xFF4
 24920                           prodl	equ	0xFF3
 24921                           intcon	equ	0xFF2
 24922                           indf0	equ	0xFEF
 24923                           postinc0	equ	0xFEE
 24924                           fsr0h	equ	0xFEA
 24925                           fsr0l	equ	0xFE9
 24926                           wreg	equ	0xFE8
 24927                           indf1	equ	0xFE7
 24928                           postdec1	equ	0xFE5
 24929                           fsr1h	equ	0xFE2
 24930                           fsr1l	equ	0xFE1
 24931                           indf2	equ	0xFDF
 24932                           postinc2	equ	0xFDE
 24933                           postdec2	equ	0xFDD
 24934                           plusw2	equ	0xFDB
 24935                           fsr2h	equ	0xFDA
 24936                           fsr2l	equ	0xFD9
 24937                           status	equ	0xFD8
 24938                           
 24939 ;; *************** function _ADC_Off *****************
 24940 ;; Defined at:
 24941 ;;		line 94 in file "Library/ADC.c"
 24942 ;; Parameters:    Size  Location     Type
 24943 ;;		None
 24944 ;; Auto vars:     Size  Location     Type
 24945 ;;		None
 24946 ;; Return value:  Size  Location     Type
 24947 ;;                  1    wreg      void 
 24948 ;; Registers used:
 24949 ;;		None
 24950 ;; Tracked objects:
 24951 ;;		On entry : 0/0
 24952 ;;		On exit  : 0/0
 24953 ;;		Unchanged: 0/0
 24954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24956 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24957 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24958 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24959 ;;Total ram usage:        0 bytes
 24960 ;; Hardware stack levels used:    1
 24961 ;; Hardware stack levels required when called:    7
 24962 ;; This function calls:
 24963 ;;		Nothing
 24964 ;; This function is called by:
 24965 ;;		_ADC_Calibrate
 24966 ;;		_ADC_Start
 24967 ;;		_ADC_ISR
 24968 ;;		_ADC_Sample
 24969 ;; This function uses a non-reentrant model
 24970 ;;
 24971                           
 24972                           	psect	text126
 24973  016A7E                     __ptext126:
 24974                           	opt stack 0
 24975  016A7E                     _ADC_Off:
 24976                           	opt stack 20
 24977                           
 24978                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 24979                           
 24980                           ;incstack = 0
 24981  016A7E  90C2               	bcf	4034,0,c	;volatile
 24982                           
 24983                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 24984  016A80  9C9E               	bcf	3998,6,c	;volatile
 24985                           
 24986                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 24987  016A82  9C9D               	bcf	3997,6,c	;volatile
 24988  016A84  0012               	return		;funcret
 24989  016A86                     __end_of_ADC_Off:
 24990                           	opt stack 0
 24991                           tosu	equ	0xFFF
 24992                           tosh	equ	0xFFE
 24993                           tosl	equ	0xFFD
 24994                           pclath	equ	0xFFA
 24995                           tblptru	equ	0xFF8
 24996                           tblptrh	equ	0xFF7
 24997                           tblptrl	equ	0xFF6
 24998                           tablat	equ	0xFF5
 24999                           prodh	equ	0xFF4
 25000                           prodl	equ	0xFF3
 25001                           intcon	equ	0xFF2
 25002                           indf0	equ	0xFEF
 25003                           postinc0	equ	0xFEE
 25004                           fsr0h	equ	0xFEA
 25005                           fsr0l	equ	0xFE9
 25006                           wreg	equ	0xFE8
 25007                           indf1	equ	0xFE7
 25008                           postdec1	equ	0xFE5
 25009                           fsr1h	equ	0xFE2
 25010                           fsr1l	equ	0xFE1
 25011                           indf2	equ	0xFDF
 25012                           postinc2	equ	0xFDE
 25013                           postdec2	equ	0xFDD
 25014                           plusw2	equ	0xFDB
 25015                           fsr2h	equ	0xFDA
 25016                           fsr2l	equ	0xFD9
 25017                           status	equ	0xFD8
 25018                           
 25019 ;; *************** function _Console_Render *****************
 25020 ;; Defined at:
 25021 ;;		line 377 in file "Library/Console.c"
 25022 ;; Parameters:    Size  Location     Type
 25023 ;;		None
 25024 ;; Auto vars:     Size  Location     Type
 25025 ;;  lCursor         4   38[BANK0 ] struct Point
 25026 ;;  y               1   43[BANK0 ] unsigned char 
 25027 ;;  x               1   42[BANK0 ] unsigned char 
 25028 ;;  temp            1   37[BANK0 ] unsigned char 
 25029 ;;  Temp            2    0        unsigned short 
 25030 ;; Return value:  Size  Location     Type
 25031 ;;                  1    wreg      void 
 25032 ;; Registers used:
 25033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25034 ;; Tracked objects:
 25035 ;;		On entry : 0/0
 25036 ;;		On exit  : 0/0
 25037 ;;		Unchanged: 0/0
 25038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25040 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25041 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25042 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25043 ;;Total ram usage:        9 bytes
 25044 ;; Hardware stack levels used:    1
 25045 ;; Hardware stack levels required when called:   11
 25046 ;; This function calls:
 25047 ;;		_Console_MakeField
 25048 ;;		_LCD_DrawField
 25049 ;;		_LCD_FillRectangle
 25050 ;; This function is called by:
 25051 ;;		_main
 25052 ;; This function uses a non-reentrant model
 25053 ;;
 25054                           
 25055                           	psect	text127
 25056  01237C                     __ptext127:
 25057                           	opt stack 0
 25058  01237C                     _Console_Render:
 25059                           	opt stack 19
 25060                           
 25061                           ;Console.c: 379: Colour Temp;
 25062                           ;Console.c: 380: if (change)
 25063                           
 25064                           ;incstack = 0
 25065  01237C  0100               	movlb	0	; () banked
 25066  01237E  51EC               	movf	_change& (0+255),w,b
 25067  012380  B4D8               	btfsc	status,2,c
 25068  012382  0012               	return	
 25069                           
 25070                           ; BSR set to: 0
 25071                           ;Console.c: 381: {
 25072                           ;Console.c: 382: UINT8 x, y, temp;
 25073                           ;Console.c: 383: Point lCursor = {6,6};
 25074  012384  C1E1  F086         	movff	Console_Render@F6956,Console_Render@lCursor
 25075  012388  C1E2  F087         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 25076  01238C  C1E3  F088         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 25077  012390  C1E4  F089         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 25078                           
 25079                           ; BSR set to: 0
 25080                           ;Console.c: 385: if (clearall)
 25081  012394  0100               	movlb	0	; () banked
 25082  012396  51E9               	movf	_clearall& (0+255),w,b
 25083  012398  B4D8               	btfsc	status,2,c
 25084  01239A  D005               	goto	l1056
 25085                           
 25086                           ; BSR set to: 0
 25087                           ;Console.c: 386: {
 25088                           ;Console.c: 389: temp = lBufferY;
 25089  01239C  C0E7  F085         	movff	_lBufferY,Console_Render@temp
 25090                           
 25091                           ; BSR set to: 0
 25092                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 25093  0123A0  0E0F               	movlw	15
 25094  0123A2  0100               	movlb	0	; () banked
 25095  0123A4  6FE7               	movwf	_lBufferY& (0+255),b
 25096  0123A6                     l1056:
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;Console.c: 391: }
 25100                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 25101  0123A6  0E00               	movlw	0
 25102  0123A8  0100               	movlb	0	; () banked
 25103  0123AA  6F8B               	movwf	Console_Render@y& (0+255),b
 25104  0123AC  D0DF               	goto	l1057
 25105  0123AE                     
 25106                           ; BSR set to: 0
 25107                           ;Console.c: 394: {
 25108                           ;Console.c: 395: gForecolour = lCBuffer[y];
 25109                           
 25110                           ; BSR set to: 0
 25111  0123AE  0100               	movlb	0	; () banked
 25112  0123B0  518B               	movf	Console_Render@y& (0+255),w,b
 25113  0123B2  0D02               	mullw	2
 25114  0123B4  0E00               	movlw	low _lCBuffer
 25115  0123B6  24F3               	addwf	prodl,w,c
 25116  0123B8  6ED9               	movwf	fsr2l,c
 25117  0123BA  0E02               	movlw	high _lCBuffer
 25118  0123BC  20F4               	addwfc	prodh,w,c
 25119  0123BE  6EDA               	movwf	fsr2h,c
 25120  0123C0  CFDE F0EA          	movff	postinc2,_gForecolour
 25121  0123C4  CFDD F0EB          	movff	postdec2,_gForecolour+1
 25122                           
 25123                           ; BSR set to: 0
 25124                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 25125  0123C8  0E00               	movlw	0
 25126  0123CA  0100               	movlb	0	; () banked
 25127  0123CC  6F8A               	movwf	Console_Render@x& (0+255),b
 25128  0123CE                     l14312:
 25129                           
 25130                           ; BSR set to: 0
 25131  0123CE  0E13               	movlw	19
 25132  0123D0  0100               	movlb	0	; () banked
 25133  0123D2  658A               	cpfsgt	Console_Render@x& (0+255),b
 25134  0123D4  D001               	goto	l1059
 25135  0123D6  D0BE               	goto	u12210
 25136  0123D8                     l1059:
 25137                           
 25138                           ; BSR set to: 0
 25139                           ;Console.c: 397: {
 25140                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 25141                           
 25142                           ; BSR set to: 0
 25143  0123D8  0100               	movlb	0	; () banked
 25144  0123DA  518B               	movf	Console_Render@y& (0+255),w,b
 25145  0123DC  0D14               	mullw	20
 25146  0123DE  0E85               	movlw	low _lBuffer
 25147  0123E0  0100               	movlb	0	; () banked
 25148  0123E2  6F83               	movwf	??_Console_Render& (0+255),b
 25149  0123E4  0E02               	movlw	high _lBuffer
 25150  0123E6  0100               	movlb	0	; () banked
 25151  0123E8  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 25152  0123EA  50F3               	movf	prodl,w,c
 25153  0123EC  0100               	movlb	0	; () banked
 25154  0123EE  2783               	addwf	??_Console_Render& (0+255),f,b
 25155  0123F0  50F4               	movf	prodh,w,c
 25156  0123F2  0100               	movlb	0	; () banked
 25157  0123F4  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 25158  0123F6  0100               	movlb	0	; () banked
 25159  0123F8  518A               	movf	Console_Render@x& (0+255),w,b
 25160  0123FA  0D01               	mullw	1
 25161  0123FC  50F3               	movf	prodl,w,c
 25162  0123FE  0100               	movlb	0	; () banked
 25163  012400  2583               	addwf	??_Console_Render& (0+255),w,b
 25164  012402  6ED9               	movwf	fsr2l,c
 25165  012404  50F4               	movf	prodh,w,c
 25166  012406  0100               	movlb	0	; () banked
 25167  012408  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 25168  01240A  6EDA               	movwf	fsr2h,c
 25169  01240C  AEDF               	btfss	indf2,7,c
 25170  01240E  D09A               	goto	l1063
 25171                           
 25172                           ; BSR set to: 0
 25173                           ;Console.c: 399: {
 25174                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 25175  012410  0100               	movlb	0	; () banked
 25176  012412  518B               	movf	Console_Render@y& (0+255),w,b
 25177  012414  0D14               	mullw	20
 25178  012416  0E85               	movlw	low _lBuffer
 25179  012418  0100               	movlb	0	; () banked
 25180  01241A  6F83               	movwf	??_Console_Render& (0+255),b
 25181  01241C  0E02               	movlw	high _lBuffer
 25182  01241E  0100               	movlb	0	; () banked
 25183  012420  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 25184  012422  50F3               	movf	prodl,w,c
 25185  012424  0100               	movlb	0	; () banked
 25186  012426  2783               	addwf	??_Console_Render& (0+255),f,b
 25187  012428  50F4               	movf	prodh,w,c
 25188  01242A  0100               	movlb	0	; () banked
 25189  01242C  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 25190  01242E  0100               	movlb	0	; () banked
 25191  012430  518A               	movf	Console_Render@x& (0+255),w,b
 25192  012432  0D01               	mullw	1
 25193  012434  50F3               	movf	prodl,w,c
 25194  012436  0100               	movlb	0	; () banked
 25195  012438  2583               	addwf	??_Console_Render& (0+255),w,b
 25196  01243A  6ED9               	movwf	fsr2l,c
 25197  01243C  50F4               	movf	prodh,w,c
 25198  01243E  0100               	movlb	0	; () banked
 25199  012440  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 25200  012442  6EDA               	movwf	fsr2h,c
 25201  012444  0E7F               	movlw	127
 25202  012446  16DF               	andwf	indf2,f,c
 25203                           
 25204                           ;Console.c: 401: if (lBuffer[y][x])
 25205  012448  0100               	movlb	0	; () banked
 25206  01244A  518B               	movf	Console_Render@y& (0+255),w,b
 25207  01244C  0D14               	mullw	20
 25208  01244E  0E85               	movlw	low _lBuffer
 25209  012450  0100               	movlb	0	; () banked
 25210  012452  6F83               	movwf	??_Console_Render& (0+255),b
 25211  012454  0E02               	movlw	high _lBuffer
 25212  012456  0100               	movlb	0	; () banked
 25213  012458  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 25214  01245A  50F3               	movf	prodl,w,c
 25215  01245C  0100               	movlb	0	; () banked
 25216  01245E  2783               	addwf	??_Console_Render& (0+255),f,b
 25217  012460  50F4               	movf	prodh,w,c
 25218  012462  0100               	movlb	0	; () banked
 25219  012464  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 25220  012466  0100               	movlb	0	; () banked
 25221  012468  518A               	movf	Console_Render@x& (0+255),w,b
 25222  01246A  0D01               	mullw	1
 25223  01246C  50F3               	movf	prodl,w,c
 25224  01246E  0100               	movlb	0	; () banked
 25225  012470  2583               	addwf	??_Console_Render& (0+255),w,b
 25226  012472  6ED9               	movwf	fsr2l,c
 25227  012474  50F4               	movf	prodh,w,c
 25228  012476  0100               	movlb	0	; () banked
 25229  012478  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 25230  01247A  6EDA               	movwf	fsr2h,c
 25231  01247C  50DF               	movf	indf2,w,c
 25232  01247E  B4D8               	btfsc	status,2,c
 25233  012480  D04A               	goto	l1062
 25234                           
 25235                           ; BSR set to: 0
 25236                           ;Console.c: 402: {
 25237                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 25238  012482  C0E0  F069         	movff	_gBackcolour,LCD_FillRectangle@pColour
 25239  012486  C0E1  F06A         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 25240  01248A  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 25241  01248E  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 25242  012492  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 25243  012496  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 25244  01249A  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 25245  01249E  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 25246  0124A2  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 25247  0124A6  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 25248  0124AA  EC0F  F0AD         	call	_LCD_FillRectangle	;wreg free
 25249                           
 25250                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 25251  0124AE  0100               	movlb	0	; () banked
 25252  0124B0  518B               	movf	Console_Render@y& (0+255),w,b
 25253  0124B2  0D14               	mullw	20
 25254  0124B4  0E85               	movlw	low _lBuffer
 25255  0124B6  0100               	movlb	0	; () banked
 25256  0124B8  6F83               	movwf	??_Console_Render& (0+255),b
 25257  0124BA  0E02               	movlw	high _lBuffer
 25258  0124BC  0100               	movlb	0	; () banked
 25259  0124BE  6F84               	movwf	(??_Console_Render+1)& (0+255),b
 25260  0124C0  50F3               	movf	prodl,w,c
 25261  0124C2  0100               	movlb	0	; () banked
 25262  0124C4  2783               	addwf	??_Console_Render& (0+255),f,b
 25263  0124C6  50F4               	movf	prodh,w,c
 25264  0124C8  0100               	movlb	0	; () banked
 25265  0124CA  2384               	addwfc	(??_Console_Render+1)& (0+255),f,b
 25266  0124CC  0100               	movlb	0	; () banked
 25267  0124CE  518A               	movf	Console_Render@x& (0+255),w,b
 25268  0124D0  0D01               	mullw	1
 25269  0124D2  50F3               	movf	prodl,w,c
 25270  0124D4  0100               	movlb	0	; () banked
 25271  0124D6  2583               	addwf	??_Console_Render& (0+255),w,b
 25272  0124D8  6ED9               	movwf	fsr2l,c
 25273  0124DA  50F4               	movf	prodh,w,c
 25274  0124DC  0100               	movlb	0	; () banked
 25275  0124DE  2184               	addwfc	(??_Console_Render+1)& (0+255),w,b
 25276  0124E0  6EDA               	movwf	fsr2h,c
 25277  0124E2  50DF               	movf	indf2,w,c
 25278  0124E4  ECFA  F0A2         	call	_Console_MakeField
 25279  0124E8  C065  F072         	movff	?_Console_MakeField,LCD_DrawField@pField
 25280  0124EC  C066  F073         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 25281  0124F0  C086  F074         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 25282  0124F4  C087  F075         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 25283  0124F8  C088  F076         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 25284  0124FC  C089  F077         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 25285  012500  C1E9  F078         	movff	_gCharSize,LCD_DrawField@pSize
 25286  012504  C1EA  F079         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 25287  012508  C1EB  F07A         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 25288  01250C  C1EC  F07B         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 25289  012510  EC45  F0A8         	call	_LCD_DrawField	;wreg free
 25290                           
 25291                           ;Console.c: 405: }
 25292  012514  D017               	goto	l1063
 25293  012516                     l1062:
 25294                           
 25295                           ;Console.c: 406: else
 25296                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 25297  012516  0E00               	movlw	0
 25298  012518  0100               	movlb	0	; () banked
 25299  01251A  6F6A               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 25300  01251C  0E00               	movlw	0
 25301  01251E  6F69               	movwf	LCD_FillRectangle@pColour& (0+255),b
 25302  012520  C086  F06B         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 25303  012524  C087  F06C         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 25304  012528  C088  F06D         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 25305  01252C  C089  F06E         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 25306  012530  C1E9  F06F         	movff	_gCharSize,LCD_FillRectangle@pSize
 25307  012534  C1EA  F070         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 25308  012538  C1EB  F071         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 25309  01253C  C1EC  F072         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 25310  012540  EC0F  F0AD         	call	_LCD_FillRectangle	;wreg free
 25311  012544                     l1063:
 25312                           
 25313                           ;Console.c: 408: }
 25314                           ;Console.c: 409: lCursor.x += (5 + 1);
 25315  012544  0E06               	movlw	6
 25316  012546  0100               	movlb	0	; () banked
 25317  012548  2786               	addwf	Console_Render@lCursor& (0+255),f,b
 25318  01254A  0E00               	movlw	0
 25319  01254C  2387               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 25320                           
 25321                           ; BSR set to: 0
 25322  01254E  0100               	movlb	0	; () banked
 25323  012550  2B8A               	incf	Console_Render@x& (0+255),f,b
 25324  012552  D73D               	goto	l14312
 25325  012554                     u12210:
 25326                           
 25327                           ; BSR set to: 0
 25328                           ;Console.c: 410: }
 25329                           ;Console.c: 411: lCursor.y += (7 + 1);
 25330                           
 25331                           ; BSR set to: 0
 25332  012554  0E08               	movlw	8
 25333  012556  0100               	movlb	0	; () banked
 25334  012558  2788               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 25335  01255A  0E00               	movlw	0
 25336  01255C  2389               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 25337                           
 25338                           ; BSR set to: 0
 25339                           ;Console.c: 412: lCursor.x = 6;
 25340  01255E  0E00               	movlw	0
 25341  012560  0100               	movlb	0	; () banked
 25342  012562  6F87               	movwf	(Console_Render@lCursor+1)& (0+255),b
 25343  012564  0E06               	movlw	6
 25344  012566  6F86               	movwf	Console_Render@lCursor& (0+255),b
 25345                           
 25346                           ; BSR set to: 0
 25347  012568  0100               	movlb	0	; () banked
 25348  01256A  2B8B               	incf	Console_Render@y& (0+255),f,b
 25349  01256C                     l1057:
 25350                           
 25351                           ; BSR set to: 0
 25352                           
 25353                           ; BSR set to: 0
 25354  01256C  0100               	movlb	0	; () banked
 25355  01256E  518B               	movf	Console_Render@y& (0+255),w,b
 25356  012570  0100               	movlb	0	; () banked
 25357  012572  5DE7               	subwf	_lBufferY& (0+255),w,b
 25358  012574  B0D8               	btfsc	status,0,c
 25359  012576  D71B               	goto	l1058
 25360                           
 25361                           ; BSR set to: 0
 25362                           ;Console.c: 413: }
 25363                           ;Console.c: 415: if (clearall)
 25364                           
 25365                           ; BSR set to: 0
 25366  012578  0100               	movlb	0	; () banked
 25367  01257A  51E9               	movf	_clearall& (0+255),w,b
 25368  01257C  B4D8               	btfsc	status,2,c
 25369  01257E  0012               	return	
 25370                           
 25371                           ; BSR set to: 0
 25372                           ;Console.c: 416: {
 25373                           ;Console.c: 417: clearall = 0;
 25374  012580  0E00               	movlw	0
 25375  012582  0100               	movlb	0	; () banked
 25376  012584  6FE9               	movwf	_clearall& (0+255),b
 25377                           
 25378                           ; BSR set to: 0
 25379                           ;Console.c: 418: lBufferY = temp;
 25380  012586  C085  F0E7         	movff	Console_Render@temp,_lBufferY
 25381                           
 25382                           ; BSR set to: 0
 25383  01258A  0012               	return	
 25384  01258C                     __end_of_Console_Render:
 25385                           	opt stack 0
 25386                           tosu	equ	0xFFF
 25387                           tosh	equ	0xFFE
 25388                           tosl	equ	0xFFD
 25389                           pclath	equ	0xFFA
 25390                           tblptru	equ	0xFF8
 25391                           tblptrh	equ	0xFF7
 25392                           tblptrl	equ	0xFF6
 25393                           tablat	equ	0xFF5
 25394                           prodh	equ	0xFF4
 25395                           prodl	equ	0xFF3
 25396                           intcon	equ	0xFF2
 25397                           indf0	equ	0xFEF
 25398                           postinc0	equ	0xFEE
 25399                           fsr0h	equ	0xFEA
 25400                           fsr0l	equ	0xFE9
 25401                           wreg	equ	0xFE8
 25402                           indf1	equ	0xFE7
 25403                           postdec1	equ	0xFE5
 25404                           fsr1h	equ	0xFE2
 25405                           fsr1l	equ	0xFE1
 25406                           indf2	equ	0xFDF
 25407                           postinc2	equ	0xFDE
 25408                           postdec2	equ	0xFDD
 25409                           plusw2	equ	0xFDB
 25410                           fsr2h	equ	0xFDA
 25411                           fsr2l	equ	0xFD9
 25412                           status	equ	0xFD8
 25413                           
 25414 ;; *************** function _LCD_FillRectangle *****************
 25415 ;; Defined at:
 25416 ;;		line 318 in file "Library/LCD.c"
 25417 ;; Parameters:    Size  Location     Type
 25418 ;;  pColour         2    9[BANK0 ] unsigned short 
 25419 ;;  pPoint          4   11[BANK0 ] struct Point
 25420 ;;  pSize           4   15[BANK0 ] struct Point
 25421 ;; Auto vars:     Size  Location     Type
 25422 ;;  j               1   22[BANK0 ] unsigned char 
 25423 ;;  i               1   21[BANK0 ] unsigned char 
 25424 ;; Return value:  Size  Location     Type
 25425 ;;                  1    wreg      void 
 25426 ;; Registers used:
 25427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25428 ;; Tracked objects:
 25429 ;;		On entry : 0/0
 25430 ;;		On exit  : 0/0
 25431 ;;		Unchanged: 0/0
 25432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25433 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25434 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25435 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25436 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25437 ;;Total ram usage:       14 bytes
 25438 ;; Hardware stack levels used:    1
 25439 ;; Hardware stack levels required when called:   10
 25440 ;; This function calls:
 25441 ;;		_LCD_Word_Write
 25442 ;;		_Set_Addr_Window
 25443 ;; This function is called by:
 25444 ;;		_Console_Render
 25445 ;;		_Console_ClearLine
 25446 ;; This function uses a non-reentrant model
 25447 ;;
 25448                           
 25449                           	psect	text128
 25450  015A1E                     __ptext128:
 25451                           	opt stack 0
 25452  015A1E                     _LCD_FillRectangle:
 25453                           	opt stack 19
 25454                           
 25455                           ;LCD.c: 320: UINT8 i = 0x00;
 25456                           
 25457                           ; BSR set to: 0
 25458                           ;incstack = 0
 25459  015A1E  0E00               	movlw	0
 25460  015A20  0100               	movlb	0	; () banked
 25461  015A22  6F75               	movwf	LCD_FillRectangle@i& (0+255),b
 25462                           
 25463                           ;LCD.c: 321: UINT8 j = 0x00;
 25464  015A24  0E00               	movlw	0
 25465  015A26  0100               	movlb	0	; () banked
 25466  015A28  6F76               	movwf	LCD_FillRectangle@j& (0+255),b
 25467                           
 25468                           ; BSR set to: 0
 25469                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 25470  015A2A  C06D  F065         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 25471  015A2E  0100               	movlb	0	; () banked
 25472  015A30  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 25473  015A32  0100               	movlb	0	; () banked
 25474  015A34  256F               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 25475  015A36  0100               	movlb	0	; () banked
 25476  015A38  6F73               	movwf	??_LCD_FillRectangle& (0+255),b
 25477  015A3A  0100               	movlb	0	; () banked
 25478  015A3C  0573               	decf	??_LCD_FillRectangle& (0+255),w,b
 25479  015A3E  0100               	movlb	0	; () banked
 25480  015A40  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 25481  015A42  0100               	movlb	0	; () banked
 25482  015A44  516D               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 25483  015A46  0100               	movlb	0	; () banked
 25484  015A48  2571               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 25485  015A4A  0100               	movlb	0	; () banked
 25486  015A4C  6F74               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 25487  015A4E  0100               	movlb	0	; () banked
 25488  015A50  0574               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 25489  015A52  0100               	movlb	0	; () banked
 25490  015A54  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 25491  015A56  0100               	movlb	0	; () banked
 25492  015A58  516B               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 25493  015A5A  ECA2  F0A6         	call	_Set_Addr_Window
 25494                           
 25495                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 25496  015A5E  C071  F076         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 25497  015A62                     l13712:
 25498  015A62  0100               	movlb	0	; () banked
 25499  015A64  5176               	movf	LCD_FillRectangle@j& (0+255),w,b
 25500  015A66  0100               	movlb	0	; () banked
 25501  015A68  B4D8               	btfsc	status,2,c
 25502  015A6A  0012               	return	
 25503                           
 25504                           ; BSR set to: 0
 25505                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 25506                           
 25507                           ; BSR set to: 0
 25508  015A6C  C06F  F075         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 25509  015A70                     l13716:
 25510                           
 25511                           ; BSR set to: 0
 25512  015A70  0100               	movlb	0	; () banked
 25513  015A72  5175               	movf	LCD_FillRectangle@i& (0+255),w,b
 25514  015A74  0100               	movlb	0	; () banked
 25515  015A76  B4D8               	btfsc	status,2,c
 25516  015A78  D009               	goto	u11430
 25517                           
 25518                           ; BSR set to: 0
 25519                           ;LCD.c: 333: LCD_Word_Write(pColour);
 25520                           
 25521                           ; BSR set to: 0
 25522                           
 25523                           ; BSR set to: 0
 25524  015A7A  C069  F065         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 25525  015A7E  C06A  F066         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 25526  015A82  EC50  F0B4         	call	_LCD_Word_Write	;wreg free
 25527  015A86  0100               	movlb	0	; () banked
 25528  015A88  0775               	decf	LCD_FillRectangle@i& (0+255),f,b
 25529  015A8A  D7F2               	goto	l13716
 25530  015A8C                     u11430:
 25531                           
 25532                           ; BSR set to: 0
 25533                           
 25534                           ; BSR set to: 0
 25535  015A8C  0100               	movlb	0	; () banked
 25536  015A8E  0776               	decf	LCD_FillRectangle@j& (0+255),f,b
 25537  015A90  D7E8               	goto	l13712
 25538  015A92                     __end_of_LCD_FillRectangle:
 25539                           	opt stack 0
 25540                           tosu	equ	0xFFF
 25541                           tosh	equ	0xFFE
 25542                           tosl	equ	0xFFD
 25543                           pclath	equ	0xFFA
 25544                           tblptru	equ	0xFF8
 25545                           tblptrh	equ	0xFF7
 25546                           tblptrl	equ	0xFF6
 25547                           tablat	equ	0xFF5
 25548                           prodh	equ	0xFF4
 25549                           prodl	equ	0xFF3
 25550                           intcon	equ	0xFF2
 25551                           indf0	equ	0xFEF
 25552                           postinc0	equ	0xFEE
 25553                           fsr0h	equ	0xFEA
 25554                           fsr0l	equ	0xFE9
 25555                           wreg	equ	0xFE8
 25556                           indf1	equ	0xFE7
 25557                           postdec1	equ	0xFE5
 25558                           fsr1h	equ	0xFE2
 25559                           fsr1l	equ	0xFE1
 25560                           indf2	equ	0xFDF
 25561                           postinc2	equ	0xFDE
 25562                           postdec2	equ	0xFDD
 25563                           plusw2	equ	0xFDB
 25564                           fsr2h	equ	0xFDA
 25565                           fsr2l	equ	0xFD9
 25566                           status	equ	0xFD8
 25567                           
 25568 ;; *************** function _LCD_DrawField *****************
 25569 ;; Defined at:
 25570 ;;		line 393 in file "Library/LCD.c"
 25571 ;; Parameters:    Size  Location     Type
 25572 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 25573 ;;		 -> Console_MakeField@Fill(70), 
 25574 ;;  pPoint          4   20[BANK0 ] struct Point
 25575 ;;  pSize           4   24[BANK0 ] struct Point
 25576 ;; Auto vars:     Size  Location     Type
 25577 ;;  count           2   30[BANK0 ] unsigned short 
 25578 ;;  i               1   34[BANK0 ] unsigned char 
 25579 ;;  ymax            1   33[BANK0 ] unsigned char 
 25580 ;;  xmax            1   32[BANK0 ] unsigned char 
 25581 ;; Return value:  Size  Location     Type
 25582 ;;                  1    wreg      void 
 25583 ;; Registers used:
 25584 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25585 ;; Tracked objects:
 25586 ;;		On entry : 0/0
 25587 ;;		On exit  : 0/0
 25588 ;;		Unchanged: 0/0
 25589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25590 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25591 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25592 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25593 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25594 ;;Total ram usage:       17 bytes
 25595 ;; Hardware stack levels used:    1
 25596 ;; Hardware stack levels required when called:   10
 25597 ;; This function calls:
 25598 ;;		_LCD_Word_Write
 25599 ;;		_Set_Addr_Window
 25600 ;;		___wmul
 25601 ;; This function is called by:
 25602 ;;		_Console_Render
 25603 ;; This function uses a non-reentrant model
 25604 ;;
 25605                           
 25606                           	psect	text129
 25607  01508A                     __ptext129:
 25608                           	opt stack 0
 25609  01508A                     _LCD_DrawField:
 25610                           	opt stack 19
 25611                           
 25612                           ;LCD.c: 396: UINT8 i = 0x00;
 25613                           
 25614                           ; BSR set to: 0
 25615                           ;incstack = 0
 25616  01508A  0E00               	movlw	0
 25617  01508C  0100               	movlb	0	; () banked
 25618  01508E  6F82               	movwf	LCD_DrawField@i& (0+255),b
 25619                           
 25620                           ; BSR set to: 0
 25621                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 25622  015090  0100               	movlb	0	; () banked
 25623  015092  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 25624  015094  0100               	movlb	0	; () banked
 25625  015096  2578               	addwf	LCD_DrawField@pSize& (0+255),w,b
 25626  015098  0100               	movlb	0	; () banked
 25627  01509A  6F80               	movwf	LCD_DrawField@xmax& (0+255),b
 25628                           
 25629                           ; BSR set to: 0
 25630                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 25631  01509C  0100               	movlb	0	; () banked
 25632  01509E  5176               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 25633  0150A0  0100               	movlb	0	; () banked
 25634  0150A2  257A               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 25635  0150A4  0100               	movlb	0	; () banked
 25636  0150A6  6F81               	movwf	LCD_DrawField@ymax& (0+255),b
 25637                           
 25638                           ; BSR set to: 0
 25639                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 25640  0150A8  C07A  F060         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 25641  0150AC  C07B  F061         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 25642  0150B0  C078  F062         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 25643  0150B4  C079  F063         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 25644  0150B8  EC94  F0B2         	call	___wmul	;wreg free
 25645  0150BC  C060  F07E         	movff	?___wmul,LCD_DrawField@count
 25646  0150C0  C061  F07F         	movff	?___wmul+1,LCD_DrawField@count+1
 25647                           
 25648                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 25649  0150C4  C076  F065         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 25650  0150C8  0100               	movlb	0	; () banked
 25651  0150CA  0580               	decf	LCD_DrawField@xmax& (0+255),w,b
 25652  0150CC  0100               	movlb	0	; () banked
 25653  0150CE  6F66               	movwf	Set_Addr_Window@xe& (0+255),b
 25654  0150D0  0100               	movlb	0	; () banked
 25655  0150D2  0581               	decf	LCD_DrawField@ymax& (0+255),w,b
 25656  0150D4  0100               	movlb	0	; () banked
 25657  0150D6  6F67               	movwf	Set_Addr_Window@ye& (0+255),b
 25658  0150D8  0100               	movlb	0	; () banked
 25659  0150DA  5174               	movf	LCD_DrawField@pPoint& (0+255),w,b
 25660  0150DC  ECA2  F0A6         	call	_Set_Addr_Window
 25661                           
 25662                           ;LCD.c: 403: for(i = 0; i < count; i++)
 25663  0150E0  0E00               	movlw	0
 25664  0150E2  0100               	movlb	0	; () banked
 25665  0150E4  6F82               	movwf	LCD_DrawField@i& (0+255),b
 25666  0150E6  D013               	goto	l183
 25667  0150E8                     
 25668                           ; BSR set to: 0
 25669                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 25670                           
 25671                           ; BSR set to: 0
 25672  0150E8  0100               	movlb	0	; () banked
 25673  0150EA  5182               	movf	LCD_DrawField@i& (0+255),w,b
 25674  0150EC  0D02               	mullw	2
 25675  0150EE  50F3               	movf	prodl,w,c
 25676  0150F0  0100               	movlb	0	; () banked
 25677  0150F2  2572               	addwf	LCD_DrawField@pField& (0+255),w,b
 25678  0150F4  6ED9               	movwf	fsr2l,c
 25679  0150F6  50F4               	movf	prodh,w,c
 25680  0150F8  0100               	movlb	0	; () banked
 25681  0150FA  2173               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 25682  0150FC  6EDA               	movwf	fsr2h,c
 25683  0150FE  CFDE F065          	movff	postinc2,LCD_Word_Write@value
 25684  015102  CFDD F066          	movff	postdec2,LCD_Word_Write@value+1
 25685  015106  EC50  F0B4         	call	_LCD_Word_Write	;wreg free
 25686  01510A  0100               	movlb	0	; () banked
 25687  01510C  2B82               	incf	LCD_DrawField@i& (0+255),f,b
 25688  01510E                     l183:
 25689                           
 25690                           ; BSR set to: 0
 25691                           
 25692                           ; BSR set to: 0
 25693  01510E  0100               	movlb	0	; () banked
 25694  015110  5182               	movf	LCD_DrawField@i& (0+255),w,b
 25695  015112  0100               	movlb	0	; () banked
 25696  015114  6F7C               	movwf	??_LCD_DrawField& (0+255),b
 25697  015116  6B7D               	clrf	(??_LCD_DrawField+1)& (0+255),b
 25698  015118  0100               	movlb	0	; () banked
 25699  01511A  517E               	movf	LCD_DrawField@count& (0+255),w,b
 25700  01511C  0100               	movlb	0	; () banked
 25701  01511E  5D7C               	subwf	??_LCD_DrawField& (0+255),w,b
 25702  015120  0100               	movlb	0	; () banked
 25703  015122  517F               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 25704  015124  0100               	movlb	0	; () banked
 25705  015126  597D               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 25706  015128  B0D8               	btfsc	status,0,c
 25707  01512A  0012               	return	
 25708  01512C  D7DD               	goto	l184
 25709  01512E                     __end_of_LCD_DrawField:
 25710                           	opt stack 0
 25711                           tosu	equ	0xFFF
 25712                           tosh	equ	0xFFE
 25713                           tosl	equ	0xFFD
 25714                           pclath	equ	0xFFA
 25715                           tblptru	equ	0xFF8
 25716                           tblptrh	equ	0xFF7
 25717                           tblptrl	equ	0xFF6
 25718                           tablat	equ	0xFF5
 25719                           prodh	equ	0xFF4
 25720                           prodl	equ	0xFF3
 25721                           intcon	equ	0xFF2
 25722                           indf0	equ	0xFEF
 25723                           postinc0	equ	0xFEE
 25724                           fsr0h	equ	0xFEA
 25725                           fsr0l	equ	0xFE9
 25726                           wreg	equ	0xFE8
 25727                           indf1	equ	0xFE7
 25728                           postdec1	equ	0xFE5
 25729                           fsr1h	equ	0xFE2
 25730                           fsr1l	equ	0xFE1
 25731                           indf2	equ	0xFDF
 25732                           postinc2	equ	0xFDE
 25733                           postdec2	equ	0xFDD
 25734                           plusw2	equ	0xFDB
 25735                           fsr2h	equ	0xFDA
 25736                           fsr2l	equ	0xFD9
 25737                           status	equ	0xFD8
 25738                           
 25739 ;; *************** function ___wmul *****************
 25740 ;; Defined at:
 25741 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 25742 ;; Parameters:    Size  Location     Type
 25743 ;;  multiplier      2    0[BANK0 ] unsigned int 
 25744 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 25745 ;; Auto vars:     Size  Location     Type
 25746 ;;  product         2    4[BANK0 ] unsigned int 
 25747 ;; Return value:  Size  Location     Type
 25748 ;;                  2    0[BANK0 ] unsigned int 
 25749 ;; Registers used:
 25750 ;;		wreg, status,2, status,0, prodl, prodh
 25751 ;; Tracked objects:
 25752 ;;		On entry : 0/0
 25753 ;;		On exit  : 0/0
 25754 ;;		Unchanged: 0/0
 25755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25756 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25757 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25759 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25760 ;;Total ram usage:        6 bytes
 25761 ;; Hardware stack levels used:    1
 25762 ;; Hardware stack levels required when called:    7
 25763 ;; This function calls:
 25764 ;;		Nothing
 25765 ;; This function is called by:
 25766 ;;		_LCD_DrawField
 25767 ;;		_main
 25768 ;; This function uses a non-reentrant model
 25769 ;;
 25770                           
 25771                           	psect	text130
 25772  016528                     __ptext130:
 25773                           	opt stack 0
 25774  016528                     ___wmul:
 25775                           	opt stack 23
 25776                           
 25777                           ; BSR set to: 0
 25778                           ;incstack = 0
 25779  016528  0100               	movlb	0	; () banked
 25780  01652A  5160               	movf	___wmul@multiplier& (0+255),w,b
 25781  01652C  0100               	movlb	0	; () banked
 25782  01652E  0362               	mulwf	___wmul@multiplicand& (0+255),b
 25783  016530  CFF3 F064          	movff	prodl,___wmul@product
 25784  016534  CFF4 F065          	movff	prodh,___wmul@product+1
 25785  016538  0100               	movlb	0	; () banked
 25786  01653A  5160               	movf	___wmul@multiplier& (0+255),w,b
 25787  01653C  0100               	movlb	0	; () banked
 25788  01653E  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 25789  016540  50F3               	movf	prodl,w,c
 25790  016542  0100               	movlb	0	; () banked
 25791  016544  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 25792  016546  0100               	movlb	0	; () banked
 25793  016548  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 25794  01654A  0100               	movlb	0	; () banked
 25795  01654C  0362               	mulwf	___wmul@multiplicand& (0+255),b
 25796  01654E  50F3               	movf	prodl,w,c
 25797  016550  0100               	movlb	0	; () banked
 25798  016552  2765               	addwf	(___wmul@product+1)& (0+255),f,b
 25799                           
 25800                           ; BSR set to: 0
 25801  016554  C064  F060         	movff	___wmul@product,?___wmul
 25802  016558  C065  F061         	movff	___wmul@product+1,?___wmul+1
 25803  01655C  0012               	return	
 25804  01655E                     __end_of___wmul:
 25805                           	opt stack 0
 25806                           tosu	equ	0xFFF
 25807                           tosh	equ	0xFFE
 25808                           tosl	equ	0xFFD
 25809                           pclath	equ	0xFFA
 25810                           tblptru	equ	0xFF8
 25811                           tblptrh	equ	0xFF7
 25812                           tblptrl	equ	0xFF6
 25813                           tablat	equ	0xFF5
 25814                           prodh	equ	0xFF4
 25815                           prodl	equ	0xFF3
 25816                           intcon	equ	0xFF2
 25817                           indf0	equ	0xFEF
 25818                           postinc0	equ	0xFEE
 25819                           fsr0h	equ	0xFEA
 25820                           fsr0l	equ	0xFE9
 25821                           wreg	equ	0xFE8
 25822                           indf1	equ	0xFE7
 25823                           postdec1	equ	0xFE5
 25824                           fsr1h	equ	0xFE2
 25825                           fsr1l	equ	0xFE1
 25826                           indf2	equ	0xFDF
 25827                           postinc2	equ	0xFDE
 25828                           postdec2	equ	0xFDD
 25829                           plusw2	equ	0xFDB
 25830                           fsr2h	equ	0xFDA
 25831                           fsr2l	equ	0xFD9
 25832                           status	equ	0xFD8
 25833                           
 25834 ;; *************** function _Set_Addr_Window *****************
 25835 ;; Defined at:
 25836 ;;		line 214 in file "Library/LCD.c"
 25837 ;; Parameters:    Size  Location     Type
 25838 ;;  xs              1    wreg     unsigned char 
 25839 ;;  ys              1    5[BANK0 ] unsigned char 
 25840 ;;  xe              1    6[BANK0 ] unsigned char 
 25841 ;;  ye              1    7[BANK0 ] unsigned char 
 25842 ;; Auto vars:     Size  Location     Type
 25843 ;;  xs              1    8[BANK0 ] unsigned char 
 25844 ;; Return value:  Size  Location     Type
 25845 ;;                  1    wreg      void 
 25846 ;; Registers used:
 25847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25848 ;; Tracked objects:
 25849 ;;		On entry : 0/0
 25850 ;;		On exit  : 0/0
 25851 ;;		Unchanged: 0/0
 25852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25853 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25854 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25856 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25857 ;;Total ram usage:        4 bytes
 25858 ;; Hardware stack levels used:    1
 25859 ;; Hardware stack levels required when called:    9
 25860 ;; This function calls:
 25861 ;;		_LCD_Write
 25862 ;; This function is called by:
 25863 ;;		_LCD_Fill
 25864 ;;		_LCD_FillRectangle
 25865 ;;		_LCD_DrawField
 25866 ;;		_RAM_Address_Set
 25867 ;;		_LCD_DrawPixel
 25868 ;; This function uses a non-reentrant model
 25869 ;;
 25870                           
 25871                           	psect	text131
 25872  014D44                     __ptext131:
 25873                           	opt stack 0
 25874  014D44                     _Set_Addr_Window:
 25875                           	opt stack 19
 25876                           
 25877                           ; BSR set to: 0
 25878                           ;incstack = 0
 25879                           ;Set_Addr_Window@xs stored from wreg
 25880  014D44  0100               	movlb	0	; () banked
 25881  014D46  6F68               	movwf	Set_Addr_Window@xs& (0+255),b
 25882                           
 25883                           ;LCD.c: 216: ys+=2;
 25884  014D48  0E02               	movlw	2
 25885  014D4A  0100               	movlb	0	; () banked
 25886  014D4C  2765               	addwf	Set_Addr_Window@ys& (0+255),f,b
 25887                           
 25888                           ;LCD.c: 217: ye+=2;
 25889  014D4E  0E02               	movlw	2
 25890  014D50  0100               	movlb	0	; () banked
 25891  014D52  2767               	addwf	Set_Addr_Window@ye& (0+255),f,b
 25892                           
 25893                           ;LCD.c: 218: xs+=3;
 25894  014D54  0E03               	movlw	3
 25895  014D56  0100               	movlb	0	; () banked
 25896  014D58  2768               	addwf	Set_Addr_Window@xs& (0+255),f,b
 25897                           
 25898                           ;LCD.c: 219: xe+=3;
 25899  014D5A  0E03               	movlw	3
 25900  014D5C  0100               	movlb	0	; () banked
 25901  014D5E  2766               	addwf	Set_Addr_Window@xe& (0+255),f,b
 25902                           
 25903                           ; BSR set to: 0
 25904                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 25905  014D60  0E00               	movlw	0
 25906  014D62  0100               	movlb	0	; () banked
 25907  014D64  6F63               	movwf	LCD_Write@mode& (0+255),b
 25908  014D66  0E2A               	movlw	42
 25909  014D68  ECE5  F0B3         	call	_LCD_Write
 25910                           
 25911                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 25912  014D6C  0E01               	movlw	1
 25913  014D6E  0100               	movlb	0	; () banked
 25914  014D70  6F63               	movwf	LCD_Write@mode& (0+255),b
 25915  014D72  0E00               	movlw	0
 25916  014D74  ECE5  F0B3         	call	_LCD_Write
 25917                           
 25918                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 25919  014D78  0E01               	movlw	1
 25920  014D7A  0100               	movlb	0	; () banked
 25921  014D7C  6F63               	movwf	LCD_Write@mode& (0+255),b
 25922  014D7E  0100               	movlb	0	; () banked
 25923  014D80  5168               	movf	Set_Addr_Window@xs& (0+255),w,b
 25924  014D82  ECE5  F0B3         	call	_LCD_Write
 25925                           
 25926                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 25927  014D86  0E01               	movlw	1
 25928  014D88  0100               	movlb	0	; () banked
 25929  014D8A  6F63               	movwf	LCD_Write@mode& (0+255),b
 25930  014D8C  0E00               	movlw	0
 25931  014D8E  ECE5  F0B3         	call	_LCD_Write
 25932                           
 25933                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 25934  014D92  0E01               	movlw	1
 25935  014D94  0100               	movlb	0	; () banked
 25936  014D96  6F63               	movwf	LCD_Write@mode& (0+255),b
 25937  014D98  0100               	movlb	0	; () banked
 25938  014D9A  5166               	movf	Set_Addr_Window@xe& (0+255),w,b
 25939  014D9C  ECE5  F0B3         	call	_LCD_Write
 25940                           
 25941                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 25942  014DA0  0E00               	movlw	0
 25943  014DA2  0100               	movlb	0	; () banked
 25944  014DA4  6F63               	movwf	LCD_Write@mode& (0+255),b
 25945  014DA6  0E2B               	movlw	43
 25946  014DA8  ECE5  F0B3         	call	_LCD_Write
 25947                           
 25948                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 25949  014DAC  0E01               	movlw	1
 25950  014DAE  0100               	movlb	0	; () banked
 25951  014DB0  6F63               	movwf	LCD_Write@mode& (0+255),b
 25952  014DB2  0E00               	movlw	0
 25953  014DB4  ECE5  F0B3         	call	_LCD_Write
 25954                           
 25955                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 25956  014DB8  0E01               	movlw	1
 25957  014DBA  0100               	movlb	0	; () banked
 25958  014DBC  6F63               	movwf	LCD_Write@mode& (0+255),b
 25959  014DBE  0100               	movlb	0	; () banked
 25960  014DC0  5165               	movf	Set_Addr_Window@ys& (0+255),w,b
 25961  014DC2  ECE5  F0B3         	call	_LCD_Write
 25962                           
 25963                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 25964  014DC6  0E01               	movlw	1
 25965  014DC8  0100               	movlb	0	; () banked
 25966  014DCA  6F63               	movwf	LCD_Write@mode& (0+255),b
 25967  014DCC  0E00               	movlw	0
 25968  014DCE  ECE5  F0B3         	call	_LCD_Write
 25969                           
 25970                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 25971  014DD2  0E01               	movlw	1
 25972  014DD4  0100               	movlb	0	; () banked
 25973  014DD6  6F63               	movwf	LCD_Write@mode& (0+255),b
 25974  014DD8  0100               	movlb	0	; () banked
 25975  014DDA  5167               	movf	Set_Addr_Window@ye& (0+255),w,b
 25976  014DDC  ECE5  F0B3         	call	_LCD_Write
 25977                           
 25978                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 25979  014DE0  0E00               	movlw	0
 25980  014DE2  0100               	movlb	0	; () banked
 25981  014DE4  6F63               	movwf	LCD_Write@mode& (0+255),b
 25982  014DE6  0E2C               	movlw	44
 25983  014DE8  ECE5  F0B3         	call	_LCD_Write
 25984  014DEC  0012               	return		;funcret
 25985  014DEE                     __end_of_Set_Addr_Window:
 25986                           	opt stack 0
 25987                           tosu	equ	0xFFF
 25988                           tosh	equ	0xFFE
 25989                           tosl	equ	0xFFD
 25990                           pclath	equ	0xFFA
 25991                           tblptru	equ	0xFF8
 25992                           tblptrh	equ	0xFF7
 25993                           tblptrl	equ	0xFF6
 25994                           tablat	equ	0xFF5
 25995                           prodh	equ	0xFF4
 25996                           prodl	equ	0xFF3
 25997                           intcon	equ	0xFF2
 25998                           indf0	equ	0xFEF
 25999                           postinc0	equ	0xFEE
 26000                           fsr0h	equ	0xFEA
 26001                           fsr0l	equ	0xFE9
 26002                           wreg	equ	0xFE8
 26003                           indf1	equ	0xFE7
 26004                           postdec1	equ	0xFE5
 26005                           fsr1h	equ	0xFE2
 26006                           fsr1l	equ	0xFE1
 26007                           indf2	equ	0xFDF
 26008                           postinc2	equ	0xFDE
 26009                           postdec2	equ	0xFDD
 26010                           plusw2	equ	0xFDB
 26011                           fsr2h	equ	0xFDA
 26012                           fsr2l	equ	0xFD9
 26013                           status	equ	0xFD8
 26014                           
 26015 ;; *************** function _LCD_Word_Write *****************
 26016 ;; Defined at:
 26017 ;;		line 198 in file "Library/LCD.c"
 26018 ;; Parameters:    Size  Location     Type
 26019 ;;  value           2    5[BANK0 ] unsigned short 
 26020 ;; Auto vars:     Size  Location     Type
 26021 ;;		None
 26022 ;; Return value:  Size  Location     Type
 26023 ;;                  1    wreg      void 
 26024 ;; Registers used:
 26025 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26026 ;; Tracked objects:
 26027 ;;		On entry : 0/0
 26028 ;;		On exit  : 0/0
 26029 ;;		Unchanged: 0/0
 26030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26032 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26034 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26035 ;;Total ram usage:        2 bytes
 26036 ;; Hardware stack levels used:    1
 26037 ;; Hardware stack levels required when called:    9
 26038 ;; This function calls:
 26039 ;;		_LCD_Write
 26040 ;; This function is called by:
 26041 ;;		_LCD_Fill
 26042 ;;		_LCD_FillRectangle
 26043 ;;		_LCD_DrawField
 26044 ;;		_LCD_DrawPixel
 26045 ;; This function uses a non-reentrant model
 26046 ;;
 26047                           
 26048                           	psect	text132
 26049  0168A0                     __ptext132:
 26050                           	opt stack 0
 26051  0168A0                     _LCD_Word_Write:
 26052                           	opt stack 19
 26053                           
 26054                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 26055                           
 26056                           ;incstack = 0
 26057  0168A0  0E01               	movlw	1
 26058  0168A2  0100               	movlb	0	; () banked
 26059  0168A4  6F63               	movwf	LCD_Write@mode& (0+255),b
 26060  0168A6  0100               	movlb	0	; () banked
 26061  0168A8  5166               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 26062  0168AA  ECE5  F0B3         	call	_LCD_Write
 26063                           
 26064                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 26065  0168AE  0E01               	movlw	1
 26066  0168B0  0100               	movlb	0	; () banked
 26067  0168B2  6F63               	movwf	LCD_Write@mode& (0+255),b
 26068  0168B4  0100               	movlb	0	; () banked
 26069  0168B6  5165               	movf	LCD_Word_Write@value& (0+255),w,b
 26070  0168B8  ECE5  F0B3         	call	_LCD_Write
 26071  0168BC  0012               	return		;funcret
 26072  0168BE                     __end_of_LCD_Word_Write:
 26073                           	opt stack 0
 26074                           tosu	equ	0xFFF
 26075                           tosh	equ	0xFFE
 26076                           tosl	equ	0xFFD
 26077                           pclath	equ	0xFFA
 26078                           tblptru	equ	0xFF8
 26079                           tblptrh	equ	0xFF7
 26080                           tblptrl	equ	0xFF6
 26081                           tablat	equ	0xFF5
 26082                           prodh	equ	0xFF4
 26083                           prodl	equ	0xFF3
 26084                           intcon	equ	0xFF2
 26085                           indf0	equ	0xFEF
 26086                           postinc0	equ	0xFEE
 26087                           fsr0h	equ	0xFEA
 26088                           fsr0l	equ	0xFE9
 26089                           wreg	equ	0xFE8
 26090                           indf1	equ	0xFE7
 26091                           postdec1	equ	0xFE5
 26092                           fsr1h	equ	0xFE2
 26093                           fsr1l	equ	0xFE1
 26094                           indf2	equ	0xFDF
 26095                           postinc2	equ	0xFDE
 26096                           postdec2	equ	0xFDD
 26097                           plusw2	equ	0xFDB
 26098                           fsr2h	equ	0xFDA
 26099                           fsr2l	equ	0xFD9
 26100                           status	equ	0xFD8
 26101                           
 26102 ;; *************** function _LCD_Write *****************
 26103 ;; Defined at:
 26104 ;;		line 67 in file "Library/LCD.c"
 26105 ;; Parameters:    Size  Location     Type
 26106 ;;  value           1    wreg     unsigned char 
 26107 ;;  mode            1    3[BANK0 ] enum E6761
 26108 ;; Auto vars:     Size  Location     Type
 26109 ;;  value           1    4[BANK0 ] unsigned char 
 26110 ;; Return value:  Size  Location     Type
 26111 ;;                  1    wreg      void 
 26112 ;; Registers used:
 26113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26114 ;; Tracked objects:
 26115 ;;		On entry : 0/0
 26116 ;;		On exit  : 0/0
 26117 ;;		Unchanged: 0/0
 26118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26119 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26120 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26122 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26123 ;;Total ram usage:        2 bytes
 26124 ;; Hardware stack levels used:    1
 26125 ;; Hardware stack levels required when called:    8
 26126 ;; This function calls:
 26127 ;;		_Mode_Set
 26128 ;;		_SPI_Send
 26129 ;; This function is called by:
 26130 ;;		_LCD_Init
 26131 ;;		_LCD_Word_Write
 26132 ;;		_Set_Addr_Window
 26133 ;;		_Set_Rotation
 26134 ;;		_LCD_WriteCMD
 26135 ;;		_LCD_WriteData
 26136 ;;		_LCD_Data_Write
 26137 ;;		_LCD_Data_Write_4k
 26138 ;;		_Invert_Display
 26139 ;; This function uses a non-reentrant model
 26140 ;;
 26141                           
 26142                           	psect	text133
 26143  0167CA                     __ptext133:
 26144                           	opt stack 0
 26145  0167CA                     _LCD_Write:
 26146                           	opt stack 20
 26147                           
 26148                           ;incstack = 0
 26149                           ;LCD_Write@value stored from wreg
 26150  0167CA  0100               	movlb	0	; () banked
 26151  0167CC  6F64               	movwf	LCD_Write@value& (0+255),b
 26152                           
 26153                           ;LCD.c: 89: Mode_Set(mode);
 26154  0167CE  0100               	movlb	0	; () banked
 26155  0167D0  5163               	movf	LCD_Write@mode& (0+255),w,b
 26156  0167D2  ECEF  F0B4         	call	_Mode_Set
 26157                           
 26158                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 26159  0167D6  0E63               	movlw	low _SPI2
 26160  0167D8  0100               	movlb	0	; () banked
 26161  0167DA  6F60               	movwf	SPI_Send@pInput& (0+255),b
 26162  0167DC  0E01               	movlw	high _SPI2
 26163  0167DE  0100               	movlb	0	; () banked
 26164  0167E0  6F61               	movwf	(SPI_Send@pInput+1)& (0+255),b
 26165  0167E2  C064  F062         	movff	LCD_Write@value,SPI_Send@pData
 26166  0167E6  EC21  F0AE         	call	_SPI_Send	;wreg free
 26167  0167EA  0012               	return		;funcret
 26168  0167EC                     __end_of_LCD_Write:
 26169                           	opt stack 0
 26170                           tosu	equ	0xFFF
 26171                           tosh	equ	0xFFE
 26172                           tosl	equ	0xFFD
 26173                           pclath	equ	0xFFA
 26174                           tblptru	equ	0xFF8
 26175                           tblptrh	equ	0xFF7
 26176                           tblptrl	equ	0xFF6
 26177                           tablat	equ	0xFF5
 26178                           prodh	equ	0xFF4
 26179                           prodl	equ	0xFF3
 26180                           intcon	equ	0xFF2
 26181                           indf0	equ	0xFEF
 26182                           postinc0	equ	0xFEE
 26183                           fsr0h	equ	0xFEA
 26184                           fsr0l	equ	0xFE9
 26185                           wreg	equ	0xFE8
 26186                           indf1	equ	0xFE7
 26187                           postdec1	equ	0xFE5
 26188                           fsr1h	equ	0xFE2
 26189                           fsr1l	equ	0xFE1
 26190                           indf2	equ	0xFDF
 26191                           postinc2	equ	0xFDE
 26192                           postdec2	equ	0xFDD
 26193                           plusw2	equ	0xFDB
 26194                           fsr2h	equ	0xFDA
 26195                           fsr2l	equ	0xFD9
 26196                           status	equ	0xFD8
 26197                           
 26198 ;; *************** function _SPI_Send *****************
 26199 ;; Defined at:
 26200 ;;		line 226 in file "Library/SPI.c"
 26201 ;; Parameters:    Size  Location     Type
 26202 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 26203 ;;		 -> SPI1(11), SPI2(11), 
 26204 ;;  pData           1    2[BANK0 ] unsigned char 
 26205 ;; Auto vars:     Size  Location     Type
 26206 ;;		None
 26207 ;; Return value:  Size  Location     Type
 26208 ;;                  1    wreg      unsigned char 
 26209 ;; Registers used:
 26210 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26211 ;; Tracked objects:
 26212 ;;		On entry : 0/0
 26213 ;;		On exit  : 0/0
 26214 ;;		Unchanged: 0/0
 26215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26216 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26219 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26220 ;;Total ram usage:        3 bytes
 26221 ;; Hardware stack levels used:    1
 26222 ;; Hardware stack levels required when called:    7
 26223 ;; This function calls:
 26224 ;;		Nothing
 26225 ;; This function is called by:
 26226 ;;		_LCD_Write
 26227 ;;		_OutSeg
 26228 ;; This function uses a non-reentrant model
 26229 ;;
 26230                           
 26231                           	psect	text134
 26232  015C42                     __ptext134:
 26233                           	opt stack 0
 26234  015C42                     _SPI_Send:
 26235                           	opt stack 20
 26236                           
 26237                           ;SPI.c: 253: switch (pInput->mChannel)
 26238                           
 26239                           ;incstack = 0
 26240  015C42  D024               	goto	l678
 26241  015C44                     
 26242                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 26243  015C44  C039  FFD9         	movff	_PortC+4,fsr2l
 26244  015C48  C03A  FFDA         	movff	_PortC+5,fsr2h
 26245  015C4C  94DF               	bcf	indf2,2,c
 26246                           
 26247                           ;SPI.c: 257: SSP1BUF = pData;
 26248  015C4E  C062  FFC9         	movff	SPI_Send@pData,4041	;volatile
 26249  015C52  A0C7               	btfss	4039,0,c	;volatile
 26250  015C54  D7FE               	goto	l681
 26251                           
 26252                           ;SPI.c: 259: pData = SSP1BUF;
 26253  015C56  CFC9 F062          	movff	4041,SPI_Send@pData	;volatile
 26254                           
 26255                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 26256  015C5A  C039  FFD9         	movff	_PortC+4,fsr2l
 26257  015C5E  C03A  FFDA         	movff	_PortC+5,fsr2h
 26258  015C62  84DF               	bsf	indf2,2,c
 26259                           
 26260                           ;SPI.c: 261: return pData;
 26261                           ;	Return value of _SPI_Send is never used
 26262  015C64  0012               	return	
 26263  015C66                     
 26264                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 26265  015C66  C19A  FFD9         	movff	_PortD+4,fsr2l
 26266  015C6A  C19B  FFDA         	movff	_PortD+5,fsr2h
 26267  015C6E  0101               	movlb	1	; () banked
 26268  015C70  9EDF               	bcf	indf2,7,c
 26269                           
 26270                           ; BSR set to: 1
 26271                           ;SPI.c: 264: SSP2BUF = pData;
 26272  015C72  C062  FF6F         	movff	SPI_Send@pData,3951	;volatile
 26273  015C76                     
 26274                           ; BSR set to: 1
 26275  015C76  A06D               	btfss	3949,0,c	;volatile
 26276  015C78  D7FE               	goto	l686
 26277                           
 26278                           ;SPI.c: 266: pData = SSP2BUF;
 26279  015C7A  CF6F F062          	movff	3951,SPI_Send@pData	;volatile
 26280                           
 26281                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 26282  015C7E  C19A  FFD9         	movff	_PortD+4,fsr2l
 26283  015C82  C19B  FFDA         	movff	_PortD+5,fsr2h
 26284  015C86  0101               	movlb	1	; () banked
 26285  015C88  8EDF               	bsf	indf2,7,c
 26286                           
 26287                           ; BSR set to: 1
 26288                           ;SPI.c: 269: };
 26289                           
 26290                           ; BSR set to: 1
 26291                           ;SPI.c: 268: return pData;
 26292                           ;	Return value of _SPI_Send is never used
 26293  015C8A  0012               	return	
 26294  015C8C                     l678:
 26295                           
 26296                           ; BSR set to: 1
 26297  015C8C  0100               	movlb	0	; () banked
 26298  015C8E  EE20 F002          	lfsr	2,2
 26299  015C92  5160               	movf	SPI_Send@pInput& (0+255),w,b
 26300  015C94  26D9               	addwf	fsr2l,f,c
 26301  015C96  5161               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 26302  015C98  22DA               	addwfc	fsr2h,f,c
 26303  015C9A  50DF               	movf	indf2,w,c
 26304                           
 26305                           ; Switch size 1, requested type "space"
 26306                           ; Number of cases is 2, Range of values is 0 to 1
 26307                           ; switch strategies available:
 26308                           ; Name         Instructions Cycles
 26309                           ; simple_byte            7     4 (average)
 26310                           ;	Chosen strategy is simple_byte
 26311  015C9C  0A00               	xorlw	0	; case 0
 26312  015C9E  B4D8               	btfsc	status,2,c
 26313  015CA0  D7D1               	goto	l679
 26314  015CA2  0A01               	xorlw	1	; case 1
 26315  015CA4  A4D8               	btfss	status,2,c
 26316  015CA6  0012               	return	
 26317  015CA8  D7DE               	goto	l684
 26318  015CAA                     __end_of_SPI_Send:
 26319                           	opt stack 0
 26320                           tosu	equ	0xFFF
 26321                           tosh	equ	0xFFE
 26322                           tosl	equ	0xFFD
 26323                           pclath	equ	0xFFA
 26324                           tblptru	equ	0xFF8
 26325                           tblptrh	equ	0xFF7
 26326                           tblptrl	equ	0xFF6
 26327                           tablat	equ	0xFF5
 26328                           prodh	equ	0xFF4
 26329                           prodl	equ	0xFF3
 26330                           intcon	equ	0xFF2
 26331                           indf0	equ	0xFEF
 26332                           postinc0	equ	0xFEE
 26333                           fsr0h	equ	0xFEA
 26334                           fsr0l	equ	0xFE9
 26335                           wreg	equ	0xFE8
 26336                           indf1	equ	0xFE7
 26337                           postdec1	equ	0xFE5
 26338                           fsr1h	equ	0xFE2
 26339                           fsr1l	equ	0xFE1
 26340                           indf2	equ	0xFDF
 26341                           postinc2	equ	0xFDE
 26342                           postdec2	equ	0xFDD
 26343                           plusw2	equ	0xFDB
 26344                           fsr2h	equ	0xFDA
 26345                           fsr2l	equ	0xFD9
 26346                           status	equ	0xFD8
 26347                           
 26348 ;; *************** function _Mode_Set *****************
 26349 ;; Defined at:
 26350 ;;		line 40 in file "Library/LCD.c"
 26351 ;; Parameters:    Size  Location     Type
 26352 ;;  pMode           1    wreg     enum E6761
 26353 ;; Auto vars:     Size  Location     Type
 26354 ;;  pMode           1    0[BANK0 ] enum E6761
 26355 ;; Return value:  Size  Location     Type
 26356 ;;                  1    wreg      void 
 26357 ;; Registers used:
 26358 ;;		wreg
 26359 ;; Tracked objects:
 26360 ;;		On entry : 0/0
 26361 ;;		On exit  : 0/0
 26362 ;;		Unchanged: 0/0
 26363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26368 ;;Total ram usage:        1 bytes
 26369 ;; Hardware stack levels used:    1
 26370 ;; Hardware stack levels required when called:    7
 26371 ;; This function calls:
 26372 ;;		Nothing
 26373 ;; This function is called by:
 26374 ;;		_LCD_Write
 26375 ;; This function uses a non-reentrant model
 26376 ;;
 26377                           
 26378                           	psect	text135
 26379  0169DE                     __ptext135:
 26380                           	opt stack 0
 26381  0169DE                     _Mode_Set:
 26382                           	opt stack 20
 26383                           
 26384                           ;incstack = 0
 26385                           ;Mode_Set@pMode stored from wreg
 26386  0169DE  0100               	movlb	0	; () banked
 26387  0169E0  6F60               	movwf	Mode_Set@pMode& (0+255),b
 26388                           
 26389                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 26390  0169E2  0100               	movlb	0	; () banked
 26391  0169E4  B160               	btfsc	Mode_Set@pMode& (0+255),0,b
 26392  0169E6  D002               	bra	u9295
 26393  0169E8  9E85               	bcf	3973,7,c	;volatile
 26394  0169EA  D001               	bra	u9296
 26395  0169EC                     u9295:
 26396  0169EC  8E85               	bsf	3973,7,c	;volatile
 26397  0169EE                     u9296:
 26398  0169EE  0012               	return		;funcret
 26399  0169F0                     __end_of_Mode_Set:
 26400                           	opt stack 0
 26401                           tosu	equ	0xFFF
 26402                           tosh	equ	0xFFE
 26403                           tosl	equ	0xFFD
 26404                           pclath	equ	0xFFA
 26405                           tblptru	equ	0xFF8
 26406                           tblptrh	equ	0xFF7
 26407                           tblptrl	equ	0xFF6
 26408                           tablat	equ	0xFF5
 26409                           prodh	equ	0xFF4
 26410                           prodl	equ	0xFF3
 26411                           intcon	equ	0xFF2
 26412                           indf0	equ	0xFEF
 26413                           postinc0	equ	0xFEE
 26414                           fsr0h	equ	0xFEA
 26415                           fsr0l	equ	0xFE9
 26416                           wreg	equ	0xFE8
 26417                           indf1	equ	0xFE7
 26418                           postdec1	equ	0xFE5
 26419                           fsr1h	equ	0xFE2
 26420                           fsr1l	equ	0xFE1
 26421                           indf2	equ	0xFDF
 26422                           postinc2	equ	0xFDE
 26423                           postdec2	equ	0xFDD
 26424                           plusw2	equ	0xFDB
 26425                           fsr2h	equ	0xFDA
 26426                           fsr2l	equ	0xFD9
 26427                           status	equ	0xFD8
 26428                           
 26429 ;; *************** function _Console_MakeField *****************
 26430 ;; Defined at:
 26431 ;;		line 435 in file "Library/Console.c"
 26432 ;; Parameters:    Size  Location     Type
 26433 ;;  pInput          1    wreg     unsigned char 
 26434 ;; Auto vars:     Size  Location     Type
 26435 ;;  pInput          1   11[BANK0 ] unsigned char 
 26436 ;;  y               1   17[BANK0 ] unsigned char 
 26437 ;;  x               1   16[BANK0 ] unsigned char 
 26438 ;;  Column          2   12[BANK0 ] PTR struct Byte
 26439 ;;		 -> Font5x7(480), 
 26440 ;;  Index           2    9[BANK0 ] unsigned short 
 26441 ;; Return value:  Size  Location     Type
 26442 ;;                  2    5[BANK0 ] PTR unsigned short 
 26443 ;; Registers used:
 26444 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26445 ;; Tracked objects:
 26446 ;;		On entry : 0/0
 26447 ;;		On exit  : 0/0
 26448 ;;		Unchanged: 0/0
 26449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26450 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26451 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26452 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26453 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26454 ;;Total ram usage:       13 bytes
 26455 ;; Hardware stack levels used:    1
 26456 ;; Hardware stack levels required when called:    8
 26457 ;; This function calls:
 26458 ;;		_Byte_GetBit
 26459 ;; This function is called by:
 26460 ;;		_Console_Render
 26461 ;; This function uses a non-reentrant model
 26462 ;;
 26463                           
 26464                           	psect	text136
 26465  0145F4                     __ptext136:
 26466                           	opt stack 0
 26467  0145F4                     _Console_MakeField:
 26468                           	opt stack 21
 26469                           
 26470                           ;incstack = 0
 26471                           ;Console_MakeField@pInput stored from wreg
 26472  0145F4  0100               	movlb	0	; () banked
 26473  0145F6  6F6B               	movwf	Console_MakeField@pInput& (0+255),b
 26474                           
 26475                           ;Console.c: 437: static Colour Fill[7][5];
 26476                           ;Console.c: 438: pInput -= 32;
 26477  0145F8  0E20               	movlw	32
 26478  0145FA  0100               	movlb	0	; () banked
 26479  0145FC  5F6B               	subwf	Console_MakeField@pInput& (0+255),f,b
 26480                           
 26481                           ; BSR set to: 0
 26482                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 26483  0145FE  0100               	movlb	0	; () banked
 26484  014600  516B               	movf	Console_MakeField@pInput& (0+255),w,b
 26485  014602  0D05               	mullw	5
 26486  014604  CFF3 F069          	movff	prodl,Console_MakeField@Index
 26487  014608  CFF4 F06A          	movff	prodh,Console_MakeField@Index+1
 26488                           
 26489                           ; BSR set to: 0
 26490                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 26491  01460C  0E23               	movlw	low _Font5x7
 26492  01460E  0100               	movlb	0	; () banked
 26493  014610  2569               	addwf	Console_MakeField@Index& (0+255),w,b
 26494  014612  0100               	movlb	0	; () banked
 26495  014614  6F6C               	movwf	Console_MakeField@Column& (0+255),b
 26496  014616  0EFD               	movlw	high _Font5x7
 26497  014618  0100               	movlb	0	; () banked
 26498  01461A  216A               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 26499  01461C  0100               	movlb	0	; () banked
 26500  01461E  6F6D               	movwf	(Console_MakeField@Column+1)& (0+255),b
 26501                           
 26502                           ; BSR set to: 0
 26503                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 26504  014620  0E00               	movlw	0
 26505  014622  0100               	movlb	0	; () banked
 26506  014624  6F70               	movwf	Console_MakeField@x& (0+255),b
 26507  014626                     l13808:
 26508                           
 26509                           ; BSR set to: 0
 26510  014626  0E04               	movlw	4
 26511  014628  0100               	movlb	0	; () banked
 26512  01462A  6570               	cpfsgt	Console_MakeField@x& (0+255),b
 26513  01462C  D001               	goto	l1077
 26514  01462E  D043               	goto	u11520
 26515  014630                     l1077:
 26516                           
 26517                           ; BSR set to: 0
 26518                           ;Console.c: 444: {
 26519                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 26520                           
 26521                           ; BSR set to: 0
 26522  014630  0E00               	movlw	0
 26523  014632  0100               	movlb	0	; () banked
 26524  014634  6F71               	movwf	Console_MakeField@y& (0+255),b
 26525  014636                     l13814:
 26526                           
 26527                           ; BSR set to: 0
 26528  014636  0E06               	movlw	6
 26529  014638  0100               	movlb	0	; () banked
 26530  01463A  6571               	cpfsgt	Console_MakeField@y& (0+255),b
 26531  01463C  D001               	goto	l1079
 26532  01463E  D035               	goto	u11510
 26533  014640                     l1079:
 26534                           
 26535                           ; BSR set to: 0
 26536                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 26537                           
 26538                           ; BSR set to: 0
 26539  014640  C06C  F060         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 26540  014644  C06D  F061         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 26541  014648  C071  F062         	movff	Console_MakeField@y,Byte_GetBit@pBit
 26542  01464C  ECCA  F0B2         	call	_Byte_GetBit	;wreg free
 26543  014650  0900               	iorlw	0
 26544  014652  A4D8               	btfss	status,2,c
 26545  014654  D005               	goto	l1082
 26546  014656  C0E0  F06E         	movff	_gBackcolour,_Console_MakeField$10974
 26547  01465A  C0E1  F06F         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 26548  01465E  D004               	goto	l1084
 26549  014660                     l1082:
 26550  014660  C0EA  F06E         	movff	_gForecolour,_Console_MakeField$10974
 26551  014664  C0EB  F06F         	movff	_gForecolour+1,_Console_MakeField$10974+1
 26552  014668                     l1084:
 26553  014668  0100               	movlb	0	; () banked
 26554  01466A  5171               	movf	Console_MakeField@y& (0+255),w,b
 26555  01466C  0D0A               	mullw	10
 26556  01466E  0E1E               	movlw	low Console_MakeField@Fill
 26557  014670  0100               	movlb	0	; () banked
 26558  014672  6F67               	movwf	??_Console_MakeField& (0+255),b
 26559  014674  0E02               	movlw	high Console_MakeField@Fill
 26560  014676  0100               	movlb	0	; () banked
 26561  014678  6F68               	movwf	(??_Console_MakeField+1)& (0+255),b
 26562  01467A  50F3               	movf	prodl,w,c
 26563  01467C  0100               	movlb	0	; () banked
 26564  01467E  2767               	addwf	??_Console_MakeField& (0+255),f,b
 26565  014680  50F4               	movf	prodh,w,c
 26566  014682  0100               	movlb	0	; () banked
 26567  014684  2368               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 26568  014686  0100               	movlb	0	; () banked
 26569  014688  5170               	movf	Console_MakeField@x& (0+255),w,b
 26570  01468A  0D02               	mullw	2
 26571  01468C  50F3               	movf	prodl,w,c
 26572  01468E  0100               	movlb	0	; () banked
 26573  014690  2567               	addwf	??_Console_MakeField& (0+255),w,b
 26574  014692  6ED9               	movwf	fsr2l,c
 26575  014694  50F4               	movf	prodh,w,c
 26576  014696  0100               	movlb	0	; () banked
 26577  014698  2168               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 26578  01469A  6EDA               	movwf	fsr2h,c
 26579  01469C  C06E  FFDE         	movff	_Console_MakeField$10974,postinc2
 26580  0146A0  C06F  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 26581                           
 26582                           ; BSR set to: 0
 26583  0146A4  0100               	movlb	0	; () banked
 26584  0146A6  2B71               	incf	Console_MakeField@y& (0+255),f,b
 26585  0146A8  D7C6               	goto	l13814
 26586  0146AA                     u11510:
 26587                           
 26588                           ; BSR set to: 0
 26589                           ;Console.c: 447: Column += 1;
 26590                           
 26591                           ; BSR set to: 0
 26592  0146AA  0100               	movlb	0	; () banked
 26593  0146AC  4B6C               	infsnz	Console_MakeField@Column& (0+255),f,b
 26594  0146AE  2B6D               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 26595  0146B0  0100               	movlb	0	; () banked
 26596  0146B2  2B70               	incf	Console_MakeField@x& (0+255),f,b
 26597  0146B4  D7B8               	goto	l13808
 26598  0146B6                     u11520:
 26599                           
 26600                           ; BSR set to: 0
 26601                           ;Console.c: 448: }
 26602                           ;Console.c: 449: return (ColourPtr)Fill;
 26603                           
 26604                           ; BSR set to: 0
 26605  0146B6  0E1E               	movlw	low Console_MakeField@Fill
 26606  0146B8  0100               	movlb	0	; () banked
 26607  0146BA  6F65               	movwf	?_Console_MakeField& (0+255),b
 26608  0146BC  0E02               	movlw	high Console_MakeField@Fill
 26609  0146BE  0100               	movlb	0	; () banked
 26610  0146C0  6F66               	movwf	(?_Console_MakeField+1)& (0+255),b
 26611  0146C2  0012               	return	
 26612  0146C4                     __end_of_Console_MakeField:
 26613                           	opt stack 0
 26614                           tosu	equ	0xFFF
 26615                           tosh	equ	0xFFE
 26616                           tosl	equ	0xFFD
 26617                           pclath	equ	0xFFA
 26618                           tblptru	equ	0xFF8
 26619                           tblptrh	equ	0xFF7
 26620                           tblptrl	equ	0xFF6
 26621                           tablat	equ	0xFF5
 26622                           prodh	equ	0xFF4
 26623                           prodl	equ	0xFF3
 26624                           intcon	equ	0xFF2
 26625                           indf0	equ	0xFEF
 26626                           postinc0	equ	0xFEE
 26627                           fsr0h	equ	0xFEA
 26628                           fsr0l	equ	0xFE9
 26629                           wreg	equ	0xFE8
 26630                           indf1	equ	0xFE7
 26631                           postdec1	equ	0xFE5
 26632                           fsr1h	equ	0xFE2
 26633                           fsr1l	equ	0xFE1
 26634                           indf2	equ	0xFDF
 26635                           postinc2	equ	0xFDE
 26636                           postdec2	equ	0xFDD
 26637                           plusw2	equ	0xFDB
 26638                           fsr2h	equ	0xFDA
 26639                           fsr2l	equ	0xFD9
 26640                           status	equ	0xFD8
 26641                           
 26642 ;; *************** function _Byte_GetBit *****************
 26643 ;; Defined at:
 26644 ;;		line 38 in file "Library/Types.c"
 26645 ;; Parameters:    Size  Location     Type
 26646 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 26647 ;;		 -> Font5x7(480), 
 26648 ;;  pBit            1    2[BANK0 ] unsigned char 
 26649 ;; Auto vars:     Size  Location     Type
 26650 ;;  Output          1    4[BANK0 ] unsigned char 
 26651 ;; Return value:  Size  Location     Type
 26652 ;;                  1    wreg      unsigned char 
 26653 ;; Registers used:
 26654 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 26655 ;; Tracked objects:
 26656 ;;		On entry : 0/0
 26657 ;;		On exit  : 0/0
 26658 ;;		Unchanged: 0/0
 26659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26660 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26661 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26663 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26664 ;;Total ram usage:        5 bytes
 26665 ;; Hardware stack levels used:    1
 26666 ;; Hardware stack levels required when called:    7
 26667 ;; This function calls:
 26668 ;;		Nothing
 26669 ;; This function is called by:
 26670 ;;		_Console_MakeField
 26671 ;;		_Word_GetBit
 26672 ;; This function uses a non-reentrant model
 26673 ;;
 26674                           
 26675                           	psect	text137
 26676  016594                     __ptext137:
 26677                           	opt stack 0
 26678  016594                     _Byte_GetBit:
 26679                           	opt stack 21
 26680                           
 26681                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 26682                           
 26683                           ; BSR set to: 0
 26684                           ;incstack = 0
 26685  016594  C060  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 26686  016598  C061  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 26687  01659C                     	if	0	;tblptru may be non-zero
 26688  01659C                     	endif
 26689  01659C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 26690  01659C  0E00               	movlw	low (__mediumconst shr (0+16))
 26691  01659E  6EF8               	movwf	tblptru,c
 26692  0165A0                     	endif
 26693  0165A0  0008               	tblrd		*
 26694  0165A2  CFF5 F064          	movff	tablat,Byte_GetBit@Output
 26695                           
 26696                           ;Types.c: 42: Output >>= pBit;
 26697  0165A6  0100               	movlb	0	; () banked
 26698  0165A8  2962               	incf	Byte_GetBit@pBit& (0+255),w,b
 26699  0165AA  0100               	movlb	0	; () banked
 26700  0165AC  6F63               	movwf	??_Byte_GetBit& (0+255),b
 26701  0165AE  D003               	goto	u10740
 26702  0165B0                     u10745:
 26703  0165B0  0100               	movlb	0	; () banked
 26704  0165B2  90D8               	bcf	status,0,c
 26705  0165B4  3364               	rrcf	Byte_GetBit@Output& (0+255),f,b
 26706  0165B6                     u10740:
 26707  0165B6  0100               	movlb	0	; () banked
 26708  0165B8  2F63               	decfsz	??_Byte_GetBit& (0+255),f,b
 26709  0165BA  D7FA               	goto	u10745
 26710                           
 26711                           ;Types.c: 43: Output &= 1;
 26712  0165BC  0E01               	movlw	1
 26713  0165BE  0100               	movlb	0	; () banked
 26714  0165C0  1764               	andwf	Byte_GetBit@Output& (0+255),f,b
 26715                           
 26716                           ; BSR set to: 0
 26717                           ;Types.c: 44: return Output;
 26718  0165C2  0100               	movlb	0	; () banked
 26719  0165C4  5164               	movf	Byte_GetBit@Output& (0+255),w,b
 26720  0165C6  0012               	return	
 26721  0165C8                     __end_of_Byte_GetBit:
 26722                           	opt stack 0
 26723                           tosu	equ	0xFFF
 26724                           tosh	equ	0xFFE
 26725                           tosl	equ	0xFFD
 26726                           pclath	equ	0xFFA
 26727                           tblptru	equ	0xFF8
 26728                           tblptrh	equ	0xFF7
 26729                           tblptrl	equ	0xFF6
 26730                           tablat	equ	0xFF5
 26731                           prodh	equ	0xFF4
 26732                           prodl	equ	0xFF3
 26733                           intcon	equ	0xFF2
 26734                           indf0	equ	0xFEF
 26735                           postinc0	equ	0xFEE
 26736                           fsr0h	equ	0xFEA
 26737                           fsr0l	equ	0xFE9
 26738                           wreg	equ	0xFE8
 26739                           indf1	equ	0xFE7
 26740                           postdec1	equ	0xFE5
 26741                           fsr1h	equ	0xFE2
 26742                           fsr1l	equ	0xFE1
 26743                           indf2	equ	0xFDF
 26744                           postinc2	equ	0xFDE
 26745                           postdec2	equ	0xFDD
 26746                           plusw2	equ	0xFDB
 26747                           fsr2h	equ	0xFDA
 26748                           fsr2l	equ	0xFD9
 26749                           status	equ	0xFD8
 26750                           
 26751 ;; *************** function _Console_Init *****************
 26752 ;; Defined at:
 26753 ;;		line 157 in file "Library/Console.c"
 26754 ;; Parameters:    Size  Location     Type
 26755 ;;		None
 26756 ;; Auto vars:     Size  Location     Type
 26757 ;;  y               1    3[BANK0 ] unsigned char 
 26758 ;;  x               1    2[BANK0 ] unsigned char 
 26759 ;; Return value:  Size  Location     Type
 26760 ;;                  1    wreg      void 
 26761 ;; Registers used:
 26762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26763 ;; Tracked objects:
 26764 ;;		On entry : 0/0
 26765 ;;		On exit  : 0/0
 26766 ;;		Unchanged: 0/0
 26767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26769 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26770 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26771 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26772 ;;Total ram usage:        4 bytes
 26773 ;; Hardware stack levels used:    1
 26774 ;; Hardware stack levels required when called:    7
 26775 ;; This function calls:
 26776 ;;		Nothing
 26777 ;; This function is called by:
 26778 ;;		_main
 26779 ;; This function uses a non-reentrant model
 26780 ;;
 26781                           
 26782                           	psect	text138
 26783  01554E                     __ptext138:
 26784                           	opt stack 0
 26785  01554E                     _Console_Init:
 26786                           	opt stack 23
 26787                           
 26788                           ;Console.c: 160: lBufferX = 0;
 26789                           
 26790                           ; BSR set to: 0
 26791                           ;incstack = 0
 26792  01554E  0E00               	movlw	0
 26793  015550  0100               	movlb	0	; () banked
 26794  015552  6FE8               	movwf	_lBufferX& (0+255),b
 26795                           
 26796                           ;Console.c: 161: lBufferY = 0;
 26797  015554  0E00               	movlw	0
 26798  015556  0100               	movlb	0	; () banked
 26799  015558  6FE7               	movwf	_lBufferY& (0+255),b
 26800                           
 26801                           ;Console.c: 163: UINT8 x, y;
 26802                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26803  01555A  0E00               	movlw	0
 26804  01555C  0100               	movlb	0	; () banked
 26805  01555E  6F62               	movwf	Console_Init@x& (0+255),b
 26806  015560                     l14278:
 26807                           
 26808                           ; BSR set to: 0
 26809  015560  0E13               	movlw	19
 26810  015562  0100               	movlb	0	; () banked
 26811  015564  6562               	cpfsgt	Console_Init@x& (0+255),b
 26812  015566  D001               	goto	l976
 26813  015568  0012               	return	
 26814  01556A                     l976:
 26815                           
 26816                           ; BSR set to: 0
 26817                           ;Console.c: 165: {
 26818                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26819                           
 26820                           ; BSR set to: 0
 26821  01556A  0E00               	movlw	0
 26822  01556C  0100               	movlb	0	; () banked
 26823  01556E  6F63               	movwf	Console_Init@y& (0+255),b
 26824  015570                     l14284:
 26825                           
 26826                           ; BSR set to: 0
 26827  015570  0E0E               	movlw	14
 26828  015572  0100               	movlb	0	; () banked
 26829  015574  6563               	cpfsgt	Console_Init@y& (0+255),b
 26830  015576  D001               	goto	l978
 26831  015578  D02C               	goto	u12140
 26832  01557A                     l978:
 26833                           
 26834                           ; BSR set to: 0
 26835                           ;Console.c: 167: {
 26836                           ;Console.c: 168: lBuffer[y][x] = '\0';
 26837                           
 26838                           ; BSR set to: 0
 26839  01557A  0100               	movlb	0	; () banked
 26840  01557C  5163               	movf	Console_Init@y& (0+255),w,b
 26841  01557E  0D14               	mullw	20
 26842  015580  0E85               	movlw	low _lBuffer
 26843  015582  0100               	movlb	0	; () banked
 26844  015584  6F60               	movwf	??_Console_Init& (0+255),b
 26845  015586  0E02               	movlw	high _lBuffer
 26846  015588  0100               	movlb	0	; () banked
 26847  01558A  6F61               	movwf	(??_Console_Init+1)& (0+255),b
 26848  01558C  50F3               	movf	prodl,w,c
 26849  01558E  0100               	movlb	0	; () banked
 26850  015590  2760               	addwf	??_Console_Init& (0+255),f,b
 26851  015592  50F4               	movf	prodh,w,c
 26852  015594  0100               	movlb	0	; () banked
 26853  015596  2361               	addwfc	(??_Console_Init+1)& (0+255),f,b
 26854  015598  0100               	movlb	0	; () banked
 26855  01559A  5162               	movf	Console_Init@x& (0+255),w,b
 26856  01559C  0D01               	mullw	1
 26857  01559E  50F3               	movf	prodl,w,c
 26858  0155A0  0100               	movlb	0	; () banked
 26859  0155A2  2560               	addwf	??_Console_Init& (0+255),w,b
 26860  0155A4  6ED9               	movwf	fsr2l,c
 26861  0155A6  50F4               	movf	prodh,w,c
 26862  0155A8  0100               	movlb	0	; () banked
 26863  0155AA  2161               	addwfc	(??_Console_Init+1)& (0+255),w,b
 26864  0155AC  6EDA               	movwf	fsr2h,c
 26865  0155AE  0E00               	movlw	0
 26866  0155B0  6EDF               	movwf	indf2,c
 26867                           
 26868                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 26869  0155B2  0100               	movlb	0	; () banked
 26870  0155B4  5163               	movf	Console_Init@y& (0+255),w,b
 26871  0155B6  0D02               	mullw	2
 26872  0155B8  0E00               	movlw	low _lCBuffer
 26873  0155BA  24F3               	addwf	prodl,w,c
 26874  0155BC  6ED9               	movwf	fsr2l,c
 26875  0155BE  0E02               	movlw	high _lCBuffer
 26876  0155C0  20F4               	addwfc	prodh,w,c
 26877  0155C2  6EDA               	movwf	fsr2h,c
 26878  0155C4  0EFF               	movlw	255
 26879  0155C6  6EDE               	movwf	postinc2,c
 26880  0155C8  0EFF               	movlw	255
 26881  0155CA  6EDD               	movwf	postdec2,c
 26882                           
 26883                           ; BSR set to: 0
 26884  0155CC  0100               	movlb	0	; () banked
 26885  0155CE  2B63               	incf	Console_Init@y& (0+255),f,b
 26886  0155D0  D7CF               	goto	l14284
 26887  0155D2                     u12140:
 26888                           
 26889                           ; BSR set to: 0
 26890                           
 26891                           ; BSR set to: 0
 26892  0155D2  0100               	movlb	0	; () banked
 26893  0155D4  2B62               	incf	Console_Init@x& (0+255),f,b
 26894  0155D6  D7C4               	goto	l14278
 26895  0155D8                     __end_of_Console_Init:
 26896                           	opt stack 0
 26897                           tosu	equ	0xFFF
 26898                           tosh	equ	0xFFE
 26899                           tosl	equ	0xFFD
 26900                           pclath	equ	0xFFA
 26901                           tblptru	equ	0xFF8
 26902                           tblptrh	equ	0xFF7
 26903                           tblptrl	equ	0xFF6
 26904                           tablat	equ	0xFF5
 26905                           prodh	equ	0xFF4
 26906                           prodl	equ	0xFF3
 26907                           intcon	equ	0xFF2
 26908                           indf0	equ	0xFEF
 26909                           postinc0	equ	0xFEE
 26910                           fsr0h	equ	0xFEA
 26911                           fsr0l	equ	0xFE9
 26912                           wreg	equ	0xFE8
 26913                           indf1	equ	0xFE7
 26914                           postdec1	equ	0xFE5
 26915                           fsr1h	equ	0xFE2
 26916                           fsr1l	equ	0xFE1
 26917                           indf2	equ	0xFDF
 26918                           postinc2	equ	0xFDE
 26919                           postdec2	equ	0xFDD
 26920                           plusw2	equ	0xFDB
 26921                           fsr2h	equ	0xFDA
 26922                           fsr2l	equ	0xFD9
 26923                           status	equ	0xFD8
 26924                           
 26925 ;; *************** function _ADC_Voltage *****************
 26926 ;; Defined at:
 26927 ;;		line 259 in file "Library/ADC.c"
 26928 ;; Parameters:    Size  Location     Type
 26929 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 26930 ;;		 -> ADC_AN0(5), 
 26931 ;; Auto vars:     Size  Location     Type
 26932 ;;  output          4   53[BANK0 ] float 
 26933 ;;  ref             4   49[BANK0 ] const float 
 26934 ;;  max             4   45[BANK0 ] const float 
 26935 ;; Return value:  Size  Location     Type
 26936 ;;                  4   39[BANK0 ] float 
 26937 ;; Registers used:
 26938 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 26939 ;; Tracked objects:
 26940 ;;		On entry : 0/0
 26941 ;;		On exit  : 0/0
 26942 ;;		Unchanged: 0/0
 26943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26944 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26945 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26946 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26947 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26948 ;;Total ram usage:       18 bytes
 26949 ;; Hardware stack levels used:    1
 26950 ;; Hardware stack levels required when called:    8
 26951 ;; This function calls:
 26952 ;;		___fldiv
 26953 ;;		___flmul
 26954 ;;		___xxtofl
 26955 ;; This function is called by:
 26956 ;;		_main
 26957 ;; This function uses a non-reentrant model
 26958 ;;
 26959                           
 26960                           	psect	text139
 26961  014372                     __ptext139:
 26962                           	opt stack 0
 26963  014372                     _ADC_Voltage:
 26964                           	opt stack 22
 26965                           
 26966                           ;ADC.c: 261: const float max = 1024;
 26967                           
 26968                           ; BSR set to: 0
 26969                           ;incstack = 0
 26970  014372  0E00               	movlw	0
 26971  014374  0100               	movlb	0	; () banked
 26972  014376  6F8D               	movwf	ADC_Voltage@max& (0+255),b
 26973  014378  0E00               	movlw	0
 26974  01437A  6F8E               	movwf	(ADC_Voltage@max+1)& (0+255),b
 26975  01437C  0E80               	movlw	128
 26976  01437E  6F8F               	movwf	(ADC_Voltage@max+2)& (0+255),b
 26977  014380  0E44               	movlw	68
 26978  014382  6F90               	movwf	(ADC_Voltage@max+3)& (0+255),b
 26979                           
 26980                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 26981  014384  0E33               	movlw	51
 26982  014386  0100               	movlb	0	; () banked
 26983  014388  6F91               	movwf	ADC_Voltage@ref& (0+255),b
 26984  01438A  0E33               	movlw	51
 26985  01438C  6F92               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 26986  01438E  0E53               	movlw	83
 26987  014390  6F93               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 26988  014392  0E40               	movlw	64
 26989  014394  6F94               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 26990                           
 26991                           ; BSR set to: 0
 26992                           ;ADC.c: 263: float output = pInput->mValue;
 26993  014396  0100               	movlb	0	; () banked
 26994  014398  EE20 F001          	lfsr	2,1
 26995  01439C  5187               	movf	ADC_Voltage@pInput& (0+255),w,b
 26996  01439E  26D9               	addwf	fsr2l,f,c
 26997  0143A0  5188               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 26998  0143A2  22DA               	addwfc	fsr2h,f,c
 26999  0143A4  CFDE F08B          	movff	postinc2,??_ADC_Voltage
 27000  0143A8  CFDD F08C          	movff	postdec2,??_ADC_Voltage+1
 27001  0143AC  C08B  F060         	movff	??_ADC_Voltage,___xxtofl@val
 27002  0143B0  C08C  F061         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 27003  0143B4  0100               	movlb	0	; () banked
 27004  0143B6  6B62               	clrf	(___xxtofl@val+2)& (0+255),b
 27005  0143B8  6B63               	clrf	(___xxtofl@val+3)& (0+255),b
 27006  0143BA  0E00               	movlw	0
 27007  0143BC  ECC3  F094         	call	___xxtofl
 27008  0143C0  C060  F095         	movff	?___xxtofl,ADC_Voltage@output
 27009  0143C4  C061  F096         	movff	?___xxtofl+1,ADC_Voltage@output+1
 27010  0143C8  C062  F097         	movff	?___xxtofl+2,ADC_Voltage@output+2
 27011  0143CC  C063  F098         	movff	?___xxtofl+3,ADC_Voltage@output+3
 27012                           
 27013                           ;ADC.c: 265: output /= max;
 27014  0143D0  C095  F060         	movff	ADC_Voltage@output,___fldiv@b
 27015  0143D4  C096  F061         	movff	ADC_Voltage@output+1,___fldiv@b+1
 27016  0143D8  C097  F062         	movff	ADC_Voltage@output+2,___fldiv@b+2
 27017  0143DC  C098  F063         	movff	ADC_Voltage@output+3,___fldiv@b+3
 27018  0143E0  C08D  F064         	movff	ADC_Voltage@max,___fldiv@a
 27019  0143E4  C08E  F065         	movff	ADC_Voltage@max+1,___fldiv@a+1
 27020  0143E8  C08F  F066         	movff	ADC_Voltage@max+2,___fldiv@a+2
 27021  0143EC  C090  F067         	movff	ADC_Voltage@max+3,___fldiv@a+3
 27022  0143F0  EC32  F089         	call	___fldiv	;wreg free
 27023  0143F4  C060  F095         	movff	?___fldiv,ADC_Voltage@output
 27024  0143F8  C061  F096         	movff	?___fldiv+1,ADC_Voltage@output+1
 27025  0143FC  C062  F097         	movff	?___fldiv+2,ADC_Voltage@output+2
 27026  014400  C063  F098         	movff	?___fldiv+3,ADC_Voltage@output+3
 27027                           
 27028                           ;ADC.c: 266: output *= ref;
 27029  014404  C095  F06E         	movff	ADC_Voltage@output,___flmul@b
 27030  014408  C096  F06F         	movff	ADC_Voltage@output+1,___flmul@b+1
 27031  01440C  C097  F070         	movff	ADC_Voltage@output+2,___flmul@b+2
 27032  014410  C098  F071         	movff	ADC_Voltage@output+3,___flmul@b+3
 27033  014414  C091  F072         	movff	ADC_Voltage@ref,___flmul@a
 27034  014418  C092  F073         	movff	ADC_Voltage@ref+1,___flmul@a+1
 27035  01441C  C093  F074         	movff	ADC_Voltage@ref+2,___flmul@a+2
 27036  014420  C094  F075         	movff	ADC_Voltage@ref+3,___flmul@a+3
 27037  014424  ECD0  F084         	call	___flmul	;wreg free
 27038  014428  C06E  F095         	movff	?___flmul,ADC_Voltage@output
 27039  01442C  C06F  F096         	movff	?___flmul+1,ADC_Voltage@output+1
 27040  014430  C070  F097         	movff	?___flmul+2,ADC_Voltage@output+2
 27041  014434  C071  F098         	movff	?___flmul+3,ADC_Voltage@output+3
 27042                           
 27043                           ;ADC.c: 268: return output + (float)0.000;
 27044  014438  C095  F087         	movff	ADC_Voltage@output,?_ADC_Voltage
 27045  01443C  C096  F088         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 27046  014440  C097  F089         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 27047  014444  C098  F08A         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 27048  014448  0012               	return	
 27049  01444A                     __end_of_ADC_Voltage:
 27050                           	opt stack 0
 27051                           tosu	equ	0xFFF
 27052                           tosh	equ	0xFFE
 27053                           tosl	equ	0xFFD
 27054                           pclath	equ	0xFFA
 27055                           tblptru	equ	0xFF8
 27056                           tblptrh	equ	0xFF7
 27057                           tblptrl	equ	0xFF6
 27058                           tablat	equ	0xFF5
 27059                           prodh	equ	0xFF4
 27060                           prodl	equ	0xFF3
 27061                           intcon	equ	0xFF2
 27062                           indf0	equ	0xFEF
 27063                           postinc0	equ	0xFEE
 27064                           fsr0h	equ	0xFEA
 27065                           fsr0l	equ	0xFE9
 27066                           wreg	equ	0xFE8
 27067                           indf1	equ	0xFE7
 27068                           postdec1	equ	0xFE5
 27069                           fsr1h	equ	0xFE2
 27070                           fsr1l	equ	0xFE1
 27071                           indf2	equ	0xFDF
 27072                           postinc2	equ	0xFDE
 27073                           postdec2	equ	0xFDD
 27074                           plusw2	equ	0xFDB
 27075                           fsr2h	equ	0xFDA
 27076                           fsr2l	equ	0xFD9
 27077                           status	equ	0xFD8
 27078                           
 27079 ;; *************** function ___xxtofl *****************
 27080 ;; Defined at:
 27081 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 27082 ;; Parameters:    Size  Location     Type
 27083 ;;  sign            1    wreg     unsigned char 
 27084 ;;  val             4    0[BANK0 ] long 
 27085 ;; Auto vars:     Size  Location     Type
 27086 ;;  sign            1    8[BANK0 ] unsigned char 
 27087 ;;  arg             4   10[BANK0 ] unsigned long 
 27088 ;;  exp             1    9[BANK0 ] unsigned char 
 27089 ;; Return value:  Size  Location     Type
 27090 ;;                  4    0[BANK0 ] unsigned char 
 27091 ;; Registers used:
 27092 ;;		wreg, status,2, status,0
 27093 ;; Tracked objects:
 27094 ;;		On entry : 0/0
 27095 ;;		On exit  : 0/0
 27096 ;;		Unchanged: 0/0
 27097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27098 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27099 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27100 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27101 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27102 ;;Total ram usage:       14 bytes
 27103 ;; Hardware stack levels used:    1
 27104 ;; Hardware stack levels required when called:    7
 27105 ;; This function calls:
 27106 ;;		Nothing
 27107 ;; This function is called by:
 27108 ;;		_ADC_Voltage
 27109 ;;		_pow
 27110 ;;		_exp
 27111 ;;		_floor
 27112 ;;		_log
 27113 ;; This function uses a non-reentrant model
 27114 ;;
 27115                           
 27116                           	psect	text140
 27117  012986                     __ptext140:
 27118                           	opt stack 0
 27119  012986                     ___xxtofl:
 27120                           	opt stack 21
 27121                           
 27122                           ;incstack = 0
 27123                           ;___xxtofl@sign stored from wreg
 27124  012986  0100               	movlb	0	; () banked
 27125  012988  6F68               	movwf	___xxtofl@sign& (0+255),b
 27126  01298A  0100               	movlb	0	; () banked
 27127  01298C  5168               	movf	___xxtofl@sign& (0+255),w,b
 27128  01298E  0100               	movlb	0	; () banked
 27129  012990  B4D8               	btfsc	status,2,c
 27130  012992  D01E               	goto	l2640
 27131                           
 27132                           ; BSR set to: 0
 27133  012994  0100               	movlb	0	; () banked
 27134  012996  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 27135  012998  D01B               	goto	l2640
 27136                           
 27137                           ; BSR set to: 0
 27138  01299A  C060  F064         	movff	___xxtofl@val,??___xxtofl
 27139  01299E  C061  F065         	movff	___xxtofl@val+1,??___xxtofl+1
 27140  0129A2  C062  F066         	movff	___xxtofl@val+2,??___xxtofl+2
 27141  0129A6  C063  F067         	movff	___xxtofl@val+3,??___xxtofl+3
 27142  0129AA  0100               	movlb	0	; () banked
 27143  0129AC  1F64               	comf	??___xxtofl& (0+255),f,b
 27144  0129AE  1F65               	comf	(??___xxtofl+1)& (0+255),f,b
 27145  0129B0  1F66               	comf	(??___xxtofl+2)& (0+255),f,b
 27146  0129B2  1F67               	comf	(??___xxtofl+3)& (0+255),f,b
 27147  0129B4  2B64               	incf	??___xxtofl& (0+255),f,b
 27148  0129B6  0E00               	movlw	0
 27149  0129B8  2365               	addwfc	(??___xxtofl+1)& (0+255),f,b
 27150  0129BA  2366               	addwfc	(??___xxtofl+2)& (0+255),f,b
 27151  0129BC  2367               	addwfc	(??___xxtofl+3)& (0+255),f,b
 27152  0129BE  C064  F06A         	movff	??___xxtofl,___xxtofl@arg
 27153  0129C2  C065  F06B         	movff	??___xxtofl+1,___xxtofl@arg+1
 27154  0129C6  C066  F06C         	movff	??___xxtofl+2,___xxtofl@arg+2
 27155  0129CA  C067  F06D         	movff	??___xxtofl+3,___xxtofl@arg+3
 27156  0129CE  D008               	goto	l2641
 27157  0129D0                     l2640:
 27158                           
 27159                           ; BSR set to: 0
 27160  0129D0  C060  F06A         	movff	___xxtofl@val,___xxtofl@arg
 27161  0129D4  C061  F06B         	movff	___xxtofl@val+1,___xxtofl@arg+1
 27162  0129D8  C062  F06C         	movff	___xxtofl@val+2,___xxtofl@arg+2
 27163  0129DC  C063  F06D         	movff	___xxtofl@val+3,___xxtofl@arg+3
 27164  0129E0                     l2641:
 27165                           
 27166                           ; BSR set to: 0
 27167                           
 27168                           ; BSR set to: 0
 27169  0129E0  0100               	movlb	0	; () banked
 27170  0129E2  5160               	movf	___xxtofl@val& (0+255),w,b
 27171  0129E4  0100               	movlb	0	; () banked
 27172  0129E6  1161               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 27173  0129E8  0100               	movlb	0	; () banked
 27174  0129EA  1162               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 27175  0129EC  0100               	movlb	0	; () banked
 27176  0129EE  1163               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 27177  0129F0  A4D8               	btfss	status,2,c
 27178  0129F2  D00A               	goto	l2642
 27179                           
 27180                           ; BSR set to: 0
 27181  0129F4  0E00               	movlw	0
 27182  0129F6  0100               	movlb	0	; () banked
 27183  0129F8  6F60               	movwf	?___xxtofl& (0+255),b
 27184  0129FA  0E00               	movlw	0
 27185  0129FC  6F61               	movwf	(?___xxtofl+1)& (0+255),b
 27186  0129FE  0E00               	movlw	0
 27187  012A00  6F62               	movwf	(?___xxtofl+2)& (0+255),b
 27188  012A02  0E00               	movlw	0
 27189  012A04  6F63               	movwf	(?___xxtofl+3)& (0+255),b
 27190                           
 27191                           ; BSR set to: 0
 27192  012A06  0012               	return	
 27193  012A08                     l2642:
 27194                           
 27195                           ; BSR set to: 0
 27196                           
 27197                           ; BSR set to: 0
 27198  012A08  0E96               	movlw	150
 27199  012A0A  0100               	movlb	0	; () banked
 27200  012A0C  6F69               	movwf	___xxtofl@exp& (0+255),b
 27201  012A0E  D008               	goto	l2644
 27202  012A10                     
 27203                           ; BSR set to: 0
 27204                           
 27205                           ; BSR set to: 0
 27206  012A10  0100               	movlb	0	; () banked
 27207  012A12  2B69               	incf	___xxtofl@exp& (0+255),f,b
 27208  012A14  0100               	movlb	0	; () banked
 27209  012A16  90D8               	bcf	status,0,c
 27210  012A18  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 27211  012A1A  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 27212  012A1C  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 27213  012A1E  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 27214  012A20                     l2644:
 27215                           
 27216                           ; BSR set to: 0
 27217                           
 27218                           ; BSR set to: 0
 27219  012A20  0E00               	movlw	0
 27220  012A22  0100               	movlb	0	; () banked
 27221  012A24  156A               	andwf	___xxtofl@arg& (0+255),w,b
 27222  012A26  0100               	movlb	0	; () banked
 27223  012A28  6F64               	movwf	??___xxtofl& (0+255),b
 27224  012A2A  0E00               	movlw	0
 27225  012A2C  0100               	movlb	0	; () banked
 27226  012A2E  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 27227  012A30  0100               	movlb	0	; () banked
 27228  012A32  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 27229  012A34  0E00               	movlw	0
 27230  012A36  0100               	movlb	0	; () banked
 27231  012A38  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 27232  012A3A  0100               	movlb	0	; () banked
 27233  012A3C  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 27234  012A3E  0EFE               	movlw	254
 27235  012A40  0100               	movlb	0	; () banked
 27236  012A42  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 27237  012A44  0100               	movlb	0	; () banked
 27238  012A46  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 27239  012A48  0100               	movlb	0	; () banked
 27240  012A4A  5164               	movf	??___xxtofl& (0+255),w,b
 27241  012A4C  0100               	movlb	0	; () banked
 27242  012A4E  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 27243  012A50  0100               	movlb	0	; () banked
 27244  012A52  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 27245  012A54  0100               	movlb	0	; () banked
 27246  012A56  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 27247  012A58  B4D8               	btfsc	status,2,c
 27248  012A5A  D010               	goto	l2647
 27249  012A5C  D7D9               	goto	l2645
 27250  012A5E                     
 27251                           ; BSR set to: 0
 27252                           
 27253                           ; BSR set to: 0
 27254  012A5E  0100               	movlb	0	; () banked
 27255  012A60  2B69               	incf	___xxtofl@exp& (0+255),f,b
 27256                           
 27257                           ; BSR set to: 0
 27258  012A62  0E01               	movlw	1
 27259  012A64  0100               	movlb	0	; () banked
 27260  012A66  276A               	addwf	___xxtofl@arg& (0+255),f,b
 27261  012A68  0E00               	movlw	0
 27262  012A6A  236B               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 27263  012A6C  236C               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 27264  012A6E  236D               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 27265                           
 27266                           ; BSR set to: 0
 27267  012A70  0100               	movlb	0	; () banked
 27268  012A72  90D8               	bcf	status,0,c
 27269  012A74  336D               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 27270  012A76  336C               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 27271  012A78  336B               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 27272  012A7A  336A               	rrcf	___xxtofl@arg& (0+255),f,b
 27273  012A7C                     l2647:
 27274                           
 27275                           ; BSR set to: 0
 27276  012A7C  0E00               	movlw	0
 27277  012A7E  0100               	movlb	0	; () banked
 27278  012A80  156A               	andwf	___xxtofl@arg& (0+255),w,b
 27279  012A82  0100               	movlb	0	; () banked
 27280  012A84  6F64               	movwf	??___xxtofl& (0+255),b
 27281  012A86  0E00               	movlw	0
 27282  012A88  0100               	movlb	0	; () banked
 27283  012A8A  156B               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 27284  012A8C  0100               	movlb	0	; () banked
 27285  012A8E  6F65               	movwf	(??___xxtofl+1)& (0+255),b
 27286  012A90  0E00               	movlw	0
 27287  012A92  0100               	movlb	0	; () banked
 27288  012A94  156C               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 27289  012A96  0100               	movlb	0	; () banked
 27290  012A98  6F66               	movwf	(??___xxtofl+2)& (0+255),b
 27291  012A9A  0EFF               	movlw	255
 27292  012A9C  0100               	movlb	0	; () banked
 27293  012A9E  156D               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 27294  012AA0  0100               	movlb	0	; () banked
 27295  012AA2  6F67               	movwf	(??___xxtofl+3)& (0+255),b
 27296  012AA4  0100               	movlb	0	; () banked
 27297  012AA6  5164               	movf	??___xxtofl& (0+255),w,b
 27298  012AA8  0100               	movlb	0	; () banked
 27299  012AAA  1165               	iorwf	(??___xxtofl+1)& (0+255),w,b
 27300  012AAC  0100               	movlb	0	; () banked
 27301  012AAE  1166               	iorwf	(??___xxtofl+2)& (0+255),w,b
 27302  012AB0  0100               	movlb	0	; () banked
 27303  012AB2  1167               	iorwf	(??___xxtofl+3)& (0+255),w,b
 27304  012AB4  B4D8               	btfsc	status,2,c
 27305  012AB6  D009               	goto	l2650
 27306  012AB8  D7D2               	goto	l2648
 27307  012ABA                     
 27308                           ; BSR set to: 0
 27309                           
 27310                           ; BSR set to: 0
 27311  012ABA  0100               	movlb	0	; () banked
 27312  012ABC  0769               	decf	___xxtofl@exp& (0+255),f,b
 27313  012ABE  0100               	movlb	0	; () banked
 27314  012AC0  90D8               	bcf	status,0,c
 27315  012AC2  376A               	rlcf	___xxtofl@arg& (0+255),f,b
 27316  012AC4  376B               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 27317  012AC6  376C               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 27318  012AC8  376D               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 27319  012ACA                     l2650:
 27320                           
 27321                           ; BSR set to: 0
 27322                           
 27323                           ; BSR set to: 0
 27324  012ACA  0100               	movlb	0	; () banked
 27325  012ACC  BF6C               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 27326  012ACE  D004               	goto	u10500
 27327                           
 27328                           ; BSR set to: 0
 27329  012AD0  0E02               	movlw	2
 27330  012AD2  0100               	movlb	0	; () banked
 27331  012AD4  6169               	cpfslt	___xxtofl@exp& (0+255),b
 27332  012AD6  D7F1               	goto	l2651
 27333  012AD8                     u10500:
 27334                           
 27335                           ; BSR set to: 0
 27336                           
 27337                           ; BSR set to: 0
 27338  012AD8  0100               	movlb	0	; () banked
 27339  012ADA  B169               	btfsc	___xxtofl@exp& (0+255),0,b
 27340  012ADC  D009               	goto	l2655
 27341                           
 27342                           ; BSR set to: 0
 27343  012ADE  0EFF               	movlw	255
 27344  012AE0  0100               	movlb	0	; () banked
 27345  012AE2  176A               	andwf	___xxtofl@arg& (0+255),f,b
 27346  012AE4  0EFF               	movlw	255
 27347  012AE6  176B               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 27348  012AE8  0E7F               	movlw	127
 27349  012AEA  176C               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 27350  012AEC  0EFF               	movlw	255
 27351  012AEE  176D               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 27352  012AF0                     l2655:
 27353                           
 27354                           ; BSR set to: 0
 27355  012AF0  0100               	movlb	0	; () banked
 27356  012AF2  90D8               	bcf	status,0,c
 27357  012AF4  3369               	rrcf	___xxtofl@exp& (0+255),f,b
 27358  012AF6  C069  F064         	movff	___xxtofl@exp,??___xxtofl
 27359  012AFA  0100               	movlb	0	; () banked
 27360  012AFC  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 27361  012AFE  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 27362  012B00  6B67               	clrf	(??___xxtofl+3)& (0+255),b
 27363  012B02  C064  F067         	movff	??___xxtofl,??___xxtofl+3
 27364  012B06  0100               	movlb	0	; () banked
 27365  012B08  6B66               	clrf	(??___xxtofl+2)& (0+255),b
 27366  012B0A  6B65               	clrf	(??___xxtofl+1)& (0+255),b
 27367  012B0C  6B64               	clrf	??___xxtofl& (0+255),b
 27368  012B0E  0100               	movlb	0	; () banked
 27369  012B10  5164               	movf	??___xxtofl& (0+255),w,b
 27370  012B12  0100               	movlb	0	; () banked
 27371  012B14  136A               	iorwf	___xxtofl@arg& (0+255),f,b
 27372  012B16  0100               	movlb	0	; () banked
 27373  012B18  5165               	movf	(??___xxtofl+1)& (0+255),w,b
 27374  012B1A  0100               	movlb	0	; () banked
 27375  012B1C  136B               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 27376  012B1E  0100               	movlb	0	; () banked
 27377  012B20  5166               	movf	(??___xxtofl+2)& (0+255),w,b
 27378  012B22  0100               	movlb	0	; () banked
 27379  012B24  136C               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 27380  012B26  0100               	movlb	0	; () banked
 27381  012B28  5167               	movf	(??___xxtofl+3)& (0+255),w,b
 27382  012B2A  0100               	movlb	0	; () banked
 27383  012B2C  136D               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 27384                           
 27385                           ; BSR set to: 0
 27386  012B2E  0100               	movlb	0	; () banked
 27387  012B30  5168               	movf	___xxtofl@sign& (0+255),w,b
 27388  012B32  0100               	movlb	0	; () banked
 27389  012B34  B4D8               	btfsc	status,2,c
 27390  012B36  D005               	goto	l2656
 27391                           
 27392                           ; BSR set to: 0
 27393  012B38  0100               	movlb	0	; () banked
 27394  012B3A  AF63               	btfss	(___xxtofl@val+3)& (0+255),7,b
 27395  012B3C  D002               	goto	l2656
 27396                           
 27397                           ; BSR set to: 0
 27398  012B3E  0100               	movlb	0	; () banked
 27399  012B40  8F6D               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 27400  012B42                     l2656:
 27401                           
 27402                           ; BSR set to: 0
 27403                           
 27404                           ; BSR set to: 0
 27405  012B42  C06A  F060         	movff	___xxtofl@arg,?___xxtofl
 27406  012B46  C06B  F061         	movff	___xxtofl@arg+1,?___xxtofl+1
 27407  012B4A  C06C  F062         	movff	___xxtofl@arg+2,?___xxtofl+2
 27408  012B4E  C06D  F063         	movff	___xxtofl@arg+3,?___xxtofl+3
 27409  012B52  0012               	return	
 27410  012B54                     __end_of___xxtofl:
 27411                           	opt stack 0
 27412                           tosu	equ	0xFFF
 27413                           tosh	equ	0xFFE
 27414                           tosl	equ	0xFFD
 27415                           pclath	equ	0xFFA
 27416                           tblptru	equ	0xFF8
 27417                           tblptrh	equ	0xFF7
 27418                           tblptrl	equ	0xFF6
 27419                           tablat	equ	0xFF5
 27420                           prodh	equ	0xFF4
 27421                           prodl	equ	0xFF3
 27422                           intcon	equ	0xFF2
 27423                           indf0	equ	0xFEF
 27424                           postinc0	equ	0xFEE
 27425                           fsr0h	equ	0xFEA
 27426                           fsr0l	equ	0xFE9
 27427                           wreg	equ	0xFE8
 27428                           indf1	equ	0xFE7
 27429                           postdec1	equ	0xFE5
 27430                           fsr1h	equ	0xFE2
 27431                           fsr1l	equ	0xFE1
 27432                           indf2	equ	0xFDF
 27433                           postinc2	equ	0xFDE
 27434                           postdec2	equ	0xFDD
 27435                           plusw2	equ	0xFDB
 27436                           fsr2h	equ	0xFDA
 27437                           fsr2l	equ	0xFD9
 27438                           status	equ	0xFD8
 27439                           
 27440 ;; *************** function ___flmul *****************
 27441 ;; Defined at:
 27442 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 27443 ;; Parameters:    Size  Location     Type
 27444 ;;  b               4   14[BANK0 ] unsigned char 
 27445 ;;  a               4   18[BANK0 ] unsigned char 
 27446 ;; Auto vars:     Size  Location     Type
 27447 ;;  prod            4   33[BANK0 ] struct .
 27448 ;;  grs             4   28[BANK0 ] unsigned long 
 27449 ;;  temp            2   37[BANK0 ] struct .
 27450 ;;  bexp            1   32[BANK0 ] unsigned char 
 27451 ;;  aexp            1   27[BANK0 ] unsigned char 
 27452 ;;  sign            1   26[BANK0 ] unsigned char 
 27453 ;; Return value:  Size  Location     Type
 27454 ;;                  4   14[BANK0 ] unsigned char 
 27455 ;; Registers used:
 27456 ;;		wreg, status,2, status,0, prodl, prodh
 27457 ;; Tracked objects:
 27458 ;;		On entry : 0/0
 27459 ;;		On exit  : 0/0
 27460 ;;		Unchanged: 0/0
 27461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27462 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27463 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27464 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27465 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27466 ;;Total ram usage:       25 bytes
 27467 ;; Hardware stack levels used:    1
 27468 ;; Hardware stack levels required when called:    7
 27469 ;; This function calls:
 27470 ;;		Nothing
 27471 ;; This function is called by:
 27472 ;;		_ADC_Voltage
 27473 ;;		_main
 27474 ;;		_pow
 27475 ;;		_exp
 27476 ;;		_log
 27477 ;;		_eval_poly
 27478 ;; This function uses a non-reentrant model
 27479 ;;
 27480                           
 27481                           	psect	text141
 27482  0109A0                     __ptext141:
 27483                           	opt stack 0
 27484  0109A0                     ___flmul:
 27485                           	opt stack 20
 27486                           
 27487                           ; BSR set to: 0
 27488                           ;incstack = 0
 27489  0109A0  0100               	movlb	0	; () banked
 27490  0109A2  5171               	movf	(___flmul@b+3)& (0+255),w,b
 27491  0109A4  0B80               	andlw	128
 27492  0109A6  0100               	movlb	0	; () banked
 27493  0109A8  6F7A               	movwf	___flmul@sign& (0+255),b
 27494  0109AA  0100               	movlb	0	; () banked
 27495  0109AC  5171               	movf	(___flmul@b+3)& (0+255),w,b
 27496  0109AE  2571               	addwf	(___flmul@b+3)& (0+255),w,b
 27497  0109B0  0100               	movlb	0	; () banked
 27498  0109B2  6F80               	movwf	___flmul@bexp& (0+255),b
 27499                           
 27500                           ; BSR set to: 0
 27501  0109B4  0100               	movlb	0	; () banked
 27502  0109B6  AF70               	btfss	(___flmul@b+2)& (0+255),7,b
 27503  0109B8  D002               	goto	l2611
 27504                           
 27505                           ; BSR set to: 0
 27506  0109BA  0100               	movlb	0	; () banked
 27507  0109BC  8180               	bsf	___flmul@bexp& (0+255),0,b
 27508  0109BE                     l2611:
 27509                           
 27510                           ; BSR set to: 0
 27511                           
 27512                           ; BSR set to: 0
 27513  0109BE  0100               	movlb	0	; () banked
 27514  0109C0  5180               	movf	___flmul@bexp& (0+255),w,b
 27515  0109C2  0100               	movlb	0	; () banked
 27516  0109C4  B4D8               	btfsc	status,2,c
 27517  0109C6  D010               	goto	l2612
 27518                           
 27519                           ; BSR set to: 0
 27520  0109C8  0100               	movlb	0	; () banked
 27521  0109CA  2980               	incf	___flmul@bexp& (0+255),w,b
 27522  0109CC  A4D8               	btfss	status,2,c
 27523  0109CE  D009               	goto	l2613
 27524                           
 27525                           ; BSR set to: 0
 27526  0109D0  0E00               	movlw	0
 27527  0109D2  0100               	movlb	0	; () banked
 27528  0109D4  6F6E               	movwf	___flmul@b& (0+255),b
 27529  0109D6  0E00               	movlw	0
 27530  0109D8  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 27531  0109DA  0E00               	movlw	0
 27532  0109DC  6F70               	movwf	(___flmul@b+2)& (0+255),b
 27533  0109DE  0E00               	movlw	0
 27534  0109E0  6F71               	movwf	(___flmul@b+3)& (0+255),b
 27535  0109E2                     l2613:
 27536                           
 27537                           ; BSR set to: 0
 27538                           
 27539                           ; BSR set to: 0
 27540  0109E2  0100               	movlb	0	; () banked
 27541  0109E4  8F70               	bsf	(___flmul@b+2)& (0+255),7,b
 27542  0109E6  D009               	goto	l2614
 27543  0109E8                     l2612:
 27544                           
 27545                           ; BSR set to: 0
 27546                           
 27547                           ; BSR set to: 0
 27548  0109E8  0E00               	movlw	0
 27549  0109EA  0100               	movlb	0	; () banked
 27550  0109EC  6F6E               	movwf	___flmul@b& (0+255),b
 27551  0109EE  0E00               	movlw	0
 27552  0109F0  6F6F               	movwf	(___flmul@b+1)& (0+255),b
 27553  0109F2  0E00               	movlw	0
 27554  0109F4  6F70               	movwf	(___flmul@b+2)& (0+255),b
 27555  0109F6  0E00               	movlw	0
 27556  0109F8  6F71               	movwf	(___flmul@b+3)& (0+255),b
 27557  0109FA                     l2614:
 27558                           
 27559                           ; BSR set to: 0
 27560                           
 27561                           ; BSR set to: 0
 27562  0109FA  0100               	movlb	0	; () banked
 27563  0109FC  5175               	movf	(___flmul@a+3)& (0+255),w,b
 27564  0109FE  0B80               	andlw	128
 27565  010A00  0100               	movlb	0	; () banked
 27566  010A02  1B7A               	xorwf	___flmul@sign& (0+255),f,b
 27567                           
 27568                           ; BSR set to: 0
 27569  010A04  0100               	movlb	0	; () banked
 27570  010A06  5175               	movf	(___flmul@a+3)& (0+255),w,b
 27571  010A08  2575               	addwf	(___flmul@a+3)& (0+255),w,b
 27572  010A0A  0100               	movlb	0	; () banked
 27573  010A0C  6F7B               	movwf	___flmul@aexp& (0+255),b
 27574                           
 27575                           ; BSR set to: 0
 27576  010A0E  0100               	movlb	0	; () banked
 27577  010A10  AF74               	btfss	(___flmul@a+2)& (0+255),7,b
 27578  010A12  D002               	goto	l2615
 27579                           
 27580                           ; BSR set to: 0
 27581  010A14  0100               	movlb	0	; () banked
 27582  010A16  817B               	bsf	___flmul@aexp& (0+255),0,b
 27583  010A18                     l2615:
 27584                           
 27585                           ; BSR set to: 0
 27586                           
 27587                           ; BSR set to: 0
 27588  010A18  0100               	movlb	0	; () banked
 27589  010A1A  517B               	movf	___flmul@aexp& (0+255),w,b
 27590  010A1C  0100               	movlb	0	; () banked
 27591  010A1E  B4D8               	btfsc	status,2,c
 27592  010A20  D010               	goto	l2616
 27593                           
 27594                           ; BSR set to: 0
 27595  010A22  0100               	movlb	0	; () banked
 27596  010A24  297B               	incf	___flmul@aexp& (0+255),w,b
 27597  010A26  A4D8               	btfss	status,2,c
 27598  010A28  D009               	goto	l2617
 27599                           
 27600                           ; BSR set to: 0
 27601  010A2A  0E00               	movlw	0
 27602  010A2C  0100               	movlb	0	; () banked
 27603  010A2E  6F72               	movwf	___flmul@a& (0+255),b
 27604  010A30  0E00               	movlw	0
 27605  010A32  6F73               	movwf	(___flmul@a+1)& (0+255),b
 27606  010A34  0E00               	movlw	0
 27607  010A36  6F74               	movwf	(___flmul@a+2)& (0+255),b
 27608  010A38  0E00               	movlw	0
 27609  010A3A  6F75               	movwf	(___flmul@a+3)& (0+255),b
 27610  010A3C                     l2617:
 27611                           
 27612                           ; BSR set to: 0
 27613                           
 27614                           ; BSR set to: 0
 27615  010A3C  0100               	movlb	0	; () banked
 27616  010A3E  8F74               	bsf	(___flmul@a+2)& (0+255),7,b
 27617  010A40  D009               	goto	l2618
 27618  010A42                     l2616:
 27619                           
 27620                           ; BSR set to: 0
 27621                           
 27622                           ; BSR set to: 0
 27623  010A42  0E00               	movlw	0
 27624  010A44  0100               	movlb	0	; () banked
 27625  010A46  6F72               	movwf	___flmul@a& (0+255),b
 27626  010A48  0E00               	movlw	0
 27627  010A4A  6F73               	movwf	(___flmul@a+1)& (0+255),b
 27628  010A4C  0E00               	movlw	0
 27629  010A4E  6F74               	movwf	(___flmul@a+2)& (0+255),b
 27630  010A50  0E00               	movlw	0
 27631  010A52  6F75               	movwf	(___flmul@a+3)& (0+255),b
 27632  010A54                     l2618:
 27633                           
 27634                           ; BSR set to: 0
 27635  010A54  0100               	movlb	0	; () banked
 27636  010A56  517B               	movf	___flmul@aexp& (0+255),w,b
 27637  010A58  0100               	movlb	0	; () banked
 27638  010A5A  B4D8               	btfsc	status,2,c
 27639  010A5C  D005               	goto	u10200
 27640                           
 27641                           ; BSR set to: 0
 27642  010A5E  0100               	movlb	0	; () banked
 27643  010A60  5180               	movf	___flmul@bexp& (0+255),w,b
 27644  010A62  0100               	movlb	0	; () banked
 27645  010A64  A4D8               	btfss	status,2,c
 27646  010A66  D00A               	goto	l2619
 27647  010A68                     u10200:
 27648                           
 27649                           ; BSR set to: 0
 27650                           
 27651                           ; BSR set to: 0
 27652  010A68  0E00               	movlw	0
 27653  010A6A  0100               	movlb	0	; () banked
 27654  010A6C  6F6E               	movwf	?___flmul& (0+255),b
 27655  010A6E  0E00               	movlw	0
 27656  010A70  6F6F               	movwf	(?___flmul+1)& (0+255),b
 27657  010A72  0E00               	movlw	0
 27658  010A74  6F70               	movwf	(?___flmul+2)& (0+255),b
 27659  010A76  0E00               	movlw	0
 27660  010A78  6F71               	movwf	(?___flmul+3)& (0+255),b
 27661                           
 27662                           ; BSR set to: 0
 27663  010A7A  0012               	return	
 27664  010A7C                     l2619:
 27665                           
 27666                           ; BSR set to: 0
 27667                           
 27668                           ; BSR set to: 0
 27669  010A7C  0100               	movlb	0	; () banked
 27670  010A7E  5174               	movf	(___flmul@a+2)& (0+255),w,b
 27671  010A80  0100               	movlb	0	; () banked
 27672  010A82  036E               	mulwf	___flmul@b& (0+255),b
 27673  010A84  CFF3 F085          	movff	prodl,___flmul@temp
 27674  010A88  CFF4 F086          	movff	prodh,___flmul@temp+1
 27675                           
 27676                           ; BSR set to: 0
 27677  010A8C  0100               	movlb	0	; () banked
 27678  010A8E  5185               	movf	___flmul@temp& (0+255),w,b
 27679  010A90  0100               	movlb	0	; () banked
 27680  010A92  6F7C               	movwf	___flmul@grs& (0+255),b
 27681  010A94  6B7D               	clrf	(___flmul@grs+1)& (0+255),b
 27682  010A96  6B7E               	clrf	(___flmul@grs+2)& (0+255),b
 27683  010A98  6B7F               	clrf	(___flmul@grs+3)& (0+255),b
 27684                           
 27685                           ; BSR set to: 0
 27686  010A9A  0100               	movlb	0	; () banked
 27687  010A9C  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27688  010A9E  0100               	movlb	0	; () banked
 27689  010AA0  6F81               	movwf	___flmul@prod& (0+255),b
 27690  010AA2  6B82               	clrf	(___flmul@prod+1)& (0+255),b
 27691  010AA4  6B83               	clrf	(___flmul@prod+2)& (0+255),b
 27692  010AA6  6B84               	clrf	(___flmul@prod+3)& (0+255),b
 27693  010AA8  0100               	movlb	0	; () banked
 27694  010AAA  5173               	movf	(___flmul@a+1)& (0+255),w,b
 27695  010AAC  0100               	movlb	0	; () banked
 27696  010AAE  036F               	mulwf	(___flmul@b+1)& (0+255),b
 27697  010AB0  CFF3 F085          	movff	prodl,___flmul@temp
 27698  010AB4  CFF4 F086          	movff	prodh,___flmul@temp+1
 27699                           
 27700                           ; BSR set to: 0
 27701  010AB8  0100               	movlb	0	; () banked
 27702  010ABA  5185               	movf	___flmul@temp& (0+255),w,b
 27703  010ABC  0100               	movlb	0	; () banked
 27704  010ABE  277C               	addwf	___flmul@grs& (0+255),f,b
 27705  010AC0  0E00               	movlw	0
 27706  010AC2  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27707  010AC4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27708  010AC6  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27709                           
 27710                           ; BSR set to: 0
 27711  010AC8  0100               	movlb	0	; () banked
 27712  010ACA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27713  010ACC  0100               	movlb	0	; () banked
 27714  010ACE  2781               	addwf	___flmul@prod& (0+255),f,b
 27715  010AD0  0E00               	movlw	0
 27716  010AD2  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27717  010AD4  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27718  010AD6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27719  010AD8  0100               	movlb	0	; () banked
 27720  010ADA  5172               	movf	___flmul@a& (0+255),w,b
 27721  010ADC  0100               	movlb	0	; () banked
 27722  010ADE  0370               	mulwf	(___flmul@b+2)& (0+255),b
 27723  010AE0  CFF3 F085          	movff	prodl,___flmul@temp
 27724  010AE4  CFF4 F086          	movff	prodh,___flmul@temp+1
 27725                           
 27726                           ; BSR set to: 0
 27727  010AE8  0100               	movlb	0	; () banked
 27728  010AEA  5185               	movf	___flmul@temp& (0+255),w,b
 27729  010AEC  0100               	movlb	0	; () banked
 27730  010AEE  277C               	addwf	___flmul@grs& (0+255),f,b
 27731  010AF0  0E00               	movlw	0
 27732  010AF2  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27733  010AF4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27734  010AF6  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27735                           
 27736                           ; BSR set to: 0
 27737  010AF8  0100               	movlb	0	; () banked
 27738  010AFA  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27739  010AFC  0100               	movlb	0	; () banked
 27740  010AFE  2781               	addwf	___flmul@prod& (0+255),f,b
 27741  010B00  0E00               	movlw	0
 27742  010B02  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27743  010B04  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27744  010B06  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27745                           
 27746                           ; BSR set to: 0
 27747  010B08  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 27748  010B0C  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 27749  010B10  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 27750  010B14  0100               	movlb	0	; () banked
 27751  010B16  6B7C               	clrf	___flmul@grs& (0+255),b
 27752                           
 27753                           ; BSR set to: 0
 27754  010B18  0100               	movlb	0	; () banked
 27755  010B1A  5172               	movf	___flmul@a& (0+255),w,b
 27756  010B1C  0100               	movlb	0	; () banked
 27757  010B1E  036F               	mulwf	(___flmul@b+1)& (0+255),b
 27758  010B20  CFF3 F085          	movff	prodl,___flmul@temp
 27759  010B24  CFF4 F086          	movff	prodh,___flmul@temp+1
 27760                           
 27761                           ; BSR set to: 0
 27762  010B28  0100               	movlb	0	; () banked
 27763  010B2A  5185               	movf	___flmul@temp& (0+255),w,b
 27764  010B2C  0100               	movlb	0	; () banked
 27765  010B2E  277C               	addwf	___flmul@grs& (0+255),f,b
 27766  010B30  0100               	movlb	0	; () banked
 27767  010B32  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27768  010B34  0100               	movlb	0	; () banked
 27769  010B36  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27770  010B38  0E00               	movlw	0
 27771  010B3A  0100               	movlb	0	; () banked
 27772  010B3C  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27773  010B3E  0E00               	movlw	0
 27774  010B40  0100               	movlb	0	; () banked
 27775  010B42  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27776                           
 27777                           ; BSR set to: 0
 27778  010B44  0100               	movlb	0	; () banked
 27779  010B46  5173               	movf	(___flmul@a+1)& (0+255),w,b
 27780  010B48  0100               	movlb	0	; () banked
 27781  010B4A  036E               	mulwf	___flmul@b& (0+255),b
 27782  010B4C  CFF3 F085          	movff	prodl,___flmul@temp
 27783  010B50  CFF4 F086          	movff	prodh,___flmul@temp+1
 27784                           
 27785                           ; BSR set to: 0
 27786  010B54  0100               	movlb	0	; () banked
 27787  010B56  5185               	movf	___flmul@temp& (0+255),w,b
 27788  010B58  0100               	movlb	0	; () banked
 27789  010B5A  277C               	addwf	___flmul@grs& (0+255),f,b
 27790  010B5C  0100               	movlb	0	; () banked
 27791  010B5E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27792  010B60  0100               	movlb	0	; () banked
 27793  010B62  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27794  010B64  0E00               	movlw	0
 27795  010B66  0100               	movlb	0	; () banked
 27796  010B68  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27797  010B6A  0E00               	movlw	0
 27798  010B6C  0100               	movlb	0	; () banked
 27799  010B6E  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27800                           
 27801                           ; BSR set to: 0
 27802  010B70  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 27803  010B74  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 27804  010B78  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 27805  010B7C  0100               	movlb	0	; () banked
 27806  010B7E  6B7C               	clrf	___flmul@grs& (0+255),b
 27807  010B80  0100               	movlb	0	; () banked
 27808  010B82  5172               	movf	___flmul@a& (0+255),w,b
 27809  010B84  0100               	movlb	0	; () banked
 27810  010B86  036E               	mulwf	___flmul@b& (0+255),b
 27811  010B88  CFF3 F085          	movff	prodl,___flmul@temp
 27812  010B8C  CFF4 F086          	movff	prodh,___flmul@temp+1
 27813                           
 27814                           ; BSR set to: 0
 27815  010B90  0100               	movlb	0	; () banked
 27816  010B92  5185               	movf	___flmul@temp& (0+255),w,b
 27817  010B94  0100               	movlb	0	; () banked
 27818  010B96  277C               	addwf	___flmul@grs& (0+255),f,b
 27819  010B98  0100               	movlb	0	; () banked
 27820  010B9A  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27821  010B9C  0100               	movlb	0	; () banked
 27822  010B9E  237D               	addwfc	(___flmul@grs+1)& (0+255),f,b
 27823  010BA0  0E00               	movlw	0
 27824  010BA2  0100               	movlb	0	; () banked
 27825  010BA4  237E               	addwfc	(___flmul@grs+2)& (0+255),f,b
 27826  010BA6  0E00               	movlw	0
 27827  010BA8  0100               	movlb	0	; () banked
 27828  010BAA  237F               	addwfc	(___flmul@grs+3)& (0+255),f,b
 27829                           
 27830                           ; BSR set to: 0
 27831  010BAC  0100               	movlb	0	; () banked
 27832  010BAE  5174               	movf	(___flmul@a+2)& (0+255),w,b
 27833  010BB0  0100               	movlb	0	; () banked
 27834  010BB2  036F               	mulwf	(___flmul@b+1)& (0+255),b
 27835  010BB4  CFF3 F085          	movff	prodl,___flmul@temp
 27836  010BB8  CFF4 F086          	movff	prodh,___flmul@temp+1
 27837  010BBC  0100               	movlb	0	; () banked
 27838  010BBE  5185               	movf	___flmul@temp& (0+255),w,b
 27839  010BC0  0100               	movlb	0	; () banked
 27840  010BC2  2781               	addwf	___flmul@prod& (0+255),f,b
 27841  010BC4  0100               	movlb	0	; () banked
 27842  010BC6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27843  010BC8  0100               	movlb	0	; () banked
 27844  010BCA  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27845  010BCC  0E00               	movlw	0
 27846  010BCE  0100               	movlb	0	; () banked
 27847  010BD0  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27848  010BD2  0E00               	movlw	0
 27849  010BD4  0100               	movlb	0	; () banked
 27850  010BD6  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27851                           
 27852                           ; BSR set to: 0
 27853  010BD8  0100               	movlb	0	; () banked
 27854  010BDA  5173               	movf	(___flmul@a+1)& (0+255),w,b
 27855  010BDC  0100               	movlb	0	; () banked
 27856  010BDE  0370               	mulwf	(___flmul@b+2)& (0+255),b
 27857  010BE0  CFF3 F085          	movff	prodl,___flmul@temp
 27858  010BE4  CFF4 F086          	movff	prodh,___flmul@temp+1
 27859                           
 27860                           ; BSR set to: 0
 27861  010BE8  0100               	movlb	0	; () banked
 27862  010BEA  5185               	movf	___flmul@temp& (0+255),w,b
 27863  010BEC  0100               	movlb	0	; () banked
 27864  010BEE  2781               	addwf	___flmul@prod& (0+255),f,b
 27865  010BF0  0100               	movlb	0	; () banked
 27866  010BF2  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27867  010BF4  0100               	movlb	0	; () banked
 27868  010BF6  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27869  010BF8  0E00               	movlw	0
 27870  010BFA  0100               	movlb	0	; () banked
 27871  010BFC  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27872  010BFE  0E00               	movlw	0
 27873  010C00  0100               	movlb	0	; () banked
 27874  010C02  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27875  010C04  0100               	movlb	0	; () banked
 27876  010C06  5174               	movf	(___flmul@a+2)& (0+255),w,b
 27877  010C08  0100               	movlb	0	; () banked
 27878  010C0A  0370               	mulwf	(___flmul@b+2)& (0+255),b
 27879  010C0C  CFF3 F085          	movff	prodl,___flmul@temp
 27880  010C10  CFF4 F086          	movff	prodh,___flmul@temp+1
 27881                           
 27882                           ; BSR set to: 0
 27883  010C14  0100               	movlb	0	; () banked
 27884  010C16  5185               	movf	___flmul@temp& (0+255),w,b
 27885  010C18  0100               	movlb	0	; () banked
 27886  010C1A  6F76               	movwf	??___flmul& (0+255),b
 27887  010C1C  0100               	movlb	0	; () banked
 27888  010C1E  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 27889  010C20  0100               	movlb	0	; () banked
 27890  010C22  6F77               	movwf	(??___flmul+1)& (0+255),b
 27891  010C24  0100               	movlb	0	; () banked
 27892  010C26  6B78               	clrf	(??___flmul+2)& (0+255),b
 27893  010C28  0100               	movlb	0	; () banked
 27894  010C2A  6B79               	clrf	(??___flmul+3)& (0+255),b
 27895  010C2C  C078  F079         	movff	??___flmul+2,??___flmul+3
 27896  010C30  C077  F078         	movff	??___flmul+1,??___flmul+2
 27897  010C34  C076  F077         	movff	??___flmul,??___flmul+1
 27898  010C38  0100               	movlb	0	; () banked
 27899  010C3A  6B76               	clrf	??___flmul& (0+255),b
 27900  010C3C  0100               	movlb	0	; () banked
 27901  010C3E  5176               	movf	??___flmul& (0+255),w,b
 27902  010C40  0100               	movlb	0	; () banked
 27903  010C42  2781               	addwf	___flmul@prod& (0+255),f,b
 27904  010C44  0100               	movlb	0	; () banked
 27905  010C46  5177               	movf	(??___flmul+1)& (0+255),w,b
 27906  010C48  0100               	movlb	0	; () banked
 27907  010C4A  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27908  010C4C  0100               	movlb	0	; () banked
 27909  010C4E  5178               	movf	(??___flmul+2)& (0+255),w,b
 27910  010C50  0100               	movlb	0	; () banked
 27911  010C52  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27912  010C54  0100               	movlb	0	; () banked
 27913  010C56  5179               	movf	(??___flmul+3)& (0+255),w,b
 27914  010C58  0100               	movlb	0	; () banked
 27915  010C5A  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27916                           
 27917                           ; BSR set to: 0
 27918  010C5C  C07C  F076         	movff	___flmul@grs,??___flmul
 27919  010C60  C07D  F077         	movff	___flmul@grs+1,??___flmul+1
 27920  010C64  C07E  F078         	movff	___flmul@grs+2,??___flmul+2
 27921  010C68  C07F  F079         	movff	___flmul@grs+3,??___flmul+3
 27922  010C6C  0E19               	movlw	25
 27923  010C6E  D006               	goto	u10210
 27924  010C70                     u10215:
 27925  010C70  0100               	movlb	0	; () banked
 27926  010C72  90D8               	bcf	status,0,c
 27927  010C74  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 27928  010C76  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 27929  010C78  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 27930  010C7A  3376               	rrcf	??___flmul& (0+255),f,b
 27931  010C7C                     u10210:
 27932  010C7C  2EE8               	decfsz	wreg,f,c
 27933  010C7E  D7F8               	goto	u10215
 27934  010C80  0100               	movlb	0	; () banked
 27935  010C82  5176               	movf	??___flmul& (0+255),w,b
 27936  010C84  0100               	movlb	0	; () banked
 27937  010C86  2781               	addwf	___flmul@prod& (0+255),f,b
 27938  010C88  0100               	movlb	0	; () banked
 27939  010C8A  5177               	movf	(??___flmul+1)& (0+255),w,b
 27940  010C8C  0100               	movlb	0	; () banked
 27941  010C8E  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 27942  010C90  0100               	movlb	0	; () banked
 27943  010C92  5178               	movf	(??___flmul+2)& (0+255),w,b
 27944  010C94  0100               	movlb	0	; () banked
 27945  010C96  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 27946  010C98  0100               	movlb	0	; () banked
 27947  010C9A  5179               	movf	(??___flmul+3)& (0+255),w,b
 27948  010C9C  0100               	movlb	0	; () banked
 27949  010C9E  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 27950                           
 27951                           ; BSR set to: 0
 27952  010CA0  C07E  F07F         	movff	___flmul@grs+2,___flmul@grs+3
 27953  010CA4  C07D  F07E         	movff	___flmul@grs+1,___flmul@grs+2
 27954  010CA8  C07C  F07D         	movff	___flmul@grs,___flmul@grs+1
 27955  010CAC  0100               	movlb	0	; () banked
 27956  010CAE  6B7C               	clrf	___flmul@grs& (0+255),b
 27957                           
 27958                           ; BSR set to: 0
 27959  010CB0  0100               	movlb	0	; () banked
 27960  010CB2  517B               	movf	___flmul@aexp& (0+255),w,b
 27961  010CB4  C080  F076         	movff	___flmul@bexp,??___flmul
 27962  010CB8  0100               	movlb	0	; () banked
 27963  010CBA  6B77               	clrf	(??___flmul+1)& (0+255),b
 27964  010CBC  0100               	movlb	0	; () banked
 27965  010CBE  2776               	addwf	??___flmul& (0+255),f,b
 27966  010CC0  0E00               	movlw	0
 27967  010CC2  2377               	addwfc	(??___flmul+1)& (0+255),f,b
 27968  010CC4  0E82               	movlw	130
 27969  010CC6  0100               	movlb	0	; () banked
 27970  010CC8  2576               	addwf	??___flmul& (0+255),w,b
 27971  010CCA  0100               	movlb	0	; () banked
 27972  010CCC  6F85               	movwf	___flmul@temp& (0+255),b
 27973  010CCE  0EFF               	movlw	255
 27974  010CD0  0100               	movlb	0	; () banked
 27975  010CD2  2177               	addwfc	(??___flmul+1)& (0+255),w,b
 27976  010CD4  0100               	movlb	0	; () banked
 27977  010CD6  6F86               	movwf	(___flmul@temp+1)& (0+255),b
 27978  010CD8  D015               	goto	l2623
 27979  010CDA                     
 27980                           ; BSR set to: 0
 27981                           
 27982                           ; BSR set to: 0
 27983  010CDA  0100               	movlb	0	; () banked
 27984  010CDC  90D8               	bcf	status,0,c
 27985  010CDE  3781               	rlcf	___flmul@prod& (0+255),f,b
 27986  010CE0  3782               	rlcf	(___flmul@prod+1)& (0+255),f,b
 27987  010CE2  3783               	rlcf	(___flmul@prod+2)& (0+255),f,b
 27988  010CE4  3784               	rlcf	(___flmul@prod+3)& (0+255),f,b
 27989                           
 27990                           ; BSR set to: 0
 27991  010CE6  0100               	movlb	0	; () banked
 27992  010CE8  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 27993  010CEA  D002               	goto	l2625
 27994                           
 27995                           ; BSR set to: 0
 27996  010CEC  0100               	movlb	0	; () banked
 27997  010CEE  8181               	bsf	___flmul@prod& (0+255),0,b
 27998  010CF0                     l2625:
 27999                           
 28000                           ; BSR set to: 0
 28001  010CF0  0100               	movlb	0	; () banked
 28002  010CF2  90D8               	bcf	status,0,c
 28003  010CF4  377C               	rlcf	___flmul@grs& (0+255),f,b
 28004  010CF6  377D               	rlcf	(___flmul@grs+1)& (0+255),f,b
 28005  010CF8  377E               	rlcf	(___flmul@grs+2)& (0+255),f,b
 28006  010CFA  377F               	rlcf	(___flmul@grs+3)& (0+255),f,b
 28007  010CFC  0100               	movlb	0	; () banked
 28008  010CFE  0785               	decf	___flmul@temp& (0+255),f,b
 28009  010D00  A0D8               	btfss	status,0,c
 28010  010D02  0786               	decf	(___flmul@temp+1)& (0+255),f,b
 28011  010D04                     l2623:
 28012                           
 28013                           ; BSR set to: 0
 28014                           
 28015                           ; BSR set to: 0
 28016  010D04  0100               	movlb	0	; () banked
 28017  010D06  AF83               	btfss	(___flmul@prod+2)& (0+255),7,b
 28018  010D08  D7E8               	goto	l2624
 28019                           
 28020                           ; BSR set to: 0
 28021                           
 28022                           ; BSR set to: 0
 28023  010D0A  0E00               	movlw	0
 28024  010D0C  0100               	movlb	0	; () banked
 28025  010D0E  6F7B               	movwf	___flmul@aexp& (0+255),b
 28026                           
 28027                           ; BSR set to: 0
 28028  010D10  0100               	movlb	0	; () banked
 28029  010D12  AF7F               	btfss	(___flmul@grs+3)& (0+255),7,b
 28030  010D14  D024               	goto	l2630
 28031                           
 28032                           ; BSR set to: 0
 28033  010D16  0EFF               	movlw	255
 28034  010D18  0100               	movlb	0	; () banked
 28035  010D1A  157C               	andwf	___flmul@grs& (0+255),w,b
 28036  010D1C  0100               	movlb	0	; () banked
 28037  010D1E  6F76               	movwf	??___flmul& (0+255),b
 28038  010D20  0EFF               	movlw	255
 28039  010D22  0100               	movlb	0	; () banked
 28040  010D24  157D               	andwf	(___flmul@grs+1)& (0+255),w,b
 28041  010D26  0100               	movlb	0	; () banked
 28042  010D28  6F77               	movwf	(??___flmul+1)& (0+255),b
 28043  010D2A  0EFF               	movlw	255
 28044  010D2C  0100               	movlb	0	; () banked
 28045  010D2E  157E               	andwf	(___flmul@grs+2)& (0+255),w,b
 28046  010D30  0100               	movlb	0	; () banked
 28047  010D32  6F78               	movwf	(??___flmul+2)& (0+255),b
 28048  010D34  0E7F               	movlw	127
 28049  010D36  0100               	movlb	0	; () banked
 28050  010D38  157F               	andwf	(___flmul@grs+3)& (0+255),w,b
 28051  010D3A  0100               	movlb	0	; () banked
 28052  010D3C  6F79               	movwf	(??___flmul+3)& (0+255),b
 28053  010D3E  0100               	movlb	0	; () banked
 28054  010D40  5176               	movf	??___flmul& (0+255),w,b
 28055  010D42  0100               	movlb	0	; () banked
 28056  010D44  1177               	iorwf	(??___flmul+1)& (0+255),w,b
 28057  010D46  0100               	movlb	0	; () banked
 28058  010D48  1178               	iorwf	(??___flmul+2)& (0+255),w,b
 28059  010D4A  0100               	movlb	0	; () banked
 28060  010D4C  1179               	iorwf	(??___flmul+3)& (0+255),w,b
 28061  010D4E  A4D8               	btfss	status,2,c
 28062  010D50  D003               	goto	u10260
 28063                           
 28064                           ; BSR set to: 0
 28065                           
 28066                           ; BSR set to: 0
 28067  010D52  0100               	movlb	0	; () banked
 28068  010D54  A181               	btfss	___flmul@prod& (0+255),0,b
 28069  010D56  D003               	goto	l2630
 28070  010D58                     u10260:
 28071                           
 28072                           ; BSR set to: 0
 28073  010D58  0E01               	movlw	1
 28074  010D5A  0100               	movlb	0	; () banked
 28075  010D5C  6F7B               	movwf	___flmul@aexp& (0+255),b
 28076  010D5E                     l2630:
 28077                           
 28078                           ; BSR set to: 0
 28079                           
 28080                           ; BSR set to: 0
 28081                           
 28082                           ; BSR set to: 0
 28083  010D5E  0100               	movlb	0	; () banked
 28084  010D60  517B               	movf	___flmul@aexp& (0+255),w,b
 28085  010D62  0100               	movlb	0	; () banked
 28086  010D64  B4D8               	btfsc	status,2,c
 28087  010D66  D023               	goto	l2632
 28088                           
 28089                           ; BSR set to: 0
 28090  010D68  0E01               	movlw	1
 28091  010D6A  0100               	movlb	0	; () banked
 28092  010D6C  2781               	addwf	___flmul@prod& (0+255),f,b
 28093  010D6E  0E00               	movlw	0
 28094  010D70  2382               	addwfc	(___flmul@prod+1)& (0+255),f,b
 28095  010D72  2383               	addwfc	(___flmul@prod+2)& (0+255),f,b
 28096  010D74  2384               	addwfc	(___flmul@prod+3)& (0+255),f,b
 28097                           
 28098                           ; BSR set to: 0
 28099  010D76  0100               	movlb	0	; () banked
 28100  010D78  A184               	btfss	(___flmul@prod+3)& (0+255),0,b
 28101  010D7A  D019               	goto	l2632
 28102                           
 28103                           ; BSR set to: 0
 28104  010D7C  C081  F076         	movff	___flmul@prod,??___flmul
 28105  010D80  C082  F077         	movff	___flmul@prod+1,??___flmul+1
 28106  010D84  C083  F078         	movff	___flmul@prod+2,??___flmul+2
 28107  010D88  C084  F079         	movff	___flmul@prod+3,??___flmul+3
 28108  010D8C  0100               	movlb	0	; () banked
 28109  010D8E  3579               	rlcf	(??___flmul+3)& (0+255),w,b
 28110  010D90  3379               	rrcf	(??___flmul+3)& (0+255),f,b
 28111  010D92  3378               	rrcf	(??___flmul+2)& (0+255),f,b
 28112  010D94  3377               	rrcf	(??___flmul+1)& (0+255),f,b
 28113  010D96  3376               	rrcf	??___flmul& (0+255),f,b
 28114  010D98  C076  F081         	movff	??___flmul,___flmul@prod
 28115  010D9C  C077  F082         	movff	??___flmul+1,___flmul@prod+1
 28116  010DA0  C078  F083         	movff	??___flmul+2,___flmul@prod+2
 28117  010DA4  C079  F084         	movff	??___flmul+3,___flmul@prod+3
 28118                           
 28119                           ; BSR set to: 0
 28120  010DA8  0100               	movlb	0	; () banked
 28121  010DAA  4B85               	infsnz	___flmul@temp& (0+255),f,b
 28122  010DAC  2B86               	incf	(___flmul@temp+1)& (0+255),f,b
 28123  010DAE                     l2632:
 28124                           
 28125                           ; BSR set to: 0
 28126                           
 28127                           ; BSR set to: 0
 28128                           
 28129                           ; BSR set to: 0
 28130  010DAE  0100               	movlb	0	; () banked
 28131  010DB0  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 28132  010DB2  D010               	goto	l2633
 28133  010DB4  0100               	movlb	0	; () banked
 28134  010DB6  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 28135  010DB8  E104               	bnz	u10290
 28136  010DBA  0100               	movlb	0	; () banked
 28137  010DBC  2985               	incf	___flmul@temp& (0+255),w,b
 28138  010DBE  A0D8               	btfss	status,0,c
 28139  010DC0  D009               	goto	l2633
 28140  010DC2                     u10290:
 28141                           
 28142                           ; BSR set to: 0
 28143  010DC2  0E00               	movlw	0
 28144  010DC4  0100               	movlb	0	; () banked
 28145  010DC6  6F81               	movwf	___flmul@prod& (0+255),b
 28146  010DC8  0E00               	movlw	0
 28147  010DCA  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 28148  010DCC  0E80               	movlw	128
 28149  010DCE  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 28150  010DD0  0E7F               	movlw	127
 28151  010DD2  D02B               	goto	L19
 28152  010DD4                     l2633:
 28153                           
 28154                           ; BSR set to: 0
 28155                           
 28156                           ; BSR set to: 0
 28157  010DD4  0100               	movlb	0	; () banked
 28158  010DD6  BF86               	btfsc	(___flmul@temp+1)& (0+255),7,b
 28159  010DD8  D007               	goto	u10300
 28160  010DDA  0100               	movlb	0	; () banked
 28161  010DDC  5186               	movf	(___flmul@temp+1)& (0+255),w,b
 28162  010DDE  E111               	bnz	l2635
 28163  010DE0  0100               	movlb	0	; () banked
 28164  010DE2  0585               	decf	___flmul@temp& (0+255),w,b
 28165  010DE4  B0D8               	btfsc	status,0,c
 28166  010DE6  D00D               	goto	l2635
 28167  010DE8                     u10300:
 28168                           
 28169                           ; BSR set to: 0
 28170  010DE8  0E00               	movlw	0
 28171  010DEA  0100               	movlb	0	; () banked
 28172  010DEC  6F81               	movwf	___flmul@prod& (0+255),b
 28173  010DEE  0E00               	movlw	0
 28174  010DF0  6F82               	movwf	(___flmul@prod+1)& (0+255),b
 28175  010DF2  0E00               	movlw	0
 28176  010DF4  6F83               	movwf	(___flmul@prod+2)& (0+255),b
 28177  010DF6  0E00               	movlw	0
 28178  010DF8  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 28179  010DFA  0E00               	movlw	0
 28180  010DFC  0100               	movlb	0	; () banked
 28181  010DFE  6F7A               	movwf	___flmul@sign& (0+255),b
 28182  010E00  D015               	goto	l2636
 28183  010E02                     l2635:
 28184                           
 28185                           ; BSR set to: 0
 28186  010E02  C085  F080         	movff	___flmul@temp,___flmul@bexp
 28187                           
 28188                           ; BSR set to: 0
 28189  010E06  0EFF               	movlw	255
 28190  010E08  0100               	movlb	0	; () banked
 28191  010E0A  1781               	andwf	___flmul@prod& (0+255),f,b
 28192  010E0C  0EFF               	movlw	255
 28193  010E0E  1782               	andwf	(___flmul@prod+1)& (0+255),f,b
 28194  010E10  0E7F               	movlw	127
 28195  010E12  1783               	andwf	(___flmul@prod+2)& (0+255),f,b
 28196  010E14  0E00               	movlw	0
 28197  010E16  1784               	andwf	(___flmul@prod+3)& (0+255),f,b
 28198                           
 28199                           ; BSR set to: 0
 28200  010E18  0100               	movlb	0	; () banked
 28201  010E1A  A180               	btfss	___flmul@bexp& (0+255),0,b
 28202  010E1C  D002               	goto	l2637
 28203                           
 28204                           ; BSR set to: 0
 28205  010E1E  0100               	movlb	0	; () banked
 28206  010E20  8F83               	bsf	(___flmul@prod+2)& (0+255),7,b
 28207  010E22                     l2637:
 28208                           
 28209                           ; BSR set to: 0
 28210                           
 28211                           ; BSR set to: 0
 28212  010E22  0100               	movlb	0	; () banked
 28213  010E24  90D8               	bcf	status,0,c
 28214  010E26  3180               	rrcf	___flmul@bexp& (0+255),w,b
 28215  010E28  0100               	movlb	0	; () banked
 28216  010E2A                     L19:
 28217  010E2A  6F84               	movwf	(___flmul@prod+3)& (0+255),b
 28218  010E2C                     l2636:
 28219                           
 28220                           ; BSR set to: 0
 28221                           
 28222                           ; BSR set to: 0
 28223                           
 28224                           ; BSR set to: 0
 28225  010E2C  0100               	movlb	0	; () banked
 28226  010E2E  517A               	movf	___flmul@sign& (0+255),w,b
 28227  010E30  0100               	movlb	0	; () banked
 28228  010E32  1384               	iorwf	(___flmul@prod+3)& (0+255),f,b
 28229                           
 28230                           ; BSR set to: 0
 28231  010E34  C081  F06E         	movff	___flmul@prod,?___flmul
 28232  010E38  C082  F06F         	movff	___flmul@prod+1,?___flmul+1
 28233  010E3C  C083  F070         	movff	___flmul@prod+2,?___flmul+2
 28234  010E40  C084  F071         	movff	___flmul@prod+3,?___flmul+3
 28235  010E44  0012               	return	
 28236  010E46                     __end_of___flmul:
 28237                           	opt stack 0
 28238                           tosu	equ	0xFFF
 28239                           tosh	equ	0xFFE
 28240                           tosl	equ	0xFFD
 28241                           pclath	equ	0xFFA
 28242                           tblptru	equ	0xFF8
 28243                           tblptrh	equ	0xFF7
 28244                           tblptrl	equ	0xFF6
 28245                           tablat	equ	0xFF5
 28246                           prodh	equ	0xFF4
 28247                           prodl	equ	0xFF3
 28248                           intcon	equ	0xFF2
 28249                           indf0	equ	0xFEF
 28250                           postinc0	equ	0xFEE
 28251                           fsr0h	equ	0xFEA
 28252                           fsr0l	equ	0xFE9
 28253                           wreg	equ	0xFE8
 28254                           indf1	equ	0xFE7
 28255                           postdec1	equ	0xFE5
 28256                           fsr1h	equ	0xFE2
 28257                           fsr1l	equ	0xFE1
 28258                           indf2	equ	0xFDF
 28259                           postinc2	equ	0xFDE
 28260                           postdec2	equ	0xFDD
 28261                           plusw2	equ	0xFDB
 28262                           fsr2h	equ	0xFDA
 28263                           fsr2l	equ	0xFD9
 28264                           status	equ	0xFD8
 28265                           
 28266 ;; *************** function ___fldiv *****************
 28267 ;; Defined at:
 28268 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 28269 ;; Parameters:    Size  Location     Type
 28270 ;;  b               4    0[BANK0 ] unsigned char 
 28271 ;;  a               4    4[BANK0 ] unsigned char 
 28272 ;; Auto vars:     Size  Location     Type
 28273 ;;  grs             4   19[BANK0 ] unsigned long 
 28274 ;;  rem             4   13[BANK0 ] unsigned long 
 28275 ;;  new_exp         2   17[BANK0 ] int 
 28276 ;;  aexp            1   24[BANK0 ] unsigned char 
 28277 ;;  bexp            1   23[BANK0 ] unsigned char 
 28278 ;;  sign            1   12[BANK0 ] unsigned char 
 28279 ;; Return value:  Size  Location     Type
 28280 ;;                  4    0[BANK0 ] unsigned char 
 28281 ;; Registers used:
 28282 ;;		wreg, status,2, status,0
 28283 ;; Tracked objects:
 28284 ;;		On entry : 0/0
 28285 ;;		On exit  : 0/0
 28286 ;;		Unchanged: 0/0
 28287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28288 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28289 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28290 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28291 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28292 ;;Total ram usage:       25 bytes
 28293 ;; Hardware stack levels used:    1
 28294 ;; Hardware stack levels required when called:    7
 28295 ;; This function calls:
 28296 ;;		Nothing
 28297 ;; This function is called by:
 28298 ;;		_ADC_Voltage
 28299 ;;		_exp
 28300 ;; This function uses a non-reentrant model
 28301 ;;
 28302                           
 28303                           	psect	text142
 28304  011264                     __ptext142:
 28305                           	opt stack 0
 28306  011264                     ___fldiv:
 28307                           	opt stack 21
 28308                           
 28309                           ; BSR set to: 0
 28310                           ;incstack = 0
 28311  011264  0100               	movlb	0	; () banked
 28312  011266  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 28313  011268  0B80               	andlw	128
 28314  01126A  0100               	movlb	0	; () banked
 28315  01126C  6F6C               	movwf	___fldiv@sign& (0+255),b
 28316  01126E  0100               	movlb	0	; () banked
 28317  011270  5163               	movf	(___fldiv@b+3)& (0+255),w,b
 28318  011272  2563               	addwf	(___fldiv@b+3)& (0+255),w,b
 28319  011274  0100               	movlb	0	; () banked
 28320  011276  6F77               	movwf	___fldiv@bexp& (0+255),b
 28321                           
 28322                           ; BSR set to: 0
 28323  011278  0100               	movlb	0	; () banked
 28324  01127A  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 28325  01127C  D002               	goto	l2577
 28326                           
 28327                           ; BSR set to: 0
 28328  01127E  0100               	movlb	0	; () banked
 28329  011280  8177               	bsf	___fldiv@bexp& (0+255),0,b
 28330  011282                     l2577:
 28331                           
 28332                           ; BSR set to: 0
 28333                           
 28334                           ; BSR set to: 0
 28335  011282  0100               	movlb	0	; () banked
 28336  011284  5177               	movf	___fldiv@bexp& (0+255),w,b
 28337  011286  0100               	movlb	0	; () banked
 28338  011288  B4D8               	btfsc	status,2,c
 28339  01128A  D012               	goto	l2578
 28340                           
 28341                           ; BSR set to: 0
 28342  01128C  0100               	movlb	0	; () banked
 28343  01128E  2977               	incf	___fldiv@bexp& (0+255),w,b
 28344  011290  A4D8               	btfss	status,2,c
 28345  011292  D009               	goto	l2579
 28346                           
 28347                           ; BSR set to: 0
 28348  011294  0E00               	movlw	0
 28349  011296  0100               	movlb	0	; () banked
 28350  011298  6F60               	movwf	___fldiv@b& (0+255),b
 28351  01129A  0E00               	movlw	0
 28352  01129C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 28353  01129E  0E00               	movlw	0
 28354  0112A0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 28355  0112A2  0E00               	movlw	0
 28356  0112A4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28357  0112A6                     l2579:
 28358                           
 28359                           ; BSR set to: 0
 28360                           
 28361                           ; BSR set to: 0
 28362  0112A6  0100               	movlb	0	; () banked
 28363  0112A8  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 28364                           
 28365                           ; BSR set to: 0
 28366  0112AA  0E00               	movlw	0
 28367  0112AC  0100               	movlb	0	; () banked
 28368  0112AE  D008               	goto	L20
 28369  0112B0                     l2578:
 28370                           
 28371                           ; BSR set to: 0
 28372                           
 28373                           ; BSR set to: 0
 28374  0112B0  0E00               	movlw	0
 28375  0112B2  0100               	movlb	0	; () banked
 28376  0112B4  6F60               	movwf	___fldiv@b& (0+255),b
 28377  0112B6  0E00               	movlw	0
 28378  0112B8  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 28379  0112BA  0E00               	movlw	0
 28380  0112BC  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 28381  0112BE  0E00               	movlw	0
 28382  0112C0                     L20:
 28383  0112C0  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28384                           
 28385                           ; BSR set to: 0
 28386                           
 28387                           ; BSR set to: 0
 28388  0112C2  0100               	movlb	0	; () banked
 28389  0112C4  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 28390  0112C6  0B80               	andlw	128
 28391  0112C8  0100               	movlb	0	; () banked
 28392  0112CA  1B6C               	xorwf	___fldiv@sign& (0+255),f,b
 28393                           
 28394                           ; BSR set to: 0
 28395  0112CC  0100               	movlb	0	; () banked
 28396  0112CE  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 28397  0112D0  2567               	addwf	(___fldiv@a+3)& (0+255),w,b
 28398  0112D2  0100               	movlb	0	; () banked
 28399  0112D4  6F78               	movwf	___fldiv@aexp& (0+255),b
 28400                           
 28401                           ; BSR set to: 0
 28402  0112D6  0100               	movlb	0	; () banked
 28403  0112D8  AF66               	btfss	(___fldiv@a+2)& (0+255),7,b
 28404  0112DA  D002               	goto	l2581
 28405                           
 28406                           ; BSR set to: 0
 28407  0112DC  0100               	movlb	0	; () banked
 28408  0112DE  8178               	bsf	___fldiv@aexp& (0+255),0,b
 28409  0112E0                     l2581:
 28410                           
 28411                           ; BSR set to: 0
 28412                           
 28413                           ; BSR set to: 0
 28414  0112E0  0100               	movlb	0	; () banked
 28415  0112E2  5178               	movf	___fldiv@aexp& (0+255),w,b
 28416  0112E4  0100               	movlb	0	; () banked
 28417  0112E6  B4D8               	btfsc	status,2,c
 28418  0112E8  D012               	goto	l2582
 28419                           
 28420                           ; BSR set to: 0
 28421  0112EA  0100               	movlb	0	; () banked
 28422  0112EC  2978               	incf	___fldiv@aexp& (0+255),w,b
 28423  0112EE  A4D8               	btfss	status,2,c
 28424  0112F0  D009               	goto	l2583
 28425                           
 28426                           ; BSR set to: 0
 28427  0112F2  0E00               	movlw	0
 28428  0112F4  0100               	movlb	0	; () banked
 28429  0112F6  6F64               	movwf	___fldiv@a& (0+255),b
 28430  0112F8  0E00               	movlw	0
 28431  0112FA  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 28432  0112FC  0E00               	movlw	0
 28433  0112FE  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 28434  011300  0E00               	movlw	0
 28435  011302  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 28436  011304                     l2583:
 28437                           
 28438                           ; BSR set to: 0
 28439                           
 28440                           ; BSR set to: 0
 28441  011304  0100               	movlb	0	; () banked
 28442  011306  8F66               	bsf	(___fldiv@a+2)& (0+255),7,b
 28443                           
 28444                           ; BSR set to: 0
 28445  011308  0E00               	movlw	0
 28446  01130A  0100               	movlb	0	; () banked
 28447  01130C  D008               	goto	L21
 28448  01130E                     l2582:
 28449                           
 28450                           ; BSR set to: 0
 28451                           
 28452                           ; BSR set to: 0
 28453  01130E  0E00               	movlw	0
 28454  011310  0100               	movlb	0	; () banked
 28455  011312  6F64               	movwf	___fldiv@a& (0+255),b
 28456  011314  0E00               	movlw	0
 28457  011316  6F65               	movwf	(___fldiv@a+1)& (0+255),b
 28458  011318  0E00               	movlw	0
 28459  01131A  6F66               	movwf	(___fldiv@a+2)& (0+255),b
 28460  01131C  0E00               	movlw	0
 28461  01131E                     L21:
 28462  01131E  6F67               	movwf	(___fldiv@a+3)& (0+255),b
 28463                           
 28464                           ; BSR set to: 0
 28465                           
 28466                           ; BSR set to: 0
 28467  011320  0100               	movlb	0	; () banked
 28468  011322  5164               	movf	___fldiv@a& (0+255),w,b
 28469  011324  0100               	movlb	0	; () banked
 28470  011326  1165               	iorwf	(___fldiv@a+1)& (0+255),w,b
 28471  011328  0100               	movlb	0	; () banked
 28472  01132A  1166               	iorwf	(___fldiv@a+2)& (0+255),w,b
 28473  01132C  0100               	movlb	0	; () banked
 28474  01132E  1167               	iorwf	(___fldiv@a+3)& (0+255),w,b
 28475  011330  A4D8               	btfss	status,2,c
 28476  011332  D017               	goto	l2585
 28477                           
 28478                           ; BSR set to: 0
 28479  011334  0E00               	movlw	0
 28480  011336  0100               	movlb	0	; () banked
 28481  011338  6F60               	movwf	___fldiv@b& (0+255),b
 28482  01133A  0E00               	movlw	0
 28483  01133C  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 28484  01133E  0E00               	movlw	0
 28485  011340  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 28486  011342  0E00               	movlw	0
 28487  011344  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28488                           
 28489                           ; BSR set to: 0
 28490  011346  0100               	movlb	0	; () banked
 28491  011348  0E80               	movlw	128
 28492  01134A  1362               	iorwf	(___fldiv@b+2)& (0+255),f,b
 28493  01134C  0E7F               	movlw	127
 28494  01134E  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 28495                           
 28496                           ; BSR set to: 0
 28497  011350  C060  F060         	movff	___fldiv@b,?___fldiv
 28498  011354  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 28499  011358  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 28500  01135C  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 28501                           
 28502                           ; BSR set to: 0
 28503  011360  0012               	return	
 28504  011362                     l2585:
 28505                           
 28506                           ; BSR set to: 0
 28507                           
 28508                           ; BSR set to: 0
 28509  011362  0100               	movlb	0	; () banked
 28510  011364  5177               	movf	___fldiv@bexp& (0+255),w,b
 28511  011366  0100               	movlb	0	; () banked
 28512  011368  A4D8               	btfss	status,2,c
 28513  01136A  D012               	goto	l2587
 28514                           
 28515                           ; BSR set to: 0
 28516  01136C  0E00               	movlw	0
 28517  01136E  0100               	movlb	0	; () banked
 28518  011370  6F60               	movwf	___fldiv@b& (0+255),b
 28519  011372  0E00               	movlw	0
 28520  011374  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 28521  011376  0E00               	movlw	0
 28522  011378  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 28523  01137A  0E00               	movlw	0
 28524  01137C  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28525                           
 28526                           ; BSR set to: 0
 28527  01137E  C060  F060         	movff	___fldiv@b,?___fldiv
 28528  011382  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 28529  011386  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 28530  01138A  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 28531                           
 28532                           ; BSR set to: 0
 28533  01138E  0012               	return	
 28534  011390                     l2587:
 28535                           
 28536                           ; BSR set to: 0
 28537                           
 28538                           ; BSR set to: 0
 28539  011390  0100               	movlb	0	; () banked
 28540  011392  5178               	movf	___fldiv@aexp& (0+255),w,b
 28541  011394  0100               	movlb	0	; () banked
 28542  011396  6F68               	movwf	??___fldiv& (0+255),b
 28543  011398  6B69               	clrf	(??___fldiv+1)& (0+255),b
 28544  01139A  0100               	movlb	0	; () banked
 28545  01139C  1F68               	comf	??___fldiv& (0+255),f,b
 28546  01139E  1F69               	comf	(??___fldiv+1)& (0+255),f,b
 28547  0113A0  4B68               	infsnz	??___fldiv& (0+255),f,b
 28548  0113A2  2B69               	incf	(??___fldiv+1)& (0+255),f,b
 28549  0113A4  0100               	movlb	0	; () banked
 28550  0113A6  5177               	movf	___fldiv@bexp& (0+255),w,b
 28551  0113A8  0100               	movlb	0	; () banked
 28552  0113AA  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 28553  0113AC  6B6B               	clrf	(??___fldiv+3)& (0+255),b
 28554  0113AE  0100               	movlb	0	; () banked
 28555  0113B0  5168               	movf	??___fldiv& (0+255),w,b
 28556  0113B2  0100               	movlb	0	; () banked
 28557  0113B4  276A               	addwf	(??___fldiv+2)& (0+255),f,b
 28558  0113B6  0100               	movlb	0	; () banked
 28559  0113B8  5169               	movf	(??___fldiv+1)& (0+255),w,b
 28560  0113BA  0100               	movlb	0	; () banked
 28561  0113BC  236B               	addwfc	(??___fldiv+3)& (0+255),f,b
 28562  0113BE  0E7F               	movlw	127
 28563  0113C0  0100               	movlb	0	; () banked
 28564  0113C2  256A               	addwf	(??___fldiv+2)& (0+255),w,b
 28565  0113C4  0100               	movlb	0	; () banked
 28566  0113C6  6F71               	movwf	___fldiv@new_exp& (0+255),b
 28567  0113C8  0E00               	movlw	0
 28568  0113CA  0100               	movlb	0	; () banked
 28569  0113CC  216B               	addwfc	(??___fldiv+3)& (0+255),w,b
 28570  0113CE  0100               	movlb	0	; () banked
 28571  0113D0  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 28572                           
 28573                           ; BSR set to: 0
 28574  0113D2  C060  F06D         	movff	___fldiv@b,___fldiv@rem
 28575  0113D6  C061  F06E         	movff	___fldiv@b+1,___fldiv@rem+1
 28576  0113DA  C062  F06F         	movff	___fldiv@b+2,___fldiv@rem+2
 28577  0113DE  C063  F070         	movff	___fldiv@b+3,___fldiv@rem+3
 28578                           
 28579                           ; BSR set to: 0
 28580  0113E2  0E00               	movlw	0
 28581  0113E4  0100               	movlb	0	; () banked
 28582  0113E6  6F60               	movwf	___fldiv@b& (0+255),b
 28583  0113E8  0E00               	movlw	0
 28584  0113EA  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 28585  0113EC  0E00               	movlw	0
 28586  0113EE  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 28587  0113F0  0E00               	movlw	0
 28588  0113F2  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28589                           
 28590                           ; BSR set to: 0
 28591  0113F4  0E00               	movlw	0
 28592  0113F6  0100               	movlb	0	; () banked
 28593  0113F8  6F73               	movwf	___fldiv@grs& (0+255),b
 28594  0113FA  0E00               	movlw	0
 28595  0113FC  6F74               	movwf	(___fldiv@grs+1)& (0+255),b
 28596  0113FE  0E00               	movlw	0
 28597  011400  6F75               	movwf	(___fldiv@grs+2)& (0+255),b
 28598  011402  0E00               	movlw	0
 28599  011404  6F76               	movwf	(___fldiv@grs+3)& (0+255),b
 28600                           
 28601                           ; BSR set to: 0
 28602  011406  0E00               	movlw	0
 28603  011408  0100               	movlb	0	; () banked
 28604  01140A  6F78               	movwf	___fldiv@aexp& (0+255),b
 28605  01140C  D042               	goto	l2588
 28606  01140E                     
 28607                           ; BSR set to: 0
 28608                           
 28609                           ; BSR set to: 0
 28610  01140E  0100               	movlb	0	; () banked
 28611  011410  5178               	movf	___fldiv@aexp& (0+255),w,b
 28612  011412  0100               	movlb	0	; () banked
 28613  011414  B4D8               	btfsc	status,2,c
 28614  011416  D017               	goto	l2590
 28615                           
 28616                           ; BSR set to: 0
 28617  011418  0100               	movlb	0	; () banked
 28618  01141A  90D8               	bcf	status,0,c
 28619  01141C  376D               	rlcf	___fldiv@rem& (0+255),f,b
 28620  01141E  376E               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 28621  011420  376F               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 28622  011422  3770               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 28623  011424  0100               	movlb	0	; () banked
 28624  011426  90D8               	bcf	status,0,c
 28625  011428  3760               	rlcf	___fldiv@b& (0+255),f,b
 28626  01142A  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 28627  01142C  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 28628  01142E  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 28629                           
 28630                           ; BSR set to: 0
 28631  011430  0100               	movlb	0	; () banked
 28632  011432  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 28633  011434  D002               	goto	l2591
 28634                           
 28635                           ; BSR set to: 0
 28636  011436  0100               	movlb	0	; () banked
 28637  011438  8160               	bsf	___fldiv@b& (0+255),0,b
 28638  01143A                     l2591:
 28639                           
 28640                           ; BSR set to: 0
 28641  01143A  0100               	movlb	0	; () banked
 28642  01143C  90D8               	bcf	status,0,c
 28643  01143E  3773               	rlcf	___fldiv@grs& (0+255),f,b
 28644  011440  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 28645  011442  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 28646  011444  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 28647  011446                     l2590:
 28648                           
 28649                           ; BSR set to: 0
 28650                           
 28651                           ; BSR set to: 0
 28652  011446  0100               	movlb	0	; () banked
 28653  011448  5164               	movf	___fldiv@a& (0+255),w,b
 28654  01144A  0100               	movlb	0	; () banked
 28655  01144C  5D6D               	subwf	___fldiv@rem& (0+255),w,b
 28656  01144E  0100               	movlb	0	; () banked
 28657  011450  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 28658  011452  0100               	movlb	0	; () banked
 28659  011454  596E               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 28660  011456  0100               	movlb	0	; () banked
 28661  011458  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 28662  01145A  0100               	movlb	0	; () banked
 28663  01145C  596F               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 28664  01145E  0100               	movlb	0	; () banked
 28665  011460  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 28666  011462  0100               	movlb	0	; () banked
 28667  011464  5970               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 28668  011466  A0D8               	btfss	status,0,c
 28669  011468  D012               	goto	l2592
 28670                           
 28671                           ; BSR set to: 0
 28672  01146A  0100               	movlb	0	; () banked
 28673  01146C  8D76               	bsf	(___fldiv@grs+3)& (0+255),6,b
 28674                           
 28675                           ; BSR set to: 0
 28676  01146E  0100               	movlb	0	; () banked
 28677  011470  5164               	movf	___fldiv@a& (0+255),w,b
 28678  011472  0100               	movlb	0	; () banked
 28679  011474  5F6D               	subwf	___fldiv@rem& (0+255),f,b
 28680  011476  0100               	movlb	0	; () banked
 28681  011478  5165               	movf	(___fldiv@a+1)& (0+255),w,b
 28682  01147A  0100               	movlb	0	; () banked
 28683  01147C  5B6E               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 28684  01147E  0100               	movlb	0	; () banked
 28685  011480  5166               	movf	(___fldiv@a+2)& (0+255),w,b
 28686  011482  0100               	movlb	0	; () banked
 28687  011484  5B6F               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 28688  011486  0100               	movlb	0	; () banked
 28689  011488  5167               	movf	(___fldiv@a+3)& (0+255),w,b
 28690  01148A  0100               	movlb	0	; () banked
 28691  01148C  5B70               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 28692  01148E                     l2592:
 28693                           
 28694                           ; BSR set to: 0
 28695                           
 28696                           ; BSR set to: 0
 28697  01148E  0100               	movlb	0	; () banked
 28698  011490  2B78               	incf	___fldiv@aexp& (0+255),f,b
 28699  011492                     l2588:
 28700                           
 28701                           ; BSR set to: 0
 28702  011492  0E19               	movlw	25
 28703  011494  0100               	movlb	0	; () banked
 28704  011496  6578               	cpfsgt	___fldiv@aexp& (0+255),b
 28705  011498  D7BA               	goto	l2589
 28706                           
 28707                           ; BSR set to: 0
 28708                           
 28709                           ; BSR set to: 0
 28710  01149A  0100               	movlb	0	; () banked
 28711  01149C  516D               	movf	___fldiv@rem& (0+255),w,b
 28712  01149E  0100               	movlb	0	; () banked
 28713  0114A0  116E               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 28714  0114A2  0100               	movlb	0	; () banked
 28715  0114A4  116F               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 28716  0114A6  0100               	movlb	0	; () banked
 28717  0114A8  1170               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 28718  0114AA  B4D8               	btfsc	status,2,c
 28719  0114AC  D018               	goto	l2595
 28720                           
 28721                           ; BSR set to: 0
 28722  0114AE  0100               	movlb	0	; () banked
 28723  0114B0  8173               	bsf	___fldiv@grs& (0+255),0,b
 28724                           
 28725                           ; BSR set to: 0
 28726  0114B2  D015               	goto	l2595
 28727  0114B4                     
 28728                           ; BSR set to: 0
 28729                           
 28730                           ; BSR set to: 0
 28731  0114B4  0100               	movlb	0	; () banked
 28732  0114B6  90D8               	bcf	status,0,c
 28733  0114B8  3760               	rlcf	___fldiv@b& (0+255),f,b
 28734  0114BA  3761               	rlcf	(___fldiv@b+1)& (0+255),f,b
 28735  0114BC  3762               	rlcf	(___fldiv@b+2)& (0+255),f,b
 28736  0114BE  3763               	rlcf	(___fldiv@b+3)& (0+255),f,b
 28737                           
 28738                           ; BSR set to: 0
 28739  0114C0  0100               	movlb	0	; () banked
 28740  0114C2  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 28741  0114C4  D002               	goto	l2597
 28742                           
 28743                           ; BSR set to: 0
 28744  0114C6  0100               	movlb	0	; () banked
 28745  0114C8  8160               	bsf	___fldiv@b& (0+255),0,b
 28746  0114CA                     l2597:
 28747                           
 28748                           ; BSR set to: 0
 28749  0114CA  0100               	movlb	0	; () banked
 28750  0114CC  90D8               	bcf	status,0,c
 28751  0114CE  3773               	rlcf	___fldiv@grs& (0+255),f,b
 28752  0114D0  3774               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 28753  0114D2  3775               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 28754  0114D4  3776               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 28755  0114D6  0100               	movlb	0	; () banked
 28756  0114D8  0771               	decf	___fldiv@new_exp& (0+255),f,b
 28757  0114DA  A0D8               	btfss	status,0,c
 28758  0114DC  0772               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 28759  0114DE                     l2595:
 28760                           
 28761                           ; BSR set to: 0
 28762                           
 28763                           ; BSR set to: 0
 28764  0114DE  0100               	movlb	0	; () banked
 28765  0114E0  AF62               	btfss	(___fldiv@b+2)& (0+255),7,b
 28766  0114E2  D7E8               	goto	l2596
 28767                           
 28768                           ; BSR set to: 0
 28769                           
 28770                           ; BSR set to: 0
 28771  0114E4  0E00               	movlw	0
 28772  0114E6  0100               	movlb	0	; () banked
 28773  0114E8  6F78               	movwf	___fldiv@aexp& (0+255),b
 28774                           
 28775                           ; BSR set to: 0
 28776  0114EA  0100               	movlb	0	; () banked
 28777  0114EC  AF76               	btfss	(___fldiv@grs+3)& (0+255),7,b
 28778  0114EE  D024               	goto	l2602
 28779                           
 28780                           ; BSR set to: 0
 28781  0114F0  0EFF               	movlw	255
 28782  0114F2  0100               	movlb	0	; () banked
 28783  0114F4  1573               	andwf	___fldiv@grs& (0+255),w,b
 28784  0114F6  0100               	movlb	0	; () banked
 28785  0114F8  6F68               	movwf	??___fldiv& (0+255),b
 28786  0114FA  0EFF               	movlw	255
 28787  0114FC  0100               	movlb	0	; () banked
 28788  0114FE  1574               	andwf	(___fldiv@grs+1)& (0+255),w,b
 28789  011500  0100               	movlb	0	; () banked
 28790  011502  6F69               	movwf	(??___fldiv+1)& (0+255),b
 28791  011504  0EFF               	movlw	255
 28792  011506  0100               	movlb	0	; () banked
 28793  011508  1575               	andwf	(___fldiv@grs+2)& (0+255),w,b
 28794  01150A  0100               	movlb	0	; () banked
 28795  01150C  6F6A               	movwf	(??___fldiv+2)& (0+255),b
 28796  01150E  0E7F               	movlw	127
 28797  011510  0100               	movlb	0	; () banked
 28798  011512  1576               	andwf	(___fldiv@grs+3)& (0+255),w,b
 28799  011514  0100               	movlb	0	; () banked
 28800  011516  6F6B               	movwf	(??___fldiv+3)& (0+255),b
 28801  011518  0100               	movlb	0	; () banked
 28802  01151A  5168               	movf	??___fldiv& (0+255),w,b
 28803  01151C  0100               	movlb	0	; () banked
 28804  01151E  1169               	iorwf	(??___fldiv+1)& (0+255),w,b
 28805  011520  0100               	movlb	0	; () banked
 28806  011522  116A               	iorwf	(??___fldiv+2)& (0+255),w,b
 28807  011524  0100               	movlb	0	; () banked
 28808  011526  116B               	iorwf	(??___fldiv+3)& (0+255),w,b
 28809  011528  A4D8               	btfss	status,2,c
 28810  01152A  D003               	goto	u11060
 28811                           
 28812                           ; BSR set to: 0
 28813                           
 28814                           ; BSR set to: 0
 28815  01152C  0100               	movlb	0	; () banked
 28816  01152E  A160               	btfss	___fldiv@b& (0+255),0,b
 28817  011530  D003               	goto	l2602
 28818  011532                     u11060:
 28819                           
 28820                           ; BSR set to: 0
 28821  011532  0E01               	movlw	1
 28822  011534  0100               	movlb	0	; () banked
 28823  011536  6F78               	movwf	___fldiv@aexp& (0+255),b
 28824  011538                     l2602:
 28825                           
 28826                           ; BSR set to: 0
 28827                           
 28828                           ; BSR set to: 0
 28829                           
 28830                           ; BSR set to: 0
 28831  011538  0100               	movlb	0	; () banked
 28832  01153A  5178               	movf	___fldiv@aexp& (0+255),w,b
 28833  01153C  0100               	movlb	0	; () banked
 28834  01153E  B4D8               	btfsc	status,2,c
 28835  011540  D023               	goto	l2604
 28836                           
 28837                           ; BSR set to: 0
 28838  011542  0E01               	movlw	1
 28839  011544  0100               	movlb	0	; () banked
 28840  011546  2760               	addwf	___fldiv@b& (0+255),f,b
 28841  011548  0E00               	movlw	0
 28842  01154A  2361               	addwfc	(___fldiv@b+1)& (0+255),f,b
 28843  01154C  2362               	addwfc	(___fldiv@b+2)& (0+255),f,b
 28844  01154E  2363               	addwfc	(___fldiv@b+3)& (0+255),f,b
 28845                           
 28846                           ; BSR set to: 0
 28847  011550  0100               	movlb	0	; () banked
 28848  011552  A163               	btfss	(___fldiv@b+3)& (0+255),0,b
 28849  011554  D019               	goto	l2604
 28850                           
 28851                           ; BSR set to: 0
 28852  011556  C060  F068         	movff	___fldiv@b,??___fldiv
 28853  01155A  C061  F069         	movff	___fldiv@b+1,??___fldiv+1
 28854  01155E  C062  F06A         	movff	___fldiv@b+2,??___fldiv+2
 28855  011562  C063  F06B         	movff	___fldiv@b+3,??___fldiv+3
 28856  011566  0100               	movlb	0	; () banked
 28857  011568  356B               	rlcf	(??___fldiv+3)& (0+255),w,b
 28858  01156A  336B               	rrcf	(??___fldiv+3)& (0+255),f,b
 28859  01156C  336A               	rrcf	(??___fldiv+2)& (0+255),f,b
 28860  01156E  3369               	rrcf	(??___fldiv+1)& (0+255),f,b
 28861  011570  3368               	rrcf	??___fldiv& (0+255),f,b
 28862  011572  C068  F060         	movff	??___fldiv,___fldiv@b
 28863  011576  C069  F061         	movff	??___fldiv+1,___fldiv@b+1
 28864  01157A  C06A  F062         	movff	??___fldiv+2,___fldiv@b+2
 28865  01157E  C06B  F063         	movff	??___fldiv+3,___fldiv@b+3
 28866                           
 28867                           ; BSR set to: 0
 28868  011582  0100               	movlb	0	; () banked
 28869  011584  4B71               	infsnz	___fldiv@new_exp& (0+255),f,b
 28870  011586  2B72               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 28871  011588                     l2604:
 28872                           
 28873                           ; BSR set to: 0
 28874                           
 28875                           ; BSR set to: 0
 28876                           
 28877                           ; BSR set to: 0
 28878  011588  0100               	movlb	0	; () banked
 28879  01158A  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 28880  01158C  D014               	goto	l2605
 28881  01158E  0100               	movlb	0	; () banked
 28882  011590  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 28883  011592  E104               	bnz	u11090
 28884  011594  0100               	movlb	0	; () banked
 28885  011596  2971               	incf	___fldiv@new_exp& (0+255),w,b
 28886  011598  A0D8               	btfss	status,0,c
 28887  01159A  D00D               	goto	l2605
 28888  01159C                     u11090:
 28889                           
 28890                           ; BSR set to: 0
 28891  01159C  0E00               	movlw	0
 28892  01159E  0100               	movlb	0	; () banked
 28893  0115A0  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 28894  0115A2  6971               	setf	___fldiv@new_exp& (0+255),b
 28895  0115A4  0E00               	movlw	0
 28896  0115A6  0100               	movlb	0	; () banked
 28897  0115A8  6F60               	movwf	___fldiv@b& (0+255),b
 28898  0115AA  0E00               	movlw	0
 28899  0115AC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 28900  0115AE  0E00               	movlw	0
 28901  0115B0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 28902  0115B2  0E00               	movlw	0
 28903  0115B4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28904  0115B6                     l2605:
 28905                           
 28906                           ; BSR set to: 0
 28907                           
 28908                           ; BSR set to: 0
 28909  0115B6  0100               	movlb	0	; () banked
 28910  0115B8  BF72               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 28911  0115BA  D007               	goto	u11100
 28912  0115BC  0100               	movlb	0	; () banked
 28913  0115BE  5172               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 28914  0115C0  E115               	bnz	l13442
 28915  0115C2  0100               	movlb	0	; () banked
 28916  0115C4  0571               	decf	___fldiv@new_exp& (0+255),w,b
 28917  0115C6  B0D8               	btfsc	status,0,c
 28918  0115C8  D011               	goto	l2606
 28919  0115CA                     u11100:
 28920                           
 28921                           ; BSR set to: 0
 28922  0115CA  0E00               	movlw	0
 28923  0115CC  0100               	movlb	0	; () banked
 28924  0115CE  6F72               	movwf	(___fldiv@new_exp+1)& (0+255),b
 28925  0115D0  0E00               	movlw	0
 28926  0115D2  6F71               	movwf	___fldiv@new_exp& (0+255),b
 28927  0115D4  0E00               	movlw	0
 28928  0115D6  0100               	movlb	0	; () banked
 28929  0115D8  6F60               	movwf	___fldiv@b& (0+255),b
 28930  0115DA  0E00               	movlw	0
 28931  0115DC  6F61               	movwf	(___fldiv@b+1)& (0+255),b
 28932  0115DE  0E00               	movlw	0
 28933  0115E0  6F62               	movwf	(___fldiv@b+2)& (0+255),b
 28934  0115E2  0E00               	movlw	0
 28935  0115E4  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28936  0115E6  0E00               	movlw	0
 28937  0115E8  0100               	movlb	0	; () banked
 28938  0115EA  6F6C               	movwf	___fldiv@sign& (0+255),b
 28939  0115EC                     l2606:
 28940  0115EC                     l13442:
 28941                           
 28942                           ; BSR set to: 0
 28943  0115EC  C071  F077         	movff	___fldiv@new_exp,___fldiv@bexp
 28944                           
 28945                           ; BSR set to: 0
 28946  0115F0  0100               	movlb	0	; () banked
 28947  0115F2  A177               	btfss	___fldiv@bexp& (0+255),0,b
 28948  0115F4  D003               	goto	l2607
 28949                           
 28950                           ; BSR set to: 0
 28951  0115F6  0100               	movlb	0	; () banked
 28952  0115F8  8F62               	bsf	(___fldiv@b+2)& (0+255),7,b
 28953  0115FA  D002               	goto	l2608
 28954  0115FC                     l2607:
 28955                           
 28956                           ; BSR set to: 0
 28957                           
 28958                           ; BSR set to: 0
 28959  0115FC  0100               	movlb	0	; () banked
 28960  0115FE  9F62               	bcf	(___fldiv@b+2)& (0+255),7,b
 28961  011600                     l2608:
 28962                           
 28963                           ; BSR set to: 0
 28964                           
 28965                           ; BSR set to: 0
 28966  011600  0100               	movlb	0	; () banked
 28967  011602  90D8               	bcf	status,0,c
 28968  011604  3177               	rrcf	___fldiv@bexp& (0+255),w,b
 28969  011606  0100               	movlb	0	; () banked
 28970  011608  6F63               	movwf	(___fldiv@b+3)& (0+255),b
 28971                           
 28972                           ; BSR set to: 0
 28973  01160A  0100               	movlb	0	; () banked
 28974  01160C  516C               	movf	___fldiv@sign& (0+255),w,b
 28975  01160E  0100               	movlb	0	; () banked
 28976  011610  1363               	iorwf	(___fldiv@b+3)& (0+255),f,b
 28977                           
 28978                           ; BSR set to: 0
 28979  011612  C060  F060         	movff	___fldiv@b,?___fldiv
 28980  011616  C061  F061         	movff	___fldiv@b+1,?___fldiv+1
 28981  01161A  C062  F062         	movff	___fldiv@b+2,?___fldiv+2
 28982  01161E  C063  F063         	movff	___fldiv@b+3,?___fldiv+3
 28983  011622  0012               	return	
 28984  011624                     __end_of___fldiv:
 28985                           	opt stack 0
 28986                           tosu	equ	0xFFF
 28987                           tosh	equ	0xFFE
 28988                           tosl	equ	0xFFD
 28989                           pclath	equ	0xFFA
 28990                           tblptru	equ	0xFF8
 28991                           tblptrh	equ	0xFF7
 28992                           tblptrl	equ	0xFF6
 28993                           tablat	equ	0xFF5
 28994                           prodh	equ	0xFF4
 28995                           prodl	equ	0xFF3
 28996                           intcon	equ	0xFF2
 28997                           indf0	equ	0xFEF
 28998                           postinc0	equ	0xFEE
 28999                           fsr0h	equ	0xFEA
 29000                           fsr0l	equ	0xFE9
 29001                           wreg	equ	0xFE8
 29002                           indf1	equ	0xFE7
 29003                           postdec1	equ	0xFE5
 29004                           fsr1h	equ	0xFE2
 29005                           fsr1l	equ	0xFE1
 29006                           indf2	equ	0xFDF
 29007                           postinc2	equ	0xFDE
 29008                           postdec2	equ	0xFDD
 29009                           plusw2	equ	0xFDB
 29010                           fsr2h	equ	0xFDA
 29011                           fsr2l	equ	0xFD9
 29012                           status	equ	0xFD8
 29013                           
 29014 ;; *************** function _ISR_Function *****************
 29015 ;; Defined at:
 29016 ;;		line 38 in file "Library/ISR.c"
 29017 ;; Parameters:    Size  Location     Type
 29018 ;;		None
 29019 ;; Auto vars:     Size  Location     Type
 29020 ;;		None
 29021 ;; Return value:  Size  Location     Type
 29022 ;;                  1    wreg      void 
 29023 ;; Registers used:
 29024 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29025 ;; Tracked objects:
 29026 ;;		On entry : 0/0
 29027 ;;		On exit  : 0/0
 29028 ;;		Unchanged: 0/0
 29029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29031 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29032 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29033 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29034 ;;Total ram usage:       18 bytes
 29035 ;; Hardware stack levels used:    1
 29036 ;; Hardware stack levels required when called:    6
 29037 ;; This function calls:
 29038 ;;		_Timer0_ISR
 29039 ;; This function is called by:
 29040 ;;		Interrupt level 2
 29041 ;; This function uses a non-reentrant model
 29042 ;;
 29043                           
 29044                           	psect	intcode
 29045  001408                     __pintcode:
 29046                           	opt stack 0
 29047  001408                     _ISR_Function:
 29048                           	opt stack 14
 29049                           
 29050                           ; BSR set to: 0
 29051                           ;incstack = 0
 29052  001408  8250               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29053  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29054  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29055  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29056  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29057  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29058  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29059  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29060  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29061  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29062  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29063  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29064  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29065  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29066  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29067  001442  C050  F025         	movff	btemp,??_ISR_Function+14
 29068  001446  C051  F026         	movff	btemp+1,??_ISR_Function+15
 29069  00144A  C052  F027         	movff	btemp+2,??_ISR_Function+16
 29070  00144E  C053  F028         	movff	btemp+3,??_ISR_Function+17
 29071                           
 29072                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29073  001452  92F2               	bcf	intcon,1,c	;volatile
 29074                           
 29075                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29076  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29077  001456  AAF2               	btfss	intcon,5,c	;volatile
 29078  001458  D002               	goto	i2l1590
 29079                           
 29080                           ;ISR.c: 68: Timer0_ISR();
 29081  00145A  EC5B  F0B3         	call	_Timer0_ISR	;wreg free
 29082  00145E                     i2l1590:
 29083  00145E  C028  F053         	movff	??_ISR_Function+17,btemp+3
 29084  001462  C027  F052         	movff	??_ISR_Function+16,btemp+2
 29085  001466  C026  F051         	movff	??_ISR_Function+15,btemp+1
 29086  00146A  C025  F050         	movff	??_ISR_Function+14,btemp
 29087  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29088  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29089  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29090  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29091  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29092  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29093  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29094  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29095  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29096  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29097  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29098  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29099  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29100  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29101  0014A6  9250               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29102  0014A8  0011               	retfie		f
 29103  0014AA                     __end_of_ISR_Function:
 29104                           	opt stack 0
 29105                           tosu	equ	0xFFF
 29106                           tosh	equ	0xFFE
 29107                           tosl	equ	0xFFD
 29108                           pclatu	equ	0xFFB
 29109                           pclath	equ	0xFFA
 29110                           tblptru	equ	0xFF8
 29111                           tblptrh	equ	0xFF7
 29112                           tblptrl	equ	0xFF6
 29113                           tablat	equ	0xFF5
 29114                           prodh	equ	0xFF4
 29115                           prodl	equ	0xFF3
 29116                           intcon	equ	0xFF2
 29117                           indf0	equ	0xFEF
 29118                           postinc0	equ	0xFEE
 29119                           fsr0h	equ	0xFEA
 29120                           fsr0l	equ	0xFE9
 29121                           wreg	equ	0xFE8
 29122                           indf1	equ	0xFE7
 29123                           postdec1	equ	0xFE5
 29124                           fsr1h	equ	0xFE2
 29125                           fsr1l	equ	0xFE1
 29126                           indf2	equ	0xFDF
 29127                           postinc2	equ	0xFDE
 29128                           postdec2	equ	0xFDD
 29129                           plusw2	equ	0xFDB
 29130                           fsr2h	equ	0xFDA
 29131                           fsr2l	equ	0xFD9
 29132                           status	equ	0xFD8
 29133                           
 29134 ;; *************** function _Timer0_ISR *****************
 29135 ;; Defined at:
 29136 ;;		line 94 in file "Library/Timer0.c"
 29137 ;; Parameters:    Size  Location     Type
 29138 ;;		None
 29139 ;; Auto vars:     Size  Location     Type
 29140 ;;		None
 29141 ;; Return value:  Size  Location     Type
 29142 ;;                  1    wreg      void 
 29143 ;; Registers used:
 29144 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29145 ;; Tracked objects:
 29146 ;;		On entry : 0/0
 29147 ;;		On exit  : 0/0
 29148 ;;		Unchanged: 0/0
 29149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29152 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29153 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29154 ;;Total ram usage:        0 bytes
 29155 ;; Hardware stack levels used:    1
 29156 ;; Hardware stack levels required when called:    5
 29157 ;; This function calls:
 29158 ;;		Absolute function
 29159 ;;		i2_Motor_Step
 29160 ;;		i2_Timer0_Stop
 29161 ;; This function is called by:
 29162 ;;		_ISR_Function
 29163 ;; This function uses a non-reentrant model
 29164 ;;
 29165                           
 29166                           	psect	text144
 29167  0166B6                     __ptext144:
 29168                           	opt stack 0
 29169  0166B6                     _Timer0_ISR:
 29170                           	opt stack 14
 29171                           
 29172                           ;Timer0.c: 96: Timer0_Stop();
 29173                           
 29174                           ;incstack = 0
 29175  0166B6  EC4F  F0B5         	call	i2_Timer0_Stop	;wreg free
 29176                           
 29177                           ;Timer0.c: 99: if (gISR != 0)
 29178  0166BA  0101               	movlb	1	; () banked
 29179  0166BC  5108               	movf	_gISR& (0+255),w,b
 29180  0166BE  0101               	movlb	1	; () banked
 29181  0166C0  1109               	iorwf	(_gISR+1)& (0+255),w,b
 29182  0166C2  0101               	movlb	1	; () banked
 29183  0166C4  110A               	iorwf	(_gISR+2)& (0+255),w,b
 29184  0166C6  B4D8               	btfsc	status,2,c
 29185  0166C8  0012               	return	
 29186                           
 29187                           ; BSR set to: 1
 29188                           ;Timer0.c: 100: gISR();
 29189  0166CA  D801               	call	i2u1372_48
 29190  0166CC  0012               	return	
 29191  0166CE                     i2u1372_48:
 29192  0166CE  0005               	push	
 29193  0166D0  6EFA               	movwf	pclath,c
 29194  0166D2  0101               	movlb	1	; () banked
 29195  0166D4  5108               	movf	_gISR& (0+255),w,b
 29196  0166D6  6EFD               	movwf	tosl,c
 29197  0166D8  5109               	movf	(_gISR+1)& (0+255),w,b
 29198  0166DA  6EFE               	movwf	tosh,c
 29199  0166DC  510A               	movf	(_gISR+2)& (0+255),w,b
 29200  0166DE  6EFF               	movwf	tosu,c
 29201  0166E0  50FA               	movf	pclath,w,c
 29202  0166E2  0012               	return		;indir
 29203  0166E4                     __end_of_Timer0_ISR:
 29204                           	opt stack 0
 29205                           tosu	equ	0xFFF
 29206                           tosh	equ	0xFFE
 29207                           tosl	equ	0xFFD
 29208                           pclatu	equ	0xFFB
 29209                           pclath	equ	0xFFA
 29210                           tblptru	equ	0xFF8
 29211                           tblptrh	equ	0xFF7
 29212                           tblptrl	equ	0xFF6
 29213                           tablat	equ	0xFF5
 29214                           prodh	equ	0xFF4
 29215                           prodl	equ	0xFF3
 29216                           intcon	equ	0xFF2
 29217                           indf0	equ	0xFEF
 29218                           postinc0	equ	0xFEE
 29219                           fsr0h	equ	0xFEA
 29220                           fsr0l	equ	0xFE9
 29221                           wreg	equ	0xFE8
 29222                           indf1	equ	0xFE7
 29223                           postdec1	equ	0xFE5
 29224                           fsr1h	equ	0xFE2
 29225                           fsr1l	equ	0xFE1
 29226                           indf2	equ	0xFDF
 29227                           postinc2	equ	0xFDE
 29228                           postdec2	equ	0xFDD
 29229                           plusw2	equ	0xFDB
 29230                           fsr2h	equ	0xFDA
 29231                           fsr2l	equ	0xFD9
 29232                           status	equ	0xFD8
 29233                           
 29234 ;; *************** function i2_Motor_Step *****************
 29235 ;; Defined at:
 29236 ;;		line 75 in file "Library/Motor.c"
 29237 ;; Parameters:    Size  Location     Type
 29238 ;;		None
 29239 ;; Auto vars:     Size  Location     Type
 29240 ;;		None
 29241 ;; Return value:  Size  Location     Type
 29242 ;;                  1    wreg      void 
 29243 ;; Registers used:
 29244 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29245 ;; Tracked objects:
 29246 ;;		On entry : 0/0
 29247 ;;		On exit  : 0/0
 29248 ;;		Unchanged: 0/0
 29249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29251 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29252 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29253 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29254 ;;Total ram usage:        2 bytes
 29255 ;; Hardware stack levels used:    1
 29256 ;; Hardware stack levels required when called:    4
 29257 ;; This function calls:
 29258 ;;		i2_MXK_Queue
 29259 ;;		i2_MXK_Release
 29260 ;;		i2_MXK_SwitchTo
 29261 ;;		i2_Port_SetPin
 29262 ;;		i2_Timer0_Restart
 29263 ;;		i2_Timer0_Stop
 29264 ;; This function is called by:
 29265 ;; This function uses a non-reentrant model
 29266 ;;
 29267                           
 29268                           	psect	text145
 29269  01419A                     __ptext145:
 29270                           	opt stack 0
 29271  01419A                     i2_Motor_Step:
 29272                           	opt stack 14
 29273                           
 29274                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29275                           
 29276                           ;incstack = 0
 29277  01419A  0100               	movlb	0	; () banked
 29278  01419C  EE20 F004          	lfsr	2,4
 29279  0141A0  51DC               	movf	_lMotor& (0+255),w,b
 29280  0141A2  26D9               	addwf	fsr2l,f,c
 29281  0141A4  51DD               	movf	(_lMotor+1)& (0+255),w,b
 29282  0141A6  22DA               	addwfc	fsr2h,f,c
 29283  0141A8  50DF               	movf	indf2,w,c
 29284  0141AA  ECAF  F0B2         	call	i2_MXK_SwitchTo
 29285  0141AE  0900               	iorlw	0
 29286  0141B0  B4D8               	btfsc	status,2,c
 29287  0141B2  D06A               	goto	i2l1627
 29288                           
 29289                           ;Motor.c: 78: {
 29290                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29291  0141B4  C0DC  FFD9         	movff	_lMotor,fsr2l
 29292  0141B8  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 29293  0141BC  50DE               	movf	postinc2,w,c
 29294  0141BE  10DE               	iorwf	postinc2,w,c
 29295  0141C0  B4D8               	btfsc	status,2,c
 29296  0141C2  D05D               	goto	i2l1628
 29297                           
 29298                           ;Motor.c: 80: {
 29299                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29300  0141C4  C0DC  FFD9         	movff	_lMotor,fsr2l
 29301  0141C8  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 29302  0141CC  0E01               	movlw	1
 29303  0141CE  BEDB               	btfsc	plusw2,7,c
 29304  0141D0  D022               	goto	i2l1629
 29305  0141D2  0E01               	movlw	1
 29306  0141D4  50DB               	movf	plusw2,w,c
 29307  0141D6  E103               	bnz	i2u1185_40
 29308  0141D8  04DE               	decf	postinc2,w,c
 29309  0141DA  A0D8               	btfss	status,0,c
 29310  0141DC  D01C               	goto	i2l1629
 29311  0141DE                     i2u1185_40:
 29312                           
 29313                           ;Motor.c: 83: {
 29314                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29315  0141DE  C0DC  FFD9         	movff	_lMotor,fsr2l
 29316  0141E2  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 29317  0141E6  28DE               	incf	postinc2,w,c
 29318  0141E8  E104               	bnz	i2u1186_40
 29319  0141EA  0E7F               	movlw	127
 29320  0141EC  18DE               	xorwf	postinc2,w,c
 29321  0141EE  B4D8               	btfsc	status,2,c
 29322  0141F0  D007               	goto	i2l1630
 29323  0141F2                     i2u1186_40:
 29324                           
 29325                           ;Motor.c: 85: lMotor->mDelta --;
 29326  0141F2  C0DC  FFD9         	movff	_lMotor,fsr2l
 29327  0141F6  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 29328  0141FA  06DE               	decf	postinc2,f,c
 29329  0141FC  0E00               	movlw	0
 29330  0141FE  5ADD               	subwfb	postdec2,f,c
 29331  014200                     i2l1630:
 29332                           
 29333                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29334  014200  0E8C               	movlw	low _PortE
 29335  014202  6E10               	movwf	i2Port_SetPin@pInput,c
 29336  014204  0E01               	movlw	high _PortE
 29337  014206  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29338  014208  0E00               	movlw	0
 29339  01420A  6E12               	movwf	i2Port_SetPin@pPin,c
 29340  01420C  0E01               	movlw	1
 29341  01420E  6E13               	movwf	i2Port_SetPin@pValue,c
 29342  014210  ECF7  F0A6         	call	i2_Port_SetPin	;wreg free
 29343                           
 29344                           ;Motor.c: 88: }
 29345  014214  D01B               	goto	i2l1631
 29346  014216                     i2l1629:
 29347                           
 29348                           ;Motor.c: 89: else
 29349                           ;Motor.c: 90: {
 29350                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29351  014216  C0DC  FFD9         	movff	_lMotor,fsr2l
 29352  01421A  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 29353  01421E  04DE               	decf	postinc2,w,c
 29354  014220  E104               	bnz	i2u1187_40
 29355  014222  0E80               	movlw	128
 29356  014224  18DE               	xorwf	postinc2,w,c
 29357  014226  B4D8               	btfsc	status,2,c
 29358  014228  D007               	goto	i2l1632
 29359  01422A                     i2u1187_40:
 29360                           
 29361                           ;Motor.c: 92: lMotor->mDelta ++;
 29362  01422A  C0DC  FFD9         	movff	_lMotor,fsr2l
 29363  01422E  C0DD  FFDA         	movff	_lMotor+1,fsr2h
 29364  014232  2ADE               	incf	postinc2,f,c
 29365  014234  0E00               	movlw	0
 29366  014236  22DD               	addwfc	postdec2,f,c
 29367  014238                     i2l1632:
 29368                           
 29369                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29370  014238  0E8C               	movlw	low _PortE
 29371  01423A  6E10               	movwf	i2Port_SetPin@pInput,c
 29372  01423C  0E01               	movlw	high _PortE
 29373  01423E  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29374  014240  0E00               	movlw	0
 29375  014242  6E12               	movwf	i2Port_SetPin@pPin,c
 29376  014244  0E00               	movlw	0
 29377  014246  6E13               	movwf	i2Port_SetPin@pValue,c
 29378  014248  ECF7  F0A6         	call	i2_Port_SetPin	;wreg free
 29379  01424C                     i2l1631:
 29380                           
 29381                           ;Motor.c: 95: }
 29382                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29383  01424C  0E8C               	movlw	low _PortE
 29384  01424E  6E10               	movwf	i2Port_SetPin@pInput,c
 29385  014250  0E01               	movlw	high _PortE
 29386  014252  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29387  014254  0E01               	movlw	1
 29388  014256  6E12               	movwf	i2Port_SetPin@pPin,c
 29389  014258  0E01               	movlw	1
 29390  01425A  6E13               	movwf	i2Port_SetPin@pValue,c
 29391  01425C  ECF7  F0A6         	call	i2_Port_SetPin	;wreg free
 29392                           
 29393                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29394  014260  0E8C               	movlw	low _PortE
 29395  014262  6E10               	movwf	i2Port_SetPin@pInput,c
 29396  014264  0E01               	movlw	high _PortE
 29397  014266  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29398  014268  0E01               	movlw	1
 29399  01426A  6E12               	movwf	i2Port_SetPin@pPin,c
 29400  01426C  0E00               	movlw	0
 29401  01426E  6E13               	movwf	i2Port_SetPin@pValue,c
 29402  014270  ECF7  F0A6         	call	i2_Port_SetPin	;wreg free
 29403                           
 29404                           ;Motor.c: 101: MXK_Release();
 29405  014274  EC52  F0B5         	call	i2_MXK_Release	;wreg free
 29406                           
 29407                           ;Motor.c: 102: Timer0_Restart();
 29408  014278  EC26  F0B5         	call	i2_Timer0_Restart	;wreg free
 29409                           
 29410                           ;Motor.c: 103: return;
 29411  01427C  0012               	return	
 29412  01427E                     i2l1628:
 29413                           
 29414                           ;Motor.c: 104: }
 29415                           ;Motor.c: 105: MXK_Release();
 29416  01427E  EC52  F0B5         	call	i2_MXK_Release	;wreg free
 29417                           
 29418                           ;Motor.c: 106: Timer0_Stop();
 29419  014282  EC4F  F0B5         	call	i2_Timer0_Stop	;wreg free
 29420                           
 29421                           ;Motor.c: 107: return;
 29422  014286  0012               	return	
 29423  014288                     i2l1627:
 29424                           
 29425                           ;Motor.c: 108: }
 29426                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29427  014288  C10B  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29428  01428C  C10C  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29429  014290  C10D  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29430  014294  EC0D  F0B5         	call	i2_MXK_Queue	;wreg free
 29431  014298  0012               	return		;funcret
 29432  01429A                     __end_ofi2_Motor_Step:
 29433                           	opt stack 0
 29434                           tosu	equ	0xFFF
 29435                           tosh	equ	0xFFE
 29436                           tosl	equ	0xFFD
 29437                           pclatu	equ	0xFFB
 29438                           pclath	equ	0xFFA
 29439                           tblptru	equ	0xFF8
 29440                           tblptrh	equ	0xFF7
 29441                           tblptrl	equ	0xFF6
 29442                           tablat	equ	0xFF5
 29443                           prodh	equ	0xFF4
 29444                           prodl	equ	0xFF3
 29445                           intcon	equ	0xFF2
 29446                           indf0	equ	0xFEF
 29447                           postinc0	equ	0xFEE
 29448                           fsr0h	equ	0xFEA
 29449                           fsr0l	equ	0xFE9
 29450                           wreg	equ	0xFE8
 29451                           indf1	equ	0xFE7
 29452                           postdec1	equ	0xFE5
 29453                           fsr1h	equ	0xFE2
 29454                           fsr1l	equ	0xFE1
 29455                           indf2	equ	0xFDF
 29456                           postinc2	equ	0xFDE
 29457                           postdec2	equ	0xFDD
 29458                           plusw2	equ	0xFDB
 29459                           fsr2h	equ	0xFDA
 29460                           fsr2l	equ	0xFD9
 29461                           status	equ	0xFD8
 29462                           
 29463 ;; *************** function i2_Timer0_Stop *****************
 29464 ;; Defined at:
 29465 ;;		line 89 in file "Library/Timer0.c"
 29466 ;; Parameters:    Size  Location     Type
 29467 ;;		None
 29468 ;; Auto vars:     Size  Location     Type
 29469 ;;		None
 29470 ;; Return value:  Size  Location     Type
 29471 ;;                  1    wreg      void 
 29472 ;; Registers used:
 29473 ;;		None
 29474 ;; Tracked objects:
 29475 ;;		On entry : 0/0
 29476 ;;		On exit  : 0/0
 29477 ;;		Unchanged: 0/0
 29478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29483 ;;Total ram usage:        0 bytes
 29484 ;; Hardware stack levels used:    1
 29485 ;; This function calls:
 29486 ;;		Nothing
 29487 ;; This function is called by:
 29488 ;;		_Timer0_ISR
 29489 ;;		i2_Motor_Step
 29490 ;; This function uses a non-reentrant model
 29491 ;;
 29492                           
 29493                           	psect	text146
 29494  016A9E                     __ptext146:
 29495                           	opt stack 0
 29496  016A9E                     i2_Timer0_Stop:
 29497                           	opt stack 18
 29498                           
 29499                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29500                           
 29501                           ;incstack = 0
 29502  016A9E  9AF2               	bcf	intcon,5,c	;volatile
 29503                           
 29504                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29505  016AA0  94F2               	bcf	intcon,2,c	;volatile
 29506  016AA2  0012               	return		;funcret
 29507  016AA4                     __end_ofi2_Timer0_Stop:
 29508                           	opt stack 0
 29509                           tosu	equ	0xFFF
 29510                           tosh	equ	0xFFE
 29511                           tosl	equ	0xFFD
 29512                           pclatu	equ	0xFFB
 29513                           pclath	equ	0xFFA
 29514                           tblptru	equ	0xFF8
 29515                           tblptrh	equ	0xFF7
 29516                           tblptrl	equ	0xFF6
 29517                           tablat	equ	0xFF5
 29518                           prodh	equ	0xFF4
 29519                           prodl	equ	0xFF3
 29520                           intcon	equ	0xFF2
 29521                           indf0	equ	0xFEF
 29522                           postinc0	equ	0xFEE
 29523                           fsr0h	equ	0xFEA
 29524                           fsr0l	equ	0xFE9
 29525                           wreg	equ	0xFE8
 29526                           indf1	equ	0xFE7
 29527                           postdec1	equ	0xFE5
 29528                           fsr1h	equ	0xFE2
 29529                           fsr1l	equ	0xFE1
 29530                           indf2	equ	0xFDF
 29531                           postinc2	equ	0xFDE
 29532                           postdec2	equ	0xFDD
 29533                           plusw2	equ	0xFDB
 29534                           fsr2h	equ	0xFDA
 29535                           fsr2l	equ	0xFD9
 29536                           status	equ	0xFD8
 29537                           
 29538 ;; *************** function i2_Timer0_Restart *****************
 29539 ;; Defined at:
 29540 ;;		line 83 in file "Library/Timer0.c"
 29541 ;; Parameters:    Size  Location     Type
 29542 ;;		None
 29543 ;; Auto vars:     Size  Location     Type
 29544 ;;		None
 29545 ;; Return value:  Size  Location     Type
 29546 ;;                  1    wreg      void 
 29547 ;; Registers used:
 29548 ;;		None
 29549 ;; Tracked objects:
 29550 ;;		On entry : 0/0
 29551 ;;		On exit  : 0/0
 29552 ;;		Unchanged: 0/0
 29553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29558 ;;Total ram usage:        0 bytes
 29559 ;; Hardware stack levels used:    1
 29560 ;; This function calls:
 29561 ;;		Nothing
 29562 ;; This function is called by:
 29563 ;;		i2_Motor_Step
 29564 ;; This function uses a non-reentrant model
 29565 ;;
 29566                           
 29567                           	psect	text147
 29568  016A4C                     __ptext147:
 29569                           	opt stack 0
 29570  016A4C                     i2_Timer0_Restart:
 29571                           	opt stack 17
 29572                           
 29573                           ;Timer0.c: 85: TMR0 = COUNTER;
 29574                           
 29575                           ;incstack = 0
 29576  016A4C  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29577  016A50  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29578                           
 29579                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29580  016A54  8AF2               	bsf	intcon,5,c	;volatile
 29581  016A56  0012               	return		;funcret
 29582  016A58                     __end_ofi2_Timer0_Restart:
 29583                           	opt stack 0
 29584                           tosu	equ	0xFFF
 29585                           tosh	equ	0xFFE
 29586                           tosl	equ	0xFFD
 29587                           pclatu	equ	0xFFB
 29588                           pclath	equ	0xFFA
 29589                           tblptru	equ	0xFF8
 29590                           tblptrh	equ	0xFF7
 29591                           tblptrl	equ	0xFF6
 29592                           tablat	equ	0xFF5
 29593                           prodh	equ	0xFF4
 29594                           prodl	equ	0xFF3
 29595                           intcon	equ	0xFF2
 29596                           indf0	equ	0xFEF
 29597                           postinc0	equ	0xFEE
 29598                           fsr0h	equ	0xFEA
 29599                           fsr0l	equ	0xFE9
 29600                           wreg	equ	0xFE8
 29601                           indf1	equ	0xFE7
 29602                           postdec1	equ	0xFE5
 29603                           fsr1h	equ	0xFE2
 29604                           fsr1l	equ	0xFE1
 29605                           indf2	equ	0xFDF
 29606                           postinc2	equ	0xFDE
 29607                           postdec2	equ	0xFDD
 29608                           plusw2	equ	0xFDB
 29609                           fsr2h	equ	0xFDA
 29610                           fsr2l	equ	0xFD9
 29611                           status	equ	0xFD8
 29612                           
 29613 ;; *************** function i2_Port_SetPin *****************
 29614 ;; Defined at:
 29615 ;;		line 247 in file "Library/Port.c"
 29616 ;; Parameters:    Size  Location     Type
 29617 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29618 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29619 ;;  pPin            1   17[COMRAM] enum E6750
 29620 ;;  pValue          1   18[COMRAM] unsigned char 
 29621 ;; Auto vars:     Size  Location     Type
 29622 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29623 ;; Return value:  Size  Location     Type
 29624 ;;                  1    wreg      void 
 29625 ;; Registers used:
 29626 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29627 ;; Tracked objects:
 29628 ;;		On entry : 0/0
 29629 ;;		On exit  : 0/0
 29630 ;;		Unchanged: 0/0
 29631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29632 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29633 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29635 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29636 ;;Total ram usage:        5 bytes
 29637 ;; Hardware stack levels used:    1
 29638 ;; Hardware stack levels required when called:    3
 29639 ;; This function calls:
 29640 ;;		i2_Byte_SetBit
 29641 ;;		i2_Word_GetPair
 29642 ;; This function is called by:
 29643 ;;		i2_Motor_Step
 29644 ;; This function uses a non-reentrant model
 29645 ;;
 29646                           
 29647                           	psect	text148
 29648  014DEE                     __ptext148:
 29649                           	opt stack 0
 29650  014DEE                     i2_Port_SetPin:
 29651                           	opt stack 14
 29652                           
 29653                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29654                           
 29655                           ;incstack = 0
 29656  014DEE  0E08               	movlw	8
 29657  014DF0  2410               	addwf	i2Port_SetPin@pInput,w,c
 29658  014DF2  6E0D               	movwf	i2Word_GetPair@pInput,c
 29659  014DF4  0E00               	movlw	0
 29660  014DF6  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29661  014DF8  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29662  014DFA  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29663  014DFE  EC15  F0B3         	call	i2_Word_GetPair	;wreg free
 29664  014E02  6E14               	movwf	i2Port_SetPin@Type,c
 29665                           
 29666                           ;Port.c: 250: switch (Type)
 29667  014E04  D03B               	goto	i2l427
 29668  014E06                     
 29669                           ;Port.c: 256: pValue &= 1;
 29670  014E06  0E01               	movlw	1
 29671  014E08  1613               	andwf	i2Port_SetPin@pValue,f,c
 29672                           
 29673                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29674  014E0A  EE20 F002          	lfsr	2,2
 29675  014E0E  5010               	movf	i2Port_SetPin@pInput,w,c
 29676  014E10  26D9               	addwf	fsr2l,f,c
 29677  014E12  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29678  014E14  22DA               	addwfc	fsr2h,f,c
 29679  014E16  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29680  014E1A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29681  014E1E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29682  014E22  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29683  014E26  EC1C  F0B0         	call	i2_Byte_SetBit	;wreg free
 29684                           
 29685                           ;Port.c: 258: break;
 29686  014E2A  0012               	return	
 29687  014E2C                     
 29688                           ;Port.c: 261: pValue &= 1;
 29689  014E2C  0E01               	movlw	1
 29690  014E2E  1613               	andwf	i2Port_SetPin@pValue,f,c
 29691                           
 29692                           ;Port.c: 262: pValue ^= 1;
 29693  014E30  0E01               	movlw	1
 29694  014E32  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29695                           
 29696                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29697  014E34  EE20 F002          	lfsr	2,2
 29698  014E38  5010               	movf	i2Port_SetPin@pInput,w,c
 29699  014E3A  26D9               	addwf	fsr2l,f,c
 29700  014E3C  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29701  014E3E  22DA               	addwfc	fsr2h,f,c
 29702  014E40  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29703  014E44  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29704  014E48  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29705  014E4C  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29706  014E50  EC1C  F0B0         	call	i2_Byte_SetBit	;wreg free
 29707                           
 29708                           ;Port.c: 264: break;
 29709  014E54  0012               	return	
 29710  014E56                     
 29711                           ;Port.c: 266: pValue &= 1;
 29712  014E56  0E01               	movlw	1
 29713  014E58  1613               	andwf	i2Port_SetPin@pValue,f,c
 29714                           
 29715                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29716  014E5A  EE20 F004          	lfsr	2,4
 29717  014E5E  5010               	movf	i2Port_SetPin@pInput,w,c
 29718  014E60  26D9               	addwf	fsr2l,f,c
 29719  014E62  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29720  014E64  22DA               	addwfc	fsr2h,f,c
 29721  014E66  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29722  014E6A  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29723  014E6E  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29724  014E72  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29725  014E76  EC1C  F0B0         	call	i2_Byte_SetBit	;wreg free
 29726                           
 29727                           ;Port.c: 269: }
 29728                           
 29729                           ;Port.c: 268: break;
 29730  014E7A  0012               	return	
 29731  014E7C                     i2l427:
 29732  014E7C  5014               	movf	i2Port_SetPin@Type,w,c
 29733                           
 29734                           ; Switch size 1, requested type "space"
 29735                           ; Number of cases is 4, Range of values is 0 to 3
 29736                           ; switch strategies available:
 29737                           ; Name         Instructions Cycles
 29738                           ; simple_byte           13     7 (average)
 29739                           ;	Chosen strategy is simple_byte
 29740  014E7E  0A00               	xorlw	0	; case 0
 29741  014E80  B4D8               	btfsc	status,2,c
 29742  014E82  0012               	return	
 29743  014E84  0A01               	xorlw	1	; case 1
 29744  014E86  B4D8               	btfsc	status,2,c
 29745  014E88  D7BE               	goto	i2l430
 29746  014E8A  0A03               	xorlw	3	; case 2
 29747  014E8C  B4D8               	btfsc	status,2,c
 29748  014E8E  D7CE               	goto	i2l432
 29749  014E90  0A01               	xorlw	1	; case 3
 29750  014E92  A4D8               	btfss	status,2,c
 29751  014E94  0012               	return	
 29752  014E96  D7DF               	goto	i2l433
 29753  014E98                     __end_ofi2_Port_SetPin:
 29754                           	opt stack 0
 29755                           tosu	equ	0xFFF
 29756                           tosh	equ	0xFFE
 29757                           tosl	equ	0xFFD
 29758                           pclatu	equ	0xFFB
 29759                           pclath	equ	0xFFA
 29760                           tblptru	equ	0xFF8
 29761                           tblptrh	equ	0xFF7
 29762                           tblptrl	equ	0xFF6
 29763                           tablat	equ	0xFF5
 29764                           prodh	equ	0xFF4
 29765                           prodl	equ	0xFF3
 29766                           intcon	equ	0xFF2
 29767                           indf0	equ	0xFEF
 29768                           postinc0	equ	0xFEE
 29769                           fsr0h	equ	0xFEA
 29770                           fsr0l	equ	0xFE9
 29771                           wreg	equ	0xFE8
 29772                           indf1	equ	0xFE7
 29773                           postdec1	equ	0xFE5
 29774                           fsr1h	equ	0xFE2
 29775                           fsr1l	equ	0xFE1
 29776                           indf2	equ	0xFDF
 29777                           postinc2	equ	0xFDE
 29778                           postdec2	equ	0xFDD
 29779                           plusw2	equ	0xFDB
 29780                           fsr2h	equ	0xFDA
 29781                           fsr2l	equ	0xFD9
 29782                           status	equ	0xFD8
 29783                           
 29784 ;; *************** function i2_Word_GetPair *****************
 29785 ;; Defined at:
 29786 ;;		line 156 in file "Library/Types.c"
 29787 ;; Parameters:    Size  Location     Type
 29788 ;;  pInput          2   12[COMRAM] PTR struct Word
 29789 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29790 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29791 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29792 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29793 ;;  pPair           1   14[COMRAM] unsigned char 
 29794 ;; Auto vars:     Size  Location     Type
 29795 ;;		None
 29796 ;; Return value:  Size  Location     Type
 29797 ;;                  1    wreg      unsigned char 
 29798 ;; Registers used:
 29799 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29800 ;; Tracked objects:
 29801 ;;		On entry : 0/0
 29802 ;;		On exit  : 0/0
 29803 ;;		Unchanged: 0/0
 29804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29805 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29808 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29809 ;;Total ram usage:        3 bytes
 29810 ;; Hardware stack levels used:    1
 29811 ;; Hardware stack levels required when called:    2
 29812 ;; This function calls:
 29813 ;;		i2_Byte_GetPair
 29814 ;; This function is called by:
 29815 ;;		i2_Port_SetPin
 29816 ;; This function uses a non-reentrant model
 29817 ;;
 29818                           
 29819                           	psect	text149
 29820  01662A                     __ptext149:
 29821                           	opt stack 0
 29822  01662A                     i2_Word_GetPair:
 29823                           	opt stack 14
 29824                           
 29825                           ;Types.c: 158: if (pPair >= 4)
 29826                           
 29827                           ;incstack = 0
 29828  01662A  0E03               	movlw	3
 29829  01662C  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29830  01662E  D00C               	goto	i2l781
 29831                           
 29832                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29833  016630  0E01               	movlw	1
 29834  016632  240D               	addwf	i2Word_GetPair@pInput,w,c
 29835  016634  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29836  016636  0E00               	movlw	0
 29837  016638  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29838  01663A  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29839  01663C  500F               	movf	i2Word_GetPair@pPair,w,c
 29840  01663E  0FFC               	addlw	252
 29841  016640  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29842  016642  EC7B  F0B4         	call	i2_Byte_GetPair	;wreg free
 29843  016646  0012               	return	
 29844  016648                     i2l781:
 29845                           
 29846                           ;Types.c: 160: else
 29847                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29848  016648  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29849  01664C  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29850  016650  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29851  016654  EC7B  F0B4         	call	i2_Byte_GetPair	;wreg free
 29852  016658  0012               	return	
 29853  01665A                     __end_ofi2_Word_GetPair:
 29854                           	opt stack 0
 29855                           tosu	equ	0xFFF
 29856                           tosh	equ	0xFFE
 29857                           tosl	equ	0xFFD
 29858                           pclatu	equ	0xFFB
 29859                           pclath	equ	0xFFA
 29860                           tblptru	equ	0xFF8
 29861                           tblptrh	equ	0xFF7
 29862                           tblptrl	equ	0xFF6
 29863                           tablat	equ	0xFF5
 29864                           prodh	equ	0xFF4
 29865                           prodl	equ	0xFF3
 29866                           intcon	equ	0xFF2
 29867                           indf0	equ	0xFEF
 29868                           postinc0	equ	0xFEE
 29869                           fsr0h	equ	0xFEA
 29870                           fsr0l	equ	0xFE9
 29871                           wreg	equ	0xFE8
 29872                           indf1	equ	0xFE7
 29873                           postdec1	equ	0xFE5
 29874                           fsr1h	equ	0xFE2
 29875                           fsr1l	equ	0xFE1
 29876                           indf2	equ	0xFDF
 29877                           postinc2	equ	0xFDE
 29878                           postdec2	equ	0xFDD
 29879                           plusw2	equ	0xFDB
 29880                           fsr2h	equ	0xFDA
 29881                           fsr2l	equ	0xFD9
 29882                           status	equ	0xFD8
 29883                           
 29884 ;; *************** function i2_Byte_GetPair *****************
 29885 ;; Defined at:
 29886 ;;		line 87 in file "Library/Types.c"
 29887 ;; Parameters:    Size  Location     Type
 29888 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29889 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29890 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29891 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29892 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29893 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29894 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29895 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29896 ;;		 -> NULL(0), 
 29897 ;;  pPair           1   11[COMRAM] unsigned char 
 29898 ;; Auto vars:     Size  Location     Type
 29899 ;;		None
 29900 ;; Return value:  Size  Location     Type
 29901 ;;                  1    wreg      unsigned char 
 29902 ;; Registers used:
 29903 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29904 ;; Tracked objects:
 29905 ;;		On entry : 0/0
 29906 ;;		On exit  : 0/0
 29907 ;;		Unchanged: 0/0
 29908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29909 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29912 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29913 ;;Total ram usage:        3 bytes
 29914 ;; Hardware stack levels used:    1
 29915 ;; Hardware stack levels required when called:    1
 29916 ;; This function calls:
 29917 ;;		i2_Byte_GetZone
 29918 ;; This function is called by:
 29919 ;;		i2_Word_GetPair
 29920 ;; This function uses a non-reentrant model
 29921 ;;
 29922                           
 29923                           	psect	text150
 29924  0168F6                     __ptext150:
 29925                           	opt stack 0
 29926  0168F6                     i2_Byte_GetPair:
 29927                           	opt stack 14
 29928                           
 29929                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29930                           
 29931                           ;incstack = 0
 29932  0168F6  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29933  0168FA  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29934  0168FE  0E04               	movlw	4
 29935  016900  6E03               	movwf	i2Byte_GetZone@pMax,c
 29936  016902  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29937  016906  0E02               	movlw	2
 29938  016908  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29939  01690A  EC26  F0AC         	call	i2_Byte_GetZone	;wreg free
 29940  01690E  0012               	return	
 29941  016910                     __end_ofi2_Byte_GetPair:
 29942                           	opt stack 0
 29943                           tosu	equ	0xFFF
 29944                           tosh	equ	0xFFE
 29945                           tosl	equ	0xFFD
 29946                           pclatu	equ	0xFFB
 29947                           pclath	equ	0xFFA
 29948                           tblptru	equ	0xFF8
 29949                           tblptrh	equ	0xFF7
 29950                           tblptrl	equ	0xFF6
 29951                           tablat	equ	0xFF5
 29952                           prodh	equ	0xFF4
 29953                           prodl	equ	0xFF3
 29954                           intcon	equ	0xFF2
 29955                           indf0	equ	0xFEF
 29956                           postinc0	equ	0xFEE
 29957                           fsr0h	equ	0xFEA
 29958                           fsr0l	equ	0xFE9
 29959                           wreg	equ	0xFE8
 29960                           indf1	equ	0xFE7
 29961                           postdec1	equ	0xFE5
 29962                           fsr1h	equ	0xFE2
 29963                           fsr1l	equ	0xFE1
 29964                           indf2	equ	0xFDF
 29965                           postinc2	equ	0xFDE
 29966                           postdec2	equ	0xFDD
 29967                           plusw2	equ	0xFDB
 29968                           fsr2h	equ	0xFDA
 29969                           fsr2l	equ	0xFD9
 29970                           status	equ	0xFD8
 29971                           
 29972 ;; *************** function i2_Byte_GetZone *****************
 29973 ;; Defined at:
 29974 ;;		line 64 in file "Library/Types.c"
 29975 ;; Parameters:    Size  Location     Type
 29976 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29977 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29978 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29979 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29980 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29981 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29982 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29983 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29984 ;;		 -> NULL(0), 
 29985 ;;  pMax            1    2[COMRAM] unsigned char 
 29986 ;;  pChunk          1    3[COMRAM] unsigned char 
 29987 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29988 ;; Auto vars:     Size  Location     Type
 29989 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29990 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29991 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29992 ;; Return value:  Size  Location     Type
 29993 ;;                  1    wreg      unsigned char 
 29994 ;; Registers used:
 29995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29996 ;; Tracked objects:
 29997 ;;		On entry : 0/0
 29998 ;;		On exit  : 0/0
 29999 ;;		Unchanged: 0/0
 30000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30001 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30002 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30003 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30004 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30005 ;;Total ram usage:        9 bytes
 30006 ;; Hardware stack levels used:    1
 30007 ;; This function calls:
 30008 ;;		Nothing
 30009 ;; This function is called by:
 30010 ;;		i2_Byte_GetPair
 30011 ;; This function uses a non-reentrant model
 30012 ;;
 30013                           
 30014                           	psect	text151
 30015  01584C                     __ptext151:
 30016                           	opt stack 0
 30017  01584C                     i2_Byte_GetZone:
 30018                           	opt stack 14
 30019                           
 30020                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30021                           
 30022                           ;incstack = 0
 30023  01584C  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30024  015850  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30025  015854  0E00               	movlw	low (__mediumconst shr (0+16))
 30026  015856  6EF8               	movwf	tblptru,c
 30027  015858  0E0F               	movlw	(high __ramtop+-1)
 30028  01585A  64F7               	cpfsgt	tblptrh,c
 30029  01585C  D003               	bra	i2u926_47
 30030  01585E  0008               	tblrd		*
 30031  015860  50F5               	movf	tablat,w,c
 30032  015862  D005               	bra	i2u926_40
 30033  015864                     i2u926_47:
 30034  015864  CFF6 FFE9          	movff	tblptrl,fsr0l
 30035  015868  CFF7 FFEA          	movff	tblptrh,fsr0h
 30036  01586C  50EF               	movf	indf0,w,c
 30037  01586E                     i2u926_40:
 30038  01586E  6E09               	movwf	i2Byte_GetZone@Output,c
 30039                           
 30040                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30041  015870  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30042  015872  0D01               	mullw	1
 30043  015874  0E13               	movlw	low _MASKS
 30044  015876  24F3               	addwf	prodl,w,c
 30045  015878  6EF6               	movwf	tblptrl,c
 30046  01587A  0EFD               	movlw	high _MASKS
 30047  01587C  20F4               	addwfc	prodh,w,c
 30048  01587E  6EF7               	movwf	tblptrh,c
 30049  015880                     	if	1	;There are 3 active tblptr bytes
 30050  015880  6AF8               	clrf	tblptru,c
 30051  015882  0E00               	movlw	low (__mediumconst shr (0+16))
 30052  015884  22F8               	addwfc	tblptru,f,c
 30053  015886                     	endif
 30054  015886  0008               	tblrd		*
 30055  015888  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30056                           
 30057                           ;Types.c: 68: UINT8 Offset = 0;
 30058  01588C  0E00               	movlw	0
 30059  01588E  6E08               	movwf	i2Byte_GetZone@Offset,c
 30060                           
 30061                           ;Types.c: 70: while (pChunk >= pMax)
 30062  015890  D003               	goto	i2l732
 30063  015892                     
 30064                           ;Types.c: 71: {
 30065                           ;Types.c: 72: pChunk -= pMax;
 30066  015892  5003               	movf	i2Byte_GetZone@pMax,w,c
 30067  015894  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30068                           
 30069                           ;Types.c: 73: Offset += 1;
 30070  015896  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30071  015898                     i2l732:
 30072  015898  5003               	movf	i2Byte_GetZone@pMax,w,c
 30073  01589A  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30074  01589C  B0D8               	btfsc	status,0,c
 30075  01589E  D7F9               	goto	i2l733
 30076                           
 30077                           ;Types.c: 74: }
 30078                           ;Types.c: 75: pChunk *= pChunkSize;
 30079  0158A0  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30080  0158A2  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30081  0158A4  50F3               	movf	prodl,w,c
 30082  0158A6  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30083                           
 30084                           ;Types.c: 76: pChunk += Offset;
 30085  0158A8  5008               	movf	i2Byte_GetZone@Offset,w,c
 30086  0158AA  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30087                           
 30088                           ;Types.c: 78: Output >>= pChunk;
 30089  0158AC  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30090  0158AE  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30091  0158B0  D002               	goto	i2u928_40
 30092  0158B2                     i2u928_45:
 30093  0158B2  90D8               	bcf	status,0,c
 30094  0158B4  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30095  0158B6                     i2u928_40:
 30096  0158B6  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30097  0158B8  D7FC               	goto	i2u928_45
 30098                           
 30099                           ;Types.c: 79: Output &= MASK;
 30100  0158BA  5007               	movf	i2Byte_GetZone@MASK,w,c
 30101  0158BC  1609               	andwf	i2Byte_GetZone@Output,f,c
 30102                           
 30103                           ;Types.c: 80: return Output;
 30104  0158BE  5009               	movf	i2Byte_GetZone@Output,w,c
 30105  0158C0  0012               	return	
 30106  0158C2                     __end_ofi2_Byte_GetZone:
 30107                           	opt stack 0
 30108                           tosu	equ	0xFFF
 30109                           tosh	equ	0xFFE
 30110                           tosl	equ	0xFFD
 30111                           pclatu	equ	0xFFB
 30112                           pclath	equ	0xFFA
 30113                           tblptru	equ	0xFF8
 30114                           tblptrh	equ	0xFF7
 30115                           tblptrl	equ	0xFF6
 30116                           tablat	equ	0xFF5
 30117                           prodh	equ	0xFF4
 30118                           prodl	equ	0xFF3
 30119                           intcon	equ	0xFF2
 30120                           indf0	equ	0xFEF
 30121                           postinc0	equ	0xFEE
 30122                           fsr0h	equ	0xFEA
 30123                           fsr0l	equ	0xFE9
 30124                           wreg	equ	0xFE8
 30125                           indf1	equ	0xFE7
 30126                           postdec1	equ	0xFE5
 30127                           fsr1h	equ	0xFE2
 30128                           fsr1l	equ	0xFE1
 30129                           indf2	equ	0xFDF
 30130                           postinc2	equ	0xFDE
 30131                           postdec2	equ	0xFDD
 30132                           plusw2	equ	0xFDB
 30133                           fsr2h	equ	0xFDA
 30134                           fsr2l	equ	0xFD9
 30135                           status	equ	0xFD8
 30136                           
 30137 ;; *************** function i2_Byte_SetBit *****************
 30138 ;; Defined at:
 30139 ;;		line 32 in file "Library/Types.c"
 30140 ;; Parameters:    Size  Location     Type
 30141 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30142 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30143 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30144 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30145 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30146 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30147 ;;		 -> NULL(0), 
 30148 ;;  pBit            1    2[COMRAM] unsigned char 
 30149 ;;  pValue          1    3[COMRAM] unsigned char 
 30150 ;; Auto vars:     Size  Location     Type
 30151 ;;		None
 30152 ;; Return value:  Size  Location     Type
 30153 ;;                  1    wreg      void 
 30154 ;; Registers used:
 30155 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30156 ;; Tracked objects:
 30157 ;;		On entry : 0/0
 30158 ;;		On exit  : 0/0
 30159 ;;		Unchanged: 0/0
 30160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30161 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30163 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30164 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30165 ;;Total ram usage:        7 bytes
 30166 ;; Hardware stack levels used:    1
 30167 ;; This function calls:
 30168 ;;		Nothing
 30169 ;; This function is called by:
 30170 ;;		i2_Port_SetPin
 30171 ;; This function uses a non-reentrant model
 30172 ;;
 30173                           
 30174                           	psect	text152
 30175  016038                     __ptext152:
 30176                           	opt stack 0
 30177  016038                     i2_Byte_SetBit:
 30178                           	opt stack 16
 30179                           
 30180                           ;Types.c: 34: pValue &= 1;
 30181                           
 30182                           ;incstack = 0
 30183  016038  0E01               	movlw	1
 30184  01603A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30185                           
 30186                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30187  01603C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30188  016040  0E01               	movlw	1
 30189  016042  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30190  016044  2A05               	incf	??i2_Byte_SetBit,f,c
 30191  016046  D002               	goto	i2u1056_44
 30192  016048                     i2u1056_45:
 30193  016048  90D8               	bcf	status,0,c
 30194  01604A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30195  01604C                     i2u1056_44:
 30196  01604C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30197  01604E  D7FC               	goto	i2u1056_45
 30198  016050  5006               	movf	??i2_Byte_SetBit+1,w,c
 30199  016052  0AFF               	xorlw	255
 30200  016054  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30201  016056  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30202  01605A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30203  01605E  5007               	movf	??i2_Byte_SetBit+2,w,c
 30204  016060  16DF               	andwf	indf2,f,c
 30205                           
 30206                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30207  016062  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30208  016066  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30209  01606A  2A05               	incf	??i2_Byte_SetBit,f,c
 30210  01606C  D002               	goto	i2u1057_44
 30211  01606E                     i2u1057_45:
 30212  01606E  90D8               	bcf	status,0,c
 30213  016070  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30214  016072                     i2u1057_44:
 30215  016072  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30216  016074  D7FC               	goto	i2u1057_45
 30217  016076  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30218  01607A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30219  01607E  5006               	movf	??i2_Byte_SetBit+1,w,c
 30220  016080  12DF               	iorwf	indf2,f,c
 30221  016082  0012               	return		;funcret
 30222  016084                     __end_ofi2_Byte_SetBit:
 30223                           	opt stack 0
 30224                           tosu	equ	0xFFF
 30225                           tosh	equ	0xFFE
 30226                           tosl	equ	0xFFD
 30227                           pclatu	equ	0xFFB
 30228                           pclath	equ	0xFFA
 30229                           tblptru	equ	0xFF8
 30230                           tblptrh	equ	0xFF7
 30231                           tblptrl	equ	0xFF6
 30232                           tablat	equ	0xFF5
 30233                           prodh	equ	0xFF4
 30234                           prodl	equ	0xFF3
 30235                           intcon	equ	0xFF2
 30236                           indf0	equ	0xFEF
 30237                           postinc0	equ	0xFEE
 30238                           fsr0h	equ	0xFEA
 30239                           fsr0l	equ	0xFE9
 30240                           wreg	equ	0xFE8
 30241                           indf1	equ	0xFE7
 30242                           postdec1	equ	0xFE5
 30243                           fsr1h	equ	0xFE2
 30244                           fsr1l	equ	0xFE1
 30245                           indf2	equ	0xFDF
 30246                           postinc2	equ	0xFDE
 30247                           postdec2	equ	0xFDD
 30248                           plusw2	equ	0xFDB
 30249                           fsr2h	equ	0xFDA
 30250                           fsr2l	equ	0xFD9
 30251                           status	equ	0xFD8
 30252                           
 30253 ;; *************** function i2_MXK_SwitchTo *****************
 30254 ;; Defined at:
 30255 ;;		line 105 in file "Library/MXK.c"
 30256 ;; Parameters:    Size  Location     Type
 30257 ;;  pModule         1    wreg     enum E6927
 30258 ;; Auto vars:     Size  Location     Type
 30259 ;;  pModule         1    7[COMRAM] enum E6927
 30260 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30261 ;; Return value:  Size  Location     Type
 30262 ;;                  1    wreg      unsigned char 
 30263 ;; Registers used:
 30264 ;;		wreg, status,2, status,0, cstack
 30265 ;; Tracked objects:
 30266 ;;		On entry : 0/0
 30267 ;;		On exit  : 0/0
 30268 ;;		Unchanged: 0/0
 30269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30271 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30274 ;;Total ram usage:        2 bytes
 30275 ;; Hardware stack levels used:    1
 30276 ;; Hardware stack levels required when called:    1
 30277 ;; This function calls:
 30278 ;;		i2_delay_us
 30279 ;; This function is called by:
 30280 ;;		i2_Motor_Step
 30281 ;; This function uses a non-reentrant model
 30282 ;;
 30283                           
 30284                           	psect	text153
 30285  01655E                     __ptext153:
 30286                           	opt stack 0
 30287  01655E                     i2_MXK_SwitchTo:
 30288                           	opt stack 16
 30289                           
 30290                           ;incstack = 0
 30291                           ;i2MXK_SwitchTo@pModule stored from wreg
 30292  01655E  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30293                           
 30294                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30295  016560  5086               	movf	3974,w,c	;volatile
 30296  016562  0B0F               	andlw	15
 30297  016564  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30298                           
 30299                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30300  016566  504A               	movf	_Bus_State,w,c
 30301  016568  A4D8               	btfss	status,2,c
 30302  01656A  D002               	goto	i2l1730
 30303                           
 30304                           ;MXK.c: 110: return 0;
 30305  01656C  0E00               	movlw	0
 30306  01656E  0012               	return	
 30307  016570                     i2l1730:
 30308                           
 30309                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30310  016570  0E00               	movlw	0
 30311  016572  6E4A               	movwf	_Bus_State,c
 30312                           
 30313                           ;MXK.c: 114: if (CUR != pModule)
 30314  016574  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30315  016576  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30316  016578  B4D8               	btfsc	status,2,c
 30317  01657A  D00A               	goto	i2l1732
 30318                           
 30319                           ;MXK.c: 115: {
 30320                           ;MXK.c: 116: PORTG &= ~(0xF);
 30321  01657C  0EF0               	movlw	240
 30322  01657E  1686               	andwf	3974,f,c	;volatile
 30323                           
 30324                           ;MXK.c: 117: PORTG |= pModule;
 30325  016580  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30326  016582  1286               	iorwf	3974,f,c	;volatile
 30327                           
 30328                           ;MXK.c: 120: delay_us(10);
 30329  016584  0E00               	movlw	0
 30330  016586  6E02               	movwf	i2delay_us@us+1,c
 30331  016588  0E0A               	movlw	10
 30332  01658A  6E01               	movwf	i2delay_us@us,c
 30333  01658C  ECA1  F0B1         	call	i2_delay_us	;wreg free
 30334  016590                     i2l1732:
 30335                           
 30336                           ;MXK.c: 121: }
 30337                           ;MXK.c: 122: return 1;
 30338  016590  0E01               	movlw	1
 30339  016592  0012               	return	
 30340  016594                     __end_ofi2_MXK_SwitchTo:
 30341                           	opt stack 0
 30342                           tosu	equ	0xFFF
 30343                           tosh	equ	0xFFE
 30344                           tosl	equ	0xFFD
 30345                           pclatu	equ	0xFFB
 30346                           pclath	equ	0xFFA
 30347                           tblptru	equ	0xFF8
 30348                           tblptrh	equ	0xFF7
 30349                           tblptrl	equ	0xFF6
 30350                           tablat	equ	0xFF5
 30351                           prodh	equ	0xFF4
 30352                           prodl	equ	0xFF3
 30353                           intcon	equ	0xFF2
 30354                           indf0	equ	0xFEF
 30355                           postinc0	equ	0xFEE
 30356                           fsr0h	equ	0xFEA
 30357                           fsr0l	equ	0xFE9
 30358                           wreg	equ	0xFE8
 30359                           indf1	equ	0xFE7
 30360                           postdec1	equ	0xFE5
 30361                           fsr1h	equ	0xFE2
 30362                           fsr1l	equ	0xFE1
 30363                           indf2	equ	0xFDF
 30364                           postinc2	equ	0xFDE
 30365                           postdec2	equ	0xFDD
 30366                           plusw2	equ	0xFDB
 30367                           fsr2h	equ	0xFDA
 30368                           fsr2l	equ	0xFD9
 30369                           status	equ	0xFD8
 30370                           
 30371 ;; *************** function i2_delay_us *****************
 30372 ;; Defined at:
 30373 ;;		line 255 in file "Library/Types.c"
 30374 ;; Parameters:    Size  Location     Type
 30375 ;;  us              2    0[COMRAM] unsigned short 
 30376 ;; Auto vars:     Size  Location     Type
 30377 ;;  delay_us        4    2[COMRAM] unsigned long 
 30378 ;; Return value:  Size  Location     Type
 30379 ;;                  1    wreg      void 
 30380 ;; Registers used:
 30381 ;;		wreg, status,2, status,0
 30382 ;; Tracked objects:
 30383 ;;		On entry : 0/0
 30384 ;;		On exit  : 0/0
 30385 ;;		Unchanged: 0/0
 30386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30387 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30388 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30390 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30391 ;;Total ram usage:        6 bytes
 30392 ;; Hardware stack levels used:    1
 30393 ;; This function calls:
 30394 ;;		Nothing
 30395 ;; This function is called by:
 30396 ;;		i2_MXK_SwitchTo
 30397 ;; This function uses a non-reentrant model
 30398 ;;
 30399                           
 30400                           	psect	text154
 30401  016342                     __ptext154:
 30402                           	opt stack 0
 30403  016342                     i2_delay_us:
 30404                           	opt stack 16
 30405                           
 30406                           ;Types.c: 256: unsigned long u;
 30407                           ;Types.c: 257: while (us--) {
 30408                           
 30409                           ;incstack = 0
 30410  016342  D016               	goto	i2u1060_40
 30411  016344                     i2l12810:
 30412                           
 30413                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30414  016344  0E00               	movlw	0
 30415  016346  6E03               	movwf	i2delay_us@u,c
 30416  016348  0E00               	movlw	0
 30417  01634A  6E04               	movwf	i2delay_us@u+1,c
 30418  01634C  0E00               	movlw	0
 30419  01634E  6E05               	movwf	i2delay_us@u+2,c
 30420  016350  0E00               	movlw	0
 30421  016352  6E06               	movwf	i2delay_us@u+3,c
 30422  016354                     i2l12812:
 30423  016354  5003               	movf	i2delay_us@u,w,c
 30424  016356  1004               	iorwf	i2delay_us@u+1,w,c
 30425  016358  1005               	iorwf	i2delay_us@u+2,w,c
 30426  01635A  1006               	iorwf	i2delay_us@u+3,w,c
 30427  01635C  A4D8               	btfss	status,2,c
 30428  01635E  D008               	goto	i2u1060_40
 30429  016360  F000               	nop		; ;# 
 30430  016362  0E01               	movlw	1
 30431  016364  2603               	addwf	i2delay_us@u,f,c
 30432  016366  0E00               	movlw	0
 30433  016368  2204               	addwfc	i2delay_us@u+1,f,c
 30434  01636A  2205               	addwfc	i2delay_us@u+2,f,c
 30435  01636C  2206               	addwfc	i2delay_us@u+3,f,c
 30436  01636E  D7F2               	goto	i2l12812
 30437  016370                     i2u1060_40:
 30438  016370  0601               	decf	i2delay_us@us,f,c
 30439  016372  A0D8               	btfss	status,0,c
 30440  016374  0602               	decf	i2delay_us@us+1,f,c
 30441  016376  2801               	incf	i2delay_us@us,w,c
 30442  016378  E1E5               	bnz	i2l12810
 30443  01637A  2802               	incf	i2delay_us@us+1,w,c
 30444  01637C  B4D8               	btfsc	status,2,c
 30445  01637E  0012               	return	
 30446  016380  D7E1               	goto	i2l832
 30447  016382                     __end_ofi2_delay_us:
 30448                           	opt stack 0
 30449                           tosu	equ	0xFFF
 30450                           tosh	equ	0xFFE
 30451                           tosl	equ	0xFFD
 30452                           pclatu	equ	0xFFB
 30453                           pclath	equ	0xFFA
 30454                           tblptru	equ	0xFF8
 30455                           tblptrh	equ	0xFF7
 30456                           tblptrl	equ	0xFF6
 30457                           tablat	equ	0xFF5
 30458                           prodh	equ	0xFF4
 30459                           prodl	equ	0xFF3
 30460                           intcon	equ	0xFF2
 30461                           indf0	equ	0xFEF
 30462                           postinc0	equ	0xFEE
 30463                           fsr0h	equ	0xFEA
 30464                           fsr0l	equ	0xFE9
 30465                           wreg	equ	0xFE8
 30466                           indf1	equ	0xFE7
 30467                           postdec1	equ	0xFE5
 30468                           fsr1h	equ	0xFE2
 30469                           fsr1l	equ	0xFE1
 30470                           indf2	equ	0xFDF
 30471                           postinc2	equ	0xFDE
 30472                           postdec2	equ	0xFDD
 30473                           plusw2	equ	0xFDB
 30474                           fsr2h	equ	0xFDA
 30475                           fsr2l	equ	0xFD9
 30476                           status	equ	0xFD8
 30477                           
 30478 ;; *************** function i2_MXK_Release *****************
 30479 ;; Defined at:
 30480 ;;		line 130 in file "Library/MXK.c"
 30481 ;; Parameters:    Size  Location     Type
 30482 ;;		None
 30483 ;; Auto vars:     Size  Location     Type
 30484 ;;		None
 30485 ;; Return value:  Size  Location     Type
 30486 ;;                  1    wreg      unsigned char 
 30487 ;; Registers used:
 30488 ;;		wreg, status,2, status,0
 30489 ;; Tracked objects:
 30490 ;;		On entry : 0/0
 30491 ;;		On exit  : 0/0
 30492 ;;		Unchanged: 0/0
 30493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30494 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30495 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30497 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30498 ;;Total ram usage:        0 bytes
 30499 ;; Hardware stack levels used:    1
 30500 ;; This function calls:
 30501 ;;		Nothing
 30502 ;; This function is called by:
 30503 ;;		i2_Motor_Step
 30504 ;; This function uses a non-reentrant model
 30505 ;;
 30506                           
 30507                           	psect	text155
 30508  016AA4                     __ptext155:
 30509                           	opt stack 0
 30510  016AA4                     i2_MXK_Release:
 30511                           	opt stack 17
 30512                           
 30513                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30514                           
 30515                           ;incstack = 0
 30516  016AA4  0E01               	movlw	1
 30517  016AA6  6E4A               	movwf	_Bus_State,c
 30518                           
 30519                           ;MXK.c: 135: return 1;
 30520                           ;	Return value of i2_MXK_Release is never used
 30521  016AA8  0012               	return	
 30522  016AAA                     __end_ofi2_MXK_Release:
 30523                           	opt stack 0
 30524                           tosu	equ	0xFFF
 30525                           tosh	equ	0xFFE
 30526                           tosl	equ	0xFFD
 30527                           pclatu	equ	0xFFB
 30528                           pclath	equ	0xFFA
 30529                           tblptru	equ	0xFF8
 30530                           tblptrh	equ	0xFF7
 30531                           tblptrl	equ	0xFF6
 30532                           tablat	equ	0xFF5
 30533                           prodh	equ	0xFF4
 30534                           prodl	equ	0xFF3
 30535                           intcon	equ	0xFF2
 30536                           indf0	equ	0xFEF
 30537                           postinc0	equ	0xFEE
 30538                           fsr0h	equ	0xFEA
 30539                           fsr0l	equ	0xFE9
 30540                           wreg	equ	0xFE8
 30541                           indf1	equ	0xFE7
 30542                           postdec1	equ	0xFE5
 30543                           fsr1h	equ	0xFE2
 30544                           fsr1l	equ	0xFE1
 30545                           indf2	equ	0xFDF
 30546                           postinc2	equ	0xFDE
 30547                           postdec2	equ	0xFDD
 30548                           plusw2	equ	0xFDB
 30549                           fsr2h	equ	0xFDA
 30550                           fsr2l	equ	0xFD9
 30551                           status	equ	0xFD8
 30552                           
 30553 ;; *************** function i2_MXK_Queue *****************
 30554 ;; Defined at:
 30555 ;;		line 144 in file "Library/MXK.c"
 30556 ;; Parameters:    Size  Location     Type
 30557 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30558 ;;		 -> Absolute function(1), Motor_Step(1), 
 30559 ;; Auto vars:     Size  Location     Type
 30560 ;;		None
 30561 ;; Return value:  Size  Location     Type
 30562 ;;                  1    wreg      void 
 30563 ;; Registers used:
 30564 ;;		wreg, status,2, status,0
 30565 ;; Tracked objects:
 30566 ;;		On entry : 0/0
 30567 ;;		On exit  : 0/0
 30568 ;;		Unchanged: 0/0
 30569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30570 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30571 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30573 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30574 ;;Total ram usage:        3 bytes
 30575 ;; Hardware stack levels used:    1
 30576 ;; This function calls:
 30577 ;;		Nothing
 30578 ;; This function is called by:
 30579 ;;		i2_Motor_Step
 30580 ;; This function uses a non-reentrant model
 30581 ;;
 30582                           
 30583                           	psect	text156
 30584  016A1A                     __ptext156:
 30585                           	opt stack 0
 30586  016A1A                     i2_MXK_Queue:
 30587                           	opt stack 17
 30588                           
 30589                           ;MXK.c: 146: lQueue = pCallback;
 30590                           
 30591                           ;incstack = 0
 30592  016A1A  C001  F0D5         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30593  016A1E  C002  F0D6         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30594  016A22  C003  F0D7         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30595  016A26  0012               	return		;funcret
 30596  016A28                     __end_ofi2_MXK_Queue:
 30597                           	opt stack 0
 30598                           tosu	equ	0xFFF
 30599                           tosh	equ	0xFFE
 30600                           tosl	equ	0xFFD
 30601                           pclatu	equ	0xFFB
 30602                           pclath	equ	0xFFA
 30603                           tblptru	equ	0xFF8
 30604                           tblptrh	equ	0xFF7
 30605                           tblptrl	equ	0xFF6
 30606                           tablat	equ	0xFF5
 30607                           prodh	equ	0xFF4
 30608                           prodl	equ	0xFF3
 30609                           intcon	equ	0xFF2
 30610                           indf0	equ	0xFEF
 30611                           postinc0	equ	0xFEE
 30612                           fsr0h	equ	0xFEA
 30613                           fsr0l	equ	0xFE9
 30614                           wreg	equ	0xFE8
 30615                           indf1	equ	0xFE7
 30616                           postdec1	equ	0xFE5
 30617                           fsr1h	equ	0xFE2
 30618                           fsr1l	equ	0xFE1
 30619                           indf2	equ	0xFDF
 30620                           postinc2	equ	0xFDE
 30621                           postdec2	equ	0xFDD
 30622                           plusw2	equ	0xFDB
 30623                           fsr2h	equ	0xFDA
 30624                           fsr2l	equ	0xFD9
 30625                           status	equ	0xFD8
 30626                           tosu	equ	0xFFF
 30627                           tosh	equ	0xFFE
 30628                           tosl	equ	0xFFD
 30629                           pclatu	equ	0xFFB
 30630                           pclath	equ	0xFFA
 30631                           tblptru	equ	0xFF8
 30632                           tblptrh	equ	0xFF7
 30633                           tblptrl	equ	0xFF6
 30634                           tablat	equ	0xFF5
 30635                           prodh	equ	0xFF4
 30636                           prodl	equ	0xFF3
 30637                           intcon	equ	0xFF2
 30638                           indf0	equ	0xFEF
 30639                           postinc0	equ	0xFEE
 30640                           fsr0h	equ	0xFEA
 30641                           fsr0l	equ	0xFE9
 30642                           wreg	equ	0xFE8
 30643                           indf1	equ	0xFE7
 30644                           postdec1	equ	0xFE5
 30645                           fsr1h	equ	0xFE2
 30646                           fsr1l	equ	0xFE1
 30647                           indf2	equ	0xFDF
 30648                           postinc2	equ	0xFDE
 30649                           postdec2	equ	0xFDD
 30650                           plusw2	equ	0xFDB
 30651                           fsr2h	equ	0xFDA
 30652                           fsr2l	equ	0xFD9
 30653                           status	equ	0xFD8
 30654                           
 30655                           	psect	text157
 30656  000000                     __ptext157:
 30657                           	opt stack 0
 30658                           tosu	equ	0xFFF
 30659                           tosh	equ	0xFFE
 30660                           tosl	equ	0xFFD
 30661                           pclatu	equ	0xFFB
 30662                           pclath	equ	0xFFA
 30663                           tblptru	equ	0xFF8
 30664                           tblptrh	equ	0xFF7
 30665                           tblptrl	equ	0xFF6
 30666                           tablat	equ	0xFF5
 30667                           prodh	equ	0xFF4
 30668                           prodl	equ	0xFF3
 30669                           intcon	equ	0xFF2
 30670                           indf0	equ	0xFEF
 30671                           postinc0	equ	0xFEE
 30672                           fsr0h	equ	0xFEA
 30673                           fsr0l	equ	0xFE9
 30674                           wreg	equ	0xFE8
 30675                           indf1	equ	0xFE7
 30676                           postdec1	equ	0xFE5
 30677                           fsr1h	equ	0xFE2
 30678                           fsr1l	equ	0xFE1
 30679                           indf2	equ	0xFDF
 30680                           postinc2	equ	0xFDE
 30681                           postdec2	equ	0xFDD
 30682                           plusw2	equ	0xFDB
 30683                           fsr2h	equ	0xFDA
 30684                           fsr2l	equ	0xFD9
 30685                           status	equ	0xFD8
 30686                           
 30687                           	psect	rparam
 30688  0000                     tosu	equ	0xFFF
 30689                           tosh	equ	0xFFE
 30690                           tosl	equ	0xFFD
 30691                           pclatu	equ	0xFFB
 30692                           pclath	equ	0xFFA
 30693                           tblptru	equ	0xFF8
 30694                           tblptrh	equ	0xFF7
 30695                           tblptrl	equ	0xFF6
 30696                           tablat	equ	0xFF5
 30697                           prodh	equ	0xFF4
 30698                           prodl	equ	0xFF3
 30699                           intcon	equ	0xFF2
 30700                           indf0	equ	0xFEF
 30701                           postinc0	equ	0xFEE
 30702                           fsr0h	equ	0xFEA
 30703                           fsr0l	equ	0xFE9
 30704                           wreg	equ	0xFE8
 30705                           indf1	equ	0xFE7
 30706                           postdec1	equ	0xFE5
 30707                           fsr1h	equ	0xFE2
 30708                           fsr1l	equ	0xFE1
 30709                           indf2	equ	0xFDF
 30710                           postinc2	equ	0xFDE
 30711                           postdec2	equ	0xFDD
 30712                           plusw2	equ	0xFDB
 30713                           fsr2h	equ	0xFDA
 30714                           fsr2l	equ	0xFD9
 30715                           status	equ	0xFD8
 30716                           
 30717                           	psect	temp
 30718  000050                     btemp:
 30719                           	opt stack 0
 30720  000050                     	ds	1
 30721  0000                     int$flags	set	btemp
 30722  0000                     wtemp6	set	btemp+1
 30723                           tosu	equ	0xFFF
 30724                           tosh	equ	0xFFE
 30725                           tosl	equ	0xFFD
 30726                           pclatu	equ	0xFFB
 30727                           pclath	equ	0xFFA
 30728                           tblptru	equ	0xFF8
 30729                           tblptrh	equ	0xFF7
 30730                           tblptrl	equ	0xFF6
 30731                           tablat	equ	0xFF5
 30732                           prodh	equ	0xFF4
 30733                           prodl	equ	0xFF3
 30734                           intcon	equ	0xFF2
 30735                           indf0	equ	0xFEF
 30736                           postinc0	equ	0xFEE
 30737                           fsr0h	equ	0xFEA
 30738                           fsr0l	equ	0xFE9
 30739                           wreg	equ	0xFE8
 30740                           indf1	equ	0xFE7
 30741                           postdec1	equ	0xFE5
 30742                           fsr1h	equ	0xFE2
 30743                           fsr1l	equ	0xFE1
 30744                           indf2	equ	0xFDF
 30745                           postinc2	equ	0xFDE
 30746                           postdec2	equ	0xFDD
 30747                           plusw2	equ	0xFDB
 30748                           fsr2h	equ	0xFDA
 30749                           fsr2l	equ	0xFD9
 30750                           status	equ	0xFD8


Data Sizes:
    Strings     161
    Constant    806
    Data        25
    BSS         675
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      79
    BANK0           160    117     141
    BANK1           256      0     237
    BANK2           256     33     133
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    eval_poly@d	PTR const  size(2) Largest target is 40
		 -> log@coeff(CODE[36]), exp@coeff(CODE[40]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(BANK0[2]), floor@expon(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 33
		 -> STR_12(CODE[20]), STR_11(CODE[15]), STR_10(CODE[12]), STR_9(CODE[12]), 
		 -> STR_8(CODE[13]), STR_7(CODE[4]), STR_6(CODE[5]), STR_5(CODE[12]), 
		 -> STR_4(CODE[18]), STR_3(CODE[18]), STR_2(CODE[33]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK2[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK2[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK2[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> main@Stepper(BANK2[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK1[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), 

    ADC_Sequence@pItemA	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK1[5]), ADC_AN1(BANK1[5]), ADC_AN0(BANK1[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(COMRAM[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(COMRAM[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortD(BANK1[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(COMRAM[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(COMRAM[2]), PortD..(BANK1[2]), PortE..(BANK1[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK1[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK1[10]), PortD(BANK1[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK1[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(COMRAM[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK1[10]), PortC(COMRAM[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortC(COMRAM[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK1[10]), 
		 -> PortD(BANK1[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(COMRAM[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _main->_pow
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _pow->_exp
    _log->_eval_poly
    _exp->_ldexp
    _ldexp->_eval_poly
    _floor->___fladd
    ___fltol->___flmul
    _eval_poly->___fladd
    ___flsub->___fladd
    ___fladd->___flmul
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _HMI_Init->_Button_Init
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _FunctInitButton->_Button_Init
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _FunctInitADC->_ADC_Init
    _ADC_Init->_ADC_SetupIO
    _FunctADC->_ADC_Start
    _ADC_Start->_ADC_SetChannel
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0 1337175
                                            115 BANK0      2     2      0
                                              0 BANK2     33    33      0
                        _ADC_Voltage
                       _Console_Init
                     _Console_Render
                           _FunctADC
                       _FunctInitADC
                    _FunctInitButton
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                         _HMI_Render
                    _HMI_RightSwitch *
                      _HMI_SetNumber
                       _HMI_UpSwitch *
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                     _MXK_TestButton *
                         _Motor_Init
                         _Motor_Move
                        _Motor_Speed
                            ___flmul
                            ___fltol
                             ___wmul
                                _pow
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              21    17      4    6116
                                             21 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _pow                                                 21    13      8   71356
                                             94 BANK0     21    13      8
                             ___flge
                            ___flmul
                            ___flneg
                            ___fltol
                           ___xxtofl
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     2      4   22932
                                             75 BANK0      6     2      4
                            ___fladd
                            ___flmul
                           ___xxtofl
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (2) _exp                                                 11     7      4   38654
                                             83 BANK0     11     7      4
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                           ___xxtofl
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (3) _ldexp                                                8     2      6     663
                                             75 BANK0      8     2      6
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4    9755
                                             59 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                8     2      6     930
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     945
                                             39 BANK0     10     6      4
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flge                                              12     4      8    1482
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           16     8      8   10741
                                             59 BANK0     16     8      8
                            ___fladd
                            ___flmul
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8    5359
                                             59 BANK0      8     0      8
                            ___fladd
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (4) ___fladd                                             20    12      8    4726
                                             39 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4     521
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (1) _Motor_Speed                                          4     0      4    3839
                                             27 BANK0      4     0      4
                        _Timer0_Init
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _Motor_Move                                           6     2      4     915
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (2) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  290516
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261661
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (2) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84557
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84557
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37189
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (1) _HMI_SetNumber                                        2     0      2    4094
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (2) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (3) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (3) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             72 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _FunctInitButton                                      0     0      0  105207
                        _Button_Init
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                             59 BANK0     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (3) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _FunctInitADC                                         0     0      0    2935
                           _ADC_Init
                       _ADC_Sequence
 ---------------------------------------------------------------------------------
 (2) _ADC_Sequence                                         4     0      4    1067
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    1868
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (1) _FunctADC                                             0     0      0     310
                          _ADC_Start
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2     310
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35631
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16824
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     840
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Voltage                                         18    14      4    8841
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4    1152
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) ___flmul                                             25    17      8    4849
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    2487
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    2480
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    2480
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    2480
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    2184
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     904
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     679
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     477
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     473
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     230
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2     134
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      66
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Voltage
     ___fldiv
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___xxtofl
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _FunctADC
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
   _FunctInitADC
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Sequence
   _FunctInitButton
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_Render *
     _OutSeg
       _SPI_Send
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_SetNumber *
     _HMI_SetSegments
       _ToSegment
     _itos
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _reverse
   _HMI_UpSwitch *
     _Port_GetPin
   _ISR_Enable *
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_TestButton *
     _Port_GetPin
   _Motor_Init *
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Timer0_Init
       _Timer0_Clear
       ___lldiv
   _Motor_Move *
     _Timer0_Start
   _Motor_Speed *
     _Timer0_Init
       _Timer0_Clear
       ___lldiv
     ___wmul (ARG)
   ___flmul *
     ___xxtofl (ARG)
     _frexp (ARG)
   ___fltol *
     ___flmul (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___xxtofl (ARG)
   ___wmul *
   _pow *
     ___flge
     ___flmul
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flneg
     ___fltol
       ___flmul (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     ___xxtofl
     _exp
       ___fldiv
       ___flge
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flneg
       ___flsub
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___fltol
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _eval_poly
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
       _floor
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flge
         ___fltol
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _frexp
       _ldexp
         _eval_poly (ARG)
           ___fladd
             ___flmul (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul
             ___xxtofl (ARG)
             _frexp (ARG)
     _log
       ___fladd
         ___flmul (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl
       _eval_poly
         ___fladd
           ___flmul (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul
           ___xxtofl (ARG)
           _frexp (ARG)
       _frexp
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     21      85       9       52.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      ED       7       92.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     75      8D       5       88.1%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      4F       1       84.0%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     24E      12        0.0%
DATA                 0      0     37A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Wed Aug 23 16:37:51 2017

                   i2_Timer0_Stop 6A9E                  SPI_Init@pChannel 0091  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 419A  
                               _A 004B                                 l8 4572  
                    ___fldiv@aexp 0078                      ___fldiv@bexp 0077  
                               _a 004C                                 _i 002F  
                               _j 002E                                 _l 004E  
                               _u 002D                                 _w 004F  
                    main@DipValue 0277                      ___fldiv@sign 006C  
                              l11 3860                                l12 384A  
                              l90 3796                                l85 3692  
                              l87 3700                                l89 376C  
                    ___awdiv@sign 0065                __size_of_ADC_Start 0084  
             ___wmul@multiplicand 0062                     _HMI_DIPSwitch 6928  
              LCD_DrawField@pSize 0078                LCD_DrawField@count 007E  
               ?_Event_TestButton 0001                       main@UpValue 0272  
                i2_Timer0_Restart 6A4C              ADC_ClockDivision@reg 0061  
                             l120 5346                               l121 535C  
                             l122 5372                               l220 5DB6  
                             l117 5388                               l221 5D7A  
                             l118 5330                               l230 5FBA  
                             l222 5DC6                               l223 5D98  
                     ?_LED_Toggle 0001                               l234 6194  
                             l235 6164                               l227 5FD6  
                             l403 318C                               l412 2CD6  
                             l228 5F9E                               l340 4F52  
                             l404 312C                               l421 2C6A  
                             l413 2B6C                               l237 617C  
                             l341 4F60                               l405 31BC  
                   ??_Console_Tab 0068                               l414 2CF2  
                             l430 46E6                               l350 505A  
                             l342 4F6E                               l510 215A  
                             l406 3144                               l183 510E  
                             l415 2B92                               l351 4FEA  
                             l343 4F7C                               l511 226A  
                             l407 315C                               l184 50E8  
                             l600 0E52                               l432 4710  
                             l344 4F8A                               l512 217C  
                             l408 3174                               l417 2BFE  
                             l601 0FE6                               l433 4740  
                             l353 4FF8                               l337 4FB4  
                             l345 4F98                               l610 106E  
                             l602 0E84                               l354 5006  
                             l346 4FA6                               l338 4F44  
                             l370 4EE4                               l611 10BC  
                             l603 0FF8                               l427 476A  
                             l355 5014                               l363 4F0E  
                             l371 4EF2                               l531 197A  
                     ?_HMI_GetBar 0001                               l612 110A  
                             l604 0F32                               l356 5022  
                             l372 4F00                               l364 4E9E  
                             l532 199E                               l516 21C4  
                             l357 5030                               l509 224E  
                             l614 11EC                               l358 503E  
                             l366 4EAC                               l526 19BE  
                             l615 11E4                               l607 1158  
                             l359 504C                               l367 4EBA  
                             l519 220C                               l616 11FE  
                             l608 1020                               l368 4EC8  
                             l528 19DC                               l393 5EE8  
                             l617 11E8                               l609 1176  
                             l369 4ED6                               l529 195A  
                             l483 1FBA                               l732 52CA  
                             l476 2092                               l900 1D32  
                             l733 52BE                               l389 5C3C  
                             l477 1F04                               l901 1D36  
                             l397 6158                               l726 4B66  
                             l478 20AE                               l486 2026  
                             l654 6742                               l910 1D5A  
                             l902 1D3A                               l727 4B5A  
                             l479 1F4E                               l655 673A  
                             l911 1D5E                               l903 1D3E  
                             l912 1D62                               l904 1D42  
                             l824 5B70                               l832 5F48  
                             l681 5C52                               l673 66A8  
                             l657 673E                               l913 1D66  
                             l905 1D46                               l921 5B50  
                             l914 1D6A                               l906 1D4A  
                             l922 5B1C                               l930 42D8  
                             l819 5756                               l915 1D6E  
                             l907 1D4E                               l684 5C66  
                             l916 1D72                               l908 1D52  
                             l860 1C92                               l781 6468  
                             l597 0E60                               l853 1D7A  
                             l917 1D76                               l909 1D56  
                             l861 1C96                               l678 5C8C  
                             l686 5C76                               l598 0E48  
                             l870 1CBA                               l862 1C9A  
                             l854 1C7E                               l679 5C44  
                             l599 0E70                               l871 1CBE  
                             l863 1C9E                               l776 6264  
                             l880 1CE2                               l872 1CC2  
                             l864 1CA2                               l856 1C82  
                             l928 4358                               l881 1CE6  
                             l873 1CC6                               l865 1CA6  
                             l857 1C86                               l929 4328  
                             l890 1D0A                               l882 1CEA  
                             l874 1CCA                               l866 1CAA  
                             l858 1C8A                               l891 1D0E  
                             l883 1CEE                               l875 1CCE  
                             l867 1CAE                               l859 1C8E  
                             l892 1D12                               l884 1CF2  
                             l876 1CD2                               l868 1CB2  
                             l893 1D16                               l885 1CF6  
                             l877 1CD6                               l869 1CB6  
                             l894 1D1A                               l886 1CFA  
                             l878 1CDA                               l990 5452  
                             l895 1D1E                               l887 1CFE  
                             l879 1CDE                               l983 51AC  
                             l976 556A                               l896 1D22  
                             l888 1D02                               l992 5462  
                             l984 5130                               l897 1D26  
                             l889 1D06                               l985 51A8  
                             l978 557A                               l898 1D2A  
                             l899 1D2E                               l997 5E4E  
                             l999 5E72                               _PR2 000FCB  
                             _exp 19DE                               _log 3366  
                     main@Stepper 027F                     main@Direction 0275  
                             _val 00DA                               _pow 258C  
                 __end_of_ADC_Off 6A86                       ?_HMI_SetBar 0001  
              ??_Event_TestButton 0079                      _Word_GetPair 643C  
                             prod 000FF3                       ?_HMI_Render 0001  
             MXK_SwitchTo@pModule 0067        __end_of_ADC_ConversionTime 61EE  
                             tosl 000FFD                               wreg 000FE8  
              Console_MakeField@x 0070                Console_MakeField@y 0071  
                    Console_Tab@c 006F                      Console_Tab@i 006E  
             LCD_DrawField@pField 0072                      Console_Tab@t 006D  
      __size_of_ADC_ClockDivision 008A                      ___flmul@aexp 007B  
                    ___flmul@bexp 0080                        i2_delay_us 6342  
            Port_Set@TypeRequired 0082                      ___flmul@sign 007A  
                    ___flmul@temp 0085                      ___flmul@prod 0081  
               Console_FormFeed@x 0062                 Console_FormFeed@y 0063  
             LCD_DrawField@pPoint 0074                    ?_LCD_DrawField 0072  
           Port_SetPinType@Output 008A                   Port_SetPin@Type 0073  
                 Port_SetPin@pPin 0071                     ?_Byte_GetPair 0069  
                 __end_of_LED_Set 5FE8           __size_ofi2_Word_GetPair 0030  
                   i2_Port_SetPin 4DEE                      ___fltol@exp1 0090  
                   main@LeftValue 0273                      _Word_SetPair 6234  
                            l1000 5E8E                              l1010 47DA  
                            l1004 5CDE                     ?_Byte_GetZone 0060  
                            l1005 5D0C                              l1200 49D0  
                            l1040 2D20                              l1201 4A24  
                            l1009 47E6                              l1041 2D26  
                            l1202 4A40                              l1042 2D2C  
                            l1043 2D32                              l2011 02FE  
                            l1300 54E8                              l1204 4A6A  
                            l1036 2E7C                              l1044 2D38  
                            l2012 018C                              l2004 004C  
                            l1301 54EC                              l1205 4A50  
                            l1045 2D3E                              l1037 2D1A  
                            l2013 01D2                              l1062 2516  
                            l1302 54F6                              l2022 0328  
                            l2014 01E2                              l2006 007E  
                            l1063 2544                              l1303 5504  
                            l1207 4A7C                              l1047 2DE4  
                            l2031 02D4                              l2023 025E  
                            l2015 020E                              l1056 23A6  
                            l2032 02E6                              l2024 02AC  
                            l1057 256C                              l1313 61CE  
                            l1153 2984                              l2041 049A  
                            l2033 03E0                              l2017 0224  
                            l2009 008A                              l1082 4660  
                            l1058 23AE                              l1146 5678  
                            l2026 02BE                              l1059 23D8  
                            l2035 04C0                              l2019 0236  
                            l1084 4668                              l2060 2EFE  
                            l2036 03EE                              l1077 4630  
                            l2037 04E8                              l1254 69C0  
                            l1158 643A                              l2310 4122  
                            l2038 0436                              l1079 4640  
                            l2039 0450                              l1280 55F4  
                            l2072 2FB8                              l2073 3016  
                            l2065 2F32                              l2074 2FBE  
                            l2066 2EDC                              l2058 2EC0  
                            l1283 5656                              l2315 4162  
                            l2307 40B4                              l2067 2EF4  
                            l2059 2ED4                              l1276 55DC  
                            l2316 4152                              l2252 48DC  
                            l2068 2F62                              l2309 4136  
                            l2253 48EA                              l2245 4866  
                            l1294 550C                              l1630 3C74  
                            l2318 4188                              l2254 48FE  
                            l2246 487C                              l1295 54D2  
                            l1631 3CD0                              l2511 25F0  
                            l1296 5536                              l2432 49A0  
                            l1632 3CB4                              l2520 0516  
                            l2280 3316                              l2512 25DC  
                            l2248 48A6                              l1297 54DC  
                            l2433 49B2                              l2521 0544  
                            l2249 489A                              l2602 1538  
                            l1298 54E0                              l1730 62D6  
                            l2530 05DC                              l2522 053A  
                            l2514 2618                              l2611 09BE  
                            l1299 54E4                              l1627 3D1C  
                            l2515 26CE                              l2604 1588  
                            l2612 09E8                              l2428 4946  
                            l1724 63CC                              l1732 62FE  
                            l1628 3D12                              l2284 6516  
                            l2540 06FC                              l2524 0570  
                            l2700 3DEC                              l2516 26A0  
                            l2605 15B6                              l2613 09E2  
                            l2429 4936                              l1629 3C92  
                            l2533 06CC                              l2525 0584  
                            l2277 3224                              l2517 277A  
                            l2606 15EC                              l2630 0D5E  
                            l2614 09FA                              l1726 63FA  
                            l2534 0698                              l2526 05B2  
                            l2278 3272                              l2607 15FC  
                            l2623 0D04                              l2615 0A18  
                            l1735 68D6                              l2543 073A  
                            l2535 06AC                              l2527 05A8  
                            l2279 32C4                              l2608 1600  
                            l2632 0DAE                              l2624 0CDA  
                            l2616 0A42                              l2640 29D0  
                            l2552 087E                              l2544 0740  
                            l2536 06B2                              l2633 0DD4  
                            l2625 0CF0                              l2617 0A3C  
                            l2641 29E0                              l2481 57FE  
                            l2561 08E0                              l2553 0894  
                            l2545 074A                              l2537 06BC  
                            l2529 0618                              l2721 4070  
                            l2713 338A                              l2618 0A54  
                            l2650 2ACA                              l2642 2A08  
                            l2482 57F2                              l2570 097A  
                            l2554 08A0                              l2722 3FCC  
                            l2635 0E02                              l2619 0A7C  
                            l2651 2ABA                              l1827 3B14  
                            l2491 5DF6                              l2571 098E  
                            l2547 082C                              l2539 075C  
                            l2715 33BC                              l2636 0E2C  
                            l2644 2A20                              l1828 3B34  
                            l2492 5DEA                              l2564 0936  
                            l2556 08B4                              l2581 12E0  
                            l2637 0E22                              l2645 2A10  
                            l2485 5834                              l2549 084C  
                            l2590 1446                              l2582 130E  
                            l2486 5842                              l2591 143A  
                            l2583 1304                              l2655 2AF0  
                            l2647 2A7C                              l2495 5E20  
                            l2671 1A06                              l2592 148E  
                            l2656 2B42                              l2648 2A5E  
                            l2496 5E2E                              l1784 39AE  
                            l2568 096A                              l2585 1362  
                            l2577 1282                              l1873 64AE  
                            l1785 39BC                              l2569 0976  
                            l2673 1A50                              l2578 12B0  
                            l2682 3EA6                              l2674 1A9A  
                            l2595 14DE                              l2587 1390  
                            l2579 12A6                              l1787 39C6  
                            l2691 4AB6                              l2683 3E92  
                            l2675 1AD8                              l2596 14B4  
                            l2588 1492                              l2676 1C66  
                            l2597 14CA                              l2589 140E  
                            l2685 3EC8                              l2677 1C2E  
                            l2686 3F64                              l2695 3D56  
                            l2697 3DBC                              l2699 3DFE  
                            ?_exp 00B3                              ?_log 00AB  
                  ??_Console_Init 0060             Port_SetPinType@pInput 0086  
                   main@DownValue 0279                              ?_pow 00BE  
                            STR_1 FFFB                              STR_2 FF5D  
                            STR_3 FFA4                              STR_4 FF92  
                            STR_5 FFEA                              STR_6 FFF6  
                            STR_7 FFF7                              STR_8 FFC5  
                            STR_9 FFDE                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 001E  
                            _LATG 000F8F               __end_of_GetPortPORT 508A  
                            _PIR1 000F9E                              u9010 52FA  
                            _PIR2 000FA1                              _PIR3 000FA4  
                            u9030 56F0                              u9015 52F4  
                            u9104 4BD4                              u9120 6222  
             __end_of_GetPortTRIS 4F3E                              u9105 4BCE  
                            u9210 5804                              u9125 621C  
                            u9064 5D2C                              u9240 5DFC  
                            u9065 5D26                              u9074 5D5E  
                            u9075 5D58                              u9500 494C  
                            u9180 54A6                              u9094 4BA2  
                            u9190 54AC                              u9095 4B9C  
                            u9360 4344                              u9370 5CDA  
                            u9620 60BC                              u9380 5D04  
                            u9460 48AC                              u9295 69EC  
                            u9296 69EE                              u9560 5BAE  
                            u9625 60B6                              u9650 3B80  
                            u9635 3ACC                              _SPI1 0158  
                            _SPI2 0163                              u9734 5402  
                            u9830 0662                              u9735 53FC  
                            u9680 5F80                              u9840 067A  
                            u9850 067C                              u8990 5294  
                            u9880 06D8                              _TMR0 000FD6  
                            u8997 528A                              _gISR 0108  
              Event_DIPSwitch@Bar 007A                     ??_Byte_GetBit 0063  
            __size_of_ADC_SetupIO 0032                SPI_MaxSpeed@pInput 006F  
                   ?_Byte_SetByte 0060                     ?_Byte_SetPair 006B  
                 __end_of_SPI_DCS 66B6                              _main 0000  
                 ??i2_Byte_SetBit 0005                     ?_Byte_SetQuad 006B  
                            _itos 429A                              fsr0h 000FEA  
                            fsr1h 000FE2                              indf0 000FEF  
                            fsr2h 000FDA                              fsr0l 000FE9  
                            indf1 000FE7                              indf2 000FDF  
                            fsr1l 000FE1                              fsr2l 000FD9  
                   ?_Byte_SetZone 0060                              btemp 0050  
                            _zero 004D                              exp@x 00B3  
                            log@x 00AB                  __end_of_ADC_Init 57D4  
                   ??_Byte_SetBit 0064                              pow@x 00BE  
                            pow@y 00C2                __size_of_LCD_Reset 0050  
            __size_of_ADC_Voltage 00D8                              prodh 000FF4  
                            prodl 000FF3                  Motor_Move@pDelta 0065  
                            start 14AA                __size_of_LCD_Write 0022  
                   __CFG_IESO$OFF 000000                   ___fldiv@new_exp 0071  
               Timer0_Init@DIVIDE 0077                   ?_SPI_DisableISR 0060  
                Motor_Move@pMotor 0063               HMI_SetButton@pValue 0066  
                   Console_Init@x 0062                     Console_Init@y 0063  
                  ?i2_Timer0_Stop 0001                 i2Byte_SetBit@pBit 0003  
                    ___param_bank 000000                   __end_of_Font5x7 FF03  
            Set_Rotation@rotation 0066            __size_of_HMI_SetButton 0090  
          __size_of_HMI_SetNumber 002A                       ?_ISR_Enable 0001  
                           ??_exp 00B7                             ??_log 00AF  
                           ??_pow 00C6      __size_of_Console_ClearCursor 0040  
                __end_of_LCD_Fill 5F46                  __end_of_LCD_Init 37E2  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 5DD6                     ??_Button_Init 00A8  
         GetPortProperties@pInput 0062                     ??_Button_Poll 007E  
                __end_of_HMI_Init 2986                             l12032 4A6A  
                           l12222 3B14                             l12156 5B70  
                           l12164 5BAE                             l12260 5F48  
                           l12158 5B82                             l12262 5F5A  
                           l11390 3362                             l14122 3700  
                           l14132 37A4                             l14312 23CE  
                           l11824 5458                             l13442 15EC  
                           l11818 5448                             l14068 1C2E  
                           l13712 5A62                             l14354 2958  
                           l14284 5570                             l13716 5A70  
                           l11980 4344                             l14278 5560  
                           l13814 4636                             l14366 6408  
                           l13808 4626                             l13844 5670  
                           l13692 5F24                             l13772 3122  
                           l14572 2F68                  __end_of_HMI_Poll 59AA  
                           l13688 5F16                             l13938 39AE  
                           _I2C1T 003F                             _I2C2T 01BE  
                   ___fltol@sign1 008F                   __end_of___fladd 09A0  
                           ?_main 0001                   __end_of___fldiv 1624  
                 __end_of___awdiv 4908                   __end_of___flneg 6528  
                           ?_itos 006C                             STR_10 FFD2  
                           STR_11 FFB6                             STR_12 FF7E  
                 __end_of___flmul 0E46                   __end_of___flsub 6116  
                 __end_of___fltol 419A                             u10010 08BA  
                 _Event_DIPSwitch 665A                   __end_of___lldiv 49C4  
                           u10200 0A68                             u10040 08DA  
                           u10210 0C7C                             u11100 15CA  
                           u10300 0DE8                             u10215 0C70  
                           u10090 0948                             u11060 1532  
                           u10260 0D58                             u10500 2AD8  
                           u10420 416C                             u11150 3EB6  
                           u11090 159C                             u10290 0DC2  
                           u12210 2554                             u12140 55D2  
                           u11308 45DE           __size_of_HMI_LeftSwitch 0018  
                           u10380 40D4                   ___awdiv@divisor 0062  
                           u11510 46AA                             u11430 5A8C  
                           u11318 37F4                             u10550 4AE8  
                           u11190 3D88                             u11319 3808  
                           u11520 46B6                             u10800 61C8  
                           u10705 18A2                             u10385 40C8  
                           u12410 2FA4                             u10715 18E4  
                           u10740 65B6                             u11700 3C52  
                           u10725 1926                             u11390 5F40  
                           u11710 3C66                             u11470 31C2  
                           u10558 4AEC                             u11198 3D8C  
                           u12430 3022                             u10655 1652  
                           u11368 3930                             u11560 56C6  
                           u11720 3CA6                             u10745 65B0  
                           u10665 166A                             u10834 65E2  
                           u10835 65DC                             u11555 5688  
                           u10675 1682                             u10685 16A4  
                           u11670 3A1A                             u10695 1824  
                           u11920 37A4                             u12490 2682  
                           u11780 1AA4                             u11790 1AA6  
                           u11880 3690                             u13920 0254  
                           u13818 009A                             u13819 00AE  
                           u13748 6396                             u13940 02A2  
                           u13828 00C4                             u13749 63AC  
                           u13829 00D8                             u13870 01C0  
                           u13838 00E4                             u13839 00F8  
                           u13848 0104                             u13849 0118  
                           u13858 0124                             u13859 0138  
                           _INDEX 00E6                   __end_of___lwdiv 584C  
                           _MASKS FD13                   __end_of___lwmod 5E38  
                           i2l430 4E06                             i2l432 4E2C  
                           i2l433 4E56                             i2l427 4E7C  
                           i2l732 5898                             i2l733 5892  
                           i2l832 6344                             i2l781 6648  
                 ___awdiv@counter 0064                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0018                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                     ?_FunctInitADC 0001  
                ??i2_Byte_GetZone 0006                Port_TogglePin@pPin 0076  
                  __CFG_FCMEN$OFF 000000                             _PortA 01AA  
                           _PortB 01A0                             _PortC 0035  
                           _PortD 0196                             _PortE 018C  
                           _PortF 01B4                             _PortG 0182  
         __end_of_Port_SetPinType 2D14                   _ADC_Initialised 0031  
                  ??_Byte_GetPair 006C                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 0075             __size_of_ADC_Sequence 0046  
                 __end_of_dpowers FD13                    ??_Byte_GetZone 0065  
                           _floor 3E52                             _ldexp 3D2E  
                  Button_Poll@Pin 0083                             _frexp 4A7E  
                           _errno 011A          __size_of_Set_Addr_Window 00AA  
             __end_of_Console_Tab 484A                  __end_of_MXK_Init 3670  
            i2Byte_GetPair@pInput 000A                             _putch 69F0  
                __end_of_SPI_Init 1264                  __end_of_SPI_Send 5CAA  
           __end_ofi2_MXK_Release 6AAA                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 5B6E  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 0063  
               __end_of_ADC_Start 565C                    ??_Byte_SetPair 006F  
                           pow@yi 00CF                    ??_Byte_SetQuad 006F  
                           plusw2 000FDB                    ??_Byte_SetZone 0066  
                    main@rotation 0264                             status 000FD8  
                           wtemp6 0051            __size_of_ADC_Calibrate 0014  
                 _Configure_GPIOs 5A92              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 68A0  
             __size_of_LED_Toggle 0048               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001                       exp@exponent 00BB  
                      _Event_NULL 1404       __size_of_Port_CheckPairType 006A  
                     ldexp@newexp 00AF               __size_of_HMI_SetBar 000A  
                 __initialization 4C98               __size_of_HMI_Render 003E  
                     log@exponent 00AF               __end_of_Byte_GetBit 65C8  
                    __end_of_main 04F8                      __end_of_itos 4372  
            HMI_SetButton@reindex 0062                      SPI_Send9@dat 011C  
             __end_of_Byte_SetBit 5D74                  __end_of_FunctADC 69DE  
                __end_of_InitList FCE9       __size_of_Port_CheckQuadType 005A  
                __end_of_Mode_Set 69F0                         ??_ADC_Off 0060  
     __size_of_Port_CheckPortType 0048                    main@RightValue 0274  
                     HMI_Render@a 0068                            ??_main 00D3  
                    _ADC_Sequence 627A                            ??_itos 0070  
        __size_of_FunctInitButton 00A2           _Console_MakeField$10974 006E  
                   __activetblptr 000003                 Port_SetPin@pInput 006F  
               __end_of_LCD_Reset 6038                 Port_SetPin@pValue 0072  
                  ??_FunctInitADC 0067                         ??_LED_Set 0075  
               _MXK_InitDIPSwitch 6846                 GetPortPORT@pInput 0062  
          Port_CheckPairType@Pin1 008A            Port_CheckPairType@Pin2 008B  
               __end_of_LCD_Write 67EC                       _GetPortPORT 4FE4  
                    ?i2_MXK_Queue 0001                       _GetPortTRIS 4E98  
                 ??_LCD_DrawField 007C        __end_of_PortProperty_Valid 575A  
                __end_of_Port_Set 19DE                       ?i2_delay_us 0001  
__size_of_Console_IncrementCursor 0066               __end_of_Button_Init 45F4  
             __end_of_Button_Poll 3948                 Word_GetPair@pPair 006E  
         LCD_FillRectangle@pPoint 006B                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 53A6                         ??_SPI_DCS 0062  
                          ?_floor 009B                            ?_ldexp 00AB  
                          ?_frexp 0060                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _ADC_On 6A98  
                   _HMI_SetNumber 670E            Port_SetQuadType@Output 009A  
                          _ANCON0 000FC1                  ___awdiv@dividend 0060  
                          ?_putch 0001                  ??_Console_Render 0083  
                   ToSegment@pCHR 0060                  _Console_FormFeed 5436  
          Port_SetQuadType@pInput 0096                            i2l1630 4200  
                          i2l1631 424C                            i2l1632 4238  
                          i2l1730 6570                            i2l1627 4288  
                          i2l1732 6590                            i2l1628 427E  
                          i2l1629 4216                            i2l1590 145E  
                  __CFG_WDTEN$OFF 000000               __size_of_ISR_Enable 000A  
          __end_of_LCD_Word_Write 68BE                    _Timer0_Restart 6A40  
             ??_MXK_InitDIPSwitch 009B                  __end_of___xxtofl 2B54  
                  i2_MXK_SwitchTo 655E                   Byte_GetBit@pBit 0062  
                      _Reset_High 6828                Console_Render@temp 0085  
                  ??_HMI_UpSwitch 0066                    OutSeg@pSegment 0063  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 0077  
          ADC_SetChannel@pChannel 0061                  __end_of_delay_ms 5BD8  
                    LED_Init@pLED 008D                  __end_of_delay_us 5F98  
                   ??_Timer0_Init 0071                     ??_Timer2_Init 0071  
                   ??_Timer0_Stop 0060                        _Timer0_ISR 66B6  
        __size_of_Console_NewLine 00A2                 Timer2_Init@DIVIDE 007A  
                  __CFG_XINST$OFF 000000                            _OutSeg 565C  
        __size_of_HMI_InitButtons 0006                        _Motor_Init 444A  
                      _Motor_Move 64B6                     ??_Motor_Speed 007F  
                          ___flge 31D6                        _Motor_Step 3C08  
         __end_of_Event_DIPSwitch 6688                         ??___fladd 008F  
                          ___wmul 6528                   ??_HMI_DIPSwitch 0066  
                       ??___fldiv 0068                         ??___awdiv 0064  
                       ??___flneg 0064                    __CFG_STVREN$ON 000000  
                          _change 00EC                         ??___flmul 0076  
                          _lMotor 00DC                         ??___flsub 00A3  
                       ??___fltol 008B                         ??___lldiv 0068  
                          _lQueue 00D5                        _TestButton 0178  
                       ??___lwdiv 0064                __size_of_ToSegment 0284  
                       ??___lwmod 006B          __end_of_Port_SetQuadType 2152  
        i2Byte_GetZone@pChunkSize 0005                      HMI_GRender@a 002B  
            __end_of_Console_Init 55D8                 GetPortTRIS@pInput 0062  
              __size_of_Reset_Low 001E                            clear_0 4CFE  
                          clear_1 4D10                            clear_2 4D1C  
                          clear_3 4D28                            clear_4 4D34  
                ___awdiv@quotient 0066                        Port_Init@i 00A5  
               __end_of_MXK_Queue 6A1A        __end_ofHMI_SetButton@F7213 FD20  
                          _printf 2EB2                     main@movetoPos 0266  
       __end_of_MXK_InitDIPSwitch 6864                     _ADC_Calibrate 69B8  
                  HMI_SetButton@v 0067                            floor@i 009F  
                          floor@x 009B            HMI_SetSegments@pString 0061  
                     _Console_Tab 4788               LCD_Word_Write@value 0065  
                    __pdataCOMRAM 0046                __size_of_Port_Init 0192  
                   ??_Port_GetPin 0063          Port_CheckPortType@Output 0099  
                       ?_ADC_Init 0064                   ??i2_Port_SetPin 0014  
                    __mediumconst FC36       __end_ofTimer2_Init@PRESCALE FD23  
        Port_CheckPortType@pDrive 0098                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                    ?_MXK_Dequeue 0001                    ?_HMI_SetButton 0001  
        Port_CheckPortType@pInput 0096                     ??_Port_SetPin 0073  
                       ??_reverse 0064             Console_MakeField@Fill 021E  
                ?_Port_SetPinType 0086                            putch@c 0074  
               Motor_Speed@pMotor 007B                    ?_HMI_SetNumber 0076  
                  i2_Word_GetPair 662A           __end_of_Configure_GPIOs 5B02  
                ??_MXK_TestButton 0066            __end_of_Timer0_Restart 6A4C  
                   Set_Rotation@m 0065                      ?_MXK_Release 0001  
                      ___flge@ff1 0060                        ___flge@ff2 0064  
                 __CFG_FOSC$HSPLL 000000            __end_ofi2_MXK_SwitchTo 6594  
                    ___xxtofl@arg 006A                  __end_ofexp@coeff FF2B  
                    i2delay_us@us 0001                      ___xxtofl@exp 0069  
                    ___xxtofl@val 0060                  __end_oflog@coeff FF4F  
                 ?_LCD_Word_Write 0065                        __accesstop 0060  
         __end_of__initialization 4D3A                         ?_LCD_Fill 0069  
                       ?_LCD_Init 0001                     SPI_Init@pMode 0092  
                      ___flneg@f1 0060                       _Byte_GetBit 6594  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 6A58  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 0068  
                       ?_HMI_Poll 0001                      eval_poly@res 00A7  
                   ___rparam_used 000001                        ___fltol@f1 0087  
                     _Byte_SetBit 5D10                     __end_of_MASKS FD1C  
                  _PortA_Property FF5B                       ?_Event_NULL 0001  
                       LCD_Fill@i 006B                         LCD_Fill@j 006C  
                       LCD_Init@i 0097                    __pcstackCOMRAM 0001  
                  _PortB_Property FF59               __size_ofi2_delay_us 0040  
                    __pidataBANK0 6AAA                      __pidataBANK1 6A28  
             i2Byte_SetBit@pInput 0001              __end_of_Byte_GetPair 68A0  
                 Console_Render@x 008A                   Console_Render@y 008B  
             i2Byte_SetBit@pValue 0004                     ?_Set_Rotation 0001  
             Timer0_Init@PRESCALE FCE9              __end_of_Byte_GetZone 530E  
              ADC_Sequence@pItemA 0060                ADC_Sequence@pItemB 0062  
                   __end_of_floor 3F76                     __end_of_ldexp 3E52  
                   __end_of_frexp 4B34                    _PortC_Property FF57  
             __end_of_Timer0_Init 3AA8                     __end_of_putch 69FE  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 3C08  
             __end_of_Timer0_Stop 6A8C                    ?_ADC_Calibrate 0001  
                       ?_SPI_Init 008D                         ?_SPI_Send 0060  
                     _Button_Init 4520                 Port_SetType@pType 009C  
                     _Button_Poll 37E2              __end_of_Byte_SetByte 6A0C  
            __end_of_Byte_SetPair 67A8                    _HMI_LeftSwitch 6988  
                  _PortD_Property FF55              __end_of_Byte_SetQuad 67CA  
                    ??_LED_Toggle 0078                      ??_HMI_GetBar 0060  
            __end_of_Byte_SetZone 4BEA               __end_of_Motor_Speed 670E  
                  _HMI_DownSwitch 6940                     SPI_Send@pData 0062  
           __end_of_MXK_DIPSwitch 6928                      ??_HMI_SetBar 0060  
                    ??_HMI_Render 0068                    _PortE_Property FF53  
                      ??_ADC_Init 0067          __size_of_HMI_SetSegments 00BA  
          __end_ofi2_Word_GetPair 665A                    _PortF_Property FF51  
         Port_CheckQuadType@Pair1 0093           Port_CheckQuadType@Pair2 0094  
        MXK_BlockSwitchTo@pModule 0067                           ??_floor 009F  
                         ??_ldexp 00B1                           ??_frexp 0066  
               ??_FunctInitButton 00A8                           ?_ADC_On 0001  
               _Console_Backspace 5E38                   ?_Timer0_Restart 0001  
                         ??_putch 0074          __size_of_HMI_RightSwitch 0018  
             _Console_ClearCursor 6302                 __end_of_ToSegment 1EFC  
                  _PortG_Property FF4F                        __pbssBANK0 00D5  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 6234           Port_CheckQuadType@pQuad 0091  
                 reverse@iterator 0065                __size_of_eval_poly 0118  
                ??_SPI_DisableISR 0062                   ?i2_MXK_SwitchTo 0001  
              ?_Console_Backspace 0001                 __end_of_Reset_Low 6828  
                       ?_FunctADC 0001         __size_of_Event_TestButton 003C  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 006B  
                      ??_LCD_Init 0095               __end_of_Port_SetPin 4788  
          __end_of_PortA_Property FF5D                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 0060                        ??_LED_Init 008D  
        ADC_ClockDivision@pDivide 0060                Byte_SetByte@pValue 0062  
                   ?_ISR_Function 0001                       ?_Reset_High 0001  
              _ADC_ConversionTime 61A6                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00A8                        ??_HMI_Poll 0084  
                   ?_Timer2_Clear 0001                        _main$15162 026C  
         Port_CheckPairType@Props 008D            __end_of_PortB_Property FF5B  
                   ?_Timer0_Start 0060                 __end_of_Port_Init 31D6  
                     ?_Timer0_ISR 0001           Port_CheckPairType@pPair 0088  
              __end_of_LED_Toggle 61A6                __end_of_HMI_GetBar 6A92  
            __end_of_FunctInitADC 4C98          LCD_FillRectangle@pColour 0069  
             ??_Console_Backspace 0062                 Set_Addr_Window@xe 0066  
               Set_Addr_Window@ye 0067                 Set_Addr_Window@xs 0068  
               Set_Addr_Window@ys 0065                           ?_OutSeg 0063  
                     ?_Motor_Init 008D                Byte_SetPair@pInput 006B  
                     ?_Motor_Move 0063                       ?_Motor_Step 0001  
              Byte_SetPair@pValue 006E                           ?___flge 0060  
              __end_of_HMI_SetBar 6A76            __end_of_PortC_Property FF59  
              Word_GetPair@pInput 006C                __end_of_HMI_Render 643C  
                  ??_Set_Rotation 0065                         ?_Port_Set 006F  
             ?_ADC_ConversionTime 0001                           ?___wmul 0060  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 0065  
                    ??_ISR_Enable 0060      __size_of_Console_ResetCursor 001E  
            ?_Console_ClearCursor 0001            __end_of_HMI_LeftSwitch 69A0  
          __end_of_PortD_Property FF57                           _ADC_AN0 01D4  
                         _ADC_AN1 01CF                           _ADC_AN2 01CA  
                         _ADC_AN3 01C5                        ??_MXK_Init 00A6  
               Port_GetPin@pInput 0060                 _Console_MakeField 45F4  
                         _ADC_Off 6A7E                 ??_Console_NewLine 0060  
        ADC_ClockDivision@unfound 0062            __end_of_HMI_DownSwitch 6958  
                      ??_SPI_Init 0093            Event_TestButton@pState 0079  
                      ??_SPI_Send 0063                           ?_printf 0075  
               ??_HMI_InitButtons 0060        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FF55               Console_Render@F6956 01E1  
              ?_Console_MakeField 0065                           _COUNTER 0029  
                 ??_HMI_SetButton 0060                           i2l12810 6344  
                         i2l12812 6354              __end_of_HMI_UpSwitch 6970  
                         _LED_Set 5F98           _Console_IncrementCursor 5CAA  
                       ?___xxtofl 0060            __end_of_PortF_Property FF53  
                     _gBackcolour 00E0                   ??_HMI_SetNumber 0078  
                       _I2C1_Done 0117                   ?i2_Word_GetPair 000D  
                       _I2C2_Done 0114                         _I2C1_More 0111  
                       _I2C2_More 010E                         ?_delay_ms 0060  
       __end_of_Console_Backspace 5E94                         ?_delay_us 0060  
             __size_of_Event_NULL 0002        __end_of_MXK_InitTestButton 6882  
                         _SSP1ADD 000FC8                           _SSP1BUF 000FC9  
                         _SSP2BUF 000F6F              ??_ADC_ConversionTime 0060  
          __end_of_PortG_Property FF51               ??_Console_MakeField 0067  
         __size_of_ADC_SetChannel 001C                           _SPI_DCS 6688  
            __size_ofi2_MXK_Queue 000E                     ??_ADC_SetupIO 0060  
                ?_Configure_GPIOs 0001                   __size_of_ADC_On 0006  
                ADC_Init@pChannel 0066              i2Byte_GetZone@Offset 0008  
                   ??_ADC_Voltage 008B                        ??_FunctADC 0066  
              __end_of_ISR_Enable 6A6C                    main@lockedMode 027A  
                  ??_ISR_Function 0017              i2Byte_GetZone@Output 0009  
                  ??_Timer0_Clear 0060                 Event_TestButton@j 00E2  
                      ??_Mode_Set 0060                    ??_Timer2_Clear 0060  
                         _Font5x7 FD23              i2Byte_GetZone@pChunk 0004  
        ADC_ConversionTime@pCount 0061              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 0063              SPI_DisableISR@pInput 0060  
                   ?_Port_GetQuad 0060                   Byte_SetBit@pBit 0062  
            Port_TogglePin@pInput 0074             __end_ofi2_Byte_SetBit 6084  
                       _ADC_Start 55D8                           __Hparam 0000  
               Port_GetQuad@pQuad 0062                       _Timer0_Init 3948  
                     _Timer2_Init 3AA8                           __Lparam 0000  
                     _Timer0_Stop 6A86             __size_of_Console_Init 008A  
                         OutSeg@a 0032   __end_ofPortProperty_Valid@F6830 FD09  
                   LCD_Write@mode 0063                   __size_of_OutSeg 0082  
                      ??_Port_Set 0072                   __size_of___flge 0190  
       __end_of_Console_MakeField 46C4                 _Console_PrintChar 2D14  
                     _Motor_Speed 66E4                           ___fladd 04F8  
                   ?_Port_SetType 009A                           _gCursor 0046  
                         ___fldiv 1264                           ___awdiv 484A  
                         ___flneg 64F0             ??_Console_ClearCursor 0060  
                         ___flmul 09A0                           ___flsub 60CE  
                         ___fltol 408E                           _lBuffer 0285  
                         ___lldiv 4908                   __size_of___wmul 0036  
                 ??_ADC_Calibrate 0060                           ___lwdiv 57D4  
                         ___lwmod 5DD6                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 54C4                ?_Console_PrintChar 0001  
                         __pcinit 4C98                 __end_of_eval_poly 408E  
                 ?_HMI_DownSwitch 0001                           __ramtop 1000  
                         __ptext0 0000                           __ptext1 2EB2  
                         __ptext2 69F0                           __ptext3 2D14  
                         __ptext4 4788                           __ptext5 484A  
                         __ptext6 5CAA                           __ptext7 512E  
                         __ptext8 5436                           __ptext9 67EC  
                 __size_of_printf 0192                         _T0CONbits 000FD5  
               i2MXK_SwitchTo@CUR 0007                           _dpowers FD09  
                       _T2CONbits 000FCA                     LED_Set@pValue 0074  
                    __size_of_exp 029A                      __size_of_log 018A  
             __size_of_Reset_High 001E             Event_DIPSwitch@pState 0079  
                    __size_of_pow 0200                        ??___xxtofl 0064  
                    ?_GetPortPORT 0060                      ?_GetPortTRIS 0060  
             ??_Console_PrintChar 0070                       _Port_GetPin 61EE  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 01DD  
             LCD_DrawRectangle@p4 01D9                      ??i2_delay_us 0003  
                      ??_delay_ms 0062                        ??_delay_us 0062  
                         _reverse 5B02                         _DIPSwitch 016E  
             __size_of_Timer0_ISR 002E                       _Port_SetPin 46C4  
                  LCD_DrawField@i 0082                         _LCD_Reset 5FE8  
             __size_of_Motor_Init 00D6               __size_of_Motor_Move 003A  
             __size_of_Motor_Step 0126                         _LCD_Write 67CA  
            __size_of_MXK_Dequeue 003E                        delay_ms@ms 0060  
            end_of_initialization 4D3A               ADC_SetupIO@pChannel 0062  
                         exp@sign 00BD                        delay_us@us 0060  
               ??_HMI_SetSegments 0063           Console_PrintChar@pInput 0073  
                    _Console_Init 554E              __size_of_MXK_Release 001C  
      __end_of_Port_CheckPairType 5C42                           itos@Out 0074  
                  ??_Port_GetQuad 0063                         i2u1060_40 6370  
                       i2u1056_44 604C                         i2u1056_45 6048  
                       i2u1057_44 6072                         i2u1057_45 606E  
              _PortProperty_Valid 56DE                         i2u1185_40 41DE  
              Byte_SetQuad@pInput 006B                         i2u1186_40 41F2  
                       i2u1187_40 422A                         i2u1372_48 66CE  
              SPI_MinSpeed@pInput 006F                Byte_SetQuad@pValue 006E  
             __end_of_ADC_SetupIO 65FA             __size_of_Byte_GetPair 001E  
                 ___lldiv@divisor 0064             __size_of_Byte_GetZone 009C  
                      ?_ADC_Start 0062                 ??_HMI_RightSwitch 0066  
                         pow@sign 00CE                   ___lldiv@counter 006C  
       __end_of_Console_PrintChar 2EB2               __end_of_ADC_Voltage 444A  
                  ??_Port_SetType 009D        __end_of_Port_CheckQuadType 5EEE  
                         printf@c 0080                           printf@f 0075  
                  Port_Init@pPort 00A2                           postdec1 000FE5  
                         postdec2 000FDD             __size_of_Byte_SetByte 000E  
           __size_of_Byte_SetPair 0022            Console_MakeField@Index 0069  
                         postinc0 000FEE                           postinc2 000FDE  
             ?_PortProperty_Valid 006F             __size_of_Byte_SetQuad 0022  
      __end_of_Port_CheckPortType 615E             __size_of_Byte_SetZone 00B6  
              __end_ofi2_delay_us 6382                Button_Init@pInitIO 009F  
           Timer0_Init@pFrequency 006D                 ?_Port_SetQuadType 0096  
                     _gForecolour 00EA         ??_Console_IncrementCursor 0064  
          __size_ofi2_MXK_Release 0006                         _PORTFbits 000F85  
              ??_Port_SetQuadType 009A                      ?_Console_Tab 0001  
                Byte_GetZone@MASK 0066                       ___fladd@grs 009A  
           Console_Render@lCursor 0086                         _MXK_Queue 6A0C  
                __CFG_CPUDIV$OSC1 000000                     ___xxtofl@sign 0068  
                Byte_GetZone@pMax 0062        __size_of_Console_Backspace 005C  
                 _Set_Addr_Window 4D44                    SPI_Init@pClock 008D  
                ??_LCD_Word_Write 0067                       ___fldiv@grs 0073  
                     ___fldiv@rem 006D             __end_of_LCD_DrawField 512E  
                  Port_Set@pInput 006F                    SPI_Init@pInput 0093  
            ??_PortProperty_Valid 0073                 __size_of_ADC_Init 007A  
                  Port_Set@pValue 0071                        ?_LCD_Reset 0001  
            __end_of_Set_Rotation 53A6                        ?_LCD_Write 0063  
                    _Byte_GetPair 6882                HMI_SetButton@F7213 FD1C  
                    _Byte_GetZone 5272                     ?_MXK_SwitchTo 0001  
               LCD_DrawField@xmax 0080                 LCD_DrawField@ymax 0081  
                  __end_of_ADC_On 6A9E                    _Port_TogglePin 65FA  
                _Event_TestButton 647A             __size_of_FunctInitADC 00AE  
                     ___flmul@grs 007C              Port_SetPinType@Props 008B  
                    ?_Byte_GetBit 0060           __size_ofi2_Byte_GetPair 001A  
                    _Byte_SetByte 69FE                      _Byte_SetPair 6786  
                 ADC_SetupIO@MASK 0063                      _Byte_SetQuad 67A8  
         __size_ofi2_Byte_GetZone 0076                      _Byte_SetZone 4B34  
            Port_SetPinType@pType 0089                 ?i2_Timer0_Restart 0001  
                    ?_Byte_SetBit 0060                     ?_SPI_MaxSpeed 006F  
               __size_of_LCD_Fill 0058                      ??_Event_NULL 0060  
               __size_of_LCD_Init 0172                 __size_of_LED_Init 0062  
                   ?_SPI_MinSpeed 006F             __end_ofi2_Timer0_Stop 6AA4  
              ??i2_Timer0_Restart 0001                 __size_of_HMI_Init 01FA  
               __size_of_HMI_Poll 0074                     ?i2_Motor_Step 0001  
      __size_of_Console_MakeField 00D0                    __end_of_OutSeg 56DE  
                  __end_of___flge 3366             __size_of_HMI_UpSwitch 0018  
                  __end_of___wmul 655E             __end_of_HMI_DIPSwitch 6940  
                   __pidataCOMRAM 6A58                      ?_Button_Init 009B  
                 _FunctInitButton 51D0                      ?_Button_Poll 007B  
                       _Bus_State 004A               i2Byte_GetPair@pPair 000C  
            __end_of_ISR_Function 14AA              __end_of_Timer0_Clear 6A40  
               __size_of_MXK_Init 0180                        floor@expon 00A3  
            __end_of_Timer2_Clear 6A7E                    __end_of_printf 3044  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 0068  
                   ?_Word_GetPair 006C                  ??_Timer0_Restart 0060  
            __end_of_Timer0_Start 6786                Port_SetType@Output 009F  
             start_initialization 4C98                        ?_MXK_Queue 0060  
                      eval_poly@d 009F                        eval_poly@n 00A1  
                      eval_poly@x 009B                      _FunctInitADC 4BEA  
                      ldexp@value 00AB          PortProperty_Valid@Errors 0075  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 5A1E  
              Port_SetType@pInput 009A                    _ADC_SetChannel 68DA  
                     __end_of_exp 1C78                       __end_of_log 34F0  
                     __end_of_pow 278C                        HMI_Init@in 00A8  
             HMI_SetNumber@pInput 0076             __end_ofi2_Port_SetPin 4E98  
              __end_of_Event_NULL 1406            __end_of_Port_TogglePin 662A  
                   ?_Word_SetPair 006F                 Byte_SetBit@pInput 0060  
                        ??_ADC_On 0060                    ??_MXK_SwitchTo 0066  
               Byte_SetBit@pValue 0063                ?_LCD_FillRectangle 0069  
             _Console_ResetCursor 67EC       PortProperty_Valid@pPinDrive 0071  
                     _ADC_SetupIO 65C8              MXK_BlockSwitchTo@CUR 0066  
        PortProperty_Valid@pInput 006F                     i2_MXK_Release 6AA4  
                     _ADC_Voltage 4372                        frexp@value 0060  
          LCD_FillRectangle@pSize 006F                    SPI_Send@pInput 0060  
                    ??_Reset_High 0074          __size_of_Port_SetPinType 01C0  
                  ??_SPI_MaxSpeed 0071             Port_SetQuadType@pQuad 0098  
                       _ToSegment 1C78               ??_LCD_FillRectangle 0073  
           Port_SetQuadType@pType 0099                   _Console_NewLine 512E  
               __size_of_FunctADC 0012                    ??_SPI_MinSpeed 0071  
                     ??_ADC_Start 0064                      _HMI_UpSwitch 6958  
                       _Reset_Low 680A                      ??_Timer0_ISR 0017  
                 _HMI_InitButtons 6A92                 __size_of_Mode_Set 0012  
      __size_of_Console_PrintChar 019E                    ADC_Init@pInput 0064  
                       _gCharSize 01E9                  Timer2_Init@INDEX 00E4  
                       OutSeg@cur 0034                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 0091                          ??_OutSeg 0064  
                       OutSeg@out 0067           __size_of_Console_Render 0210  
                    ??_Motor_Move 0067                      ??_Motor_Step 0074  
                        ??___flge 0068                Byte_SetZone@Offset 0069  
                        ??___wmul 0064              ?_Console_ResetCursor 0001  
                       _Port_Init 3044                       __pdataBANK0 00EA  
                     __pdataBANK1 01E1                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 0063                          ?_ADC_Off 0001  
                ??i2_Word_GetPair 0010                Byte_SetZone@pInput 0060  
              Byte_SetZone@pValue 0065                     Mode_Set@pMode 0060  
                        ??_printf 0079           __end_of_Set_Addr_Window 4DEE  
        Port_CheckQuadType@Output 0095                         _gLineSize 01E5  
        Port_CheckQuadType@pDrive 0092                         ___fladd@a 008B  
                       ___fladd@b 0087                    ??_Word_GetPair 006F  
        Port_CheckQuadType@pInput 008F              __end_of_Port_GetQuad 60CE  
                       ___fldiv@a 0064                         ___fldiv@b 0060  
       __end_of_LCD_FillRectangle 5A92                       __pbssBIGRAM 0285  
          __end_of_ADC_SetChannel 68F6                          ?_LED_Set 0074  
                       ___flmul@a 0072                         ___flmul@b 006E  
                     __pbssCOMRAM 0029                         ___flsub@a 009F  
                       ___flsub@b 009B                   ADC_Start@pInput 0062  
              __end_of_Reset_High 6846                     __pcstackBANK0 0060  
                   __pcstackBANK2 0264                        itos@Length 0072  
                  ??_Word_SetPair 0073                 __size_of___xxtofl 01CE  
              __end_of_Timer0_ISR 66E4              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 0079              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 237C                          ?_SPI_DCS 0060  
                 ?_Port_TogglePin 0074                       ??_LCD_Write 0064  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
              __end_of_Motor_Init 4520               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Move 64F0                __end_of_Motor_Step 3D2E  
           Timer2_Init@pFrequency 006D                    ?i2_MXK_Release 0001  
                       _exp$15165 00B7          Port_CheckPairType@Output 008C  
                      ?_ToSegment 0001          Port_CheckPairType@pDrive 0089  
        Port_CheckPairType@pInput 0086                    reverse@tempVar 0064  
              _MXK_InitTestButton 6864                        ?_Reset_Low 0001  
                    ?_Timer0_Init 006D            __size_of_MXK_DIPSwitch 0018  
                    ?_Timer2_Init 006D                  ??_HMI_LeftSwitch 0066  
                    ?_Timer0_Stop 0001                  ___lwdiv@dividend 0060  
                   _lStepFunction 010B           __size_of_MXK_TestButton 0018  
               Byte_SetPair@pPair 006D           __end_of_FunctInitButton 5272  
                ??_HMI_DownSwitch 0066                         __pintcode 1408  
                   __pmediumconst FC36                      ?_Motor_Speed 007B  
           ??_Console_ResetCursor 0060                          ?___fladd 0087  
                        ?___fldiv 0060                          ?___awdiv 0060  
                       __ptext100 6A92                         __ptext101 6864  
                       __ptext110 643C                         __ptext102 2B54  
                        ?___flneg 0060                         __ptext111 6882  
                       __ptext103 5D10                         __ptext120 54C4  
                       __ptext112 5272                         __ptext104 1EFC  
                       __ptext121 69B8                         __ptext113 67A8  
                       __ptext105 6234                         __ptext130 6528  
                       __ptext122 69CC                         __ptext114 4B34  
                       __ptext106 6786                         __ptext131 4D44  
                       __ptext123 55D8                         __ptext115 4BEA  
                       __ptext107 5E94                         __ptext140 2986  
                       __ptext132 68A0                         __ptext124 68DA  
                       __ptext116 627A                         __ptext108 5BD8  
                       __ptext141 09A0                         __ptext133 67CA  
                       __ptext125 6A98                         __ptext117 575A  
                       __ptext109 56DE                         __ptext150 68F6  
                       __ptext142 1264                         __ptext134 5C42  
                       __ptext126 6A7E                         __ptext118 65C8  
                       __ptext151 584C                         __ptext135 69DE  
                       __ptext127 237C                         __ptext119 61A6  
                       __ptext152 6038                         __ptext144 66B6  
                       __ptext136 45F4                         __ptext128 5A1E  
                       __ptext153 655E                         __ptext145 419A  
                       __ptext137 6594                         __ptext129 508A  
                       __ptext154 6342                         __ptext146 6A9E  
                       __ptext138 554E                         __ptext155 6AA4  
                       __ptext147 6A4C                         __ptext139 4372  
                       __ptext156 6A1A                         __ptext148 4DEE  
                       __ptext157 0000                         __ptext149 662A  
                       _pShiftVal 00D8                          ?___flmul 006E  
                        ?___flsub 009B                          ?___fltol 0087  
                        ?___lldiv 0060                        ?_Port_Init 00A0  
            Timer0_Init@pCPUClock 0073                          ?___lwdiv 0060  
                        ?___lwmod 0067               ?_MXK_InitTestButton 0001  
               ?_Console_FormFeed 0001                 _GetPortProperties 4F3E  
                   ?_ADC_Sequence 0060                         _pow$15163 00C6  
                       _pow$15164 00CA       __end_ofTimer0_Init@PRESCALE FCF9  
              ??_Console_FormFeed 0060                   _HMI_SetSegments 49C4  
              ?_GetPortProperties 0060                  Event_NULL@pState 0001  
        __size_of_Event_DIPSwitch 002E             __size_of_Set_Rotation 0098  
                 ?_ADC_SetChannel 0001                     ??i2_MXK_Queue 0004  
                       _eval_poly 3F76                       ??_MXK_Queue 0063  
                    ?_Port_GetPin 0060                          _ADC_Init 575A  
           __end_of_HMI_SetButton 5436              __size_of_Console_Tab 00C2  
                        ?_reverse 0060                      ?_Port_SetPin 006F  
           __end_of_HMI_SetNumber 6738                  ___lwdiv@quotient 0065  
                 _HMI_RightSwitch 6970       __size_of_ADC_ConversionTime 0048  
                  __size_of_floor 0124                    __size_of_ldexp 0124  
                  __size_of_frexp 00B6               ??_GetPortProperties 0062  
         __end_of_Console_NewLine 51D0              ??_MXK_InitTestButton 008D  
              Byte_GetPair@pInput 0069                    __size_of_putch 000E  
         __end_of_HMI_InitButtons 6A98                 i2Port_SetPin@Type 0014  
               i2Port_SetPin@pPin 0012                    i2_Byte_GetPair 68F6  
                        _LCD_Fill 5EEE                          _LCD_Init 3670  
                  ___wmul@product 0064                          _HMIBoard 011E  
                  i2_Byte_GetZone 584C                          _LED_Init 5D74  
                       delay_ms@u 0062                Button_Poll@pButton 007B  
                       delay_us@u 0062                          _HMI_Init 278C  
                        _HMI_Poll 5936                MXK_Queue@pCallback 0060  
                        _IPR1bits 000F9F                          _IPR3bits 000FA5  
                        _PIE1bits 000F9D                          _PIE3bits 000FA3  
     __end_of_Console_ClearCursor 6342          __size_of_Configure_GPIOs 0070  
            __size_of_Byte_GetBit 0034                 Byte_SetQuad@pQuad 006D  
                        _PIR1bits 000F9E                          _PIR3bits 000FA4  
                        i2u926_40 586E                          i2u926_47 5864  
                        i2u928_40 58B6                          i2u928_45 58B2  
            __size_of_Byte_SetBit 0064                          _RCONbits 000FD0  
            i2Word_GetPair@pInput 000D                  __CFG_WDTPS$32768 000000  
                HMI_SetBar@pValue 0060                 Button_Init@pInput 009B  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 008A                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2             __size_of_Timer0_Clear 000C  
                        _SSP1STAT 000FC7         __end_of_GetPortProperties 4FE4  
                        _SSP2STAT 000F6D                      _Set_Rotation 530E  
           __size_of_Timer2_Clear 0008              __end_of_MXK_SwitchTo 6302  
              _Port_CheckPairType 5BD8                          _MXK_Init 34F0  
           __size_of_Timer0_Start 0026                    ??_ADC_Sequence 0064  
                 MXK_SwitchTo@CUR 0066             __end_of_ADC_Calibrate 69CC  
                        _SPI_Init 0E46          __end_of_Event_TestButton 64B6  
                        _SPI_Send 5C42                        _ADCON0bits 000FC2  
                __size_of_ADC_Off 0008                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 0065                 ___wmul@multiplier 0060  
                       main@Speed 027B                 Byte_GetBit@Output 0064  
                       main@Steps 027D                        printf@flag 007A  
            Timer2_Init@pCPUClock 0076        __size_of_LCD_FillRectangle 0074  
            __size_of_Button_Init 00D4              __end_of_SPI_MaxSpeed 5936  
                      printf@prec 007B             Motor_Speed@pFrequency 007D  
               Byte_GetBit@pInput 0060                    main@ADCVoltage 0268  
             Port_SetPinType@pPin 0088              __size_of_Button_Poll 0166  
                      ?_eval_poly 009B                _Port_CheckQuadType 5E94  
                   _MXK_DIPSwitch 6910               ?_Port_CheckPairType 0086  
            __end_of_SPI_MinSpeed 5A1E                     ??_MXK_Dequeue 0076  
                __size_of_LED_Set 0050            __size_ofi2_Byte_SetBit 004C  
              _Port_CheckPortType 6116             Button_Poll@pIncrement 007D  
         PortProperty_Valid@F6830 FCF9              __end_ofi2_Motor_Step 429A  
                 ??i2_MXK_Release 0001                         copy_data0 4CAC  
                       copy_data1 4CEA                     ??_MXK_Release 0060  
          __end_ofi2_Byte_GetPair 6910         __size_of_Port_SetQuadType 0256  
                __size_of_SPI_DCS 002E               ?_Port_CheckQuadType 008F  
          __end_ofi2_Byte_GetZone 58C2               __end_ofi2_MXK_Queue 6A28  
             ?_Port_CheckPortType 0096                          _FunctADC 69CC  
                 itos@destination 006E                          _InitList FC37  
            _Motor_Step$intlevel0 3C0E                          _Mode_Set 69DE  
              Port_GetQuad@Output 0065                       ??_ToSegment 0060  
                    _ISR_Function 1408                         frexp@eptr 0064  
                    _Timer0_Clear 6A34                Port_GetQuad@pInput 0060  
                    _Timer2_Clear 6A76              __end_of_Word_GetPair 647A  
                        _lCBuffer 0200              ??_Port_CheckPairType 008A  
                     ??_Reset_Low 0074                          __Hrparam 0000  
                    _Timer0_Start 6760                      OutSeg@pInput 0066  
                  _Console_Render 237C                          __Lrparam 0000  
                 Timer2_Init@RDIV 0072                  ?_FunctInitButton 0001  
                  LCD_Write@value 0064                          _Port_Set 1624  
                    OutSeg@segset 0033                         rand@screw 0030  
            __end_of_Word_SetPair 627A                       ??_Port_Init 00A3  
         __end_of_HMI_SetSegments 4A7E              ??_Port_CheckQuadType 0093  
                __size_of___fladd 04A8                  __size_of___fldiv 03C0  
           __size_of_Port_GetQuad 004A                  __size_of___awdiv 00BE  
                __size_of___flneg 0038                  __size_of___flmul 04A6  
                __size_of___flsub 0048                  __size_of___fltol 010C  
                __size_of___lldiv 00BC                 _MXK_BlockSwitchTo 63C0  
                __size_of___lwdiv 0078              ??_Port_CheckPortType 0099  
                __size_of___lwmod 0062                          _lBufferX 00E8  
                        _lBufferY 00E7               Timer2_Init@PRESCALE FD20  
                 LCD_Fill@pColour 0069                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 00DE  
         __end_of_HMI_RightSwitch 6988            Byte_GetZone@pChunkSize 0064  
                  ?_MXK_DIPSwitch 0001            Byte_SetZone@pChunkSize 0064  
           __size_of_Port_SetType 022A                     reverse@length 0062  
                       itos@input 006C             i2MXK_SwitchTo@pModule 0008  
                        ___xxtofl 2986                Motor_Init@pAddress 008F  
                        _delay_ms 5B6E                          _delay_us 5F46  
                        _clearall 00E9                   ___lwdiv@divisor 0062  
                 ___lwdiv@counter 0064                   Port_GetPin@pPin 0062  
                        __ptext10 5E38                          __ptext11 6302  
                        __ptext20 3F76                          __ptext12 258C  
                        __ptext21 60CE                          __ptext13 3366  
                        __ptext30 34F0                          __ptext22 04F8  
                        __ptext14 19DE                          __ptext31 3044  
                        __ptext23 64F0                          __ptext15 3D2E  
                        __ptext40 5F98                          __ptext32 2152  
                        __ptext24 66E4                          __ptext16 3E52  
                        __ptext41 6382                          __ptext33 6116  
                        __ptext25 64B6                          __ptext17 4A7E  
                        __ptext50 3670                          __ptext42 3C08  
                        __ptext34 1624                          __ptext26 6760  
                        __ptext18 408E                          __ptext51 530E  
                        __ptext43 6A86                          __ptext35 69FE  
                        __ptext27 444A                          __ptext19 31D6  
                        __ptext60 63FE                          __ptext52 5EEE  
                        __ptext44 6A40                          __ptext36 4E98  
                        __ptext28 3948                          __ptext61 565C  
                        __ptext53 5A92                          __ptext45 62C0  
                        __ptext37 4F3E                          __ptext29 6A34  
                        __ptext70 69A0                          __ptext62 5936  
                        __ptext54 58C2                          __ptext46 68BE  
                        __ptext38 4FE4                          __ptext71 6084  
                        __ptext63 37E2                          __ptext55 5FE8  
                        __ptext47 6A0C                          __ptext39 5D74  
             ??_MXK_BlockSwitchTo 0066                          __ptext80 49C4  
                        __ptext72 665A                          __ptext64 6910  
                        __ptext56 5B6E                          __ptext48 63C0  
                        __ptext81 1C78                          __ptext73 1404  
                        __ptext65 6928                          __ptext57 680A  
                        __ptext49 5F46                          __ptext90 59AA  
                        __ptext82 53A6                          __ptext74 647A  
                        __ptext66 6940                          __ptext58 6828  
                        __ptext91 0E46                          __ptext83 615E  
                        __ptext75 670E                          __ptext67 6958  
                        __ptext59 6A62                          __ptext92 3AA8  
                        __ptext84 65FA                          __ptext76 429A  
                        __ptext68 6970                          __ptext93 4908  
                        __ptext85 46C4                          __ptext77 5B02  
                        __ptext69 6988                          __ptext94 6A76  
                        __ptext86 61EE                          __ptext78 5DD6  
                        __ptext95 6738                          __ptext87 6A6C  
                        __ptext79 57D4                          __ptext96 6688  
                        __ptext88 6A8C                          __ptext97 51D0  
                        __ptext89 278C                          __ptext98 4520  
                        __ptext99 6846                      _SSP1CON1bits 000FC6  
                __size_of_reverse 006C                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 007C                i2Byte_GetZone@MASK 0007  
               _ADC_ClockDivision 54C4                      ?_ADC_SetupIO 0001  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 0079                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
              ?_ADC_ClockDivision 0001                      ?_ADC_Voltage 0087  
             __end_of_MXK_Dequeue 63C0                 HMI_SetSegments@in 0064  
           Button_Init@pThreshold 009D                     __size_of_main 04F8  
                   __size_of_itos 00D8                 Byte_GetPair@pPair 006B  
          __end_of_Console_Render 258C               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                      _Port_GetQuad 6084  
             __end_of_MXK_Release 68DA                    _MXK_TestButton 69A0  
                   i2_Byte_SetBit 6038               ??_ADC_ClockDivision 0060  
             i2Word_GetPair@pPair 000F                    ADC_Voltage@max 008D  
                  ADC_Voltage@ref 0091         __end_of_MXK_BlockSwitchTo 63FE  
        ?_Console_IncrementCursor 0001              __size_of_Timer0_Init 0160  
            __size_of_Timer2_Init 0160                          int$flags 0050  
            __size_of_Timer0_Stop 0006                      _Port_SetType 2152  
                    Port_Set@Type 0086        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 0095  
                       printf@val 007E                      _SSP1STATbits 000FC7  
            __size_of_Motor_Speed 002A                    Timer0_Init@DIV 0104  
                  Timer0_Init@PRE 00E5                      _SSP2STATbits 000F6D  
                        exp@coeff FF03                        _LED_Toggle 615E  
                        log@coeff FF2B                        _HMI_GetBar 6A8C  
            Button_Init@pGetState 00A2            PortProperty_Valid@Pair 0085  
                ??_Port_TogglePin 0077                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2            PortProperty_Valid@pPin 0072  
                     ??_eval_poly 00A3                        _HMI_SetBar 6A6C  
                      _HMI_Render 63FE                  Byte_SetZone@MASK 006A  
                     i2_MXK_Queue 6A1A         __end_of_ADC_ClockDivision 554E  
                  Timer2_Init@DIV 0100                    Timer2_Init@PRE 00E3  
                Byte_SetZone@pMax 0062            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 00A5  
                        itos@Data 0070                LCD_FillRectangle@i 0075  
              LCD_FillRectangle@j 0076              __size_of_Port_SetPin 00C4  
                        intlevel2 0000                    main@IRDistance 0270  
                    reverse@input 0060              __end_of_ADC_Sequence 62C0  
          __size_of_HMI_DIPSwitch 0018                  ___lwmod@dividend 0067  
                ___lldiv@dividend 0060            __end_of_MXK_TestButton 69B8  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
                  _SPI_DisableISR 6738                   Port_Init@pInput 00A0  
                        printf@ap 007C            __size_ofi2_Port_SetPin 00AA  
                      _ISR_Enable 6A62                  ?_HMI_SetSegments 0061  
         Console_MakeField@Column 006C             __size_of_SPI_MaxSpeed 0074  
                ??_ADC_SetChannel 0060                     SPI_DCS@pInput 0060  
           __size_of_SPI_MinSpeed 0074                   ??_MXK_DIPSwitch 0066  
           __size_ofi2_Motor_Step 0100                 ADC_Voltage@pInput 0087  
         Console_MakeField@pInput 006B                  ?_HMI_RightSwitch 0001  
                ___lldiv@quotient 0068                     ??_GetPortPORT 0062  
                 ___lwmod@divisor 0069                     ??_GetPortTRIS 0062  
           Timer0_Start@pFunction 0060                Word_SetPair@pInput 006F  
                 ___lwmod@counter 006B                Word_SetPair@pValue 0072  
                Motor_Init@pMotor 008D                       _MXK_Dequeue 6382  
               ADC_Voltage@output 0095                    LED_Toggle@pLED 0078  
                   ___fladd@signs 0097                     _LCD_DrawField 508A  
                _Port_SetQuadType 1EFC                       _MXK_Release 68BE  
       __size_of_Console_FormFeed 008E                      _MXK_SwitchTo 62C0  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 0067  
                   ?_Console_Init 0001                 Word_SetPair@pPair 0071  
                 _Port_SetPinType 2B54                      ___fladd@aexp 0098  
                    ___fladd@bexp 0099           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 0068                Byte_GetZone@pChunk 0063  
                 ?_MXK_TestButton 0001       __end_of_Console_ResetCursor 680A  
              Byte_GetZone@pInput 0060           __size_ofi2_MXK_SwitchTo 0036  
 __end_of_Console_IncrementCursor 5D10             __size_of_Word_SetPair 0046  
          __end_of_SPI_DisableISR 6760                      _SPI_MaxSpeed 58C2  
                    _SPI_MinSpeed 59AA                Port_Set@TypeActual 0084  
