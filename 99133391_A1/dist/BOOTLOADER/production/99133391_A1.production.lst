

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Aug 11 13:30:40 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	text44,global,reloc=2,class=CODE,delta=1
    66                           	psect	text45,global,reloc=2,class=CODE,delta=1
    67                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    69                           	psect	text48,global,reloc=2,class=CODE,delta=1
    70                           	psect	text49,global,reloc=2,class=CODE,delta=1
    71                           	psect	text50,global,reloc=2,class=CODE,delta=1
    72                           	psect	text51,global,reloc=2,class=CODE,delta=1
    73                           	psect	text52,global,reloc=2,class=CODE,delta=1
    74                           	psect	text53,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text54,global,reloc=2,class=CODE,delta=1
    76                           	psect	text55,global,reloc=2,class=CODE,delta=1
    77                           	psect	text56,global,reloc=2,class=CODE,delta=1
    78                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    79                           	psect	text58,global,reloc=2,class=CODE,delta=1
    80                           	psect	text59,global,reloc=2,class=CODE,delta=1
    81                           	psect	text60,global,reloc=2,class=CODE,delta=1
    82                           	psect	text61,global,reloc=2,class=CODE,delta=1
    83                           	psect	text62,global,reloc=2,class=CODE,delta=1
    84                           	psect	text63,global,reloc=2,class=CODE,delta=1
    85                           	psect	text64,global,reloc=2,class=CODE,delta=1
    86                           	psect	text65,global,reloc=2,class=CODE,delta=1
    87                           	psect	text66,global,reloc=2,class=CODE,delta=1
    88                           	psect	text67,global,reloc=2,class=CODE,delta=1
    89                           	psect	text68,global,reloc=2,class=CODE,delta=1
    90                           	psect	text69,global,reloc=2,class=CODE,delta=1
    91                           	psect	text70,global,reloc=2,class=CODE,delta=1
    92                           	psect	text71,global,reloc=2,class=CODE,delta=1
    93                           	psect	text72,global,reloc=2,class=CODE,delta=1
    94                           	psect	text73,global,reloc=2,class=CODE,delta=1
    95                           	psect	text74,global,reloc=2,class=CODE,delta=1
    96                           	psect	text75,global,reloc=2,class=CODE,delta=1
    97                           	psect	text76,global,reloc=2,class=CODE,delta=1
    98                           	psect	text77,global,reloc=2,class=CODE,delta=1
    99                           	psect	text78,global,reloc=2,class=CODE,delta=1
   100                           	psect	text79,global,reloc=2,class=CODE,delta=1
   101                           	psect	text80,global,reloc=2,class=CODE,delta=1
   102                           	psect	text81,global,reloc=2,class=CODE,delta=1
   103                           	psect	text82,global,reloc=2,class=CODE,delta=1
   104                           	psect	text83,global,reloc=2,class=CODE,delta=1
   105                           	psect	text84,global,reloc=2,class=CODE,delta=1
   106                           	psect	text85,global,reloc=2,class=CODE,delta=1
   107                           	psect	text86,global,reloc=2,class=CODE,delta=1
   108                           	psect	text87,global,reloc=2,class=CODE,delta=1
   109                           	psect	text88,global,reloc=2,class=CODE,delta=1
   110                           	psect	text89,global,reloc=2,class=CODE,delta=1
   111                           	psect	text90,global,reloc=2,class=CODE,delta=1
   112                           	psect	text91,global,reloc=2,class=CODE,delta=1
   113                           	psect	text92,global,reloc=2,class=CODE,delta=1
   114                           	psect	text93,global,reloc=2,class=CODE,delta=1
   115                           	psect	text94,global,reloc=2,class=CODE,delta=1
   116                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text96,global,reloc=2,class=CODE,delta=1
   118                           	psect	text97,global,reloc=2,class=CODE,delta=1
   119                           	psect	text98,global,reloc=2,class=CODE,delta=1
   120                           	psect	text99,global,reloc=2,class=CODE,delta=1
   121                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text101,global,reloc=2,class=CODE,delta=1,inline
   123                           	psect	text102,global,reloc=2,class=CODE,delta=1
   124                           	psect	text103,global,reloc=2,class=CODE,delta=1
   125                           	psect	text104,global,reloc=2,class=CODE,delta=1
   126                           	psect	text105,global,reloc=2,class=CODE,delta=1
   127                           	psect	text106,global,reloc=2,class=CODE,delta=1
   128                           	psect	text107,global,reloc=2,class=CODE,delta=1
   129                           	psect	text108,global,reloc=2,class=CODE,delta=1
   130                           	psect	text109,global,reloc=2,class=CODE,delta=1
   131                           	psect	text110,global,reloc=2,class=CODE,delta=1,group=1
   132                           	psect	text111,global,reloc=2,class=CODE,delta=1
   133                           	psect	text112,global,reloc=2,class=CODE,delta=1
   134                           	psect	text113,global,reloc=2,class=CODE,delta=1
   135                           	psect	text114,global,reloc=2,class=CODE,delta=1
   136                           	psect	text115,global,reloc=2,class=CODE,delta=1
   137                           	psect	text116,global,reloc=2,class=CODE,delta=1
   138                           	psect	text117,global,reloc=2,class=CODE,delta=1
   139                           	psect	text118,global,reloc=2,class=CODE,delta=1
   140                           	psect	text119,global,reloc=2,class=CODE,delta=1
   141                           	psect	text120,global,reloc=2,class=CODE,delta=1
   142                           	psect	text121,global,reloc=2,class=CODE,delta=1
   143                           	psect	text122,global,reloc=2,class=CODE,delta=1
   144                           	psect	text123,global,reloc=2,class=CODE,delta=1
   145                           	psect	text124,global,reloc=2,class=CODE,delta=1
   146                           	psect	text125,global,reloc=2,class=CODE,delta=1
   147                           	psect	text126,global,reloc=2,class=CODE,delta=1
   148                           	psect	text127,global,reloc=2,class=CODE,delta=1
   149                           	psect	text128,global,reloc=2,class=CODE,delta=1,inline
   150                           	psect	text129,global,reloc=2,class=CODE,delta=1
   151                           	psect	text130,global,reloc=2,class=CODE,delta=1,inline
   152                           	psect	text131,global,reloc=2,class=CODE,delta=1
   153                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   154                           	psect	text133,global,reloc=2,class=CODE,delta=1
   155                           	psect	text134,global,reloc=2,class=CODE,delta=1
   156                           	psect	text135,global,reloc=2,class=CODE,delta=1
   157                           	psect	text136,global,reloc=2,class=CODE,delta=1
   158                           	psect	text137,global,reloc=2,class=CODE,delta=1
   159                           	psect	text138,global,reloc=2,class=CODE,delta=1
   160                           	psect	text139,global,reloc=2,class=CODE,delta=1
   161                           	psect	text140,global,reloc=2,class=CODE,delta=1,inline
   162                           	psect	text141,global,reloc=2,class=CODE,delta=1
   163                           	psect	text142,global,reloc=2,class=CODE,delta=1
   164                           	psect	text143,global,reloc=2,class=CODE,delta=1
   165                           	psect	text144,global,reloc=2,class=CODE,delta=1
   166                           	psect	text145,global,reloc=2,class=CODE,delta=1
   167                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   168                           	psect	text146,global,reloc=2,class=CODE,delta=1
   169                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   170                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   171  0000                     
   172                           ; Version 1.43
   173                           ; Generated 25/07/2017 GMT
   174                           ; 
   175                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   176                           ; All rights reserved.
   177                           ; 
   178                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   179                           ; 
   180                           ; Redistribution and use in source and binary forms, with or without modification, are
   181                           ; permitted provided that the following conditions are met:
   182                           ; 
   183                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   184                           ;        conditions and the following disclaimer.
   185                           ; 
   186                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   187                           ;        of conditions and the following disclaimer in the documentation and/or other
   188                           ;        materials provided with the distribution.
   189                           ; 
   190                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   191                           ;        software without specific prior written permission.
   192                           ; 
   193                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   194                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   195                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   196                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   197                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   198                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   199                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   200                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   201                           ; 
   202                           ; 
   203                           ; Code-generator required, PIC18F67J50 Definitions
   204                           ; 
   205                           ; SFR Addresses
   206  0000                     
   207                           	psect	idataCOMRAM
   208  014C07                     __pidataCOMRAM:
   209                           	opt stack 0
   210                           
   211                           ;initializer for _gCursor
   212  014C07  0006               	dw	6
   213  014C09  0006               	dw	6
   214                           
   215                           ;initializer for _Bus_State
   216  014C0B  01                 	db	1
   217                           
   218                           ;initializer for _A
   219  014C0C  41                 	db	65
   220                           
   221                           ;initializer for _a
   222  014C0D  61                 	db	97
   223                           
   224                           ;initializer for _zero
   225  014C0E  30                 	db	48
   226                           
   227                           ;initializer for _l
   228  014C0F  80                 	db	128
   229                           
   230                           ;initializer for _w
   231  014C10  80                 	db	128
   232                           
   233                           	psect	idataBANK0
   234  014BFC                     __pidataBANK0:
   235                           	opt stack 0
   236                           
   237                           ;initializer for _gCharSize
   238  014BFC  0005               	dw	5
   239  014BFE  0007               	dw	7
   240                           
   241                           ;initializer for _DIST
   242  014C00  0064               	dw	100
   243                           
   244                           ;initializer for _Hz
   245  014C02  000A               	dw	10
   246                           
   247                           ;initializer for _gForecolour
   248  014C04  FFFF               	dw	65535
   249                           
   250                           ;initializer for _change
   251  014C06  01                 	db	1
   252                           
   253                           	psect	idataBANK1
   254  014C26                     __pidataBANK1:
   255                           	opt stack 0
   256                           
   257                           ;initializer for Console_Render@F6956
   258  014C26  0006               	dw	6
   259  014C28  0006               	dw	6
   260                           
   261                           ;initializer for _gLineSize
   262  014C2A  0080               	dw	128
   263  014C2C  0007               	dw	7
   264                           
   265                           	psect	mediumconst
   266  00FC6E                     __pmediumconst:
   267                           	opt stack 0
   268  00FC6E  00                 	db	0
   269  00FC6F                     _InitList:
   270                           	opt stack 0
   271  00FC6F  1100               	dw	4352
   272  00FC71  0080               	dw	128
   273  00FC73  012C               	dw	300
   274  00FC75  B100               	dw	45312
   275  00FC77  0002               	dw	2
   276  00FC79  0035               	dw	53
   277  00FC7B  0036               	dw	54
   278  00FC7D  B200               	dw	45568
   279  00FC7F  0002               	dw	2
   280  00FC81  0035               	dw	53
   281  00FC83  0036               	dw	54
   282  00FC85  B300               	dw	45824
   283  00FC87  0002               	dw	2
   284  00FC89  0035               	dw	53
   285  00FC8B  0036               	dw	54
   286  00FC8D  0002               	dw	2
   287  00FC8F  0035               	dw	53
   288  00FC91  0036               	dw	54
   289  00FC93  B400               	dw	46080
   290  00FC95  0000               	dw	0
   291  00FC97  C000               	dw	49152
   292  00FC99  00A2               	dw	162
   293  00FC9B  0002               	dw	2
   294  00FC9D  0084               	dw	132
   295  00FC9F  C100               	dw	49408
   296  00FCA1  00C5               	dw	197
   297  00FCA3  C200               	dw	49664
   298  00FCA5  000D               	dw	13
   299  00FCA7  0000               	dw	0
   300  00FCA9  C300               	dw	49920
   301  00FCAB  008D               	dw	141
   302  00FCAD  002A               	dw	42
   303  00FCAF  C400               	dw	50176
   304  00FCB1  008D               	dw	141
   305  00FCB3  00EE               	dw	238
   306  00FCB5  C500               	dw	50432
   307  00FCB7  000A               	dw	10
   308  00FCB9  3600               	dw	13824
   309  00FCBB  00C8               	dw	200
   310  00FCBD  E000               	dw	57344
   311  00FCBF  0012               	dw	18
   312  00FCC1  001C               	dw	28
   313  00FCC3  0010               	dw	16
   314  00FCC5  0018               	dw	24
   315  00FCC7  0033               	dw	51
   316  00FCC9  002C               	dw	44
   317  00FCCB  0025               	dw	37
   318  00FCCD  0028               	dw	40
   319  00FCCF  0028               	dw	40
   320  00FCD1  0027               	dw	39
   321  00FCD3  002F               	dw	47
   322  00FCD5  003C               	dw	60
   323  00FCD7  0000               	dw	0
   324  00FCD9  0003               	dw	3
   325  00FCDB  0003               	dw	3
   326  00FCDD  0010               	dw	16
   327  00FCDF  0080               	dw	128
   328  00FCE1  0078               	dw	120
   329  00FCE3  E100               	dw	57600
   330  00FCE5  0012               	dw	18
   331  00FCE7  001C               	dw	28
   332  00FCE9  0010               	dw	16
   333  00FCEB  0018               	dw	24
   334  00FCED  002D               	dw	45
   335  00FCEF  0028               	dw	40
   336  00FCF1  0023               	dw	35
   337  00FCF3  0028               	dw	40
   338  00FCF5  0028               	dw	40
   339  00FCF7  0026               	dw	38
   340  00FCF9  002F               	dw	47
   341  00FCFB  003B               	dw	59
   342  00FCFD  0000               	dw	0
   343  00FCFF  0003               	dw	3
   344  00FD01  0003               	dw	3
   345  00FD03  0010               	dw	16
   346  00FD05  3A00               	dw	14848
   347  00FD07  0005               	dw	5
   348  00FD09  2A00               	dw	10752
   349  00FD0B  0000               	dw	0
   350  00FD0D  0002               	dw	2
   351  00FD0F  0000               	dw	0
   352  00FD11  0081               	dw	129
   353  00FD13  2B00               	dw	11008
   354  00FD15  0000               	dw	0
   355  00FD17  0003               	dw	3
   356  00FD19  0000               	dw	0
   357  00FD1B  00A2               	dw	162
   358  00FD1D  2900               	dw	10496
   359  00FD1F  2C00               	dw	11264
   360  00FD21                     __end_of_InitList:
   361                           	opt stack 0
   362  00FD21                     _dpowers:
   363                           	opt stack 0
   364  00FD21  0001               	dw	1
   365  00FD23  0000               	dw	0
   366  00FD25  000A               	dw	10
   367  00FD27  0000               	dw	0
   368  00FD29  0064               	dw	100
   369  00FD2B  0000               	dw	0
   370  00FD2D  03E8               	dw	1000
   371  00FD2F  0000               	dw	0
   372  00FD31  2710               	dw	10000
   373  00FD33  0000               	dw	0
   374  00FD35  86A0               	dw	34464
   375  00FD37  0001               	dw	1
   376  00FD39  4240               	dw	16960
   377  00FD3B  000F               	dw	15
   378  00FD3D  9680               	dw	38528
   379  00FD3F  0098               	dw	152
   380  00FD41  E100               	dw	57600
   381  00FD43  05F5               	dw	1525
   382  00FD45  CA00               	dw	51712
   383  00FD47  3B9A               	dw	15258
   384  00FD49                     __end_of_dpowers:
   385                           	opt stack 0
   386  00FD49                     Timer0_Init@PRESCALE:
   387                           	opt stack 0
   388  00FD49  0002               	dw	2
   389  00FD4B  0004               	dw	4
   390  00FD4D  0008               	dw	8
   391  00FD4F  0010               	dw	16
   392  00FD51  0020               	dw	32
   393  00FD53  0040               	dw	64
   394  00FD55  0080               	dw	128
   395  00FD57  0100               	dw	256
   396  00FD59                     __end_ofTimer0_Init@PRESCALE:
   397                           	opt stack 0
   398  00FD59                     PortProperty_Valid@F6830:
   399                           	opt stack 0
   400  00FD59  00                 	db	0
   401  00FD5A  01                 	db	1
   402  00FD5B  02                 	db	2
   403  00FD5C  00                 	db	0
   404  00FD5D  01                 	db	1
   405  00FD5E  00                 	db	0
   406  00FD5F  01                 	db	1
   407  00FD60  00                 	db	0
   408  00FD61  02                 	db	2
   409  00FD62  02                 	db	2
   410  00FD63  00                 	db	0
   411  00FD64  00                 	db	0
   412  00FD65  03                 	db	3
   413  00FD66  03                 	db	3
   414  00FD67  03                 	db	3
   415  00FD68  00                 	db	0
   416  00FD69                     __end_ofPortProperty_Valid@F6830:
   417                           	opt stack 0
   418  00FD69                     _MASKS:
   419                           	opt stack 0
   420  00FD69  00                 	db	0
   421  00FD6A  01                 	db	1
   422  00FD6B  03                 	db	3
   423  00FD6C  07                 	db	7
   424  00FD6D  0F                 	db	15
   425  00FD6E  1F                 	db	31
   426  00FD6F  3F                 	db	63
   427  00FD70  7F                 	db	127
   428  00FD71  FF                 	db	255
   429  00FD72                     __end_of_MASKS:
   430                           	opt stack 0
   431  00FD72                     HMI_SetButton@F7211:
   432                           	opt stack 0
   433  00FD72  00                 	db	0
   434  00FD73  02                 	db	2
   435  00FD74  01                 	db	1
   436  00FD75  03                 	db	3
   437  00FD76                     __end_ofHMI_SetButton@F7211:
   438                           	opt stack 0
   439  00FD76                     Timer2_Init@PRESCALE:
   440                           	opt stack 0
   441  00FD76  01                 	db	1
   442  00FD77  04                 	db	4
   443  00FD78  10                 	db	16
   444  00FD79                     __end_ofTimer2_Init@PRESCALE:
   445                           	opt stack 0
   446  00FD79                     _HzInc:
   447                           	opt stack 0
   448  00FD79  000A               	dw	10
   449  00FD7B                     __end_of_HzInc:
   450                           	opt stack 0
   451  00FD7B                     _Font5x7:
   452                           	opt stack 0
   453  00FD7B  00                 	db	0
   454  00FD7C  00                 	db	0
   455  00FD7D  00                 	db	0
   456  00FD7E  00                 	db	0
   457  00FD7F  00                 	db	0
   458  00FD80  00                 	db	0
   459  00FD81  00                 	db	0
   460  00FD82  5F                 	db	95
   461  00FD83  00                 	db	0
   462  00FD84  00                 	db	0
   463  00FD85  00                 	db	0
   464  00FD86  07                 	db	7
   465  00FD87  00                 	db	0
   466  00FD88  07                 	db	7
   467  00FD89  00                 	db	0
   468  00FD8A  14                 	db	20
   469  00FD8B  7F                 	db	127
   470  00FD8C  14                 	db	20
   471  00FD8D  7F                 	db	127
   472  00FD8E  14                 	db	20
   473  00FD8F  24                 	db	36
   474  00FD90  2A                 	db	42
   475  00FD91  7F                 	db	127
   476  00FD92  2A                 	db	42
   477  00FD93  12                 	db	18
   478  00FD94  23                 	db	35
   479  00FD95  13                 	db	19
   480  00FD96  08                 	db	8
   481  00FD97  64                 	db	100
   482  00FD98  62                 	db	98
   483  00FD99  36                 	db	54
   484  00FD9A  49                 	db	73
   485  00FD9B  55                 	db	85
   486  00FD9C  22                 	db	34
   487  00FD9D  50                 	db	80
   488  00FD9E  00                 	db	0
   489  00FD9F  05                 	db	5
   490  00FDA0  03                 	db	3
   491  00FDA1  00                 	db	0
   492  00FDA2  00                 	db	0
   493  00FDA3  00                 	db	0
   494  00FDA4  1C                 	db	28
   495  00FDA5  22                 	db	34
   496  00FDA6  41                 	db	65
   497  00FDA7  00                 	db	0
   498  00FDA8  00                 	db	0
   499  00FDA9  41                 	db	65
   500  00FDAA  22                 	db	34
   501  00FDAB  1C                 	db	28
   502  00FDAC  00                 	db	0
   503  00FDAD  08                 	db	8
   504  00FDAE  2A                 	db	42
   505  00FDAF  1C                 	db	28
   506  00FDB0  2A                 	db	42
   507  00FDB1  08                 	db	8
   508  00FDB2  08                 	db	8
   509  00FDB3  08                 	db	8
   510  00FDB4  3E                 	db	62
   511  00FDB5  08                 	db	8
   512  00FDB6  08                 	db	8
   513  00FDB7  00                 	db	0
   514  00FDB8  50                 	db	80
   515  00FDB9  30                 	db	48
   516  00FDBA  00                 	db	0
   517  00FDBB  00                 	db	0
   518  00FDBC  08                 	db	8
   519  00FDBD  08                 	db	8
   520  00FDBE  08                 	db	8
   521  00FDBF  08                 	db	8
   522  00FDC0  08                 	db	8
   523  00FDC1  00                 	db	0
   524  00FDC2  60                 	db	96
   525  00FDC3  60                 	db	96
   526  00FDC4  00                 	db	0
   527  00FDC5  00                 	db	0
   528  00FDC6  20                 	db	32
   529  00FDC7  10                 	db	16
   530  00FDC8  08                 	db	8
   531  00FDC9  04                 	db	4
   532  00FDCA  02                 	db	2
   533  00FDCB  3E                 	db	62
   534  00FDCC  51                 	db	81
   535  00FDCD  49                 	db	73
   536  00FDCE  45                 	db	69
   537  00FDCF  3E                 	db	62
   538  00FDD0  00                 	db	0
   539  00FDD1  42                 	db	66
   540  00FDD2  7F                 	db	127
   541  00FDD3  40                 	db	64
   542  00FDD4  00                 	db	0
   543  00FDD5  42                 	db	66
   544  00FDD6  61                 	db	97
   545  00FDD7  51                 	db	81
   546  00FDD8  49                 	db	73
   547  00FDD9  46                 	db	70
   548  00FDDA  21                 	db	33
   549  00FDDB  41                 	db	65
   550  00FDDC  45                 	db	69
   551  00FDDD  4B                 	db	75
   552  00FDDE  31                 	db	49
   553  00FDDF  18                 	db	24
   554  00FDE0  14                 	db	20
   555  00FDE1  12                 	db	18
   556  00FDE2  7F                 	db	127
   557  00FDE3  10                 	db	16
   558  00FDE4  27                 	db	39
   559  00FDE5  45                 	db	69
   560  00FDE6  45                 	db	69
   561  00FDE7  45                 	db	69
   562  00FDE8  39                 	db	57
   563  00FDE9  3C                 	db	60
   564  00FDEA  4A                 	db	74
   565  00FDEB  49                 	db	73
   566  00FDEC  49                 	db	73
   567  00FDED  30                 	db	48
   568  00FDEE  01                 	db	1
   569  00FDEF  71                 	db	113
   570  00FDF0  09                 	db	9
   571  00FDF1  05                 	db	5
   572  00FDF2  03                 	db	3
   573  00FDF3  36                 	db	54
   574  00FDF4  49                 	db	73
   575  00FDF5  49                 	db	73
   576  00FDF6  49                 	db	73
   577  00FDF7  36                 	db	54
   578  00FDF8  06                 	db	6
   579  00FDF9  49                 	db	73
   580  00FDFA  49                 	db	73
   581  00FDFB  29                 	db	41
   582  00FDFC  1E                 	db	30
   583  00FDFD  00                 	db	0
   584  00FDFE  36                 	db	54
   585  00FDFF  36                 	db	54
   586  00FE00  00                 	db	0
   587  00FE01  00                 	db	0
   588  00FE02  00                 	db	0
   589  00FE03  56                 	db	86
   590  00FE04  36                 	db	54
   591  00FE05  00                 	db	0
   592  00FE06  00                 	db	0
   593  00FE07  00                 	db	0
   594  00FE08  08                 	db	8
   595  00FE09  14                 	db	20
   596  00FE0A  22                 	db	34
   597  00FE0B  41                 	db	65
   598  00FE0C  14                 	db	20
   599  00FE0D  14                 	db	20
   600  00FE0E  14                 	db	20
   601  00FE0F  14                 	db	20
   602  00FE10  14                 	db	20
   603  00FE11  41                 	db	65
   604  00FE12  22                 	db	34
   605  00FE13  14                 	db	20
   606  00FE14  08                 	db	8
   607  00FE15  00                 	db	0
   608  00FE16  02                 	db	2
   609  00FE17  01                 	db	1
   610  00FE18  51                 	db	81
   611  00FE19  09                 	db	9
   612  00FE1A  06                 	db	6
   613  00FE1B  32                 	db	50
   614  00FE1C  49                 	db	73
   615  00FE1D  79                 	db	121
   616  00FE1E  41                 	db	65
   617  00FE1F  3E                 	db	62
   618  00FE20  7E                 	db	126
   619  00FE21  11                 	db	17
   620  00FE22  11                 	db	17
   621  00FE23  11                 	db	17
   622  00FE24  7E                 	db	126
   623  00FE25  7F                 	db	127
   624  00FE26  49                 	db	73
   625  00FE27  49                 	db	73
   626  00FE28  49                 	db	73
   627  00FE29  36                 	db	54
   628  00FE2A  3E                 	db	62
   629  00FE2B  41                 	db	65
   630  00FE2C  41                 	db	65
   631  00FE2D  41                 	db	65
   632  00FE2E  22                 	db	34
   633  00FE2F  7F                 	db	127
   634  00FE30  41                 	db	65
   635  00FE31  41                 	db	65
   636  00FE32  22                 	db	34
   637  00FE33  1C                 	db	28
   638  00FE34  7F                 	db	127
   639  00FE35  49                 	db	73
   640  00FE36  49                 	db	73
   641  00FE37  49                 	db	73
   642  00FE38  41                 	db	65
   643  00FE39  7F                 	db	127
   644  00FE3A  09                 	db	9
   645  00FE3B  09                 	db	9
   646  00FE3C  01                 	db	1
   647  00FE3D  01                 	db	1
   648  00FE3E  3E                 	db	62
   649  00FE3F  41                 	db	65
   650  00FE40  41                 	db	65
   651  00FE41  51                 	db	81
   652  00FE42  32                 	db	50
   653  00FE43  7F                 	db	127
   654  00FE44  08                 	db	8
   655  00FE45  08                 	db	8
   656  00FE46  08                 	db	8
   657  00FE47  7F                 	db	127
   658  00FE48  00                 	db	0
   659  00FE49  41                 	db	65
   660  00FE4A  7F                 	db	127
   661  00FE4B  41                 	db	65
   662  00FE4C  00                 	db	0
   663  00FE4D  20                 	db	32
   664  00FE4E  40                 	db	64
   665  00FE4F  41                 	db	65
   666  00FE50  3F                 	db	63
   667  00FE51  01                 	db	1
   668  00FE52  7F                 	db	127
   669  00FE53  08                 	db	8
   670  00FE54  14                 	db	20
   671  00FE55  22                 	db	34
   672  00FE56  41                 	db	65
   673  00FE57  7F                 	db	127
   674  00FE58  40                 	db	64
   675  00FE59  40                 	db	64
   676  00FE5A  40                 	db	64
   677  00FE5B  40                 	db	64
   678  00FE5C  7F                 	db	127
   679  00FE5D  02                 	db	2
   680  00FE5E  04                 	db	4
   681  00FE5F  02                 	db	2
   682  00FE60  7F                 	db	127
   683  00FE61  7F                 	db	127
   684  00FE62  04                 	db	4
   685  00FE63  08                 	db	8
   686  00FE64  10                 	db	16
   687  00FE65  7F                 	db	127
   688  00FE66  3E                 	db	62
   689  00FE67  41                 	db	65
   690  00FE68  41                 	db	65
   691  00FE69  41                 	db	65
   692  00FE6A  3E                 	db	62
   693  00FE6B  7F                 	db	127
   694  00FE6C  09                 	db	9
   695  00FE6D  09                 	db	9
   696  00FE6E  09                 	db	9
   697  00FE6F  06                 	db	6
   698  00FE70  3E                 	db	62
   699  00FE71  41                 	db	65
   700  00FE72  51                 	db	81
   701  00FE73  21                 	db	33
   702  00FE74  5E                 	db	94
   703  00FE75  7F                 	db	127
   704  00FE76  09                 	db	9
   705  00FE77  19                 	db	25
   706  00FE78  29                 	db	41
   707  00FE79  46                 	db	70
   708  00FE7A  46                 	db	70
   709  00FE7B  49                 	db	73
   710  00FE7C  49                 	db	73
   711  00FE7D  49                 	db	73
   712  00FE7E  31                 	db	49
   713  00FE7F  01                 	db	1
   714  00FE80  01                 	db	1
   715  00FE81  7F                 	db	127
   716  00FE82  01                 	db	1
   717  00FE83  01                 	db	1
   718  00FE84  3F                 	db	63
   719  00FE85  40                 	db	64
   720  00FE86  40                 	db	64
   721  00FE87  40                 	db	64
   722  00FE88  3F                 	db	63
   723  00FE89  1F                 	db	31
   724  00FE8A  20                 	db	32
   725  00FE8B  40                 	db	64
   726  00FE8C  20                 	db	32
   727  00FE8D  1F                 	db	31
   728  00FE8E  7F                 	db	127
   729  00FE8F  20                 	db	32
   730  00FE90  18                 	db	24
   731  00FE91  20                 	db	32
   732  00FE92  7F                 	db	127
   733  00FE93  63                 	db	99
   734  00FE94  14                 	db	20
   735  00FE95  08                 	db	8
   736  00FE96  14                 	db	20
   737  00FE97  63                 	db	99
   738  00FE98  03                 	db	3
   739  00FE99  04                 	db	4
   740  00FE9A  78                 	db	120
   741  00FE9B  04                 	db	4
   742  00FE9C  03                 	db	3
   743  00FE9D  61                 	db	97
   744  00FE9E  51                 	db	81
   745  00FE9F  49                 	db	73
   746  00FEA0  45                 	db	69
   747  00FEA1  43                 	db	67
   748  00FEA2  00                 	db	0
   749  00FEA3  00                 	db	0
   750  00FEA4  7F                 	db	127
   751  00FEA5  41                 	db	65
   752  00FEA6  41                 	db	65
   753  00FEA7  02                 	db	2
   754  00FEA8  04                 	db	4
   755  00FEA9  08                 	db	8
   756  00FEAA  10                 	db	16
   757  00FEAB  20                 	db	32
   758  00FEAC  41                 	db	65
   759  00FEAD  41                 	db	65
   760  00FEAE  7F                 	db	127
   761  00FEAF  00                 	db	0
   762  00FEB0  00                 	db	0
   763  00FEB1  04                 	db	4
   764  00FEB2  02                 	db	2
   765  00FEB3  01                 	db	1
   766  00FEB4  02                 	db	2
   767  00FEB5  04                 	db	4
   768  00FEB6  40                 	db	64
   769  00FEB7  40                 	db	64
   770  00FEB8  40                 	db	64
   771  00FEB9  40                 	db	64
   772  00FEBA  40                 	db	64
   773  00FEBB  00                 	db	0
   774  00FEBC  01                 	db	1
   775  00FEBD  02                 	db	2
   776  00FEBE  04                 	db	4
   777  00FEBF  00                 	db	0
   778  00FEC0  20                 	db	32
   779  00FEC1  54                 	db	84
   780  00FEC2  54                 	db	84
   781  00FEC3  54                 	db	84
   782  00FEC4  78                 	db	120
   783  00FEC5  7F                 	db	127
   784  00FEC6  48                 	db	72
   785  00FEC7  44                 	db	68
   786  00FEC8  44                 	db	68
   787  00FEC9  38                 	db	56
   788  00FECA  38                 	db	56
   789  00FECB  44                 	db	68
   790  00FECC  44                 	db	68
   791  00FECD  44                 	db	68
   792  00FECE  20                 	db	32
   793  00FECF  38                 	db	56
   794  00FED0  44                 	db	68
   795  00FED1  44                 	db	68
   796  00FED2  48                 	db	72
   797  00FED3  7F                 	db	127
   798  00FED4  38                 	db	56
   799  00FED5  54                 	db	84
   800  00FED6  54                 	db	84
   801  00FED7  54                 	db	84
   802  00FED8  18                 	db	24
   803  00FED9  08                 	db	8
   804  00FEDA  7E                 	db	126
   805  00FEDB  09                 	db	9
   806  00FEDC  01                 	db	1
   807  00FEDD  02                 	db	2
   808  00FEDE  08                 	db	8
   809  00FEDF  14                 	db	20
   810  00FEE0  54                 	db	84
   811  00FEE1  54                 	db	84
   812  00FEE2  3C                 	db	60
   813  00FEE3  7F                 	db	127
   814  00FEE4  08                 	db	8
   815  00FEE5  04                 	db	4
   816  00FEE6  04                 	db	4
   817  00FEE7  78                 	db	120
   818  00FEE8  00                 	db	0
   819  00FEE9  44                 	db	68
   820  00FEEA  7D                 	db	125
   821  00FEEB  40                 	db	64
   822  00FEEC  00                 	db	0
   823  00FEED  20                 	db	32
   824  00FEEE  40                 	db	64
   825  00FEEF  44                 	db	68
   826  00FEF0  3D                 	db	61
   827  00FEF1  00                 	db	0
   828  00FEF2  00                 	db	0
   829  00FEF3  7F                 	db	127
   830  00FEF4  10                 	db	16
   831  00FEF5  28                 	db	40
   832  00FEF6  44                 	db	68
   833  00FEF7  00                 	db	0
   834  00FEF8  41                 	db	65
   835  00FEF9  7F                 	db	127
   836  00FEFA  40                 	db	64
   837  00FEFB  00                 	db	0
   838  00FEFC  7C                 	db	124
   839  00FEFD  04                 	db	4
   840  00FEFE  18                 	db	24
   841  00FEFF  04                 	db	4
   842  00FF00  78                 	db	120
   843  00FF01  7C                 	db	124
   844  00FF02  08                 	db	8
   845  00FF03  04                 	db	4
   846  00FF04  04                 	db	4
   847  00FF05  78                 	db	120
   848  00FF06  38                 	db	56
   849  00FF07  44                 	db	68
   850  00FF08  44                 	db	68
   851  00FF09  44                 	db	68
   852  00FF0A  38                 	db	56
   853  00FF0B  7C                 	db	124
   854  00FF0C  14                 	db	20
   855  00FF0D  14                 	db	20
   856  00FF0E  14                 	db	20
   857  00FF0F  08                 	db	8
   858  00FF10  08                 	db	8
   859  00FF11  14                 	db	20
   860  00FF12  14                 	db	20
   861  00FF13  18                 	db	24
   862  00FF14  7C                 	db	124
   863  00FF15  7C                 	db	124
   864  00FF16  08                 	db	8
   865  00FF17  04                 	db	4
   866  00FF18  04                 	db	4
   867  00FF19  08                 	db	8
   868  00FF1A  48                 	db	72
   869  00FF1B  54                 	db	84
   870  00FF1C  54                 	db	84
   871  00FF1D  54                 	db	84
   872  00FF1E  20                 	db	32
   873  00FF1F  04                 	db	4
   874  00FF20  3F                 	db	63
   875  00FF21  44                 	db	68
   876  00FF22  40                 	db	64
   877  00FF23  20                 	db	32
   878  00FF24  3C                 	db	60
   879  00FF25  40                 	db	64
   880  00FF26  40                 	db	64
   881  00FF27  20                 	db	32
   882  00FF28  7C                 	db	124
   883  00FF29  1C                 	db	28
   884  00FF2A  20                 	db	32
   885  00FF2B  40                 	db	64
   886  00FF2C  20                 	db	32
   887  00FF2D  1C                 	db	28
   888  00FF2E  3C                 	db	60
   889  00FF2F  40                 	db	64
   890  00FF30  30                 	db	48
   891  00FF31  40                 	db	64
   892  00FF32  3C                 	db	60
   893  00FF33  44                 	db	68
   894  00FF34  28                 	db	40
   895  00FF35  10                 	db	16
   896  00FF36  28                 	db	40
   897  00FF37  44                 	db	68
   898  00FF38  0C                 	db	12
   899  00FF39  50                 	db	80
   900  00FF3A  50                 	db	80
   901  00FF3B  50                 	db	80
   902  00FF3C  3C                 	db	60
   903  00FF3D  44                 	db	68
   904  00FF3E  64                 	db	100
   905  00FF3F  54                 	db	84
   906  00FF40  4C                 	db	76
   907  00FF41  44                 	db	68
   908  00FF42  00                 	db	0
   909  00FF43  08                 	db	8
   910  00FF44  36                 	db	54
   911  00FF45  41                 	db	65
   912  00FF46  00                 	db	0
   913  00FF47  00                 	db	0
   914  00FF48  00                 	db	0
   915  00FF49  7F                 	db	127
   916  00FF4A  00                 	db	0
   917  00FF4B  00                 	db	0
   918  00FF4C  00                 	db	0
   919  00FF4D  41                 	db	65
   920  00FF4E  36                 	db	54
   921  00FF4F  08                 	db	8
   922  00FF50  00                 	db	0
   923  00FF51  08                 	db	8
   924  00FF52  08                 	db	8
   925  00FF53  2A                 	db	42
   926  00FF54  1C                 	db	28
   927  00FF55  08                 	db	8
   928  00FF56  08                 	db	8
   929  00FF57  1C                 	db	28
   930  00FF58  2A                 	db	42
   931  00FF59  08                 	db	8
   932  00FF5A  08                 	db	8
   933  00FF5B                     __end_of_Font5x7:
   934                           	opt stack 0
   935  00FF5B                     _PortG_Property:
   936                           	opt stack 0
   937  00FF5B  FC00               	dw	64512
   938  00FF5D                     __end_of_PortG_Property:
   939                           	opt stack 0
   940  00FF5D                     _PortF_Property:
   941                           	opt stack 0
   942  00FF5D  0FFF               	dw	4095
   943  00FF5F                     __end_of_PortF_Property:
   944                           	opt stack 0
   945  00FF5F                     _PortE_Property:
   946                           	opt stack 0
   947  00FF5F  0000               	dw	0
   948  00FF61                     __end_of_PortE_Property:
   949                           	opt stack 0
   950  00FF61                     _PortD_Property:
   951                           	opt stack 0
   952  00FF61  FFFF               	dw	65535
   953  00FF63                     __end_of_PortD_Property:
   954                           	opt stack 0
   955  00FF63                     _PortC_Property:
   956                           	opt stack 0
   957  00FF63  FFF0               	dw	65520
   958  00FF65                     __end_of_PortC_Property:
   959                           	opt stack 0
   960  00FF65                     _PortB_Property:
   961                           	opt stack 0
   962  00FF65  FF00               	dw	65280
   963  00FF67                     __end_of_PortB_Property:
   964                           	opt stack 0
   965  00FF67                     _PortA_Property:
   966                           	opt stack 0
   967  00FF67  00FF               	dw	255
   968  00FF69                     __end_of_PortA_Property:
   969                           	opt stack 0
   970  0000                     _TMR0	set	4054
   971  0000                     _PR2	set	4043
   972  0000                     _T2CONbits	set	4042
   973  0000                     _T0CONbits	set	4053
   974  0000                     _RCONbits	set	4048
   975  0000                     _OSCTUNEbits	set	3995
   976  0000                     _PIR3	set	4004
   977  0000                     _PIR2	set	4001
   978  0000                     _PIR1	set	3998
   979  0000                     _INTCONbits	set	4082
   980  0000                     _SSP2CON2bits	set	3947
   981  0000                     _SSP1CON2bits	set	4037
   982  0000                     _SSP1ADD	set	4040
   983  0000                     _ANCON0	set	4033
   984  0000                     _ADRESL	set	4035
   985  0000                     _ADRESH	set	4036
   986  0000                     _ADCON1bits	set	4033
   987  0000                     _ADCON0bits	set	4034
   988  0000                     _SSP2CON1bits	set	3948
   989  0000                     _SSP1CON1bits	set	4038
   990  0000                     _SSP2STATbits	set	3949
   991  0000                     _SSP1STATbits	set	4039
   992  0000                     _PIE3bits	set	4003
   993  0000                     _PIE1bits	set	3997
   994  0000                     _PIR3bits	set	4004
   995  0000                     _PIR1bits	set	3998
   996  0000                     _IPR3bits	set	4005
   997  0000                     _IPR1bits	set	3999
   998  0000                     _PORTFbits	set	3973
   999  0000                     _SSP2CON2	set	3947
  1000  0000                     _SSP1CON2	set	4037
  1001  0000                     _SSP2BUF	set	3951
  1002  0000                     _SSP2CON1	set	3948
  1003  0000                     _SSP2STAT	set	3949
  1004  0000                     _SSP1BUF	set	4041
  1005  0000                     _SSP1CON1	set	4038
  1006  0000                     _SSP1STAT	set	4039
  1007  0000                     _LATG	set	3983
  1008  0000                     _LATF	set	3982
  1009  0000                     _LATE	set	3981
  1010  0000                     _LATD	set	3980
  1011  0000                     _LATC	set	3979
  1012  0000                     _LATB	set	3978
  1013  0000                     _LATA	set	3977
  1014  0000                     _TRISG	set	3992
  1015  0000                     _TRISF	set	3991
  1016  0000                     _TRISE	set	3990
  1017  0000                     _TRISD	set	3989
  1018  0000                     _TRISC	set	3988
  1019  0000                     _TRISB	set	3987
  1020  0000                     _TRISA	set	3986
  1021  0000                     _PORTG	set	3974
  1022  0000                     _PORTF	set	3973
  1023  0000                     _PORTE	set	3972
  1024  0000                     _PORTD	set	3971
  1025  0000                     _PORTC	set	3970
  1026  0000                     _PORTB	set	3969
  1027  0000                     _PORTA	set	3968
  1028  00FF69                     STR_11:
  1029  00FF69  20                 	db	32
  1030  00FF6A  20                 	db	32
  1031  00FF6B  20                 	db	32
  1032  00FF6C  20                 	db	32
  1033  00FF6D  20                 	db	32
  1034  00FF6E  20                 	db	32
  1035  00FF6F  20                 	db	32
  1036  00FF70  20                 	db	32
  1037  00FF71  20                 	db	32
  1038  00FF72  20                 	db	32
  1039  00FF73  20                 	db	32
  1040  00FF74  20                 	db	32
  1041  00FF75  20                 	db	32
  1042  00FF76  20                 	db	32
  1043  00FF77  20                 	db	32
  1044  00FF78  20                 	db	32
  1045  00FF79  20                 	db	32
  1046  00FF7A  20                 	db	32
  1047  00FF7B  20                 	db	32
  1048  00FF7C  20                 	db	32
  1049  00FF7D  20                 	db	32
  1050  00FF7E  20                 	db	32
  1051  00FF7F  0A                 	db	10
  1052  00FF80  00                 	db	0
  1053  00FF81                     STR_1:
  1054  00FF81  4A                 	db	74	;'J'
  1055  00FF82  61                 	db	97	;'a'
  1056  00FF83  6D                 	db	109	;'m'
  1057  00FF84  69                 	db	105	;'i'
  1058  00FF85  6E                 	db	110	;'n'
  1059  00FF86  20                 	db	32
  1060  00FF87  45                 	db	69	;'E'
  1061  00FF88  61                 	db	97	;'a'
  1062  00FF89  72                 	db	114	;'r'
  1063  00FF8A  6C                 	db	108	;'l'
  1064  00FF8B  79                 	db	121	;'y'
  1065  00FF8C  20                 	db	32
  1066  00FF8D  39                 	db	57	;'9'
  1067  00FF8E  39                 	db	57	;'9'
  1068  00FF8F  31                 	db	49	;'1'
  1069  00FF90  33                 	db	51	;'3'
  1070  00FF91  33                 	db	51	;'3'
  1071  00FF92  33                 	db	51	;'3'
  1072  00FF93  39                 	db	57	;'9'
  1073  00FF94  31                 	db	49	;'1'
  1074  00FF95  0A                 	db	10
  1075  00FF96  00                 	db	0
  1076  00FF97                     STR_3:
  1077  00FF97  43                 	db	67	;'C'
  1078  00FF98  75                 	db	117	;'u'
  1079  00FF99  72                 	db	114	;'r'
  1080  00FF9A  72                 	db	114	;'r'
  1081  00FF9B  65                 	db	101	;'e'
  1082  00FF9C  6E                 	db	110	;'n'
  1083  00FF9D  74                 	db	116	;'t'
  1084  00FF9E  20                 	db	32
  1085  00FF9F  4D                 	db	77	;'M'
  1086  00FFA0  6F                 	db	111	;'o'
  1087  00FFA1  64                 	db	100	;'d'
  1088  00FFA2  65                 	db	101	;'e'
  1089  00FFA3  3A                 	db	58	;':'
  1090  00FFA4  0A                 	db	10
  1091  00FFA5  00                 	db	0
  1092  00FFA6                     STR_9:
  1093  00FFA6  44                 	db	68	;'D'
  1094  00FFA7  69                 	db	105	;'i'
  1095  00FFA8  72                 	db	114	;'r'
  1096  00FFA9  65                 	db	101	;'e'
  1097  00FFAA  63                 	db	99	;'c'
  1098  00FFAB  74                 	db	116	;'t'
  1099  00FFAC  69                 	db	105	;'i'
  1100  00FFAD  6F                 	db	111	;'o'
  1101  00FFAE  6E                 	db	110	;'n'
  1102  00FFAF  3A                 	db	58	;':'
  1103  00FFB0  20                 	db	32
  1104  00FFB1  25                 	db	37
  1105  00FFB2  64                 	db	100	;'d'
  1106  00FFB3  0A                 	db	10
  1107  00FFB4  00                 	db	0
  1108  00FFB5                     STR_6:
  1109  00FFB5  20                 	db	32
  1110  00FFB6  43                 	db	67	;'C'
  1111  00FFB7  6F                 	db	111	;'o'
  1112  00FFB8  6E                 	db	110	;'n'
  1113  00FFB9  74                 	db	116	;'t'
  1114  00FFBA  69                 	db	105	;'i'
  1115  00FFBB  6E                 	db	110	;'n'
  1116  00FFBC  75                 	db	117	;'u'
  1117  00FFBD  6F                 	db	111	;'o'
  1118  00FFBE  75                 	db	117	;'u'
  1119  00FFBF  73                 	db	115	;'s'
  1120  00FFC0  0A                 	db	10
  1121  00FFC1  0A                 	db	10
  1122  00FFC2  00                 	db	0
  1123  00FFC3                     STR_7:
  1124  00FFC3  20                 	db	32
  1125  00FFC4  55                 	db	85	;'U'
  1126  00FFC5  6E                 	db	110	;'n'
  1127  00FFC6  64                 	db	100	;'d'
  1128  00FFC7  65                 	db	101	;'e'
  1129  00FFC8  66                 	db	102	;'f'
  1130  00FFC9  69                 	db	105	;'i'
  1131  00FFCA  6E                 	db	110	;'n'
  1132  00FFCB  65                 	db	101	;'e'
  1133  00FFCC  64                 	db	100	;'d'
  1134  00FFCD  0A                 	db	10
  1135  00FFCE  0A                 	db	10
  1136  00FFCF  00                 	db	0
  1137  00FFD0                     STR_10:
  1138  00FFD0  6D                 	db	109	;'m'
  1139  00FFD1  44                 	db	68	;'D'
  1140  00FFD2  65                 	db	101	;'e'
  1141  00FFD3  6C                 	db	108	;'l'
  1142  00FFD4  74                 	db	116	;'t'
  1143  00FFD5  61                 	db	97	;'a'
  1144  00FFD6  3A                 	db	58	;':'
  1145  00FFD7  20                 	db	32
  1146  00FFD8  25                 	db	37
  1147  00FFD9  6C                 	db	108	;'l'
  1148  00FFDA  64                 	db	100	;'d'
  1149  00FFDB  0A                 	db	10
  1150  00FFDC  00                 	db	0
  1151  00FFDD                     STR_4:
  1152  00FFDD  20                 	db	32
  1153  00FFDE  50                 	db	80	;'P'
  1154  00FFDF  6F                 	db	111	;'o'
  1155  00FFE0  73                 	db	115	;'s'
  1156  00FFE1  69                 	db	105	;'i'
  1157  00FFE2  74                 	db	116	;'t'
  1158  00FFE3  69                 	db	105	;'i'
  1159  00FFE4  6F                 	db	111	;'o'
  1160  00FFE5  6E                 	db	110	;'n'
  1161  00FFE6  0A                 	db	10
  1162  00FFE7  0A                 	db	10
  1163  00FFE8  00                 	db	0
  1164  00FFE9                     STR_8:
  1165  00FFE9  53                 	db	83	;'S'
  1166  00FFEA  70                 	db	112	;'p'
  1167  00FFEB  65                 	db	101	;'e'
  1168  00FFEC  65                 	db	101	;'e'
  1169  00FFED  64                 	db	100	;'d'
  1170  00FFEE  3A                 	db	58	;':'
  1171  00FFEF  20                 	db	32
  1172  00FFF0  25                 	db	37
  1173  00FFF1  64                 	db	100	;'d'
  1174  00FFF2  0A                 	db	10
  1175  00FFF3  00                 	db	0
  1176  00FFF4                     STR_5:
  1177  00FFF4  20                 	db	32
  1178  00FFF5  53                 	db	83	;'S'
  1179  00FFF6  74                 	db	116	;'t'
  1180  00FFF7  65                 	db	101	;'e'
  1181  00FFF8  70                 	db	112	;'p'
  1182  00FFF9  0A                 	db	10
  1183  00FFFA  0A                 	db	10
  1184  00FFFB  00                 	db	0
  1185  00FFFC                     STR_2:
  1186  00FFFC  25                 	db	37
  1187  00FFFD  63                 	db	99	;'c'
  1188  00FFFE  00                 	db	0
  1189  0000                     
  1190                           ; #config settings
  1191  00FFFF  00                 	db	0	; dummy byte at the end
  1192  0000                     
  1193                           	psect	cinit
  1194  012E08                     __pcinit:
  1195                           	opt stack 0
  1196  012E08                     start_initialization:
  1197                           	opt stack 0
  1198  012E08                     __initialization:
  1199                           	opt stack 0
  1200                           
  1201                           ; Initialize objects allocated to BANK1 (8 bytes)
  1202                           ; load TBLPTR registers with __pidataBANK1
  1203  012E08  0E26               	movlw	low __pidataBANK1
  1204  012E0A  6EF6               	movwf	tblptrl,c
  1205  012E0C  0E4C               	movlw	high __pidataBANK1
  1206  012E0E  6EF7               	movwf	tblptrh,c
  1207  012E10  0E01               	movlw	low (__pidataBANK1 shr (0+16))
  1208  012E12  6EF8               	movwf	tblptru,c
  1209  012E14  EE01  F0CF         	lfsr	0,__pdataBANK1
  1210  012E18  EE10 F008          	lfsr	1,8
  1211  012E1C                     copy_data0:
  1212  012E1C  0009               	tblrd		*+
  1213  012E1E  CFF5 FFEE          	movff	tablat,postinc0
  1214  012E22  50E5               	movf	postdec1,w,c
  1215  012E24  50E1               	movf	fsr1l,w,c
  1216  012E26  E1FA               	bnz	copy_data0
  1217                           
  1218                           ; Initialize objects allocated to BANK0 (11 bytes)
  1219                           ; load TBLPTR registers with __pidataBANK0
  1220  012E28  0EFC               	movlw	low __pidataBANK0
  1221  012E2A  6EF6               	movwf	tblptrl,c
  1222  012E2C  0E4B               	movlw	high __pidataBANK0
  1223  012E2E  6EF7               	movwf	tblptrh,c
  1224  012E30  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1225  012E32  6EF8               	movwf	tblptru,c
  1226  012E34  EE00  F0F5         	lfsr	0,__pdataBANK0
  1227  012E38  EE10 F00B          	lfsr	1,11
  1228  012E3C                     copy_data1:
  1229  012E3C  0009               	tblrd		*+
  1230  012E3E  CFF5 FFEE          	movff	tablat,postinc0
  1231  012E42  50E5               	movf	postdec1,w,c
  1232  012E44  50E1               	movf	fsr1l,w,c
  1233  012E46  E1FA               	bnz	copy_data1
  1234                           
  1235                           ; Initialize objects allocated to COMRAM (10 bytes)
  1236                           ; load TBLPTR registers with __pidataCOMRAM
  1237  012E48  0E07               	movlw	low __pidataCOMRAM
  1238  012E4A  6EF6               	movwf	tblptrl,c
  1239  012E4C  0E4C               	movlw	high __pidataCOMRAM
  1240  012E4E  6EF7               	movwf	tblptrh,c
  1241  012E50  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1242  012E52  6EF8               	movwf	tblptru,c
  1243  012E54  EE00  F047         	lfsr	0,__pdataCOMRAM
  1244  012E58  EE10 F00A          	lfsr	1,10
  1245  012E5C                     copy_data2:
  1246  012E5C  0009               	tblrd		*+
  1247  012E5E  CFF5 FFEE          	movff	tablat,postinc0
  1248  012E62  50E5               	movf	postdec1,w,c
  1249  012E64  50E1               	movf	fsr1l,w,c
  1250  012E66  E1FA               	bnz	copy_data2
  1251                           
  1252                           ; Clear objects allocated to BIGRAM (300 bytes)
  1253  012E68  EE02  F046         	lfsr	0,__pbssBIGRAM
  1254  012E6C  EE11 F02C          	lfsr	1,300
  1255  012E70                     clear_0:
  1256  012E70  6AEE               	clrf	postinc0,c
  1257  012E72  50E5               	movf	postdec1,w,c
  1258  012E74  50E1               	movf	fsr1l,w,c
  1259  012E76  E1FC               	bnz	clear_0
  1260  012E78  50E2               	movf	fsr1h,w,c
  1261  012E7A  E1FA               	bnz	clear_0
  1262                           
  1263                           ; Clear objects allocated to BANK2 (70 bytes)
  1264  012E7C  EE02  F000         	lfsr	0,__pbssBANK2
  1265  012E80  0E46               	movlw	70
  1266  012E82                     clear_1:
  1267  012E82  6AEE               	clrf	postinc0,c
  1268  012E84  06E8               	decf	wreg,f,c
  1269  012E86  E1FD               	bnz	clear_1
  1270                           
  1271                           ; Clear objects allocated to BANK1 (194 bytes)
  1272  012E88  EE01  F000         	lfsr	0,__pbssBANK1
  1273  012E8C  0EC2               	movlw	194
  1274  012E8E                     clear_2:
  1275  012E8E  6AEE               	clrf	postinc0,c
  1276  012E90  06E8               	decf	wreg,f,c
  1277  012E92  E1FD               	bnz	clear_2
  1278                           
  1279                           ; Clear objects allocated to BANK0 (88 bytes)
  1280  012E94  EE00  F060         	lfsr	0,__pbssBANK0
  1281  012E98  0E58               	movlw	88
  1282  012E9A                     clear_3:
  1283  012E9A  6AEE               	clrf	postinc0,c
  1284  012E9C  06E8               	decf	wreg,f,c
  1285  012E9E  E1FD               	bnz	clear_3
  1286                           
  1287                           ; Clear objects allocated to COMRAM (30 bytes)
  1288  012EA0  EE00  F029         	lfsr	0,__pbssCOMRAM
  1289  012EA4  0E1E               	movlw	30
  1290  012EA6                     clear_4:
  1291  012EA6  6AEE               	clrf	postinc0,c
  1292  012EA8  06E8               	decf	wreg,f,c
  1293  012EAA  E1FD               	bnz	clear_4
  1294  012EAC                     end_of_initialization:
  1295                           	opt stack 0
  1296  012EAC                     __end_of__initialization:
  1297                           	opt stack 0
  1298  012EAC  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1299  012EAE  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1300  012EB0  0100               	movlb	0
  1301  012EB2  EFBB  F0A2         	goto	_main	;jump to C main() function
  1302                           tblptru	equ	0xFF8
  1303                           tblptrh	equ	0xFF7
  1304                           tblptrl	equ	0xFF6
  1305                           tablat	equ	0xFF5
  1306                           postinc0	equ	0xFEE
  1307                           wreg	equ	0xFE8
  1308                           postdec1	equ	0xFE5
  1309                           fsr1h	equ	0xFE2
  1310                           fsr1l	equ	0xFE1
  1311                           
  1312                           	psect	bssCOMRAM
  1313  000029                     __pbssCOMRAM:
  1314                           	opt stack 0
  1315  000029                     _gISR:
  1316                           	opt stack 0
  1317  000029                     	ds	3
  1318  00002C                     _lStepFunction:
  1319                           	opt stack 0
  1320  00002C                     	ds	3
  1321  00002F                     _HzOld:
  1322                           	opt stack 0
  1323  00002F                     	ds	2
  1324  000031                     _COUNTER:
  1325                           	opt stack 0
  1326  000031                     	ds	2
  1327  000033                     HMI_GRender@a:
  1328                           	opt stack 0
  1329  000033                     	ds	2
  1330  000035                     SPI_Send9@dat:
  1331                           	opt stack 0
  1332  000035                     	ds	2
  1333  000037                     _k:
  1334                           	opt stack 0
  1335  000037                     	ds	1
  1336  000038                     _u:
  1337                           	opt stack 0
  1338  000038                     	ds	1
  1339  000039                     _j:
  1340                           	opt stack 0
  1341  000039                     	ds	1
  1342  00003A                     _i:
  1343                           	opt stack 0
  1344  00003A                     	ds	1
  1345  00003B                     rand@screw:
  1346                           	opt stack 0
  1347  00003B                     	ds	1
  1348  00003C                     _ADC_Initialised:
  1349                           	opt stack 0
  1350  00003C                     	ds	1
  1351  00003D                     OutSeg@a:
  1352                           	opt stack 0
  1353  00003D                     	ds	1
  1354  00003E                     OutSeg@segset:
  1355                           	opt stack 0
  1356  00003E                     	ds	1
  1357  00003F                     OutSeg@cur:
  1358                           	opt stack 0
  1359  00003F                     	ds	1
  1360  000040                     _I2C1T:
  1361                           	opt stack 0
  1362  000040                     	ds	7
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           postdec1	equ	0xFE5
  1370                           fsr1h	equ	0xFE2
  1371                           fsr1l	equ	0xFE1
  1372                           
  1373                           	psect	dataCOMRAM
  1374  000047                     __pdataCOMRAM:
  1375                           	opt stack 0
  1376  000047                     _gCursor:
  1377                           	opt stack 0
  1378  000047                     	ds	4
  1379  00004B                     _Bus_State:
  1380                           	opt stack 0
  1381  00004B                     	ds	1
  1382  00004C                     	ds	1
  1383  00004D                     	ds	1
  1384  00004E                     	ds	1
  1385  00004F                     _l:
  1386                           	opt stack 0
  1387  00004F                     	ds	1
  1388  000050                     _w:
  1389                           	opt stack 0
  1390  000050                     	ds	1
  1391                           tblptru	equ	0xFF8
  1392                           tblptrh	equ	0xFF7
  1393                           tblptrl	equ	0xFF6
  1394                           tablat	equ	0xFF5
  1395                           postinc0	equ	0xFEE
  1396                           wreg	equ	0xFE8
  1397                           postdec1	equ	0xFE5
  1398                           fsr1h	equ	0xFE2
  1399                           fsr1l	equ	0xFE1
  1400                           
  1401                           	psect	bssBANK0
  1402  000060                     __pbssBANK0:
  1403                           	opt stack 0
  1404  000060                     Timer2_Init@DIV:
  1405                           	opt stack 0
  1406  000060                     	ds	4
  1407  000064                     Timer0_Init@DIV:
  1408                           	opt stack 0
  1409  000064                     	ds	4
  1410  000068                     _lQueue:
  1411                           	opt stack 0
  1412  000068                     	ds	3
  1413  00006B                     _pShiftVal:
  1414                           	opt stack 0
  1415  00006B                     	ds	2
  1416  00006D                     _val:
  1417                           	opt stack 0
  1418  00006D                     	ds	2
  1419  00006F                     _lMotor:
  1420                           	opt stack 0
  1421  00006F                     	ds	2
  1422  000071                     _lCurrent:
  1423                           	opt stack 0
  1424  000071                     	ds	2
  1425  000073                     _gBackcolour:
  1426                           	opt stack 0
  1427  000073                     	ds	2
  1428  000075                     Event_TestButton@j:
  1429                           	opt stack 0
  1430  000075                     	ds	1
  1431  000076                     Timer2_Init@PRE:
  1432                           	opt stack 0
  1433  000076                     	ds	1
  1434  000077                     Timer2_Init@INDEX:
  1435                           	opt stack 0
  1436  000077                     	ds	1
  1437  000078                     Timer0_Init@PRE:
  1438                           	opt stack 0
  1439  000078                     	ds	1
  1440  000079                     _INDEX:
  1441                           	opt stack 0
  1442  000079                     	ds	1
  1443  00007A                     _lBufferY:
  1444                           	opt stack 0
  1445  00007A                     	ds	1
  1446  00007B                     _lBufferX:
  1447                           	opt stack 0
  1448  00007B                     	ds	1
  1449  00007C                     _clearall:
  1450                           	opt stack 0
  1451  00007C                     	ds	1
  1452  00007D                     _PortE:
  1453                           	opt stack 0
  1454  00007D                     	ds	10
  1455  000087                     _PortD:
  1456                           	opt stack 0
  1457  000087                     	ds	10
  1458  000091                     _PortC:
  1459                           	opt stack 0
  1460  000091                     	ds	10
  1461  00009B                     _Stepper:
  1462                           	opt stack 0
  1463  00009B                     	ds	6
  1464  0000A1                     _ADC_AN2:
  1465                           	opt stack 0
  1466  0000A1                     	ds	5
  1467  0000A6                     _ADC_AN1:
  1468                           	opt stack 0
  1469  0000A6                     	ds	5
  1470  0000AB                     _ADC_AN0:
  1471                           	opt stack 0
  1472  0000AB                     	ds	5
  1473  0000B0                     LCD_DrawRectangle@p4:
  1474                           	opt stack 0
  1475  0000B0                     	ds	4
  1476  0000B4                     LCD_DrawRectangle@p2:
  1477                           	opt stack 0
  1478  0000B4                     	ds	4
  1479                           tblptru	equ	0xFF8
  1480                           tblptrh	equ	0xFF7
  1481                           tblptrl	equ	0xFF6
  1482                           tablat	equ	0xFF5
  1483                           postinc0	equ	0xFEE
  1484                           wreg	equ	0xFE8
  1485                           postdec1	equ	0xFE5
  1486                           fsr1h	equ	0xFE2
  1487                           fsr1l	equ	0xFE1
  1488                           
  1489                           	psect	dataBANK0
  1490  0000F5                     __pdataBANK0:
  1491                           	opt stack 0
  1492  0000F5                     _gCharSize:
  1493                           	opt stack 0
  1494  0000F5                     	ds	4
  1495  0000F9                     _DIST:
  1496                           	opt stack 0
  1497  0000F9                     	ds	2
  1498  0000FB                     _Hz:
  1499                           	opt stack 0
  1500  0000FB                     	ds	2
  1501  0000FD                     _gForecolour:
  1502                           	opt stack 0
  1503  0000FD                     	ds	2
  1504  0000FF                     _change:
  1505                           	opt stack 0
  1506  0000FF                     	ds	1
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           postdec1	equ	0xFE5
  1514                           fsr1h	equ	0xFE2
  1515                           fsr1l	equ	0xFE1
  1516                           
  1517                           	psect	bssBANK1
  1518  000100                     __pbssBANK1:
  1519                           	opt stack 0
  1520  000100                     _lCBuffer:
  1521                           	opt stack 0
  1522  000100                     	ds	30
  1523  00011E                     _I2C2_More:
  1524                           	opt stack 0
  1525  00011E                     	ds	3
  1526  000121                     _I2C1_More:
  1527                           	opt stack 0
  1528  000121                     	ds	3
  1529  000124                     _I2C2_Done:
  1530                           	opt stack 0
  1531  000124                     	ds	3
  1532  000127                     _I2C1_Done:
  1533                           	opt stack 0
  1534  000127                     	ds	3
  1535  00012A                     _HMIBoard:
  1536                           	opt stack 0
  1537  00012A                     	ds	58
  1538  000164                     _SPI1:
  1539                           	opt stack 0
  1540  000164                     	ds	11
  1541  00016F                     _SPI2:
  1542                           	opt stack 0
  1543  00016F                     	ds	11
  1544  00017A                     _DIPSwitch:
  1545                           	opt stack 0
  1546  00017A                     	ds	10
  1547  000184                     _TestButton:
  1548                           	opt stack 0
  1549  000184                     	ds	10
  1550  00018E                     _PortG:
  1551                           	opt stack 0
  1552  00018E                     	ds	10
  1553  000198                     _PortB:
  1554                           	opt stack 0
  1555  000198                     	ds	10
  1556  0001A2                     _PortA:
  1557                           	opt stack 0
  1558  0001A2                     	ds	10
  1559  0001AC                     _PortF:
  1560                           	opt stack 0
  1561  0001AC                     	ds	10
  1562  0001B6                     _I2C2T:
  1563                           	opt stack 0
  1564  0001B6                     	ds	7
  1565  0001BD                     _ADC_AN3:
  1566                           	opt stack 0
  1567  0001BD                     	ds	5
  1568                           tblptru	equ	0xFF8
  1569                           tblptrh	equ	0xFF7
  1570                           tblptrl	equ	0xFF6
  1571                           tablat	equ	0xFF5
  1572                           postinc0	equ	0xFEE
  1573                           wreg	equ	0xFE8
  1574                           postdec1	equ	0xFE5
  1575                           fsr1h	equ	0xFE2
  1576                           fsr1l	equ	0xFE1
  1577                           
  1578                           	psect	dataBANK1
  1579  0001CF                     __pdataBANK1:
  1580                           	opt stack 0
  1581  0001CF                     Console_Render@F6956:
  1582                           	opt stack 0
  1583  0001CF                     	ds	4
  1584  0001D3                     _gLineSize:
  1585                           	opt stack 0
  1586  0001D3                     	ds	4
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           postdec1	equ	0xFE5
  1594                           fsr1h	equ	0xFE2
  1595                           fsr1l	equ	0xFE1
  1596                           
  1597                           	psect	bssBANK2
  1598  000200                     __pbssBANK2:
  1599                           	opt stack 0
  1600  000200                     Console_MakeField@Fill:
  1601                           	opt stack 0
  1602  000200                     	ds	70
  1603                           tblptru	equ	0xFF8
  1604                           tblptrh	equ	0xFF7
  1605                           tblptrl	equ	0xFF6
  1606                           tablat	equ	0xFF5
  1607                           postinc0	equ	0xFEE
  1608                           wreg	equ	0xFE8
  1609                           postdec1	equ	0xFE5
  1610                           fsr1h	equ	0xFE2
  1611                           fsr1l	equ	0xFE1
  1612                           
  1613                           	psect	bssBIGRAM
  1614  000246                     __pbssBIGRAM:
  1615                           	opt stack 0
  1616  000246                     _lBuffer:
  1617                           	opt stack 0
  1618  000246                     	ds	300
  1619                           tblptru	equ	0xFF8
  1620                           tblptrh	equ	0xFF7
  1621                           tblptrl	equ	0xFF6
  1622                           tablat	equ	0xFF5
  1623                           postinc0	equ	0xFEE
  1624                           wreg	equ	0xFE8
  1625                           postdec1	equ	0xFE5
  1626                           fsr1h	equ	0xFE2
  1627                           fsr1l	equ	0xFE1
  1628                           
  1629                           	psect	cstackBANK1
  1630  0001C2                     __pcstackBANK1:
  1631                           	opt stack 0
  1632  0001C2                     ??_Port_SetType:
  1633  0001C2                     Button_Init@pInput:
  1634                           	opt stack 0
  1635  0001C2                     setMode@mode:
  1636                           	opt stack 0
  1637                           
  1638                           ; 2 bytes @ 0x0
  1639  0001C2                     	ds	2
  1640  0001C4                     Port_SetType@Output:
  1641                           	opt stack 0
  1642  0001C4                     Button_Init@pThreshold:
  1643                           	opt stack 0
  1644                           
  1645                           ; 2 bytes @ 0x2
  1646  0001C4                     	ds	1
  1647  0001C5                     Port_Init@pInput:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0x3
  1651  0001C5                     	ds	1
  1652  0001C6                     Button_Init@pInitIO:
  1653                           	opt stack 0
  1654                           
  1655                           ; 3 bytes @ 0x4
  1656  0001C6                     	ds	1
  1657  0001C7                     Port_Init@pPort:
  1658                           	opt stack 0
  1659                           
  1660                           ; 1 bytes @ 0x5
  1661  0001C7                     	ds	1
  1662  0001C8                     ??_Port_Init:
  1663                           
  1664                           ; 1 bytes @ 0x6
  1665  0001C8                     	ds	1
  1666  0001C9                     Button_Init@pGetState:
  1667                           	opt stack 0
  1668                           
  1669                           ; 3 bytes @ 0x7
  1670  0001C9                     	ds	1
  1671  0001CA                     Port_Init@i:
  1672                           	opt stack 0
  1673                           
  1674                           ; 1 bytes @ 0x8
  1675  0001CA                     	ds	2
  1676  0001CC                     Button_Init@pFunction:
  1677                           	opt stack 0
  1678                           
  1679                           ; 3 bytes @ 0xA
  1680  0001CC                     	ds	3
  1681                           tblptru	equ	0xFF8
  1682                           tblptrh	equ	0xFF7
  1683                           tblptrl	equ	0xFF6
  1684                           tablat	equ	0xFF5
  1685                           postinc0	equ	0xFEE
  1686                           wreg	equ	0xFE8
  1687                           postdec1	equ	0xFE5
  1688                           fsr1h	equ	0xFE2
  1689                           fsr1l	equ	0xFE1
  1690                           
  1691                           	psect	cstackBANK0
  1692  0000B8                     __pcstackBANK0:
  1693                           	opt stack 0
  1694  0000B8                     ??_Console_ClearCursor:
  1695  0000B8                     ??_Console_Init:
  1696  0000B8                     ??_Console_NewLine:
  1697  0000B8                     ??_Console_FormFeed:
  1698  0000B8                     ??_HMI_SetButton:
  1699  0000B8                     ?_GetPortProperties:
  1700                           	opt stack 0
  1701  0000B8                     ?_GetPortPORT:
  1702                           	opt stack 0
  1703  0000B8                     ?_GetPortTRIS:
  1704                           	opt stack 0
  1705  0000B8                     ?___wmul:
  1706                           	opt stack 0
  1707  0000B8                     ?___awdiv:
  1708                           	opt stack 0
  1709  0000B8                     ?___lwdiv:
  1710                           	opt stack 0
  1711  0000B8                     ?___lwmod:
  1712                           	opt stack 0
  1713  0000B8                     ?___lldiv:
  1714                           	opt stack 0
  1715  0000B8                     Mode_Set@pMode:
  1716                           	opt stack 0
  1717  0000B8                     ToSegment@pCHR:
  1718                           	opt stack 0
  1719  0000B8                     HMI_SetLeft@pValue:
  1720                           	opt stack 0
  1721  0000B8                     HMI_SetRight@pValue:
  1722                           	opt stack 0
  1723  0000B8                     HMI_SetUp@pValue:
  1724                           	opt stack 0
  1725  0000B8                     HMI_SetDown@pValue:
  1726                           	opt stack 0
  1727  0000B8                     HMI_SetBar@pValue:
  1728                           	opt stack 0
  1729  0000B8                     Port_GetPin@pInput:
  1730                           	opt stack 0
  1731  0000B8                     Port_GetQuad@pInput:
  1732                           	opt stack 0
  1733  0000B8                     SPI_DisableISR@pInput:
  1734                           	opt stack 0
  1735  0000B8                     SPI_DCS@pInput:
  1736                           	opt stack 0
  1737  0000B8                     SPI_Send@pInput:
  1738                           	opt stack 0
  1739  0000B8                     Byte_SetBit@pInput:
  1740                           	opt stack 0
  1741  0000B8                     Byte_GetBit@pInput:
  1742                           	opt stack 0
  1743  0000B8                     Byte_SetZone@pInput:
  1744                           	opt stack 0
  1745  0000B8                     Byte_GetZone@pInput:
  1746                           	opt stack 0
  1747  0000B8                     Byte_SetByte@pInput:
  1748                           	opt stack 0
  1749  0000B8                     delay_ms@ms:
  1750                           	opt stack 0
  1751  0000B8                     delay_us@us:
  1752                           	opt stack 0
  1753  0000B8                     reverse@input:
  1754                           	opt stack 0
  1755  0000B8                     Console_SetForecolour@pColour:
  1756                           	opt stack 0
  1757  0000B8                     ___wmul@multiplier:
  1758                           	opt stack 0
  1759  0000B8                     ___awdiv@dividend:
  1760                           	opt stack 0
  1761  0000B8                     ___lwdiv@dividend:
  1762                           	opt stack 0
  1763  0000B8                     ___lwmod@dividend:
  1764                           	opt stack 0
  1765  0000B8                     MXK_Queue@pCallback:
  1766                           	opt stack 0
  1767  0000B8                     Timer0_Start@pFunction:
  1768                           	opt stack 0
  1769  0000B8                     ___lldiv@dividend:
  1770                           	opt stack 0
  1771                           
  1772                           ; 4 bytes @ 0x0
  1773  0000B8                     	ds	1
  1774  0000B9                     HMI_SetSegments@pString:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0x1
  1778  0000B9                     	ds	1
  1779  0000BA                     GetPortProperties@pInput:
  1780                           	opt stack 0
  1781  0000BA                     GetPortPORT@pInput:
  1782                           	opt stack 0
  1783  0000BA                     GetPortTRIS@pInput:
  1784                           	opt stack 0
  1785  0000BA                     Port_GetPin@pPin:
  1786                           	opt stack 0
  1787  0000BA                     Port_GetQuad@pQuad:
  1788                           	opt stack 0
  1789  0000BA                     SPI_Send@pData:
  1790                           	opt stack 0
  1791  0000BA                     Byte_SetBit@pBit:
  1792                           	opt stack 0
  1793  0000BA                     Byte_GetBit@pBit:
  1794                           	opt stack 0
  1795  0000BA                     Byte_SetZone@pMax:
  1796                           	opt stack 0
  1797  0000BA                     Byte_GetZone@pMax:
  1798                           	opt stack 0
  1799  0000BA                     Byte_SetByte@pValue:
  1800                           	opt stack 0
  1801  0000BA                     Console_Init@x:
  1802                           	opt stack 0
  1803  0000BA                     Console_FormFeed@x:
  1804                           	opt stack 0
  1805  0000BA                     reverse@length:
  1806                           	opt stack 0
  1807  0000BA                     ___wmul@multiplicand:
  1808                           	opt stack 0
  1809  0000BA                     ___awdiv@divisor:
  1810                           	opt stack 0
  1811  0000BA                     ___lwdiv@divisor:
  1812                           	opt stack 0
  1813  0000BA                     ___lwmod@divisor:
  1814                           	opt stack 0
  1815  0000BA                     delay_ms@u:
  1816                           	opt stack 0
  1817  0000BA                     delay_us@u:
  1818                           	opt stack 0
  1819  0000BA                     HMI_SetButton@reindex:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0x2
  1823  0000BA                     	ds	1
  1824  0000BB                     ??_Port_GetPin:
  1825  0000BB                     ??_Port_GetQuad:
  1826  0000BB                     ??_Byte_GetBit:
  1827  0000BB                     LCD_Write@mode:
  1828                           	opt stack 0
  1829  0000BB                     Byte_SetBit@pValue:
  1830                           	opt stack 0
  1831  0000BB                     Byte_SetZone@pChunk:
  1832                           	opt stack 0
  1833  0000BB                     Byte_GetZone@pChunk:
  1834                           	opt stack 0
  1835  0000BB                     Console_Init@y:
  1836                           	opt stack 0
  1837  0000BB                     Console_FormFeed@y:
  1838                           	opt stack 0
  1839  0000BB                     Motor_Move@pMotor:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x3
  1843  0000BB                     	ds	1
  1844  0000BC                     ??_Byte_SetBit:
  1845  0000BC                     ??_Console_IncrementCursor:
  1846  0000BC                     LCD_Write@value:
  1847                           	opt stack 0
  1848  0000BC                     Byte_GetBit@Output:
  1849                           	opt stack 0
  1850  0000BC                     Byte_SetZone@pChunkSize:
  1851                           	opt stack 0
  1852  0000BC                     Byte_GetZone@pChunkSize:
  1853                           	opt stack 0
  1854  0000BC                     reverse@tempVar:
  1855                           	opt stack 0
  1856  0000BC                     ___awdiv@counter:
  1857                           	opt stack 0
  1858  0000BC                     ___lwdiv@counter:
  1859                           	opt stack 0
  1860  0000BC                     ___lwmod@counter:
  1861                           	opt stack 0
  1862  0000BC                     HMI_SetSegments@in:
  1863                           	opt stack 0
  1864  0000BC                     ___wmul@product:
  1865                           	opt stack 0
  1866  0000BC                     ___lldiv@divisor:
  1867                           	opt stack 0
  1868                           
  1869                           ; 4 bytes @ 0x4
  1870  0000BC                     	ds	1
  1871  0000BD                     ??_Byte_GetZone:
  1872  0000BD                     ?_Console_MakeField:
  1873                           	opt stack 0
  1874  0000BD                     Set_Addr_Window@ys:
  1875                           	opt stack 0
  1876  0000BD                     Set_Rotation@m:
  1877                           	opt stack 0
  1878  0000BD                     Port_GetPin@Output:
  1879                           	opt stack 0
  1880  0000BD                     Port_GetQuad@Output:
  1881                           	opt stack 0
  1882  0000BD                     Byte_SetZone@pValue:
  1883                           	opt stack 0
  1884  0000BD                     ___awdiv@sign:
  1885                           	opt stack 0
  1886  0000BD                     LCD_Word_Write@value:
  1887                           	opt stack 0
  1888  0000BD                     reverse@iterator:
  1889                           	opt stack 0
  1890  0000BD                     Motor_Move@pDelta:
  1891                           	opt stack 0
  1892  0000BD                     ___lwdiv@quotient:
  1893                           	opt stack 0
  1894                           
  1895                           ; 2 bytes @ 0x5
  1896  0000BD                     	ds	1
  1897  0000BE                     ??_Byte_SetZone:
  1898  0000BE                     Set_Addr_Window@xe:
  1899                           	opt stack 0
  1900  0000BE                     Set_Rotation@rotation:
  1901                           	opt stack 0
  1902  0000BE                     Byte_GetZone@MASK:
  1903                           	opt stack 0
  1904  0000BE                     HMI_SetButton@pValue:
  1905                           	opt stack 0
  1906  0000BE                     MXK_BlockSwitchTo@CUR:
  1907                           	opt stack 0
  1908  0000BE                     MXK_SwitchTo@CUR:
  1909                           	opt stack 0
  1910  0000BE                     ___awdiv@quotient:
  1911                           	opt stack 0
  1912                           
  1913                           ; 2 bytes @ 0x6
  1914  0000BE                     	ds	1
  1915  0000BF                     ??_Console_MakeField:
  1916  0000BF                     Set_Addr_Window@ye:
  1917                           	opt stack 0
  1918  0000BF                     Byte_GetZone@Offset:
  1919                           	opt stack 0
  1920  0000BF                     HMI_SetButton@v:
  1921                           	opt stack 0
  1922  0000BF                     MXK_BlockSwitchTo@pModule:
  1923                           	opt stack 0
  1924  0000BF                     MXK_SwitchTo@pModule:
  1925                           	opt stack 0
  1926  0000BF                     itos@input:
  1927                           	opt stack 0
  1928                           
  1929                           ; 2 bytes @ 0x7
  1930  0000BF                     	ds	1
  1931  0000C0                     ??_Console_Tab:
  1932  0000C0                     Set_Addr_Window@xs:
  1933                           	opt stack 0
  1934  0000C0                     Byte_GetZone@Output:
  1935                           	opt stack 0
  1936  0000C0                     ___lldiv@quotient:
  1937                           	opt stack 0
  1938                           
  1939                           ; 4 bytes @ 0x8
  1940  0000C0                     	ds	1
  1941  0000C1                     Byte_SetZone@Offset:
  1942                           	opt stack 0
  1943  0000C1                     LCD_Fill@pColour:
  1944                           	opt stack 0
  1945  0000C1                     LCD_FillRectangle@pColour:
  1946                           	opt stack 0
  1947  0000C1                     Byte_GetPair@pInput:
  1948                           	opt stack 0
  1949  0000C1                     itos@destination:
  1950                           	opt stack 0
  1951  0000C1                     Console_MakeField@Index:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0x9
  1955  0000C1                     	ds	1
  1956  0000C2                     Byte_SetZone@MASK:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0xA
  1960  0000C2                     	ds	1
  1961  0000C3                     LCD_Fill@i:
  1962                           	opt stack 0
  1963  0000C3                     Byte_GetPair@pPair:
  1964                           	opt stack 0
  1965  0000C3                     Console_MakeField@pInput:
  1966                           	opt stack 0
  1967  0000C3                     Byte_SetPair@pInput:
  1968                           	opt stack 0
  1969  0000C3                     Byte_SetQuad@pInput:
  1970                           	opt stack 0
  1971  0000C3                     itos@Data:
  1972                           	opt stack 0
  1973  0000C3                     LCD_FillRectangle@pPoint:
  1974                           	opt stack 0
  1975                           
  1976                           ; 4 bytes @ 0xB
  1977  0000C3                     	ds	1
  1978  0000C4                     LCD_Fill@j:
  1979                           	opt stack 0
  1980  0000C4                     ___lldiv@counter:
  1981                           	opt stack 0
  1982  0000C4                     Word_GetPair@pInput:
  1983                           	opt stack 0
  1984  0000C4                     Console_MakeField@Column:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0xC
  1988  0000C4                     	ds	1
  1989  0000C5                     ?___llmod:
  1990                           	opt stack 0
  1991  0000C5                     Byte_SetPair@pPair:
  1992                           	opt stack 0
  1993  0000C5                     Byte_SetQuad@pQuad:
  1994                           	opt stack 0
  1995  0000C5                     Console_Tab@t:
  1996                           	opt stack 0
  1997  0000C5                     itos@Length:
  1998                           	opt stack 0
  1999  0000C5                     Timer0_Init@pFrequency:
  2000                           	opt stack 0
  2001  0000C5                     Timer2_Init@pFrequency:
  2002                           	opt stack 0
  2003  0000C5                     ___llmod@dividend:
  2004                           	opt stack 0
  2005                           
  2006                           ; 4 bytes @ 0xD
  2007  0000C5                     	ds	1
  2008  0000C6                     Byte_SetPair@pValue:
  2009                           	opt stack 0
  2010  0000C6                     Byte_SetQuad@pValue:
  2011                           	opt stack 0
  2012  0000C6                     Word_GetPair@pPair:
  2013                           	opt stack 0
  2014  0000C6                     Console_Tab@i:
  2015                           	opt stack 0
  2016  0000C6                     _Console_MakeField$10974:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0xE
  2020  0000C6                     	ds	1
  2021  0000C7                     Console_Tab@c:
  2022                           	opt stack 0
  2023  0000C7                     Port_SetPin@pInput:
  2024                           	opt stack 0
  2025  0000C7                     Port_Set@pInput:
  2026                           	opt stack 0
  2027  0000C7                     SPI_MinSpeed@pInput:
  2028                           	opt stack 0
  2029  0000C7                     SPI_MaxSpeed@pInput:
  2030                           	opt stack 0
  2031  0000C7                     Word_SetPair@pInput:
  2032                           	opt stack 0
  2033  0000C7                     PortProperty_Valid@pInput:
  2034                           	opt stack 0
  2035  0000C7                     itos@Out:
  2036                           	opt stack 0
  2037  0000C7                     LCD_FillRectangle@pSize:
  2038                           	opt stack 0
  2039                           
  2040                           ; 4 bytes @ 0xF
  2041  0000C7                     	ds	1
  2042  0000C8                     ??_Console_PrintChar:
  2043  0000C8                     Console_MakeField@x:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x10
  2047  0000C8                     	ds	1
  2048  0000C9                     ??_Timer2_Init:
  2049  0000C9                     ??_Timer0_Init:
  2050  0000C9                     Port_SetPin@pPin:
  2051                           	opt stack 0
  2052  0000C9                     Port_Set@pValue:
  2053                           	opt stack 0
  2054  0000C9                     Word_SetPair@pPair:
  2055                           	opt stack 0
  2056  0000C9                     PortProperty_Valid@pPinDrive:
  2057                           	opt stack 0
  2058  0000C9                     Console_MakeField@y:
  2059                           	opt stack 0
  2060  0000C9                     HMI_SetNumber@pInput:
  2061                           	opt stack 0
  2062  0000C9                     ___llmod@divisor:
  2063                           	opt stack 0
  2064                           
  2065                           ; 4 bytes @ 0x11
  2066  0000C9                     	ds	1
  2067  0000CA                     ??_Port_Set:
  2068  0000CA                     Port_SetPin@pValue:
  2069                           	opt stack 0
  2070  0000CA                     Word_SetPair@pValue:
  2071                           	opt stack 0
  2072  0000CA                     PortProperty_Valid@pPin:
  2073                           	opt stack 0
  2074  0000CA                     LCD_DrawField@pField:
  2075                           	opt stack 0
  2076  0000CA                     Timer2_Init@RDIV:
  2077                           	opt stack 0
  2078                           
  2079                           ; 4 bytes @ 0x12
  2080  0000CA                     	ds	1
  2081  0000CB                     ??_PortProperty_Valid:
  2082  0000CB                     ??_LCD_FillRectangle:
  2083  0000CB                     Port_SetPin@Type:
  2084                           	opt stack 0
  2085  0000CB                     Console_PrintChar@pInput:
  2086                           	opt stack 0
  2087  0000CB                     Timer0_Init@pCPUClock:
  2088                           	opt stack 0
  2089                           
  2090                           ; 4 bytes @ 0x13
  2091  0000CB                     	ds	1
  2092  0000CC                     LED_Set@pValue:
  2093                           	opt stack 0
  2094  0000CC                     putch@c:
  2095                           	opt stack 0
  2096  0000CC                     Port_TogglePin@pInput:
  2097                           	opt stack 0
  2098  0000CC                     LCD_DrawField@pPoint:
  2099                           	opt stack 0
  2100                           
  2101                           ; 4 bytes @ 0x14
  2102  0000CC                     	ds	1
  2103  0000CD                     LCD_FillRectangle@i:
  2104                           	opt stack 0
  2105  0000CD                     LED_Set@pLED:
  2106                           	opt stack 0
  2107  0000CD                     ___llmod@counter:
  2108                           	opt stack 0
  2109  0000CD                     PortProperty_Valid@Errors:
  2110                           	opt stack 0
  2111                           
  2112                           ; 16 bytes @ 0x15
  2113  0000CD                     	ds	1
  2114  0000CE                     ?_printf:
  2115                           	opt stack 0
  2116  0000CE                     LCD_FillRectangle@j:
  2117                           	opt stack 0
  2118  0000CE                     Port_TogglePin@pPin:
  2119                           	opt stack 0
  2120  0000CE                     printf@f:
  2121                           	opt stack 0
  2122  0000CE                     Timer2_Init@pCPUClock:
  2123                           	opt stack 0
  2124                           
  2125                           ; 4 bytes @ 0x16
  2126  0000CE                     	ds	1
  2127  0000CF                     Port_TogglePin@Value:
  2128                           	opt stack 0
  2129  0000CF                     Timer0_Init@DIVIDE:
  2130                           	opt stack 0
  2131                           
  2132                           ; 4 bytes @ 0x17
  2133  0000CF                     	ds	1
  2134  0000D0                     LED_Toggle@pLED:
  2135                           	opt stack 0
  2136  0000D0                     LCD_DrawField@pSize:
  2137                           	opt stack 0
  2138                           
  2139                           ; 4 bytes @ 0x18
  2140  0000D0                     	ds	1
  2141  0000D1                     Event_DIPSwitch@pState:
  2142                           	opt stack 0
  2143  0000D1                     Event_HMI_DIPSwitch@pState:
  2144                           	opt stack 0
  2145  0000D1                     Event_TestButton@pState:
  2146                           	opt stack 0
  2147  0000D1                     Event_HMI_LeftButton@pState:
  2148                           	opt stack 0
  2149  0000D1                     Event_HMI_RightButton@pState:
  2150                           	opt stack 0
  2151  0000D1                     Event_HMI_UpButton@pState:
  2152                           	opt stack 0
  2153  0000D1                     Event_HMI_DownButton@pState:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x19
  2157  0000D1                     	ds	1
  2158  0000D2                     Event_DIPSwitch@Bar:
  2159                           	opt stack 0
  2160  0000D2                     Event_HMI_DIPSwitch@Bar:
  2161                           	opt stack 0
  2162  0000D2                     Timer2_Init@DIVIDE:
  2163                           	opt stack 0
  2164                           
  2165                           ; 4 bytes @ 0x1A
  2166  0000D2                     	ds	1
  2167  0000D3                     Button_Poll@pButton:
  2168                           	opt stack 0
  2169  0000D3                     Motor_Speed@pMotor:
  2170                           	opt stack 0
  2171                           
  2172                           ; 2 bytes @ 0x1B
  2173  0000D3                     	ds	1
  2174  0000D4                     ??_printf:
  2175  0000D4                     ??_LCD_DrawField:
  2176                           
  2177                           ; 1 bytes @ 0x1C
  2178  0000D4                     	ds	1
  2179  0000D5                     Button_Poll@pIncrement:
  2180                           	opt stack 0
  2181  0000D5                     Motor_Speed@pFrequency:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x1D
  2185  0000D5                     	ds	1
  2186  0000D6                     ??_Button_Poll:
  2187  0000D6                     LCD_DrawField@count:
  2188                           	opt stack 0
  2189  0000D6                     printf@prec:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x1E
  2193  0000D6                     	ds	1
  2194  0000D7                     ??_FunctMotor:
  2195                           
  2196                           ; 1 bytes @ 0x1F
  2197  0000D7                     	ds	1
  2198  0000D8                     LCD_DrawField@xmax:
  2199                           	opt stack 0
  2200  0000D8                     printf@flag:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x20
  2204  0000D8                     	ds	1
  2205  0000D9                     LCD_DrawField@ymax:
  2206                           	opt stack 0
  2207  0000D9                     printf@ap:
  2208                           	opt stack 0
  2209                           
  2210                           ; 2 bytes @ 0x21
  2211  0000D9                     	ds	1
  2212  0000DA                     LCD_DrawField@i:
  2213                           	opt stack 0
  2214  0000DA                     Port_Set@TypeRequired:
  2215                           	opt stack 0
  2216                           
  2217                           ; 2 bytes @ 0x22
  2218  0000DA                     	ds	1
  2219  0000DB                     ??_Console_Render:
  2220  0000DB                     Button_Poll@Pin:
  2221                           	opt stack 0
  2222  0000DB                     printf@val:
  2223                           	opt stack 0
  2224                           
  2225                           ; 4 bytes @ 0x23
  2226  0000DB                     	ds	1
  2227  0000DC                     ?_getMode:
  2228                           	opt stack 0
  2229  0000DC                     Port_Set@TypeActual:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x24
  2233  0000DC                     	ds	1
  2234  0000DD                     PortProperty_Valid@Pair:
  2235                           	opt stack 0
  2236  0000DD                     Console_Render@temp:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x25
  2240  0000DD                     	ds	1
  2241  0000DE                     ??_getMode:
  2242  0000DE                     Port_Set@Type:
  2243                           	opt stack 0
  2244  0000DE                     Port_CheckPairType@pInput:
  2245                           	opt stack 0
  2246  0000DE                     Port_SetPinType@pInput:
  2247                           	opt stack 0
  2248  0000DE                     Console_Render@lCursor:
  2249                           	opt stack 0
  2250                           
  2251                           ; 4 bytes @ 0x26
  2252  0000DE                     	ds	1
  2253  0000DF                     printf@c:
  2254                           	opt stack 0
  2255                           
  2256                           ; 1 bytes @ 0x27
  2257  0000DF                     	ds	1
  2258  0000E0                     Port_CheckPairType@pPair:
  2259                           	opt stack 0
  2260  0000E0                     Port_SetPinType@pPin:
  2261                           	opt stack 0
  2262  0000E0                     getMode@dipState:
  2263                           	opt stack 0
  2264                           
  2265                           ; 2 bytes @ 0x28
  2266  0000E0                     	ds	1
  2267  0000E1                     Port_CheckPairType@pDrive:
  2268                           	opt stack 0
  2269  0000E1                     Port_SetPinType@pType:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x29
  2273  0000E1                     	ds	1
  2274  0000E2                     ??_displayMode:
  2275  0000E2                     Port_CheckPairType@Pin1:
  2276                           	opt stack 0
  2277  0000E2                     Port_SetPinType@Output:
  2278                           	opt stack 0
  2279  0000E2                     Console_Render@x:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0x2A
  2283  0000E2                     	ds	1
  2284  0000E3                     Port_CheckPairType@Pin2:
  2285                           	opt stack 0
  2286  0000E3                     Console_Render@y:
  2287                           	opt stack 0
  2288  0000E3                     Port_SetPinType@Props:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x2B
  2292  0000E3                     	ds	1
  2293  0000E4                     Port_CheckPairType@Output:
  2294                           	opt stack 0
  2295  0000E4                     displayMode@mode:
  2296                           	opt stack 0
  2297                           
  2298                           ; 2 bytes @ 0x2C
  2299  0000E4                     	ds	1
  2300  0000E5                     LED_Init@pLED:
  2301                           	opt stack 0
  2302  0000E5                     Port_CheckPairType@Props:
  2303                           	opt stack 0
  2304  0000E5                     Motor_Init@pMotor:
  2305                           	opt stack 0
  2306  0000E5                     SPI_Init@pClock:
  2307                           	opt stack 0
  2308                           
  2309                           ; 4 bytes @ 0x2D
  2310  0000E5                     	ds	1
  2311  0000E6                     continuousMode@mode:
  2312                           	opt stack 0
  2313                           
  2314                           ; 2 bytes @ 0x2E
  2315  0000E6                     	ds	1
  2316  0000E7                     Port_CheckQuadType@pInput:
  2317                           	opt stack 0
  2318  0000E7                     Motor_Init@pAddress:
  2319                           	opt stack 0
  2320                           
  2321                           ; 2 bytes @ 0x2F
  2322  0000E7                     	ds	1
  2323  0000E8                     continuousMode@direction:
  2324                           	opt stack 0
  2325                           
  2326                           ; 2 bytes @ 0x30
  2327  0000E8                     	ds	1
  2328  0000E9                     Port_CheckQuadType@pQuad:
  2329                           	opt stack 0
  2330  0000E9                     SPI_Init@pChannel:
  2331                           	opt stack 0
  2332                           
  2333                           ; 1 bytes @ 0x31
  2334  0000E9                     	ds	1
  2335  0000EA                     Port_CheckQuadType@pDrive:
  2336                           	opt stack 0
  2337  0000EA                     SPI_Init@pMode:
  2338                           	opt stack 0
  2339  0000EA                     continuousMode@speed:
  2340                           	opt stack 0
  2341                           
  2342                           ; 2 bytes @ 0x32
  2343  0000EA                     	ds	1
  2344  0000EB                     Port_CheckQuadType@Pair1:
  2345                           	opt stack 0
  2346  0000EB                     SPI_Init@pInput:
  2347                           	opt stack 0
  2348                           
  2349                           ; 2 bytes @ 0x33
  2350  0000EB                     	ds	1
  2351  0000EC                     ?_setMode:
  2352                           	opt stack 0
  2353  0000EC                     Port_CheckQuadType@Pair2:
  2354                           	opt stack 0
  2355                           
  2356                           ; 1 bytes @ 0x34
  2357  0000EC                     	ds	1
  2358  0000ED                     ??_LCD_Init:
  2359  0000ED                     Port_CheckQuadType@Output:
  2360                           	opt stack 0
  2361                           
  2362                           ; 1 bytes @ 0x35
  2363  0000ED                     	ds	1
  2364  0000EE                     Port_CheckPortType@pInput:
  2365                           	opt stack 0
  2366  0000EE                     Port_SetQuadType@pInput:
  2367                           	opt stack 0
  2368                           
  2369                           ; 2 bytes @ 0x36
  2370  0000EE                     	ds	1
  2371  0000EF                     LCD_Init@i:
  2372                           	opt stack 0
  2373                           
  2374                           ; 2 bytes @ 0x37
  2375  0000EF                     	ds	1
  2376  0000F0                     Port_CheckPortType@pDrive:
  2377                           	opt stack 0
  2378  0000F0                     Port_SetQuadType@pQuad:
  2379                           	opt stack 0
  2380                           
  2381                           ; 1 bytes @ 0x38
  2382  0000F0                     	ds	1
  2383  0000F1                     Port_CheckPortType@Output:
  2384                           	opt stack 0
  2385  0000F1                     Port_SetQuadType@pType:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x39
  2389  0000F1                     	ds	1
  2390  0000F2                     ??_setMode:
  2391  0000F2                     Port_SetQuadType@Output:
  2392                           	opt stack 0
  2393  0000F2                     Port_SetType@pInput:
  2394                           	opt stack 0
  2395                           
  2396                           ; 2 bytes @ 0x3A
  2397  0000F2                     	ds	1
  2398  0000F3                     HMI_Init@in:
  2399                           	opt stack 0
  2400                           
  2401                           ; 2 bytes @ 0x3B
  2402  0000F3                     	ds	1
  2403  0000F4                     Port_SetType@pType:
  2404                           	opt stack 0
  2405                           
  2406                           ; 1 bytes @ 0x3C
  2407  0000F4                     	ds	1
  2408  0000F5                     tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           postinc0	equ	0xFEE
  2413                           wreg	equ	0xFE8
  2414                           postdec1	equ	0xFE5
  2415                           fsr1h	equ	0xFE2
  2416                           fsr1l	equ	0xFE1
  2417                           
  2418                           ; 1 bytes @ 0x3D
  2419                           
  2420                           	psect	cstackCOMRAM
  2421  000001                     __pcstackCOMRAM:
  2422                           	opt stack 0
  2423  000001                     i2Byte_SetBit@pInput:
  2424                           	opt stack 0
  2425  000001                     i2Byte_GetZone@pInput:
  2426                           	opt stack 0
  2427  000001                     i2delay_us@us:
  2428                           	opt stack 0
  2429  000001                     i2MXK_Queue@pCallback:
  2430                           	opt stack 0
  2431                           
  2432                           ; 3 bytes @ 0x0
  2433  000001                     	ds	2
  2434  000003                     i2Byte_SetBit@pBit:
  2435                           	opt stack 0
  2436  000003                     i2Byte_GetZone@pMax:
  2437                           	opt stack 0
  2438  000003                     i2delay_us@u:
  2439                           	opt stack 0
  2440                           
  2441                           ; 4 bytes @ 0x2
  2442  000003                     	ds	1
  2443  000004                     i2Byte_SetBit@pValue:
  2444                           	opt stack 0
  2445  000004                     i2Byte_GetZone@pChunk:
  2446                           	opt stack 0
  2447                           
  2448                           ; 1 bytes @ 0x3
  2449  000004                     	ds	1
  2450  000005                     ??i2_Byte_SetBit:
  2451  000005                     i2Byte_GetZone@pChunkSize:
  2452                           	opt stack 0
  2453                           
  2454                           ; 1 bytes @ 0x4
  2455  000005                     	ds	1
  2456  000006                     ??i2_Byte_GetZone:
  2457                           
  2458                           ; 1 bytes @ 0x5
  2459  000006                     	ds	1
  2460  000007                     i2Byte_GetZone@MASK:
  2461                           	opt stack 0
  2462  000007                     i2MXK_SwitchTo@CUR:
  2463                           	opt stack 0
  2464                           
  2465                           ; 1 bytes @ 0x6
  2466  000007                     	ds	1
  2467  000008                     i2Byte_GetZone@Offset:
  2468                           	opt stack 0
  2469  000008                     i2MXK_SwitchTo@pModule:
  2470                           	opt stack 0
  2471                           
  2472                           ; 1 bytes @ 0x7
  2473  000008                     	ds	1
  2474  000009                     i2Byte_GetZone@Output:
  2475                           	opt stack 0
  2476                           
  2477                           ; 1 bytes @ 0x8
  2478  000009                     	ds	1
  2479  00000A                     i2Byte_GetPair@pInput:
  2480                           	opt stack 0
  2481                           
  2482                           ; 2 bytes @ 0x9
  2483  00000A                     	ds	2
  2484  00000C                     i2Byte_GetPair@pPair:
  2485                           	opt stack 0
  2486                           
  2487                           ; 1 bytes @ 0xB
  2488  00000C                     	ds	1
  2489  00000D                     i2Word_GetPair@pInput:
  2490                           	opt stack 0
  2491                           
  2492                           ; 2 bytes @ 0xC
  2493  00000D                     	ds	2
  2494  00000F                     i2Word_GetPair@pPair:
  2495                           	opt stack 0
  2496                           
  2497                           ; 1 bytes @ 0xE
  2498  00000F                     	ds	1
  2499  000010                     i2Port_SetPin@pInput:
  2500                           	opt stack 0
  2501                           
  2502                           ; 2 bytes @ 0xF
  2503  000010                     	ds	2
  2504  000012                     i2Port_SetPin@pPin:
  2505                           	opt stack 0
  2506                           
  2507                           ; 1 bytes @ 0x11
  2508  000012                     	ds	1
  2509  000013                     i2Port_SetPin@pValue:
  2510                           	opt stack 0
  2511                           
  2512                           ; 1 bytes @ 0x12
  2513  000013                     	ds	1
  2514  000014                     i2Port_SetPin@Type:
  2515                           	opt stack 0
  2516                           
  2517                           ; 1 bytes @ 0x13
  2518  000014                     	ds	1
  2519  000015                     
  2520                           ; 1 bytes @ 0x14
  2521  000015                     	ds	2
  2522  000017                     ??_ISR_Function:
  2523                           
  2524                           ; 1 bytes @ 0x16
  2525  000017                     	ds	18
  2526                           tblptru	equ	0xFF8
  2527                           tblptrh	equ	0xFF7
  2528                           tblptrl	equ	0xFF6
  2529                           tablat	equ	0xFF5
  2530                           postinc0	equ	0xFEE
  2531                           wreg	equ	0xFE8
  2532                           postdec1	equ	0xFE5
  2533                           fsr1h	equ	0xFE2
  2534                           fsr1l	equ	0xFE1
  2535                           
  2536 ;;
  2537 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2538 ;;
  2539 ;; *************** function _main *****************
  2540 ;; Defined at:
  2541 ;;		line 244 in file "main.c"
  2542 ;; Parameters:    Size  Location     Type
  2543 ;;		None
  2544 ;; Auto vars:     Size  Location     Type
  2545 ;;		None
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      void 
  2548 ;; Registers used:
  2549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;Total ram usage:        0 bytes
  2560 ;; Hardware stack levels required when called:   21
  2561 ;; This function calls:
  2562 ;;		_MXK_BlockSwitchTo
  2563 ;;		_MXK_Dequeue
  2564 ;;		_MXK_Release
  2565 ;;		_displayText
  2566 ;;		_initialise
  2567 ;;		_setMode
  2568 ;; This function is called by:
  2569 ;;		Startup code after reset
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           	psect	text0
  2574  014576                     __ptext0:
  2575                           	opt stack 0
  2576  014576                     _main:
  2577                           	opt stack 10
  2578                           
  2579                           ;main.c: 245: initialise();
  2580                           
  2581                           ;incstack = 0
  2582  014576  EC61  F09F         	call	_initialise	;wreg free
  2583  01457A                     
  2584                           ;main.c: 249: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2585  01457A  0E01               	movlw	1
  2586  01457C  EC5F  F0A2         	call	_MXK_BlockSwitchTo
  2587  014580  0900               	iorlw	0
  2588  014582  B4D8               	btfsc	status,2,c
  2589  014584  D7FA               	goto	l2080
  2590                           
  2591                           ;main.c: 251: displayText();
  2592  014586  EC32  F0A4         	call	_displayText	;wreg free
  2593                           
  2594                           ;main.c: 254: setMode(Stepper);
  2595  01458A  EE20  F09B         	lfsr	2,_Stepper
  2596  01458E  EE00  F0EC         	lfsr	0,?_setMode
  2597  014592  0E05               	movlw	5
  2598  014594                     u10351:
  2599  014594  CFDB FFEB          	movff	plusw2,plusw0
  2600  014598  06E8               	decf	wreg,f,c
  2601  01459A  E2FC               	bc	u10351
  2602  01459C  EC6C  F0A0         	call	_setMode	;wreg free
  2603                           
  2604                           ;main.c: 256: if (MXK_Release())
  2605  0145A0  EC2C  F0A5         	call	_MXK_Release	;wreg free
  2606  0145A4  0900               	iorlw	0
  2607  0145A6  B4D8               	btfsc	status,2,c
  2608  0145A8  D7E8               	goto	l2080
  2609                           
  2610                           ;main.c: 257: MXK_Dequeue();
  2611  0145AA  EC40  F0A2         	call	_MXK_Dequeue	;wreg free
  2612                           
  2613                           ;main.c: 258: }
  2614                           ;main.c: 277: }
  2615  0145AE  D7E5               	goto	l2080
  2616  0145B0                     __end_of_main:
  2617                           	opt stack 0
  2618                           tblptru	equ	0xFF8
  2619                           tblptrh	equ	0xFF7
  2620                           tblptrl	equ	0xFF6
  2621                           tablat	equ	0xFF5
  2622                           postinc0	equ	0xFEE
  2623                           plusw0	equ	0xFEB
  2624                           wreg	equ	0xFE8
  2625                           postdec1	equ	0xFE5
  2626                           fsr1h	equ	0xFE2
  2627                           fsr1l	equ	0xFE1
  2628                           plusw2	equ	0xFDB
  2629                           status	equ	0xFD8
  2630                           
  2631 ;; *************** function _setMode *****************
  2632 ;; Defined at:
  2633 ;;		line 226 in file "main.c"
  2634 ;; Parameters:    Size  Location     Type
  2635 ;;		None
  2636 ;; Auto vars:     Size  Location     Type
  2637 ;;  mode            2    0[BANK1 ] int 
  2638 ;; Return value:  Size  Location     Type
  2639 ;;                  1    wreg      void 
  2640 ;; Registers used:
  2641 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2642 ;; Tracked objects:
  2643 ;;		On entry : 0/0
  2644 ;;		On exit  : 0/0
  2645 ;;		Unchanged: 0/0
  2646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2647 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Totals:         0       8       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;Total ram usage:       10 bytes
  2652 ;; Hardware stack levels used:    1
  2653 ;; Hardware stack levels required when called:   20
  2654 ;; This function calls:
  2655 ;;		_continuousMode
  2656 ;;		_getMode
  2657 ;;		_nullMode
  2658 ;;		_positionMode
  2659 ;;		_stepMode
  2660 ;; This function is called by:
  2661 ;;		_main
  2662 ;; This function uses a non-reentrant model
  2663 ;;
  2664                           
  2665                           	psect	text1
  2666  0140D8                     __ptext1:
  2667                           	opt stack 0
  2668  0140D8                     _setMode:
  2669                           	opt stack 10
  2670                           
  2671                           ;main.c: 227: int mode = getMode();
  2672                           
  2673                           ;incstack = 0
  2674  0140D8  EC66  F09B         	call	_getMode	;wreg free
  2675  0140DC  C0DC  F1C2         	movff	?_getMode,setMode@mode
  2676  0140E0  C0DD  F1C3         	movff	?_getMode+1,setMode@mode+1
  2677                           
  2678                           ;main.c: 228: switch (mode) {
  2679  0140E4  D00C               	goto	l2069
  2680  0140E6                     
  2681                           ;main.c: 230: continuousMode();
  2682  0140E6  EC59  F086         	call	_continuousMode	;wreg free
  2683                           
  2684                           ;main.c: 231: break;
  2685  0140EA  0012               	return	
  2686  0140EC                     
  2687                           ;main.c: 233: stepMode();
  2688  0140EC  EC02  F00A         	call	_stepMode	;wreg free
  2689                           
  2690                           ;main.c: 234: break;
  2691  0140F0  0012               	return	
  2692  0140F2                     
  2693                           ;main.c: 236: positionMode();
  2694  0140F2  EC29  F0A6         	call	_positionMode	;wreg free
  2695                           
  2696                           ;main.c: 237: break;
  2697  0140F6  0012               	return	
  2698  0140F8                     
  2699                           ;main.c: 239: nullMode();
  2700  0140F8  ECD8  F0A2         	call	_nullMode	;wreg free
  2701                           
  2702                           ;main.c: 241: }
  2703                           
  2704                           ;main.c: 240: break;
  2705  0140FC  0012               	return	
  2706  0140FE                     l2069:
  2707  0140FE  C1C2  F0F2         	movff	setMode@mode,??_setMode
  2708  014102  C1C3  F0F3         	movff	setMode@mode+1,??_setMode+1
  2709                           
  2710                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2711                           ; Switch size 1, requested type "space"
  2712                           ; Number of cases is 1, Range of values is 0 to 0
  2713                           ; switch strategies available:
  2714                           ; Name         Instructions Cycles
  2715                           ; simple_byte            4     3 (average)
  2716                           ;	Chosen strategy is simple_byte
  2717  014106  0100               	movlb	0	; () banked
  2718  014108  51F3               	movf	(??_setMode+1)& (0+255),w,b
  2719  01410A  0A00               	xorlw	0	; case 0
  2720  01410C  A4D8               	btfss	status,2,c
  2721  01410E  D7F4               	goto	l2074
  2722                           
  2723                           ; BSR set to: 0
  2724                           ; Switch size 1, requested type "space"
  2725                           ; Number of cases is 3, Range of values is 1 to 3
  2726                           ; switch strategies available:
  2727                           ; Name         Instructions Cycles
  2728                           ; simple_byte           10     6 (average)
  2729                           ;	Chosen strategy is simple_byte
  2730  014110  0100               	movlb	0	; () banked
  2731  014112  51F2               	movf	??_setMode& (0+255),w,b
  2732  014114  0A01               	xorlw	1	; case 1
  2733  014116  B4D8               	btfsc	status,2,c
  2734  014118  D7E6               	goto	l2070
  2735  01411A  0A03               	xorlw	3	; case 2
  2736  01411C  B4D8               	btfsc	status,2,c
  2737  01411E  D7E6               	goto	l2072
  2738  014120  0A01               	xorlw	1	; case 3
  2739  014122  B4D8               	btfsc	status,2,c
  2740  014124  D7E6               	goto	l2073
  2741  014126  D7E8               	goto	l2074
  2742  014128                     __end_of_setMode:
  2743                           	opt stack 0
  2744                           tblptru	equ	0xFF8
  2745                           tblptrh	equ	0xFF7
  2746                           tblptrl	equ	0xFF6
  2747                           tablat	equ	0xFF5
  2748                           postinc0	equ	0xFEE
  2749                           plusw0	equ	0xFEB
  2750                           wreg	equ	0xFE8
  2751                           postdec1	equ	0xFE5
  2752                           fsr1h	equ	0xFE2
  2753                           fsr1l	equ	0xFE1
  2754                           plusw2	equ	0xFDB
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _stepMode *****************
  2758 ;; Defined at:
  2759 ;;		line 210 in file "main.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;		None
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;		None
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  1    wreg      void 
  2766 ;; Registers used:
  2767 ;;		None
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2773 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;Total ram usage:        0 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    7
  2780 ;; This function calls:
  2781 ;;		Nothing
  2782 ;; This function is called by:
  2783 ;;		_setMode
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text2
  2788  001404                     __ptext2:
  2789                           	opt stack 0
  2790  001404                     _stepMode:
  2791                           	opt stack 22
  2792                           
  2793                           ;incstack = 0
  2794  001404  0012               	return		;funcret
  2795  001406                     __end_of_stepMode:
  2796                           	opt stack 0
  2797                           tblptru	equ	0xFF8
  2798                           tblptrh	equ	0xFF7
  2799                           tblptrl	equ	0xFF6
  2800                           tablat	equ	0xFF5
  2801                           postinc0	equ	0xFEE
  2802                           plusw0	equ	0xFEB
  2803                           wreg	equ	0xFE8
  2804                           postdec1	equ	0xFE5
  2805                           fsr1h	equ	0xFE2
  2806                           fsr1l	equ	0xFE1
  2807                           plusw2	equ	0xFDB
  2808                           status	equ	0xFD8
  2809                           
  2810 ;; *************** function _positionMode *****************
  2811 ;; Defined at:
  2812 ;;		line 214 in file "main.c"
  2813 ;; Parameters:    Size  Location     Type
  2814 ;;		None
  2815 ;; Auto vars:     Size  Location     Type
  2816 ;;		None
  2817 ;; Return value:  Size  Location     Type
  2818 ;;                  1    wreg      void 
  2819 ;; Registers used:
  2820 ;;		None
  2821 ;; Tracked objects:
  2822 ;;		On entry : 0/0
  2823 ;;		On exit  : 0/0
  2824 ;;		Unchanged: 0/0
  2825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2829 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2830 ;;Total ram usage:        0 bytes
  2831 ;; Hardware stack levels used:    1
  2832 ;; Hardware stack levels required when called:    7
  2833 ;; This function calls:
  2834 ;;		Nothing
  2835 ;; This function is called by:
  2836 ;;		_setMode
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           	psect	text3
  2841  014C52                     __ptext3:
  2842                           	opt stack 0
  2843  014C52                     _positionMode:
  2844                           	opt stack 22
  2845                           
  2846                           ;incstack = 0
  2847  014C52  0012               	return		;funcret
  2848  014C54                     __end_of_positionMode:
  2849                           	opt stack 0
  2850                           tblptru	equ	0xFF8
  2851                           tblptrh	equ	0xFF7
  2852                           tblptrl	equ	0xFF6
  2853                           tablat	equ	0xFF5
  2854                           postinc0	equ	0xFEE
  2855                           plusw0	equ	0xFEB
  2856                           wreg	equ	0xFE8
  2857                           postdec1	equ	0xFE5
  2858                           fsr1h	equ	0xFE2
  2859                           fsr1l	equ	0xFE1
  2860                           plusw2	equ	0xFDB
  2861                           status	equ	0xFD8
  2862                           
  2863 ;; *************** function _nullMode *****************
  2864 ;; Defined at:
  2865 ;;		line 218 in file "main.c"
  2866 ;; Parameters:    Size  Location     Type
  2867 ;;		None
  2868 ;; Auto vars:     Size  Location     Type
  2869 ;;		None
  2870 ;; Return value:  Size  Location     Type
  2871 ;;                  1    wreg      void 
  2872 ;; Registers used:
  2873 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2874 ;; Tracked objects:
  2875 ;;		On entry : 0/0
  2876 ;;		On exit  : 0/0
  2877 ;;		Unchanged: 0/0
  2878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2882 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2883 ;;Total ram usage:        0 bytes
  2884 ;; Hardware stack levels used:    1
  2885 ;; Hardware stack levels required when called:   19
  2886 ;; This function calls:
  2887 ;;		_Console_Render
  2888 ;;		_displayText
  2889 ;;		_printf
  2890 ;; This function is called by:
  2891 ;;		_setMode
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           	psect	text4
  2896  0145B0                     __ptext4:
  2897                           	opt stack 0
  2898  0145B0                     _nullMode:
  2899                           	opt stack 10
  2900                           
  2901                           ;main.c: 219: displayText();
  2902                           
  2903                           ;incstack = 0
  2904  0145B0  EC32  F0A4         	call	_displayText	;wreg free
  2905                           
  2906                           ;main.c: 220: printf("                      \n");
  2907  0145B4  0E69               	movlw	low STR_11
  2908  0145B6  0100               	movlb	0	; () banked
  2909  0145B8  6FCE               	movwf	printf@f& (0+255),b
  2910  0145BA  0EFF               	movlw	high STR_11
  2911  0145BC  0100               	movlb	0	; () banked
  2912  0145BE  6FCF               	movwf	(printf@f+1)& (0+255),b
  2913  0145C0  EC7E  F087         	call	_printf	;wreg free
  2914                           
  2915                           ;main.c: 221: printf("                      \n");
  2916  0145C4  0E69               	movlw	low STR_11
  2917  0145C6  0100               	movlb	0	; () banked
  2918  0145C8  6FCE               	movwf	printf@f& (0+255),b
  2919  0145CA  0EFF               	movlw	high STR_11
  2920  0145CC  0100               	movlb	0	; () banked
  2921  0145CE  6FCF               	movwf	(printf@f+1)& (0+255),b
  2922  0145D0  EC7E  F087         	call	_printf	;wreg free
  2923                           
  2924                           ;main.c: 222: printf("                      \n");
  2925  0145D4  0E69               	movlw	low STR_11
  2926  0145D6  0100               	movlb	0	; () banked
  2927  0145D8  6FCE               	movwf	printf@f& (0+255),b
  2928  0145DA  0EFF               	movlw	high STR_11
  2929  0145DC  0100               	movlb	0	; () banked
  2930  0145DE  6FCF               	movwf	(printf@f+1)& (0+255),b
  2931  0145E0  EC7E  F087         	call	_printf	;wreg free
  2932                           
  2933                           ;main.c: 223: Console_Render();
  2934  0145E4  ECAC  F089         	call	_Console_Render	;wreg free
  2935  0145E8  0012               	return		;funcret
  2936  0145EA                     __end_of_nullMode:
  2937                           	opt stack 0
  2938                           tblptru	equ	0xFF8
  2939                           tblptrh	equ	0xFF7
  2940                           tblptrl	equ	0xFF6
  2941                           tablat	equ	0xFF5
  2942                           postinc0	equ	0xFEE
  2943                           plusw0	equ	0xFEB
  2944                           wreg	equ	0xFE8
  2945                           postdec1	equ	0xFE5
  2946                           fsr1h	equ	0xFE2
  2947                           fsr1l	equ	0xFE1
  2948                           plusw2	equ	0xFDB
  2949                           status	equ	0xFD8
  2950                           
  2951 ;; *************** function _continuousMode *****************
  2952 ;; Defined at:
  2953 ;;		line 162 in file "main.c"
  2954 ;; Parameters:    Size  Location     Type
  2955 ;;		None
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  speed           2   50[BANK0 ] int 
  2958 ;;  direction       2   48[BANK0 ] short 
  2959 ;;  mode            2   46[BANK0 ] int 
  2960 ;; Return value:  Size  Location     Type
  2961 ;;                  1    wreg      void 
  2962 ;; Registers used:
  2963 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2964 ;; Tracked objects:
  2965 ;;		On entry : 0/0
  2966 ;;		On exit  : 0/0
  2967 ;;		Unchanged: 0/0
  2968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2970 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2972 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;Total ram usage:        6 bytes
  2974 ;; Hardware stack levels used:    1
  2975 ;; Hardware stack levels required when called:   19
  2976 ;; This function calls:
  2977 ;;		_Console_Render
  2978 ;;		_Console_SetForecolour
  2979 ;;		_FunctMotor
  2980 ;;		_HMI_DIPSwitch
  2981 ;;		_HMI_DownSwitch
  2982 ;;		_HMI_LeftSwitch
  2983 ;;		_HMI_Poll
  2984 ;;		_HMI_RightSwitch
  2985 ;;		_HMI_UpSwitch
  2986 ;;		_MXK_DIPSwitch
  2987 ;;		_MXK_TestButton
  2988 ;;		_displayText
  2989 ;;		_getMode
  2990 ;;		_printf
  2991 ;; This function is called by:
  2992 ;;		_setMode
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text5
  2997  010CB2                     __ptext5:
  2998                           	opt stack 0
  2999  010CB2                     _continuousMode:
  3000                           	opt stack 10
  3001                           
  3002                           ;main.c: 164: int mode = getMode();
  3003                           
  3004                           ;incstack = 0
  3005  010CB2  EC66  F09B         	call	_getMode	;wreg free
  3006  010CB6  C0DC  F0E6         	movff	?_getMode,continuousMode@mode
  3007  010CBA  C0DD  F0E7         	movff	?_getMode+1,continuousMode@mode+1
  3008                           
  3009                           ;main.c: 166: int speed = 0;
  3010  010CBE  0E00               	movlw	0
  3011  010CC0  0100               	movlb	0	; () banked
  3012  010CC2  6FEB               	movwf	(continuousMode@speed+1)& (0+255),b
  3013  010CC4  0E00               	movlw	0
  3014  010CC6  6FEA               	movwf	continuousMode@speed& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 169: INT16 direction = 0;
  3018  010CC8  0E00               	movlw	0
  3019  010CCA  0100               	movlb	0	; () banked
  3020  010CCC  6FE9               	movwf	(continuousMode@direction+1)& (0+255),b
  3021  010CCE  0E00               	movlw	0
  3022  010CD0  6FE8               	movwf	continuousMode@direction& (0+255),b
  3023                           
  3024                           ;main.c: 172: while (mode == 1) {
  3025  010CD2  D105               	goto	l2044
  3026  010CD4                     
  3027                           ; BSR set to: 0
  3028                           ;main.c: 175: if ((int) HMIBoard.mUp.mGetState() == 1 && (int) HMIBoard.mDown.mGetState(
      +                          ) == 0 & speed <= 9) {
  3029                           
  3030                           ; BSR set to: 0
  3031  010CD4  EE21  F04D         	lfsr	2,_HMIBoard+35
  3032  010CD8  D801               	call	u10038
  3033  010CDA  D00A               	goto	u10039
  3034  010CDC                     u10038:
  3035  010CDC  0005               	push	
  3036  010CDE  6EFA               	movwf	pclath,c
  3037  010CE0  50DE               	movf	postinc2,w,c
  3038  010CE2  6EFD               	movwf	tosl,c
  3039  010CE4  50DE               	movf	postinc2,w,c
  3040  010CE6  6EFE               	movwf	tosh,c
  3041  010CE8  50DE               	movf	postinc2,w,c
  3042  010CEA  6EFF               	movwf	tosu,c
  3043  010CEC  50FA               	movf	pclath,w,c
  3044  010CEE  0012               	return		;indir
  3045  010CF0                     u10039:
  3046  010CF0  06E8               	decf	wreg,f,c
  3047  010CF2  A4D8               	btfss	status,2,c
  3048  010CF4  D030               	goto	l2046
  3049  010CF6  EE21  F057         	lfsr	2,_HMIBoard+45
  3050  010CFA  D801               	call	u10058
  3051  010CFC  D00A               	goto	u10059
  3052  010CFE                     u10058:
  3053  010CFE  0005               	push	
  3054  010D00  6EFA               	movwf	pclath,c
  3055  010D02  50DE               	movf	postinc2,w,c
  3056  010D04  6EFD               	movwf	tosl,c
  3057  010D06  50DE               	movf	postinc2,w,c
  3058  010D08  6EFE               	movwf	tosh,c
  3059  010D0A  50DE               	movf	postinc2,w,c
  3060  010D0C  6EFF               	movwf	tosu,c
  3061  010D0E  50FA               	movf	pclath,w,c
  3062  010D10  0012               	return		;indir
  3063  010D12                     u10059:
  3064  010D12  0900               	iorlw	0
  3065  010D14  A4D8               	btfss	status,2,c
  3066  010D16  D01F               	goto	l2046
  3067  010D18  0100               	movlb	0	; () banked
  3068  010D1A  BFEB               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3069  010D1C  D008               	goto	u10070
  3070  010D1E  0100               	movlb	0	; () banked
  3071  010D20  51EB               	movf	(continuousMode@speed+1)& (0+255),w,b
  3072  010D22  E119               	bnz	l13137
  3073  010D24  0E0A               	movlw	10
  3074  010D26  0100               	movlb	0	; () banked
  3075  010D28  5DEA               	subwf	continuousMode@speed& (0+255),w,b
  3076  010D2A  B0D8               	btfsc	status,0,c
  3077  010D2C  D014               	goto	l2046
  3078  010D2E                     u10070:
  3079                           
  3080                           ; BSR set to: 0
  3081                           
  3082                           ; BSR set to: 0
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;main.c: 176: while ((int) HMIBoard.mUp.mGetState() == 1) {
  3086  010D2E  EE21  F04D         	lfsr	2,_HMIBoard+35
  3087  010D32  D801               	call	u10088
  3088  010D34  D00A               	goto	u10089
  3089  010D36                     u10088:
  3090  010D36  0005               	push	
  3091  010D38  6EFA               	movwf	pclath,c
  3092  010D3A  50DE               	movf	postinc2,w,c
  3093  010D3C  6EFD               	movwf	tosl,c
  3094  010D3E  50DE               	movf	postinc2,w,c
  3095  010D40  6EFE               	movwf	tosh,c
  3096  010D42  50DE               	movf	postinc2,w,c
  3097  010D44  6EFF               	movwf	tosu,c
  3098  010D46  50FA               	movf	pclath,w,c
  3099  010D48  0012               	return		;indir
  3100  010D4A                     u10089:
  3101  010D4A  06E8               	decf	wreg,f,c
  3102  010D4C  B4D8               	btfsc	status,2,c
  3103  010D4E  D7EF               	goto	u10070
  3104                           
  3105                           ;main.c: 177: }
  3106                           ;main.c: 178: speed++;
  3107  010D50  0100               	movlb	0	; () banked
  3108  010D52  4BEA               	infsnz	continuousMode@speed& (0+255),f,b
  3109  010D54  2BEB               	incf	(continuousMode@speed+1)& (0+255),f,b
  3110  010D56                     l2046:
  3111  010D56                     l13137:
  3112                           
  3113                           ;main.c: 179: }
  3114                           ;main.c: 181: if ((int) HMIBoard.mDown.mGetState() == 1 && (int) HMIBoard.mUp.mGetState(
      +                          ) == 0 & speed > 0) {
  3115  010D56  EE21  F057         	lfsr	2,_HMIBoard+45
  3116  010D5A  D801               	call	u10108
  3117  010D5C  D00A               	goto	u10109
  3118  010D5E                     u10108:
  3119  010D5E  0005               	push	
  3120  010D60  6EFA               	movwf	pclath,c
  3121  010D62  50DE               	movf	postinc2,w,c
  3122  010D64  6EFD               	movwf	tosl,c
  3123  010D66  50DE               	movf	postinc2,w,c
  3124  010D68  6EFE               	movwf	tosh,c
  3125  010D6A  50DE               	movf	postinc2,w,c
  3126  010D6C  6EFF               	movwf	tosu,c
  3127  010D6E  50FA               	movf	pclath,w,c
  3128  010D70  0012               	return		;indir
  3129  010D72                     u10109:
  3130  010D72  06E8               	decf	wreg,f,c
  3131  010D74  A4D8               	btfss	status,2,c
  3132  010D76  D030               	goto	l2050
  3133  010D78  EE21  F04D         	lfsr	2,_HMIBoard+35
  3134  010D7C  D801               	call	u10128
  3135  010D7E  D00A               	goto	u10129
  3136  010D80                     u10128:
  3137  010D80  0005               	push	
  3138  010D82  6EFA               	movwf	pclath,c
  3139  010D84  50DE               	movf	postinc2,w,c
  3140  010D86  6EFD               	movwf	tosl,c
  3141  010D88  50DE               	movf	postinc2,w,c
  3142  010D8A  6EFE               	movwf	tosh,c
  3143  010D8C  50DE               	movf	postinc2,w,c
  3144  010D8E  6EFF               	movwf	tosu,c
  3145  010D90  50FA               	movf	pclath,w,c
  3146  010D92  0012               	return		;indir
  3147  010D94                     u10129:
  3148  010D94  0900               	iorlw	0
  3149  010D96  A4D8               	btfss	status,2,c
  3150  010D98  D01F               	goto	l2050
  3151  010D9A  0100               	movlb	0	; () banked
  3152  010D9C  BFEB               	btfsc	(continuousMode@speed+1)& (0+255),7,b
  3153  010D9E  D01C               	goto	l2050
  3154  010DA0  0100               	movlb	0	; () banked
  3155  010DA2  51EB               	movf	(continuousMode@speed+1)& (0+255),w,b
  3156  010DA4  E104               	bnz	l13145
  3157  010DA6  0100               	movlb	0	; () banked
  3158  010DA8  05EA               	decf	continuousMode@speed& (0+255),w,b
  3159  010DAA  A0D8               	btfss	status,0,c
  3160  010DAC  D015               	goto	l2050
  3161  010DAE                     u10140:
  3162  010DAE                     l13145:
  3163  010DAE  EE21  F057         	lfsr	2,_HMIBoard+45
  3164  010DB2  D801               	call	u10158
  3165  010DB4  D00A               	goto	u10159
  3166  010DB6                     u10158:
  3167  010DB6  0005               	push	
  3168  010DB8  6EFA               	movwf	pclath,c
  3169  010DBA  50DE               	movf	postinc2,w,c
  3170  010DBC  6EFD               	movwf	tosl,c
  3171  010DBE  50DE               	movf	postinc2,w,c
  3172  010DC0  6EFE               	movwf	tosh,c
  3173  010DC2  50DE               	movf	postinc2,w,c
  3174  010DC4  6EFF               	movwf	tosu,c
  3175  010DC6  50FA               	movf	pclath,w,c
  3176  010DC8  0012               	return		;indir
  3177  010DCA                     u10159:
  3178  010DCA  06E8               	decf	wreg,f,c
  3179  010DCC  B4D8               	btfsc	status,2,c
  3180  010DCE  D7EF               	goto	u10140
  3181                           
  3182                           ;main.c: 183: }
  3183                           ;main.c: 184: speed--;
  3184  010DD0  0100               	movlb	0	; () banked
  3185  010DD2  07EA               	decf	continuousMode@speed& (0+255),f,b
  3186  010DD4  A0D8               	btfss	status,0,c
  3187  010DD6  07EB               	decf	(continuousMode@speed+1)& (0+255),f,b
  3188  010DD8                     l2050:
  3189                           
  3190                           ;main.c: 185: }
  3191                           ;main.c: 187: if ((int) HMIBoard.mLeft.mGetState() == 1 && (int) HMIBoard.mRight.mGetSta
      +                          te() == 0) {
  3192                           
  3193                           ; BSR set to: 0
  3194  010DD8  EE21  F043         	lfsr	2,_HMIBoard+25
  3195  010DDC  D801               	call	u10178
  3196  010DDE  D00A               	goto	u10179
  3197  010DE0                     u10178:
  3198  010DE0  0005               	push	
  3199  010DE2  6EFA               	movwf	pclath,c
  3200  010DE4  50DE               	movf	postinc2,w,c
  3201  010DE6  6EFD               	movwf	tosl,c
  3202  010DE8  50DE               	movf	postinc2,w,c
  3203  010DEA  6EFE               	movwf	tosh,c
  3204  010DEC  50DE               	movf	postinc2,w,c
  3205  010DEE  6EFF               	movwf	tosu,c
  3206  010DF0  50FA               	movf	pclath,w,c
  3207  010DF2  0012               	return		;indir
  3208  010DF4                     u10179:
  3209  010DF4  06E8               	decf	wreg,f,c
  3210  010DF6  A4D8               	btfss	status,2,c
  3211  010DF8  D016               	goto	l2054
  3212  010DFA  EE21  F039         	lfsr	2,_HMIBoard+15
  3213  010DFE  D801               	call	u10198
  3214  010E00  D00A               	goto	u10199
  3215  010E02                     u10198:
  3216  010E02  0005               	push	
  3217  010E04  6EFA               	movwf	pclath,c
  3218  010E06  50DE               	movf	postinc2,w,c
  3219  010E08  6EFD               	movwf	tosl,c
  3220  010E0A  50DE               	movf	postinc2,w,c
  3221  010E0C  6EFE               	movwf	tosh,c
  3222  010E0E  50DE               	movf	postinc2,w,c
  3223  010E10  6EFF               	movwf	tosu,c
  3224  010E12  50FA               	movf	pclath,w,c
  3225  010E14  0012               	return		;indir
  3226  010E16                     u10199:
  3227  010E16  0900               	iorlw	0
  3228  010E18  A4D8               	btfss	status,2,c
  3229  010E1A  D005               	goto	l2054
  3230                           
  3231                           ;main.c: 188: direction = 1;
  3232  010E1C  0E00               	movlw	0
  3233  010E1E  0100               	movlb	0	; () banked
  3234  010E20  6FE9               	movwf	(continuousMode@direction+1)& (0+255),b
  3235  010E22  0E01               	movlw	1
  3236  010E24  6FE8               	movwf	continuousMode@direction& (0+255),b
  3237  010E26                     l2054:
  3238                           
  3239                           ;main.c: 189: }
  3240                           ;main.c: 191: if ((int) HMIBoard.mRight.mGetState() == 1 && (int) HMIBoard.mLeft.mGetSta
      +                          te() == 0) {
  3241                           
  3242                           ; BSR set to: 0
  3243  010E26  EE21  F039         	lfsr	2,_HMIBoard+15
  3244  010E2A  D801               	call	u10218
  3245  010E2C  D00A               	goto	u10219
  3246  010E2E                     u10218:
  3247  010E2E  0005               	push	
  3248  010E30  6EFA               	movwf	pclath,c
  3249  010E32  50DE               	movf	postinc2,w,c
  3250  010E34  6EFD               	movwf	tosl,c
  3251  010E36  50DE               	movf	postinc2,w,c
  3252  010E38  6EFE               	movwf	tosh,c
  3253  010E3A  50DE               	movf	postinc2,w,c
  3254  010E3C  6EFF               	movwf	tosu,c
  3255  010E3E  50FA               	movf	pclath,w,c
  3256  010E40  0012               	return		;indir
  3257  010E42                     u10219:
  3258  010E42  06E8               	decf	wreg,f,c
  3259  010E44  A4D8               	btfss	status,2,c
  3260  010E46  D014               	goto	l2055
  3261  010E48  EE21  F043         	lfsr	2,_HMIBoard+25
  3262  010E4C  D801               	call	u10238
  3263  010E4E  D00A               	goto	u10239
  3264  010E50                     u10238:
  3265  010E50  0005               	push	
  3266  010E52  6EFA               	movwf	pclath,c
  3267  010E54  50DE               	movf	postinc2,w,c
  3268  010E56  6EFD               	movwf	tosl,c
  3269  010E58  50DE               	movf	postinc2,w,c
  3270  010E5A  6EFE               	movwf	tosh,c
  3271  010E5C  50DE               	movf	postinc2,w,c
  3272  010E5E  6EFF               	movwf	tosu,c
  3273  010E60  50FA               	movf	pclath,w,c
  3274  010E62  0012               	return		;indir
  3275  010E64                     u10239:
  3276  010E64  0900               	iorlw	0
  3277  010E66  A4D8               	btfss	status,2,c
  3278  010E68  D003               	goto	l2055
  3279                           
  3280                           ;main.c: 192: direction = -1;
  3281  010E6A  0100               	movlb	0	; () banked
  3282  010E6C  69E8               	setf	continuousMode@direction& (0+255),b
  3283  010E6E  69E9               	setf	(continuousMode@direction+1)& (0+255),b
  3284  010E70                     l2055:
  3285                           
  3286                           ;main.c: 193: }
  3287                           ;main.c: 195: displayText();
  3288                           
  3289                           ; BSR set to: 0
  3290  010E70  EC32  F0A4         	call	_displayText	;wreg free
  3291                           
  3292                           ;main.c: 196: Console_SetForecolour(0xFFE0);
  3293  010E74  0EFF               	movlw	255
  3294  010E76  0100               	movlb	0	; () banked
  3295  010E78  6FB9               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3296  010E7A  0EE0               	movlw	224
  3297  010E7C  6FB8               	movwf	Console_SetForecolour@pColour& (0+255),b
  3298  010E7E  EC0E  F0A6         	call	_Console_SetForecolour	;wreg free
  3299                           
  3300                           ;main.c: 197: printf("Speed: %d\n", speed);
  3301  010E82  0EE9               	movlw	low STR_8
  3302  010E84  0100               	movlb	0	; () banked
  3303  010E86  6FCE               	movwf	printf@f& (0+255),b
  3304  010E88  0EFF               	movlw	high STR_8
  3305  010E8A  0100               	movlb	0	; () banked
  3306  010E8C  6FCF               	movwf	(printf@f+1)& (0+255),b
  3307  010E8E  C0EA  F0D0         	movff	continuousMode@speed,?_printf+2
  3308  010E92  C0EB  F0D1         	movff	continuousMode@speed+1,?_printf+3
  3309  010E96  EC7E  F087         	call	_printf	;wreg free
  3310                           
  3311                           ;main.c: 198: printf("Direction: %d\n", direction);
  3312  010E9A  0EA6               	movlw	low STR_9
  3313  010E9C  0100               	movlb	0	; () banked
  3314  010E9E  6FCE               	movwf	printf@f& (0+255),b
  3315  010EA0  0EFF               	movlw	high STR_9
  3316  010EA2  0100               	movlb	0	; () banked
  3317  010EA4  6FCF               	movwf	(printf@f+1)& (0+255),b
  3318  010EA6  C0E8  F0D0         	movff	continuousMode@direction,?_printf+2
  3319  010EAA  C0E9  F0D1         	movff	continuousMode@direction+1,?_printf+3
  3320  010EAE  EC7E  F087         	call	_printf	;wreg free
  3321                           
  3322                           ;main.c: 199: printf("mDelta: %ld\n", (long) Stepper.mDelta);
  3323  010EB2  0ED0               	movlw	low STR_10
  3324  010EB4  0100               	movlb	0	; () banked
  3325  010EB6  6FCE               	movwf	printf@f& (0+255),b
  3326  010EB8  0EFF               	movlw	high STR_10
  3327  010EBA  0100               	movlb	0	; () banked
  3328  010EBC  6FCF               	movwf	(printf@f+1)& (0+255),b
  3329  010EBE  C09B  F0D0         	movff	_Stepper,?_printf+2
  3330  010EC2  C09C  F0D1         	movff	_Stepper+1,?_printf+3
  3331  010EC6  0100               	movlb	0	; () banked
  3332  010EC8  0E00               	movlw	0
  3333  010ECA  BFD1               	btfsc	(?_printf+3)& (0+255),7,b
  3334  010ECC  0EFF               	movlw	-1
  3335  010ECE  6FD2               	movwf	(?_printf+4)& (0+255),b
  3336  010ED0  6FD3               	movwf	(?_printf+5)& (0+255),b
  3337  010ED2  EC7E  F087         	call	_printf	;wreg free
  3338                           
  3339                           ;main.c: 200: Console_Render();
  3340  010ED6  ECAC  F089         	call	_Console_Render	;wreg free
  3341                           
  3342                           ;main.c: 201: FunctMotor();
  3343  010EDA  EC90  F095         	call	_FunctMotor	;wreg free
  3344  010EDE                     l2044:
  3345  010EDE  0100               	movlb	0	; () banked
  3346  010EE0  05E6               	decf	continuousMode@mode& (0+255),w,b
  3347  010EE2  0100               	movlb	0	; () banked
  3348  010EE4  11E7               	iorwf	(continuousMode@mode+1)& (0+255),w,b
  3349  010EE6  B4D8               	btfsc	status,2,c
  3350  010EE8  D6F5               	goto	l2045
  3351                           
  3352                           ; BSR set to: 0
  3353                           ;main.c: 203: }
  3354                           ;main.c: 205: mode = getMode();
  3355                           
  3356                           ; BSR set to: 0
  3357  010EEA  EC66  F09B         	call	_getMode	;wreg free
  3358  010EEE  C0DC  F0E6         	movff	?_getMode,continuousMode@mode
  3359  010EF2  C0DD  F0E7         	movff	?_getMode+1,continuousMode@mode+1
  3360                           
  3361                           ;main.c: 206: HMI_Poll();
  3362  010EF6  EC53  F09D         	call	_HMI_Poll	;wreg free
  3363  010EFA  0012               	return		;funcret
  3364  010EFC                     __end_of_continuousMode:
  3365                           	opt stack 0
  3366                           tosu	equ	0xFFF
  3367                           tosh	equ	0xFFE
  3368                           tosl	equ	0xFFD
  3369                           pclath	equ	0xFFA
  3370                           tblptru	equ	0xFF8
  3371                           tblptrh	equ	0xFF7
  3372                           tblptrl	equ	0xFF6
  3373                           tablat	equ	0xFF5
  3374                           postinc0	equ	0xFEE
  3375                           plusw0	equ	0xFEB
  3376                           wreg	equ	0xFE8
  3377                           postdec1	equ	0xFE5
  3378                           fsr1h	equ	0xFE2
  3379                           fsr1l	equ	0xFE1
  3380                           postinc2	equ	0xFDE
  3381                           plusw2	equ	0xFDB
  3382                           status	equ	0xFD8
  3383                           
  3384 ;; *************** function _displayText *****************
  3385 ;; Defined at:
  3386 ;;		line 101 in file "main.c"
  3387 ;; Parameters:    Size  Location     Type
  3388 ;;		None
  3389 ;; Auto vars:     Size  Location     Type
  3390 ;;		None
  3391 ;; Return value:  Size  Location     Type
  3392 ;;                  1    wreg      void 
  3393 ;; Registers used:
  3394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3395 ;; Tracked objects:
  3396 ;;		On entry : 0/0
  3397 ;;		On exit  : 0/0
  3398 ;;		Unchanged: 0/0
  3399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3404 ;;Total ram usage:        0 bytes
  3405 ;; Hardware stack levels used:    1
  3406 ;; Hardware stack levels required when called:   18
  3407 ;; This function calls:
  3408 ;;		_Console_Render
  3409 ;;		_displayMode
  3410 ;;		_displaySID
  3411 ;;		_printf
  3412 ;; This function is called by:
  3413 ;;		_continuousMode
  3414 ;;		_nullMode
  3415 ;;		_main
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           	psect	text6
  3420  014864                     __ptext6:
  3421                           	opt stack 0
  3422  014864                     _displayText:
  3423                           	opt stack 10
  3424                           
  3425                           ;main.c: 103: printf("%c", (char)35);
  3426                           
  3427                           ;incstack = 0
  3428  014864  0EFC               	movlw	low STR_2
  3429  014866  0100               	movlb	0	; () banked
  3430  014868  6FCE               	movwf	printf@f& (0+255),b
  3431  01486A  0EFF               	movlw	high STR_2
  3432  01486C  0100               	movlb	0	; () banked
  3433  01486E  6FCF               	movwf	(printf@f+1)& (0+255),b
  3434  014870  0E00               	movlw	0
  3435  014872  0100               	movlb	0	; () banked
  3436  014874  6FD1               	movwf	(?_printf+3)& (0+255),b
  3437  014876  0E23               	movlw	35
  3438  014878  6FD0               	movwf	(?_printf+2)& (0+255),b
  3439  01487A  EC7E  F087         	call	_printf	;wreg free
  3440                           
  3441                           ;main.c: 106: displaySID();
  3442  01487E  ECB3  F0A4         	call	_displaySID	;wreg free
  3443                           
  3444                           ;main.c: 109: displayMode();
  3445  014882  ECA1  F099         	call	_displayMode	;wreg free
  3446                           
  3447                           ;main.c: 112: Console_Render();
  3448  014886  ECAC  F089         	call	_Console_Render	;wreg free
  3449  01488A  0012               	return		;funcret
  3450  01488C                     __end_of_displayText:
  3451                           	opt stack 0
  3452                           tosu	equ	0xFFF
  3453                           tosh	equ	0xFFE
  3454                           tosl	equ	0xFFD
  3455                           pclath	equ	0xFFA
  3456                           tblptru	equ	0xFF8
  3457                           tblptrh	equ	0xFF7
  3458                           tblptrl	equ	0xFF6
  3459                           tablat	equ	0xFF5
  3460                           postinc0	equ	0xFEE
  3461                           plusw0	equ	0xFEB
  3462                           wreg	equ	0xFE8
  3463                           postdec1	equ	0xFE5
  3464                           fsr1h	equ	0xFE2
  3465                           fsr1l	equ	0xFE1
  3466                           postinc2	equ	0xFDE
  3467                           plusw2	equ	0xFDB
  3468                           status	equ	0xFD8
  3469                           
  3470 ;; *************** function _displaySID *****************
  3471 ;; Defined at:
  3472 ;;		line 95 in file "main.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      void 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;Total ram usage:        0 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:   13
  3493 ;; This function calls:
  3494 ;;		_Console_SetForecolour
  3495 ;;		_printf
  3496 ;; This function is called by:
  3497 ;;		_displayText
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text7
  3502  014966                     __ptext7:
  3503                           	opt stack 0
  3504  014966                     _displaySID:
  3505                           	opt stack 14
  3506                           
  3507                           ;main.c: 96: Console_SetForecolour(0x07E0);
  3508                           
  3509                           ;incstack = 0
  3510  014966  0E07               	movlw	7
  3511  014968  0100               	movlb	0	; () banked
  3512  01496A  6FB9               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3513  01496C  0EE0               	movlw	224
  3514  01496E  6FB8               	movwf	Console_SetForecolour@pColour& (0+255),b
  3515  014970  EC0E  F0A6         	call	_Console_SetForecolour	;wreg free
  3516                           
  3517                           ;main.c: 97: printf("Jamin Early 99133391\n");
  3518  014974  0E81               	movlw	low STR_1
  3519  014976  0100               	movlb	0	; () banked
  3520  014978  6FCE               	movwf	printf@f& (0+255),b
  3521  01497A  0EFF               	movlw	high STR_1
  3522  01497C  0100               	movlb	0	; () banked
  3523  01497E  6FCF               	movwf	(printf@f+1)& (0+255),b
  3524  014980  EC7E  F087         	call	_printf	;wreg free
  3525  014984  0012               	return		;funcret
  3526  014986                     __end_of_displaySID:
  3527                           	opt stack 0
  3528                           tosu	equ	0xFFF
  3529                           tosh	equ	0xFFE
  3530                           tosl	equ	0xFFD
  3531                           pclath	equ	0xFFA
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           postinc0	equ	0xFEE
  3537                           plusw0	equ	0xFEB
  3538                           wreg	equ	0xFE8
  3539                           postdec1	equ	0xFE5
  3540                           fsr1h	equ	0xFE2
  3541                           fsr1l	equ	0xFE1
  3542                           postinc2	equ	0xFDE
  3543                           plusw2	equ	0xFDB
  3544                           status	equ	0xFD8
  3545                           
  3546 ;; *************** function _displayMode *****************
  3547 ;; Defined at:
  3548 ;;		line 141 in file "main.c"
  3549 ;; Parameters:    Size  Location     Type
  3550 ;;		None
  3551 ;; Auto vars:     Size  Location     Type
  3552 ;;  mode            2   44[BANK0 ] int 
  3553 ;; Return value:  Size  Location     Type
  3554 ;;                  1    wreg      void 
  3555 ;; Registers used:
  3556 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3563 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3564 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;Total ram usage:        4 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:   17
  3569 ;; This function calls:
  3570 ;;		_Console_SetForecolour
  3571 ;;		_getMode
  3572 ;;		_printf
  3573 ;; This function is called by:
  3574 ;;		_displayText
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           	psect	text8
  3579  013342                     __ptext8:
  3580                           	opt stack 0
  3581  013342                     _displayMode:
  3582                           	opt stack 10
  3583                           
  3584                           ;main.c: 142: Console_SetForecolour(0xF800);
  3585                           
  3586                           ;incstack = 0
  3587  013342  0EF8               	movlw	248
  3588  013344  0100               	movlb	0	; () banked
  3589  013346  6FB9               	movwf	(Console_SetForecolour@pColour+1)& (0+255),b
  3590  013348  0E00               	movlw	0
  3591  01334A  6FB8               	movwf	Console_SetForecolour@pColour& (0+255),b
  3592  01334C  EC0E  F0A6         	call	_Console_SetForecolour	;wreg free
  3593                           
  3594                           ;main.c: 143: int mode = getMode();
  3595  013350  EC66  F09B         	call	_getMode	;wreg free
  3596  013354  C0DC  F0E4         	movff	?_getMode,displayMode@mode
  3597  013358  C0DD  F0E5         	movff	?_getMode+1,displayMode@mode+1
  3598                           
  3599                           ;main.c: 144: printf("Current Mode:\n");
  3600  01335C  0E97               	movlw	low STR_3
  3601  01335E  0100               	movlb	0	; () banked
  3602  013360  6FCE               	movwf	printf@f& (0+255),b
  3603  013362  0EFF               	movlw	high STR_3
  3604  013364  0100               	movlb	0	; () banked
  3605  013366  6FCF               	movwf	(printf@f+1)& (0+255),b
  3606  013368  EC7E  F087         	call	_printf	;wreg free
  3607                           
  3608                           ;main.c: 145: switch (mode) {
  3609  01336C  D024               	goto	l2035
  3610  01336E                     
  3611                           ;main.c: 147: printf(" Position\n\n");
  3612  01336E  0EDD               	movlw	low STR_4
  3613  013370  0100               	movlb	0	; () banked
  3614  013372  6FCE               	movwf	printf@f& (0+255),b
  3615  013374  0EFF               	movlw	high STR_4
  3616  013376  0100               	movlb	0	; () banked
  3617  013378  6FCF               	movwf	(printf@f+1)& (0+255),b
  3618  01337A  EC7E  F087         	call	_printf	;wreg free
  3619                           
  3620                           ;main.c: 148: break;
  3621  01337E  0012               	return	
  3622  013380                     
  3623                           ;main.c: 150: printf(" Step\n\n");
  3624  013380  0EF4               	movlw	low STR_5
  3625  013382  0100               	movlb	0	; () banked
  3626  013384  6FCE               	movwf	printf@f& (0+255),b
  3627  013386  0EFF               	movlw	high STR_5
  3628  013388  0100               	movlb	0	; () banked
  3629  01338A  6FCF               	movwf	(printf@f+1)& (0+255),b
  3630  01338C  EC7E  F087         	call	_printf	;wreg free
  3631                           
  3632                           ;main.c: 151: break;
  3633  013390  0012               	return	
  3634  013392                     
  3635                           ;main.c: 153: printf(" Continuous\n\n");
  3636  013392  0EB5               	movlw	low STR_6
  3637  013394  0100               	movlb	0	; () banked
  3638  013396  6FCE               	movwf	printf@f& (0+255),b
  3639  013398  0EFF               	movlw	high STR_6
  3640  01339A  0100               	movlb	0	; () banked
  3641  01339C  6FCF               	movwf	(printf@f+1)& (0+255),b
  3642  01339E  EC7E  F087         	call	_printf	;wreg free
  3643                           
  3644                           ;main.c: 154: break;
  3645  0133A2  0012               	return	
  3646  0133A4                     
  3647                           ;main.c: 156: printf(" Undefined\n\n");
  3648  0133A4  0EC3               	movlw	low STR_7
  3649  0133A6  0100               	movlb	0	; () banked
  3650  0133A8  6FCE               	movwf	printf@f& (0+255),b
  3651  0133AA  0EFF               	movlw	high STR_7
  3652  0133AC  0100               	movlb	0	; () banked
  3653  0133AE  6FCF               	movwf	(printf@f+1)& (0+255),b
  3654  0133B0  EC7E  F087         	call	_printf	;wreg free
  3655                           
  3656                           ;main.c: 158: }
  3657                           
  3658                           ;main.c: 157: break;
  3659  0133B4  0012               	return	
  3660  0133B6                     l2035:
  3661  0133B6  C0E4  F0E2         	movff	displayMode@mode,??_displayMode
  3662  0133BA  C0E5  F0E3         	movff	displayMode@mode+1,??_displayMode+1
  3663                           
  3664                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3665                           ; Switch size 1, requested type "space"
  3666                           ; Number of cases is 1, Range of values is 0 to 0
  3667                           ; switch strategies available:
  3668                           ; Name         Instructions Cycles
  3669                           ; simple_byte            4     3 (average)
  3670                           ;	Chosen strategy is simple_byte
  3671  0133BE  0100               	movlb	0	; () banked
  3672  0133C0  51E3               	movf	(??_displayMode+1)& (0+255),w,b
  3673  0133C2  0A00               	xorlw	0	; case 0
  3674  0133C4  A4D8               	btfss	status,2,c
  3675  0133C6  D7EE               	goto	l2040
  3676                           
  3677                           ; BSR set to: 0
  3678                           ; Switch size 1, requested type "space"
  3679                           ; Number of cases is 3, Range of values is 1 to 3
  3680                           ; switch strategies available:
  3681                           ; Name         Instructions Cycles
  3682                           ; simple_byte           10     6 (average)
  3683                           ;	Chosen strategy is simple_byte
  3684  0133C8  0100               	movlb	0	; () banked
  3685  0133CA  51E2               	movf	??_displayMode& (0+255),w,b
  3686  0133CC  0A01               	xorlw	1	; case 1
  3687  0133CE  B4D8               	btfsc	status,2,c
  3688  0133D0  D7E0               	goto	l2039
  3689  0133D2  0A03               	xorlw	3	; case 2
  3690  0133D4  B4D8               	btfsc	status,2,c
  3691  0133D6  D7D4               	goto	l2038
  3692  0133D8  0A01               	xorlw	1	; case 3
  3693  0133DA  B4D8               	btfsc	status,2,c
  3694  0133DC  D7C8               	goto	l2036
  3695  0133DE  D7E2               	goto	l2040
  3696  0133E0                     __end_of_displayMode:
  3697                           	opt stack 0
  3698                           tosu	equ	0xFFF
  3699                           tosh	equ	0xFFE
  3700                           tosl	equ	0xFFD
  3701                           pclath	equ	0xFFA
  3702                           tblptru	equ	0xFF8
  3703                           tblptrh	equ	0xFF7
  3704                           tblptrl	equ	0xFF6
  3705                           tablat	equ	0xFF5
  3706                           postinc0	equ	0xFEE
  3707                           plusw0	equ	0xFEB
  3708                           wreg	equ	0xFE8
  3709                           postdec1	equ	0xFE5
  3710                           fsr1h	equ	0xFE2
  3711                           fsr1l	equ	0xFE1
  3712                           postinc2	equ	0xFDE
  3713                           plusw2	equ	0xFDB
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function _printf *****************
  3717 ;; Defined at:
  3718 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  3721 ;;		 -> STR_13(24), STR_12(24), STR_11(24), STR_10(13), 
  3722 ;;		 -> STR_9(15), STR_8(11), STR_7(13), STR_6(14), 
  3723 ;;		 -> STR_5(8), STR_4(12), STR_3(15), STR_2(3), 
  3724 ;;		 -> STR_1(22), 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;  val             4   35[BANK0 ] unsigned long 
  3727 ;;  tmpval          4    0        struct .
  3728 ;;  cp              3    0        PTR const unsigned char 
  3729 ;;  ap              2   33[BANK0 ] PTR void [1]
  3730 ;;		 -> ?_printf(2), 
  3731 ;;  prec            2   30[BANK0 ] int 
  3732 ;;  len             2    0        unsigned int 
  3733 ;;  c               1   39[BANK0 ] char 
  3734 ;;  flag            1   32[BANK0 ] unsigned char 
  3735 ;; Return value:  Size  Location     Type
  3736 ;;                  2   22[BANK0 ] int 
  3737 ;; Registers used:
  3738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3739 ;; Tracked objects:
  3740 ;;		On entry : 0/0
  3741 ;;		On exit  : 0/0
  3742 ;;		Unchanged: 0/0
  3743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3744 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3746 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;Total ram usage:       18 bytes
  3749 ;; Hardware stack levels used:    1
  3750 ;; Hardware stack levels required when called:   12
  3751 ;; This function calls:
  3752 ;;		___lldiv
  3753 ;;		___llmod
  3754 ;;		_putch
  3755 ;; This function is called by:
  3756 ;;		_displaySID
  3757 ;;		_displayText
  3758 ;;		_displayMode
  3759 ;;		_continuousMode
  3760 ;;		_nullMode
  3761 ;; This function uses a non-reentrant model
  3762 ;;
  3763                           
  3764                           	psect	text9
  3765  010EFC                     __ptext9:
  3766                           	opt stack 0
  3767  010EFC                     _printf:
  3768                           	opt stack 16
  3769                           
  3770                           ;doprnt.c: 466: va_list ap;
  3771                           ;doprnt.c: 499: signed char c;
  3772                           ;doprnt.c: 504: int prec;
  3773                           ;doprnt.c: 508: unsigned char flag;
  3774                           ;doprnt.c: 523: union {
  3775                           ;doprnt.c: 524: unsigned long vd;
  3776                           ;doprnt.c: 525: double integ;
  3777                           ;doprnt.c: 526: } tmpval;
  3778                           ;doprnt.c: 528: unsigned long val;
  3779                           ;doprnt.c: 529: unsigned len;
  3780                           ;doprnt.c: 530: const char * cp;
  3781                           ;doprnt.c: 533: *ap = __va_start();
  3782                           
  3783                           ;incstack = 0
  3784  010EFC  0ED0               	movlw	low (?_printf+2)
  3785  010EFE  0100               	movlb	0	; () banked
  3786  010F00  6FD9               	movwf	printf@ap& (0+255),b
  3787  010F02  0E00               	movlw	high (?_printf+2)
  3788  010F04  0100               	movlb	0	; () banked
  3789  010F06  6FDA               	movwf	(printf@ap+1)& (0+255),b
  3790                           
  3791                           ;doprnt.c: 536: while(c = *f++) {
  3792  010F08  D101               	goto	u7850
  3793  010F0A                     
  3794                           ; BSR set to: 0
  3795                           ;doprnt.c: 538: if(c != '%')
  3796                           
  3797                           ; BSR set to: 0
  3798  010F0A  0E25               	movlw	37
  3799  010F0C  0100               	movlb	0	; () banked
  3800  010F0E  19DF               	xorwf	printf@c& (0+255),w,b
  3801  010F10  B4D8               	btfsc	status,2,c
  3802  010F12  D005               	goto	l2097
  3803                           
  3804                           ; BSR set to: 0
  3805                           ;doprnt.c: 540: {
  3806                           ;doprnt.c: 541: (putch(c) );
  3807  010F14  0100               	movlb	0	; () banked
  3808  010F16  51DF               	movf	printf@c& (0+255),w,b
  3809  010F18  ECD0  F0A5         	call	_putch
  3810                           
  3811                           ;doprnt.c: 542: continue;
  3812  010F1C  D0F7               	goto	u7850
  3813  010F1E                     l2097:
  3814                           
  3815                           ;doprnt.c: 543: }
  3816                           ;doprnt.c: 548: flag = 0;
  3817  010F1E  0E00               	movlw	0
  3818  010F20  0100               	movlb	0	; () banked
  3819  010F22  6FD8               	movwf	printf@flag& (0+255),b
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;doprnt.c: 635: switch(c = *f++) {
  3823                           
  3824                           ;doprnt.c: 633: loop:
  3825  010F24  D014               	goto	l2099
  3826  010F26                     
  3827                           ; BSR set to: 0
  3828                           ;doprnt.c: 643: flag |= 0x10;
  3829                           
  3830                           ; BSR set to: 0
  3831  010F26  0100               	movlb	0	; () banked
  3832  010F28  89D8               	bsf	printf@flag& (0+255),4,b
  3833                           
  3834                           ;doprnt.c: 644: goto loop;
  3835  010F2A  D011               	goto	l2099
  3836  010F2C                     
  3837                           ; BSR set to: 0
  3838                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3839                           
  3840                           ; BSR set to: 0
  3841  010F2C  C0D9  FFD9         	movff	printf@ap,fsr2l
  3842  010F30  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  3843  010F34  50DF               	movf	indf2,w,c
  3844  010F36  0100               	movlb	0	; () banked
  3845  010F38  6FDF               	movwf	printf@c& (0+255),b
  3846                           
  3847                           ; BSR set to: 0
  3848  010F3A  0E02               	movlw	2
  3849  010F3C  0100               	movlb	0	; () banked
  3850  010F3E  27D9               	addwf	printf@ap& (0+255),f,b
  3851  010F40  0E00               	movlw	0
  3852  010F42  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  3853  010F44                     
  3854                           ; BSR set to: 0
  3855                           ;doprnt.c: 809: (putch(c) );
  3856                           
  3857                           ; BSR set to: 0
  3858  010F44  0100               	movlb	0	; () banked
  3859  010F46  51DF               	movf	printf@c& (0+255),w,b
  3860  010F48  ECD0  F0A5         	call	_putch
  3861                           
  3862                           ;doprnt.c: 810: continue;
  3863  010F4C  D0DF               	goto	u7850
  3864  010F4E                     l2099:
  3865  010F4E  C0CE  FFF6         	movff	printf@f,tblptrl
  3866  010F52  C0CF  FFF7         	movff	printf@f+1,tblptrh
  3867  010F56  0100               	movlb	0	; () banked
  3868  010F58  4BCE               	infsnz	printf@f& (0+255),f,b
  3869  010F5A  2BCF               	incf	(printf@f+1)& (0+255),f,b
  3870  010F5C                     	if	0	;tblptru may be non-zero
  3871  010F5C                     	endif
  3872  010F5C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3873  010F5C  0E00               	movlw	low (__mediumconst shr (0+16))
  3874  010F5E  6EF8               	movwf	tblptru,c
  3875  010F60                     	endif
  3876  010F60  0008               	tblrd		*
  3877  010F62  CFF5 F0DF          	movff	tablat,printf@c
  3878  010F66  0100               	movlb	0	; () banked
  3879  010F68  51DF               	movf	printf@c& (0+255),w,b
  3880                           
  3881                           ; Switch size 1, requested type "space"
  3882                           ; Number of cases is 5, Range of values is 0 to 108
  3883                           ; switch strategies available:
  3884                           ; Name         Instructions Cycles
  3885                           ; simple_byte           16     9 (average)
  3886                           ;	Chosen strategy is simple_byte
  3887  010F6A  0A00               	xorlw	0	; case 0
  3888  010F6C  B4D8               	btfsc	status,2,c
  3889  010F6E  0012               	return	
  3890  010F70  0A63               	xorlw	99	; case 99
  3891  010F72  B4D8               	btfsc	status,2,c
  3892  010F74  D7DB               	goto	l2106
  3893  010F76  0A07               	xorlw	7	; case 100
  3894  010F78  B4D8               	btfsc	status,2,c
  3895  010F7A  D007               	goto	l2105
  3896  010F7C  0A0D               	xorlw	13	; case 105
  3897  010F7E  B4D8               	btfsc	status,2,c
  3898  010F80  D004               	goto	l2105
  3899  010F82  0A05               	xorlw	5	; case 108
  3900  010F84  B4D8               	btfsc	status,2,c
  3901  010F86  D7CF               	goto	l2102
  3902  010F88  D7DD               	goto	l2107
  3903  010F8A                     l2105:
  3904                           
  3905                           ;doprnt.c: 1253: {
  3906                           ;doprnt.c: 1255: if(flag & 0x10)
  3907  010F8A  0100               	movlb	0	; () banked
  3908  010F8C  A9D8               	btfss	printf@flag& (0+255),4,b
  3909  010F8E  D00E               	goto	l2108
  3910                           
  3911                           ; BSR set to: 0
  3912                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3913  010F90  C0D9  FFD9         	movff	printf@ap,fsr2l
  3914  010F94  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  3915  010F98  CFDE F0DB          	movff	postinc2,printf@val
  3916  010F9C  CFDE F0DC          	movff	postinc2,printf@val+1
  3917  010FA0  CFDE F0DD          	movff	postinc2,printf@val+2
  3918  010FA4  CFDE F0DE          	movff	postinc2,printf@val+3
  3919                           
  3920                           ; BSR set to: 0
  3921  010FA8  0E04               	movlw	4
  3922  010FAA  D00F               	goto	L1
  3923  010FAC                     l2108:
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;doprnt.c: 1257: else
  3927                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3928                           
  3929                           ; BSR set to: 0
  3930  010FAC  C0D9  FFD9         	movff	printf@ap,fsr2l
  3931  010FB0  C0DA  FFDA         	movff	printf@ap+1,fsr2h
  3932  010FB4  CFDE F0DB          	movff	postinc2,printf@val
  3933  010FB8  CFDD F0DC          	movff	postdec2,printf@val+1
  3934  010FBC  0100               	movlb	0	; () banked
  3935  010FBE  0E00               	movlw	0
  3936  010FC0  BFDC               	btfsc	(printf@val+1)& (0+255),7,b
  3937  010FC2  0EFF               	movlw	-1
  3938  010FC4  6FDD               	movwf	(printf@val+2)& (0+255),b
  3939  010FC6  6FDE               	movwf	(printf@val+3)& (0+255),b
  3940                           
  3941                           ; BSR set to: 0
  3942  010FC8  0E02               	movlw	2
  3943  010FCA                     L1:
  3944  010FCA  0100               	movlb	0	; () banked
  3945  010FCC  27D9               	addwf	printf@ap& (0+255),f,b
  3946  010FCE  0E00               	movlw	0
  3947  010FD0  23DA               	addwfc	(printf@ap+1)& (0+255),f,b
  3948                           
  3949                           ; BSR set to: 0
  3950                           ;doprnt.c: 1261: if((long)val < 0) {
  3951                           
  3952                           ; BSR set to: 0
  3953  010FD2  0100               	movlb	0	; () banked
  3954  010FD4  AFDE               	btfss	(printf@val+3)& (0+255),7,b
  3955  010FD6  D00C               	goto	l2110
  3956                           
  3957                           ; BSR set to: 0
  3958                           ;doprnt.c: 1262: flag |= 0x03;
  3959  010FD8  0E03               	movlw	3
  3960  010FDA  0100               	movlb	0	; () banked
  3961  010FDC  13D8               	iorwf	printf@flag& (0+255),f,b
  3962                           
  3963                           ; BSR set to: 0
  3964                           ;doprnt.c: 1263: val = -val;
  3965  010FDE  0100               	movlb	0	; () banked
  3966  010FE0  1FDE               	comf	(printf@val+3)& (0+255),f,b
  3967  010FE2  1FDD               	comf	(printf@val+2)& (0+255),f,b
  3968  010FE4  1FDC               	comf	(printf@val+1)& (0+255),f,b
  3969  010FE6  6DDB               	negf	printf@val& (0+255),b
  3970  010FE8  0E00               	movlw	0
  3971  010FEA  23DC               	addwfc	(printf@val+1)& (0+255),f,b
  3972  010FEC  23DD               	addwfc	(printf@val+2)& (0+255),f,b
  3973  010FEE  23DE               	addwfc	(printf@val+3)& (0+255),f,b
  3974  010FF0                     l2110:
  3975                           
  3976                           ; BSR set to: 0
  3977                           ;doprnt.c: 1264: }
  3978                           ;doprnt.c: 1266: }
  3979                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3980                           
  3981                           ; BSR set to: 0
  3982  010FF0  0E01               	movlw	1
  3983  010FF2  0100               	movlb	0	; () banked
  3984  010FF4  6FDF               	movwf	printf@c& (0+255),b
  3985  010FF6                     l11285:
  3986                           
  3987                           ; BSR set to: 0
  3988  010FF6  0E0A               	movlw	10
  3989  010FF8  0100               	movlb	0	; () banked
  3990  010FFA  19DF               	xorwf	printf@c& (0+255),w,b
  3991  010FFC  B4D8               	btfsc	status,2,c
  3992  010FFE  D021               	goto	u7830
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;doprnt.c: 1306: if(val < dpowers[c])
  3996                           
  3997                           ; BSR set to: 0
  3998                           
  3999                           ; BSR set to: 0
  4000  011000  0100               	movlb	0	; () banked
  4001  011002  51DF               	movf	printf@c& (0+255),w,b
  4002  011004  0D04               	mullw	4
  4003  011006  0E21               	movlw	low _dpowers
  4004  011008  24F3               	addwf	prodl,w,c
  4005  01100A  6EF6               	movwf	tblptrl,c
  4006  01100C  0EFD               	movlw	high _dpowers
  4007  01100E  20F4               	addwfc	prodh,w,c
  4008  011010  6EF7               	movwf	tblptrh,c
  4009  011012                     	if	1	;There are 3 active tblptr bytes
  4010  011012  6AF8               	clrf	tblptru,c
  4011  011014  0E00               	movlw	low (__mediumconst shr (0+16))
  4012  011016  22F8               	addwfc	tblptru,f,c
  4013  011018                     	endif
  4014  011018  0009               	tblrd		*+
  4015  01101A  50F5               	movf	tablat,w,c
  4016  01101C  0100               	movlb	0	; () banked
  4017  01101E  5DDB               	subwf	printf@val& (0+255),w,b
  4018  011020  0009               	tblrd		*+
  4019  011022  50F5               	movf	tablat,w,c
  4020  011024  0100               	movlb	0	; () banked
  4021  011026  59DC               	subwfb	(printf@val+1)& (0+255),w,b
  4022  011028  0009               	tblrd		*+
  4023  01102A  50F5               	movf	tablat,w,c
  4024  01102C  0100               	movlb	0	; () banked
  4025  01102E  59DD               	subwfb	(printf@val+2)& (0+255),w,b
  4026  011030  0009               	tblrd		*+
  4027  011032  50F5               	movf	tablat,w,c
  4028  011034  0100               	movlb	0	; () banked
  4029  011036  59DE               	subwfb	(printf@val+3)& (0+255),w,b
  4030  011038  A0D8               	btfss	status,0,c
  4031  01103A  D003               	goto	u7830
  4032                           
  4033                           ; BSR set to: 0
  4034                           
  4035                           ; BSR set to: 0
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;doprnt.c: 1307: break;
  4039  01103C  0100               	movlb	0	; () banked
  4040  01103E  2BDF               	incf	printf@c& (0+255),f,b
  4041  011040  D7DA               	goto	l11285
  4042  011042                     u7830:
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;doprnt.c: 1422: {
  4046                           ;doprnt.c: 1438: if(flag & 0x03)
  4047                           
  4048                           ; BSR set to: 0
  4049  011042  C0D8  F0D4         	movff	printf@flag,??_printf
  4050  011046  0E03               	movlw	3
  4051  011048  0100               	movlb	0	; () banked
  4052  01104A  17D4               	andwf	??_printf& (0+255),f,b
  4053  01104C  B4D8               	btfsc	status,2,c
  4054  01104E  D003               	goto	l2114
  4055                           
  4056                           ; BSR set to: 0
  4057                           ;doprnt.c: 1439: (putch('-') );
  4058  011050  0E2D               	movlw	45
  4059  011052  ECD0  F0A5         	call	_putch
  4060  011056                     l2114:
  4061                           
  4062                           ;doprnt.c: 1469: }
  4063                           ;doprnt.c: 1472: prec = c;
  4064  011056  0100               	movlb	0	; () banked
  4065  011058  51DF               	movf	printf@c& (0+255),w,b
  4066  01105A  0100               	movlb	0	; () banked
  4067  01105C  6FD6               	movwf	printf@prec& (0+255),b
  4068  01105E  6BD7               	clrf	(printf@prec+1)& (0+255),b
  4069  011060  BFD6               	btfsc	printf@prec& (0+255),7,b
  4070  011062  07D7               	decf	(printf@prec+1)& (0+255),f,b
  4071                           
  4072                           ;doprnt.c: 1474: while(prec--) {
  4073  011064  D048               	goto	l2115
  4074  011066                     l11303:
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;doprnt.c: 1478: {
  4078                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4079  011066  C0D6  F0D4         	movff	printf@prec,??_printf
  4080  01106A  C0D7  F0D5         	movff	printf@prec+1,??_printf+1
  4081  01106E  0100               	movlb	0	; () banked
  4082  011070  90D8               	bcf	status,0,c
  4083  011072  37D4               	rlcf	??_printf& (0+255),f,b
  4084  011074  37D5               	rlcf	(??_printf+1)& (0+255),f,b
  4085  011076  0100               	movlb	0	; () banked
  4086  011078  90D8               	bcf	status,0,c
  4087  01107A  37D4               	rlcf	??_printf& (0+255),f,b
  4088  01107C  37D5               	rlcf	(??_printf+1)& (0+255),f,b
  4089  01107E  0E21               	movlw	low _dpowers
  4090  011080  0100               	movlb	0	; () banked
  4091  011082  25D4               	addwf	??_printf& (0+255),w,b
  4092  011084  6EF6               	movwf	tblptrl,c
  4093  011086  0EFD               	movlw	high _dpowers
  4094  011088  21D5               	addwfc	(??_printf+1)& (0+255),w,b
  4095  01108A  6EF7               	movwf	tblptrh,c
  4096  01108C                     	if	1	;There are 3 active tblptr bytes
  4097  01108C  6AF8               	clrf	tblptru,c
  4098  01108E  0E00               	movlw	low (__mediumconst shr (0+16))
  4099  011090  22F8               	addwfc	tblptru,f,c
  4100  011092                     	endif
  4101  011092  0009               	tblrd		*+
  4102  011094  CFF5 F0BC          	movff	tablat,___lldiv@divisor
  4103  011098  0009               	tblrd		*+
  4104  01109A  CFF5 F0BD          	movff	tablat,___lldiv@divisor+1
  4105  01109E  0009               	tblrd		*+
  4106  0110A0  CFF5 F0BE          	movff	tablat,___lldiv@divisor+2
  4107  0110A4  000A               	tblrd		*-
  4108  0110A6  CFF5 F0BF          	movff	tablat,___lldiv@divisor+3
  4109  0110AA  C0DB  F0B8         	movff	printf@val,___lldiv@dividend
  4110  0110AE  C0DC  F0B9         	movff	printf@val+1,___lldiv@dividend+1
  4111  0110B2  C0DD  F0BA         	movff	printf@val+2,___lldiv@dividend+2
  4112  0110B6  C0DE  F0BB         	movff	printf@val+3,___lldiv@dividend+3
  4113  0110BA  ECEE  F095         	call	___lldiv	;wreg free
  4114  0110BE  C0B8  F0C5         	movff	?___lldiv,___llmod@dividend
  4115  0110C2  C0B9  F0C6         	movff	?___lldiv+1,___llmod@dividend+1
  4116  0110C6  C0BA  F0C7         	movff	?___lldiv+2,___llmod@dividend+2
  4117  0110CA  C0BB  F0C8         	movff	?___lldiv+3,___llmod@dividend+3
  4118  0110CE  0E0A               	movlw	10
  4119  0110D0  0100               	movlb	0	; () banked
  4120  0110D2  6FC9               	movwf	___llmod@divisor& (0+255),b
  4121  0110D4  0E00               	movlw	0
  4122  0110D6  6FCA               	movwf	(___llmod@divisor+1)& (0+255),b
  4123  0110D8  0E00               	movlw	0
  4124  0110DA  6FCB               	movwf	(___llmod@divisor+2)& (0+255),b
  4125  0110DC  0E00               	movlw	0
  4126  0110DE  6FCC               	movwf	(___llmod@divisor+3)& (0+255),b
  4127  0110E0  EC3E  F09A         	call	___llmod	;wreg free
  4128  0110E4  0100               	movlb	0	; () banked
  4129  0110E6  51C5               	movf	?___llmod& (0+255),w,b
  4130  0110E8  0F30               	addlw	48
  4131  0110EA  0100               	movlb	0	; () banked
  4132  0110EC  6FDF               	movwf	printf@c& (0+255),b
  4133                           
  4134                           ; BSR set to: 0
  4135                           ;doprnt.c: 1523: }
  4136                           ;doprnt.c: 1524: (putch(c) );
  4137  0110EE  0100               	movlb	0	; () banked
  4138  0110F0  51DF               	movf	printf@c& (0+255),w,b
  4139  0110F2  ECD0  F0A5         	call	_putch
  4140  0110F6                     l2115:
  4141  0110F6  0100               	movlb	0	; () banked
  4142  0110F8  07D6               	decf	printf@prec& (0+255),f,b
  4143  0110FA  A0D8               	btfss	status,0,c
  4144  0110FC  07D7               	decf	(printf@prec+1)& (0+255),f,b
  4145  0110FE  0100               	movlb	0	; () banked
  4146  011100  29D6               	incf	printf@prec& (0+255),w,b
  4147  011102  E1B1               	bnz	l11303
  4148  011104  0100               	movlb	0	; () banked
  4149  011106  29D7               	incf	(printf@prec+1)& (0+255),w,b
  4150  011108  A4D8               	btfss	status,2,c
  4151  01110A  D7AD               	goto	l2116
  4152  01110C                     u7850:
  4153                           
  4154                           ; BSR set to: 0
  4155                           
  4156                           ; BSR set to: 0
  4157  01110C  C0CE  FFF6         	movff	printf@f,tblptrl
  4158  011110  C0CF  FFF7         	movff	printf@f+1,tblptrh
  4159  011114  0100               	movlb	0	; () banked
  4160  011116  4BCE               	infsnz	printf@f& (0+255),f,b
  4161  011118  2BCF               	incf	(printf@f+1)& (0+255),f,b
  4162  01111A                     	if	0	;tblptru may be non-zero
  4163  01111A                     	endif
  4164  01111A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4165  01111A  0E00               	movlw	low (__mediumconst shr (0+16))
  4166  01111C  6EF8               	movwf	tblptru,c
  4167  01111E                     	endif
  4168  01111E  0008               	tblrd		*
  4169  011120  CFF5 F0DF          	movff	tablat,printf@c
  4170  011124  0100               	movlb	0	; () banked
  4171  011126  51DF               	movf	printf@c& (0+255),w,b
  4172  011128  B4D8               	btfsc	status,2,c
  4173  01112A  0012               	return	
  4174  01112C  D6EE               	goto	l2096
  4175  01112E                     __end_of_printf:
  4176                           	opt stack 0
  4177                           tosu	equ	0xFFF
  4178                           tosh	equ	0xFFE
  4179                           tosl	equ	0xFFD
  4180                           pclath	equ	0xFFA
  4181                           tblptru	equ	0xFF8
  4182                           tblptrh	equ	0xFF7
  4183                           tblptrl	equ	0xFF6
  4184                           tablat	equ	0xFF5
  4185                           prodh	equ	0xFF4
  4186                           prodl	equ	0xFF3
  4187                           postinc0	equ	0xFEE
  4188                           plusw0	equ	0xFEB
  4189                           wreg	equ	0xFE8
  4190                           postdec1	equ	0xFE5
  4191                           fsr1h	equ	0xFE2
  4192                           fsr1l	equ	0xFE1
  4193                           indf2	equ	0xFDF
  4194                           postinc2	equ	0xFDE
  4195                           postdec2	equ	0xFDD
  4196                           plusw2	equ	0xFDB
  4197                           fsr2h	equ	0xFDA
  4198                           fsr2l	equ	0xFD9
  4199                           status	equ	0xFD8
  4200                           
  4201 ;; *************** function _putch *****************
  4202 ;; Defined at:
  4203 ;;		line 454 in file "Library/Console.c"
  4204 ;; Parameters:    Size  Location     Type
  4205 ;;  c               1    wreg     unsigned char 
  4206 ;; Auto vars:     Size  Location     Type
  4207 ;;  c               1   20[BANK0 ] unsigned char 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      void 
  4210 ;; Registers used:
  4211 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;Total ram usage:        1 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; Hardware stack levels required when called:   11
  4224 ;; This function calls:
  4225 ;;		_Console_PrintChar
  4226 ;; This function is called by:
  4227 ;;		_printf
  4228 ;; This function uses a non-reentrant model
  4229 ;;
  4230                           
  4231                           	psect	text10
  4232  014BA0                     __ptext10:
  4233                           	opt stack 0
  4234  014BA0                     _putch:
  4235                           	opt stack 16
  4236                           
  4237                           ; BSR set to: 0
  4238                           ;incstack = 0
  4239                           ;putch@c stored from wreg
  4240  014BA0  0100               	movlb	0	; () banked
  4241  014BA2  6FCC               	movwf	putch@c& (0+255),b
  4242                           
  4243                           ;Console.c: 456: Console_PrintChar(c);
  4244  014BA4  0100               	movlb	0	; () banked
  4245  014BA6  51CC               	movf	putch@c& (0+255),w,b
  4246  014BA8  EC91  F08C         	call	_Console_PrintChar
  4247  014BAC  0012               	return		;funcret
  4248  014BAE                     __end_of_putch:
  4249                           	opt stack 0
  4250                           tosu	equ	0xFFF
  4251                           tosh	equ	0xFFE
  4252                           tosl	equ	0xFFD
  4253                           pclath	equ	0xFFA
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           prodh	equ	0xFF4
  4259                           prodl	equ	0xFF3
  4260                           postinc0	equ	0xFEE
  4261                           plusw0	equ	0xFEB
  4262                           wreg	equ	0xFE8
  4263                           postdec1	equ	0xFE5
  4264                           fsr1h	equ	0xFE2
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           plusw2	equ	0xFDB
  4270                           fsr2h	equ	0xFDA
  4271                           fsr2l	equ	0xFD9
  4272                           status	equ	0xFD8
  4273                           
  4274 ;; *************** function _Console_PrintChar *****************
  4275 ;; Defined at:
  4276 ;;		line 322 in file "Library/Console.c"
  4277 ;; Parameters:    Size  Location     Type
  4278 ;;  pInput          1    wreg     unsigned char 
  4279 ;; Auto vars:     Size  Location     Type
  4280 ;;  pInput          1   19[BANK0 ] unsigned char 
  4281 ;; Return value:  Size  Location     Type
  4282 ;;                  1    wreg      void 
  4283 ;; Registers used:
  4284 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4285 ;; Tracked objects:
  4286 ;;		On entry : 0/0
  4287 ;;		On exit  : 0/0
  4288 ;;		Unchanged: 0/0
  4289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4294 ;;Total ram usage:        4 bytes
  4295 ;; Hardware stack levels used:    1
  4296 ;; Hardware stack levels required when called:   10
  4297 ;; This function calls:
  4298 ;;		_Console_Backspace
  4299 ;;		_Console_FormFeed
  4300 ;;		_Console_IncrementCursor
  4301 ;;		_Console_NewLine
  4302 ;;		_Console_ResetCursor
  4303 ;;		_Console_Tab
  4304 ;; This function is called by:
  4305 ;;		_putch
  4306 ;;		_Console_PrintString
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text11
  4311  011922                     __ptext11:
  4312                           	opt stack 0
  4313  011922                     _Console_PrintChar:
  4314                           	opt stack 16
  4315                           
  4316                           ;incstack = 0
  4317                           ;Console_PrintChar@pInput stored from wreg
  4318  011922  0100               	movlb	0	; () banked
  4319  011924  6FCB               	movwf	Console_PrintChar@pInput& (0+255),b
  4320                           
  4321                           ;Console.c: 324: switch(pInput)
  4322  011926  D0B1               	goto	l1036
  4323  011928                     
  4324                           ;Console.c: 327: case '\n':
  4325                           ;Console.c: 328: Console_NewLine();
  4326  011928  EC50  F099         	call	_Console_NewLine	;wreg free
  4327                           
  4328                           ;Console.c: 329: return;
  4329  01192C  0012               	return	
  4330  01192E                     
  4331                           ;Console.c: 331: Console_Backspace();
  4332  01192E  EC90  F09F         	call	_Console_Backspace	;wreg free
  4333                           
  4334                           ;Console.c: 332: return;
  4335  011932  0012               	return	
  4336  011934                     
  4337                           ;Console.c: 334: Console_FormFeed();
  4338  011934  EC1F  F09B         	call	_Console_FormFeed	;wreg free
  4339                           
  4340                           ;Console.c: 335: return;
  4341  011938  0012               	return	
  4342  01193A                     
  4343                           ;Console.c: 337: Console_Tab();
  4344  01193A  ECD0  F094         	call	_Console_Tab	;wreg free
  4345                           
  4346                           ;Console.c: 338: return;
  4347  01193E  0012               	return	
  4348  011940                     
  4349                           ;Console.c: 340: Console_IncrementCursor();
  4350  011940  EC9A  F09E         	call	_Console_IncrementCursor	;wreg free
  4351                           
  4352                           ;Console.c: 341: return;
  4353  011944  0012               	return	
  4354  011946                     
  4355                           ;Console.c: 343: Console_ResetCursor();
  4356  011946  ECC3  F0A4         	call	_Console_ResetCursor	;wreg free
  4357                           
  4358                           ;Console.c: 344: return;
  4359  01194A  0012               	return	
  4360  01194C                     
  4361                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4362                           
  4363                           ;Console.c: 349: default:
  4364  01194C  C0CB  F0C8         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4365  011950  0E7F               	movlw	127
  4366  011952  0100               	movlb	0	; () banked
  4367  011954  17C8               	andwf	??_Console_PrintChar& (0+255),f,b
  4368  011956  0100               	movlb	0	; () banked
  4369  011958  517A               	movf	_lBufferY& (0+255),w,b
  4370  01195A  0D14               	mullw	20
  4371  01195C  0E46               	movlw	low _lBuffer
  4372  01195E  0100               	movlb	0	; () banked
  4373  011960  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4374  011962  0E02               	movlw	high _lBuffer
  4375  011964  0100               	movlb	0	; () banked
  4376  011966  6FCA               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4377  011968  50F3               	movf	prodl,w,c
  4378  01196A  0100               	movlb	0	; () banked
  4379  01196C  27C9               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4380  01196E  50F4               	movf	prodh,w,c
  4381  011970  0100               	movlb	0	; () banked
  4382  011972  23CA               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4383  011974  0100               	movlb	0	; () banked
  4384  011976  517B               	movf	_lBufferX& (0+255),w,b
  4385  011978  0D01               	mullw	1
  4386  01197A  50F3               	movf	prodl,w,c
  4387  01197C  0100               	movlb	0	; () banked
  4388  01197E  25C9               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4389  011980  6ED9               	movwf	fsr2l,c
  4390  011982  50F4               	movf	prodh,w,c
  4391  011984  0100               	movlb	0	; () banked
  4392  011986  21CA               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4393  011988  6EDA               	movwf	fsr2h,c
  4394  01198A  50DF               	movf	indf2,w,c
  4395  01198C  0B7F               	andlw	127
  4396  01198E  0100               	movlb	0	; () banked
  4397  011990  19C8               	xorwf	??_Console_PrintChar& (0+255),w,b
  4398  011992  B4D8               	btfsc	status,2,c
  4399  011994  D02E               	goto	l1047
  4400                           
  4401                           ; BSR set to: 0
  4402                           ;Console.c: 351: {
  4403                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4404  011996  0E01               	movlw	1
  4405  011998  0100               	movlb	0	; () banked
  4406  01199A  6FFF               	movwf	_change& (0+255),b
  4407                           
  4408                           ; BSR set to: 0
  4409  01199C  0100               	movlb	0	; () banked
  4410  01199E  517A               	movf	_lBufferY& (0+255),w,b
  4411  0119A0  0D14               	mullw	20
  4412  0119A2  0E46               	movlw	low _lBuffer
  4413  0119A4  0100               	movlb	0	; () banked
  4414  0119A6  6FC8               	movwf	??_Console_PrintChar& (0+255),b
  4415  0119A8  0E02               	movlw	high _lBuffer
  4416  0119AA  0100               	movlb	0	; () banked
  4417  0119AC  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4418  0119AE  50F3               	movf	prodl,w,c
  4419  0119B0  0100               	movlb	0	; () banked
  4420  0119B2  27C8               	addwf	??_Console_PrintChar& (0+255),f,b
  4421  0119B4  50F4               	movf	prodh,w,c
  4422  0119B6  0100               	movlb	0	; () banked
  4423  0119B8  23C9               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4424  0119BA  0100               	movlb	0	; () banked
  4425  0119BC  517B               	movf	_lBufferX& (0+255),w,b
  4426  0119BE  0D01               	mullw	1
  4427  0119C0  50F3               	movf	prodl,w,c
  4428  0119C2  0100               	movlb	0	; () banked
  4429  0119C4  25C8               	addwf	??_Console_PrintChar& (0+255),w,b
  4430  0119C6  6ED9               	movwf	fsr2l,c
  4431  0119C8  50F4               	movf	prodh,w,c
  4432  0119CA  0100               	movlb	0	; () banked
  4433  0119CC  21C9               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4434  0119CE  6EDA               	movwf	fsr2h,c
  4435  0119D0  0100               	movlb	0	; () banked
  4436  0119D2  51CB               	movf	Console_PrintChar@pInput& (0+255),w,b
  4437  0119D4  0980               	iorlw	128
  4438  0119D6  6EDF               	movwf	indf2,c
  4439                           
  4440                           ; BSR set to: 0
  4441                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4442  0119D8  0100               	movlb	0	; () banked
  4443  0119DA  517A               	movf	_lBufferY& (0+255),w,b
  4444  0119DC  0D02               	mullw	2
  4445  0119DE  0E00               	movlw	low _lCBuffer
  4446  0119E0  24F3               	addwf	prodl,w,c
  4447  0119E2  6ED9               	movwf	fsr2l,c
  4448  0119E4  0E01               	movlw	high _lCBuffer
  4449  0119E6  20F4               	addwfc	prodh,w,c
  4450  0119E8  6EDA               	movwf	fsr2h,c
  4451  0119EA  C0FD  FFDE         	movff	_gForecolour,postinc2
  4452  0119EE  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4453  0119F2                     l1047:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;Console.c: 354: }
  4457                           ;Console.c: 368: if(Console_IncrementCursor())
  4458                           
  4459                           ; BSR set to: 0
  4460  0119F2  EC9A  F09E         	call	_Console_IncrementCursor	;wreg free
  4461  0119F6  0900               	iorlw	0
  4462  0119F8  B4D8               	btfsc	status,2,c
  4463  0119FA  0012               	return	
  4464                           
  4465                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4466  0119FC  C0CB  F0C8         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4467  011A00  0E7F               	movlw	127
  4468  011A02  0100               	movlb	0	; () banked
  4469  011A04  17C8               	andwf	??_Console_PrintChar& (0+255),f,b
  4470  011A06  0100               	movlb	0	; () banked
  4471  011A08  517A               	movf	_lBufferY& (0+255),w,b
  4472  011A0A  0D14               	mullw	20
  4473  011A0C  0E46               	movlw	low _lBuffer
  4474  011A0E  0100               	movlb	0	; () banked
  4475  011A10  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4476  011A12  0E02               	movlw	high _lBuffer
  4477  011A14  0100               	movlb	0	; () banked
  4478  011A16  6FCA               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4479  011A18  50F3               	movf	prodl,w,c
  4480  011A1A  0100               	movlb	0	; () banked
  4481  011A1C  27C9               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4482  011A1E  50F4               	movf	prodh,w,c
  4483  011A20  0100               	movlb	0	; () banked
  4484  011A22  23CA               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4485  011A24  0100               	movlb	0	; () banked
  4486  011A26  517B               	movf	_lBufferX& (0+255),w,b
  4487  011A28  0D01               	mullw	1
  4488  011A2A  50F3               	movf	prodl,w,c
  4489  011A2C  0100               	movlb	0	; () banked
  4490  011A2E  25C9               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4491  011A30  6ED9               	movwf	fsr2l,c
  4492  011A32  50F4               	movf	prodh,w,c
  4493  011A34  0100               	movlb	0	; () banked
  4494  011A36  21CA               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4495  011A38  6EDA               	movwf	fsr2h,c
  4496  011A3A  50DF               	movf	indf2,w,c
  4497  011A3C  0B7F               	andlw	127
  4498  011A3E  0100               	movlb	0	; () banked
  4499  011A40  19C8               	xorwf	??_Console_PrintChar& (0+255),w,b
  4500  011A42  B4D8               	btfsc	status,2,c
  4501  011A44  0012               	return	
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4505  011A46  0E01               	movlw	1
  4506  011A48  0100               	movlb	0	; () banked
  4507  011A4A  6FFF               	movwf	_change& (0+255),b
  4508                           
  4509                           ; BSR set to: 0
  4510  011A4C  0100               	movlb	0	; () banked
  4511  011A4E  517A               	movf	_lBufferY& (0+255),w,b
  4512  011A50  0D14               	mullw	20
  4513  011A52  0E46               	movlw	low _lBuffer
  4514  011A54  0100               	movlb	0	; () banked
  4515  011A56  6FC8               	movwf	??_Console_PrintChar& (0+255),b
  4516  011A58  0E02               	movlw	high _lBuffer
  4517  011A5A  0100               	movlb	0	; () banked
  4518  011A5C  6FC9               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4519  011A5E  50F3               	movf	prodl,w,c
  4520  011A60  0100               	movlb	0	; () banked
  4521  011A62  27C8               	addwf	??_Console_PrintChar& (0+255),f,b
  4522  011A64  50F4               	movf	prodh,w,c
  4523  011A66  0100               	movlb	0	; () banked
  4524  011A68  23C9               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4525  011A6A  0100               	movlb	0	; () banked
  4526  011A6C  517B               	movf	_lBufferX& (0+255),w,b
  4527  011A6E  0D01               	mullw	1
  4528  011A70  50F3               	movf	prodl,w,c
  4529  011A72  0100               	movlb	0	; () banked
  4530  011A74  25C8               	addwf	??_Console_PrintChar& (0+255),w,b
  4531  011A76  6ED9               	movwf	fsr2l,c
  4532  011A78  50F4               	movf	prodh,w,c
  4533  011A7A  0100               	movlb	0	; () banked
  4534  011A7C  21C9               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4535  011A7E  6EDA               	movwf	fsr2h,c
  4536  011A80  0100               	movlb	0	; () banked
  4537  011A82  51CB               	movf	Console_PrintChar@pInput& (0+255),w,b
  4538  011A84  0980               	iorlw	128
  4539  011A86  6EDF               	movwf	indf2,c
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;Console.c: 372: };
  4543                           
  4544                           ; BSR set to: 0
  4545                           ;Console.c: 371: return;
  4546                           
  4547                           ; BSR set to: 0
  4548                           
  4549                           ; BSR set to: 0
  4550  011A88  0012               	return	
  4551  011A8A                     l1036:
  4552                           
  4553                           ; BSR set to: 0
  4554  011A8A  0100               	movlb	0	; () banked
  4555  011A8C  51CB               	movf	Console_PrintChar@pInput& (0+255),w,b
  4556                           
  4557                           ; Switch size 1, requested type "space"
  4558                           ; Number of cases is 8, Range of values is 7 to 35
  4559                           ; switch strategies available:
  4560                           ; Name         Instructions Cycles
  4561                           ; simple_byte           25    13 (average)
  4562                           ;	Chosen strategy is simple_byte
  4563  011A8E  0A07               	xorlw	7	; case 7
  4564  011A90  B4D8               	btfsc	status,2,c
  4565  011A92  D756               	goto	l1043
  4566  011A94  0A0F               	xorlw	15	; case 8
  4567  011A96  B4D8               	btfsc	status,2,c
  4568  011A98  D74A               	goto	l1040
  4569  011A9A  0A01               	xorlw	1	; case 9
  4570  011A9C  B4D8               	btfsc	status,2,c
  4571  011A9E  D74D               	goto	l1042
  4572  011AA0  0A03               	xorlw	3	; case 10
  4573  011AA2  B4D8               	btfsc	status,2,c
  4574  011AA4  D741               	goto	l1037
  4575  011AA6  0A06               	xorlw	6	; case 12
  4576  011AA8  B4D8               	btfsc	status,2,c
  4577  011AAA  D744               	goto	l1041
  4578  011AAC  0A01               	xorlw	1	; case 13
  4579  011AAE  B4D8               	btfsc	status,2,c
  4580  011AB0  D73B               	goto	l1037
  4581  011AB2  0A2D               	xorlw	45	; case 32
  4582  011AB4  B4D8               	btfsc	status,2,c
  4583  011AB6  D74A               	goto	l1045
  4584  011AB8  0A03               	xorlw	3	; case 35
  4585  011ABA  B4D8               	btfsc	status,2,c
  4586  011ABC  D744               	goto	l1044
  4587  011ABE  D746               	goto	l1045
  4588  011AC0                     __end_of_Console_PrintChar:
  4589                           	opt stack 0
  4590                           tosu	equ	0xFFF
  4591                           tosh	equ	0xFFE
  4592                           tosl	equ	0xFFD
  4593                           pclath	equ	0xFFA
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           postinc0	equ	0xFEE
  4601                           plusw0	equ	0xFEB
  4602                           wreg	equ	0xFE8
  4603                           postdec1	equ	0xFE5
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           plusw2	equ	0xFDB
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614 ;; *************** function _Console_Tab *****************
  4615 ;; Defined at:
  4616 ;;		line 260 in file "Library/Console.c"
  4617 ;; Parameters:    Size  Location     Type
  4618 ;;		None
  4619 ;; Auto vars:     Size  Location     Type
  4620 ;;  c               1   15[BANK0 ] unsigned char 
  4621 ;;  i               1   14[BANK0 ] unsigned char 
  4622 ;;  t               1   13[BANK0 ] unsigned char 
  4623 ;; Return value:  Size  Location     Type
  4624 ;;                  1    wreg      void 
  4625 ;; Registers used:
  4626 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4627 ;; Tracked objects:
  4628 ;;		On entry : 0/0
  4629 ;;		On exit  : 0/0
  4630 ;;		Unchanged: 0/0
  4631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4633 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4634 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4635 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;Total ram usage:        8 bytes
  4637 ;; Hardware stack levels used:    1
  4638 ;; Hardware stack levels required when called:    9
  4639 ;; This function calls:
  4640 ;;		_Console_ClearCursor
  4641 ;;		_Console_IncrementCursor
  4642 ;;		___awdiv
  4643 ;; This function is called by:
  4644 ;;		_Console_PrintChar
  4645 ;; This function uses a non-reentrant model
  4646 ;;
  4647                           
  4648                           	psect	text12
  4649  0129A0                     __ptext12:
  4650                           	opt stack 0
  4651  0129A0                     _Console_Tab:
  4652                           	opt stack 16
  4653                           
  4654                           ;Console.c: 262: UINT8 i = 0;
  4655                           
  4656                           ;incstack = 0
  4657  0129A0  0E00               	movlw	0
  4658  0129A2  0100               	movlb	0	; () banked
  4659  0129A4  6FC6               	movwf	Console_Tab@i& (0+255),b
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4663  0129A6  0EFA               	movlw	250
  4664  0129A8  2447               	addwf	_gCursor,w,c
  4665  0129AA  0100               	movlb	0	; () banked
  4666  0129AC  6FB8               	movwf	___awdiv@dividend& (0+255),b
  4667  0129AE  0EFF               	movlw	255
  4668  0129B0  2048               	addwfc	_gCursor+1,w,c
  4669  0129B2  0100               	movlb	0	; () banked
  4670  0129B4  6FB9               	movwf	(___awdiv@dividend+1)& (0+255),b
  4671  0129B6  0E00               	movlw	0
  4672  0129B8  0100               	movlb	0	; () banked
  4673  0129BA  6FBB               	movwf	(___awdiv@divisor+1)& (0+255),b
  4674  0129BC  0E06               	movlw	6
  4675  0129BE  6FBA               	movwf	___awdiv@divisor& (0+255),b
  4676  0129C0  EC31  F095         	call	___awdiv	;wreg free
  4677  0129C4  0100               	movlb	0	; () banked
  4678  0129C6  51B8               	movf	?___awdiv& (0+255),w,b
  4679  0129C8  0100               	movlb	0	; () banked
  4680  0129CA  6FC7               	movwf	Console_Tab@c& (0+255),b
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;Console.c: 264: UINT8 t = c/4;
  4684  0129CC  C0C7  F0B8         	movff	Console_Tab@c,___awdiv@dividend
  4685  0129D0  0100               	movlb	0	; () banked
  4686  0129D2  6BB9               	clrf	(___awdiv@dividend+1)& (0+255),b
  4687  0129D4  0E00               	movlw	0
  4688  0129D6  0100               	movlb	0	; () banked
  4689  0129D8  6FBB               	movwf	(___awdiv@divisor+1)& (0+255),b
  4690  0129DA  0E04               	movlw	4
  4691  0129DC  6FBA               	movwf	___awdiv@divisor& (0+255),b
  4692  0129DE  EC31  F095         	call	___awdiv	;wreg free
  4693  0129E2  0100               	movlb	0	; () banked
  4694  0129E4  51B8               	movf	?___awdiv& (0+255),w,b
  4695  0129E6  0100               	movlb	0	; () banked
  4696  0129E8  6FC5               	movwf	Console_Tab@t& (0+255),b
  4697                           
  4698                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4699  0129EA  0E00               	movlw	0
  4700  0129EC  0100               	movlb	0	; () banked
  4701  0129EE  6FC6               	movwf	Console_Tab@i& (0+255),b
  4702  0129F0  D006               	goto	l1009
  4703  0129F2                     
  4704                           ; BSR set to: 0
  4705                           ;Console.c: 266: {
  4706                           ;Console.c: 267: Console_ClearCursor();
  4707                           
  4708                           ; BSR set to: 0
  4709  0129F2  EC00  F0A2         	call	_Console_ClearCursor	;wreg free
  4710                           
  4711                           ;Console.c: 268: Console_IncrementCursor();
  4712  0129F6  EC9A  F09E         	call	_Console_IncrementCursor	;wreg free
  4713  0129FA  0100               	movlb	0	; () banked
  4714  0129FC  2BC6               	incf	Console_Tab@i& (0+255),f,b
  4715  0129FE                     l1009:
  4716                           
  4717                           ; BSR set to: 0
  4718                           
  4719                           ; BSR set to: 0
  4720  0129FE  0100               	movlb	0	; () banked
  4721  012A00  51C5               	movf	Console_Tab@t& (0+255),w,b
  4722  012A02  0D04               	mullw	4
  4723  012A04  1EF3               	comf	prodl,f,c
  4724  012A06  1EF4               	comf	prodh,f,c
  4725  012A08  4AF3               	infsnz	prodl,f,c
  4726  012A0A  2AF4               	incf	prodh,f,c
  4727  012A0C  0100               	movlb	0	; () banked
  4728  012A0E  51C7               	movf	Console_Tab@c& (0+255),w,b
  4729  012A10  0100               	movlb	0	; () banked
  4730  012A12  6FC0               	movwf	??_Console_Tab& (0+255),b
  4731  012A14  6BC1               	clrf	(??_Console_Tab+1)& (0+255),b
  4732  012A16  50F3               	movf	prodl,w,c
  4733  012A18  0100               	movlb	0	; () banked
  4734  012A1A  27C0               	addwf	??_Console_Tab& (0+255),f,b
  4735  012A1C  50F4               	movf	prodh,w,c
  4736  012A1E  0100               	movlb	0	; () banked
  4737  012A20  23C1               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4738  012A22  0100               	movlb	0	; () banked
  4739  012A24  1FC0               	comf	??_Console_Tab& (0+255),f,b
  4740  012A26  1FC1               	comf	(??_Console_Tab+1)& (0+255),f,b
  4741  012A28  4BC0               	infsnz	??_Console_Tab& (0+255),f,b
  4742  012A2A  2BC1               	incf	(??_Console_Tab+1)& (0+255),f,b
  4743  012A2C  0E04               	movlw	4
  4744  012A2E  0100               	movlb	0	; () banked
  4745  012A30  27C0               	addwf	??_Console_Tab& (0+255),f,b
  4746  012A32  0E00               	movlw	0
  4747  012A34  23C1               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4748  012A36  0100               	movlb	0	; () banked
  4749  012A38  51C6               	movf	Console_Tab@i& (0+255),w,b
  4750  012A3A  0100               	movlb	0	; () banked
  4751  012A3C  6FC2               	movwf	(??_Console_Tab+2)& (0+255),b
  4752  012A3E  6BC3               	clrf	(??_Console_Tab+3)& (0+255),b
  4753  012A40  0100               	movlb	0	; () banked
  4754  012A42  51C0               	movf	??_Console_Tab& (0+255),w,b
  4755  012A44  0100               	movlb	0	; () banked
  4756  012A46  5DC2               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4757  012A48  0100               	movlb	0	; () banked
  4758  012A4A  51C3               	movf	(??_Console_Tab+3)& (0+255),w,b
  4759  012A4C  0A80               	xorlw	128
  4760  012A4E  0100               	movlb	0	; () banked
  4761  012A50  6FC4               	movwf	(??_Console_Tab+4)& (0+255),b
  4762  012A52  0100               	movlb	0	; () banked
  4763  012A54  51C1               	movf	(??_Console_Tab+1)& (0+255),w,b
  4764  012A56  0A80               	xorlw	128
  4765  012A58  0100               	movlb	0	; () banked
  4766  012A5A  59C4               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4767  012A5C  B0D8               	btfsc	status,0,c
  4768  012A5E  0012               	return	
  4769  012A60  D7C8               	goto	l1010
  4770  012A62                     __end_of_Console_Tab:
  4771                           	opt stack 0
  4772                           tosu	equ	0xFFF
  4773                           tosh	equ	0xFFE
  4774                           tosl	equ	0xFFD
  4775                           pclath	equ	0xFFA
  4776                           tblptru	equ	0xFF8
  4777                           tblptrh	equ	0xFF7
  4778                           tblptrl	equ	0xFF6
  4779                           tablat	equ	0xFF5
  4780                           prodh	equ	0xFF4
  4781                           prodl	equ	0xFF3
  4782                           postinc0	equ	0xFEE
  4783                           plusw0	equ	0xFEB
  4784                           wreg	equ	0xFE8
  4785                           postdec1	equ	0xFE5
  4786                           fsr1h	equ	0xFE2
  4787                           fsr1l	equ	0xFE1
  4788                           indf2	equ	0xFDF
  4789                           postinc2	equ	0xFDE
  4790                           postdec2	equ	0xFDD
  4791                           plusw2	equ	0xFDB
  4792                           fsr2h	equ	0xFDA
  4793                           fsr2l	equ	0xFD9
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function ___awdiv *****************
  4797 ;; Defined at:
  4798 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  dividend        2    0[BANK0 ] int 
  4801 ;;  divisor         2    2[BANK0 ] int 
  4802 ;; Auto vars:     Size  Location     Type
  4803 ;;  quotient        2    6[BANK0 ] int 
  4804 ;;  sign            1    5[BANK0 ] unsigned char 
  4805 ;;  counter         1    4[BANK0 ] unsigned char 
  4806 ;; Return value:  Size  Location     Type
  4807 ;;                  2    0[BANK0 ] int 
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, status,0
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4815 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4816 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4818 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4819 ;;Total ram usage:        8 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    7
  4822 ;; This function calls:
  4823 ;;		Nothing
  4824 ;; This function is called by:
  4825 ;;		_Console_Tab
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           	psect	text13
  4830  012A62                     __ptext13:
  4831                           	opt stack 0
  4832  012A62                     ___awdiv:
  4833                           	opt stack 17
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;incstack = 0
  4837  012A62  0E00               	movlw	0
  4838  012A64  0100               	movlb	0	; () banked
  4839  012A66  6FBD               	movwf	___awdiv@sign& (0+255),b
  4840                           
  4841                           ; BSR set to: 0
  4842  012A68  0100               	movlb	0	; () banked
  4843  012A6A  AFBB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4844  012A6C  D008               	goto	l2287
  4845                           
  4846                           ; BSR set to: 0
  4847  012A6E  0100               	movlb	0	; () banked
  4848  012A70  6DBA               	negf	___awdiv@divisor& (0+255),b
  4849  012A72  1FBB               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4850  012A74  B0D8               	btfsc	status,0,c
  4851  012A76  2BBB               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4852                           
  4853                           ; BSR set to: 0
  4854  012A78  0E01               	movlw	1
  4855  012A7A  0100               	movlb	0	; () banked
  4856  012A7C  6FBD               	movwf	___awdiv@sign& (0+255),b
  4857  012A7E                     l2287:
  4858                           
  4859                           ; BSR set to: 0
  4860                           
  4861                           ; BSR set to: 0
  4862  012A7E  0100               	movlb	0	; () banked
  4863  012A80  AFB9               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4864  012A82  D008               	goto	l2288
  4865                           
  4866                           ; BSR set to: 0
  4867  012A84  0100               	movlb	0	; () banked
  4868  012A86  6DB8               	negf	___awdiv@dividend& (0+255),b
  4869  012A88  1FB9               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4870  012A8A  B0D8               	btfsc	status,0,c
  4871  012A8C  2BB9               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4872                           
  4873                           ; BSR set to: 0
  4874  012A8E  0E01               	movlw	1
  4875  012A90  0100               	movlb	0	; () banked
  4876  012A92  1BBD               	xorwf	___awdiv@sign& (0+255),f,b
  4877  012A94                     l2288:
  4878                           
  4879                           ; BSR set to: 0
  4880                           
  4881                           ; BSR set to: 0
  4882  012A94  0E00               	movlw	0
  4883  012A96  0100               	movlb	0	; () banked
  4884  012A98  6FBF               	movwf	(___awdiv@quotient+1)& (0+255),b
  4885  012A9A  0E00               	movlw	0
  4886  012A9C  6FBE               	movwf	___awdiv@quotient& (0+255),b
  4887                           
  4888                           ; BSR set to: 0
  4889  012A9E  0100               	movlb	0	; () banked
  4890  012AA0  51BA               	movf	___awdiv@divisor& (0+255),w,b
  4891  012AA2  0100               	movlb	0	; () banked
  4892  012AA4  11BB               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4893  012AA6  B4D8               	btfsc	status,2,c
  4894  012AA8  D02C               	goto	l2295
  4895                           
  4896                           ; BSR set to: 0
  4897  012AAA  0E01               	movlw	1
  4898  012AAC  0100               	movlb	0	; () banked
  4899  012AAE  6FBC               	movwf	___awdiv@counter& (0+255),b
  4900  012AB0  D006               	goto	l2290
  4901  012AB2                     
  4902                           ; BSR set to: 0
  4903                           
  4904                           ; BSR set to: 0
  4905  012AB2  0100               	movlb	0	; () banked
  4906  012AB4  90D8               	bcf	status,0,c
  4907  012AB6  37BA               	rlcf	___awdiv@divisor& (0+255),f,b
  4908  012AB8  37BB               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4909  012ABA  0100               	movlb	0	; () banked
  4910  012ABC  2BBC               	incf	___awdiv@counter& (0+255),f,b
  4911  012ABE                     l2290:
  4912                           
  4913                           ; BSR set to: 0
  4914                           
  4915                           ; BSR set to: 0
  4916  012ABE  0100               	movlb	0	; () banked
  4917  012AC0  AFBB               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4918  012AC2  D7F7               	goto	l2291
  4919  012AC4                     u6970:
  4920                           
  4921                           ; BSR set to: 0
  4922                           
  4923                           ; BSR set to: 0
  4924                           
  4925                           ; BSR set to: 0
  4926  012AC4  0100               	movlb	0	; () banked
  4927  012AC6  90D8               	bcf	status,0,c
  4928  012AC8  37BE               	rlcf	___awdiv@quotient& (0+255),f,b
  4929  012ACA  37BF               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4930                           
  4931                           ; BSR set to: 0
  4932  012ACC  0100               	movlb	0	; () banked
  4933  012ACE  51BA               	movf	___awdiv@divisor& (0+255),w,b
  4934  012AD0  0100               	movlb	0	; () banked
  4935  012AD2  5DB8               	subwf	___awdiv@dividend& (0+255),w,b
  4936  012AD4  0100               	movlb	0	; () banked
  4937  012AD6  51BB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4938  012AD8  0100               	movlb	0	; () banked
  4939  012ADA  59B9               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4940  012ADC  A0D8               	btfss	status,0,c
  4941  012ADE  D00A               	goto	l2294
  4942                           
  4943                           ; BSR set to: 0
  4944  012AE0  0100               	movlb	0	; () banked
  4945  012AE2  51BA               	movf	___awdiv@divisor& (0+255),w,b
  4946  012AE4  0100               	movlb	0	; () banked
  4947  012AE6  5FB8               	subwf	___awdiv@dividend& (0+255),f,b
  4948  012AE8  0100               	movlb	0	; () banked
  4949  012AEA  51BB               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4950  012AEC  0100               	movlb	0	; () banked
  4951  012AEE  5BB9               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4952                           
  4953                           ; BSR set to: 0
  4954  012AF0  0100               	movlb	0	; () banked
  4955  012AF2  81BE               	bsf	___awdiv@quotient& (0+255),0,b
  4956  012AF4                     l2294:
  4957                           
  4958                           ; BSR set to: 0
  4959                           
  4960                           ; BSR set to: 0
  4961  012AF4  0100               	movlb	0	; () banked
  4962  012AF6  90D8               	bcf	status,0,c
  4963  012AF8  33BB               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4964  012AFA  33BA               	rrcf	___awdiv@divisor& (0+255),f,b
  4965                           
  4966                           ; BSR set to: 0
  4967  012AFC  0100               	movlb	0	; () banked
  4968  012AFE  2FBC               	decfsz	___awdiv@counter& (0+255),f,b
  4969  012B00  D7E1               	goto	u6970
  4970  012B02                     l2295:
  4971                           
  4972                           ; BSR set to: 0
  4973                           
  4974                           ; BSR set to: 0
  4975                           
  4976                           ; BSR set to: 0
  4977  012B02  0100               	movlb	0	; () banked
  4978  012B04  51BD               	movf	___awdiv@sign& (0+255),w,b
  4979  012B06  0100               	movlb	0	; () banked
  4980  012B08  B4D8               	btfsc	status,2,c
  4981  012B0A  D005               	goto	l2296
  4982                           
  4983                           ; BSR set to: 0
  4984  012B0C  0100               	movlb	0	; () banked
  4985  012B0E  6DBE               	negf	___awdiv@quotient& (0+255),b
  4986  012B10  1FBF               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4987  012B12  B0D8               	btfsc	status,0,c
  4988  012B14  2BBF               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4989  012B16                     l2296:
  4990                           
  4991                           ; BSR set to: 0
  4992                           
  4993                           ; BSR set to: 0
  4994  012B16  C0BE  F0B8         	movff	___awdiv@quotient,?___awdiv
  4995  012B1A  C0BF  F0B9         	movff	___awdiv@quotient+1,?___awdiv+1
  4996  012B1E  0012               	return	
  4997  012B20                     __end_of___awdiv:
  4998                           	opt stack 0
  4999                           tosu	equ	0xFFF
  5000                           tosh	equ	0xFFE
  5001                           tosl	equ	0xFFD
  5002                           pclath	equ	0xFFA
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           prodh	equ	0xFF4
  5008                           prodl	equ	0xFF3
  5009                           postinc0	equ	0xFEE
  5010                           plusw0	equ	0xFEB
  5011                           wreg	equ	0xFE8
  5012                           postdec1	equ	0xFE5
  5013                           fsr1h	equ	0xFE2
  5014                           fsr1l	equ	0xFE1
  5015                           indf2	equ	0xFDF
  5016                           postinc2	equ	0xFDE
  5017                           postdec2	equ	0xFDD
  5018                           plusw2	equ	0xFDB
  5019                           fsr2h	equ	0xFDA
  5020                           fsr2l	equ	0xFD9
  5021                           status	equ	0xFD8
  5022                           
  5023 ;; *************** function _Console_IncrementCursor *****************
  5024 ;; Defined at:
  5025 ;;		line 243 in file "Library/Console.c"
  5026 ;; Parameters:    Size  Location     Type
  5027 ;;		None
  5028 ;; Auto vars:     Size  Location     Type
  5029 ;;		None
  5030 ;; Return value:  Size  Location     Type
  5031 ;;                  1    wreg      unsigned char 
  5032 ;; Registers used:
  5033 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5034 ;; Tracked objects:
  5035 ;;		On entry : 0/0
  5036 ;;		On exit  : 0/0
  5037 ;;		Unchanged: 0/0
  5038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5042 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5043 ;;Total ram usage:        2 bytes
  5044 ;; Hardware stack levels used:    1
  5045 ;; Hardware stack levels required when called:    8
  5046 ;; This function calls:
  5047 ;;		_Console_FormFeed
  5048 ;;		_Console_NewLine
  5049 ;; This function is called by:
  5050 ;;		_Console_Tab
  5051 ;;		_Console_PrintChar
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text14
  5056  013D34                     __ptext14:
  5057                           	opt stack 0
  5058  013D34                     _Console_IncrementCursor:
  5059                           	opt stack 16
  5060                           
  5061                           ;Console.c: 246: lBufferX += 1;
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;incstack = 0
  5065  013D34  0100               	movlb	0	; () banked
  5066  013D36  2B7B               	incf	_lBufferX& (0+255),f,b
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;Console.c: 248: gCursor.x += 6;
  5070  013D38  0E06               	movlw	6
  5071  013D3A  2647               	addwf	_gCursor,f,c
  5072  013D3C  0E00               	movlw	0
  5073  013D3E  2248               	addwfc	_gCursor+1,f,c
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5077  013D40  0E06               	movlw	6
  5078  013D42  2447               	addwf	_gCursor,w,c
  5079  013D44  0100               	movlb	0	; () banked
  5080  013D46  6FBC               	movwf	??_Console_IncrementCursor& (0+255),b
  5081  013D48  0E00               	movlw	0
  5082  013D4A  2048               	addwfc	_gCursor+1,w,c
  5083  013D4C  0100               	movlb	0	; () banked
  5084  013D4E  6FBD               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5085  013D50  0100               	movlb	0	; () banked
  5086  013D52  BFBD               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5087  013D54  D009               	goto	l1004
  5088  013D56  0100               	movlb	0	; () banked
  5089  013D58  51BD               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5090  013D5A  E104               	bnz	u6870
  5091  013D5C  0E80               	movlw	128
  5092  013D5E  0100               	movlb	0	; () banked
  5093  013D60  5DBC               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5094  013D62  B0D8               	btfsc	status,0,c
  5095  013D64                     u6870:
  5096                           
  5097                           ; BSR set to: 0
  5098                           ;Console.c: 250: Console_NewLine();
  5099  013D64  EC50  F099         	call	_Console_NewLine	;wreg free
  5100  013D68                     l1004:
  5101                           
  5102                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5103  013D68  0E08               	movlw	8
  5104  013D6A  2449               	addwf	_gCursor+2,w,c
  5105  013D6C  0100               	movlb	0	; () banked
  5106  013D6E  6FBC               	movwf	??_Console_IncrementCursor& (0+255),b
  5107  013D70  0E00               	movlw	0
  5108  013D72  204A               	addwfc	_gCursor+3,w,c
  5109  013D74  0100               	movlb	0	; () banked
  5110  013D76  6FBD               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5111  013D78  0100               	movlb	0	; () banked
  5112  013D7A  BFBD               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5113  013D7C  D00C               	goto	l1005
  5114  013D7E  0100               	movlb	0	; () banked
  5115  013D80  51BD               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5116  013D82  E105               	bnz	u6880
  5117  013D84  0E80               	movlw	128
  5118  013D86  0100               	movlb	0	; () banked
  5119  013D88  5DBC               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5120  013D8A  A0D8               	btfss	status,0,c
  5121  013D8C  D004               	goto	l1005
  5122  013D8E                     u6880:
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;Console.c: 252: {
  5126                           ;Console.c: 253: Console_FormFeed();
  5127  013D8E  EC1F  F09B         	call	_Console_FormFeed	;wreg free
  5128                           
  5129                           ;Console.c: 254: return 1;
  5130  013D92  0E01               	movlw	1
  5131  013D94  0012               	return	
  5132  013D96                     l1005:
  5133                           
  5134                           ;Console.c: 255: }
  5135                           ;Console.c: 257: return 0;
  5136  013D96  0E00               	movlw	0
  5137  013D98  0012               	return	
  5138  013D9A                     __end_of_Console_IncrementCursor:
  5139                           	opt stack 0
  5140                           tosu	equ	0xFFF
  5141                           tosh	equ	0xFFE
  5142                           tosl	equ	0xFFD
  5143                           pclath	equ	0xFFA
  5144                           tblptru	equ	0xFF8
  5145                           tblptrh	equ	0xFF7
  5146                           tblptrl	equ	0xFF6
  5147                           tablat	equ	0xFF5
  5148                           prodh	equ	0xFF4
  5149                           prodl	equ	0xFF3
  5150                           postinc0	equ	0xFEE
  5151                           plusw0	equ	0xFEB
  5152                           wreg	equ	0xFE8
  5153                           postdec1	equ	0xFE5
  5154                           fsr1h	equ	0xFE2
  5155                           fsr1l	equ	0xFE1
  5156                           indf2	equ	0xFDF
  5157                           postinc2	equ	0xFDE
  5158                           postdec2	equ	0xFDD
  5159                           plusw2	equ	0xFDB
  5160                           fsr2h	equ	0xFDA
  5161                           fsr2l	equ	0xFD9
  5162                           status	equ	0xFD8
  5163                           
  5164 ;; *************** function _Console_NewLine *****************
  5165 ;; Defined at:
  5166 ;;		line 175 in file "Library/Console.c"
  5167 ;; Parameters:    Size  Location     Type
  5168 ;;		None
  5169 ;; Auto vars:     Size  Location     Type
  5170 ;;		None
  5171 ;; Return value:  Size  Location     Type
  5172 ;;                  1    wreg      void 
  5173 ;; Registers used:
  5174 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5175 ;; Tracked objects:
  5176 ;;		On entry : 0/0
  5177 ;;		On exit  : 0/0
  5178 ;;		Unchanged: 0/0
  5179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5183 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5184 ;;Total ram usage:        2 bytes
  5185 ;; Hardware stack levels used:    1
  5186 ;; Hardware stack levels required when called:    7
  5187 ;; This function calls:
  5188 ;;		Nothing
  5189 ;; This function is called by:
  5190 ;;		_Console_IncrementCursor
  5191 ;;		_Console_PrintChar
  5192 ;; This function uses a non-reentrant model
  5193 ;;
  5194                           
  5195                           	psect	text15
  5196  0132A0                     __ptext15:
  5197                           	opt stack 0
  5198  0132A0                     _Console_NewLine:
  5199                           	opt stack 16
  5200                           
  5201                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5202                           
  5203                           ;incstack = 0
  5204  0132A0  D03E               	goto	l983
  5205  0132A2                     
  5206                           ;Console.c: 179: {
  5207                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5208  0132A2  0100               	movlb	0	; () banked
  5209  0132A4  517A               	movf	_lBufferY& (0+255),w,b
  5210  0132A6  0D14               	mullw	20
  5211  0132A8  0E46               	movlw	low _lBuffer
  5212  0132AA  0100               	movlb	0	; () banked
  5213  0132AC  6FB8               	movwf	??_Console_NewLine& (0+255),b
  5214  0132AE  0E02               	movlw	high _lBuffer
  5215  0132B0  0100               	movlb	0	; () banked
  5216  0132B2  6FB9               	movwf	(??_Console_NewLine+1)& (0+255),b
  5217  0132B4  50F3               	movf	prodl,w,c
  5218  0132B6  0100               	movlb	0	; () banked
  5219  0132B8  27B8               	addwf	??_Console_NewLine& (0+255),f,b
  5220  0132BA  50F4               	movf	prodh,w,c
  5221  0132BC  0100               	movlb	0	; () banked
  5222  0132BE  23B9               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5223  0132C0  0100               	movlb	0	; () banked
  5224  0132C2  517B               	movf	_lBufferX& (0+255),w,b
  5225  0132C4  0D01               	mullw	1
  5226  0132C6  50F3               	movf	prodl,w,c
  5227  0132C8  0100               	movlb	0	; () banked
  5228  0132CA  25B8               	addwf	??_Console_NewLine& (0+255),w,b
  5229  0132CC  6ED9               	movwf	fsr2l,c
  5230  0132CE  50F4               	movf	prodh,w,c
  5231  0132D0  0100               	movlb	0	; () banked
  5232  0132D2  21B9               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5233  0132D4  6EDA               	movwf	fsr2h,c
  5234  0132D6  50DF               	movf	indf2,w,c
  5235  0132D8  B4D8               	btfsc	status,2,c
  5236  0132DA  D01F               	goto	l985
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5240  0132DC  0E01               	movlw	1
  5241  0132DE  0100               	movlb	0	; () banked
  5242  0132E0  6FFF               	movwf	_change& (0+255),b
  5243                           
  5244                           ; BSR set to: 0
  5245  0132E2  0100               	movlb	0	; () banked
  5246  0132E4  517A               	movf	_lBufferY& (0+255),w,b
  5247  0132E6  0D14               	mullw	20
  5248  0132E8  0E46               	movlw	low _lBuffer
  5249  0132EA  0100               	movlb	0	; () banked
  5250  0132EC  6FB8               	movwf	??_Console_NewLine& (0+255),b
  5251  0132EE  0E02               	movlw	high _lBuffer
  5252  0132F0  0100               	movlb	0	; () banked
  5253  0132F2  6FB9               	movwf	(??_Console_NewLine+1)& (0+255),b
  5254  0132F4  50F3               	movf	prodl,w,c
  5255  0132F6  0100               	movlb	0	; () banked
  5256  0132F8  27B8               	addwf	??_Console_NewLine& (0+255),f,b
  5257  0132FA  50F4               	movf	prodh,w,c
  5258  0132FC  0100               	movlb	0	; () banked
  5259  0132FE  23B9               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5260  013300  0100               	movlb	0	; () banked
  5261  013302  517B               	movf	_lBufferX& (0+255),w,b
  5262  013304  0D01               	mullw	1
  5263  013306  50F3               	movf	prodl,w,c
  5264  013308  0100               	movlb	0	; () banked
  5265  01330A  25B8               	addwf	??_Console_NewLine& (0+255),w,b
  5266  01330C  6ED9               	movwf	fsr2l,c
  5267  01330E  50F4               	movf	prodh,w,c
  5268  013310  0100               	movlb	0	; () banked
  5269  013312  21B9               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5270  013314  6EDA               	movwf	fsr2h,c
  5271  013316  0E80               	movlw	128
  5272  013318  6EDF               	movwf	indf2,c
  5273  01331A                     l985:
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;Console.c: 182: lBufferX ++;
  5277                           
  5278                           ; BSR set to: 0
  5279  01331A  0100               	movlb	0	; () banked
  5280  01331C  2B7B               	incf	_lBufferX& (0+255),f,b
  5281  01331E                     l983:
  5282                           
  5283                           ; BSR set to: 0
  5284  01331E  0E13               	movlw	19
  5285  013320  0100               	movlb	0	; () banked
  5286  013322  657B               	cpfsgt	_lBufferX& (0+255),b
  5287  013324  D7BE               	goto	l984
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;Console.c: 183: }
  5291                           ;Console.c: 185: lBufferX = 0;
  5292                           
  5293                           ; BSR set to: 0
  5294  013326  0E00               	movlw	0
  5295  013328  0100               	movlb	0	; () banked
  5296  01332A  6F7B               	movwf	_lBufferX& (0+255),b
  5297                           
  5298                           ; BSR set to: 0
  5299                           ;Console.c: 186: lBufferY ++;
  5300  01332C  0100               	movlb	0	; () banked
  5301  01332E  2B7A               	incf	_lBufferY& (0+255),f,b
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;Console.c: 188: gCursor.y += 8;
  5305  013330  0E08               	movlw	8
  5306  013332  2649               	addwf	_gCursor+2,f,c
  5307  013334  0E00               	movlw	0
  5308  013336  224A               	addwfc	_gCursor+3,f,c
  5309                           
  5310                           ; BSR set to: 0
  5311                           ;Console.c: 189: gCursor.x = 6;
  5312  013338  0E00               	movlw	0
  5313  01333A  6E48               	movwf	_gCursor+1,c
  5314  01333C  0E06               	movlw	6
  5315  01333E  6E47               	movwf	_gCursor,c
  5316                           
  5317                           ; BSR set to: 0
  5318  013340  0012               	return		;funcret
  5319  013342                     __end_of_Console_NewLine:
  5320                           	opt stack 0
  5321                           tosu	equ	0xFFF
  5322                           tosh	equ	0xFFE
  5323                           tosl	equ	0xFFD
  5324                           pclath	equ	0xFFA
  5325                           tblptru	equ	0xFF8
  5326                           tblptrh	equ	0xFF7
  5327                           tblptrl	equ	0xFF6
  5328                           tablat	equ	0xFF5
  5329                           prodh	equ	0xFF4
  5330                           prodl	equ	0xFF3
  5331                           postinc0	equ	0xFEE
  5332                           plusw0	equ	0xFEB
  5333                           wreg	equ	0xFE8
  5334                           postdec1	equ	0xFE5
  5335                           fsr1h	equ	0xFE2
  5336                           fsr1l	equ	0xFE1
  5337                           indf2	equ	0xFDF
  5338                           postinc2	equ	0xFDE
  5339                           postdec2	equ	0xFDD
  5340                           plusw2	equ	0xFDB
  5341                           fsr2h	equ	0xFDA
  5342                           fsr2l	equ	0xFD9
  5343                           status	equ	0xFD8
  5344                           
  5345 ;; *************** function _Console_FormFeed *****************
  5346 ;; Defined at:
  5347 ;;		line 192 in file "Library/Console.c"
  5348 ;; Parameters:    Size  Location     Type
  5349 ;;		None
  5350 ;; Auto vars:     Size  Location     Type
  5351 ;;  y               1    3[BANK0 ] unsigned char 
  5352 ;;  x               1    2[BANK0 ] unsigned char 
  5353 ;; Return value:  Size  Location     Type
  5354 ;;                  1    wreg      void 
  5355 ;; Registers used:
  5356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5357 ;; Tracked objects:
  5358 ;;		On entry : 0/0
  5359 ;;		On exit  : 0/0
  5360 ;;		Unchanged: 0/0
  5361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5363 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5364 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5365 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5366 ;;Total ram usage:        4 bytes
  5367 ;; Hardware stack levels used:    1
  5368 ;; Hardware stack levels required when called:    7
  5369 ;; This function calls:
  5370 ;;		Nothing
  5371 ;; This function is called by:
  5372 ;;		_Console_IncrementCursor
  5373 ;;		_Console_PrintChar
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text16
  5378  01363E                     __ptext16:
  5379                           	opt stack 0
  5380  01363E                     _Console_FormFeed:
  5381                           	opt stack 16
  5382                           
  5383                           ;Console.c: 195: lBufferX = 0;
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;incstack = 0
  5387  01363E  0E00               	movlw	0
  5388  013640  0100               	movlb	0	; () banked
  5389  013642  6F7B               	movwf	_lBufferX& (0+255),b
  5390                           
  5391                           ;Console.c: 196: lBufferY = 0;
  5392  013644  0E00               	movlw	0
  5393  013646  0100               	movlb	0	; () banked
  5394  013648  6F7A               	movwf	_lBufferY& (0+255),b
  5395                           
  5396                           ;Console.c: 197: UINT8 x, y;
  5397                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5398  01364A  0E00               	movlw	0
  5399  01364C  0100               	movlb	0	; () banked
  5400  01364E  6FBB               	movwf	Console_FormFeed@y& (0+255),b
  5401  013650                     l10335:
  5402                           
  5403                           ; BSR set to: 0
  5404  013650  0E0E               	movlw	14
  5405  013652  0100               	movlb	0	; () banked
  5406  013654  65BB               	cpfsgt	Console_FormFeed@y& (0+255),b
  5407  013656  D001               	goto	l990
  5408  013658  D02D               	goto	u6810
  5409  01365A                     l990:
  5410                           
  5411                           ; BSR set to: 0
  5412                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5413                           
  5414                           ; BSR set to: 0
  5415  01365A  0E00               	movlw	0
  5416  01365C  0100               	movlb	0	; () banked
  5417  01365E  6FBA               	movwf	Console_FormFeed@x& (0+255),b
  5418  013660                     l10341:
  5419                           
  5420                           ; BSR set to: 0
  5421  013660  0E13               	movlw	19
  5422  013662  0100               	movlb	0	; () banked
  5423  013664  65BA               	cpfsgt	Console_FormFeed@x& (0+255),b
  5424  013666  D001               	goto	l992
  5425  013668  D022               	goto	u6800
  5426  01366A                     l992:
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5430                           
  5431                           ; BSR set to: 0
  5432  01366A  0E01               	movlw	1
  5433  01366C  0100               	movlb	0	; () banked
  5434  01366E  6FFF               	movwf	_change& (0+255),b
  5435                           
  5436                           ; BSR set to: 0
  5437  013670  0100               	movlb	0	; () banked
  5438  013672  51BB               	movf	Console_FormFeed@y& (0+255),w,b
  5439  013674  0D14               	mullw	20
  5440  013676  0E46               	movlw	low _lBuffer
  5441  013678  0100               	movlb	0	; () banked
  5442  01367A  6FB8               	movwf	??_Console_FormFeed& (0+255),b
  5443  01367C  0E02               	movlw	high _lBuffer
  5444  01367E  0100               	movlb	0	; () banked
  5445  013680  6FB9               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5446  013682  50F3               	movf	prodl,w,c
  5447  013684  0100               	movlb	0	; () banked
  5448  013686  27B8               	addwf	??_Console_FormFeed& (0+255),f,b
  5449  013688  50F4               	movf	prodh,w,c
  5450  01368A  0100               	movlb	0	; () banked
  5451  01368C  23B9               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5452  01368E  0100               	movlb	0	; () banked
  5453  013690  51BA               	movf	Console_FormFeed@x& (0+255),w,b
  5454  013692  0D01               	mullw	1
  5455  013694  50F3               	movf	prodl,w,c
  5456  013696  0100               	movlb	0	; () banked
  5457  013698  25B8               	addwf	??_Console_FormFeed& (0+255),w,b
  5458  01369A  6ED9               	movwf	fsr2l,c
  5459  01369C  50F4               	movf	prodh,w,c
  5460  01369E  0100               	movlb	0	; () banked
  5461  0136A0  21B9               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5462  0136A2  6EDA               	movwf	fsr2h,c
  5463  0136A4  0E80               	movlw	128
  5464  0136A6  6EDF               	movwf	indf2,c
  5465                           
  5466                           ; BSR set to: 0
  5467  0136A8  0100               	movlb	0	; () banked
  5468  0136AA  2BBA               	incf	Console_FormFeed@x& (0+255),f,b
  5469  0136AC  D7D9               	goto	l10341
  5470  0136AE                     u6800:
  5471                           
  5472                           ; BSR set to: 0
  5473                           
  5474                           ; BSR set to: 0
  5475  0136AE  0100               	movlb	0	; () banked
  5476  0136B0  2BBB               	incf	Console_FormFeed@y& (0+255),f,b
  5477  0136B2  D7CE               	goto	l10335
  5478  0136B4                     u6810:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;Console.c: 204: clearall = 1;
  5482                           
  5483                           ; BSR set to: 0
  5484  0136B4  0E01               	movlw	1
  5485  0136B6  0100               	movlb	0	; () banked
  5486  0136B8  6F7C               	movwf	_clearall& (0+255),b
  5487                           
  5488                           ;Console.c: 205: gCursor.x = 6;
  5489  0136BA  0E00               	movlw	0
  5490  0136BC  6E48               	movwf	_gCursor+1,c
  5491  0136BE  0E06               	movlw	6
  5492  0136C0  6E47               	movwf	_gCursor,c
  5493                           
  5494                           ;Console.c: 206: gCursor.y = 6;
  5495  0136C2  0E00               	movlw	0
  5496  0136C4  6E4A               	movwf	_gCursor+3,c
  5497  0136C6  0E06               	movlw	6
  5498  0136C8  6E49               	movwf	_gCursor+2,c
  5499                           
  5500                           ; BSR set to: 0
  5501  0136CA  0012               	return		;funcret
  5502  0136CC                     __end_of_Console_FormFeed:
  5503                           	opt stack 0
  5504                           tosu	equ	0xFFF
  5505                           tosh	equ	0xFFE
  5506                           tosl	equ	0xFFD
  5507                           pclath	equ	0xFFA
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           prodh	equ	0xFF4
  5513                           prodl	equ	0xFF3
  5514                           postinc0	equ	0xFEE
  5515                           plusw0	equ	0xFEB
  5516                           wreg	equ	0xFE8
  5517                           postdec1	equ	0xFE5
  5518                           fsr1h	equ	0xFE2
  5519                           fsr1l	equ	0xFE1
  5520                           indf2	equ	0xFDF
  5521                           postinc2	equ	0xFDE
  5522                           postdec2	equ	0xFDD
  5523                           plusw2	equ	0xFDB
  5524                           fsr2h	equ	0xFDA
  5525                           fsr2l	equ	0xFD9
  5526                           status	equ	0xFD8
  5527                           
  5528 ;; *************** function _Console_ResetCursor *****************
  5529 ;; Defined at:
  5530 ;;		line 297 in file "Library/Console.c"
  5531 ;; Parameters:    Size  Location     Type
  5532 ;;		None
  5533 ;; Auto vars:     Size  Location     Type
  5534 ;;		None
  5535 ;; Return value:  Size  Location     Type
  5536 ;;                  1    wreg      void 
  5537 ;; Registers used:
  5538 ;;		wreg, status,2
  5539 ;; Tracked objects:
  5540 ;;		On entry : 0/0
  5541 ;;		On exit  : 0/0
  5542 ;;		Unchanged: 0/0
  5543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5548 ;;Total ram usage:        0 bytes
  5549 ;; Hardware stack levels used:    1
  5550 ;; Hardware stack levels required when called:    7
  5551 ;; This function calls:
  5552 ;;		Nothing
  5553 ;; This function is called by:
  5554 ;;		_Console_PrintChar
  5555 ;; This function uses a non-reentrant model
  5556 ;;
  5557                           
  5558                           	psect	text17
  5559  014986                     __ptext17:
  5560                           	opt stack 0
  5561  014986                     _Console_ResetCursor:
  5562                           	opt stack 18
  5563                           
  5564                           ;Console.c: 299: gCursor.x = 6;
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;incstack = 0
  5568  014986  0E00               	movlw	0
  5569  014988  6E48               	movwf	_gCursor+1,c
  5570  01498A  0E06               	movlw	6
  5571  01498C  6E47               	movwf	_gCursor,c
  5572                           
  5573                           ;Console.c: 300: gCursor.y = 6;
  5574  01498E  0E00               	movlw	0
  5575  014990  6E4A               	movwf	_gCursor+3,c
  5576  014992  0E06               	movlw	6
  5577  014994  6E49               	movwf	_gCursor+2,c
  5578                           
  5579                           ;Console.c: 303: lBufferX = 0;
  5580  014996  0E00               	movlw	0
  5581  014998  0100               	movlb	0	; () banked
  5582  01499A  6F7B               	movwf	_lBufferX& (0+255),b
  5583                           
  5584                           ;Console.c: 304: lBufferY = 0;
  5585  01499C  0E00               	movlw	0
  5586  01499E  0100               	movlb	0	; () banked
  5587  0149A0  6F7A               	movwf	_lBufferY& (0+255),b
  5588                           
  5589                           ; BSR set to: 0
  5590  0149A2  0012               	return		;funcret
  5591  0149A4                     __end_of_Console_ResetCursor:
  5592                           	opt stack 0
  5593                           tosu	equ	0xFFF
  5594                           tosh	equ	0xFFE
  5595                           tosl	equ	0xFFD
  5596                           pclath	equ	0xFFA
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           prodh	equ	0xFF4
  5602                           prodl	equ	0xFF3
  5603                           postinc0	equ	0xFEE
  5604                           plusw0	equ	0xFEB
  5605                           wreg	equ	0xFE8
  5606                           postdec1	equ	0xFE5
  5607                           fsr1h	equ	0xFE2
  5608                           fsr1l	equ	0xFE1
  5609                           indf2	equ	0xFDF
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           plusw2	equ	0xFDB
  5613                           fsr2h	equ	0xFDA
  5614                           fsr2l	equ	0xFD9
  5615                           status	equ	0xFD8
  5616                           
  5617 ;; *************** function _Console_Backspace *****************
  5618 ;; Defined at:
  5619 ;;		line 209 in file "Library/Console.c"
  5620 ;; Parameters:    Size  Location     Type
  5621 ;;		None
  5622 ;; Auto vars:     Size  Location     Type
  5623 ;;		None
  5624 ;; Return value:  Size  Location     Type
  5625 ;;                  1    wreg      void 
  5626 ;; Registers used:
  5627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5628 ;; Tracked objects:
  5629 ;;		On entry : 0/0
  5630 ;;		On exit  : 0/0
  5631 ;;		Unchanged: 0/0
  5632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;Total ram usage:        0 bytes
  5638 ;; Hardware stack levels used:    1
  5639 ;; Hardware stack levels required when called:    8
  5640 ;; This function calls:
  5641 ;;		_Console_ClearCursor
  5642 ;; This function is called by:
  5643 ;;		_Console_PrintChar
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text18
  5648  013F20                     __ptext18:
  5649                           	opt stack 0
  5650  013F20                     _Console_Backspace:
  5651                           	opt stack 17
  5652                           
  5653                           ;Console.c: 211: if (lBufferX > 0)
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;incstack = 0
  5657  013F20  0100               	movlb	0	; () banked
  5658  013F22  517B               	movf	_lBufferX& (0+255),w,b
  5659  013F24  B4D8               	btfsc	status,2,c
  5660  013F26  D007               	goto	l997
  5661                           
  5662                           ; BSR set to: 0
  5663                           ;Console.c: 212: {
  5664                           ;Console.c: 213: gCursor.x -= 6;
  5665  013F28  0EFA               	movlw	250
  5666  013F2A  2647               	addwf	_gCursor,f,c
  5667  013F2C  0EFF               	movlw	255
  5668  013F2E  2248               	addwfc	_gCursor+1,f,c
  5669                           
  5670                           ; BSR set to: 0
  5671                           ;Console.c: 216: lBufferX --;
  5672  013F30  0100               	movlb	0	; () banked
  5673  013F32  077B               	decf	_lBufferX& (0+255),f,b
  5674                           
  5675                           ;Console.c: 218: }
  5676  013F34  D020               	goto	l1000
  5677  013F36                     l997:
  5678                           
  5679                           ; BSR set to: 0
  5680                           ;Console.c: 219: else if (lBufferY > 0)
  5681                           
  5682                           ; BSR set to: 0
  5683  013F36  0100               	movlb	0	; () banked
  5684  013F38  517A               	movf	_lBufferY& (0+255),w,b
  5685  013F3A  B4D8               	btfsc	status,2,c
  5686  013F3C  D00E               	goto	l999
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;Console.c: 220: {
  5690                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5691  013F3E  0E00               	movlw	0
  5692  013F40  6E48               	movwf	_gCursor+1,c
  5693  013F42  0E72               	movlw	114
  5694  013F44  6E47               	movwf	_gCursor,c
  5695                           
  5696                           ; BSR set to: 0
  5697                           ;Console.c: 222: gCursor.y -= 8;
  5698  013F46  0EF8               	movlw	248
  5699  013F48  2649               	addwf	_gCursor+2,f,c
  5700  013F4A  0EFF               	movlw	255
  5701  013F4C  224A               	addwfc	_gCursor+3,f,c
  5702                           
  5703                           ; BSR set to: 0
  5704                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5705  013F4E  0E13               	movlw	19
  5706  013F50  0100               	movlb	0	; () banked
  5707  013F52  6F7B               	movwf	_lBufferX& (0+255),b
  5708                           
  5709                           ; BSR set to: 0
  5710                           ;Console.c: 226: lBufferY --;
  5711  013F54  0100               	movlb	0	; () banked
  5712  013F56  077A               	decf	_lBufferY& (0+255),f,b
  5713                           
  5714                           ;Console.c: 228: }
  5715  013F58  D00E               	goto	l1000
  5716  013F5A                     l999:
  5717                           
  5718                           ; BSR set to: 0
  5719                           ;Console.c: 229: else
  5720                           ;Console.c: 230: {
  5721                           ;Console.c: 231: gCursor.x = 6;
  5722                           
  5723                           ; BSR set to: 0
  5724  013F5A  0E00               	movlw	0
  5725  013F5C  6E48               	movwf	_gCursor+1,c
  5726  013F5E  0E06               	movlw	6
  5727  013F60  6E47               	movwf	_gCursor,c
  5728                           
  5729                           ;Console.c: 232: gCursor.y = 6;
  5730  013F62  0E00               	movlw	0
  5731  013F64  6E4A               	movwf	_gCursor+3,c
  5732  013F66  0E06               	movlw	6
  5733  013F68  6E49               	movwf	_gCursor+2,c
  5734                           
  5735                           ;Console.c: 235: lBufferX = 0;
  5736  013F6A  0E00               	movlw	0
  5737  013F6C  0100               	movlb	0	; () banked
  5738  013F6E  6F7B               	movwf	_lBufferX& (0+255),b
  5739                           
  5740                           ;Console.c: 236: lBufferY = 0;
  5741  013F70  0E00               	movlw	0
  5742  013F72  0100               	movlb	0	; () banked
  5743  013F74  6F7A               	movwf	_lBufferY& (0+255),b
  5744  013F76                     l1000:
  5745                           
  5746                           ; BSR set to: 0
  5747                           ;Console.c: 238: }
  5748                           ;Console.c: 240: Console_ClearCursor();
  5749                           
  5750                           ; BSR set to: 0
  5751                           
  5752                           ; BSR set to: 0
  5753  013F76  EC00  F0A2         	call	_Console_ClearCursor	;wreg free
  5754  013F7A  0012               	return		;funcret
  5755  013F7C                     __end_of_Console_Backspace:
  5756                           	opt stack 0
  5757                           tosu	equ	0xFFF
  5758                           tosh	equ	0xFFE
  5759                           tosl	equ	0xFFD
  5760                           pclath	equ	0xFFA
  5761                           tblptru	equ	0xFF8
  5762                           tblptrh	equ	0xFF7
  5763                           tblptrl	equ	0xFF6
  5764                           tablat	equ	0xFF5
  5765                           prodh	equ	0xFF4
  5766                           prodl	equ	0xFF3
  5767                           postinc0	equ	0xFEE
  5768                           plusw0	equ	0xFEB
  5769                           wreg	equ	0xFE8
  5770                           postdec1	equ	0xFE5
  5771                           fsr1h	equ	0xFE2
  5772                           fsr1l	equ	0xFE1
  5773                           indf2	equ	0xFDF
  5774                           postinc2	equ	0xFDE
  5775                           postdec2	equ	0xFDD
  5776                           plusw2	equ	0xFDB
  5777                           fsr2h	equ	0xFDA
  5778                           fsr2l	equ	0xFD9
  5779                           status	equ	0xFD8
  5780                           
  5781 ;; *************** function _Console_ClearCursor *****************
  5782 ;; Defined at:
  5783 ;;		line 308 in file "Library/Console.c"
  5784 ;; Parameters:    Size  Location     Type
  5785 ;;		None
  5786 ;; Auto vars:     Size  Location     Type
  5787 ;;		None
  5788 ;; Return value:  Size  Location     Type
  5789 ;;                  1    wreg      void 
  5790 ;; Registers used:
  5791 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5792 ;; Tracked objects:
  5793 ;;		On entry : 0/0
  5794 ;;		On exit  : 0/0
  5795 ;;		Unchanged: 0/0
  5796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5799 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5800 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5801 ;;Total ram usage:        2 bytes
  5802 ;; Hardware stack levels used:    1
  5803 ;; Hardware stack levels required when called:    7
  5804 ;; This function calls:
  5805 ;;		Nothing
  5806 ;; This function is called by:
  5807 ;;		_Console_Backspace
  5808 ;;		_Console_Tab
  5809 ;; This function uses a non-reentrant model
  5810 ;;
  5811                           
  5812                           	psect	text19
  5813  014400                     __ptext19:
  5814                           	opt stack 0
  5815  014400                     _Console_ClearCursor:
  5816                           	opt stack 17
  5817                           
  5818                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5819                           
  5820                           ;incstack = 0
  5821  014400  0E01               	movlw	1
  5822  014402  0100               	movlb	0	; () banked
  5823  014404  6FFF               	movwf	_change& (0+255),b
  5824                           
  5825                           ; BSR set to: 0
  5826  014406  0100               	movlb	0	; () banked
  5827  014408  517A               	movf	_lBufferY& (0+255),w,b
  5828  01440A  0D14               	mullw	20
  5829  01440C  0E46               	movlw	low _lBuffer
  5830  01440E  0100               	movlb	0	; () banked
  5831  014410  6FB8               	movwf	??_Console_ClearCursor& (0+255),b
  5832  014412  0E02               	movlw	high _lBuffer
  5833  014414  0100               	movlb	0	; () banked
  5834  014416  6FB9               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5835  014418  50F3               	movf	prodl,w,c
  5836  01441A  0100               	movlb	0	; () banked
  5837  01441C  27B8               	addwf	??_Console_ClearCursor& (0+255),f,b
  5838  01441E  50F4               	movf	prodh,w,c
  5839  014420  0100               	movlb	0	; () banked
  5840  014422  23B9               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5841  014424  0100               	movlb	0	; () banked
  5842  014426  517B               	movf	_lBufferX& (0+255),w,b
  5843  014428  0D01               	mullw	1
  5844  01442A  50F3               	movf	prodl,w,c
  5845  01442C  0100               	movlb	0	; () banked
  5846  01442E  25B8               	addwf	??_Console_ClearCursor& (0+255),w,b
  5847  014430  6ED9               	movwf	fsr2l,c
  5848  014432  50F4               	movf	prodh,w,c
  5849  014434  0100               	movlb	0	; () banked
  5850  014436  21B9               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5851  014438  6EDA               	movwf	fsr2h,c
  5852  01443A  0E80               	movlw	128
  5853  01443C  6EDF               	movwf	indf2,c
  5854                           
  5855                           ; BSR set to: 0
  5856  01443E  0012               	return		;funcret
  5857  014440                     __end_of_Console_ClearCursor:
  5858                           	opt stack 0
  5859                           tosu	equ	0xFFF
  5860                           tosh	equ	0xFFE
  5861                           tosl	equ	0xFFD
  5862                           pclath	equ	0xFFA
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           prodh	equ	0xFF4
  5868                           prodl	equ	0xFF3
  5869                           postinc0	equ	0xFEE
  5870                           plusw0	equ	0xFEB
  5871                           wreg	equ	0xFE8
  5872                           postdec1	equ	0xFE5
  5873                           fsr1h	equ	0xFE2
  5874                           fsr1l	equ	0xFE1
  5875                           indf2	equ	0xFDF
  5876                           postinc2	equ	0xFDE
  5877                           postdec2	equ	0xFDD
  5878                           plusw2	equ	0xFDB
  5879                           fsr2h	equ	0xFDA
  5880                           fsr2l	equ	0xFD9
  5881                           status	equ	0xFD8
  5882                           
  5883 ;; *************** function ___llmod *****************
  5884 ;; Defined at:
  5885 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\llmod.c"
  5886 ;; Parameters:    Size  Location     Type
  5887 ;;  dividend        4   13[BANK0 ] unsigned long 
  5888 ;;  divisor         4   17[BANK0 ] unsigned long 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  counter         1   21[BANK0 ] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;                  4   13[BANK0 ] unsigned long 
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5900 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;Total ram usage:        9 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    7
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_printf
  5911 ;;		_rand_between
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text20
  5916  01347C                     __ptext20:
  5917                           	opt stack 0
  5918  01347C                     ___llmod:
  5919                           	opt stack 20
  5920                           
  5921                           ; BSR set to: 0
  5922                           ;incstack = 0
  5923  01347C  0100               	movlb	0	; () banked
  5924  01347E  51C9               	movf	___llmod@divisor& (0+255),w,b
  5925  013480  0100               	movlb	0	; () banked
  5926  013482  11CA               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  5927  013484  0100               	movlb	0	; () banked
  5928  013486  11CB               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  5929  013488  0100               	movlb	0	; () banked
  5930  01348A  11CC               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  5931  01348C  B4D8               	btfsc	status,2,c
  5932  01348E  D03A               	goto	l2485
  5933                           
  5934                           ; BSR set to: 0
  5935  013490  0E01               	movlw	1
  5936  013492  0100               	movlb	0	; () banked
  5937  013494  6FCD               	movwf	___llmod@counter& (0+255),b
  5938  013496  D008               	goto	l2480
  5939  013498                     
  5940                           ; BSR set to: 0
  5941                           
  5942                           ; BSR set to: 0
  5943  013498  0100               	movlb	0	; () banked
  5944  01349A  90D8               	bcf	status,0,c
  5945  01349C  37C9               	rlcf	___llmod@divisor& (0+255),f,b
  5946  01349E  37CA               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  5947  0134A0  37CB               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  5948  0134A2  37CC               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  5949  0134A4  0100               	movlb	0	; () banked
  5950  0134A6  2BCD               	incf	___llmod@counter& (0+255),f,b
  5951  0134A8                     l2480:
  5952                           
  5953                           ; BSR set to: 0
  5954                           
  5955                           ; BSR set to: 0
  5956  0134A8  0100               	movlb	0	; () banked
  5957  0134AA  AFCC               	btfss	(___llmod@divisor+3)& (0+255),7,b
  5958  0134AC  D7F5               	goto	l2481
  5959  0134AE                     u7430:
  5960                           
  5961                           ; BSR set to: 0
  5962                           
  5963                           ; BSR set to: 0
  5964                           
  5965                           ; BSR set to: 0
  5966  0134AE  0100               	movlb	0	; () banked
  5967  0134B0  51C9               	movf	___llmod@divisor& (0+255),w,b
  5968  0134B2  0100               	movlb	0	; () banked
  5969  0134B4  5DC5               	subwf	___llmod@dividend& (0+255),w,b
  5970  0134B6  0100               	movlb	0	; () banked
  5971  0134B8  51CA               	movf	(___llmod@divisor+1)& (0+255),w,b
  5972  0134BA  0100               	movlb	0	; () banked
  5973  0134BC  59C6               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  5974  0134BE  0100               	movlb	0	; () banked
  5975  0134C0  51CB               	movf	(___llmod@divisor+2)& (0+255),w,b
  5976  0134C2  0100               	movlb	0	; () banked
  5977  0134C4  59C7               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  5978  0134C6  0100               	movlb	0	; () banked
  5979  0134C8  51CC               	movf	(___llmod@divisor+3)& (0+255),w,b
  5980  0134CA  0100               	movlb	0	; () banked
  5981  0134CC  59C8               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  5982  0134CE  A0D8               	btfss	status,0,c
  5983  0134D0  D010               	goto	l2484
  5984                           
  5985                           ; BSR set to: 0
  5986  0134D2  0100               	movlb	0	; () banked
  5987  0134D4  51C9               	movf	___llmod@divisor& (0+255),w,b
  5988  0134D6  0100               	movlb	0	; () banked
  5989  0134D8  5FC5               	subwf	___llmod@dividend& (0+255),f,b
  5990  0134DA  0100               	movlb	0	; () banked
  5991  0134DC  51CA               	movf	(___llmod@divisor+1)& (0+255),w,b
  5992  0134DE  0100               	movlb	0	; () banked
  5993  0134E0  5BC6               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  5994  0134E2  0100               	movlb	0	; () banked
  5995  0134E4  51CB               	movf	(___llmod@divisor+2)& (0+255),w,b
  5996  0134E6  0100               	movlb	0	; () banked
  5997  0134E8  5BC7               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  5998  0134EA  0100               	movlb	0	; () banked
  5999  0134EC  51CC               	movf	(___llmod@divisor+3)& (0+255),w,b
  6000  0134EE  0100               	movlb	0	; () banked
  6001  0134F0  5BC8               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  6002  0134F2                     l2484:
  6003                           
  6004                           ; BSR set to: 0
  6005                           
  6006                           ; BSR set to: 0
  6007  0134F2  0100               	movlb	0	; () banked
  6008  0134F4  90D8               	bcf	status,0,c
  6009  0134F6  33CC               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  6010  0134F8  33CB               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  6011  0134FA  33CA               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  6012  0134FC  33C9               	rrcf	___llmod@divisor& (0+255),f,b
  6013                           
  6014                           ; BSR set to: 0
  6015  0134FE  0100               	movlb	0	; () banked
  6016  013500  2FCD               	decfsz	___llmod@counter& (0+255),f,b
  6017  013502  D7D5               	goto	u7430
  6018  013504                     l2485:
  6019                           
  6020                           ; BSR set to: 0
  6021                           
  6022                           ; BSR set to: 0
  6023  013504  C0C5  F0C5         	movff	___llmod@dividend,?___llmod
  6024  013508  C0C6  F0C6         	movff	___llmod@dividend+1,?___llmod+1
  6025  01350C  C0C7  F0C7         	movff	___llmod@dividend+2,?___llmod+2
  6026  013510  C0C8  F0C8         	movff	___llmod@dividend+3,?___llmod+3
  6027                           
  6028                           ; BSR set to: 0
  6029  013514  0012               	return		;funcret
  6030  013516                     __end_of___llmod:
  6031                           	opt stack 0
  6032                           tosu	equ	0xFFF
  6033                           tosh	equ	0xFFE
  6034                           tosl	equ	0xFFD
  6035                           pclath	equ	0xFFA
  6036                           tblptru	equ	0xFF8
  6037                           tblptrh	equ	0xFF7
  6038                           tblptrl	equ	0xFF6
  6039                           tablat	equ	0xFF5
  6040                           prodh	equ	0xFF4
  6041                           prodl	equ	0xFF3
  6042                           postinc0	equ	0xFEE
  6043                           plusw0	equ	0xFEB
  6044                           wreg	equ	0xFE8
  6045                           postdec1	equ	0xFE5
  6046                           fsr1h	equ	0xFE2
  6047                           fsr1l	equ	0xFE1
  6048                           indf2	equ	0xFDF
  6049                           postinc2	equ	0xFDE
  6050                           postdec2	equ	0xFDD
  6051                           plusw2	equ	0xFDB
  6052                           fsr2h	equ	0xFDA
  6053                           fsr2l	equ	0xFD9
  6054                           status	equ	0xFD8
  6055                           
  6056 ;; *************** function _getMode *****************
  6057 ;; Defined at:
  6058 ;;		line 126 in file "main.c"
  6059 ;; Parameters:    Size  Location     Type
  6060 ;;		None
  6061 ;; Auto vars:     Size  Location     Type
  6062 ;;  dipState        2   40[BANK0 ] int 
  6063 ;; Return value:  Size  Location     Type
  6064 ;;                  2   36[BANK0 ] int 
  6065 ;; Registers used:
  6066 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6067 ;; Tracked objects:
  6068 ;;		On entry : 0/0
  6069 ;;		On exit  : 0/0
  6070 ;;		Unchanged: 0/0
  6071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6072 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6073 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6074 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6075 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;Total ram usage:        6 bytes
  6077 ;; Hardware stack levels used:    1
  6078 ;; Hardware stack levels required when called:   16
  6079 ;; This function calls:
  6080 ;;		_HMI_DIPSwitch
  6081 ;;		_HMI_DownSwitch
  6082 ;;		_HMI_LeftSwitch
  6083 ;;		_HMI_Poll
  6084 ;;		_HMI_RightSwitch
  6085 ;;		_HMI_UpSwitch
  6086 ;;		_MXK_DIPSwitch
  6087 ;;		_MXK_TestButton
  6088 ;; This function is called by:
  6089 ;;		_displayMode
  6090 ;;		_continuousMode
  6091 ;;		_setMode
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text21
  6096  0136CC                     __ptext21:
  6097                           	opt stack 0
  6098  0136CC                     _getMode:
  6099                           	opt stack 10
  6100                           
  6101                           ;main.c: 127: HMI_Poll();
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;incstack = 0
  6105  0136CC  EC53  F09D         	call	_HMI_Poll	;wreg free
  6106                           
  6107                           ;main.c: 128: int dipState = HMIBoard.mDIP.mGetState();
  6108  0136D0  EE21  F061         	lfsr	2,_HMIBoard+55
  6109  0136D4  D801               	call	u7878
  6110  0136D6  D00A               	goto	u7879
  6111  0136D8                     u7878:
  6112  0136D8  0005               	push	
  6113  0136DA  6EFA               	movwf	pclath,c
  6114  0136DC  50DE               	movf	postinc2,w,c
  6115  0136DE  6EFD               	movwf	tosl,c
  6116  0136E0  50DE               	movf	postinc2,w,c
  6117  0136E2  6EFE               	movwf	tosh,c
  6118  0136E4  50DE               	movf	postinc2,w,c
  6119  0136E6  6EFF               	movwf	tosu,c
  6120  0136E8  50FA               	movf	pclath,w,c
  6121  0136EA  0012               	return		;indir
  6122  0136EC                     u7879:
  6123  0136EC  0100               	movlb	0	; () banked
  6124  0136EE  6FDE               	movwf	??_getMode& (0+255),b
  6125  0136F0  0100               	movlb	0	; () banked
  6126  0136F2  51DE               	movf	??_getMode& (0+255),w,b
  6127  0136F4  0100               	movlb	0	; () banked
  6128  0136F6  6FE0               	movwf	getMode@dipState& (0+255),b
  6129  0136F8  6BE1               	clrf	(getMode@dipState+1)& (0+255),b
  6130                           
  6131                           ;main.c: 129: switch (dipState) {
  6132  0136FA  D018               	goto	l2026
  6133  0136FC                     
  6134                           ; BSR set to: 0
  6135                           ;main.c: 131: return 3;
  6136                           
  6137                           ; BSR set to: 0
  6138  0136FC  0E00               	movlw	0
  6139  0136FE  0100               	movlb	0	; () banked
  6140  013700  6FDD               	movwf	(?_getMode+1)& (0+255),b
  6141  013702  0E03               	movlw	3
  6142  013704  6FDC               	movwf	?_getMode& (0+255),b
  6143                           
  6144                           ; BSR set to: 0
  6145  013706  0012               	return	
  6146  013708                     
  6147                           ; BSR set to: 0
  6148                           ;main.c: 133: return 2;
  6149                           
  6150                           ; BSR set to: 0
  6151  013708  0E00               	movlw	0
  6152  01370A  0100               	movlb	0	; () banked
  6153  01370C  6FDD               	movwf	(?_getMode+1)& (0+255),b
  6154  01370E  0E02               	movlw	2
  6155  013710  6FDC               	movwf	?_getMode& (0+255),b
  6156                           
  6157                           ; BSR set to: 0
  6158  013712  0012               	return	
  6159  013714                     
  6160                           ; BSR set to: 0
  6161                           ;main.c: 135: return 1;
  6162                           
  6163                           ; BSR set to: 0
  6164  013714  0E00               	movlw	0
  6165  013716  0100               	movlb	0	; () banked
  6166  013718  6FDD               	movwf	(?_getMode+1)& (0+255),b
  6167  01371A  0E01               	movlw	1
  6168  01371C  6FDC               	movwf	?_getMode& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171  01371E  0012               	return	
  6172  013720                     
  6173                           ; BSR set to: 0
  6174                           ;main.c: 137: return 0;
  6175                           
  6176                           ; BSR set to: 0
  6177  013720  0E00               	movlw	0
  6178  013722  0100               	movlb	0	; () banked
  6179  013724  6FDD               	movwf	(?_getMode+1)& (0+255),b
  6180  013726  0E00               	movlw	0
  6181  013728  6FDC               	movwf	?_getMode& (0+255),b
  6182                           
  6183                           ; BSR set to: 0
  6184                           ;main.c: 138: }
  6185                           
  6186                           ; BSR set to: 0
  6187  01372A  0012               	return	
  6188  01372C                     l2026:
  6189                           
  6190                           ; BSR set to: 0
  6191                           
  6192                           ; BSR set to: 0
  6193  01372C  C0E0  F0DE         	movff	getMode@dipState,??_getMode
  6194  013730  C0E1  F0DF         	movff	getMode@dipState+1,??_getMode+1
  6195                           
  6196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6197                           ; Switch size 1, requested type "space"
  6198                           ; Number of cases is 1, Range of values is 0 to 0
  6199                           ; switch strategies available:
  6200                           ; Name         Instructions Cycles
  6201                           ; simple_byte            4     3 (average)
  6202                           ;	Chosen strategy is simple_byte
  6203  013734  0100               	movlb	0	; () banked
  6204  013736  51DF               	movf	(??_getMode+1)& (0+255),w,b
  6205  013738  0A00               	xorlw	0	; case 0
  6206  01373A  A4D8               	btfss	status,2,c
  6207  01373C  D7F1               	goto	l2031
  6208                           
  6209                           ; BSR set to: 0
  6210                           ; Switch size 1, requested type "space"
  6211                           ; Number of cases is 3, Range of values is 2 to 8
  6212                           ; switch strategies available:
  6213                           ; Name         Instructions Cycles
  6214                           ; simple_byte           10     6 (average)
  6215                           ;	Chosen strategy is simple_byte
  6216  01373E  0100               	movlb	0	; () banked
  6217  013740  51DE               	movf	??_getMode& (0+255),w,b
  6218  013742  0A02               	xorlw	2	; case 2
  6219  013744  B4D8               	btfsc	status,2,c
  6220  013746  D7DA               	goto	l2027
  6221  013748  0A06               	xorlw	6	; case 4
  6222  01374A  B4D8               	btfsc	status,2,c
  6223  01374C  D7DD               	goto	l2029
  6224  01374E  0A0C               	xorlw	12	; case 8
  6225  013750  B4D8               	btfsc	status,2,c
  6226  013752  D7E0               	goto	l2030
  6227  013754  D7E5               	goto	l2031
  6228  013756                     __end_of_getMode:
  6229                           	opt stack 0
  6230                           tosu	equ	0xFFF
  6231                           tosh	equ	0xFFE
  6232                           tosl	equ	0xFFD
  6233                           pclath	equ	0xFFA
  6234                           tblptru	equ	0xFF8
  6235                           tblptrh	equ	0xFF7
  6236                           tblptrl	equ	0xFF6
  6237                           tablat	equ	0xFF5
  6238                           prodh	equ	0xFF4
  6239                           prodl	equ	0xFF3
  6240                           postinc0	equ	0xFEE
  6241                           plusw0	equ	0xFEB
  6242                           wreg	equ	0xFE8
  6243                           postdec1	equ	0xFE5
  6244                           fsr1h	equ	0xFE2
  6245                           fsr1l	equ	0xFE1
  6246                           indf2	equ	0xFDF
  6247                           postinc2	equ	0xFDE
  6248                           postdec2	equ	0xFDD
  6249                           plusw2	equ	0xFDB
  6250                           fsr2h	equ	0xFDA
  6251                           fsr2l	equ	0xFD9
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function _HMI_Poll *****************
  6255 ;; Defined at:
  6256 ;;		line 252 in file "HMI.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;		None
  6259 ;; Auto vars:     Size  Location     Type
  6260 ;;		None
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  1    wreg      void 
  6263 ;; Registers used:
  6264 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;Total ram usage:        0 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:   15
  6277 ;; This function calls:
  6278 ;;		_Button_Poll
  6279 ;; This function is called by:
  6280 ;;		_getMode
  6281 ;;		_continuousMode
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           	psect	text22
  6286  013AA6                     __ptext22:
  6287                           	opt stack 0
  6288  013AA6                     _HMI_Poll:
  6289                           	opt stack 10
  6290                           
  6291                           ;HMI.c: 254: TRISE = 0xFF;
  6292                           
  6293                           ; BSR set to: 0
  6294                           ;incstack = 0
  6295  013AA6  6896               	setf	3990,c	;volatile
  6296                           
  6297                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  6298  013AA8  0E5A               	movlw	low (_HMIBoard+48)
  6299  013AAA  0100               	movlb	0	; () banked
  6300  013AAC  6FD3               	movwf	Button_Poll@pButton& (0+255),b
  6301  013AAE  0E01               	movlw	high (_HMIBoard+48)
  6302  013AB0  0100               	movlb	0	; () banked
  6303  013AB2  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6304  013AB4  0E01               	movlw	1
  6305  013AB6  0100               	movlb	0	; () banked
  6306  013AB8  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
  6307  013ABA  ECA2  F08F         	call	_Button_Poll	;wreg free
  6308                           
  6309                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  6310  013ABE  0E3C               	movlw	low (_HMIBoard+18)
  6311  013AC0  0100               	movlb	0	; () banked
  6312  013AC2  6FD3               	movwf	Button_Poll@pButton& (0+255),b
  6313  013AC4  0E01               	movlw	high (_HMIBoard+18)
  6314  013AC6  0100               	movlb	0	; () banked
  6315  013AC8  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6316  013ACA  0E01               	movlw	1
  6317  013ACC  0100               	movlb	0	; () banked
  6318  013ACE  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
  6319  013AD0  ECA2  F08F         	call	_Button_Poll	;wreg free
  6320                           
  6321                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  6322  013AD4  0E32               	movlw	low (_HMIBoard+8)
  6323  013AD6  0100               	movlb	0	; () banked
  6324  013AD8  6FD3               	movwf	Button_Poll@pButton& (0+255),b
  6325  013ADA  0E01               	movlw	high (_HMIBoard+8)
  6326  013ADC  0100               	movlb	0	; () banked
  6327  013ADE  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6328  013AE0  0E01               	movlw	1
  6329  013AE2  0100               	movlb	0	; () banked
  6330  013AE4  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
  6331  013AE6  ECA2  F08F         	call	_Button_Poll	;wreg free
  6332                           
  6333                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  6334  013AEA  0E46               	movlw	low (_HMIBoard+28)
  6335  013AEC  0100               	movlb	0	; () banked
  6336  013AEE  6FD3               	movwf	Button_Poll@pButton& (0+255),b
  6337  013AF0  0E01               	movlw	high (_HMIBoard+28)
  6338  013AF2  0100               	movlb	0	; () banked
  6339  013AF4  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6340  013AF6  0E01               	movlw	1
  6341  013AF8  0100               	movlb	0	; () banked
  6342  013AFA  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
  6343  013AFC  ECA2  F08F         	call	_Button_Poll	;wreg free
  6344                           
  6345                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  6346  013B00  0E50               	movlw	low (_HMIBoard+38)
  6347  013B02  0100               	movlb	0	; () banked
  6348  013B04  6FD3               	movwf	Button_Poll@pButton& (0+255),b
  6349  013B06  0E01               	movlw	high (_HMIBoard+38)
  6350  013B08  0100               	movlb	0	; () banked
  6351  013B0A  6FD4               	movwf	(Button_Poll@pButton+1)& (0+255),b
  6352  013B0C  0E01               	movlw	1
  6353  013B0E  0100               	movlb	0	; () banked
  6354  013B10  6FD5               	movwf	Button_Poll@pIncrement& (0+255),b
  6355  013B12  ECA2  F08F         	call	_Button_Poll	;wreg free
  6356  013B16  0012               	return		;funcret
  6357  013B18                     __end_of_HMI_Poll:
  6358                           	opt stack 0
  6359                           tosu	equ	0xFFF
  6360                           tosh	equ	0xFFE
  6361                           tosl	equ	0xFFD
  6362                           pclath	equ	0xFFA
  6363                           tblptru	equ	0xFF8
  6364                           tblptrh	equ	0xFF7
  6365                           tblptrl	equ	0xFF6
  6366                           tablat	equ	0xFF5
  6367                           prodh	equ	0xFF4
  6368                           prodl	equ	0xFF3
  6369                           postinc0	equ	0xFEE
  6370                           plusw0	equ	0xFEB
  6371                           wreg	equ	0xFE8
  6372                           postdec1	equ	0xFE5
  6373                           fsr1h	equ	0xFE2
  6374                           fsr1l	equ	0xFE1
  6375                           indf2	equ	0xFDF
  6376                           postinc2	equ	0xFDE
  6377                           postdec2	equ	0xFDD
  6378                           plusw2	equ	0xFDB
  6379                           fsr2h	equ	0xFDA
  6380                           fsr2l	equ	0xFD9
  6381                           status	equ	0xFD8
  6382                           
  6383 ;; *************** function _Button_Poll *****************
  6384 ;; Defined at:
  6385 ;;		line 57 in file "Library/Button.c"
  6386 ;; Parameters:    Size  Location     Type
  6387 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  6388 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  6389 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  6390 ;; Auto vars:     Size  Location     Type
  6391 ;;  Pin             1   35[BANK0 ] unsigned char 
  6392 ;; Return value:  Size  Location     Type
  6393 ;;                  1    wreg      unsigned char 
  6394 ;; Registers used:
  6395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  6396 ;; Tracked objects:
  6397 ;;		On entry : 0/0
  6398 ;;		On exit  : 0/0
  6399 ;;		Unchanged: 0/0
  6400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6401 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6402 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6403 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6404 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6405 ;;Total ram usage:        9 bytes
  6406 ;; Hardware stack levels used:    1
  6407 ;; Hardware stack levels required when called:   14
  6408 ;; This function calls:
  6409 ;;		_Event_DIPSwitch
  6410 ;;		_Event_HMI_DIPSwitch
  6411 ;;		_Event_HMI_DownButton
  6412 ;;		_Event_HMI_LeftButton
  6413 ;;		_Event_HMI_RightButton
  6414 ;;		_Event_HMI_UpButton
  6415 ;;		_Event_TestButton
  6416 ;;		_HMI_DIPSwitch
  6417 ;;		_HMI_DownSwitch
  6418 ;;		_HMI_LeftSwitch
  6419 ;;		_HMI_RightSwitch
  6420 ;;		_HMI_UpSwitch
  6421 ;;		_MXK_DIPSwitch
  6422 ;;		_MXK_TestButton
  6423 ;; This function is called by:
  6424 ;;		_HMI_Poll
  6425 ;;		_MXK_Poll
  6426 ;; This function uses a non-reentrant model
  6427 ;;
  6428                           
  6429                           	psect	text23
  6430  011F44                     __ptext23:
  6431                           	opt stack 0
  6432  011F44                     _Button_Poll:
  6433                           	opt stack 10
  6434                           
  6435                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  6436                           
  6437                           ;incstack = 0
  6438  011F44  0100               	movlb	0	; () banked
  6439  011F46  EE20 F007          	lfsr	2,7
  6440  011F4A  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6441  011F4C  26D9               	addwf	fsr2l,f,c
  6442  011F4E  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6443  011F50  22DA               	addwfc	fsr2h,f,c
  6444  011F52  D801               	call	u7208
  6445  011F54  D00A               	goto	u7209
  6446  011F56                     u7208:
  6447  011F56  0005               	push	
  6448  011F58  6EFA               	movwf	pclath,c
  6449  011F5A  50DE               	movf	postinc2,w,c
  6450  011F5C  6EFD               	movwf	tosl,c
  6451  011F5E  50DE               	movf	postinc2,w,c
  6452  011F60  6EFE               	movwf	tosh,c
  6453  011F62  50DE               	movf	postinc2,w,c
  6454  011F64  6EFF               	movwf	tosu,c
  6455  011F66  50FA               	movf	pclath,w,c
  6456  011F68  0012               	return		;indir
  6457  011F6A                     u7209:
  6458  011F6A  0100               	movlb	0	; () banked
  6459  011F6C  6FDB               	movwf	Button_Poll@Pin& (0+255),b
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;Button.c: 61: if (pButton->mState == Pin)
  6463  011F6E  C0D3  FFD9         	movff	Button_Poll@pButton,fsr2l
  6464  011F72  C0D4  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6465  011F76  0100               	movlb	0	; () banked
  6466  011F78  51DB               	movf	Button_Poll@Pin& (0+255),w,b
  6467  011F7A  18DE               	xorwf	postinc2,w,c
  6468  011F7C  A4D8               	btfss	status,2,c
  6469  011F7E  D021               	goto	l11
  6470                           
  6471                           ; BSR set to: 0
  6472                           ;Button.c: 62: {
  6473                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  6474  011F80  0100               	movlb	0	; () banked
  6475  011F82  EE20 F001          	lfsr	2,1
  6476  011F86  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6477  011F88  26D9               	addwf	fsr2l,f,c
  6478  011F8A  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6479  011F8C  22DA               	addwfc	fsr2h,f,c
  6480  011F8E  0100               	movlb	0	; () banked
  6481  011F90  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
  6482  011F92  5CDE               	subwf	postinc2,w,c
  6483  011F94  B0D8               	btfsc	status,0,c
  6484  011F96  D00A               	goto	l12
  6485                           
  6486                           ; BSR set to: 0
  6487                           ;Button.c: 66: pButton->mCount = 0;
  6488  011F98  0100               	movlb	0	; () banked
  6489  011F9A  EE20 F001          	lfsr	2,1
  6490  011F9E  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6491  011FA0  26D9               	addwf	fsr2l,f,c
  6492  011FA2  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6493  011FA4  22DA               	addwfc	fsr2h,f,c
  6494  011FA6  0E00               	movlw	0
  6495  011FA8  6EDF               	movwf	indf2,c
  6496  011FAA  0012               	return	
  6497  011FAC                     l12:
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;Button.c: 67: else
  6501                           ;Button.c: 68: pButton->mCount -= pIncrement;
  6502                           
  6503                           ; BSR set to: 0
  6504  011FAC  0100               	movlb	0	; () banked
  6505  011FAE  EE20 F001          	lfsr	2,1
  6506  011FB2  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6507  011FB4  26D9               	addwf	fsr2l,f,c
  6508  011FB6  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6509  011FB8  22DA               	addwfc	fsr2h,f,c
  6510  011FBA  0100               	movlb	0	; () banked
  6511  011FBC  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
  6512  011FBE  5EDF               	subwf	indf2,f,c
  6513                           
  6514                           ; BSR set to: 0
  6515                           ;Button.c: 69: }
  6516  011FC0  0012               	return	
  6517  011FC2                     l11:
  6518                           
  6519                           ; BSR set to: 0
  6520                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  6521                           
  6522                           ; BSR set to: 0
  6523  011FC2  0100               	movlb	0	; () banked
  6524  011FC4  EE20 F001          	lfsr	2,1
  6525  011FC8  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6526  011FCA  26D9               	addwf	fsr2l,f,c
  6527  011FCC  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6528  011FCE  22DA               	addwfc	fsr2h,f,c
  6529  011FD0  50DF               	movf	indf2,w,c
  6530  011FD2  0100               	movlb	0	; () banked
  6531  011FD4  6FD6               	movwf	??_Button_Poll& (0+255),b
  6532  011FD6  6BD7               	clrf	(??_Button_Poll+1)& (0+255),b
  6533  011FD8  0100               	movlb	0	; () banked
  6534  011FDA  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
  6535  011FDC  0100               	movlb	0	; () banked
  6536  011FDE  27D6               	addwf	??_Button_Poll& (0+255),f,b
  6537  011FE0  0E00               	movlw	0
  6538  011FE2  23D7               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  6539  011FE4  0100               	movlb	0	; () banked
  6540  011FE6  EE20 F001          	lfsr	2,1
  6541  011FEA  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6542  011FEC  26D9               	addwf	fsr2l,f,c
  6543  011FEE  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6544  011FF0  22DA               	addwfc	fsr2h,f,c
  6545  011FF2  50DF               	movf	indf2,w,c
  6546  011FF4  0100               	movlb	0	; () banked
  6547  011FF6  6FD8               	movwf	(??_Button_Poll+2)& (0+255),b
  6548  011FF8  6BD9               	clrf	(??_Button_Poll+3)& (0+255),b
  6549  011FFA  0100               	movlb	0	; () banked
  6550  011FFC  51D6               	movf	??_Button_Poll& (0+255),w,b
  6551  011FFE  0100               	movlb	0	; () banked
  6552  012000  5DD8               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6553  012002  0100               	movlb	0	; () banked
  6554  012004  51D9               	movf	(??_Button_Poll+3)& (0+255),w,b
  6555  012006  0A80               	xorlw	128
  6556  012008  0100               	movlb	0	; () banked
  6557  01200A  6FDA               	movwf	(??_Button_Poll+4)& (0+255),b
  6558  01200C  0100               	movlb	0	; () banked
  6559  01200E  51D7               	movf	(??_Button_Poll+1)& (0+255),w,b
  6560  012010  0A80               	xorlw	128
  6561  012012  0100               	movlb	0	; () banked
  6562  012014  59DA               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  6563  012016  B0D8               	btfsc	status,0,c
  6564  012018  0012               	return	
  6565                           
  6566                           ; BSR set to: 0
  6567                           ;Button.c: 73: {
  6568                           ;Button.c: 75: pButton->mCount += pIncrement;
  6569  01201A  0100               	movlb	0	; () banked
  6570  01201C  EE20 F001          	lfsr	2,1
  6571  012020  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6572  012022  26D9               	addwf	fsr2l,f,c
  6573  012024  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6574  012026  22DA               	addwfc	fsr2h,f,c
  6575  012028  0100               	movlb	0	; () banked
  6576  01202A  51D5               	movf	Button_Poll@pIncrement& (0+255),w,b
  6577  01202C  26DF               	addwf	indf2,f,c
  6578                           
  6579                           ; BSR set to: 0
  6580                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  6581  01202E  0100               	movlb	0	; () banked
  6582  012030  EE20 F002          	lfsr	2,2
  6583  012034  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6584  012036  26D9               	addwf	fsr2l,f,c
  6585  012038  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6586  01203A  22DA               	addwfc	fsr2h,f,c
  6587  01203C  0100               	movlb	0	; () banked
  6588  01203E  EE10 F001          	lfsr	1,1
  6589  012042  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6590  012044  26E1               	addwf	fsr1l,f,c
  6591  012046  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6592  012048  22E2               	addwfc	fsr1h,f,c
  6593  01204A  50E7               	movf	indf1,w,c
  6594  01204C  0100               	movlb	0	; () banked
  6595  01204E  6FD8               	movwf	(??_Button_Poll+2)& (0+255),b
  6596  012050  6BD9               	clrf	(??_Button_Poll+3)& (0+255),b
  6597  012052  50DE               	movf	postinc2,w,c
  6598  012054  0100               	movlb	0	; () banked
  6599  012056  5DD8               	subwf	(??_Button_Poll+2)& (0+255),w,b
  6600  012058  50DE               	movf	postinc2,w,c
  6601  01205A  0100               	movlb	0	; () banked
  6602  01205C  59D9               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  6603  01205E  A0D8               	btfss	status,0,c
  6604  012060  0012               	return	
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;Button.c: 77: {
  6608                           ;Button.c: 79: pButton->mState = Pin;
  6609  012062  C0D3  FFD9         	movff	Button_Poll@pButton,fsr2l
  6610  012066  C0D4  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  6611  01206A  C0DB  FFDF         	movff	Button_Poll@Pin,indf2
  6612                           
  6613                           ; BSR set to: 0
  6614                           ;Button.c: 80: pButton->mCount = 0;
  6615  01206E  0100               	movlb	0	; () banked
  6616  012070  EE20 F001          	lfsr	2,1
  6617  012074  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6618  012076  26D9               	addwf	fsr2l,f,c
  6619  012078  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6620  01207A  22DA               	addwfc	fsr2h,f,c
  6621  01207C  0E00               	movlw	0
  6622  01207E  6EDF               	movwf	indf2,c
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;Button.c: 83: pButton->mFunction(Pin);
  6626  012080  0100               	movlb	0	; () banked
  6627  012082  EE20 F004          	lfsr	2,4
  6628  012086  51D3               	movf	Button_Poll@pButton& (0+255),w,b
  6629  012088  26D9               	addwf	fsr2l,f,c
  6630  01208A  51D4               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  6631  01208C  22DA               	addwfc	fsr2h,f,c
  6632  01208E  D801               	call	u7258
  6633  012090  0012               	return	
  6634  012092                     u7258:
  6635  012092  0005               	push	
  6636  012094  6EFA               	movwf	pclath,c
  6637  012096  50DE               	movf	postinc2,w,c
  6638  012098  6EFD               	movwf	tosl,c
  6639  01209A  50DE               	movf	postinc2,w,c
  6640  01209C  6EFE               	movwf	tosh,c
  6641  01209E  50DE               	movf	postinc2,w,c
  6642  0120A0  6EFF               	movwf	tosu,c
  6643  0120A2  50FA               	movf	pclath,w,c
  6644  0120A4  0100               	movlb	0	; () banked
  6645  0120A6  51DB               	movf	Button_Poll@Pin& (0+255),w,b
  6646  0120A8  0012               	return		;indir
  6647  0120AA                     __end_of_Button_Poll:
  6648                           	opt stack 0
  6649                           tosu	equ	0xFFF
  6650                           tosh	equ	0xFFE
  6651                           tosl	equ	0xFFD
  6652                           pclath	equ	0xFFA
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           postinc0	equ	0xFEE
  6660                           plusw0	equ	0xFEB
  6661                           wreg	equ	0xFE8
  6662                           indf1	equ	0xFE7
  6663                           postdec1	equ	0xFE5
  6664                           fsr1h	equ	0xFE2
  6665                           fsr1l	equ	0xFE1
  6666                           indf2	equ	0xFDF
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           plusw2	equ	0xFDB
  6670                           fsr2h	equ	0xFDA
  6671                           fsr2l	equ	0xFD9
  6672                           status	equ	0xFD8
  6673                           
  6674 ;; *************** function _MXK_DIPSwitch *****************
  6675 ;; Defined at:
  6676 ;;		line 24 in file "Library/MXK.c"
  6677 ;; Parameters:    Size  Location     Type
  6678 ;;		None
  6679 ;; Auto vars:     Size  Location     Type
  6680 ;;		None
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      unsigned char 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6694 ;;Total ram usage:        0 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:    8
  6697 ;; This function calls:
  6698 ;;		_Port_GetQuad
  6699 ;; This function is called by:
  6700 ;;		_FunctInitButton
  6701 ;;		_Button_Poll
  6702 ;;		_getMode
  6703 ;;		_continuousMode
  6704 ;; This function uses a non-reentrant model
  6705 ;;
  6706                           
  6707                           	psect	text24
  6708  014A8E                     __ptext24:
  6709                           	opt stack 0
  6710  014A8E                     _MXK_DIPSwitch:
  6711                           	opt stack 17
  6712                           
  6713                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
  6714                           
  6715                           ;incstack = 0
  6716  014A8E  0E87               	movlw	low _PortD
  6717  014A90  0100               	movlb	0	; () banked
  6718  014A92  6FB8               	movwf	Port_GetQuad@pInput& (0+255),b
  6719  014A94  0E00               	movlw	high _PortD
  6720  014A96  0100               	movlb	0	; () banked
  6721  014A98  6FB9               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6722  014A9A  0E00               	movlw	0
  6723  014A9C  0100               	movlb	0	; () banked
  6724  014A9E  6FBA               	movwf	Port_GetQuad@pQuad& (0+255),b
  6725  014AA0  EC0A  F0A1         	call	_Port_GetQuad
  6726  014AA4  0012               	return	
  6727  014AA6                     __end_of_MXK_DIPSwitch:
  6728                           	opt stack 0
  6729                           tosu	equ	0xFFF
  6730                           tosh	equ	0xFFE
  6731                           tosl	equ	0xFFD
  6732                           pclath	equ	0xFFA
  6733                           tblptru	equ	0xFF8
  6734                           tblptrh	equ	0xFF7
  6735                           tblptrl	equ	0xFF6
  6736                           tablat	equ	0xFF5
  6737                           prodh	equ	0xFF4
  6738                           prodl	equ	0xFF3
  6739                           postinc0	equ	0xFEE
  6740                           plusw0	equ	0xFEB
  6741                           wreg	equ	0xFE8
  6742                           indf1	equ	0xFE7
  6743                           postdec1	equ	0xFE5
  6744                           fsr1h	equ	0xFE2
  6745                           fsr1l	equ	0xFE1
  6746                           indf2	equ	0xFDF
  6747                           postinc2	equ	0xFDE
  6748                           postdec2	equ	0xFDD
  6749                           plusw2	equ	0xFDB
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _HMI_DIPSwitch *****************
  6755 ;; Defined at:
  6756 ;;		line 47 in file "HMI.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;		None
  6759 ;; Auto vars:     Size  Location     Type
  6760 ;;		None
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  1    wreg      unsigned char 
  6763 ;; Registers used:
  6764 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6771 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;Total ram usage:        0 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    8
  6777 ;; This function calls:
  6778 ;;		_Port_GetQuad
  6779 ;; This function is called by:
  6780 ;;		_HMI_Init
  6781 ;;		_Button_Poll
  6782 ;;		_getMode
  6783 ;;		_continuousMode
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text25
  6788  014AA6                     __ptext25:
  6789                           	opt stack 0
  6790  014AA6                     _HMI_DIPSwitch:
  6791                           	opt stack 15
  6792                           
  6793                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
  6794                           
  6795                           ;incstack = 0
  6796  014AA6  0E7D               	movlw	low _PortE
  6797  014AA8  0100               	movlb	0	; () banked
  6798  014AAA  6FB8               	movwf	Port_GetQuad@pInput& (0+255),b
  6799  014AAC  0E00               	movlw	high _PortE
  6800  014AAE  0100               	movlb	0	; () banked
  6801  014AB0  6FB9               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
  6802  014AB2  0E00               	movlw	0
  6803  014AB4  0100               	movlb	0	; () banked
  6804  014AB6  6FBA               	movwf	Port_GetQuad@pQuad& (0+255),b
  6805  014AB8  EC0A  F0A1         	call	_Port_GetQuad	;wreg free
  6806  014ABC  0012               	return	
  6807  014ABE                     __end_of_HMI_DIPSwitch:
  6808                           	opt stack 0
  6809                           tosu	equ	0xFFF
  6810                           tosh	equ	0xFFE
  6811                           tosl	equ	0xFFD
  6812                           pclath	equ	0xFFA
  6813                           tblptru	equ	0xFF8
  6814                           tblptrh	equ	0xFF7
  6815                           tblptrl	equ	0xFF6
  6816                           tablat	equ	0xFF5
  6817                           prodh	equ	0xFF4
  6818                           prodl	equ	0xFF3
  6819                           postinc0	equ	0xFEE
  6820                           plusw0	equ	0xFEB
  6821                           wreg	equ	0xFE8
  6822                           indf1	equ	0xFE7
  6823                           postdec1	equ	0xFE5
  6824                           fsr1h	equ	0xFE2
  6825                           fsr1l	equ	0xFE1
  6826                           indf2	equ	0xFDF
  6827                           postinc2	equ	0xFDE
  6828                           postdec2	equ	0xFDD
  6829                           plusw2	equ	0xFDB
  6830                           fsr2h	equ	0xFDA
  6831                           fsr2l	equ	0xFD9
  6832                           status	equ	0xFD8
  6833                           
  6834 ;; *************** function _HMI_DownSwitch *****************
  6835 ;; Defined at:
  6836 ;;		line 42 in file "HMI.c"
  6837 ;; Parameters:    Size  Location     Type
  6838 ;;		None
  6839 ;; Auto vars:     Size  Location     Type
  6840 ;;		None
  6841 ;; Return value:  Size  Location     Type
  6842 ;;                  1    wreg      unsigned char 
  6843 ;; Registers used:
  6844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6845 ;; Tracked objects:
  6846 ;;		On entry : 0/0
  6847 ;;		On exit  : 0/0
  6848 ;;		Unchanged: 0/0
  6849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6854 ;;Total ram usage:        0 bytes
  6855 ;; Hardware stack levels used:    1
  6856 ;; Hardware stack levels required when called:    8
  6857 ;; This function calls:
  6858 ;;		_Port_GetPin
  6859 ;; This function is called by:
  6860 ;;		_HMI_Init
  6861 ;;		_Button_Poll
  6862 ;;		_getMode
  6863 ;;		_continuousMode
  6864 ;; This function uses a non-reentrant model
  6865 ;;
  6866                           
  6867                           	psect	text26
  6868  014ABE                     __ptext26:
  6869                           	opt stack 0
  6870  014ABE                     _HMI_DownSwitch:
  6871                           	opt stack 15
  6872                           
  6873                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
  6874                           
  6875                           ;incstack = 0
  6876  014ABE  0E7D               	movlw	low _PortE
  6877  014AC0  0100               	movlb	0	; () banked
  6878  014AC2  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
  6879  014AC4  0E00               	movlw	high _PortE
  6880  014AC6  0100               	movlb	0	; () banked
  6881  014AC8  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6882  014ACA  0E06               	movlw	6
  6883  014ACC  0100               	movlb	0	; () banked
  6884  014ACE  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
  6885  014AD0  EC77  F0A1         	call	_Port_GetPin	;wreg free
  6886  014AD4  0012               	return	
  6887  014AD6                     __end_of_HMI_DownSwitch:
  6888                           	opt stack 0
  6889                           tosu	equ	0xFFF
  6890                           tosh	equ	0xFFE
  6891                           tosl	equ	0xFFD
  6892                           pclath	equ	0xFFA
  6893                           tblptru	equ	0xFF8
  6894                           tblptrh	equ	0xFF7
  6895                           tblptrl	equ	0xFF6
  6896                           tablat	equ	0xFF5
  6897                           prodh	equ	0xFF4
  6898                           prodl	equ	0xFF3
  6899                           postinc0	equ	0xFEE
  6900                           plusw0	equ	0xFEB
  6901                           wreg	equ	0xFE8
  6902                           indf1	equ	0xFE7
  6903                           postdec1	equ	0xFE5
  6904                           fsr1h	equ	0xFE2
  6905                           fsr1l	equ	0xFE1
  6906                           indf2	equ	0xFDF
  6907                           postinc2	equ	0xFDE
  6908                           postdec2	equ	0xFDD
  6909                           plusw2	equ	0xFDB
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function _HMI_UpSwitch *****************
  6915 ;; Defined at:
  6916 ;;		line 37 in file "HMI.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;		None
  6919 ;; Auto vars:     Size  Location     Type
  6920 ;;		None
  6921 ;; Return value:  Size  Location     Type
  6922 ;;                  1    wreg      unsigned char 
  6923 ;; Registers used:
  6924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6925 ;; Tracked objects:
  6926 ;;		On entry : 0/0
  6927 ;;		On exit  : 0/0
  6928 ;;		Unchanged: 0/0
  6929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6934 ;;Total ram usage:        0 bytes
  6935 ;; Hardware stack levels used:    1
  6936 ;; Hardware stack levels required when called:    8
  6937 ;; This function calls:
  6938 ;;		_Port_GetPin
  6939 ;; This function is called by:
  6940 ;;		_HMI_Init
  6941 ;;		_Button_Poll
  6942 ;;		_getMode
  6943 ;;		_continuousMode
  6944 ;; This function uses a non-reentrant model
  6945 ;;
  6946                           
  6947                           	psect	text27
  6948  014AD6                     __ptext27:
  6949                           	opt stack 0
  6950  014AD6                     _HMI_UpSwitch:
  6951                           	opt stack 17
  6952                           
  6953                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
  6954                           
  6955                           ;incstack = 0
  6956  014AD6  0E7D               	movlw	low _PortE
  6957  014AD8  0100               	movlb	0	; () banked
  6958  014ADA  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
  6959  014ADC  0E00               	movlw	high _PortE
  6960  014ADE  0100               	movlb	0	; () banked
  6961  014AE0  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  6962  014AE2  0E07               	movlw	7
  6963  014AE4  0100               	movlb	0	; () banked
  6964  014AE6  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
  6965  014AE8  EC77  F0A1         	call	_Port_GetPin	;wreg free
  6966  014AEC  0012               	return	
  6967  014AEE                     __end_of_HMI_UpSwitch:
  6968                           	opt stack 0
  6969                           tosu	equ	0xFFF
  6970                           tosh	equ	0xFFE
  6971                           tosl	equ	0xFFD
  6972                           pclath	equ	0xFFA
  6973                           tblptru	equ	0xFF8
  6974                           tblptrh	equ	0xFF7
  6975                           tblptrl	equ	0xFF6
  6976                           tablat	equ	0xFF5
  6977                           prodh	equ	0xFF4
  6978                           prodl	equ	0xFF3
  6979                           postinc0	equ	0xFEE
  6980                           plusw0	equ	0xFEB
  6981                           wreg	equ	0xFE8
  6982                           indf1	equ	0xFE7
  6983                           postdec1	equ	0xFE5
  6984                           fsr1h	equ	0xFE2
  6985                           fsr1l	equ	0xFE1
  6986                           indf2	equ	0xFDF
  6987                           postinc2	equ	0xFDE
  6988                           postdec2	equ	0xFDD
  6989                           plusw2	equ	0xFDB
  6990                           fsr2h	equ	0xFDA
  6991                           fsr2l	equ	0xFD9
  6992                           status	equ	0xFD8
  6993                           
  6994 ;; *************** function _HMI_RightSwitch *****************
  6995 ;; Defined at:
  6996 ;;		line 32 in file "HMI.c"
  6997 ;; Parameters:    Size  Location     Type
  6998 ;;		None
  6999 ;; Auto vars:     Size  Location     Type
  7000 ;;		None
  7001 ;; Return value:  Size  Location     Type
  7002 ;;                  1    wreg      unsigned char 
  7003 ;; Registers used:
  7004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7005 ;; Tracked objects:
  7006 ;;		On entry : 0/0
  7007 ;;		On exit  : 0/0
  7008 ;;		Unchanged: 0/0
  7009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7014 ;;Total ram usage:        0 bytes
  7015 ;; Hardware stack levels used:    1
  7016 ;; Hardware stack levels required when called:    8
  7017 ;; This function calls:
  7018 ;;		_Port_GetPin
  7019 ;; This function is called by:
  7020 ;;		_HMI_Init
  7021 ;;		_Button_Poll
  7022 ;;		_getMode
  7023 ;;		_continuousMode
  7024 ;; This function uses a non-reentrant model
  7025 ;;
  7026                           
  7027                           	psect	text28
  7028  014AEE                     __ptext28:
  7029                           	opt stack 0
  7030  014AEE                     _HMI_RightSwitch:
  7031                           	opt stack 17
  7032                           
  7033                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
  7034                           
  7035                           ;incstack = 0
  7036  014AEE  0E7D               	movlw	low _PortE
  7037  014AF0  0100               	movlb	0	; () banked
  7038  014AF2  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
  7039  014AF4  0E00               	movlw	high _PortE
  7040  014AF6  0100               	movlb	0	; () banked
  7041  014AF8  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7042  014AFA  0E04               	movlw	4
  7043  014AFC  0100               	movlb	0	; () banked
  7044  014AFE  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
  7045  014B00  EC77  F0A1         	call	_Port_GetPin	;wreg free
  7046  014B04  0012               	return	
  7047  014B06                     __end_of_HMI_RightSwitch:
  7048                           	opt stack 0
  7049                           tosu	equ	0xFFF
  7050                           tosh	equ	0xFFE
  7051                           tosl	equ	0xFFD
  7052                           pclath	equ	0xFFA
  7053                           tblptru	equ	0xFF8
  7054                           tblptrh	equ	0xFF7
  7055                           tblptrl	equ	0xFF6
  7056                           tablat	equ	0xFF5
  7057                           prodh	equ	0xFF4
  7058                           prodl	equ	0xFF3
  7059                           postinc0	equ	0xFEE
  7060                           plusw0	equ	0xFEB
  7061                           wreg	equ	0xFE8
  7062                           indf1	equ	0xFE7
  7063                           postdec1	equ	0xFE5
  7064                           fsr1h	equ	0xFE2
  7065                           fsr1l	equ	0xFE1
  7066                           indf2	equ	0xFDF
  7067                           postinc2	equ	0xFDE
  7068                           postdec2	equ	0xFDD
  7069                           plusw2	equ	0xFDB
  7070                           fsr2h	equ	0xFDA
  7071                           fsr2l	equ	0xFD9
  7072                           status	equ	0xFD8
  7073                           
  7074 ;; *************** function _HMI_LeftSwitch *****************
  7075 ;; Defined at:
  7076 ;;		line 27 in file "HMI.c"
  7077 ;; Parameters:    Size  Location     Type
  7078 ;;		None
  7079 ;; Auto vars:     Size  Location     Type
  7080 ;;		None
  7081 ;; Return value:  Size  Location     Type
  7082 ;;                  1    wreg      unsigned char 
  7083 ;; Registers used:
  7084 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7085 ;; Tracked objects:
  7086 ;;		On entry : 0/0
  7087 ;;		On exit  : 0/0
  7088 ;;		Unchanged: 0/0
  7089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;Total ram usage:        0 bytes
  7095 ;; Hardware stack levels used:    1
  7096 ;; Hardware stack levels required when called:    8
  7097 ;; This function calls:
  7098 ;;		_Port_GetPin
  7099 ;; This function is called by:
  7100 ;;		_HMI_Init
  7101 ;;		_Button_Poll
  7102 ;;		_getMode
  7103 ;;		_continuousMode
  7104 ;; This function uses a non-reentrant model
  7105 ;;
  7106                           
  7107                           	psect	text29
  7108  014B06                     __ptext29:
  7109                           	opt stack 0
  7110  014B06                     _HMI_LeftSwitch:
  7111                           	opt stack 15
  7112                           
  7113                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
  7114                           
  7115                           ;incstack = 0
  7116  014B06  0E7D               	movlw	low _PortE
  7117  014B08  0100               	movlb	0	; () banked
  7118  014B0A  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
  7119  014B0C  0E00               	movlw	high _PortE
  7120  014B0E  0100               	movlb	0	; () banked
  7121  014B10  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7122  014B12  0E05               	movlw	5
  7123  014B14  0100               	movlb	0	; () banked
  7124  014B16  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
  7125  014B18  EC77  F0A1         	call	_Port_GetPin	;wreg free
  7126  014B1C  0012               	return	
  7127  014B1E                     __end_of_HMI_LeftSwitch:
  7128                           	opt stack 0
  7129                           tosu	equ	0xFFF
  7130                           tosh	equ	0xFFE
  7131                           tosl	equ	0xFFD
  7132                           pclath	equ	0xFFA
  7133                           tblptru	equ	0xFF8
  7134                           tblptrh	equ	0xFF7
  7135                           tblptrl	equ	0xFF6
  7136                           tablat	equ	0xFF5
  7137                           prodh	equ	0xFF4
  7138                           prodl	equ	0xFF3
  7139                           postinc0	equ	0xFEE
  7140                           plusw0	equ	0xFEB
  7141                           wreg	equ	0xFE8
  7142                           indf1	equ	0xFE7
  7143                           postdec1	equ	0xFE5
  7144                           fsr1h	equ	0xFE2
  7145                           fsr1l	equ	0xFE1
  7146                           indf2	equ	0xFDF
  7147                           postinc2	equ	0xFDE
  7148                           postdec2	equ	0xFDD
  7149                           plusw2	equ	0xFDB
  7150                           fsr2h	equ	0xFDA
  7151                           fsr2l	equ	0xFD9
  7152                           status	equ	0xFD8
  7153                           
  7154 ;; *************** function _MXK_TestButton *****************
  7155 ;; Defined at:
  7156 ;;		line 14 in file "Library/MXK.c"
  7157 ;; Parameters:    Size  Location     Type
  7158 ;;		None
  7159 ;; Auto vars:     Size  Location     Type
  7160 ;;		None
  7161 ;; Return value:  Size  Location     Type
  7162 ;;                  1    wreg      unsigned char 
  7163 ;; Registers used:
  7164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7165 ;; Tracked objects:
  7166 ;;		On entry : 0/0
  7167 ;;		On exit  : 0/0
  7168 ;;		Unchanged: 0/0
  7169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7173 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7174 ;;Total ram usage:        0 bytes
  7175 ;; Hardware stack levels used:    1
  7176 ;; Hardware stack levels required when called:    8
  7177 ;; This function calls:
  7178 ;;		_Port_GetPin
  7179 ;; This function is called by:
  7180 ;;		_FunctInitButton
  7181 ;;		_Button_Poll
  7182 ;;		_getMode
  7183 ;;		_continuousMode
  7184 ;; This function uses a non-reentrant model
  7185 ;;
  7186                           
  7187                           	psect	text30
  7188  014B1E                     __ptext30:
  7189                           	opt stack 0
  7190  014B1E                     _MXK_TestButton:
  7191                           	opt stack 17
  7192                           
  7193                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
  7194                           
  7195                           ;incstack = 0
  7196  014B1E  0E98               	movlw	low _PortB
  7197  014B20  0100               	movlb	0	; () banked
  7198  014B22  6FB8               	movwf	Port_GetPin@pInput& (0+255),b
  7199  014B24  0E01               	movlw	high _PortB
  7200  014B26  0100               	movlb	0	; () banked
  7201  014B28  6FB9               	movwf	(Port_GetPin@pInput+1)& (0+255),b
  7202  014B2A  0E04               	movlw	4
  7203  014B2C  0100               	movlb	0	; () banked
  7204  014B2E  6FBA               	movwf	Port_GetPin@pPin& (0+255),b
  7205  014B30  EC77  F0A1         	call	_Port_GetPin	;wreg free
  7206  014B34  0012               	return	
  7207  014B36                     __end_of_MXK_TestButton:
  7208                           	opt stack 0
  7209                           tosu	equ	0xFFF
  7210                           tosh	equ	0xFFE
  7211                           tosl	equ	0xFFD
  7212                           pclath	equ	0xFFA
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           postinc0	equ	0xFEE
  7220                           plusw0	equ	0xFEB
  7221                           wreg	equ	0xFE8
  7222                           indf1	equ	0xFE7
  7223                           postdec1	equ	0xFE5
  7224                           fsr1h	equ	0xFE2
  7225                           fsr1l	equ	0xFE1
  7226                           indf2	equ	0xFDF
  7227                           postinc2	equ	0xFDE
  7228                           postdec2	equ	0xFDD
  7229                           plusw2	equ	0xFDB
  7230                           fsr2h	equ	0xFDA
  7231                           fsr2l	equ	0xFD9
  7232                           status	equ	0xFD8
  7233                           
  7234 ;; *************** function _Port_GetQuad *****************
  7235 ;; Defined at:
  7236 ;;		line 498 in file "Library/Port.c"
  7237 ;; Parameters:    Size  Location     Type
  7238 ;;  pInput          2    0[BANK0 ] const PTR struct Port
  7239 ;;		 -> PortE(10), PortD(10), 
  7240 ;;  pQuad           1    2[BANK0 ] enum E6776
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  Output          1    5[BANK0 ] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;                  1    wreg      unsigned char 
  7245 ;; Registers used:
  7246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7252 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7256 ;;Total ram usage:        6 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    7
  7259 ;; This function calls:
  7260 ;;		Nothing
  7261 ;; This function is called by:
  7262 ;;		_HMI_DIPSwitch
  7263 ;;		_MXK_DIPSwitch
  7264 ;;		_Port_ToggleQuad
  7265 ;; This function uses a non-reentrant model
  7266 ;;
  7267                           
  7268                           	psect	text31
  7269  014214                     __ptext31:
  7270                           	opt stack 0
  7271  014214                     _Port_GetQuad:
  7272                           	opt stack 17
  7273                           
  7274                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
  7275                           
  7276                           ;incstack = 0
  7277  014214  0100               	movlb	0	; () banked
  7278  014216  EE20 F006          	lfsr	2,6
  7279  01421A  51B8               	movf	Port_GetQuad@pInput& (0+255),w,b
  7280  01421C  26D9               	addwf	fsr2l,f,c
  7281  01421E  51B9               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
  7282  014220  22DA               	addwfc	fsr2h,f,c
  7283  014222  CFDE F0BB          	movff	postinc2,??_Port_GetQuad
  7284  014226  CFDD F0BC          	movff	postdec2,??_Port_GetQuad+1
  7285  01422A  C0BB  FFD9         	movff	??_Port_GetQuad,fsr2l
  7286  01422E  C0BC  FFDA         	movff	??_Port_GetQuad+1,fsr2h
  7287  014232  50DF               	movf	indf2,w,c
  7288  014234  0100               	movlb	0	; () banked
  7289  014236  6FBD               	movwf	Port_GetQuad@Output& (0+255),b
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
  7293  014238  0100               	movlb	0	; () banked
  7294  01423A  51BA               	movf	Port_GetQuad@pQuad& (0+255),w,b
  7295  01423C  0D04               	mullw	4
  7296  01423E  28F3               	incf	prodl,w,c
  7297  014240  0100               	movlb	0	; () banked
  7298  014242  6FBB               	movwf	??_Port_GetQuad& (0+255),b
  7299  014244  D003               	goto	u6860
  7300  014246                     u6865:
  7301  014246  0100               	movlb	0	; () banked
  7302  014248  90D8               	bcf	status,0,c
  7303  01424A  33BD               	rrcf	Port_GetQuad@Output& (0+255),f,b
  7304  01424C                     u6860:
  7305  01424C  0100               	movlb	0	; () banked
  7306  01424E  2FBB               	decfsz	??_Port_GetQuad& (0+255),f,b
  7307  014250  D7FA               	goto	u6865
  7308                           
  7309                           ;Port.c: 502: Output &= 0xF;
  7310  014252  0E0F               	movlw	15
  7311  014254  0100               	movlb	0	; () banked
  7312  014256  17BD               	andwf	Port_GetQuad@Output& (0+255),f,b
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;Port.c: 503: return Output;
  7316  014258  0100               	movlb	0	; () banked
  7317  01425A  51BD               	movf	Port_GetQuad@Output& (0+255),w,b
  7318  01425C  0012               	return	
  7319  01425E                     __end_of_Port_GetQuad:
  7320                           	opt stack 0
  7321                           tosu	equ	0xFFF
  7322                           tosh	equ	0xFFE
  7323                           tosl	equ	0xFFD
  7324                           pclath	equ	0xFFA
  7325                           tblptru	equ	0xFF8
  7326                           tblptrh	equ	0xFF7
  7327                           tblptrl	equ	0xFF6
  7328                           tablat	equ	0xFF5
  7329                           prodh	equ	0xFF4
  7330                           prodl	equ	0xFF3
  7331                           postinc0	equ	0xFEE
  7332                           plusw0	equ	0xFEB
  7333                           wreg	equ	0xFE8
  7334                           indf1	equ	0xFE7
  7335                           postdec1	equ	0xFE5
  7336                           fsr1h	equ	0xFE2
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           plusw2	equ	0xFDB
  7342                           fsr2h	equ	0xFDA
  7343                           fsr2l	equ	0xFD9
  7344                           status	equ	0xFD8
  7345                           
  7346 ;; *************** function _Event_DIPSwitch *****************
  7347 ;; Defined at:
  7348 ;;		line 17 in file "Events.c"
  7349 ;; Parameters:    Size  Location     Type
  7350 ;;  pState          1    wreg     unsigned char 
  7351 ;; Auto vars:     Size  Location     Type
  7352 ;;  pState          1   25[BANK0 ] unsigned char 
  7353 ;;  Bar             1   26[BANK0 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        2 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:   13
  7370 ;; This function calls:
  7371 ;;		_HMI_GetBar
  7372 ;;		_HMI_SetBar
  7373 ;;		_LED_Toggle
  7374 ;; This function is called by:
  7375 ;;		_FunctInitButton
  7376 ;;		_Button_Poll
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text32
  7381  0147B6                     __ptext32:
  7382                           	opt stack 0
  7383  0147B6                     _Event_DIPSwitch:
  7384                           	opt stack 10
  7385                           
  7386                           ; BSR set to: 0
  7387                           ;incstack = 0
  7388                           ;Event_DIPSwitch@pState stored from wreg
  7389  0147B6  0100               	movlb	0	; () banked
  7390  0147B8  6FD1               	movwf	Event_DIPSwitch@pState& (0+255),b
  7391                           
  7392                           ;Events.c: 19: UINT8 Bar = HMI_GetBar();
  7393  0147BA  EC1B  F0A6         	call	_HMI_GetBar	;wreg free
  7394  0147BE  0100               	movlb	0	; () banked
  7395  0147C0  6FD2               	movwf	Event_DIPSwitch@Bar& (0+255),b
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;Events.c: 20: Bar &= 0x0F;
  7399  0147C2  0E0F               	movlw	15
  7400  0147C4  0100               	movlb	0	; () banked
  7401  0147C6  17D2               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  7402                           
  7403                           ; BSR set to: 0
  7404                           ;Events.c: 21: pState <<= 4;
  7405  0147C8  0100               	movlb	0	; () banked
  7406  0147CA  3BD1               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  7407  0147CC  0EF0               	movlw	240
  7408  0147CE  17D1               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;Events.c: 24: HMI_SetBar(pState | Bar);
  7412  0147D0  0100               	movlb	0	; () banked
  7413  0147D2  51D1               	movf	Event_DIPSwitch@pState& (0+255),w,b
  7414  0147D4  0100               	movlb	0	; () banked
  7415  0147D6  11D2               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  7416  0147D8  EC09  F0A6         	call	_HMI_SetBar
  7417                           
  7418                           ;Events.c: 27: LED_Toggle(eLED1);
  7419  0147DC  0E00               	movlw	0
  7420  0147DE  EC53  F0A1         	call	_LED_Toggle
  7421  0147E2  0012               	return		;funcret
  7422  0147E4                     __end_of_Event_DIPSwitch:
  7423                           	opt stack 0
  7424                           tosu	equ	0xFFF
  7425                           tosh	equ	0xFFE
  7426                           tosl	equ	0xFFD
  7427                           pclath	equ	0xFFA
  7428                           tblptru	equ	0xFF8
  7429                           tblptrh	equ	0xFF7
  7430                           tblptrl	equ	0xFF6
  7431                           tablat	equ	0xFF5
  7432                           prodh	equ	0xFF4
  7433                           prodl	equ	0xFF3
  7434                           postinc0	equ	0xFEE
  7435                           plusw0	equ	0xFEB
  7436                           wreg	equ	0xFE8
  7437                           indf1	equ	0xFE7
  7438                           postdec1	equ	0xFE5
  7439                           fsr1h	equ	0xFE2
  7440                           fsr1l	equ	0xFE1
  7441                           indf2	equ	0xFDF
  7442                           postinc2	equ	0xFDE
  7443                           postdec2	equ	0xFDD
  7444                           plusw2	equ	0xFDB
  7445                           fsr2h	equ	0xFDA
  7446                           fsr2l	equ	0xFD9
  7447                           status	equ	0xFD8
  7448                           
  7449 ;; *************** function _Event_HMI_DownButton *****************
  7450 ;; Defined at:
  7451 ;;		line 123 in file "Events.c"
  7452 ;; Parameters:    Size  Location     Type
  7453 ;;  pState          1    wreg     unsigned char 
  7454 ;; Auto vars:     Size  Location     Type
  7455 ;;  pState          1   25[BANK0 ] unsigned char 
  7456 ;; Return value:  Size  Location     Type
  7457 ;;                  1    wreg      void 
  7458 ;; Registers used:
  7459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7460 ;; Tracked objects:
  7461 ;;		On entry : 0/0
  7462 ;;		On exit  : 0/0
  7463 ;;		Unchanged: 0/0
  7464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7468 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7469 ;;Total ram usage:        1 bytes
  7470 ;; Hardware stack levels used:    1
  7471 ;; Hardware stack levels required when called:   13
  7472 ;; This function calls:
  7473 ;;		_HMI_SetDown
  7474 ;;		_HMI_SetNumber
  7475 ;;		_LED_Toggle
  7476 ;; This function is called by:
  7477 ;;		_HMI_Init
  7478 ;;		_Button_Poll
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           	psect	text33
  7483  0146C4                     __ptext33:
  7484                           	opt stack 0
  7485  0146C4                     _Event_HMI_DownButton:
  7486                           	opt stack 10
  7487                           
  7488                           ;incstack = 0
  7489                           ;Event_HMI_DownButton@pState stored from wreg
  7490  0146C4  0100               	movlb	0	; () banked
  7491  0146C6  6FD1               	movwf	Event_HMI_DownButton@pState& (0+255),b
  7492                           
  7493                           ;Events.c: 126: HMI_SetDown(pState);
  7494  0146C8  0100               	movlb	0	; () banked
  7495  0146CA  51D1               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7496  0146CC  ECBC  F0A5         	call	_HMI_SetDown
  7497                           
  7498                           ;Events.c: 128: if (pState == 0)
  7499  0146D0  0100               	movlb	0	; () banked
  7500  0146D2  51D1               	movf	Event_HMI_DownButton@pState& (0+255),w,b
  7501  0146D4  0100               	movlb	0	; () banked
  7502  0146D6  A4D8               	btfss	status,2,c
  7503  0146D8  D00A               	goto	l1900
  7504                           
  7505                           ; BSR set to: 0
  7506                           ;Events.c: 129: {
  7507                           ;Events.c: 130: val -= 1;
  7508  0146DA  0100               	movlb	0	; () banked
  7509  0146DC  076D               	decf	_val& (0+255),f,b
  7510  0146DE  A0D8               	btfss	status,0,c
  7511  0146E0  076E               	decf	(_val+1)& (0+255),f,b
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;Events.c: 131: HMI_SetNumber(val);
  7515  0146E2  C06D  F0C9         	movff	_val,HMI_SetNumber@pInput
  7516  0146E6  C06E  F0CA         	movff	_val+1,HMI_SetNumber@pInput+1
  7517  0146EA  EC08  F0A4         	call	_HMI_SetNumber	;wreg free
  7518  0146EE                     l1900:
  7519                           
  7520                           ;Events.c: 132: }
  7521                           ;Events.c: 135: LED_Toggle(eLED1);
  7522  0146EE  0E00               	movlw	0
  7523  0146F0  EC53  F0A1         	call	_LED_Toggle
  7524  0146F4  0012               	return		;funcret
  7525  0146F6                     __end_of_Event_HMI_DownButton:
  7526                           	opt stack 0
  7527                           tosu	equ	0xFFF
  7528                           tosh	equ	0xFFE
  7529                           tosl	equ	0xFFD
  7530                           pclath	equ	0xFFA
  7531                           tblptru	equ	0xFF8
  7532                           tblptrh	equ	0xFF7
  7533                           tblptrl	equ	0xFF6
  7534                           tablat	equ	0xFF5
  7535                           prodh	equ	0xFF4
  7536                           prodl	equ	0xFF3
  7537                           postinc0	equ	0xFEE
  7538                           plusw0	equ	0xFEB
  7539                           wreg	equ	0xFE8
  7540                           indf1	equ	0xFE7
  7541                           postdec1	equ	0xFE5
  7542                           fsr1h	equ	0xFE2
  7543                           fsr1l	equ	0xFE1
  7544                           indf2	equ	0xFDF
  7545                           postinc2	equ	0xFDE
  7546                           postdec2	equ	0xFDD
  7547                           plusw2	equ	0xFDB
  7548                           fsr2h	equ	0xFDA
  7549                           fsr2l	equ	0xFD9
  7550                           status	equ	0xFD8
  7551                           
  7552 ;; *************** function _Event_HMI_UpButton *****************
  7553 ;; Defined at:
  7554 ;;		line 108 in file "Events.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  pState          1    wreg     unsigned char 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  pState          1   25[BANK0 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  1    wreg      void 
  7561 ;; Registers used:
  7562 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7569 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7572 ;;Total ram usage:        1 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:   13
  7575 ;; This function calls:
  7576 ;;		_HMI_SetNumber
  7577 ;;		_HMI_SetUp
  7578 ;;		_LED_Toggle
  7579 ;; This function is called by:
  7580 ;;		_HMI_Init
  7581 ;;		_Button_Poll
  7582 ;; This function uses a non-reentrant model
  7583 ;;
  7584                           
  7585                           	psect	text34
  7586  0146F6                     __ptext34:
  7587                           	opt stack 0
  7588  0146F6                     _Event_HMI_UpButton:
  7589                           	opt stack 10
  7590                           
  7591                           ;incstack = 0
  7592                           ;Event_HMI_UpButton@pState stored from wreg
  7593  0146F6  0100               	movlb	0	; () banked
  7594  0146F8  6FD1               	movwf	Event_HMI_UpButton@pState& (0+255),b
  7595                           
  7596                           ;Events.c: 111: HMI_SetUp(pState);
  7597  0146FA  0100               	movlb	0	; () banked
  7598  0146FC  51D1               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7599  0146FE  EC9B  F0A5         	call	_HMI_SetUp
  7600                           
  7601                           ;Events.c: 113: if (pState == 0)
  7602  014702  0100               	movlb	0	; () banked
  7603  014704  51D1               	movf	Event_HMI_UpButton@pState& (0+255),w,b
  7604  014706  0100               	movlb	0	; () banked
  7605  014708  A4D8               	btfss	status,2,c
  7606  01470A  D009               	goto	l1896
  7607                           
  7608                           ; BSR set to: 0
  7609                           ;Events.c: 114: {
  7610                           ;Events.c: 115: val += 1;
  7611  01470C  0100               	movlb	0	; () banked
  7612  01470E  4B6D               	infsnz	_val& (0+255),f,b
  7613  014710  2B6E               	incf	(_val+1)& (0+255),f,b
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;Events.c: 116: HMI_SetNumber(val);
  7617  014712  C06D  F0C9         	movff	_val,HMI_SetNumber@pInput
  7618  014716  C06E  F0CA         	movff	_val+1,HMI_SetNumber@pInput+1
  7619  01471A  EC08  F0A4         	call	_HMI_SetNumber	;wreg free
  7620  01471E                     l1896:
  7621                           
  7622                           ;Events.c: 117: }
  7623                           ;Events.c: 120: LED_Toggle(eLED1);
  7624  01471E  0E00               	movlw	0
  7625  014720  EC53  F0A1         	call	_LED_Toggle
  7626  014724  0012               	return		;funcret
  7627  014726                     __end_of_Event_HMI_UpButton:
  7628                           	opt stack 0
  7629                           tosu	equ	0xFFF
  7630                           tosh	equ	0xFFE
  7631                           tosl	equ	0xFFD
  7632                           pclath	equ	0xFFA
  7633                           tblptru	equ	0xFF8
  7634                           tblptrh	equ	0xFF7
  7635                           tblptrl	equ	0xFF6
  7636                           tablat	equ	0xFF5
  7637                           prodh	equ	0xFF4
  7638                           prodl	equ	0xFF3
  7639                           postinc0	equ	0xFEE
  7640                           plusw0	equ	0xFEB
  7641                           wreg	equ	0xFE8
  7642                           indf1	equ	0xFE7
  7643                           postdec1	equ	0xFE5
  7644                           fsr1h	equ	0xFE2
  7645                           fsr1l	equ	0xFE1
  7646                           indf2	equ	0xFDF
  7647                           postinc2	equ	0xFDE
  7648                           postdec2	equ	0xFDD
  7649                           plusw2	equ	0xFDB
  7650                           fsr2h	equ	0xFDA
  7651                           fsr2l	equ	0xFD9
  7652                           status	equ	0xFD8
  7653                           
  7654 ;; *************** function _Event_HMI_RightButton *****************
  7655 ;; Defined at:
  7656 ;;		line 91 in file "Events.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;  pState          1    wreg     unsigned char 
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;  pState          1   25[BANK0 ] unsigned char 
  7661 ;; Return value:  Size  Location     Type
  7662 ;;                  1    wreg      void 
  7663 ;; Registers used:
  7664 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7673 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;Total ram usage:        1 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:   13
  7677 ;; This function calls:
  7678 ;;		_HMI_SetBar
  7679 ;;		_HMI_SetRight
  7680 ;;		_LED_Toggle
  7681 ;; This function is called by:
  7682 ;;		_HMI_Init
  7683 ;;		_Button_Poll
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text35
  7688  01437A                     __ptext35:
  7689                           	opt stack 0
  7690  01437A                     _Event_HMI_RightButton:
  7691                           	opt stack 10
  7692                           
  7693                           ;incstack = 0
  7694                           ;Event_HMI_RightButton@pState stored from wreg
  7695  01437A  0100               	movlb	0	; () banked
  7696  01437C  6FD1               	movwf	Event_HMI_RightButton@pState& (0+255),b
  7697                           
  7698                           ;Events.c: 94: HMI_SetRight(pState);
  7699  01437E  0100               	movlb	0	; () banked
  7700  014380  51D1               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7701  014382  ECA6  F0A5         	call	_HMI_SetRight
  7702                           
  7703                           ;Events.c: 96: if (pState == 0)
  7704  014386  0100               	movlb	0	; () banked
  7705  014388  51D1               	movf	Event_HMI_RightButton@pState& (0+255),w,b
  7706  01438A  0100               	movlb	0	; () banked
  7707  01438C  A4D8               	btfss	status,2,c
  7708  01438E  D013               	goto	l1891
  7709                           
  7710                           ; BSR set to: 0
  7711                           ;Events.c: 97: {
  7712                           ;Events.c: 98: if (pShiftVal == 0)
  7713  014390  0100               	movlb	0	; () banked
  7714  014392  516B               	movf	_pShiftVal& (0+255),w,b
  7715  014394  0100               	movlb	0	; () banked
  7716  014396  116C               	iorwf	(_pShiftVal+1)& (0+255),w,b
  7717  014398  A4D8               	btfss	status,2,c
  7718  01439A  D005               	goto	l1892
  7719                           
  7720                           ; BSR set to: 0
  7721                           ;Events.c: 99: pShiftVal = 0xFF00;
  7722  01439C  0EFF               	movlw	255
  7723  01439E  0100               	movlb	0	; () banked
  7724  0143A0  6F6C               	movwf	(_pShiftVal+1)& (0+255),b
  7725  0143A2  0E00               	movlw	0
  7726  0143A4  6F6B               	movwf	_pShiftVal& (0+255),b
  7727  0143A6                     l1892:
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;Events.c: 100: pShiftVal >>= 1;
  7731                           
  7732                           ; BSR set to: 0
  7733  0143A6  0100               	movlb	0	; () banked
  7734  0143A8  90D8               	bcf	status,0,c
  7735  0143AA  336C               	rrcf	(_pShiftVal+1)& (0+255),f,b
  7736  0143AC  336B               	rrcf	_pShiftVal& (0+255),f,b
  7737                           
  7738                           ; BSR set to: 0
  7739                           ;Events.c: 102: HMI_SetBar(pShiftVal & 0xFF);
  7740  0143AE  0100               	movlb	0	; () banked
  7741  0143B0  516B               	movf	_pShiftVal& (0+255),w,b
  7742  0143B2  EC09  F0A6         	call	_HMI_SetBar
  7743  0143B6                     l1891:
  7744                           
  7745                           ;Events.c: 103: }
  7746                           ;Events.c: 105: LED_Toggle(eLED1);
  7747  0143B6  0E00               	movlw	0
  7748  0143B8  EC53  F0A1         	call	_LED_Toggle
  7749  0143BC  0012               	return		;funcret
  7750  0143BE                     __end_of_Event_HMI_RightButton:
  7751                           	opt stack 0
  7752                           tosu	equ	0xFFF
  7753                           tosh	equ	0xFFE
  7754                           tosl	equ	0xFFD
  7755                           pclath	equ	0xFFA
  7756                           tblptru	equ	0xFF8
  7757                           tblptrh	equ	0xFF7
  7758                           tblptrl	equ	0xFF6
  7759                           tablat	equ	0xFF5
  7760                           prodh	equ	0xFF4
  7761                           prodl	equ	0xFF3
  7762                           postinc0	equ	0xFEE
  7763                           plusw0	equ	0xFEB
  7764                           wreg	equ	0xFE8
  7765                           indf1	equ	0xFE7
  7766                           postdec1	equ	0xFE5
  7767                           fsr1h	equ	0xFE2
  7768                           fsr1l	equ	0xFE1
  7769                           indf2	equ	0xFDF
  7770                           postinc2	equ	0xFDE
  7771                           postdec2	equ	0xFDD
  7772                           plusw2	equ	0xFDB
  7773                           fsr2h	equ	0xFDA
  7774                           fsr2l	equ	0xFD9
  7775                           status	equ	0xFD8
  7776                           
  7777 ;; *************** function _Event_HMI_LeftButton *****************
  7778 ;; Defined at:
  7779 ;;		line 71 in file "Events.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;  pState          1    wreg     unsigned char 
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;  pState          1   25[BANK0 ] unsigned char 
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;Total ram usage:        1 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; Hardware stack levels required when called:   13
  7800 ;; This function calls:
  7801 ;;		_HMI_SetBar
  7802 ;;		_HMI_SetLeft
  7803 ;;		_LED_Toggle
  7804 ;; This function is called by:
  7805 ;;		_HMI_Init
  7806 ;;		_Button_Poll
  7807 ;; This function uses a non-reentrant model
  7808 ;;
  7809                           
  7810                           	psect	text36
  7811  013FD6                     __ptext36:
  7812                           	opt stack 0
  7813  013FD6                     _Event_HMI_LeftButton:
  7814                           	opt stack 10
  7815                           
  7816                           ;incstack = 0
  7817                           ;Event_HMI_LeftButton@pState stored from wreg
  7818  013FD6  0100               	movlb	0	; () banked
  7819  013FD8  6FD1               	movwf	Event_HMI_LeftButton@pState& (0+255),b
  7820                           
  7821                           ;Events.c: 74: HMI_SetLeft(pState);
  7822  013FDA  0100               	movlb	0	; () banked
  7823  013FDC  51D1               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7824  013FDE  ECB1  F0A5         	call	_HMI_SetLeft
  7825                           
  7826                           ;Events.c: 76: if (pState == 0)
  7827  013FE2  0100               	movlb	0	; () banked
  7828  013FE4  51D1               	movf	Event_HMI_LeftButton@pState& (0+255),w,b
  7829  013FE6  0100               	movlb	0	; () banked
  7830  013FE8  A4D8               	btfss	status,2,c
  7831  013FEA  D01D               	goto	l1884
  7832                           
  7833                           ; BSR set to: 0
  7834                           ;Events.c: 77: {
  7835                           ;Events.c: 78: pShiftVal <<= 1;
  7836  013FEC  0100               	movlb	0	; () banked
  7837  013FEE  90D8               	bcf	status,0,c
  7838  013FF0  376B               	rlcf	_pShiftVal& (0+255),f,b
  7839  013FF2  376C               	rlcf	(_pShiftVal+1)& (0+255),f,b
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;Events.c: 79: if (pShiftVal == 0xFF00)
  7843  013FF4  0100               	movlb	0	; () banked
  7844  013FF6  296C               	incf	(_pShiftVal+1)& (0+255),w,b
  7845  013FF8  0100               	movlb	0	; () banked
  7846  013FFA  116B               	iorwf	_pShiftVal& (0+255),w,b
  7847  013FFC  A4D8               	btfss	status,2,c
  7848  013FFE  D006               	goto	l1885
  7849                           
  7850                           ; BSR set to: 0
  7851                           ;Events.c: 80: pShiftVal = 0;
  7852  014000  0E00               	movlw	0
  7853  014002  0100               	movlb	0	; () banked
  7854  014004  6F6C               	movwf	(_pShiftVal+1)& (0+255),b
  7855  014006  0E00               	movlw	0
  7856  014008  6F6B               	movwf	_pShiftVal& (0+255),b
  7857  01400A  D009               	goto	l1887
  7858  01400C                     l1885:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;Events.c: 81: else if (pShiftVal < 0xFF)
  7862                           
  7863                           ; BSR set to: 0
  7864  01400C  0100               	movlb	0	; () banked
  7865  01400E  516C               	movf	(_pShiftVal+1)& (0+255),w,b
  7866  014010  E106               	bnz	l10671
  7867  014012  0100               	movlb	0	; () banked
  7868  014014  296B               	incf	_pShiftVal& (0+255),w,b
  7869  014016  B0D8               	btfsc	status,0,c
  7870  014018  D002               	goto	l1887
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;Events.c: 82: pShiftVal |= 1;
  7874  01401A  0100               	movlb	0	; () banked
  7875  01401C  816B               	bsf	_pShiftVal& (0+255),0,b
  7876  01401E                     l1887:
  7877  01401E                     l10671:
  7878                           
  7879                           ; BSR set to: 0
  7880                           ;Events.c: 84: HMI_SetBar(pShiftVal & 0xFF);
  7881  01401E  0100               	movlb	0	; () banked
  7882  014020  516B               	movf	_pShiftVal& (0+255),w,b
  7883  014022  EC09  F0A6         	call	_HMI_SetBar
  7884  014026                     l1884:
  7885                           
  7886                           ;Events.c: 85: }
  7887                           ;Events.c: 88: LED_Toggle(eLED1);
  7888  014026  0E00               	movlw	0
  7889  014028  EC53  F0A1         	call	_LED_Toggle
  7890  01402C  0012               	return		;funcret
  7891  01402E                     __end_of_Event_HMI_LeftButton:
  7892                           	opt stack 0
  7893                           tosu	equ	0xFFF
  7894                           tosh	equ	0xFFE
  7895                           tosl	equ	0xFFD
  7896                           pclath	equ	0xFFA
  7897                           tblptru	equ	0xFF8
  7898                           tblptrh	equ	0xFF7
  7899                           tblptrl	equ	0xFF6
  7900                           tablat	equ	0xFF5
  7901                           prodh	equ	0xFF4
  7902                           prodl	equ	0xFF3
  7903                           postinc0	equ	0xFEE
  7904                           plusw0	equ	0xFEB
  7905                           wreg	equ	0xFE8
  7906                           indf1	equ	0xFE7
  7907                           postdec1	equ	0xFE5
  7908                           fsr1h	equ	0xFE2
  7909                           fsr1l	equ	0xFE1
  7910                           indf2	equ	0xFDF
  7911                           postinc2	equ	0xFDE
  7912                           postdec2	equ	0xFDD
  7913                           plusw2	equ	0xFDB
  7914                           fsr2h	equ	0xFDA
  7915                           fsr2l	equ	0xFD9
  7916                           status	equ	0xFD8
  7917                           
  7918 ;; *************** function _Event_HMI_DIPSwitch *****************
  7919 ;; Defined at:
  7920 ;;		line 30 in file "Events.c"
  7921 ;; Parameters:    Size  Location     Type
  7922 ;;  pState          1    wreg     unsigned char 
  7923 ;; Auto vars:     Size  Location     Type
  7924 ;;  pState          1   25[BANK0 ] unsigned char 
  7925 ;;  Bar             1   26[BANK0 ] unsigned char 
  7926 ;; Return value:  Size  Location     Type
  7927 ;;                  1    wreg      void 
  7928 ;; Registers used:
  7929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7930 ;; Tracked objects:
  7931 ;;		On entry : 0/0
  7932 ;;		On exit  : 0/0
  7933 ;;		Unchanged: 0/0
  7934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7936 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;Total ram usage:        2 bytes
  7940 ;; Hardware stack levels used:    1
  7941 ;; Hardware stack levels required when called:   13
  7942 ;; This function calls:
  7943 ;;		_HMI_GetBar
  7944 ;;		_HMI_SetBar
  7945 ;;		_LED_Toggle
  7946 ;; This function is called by:
  7947 ;;		_HMI_Init
  7948 ;;		_Button_Poll
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text37
  7953  0147E4                     __ptext37:
  7954                           	opt stack 0
  7955  0147E4                     _Event_HMI_DIPSwitch:
  7956                           	opt stack 10
  7957                           
  7958                           ;incstack = 0
  7959                           ;Event_HMI_DIPSwitch@pState stored from wreg
  7960  0147E4  0100               	movlb	0	; () banked
  7961  0147E6  6FD1               	movwf	Event_HMI_DIPSwitch@pState& (0+255),b
  7962                           
  7963                           ;Events.c: 32: UINT8 Bar = HMI_GetBar();
  7964  0147E8  EC1B  F0A6         	call	_HMI_GetBar	;wreg free
  7965  0147EC  0100               	movlb	0	; () banked
  7966  0147EE  6FD2               	movwf	Event_HMI_DIPSwitch@Bar& (0+255),b
  7967                           
  7968                           ; BSR set to: 0
  7969                           ;Events.c: 33: HMI_SetBar(pState | Bar);
  7970  0147F0  0100               	movlb	0	; () banked
  7971  0147F2  51D1               	movf	Event_HMI_DIPSwitch@pState& (0+255),w,b
  7972  0147F4  0100               	movlb	0	; () banked
  7973  0147F6  11D2               	iorwf	Event_HMI_DIPSwitch@Bar& (0+255),w,b
  7974  0147F8  EC09  F0A6         	call	_HMI_SetBar
  7975                           
  7976                           ;Events.c: 35: Bar &= 0xF0;
  7977  0147FC  0EF0               	movlw	240
  7978  0147FE  0100               	movlb	0	; () banked
  7979  014800  17D2               	andwf	Event_HMI_DIPSwitch@Bar& (0+255),f,b
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;Events.c: 36: pState &= 0x0F;
  7983  014802  0E0F               	movlw	15
  7984  014804  0100               	movlb	0	; () banked
  7985  014806  17D1               	andwf	Event_HMI_DIPSwitch@pState& (0+255),f,b
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;Events.c: 42: LED_Toggle(eLED1);
  7989  014808  0E00               	movlw	0
  7990  01480A  EC53  F0A1         	call	_LED_Toggle
  7991  01480E  0012               	return		;funcret
  7992  014810                     __end_of_Event_HMI_DIPSwitch:
  7993                           	opt stack 0
  7994                           tosu	equ	0xFFF
  7995                           tosh	equ	0xFFE
  7996                           tosl	equ	0xFFD
  7997                           pclath	equ	0xFFA
  7998                           tblptru	equ	0xFF8
  7999                           tblptrh	equ	0xFF7
  8000                           tblptrl	equ	0xFF6
  8001                           tablat	equ	0xFF5
  8002                           prodh	equ	0xFF4
  8003                           prodl	equ	0xFF3
  8004                           postinc0	equ	0xFEE
  8005                           plusw0	equ	0xFEB
  8006                           wreg	equ	0xFE8
  8007                           indf1	equ	0xFE7
  8008                           postdec1	equ	0xFE5
  8009                           fsr1h	equ	0xFE2
  8010                           fsr1l	equ	0xFE1
  8011                           indf2	equ	0xFDF
  8012                           postinc2	equ	0xFDE
  8013                           postdec2	equ	0xFDD
  8014                           plusw2	equ	0xFDB
  8015                           fsr2h	equ	0xFDA
  8016                           fsr2l	equ	0xFD9
  8017                           status	equ	0xFD8
  8018                           
  8019 ;; *************** function _Event_TestButton *****************
  8020 ;; Defined at:
  8021 ;;		line 47 in file "Events.c"
  8022 ;; Parameters:    Size  Location     Type
  8023 ;;  pState          1    wreg     unsigned char 
  8024 ;; Auto vars:     Size  Location     Type
  8025 ;;  pState          1   25[BANK0 ] unsigned char 
  8026 ;; Return value:  Size  Location     Type
  8027 ;;                  1    wreg      void 
  8028 ;; Registers used:
  8029 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8030 ;; Tracked objects:
  8031 ;;		On entry : 0/0
  8032 ;;		On exit  : 0/0
  8033 ;;		Unchanged: 0/0
  8034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;Total ram usage:        1 bytes
  8040 ;; Hardware stack levels used:    1
  8041 ;; Hardware stack levels required when called:   13
  8042 ;; This function calls:
  8043 ;;		_HMI_SetButton
  8044 ;;		_HMI_SetNumber
  8045 ;;		_LED_Toggle
  8046 ;; This function is called by:
  8047 ;;		_FunctInitButton
  8048 ;;		_Button_Poll
  8049 ;; This function uses a non-reentrant model
  8050 ;;
  8051                           
  8052                           	psect	text38
  8053  01453A                     __ptext38:
  8054                           	opt stack 0
  8055  01453A                     _Event_TestButton:
  8056                           	opt stack 10
  8057                           
  8058                           ;incstack = 0
  8059                           ;Event_TestButton@pState stored from wreg
  8060  01453A  0100               	movlb	0	; () banked
  8061  01453C  6FD1               	movwf	Event_TestButton@pState& (0+255),b
  8062                           
  8063                           ;Events.c: 51: static UINT8 j = 0;
  8064                           ;Events.c: 55: if (pState == 0)
  8065  01453E  0100               	movlb	0	; () banked
  8066  014540  51D1               	movf	Event_TestButton@pState& (0+255),w,b
  8067  014542  0100               	movlb	0	; () banked
  8068  014544  A4D8               	btfss	status,2,c
  8069  014546  D013               	goto	l1878
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;Events.c: 56: {
  8073                           ;Events.c: 57: j++;
  8074  014548  0100               	movlb	0	; () banked
  8075  01454A  2B75               	incf	Event_TestButton@j& (0+255),f,b
  8076                           
  8077                           ; BSR set to: 0
  8078                           ;Events.c: 58: val += j;
  8079  01454C  0100               	movlb	0	; () banked
  8080  01454E  5175               	movf	Event_TestButton@j& (0+255),w,b
  8081  014550  0100               	movlb	0	; () banked
  8082  014552  276D               	addwf	_val& (0+255),f,b
  8083  014554  0E00               	movlw	0
  8084  014556  236E               	addwfc	(_val+1)& (0+255),f,b
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;Events.c: 59: HMI_SetNumber( val );
  8088  014558  C06D  F0C9         	movff	_val,HMI_SetNumber@pInput
  8089  01455C  C06E  F0CA         	movff	_val+1,HMI_SetNumber@pInput+1
  8090  014560  EC08  F0A4         	call	_HMI_SetNumber	;wreg free
  8091                           
  8092                           ;Events.c: 62: HMI_SetButton( j & 3 );
  8093  014564  0100               	movlb	0	; () banked
  8094  014566  5175               	movf	Event_TestButton@j& (0+255),w,b
  8095  014568  0B03               	andlw	3
  8096  01456A  ECD7  F09A         	call	_HMI_SetButton
  8097  01456E                     l1878:
  8098                           
  8099                           ;Events.c: 63: }
  8100                           ;Events.c: 67: LED_Toggle(eLED1);
  8101  01456E  0E00               	movlw	0
  8102  014570  EC53  F0A1         	call	_LED_Toggle
  8103  014574  0012               	return		;funcret
  8104  014576                     __end_of_Event_TestButton:
  8105                           	opt stack 0
  8106                           tosu	equ	0xFFF
  8107                           tosh	equ	0xFFE
  8108                           tosl	equ	0xFFD
  8109                           pclath	equ	0xFFA
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           postinc0	equ	0xFEE
  8117                           plusw0	equ	0xFEB
  8118                           wreg	equ	0xFE8
  8119                           indf1	equ	0xFE7
  8120                           postdec1	equ	0xFE5
  8121                           fsr1h	equ	0xFE2
  8122                           fsr1l	equ	0xFE1
  8123                           indf2	equ	0xFDF
  8124                           postinc2	equ	0xFDE
  8125                           postdec2	equ	0xFDD
  8126                           plusw2	equ	0xFDB
  8127                           fsr2h	equ	0xFDA
  8128                           fsr2l	equ	0xFD9
  8129                           status	equ	0xFD8
  8130                           
  8131 ;; *************** function _HMI_SetButton *****************
  8132 ;; Defined at:
  8133 ;;		line 186 in file "HMI.c"
  8134 ;; Parameters:    Size  Location     Type
  8135 ;;  pValue          1    wreg     unsigned char 
  8136 ;; Auto vars:     Size  Location     Type
  8137 ;;  pValue          1    6[BANK0 ] unsigned char 
  8138 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
  8139 ;;  v               1    7[BANK0 ] unsigned char 
  8140 ;; Return value:  Size  Location     Type
  8141 ;;                  1    wreg      void 
  8142 ;; Registers used:
  8143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8144 ;; Tracked objects:
  8145 ;;		On entry : 0/0
  8146 ;;		On exit  : 0/0
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8150 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8151 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8152 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;Total ram usage:        8 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; Hardware stack levels required when called:    7
  8156 ;; This function calls:
  8157 ;;		Nothing
  8158 ;; This function is called by:
  8159 ;;		_Event_TestButton
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           	psect	text39
  8164  0135AE                     __ptext39:
  8165                           	opt stack 0
  8166  0135AE                     _HMI_SetButton:
  8167                           	opt stack 15
  8168                           
  8169                           ;incstack = 0
  8170                           ;HMI_SetButton@pValue stored from wreg
  8171  0135AE  0100               	movlb	0	; () banked
  8172  0135B0  6FBE               	movwf	HMI_SetButton@pValue& (0+255),b
  8173                           
  8174                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
  8175  0135B2  0E72               	movlw	low HMI_SetButton@F7211
  8176  0135B4  6EF6               	movwf	tblptrl,c
  8177  0135B6                     	if	1	;There is more than 1 active tblptr byte
  8178  0135B6  0EFD               	movlw	high HMI_SetButton@F7211
  8179  0135B8  6EF7               	movwf	tblptrh,c
  8180  0135BA                     	endif
  8181  0135BA                     	if	1	;There are 3 active tblptr bytes
  8182  0135BA  0E00               	movlw	low (HMI_SetButton@F7211 shr (0+16))
  8183  0135BC  6EF8               	movwf	tblptru,c
  8184  0135BE                     	endif
  8185  0135BE  0009               	tblrd		*+
  8186  0135C0  CFF5 F0BA          	movff	tablat,HMI_SetButton@reindex
  8187  0135C4  0009               	tblrd		*+
  8188  0135C6  CFF5 F0BB          	movff	tablat,HMI_SetButton@reindex+1
  8189  0135CA  0009               	tblrd		*+
  8190  0135CC  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex+2
  8191  0135D0  000A               	tblrd		*-
  8192  0135D2  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+3
  8193                           
  8194                           ;HMI.c: 189: UINT8 v = 0b00010001;
  8195  0135D6  0E11               	movlw	17
  8196  0135D8  0100               	movlb	0	; () banked
  8197  0135DA  6FBF               	movwf	HMI_SetButton@v& (0+255),b
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;HMI.c: 190: pValue &= 3;
  8201  0135DC  0E03               	movlw	3
  8202  0135DE  0100               	movlb	0	; () banked
  8203  0135E0  17BE               	andwf	HMI_SetButton@pValue& (0+255),f,b
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;HMI.c: 191: v = v << reindex[pValue];
  8207  0135E2  0100               	movlb	0	; () banked
  8208  0135E4  51BE               	movf	HMI_SetButton@pValue& (0+255),w,b
  8209  0135E6  0D01               	mullw	1
  8210  0135E8  0EBA               	movlw	low HMI_SetButton@reindex
  8211  0135EA  24F3               	addwf	prodl,w,c
  8212  0135EC  6ED9               	movwf	fsr2l,c
  8213  0135EE  0E00               	movlw	high HMI_SetButton@reindex
  8214  0135F0  20F4               	addwfc	prodh,w,c
  8215  0135F2  6EDA               	movwf	fsr2h,c
  8216  0135F4  50DF               	movf	indf2,w,c
  8217  0135F6  0100               	movlb	0	; () banked
  8218  0135F8  6FB8               	movwf	??_HMI_SetButton& (0+255),b
  8219  0135FA  C0BF  F0B9         	movff	HMI_SetButton@v,??_HMI_SetButton+1
  8220  0135FE  0100               	movlb	0	; () banked
  8221  013600  2BB8               	incf	??_HMI_SetButton& (0+255),f,b
  8222  013602  D003               	goto	u6934
  8223  013604                     u6935:
  8224  013604  0100               	movlb	0	; () banked
  8225  013606  90D8               	bcf	status,0,c
  8226  013608  37B9               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
  8227  01360A                     u6934:
  8228  01360A  0100               	movlb	0	; () banked
  8229  01360C  2FB8               	decfsz	??_HMI_SetButton& (0+255),f,b
  8230  01360E  D7FA               	goto	u6935
  8231  013610  0100               	movlb	0	; () banked
  8232  013612  51B9               	movf	(??_HMI_SetButton+1)& (0+255),w,b
  8233  013614  0100               	movlb	0	; () banked
  8234  013616  6FBF               	movwf	HMI_SetButton@v& (0+255),b
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;HMI.c: 192: v = v >> 4;
  8238  013618  0100               	movlb	0	; () banked
  8239  01361A  39BF               	swapf	HMI_SetButton@v& (0+255),w,b
  8240  01361C  0B0F               	andlw	15
  8241  01361E  0100               	movlb	0	; () banked
  8242  013620  6FBF               	movwf	HMI_SetButton@v& (0+255),b
  8243                           
  8244                           ; BSR set to: 0
  8245                           ;HMI.c: 193: v = v & 0x0F;
  8246  013622  0100               	movlb	0	; () banked
  8247  013624  51BF               	movf	HMI_SetButton@v& (0+255),w,b
  8248  013626  0B0F               	andlw	15
  8249  013628  0100               	movlb	0	; () banked
  8250  01362A  6FBF               	movwf	HMI_SetButton@v& (0+255),b
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;HMI.c: 194: HMIBoard.pButton = v;
  8254  01362C  0101               	movlb	1	; () banked
  8255  01362E  5130               	movf	(_HMIBoard+6)& (0+255),w,b
  8256  013630  0100               	movlb	0	; () banked
  8257  013632  19BF               	xorwf	HMI_SetButton@v& (0+255),w,b
  8258  013634  0BF0               	andlw	-16
  8259  013636  19BF               	xorwf	HMI_SetButton@v& (0+255),w,b
  8260  013638  0101               	movlb	1	; () banked
  8261  01363A  6F30               	movwf	(_HMIBoard+6)& (0+255),b
  8262                           
  8263                           ; BSR set to: 1
  8264  01363C  0012               	return		;funcret
  8265  01363E                     __end_of_HMI_SetButton:
  8266                           	opt stack 0
  8267                           tosu	equ	0xFFF
  8268                           tosh	equ	0xFFE
  8269                           tosl	equ	0xFFD
  8270                           pclath	equ	0xFFA
  8271                           tblptru	equ	0xFF8
  8272                           tblptrh	equ	0xFF7
  8273                           tblptrl	equ	0xFF6
  8274                           tablat	equ	0xFF5
  8275                           prodh	equ	0xFF4
  8276                           prodl	equ	0xFF3
  8277                           postinc0	equ	0xFEE
  8278                           plusw0	equ	0xFEB
  8279                           wreg	equ	0xFE8
  8280                           indf1	equ	0xFE7
  8281                           postdec1	equ	0xFE5
  8282                           fsr1h	equ	0xFE2
  8283                           fsr1l	equ	0xFE1
  8284                           indf2	equ	0xFDF
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           plusw2	equ	0xFDB
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function _HMI_SetUp *****************
  8293 ;; Defined at:
  8294 ;;		line 174 in file "HMI.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  pValue          1    wreg     unsigned char 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  pValue          1    0[BANK0 ] unsigned char 
  8299 ;; Return value:  Size  Location     Type
  8300 ;;                  1    wreg      void 
  8301 ;; Registers used:
  8302 ;;		wreg
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;Total ram usage:        1 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    7
  8315 ;; This function calls:
  8316 ;;		Nothing
  8317 ;; This function is called by:
  8318 ;;		_Event_HMI_UpButton
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	text40
  8323  014B36                     __ptext40:
  8324                           	opt stack 0
  8325  014B36                     _HMI_SetUp:
  8326                           	opt stack 15
  8327                           
  8328                           ; BSR set to: 1
  8329                           ;incstack = 0
  8330                           ;HMI_SetUp@pValue stored from wreg
  8331  014B36  0100               	movlb	0	; () banked
  8332  014B38  6FB8               	movwf	HMI_SetUp@pValue& (0+255),b
  8333                           
  8334                           ;HMI.c: 176: HMIBoard.UPLED = pValue;
  8335  014B3A  0100               	movlb	0	; () banked
  8336  014B3C  B1B8               	btfsc	HMI_SetUp@pValue& (0+255),0,b
  8337  014B3E  D003               	bra	u6915
  8338  014B40  0101               	movlb	1	; () banked
  8339  014B42  9130               	bcf	(_HMIBoard+6)& (0+255),0,b
  8340  014B44  D002               	bra	u6916
  8341  014B46                     u6915:
  8342  014B46  0101               	movlb	1	; () banked
  8343  014B48  8130               	bsf	(_HMIBoard+6)& (0+255),0,b
  8344  014B4A                     u6916:
  8345                           
  8346                           ; BSR set to: 1
  8347  014B4A  0012               	return		;funcret
  8348  014B4C                     __end_of_HMI_SetUp:
  8349                           	opt stack 0
  8350                           tosu	equ	0xFFF
  8351                           tosh	equ	0xFFE
  8352                           tosl	equ	0xFFD
  8353                           pclath	equ	0xFFA
  8354                           tblptru	equ	0xFF8
  8355                           tblptrh	equ	0xFF7
  8356                           tblptrl	equ	0xFF6
  8357                           tablat	equ	0xFF5
  8358                           prodh	equ	0xFF4
  8359                           prodl	equ	0xFF3
  8360                           postinc0	equ	0xFEE
  8361                           plusw0	equ	0xFEB
  8362                           wreg	equ	0xFE8
  8363                           indf1	equ	0xFE7
  8364                           postdec1	equ	0xFE5
  8365                           fsr1h	equ	0xFE2
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           plusw2	equ	0xFDB
  8371                           fsr2h	equ	0xFDA
  8372                           fsr2l	equ	0xFD9
  8373                           status	equ	0xFD8
  8374                           
  8375 ;; *************** function _HMI_SetRight *****************
  8376 ;; Defined at:
  8377 ;;		line 168 in file "HMI.c"
  8378 ;; Parameters:    Size  Location     Type
  8379 ;;  pValue          1    wreg     unsigned char 
  8380 ;; Auto vars:     Size  Location     Type
  8381 ;;  pValue          1    0[BANK0 ] unsigned char 
  8382 ;; Return value:  Size  Location     Type
  8383 ;;                  1    wreg      void 
  8384 ;; Registers used:
  8385 ;;		wreg
  8386 ;; Tracked objects:
  8387 ;;		On entry : 0/0
  8388 ;;		On exit  : 0/0
  8389 ;;		Unchanged: 0/0
  8390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8391 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8395 ;;Total ram usage:        1 bytes
  8396 ;; Hardware stack levels used:    1
  8397 ;; Hardware stack levels required when called:    7
  8398 ;; This function calls:
  8399 ;;		Nothing
  8400 ;; This function is called by:
  8401 ;;		_Event_HMI_RightButton
  8402 ;; This function uses a non-reentrant model
  8403 ;;
  8404                           
  8405                           	psect	text41
  8406  014B4C                     __ptext41:
  8407                           	opt stack 0
  8408  014B4C                     _HMI_SetRight:
  8409                           	opt stack 15
  8410                           
  8411                           ; BSR set to: 1
  8412                           ;incstack = 0
  8413                           ;HMI_SetRight@pValue stored from wreg
  8414  014B4C  0100               	movlb	0	; () banked
  8415  014B4E  6FB8               	movwf	HMI_SetRight@pValue& (0+255),b
  8416                           
  8417                           ;HMI.c: 170: HMIBoard.RIGHTLED = pValue;
  8418  014B50  0100               	movlb	0	; () banked
  8419  014B52  B1B8               	btfsc	HMI_SetRight@pValue& (0+255),0,b
  8420  014B54  D003               	bra	u6905
  8421  014B56  0101               	movlb	1	; () banked
  8422  014B58  9730               	bcf	(_HMIBoard+6)& (0+255),3,b
  8423  014B5A  D002               	bra	u6906
  8424  014B5C                     u6905:
  8425  014B5C  0101               	movlb	1	; () banked
  8426  014B5E  8730               	bsf	(_HMIBoard+6)& (0+255),3,b
  8427  014B60                     u6906:
  8428                           
  8429                           ; BSR set to: 1
  8430  014B60  0012               	return		;funcret
  8431  014B62                     __end_of_HMI_SetRight:
  8432                           	opt stack 0
  8433                           tosu	equ	0xFFF
  8434                           tosh	equ	0xFFE
  8435                           tosl	equ	0xFFD
  8436                           pclath	equ	0xFFA
  8437                           tblptru	equ	0xFF8
  8438                           tblptrh	equ	0xFF7
  8439                           tblptrl	equ	0xFF6
  8440                           tablat	equ	0xFF5
  8441                           prodh	equ	0xFF4
  8442                           prodl	equ	0xFF3
  8443                           postinc0	equ	0xFEE
  8444                           plusw0	equ	0xFEB
  8445                           wreg	equ	0xFE8
  8446                           indf1	equ	0xFE7
  8447                           postdec1	equ	0xFE5
  8448                           fsr1h	equ	0xFE2
  8449                           fsr1l	equ	0xFE1
  8450                           indf2	equ	0xFDF
  8451                           postinc2	equ	0xFDE
  8452                           postdec2	equ	0xFDD
  8453                           plusw2	equ	0xFDB
  8454                           fsr2h	equ	0xFDA
  8455                           fsr2l	equ	0xFD9
  8456                           status	equ	0xFD8
  8457                           
  8458 ;; *************** function _HMI_SetLeft *****************
  8459 ;; Defined at:
  8460 ;;		line 162 in file "HMI.c"
  8461 ;; Parameters:    Size  Location     Type
  8462 ;;  pValue          1    wreg     unsigned char 
  8463 ;; Auto vars:     Size  Location     Type
  8464 ;;  pValue          1    0[BANK0 ] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  1    wreg      void 
  8467 ;; Registers used:
  8468 ;;		wreg
  8469 ;; Tracked objects:
  8470 ;;		On entry : 0/0
  8471 ;;		On exit  : 0/0
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8475 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8477 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8478 ;;Total ram usage:        1 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:    7
  8481 ;; This function calls:
  8482 ;;		Nothing
  8483 ;; This function is called by:
  8484 ;;		_Event_HMI_LeftButton
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	text42
  8489  014B62                     __ptext42:
  8490                           	opt stack 0
  8491  014B62                     _HMI_SetLeft:
  8492                           	opt stack 15
  8493                           
  8494                           ; BSR set to: 1
  8495                           ;incstack = 0
  8496                           ;HMI_SetLeft@pValue stored from wreg
  8497  014B62  0100               	movlb	0	; () banked
  8498  014B64  6FB8               	movwf	HMI_SetLeft@pValue& (0+255),b
  8499                           
  8500                           ;HMI.c: 164: HMIBoard.LEFTLED = pValue;
  8501  014B66  0100               	movlb	0	; () banked
  8502  014B68  B1B8               	btfsc	HMI_SetLeft@pValue& (0+255),0,b
  8503  014B6A  D003               	bra	u6895
  8504  014B6C  0101               	movlb	1	; () banked
  8505  014B6E  9530               	bcf	(_HMIBoard+6)& (0+255),2,b
  8506  014B70  D002               	bra	u6896
  8507  014B72                     u6895:
  8508  014B72  0101               	movlb	1	; () banked
  8509  014B74  8530               	bsf	(_HMIBoard+6)& (0+255),2,b
  8510  014B76                     u6896:
  8511                           
  8512                           ; BSR set to: 1
  8513  014B76  0012               	return		;funcret
  8514  014B78                     __end_of_HMI_SetLeft:
  8515                           	opt stack 0
  8516                           tosu	equ	0xFFF
  8517                           tosh	equ	0xFFE
  8518                           tosl	equ	0xFFD
  8519                           pclath	equ	0xFFA
  8520                           tblptru	equ	0xFF8
  8521                           tblptrh	equ	0xFF7
  8522                           tblptrl	equ	0xFF6
  8523                           tablat	equ	0xFF5
  8524                           prodh	equ	0xFF4
  8525                           prodl	equ	0xFF3
  8526                           postinc0	equ	0xFEE
  8527                           plusw0	equ	0xFEB
  8528                           wreg	equ	0xFE8
  8529                           indf1	equ	0xFE7
  8530                           postdec1	equ	0xFE5
  8531                           fsr1h	equ	0xFE2
  8532                           fsr1l	equ	0xFE1
  8533                           indf2	equ	0xFDF
  8534                           postinc2	equ	0xFDE
  8535                           postdec2	equ	0xFDD
  8536                           plusw2	equ	0xFDB
  8537                           fsr2h	equ	0xFDA
  8538                           fsr2l	equ	0xFD9
  8539                           status	equ	0xFD8
  8540                           
  8541 ;; *************** function _HMI_SetNumber *****************
  8542 ;; Defined at:
  8543 ;;		line 221 in file "HMI.c"
  8544 ;; Parameters:    Size  Location     Type
  8545 ;;  pInput          2   17[BANK0 ] int 
  8546 ;; Auto vars:     Size  Location     Type
  8547 ;;		None
  8548 ;; Return value:  Size  Location     Type
  8549 ;;                  1    wreg      void 
  8550 ;; Registers used:
  8551 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8552 ;; Tracked objects:
  8553 ;;		On entry : 0/0
  8554 ;;		On exit  : 0/0
  8555 ;;		Unchanged: 0/0
  8556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8557 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8560 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8561 ;;Total ram usage:        2 bytes
  8562 ;; Hardware stack levels used:    1
  8563 ;; Hardware stack levels required when called:    9
  8564 ;; This function calls:
  8565 ;;		_HMI_SetSegments
  8566 ;;		_itos
  8567 ;; This function is called by:
  8568 ;;		_Event_TestButton
  8569 ;;		_Event_HMI_UpButton
  8570 ;;		_Event_HMI_DownButton
  8571 ;; This function uses a non-reentrant model
  8572 ;;
  8573                           
  8574                           	psect	text43
  8575  014810                     __ptext43:
  8576                           	opt stack 0
  8577  014810                     _HMI_SetNumber:
  8578                           	opt stack 13
  8579                           
  8580                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  8581                           
  8582                           ; BSR set to: 1
  8583                           ;incstack = 0
  8584  014810  C0C9  F0BF         	movff	HMI_SetNumber@pInput,itos@input
  8585  014814  C0CA  F0C0         	movff	HMI_SetNumber@pInput+1,itos@input+1
  8586  014818  0E2A               	movlw	low _HMIBoard
  8587  01481A  0100               	movlb	0	; () banked
  8588  01481C  6FC1               	movwf	itos@destination& (0+255),b
  8589  01481E  0E01               	movlw	high _HMIBoard
  8590  014820  0100               	movlb	0	; () banked
  8591  014822  6FC2               	movwf	(itos@destination+1)& (0+255),b
  8592  014824  ECC8  F092         	call	_itos	;wreg free
  8593                           
  8594                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  8595  014828  0E2A               	movlw	low _HMIBoard
  8596  01482A  0100               	movlb	0	; () banked
  8597  01482C  6FB9               	movwf	HMI_SetSegments@pString& (0+255),b
  8598  01482E  0E01               	movlw	high _HMIBoard
  8599  014830  0100               	movlb	0	; () banked
  8600  014832  6FBA               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  8601  014834  EC4C  F096         	call	_HMI_SetSegments	;wreg free
  8602  014838  0012               	return		;funcret
  8603  01483A                     __end_of_HMI_SetNumber:
  8604                           	opt stack 0
  8605                           tosu	equ	0xFFF
  8606                           tosh	equ	0xFFE
  8607                           tosl	equ	0xFFD
  8608                           pclath	equ	0xFFA
  8609                           tblptru	equ	0xFF8
  8610                           tblptrh	equ	0xFF7
  8611                           tblptrl	equ	0xFF6
  8612                           tablat	equ	0xFF5
  8613                           prodh	equ	0xFF4
  8614                           prodl	equ	0xFF3
  8615                           postinc0	equ	0xFEE
  8616                           plusw0	equ	0xFEB
  8617                           wreg	equ	0xFE8
  8618                           indf1	equ	0xFE7
  8619                           postdec1	equ	0xFE5
  8620                           fsr1h	equ	0xFE2
  8621                           fsr1l	equ	0xFE1
  8622                           indf2	equ	0xFDF
  8623                           postinc2	equ	0xFDE
  8624                           postdec2	equ	0xFDD
  8625                           plusw2	equ	0xFDB
  8626                           fsr2h	equ	0xFDA
  8627                           fsr2l	equ	0xFD9
  8628                           status	equ	0xFD8
  8629                           
  8630 ;; *************** function _itos *****************
  8631 ;; Defined at:
  8632 ;;		line 369 in file "Library/Types.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;  input           2    7[BANK0 ] unsigned short 
  8635 ;;  destination     2    9[BANK0 ] PTR unsigned char 
  8636 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8637 ;; Auto vars:     Size  Location     Type
  8638 ;;  Out             2   15[BANK0 ] unsigned short 
  8639 ;;  Length          2   13[BANK0 ] unsigned short 
  8640 ;;  Data            2   11[BANK0 ] PTR unsigned char 
  8641 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8642 ;; Return value:  Size  Location     Type
  8643 ;;                  1    wreg      void 
  8644 ;; Registers used:
  8645 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8646 ;; Tracked objects:
  8647 ;;		On entry : 0/0
  8648 ;;		On exit  : 0/0
  8649 ;;		Unchanged: 0/0
  8650 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8651 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8652 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;Total ram usage:       10 bytes
  8656 ;; Hardware stack levels used:    1
  8657 ;; Hardware stack levels required when called:    8
  8658 ;; This function calls:
  8659 ;;		___lwdiv
  8660 ;;		___lwmod
  8661 ;;		_reverse
  8662 ;; This function is called by:
  8663 ;;		_HMI_SetNumber
  8664 ;; This function uses a non-reentrant model
  8665 ;;
  8666                           
  8667                           	psect	text44
  8668  012590                     __ptext44:
  8669                           	opt stack 0
  8670  012590                     _itos:
  8671                           	opt stack 13
  8672                           
  8673                           ;Types.c: 371: UINT16 Out = input;
  8674                           
  8675                           ;incstack = 0
  8676  012590  C0BF  F0C7         	movff	itos@input,itos@Out
  8677  012594  C0C0  F0C8         	movff	itos@input+1,itos@Out+1
  8678                           
  8679                           ;Types.c: 372: UINT16 Length = 0;
  8680  012598  0E00               	movlw	0
  8681  01259A  0100               	movlb	0	; () banked
  8682  01259C  6FC6               	movwf	(itos@Length+1)& (0+255),b
  8683  01259E  0E00               	movlw	0
  8684  0125A0  6FC5               	movwf	itos@Length& (0+255),b
  8685                           
  8686                           ; BSR set to: 0
  8687                           ;Types.c: 373: char *Data = destination;
  8688  0125A2  C0C1  F0C3         	movff	itos@destination,itos@Data
  8689  0125A6  C0C2  F0C4         	movff	itos@destination+1,itos@Data+1
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;Types.c: 374: if(Out == 0)
  8693  0125AA  0100               	movlb	0	; () banked
  8694  0125AC  51C7               	movf	itos@Out& (0+255),w,b
  8695  0125AE  0100               	movlb	0	; () banked
  8696  0125B0  11C8               	iorwf	(itos@Out+1)& (0+255),w,b
  8697  0125B2  A4D8               	btfss	status,2,c
  8698  0125B4  D034               	goto	l929
  8699                           
  8700                           ; BSR set to: 0
  8701                           ;Types.c: 375: {
  8702                           ;Types.c: 376: Data[0] = (UINT16)'0';
  8703  0125B6  C0C3  FFD9         	movff	itos@Data,fsr2l
  8704  0125BA  C0C4  FFDA         	movff	itos@Data+1,fsr2h
  8705  0125BE  0E30               	movlw	48
  8706  0125C0  6EDF               	movwf	indf2,c
  8707                           
  8708                           ; BSR set to: 0
  8709                           ;Types.c: 377: Length = 1;
  8710  0125C2  0E00               	movlw	0
  8711  0125C4  0100               	movlb	0	; () banked
  8712  0125C6  6FC6               	movwf	(itos@Length+1)& (0+255),b
  8713  0125C8  0E01               	movlw	1
  8714  0125CA  6FC5               	movwf	itos@Length& (0+255),b
  8715                           
  8716                           ;Types.c: 378: }
  8717  0125CC  D040               	goto	l928
  8718  0125CE                     
  8719                           ; BSR set to: 0
  8720                           ;Types.c: 382: {
  8721                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  8722                           
  8723                           ; BSR set to: 0
  8724  0125CE  C0C7  F0B8         	movff	itos@Out,___lwmod@dividend
  8725  0125D2  C0C8  F0B9         	movff	itos@Out+1,___lwmod@dividend+1
  8726  0125D6  0E00               	movlw	0
  8727  0125D8  0100               	movlb	0	; () banked
  8728  0125DA  6FBB               	movwf	(___lwmod@divisor+1)& (0+255),b
  8729  0125DC  0E0A               	movlw	10
  8730  0125DE  6FBA               	movwf	___lwmod@divisor& (0+255),b
  8731  0125E0  ECFF  F09E         	call	___lwmod	;wreg free
  8732  0125E4  0100               	movlb	0	; () banked
  8733  0125E6  51B8               	movf	?___lwmod& (0+255),w,b
  8734  0125E8  0F30               	addlw	48
  8735  0125EA  C0C3  FFD9         	movff	itos@Data,fsr2l
  8736  0125EE  C0C4  FFDA         	movff	itos@Data+1,fsr2h
  8737  0125F2  6EDF               	movwf	indf2,c
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;Types.c: 384: Out /= 10;
  8741  0125F4  C0C7  F0B8         	movff	itos@Out,___lwdiv@dividend
  8742  0125F8  C0C8  F0B9         	movff	itos@Out+1,___lwdiv@dividend+1
  8743  0125FC  0E00               	movlw	0
  8744  0125FE  0100               	movlb	0	; () banked
  8745  012600  6FBB               	movwf	(___lwdiv@divisor+1)& (0+255),b
  8746  012602  0E0A               	movlw	10
  8747  012604  6FBA               	movwf	___lwdiv@divisor& (0+255),b
  8748  012606  EC2E  F09C         	call	___lwdiv	;wreg free
  8749  01260A  C0B8  F0C7         	movff	?___lwdiv,itos@Out
  8750  01260E  C0B9  F0C8         	movff	?___lwdiv+1,itos@Out+1
  8751                           
  8752                           ;Types.c: 385: Length ++;
  8753  012612  0100               	movlb	0	; () banked
  8754  012614  4BC5               	infsnz	itos@Length& (0+255),f,b
  8755  012616  2BC6               	incf	(itos@Length+1)& (0+255),f,b
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;Types.c: 386: Data++;
  8759  012618  0100               	movlb	0	; () banked
  8760  01261A  4BC3               	infsnz	itos@Data& (0+255),f,b
  8761  01261C  2BC4               	incf	(itos@Data+1)& (0+255),f,b
  8762  01261E                     l929:
  8763                           
  8764                           ; BSR set to: 0
  8765                           
  8766                           ; BSR set to: 0
  8767  01261E  0100               	movlb	0	; () banked
  8768  012620  51C7               	movf	itos@Out& (0+255),w,b
  8769  012622  0100               	movlb	0	; () banked
  8770  012624  11C8               	iorwf	(itos@Out+1)& (0+255),w,b
  8771  012626  B4D8               	btfsc	status,2,c
  8772  012628  D008               	goto	u6750
  8773                           
  8774                           ; BSR set to: 0
  8775  01262A  0100               	movlb	0	; () banked
  8776  01262C  51C6               	movf	(itos@Length+1)& (0+255),w,b
  8777  01262E  E105               	bnz	l10309
  8778  012630  0E06               	movlw	6
  8779  012632  0100               	movlb	0	; () banked
  8780  012634  5DC5               	subwf	itos@Length& (0+255),w,b
  8781  012636  A0D8               	btfss	status,0,c
  8782  012638  D7CA               	goto	l930
  8783  01263A                     u6750:
  8784  01263A                     l10309:
  8785                           
  8786                           ; BSR set to: 0
  8787                           ;Types.c: 387: }
  8788                           ;Types.c: 388: reverse(destination, Length);
  8789  01263A  C0C1  F0B8         	movff	itos@destination,reverse@input
  8790  01263E  C0C2  F0B9         	movff	itos@destination+1,reverse@input+1
  8791  012642  C0C5  F0BA         	movff	itos@Length,reverse@length
  8792  012646  C0C6  F0BB         	movff	itos@Length+1,reverse@length+1
  8793  01264A  ECC4  F09D         	call	_reverse	;wreg free
  8794  01264E                     l928:
  8795                           
  8796                           ;Types.c: 389: }
  8797                           ;Types.c: 390: destination[Length] = '\0';
  8798  01264E  0100               	movlb	0	; () banked
  8799  012650  51C5               	movf	itos@Length& (0+255),w,b
  8800  012652  0100               	movlb	0	; () banked
  8801  012654  25C1               	addwf	itos@destination& (0+255),w,b
  8802  012656  6ED9               	movwf	fsr2l,c
  8803  012658  0100               	movlb	0	; () banked
  8804  01265A  51C6               	movf	(itos@Length+1)& (0+255),w,b
  8805  01265C  0100               	movlb	0	; () banked
  8806  01265E  21C2               	addwfc	(itos@destination+1)& (0+255),w,b
  8807  012660  6EDA               	movwf	fsr2h,c
  8808  012662  0E00               	movlw	0
  8809  012664  6EDF               	movwf	indf2,c
  8810                           
  8811                           ; BSR set to: 0
  8812  012666  0012               	return		;funcret
  8813  012668                     __end_of_itos:
  8814                           	opt stack 0
  8815                           tosu	equ	0xFFF
  8816                           tosh	equ	0xFFE
  8817                           tosl	equ	0xFFD
  8818                           pclath	equ	0xFFA
  8819                           tblptru	equ	0xFF8
  8820                           tblptrh	equ	0xFF7
  8821                           tblptrl	equ	0xFF6
  8822                           tablat	equ	0xFF5
  8823                           prodh	equ	0xFF4
  8824                           prodl	equ	0xFF3
  8825                           postinc0	equ	0xFEE
  8826                           plusw0	equ	0xFEB
  8827                           wreg	equ	0xFE8
  8828                           indf1	equ	0xFE7
  8829                           postdec1	equ	0xFE5
  8830                           fsr1h	equ	0xFE2
  8831                           fsr1l	equ	0xFE1
  8832                           indf2	equ	0xFDF
  8833                           postinc2	equ	0xFDE
  8834                           postdec2	equ	0xFDD
  8835                           plusw2	equ	0xFDB
  8836                           fsr2h	equ	0xFDA
  8837                           fsr2l	equ	0xFD9
  8838                           status	equ	0xFD8
  8839                           
  8840 ;; *************** function _reverse *****************
  8841 ;; Defined at:
  8842 ;;		line 357 in file "Library/Types.c"
  8843 ;; Parameters:    Size  Location     Type
  8844 ;;  input           2    0[BANK0 ] PTR unsigned char 
  8845 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8846 ;;  length          2    2[BANK0 ] unsigned short 
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  8849 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  8850 ;;  tempVar         1    4[BANK0 ] unsigned char 
  8851 ;; Return value:  Size  Location     Type
  8852 ;;                  1    wreg      void 
  8853 ;; Registers used:
  8854 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  8855 ;; Tracked objects:
  8856 ;;		On entry : 0/0
  8857 ;;		On exit  : 0/0
  8858 ;;		Unchanged: 0/0
  8859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8860 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8861 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8863 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8864 ;;Total ram usage:        7 bytes
  8865 ;; Hardware stack levels used:    1
  8866 ;; Hardware stack levels required when called:    7
  8867 ;; This function calls:
  8868 ;;		Nothing
  8869 ;; This function is called by:
  8870 ;;		_itos
  8871 ;; This function uses a non-reentrant model
  8872 ;;
  8873                           
  8874                           	psect	text45
  8875  013B88                     __ptext45:
  8876                           	opt stack 0
  8877  013B88                     _reverse:
  8878                           	opt stack 13
  8879                           
  8880                           ;Types.c: 359: char tempVar,
  8881                           ;Types.c: 360: *iterator = input + length;
  8882                           
  8883                           ; BSR set to: 0
  8884                           ;incstack = 0
  8885  013B88  0100               	movlb	0	; () banked
  8886  013B8A  51BA               	movf	reverse@length& (0+255),w,b
  8887  013B8C  0100               	movlb	0	; () banked
  8888  013B8E  25B8               	addwf	reverse@input& (0+255),w,b
  8889  013B90  0100               	movlb	0	; () banked
  8890  013B92  6FBD               	movwf	reverse@iterator& (0+255),b
  8891  013B94  0100               	movlb	0	; () banked
  8892  013B96  51BB               	movf	(reverse@length+1)& (0+255),w,b
  8893  013B98  0100               	movlb	0	; () banked
  8894  013B9A  21B9               	addwfc	(reverse@input+1)& (0+255),w,b
  8895  013B9C  0100               	movlb	0	; () banked
  8896  013B9E  6FBE               	movwf	(reverse@iterator+1)& (0+255),b
  8897                           
  8898                           ;Types.c: 362: while ( --iterator > input )
  8899  013BA0  D01A               	goto	l921
  8900  013BA2                     
  8901                           ; BSR set to: 0
  8902                           ;Types.c: 363: {
  8903                           ;Types.c: 364: tempVar = *input;
  8904                           
  8905                           ; BSR set to: 0
  8906  013BA2  C0B8  FFD9         	movff	reverse@input,fsr2l
  8907  013BA6  C0B9  FFDA         	movff	reverse@input+1,fsr2h
  8908  013BAA  50DF               	movf	indf2,w,c
  8909  013BAC  0100               	movlb	0	; () banked
  8910  013BAE  6FBC               	movwf	reverse@tempVar& (0+255),b
  8911                           
  8912                           ; BSR set to: 0
  8913                           ;Types.c: 365: *input++=*iterator;
  8914  013BB0  C0BD  FFD9         	movff	reverse@iterator,fsr2l
  8915  013BB4  C0BE  FFDA         	movff	reverse@iterator+1,fsr2h
  8916  013BB8  C0B8  FFE1         	movff	reverse@input,fsr1l
  8917  013BBC  C0B9  FFE2         	movff	reverse@input+1,fsr1h
  8918  013BC0  CFDF FFE7          	movff	indf2,indf1
  8919                           
  8920                           ; BSR set to: 0
  8921  013BC4  0100               	movlb	0	; () banked
  8922  013BC6  4BB8               	infsnz	reverse@input& (0+255),f,b
  8923  013BC8  2BB9               	incf	(reverse@input+1)& (0+255),f,b
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;Types.c: 366: *iterator=tempVar;
  8927  013BCA  C0BD  FFD9         	movff	reverse@iterator,fsr2l
  8928  013BCE  C0BE  FFDA         	movff	reverse@iterator+1,fsr2h
  8929  013BD2  C0BC  FFDF         	movff	reverse@tempVar,indf2
  8930  013BD6                     l921:
  8931                           
  8932                           ; BSR set to: 0
  8933                           
  8934                           ; BSR set to: 0
  8935  013BD6  0100               	movlb	0	; () banked
  8936  013BD8  07BD               	decf	reverse@iterator& (0+255),f,b
  8937  013BDA  A0D8               	btfss	status,0,c
  8938  013BDC  07BE               	decf	(reverse@iterator+1)& (0+255),f,b
  8939  013BDE  0100               	movlb	0	; () banked
  8940  013BE0  51BD               	movf	reverse@iterator& (0+255),w,b
  8941  013BE2  0100               	movlb	0	; () banked
  8942  013BE4  5DB8               	subwf	reverse@input& (0+255),w,b
  8943  013BE6  0100               	movlb	0	; () banked
  8944  013BE8  51BE               	movf	(reverse@iterator+1)& (0+255),w,b
  8945  013BEA  0100               	movlb	0	; () banked
  8946  013BEC  59B9               	subwfb	(reverse@input+1)& (0+255),w,b
  8947  013BEE  B0D8               	btfsc	status,0,c
  8948  013BF0  0012               	return	
  8949  013BF2  D7D7               	goto	l922
  8950  013BF4                     __end_of_reverse:
  8951                           	opt stack 0
  8952                           tosu	equ	0xFFF
  8953                           tosh	equ	0xFFE
  8954                           tosl	equ	0xFFD
  8955                           pclath	equ	0xFFA
  8956                           tblptru	equ	0xFF8
  8957                           tblptrh	equ	0xFF7
  8958                           tblptrl	equ	0xFF6
  8959                           tablat	equ	0xFF5
  8960                           prodh	equ	0xFF4
  8961                           prodl	equ	0xFF3
  8962                           postinc0	equ	0xFEE
  8963                           plusw0	equ	0xFEB
  8964                           wreg	equ	0xFE8
  8965                           indf1	equ	0xFE7
  8966                           postdec1	equ	0xFE5
  8967                           fsr1h	equ	0xFE2
  8968                           fsr1l	equ	0xFE1
  8969                           indf2	equ	0xFDF
  8970                           postinc2	equ	0xFDE
  8971                           postdec2	equ	0xFDD
  8972                           plusw2	equ	0xFDB
  8973                           fsr2h	equ	0xFDA
  8974                           fsr2l	equ	0xFD9
  8975                           status	equ	0xFD8
  8976                           
  8977 ;; *************** function ___lwmod *****************
  8978 ;; Defined at:
  8979 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  8980 ;; Parameters:    Size  Location     Type
  8981 ;;  dividend        2    0[BANK0 ] unsigned int 
  8982 ;;  divisor         2    2[BANK0 ] unsigned int 
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;  counter         1    4[BANK0 ] unsigned char 
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  2    0[BANK0 ] unsigned int 
  8987 ;; Registers used:
  8988 ;;		wreg, status,2, status,0
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8994 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8995 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8997 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8998 ;;Total ram usage:        5 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    7
  9001 ;; This function calls:
  9002 ;;		Nothing
  9003 ;; This function is called by:
  9004 ;;		_itos
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           	psect	text46
  9009  013DFE                     __ptext46:
  9010                           	opt stack 0
  9011  013DFE                     ___lwmod:
  9012                           	opt stack 13
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;incstack = 0
  9016  013DFE  0100               	movlb	0	; () banked
  9017  013E00  51BA               	movf	___lwmod@divisor& (0+255),w,b
  9018  013E02  0100               	movlb	0	; () banked
  9019  013E04  11BB               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  9020  013E06  B4D8               	btfsc	status,2,c
  9021  013E08  D026               	goto	l2538
  9022                           
  9023                           ; BSR set to: 0
  9024  013E0A  0E01               	movlw	1
  9025  013E0C  0100               	movlb	0	; () banked
  9026  013E0E  6FBC               	movwf	___lwmod@counter& (0+255),b
  9027  013E10  D006               	goto	l2533
  9028  013E12                     
  9029                           ; BSR set to: 0
  9030                           
  9031                           ; BSR set to: 0
  9032  013E12  0100               	movlb	0	; () banked
  9033  013E14  90D8               	bcf	status,0,c
  9034  013E16  37BA               	rlcf	___lwmod@divisor& (0+255),f,b
  9035  013E18  37BB               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9036  013E1A  0100               	movlb	0	; () banked
  9037  013E1C  2BBC               	incf	___lwmod@counter& (0+255),f,b
  9038  013E1E                     l2533:
  9039                           
  9040                           ; BSR set to: 0
  9041                           
  9042                           ; BSR set to: 0
  9043  013E1E  0100               	movlb	0	; () banked
  9044  013E20  AFBB               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9045  013E22  D7F7               	goto	l2534
  9046  013E24                     u6710:
  9047                           
  9048                           ; BSR set to: 0
  9049                           
  9050                           ; BSR set to: 0
  9051                           
  9052                           ; BSR set to: 0
  9053  013E24  0100               	movlb	0	; () banked
  9054  013E26  51BA               	movf	___lwmod@divisor& (0+255),w,b
  9055  013E28  0100               	movlb	0	; () banked
  9056  013E2A  5DB8               	subwf	___lwmod@dividend& (0+255),w,b
  9057  013E2C  0100               	movlb	0	; () banked
  9058  013E2E  51BB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9059  013E30  0100               	movlb	0	; () banked
  9060  013E32  59B9               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9061  013E34  A0D8               	btfss	status,0,c
  9062  013E36  D008               	goto	l2537
  9063                           
  9064                           ; BSR set to: 0
  9065  013E38  0100               	movlb	0	; () banked
  9066  013E3A  51BA               	movf	___lwmod@divisor& (0+255),w,b
  9067  013E3C  0100               	movlb	0	; () banked
  9068  013E3E  5FB8               	subwf	___lwmod@dividend& (0+255),f,b
  9069  013E40  0100               	movlb	0	; () banked
  9070  013E42  51BB               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9071  013E44  0100               	movlb	0	; () banked
  9072  013E46  5BB9               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9073  013E48                     l2537:
  9074                           
  9075                           ; BSR set to: 0
  9076                           
  9077                           ; BSR set to: 0
  9078  013E48  0100               	movlb	0	; () banked
  9079  013E4A  90D8               	bcf	status,0,c
  9080  013E4C  33BB               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9081  013E4E  33BA               	rrcf	___lwmod@divisor& (0+255),f,b
  9082                           
  9083                           ; BSR set to: 0
  9084  013E50  0100               	movlb	0	; () banked
  9085  013E52  2FBC               	decfsz	___lwmod@counter& (0+255),f,b
  9086  013E54  D7E7               	goto	u6710
  9087  013E56                     l2538:
  9088                           
  9089                           ; BSR set to: 0
  9090                           
  9091                           ; BSR set to: 0
  9092  013E56  C0B8  F0B8         	movff	___lwmod@dividend,?___lwmod
  9093  013E5A  C0B9  F0B9         	movff	___lwmod@dividend+1,?___lwmod+1
  9094                           
  9095                           ; BSR set to: 0
  9096  013E5E  0012               	return		;funcret
  9097  013E60                     __end_of___lwmod:
  9098                           	opt stack 0
  9099                           tosu	equ	0xFFF
  9100                           tosh	equ	0xFFE
  9101                           tosl	equ	0xFFD
  9102                           pclath	equ	0xFFA
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           postinc0	equ	0xFEE
  9110                           plusw0	equ	0xFEB
  9111                           wreg	equ	0xFE8
  9112                           indf1	equ	0xFE7
  9113                           postdec1	equ	0xFE5
  9114                           fsr1h	equ	0xFE2
  9115                           fsr1l	equ	0xFE1
  9116                           indf2	equ	0xFDF
  9117                           postinc2	equ	0xFDE
  9118                           postdec2	equ	0xFDD
  9119                           plusw2	equ	0xFDB
  9120                           fsr2h	equ	0xFDA
  9121                           fsr2l	equ	0xFD9
  9122                           status	equ	0xFD8
  9123                           
  9124 ;; *************** function ___lwdiv *****************
  9125 ;; Defined at:
  9126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  9127 ;; Parameters:    Size  Location     Type
  9128 ;;  dividend        2    0[BANK0 ] unsigned int 
  9129 ;;  divisor         2    2[BANK0 ] unsigned int 
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;  quotient        2    5[BANK0 ] unsigned int 
  9132 ;;  counter         1    4[BANK0 ] unsigned char 
  9133 ;; Return value:  Size  Location     Type
  9134 ;;                  2    0[BANK0 ] unsigned int 
  9135 ;; Registers used:
  9136 ;;		wreg, status,2, status,0
  9137 ;; Tracked objects:
  9138 ;;		On entry : 0/0
  9139 ;;		On exit  : 0/0
  9140 ;;		Unchanged: 0/0
  9141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9143 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9145 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;Total ram usage:        7 bytes
  9147 ;; Hardware stack levels used:    1
  9148 ;; Hardware stack levels required when called:    7
  9149 ;; This function calls:
  9150 ;;		Nothing
  9151 ;; This function is called by:
  9152 ;;		_itos
  9153 ;; This function uses a non-reentrant model
  9154 ;;
  9155                           
  9156                           	psect	text47
  9157  01385C                     __ptext47:
  9158                           	opt stack 0
  9159  01385C                     ___lwdiv:
  9160                           	opt stack 13
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;incstack = 0
  9164  01385C  0E00               	movlw	0
  9165  01385E  0100               	movlb	0	; () banked
  9166  013860  6FBE               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9167  013862  0E00               	movlw	0
  9168  013864  6FBD               	movwf	___lwdiv@quotient& (0+255),b
  9169                           
  9170                           ; BSR set to: 0
  9171  013866  0100               	movlb	0	; () banked
  9172  013868  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  9173  01386A  0100               	movlb	0	; () banked
  9174  01386C  11BB               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9175  01386E  B4D8               	btfsc	status,2,c
  9176  013870  D02C               	goto	l2528
  9177                           
  9178                           ; BSR set to: 0
  9179  013872  0E01               	movlw	1
  9180  013874  0100               	movlb	0	; () banked
  9181  013876  6FBC               	movwf	___lwdiv@counter& (0+255),b
  9182  013878  D006               	goto	l2523
  9183  01387A                     
  9184                           ; BSR set to: 0
  9185                           
  9186                           ; BSR set to: 0
  9187  01387A  0100               	movlb	0	; () banked
  9188  01387C  90D8               	bcf	status,0,c
  9189  01387E  37BA               	rlcf	___lwdiv@divisor& (0+255),f,b
  9190  013880  37BB               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9191  013882  0100               	movlb	0	; () banked
  9192  013884  2BBC               	incf	___lwdiv@counter& (0+255),f,b
  9193  013886                     l2523:
  9194                           
  9195                           ; BSR set to: 0
  9196                           
  9197                           ; BSR set to: 0
  9198  013886  0100               	movlb	0	; () banked
  9199  013888  AFBB               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9200  01388A  D7F7               	goto	l2524
  9201  01388C                     u6680:
  9202                           
  9203                           ; BSR set to: 0
  9204                           
  9205                           ; BSR set to: 0
  9206                           
  9207                           ; BSR set to: 0
  9208  01388C  0100               	movlb	0	; () banked
  9209  01388E  90D8               	bcf	status,0,c
  9210  013890  37BD               	rlcf	___lwdiv@quotient& (0+255),f,b
  9211  013892  37BE               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9212                           
  9213                           ; BSR set to: 0
  9214  013894  0100               	movlb	0	; () banked
  9215  013896  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  9216  013898  0100               	movlb	0	; () banked
  9217  01389A  5DB8               	subwf	___lwdiv@dividend& (0+255),w,b
  9218  01389C  0100               	movlb	0	; () banked
  9219  01389E  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9220  0138A0  0100               	movlb	0	; () banked
  9221  0138A2  59B9               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9222  0138A4  A0D8               	btfss	status,0,c
  9223  0138A6  D00A               	goto	l2527
  9224                           
  9225                           ; BSR set to: 0
  9226  0138A8  0100               	movlb	0	; () banked
  9227  0138AA  51BA               	movf	___lwdiv@divisor& (0+255),w,b
  9228  0138AC  0100               	movlb	0	; () banked
  9229  0138AE  5FB8               	subwf	___lwdiv@dividend& (0+255),f,b
  9230  0138B0  0100               	movlb	0	; () banked
  9231  0138B2  51BB               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9232  0138B4  0100               	movlb	0	; () banked
  9233  0138B6  5BB9               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9234                           
  9235                           ; BSR set to: 0
  9236  0138B8  0100               	movlb	0	; () banked
  9237  0138BA  81BD               	bsf	___lwdiv@quotient& (0+255),0,b
  9238  0138BC                     l2527:
  9239                           
  9240                           ; BSR set to: 0
  9241                           
  9242                           ; BSR set to: 0
  9243  0138BC  0100               	movlb	0	; () banked
  9244  0138BE  90D8               	bcf	status,0,c
  9245  0138C0  33BB               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9246  0138C2  33BA               	rrcf	___lwdiv@divisor& (0+255),f,b
  9247                           
  9248                           ; BSR set to: 0
  9249  0138C4  0100               	movlb	0	; () banked
  9250  0138C6  2FBC               	decfsz	___lwdiv@counter& (0+255),f,b
  9251  0138C8  D7E1               	goto	u6680
  9252  0138CA                     l2528:
  9253                           
  9254                           ; BSR set to: 0
  9255                           
  9256                           ; BSR set to: 0
  9257  0138CA  C0BD  F0B8         	movff	___lwdiv@quotient,?___lwdiv
  9258  0138CE  C0BE  F0B9         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9259                           
  9260                           ; BSR set to: 0
  9261  0138D2  0012               	return		;funcret
  9262  0138D4                     __end_of___lwdiv:
  9263                           	opt stack 0
  9264                           tosu	equ	0xFFF
  9265                           tosh	equ	0xFFE
  9266                           tosl	equ	0xFFD
  9267                           pclath	equ	0xFFA
  9268                           tblptru	equ	0xFF8
  9269                           tblptrh	equ	0xFF7
  9270                           tblptrl	equ	0xFF6
  9271                           tablat	equ	0xFF5
  9272                           prodh	equ	0xFF4
  9273                           prodl	equ	0xFF3
  9274                           postinc0	equ	0xFEE
  9275                           plusw0	equ	0xFEB
  9276                           wreg	equ	0xFE8
  9277                           indf1	equ	0xFE7
  9278                           postdec1	equ	0xFE5
  9279                           fsr1h	equ	0xFE2
  9280                           fsr1l	equ	0xFE1
  9281                           indf2	equ	0xFDF
  9282                           postinc2	equ	0xFDE
  9283                           postdec2	equ	0xFDD
  9284                           plusw2	equ	0xFDB
  9285                           fsr2h	equ	0xFDA
  9286                           fsr2l	equ	0xFD9
  9287                           status	equ	0xFD8
  9288                           
  9289 ;; *************** function _HMI_SetSegments *****************
  9290 ;; Defined at:
  9291 ;;		line 226 in file "HMI.c"
  9292 ;; Parameters:    Size  Location     Type
  9293 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  9294 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9295 ;; Auto vars:     Size  Location     Type
  9296 ;;  in              2    4[BANK0 ] unsigned short 
  9297 ;; Return value:  Size  Location     Type
  9298 ;;                  1    wreg      void 
  9299 ;; Registers used:
  9300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9301 ;; Tracked objects:
  9302 ;;		On entry : 0/0
  9303 ;;		On exit  : 0/0
  9304 ;;		Unchanged: 0/0
  9305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9306 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;Total ram usage:        5 bytes
  9311 ;; Hardware stack levels used:    1
  9312 ;; Hardware stack levels required when called:    8
  9313 ;; This function calls:
  9314 ;;		_ToSegment
  9315 ;; This function is called by:
  9316 ;;		_HMI_SetNumber
  9317 ;; This function uses a non-reentrant model
  9318 ;;
  9319                           
  9320                           	psect	text48
  9321  012C98                     __ptext48:
  9322                           	opt stack 0
  9323  012C98                     _HMI_SetSegments:
  9324                           	opt stack 13
  9325                           
  9326                           ;HMI.c: 228: UINT16 in=0;
  9327                           
  9328                           ; BSR set to: 0
  9329                           ;incstack = 0
  9330  012C98  0E00               	movlw	0
  9331  012C9A  0100               	movlb	0	; () banked
  9332  012C9C  6FBD               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  9333  012C9E  0E00               	movlw	0
  9334  012CA0  6FBC               	movwf	HMI_SetSegments@in& (0+255),b
  9335                           
  9336                           ;HMI.c: 229: while(*pString)
  9337  012CA2  D038               	goto	l1210
  9338  012CA4                     
  9339                           ; BSR set to: 0
  9340                           ;HMI.c: 230: {
  9341                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  9342                           
  9343                           ; BSR set to: 0
  9344  012CA4  0E2A               	movlw	low _HMIBoard
  9345  012CA6  0100               	movlb	0	; () banked
  9346  012CA8  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
  9347  012CAA  6ED9               	movwf	fsr2l,c
  9348  012CAC  0E01               	movlw	high _HMIBoard
  9349  012CAE  0100               	movlb	0	; () banked
  9350  012CB0  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9351  012CB2  6EDA               	movwf	fsr2h,c
  9352  012CB4  C0B9  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  9353  012CB8  C0BA  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  9354  012CBC  50E7               	movf	indf1,w,c
  9355  012CBE  ECEC  F083         	call	_ToSegment
  9356  012CC2  6EDF               	movwf	indf2,c
  9357                           
  9358                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
  9359  012CC4  0E2A               	movlw	low _HMIBoard
  9360  012CC6  0100               	movlb	0	; () banked
  9361  012CC8  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
  9362  012CCA  6ED9               	movwf	fsr2l,c
  9363  012CCC  0E01               	movlw	high _HMIBoard
  9364  012CCE  0100               	movlb	0	; () banked
  9365  012CD0  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9366  012CD2  6EDA               	movwf	fsr2h,c
  9367  012CD4  0E80               	movlw	128
  9368  012CD6  18DE               	xorwf	postinc2,w,c
  9369  012CD8  A4D8               	btfss	status,2,c
  9370  012CDA  D00E               	goto	l1209
  9371                           
  9372                           ; BSR set to: 0
  9373                           ;HMI.c: 234: {
  9374                           ;HMI.c: 235: in--;
  9375  012CDC  0100               	movlb	0	; () banked
  9376  012CDE  07BC               	decf	HMI_SetSegments@in& (0+255),f,b
  9377  012CE0  A0D8               	btfss	status,0,c
  9378  012CE2  07BD               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
  9382  012CE4  0E2A               	movlw	low _HMIBoard
  9383  012CE6  0100               	movlb	0	; () banked
  9384  012CE8  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
  9385  012CEA  6ED9               	movwf	fsr2l,c
  9386  012CEC  0E01               	movlw	high _HMIBoard
  9387  012CEE  0100               	movlb	0	; () banked
  9388  012CF0  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9389  012CF2  6EDA               	movwf	fsr2h,c
  9390  012CF4  0E00               	movlw	0
  9391  012CF6  8EDB               	bsf	plusw2,7,c
  9392  012CF8                     l1209:
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;HMI.c: 237: }
  9396                           ;HMI.c: 239: pString++;
  9397                           
  9398                           ; BSR set to: 0
  9399  012CF8  0100               	movlb	0	; () banked
  9400  012CFA  4BB9               	infsnz	HMI_SetSegments@pString& (0+255),f,b
  9401  012CFC  2BBA               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
  9402                           
  9403                           ; BSR set to: 0
  9404                           ;HMI.c: 240: in++;
  9405  012CFE  0100               	movlb	0	; () banked
  9406  012D00  4BBC               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9407  012D02  2BBD               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;HMI.c: 241: if (in>=6)
  9411  012D04  0100               	movlb	0	; () banked
  9412  012D06  51BD               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9413  012D08  E11A               	bnz	l10383
  9414  012D0A  0E06               	movlw	6
  9415  012D0C  0100               	movlb	0	; () banked
  9416  012D0E  5DBC               	subwf	HMI_SetSegments@in& (0+255),w,b
  9417  012D10  B0D8               	btfsc	status,0,c
  9418  012D12  D015               	goto	l1212
  9419  012D14                     l1210:
  9420                           
  9421                           ; BSR set to: 0
  9422                           
  9423                           ; BSR set to: 0
  9424                           
  9425                           ; BSR set to: 0
  9426  012D14  C0B9  FFD9         	movff	HMI_SetSegments@pString,fsr2l
  9427  012D18  C0BA  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
  9428  012D1C  50DF               	movf	indf2,w,c
  9429  012D1E  B4D8               	btfsc	status,2,c
  9430  012D20  D00E               	goto	l1212
  9431  012D22  D7C0               	goto	l1208
  9432  012D24                     
  9433                           ; BSR set to: 0
  9434                           ;HMI.c: 245: {
  9435                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
  9436                           
  9437                           ; BSR set to: 0
  9438  012D24  0E2A               	movlw	low _HMIBoard
  9439  012D26  0100               	movlb	0	; () banked
  9440  012D28  25BC               	addwf	HMI_SetSegments@in& (0+255),w,b
  9441  012D2A  6ED9               	movwf	fsr2l,c
  9442  012D2C  0E01               	movlw	high _HMIBoard
  9443  012D2E  0100               	movlb	0	; () banked
  9444  012D30  21BD               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9445  012D32  6EDA               	movwf	fsr2h,c
  9446  012D34  0E00               	movlw	0
  9447  012D36  6EDF               	movwf	indf2,c
  9448                           
  9449                           ; BSR set to: 0
  9450                           ;HMI.c: 247: in++;
  9451  012D38  0100               	movlb	0	; () banked
  9452  012D3A  4BBC               	infsnz	HMI_SetSegments@in& (0+255),f,b
  9453  012D3C  2BBD               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
  9454  012D3E                     l1212:
  9455  012D3E                     l10383:
  9456                           
  9457                           ; BSR set to: 0
  9458  012D3E  0100               	movlb	0	; () banked
  9459  012D40  51BD               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
  9460  012D42  E106               	bnz	l1215
  9461  012D44  0E06               	movlw	6
  9462  012D46  0100               	movlb	0	; () banked
  9463  012D48  5DBC               	subwf	HMI_SetSegments@in& (0+255),w,b
  9464  012D4A  B0D8               	btfsc	status,0,c
  9465  012D4C  0012               	return	
  9466  012D4E  D7EA               	goto	l1213
  9467  012D50                     l1215:
  9468                           
  9469                           ; BSR set to: 0
  9470  012D50  0012               	return		;funcret
  9471  012D52                     __end_of_HMI_SetSegments:
  9472                           	opt stack 0
  9473                           tosu	equ	0xFFF
  9474                           tosh	equ	0xFFE
  9475                           tosl	equ	0xFFD
  9476                           pclath	equ	0xFFA
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           postinc0	equ	0xFEE
  9484                           plusw0	equ	0xFEB
  9485                           wreg	equ	0xFE8
  9486                           indf1	equ	0xFE7
  9487                           postdec1	equ	0xFE5
  9488                           fsr1h	equ	0xFE2
  9489                           fsr1l	equ	0xFE1
  9490                           indf2	equ	0xFDF
  9491                           postinc2	equ	0xFDE
  9492                           postdec2	equ	0xFDD
  9493                           plusw2	equ	0xFDB
  9494                           fsr2h	equ	0xFDA
  9495                           fsr2l	equ	0xFD9
  9496                           status	equ	0xFD8
  9497                           
  9498 ;; *************** function _ToSegment *****************
  9499 ;; Defined at:
  9500 ;;		line 284 in file "Library/Types.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;  pCHR            1    wreg     unsigned char 
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;  pCHR            1    0[BANK0 ] unsigned char 
  9505 ;; Return value:  Size  Location     Type
  9506 ;;                  1    wreg      unsigned char 
  9507 ;; Registers used:
  9508 ;;		wreg, status,2, status,0
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9515 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9517 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9518 ;;Total ram usage:        1 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    7
  9521 ;; This function calls:
  9522 ;;		Nothing
  9523 ;; This function is called by:
  9524 ;;		_HMI_SetSegments
  9525 ;; This function uses a non-reentrant model
  9526 ;;
  9527                           
  9528                           	psect	text49
  9529  0107D8                     __ptext49:
  9530                           	opt stack 0
  9531  0107D8                     _ToSegment:
  9532                           	opt stack 13
  9533                           
  9534                           ; BSR set to: 0
  9535                           ;incstack = 0
  9536                           ;ToSegment@pCHR stored from wreg
  9537  0107D8  0100               	movlb	0	; () banked
  9538  0107DA  6FB8               	movwf	ToSegment@pCHR& (0+255),b
  9539                           
  9540                           ;Types.c: 286: switch(pCHR)
  9541  0107DC  D07E               	goto	l853
  9542  0107DE  0E3F               	movlw	63
  9543  0107E0  0012               	return	
  9544  0107E2  0E06               	movlw	6
  9545  0107E4  0012               	return	
  9546  0107E6  0E5B               	movlw	91
  9547  0107E8  0012               	return	
  9548  0107EA  0E4F               	movlw	79
  9549  0107EC  0012               	return	
  9550  0107EE  0E66               	movlw	102
  9551  0107F0  0012               	return	
  9552  0107F2  0E6D               	movlw	109
  9553  0107F4  0012               	return	
  9554  0107F6  0E7D               	movlw	125
  9555  0107F8  0012               	return	
  9556  0107FA  0E07               	movlw	7
  9557  0107FC  0012               	return	
  9558  0107FE  0E7F               	movlw	127
  9559  010800  0012               	return	
  9560  010802  0E6F               	movlw	111
  9561  010804  0012               	return	
  9562  010806  0E5F               	movlw	95
  9563  010808  0012               	return	
  9564  01080A  0E7C               	movlw	124
  9565  01080C  0012               	return	
  9566  01080E  0E58               	movlw	88
  9567  010810  0012               	return	
  9568  010812  0E5E               	movlw	94
  9569  010814  0012               	return	
  9570  010816  0E7B               	movlw	123
  9571  010818  0012               	return	
  9572  01081A  0E71               	movlw	113
  9573  01081C  0012               	return	
  9574  01081E  0E6F               	movlw	111
  9575  010820  0012               	return	
  9576  010822  0E74               	movlw	116
  9577  010824  0012               	return	
  9578  010826  0E04               	movlw	4
  9579  010828  0012               	return	
  9580  01082A  0E0E               	movlw	14
  9581  01082C  0012               	return	
  9582  01082E  0E7A               	movlw	122
  9583  010830  0012               	return	
  9584  010832  0E06               	movlw	6
  9585  010834  0012               	return	
  9586  010836  0E14               	movlw	20
  9587  010838  0012               	return	
  9588  01083A  0E54               	movlw	84
  9589  01083C  0012               	return	
  9590  01083E  0E5C               	movlw	92
  9591  010840  0012               	return	
  9592  010842  0E73               	movlw	115
  9593  010844  0012               	return	
  9594  010846  0E67               	movlw	103
  9595  010848  0012               	return	
  9596  01084A  0E50               	movlw	80
  9597  01084C  0012               	return	
  9598  01084E  0E6D               	movlw	109
  9599  010850  0012               	return	
  9600  010852  0E78               	movlw	120
  9601  010854  0012               	return	
  9602  010856  0E1C               	movlw	28
  9603  010858  0012               	return	
  9604  01085A  0E62               	movlw	98
  9605  01085C  0012               	return	
  9606  01085E  0E2A               	movlw	42
  9607  010860  0012               	return	
  9608  010862  0E64               	movlw	100
  9609  010864  0012               	return	
  9610  010866  0E6E               	movlw	110
  9611  010868  0012               	return	
  9612  01086A  0E5B               	movlw	91
  9613  01086C  0012               	return	
  9614  01086E  0E77               	movlw	119
  9615  010870  0012               	return	
  9616  010872  0E7F               	movlw	127
  9617  010874  0012               	return	
  9618  010876  0E39               	movlw	57
  9619  010878  0012               	return	
  9620  01087A  0E3F               	movlw	63
  9621  01087C  0012               	return	
  9622  01087E  0E79               	movlw	121
  9623  010880  0012               	return	
  9624  010882  0E71               	movlw	113
  9625  010884  0012               	return	
  9626  010886  0E3D               	movlw	61
  9627  010888  0012               	return	
  9628  01088A  0E76               	movlw	118
  9629  01088C  0012               	return	
  9630  01088E  0E06               	movlw	6
  9631  010890  0012               	return	
  9632  010892  0E1E               	movlw	30
  9633  010894  0012               	return	
  9634  010896  0E57               	movlw	87
  9635  010898  0012               	return	
  9636  01089A  0E38               	movlw	56
  9637  01089C  0012               	return	
  9638  01089E  0E76               	movlw	118
  9639  0108A0  0012               	return	
  9640  0108A2  0E76               	movlw	118
  9641  0108A4  0012               	return	
  9642  0108A6  0E3F               	movlw	63
  9643  0108A8  0012               	return	
  9644  0108AA  0E73               	movlw	115
  9645  0108AC  0012               	return	
  9646  0108AE  0E3F               	movlw	63
  9647  0108B0  0012               	return	
  9648  0108B2  0E77               	movlw	119
  9649  0108B4  0012               	return	
  9650  0108B6  0E6D               	movlw	109
  9651  0108B8  0012               	return	
  9652  0108BA  0E31               	movlw	49
  9653  0108BC  0012               	return	
  9654  0108BE  0E3E               	movlw	62
  9655  0108C0  0012               	return	
  9656  0108C2  0E3E               	movlw	62
  9657  0108C4  0012               	return	
  9658  0108C6  0E7E               	movlw	126
  9659  0108C8  0012               	return	
  9660  0108CA  0E76               	movlw	118
  9661  0108CC  0012               	return	
  9662  0108CE  0E66               	movlw	102
  9663  0108D0  0012               	return	
  9664  0108D2  0E5B               	movlw	91
  9665  0108D4  0012               	return	
  9666  0108D6  0E80               	movlw	128
  9667  0108D8  0012               	return	
  9668  0108DA                     l853:
  9669  0108DA  0100               	movlb	0	; () banked
  9670  0108DC  51B8               	movf	ToSegment@pCHR& (0+255),w,b
  9671                           
  9672                           ; Switch size 1, requested type "space"
  9673                           ; Number of cases is 63, Range of values is 46 to 122
  9674                           ; switch strategies available:
  9675                           ; Name         Instructions Cycles
  9676                           ; simple_byte          190    96 (average)
  9677                           ;	Chosen strategy is simple_byte
  9678  0108DE  0A2E               	xorlw	46	; case 46
  9679  0108E0  B4D8               	btfsc	status,2,c
  9680  0108E2  D7F9               	goto	l917
  9681  0108E4  0A1E               	xorlw	30	; case 48
  9682  0108E6  B4D8               	btfsc	status,2,c
  9683  0108E8  D77A               	goto	l854
  9684  0108EA  0A01               	xorlw	1	; case 49
  9685  0108EC  B4D8               	btfsc	status,2,c
  9686  0108EE  D779               	goto	l856
  9687  0108F0  0A03               	xorlw	3	; case 50
  9688  0108F2  B4D8               	btfsc	status,2,c
  9689  0108F4  D778               	goto	l857
  9690  0108F6  0A01               	xorlw	1	; case 51
  9691  0108F8  B4D8               	btfsc	status,2,c
  9692  0108FA  D777               	goto	l858
  9693  0108FC  0A07               	xorlw	7	; case 52
  9694  0108FE  B4D8               	btfsc	status,2,c
  9695  010900  D776               	goto	l859
  9696  010902  0A01               	xorlw	1	; case 53
  9697  010904  B4D8               	btfsc	status,2,c
  9698  010906  D775               	goto	l860
  9699  010908  0A03               	xorlw	3	; case 54
  9700  01090A  B4D8               	btfsc	status,2,c
  9701  01090C  D774               	goto	l861
  9702  01090E  0A01               	xorlw	1	; case 55
  9703  010910  B4D8               	btfsc	status,2,c
  9704  010912  D773               	goto	l862
  9705  010914  0A0F               	xorlw	15	; case 56
  9706  010916  B4D8               	btfsc	status,2,c
  9707  010918  D772               	goto	l863
  9708  01091A  0A01               	xorlw	1	; case 57
  9709  01091C  B4D8               	btfsc	status,2,c
  9710  01091E  D771               	goto	l864
  9711  010920  0A78               	xorlw	120	; case 65
  9712  010922  B4D8               	btfsc	status,2,c
  9713  010924  D7A4               	goto	l891
  9714  010926  0A03               	xorlw	3	; case 66
  9715  010928  B4D8               	btfsc	status,2,c
  9716  01092A  D7A3               	goto	l892
  9717  01092C  0A01               	xorlw	1	; case 67
  9718  01092E  B4D8               	btfsc	status,2,c
  9719  010930  D7A2               	goto	l893
  9720  010932  0A07               	xorlw	7	; case 68
  9721  010934  B4D8               	btfsc	status,2,c
  9722  010936  D7A1               	goto	l894
  9723  010938  0A01               	xorlw	1	; case 69
  9724  01093A  B4D8               	btfsc	status,2,c
  9725  01093C  D7A0               	goto	l895
  9726  01093E  0A03               	xorlw	3	; case 70
  9727  010940  B4D8               	btfsc	status,2,c
  9728  010942  D79F               	goto	l896
  9729  010944  0A01               	xorlw	1	; case 71
  9730  010946  B4D8               	btfsc	status,2,c
  9731  010948  D79E               	goto	l897
  9732  01094A  0A0F               	xorlw	15	; case 72
  9733  01094C  B4D8               	btfsc	status,2,c
  9734  01094E  D79D               	goto	l898
  9735  010950  0A01               	xorlw	1	; case 73
  9736  010952  B4D8               	btfsc	status,2,c
  9737  010954  D79C               	goto	l899
  9738  010956  0A03               	xorlw	3	; case 74
  9739  010958  B4D8               	btfsc	status,2,c
  9740  01095A  D79B               	goto	l900
  9741  01095C  0A01               	xorlw	1	; case 75
  9742  01095E  B4D8               	btfsc	status,2,c
  9743  010960  D79A               	goto	l901
  9744  010962  0A07               	xorlw	7	; case 76
  9745  010964  B4D8               	btfsc	status,2,c
  9746  010966  D799               	goto	l902
  9747  010968  0A01               	xorlw	1	; case 77
  9748  01096A  B4D8               	btfsc	status,2,c
  9749  01096C  D798               	goto	l903
  9750  01096E  0A03               	xorlw	3	; case 78
  9751  010970  B4D8               	btfsc	status,2,c
  9752  010972  D797               	goto	l904
  9753  010974  0A01               	xorlw	1	; case 79
  9754  010976  B4D8               	btfsc	status,2,c
  9755  010978  D796               	goto	l905
  9756  01097A  0A1F               	xorlw	31	; case 80
  9757  01097C  B4D8               	btfsc	status,2,c
  9758  01097E  D795               	goto	l906
  9759  010980  0A01               	xorlw	1	; case 81
  9760  010982  B4D8               	btfsc	status,2,c
  9761  010984  D794               	goto	l907
  9762  010986  0A03               	xorlw	3	; case 82
  9763  010988  B4D8               	btfsc	status,2,c
  9764  01098A  D793               	goto	l908
  9765  01098C  0A01               	xorlw	1	; case 83
  9766  01098E  B4D8               	btfsc	status,2,c
  9767  010990  D792               	goto	l909
  9768  010992  0A07               	xorlw	7	; case 84
  9769  010994  B4D8               	btfsc	status,2,c
  9770  010996  D791               	goto	l910
  9771  010998  0A01               	xorlw	1	; case 85
  9772  01099A  B4D8               	btfsc	status,2,c
  9773  01099C  D790               	goto	l911
  9774  01099E  0A03               	xorlw	3	; case 86
  9775  0109A0  B4D8               	btfsc	status,2,c
  9776  0109A2  D78F               	goto	l912
  9777  0109A4  0A01               	xorlw	1	; case 87
  9778  0109A6  B4D8               	btfsc	status,2,c
  9779  0109A8  D78E               	goto	l913
  9780  0109AA  0A0F               	xorlw	15	; case 88
  9781  0109AC  B4D8               	btfsc	status,2,c
  9782  0109AE  D78D               	goto	l914
  9783  0109B0  0A01               	xorlw	1	; case 89
  9784  0109B2  B4D8               	btfsc	status,2,c
  9785  0109B4  D78C               	goto	l915
  9786  0109B6  0A03               	xorlw	3	; case 90
  9787  0109B8  B4D8               	btfsc	status,2,c
  9788  0109BA  D78B               	goto	l916
  9789  0109BC  0A3B               	xorlw	59	; case 97
  9790  0109BE  B4D8               	btfsc	status,2,c
  9791  0109C0  D722               	goto	l865
  9792  0109C2  0A03               	xorlw	3	; case 98
  9793  0109C4  B4D8               	btfsc	status,2,c
  9794  0109C6  D721               	goto	l866
  9795  0109C8  0A01               	xorlw	1	; case 99
  9796  0109CA  B4D8               	btfsc	status,2,c
  9797  0109CC  D720               	goto	l867
  9798  0109CE  0A07               	xorlw	7	; case 100
  9799  0109D0  B4D8               	btfsc	status,2,c
  9800  0109D2  D71F               	goto	l868
  9801  0109D4  0A01               	xorlw	1	; case 101
  9802  0109D6  B4D8               	btfsc	status,2,c
  9803  0109D8  D71E               	goto	l869
  9804  0109DA  0A03               	xorlw	3	; case 102
  9805  0109DC  B4D8               	btfsc	status,2,c
  9806  0109DE  D71D               	goto	l870
  9807  0109E0  0A01               	xorlw	1	; case 103
  9808  0109E2  B4D8               	btfsc	status,2,c
  9809  0109E4  D71C               	goto	l871
  9810  0109E6  0A0F               	xorlw	15	; case 104
  9811  0109E8  B4D8               	btfsc	status,2,c
  9812  0109EA  D71B               	goto	l872
  9813  0109EC  0A01               	xorlw	1	; case 105
  9814  0109EE  B4D8               	btfsc	status,2,c
  9815  0109F0  D71A               	goto	l873
  9816  0109F2  0A03               	xorlw	3	; case 106
  9817  0109F4  B4D8               	btfsc	status,2,c
  9818  0109F6  D719               	goto	l874
  9819  0109F8  0A01               	xorlw	1	; case 107
  9820  0109FA  B4D8               	btfsc	status,2,c
  9821  0109FC  D718               	goto	l875
  9822  0109FE  0A07               	xorlw	7	; case 108
  9823  010A00  B4D8               	btfsc	status,2,c
  9824  010A02  D717               	goto	l876
  9825  010A04  0A01               	xorlw	1	; case 109
  9826  010A06  B4D8               	btfsc	status,2,c
  9827  010A08  D716               	goto	l877
  9828  010A0A  0A03               	xorlw	3	; case 110
  9829  010A0C  B4D8               	btfsc	status,2,c
  9830  010A0E  D715               	goto	l878
  9831  010A10  0A01               	xorlw	1	; case 111
  9832  010A12  B4D8               	btfsc	status,2,c
  9833  010A14  D714               	goto	l879
  9834  010A16  0A1F               	xorlw	31	; case 112
  9835  010A18  B4D8               	btfsc	status,2,c
  9836  010A1A  D713               	goto	l880
  9837  010A1C  0A01               	xorlw	1	; case 113
  9838  010A1E  B4D8               	btfsc	status,2,c
  9839  010A20  D712               	goto	l881
  9840  010A22  0A03               	xorlw	3	; case 114
  9841  010A24  B4D8               	btfsc	status,2,c
  9842  010A26  D711               	goto	l882
  9843  010A28  0A01               	xorlw	1	; case 115
  9844  010A2A  B4D8               	btfsc	status,2,c
  9845  010A2C  D710               	goto	l883
  9846  010A2E  0A07               	xorlw	7	; case 116
  9847  010A30  B4D8               	btfsc	status,2,c
  9848  010A32  D70F               	goto	l884
  9849  010A34  0A01               	xorlw	1	; case 117
  9850  010A36  B4D8               	btfsc	status,2,c
  9851  010A38  D70E               	goto	l885
  9852  010A3A  0A03               	xorlw	3	; case 118
  9853  010A3C  B4D8               	btfsc	status,2,c
  9854  010A3E  D70D               	goto	l886
  9855  010A40  0A01               	xorlw	1	; case 119
  9856  010A42  B4D8               	btfsc	status,2,c
  9857  010A44  D70C               	goto	l887
  9858  010A46  0A0F               	xorlw	15	; case 120
  9859  010A48  B4D8               	btfsc	status,2,c
  9860  010A4A  D70B               	goto	l888
  9861  010A4C  0A01               	xorlw	1	; case 121
  9862  010A4E  B4D8               	btfsc	status,2,c
  9863  010A50  D70A               	goto	l889
  9864  010A52  0A03               	xorlw	3	; case 122
  9865  010A54  B4D8               	btfsc	status,2,c
  9866  010A56  D709               	goto	l890
  9867                           
  9868                           ;Types.c: 354: return 0;
  9869                           
  9870                           ; BSR set to: 0
  9871  010A58  0E00               	movlw	0
  9872  010A5A  0012               	return	
  9873  010A5C                     __end_of_ToSegment:
  9874                           	opt stack 0
  9875                           tosu	equ	0xFFF
  9876                           tosh	equ	0xFFE
  9877                           tosl	equ	0xFFD
  9878                           pclath	equ	0xFFA
  9879                           tblptru	equ	0xFF8
  9880                           tblptrh	equ	0xFF7
  9881                           tblptrl	equ	0xFF6
  9882                           tablat	equ	0xFF5
  9883                           prodh	equ	0xFF4
  9884                           prodl	equ	0xFF3
  9885                           postinc0	equ	0xFEE
  9886                           plusw0	equ	0xFEB
  9887                           wreg	equ	0xFE8
  9888                           indf1	equ	0xFE7
  9889                           postdec1	equ	0xFE5
  9890                           fsr1h	equ	0xFE2
  9891                           fsr1l	equ	0xFE1
  9892                           indf2	equ	0xFDF
  9893                           postinc2	equ	0xFDE
  9894                           postdec2	equ	0xFDD
  9895                           plusw2	equ	0xFDB
  9896                           fsr2h	equ	0xFDA
  9897                           fsr2l	equ	0xFD9
  9898                           status	equ	0xFD8
  9899                           
  9900 ;; *************** function _HMI_SetDown *****************
  9901 ;; Defined at:
  9902 ;;		line 180 in file "HMI.c"
  9903 ;; Parameters:    Size  Location     Type
  9904 ;;  pValue          1    wreg     unsigned char 
  9905 ;; Auto vars:     Size  Location     Type
  9906 ;;  pValue          1    0[BANK0 ] unsigned char 
  9907 ;; Return value:  Size  Location     Type
  9908 ;;                  1    wreg      void 
  9909 ;; Registers used:
  9910 ;;		wreg
  9911 ;; Tracked objects:
  9912 ;;		On entry : 0/0
  9913 ;;		On exit  : 0/0
  9914 ;;		Unchanged: 0/0
  9915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9919 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9920 ;;Total ram usage:        1 bytes
  9921 ;; Hardware stack levels used:    1
  9922 ;; Hardware stack levels required when called:    7
  9923 ;; This function calls:
  9924 ;;		Nothing
  9925 ;; This function is called by:
  9926 ;;		_Event_HMI_DownButton
  9927 ;; This function uses a non-reentrant model
  9928 ;;
  9929                           
  9930                           	psect	text50
  9931  014B78                     __ptext50:
  9932                           	opt stack 0
  9933  014B78                     _HMI_SetDown:
  9934                           	opt stack 15
  9935                           
  9936                           ;incstack = 0
  9937                           ;HMI_SetDown@pValue stored from wreg
  9938  014B78  0100               	movlb	0	; () banked
  9939  014B7A  6FB8               	movwf	HMI_SetDown@pValue& (0+255),b
  9940                           
  9941                           ;HMI.c: 182: HMIBoard.DOWNLED = pValue;
  9942  014B7C  0100               	movlb	0	; () banked
  9943  014B7E  B1B8               	btfsc	HMI_SetDown@pValue& (0+255),0,b
  9944  014B80  D003               	bra	u6925
  9945  014B82  0101               	movlb	1	; () banked
  9946  014B84  9330               	bcf	(_HMIBoard+6)& (0+255),1,b
  9947  014B86  D002               	bra	u6926
  9948  014B88                     u6925:
  9949  014B88  0101               	movlb	1	; () banked
  9950  014B8A  8330               	bsf	(_HMIBoard+6)& (0+255),1,b
  9951  014B8C                     u6926:
  9952                           
  9953                           ; BSR set to: 1
  9954  014B8C  0012               	return		;funcret
  9955  014B8E                     __end_of_HMI_SetDown:
  9956                           	opt stack 0
  9957                           tosu	equ	0xFFF
  9958                           tosh	equ	0xFFE
  9959                           tosl	equ	0xFFD
  9960                           pclath	equ	0xFFA
  9961                           tblptru	equ	0xFF8
  9962                           tblptrh	equ	0xFF7
  9963                           tblptrl	equ	0xFF6
  9964                           tablat	equ	0xFF5
  9965                           prodh	equ	0xFF4
  9966                           prodl	equ	0xFF3
  9967                           postinc0	equ	0xFEE
  9968                           plusw0	equ	0xFEB
  9969                           wreg	equ	0xFE8
  9970                           indf1	equ	0xFE7
  9971                           postdec1	equ	0xFE5
  9972                           fsr1h	equ	0xFE2
  9973                           fsr1l	equ	0xFE1
  9974                           indf2	equ	0xFDF
  9975                           postinc2	equ	0xFDE
  9976                           postdec2	equ	0xFDD
  9977                           plusw2	equ	0xFDB
  9978                           fsr2h	equ	0xFDA
  9979                           fsr2l	equ	0xFD9
  9980                           status	equ	0xFD8
  9981                           
  9982 ;; *************** function _HMI_SetBar *****************
  9983 ;; Defined at:
  9984 ;;		line 205 in file "HMI.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;  pValue          1    wreg     unsigned char 
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;  pValue          1    0[BANK0 ] unsigned char 
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  1    wreg      void 
  9991 ;; Registers used:
  9992 ;;		wreg
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9999 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10001 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10002 ;;Total ram usage:        1 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; Hardware stack levels required when called:    7
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		_Event_DIPSwitch
 10009 ;;		_Event_HMI_DIPSwitch
 10010 ;;		_Event_HMI_LeftButton
 10011 ;;		_Event_HMI_RightButton
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           	psect	text51
 10016  014C12                     __ptext51:
 10017                           	opt stack 0
 10018  014C12                     _HMI_SetBar:
 10019                           	opt stack 15
 10020                           
 10021                           ; BSR set to: 1
 10022                           ;incstack = 0
 10023                           ;HMI_SetBar@pValue stored from wreg
 10024  014C12  0100               	movlb	0	; () banked
 10025  014C14  6FB8               	movwf	HMI_SetBar@pValue& (0+255),b
 10026                           
 10027                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 10028  014C16  C0B8  F131         	movff	HMI_SetBar@pValue,_HMIBoard+7
 10029  014C1A  0012               	return		;funcret
 10030  014C1C                     __end_of_HMI_SetBar:
 10031                           	opt stack 0
 10032                           tosu	equ	0xFFF
 10033                           tosh	equ	0xFFE
 10034                           tosl	equ	0xFFD
 10035                           pclath	equ	0xFFA
 10036                           tblptru	equ	0xFF8
 10037                           tblptrh	equ	0xFF7
 10038                           tblptrl	equ	0xFF6
 10039                           tablat	equ	0xFF5
 10040                           prodh	equ	0xFF4
 10041                           prodl	equ	0xFF3
 10042                           postinc0	equ	0xFEE
 10043                           plusw0	equ	0xFEB
 10044                           wreg	equ	0xFE8
 10045                           indf1	equ	0xFE7
 10046                           postdec1	equ	0xFE5
 10047                           fsr1h	equ	0xFE2
 10048                           fsr1l	equ	0xFE1
 10049                           indf2	equ	0xFDF
 10050                           postinc2	equ	0xFDE
 10051                           postdec2	equ	0xFDD
 10052                           plusw2	equ	0xFDB
 10053                           fsr2h	equ	0xFDA
 10054                           fsr2l	equ	0xFD9
 10055                           status	equ	0xFD8
 10056                           
 10057 ;; *************** function _HMI_GetBar *****************
 10058 ;; Defined at:
 10059 ;;		line 209 in file "HMI.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;		None
 10062 ;; Auto vars:     Size  Location     Type
 10063 ;;		None
 10064 ;; Return value:  Size  Location     Type
 10065 ;;                  1    wreg      unsigned char 
 10066 ;; Registers used:
 10067 ;;		wreg, status,2
 10068 ;; Tracked objects:
 10069 ;;		On entry : 0/0
 10070 ;;		On exit  : 0/0
 10071 ;;		Unchanged: 0/0
 10072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10076 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10077 ;;Total ram usage:        0 bytes
 10078 ;; Hardware stack levels used:    1
 10079 ;; Hardware stack levels required when called:    7
 10080 ;; This function calls:
 10081 ;;		Nothing
 10082 ;; This function is called by:
 10083 ;;		_Event_DIPSwitch
 10084 ;;		_Event_HMI_DIPSwitch
 10085 ;; This function uses a non-reentrant model
 10086 ;;
 10087                           
 10088                           	psect	text52
 10089  014C36                     __ptext52:
 10090                           	opt stack 0
 10091  014C36                     _HMI_GetBar:
 10092                           	opt stack 15
 10093                           
 10094                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 10095                           
 10096                           ;incstack = 0
 10097  014C36  0101               	movlb	1	; () banked
 10098  014C38  5131               	movf	(_HMIBoard+7)& (0+255),w,b
 10099  014C3A  0012               	return	
 10100  014C3C                     __end_of_HMI_GetBar:
 10101                           	opt stack 0
 10102                           tosu	equ	0xFFF
 10103                           tosh	equ	0xFFE
 10104                           tosl	equ	0xFFD
 10105                           pclath	equ	0xFFA
 10106                           tblptru	equ	0xFF8
 10107                           tblptrh	equ	0xFF7
 10108                           tblptrl	equ	0xFF6
 10109                           tablat	equ	0xFF5
 10110                           prodh	equ	0xFF4
 10111                           prodl	equ	0xFF3
 10112                           postinc0	equ	0xFEE
 10113                           plusw0	equ	0xFEB
 10114                           wreg	equ	0xFE8
 10115                           indf1	equ	0xFE7
 10116                           postdec1	equ	0xFE5
 10117                           fsr1h	equ	0xFE2
 10118                           fsr1l	equ	0xFE1
 10119                           indf2	equ	0xFDF
 10120                           postinc2	equ	0xFDE
 10121                           postdec2	equ	0xFDD
 10122                           plusw2	equ	0xFDB
 10123                           fsr2h	equ	0xFDA
 10124                           fsr2l	equ	0xFD9
 10125                           status	equ	0xFD8
 10126                           
 10127 ;; *************** function _Console_SetForecolour *****************
 10128 ;; Defined at:
 10129 ;;		line 286 in file "Library/Console.c"
 10130 ;; Parameters:    Size  Location     Type
 10131 ;;  pColour         2    0[BANK0 ] unsigned short 
 10132 ;; Auto vars:     Size  Location     Type
 10133 ;;		None
 10134 ;; Return value:  Size  Location     Type
 10135 ;;                  1    wreg      void 
 10136 ;; Registers used:
 10137 ;;		None
 10138 ;; Tracked objects:
 10139 ;;		On entry : 0/0
 10140 ;;		On exit  : 0/0
 10141 ;;		Unchanged: 0/0
 10142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10143 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10146 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10147 ;;Total ram usage:        2 bytes
 10148 ;; Hardware stack levels used:    1
 10149 ;; Hardware stack levels required when called:    7
 10150 ;; This function calls:
 10151 ;;		Nothing
 10152 ;; This function is called by:
 10153 ;;		_displaySID
 10154 ;;		_displayMode
 10155 ;;		_continuousMode
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           	psect	text53
 10160  014C1C                     __ptext53:
 10161                           	opt stack 0
 10162  014C1C                     _Console_SetForecolour:
 10163                           	opt stack 19
 10164                           
 10165                           ;Console.c: 289: gForecolour = pColour;
 10166                           
 10167                           ; BSR set to: 1
 10168                           ;incstack = 0
 10169  014C1C  C0B8  F0FD         	movff	Console_SetForecolour@pColour,_gForecolour
 10170  014C20  C0B9  F0FE         	movff	Console_SetForecolour@pColour+1,_gForecolour+1
 10171  014C24  0012               	return		;funcret
 10172  014C26                     __end_of_Console_SetForecolour:
 10173                           	opt stack 0
 10174                           tosu	equ	0xFFF
 10175                           tosh	equ	0xFFE
 10176                           tosl	equ	0xFFD
 10177                           pclath	equ	0xFFA
 10178                           tblptru	equ	0xFF8
 10179                           tblptrh	equ	0xFF7
 10180                           tblptrl	equ	0xFF6
 10181                           tablat	equ	0xFF5
 10182                           prodh	equ	0xFF4
 10183                           prodl	equ	0xFF3
 10184                           postinc0	equ	0xFEE
 10185                           plusw0	equ	0xFEB
 10186                           wreg	equ	0xFE8
 10187                           indf1	equ	0xFE7
 10188                           postdec1	equ	0xFE5
 10189                           fsr1h	equ	0xFE2
 10190                           fsr1l	equ	0xFE1
 10191                           indf2	equ	0xFDF
 10192                           postinc2	equ	0xFDE
 10193                           postdec2	equ	0xFDD
 10194                           plusw2	equ	0xFDB
 10195                           fsr2h	equ	0xFDA
 10196                           fsr2l	equ	0xFD9
 10197                           status	equ	0xFD8
 10198                           
 10199 ;; *************** function _Console_Render *****************
 10200 ;; Defined at:
 10201 ;;		line 377 in file "Library/Console.c"
 10202 ;; Parameters:    Size  Location     Type
 10203 ;;		None
 10204 ;; Auto vars:     Size  Location     Type
 10205 ;;  lCursor         4   38[BANK0 ] struct Point
 10206 ;;  y               1   43[BANK0 ] unsigned char 
 10207 ;;  x               1   42[BANK0 ] unsigned char 
 10208 ;;  temp            1   37[BANK0 ] unsigned char 
 10209 ;;  Temp            2    0        unsigned short 
 10210 ;; Return value:  Size  Location     Type
 10211 ;;                  1    wreg      void 
 10212 ;; Registers used:
 10213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10214 ;; Tracked objects:
 10215 ;;		On entry : 0/0
 10216 ;;		On exit  : 0/0
 10217 ;;		Unchanged: 0/0
 10218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10220 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10222 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10223 ;;Total ram usage:        9 bytes
 10224 ;; Hardware stack levels used:    1
 10225 ;; Hardware stack levels required when called:   11
 10226 ;; This function calls:
 10227 ;;		_Console_MakeField
 10228 ;;		_LCD_DrawField
 10229 ;;		_LCD_FillRectangle
 10230 ;; This function is called by:
 10231 ;;		_displayText
 10232 ;;		_continuousMode
 10233 ;;		_nullMode
 10234 ;; This function uses a non-reentrant model
 10235 ;;
 10236                           
 10237                           	psect	text54
 10238  011358                     __ptext54:
 10239                           	opt stack 0
 10240  011358                     _Console_Render:
 10241                           	opt stack 16
 10242                           
 10243                           ;Console.c: 379: Colour Temp;
 10244                           ;Console.c: 380: if (change)
 10245                           
 10246                           ;incstack = 0
 10247  011358  0100               	movlb	0	; () banked
 10248  01135A  51FF               	movf	_change& (0+255),w,b
 10249  01135C  B4D8               	btfsc	status,2,c
 10250  01135E  0012               	return	
 10251                           
 10252                           ; BSR set to: 0
 10253                           ;Console.c: 381: {
 10254                           ;Console.c: 382: UINT8 x, y, temp;
 10255                           ;Console.c: 383: Point lCursor = {6,6};
 10256  011360  C1CF  F0DE         	movff	Console_Render@F6956,Console_Render@lCursor
 10257  011364  C1D0  F0DF         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10258  011368  C1D1  F0E0         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10259  01136C  C1D2  F0E1         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;Console.c: 385: if (clearall)
 10263  011370  0100               	movlb	0	; () banked
 10264  011372  517C               	movf	_clearall& (0+255),w,b
 10265  011374  B4D8               	btfsc	status,2,c
 10266  011376  D005               	goto	l1056
 10267                           
 10268                           ; BSR set to: 0
 10269                           ;Console.c: 386: {
 10270                           ;Console.c: 389: temp = lBufferY;
 10271  011378  C07A  F0DD         	movff	_lBufferY,Console_Render@temp
 10272                           
 10273                           ; BSR set to: 0
 10274                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10275  01137C  0E0F               	movlw	15
 10276  01137E  0100               	movlb	0	; () banked
 10277  011380  6F7A               	movwf	_lBufferY& (0+255),b
 10278  011382                     l1056:
 10279                           
 10280                           ; BSR set to: 0
 10281                           ;Console.c: 391: }
 10282                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10283  011382  0E00               	movlw	0
 10284  011384  0100               	movlb	0	; () banked
 10285  011386  6FE3               	movwf	Console_Render@y& (0+255),b
 10286  011388  D0DF               	goto	l1057
 10287  01138A                     
 10288                           ; BSR set to: 0
 10289                           ;Console.c: 394: {
 10290                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10291                           
 10292                           ; BSR set to: 0
 10293  01138A  0100               	movlb	0	; () banked
 10294  01138C  51E3               	movf	Console_Render@y& (0+255),w,b
 10295  01138E  0D02               	mullw	2
 10296  011390  0E00               	movlw	low _lCBuffer
 10297  011392  24F3               	addwf	prodl,w,c
 10298  011394  6ED9               	movwf	fsr2l,c
 10299  011396  0E01               	movlw	high _lCBuffer
 10300  011398  20F4               	addwfc	prodh,w,c
 10301  01139A  6EDA               	movwf	fsr2h,c
 10302  01139C  CFDE F0FD          	movff	postinc2,_gForecolour
 10303  0113A0  CFDD F0FE          	movff	postdec2,_gForecolour+1
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10307  0113A4  0E00               	movlw	0
 10308  0113A6  0100               	movlb	0	; () banked
 10309  0113A8  6FE2               	movwf	Console_Render@x& (0+255),b
 10310  0113AA                     l11619:
 10311                           
 10312                           ; BSR set to: 0
 10313  0113AA  0E13               	movlw	19
 10314  0113AC  0100               	movlb	0	; () banked
 10315  0113AE  65E2               	cpfsgt	Console_Render@x& (0+255),b
 10316  0113B0  D001               	goto	l1059
 10317  0113B2  D0BE               	goto	u8050
 10318  0113B4                     l1059:
 10319                           
 10320                           ; BSR set to: 0
 10321                           ;Console.c: 397: {
 10322                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10323                           
 10324                           ; BSR set to: 0
 10325  0113B4  0100               	movlb	0	; () banked
 10326  0113B6  51E3               	movf	Console_Render@y& (0+255),w,b
 10327  0113B8  0D14               	mullw	20
 10328  0113BA  0E46               	movlw	low _lBuffer
 10329  0113BC  0100               	movlb	0	; () banked
 10330  0113BE  6FDB               	movwf	??_Console_Render& (0+255),b
 10331  0113C0  0E02               	movlw	high _lBuffer
 10332  0113C2  0100               	movlb	0	; () banked
 10333  0113C4  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 10334  0113C6  50F3               	movf	prodl,w,c
 10335  0113C8  0100               	movlb	0	; () banked
 10336  0113CA  27DB               	addwf	??_Console_Render& (0+255),f,b
 10337  0113CC  50F4               	movf	prodh,w,c
 10338  0113CE  0100               	movlb	0	; () banked
 10339  0113D0  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10340  0113D2  0100               	movlb	0	; () banked
 10341  0113D4  51E2               	movf	Console_Render@x& (0+255),w,b
 10342  0113D6  0D01               	mullw	1
 10343  0113D8  50F3               	movf	prodl,w,c
 10344  0113DA  0100               	movlb	0	; () banked
 10345  0113DC  25DB               	addwf	??_Console_Render& (0+255),w,b
 10346  0113DE  6ED9               	movwf	fsr2l,c
 10347  0113E0  50F4               	movf	prodh,w,c
 10348  0113E2  0100               	movlb	0	; () banked
 10349  0113E4  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10350  0113E6  6EDA               	movwf	fsr2h,c
 10351  0113E8  AEDF               	btfss	indf2,7,c
 10352  0113EA  D09A               	goto	l1063
 10353                           
 10354                           ; BSR set to: 0
 10355                           ;Console.c: 399: {
 10356                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10357  0113EC  0100               	movlb	0	; () banked
 10358  0113EE  51E3               	movf	Console_Render@y& (0+255),w,b
 10359  0113F0  0D14               	mullw	20
 10360  0113F2  0E46               	movlw	low _lBuffer
 10361  0113F4  0100               	movlb	0	; () banked
 10362  0113F6  6FDB               	movwf	??_Console_Render& (0+255),b
 10363  0113F8  0E02               	movlw	high _lBuffer
 10364  0113FA  0100               	movlb	0	; () banked
 10365  0113FC  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 10366  0113FE  50F3               	movf	prodl,w,c
 10367  011400  0100               	movlb	0	; () banked
 10368  011402  27DB               	addwf	??_Console_Render& (0+255),f,b
 10369  011404  50F4               	movf	prodh,w,c
 10370  011406  0100               	movlb	0	; () banked
 10371  011408  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10372  01140A  0100               	movlb	0	; () banked
 10373  01140C  51E2               	movf	Console_Render@x& (0+255),w,b
 10374  01140E  0D01               	mullw	1
 10375  011410  50F3               	movf	prodl,w,c
 10376  011412  0100               	movlb	0	; () banked
 10377  011414  25DB               	addwf	??_Console_Render& (0+255),w,b
 10378  011416  6ED9               	movwf	fsr2l,c
 10379  011418  50F4               	movf	prodh,w,c
 10380  01141A  0100               	movlb	0	; () banked
 10381  01141C  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10382  01141E  6EDA               	movwf	fsr2h,c
 10383  011420  0E7F               	movlw	127
 10384  011422  16DF               	andwf	indf2,f,c
 10385                           
 10386                           ;Console.c: 401: if (lBuffer[y][x])
 10387  011424  0100               	movlb	0	; () banked
 10388  011426  51E3               	movf	Console_Render@y& (0+255),w,b
 10389  011428  0D14               	mullw	20
 10390  01142A  0E46               	movlw	low _lBuffer
 10391  01142C  0100               	movlb	0	; () banked
 10392  01142E  6FDB               	movwf	??_Console_Render& (0+255),b
 10393  011430  0E02               	movlw	high _lBuffer
 10394  011432  0100               	movlb	0	; () banked
 10395  011434  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 10396  011436  50F3               	movf	prodl,w,c
 10397  011438  0100               	movlb	0	; () banked
 10398  01143A  27DB               	addwf	??_Console_Render& (0+255),f,b
 10399  01143C  50F4               	movf	prodh,w,c
 10400  01143E  0100               	movlb	0	; () banked
 10401  011440  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10402  011442  0100               	movlb	0	; () banked
 10403  011444  51E2               	movf	Console_Render@x& (0+255),w,b
 10404  011446  0D01               	mullw	1
 10405  011448  50F3               	movf	prodl,w,c
 10406  01144A  0100               	movlb	0	; () banked
 10407  01144C  25DB               	addwf	??_Console_Render& (0+255),w,b
 10408  01144E  6ED9               	movwf	fsr2l,c
 10409  011450  50F4               	movf	prodh,w,c
 10410  011452  0100               	movlb	0	; () banked
 10411  011454  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10412  011456  6EDA               	movwf	fsr2h,c
 10413  011458  50DF               	movf	indf2,w,c
 10414  01145A  B4D8               	btfsc	status,2,c
 10415  01145C  D04A               	goto	l1062
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;Console.c: 402: {
 10419                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10420  01145E  C073  F0C1         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10421  011462  C074  F0C2         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10422  011466  C0DE  F0C3         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10423  01146A  C0DF  F0C4         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10424  01146E  C0E0  F0C5         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10425  011472  C0E1  F0C6         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10426  011476  C0F5  F0C7         	movff	_gCharSize,LCD_FillRectangle@pSize
 10427  01147A  C0F6  F0C8         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10428  01147E  C0F7  F0C9         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10429  011482  C0F8  F0CA         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10430  011486  ECA5  F09C         	call	_LCD_FillRectangle	;wreg free
 10431                           
 10432                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10433  01148A  0100               	movlb	0	; () banked
 10434  01148C  51E3               	movf	Console_Render@y& (0+255),w,b
 10435  01148E  0D14               	mullw	20
 10436  011490  0E46               	movlw	low _lBuffer
 10437  011492  0100               	movlb	0	; () banked
 10438  011494  6FDB               	movwf	??_Console_Render& (0+255),b
 10439  011496  0E02               	movlw	high _lBuffer
 10440  011498  0100               	movlb	0	; () banked
 10441  01149A  6FDC               	movwf	(??_Console_Render+1)& (0+255),b
 10442  01149C  50F3               	movf	prodl,w,c
 10443  01149E  0100               	movlb	0	; () banked
 10444  0114A0  27DB               	addwf	??_Console_Render& (0+255),f,b
 10445  0114A2  50F4               	movf	prodh,w,c
 10446  0114A4  0100               	movlb	0	; () banked
 10447  0114A6  23DC               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10448  0114A8  0100               	movlb	0	; () banked
 10449  0114AA  51E2               	movf	Console_Render@x& (0+255),w,b
 10450  0114AC  0D01               	mullw	1
 10451  0114AE  50F3               	movf	prodl,w,c
 10452  0114B0  0100               	movlb	0	; () banked
 10453  0114B2  25DB               	addwf	??_Console_Render& (0+255),w,b
 10454  0114B4  6ED9               	movwf	fsr2l,c
 10455  0114B6  50F4               	movf	prodh,w,c
 10456  0114B8  0100               	movlb	0	; () banked
 10457  0114BA  21DC               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10458  0114BC  6EDA               	movwf	fsr2h,c
 10459  0114BE  50DF               	movf	indf2,w,c
 10460  0114C0  EC9E  F093         	call	_Console_MakeField
 10461  0114C4  C0BD  F0CA         	movff	?_Console_MakeField,LCD_DrawField@pField
 10462  0114C8  C0BE  F0CB         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10463  0114CC  C0DE  F0CC         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10464  0114D0  C0DF  F0CD         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10465  0114D4  C0E0  F0CE         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10466  0114D8  C0E1  F0CF         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10467  0114DC  C0F5  F0D0         	movff	_gCharSize,LCD_DrawField@pSize
 10468  0114E0  C0F6  F0D1         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10469  0114E4  C0F7  F0D2         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10470  0114E8  C0F8  F0D3         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10471  0114EC  ECFE  F098         	call	_LCD_DrawField	;wreg free
 10472                           
 10473                           ;Console.c: 405: }
 10474  0114F0  D017               	goto	l1063
 10475  0114F2                     l1062:
 10476                           
 10477                           ;Console.c: 406: else
 10478                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10479  0114F2  0E00               	movlw	0
 10480  0114F4  0100               	movlb	0	; () banked
 10481  0114F6  6FC2               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10482  0114F8  0E00               	movlw	0
 10483  0114FA  6FC1               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10484  0114FC  C0DE  F0C3         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10485  011500  C0DF  F0C4         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10486  011504  C0E0  F0C5         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10487  011508  C0E1  F0C6         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10488  01150C  C0F5  F0C7         	movff	_gCharSize,LCD_FillRectangle@pSize
 10489  011510  C0F6  F0C8         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10490  011514  C0F7  F0C9         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10491  011518  C0F8  F0CA         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10492  01151C  ECA5  F09C         	call	_LCD_FillRectangle	;wreg free
 10493  011520                     l1063:
 10494                           
 10495                           ;Console.c: 408: }
 10496                           ;Console.c: 409: lCursor.x += (5 + 1);
 10497  011520  0E06               	movlw	6
 10498  011522  0100               	movlb	0	; () banked
 10499  011524  27DE               	addwf	Console_Render@lCursor& (0+255),f,b
 10500  011526  0E00               	movlw	0
 10501  011528  23DF               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10502                           
 10503                           ; BSR set to: 0
 10504  01152A  0100               	movlb	0	; () banked
 10505  01152C  2BE2               	incf	Console_Render@x& (0+255),f,b
 10506  01152E  D73D               	goto	l11619
 10507  011530                     u8050:
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;Console.c: 410: }
 10511                           ;Console.c: 411: lCursor.y += (7 + 1);
 10512                           
 10513                           ; BSR set to: 0
 10514  011530  0E08               	movlw	8
 10515  011532  0100               	movlb	0	; () banked
 10516  011534  27E0               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10517  011536  0E00               	movlw	0
 10518  011538  23E1               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;Console.c: 412: lCursor.x = 6;
 10522  01153A  0E00               	movlw	0
 10523  01153C  0100               	movlb	0	; () banked
 10524  01153E  6FDF               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10525  011540  0E06               	movlw	6
 10526  011542  6FDE               	movwf	Console_Render@lCursor& (0+255),b
 10527                           
 10528                           ; BSR set to: 0
 10529  011544  0100               	movlb	0	; () banked
 10530  011546  2BE3               	incf	Console_Render@y& (0+255),f,b
 10531  011548                     l1057:
 10532                           
 10533                           ; BSR set to: 0
 10534                           
 10535                           ; BSR set to: 0
 10536  011548  0100               	movlb	0	; () banked
 10537  01154A  51E3               	movf	Console_Render@y& (0+255),w,b
 10538  01154C  0100               	movlb	0	; () banked
 10539  01154E  5D7A               	subwf	_lBufferY& (0+255),w,b
 10540  011550  B0D8               	btfsc	status,0,c
 10541  011552  D71B               	goto	l1058
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;Console.c: 413: }
 10545                           ;Console.c: 415: if (clearall)
 10546                           
 10547                           ; BSR set to: 0
 10548  011554  0100               	movlb	0	; () banked
 10549  011556  517C               	movf	_clearall& (0+255),w,b
 10550  011558  B4D8               	btfsc	status,2,c
 10551  01155A  0012               	return	
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;Console.c: 416: {
 10555                           ;Console.c: 417: clearall = 0;
 10556  01155C  0E00               	movlw	0
 10557  01155E  0100               	movlb	0	; () banked
 10558  011560  6F7C               	movwf	_clearall& (0+255),b
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;Console.c: 418: lBufferY = temp;
 10562  011562  C0DD  F07A         	movff	Console_Render@temp,_lBufferY
 10563                           
 10564                           ; BSR set to: 0
 10565  011566  0012               	return	
 10566  011568                     __end_of_Console_Render:
 10567                           	opt stack 0
 10568                           tosu	equ	0xFFF
 10569                           tosh	equ	0xFFE
 10570                           tosl	equ	0xFFD
 10571                           pclath	equ	0xFFA
 10572                           tblptru	equ	0xFF8
 10573                           tblptrh	equ	0xFF7
 10574                           tblptrl	equ	0xFF6
 10575                           tablat	equ	0xFF5
 10576                           prodh	equ	0xFF4
 10577                           prodl	equ	0xFF3
 10578                           postinc0	equ	0xFEE
 10579                           plusw0	equ	0xFEB
 10580                           wreg	equ	0xFE8
 10581                           indf1	equ	0xFE7
 10582                           postdec1	equ	0xFE5
 10583                           fsr1h	equ	0xFE2
 10584                           fsr1l	equ	0xFE1
 10585                           indf2	equ	0xFDF
 10586                           postinc2	equ	0xFDE
 10587                           postdec2	equ	0xFDD
 10588                           plusw2	equ	0xFDB
 10589                           fsr2h	equ	0xFDA
 10590                           fsr2l	equ	0xFD9
 10591                           status	equ	0xFD8
 10592                           
 10593 ;; *************** function _LCD_FillRectangle *****************
 10594 ;; Defined at:
 10595 ;;		line 318 in file "Library/LCD.c"
 10596 ;; Parameters:    Size  Location     Type
 10597 ;;  pColour         2    9[BANK0 ] unsigned short 
 10598 ;;  pPoint          4   11[BANK0 ] struct Point
 10599 ;;  pSize           4   15[BANK0 ] struct Point
 10600 ;; Auto vars:     Size  Location     Type
 10601 ;;  j               1   22[BANK0 ] unsigned char 
 10602 ;;  i               1   21[BANK0 ] unsigned char 
 10603 ;; Return value:  Size  Location     Type
 10604 ;;                  1    wreg      void 
 10605 ;; Registers used:
 10606 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10607 ;; Tracked objects:
 10608 ;;		On entry : 0/0
 10609 ;;		On exit  : 0/0
 10610 ;;		Unchanged: 0/0
 10611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10612 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10613 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10614 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10615 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10616 ;;Total ram usage:       14 bytes
 10617 ;; Hardware stack levels used:    1
 10618 ;; Hardware stack levels required when called:   10
 10619 ;; This function calls:
 10620 ;;		_LCD_Word_Write
 10621 ;;		_Set_Addr_Window
 10622 ;; This function is called by:
 10623 ;;		_Console_Render
 10624 ;;		_Console_ClearLine
 10625 ;; This function uses a non-reentrant model
 10626 ;;
 10627                           
 10628                           	psect	text55
 10629  01394A                     __ptext55:
 10630                           	opt stack 0
 10631  01394A                     _LCD_FillRectangle:
 10632                           	opt stack 16
 10633                           
 10634                           ;LCD.c: 320: UINT8 i = 0x00;
 10635                           
 10636                           ; BSR set to: 0
 10637                           ;incstack = 0
 10638  01394A  0E00               	movlw	0
 10639  01394C  0100               	movlb	0	; () banked
 10640  01394E  6FCD               	movwf	LCD_FillRectangle@i& (0+255),b
 10641                           
 10642                           ;LCD.c: 321: UINT8 j = 0x00;
 10643  013950  0E00               	movlw	0
 10644  013952  0100               	movlb	0	; () banked
 10645  013954  6FCE               	movwf	LCD_FillRectangle@j& (0+255),b
 10646                           
 10647                           ; BSR set to: 0
 10648                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10649  013956  C0C5  F0BD         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10650  01395A  0100               	movlb	0	; () banked
 10651  01395C  51C3               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10652  01395E  0100               	movlb	0	; () banked
 10653  013960  25C7               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10654  013962  0100               	movlb	0	; () banked
 10655  013964  6FCB               	movwf	??_LCD_FillRectangle& (0+255),b
 10656  013966  0100               	movlb	0	; () banked
 10657  013968  05CB               	decf	??_LCD_FillRectangle& (0+255),w,b
 10658  01396A  0100               	movlb	0	; () banked
 10659  01396C  6FBE               	movwf	Set_Addr_Window@xe& (0+255),b
 10660  01396E  0100               	movlb	0	; () banked
 10661  013970  51C5               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10662  013972  0100               	movlb	0	; () banked
 10663  013974  25C9               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10664  013976  0100               	movlb	0	; () banked
 10665  013978  6FCC               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10666  01397A  0100               	movlb	0	; () banked
 10667  01397C  05CC               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10668  01397E  0100               	movlb	0	; () banked
 10669  013980  6FBF               	movwf	Set_Addr_Window@ye& (0+255),b
 10670  013982  0100               	movlb	0	; () banked
 10671  013984  51C3               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10672  013986  EC5B  F097         	call	_Set_Addr_Window
 10673                           
 10674                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10675  01398A  C0C9  F0CE         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10676  01398E                     l11019:
 10677  01398E  0100               	movlb	0	; () banked
 10678  013990  51CE               	movf	LCD_FillRectangle@j& (0+255),w,b
 10679  013992  0100               	movlb	0	; () banked
 10680  013994  B4D8               	btfsc	status,2,c
 10681  013996  0012               	return	
 10682                           
 10683                           ; BSR set to: 0
 10684                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10685                           
 10686                           ; BSR set to: 0
 10687  013998  C0C7  F0CD         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10688  01399C                     l11023:
 10689                           
 10690                           ; BSR set to: 0
 10691  01399C  0100               	movlb	0	; () banked
 10692  01399E  51CD               	movf	LCD_FillRectangle@i& (0+255),w,b
 10693  0139A0  0100               	movlb	0	; () banked
 10694  0139A2  B4D8               	btfsc	status,2,c
 10695  0139A4  D009               	goto	u7530
 10696                           
 10697                           ; BSR set to: 0
 10698                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10699                           
 10700                           ; BSR set to: 0
 10701                           
 10702                           ; BSR set to: 0
 10703  0139A6  C0C1  F0BD         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10704  0139AA  C0C2  F0BE         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10705  0139AE  ECD2  F0A4         	call	_LCD_Word_Write	;wreg free
 10706  0139B2  0100               	movlb	0	; () banked
 10707  0139B4  07CD               	decf	LCD_FillRectangle@i& (0+255),f,b
 10708  0139B6  D7F2               	goto	l11023
 10709  0139B8                     u7530:
 10710                           
 10711                           ; BSR set to: 0
 10712                           
 10713                           ; BSR set to: 0
 10714  0139B8  0100               	movlb	0	; () banked
 10715  0139BA  07CE               	decf	LCD_FillRectangle@j& (0+255),f,b
 10716  0139BC  D7E8               	goto	l11019
 10717  0139BE                     __end_of_LCD_FillRectangle:
 10718                           	opt stack 0
 10719                           tosu	equ	0xFFF
 10720                           tosh	equ	0xFFE
 10721                           tosl	equ	0xFFD
 10722                           pclath	equ	0xFFA
 10723                           tblptru	equ	0xFF8
 10724                           tblptrh	equ	0xFF7
 10725                           tblptrl	equ	0xFF6
 10726                           tablat	equ	0xFF5
 10727                           prodh	equ	0xFF4
 10728                           prodl	equ	0xFF3
 10729                           postinc0	equ	0xFEE
 10730                           plusw0	equ	0xFEB
 10731                           wreg	equ	0xFE8
 10732                           indf1	equ	0xFE7
 10733                           postdec1	equ	0xFE5
 10734                           fsr1h	equ	0xFE2
 10735                           fsr1l	equ	0xFE1
 10736                           indf2	equ	0xFDF
 10737                           postinc2	equ	0xFDE
 10738                           postdec2	equ	0xFDD
 10739                           plusw2	equ	0xFDB
 10740                           fsr2h	equ	0xFDA
 10741                           fsr2l	equ	0xFD9
 10742                           status	equ	0xFD8
 10743                           
 10744 ;; *************** function _LCD_DrawField *****************
 10745 ;; Defined at:
 10746 ;;		line 393 in file "Library/LCD.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10749 ;;		 -> Console_MakeField@Fill(70), 
 10750 ;;  pPoint          4   20[BANK0 ] struct Point
 10751 ;;  pSize           4   24[BANK0 ] struct Point
 10752 ;; Auto vars:     Size  Location     Type
 10753 ;;  count           2   30[BANK0 ] unsigned short 
 10754 ;;  i               1   34[BANK0 ] unsigned char 
 10755 ;;  ymax            1   33[BANK0 ] unsigned char 
 10756 ;;  xmax            1   32[BANK0 ] unsigned char 
 10757 ;; Return value:  Size  Location     Type
 10758 ;;                  1    wreg      void 
 10759 ;; Registers used:
 10760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10766 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10767 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10768 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10769 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10770 ;;Total ram usage:       17 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:   10
 10773 ;; This function calls:
 10774 ;;		_LCD_Word_Write
 10775 ;;		_Set_Addr_Window
 10776 ;;		___wmul
 10777 ;; This function is called by:
 10778 ;;		_Console_Render
 10779 ;; This function uses a non-reentrant model
 10780 ;;
 10781                           
 10782                           	psect	text56
 10783  0131FC                     __ptext56:
 10784                           	opt stack 0
 10785  0131FC                     _LCD_DrawField:
 10786                           	opt stack 16
 10787                           
 10788                           ;LCD.c: 396: UINT8 i = 0x00;
 10789                           
 10790                           ; BSR set to: 0
 10791                           ;incstack = 0
 10792  0131FC  0E00               	movlw	0
 10793  0131FE  0100               	movlb	0	; () banked
 10794  013200  6FDA               	movwf	LCD_DrawField@i& (0+255),b
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10798  013202  0100               	movlb	0	; () banked
 10799  013204  51CC               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10800  013206  0100               	movlb	0	; () banked
 10801  013208  25D0               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10802  01320A  0100               	movlb	0	; () banked
 10803  01320C  6FD8               	movwf	LCD_DrawField@xmax& (0+255),b
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10807  01320E  0100               	movlb	0	; () banked
 10808  013210  51CE               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10809  013212  0100               	movlb	0	; () banked
 10810  013214  25D2               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10811  013216  0100               	movlb	0	; () banked
 10812  013218  6FD9               	movwf	LCD_DrawField@ymax& (0+255),b
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10816  01321A  C0D2  F0B8         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10817  01321E  C0D3  F0B9         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10818  013222  C0D0  F0BA         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10819  013226  C0D1  F0BB         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10820  01322A  EC12  F0A3         	call	___wmul	;wreg free
 10821  01322E  C0B8  F0D6         	movff	?___wmul,LCD_DrawField@count
 10822  013232  C0B9  F0D7         	movff	?___wmul+1,LCD_DrawField@count+1
 10823                           
 10824                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10825  013236  C0CE  F0BD         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10826  01323A  0100               	movlb	0	; () banked
 10827  01323C  05D8               	decf	LCD_DrawField@xmax& (0+255),w,b
 10828  01323E  0100               	movlb	0	; () banked
 10829  013240  6FBE               	movwf	Set_Addr_Window@xe& (0+255),b
 10830  013242  0100               	movlb	0	; () banked
 10831  013244  05D9               	decf	LCD_DrawField@ymax& (0+255),w,b
 10832  013246  0100               	movlb	0	; () banked
 10833  013248  6FBF               	movwf	Set_Addr_Window@ye& (0+255),b
 10834  01324A  0100               	movlb	0	; () banked
 10835  01324C  51CC               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10836  01324E  EC5B  F097         	call	_Set_Addr_Window
 10837                           
 10838                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10839  013252  0E00               	movlw	0
 10840  013254  0100               	movlb	0	; () banked
 10841  013256  6FDA               	movwf	LCD_DrawField@i& (0+255),b
 10842  013258  D013               	goto	l183
 10843  01325A                     
 10844                           ; BSR set to: 0
 10845                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10846                           
 10847                           ; BSR set to: 0
 10848  01325A  0100               	movlb	0	; () banked
 10849  01325C  51DA               	movf	LCD_DrawField@i& (0+255),w,b
 10850  01325E  0D02               	mullw	2
 10851  013260  50F3               	movf	prodl,w,c
 10852  013262  0100               	movlb	0	; () banked
 10853  013264  25CA               	addwf	LCD_DrawField@pField& (0+255),w,b
 10854  013266  6ED9               	movwf	fsr2l,c
 10855  013268  50F4               	movf	prodh,w,c
 10856  01326A  0100               	movlb	0	; () banked
 10857  01326C  21CB               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10858  01326E  6EDA               	movwf	fsr2h,c
 10859  013270  CFDE F0BD          	movff	postinc2,LCD_Word_Write@value
 10860  013274  CFDD F0BE          	movff	postdec2,LCD_Word_Write@value+1
 10861  013278  ECD2  F0A4         	call	_LCD_Word_Write	;wreg free
 10862  01327C  0100               	movlb	0	; () banked
 10863  01327E  2BDA               	incf	LCD_DrawField@i& (0+255),f,b
 10864  013280                     l183:
 10865                           
 10866                           ; BSR set to: 0
 10867                           
 10868                           ; BSR set to: 0
 10869  013280  0100               	movlb	0	; () banked
 10870  013282  51DA               	movf	LCD_DrawField@i& (0+255),w,b
 10871  013284  0100               	movlb	0	; () banked
 10872  013286  6FD4               	movwf	??_LCD_DrawField& (0+255),b
 10873  013288  6BD5               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10874  01328A  0100               	movlb	0	; () banked
 10875  01328C  51D6               	movf	LCD_DrawField@count& (0+255),w,b
 10876  01328E  0100               	movlb	0	; () banked
 10877  013290  5DD4               	subwf	??_LCD_DrawField& (0+255),w,b
 10878  013292  0100               	movlb	0	; () banked
 10879  013294  51D7               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10880  013296  0100               	movlb	0	; () banked
 10881  013298  59D5               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10882  01329A  B0D8               	btfsc	status,0,c
 10883  01329C  0012               	return	
 10884  01329E  D7DD               	goto	l184
 10885  0132A0                     __end_of_LCD_DrawField:
 10886                           	opt stack 0
 10887                           tosu	equ	0xFFF
 10888                           tosh	equ	0xFFE
 10889                           tosl	equ	0xFFD
 10890                           pclath	equ	0xFFA
 10891                           tblptru	equ	0xFF8
 10892                           tblptrh	equ	0xFF7
 10893                           tblptrl	equ	0xFF6
 10894                           tablat	equ	0xFF5
 10895                           prodh	equ	0xFF4
 10896                           prodl	equ	0xFF3
 10897                           postinc0	equ	0xFEE
 10898                           plusw0	equ	0xFEB
 10899                           wreg	equ	0xFE8
 10900                           indf1	equ	0xFE7
 10901                           postdec1	equ	0xFE5
 10902                           fsr1h	equ	0xFE2
 10903                           fsr1l	equ	0xFE1
 10904                           indf2	equ	0xFDF
 10905                           postinc2	equ	0xFDE
 10906                           postdec2	equ	0xFDD
 10907                           plusw2	equ	0xFDB
 10908                           fsr2h	equ	0xFDA
 10909                           fsr2l	equ	0xFD9
 10910                           status	equ	0xFD8
 10911                           
 10912 ;; *************** function ___wmul *****************
 10913 ;; Defined at:
 10914 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10915 ;; Parameters:    Size  Location     Type
 10916 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10917 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10918 ;; Auto vars:     Size  Location     Type
 10919 ;;  product         2    4[BANK0 ] unsigned int 
 10920 ;; Return value:  Size  Location     Type
 10921 ;;                  2    0[BANK0 ] unsigned int 
 10922 ;; Registers used:
 10923 ;;		wreg, status,2, status,0, prodl, prodh
 10924 ;; Tracked objects:
 10925 ;;		On entry : 0/0
 10926 ;;		On exit  : 0/0
 10927 ;;		Unchanged: 0/0
 10928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10929 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10930 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10932 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10933 ;;Total ram usage:        6 bytes
 10934 ;; Hardware stack levels used:    1
 10935 ;; Hardware stack levels required when called:    7
 10936 ;; This function calls:
 10937 ;;		Nothing
 10938 ;; This function is called by:
 10939 ;;		_LCD_DrawField
 10940 ;; This function uses a non-reentrant model
 10941 ;;
 10942                           
 10943                           	psect	text57
 10944  014624                     __ptext57:
 10945                           	opt stack 0
 10946  014624                     ___wmul:
 10947                           	opt stack 18
 10948                           
 10949                           ; BSR set to: 0
 10950                           ;incstack = 0
 10951  014624  0100               	movlb	0	; () banked
 10952  014626  51B8               	movf	___wmul@multiplier& (0+255),w,b
 10953  014628  0100               	movlb	0	; () banked
 10954  01462A  03BA               	mulwf	___wmul@multiplicand& (0+255),b
 10955  01462C  CFF3 F0BC          	movff	prodl,___wmul@product
 10956  014630  CFF4 F0BD          	movff	prodh,___wmul@product+1
 10957  014634  0100               	movlb	0	; () banked
 10958  014636  51B8               	movf	___wmul@multiplier& (0+255),w,b
 10959  014638  0100               	movlb	0	; () banked
 10960  01463A  03BB               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10961  01463C  50F3               	movf	prodl,w,c
 10962  01463E  0100               	movlb	0	; () banked
 10963  014640  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
 10964  014642  0100               	movlb	0	; () banked
 10965  014644  51B9               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10966  014646  0100               	movlb	0	; () banked
 10967  014648  03BA               	mulwf	___wmul@multiplicand& (0+255),b
 10968  01464A  50F3               	movf	prodl,w,c
 10969  01464C  0100               	movlb	0	; () banked
 10970  01464E  27BD               	addwf	(___wmul@product+1)& (0+255),f,b
 10971                           
 10972                           ; BSR set to: 0
 10973  014650  C0BC  F0B8         	movff	___wmul@product,?___wmul
 10974  014654  C0BD  F0B9         	movff	___wmul@product+1,?___wmul+1
 10975  014658  0012               	return	
 10976  01465A                     __end_of___wmul:
 10977                           	opt stack 0
 10978                           tosu	equ	0xFFF
 10979                           tosh	equ	0xFFE
 10980                           tosl	equ	0xFFD
 10981                           pclath	equ	0xFFA
 10982                           tblptru	equ	0xFF8
 10983                           tblptrh	equ	0xFF7
 10984                           tblptrl	equ	0xFF6
 10985                           tablat	equ	0xFF5
 10986                           prodh	equ	0xFF4
 10987                           prodl	equ	0xFF3
 10988                           postinc0	equ	0xFEE
 10989                           plusw0	equ	0xFEB
 10990                           wreg	equ	0xFE8
 10991                           indf1	equ	0xFE7
 10992                           postdec1	equ	0xFE5
 10993                           fsr1h	equ	0xFE2
 10994                           fsr1l	equ	0xFE1
 10995                           indf2	equ	0xFDF
 10996                           postinc2	equ	0xFDE
 10997                           postdec2	equ	0xFDD
 10998                           plusw2	equ	0xFDB
 10999                           fsr2h	equ	0xFDA
 11000                           fsr2l	equ	0xFD9
 11001                           status	equ	0xFD8
 11002                           
 11003 ;; *************** function _Console_MakeField *****************
 11004 ;; Defined at:
 11005 ;;		line 435 in file "Library/Console.c"
 11006 ;; Parameters:    Size  Location     Type
 11007 ;;  pInput          1    wreg     unsigned char 
 11008 ;; Auto vars:     Size  Location     Type
 11009 ;;  pInput          1   11[BANK0 ] unsigned char 
 11010 ;;  y               1   17[BANK0 ] unsigned char 
 11011 ;;  x               1   16[BANK0 ] unsigned char 
 11012 ;;  Column          2   12[BANK0 ] PTR struct Byte
 11013 ;;		 -> Font5x7(480), 
 11014 ;;  Index           2    9[BANK0 ] unsigned short 
 11015 ;; Return value:  Size  Location     Type
 11016 ;;                  2    5[BANK0 ] PTR unsigned short 
 11017 ;; Registers used:
 11018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11019 ;; Tracked objects:
 11020 ;;		On entry : 0/0
 11021 ;;		On exit  : 0/0
 11022 ;;		Unchanged: 0/0
 11023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11024 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11025 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11026 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11027 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11028 ;;Total ram usage:       13 bytes
 11029 ;; Hardware stack levels used:    1
 11030 ;; Hardware stack levels required when called:    8
 11031 ;; This function calls:
 11032 ;;		_Byte_GetBit
 11033 ;; This function is called by:
 11034 ;;		_Console_Render
 11035 ;; This function uses a non-reentrant model
 11036 ;;
 11037                           
 11038                           	psect	text58
 11039  01273C                     __ptext58:
 11040                           	opt stack 0
 11041  01273C                     _Console_MakeField:
 11042                           	opt stack 18
 11043                           
 11044                           ; BSR set to: 0
 11045                           ;incstack = 0
 11046                           ;Console_MakeField@pInput stored from wreg
 11047  01273C  0100               	movlb	0	; () banked
 11048  01273E  6FC3               	movwf	Console_MakeField@pInput& (0+255),b
 11049                           
 11050                           ;Console.c: 437: static Colour Fill[7][5];
 11051                           ;Console.c: 438: pInput -= 32;
 11052  012740  0E20               	movlw	32
 11053  012742  0100               	movlb	0	; () banked
 11054  012744  5FC3               	subwf	Console_MakeField@pInput& (0+255),f,b
 11055                           
 11056                           ; BSR set to: 0
 11057                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 11058  012746  0100               	movlb	0	; () banked
 11059  012748  51C3               	movf	Console_MakeField@pInput& (0+255),w,b
 11060  01274A  0D05               	mullw	5
 11061  01274C  CFF3 F0C1          	movff	prodl,Console_MakeField@Index
 11062  012750  CFF4 F0C2          	movff	prodh,Console_MakeField@Index+1
 11063                           
 11064                           ; BSR set to: 0
 11065                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 11066  012754  0E7B               	movlw	low _Font5x7
 11067  012756  0100               	movlb	0	; () banked
 11068  012758  25C1               	addwf	Console_MakeField@Index& (0+255),w,b
 11069  01275A  0100               	movlb	0	; () banked
 11070  01275C  6FC4               	movwf	Console_MakeField@Column& (0+255),b
 11071  01275E  0EFD               	movlw	high _Font5x7
 11072  012760  0100               	movlb	0	; () banked
 11073  012762  21C2               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 11074  012764  0100               	movlb	0	; () banked
 11075  012766  6FC5               	movwf	(Console_MakeField@Column+1)& (0+255),b
 11076                           
 11077                           ; BSR set to: 0
 11078                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 11079  012768  0E00               	movlw	0
 11080  01276A  0100               	movlb	0	; () banked
 11081  01276C  6FC8               	movwf	Console_MakeField@x& (0+255),b
 11082  01276E                     l11145:
 11083                           
 11084                           ; BSR set to: 0
 11085  01276E  0E04               	movlw	4
 11086  012770  0100               	movlb	0	; () banked
 11087  012772  65C8               	cpfsgt	Console_MakeField@x& (0+255),b
 11088  012774  D001               	goto	l1077
 11089  012776  D043               	goto	u7680
 11090  012778                     l1077:
 11091                           
 11092                           ; BSR set to: 0
 11093                           ;Console.c: 444: {
 11094                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 11095                           
 11096                           ; BSR set to: 0
 11097  012778  0E00               	movlw	0
 11098  01277A  0100               	movlb	0	; () banked
 11099  01277C  6FC9               	movwf	Console_MakeField@y& (0+255),b
 11100  01277E                     l11151:
 11101                           
 11102                           ; BSR set to: 0
 11103  01277E  0E06               	movlw	6
 11104  012780  0100               	movlb	0	; () banked
 11105  012782  65C9               	cpfsgt	Console_MakeField@y& (0+255),b
 11106  012784  D001               	goto	l1079
 11107  012786  D035               	goto	u7670
 11108  012788                     l1079:
 11109                           
 11110                           ; BSR set to: 0
 11111                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 11112                           
 11113                           ; BSR set to: 0
 11114  012788  C0C4  F0B8         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 11115  01278C  C0C5  F0B9         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 11116  012790  C0C9  F0BA         	movff	Console_MakeField@y,Byte_GetBit@pBit
 11117  012794  EC48  F0A3         	call	_Byte_GetBit	;wreg free
 11118  012798  0900               	iorlw	0
 11119  01279A  A4D8               	btfss	status,2,c
 11120  01279C  D005               	goto	l1082
 11121  01279E  C073  F0C6         	movff	_gBackcolour,_Console_MakeField$10974
 11122  0127A2  C074  F0C7         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 11123  0127A6  D004               	goto	l1084
 11124  0127A8                     l1082:
 11125  0127A8  C0FD  F0C6         	movff	_gForecolour,_Console_MakeField$10974
 11126  0127AC  C0FE  F0C7         	movff	_gForecolour+1,_Console_MakeField$10974+1
 11127  0127B0                     l1084:
 11128  0127B0  0100               	movlb	0	; () banked
 11129  0127B2  51C9               	movf	Console_MakeField@y& (0+255),w,b
 11130  0127B4  0D0A               	mullw	10
 11131  0127B6  0E00               	movlw	low Console_MakeField@Fill
 11132  0127B8  0100               	movlb	0	; () banked
 11133  0127BA  6FBF               	movwf	??_Console_MakeField& (0+255),b
 11134  0127BC  0E02               	movlw	high Console_MakeField@Fill
 11135  0127BE  0100               	movlb	0	; () banked
 11136  0127C0  6FC0               	movwf	(??_Console_MakeField+1)& (0+255),b
 11137  0127C2  50F3               	movf	prodl,w,c
 11138  0127C4  0100               	movlb	0	; () banked
 11139  0127C6  27BF               	addwf	??_Console_MakeField& (0+255),f,b
 11140  0127C8  50F4               	movf	prodh,w,c
 11141  0127CA  0100               	movlb	0	; () banked
 11142  0127CC  23C0               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 11143  0127CE  0100               	movlb	0	; () banked
 11144  0127D0  51C8               	movf	Console_MakeField@x& (0+255),w,b
 11145  0127D2  0D02               	mullw	2
 11146  0127D4  50F3               	movf	prodl,w,c
 11147  0127D6  0100               	movlb	0	; () banked
 11148  0127D8  25BF               	addwf	??_Console_MakeField& (0+255),w,b
 11149  0127DA  6ED9               	movwf	fsr2l,c
 11150  0127DC  50F4               	movf	prodh,w,c
 11151  0127DE  0100               	movlb	0	; () banked
 11152  0127E0  21C0               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 11153  0127E2  6EDA               	movwf	fsr2h,c
 11154  0127E4  C0C6  FFDE         	movff	_Console_MakeField$10974,postinc2
 11155  0127E8  C0C7  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 11156                           
 11157                           ; BSR set to: 0
 11158  0127EC  0100               	movlb	0	; () banked
 11159  0127EE  2BC9               	incf	Console_MakeField@y& (0+255),f,b
 11160  0127F0  D7C6               	goto	l11151
 11161  0127F2                     u7670:
 11162                           
 11163                           ; BSR set to: 0
 11164                           ;Console.c: 447: Column += 1;
 11165                           
 11166                           ; BSR set to: 0
 11167  0127F2  0100               	movlb	0	; () banked
 11168  0127F4  4BC4               	infsnz	Console_MakeField@Column& (0+255),f,b
 11169  0127F6  2BC5               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 11170  0127F8  0100               	movlb	0	; () banked
 11171  0127FA  2BC8               	incf	Console_MakeField@x& (0+255),f,b
 11172  0127FC  D7B8               	goto	l11145
 11173  0127FE                     u7680:
 11174                           
 11175                           ; BSR set to: 0
 11176                           ;Console.c: 448: }
 11177                           ;Console.c: 449: return (ColourPtr)Fill;
 11178                           
 11179                           ; BSR set to: 0
 11180  0127FE  0E00               	movlw	low Console_MakeField@Fill
 11181  012800  0100               	movlb	0	; () banked
 11182  012802  6FBD               	movwf	?_Console_MakeField& (0+255),b
 11183  012804  0E02               	movlw	high Console_MakeField@Fill
 11184  012806  0100               	movlb	0	; () banked
 11185  012808  6FBE               	movwf	(?_Console_MakeField+1)& (0+255),b
 11186  01280A  0012               	return	
 11187  01280C                     __end_of_Console_MakeField:
 11188                           	opt stack 0
 11189                           tosu	equ	0xFFF
 11190                           tosh	equ	0xFFE
 11191                           tosl	equ	0xFFD
 11192                           pclath	equ	0xFFA
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           postinc0	equ	0xFEE
 11200                           plusw0	equ	0xFEB
 11201                           wreg	equ	0xFE8
 11202                           indf1	equ	0xFE7
 11203                           postdec1	equ	0xFE5
 11204                           fsr1h	equ	0xFE2
 11205                           fsr1l	equ	0xFE1
 11206                           indf2	equ	0xFDF
 11207                           postinc2	equ	0xFDE
 11208                           postdec2	equ	0xFDD
 11209                           plusw2	equ	0xFDB
 11210                           fsr2h	equ	0xFDA
 11211                           fsr2l	equ	0xFD9
 11212                           status	equ	0xFD8
 11213                           
 11214 ;; *************** function _Byte_GetBit *****************
 11215 ;; Defined at:
 11216 ;;		line 38 in file "Library/Types.c"
 11217 ;; Parameters:    Size  Location     Type
 11218 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11219 ;;		 -> Font5x7(480), 
 11220 ;;  pBit            1    2[BANK0 ] unsigned char 
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;  Output          1    4[BANK0 ] unsigned char 
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  1    wreg      unsigned char 
 11225 ;; Registers used:
 11226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11232 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11234 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11236 ;;Total ram usage:        5 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    7
 11239 ;; This function calls:
 11240 ;;		Nothing
 11241 ;; This function is called by:
 11242 ;;		_Console_MakeField
 11243 ;;		_Word_GetBit
 11244 ;; This function uses a non-reentrant model
 11245 ;;
 11246                           
 11247                           	psect	text59
 11248  014690                     __ptext59:
 11249                           	opt stack 0
 11250  014690                     _Byte_GetBit:
 11251                           	opt stack 18
 11252                           
 11253                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11254                           
 11255                           ; BSR set to: 0
 11256                           ;incstack = 0
 11257  014690  C0B8  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11258  014694  C0B9  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11259  014698                     	if	0	;tblptru may be non-zero
 11260  014698                     	endif
 11261  014698                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11262  014698  0E00               	movlw	low (__mediumconst shr (0+16))
 11263  01469A  6EF8               	movwf	tblptru,c
 11264  01469C                     	endif
 11265  01469C  0008               	tblrd		*
 11266  01469E  CFF5 F0BC          	movff	tablat,Byte_GetBit@Output
 11267                           
 11268                           ;Types.c: 42: Output >>= pBit;
 11269  0146A2  0100               	movlb	0	; () banked
 11270  0146A4  29BA               	incf	Byte_GetBit@pBit& (0+255),w,b
 11271  0146A6  0100               	movlb	0	; () banked
 11272  0146A8  6FBB               	movwf	??_Byte_GetBit& (0+255),b
 11273  0146AA  D003               	goto	u7350
 11274  0146AC                     u7355:
 11275  0146AC  0100               	movlb	0	; () banked
 11276  0146AE  90D8               	bcf	status,0,c
 11277  0146B0  33BC               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11278  0146B2                     u7350:
 11279  0146B2  0100               	movlb	0	; () banked
 11280  0146B4  2FBB               	decfsz	??_Byte_GetBit& (0+255),f,b
 11281  0146B6  D7FA               	goto	u7355
 11282                           
 11283                           ;Types.c: 43: Output &= 1;
 11284  0146B8  0E01               	movlw	1
 11285  0146BA  0100               	movlb	0	; () banked
 11286  0146BC  17BC               	andwf	Byte_GetBit@Output& (0+255),f,b
 11287                           
 11288                           ; BSR set to: 0
 11289                           ;Types.c: 44: return Output;
 11290  0146BE  0100               	movlb	0	; () banked
 11291  0146C0  51BC               	movf	Byte_GetBit@Output& (0+255),w,b
 11292  0146C2  0012               	return	
 11293  0146C4                     __end_of_Byte_GetBit:
 11294                           	opt stack 0
 11295                           tosu	equ	0xFFF
 11296                           tosh	equ	0xFFE
 11297                           tosl	equ	0xFFD
 11298                           pclath	equ	0xFFA
 11299                           tblptru	equ	0xFF8
 11300                           tblptrh	equ	0xFF7
 11301                           tblptrl	equ	0xFF6
 11302                           tablat	equ	0xFF5
 11303                           prodh	equ	0xFF4
 11304                           prodl	equ	0xFF3
 11305                           postinc0	equ	0xFEE
 11306                           plusw0	equ	0xFEB
 11307                           wreg	equ	0xFE8
 11308                           indf1	equ	0xFE7
 11309                           postdec1	equ	0xFE5
 11310                           fsr1h	equ	0xFE2
 11311                           fsr1l	equ	0xFE1
 11312                           indf2	equ	0xFDF
 11313                           postinc2	equ	0xFDE
 11314                           postdec2	equ	0xFDD
 11315                           plusw2	equ	0xFDB
 11316                           fsr2h	equ	0xFDA
 11317                           fsr2l	equ	0xFD9
 11318                           status	equ	0xFD8
 11319                           
 11320 ;; *************** function _FunctMotor *****************
 11321 ;; Defined at:
 11322 ;;		line 42 in file "main.c"
 11323 ;; Parameters:    Size  Location     Type
 11324 ;;		None
 11325 ;; Auto vars:     Size  Location     Type
 11326 ;;		None
 11327 ;; Return value:  Size  Location     Type
 11328 ;;                  1    wreg      void 
 11329 ;; Registers used:
 11330 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11331 ;; Tracked objects:
 11332 ;;		On entry : 0/0
 11333 ;;		On exit  : 0/0
 11334 ;;		Unchanged: 0/0
 11335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11338 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11340 ;;Total ram usage:        2 bytes
 11341 ;; Hardware stack levels used:    1
 11342 ;; Hardware stack levels required when called:   13
 11343 ;; This function calls:
 11344 ;;		_LED_Toggle
 11345 ;;		_MXK_BlockSwitchTo
 11346 ;;		_MXK_Dequeue
 11347 ;;		_MXK_Release
 11348 ;;		_Motor_Move
 11349 ;;		_Motor_Speed
 11350 ;; This function is called by:
 11351 ;;		_continuousMode
 11352 ;; This function uses a non-reentrant model
 11353 ;;
 11354                           
 11355                           	psect	text60
 11356  012B20                     __ptext60:
 11357                           	opt stack 0
 11358  012B20                     _FunctMotor:
 11359                           	opt stack 15
 11360                           
 11361                           ;main.c: 43: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 11362                           
 11363                           ; BSR set to: 0
 11364                           ;incstack = 0
 11365  012B20  0E08               	movlw	8
 11366  012B22  EC5F  F0A2         	call	_MXK_BlockSwitchTo
 11367  012B26  0900               	iorlw	0
 11368  012B28  B4D8               	btfsc	status,2,c
 11369  012B2A  0012               	return	
 11370                           
 11371                           ;main.c: 50: if (Stepper.mDelta == 0) {
 11372  012B2C  0100               	movlb	0	; () banked
 11373  012B2E  519B               	movf	_Stepper& (0+255),w,b
 11374  012B30  0100               	movlb	0	; () banked
 11375  012B32  119C               	iorwf	(_Stepper+1)& (0+255),w,b
 11376  012B34  A4D8               	btfss	status,2,c
 11377  012B36  D04A               	goto	l2007
 11378                           
 11379                           ; BSR set to: 0
 11380                           ;main.c: 51: Hz += HzInc;
 11381  012B38  0E79               	movlw	low _HzInc
 11382  012B3A  6EF6               	movwf	tblptrl,c
 11383  012B3C                     	if	1	;There is more than 1 active tblptr byte
 11384  012B3C  0EFD               	movlw	high _HzInc
 11385  012B3E  6EF7               	movwf	tblptrh,c
 11386  012B40                     	endif
 11387  012B40                     	if	1	;There are 3 active tblptr bytes
 11388  012B40  0E00               	movlw	low (_HzInc shr (0+16))
 11389  012B42  6EF8               	movwf	tblptru,c
 11390  012B44                     	endif
 11391  012B44  0009               	tblrd		*+
 11392  012B46  CFF5 F0D7          	movff	tablat,??_FunctMotor
 11393  012B4A  0009               	tblrd		*+
 11394  012B4C  CFF5 F0D8          	movff	tablat,??_FunctMotor+1
 11395  012B50  0100               	movlb	0	; () banked
 11396  012B52  51D7               	movf	??_FunctMotor& (0+255),w,b
 11397  012B54  0100               	movlb	0	; () banked
 11398  012B56  27FB               	addwf	_Hz& (0+255),f,b
 11399  012B58  0100               	movlb	0	; () banked
 11400  012B5A  51D8               	movf	(??_FunctMotor+1)& (0+255),w,b
 11401  012B5C  0100               	movlb	0	; () banked
 11402  012B5E  23FC               	addwfc	(_Hz+1)& (0+255),f,b
 11403                           
 11404                           ; BSR set to: 0
 11405                           ;main.c: 52: if (Hz >= DIST)
 11406  012B60  0100               	movlb	0	; () banked
 11407  012B62  51F9               	movf	_DIST& (0+255),w,b
 11408  012B64  0100               	movlb	0	; () banked
 11409  012B66  5DFB               	subwf	_Hz& (0+255),w,b
 11410  012B68  0100               	movlb	0	; () banked
 11411  012B6A  51FA               	movf	(_DIST+1)& (0+255),w,b
 11412  012B6C  0100               	movlb	0	; () banked
 11413  012B6E  59FC               	subwfb	(_Hz+1)& (0+255),w,b
 11414  012B70  A0D8               	btfss	status,0,c
 11415  012B72  D00C               	goto	l2008
 11416                           
 11417                           ; BSR set to: 0
 11418                           ;main.c: 53: Hz = HzInc;
 11419  012B74  0E79               	movlw	low _HzInc
 11420  012B76  6EF6               	movwf	tblptrl,c
 11421  012B78                     	if	1	;There is more than 1 active tblptr byte
 11422  012B78  0EFD               	movlw	high _HzInc
 11423  012B7A  6EF7               	movwf	tblptrh,c
 11424  012B7C                     	endif
 11425  012B7C                     	if	1	;There are 3 active tblptr bytes
 11426  012B7C  0E00               	movlw	low (_HzInc shr (0+16))
 11427  012B7E  6EF8               	movwf	tblptru,c
 11428  012B80                     	endif
 11429  012B80  0009               	tblrd		*+
 11430  012B82  CFF5 F0FB          	movff	tablat,_Hz
 11431  012B86  000A               	tblrd		*-
 11432  012B88  CFF5 F0FC          	movff	tablat,_Hz+1
 11433  012B8C                     l2008:
 11434                           
 11435                           ; BSR set to: 0
 11436                           ;main.c: 55: LED_Toggle(eLED1);
 11437                           
 11438                           ; BSR set to: 0
 11439  012B8C  0E00               	movlw	0
 11440  012B8E  EC53  F0A1         	call	_LED_Toggle
 11441                           
 11442                           ;main.c: 56: DIST = -DIST;
 11443  012B92  0100               	movlb	0	; () banked
 11444  012B94  6DF9               	negf	_DIST& (0+255),b
 11445  012B96  1FFA               	comf	(_DIST+1)& (0+255),f,b
 11446  012B98  B0D8               	btfsc	status,0,c
 11447  012B9A  2BFA               	incf	(_DIST+1)& (0+255),f,b
 11448                           
 11449                           ; BSR set to: 0
 11450                           ;main.c: 58: Motor_Speed(&Stepper, Hz);
 11451  012B9C  0E9B               	movlw	low _Stepper
 11452  012B9E  0100               	movlb	0	; () banked
 11453  012BA0  6FD3               	movwf	Motor_Speed@pMotor& (0+255),b
 11454  012BA2  0E00               	movlw	high _Stepper
 11455  012BA4  0100               	movlb	0	; () banked
 11456  012BA6  6FD4               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
 11457  012BA8  C0FB  F0D5         	movff	_Hz,Motor_Speed@pFrequency
 11458  012BAC  C0FC  F0D6         	movff	_Hz+1,Motor_Speed@pFrequency+1
 11459  012BB0  EC1D  F0A4         	call	_Motor_Speed	;wreg free
 11460                           
 11461                           ;main.c: 59: Motor_Move(&Stepper, DIST);
 11462  012BB4  0E9B               	movlw	low _Stepper
 11463  012BB6  0100               	movlb	0	; () banked
 11464  012BB8  6FBB               	movwf	Motor_Move@pMotor& (0+255),b
 11465  012BBA  0E00               	movlw	high _Stepper
 11466  012BBC  0100               	movlb	0	; () banked
 11467  012BBE  6FBC               	movwf	(Motor_Move@pMotor+1)& (0+255),b
 11468  012BC0  C0F9  F0BD         	movff	_DIST,Motor_Move@pDelta
 11469  012BC4  C0FA  F0BE         	movff	_DIST+1,Motor_Move@pDelta+1
 11470  012BC8  ECF5  F0A2         	call	_Motor_Move	;wreg free
 11471  012BCC                     l2007:
 11472                           
 11473                           ;main.c: 60: }
 11474                           ;main.c: 62: if (MXK_Release())
 11475  012BCC  EC2C  F0A5         	call	_MXK_Release	;wreg free
 11476  012BD0  0900               	iorlw	0
 11477  012BD2  B4D8               	btfsc	status,2,c
 11478  012BD4  0012               	return	
 11479                           
 11480                           ;main.c: 63: MXK_Dequeue();
 11481  012BD6  EC40  F0A2         	call	_MXK_Dequeue	;wreg free
 11482  012BDA  0012               	return	
 11483  012BDC                     __end_of_FunctMotor:
 11484                           	opt stack 0
 11485                           tosu	equ	0xFFF
 11486                           tosh	equ	0xFFE
 11487                           tosl	equ	0xFFD
 11488                           pclath	equ	0xFFA
 11489                           tblptru	equ	0xFF8
 11490                           tblptrh	equ	0xFF7
 11491                           tblptrl	equ	0xFF6
 11492                           tablat	equ	0xFF5
 11493                           prodh	equ	0xFF4
 11494                           prodl	equ	0xFF3
 11495                           postinc0	equ	0xFEE
 11496                           plusw0	equ	0xFEB
 11497                           wreg	equ	0xFE8
 11498                           indf1	equ	0xFE7
 11499                           postdec1	equ	0xFE5
 11500                           fsr1h	equ	0xFE2
 11501                           fsr1l	equ	0xFE1
 11502                           indf2	equ	0xFDF
 11503                           postinc2	equ	0xFDE
 11504                           postdec2	equ	0xFDD
 11505                           plusw2	equ	0xFDB
 11506                           fsr2h	equ	0xFDA
 11507                           fsr2l	equ	0xFD9
 11508                           status	equ	0xFD8
 11509                           
 11510 ;; *************** function _Motor_Speed *****************
 11511 ;; Defined at:
 11512 ;;		line 117 in file "Library/Motor.c"
 11513 ;; Parameters:    Size  Location     Type
 11514 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
 11515 ;;		 -> Stepper(6), 
 11516 ;;  pFrequency      2   29[BANK0 ] unsigned short 
 11517 ;; Auto vars:     Size  Location     Type
 11518 ;;		None
 11519 ;; Return value:  Size  Location     Type
 11520 ;;                  1    wreg      unsigned char 
 11521 ;; Registers used:
 11522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11523 ;; Tracked objects:
 11524 ;;		On entry : 0/0
 11525 ;;		On exit  : 0/0
 11526 ;;		Unchanged: 0/0
 11527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11528 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11529 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11530 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11531 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11532 ;;Total ram usage:        4 bytes
 11533 ;; Hardware stack levels used:    1
 11534 ;; Hardware stack levels required when called:    9
 11535 ;; This function calls:
 11536 ;;		_Timer0_Init
 11537 ;; This function is called by:
 11538 ;;		_FunctMotor
 11539 ;; This function uses a non-reentrant model
 11540 ;;
 11541                           
 11542                           	psect	text61
 11543  01483A                     __ptext61:
 11544                           	opt stack 0
 11545  01483A                     _Motor_Speed:
 11546                           	opt stack 18
 11547                           
 11548                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
 11549                           
 11550                           ;incstack = 0
 11551  01483A  0100               	movlb	0	; () banked
 11552  01483C  EE20 F002          	lfsr	2,2
 11553  014840  51D3               	movf	Motor_Speed@pMotor& (0+255),w,b
 11554  014842  26D9               	addwf	fsr2l,f,c
 11555  014844  51D4               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
 11556  014846  22DA               	addwfc	fsr2h,f,c
 11557  014848  C0D5  FFDE         	movff	Motor_Speed@pFrequency,postinc2
 11558  01484C  C0D6  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
 11559                           
 11560                           ; BSR set to: 0
 11561                           ;Motor.c: 120: Timer0_Init(pFrequency);
 11562  014850  C0D5  F0C5         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
 11563  014854  C0D6  F0C6         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
 11564  014858  0100               	movlb	0	; () banked
 11565  01485A  6BC7               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
 11566  01485C  6BC8               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
 11567  01485E  EC55  F090         	call	_Timer0_Init	;wreg free
 11568  014862  0012               	return	
 11569  014864                     __end_of_Motor_Speed:
 11570                           	opt stack 0
 11571                           tosu	equ	0xFFF
 11572                           tosh	equ	0xFFE
 11573                           tosl	equ	0xFFD
 11574                           pclath	equ	0xFFA
 11575                           tblptru	equ	0xFF8
 11576                           tblptrh	equ	0xFF7
 11577                           tblptrl	equ	0xFF6
 11578                           tablat	equ	0xFF5
 11579                           prodh	equ	0xFF4
 11580                           prodl	equ	0xFF3
 11581                           postinc0	equ	0xFEE
 11582                           plusw0	equ	0xFEB
 11583                           wreg	equ	0xFE8
 11584                           indf1	equ	0xFE7
 11585                           postdec1	equ	0xFE5
 11586                           fsr1h	equ	0xFE2
 11587                           fsr1l	equ	0xFE1
 11588                           indf2	equ	0xFDF
 11589                           postinc2	equ	0xFDE
 11590                           postdec2	equ	0xFDD
 11591                           plusw2	equ	0xFDB
 11592                           fsr2h	equ	0xFDA
 11593                           fsr2l	equ	0xFD9
 11594                           status	equ	0xFD8
 11595                           
 11596 ;; *************** function _Motor_Move *****************
 11597 ;; Defined at:
 11598 ;;		line 51 in file "Library/Motor.c"
 11599 ;; Parameters:    Size  Location     Type
 11600 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
 11601 ;;		 -> Stepper(6), 
 11602 ;;  pDelta          2    5[BANK0 ] short 
 11603 ;; Auto vars:     Size  Location     Type
 11604 ;;		None
 11605 ;; Return value:  Size  Location     Type
 11606 ;;                  1    wreg      unsigned char 
 11607 ;; Registers used:
 11608 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11609 ;; Tracked objects:
 11610 ;;		On entry : 0/0
 11611 ;;		On exit  : 0/0
 11612 ;;		Unchanged: 0/0
 11613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11614 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11615 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11616 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11617 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11618 ;;Total ram usage:        6 bytes
 11619 ;; Hardware stack levels used:    1
 11620 ;; Hardware stack levels required when called:    8
 11621 ;; This function calls:
 11622 ;;		_Timer0_Start
 11623 ;; This function is called by:
 11624 ;;		_FunctMotor
 11625 ;; This function uses a non-reentrant model
 11626 ;;
 11627                           
 11628                           	psect	text62
 11629  0145EA                     __ptext62:
 11630                           	opt stack 0
 11631  0145EA                     _Motor_Move:
 11632                           	opt stack 19
 11633                           
 11634                           ;Motor.c: 54: lMotor = pMotor;
 11635                           
 11636                           ;incstack = 0
 11637  0145EA  C0BB  F06F         	movff	Motor_Move@pMotor,_lMotor
 11638  0145EE  C0BC  F070         	movff	Motor_Move@pMotor+1,_lMotor+1
 11639                           
 11640                           ;Motor.c: 58: if (pMotor->mDelta != 0)
 11641  0145F2  C0BB  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11642  0145F6  C0BC  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11643  0145FA  50DE               	movf	postinc2,w,c
 11644  0145FC  10DE               	iorwf	postinc2,w,c
 11645  0145FE  A4D8               	btfss	status,2,c
 11646  014600  0012               	return	
 11647                           
 11648                           ;Motor.c: 63: pMotor->mDelta = pDelta;
 11649                           
 11650                           ;Motor.c: 59: return 0;
 11651                           ;	Return value of _Motor_Move is never used
 11652  014602  C0BB  FFD9         	movff	Motor_Move@pMotor,fsr2l
 11653  014606  C0BC  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
 11654  01460A  C0BD  FFDE         	movff	Motor_Move@pDelta,postinc2
 11655  01460E  C0BE  FFDD         	movff	Motor_Move@pDelta+1,postdec2
 11656                           
 11657                           ;Motor.c: 67: Timer0_Start(lStepFunction);
 11658  014612  C02C  F0B8         	movff	_lStepFunction,Timer0_Start@pFunction
 11659  014616  C02D  F0B9         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
 11660  01461A  C02E  F0BA         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
 11661  01461E  EC5A  F0A4         	call	_Timer0_Start	;wreg free
 11662  014622  0012               	return	
 11663  014624                     __end_of_Motor_Move:
 11664                           	opt stack 0
 11665                           tosu	equ	0xFFF
 11666                           tosh	equ	0xFFE
 11667                           tosl	equ	0xFFD
 11668                           pclath	equ	0xFFA
 11669                           tblptru	equ	0xFF8
 11670                           tblptrh	equ	0xFF7
 11671                           tblptrl	equ	0xFF6
 11672                           tablat	equ	0xFF5
 11673                           prodh	equ	0xFF4
 11674                           prodl	equ	0xFF3
 11675                           postinc0	equ	0xFEE
 11676                           plusw0	equ	0xFEB
 11677                           wreg	equ	0xFE8
 11678                           indf1	equ	0xFE7
 11679                           postdec1	equ	0xFE5
 11680                           fsr1h	equ	0xFE2
 11681                           fsr1l	equ	0xFE1
 11682                           indf2	equ	0xFDF
 11683                           postinc2	equ	0xFDE
 11684                           postdec2	equ	0xFDD
 11685                           plusw2	equ	0xFDB
 11686                           fsr2h	equ	0xFDA
 11687                           fsr2l	equ	0xFD9
 11688                           status	equ	0xFD8
 11689                           
 11690 ;; *************** function _Timer0_Start *****************
 11691 ;; Defined at:
 11692 ;;		line 75 in file "Library/Timer0.c"
 11693 ;; Parameters:    Size  Location     Type
 11694 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
 11695 ;;		 -> Absolute function(1), Motor_Step(1), 
 11696 ;; Auto vars:     Size  Location     Type
 11697 ;;		None
 11698 ;; Return value:  Size  Location     Type
 11699 ;;                  1    wreg      void 
 11700 ;; Registers used:
 11701 ;;		wreg, status,2, status,0
 11702 ;; Tracked objects:
 11703 ;;		On entry : 0/0
 11704 ;;		On exit  : 0/0
 11705 ;;		Unchanged: 0/0
 11706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11707 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11710 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11711 ;;Total ram usage:        3 bytes
 11712 ;; Hardware stack levels used:    1
 11713 ;; Hardware stack levels required when called:    7
 11714 ;; This function calls:
 11715 ;;		Nothing
 11716 ;; This function is called by:
 11717 ;;		_Motor_Move
 11718 ;; This function uses a non-reentrant model
 11719 ;;
 11720                           
 11721                           	psect	text63
 11722  0148B4                     __ptext63:
 11723                           	opt stack 0
 11724  0148B4                     _Timer0_Start:
 11725                           	opt stack 19
 11726                           
 11727                           ;Timer0.c: 77: gISR = pFunction;
 11728                           
 11729                           ;incstack = 0
 11730  0148B4  C0B8  F029         	movff	Timer0_Start@pFunction,_gISR
 11731  0148B8  C0B9  F02A         	movff	Timer0_Start@pFunction+1,_gISR+1
 11732  0148BC  C0BA  F02B         	movff	Timer0_Start@pFunction+2,_gISR+2
 11733                           
 11734                           ;Timer0.c: 78: TMR0 = COUNTER;
 11735  0148C0  C031  FFD6         	movff	_COUNTER,4054	;volatile
 11736  0148C4  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 11737                           
 11738                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
 11739  0148C8  50D5               	movf	4053,w,c	;volatile
 11740  0148CA  0100               	movlb	0	; () banked
 11741  0148CC  1979               	xorwf	_INDEX& (0+255),w,b
 11742  0148CE  0BF8               	andlw	-8
 11743  0148D0  1979               	xorwf	_INDEX& (0+255),w,b
 11744  0148D2  6ED5               	movwf	4053,c	;volatile
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
 11748  0148D4  94F2               	bcf	intcon,2,c	;volatile
 11749                           
 11750                           ; BSR set to: 0
 11751                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
 11752  0148D6  8AF2               	bsf	intcon,5,c	;volatile
 11753                           
 11754                           ; BSR set to: 0
 11755  0148D8  0012               	return		;funcret
 11756  0148DA                     __end_of_Timer0_Start:
 11757                           	opt stack 0
 11758                           tosu	equ	0xFFF
 11759                           tosh	equ	0xFFE
 11760                           tosl	equ	0xFFD
 11761                           pclath	equ	0xFFA
 11762                           tblptru	equ	0xFF8
 11763                           tblptrh	equ	0xFF7
 11764                           tblptrl	equ	0xFF6
 11765                           tablat	equ	0xFF5
 11766                           prodh	equ	0xFF4
 11767                           prodl	equ	0xFF3
 11768                           intcon	equ	0xFF2
 11769                           postinc0	equ	0xFEE
 11770                           plusw0	equ	0xFEB
 11771                           wreg	equ	0xFE8
 11772                           indf1	equ	0xFE7
 11773                           postdec1	equ	0xFE5
 11774                           fsr1h	equ	0xFE2
 11775                           fsr1l	equ	0xFE1
 11776                           indf2	equ	0xFDF
 11777                           postinc2	equ	0xFDE
 11778                           postdec2	equ	0xFDD
 11779                           plusw2	equ	0xFDB
 11780                           fsr2h	equ	0xFDA
 11781                           fsr2l	equ	0xFD9
 11782                           status	equ	0xFD8
 11783                           
 11784 ;; *************** function _initialise *****************
 11785 ;; Defined at:
 11786 ;;		line 68 in file "main.c"
 11787 ;; Parameters:    Size  Location     Type
 11788 ;;		None
 11789 ;; Auto vars:     Size  Location     Type
 11790 ;;		None
 11791 ;; Return value:  Size  Location     Type
 11792 ;;                  1    wreg      void 
 11793 ;; Registers used:
 11794 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11795 ;; Tracked objects:
 11796 ;;		On entry : 0/0
 11797 ;;		On exit  : 0/0
 11798 ;;		Unchanged: 0/0
 11799 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11801 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11802 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11803 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11804 ;;Total ram usage:        0 bytes
 11805 ;; Hardware stack levels used:    1
 11806 ;; Hardware stack levels required when called:   17
 11807 ;; This function calls:
 11808 ;;		_Console_Init
 11809 ;;		_HMI_Init
 11810 ;;		_LCD_Init
 11811 ;;		_MXK_BlockSwitchTo
 11812 ;;		_MXK_Dequeue
 11813 ;;		_MXK_Init
 11814 ;;		_MXK_Release
 11815 ;;		_Motor_Init
 11816 ;; This function is called by:
 11817 ;;		_main
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           	psect	text64
 11822  013EC2                     __ptext64:
 11823                           	opt stack 0
 11824  013EC2                     _initialise:
 11825                           	opt stack 13
 11826                           
 11827                           ;main.c: 70: MXK_Init();
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;incstack = 0
 11831  013EC2  EC29  F08E         	call	_MXK_Init	;wreg free
 11832                           
 11833                           ;main.c: 73: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 11834  013EC6  0E01               	movlw	1
 11835  013EC8  EC5F  F0A2         	call	_MXK_BlockSwitchTo
 11836  013ECC  0900               	iorlw	0
 11837  013ECE  B4D8               	btfsc	status,2,c
 11838  013ED0  D00C               	goto	l2014
 11839                           
 11840                           ;main.c: 75: LCD_Init();
 11841  013ED2  ECE9  F08E         	call	_LCD_Init	;wreg free
 11842                           
 11843                           ;main.c: 76: Console_Init();
 11844  013ED6  ECAB  F09B         	call	_Console_Init	;wreg free
 11845                           
 11846                           ;main.c: 77: HMI_Init();
 11847  013EDA  ECB4  F08A         	call	_HMI_Init	;wreg free
 11848                           
 11849                           ;main.c: 78: if (MXK_Release())
 11850  013EDE  EC2C  F0A5         	call	_MXK_Release	;wreg free
 11851  013EE2  0900               	iorlw	0
 11852  013EE4  A4D8               	btfss	status,2,c
 11853                           
 11854                           ;main.c: 79: MXK_Dequeue();
 11855  013EE6  EC40  F0A2         	call	_MXK_Dequeue	;wreg free
 11856  013EEA                     l2014:
 11857                           
 11858                           ;main.c: 80: }
 11859                           ;main.c: 83: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 11860  013EEA  0E08               	movlw	8
 11861  013EEC  EC5F  F0A2         	call	_MXK_BlockSwitchTo
 11862  013EF0  0900               	iorlw	0
 11863  013EF2  B4D8               	btfsc	status,2,c
 11864  013EF4  0012               	return	
 11865                           
 11866                           ;main.c: 84: Motor_Init(&Stepper, 0b1000);
 11867  013EF6  0E9B               	movlw	low _Stepper
 11868  013EF8  0100               	movlb	0	; () banked
 11869  013EFA  6FE5               	movwf	Motor_Init@pMotor& (0+255),b
 11870  013EFC  0E00               	movlw	high _Stepper
 11871  013EFE  0100               	movlb	0	; () banked
 11872  013F00  6FE6               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 11873  013F02  0E00               	movlw	0
 11874  013F04  0100               	movlb	0	; () banked
 11875  013F06  6FE8               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 11876  013F08  0E08               	movlw	8
 11877  013F0A  6FE7               	movwf	Motor_Init@pAddress& (0+255),b
 11878  013F0C  EC06  F094         	call	_Motor_Init	;wreg free
 11879                           
 11880                           ;main.c: 85: if (MXK_Release())
 11881  013F10  EC2C  F0A5         	call	_MXK_Release	;wreg free
 11882  013F14  0900               	iorlw	0
 11883  013F16  B4D8               	btfsc	status,2,c
 11884  013F18  0012               	return	
 11885                           
 11886                           ;main.c: 86: MXK_Dequeue();
 11887  013F1A  EC40  F0A2         	call	_MXK_Dequeue	;wreg free
 11888  013F1E  0012               	return	
 11889  013F20                     __end_of_initialise:
 11890                           	opt stack 0
 11891                           tosu	equ	0xFFF
 11892                           tosh	equ	0xFFE
 11893                           tosl	equ	0xFFD
 11894                           pclath	equ	0xFFA
 11895                           tblptru	equ	0xFF8
 11896                           tblptrh	equ	0xFF7
 11897                           tblptrl	equ	0xFF6
 11898                           tablat	equ	0xFF5
 11899                           prodh	equ	0xFF4
 11900                           prodl	equ	0xFF3
 11901                           intcon	equ	0xFF2
 11902                           postinc0	equ	0xFEE
 11903                           plusw0	equ	0xFEB
 11904                           wreg	equ	0xFE8
 11905                           indf1	equ	0xFE7
 11906                           postdec1	equ	0xFE5
 11907                           fsr1h	equ	0xFE2
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           plusw2	equ	0xFDB
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _Motor_Init *****************
 11918 ;; Defined at:
 11919 ;;		line 26 in file "Library/Motor.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 11922 ;;		 -> Stepper(6), 
 11923 ;;  pAddress        2   47[BANK0 ] unsigned short 
 11924 ;; Auto vars:     Size  Location     Type
 11925 ;;		None
 11926 ;; Return value:  Size  Location     Type
 11927 ;;                  1    wreg      void 
 11928 ;; Registers used:
 11929 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11930 ;; Tracked objects:
 11931 ;;		On entry : 0/0
 11932 ;;		On exit  : 0/0
 11933 ;;		Unchanged: 0/0
 11934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11935 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11938 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11939 ;;Total ram usage:        4 bytes
 11940 ;; Hardware stack levels used:    1
 11941 ;; Hardware stack levels required when called:   12
 11942 ;; This function calls:
 11943 ;;		_Port_SetPin
 11944 ;;		_Port_SetPinType
 11945 ;;		_Timer0_Init
 11946 ;; This function is called by:
 11947 ;;		_initialise
 11948 ;; This function uses a non-reentrant model
 11949 ;;
 11950                           
 11951                           	psect	text65
 11952  01280C                     __ptext65:
 11953                           	opt stack 0
 11954  01280C                     _Motor_Init:
 11955                           	opt stack 17
 11956                           
 11957                           ;Motor.c: 28: pMotor->mDelta = 0;
 11958                           
 11959                           ;incstack = 0
 11960  01280C  C0E5  FFD9         	movff	Motor_Init@pMotor,fsr2l
 11961  012810  C0E6  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 11962  012814  0E00               	movlw	0
 11963  012816  6EDE               	movwf	postinc2,c
 11964  012818  0E00               	movlw	0
 11965  01281A  6EDD               	movwf	postdec2,c
 11966                           
 11967                           ;Motor.c: 29: pMotor->mFrequency = 0;
 11968  01281C  0100               	movlb	0	; () banked
 11969  01281E  EE20 F002          	lfsr	2,2
 11970  012822  51E5               	movf	Motor_Init@pMotor& (0+255),w,b
 11971  012824  26D9               	addwf	fsr2l,f,c
 11972  012826  51E6               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11973  012828  22DA               	addwfc	fsr2h,f,c
 11974  01282A  0E00               	movlw	0
 11975  01282C  6EDE               	movwf	postinc2,c
 11976  01282E  0E00               	movlw	0
 11977  012830  6EDD               	movwf	postdec2,c
 11978                           
 11979                           ; BSR set to: 0
 11980                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 11981  012832  0100               	movlb	0	; () banked
 11982  012834  EE20 F004          	lfsr	2,4
 11983  012838  51E5               	movf	Motor_Init@pMotor& (0+255),w,b
 11984  01283A  26D9               	addwf	fsr2l,f,c
 11985  01283C  51E6               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 11986  01283E  22DA               	addwfc	fsr2h,f,c
 11987  012840  C0E7  FFDE         	movff	Motor_Init@pAddress,postinc2
 11988  012844  C0E8  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 11989                           
 11990                           ; BSR set to: 0
 11991                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 11992  012848  0E7D               	movlw	low _PortE
 11993  01284A  0100               	movlb	0	; () banked
 11994  01284C  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 11995  01284E  0E00               	movlw	high _PortE
 11996  012850  0100               	movlb	0	; () banked
 11997  012852  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11998  012854  0E00               	movlw	0
 11999  012856  0100               	movlb	0	; () banked
 12000  012858  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 12001  01285A  0E03               	movlw	3
 12002  01285C  0100               	movlb	0	; () banked
 12003  01285E  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12004  012860  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12005                           
 12006                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 12007  012864  0E7D               	movlw	low _PortE
 12008  012866  0100               	movlb	0	; () banked
 12009  012868  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 12010  01286A  0E00               	movlw	high _PortE
 12011  01286C  0100               	movlb	0	; () banked
 12012  01286E  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12013  012870  0E01               	movlw	1
 12014  012872  0100               	movlb	0	; () banked
 12015  012874  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 12016  012876  0E03               	movlw	3
 12017  012878  0100               	movlb	0	; () banked
 12018  01287A  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12019  01287C  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12020                           
 12021                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 12022  012880  0E7D               	movlw	low _PortE
 12023  012882  0100               	movlb	0	; () banked
 12024  012884  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 12025  012886  0E00               	movlw	high _PortE
 12026  012888  0100               	movlb	0	; () banked
 12027  01288A  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12028  01288C  0E00               	movlw	0
 12029  01288E  0100               	movlb	0	; () banked
 12030  012890  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 12031  012892  0E00               	movlw	0
 12032  012894  0100               	movlb	0	; () banked
 12033  012896  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 12034  012898  EC6E  F094         	call	_Port_SetPin	;wreg free
 12035                           
 12036                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 12037  01289C  0E7D               	movlw	low _PortE
 12038  01289E  0100               	movlb	0	; () banked
 12039  0128A0  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 12040  0128A2  0E00               	movlw	high _PortE
 12041  0128A4  0100               	movlb	0	; () banked
 12042  0128A6  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12043  0128A8  0E01               	movlw	1
 12044  0128AA  0100               	movlb	0	; () banked
 12045  0128AC  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 12046  0128AE  0E00               	movlw	0
 12047  0128B0  0100               	movlb	0	; () banked
 12048  0128B2  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 12049  0128B4  EC6E  F094         	call	_Port_SetPin	;wreg free
 12050                           
 12051                           ;Motor.c: 38: lStepFunction = Motor_Step;
 12052  0128B8  0E6A               	movlw	low _Motor_Step
 12053  0128BA  6E2C               	movwf	_lStepFunction,c
 12054  0128BC  0E23               	movlw	high _Motor_Step
 12055  0128BE  6E2D               	movwf	_lStepFunction+1,c
 12056  0128C0  0E01               	movlw	low (_Motor_Step shr (0+16))
 12057  0128C2  6E2E               	movwf	_lStepFunction+2,c
 12058                           
 12059                           ;Motor.c: 39: Timer0_Init(1000);
 12060  0128C4  0EE8               	movlw	232
 12061  0128C6  0100               	movlb	0	; () banked
 12062  0128C8  6FC5               	movwf	Timer0_Init@pFrequency& (0+255),b
 12063  0128CA  0E03               	movlw	3
 12064  0128CC  6FC6               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 12065  0128CE  0E00               	movlw	0
 12066  0128D0  6FC7               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 12067  0128D2  0E00               	movlw	0
 12068  0128D4  6FC8               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 12069  0128D6  EC55  F090         	call	_Timer0_Init	;wreg free
 12070  0128DA  0012               	return		;funcret
 12071  0128DC                     __end_of_Motor_Init:
 12072                           	opt stack 0
 12073                           tosu	equ	0xFFF
 12074                           tosh	equ	0xFFE
 12075                           tosl	equ	0xFFD
 12076                           pclath	equ	0xFFA
 12077                           tblptru	equ	0xFF8
 12078                           tblptrh	equ	0xFF7
 12079                           tblptrl	equ	0xFF6
 12080                           tablat	equ	0xFF5
 12081                           prodh	equ	0xFF4
 12082                           prodl	equ	0xFF3
 12083                           intcon	equ	0xFF2
 12084                           postinc0	equ	0xFEE
 12085                           plusw0	equ	0xFEB
 12086                           wreg	equ	0xFE8
 12087                           indf1	equ	0xFE7
 12088                           postdec1	equ	0xFE5
 12089                           fsr1h	equ	0xFE2
 12090                           fsr1l	equ	0xFE1
 12091                           indf2	equ	0xFDF
 12092                           postinc2	equ	0xFDE
 12093                           postdec2	equ	0xFDD
 12094                           plusw2	equ	0xFDB
 12095                           fsr2h	equ	0xFDA
 12096                           fsr2l	equ	0xFD9
 12097                           status	equ	0xFD8
 12098                           
 12099 ;; *************** function _Timer0_Init *****************
 12100 ;; Defined at:
 12101 ;;		line 25 in file "Library/Timer0.c"
 12102 ;; Parameters:    Size  Location     Type
 12103 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 12104 ;; Auto vars:     Size  Location     Type
 12105 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 12106 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 12107 ;; Return value:  Size  Location     Type
 12108 ;;                  1    wreg      void 
 12109 ;; Registers used:
 12110 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12111 ;; Tracked objects:
 12112 ;;		On entry : 0/0
 12113 ;;		On exit  : 0/0
 12114 ;;		Unchanged: 0/0
 12115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12116 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12117 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12118 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12119 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12120 ;;Total ram usage:       14 bytes
 12121 ;; Hardware stack levels used:    1
 12122 ;; Hardware stack levels required when called:    8
 12123 ;; This function calls:
 12124 ;;		_Timer0_Clear
 12125 ;;		___lldiv
 12126 ;; This function is called by:
 12127 ;;		_Motor_Init
 12128 ;;		_Motor_Speed
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           	psect	text66
 12133  0120AA                     __ptext66:
 12134                           	opt stack 0
 12135  0120AA                     _Timer0_Init:
 12136                           	opt stack 18
 12137                           
 12138                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 12139                           
 12140                           ;incstack = 0
 12141  0120AA  0E80               	movlw	128
 12142  0120AC  0100               	movlb	0	; () banked
 12143  0120AE  6FCB               	movwf	Timer0_Init@pCPUClock& (0+255),b
 12144  0120B0  0E8D               	movlw	141
 12145  0120B2  6FCC               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 12146  0120B4  0E5B               	movlw	91
 12147  0120B6  6FCD               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 12148  0120B8  0E00               	movlw	0
 12149  0120BA  6FCE               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 12150                           
 12151                           ; BSR set to: 0
 12152                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 12153                           ;Timer0.c: 31: static UINT8 PRE = 0;
 12154                           ;Timer0.c: 32: static UINT32 DIV = 0;
 12155                           ;Timer0.c: 34: UINT32 DIVIDE;
 12156                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 12157  0120BC  9ED5               	bcf	4053,7,c	;volatile
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;Timer0.c: 38: if (pFrequency == 0)
 12161  0120BE  0100               	movlb	0	; () banked
 12162  0120C0  51C5               	movf	Timer0_Init@pFrequency& (0+255),w,b
 12163  0120C2  0100               	movlb	0	; () banked
 12164  0120C4  11C6               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 12165  0120C6  0100               	movlb	0	; () banked
 12166  0120C8  11C7               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 12167  0120CA  0100               	movlb	0	; () banked
 12168  0120CC  11C8               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 12169  0120CE  B4D8               	btfsc	status,2,c
 12170  0120D0  0012               	return	
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 12174                           
 12175                           ; BSR set to: 0
 12176                           ;Timer0.c: 39: return;
 12177  0120D2  96D5               	bcf	4053,3,c	;volatile
 12178                           
 12179                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 12180  0120D4  9CD5               	bcf	4053,6,c	;volatile
 12181                           
 12182                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 12183  0120D6  9AD5               	bcf	4053,5,c	;volatile
 12184                           
 12185                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 12186  0120D8  98D5               	bcf	4053,4,c	;volatile
 12187                           
 12188                           ; BSR set to: 0
 12189                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 12190  0120DA  C0CB  F0B8         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 12191  0120DE  C0CC  F0B9         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 12192  0120E2  C0CD  F0BA         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 12193  0120E6  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 12194  0120EA  C0C5  F0BC         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 12195  0120EE  C0C6  F0BD         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 12196  0120F2  C0C7  F0BE         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 12197  0120F6  C0C8  F0BF         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 12198  0120FA  ECEE  F095         	call	___lldiv	;wreg free
 12199  0120FE  C0B8  F0CF         	movff	?___lldiv,Timer0_Init@DIVIDE
 12200  012102  C0B9  F0D0         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 12201  012106  C0BA  F0D1         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 12202  01210A  C0BB  F0D2         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 12203                           
 12204                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 12205  01210E  D00C               	goto	l1795
 12206  012110                     l11183:
 12207                           
 12208                           ;Timer0.c: 50: {
 12209                           ;Timer0.c: 51: INDEX ++;
 12210  012110  0100               	movlb	0	; () banked
 12211  012112  2B79               	incf	_INDEX& (0+255),f,b
 12212                           
 12213                           ; BSR set to: 0
 12214                           ;Timer0.c: 52: if (INDEX >= 3)
 12215  012114  0E02               	movlw	2
 12216  012116  0100               	movlb	0	; () banked
 12217  012118  6579               	cpfsgt	_INDEX& (0+255),b
 12218  01211A  D001               	goto	l1793
 12219  01211C  D02F               	goto	u7720
 12220  01211E                     l1793:
 12221                           
 12222                           ; BSR set to: 0
 12223                           ;Timer0.c: 56: if (INDEX >= 8)
 12224                           
 12225                           ; BSR set to: 0
 12226  01211E  0E07               	movlw	7
 12227  012120  0100               	movlb	0	; () banked
 12228  012122  6579               	cpfsgt	_INDEX& (0+255),b
 12229  012124  D001               	goto	l1795
 12230  012126  0012               	return	
 12231  012128                     l1795:
 12232                           
 12233                           ; BSR set to: 0
 12234                           
 12235                           ; BSR set to: 0
 12236  012128  C0CF  F0B8         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 12237  01212C  C0D0  F0B9         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 12238  012130  C0D1  F0BA         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 12239  012134  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 12240  012138  0100               	movlb	0	; () banked
 12241  01213A  5179               	movf	_INDEX& (0+255),w,b
 12242  01213C  0D02               	mullw	2
 12243  01213E  0E49               	movlw	low Timer0_Init@PRESCALE
 12244  012140  24F3               	addwf	prodl,w,c
 12245  012142  6EF6               	movwf	tblptrl,c
 12246  012144  0EFD               	movlw	high Timer0_Init@PRESCALE
 12247  012146  20F4               	addwfc	prodh,w,c
 12248  012148  6EF7               	movwf	tblptrh,c
 12249  01214A                     	if	1	;There are 3 active tblptr bytes
 12250  01214A  6AF8               	clrf	tblptru,c
 12251  01214C  0E00               	movlw	low (__mediumconst shr (0+16))
 12252  01214E  22F8               	addwfc	tblptru,f,c
 12253  012150                     	endif
 12254  012150  0009               	tblrd		*+
 12255  012152  CFF5 F0C9          	movff	tablat,??_Timer0_Init
 12256  012156  0009               	tblrd		*+
 12257  012158  CFF5 F0CA          	movff	tablat,??_Timer0_Init+1
 12258  01215C  C0C9  F0BC         	movff	??_Timer0_Init,___lldiv@divisor
 12259  012160  C0CA  F0BD         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 12260  012164  0100               	movlb	0	; () banked
 12261  012166  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 12262  012168  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 12263  01216A  ECEE  F095         	call	___lldiv	;wreg free
 12264  01216E  0100               	movlb	0	; () banked
 12265  012170  51BB               	movf	(?___lldiv+3)& (0+255),w,b
 12266  012172  E1CE               	bnz	l11183
 12267  012174  0100               	movlb	0	; () banked
 12268  012176  05BA               	decf	(?___lldiv+2)& (0+255),w,b
 12269  012178  B0D8               	btfsc	status,0,c
 12270  01217A  D7CA               	goto	l1792
 12271  01217C                     u7720:
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;Timer0.c: 58: }
 12275                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 12276                           
 12277                           ; BSR set to: 0
 12278  01217C  0100               	movlb	0	; () banked
 12279  01217E  5179               	movf	_INDEX& (0+255),w,b
 12280  012180  0D02               	mullw	2
 12281  012182  0E49               	movlw	low Timer0_Init@PRESCALE
 12282  012184  24F3               	addwf	prodl,w,c
 12283  012186  6EF6               	movwf	tblptrl,c
 12284  012188  0EFD               	movlw	high Timer0_Init@PRESCALE
 12285  01218A  20F4               	addwfc	prodh,w,c
 12286  01218C  6EF7               	movwf	tblptrh,c
 12287  01218E                     	if	1	;There are 3 active tblptr bytes
 12288  01218E  6AF8               	clrf	tblptru,c
 12289  012190  0E00               	movlw	low (__mediumconst shr (0+16))
 12290  012192  22F8               	addwfc	tblptru,f,c
 12291  012194                     	endif
 12292  012194  0008               	tblrd		*
 12293  012196  CFF5 F078          	movff	tablat,Timer0_Init@PRE
 12294                           
 12295                           ; BSR set to: 0
 12296                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 12297  01219A  0EFF               	movlw	255
 12298  01219C  0100               	movlb	0	; () banked
 12299  01219E  25CF               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 12300  0121A0  0100               	movlb	0	; () banked
 12301  0121A2  6F64               	movwf	Timer0_Init@DIV& (0+255),b
 12302  0121A4  0EFF               	movlw	255
 12303  0121A6  0100               	movlb	0	; () banked
 12304  0121A8  21D0               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 12305  0121AA  0100               	movlb	0	; () banked
 12306  0121AC  6F65               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 12307  0121AE  0EFF               	movlw	255
 12308  0121B0  0100               	movlb	0	; () banked
 12309  0121B2  21D1               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 12310  0121B4  0100               	movlb	0	; () banked
 12311  0121B6  6F66               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 12312  0121B8  0EFF               	movlw	255
 12313  0121BA  0100               	movlb	0	; () banked
 12314  0121BC  21D2               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 12315  0121BE  0100               	movlb	0	; () banked
 12316  0121C0  6F67               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 12317                           
 12318                           ; BSR set to: 0
 12319                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 12320  0121C2  C064  F0B8         	movff	Timer0_Init@DIV,___lldiv@dividend
 12321  0121C6  C065  F0B9         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 12322  0121CA  C066  F0BA         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 12323  0121CE  C067  F0BB         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 12324  0121D2  0100               	movlb	0	; () banked
 12325  0121D4  5178               	movf	Timer0_Init@PRE& (0+255),w,b
 12326  0121D6  0100               	movlb	0	; () banked
 12327  0121D8  6FBC               	movwf	___lldiv@divisor& (0+255),b
 12328  0121DA  6BBD               	clrf	(___lldiv@divisor+1)& (0+255),b
 12329  0121DC  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 12330  0121DE  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 12331  0121E0  ECEE  F095         	call	___lldiv	;wreg free
 12332  0121E4  0100               	movlb	0	; () banked
 12333  0121E6  1FB8               	comf	?___lldiv& (0+255),f,b
 12334  0121E8  0100               	movlb	0	; () banked
 12335  0121EA  1FB9               	comf	(?___lldiv+1)& (0+255),f,b
 12336  0121EC  0100               	movlb	0	; () banked
 12337  0121EE  4BB8               	infsnz	?___lldiv& (0+255),f,b
 12338  0121F0  2BB9               	incf	(?___lldiv+1)& (0+255),f,b
 12339  0121F2  0EFF               	movlw	255
 12340  0121F4  0100               	movlb	0	; () banked
 12341  0121F6  25B8               	addwf	?___lldiv& (0+255),w,b
 12342  0121F8  6E31               	movwf	_COUNTER,c
 12343  0121FA  0EFF               	movlw	255
 12344  0121FC  0100               	movlb	0	; () banked
 12345  0121FE  21B9               	addwfc	(?___lldiv+1)& (0+255),w,b
 12346  012200  6E32               	movwf	_COUNTER+1,c
 12347                           
 12348                           ; BSR set to: 0
 12349                           ;Timer0.c: 68: Timer0_Clear();
 12350  012202  ECEC  F0A5         	call	_Timer0_Clear	;wreg free
 12351                           
 12352                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 12353  012206  8ED5               	bsf	4053,7,c	;volatile
 12354  012208  0012               	return		;funcret
 12355  01220A                     __end_of_Timer0_Init:
 12356                           	opt stack 0
 12357                           tosu	equ	0xFFF
 12358                           tosh	equ	0xFFE
 12359                           tosl	equ	0xFFD
 12360                           pclath	equ	0xFFA
 12361                           tblptru	equ	0xFF8
 12362                           tblptrh	equ	0xFF7
 12363                           tblptrl	equ	0xFF6
 12364                           tablat	equ	0xFF5
 12365                           prodh	equ	0xFF4
 12366                           prodl	equ	0xFF3
 12367                           intcon	equ	0xFF2
 12368                           postinc0	equ	0xFEE
 12369                           plusw0	equ	0xFEB
 12370                           wreg	equ	0xFE8
 12371                           indf1	equ	0xFE7
 12372                           postdec1	equ	0xFE5
 12373                           fsr1h	equ	0xFE2
 12374                           fsr1l	equ	0xFE1
 12375                           indf2	equ	0xFDF
 12376                           postinc2	equ	0xFDE
 12377                           postdec2	equ	0xFDD
 12378                           plusw2	equ	0xFDB
 12379                           fsr2h	equ	0xFDA
 12380                           fsr2l	equ	0xFD9
 12381                           status	equ	0xFD8
 12382                           
 12383 ;; *************** function _Timer0_Clear *****************
 12384 ;; Defined at:
 12385 ;;		line 20 in file "Library/Timer0.c"
 12386 ;; Parameters:    Size  Location     Type
 12387 ;;		None
 12388 ;; Auto vars:     Size  Location     Type
 12389 ;;		None
 12390 ;; Return value:  Size  Location     Type
 12391 ;;                  1    wreg      void 
 12392 ;; Registers used:
 12393 ;;		None
 12394 ;; Tracked objects:
 12395 ;;		On entry : 0/0
 12396 ;;		On exit  : 0/0
 12397 ;;		Unchanged: 0/0
 12398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12400 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12402 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12403 ;;Total ram usage:        0 bytes
 12404 ;; Hardware stack levels used:    1
 12405 ;; Hardware stack levels required when called:    7
 12406 ;; This function calls:
 12407 ;;		Nothing
 12408 ;; This function is called by:
 12409 ;;		_Timer0_Init
 12410 ;; This function uses a non-reentrant model
 12411 ;;
 12412                           
 12413                           	psect	text67
 12414  014BD8                     __ptext67:
 12415                           	opt stack 0
 12416  014BD8                     _Timer0_Clear:
 12417                           	opt stack 18
 12418                           
 12419                           ;Timer0.c: 22: TMR0 = COUNTER;
 12420                           
 12421                           ;incstack = 0
 12422  014BD8  C031  FFD6         	movff	_COUNTER,4054	;volatile
 12423  014BDC  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 12424                           
 12425                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 12426  014BE0  94F2               	bcf	intcon,2,c	;volatile
 12427  014BE2  0012               	return		;funcret
 12428  014BE4                     __end_of_Timer0_Clear:
 12429                           	opt stack 0
 12430                           tosu	equ	0xFFF
 12431                           tosh	equ	0xFFE
 12432                           tosl	equ	0xFFD
 12433                           pclath	equ	0xFFA
 12434                           tblptru	equ	0xFF8
 12435                           tblptrh	equ	0xFF7
 12436                           tblptrl	equ	0xFF6
 12437                           tablat	equ	0xFF5
 12438                           prodh	equ	0xFF4
 12439                           prodl	equ	0xFF3
 12440                           intcon	equ	0xFF2
 12441                           postinc0	equ	0xFEE
 12442                           plusw0	equ	0xFEB
 12443                           wreg	equ	0xFE8
 12444                           indf1	equ	0xFE7
 12445                           postdec1	equ	0xFE5
 12446                           fsr1h	equ	0xFE2
 12447                           fsr1l	equ	0xFE1
 12448                           indf2	equ	0xFDF
 12449                           postinc2	equ	0xFDE
 12450                           postdec2	equ	0xFDD
 12451                           plusw2	equ	0xFDB
 12452                           fsr2h	equ	0xFDA
 12453                           fsr2l	equ	0xFD9
 12454                           status	equ	0xFD8
 12455                           
 12456 ;; *************** function _MXK_Init *****************
 12457 ;; Defined at:
 12458 ;;		line 33 in file "Library/MXK.c"
 12459 ;; Parameters:    Size  Location     Type
 12460 ;;		None
 12461 ;; Auto vars:     Size  Location     Type
 12462 ;;		None
 12463 ;; Return value:  Size  Location     Type
 12464 ;;                  1    wreg      void 
 12465 ;; Registers used:
 12466 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12467 ;; Tracked objects:
 12468 ;;		On entry : 0/0
 12469 ;;		On exit  : 0/0
 12470 ;;		Unchanged: 0/0
 12471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12476 ;;Total ram usage:        0 bytes
 12477 ;; Hardware stack levels used:    1
 12478 ;; Hardware stack levels required when called:   16
 12479 ;; This function calls:
 12480 ;;		_LED_Init
 12481 ;;		_Port_Init
 12482 ;;		_Port_SetPin
 12483 ;;		_Port_SetPinType
 12484 ;;		_Port_SetQuadType
 12485 ;;		_Port_SetType
 12486 ;;		_delay_ms
 12487 ;; This function is called by:
 12488 ;;		_initialise
 12489 ;; This function uses a non-reentrant model
 12490 ;;
 12491                           
 12492                           	psect	text68
 12493  011C52                     __ptext68:
 12494                           	opt stack 0
 12495  011C52                     _MXK_Init:
 12496                           	opt stack 13
 12497                           
 12498                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 12499                           
 12500                           ;incstack = 0
 12501  011C52  0E01               	movlw	1
 12502  011C54  6E4B               	movwf	_Bus_State,c
 12503                           
 12504                           ;MXK.c: 36: lQueue = (Function)0;
 12505  011C56  0E00               	movlw	0
 12506  011C58  0100               	movlb	0	; () banked
 12507  011C5A  6F68               	movwf	_lQueue& (0+255),b	;volatile
 12508  011C5C  0E00               	movlw	0
 12509  011C5E  0100               	movlb	0	; () banked
 12510  011C60  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
 12511  011C62  0E00               	movlw	0
 12512  011C64  0100               	movlb	0	; () banked
 12513  011C66  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 12517  011C68  0EA2               	movlw	low _PortA
 12518  011C6A  0101               	movlb	1	; () banked
 12519  011C6C  6FC5               	movwf	Port_Init@pInput& (0+255),b
 12520  011C6E  0E01               	movlw	high _PortA
 12521  011C70  0101               	movlb	1	; () banked
 12522  011C72  6FC6               	movwf	(Port_Init@pInput+1)& (0+255),b
 12523  011C74  0E00               	movlw	0
 12524  011C76  0101               	movlb	1	; () banked
 12525  011C78  6FC7               	movwf	Port_Init@pPort& (0+255),b
 12526  011C7A  EC60  F08D         	call	_Port_Init	;wreg free
 12527                           
 12528                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 12529  011C7E  0E98               	movlw	low _PortB
 12530  011C80  0101               	movlb	1	; () banked
 12531  011C82  6FC5               	movwf	Port_Init@pInput& (0+255),b
 12532  011C84  0E01               	movlw	high _PortB
 12533  011C86  0101               	movlb	1	; () banked
 12534  011C88  6FC6               	movwf	(Port_Init@pInput+1)& (0+255),b
 12535  011C8A  0E01               	movlw	1
 12536  011C8C  0101               	movlb	1	; () banked
 12537  011C8E  6FC7               	movwf	Port_Init@pPort& (0+255),b
 12538  011C90  EC60  F08D         	call	_Port_Init	;wreg free
 12539                           
 12540                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 12541  011C94  0E91               	movlw	low _PortC
 12542  011C96  0101               	movlb	1	; () banked
 12543  011C98  6FC5               	movwf	Port_Init@pInput& (0+255),b
 12544  011C9A  0E00               	movlw	high _PortC
 12545  011C9C  0101               	movlb	1	; () banked
 12546  011C9E  6FC6               	movwf	(Port_Init@pInput+1)& (0+255),b
 12547  011CA0  0E02               	movlw	2
 12548  011CA2  0101               	movlb	1	; () banked
 12549  011CA4  6FC7               	movwf	Port_Init@pPort& (0+255),b
 12550  011CA6  EC60  F08D         	call	_Port_Init	;wreg free
 12551                           
 12552                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 12553  011CAA  0E87               	movlw	low _PortD
 12554  011CAC  0101               	movlb	1	; () banked
 12555  011CAE  6FC5               	movwf	Port_Init@pInput& (0+255),b
 12556  011CB0  0E00               	movlw	high _PortD
 12557  011CB2  0101               	movlb	1	; () banked
 12558  011CB4  6FC6               	movwf	(Port_Init@pInput+1)& (0+255),b
 12559  011CB6  0E03               	movlw	3
 12560  011CB8  0101               	movlb	1	; () banked
 12561  011CBA  6FC7               	movwf	Port_Init@pPort& (0+255),b
 12562  011CBC  EC60  F08D         	call	_Port_Init	;wreg free
 12563                           
 12564                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 12565  011CC0  0E7D               	movlw	low _PortE
 12566  011CC2  0101               	movlb	1	; () banked
 12567  011CC4  6FC5               	movwf	Port_Init@pInput& (0+255),b
 12568  011CC6  0E00               	movlw	high _PortE
 12569  011CC8  0101               	movlb	1	; () banked
 12570  011CCA  6FC6               	movwf	(Port_Init@pInput+1)& (0+255),b
 12571  011CCC  0E04               	movlw	4
 12572  011CCE  0101               	movlb	1	; () banked
 12573  011CD0  6FC7               	movwf	Port_Init@pPort& (0+255),b
 12574  011CD2  EC60  F08D         	call	_Port_Init	;wreg free
 12575                           
 12576                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 12577  011CD6  0EAC               	movlw	low _PortF
 12578  011CD8  0101               	movlb	1	; () banked
 12579  011CDA  6FC5               	movwf	Port_Init@pInput& (0+255),b
 12580  011CDC  0E01               	movlw	high _PortF
 12581  011CDE  0101               	movlb	1	; () banked
 12582  011CE0  6FC6               	movwf	(Port_Init@pInput+1)& (0+255),b
 12583  011CE2  0E05               	movlw	5
 12584  011CE4  0101               	movlb	1	; () banked
 12585  011CE6  6FC7               	movwf	Port_Init@pPort& (0+255),b
 12586  011CE8  EC60  F08D         	call	_Port_Init	;wreg free
 12587                           
 12588                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 12589  011CEC  0E8E               	movlw	low _PortG
 12590  011CEE  0101               	movlb	1	; () banked
 12591  011CF0  6FC5               	movwf	Port_Init@pInput& (0+255),b
 12592  011CF2  0E01               	movlw	high _PortG
 12593  011CF4  0101               	movlb	1	; () banked
 12594  011CF6  6FC6               	movwf	(Port_Init@pInput+1)& (0+255),b
 12595  011CF8  0E06               	movlw	6
 12596  011CFA  0101               	movlb	1	; () banked
 12597  011CFC  6FC7               	movwf	Port_Init@pPort& (0+255),b
 12598  011CFE  EC60  F08D         	call	_Port_Init	;wreg free
 12599                           
 12600                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 12601  011D02  0EAC               	movlw	low _PortF
 12602  011D04  0100               	movlb	0	; () banked
 12603  011D06  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 12604  011D08  0E01               	movlw	high _PortF
 12605  011D0A  0100               	movlb	0	; () banked
 12606  011D0C  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12607  011D0E  0E05               	movlw	5
 12608  011D10  0100               	movlb	0	; () banked
 12609  011D12  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 12610  011D14  0E00               	movlw	0
 12611  011D16  0100               	movlb	0	; () banked
 12612  011D18  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12613  011D1A  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12614                           
 12615                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 12616  011D1E  0E98               	movlw	low _PortB
 12617  011D20  0100               	movlb	0	; () banked
 12618  011D22  6FEE               	movwf	Port_SetQuadType@pInput& (0+255),b
 12619  011D24  0E01               	movlw	high _PortB
 12620  011D26  0100               	movlb	0	; () banked
 12621  011D28  6FEF               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 12622  011D2A  0E00               	movlw	0
 12623  011D2C  0100               	movlb	0	; () banked
 12624  011D2E  6FF0               	movwf	Port_SetQuadType@pQuad& (0+255),b
 12625  011D30  0E00               	movlw	0
 12626  011D32  0100               	movlb	0	; () banked
 12627  011D34  6FF1               	movwf	Port_SetQuadType@pType& (0+255),b
 12628  011D36  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 12629                           
 12630                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 12631  011D3A  0EAC               	movlw	low _PortF
 12632  011D3C  0100               	movlb	0	; () banked
 12633  011D3E  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 12634  011D40  0E01               	movlw	high _PortF
 12635  011D42  0100               	movlb	0	; () banked
 12636  011D44  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 12637  011D46  0E06               	movlw	6
 12638  011D48  0100               	movlb	0	; () banked
 12639  011D4A  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 12640  011D4C  0E03               	movlw	3
 12641  011D4E  0100               	movlb	0	; () banked
 12642  011D50  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12643  011D52  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12644                           
 12645                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 12646  011D56  0E8E               	movlw	low _PortG
 12647  011D58  0100               	movlb	0	; () banked
 12648  011D5A  6FF2               	movwf	Port_SetType@pInput& (0+255),b
 12649  011D5C  0E01               	movlw	high _PortG
 12650  011D5E  0100               	movlb	0	; () banked
 12651  011D60  6FF3               	movwf	(Port_SetType@pInput+1)& (0+255),b
 12652  011D62  0E03               	movlw	3
 12653  011D64  0100               	movlb	0	; () banked
 12654  011D66  6FF4               	movwf	Port_SetType@pType& (0+255),b
 12655  011D68  EC97  F088         	call	_Port_SetType	;wreg free
 12656                           
 12657                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 12658  011D6C  0E8E               	movlw	low _PortG
 12659  011D6E  0100               	movlb	0	; () banked
 12660  011D70  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 12661  011D72  0E01               	movlw	high _PortG
 12662  011D74  0100               	movlb	0	; () banked
 12663  011D76  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12664  011D78  0E04               	movlw	4
 12665  011D7A  0100               	movlb	0	; () banked
 12666  011D7C  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 12667  011D7E  0E00               	movlw	0
 12668  011D80  0100               	movlb	0	; () banked
 12669  011D82  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 12670  011D84  EC6E  F094         	call	_Port_SetPin	;wreg free
 12671                           
 12672                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 12673  011D88  0EAC               	movlw	low _PortF
 12674  011D8A  0100               	movlb	0	; () banked
 12675  011D8C  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 12676  011D8E  0E01               	movlw	high _PortF
 12677  011D90  0100               	movlb	0	; () banked
 12678  011D92  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12679  011D94  0E06               	movlw	6
 12680  011D96  0100               	movlb	0	; () banked
 12681  011D98  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 12682  011D9A  0E01               	movlw	1
 12683  011D9C  0100               	movlb	0	; () banked
 12684  011D9E  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 12685  011DA0  EC6E  F094         	call	_Port_SetPin	;wreg free
 12686                           
 12687                           ;MXK.c: 55: LED_Init(eLED1);
 12688  011DA4  0E00               	movlw	0
 12689  011DA6  EC30  F09F         	call	_LED_Init
 12690                           
 12691                           ;MXK.c: 56: LED_Init(eLED2);
 12692  011DAA  0E01               	movlw	1
 12693  011DAC  EC30  F09F         	call	_LED_Init
 12694                           
 12695                           ;MXK.c: 58: PIR1 = 0;
 12696  011DB0  0E00               	movlw	0
 12697  011DB2  6E9E               	movwf	3998,c	;volatile
 12698                           
 12699                           ;MXK.c: 59: PIR2 = 0;
 12700  011DB4  0E00               	movlw	0
 12701  011DB6  6EA1               	movwf	4001,c	;volatile
 12702                           
 12703                           ;MXK.c: 60: PIR3 = 0;
 12704  011DB8  0E00               	movlw	0
 12705  011DBA  6EA4               	movwf	4004,c	;volatile
 12706                           
 12707                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 12708  011DBC  8E9B               	bsf	3995,7,c	;volatile
 12709                           
 12710                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 12711  011DBE  8C9B               	bsf	3995,6,c	;volatile
 12712                           
 12713                           ;MXK.c: 66: delay_ms(100);
 12714  011DC0  0E00               	movlw	0
 12715  011DC2  0100               	movlb	0	; () banked
 12716  011DC4  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 12717  011DC6  0E64               	movlw	100
 12718  011DC8  6FB8               	movwf	delay_ms@ms& (0+255),b
 12719  011DCA  EC30  F09E         	call	_delay_ms	;wreg free
 12720                           
 12721                           ;MXK.c: 68: RCONbits.IPEN = 1;
 12722  011DCE  8ED0               	bsf	4048,7,c	;volatile
 12723  011DD0  0012               	return		;funcret
 12724  011DD2                     __end_of_MXK_Init:
 12725                           	opt stack 0
 12726                           tosu	equ	0xFFF
 12727                           tosh	equ	0xFFE
 12728                           tosl	equ	0xFFD
 12729                           pclath	equ	0xFFA
 12730                           tblptru	equ	0xFF8
 12731                           tblptrh	equ	0xFF7
 12732                           tblptrl	equ	0xFF6
 12733                           tablat	equ	0xFF5
 12734                           prodh	equ	0xFF4
 12735                           prodl	equ	0xFF3
 12736                           intcon	equ	0xFF2
 12737                           postinc0	equ	0xFEE
 12738                           plusw0	equ	0xFEB
 12739                           wreg	equ	0xFE8
 12740                           indf1	equ	0xFE7
 12741                           postdec1	equ	0xFE5
 12742                           fsr1h	equ	0xFE2
 12743                           fsr1l	equ	0xFE1
 12744                           indf2	equ	0xFDF
 12745                           postinc2	equ	0xFDE
 12746                           postdec2	equ	0xFDD
 12747                           plusw2	equ	0xFDB
 12748                           fsr2h	equ	0xFDA
 12749                           fsr2l	equ	0xFD9
 12750                           status	equ	0xFD8
 12751                           
 12752 ;; *************** function _Port_Init *****************
 12753 ;; Defined at:
 12754 ;;		line 150 in file "Library/Port.c"
 12755 ;; Parameters:    Size  Location     Type
 12756 ;;  pInput          2    3[BANK1 ] const PTR struct Port
 12757 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 12758 ;;		 -> PortD(10), PortC(10), PortF(10), 
 12759 ;;  pPort           1    5[BANK1 ] enum E6786
 12760 ;; Auto vars:     Size  Location     Type
 12761 ;;  i               1    8[BANK1 ] unsigned char 
 12762 ;; Return value:  Size  Location     Type
 12763 ;;                  1    wreg      void 
 12764 ;; Registers used:
 12765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12766 ;; Tracked objects:
 12767 ;;		On entry : 0/0
 12768 ;;		On exit  : 0/0
 12769 ;;		Unchanged: 0/0
 12770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12771 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12772 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12773 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12774 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12775 ;;Total ram usage:        6 bytes
 12776 ;; Hardware stack levels used:    1
 12777 ;; Hardware stack levels required when called:   15
 12778 ;; This function calls:
 12779 ;;		_GetPortPORT
 12780 ;;		_GetPortProperties
 12781 ;;		_GetPortTRIS
 12782 ;;		_Port_Set
 12783 ;;		_Port_SetPinType
 12784 ;;		_Port_SetType
 12785 ;;		_Word_GetPair
 12786 ;; This function is called by:
 12787 ;;		_MXK_Init
 12788 ;; This function uses a non-reentrant model
 12789 ;;
 12790                           
 12791                           	psect	text69
 12792  011AC0                     __ptext69:
 12793                           	opt stack 0
 12794  011AC0                     _Port_Init:
 12795                           	opt stack 13
 12796                           
 12797                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 12798                           
 12799                           ;incstack = 0
 12800  011AC0  0101               	movlb	1	; () banked
 12801  011AC2  51C7               	movf	Port_Init@pPort& (0+255),w,b
 12802  011AC4  EC58  F098         	call	_GetPortProperties
 12803  011AC8  C1C5  FFD9         	movff	Port_Init@pInput,fsr2l
 12804  011ACC  C1C6  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12805  011AD0  0100               	movlb	0	; () banked
 12806  011AD2  C0B8  FFDE         	movff	?_GetPortProperties,postinc2
 12807  011AD6  0100               	movlb	0	; () banked
 12808  011AD8  C0B9  FFDD         	movff	?_GetPortProperties+1,postdec2
 12809                           
 12810                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 12811  011ADC  0101               	movlb	1	; () banked
 12812  011ADE  51C7               	movf	Port_Init@pPort& (0+255),w,b
 12813  011AE0  ECAB  F098         	call	_GetPortPORT
 12814  011AE4  0101               	movlb	1	; () banked
 12815  011AE6  EE20 F006          	lfsr	2,6
 12816  011AEA  51C5               	movf	Port_Init@pInput& (0+255),w,b
 12817  011AEC  26D9               	addwf	fsr2l,f,c
 12818  011AEE  51C6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12819  011AF0  22DA               	addwfc	fsr2h,f,c
 12820  011AF2  0100               	movlb	0	; () banked
 12821  011AF4  C0B8  FFDE         	movff	?_GetPortPORT,postinc2
 12822  011AF8  0100               	movlb	0	; () banked
 12823  011AFA  C0B9  FFDD         	movff	?_GetPortPORT+1,postdec2
 12824                           
 12825                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 12826  011AFE  0101               	movlb	1	; () banked
 12827  011B00  51C7               	movf	Port_Init@pPort& (0+255),w,b
 12828  011B02  ECAB  F098         	call	_GetPortPORT
 12829  011B06  0101               	movlb	1	; () banked
 12830  011B08  EE20 F004          	lfsr	2,4
 12831  011B0C  51C5               	movf	Port_Init@pInput& (0+255),w,b
 12832  011B0E  26D9               	addwf	fsr2l,f,c
 12833  011B10  51C6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12834  011B12  22DA               	addwfc	fsr2h,f,c
 12835  011B14  0100               	movlb	0	; () banked
 12836  011B16  C0B8  FFDE         	movff	?_GetPortPORT,postinc2
 12837  011B1A  0100               	movlb	0	; () banked
 12838  011B1C  C0B9  FFDD         	movff	?_GetPortPORT+1,postdec2
 12839                           
 12840                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 12841  011B20  0101               	movlb	1	; () banked
 12842  011B22  51C7               	movf	Port_Init@pPort& (0+255),w,b
 12843  011B24  EC05  F098         	call	_GetPortTRIS
 12844  011B28  0101               	movlb	1	; () banked
 12845  011B2A  EE20 F002          	lfsr	2,2
 12846  011B2E  51C5               	movf	Port_Init@pInput& (0+255),w,b
 12847  011B30  26D9               	addwf	fsr2l,f,c
 12848  011B32  51C6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12849  011B34  22DA               	addwfc	fsr2h,f,c
 12850  011B36  0100               	movlb	0	; () banked
 12851  011B38  C0B8  FFDE         	movff	?_GetPortTRIS,postinc2
 12852  011B3C  0100               	movlb	0	; () banked
 12853  011B3E  C0B9  FFDD         	movff	?_GetPortTRIS+1,postdec2
 12854                           
 12855                           ; BSR set to: 0
 12856                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 12857  011B42  0101               	movlb	1	; () banked
 12858  011B44  EE20 F004          	lfsr	2,4
 12859  011B48  51C5               	movf	Port_Init@pInput& (0+255),w,b
 12860  011B4A  26D9               	addwf	fsr2l,f,c
 12861  011B4C  51C6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12862  011B4E  22DA               	addwfc	fsr2h,f,c
 12863  011B50  CFDE F1C8          	movff	postinc2,??_Port_Init
 12864  011B54  CFDD F1C9          	movff	postdec2,??_Port_Init+1
 12865  011B58  C1C8  FFD9         	movff	??_Port_Init,fsr2l
 12866  011B5C  C1C9  FFDA         	movff	??_Port_Init+1,fsr2h
 12867  011B60  0E00               	movlw	0
 12868  011B62  6EDF               	movwf	indf2,c
 12869                           
 12870                           ; BSR set to: 1
 12871                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 12872  011B64  0101               	movlb	1	; () banked
 12873  011B66  EE20 F002          	lfsr	2,2
 12874  011B6A  51C5               	movf	Port_Init@pInput& (0+255),w,b
 12875  011B6C  26D9               	addwf	fsr2l,f,c
 12876  011B6E  51C6               	movf	(Port_Init@pInput+1)& (0+255),w,b
 12877  011B70  22DA               	addwfc	fsr2h,f,c
 12878  011B72  CFDE F1C8          	movff	postinc2,??_Port_Init
 12879  011B76  CFDD F1C9          	movff	postdec2,??_Port_Init+1
 12880  011B7A  C1C8  FFD9         	movff	??_Port_Init,fsr2l
 12881  011B7E  C1C9  FFDA         	movff	??_Port_Init+1,fsr2h
 12882  011B82  0EFF               	movlw	255
 12883  011B84  6EDF               	movwf	indf2,c
 12884                           
 12885                           ; BSR set to: 1
 12886                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 12887  011B86  C1C5  F0F2         	movff	Port_Init@pInput,Port_SetType@pInput
 12888  011B8A  C1C6  F0F3         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 12889  011B8E  0E00               	movlw	0
 12890  011B90  0100               	movlb	0	; () banked
 12891  011B92  6FF4               	movwf	Port_SetType@pType& (0+255),b
 12892  011B94  EC97  F088         	call	_Port_SetType	;wreg free
 12893                           
 12894                           ;Port.c: 166: UINT8 i;
 12895                           ;Port.c: 167: for (i=0; i<8; i++)
 12896  011B98  0E00               	movlw	0
 12897  011B9A  0101               	movlb	1	; () banked
 12898  011B9C  6FCA               	movwf	Port_Init@i& (0+255),b
 12899  011B9E                     l11841:
 12900                           
 12901                           ; BSR set to: 1
 12902  011B9E  0E07               	movlw	7
 12903  011BA0  0101               	movlb	1	; () banked
 12904  011BA2  65CA               	cpfsgt	Port_Init@i& (0+255),b
 12905  011BA4  D031               	goto	l403
 12906  011BA6  D04B               	goto	u8240
 12907  011BA8                     
 12908                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 12909                           
 12910                           ; BSR set to: 1
 12911  011BA8  C1C5  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12912  011BAC  C1C6  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12913  011BB0  C1CA  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 12914  011BB4  0E03               	movlw	3
 12915  011BB6  0100               	movlb	0	; () banked
 12916  011BB8  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12917  011BBA  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12918                           
 12919                           ;Port.c: 173: break;
 12920  011BBE  D03C               	goto	l405
 12921  011BC0                     
 12922                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 12923  011BC0  C1C5  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12924  011BC4  C1C6  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12925  011BC8  C1CA  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 12926  011BCC  0E02               	movlw	2
 12927  011BCE  0100               	movlb	0	; () banked
 12928  011BD0  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12929  011BD2  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12930                           
 12931                           ;Port.c: 176: break;
 12932  011BD6  D030               	goto	l405
 12933  011BD8                     
 12934                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 12935  011BD8  C1C5  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12936  011BDC  C1C6  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12937  011BE0  C1CA  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 12938  011BE4  0E01               	movlw	1
 12939  011BE6  0100               	movlb	0	; () banked
 12940  011BE8  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12941  011BEA  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12942                           
 12943                           ;Port.c: 179: break;
 12944  011BEE  D024               	goto	l405
 12945  011BF0                     
 12946                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 12947  011BF0  C1C5  F0DE         	movff	Port_Init@pInput,Port_SetPinType@pInput
 12948  011BF4  C1C6  F0DF         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 12949  011BF8  C1CA  F0E0         	movff	Port_Init@i,Port_SetPinType@pPin
 12950  011BFC  0E00               	movlw	0
 12951  011BFE  0100               	movlb	0	; () banked
 12952  011C00  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 12953  011C02  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 12954                           
 12955                           ;Port.c: 183: }
 12956                           
 12957                           ;Port.c: 182: break;
 12958  011C06  D018               	goto	l405
 12959  011C08                     l403:
 12960  011C08  C1C5  FFD9         	movff	Port_Init@pInput,fsr2l
 12961  011C0C  C1C6  FFDA         	movff	Port_Init@pInput+1,fsr2h
 12962  011C10  CFDE F0C4          	movff	postinc2,Word_GetPair@pInput
 12963  011C14  CFDD F0C5          	movff	postdec2,Word_GetPair@pInput+1
 12964  011C18  C1CA  F0C6         	movff	Port_Init@i,Word_GetPair@pPair
 12965  011C1C  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 12966                           
 12967                           ; Switch size 1, requested type "space"
 12968                           ; Number of cases is 4, Range of values is 0 to 3
 12969                           ; switch strategies available:
 12970                           ; Name         Instructions Cycles
 12971                           ; simple_byte           13     7 (average)
 12972                           ;	Chosen strategy is simple_byte
 12973  011C20  0A00               	xorlw	0	; case 0
 12974  011C22  B4D8               	btfsc	status,2,c
 12975  011C24  D7C1               	goto	l404
 12976  011C26  0A01               	xorlw	1	; case 1
 12977  011C28  B4D8               	btfsc	status,2,c
 12978  011C2A  D7D6               	goto	l407
 12979  011C2C  0A03               	xorlw	3	; case 2
 12980  011C2E  B4D8               	btfsc	status,2,c
 12981  011C30  D7C7               	goto	l406
 12982  011C32  0A01               	xorlw	1	; case 3
 12983  011C34  B4D8               	btfsc	status,2,c
 12984  011C36  D7DC               	goto	l408
 12985  011C38                     l405:
 12986  011C38  0101               	movlb	1	; () banked
 12987  011C3A  2BCA               	incf	Port_Init@i& (0+255),f,b
 12988  011C3C  D7B0               	goto	l11841
 12989  011C3E                     u8240:
 12990                           
 12991                           ; BSR set to: 1
 12992                           ;Port.c: 184: }
 12993                           ;Port.c: 185: Port_Set(pInput, 0x00);
 12994                           
 12995                           ; BSR set to: 1
 12996  011C3E  C1C5  F0C7         	movff	Port_Init@pInput,Port_Set@pInput
 12997  011C42  C1C6  F0C8         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 12998  011C46  0E00               	movlw	0
 12999  011C48  0100               	movlb	0	; () banked
 13000  011C4A  6FC9               	movwf	Port_Set@pValue& (0+255),b
 13001  011C4C  EC0F  F082         	call	_Port_Set	;wreg free
 13002  011C50  0012               	return		;funcret
 13003  011C52                     __end_of_Port_Init:
 13004                           	opt stack 0
 13005                           tosu	equ	0xFFF
 13006                           tosh	equ	0xFFE
 13007                           tosl	equ	0xFFD
 13008                           pclath	equ	0xFFA
 13009                           tblptru	equ	0xFF8
 13010                           tblptrh	equ	0xFF7
 13011                           tblptrl	equ	0xFF6
 13012                           tablat	equ	0xFF5
 13013                           prodh	equ	0xFF4
 13014                           prodl	equ	0xFF3
 13015                           intcon	equ	0xFF2
 13016                           postinc0	equ	0xFEE
 13017                           plusw0	equ	0xFEB
 13018                           wreg	equ	0xFE8
 13019                           indf1	equ	0xFE7
 13020                           postdec1	equ	0xFE5
 13021                           fsr1h	equ	0xFE2
 13022                           fsr1l	equ	0xFE1
 13023                           indf2	equ	0xFDF
 13024                           postinc2	equ	0xFDE
 13025                           postdec2	equ	0xFDD
 13026                           plusw2	equ	0xFDB
 13027                           fsr2h	equ	0xFDA
 13028                           fsr2l	equ	0xFD9
 13029                           status	equ	0xFD8
 13030                           
 13031 ;; *************** function _Port_SetType *****************
 13032 ;; Defined at:
 13033 ;;		line 513 in file "Library/Port.c"
 13034 ;; Parameters:    Size  Location     Type
 13035 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 13036 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13037 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13038 ;;  pType           1   60[BANK0 ] enum E6795
 13039 ;; Auto vars:     Size  Location     Type
 13040 ;;  Output          1    2[BANK1 ] enum E6475
 13041 ;; Return value:  Size  Location     Type
 13042 ;;                  1    wreg      enum E6475
 13043 ;; Registers used:
 13044 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13045 ;; Tracked objects:
 13046 ;;		On entry : 0/0
 13047 ;;		On exit  : 0/0
 13048 ;;		Unchanged: 0/0
 13049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13050 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13051 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13052 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Totals:         0       3       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;Total ram usage:        6 bytes
 13055 ;; Hardware stack levels used:    1
 13056 ;; Hardware stack levels required when called:   14
 13057 ;; This function calls:
 13058 ;;		_Port_CheckPortType
 13059 ;;		_Word_SetPair
 13060 ;; This function is called by:
 13061 ;;		_Port_Init
 13062 ;;		_MXK_Init
 13063 ;; This function uses a non-reentrant model
 13064 ;;
 13065                           
 13066                           	psect	text70
 13067  01112E                     __ptext70:
 13068                           	opt stack 0
 13069  01112E                     _Port_SetType:
 13070                           	opt stack 14
 13071                           
 13072                           ;Port.c: 515: ePinError Output = ePinErrorState;
 13073                           
 13074                           ;incstack = 0
 13075  01112E  0E05               	movlw	5
 13076  011130  0101               	movlb	1	; () banked
 13077  011132  6FC4               	movwf	Port_SetType@Output& (0+255),b
 13078                           
 13079                           ;Port.c: 517: switch (pType)
 13080  011134  D07A               	goto	l509
 13081  011136                     
 13082                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 13083                           
 13084                           ; BSR set to: 1
 13085  011136  0100               	movlb	0	; () banked
 13086  011138  EE20 F002          	lfsr	2,2
 13087  01113C  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 13088  01113E  26D9               	addwf	fsr2l,f,c
 13089  011140  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 13090  011142  22DA               	addwfc	fsr2h,f,c
 13091  011144  CFDE F1C2          	movff	postinc2,??_Port_SetType
 13092  011148  CFDD F1C3          	movff	postdec2,??_Port_SetType+1
 13093  01114C  C1C2  FFD9         	movff	??_Port_SetType,fsr2l
 13094  011150  C1C3  FFDA         	movff	??_Port_SetType+1,fsr2h
 13095  011154  0EFF               	movlw	255
 13096  011156  D067               	goto	L4
 13097  011158                     
 13098                           ; BSR set to: 0
 13099                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 13100                           
 13101                           ; BSR set to: 0
 13102  011158  C0F2  F0EE         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 13103  01115C  C0F3  F0EF         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 13104  011160  0E01               	movlw	1
 13105  011162  0100               	movlb	0	; () banked
 13106  011164  6FF0               	movwf	Port_CheckPortType@pDrive& (0+255),b
 13107  011166  EC2F  F0A1         	call	_Port_CheckPortType	;wreg free
 13108  01116A  0101               	movlb	1	; () banked
 13109  01116C  6FC4               	movwf	Port_SetType@Output& (0+255),b
 13110  01116E  0101               	movlb	1	; () banked
 13111  011170  51C4               	movf	Port_SetType@Output& (0+255),w,b
 13112  011172  A4D8               	btfss	status,2,c
 13113  011174  0012               	return	
 13114                           
 13115                           ; BSR set to: 1
 13116                           ;Port.c: 527: {
 13117                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 13118  011176  0100               	movlb	0	; () banked
 13119  011178  EE20 F002          	lfsr	2,2
 13120  01117C  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 13121  01117E  26D9               	addwf	fsr2l,f,c
 13122  011180  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 13123  011182  22DA               	addwfc	fsr2h,f,c
 13124  011184  CFDE F1C2          	movff	postinc2,??_Port_SetType
 13125  011188  CFDD F1C3          	movff	postdec2,??_Port_SetType+1
 13126  01118C  C1C2  FFD9         	movff	??_Port_SetType,fsr2l
 13127  011190  C1C3  FFDA         	movff	??_Port_SetType+1,fsr2h
 13128  011194  0E00               	movlw	0
 13129  011196  6EDF               	movwf	indf2,c
 13130                           
 13131                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 13132  011198  0100               	movlb	0	; () banked
 13133  01119A  EE20 F004          	lfsr	2,4
 13134  01119E  D036               	goto	L9
 13135  0111A0                     
 13136                           ; BSR set to: 0
 13137                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 13138                           
 13139                           ; BSR set to: 0
 13140  0111A0  C0F2  F0EE         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 13141  0111A4  C0F3  F0EF         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 13142  0111A8  0E02               	movlw	2
 13143  0111AA  0100               	movlb	0	; () banked
 13144  0111AC  6FF0               	movwf	Port_CheckPortType@pDrive& (0+255),b
 13145  0111AE  EC2F  F0A1         	call	_Port_CheckPortType	;wreg free
 13146  0111B2  0101               	movlb	1	; () banked
 13147  0111B4  6FC4               	movwf	Port_SetType@Output& (0+255),b
 13148  0111B6  0101               	movlb	1	; () banked
 13149  0111B8  51C4               	movf	Port_SetType@Output& (0+255),w,b
 13150  0111BA  A4D8               	btfss	status,2,c
 13151  0111BC  0012               	return	
 13152                           
 13153                           ; BSR set to: 1
 13154                           ;Port.c: 538: {
 13155                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 13156  0111BE  0100               	movlb	0	; () banked
 13157  0111C0  EE20 F002          	lfsr	2,2
 13158  0111C4  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 13159  0111C6  26D9               	addwf	fsr2l,f,c
 13160  0111C8  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 13161  0111CA  22DA               	addwfc	fsr2h,f,c
 13162  0111CC  CFDE F1C2          	movff	postinc2,??_Port_SetType
 13163  0111D0  CFDD F1C3          	movff	postdec2,??_Port_SetType+1
 13164  0111D4  C1C2  FFD9         	movff	??_Port_SetType,fsr2l
 13165  0111D8  C1C3  FFDA         	movff	??_Port_SetType+1,fsr2h
 13166  0111DC  0EFF               	movlw	255
 13167  0111DE  6EDF               	movwf	indf2,c
 13168                           
 13169                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 13170  0111E0  0100               	movlb	0	; () banked
 13171  0111E2  EE20 F004          	lfsr	2,4
 13172  0111E6  D7AA               	goto	L5
 13173  0111E8                     
 13174                           ; BSR set to: 0
 13175                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 13176                           
 13177                           ; BSR set to: 0
 13178  0111E8  C0F2  F0EE         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 13179  0111EC  C0F3  F0EF         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 13180  0111F0  0E00               	movlw	0
 13181  0111F2  0100               	movlb	0	; () banked
 13182  0111F4  6FF0               	movwf	Port_CheckPortType@pDrive& (0+255),b
 13183  0111F6  EC2F  F0A1         	call	_Port_CheckPortType	;wreg free
 13184  0111FA  0101               	movlb	1	; () banked
 13185  0111FC  6FC4               	movwf	Port_SetType@Output& (0+255),b
 13186  0111FE  0101               	movlb	1	; () banked
 13187  011200  51C4               	movf	Port_SetType@Output& (0+255),w,b
 13188  011202  A4D8               	btfss	status,2,c
 13189  011204  0012               	return	
 13190                           
 13191                           ; BSR set to: 1
 13192                           ;Port.c: 549: {
 13193                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 13194  011206  0100               	movlb	0	; () banked
 13195  011208  EE20 F002          	lfsr	2,2
 13196  01120C                     L9:
 13197  01120C  51F2               	movf	Port_SetType@pInput& (0+255),w,b
 13198  01120E  26D9               	addwf	fsr2l,f,c
 13199  011210  51F3               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 13200  011212  22DA               	addwfc	fsr2h,f,c
 13201  011214  CFDE F1C2          	movff	postinc2,??_Port_SetType
 13202  011218  CFDD F1C3          	movff	postdec2,??_Port_SetType+1
 13203  01121C  C1C2  FFD9         	movff	??_Port_SetType,fsr2l
 13204  011220  C1C3  FFDA         	movff	??_Port_SetType+1,fsr2h
 13205  011224  0E00               	movlw	0
 13206  011226                     L4:
 13207  011226  6EDF               	movwf	indf2,c
 13208                           
 13209                           ;Port.c: 552: }
 13210  011228  D00E               	goto	l511
 13211  01122A                     l509:
 13212                           
 13213                           ; BSR set to: 0
 13214  01122A  0100               	movlb	0	; () banked
 13215  01122C  51F4               	movf	Port_SetType@pType& (0+255),w,b
 13216                           
 13217                           ; Switch size 1, requested type "space"
 13218                           ; Number of cases is 4, Range of values is 0 to 3
 13219                           ; switch strategies available:
 13220                           ; Name         Instructions Cycles
 13221                           ; simple_byte           13     7 (average)
 13222                           ;	Chosen strategy is simple_byte
 13223  01122E  0A00               	xorlw	0	; case 0
 13224  011230  B4D8               	btfsc	status,2,c
 13225  011232  D781               	goto	l510
 13226  011234  0A01               	xorlw	1	; case 1
 13227  011236  B4D8               	btfsc	status,2,c
 13228  011238  D78F               	goto	l512
 13229  01123A  0A03               	xorlw	3	; case 2
 13230  01123C  B4D8               	btfsc	status,2,c
 13231  01123E  D7B0               	goto	l516
 13232  011240  0A01               	xorlw	1	; case 3
 13233  011242  B4D8               	btfsc	status,2,c
 13234  011244  D7D1               	goto	l519
 13235  011246                     l511:
 13236                           
 13237                           ; BSR set to: 0
 13238                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 13239                           
 13240                           ; BSR set to: 0
 13241  011246  0E08               	movlw	8
 13242  011248  0100               	movlb	0	; () banked
 13243  01124A  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13244  01124C  0100               	movlb	0	; () banked
 13245  01124E  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13246  011250  0E00               	movlw	0
 13247  011252  0100               	movlb	0	; () banked
 13248  011254  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13249  011256  0100               	movlb	0	; () banked
 13250  011258  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13251  01125A  0E00               	movlw	0
 13252  01125C  0100               	movlb	0	; () banked
 13253  01125E  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13254  011260  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13255  011264  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13256                           
 13257                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 13258  011268  0E08               	movlw	8
 13259  01126A  0100               	movlb	0	; () banked
 13260  01126C  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13261  01126E  0100               	movlb	0	; () banked
 13262  011270  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13263  011272  0E00               	movlw	0
 13264  011274  0100               	movlb	0	; () banked
 13265  011276  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13266  011278  0100               	movlb	0	; () banked
 13267  01127A  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13268  01127C  0E01               	movlw	1
 13269  01127E  0100               	movlb	0	; () banked
 13270  011280  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13271  011282  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13272  011286  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13273                           
 13274                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 13275  01128A  0E08               	movlw	8
 13276  01128C  0100               	movlb	0	; () banked
 13277  01128E  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13278  011290  0100               	movlb	0	; () banked
 13279  011292  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13280  011294  0E00               	movlw	0
 13281  011296  0100               	movlb	0	; () banked
 13282  011298  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13283  01129A  0100               	movlb	0	; () banked
 13284  01129C  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13285  01129E  0E02               	movlw	2
 13286  0112A0  0100               	movlb	0	; () banked
 13287  0112A2  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13288  0112A4  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13289  0112A8  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13290                           
 13291                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 13292  0112AC  0E08               	movlw	8
 13293  0112AE  0100               	movlb	0	; () banked
 13294  0112B0  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13295  0112B2  0100               	movlb	0	; () banked
 13296  0112B4  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13297  0112B6  0E00               	movlw	0
 13298  0112B8  0100               	movlb	0	; () banked
 13299  0112BA  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13300  0112BC  0100               	movlb	0	; () banked
 13301  0112BE  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13302  0112C0  0E03               	movlw	3
 13303  0112C2  0100               	movlb	0	; () banked
 13304  0112C4  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13305  0112C6  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13306  0112CA  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13307                           
 13308                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 13309  0112CE  0E08               	movlw	8
 13310  0112D0  0100               	movlb	0	; () banked
 13311  0112D2  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13312  0112D4  0100               	movlb	0	; () banked
 13313  0112D6  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13314  0112D8  0E00               	movlw	0
 13315  0112DA  0100               	movlb	0	; () banked
 13316  0112DC  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13317  0112DE  0100               	movlb	0	; () banked
 13318  0112E0  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13319  0112E2  0E04               	movlw	4
 13320  0112E4  0100               	movlb	0	; () banked
 13321  0112E6  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13322  0112E8  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13323  0112EC  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13324                           
 13325                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 13326  0112F0  0E08               	movlw	8
 13327  0112F2  0100               	movlb	0	; () banked
 13328  0112F4  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13329  0112F6  0100               	movlb	0	; () banked
 13330  0112F8  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13331  0112FA  0E00               	movlw	0
 13332  0112FC  0100               	movlb	0	; () banked
 13333  0112FE  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13334  011300  0100               	movlb	0	; () banked
 13335  011302  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13336  011304  0E05               	movlw	5
 13337  011306  0100               	movlb	0	; () banked
 13338  011308  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13339  01130A  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13340  01130E  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13341                           
 13342                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 13343  011312  0E08               	movlw	8
 13344  011314  0100               	movlb	0	; () banked
 13345  011316  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13346  011318  0100               	movlb	0	; () banked
 13347  01131A  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13348  01131C  0E00               	movlw	0
 13349  01131E  0100               	movlb	0	; () banked
 13350  011320  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13351  011322  0100               	movlb	0	; () banked
 13352  011324  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13353  011326  0E06               	movlw	6
 13354  011328  0100               	movlb	0	; () banked
 13355  01132A  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13356  01132C  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13357  011330  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13358                           
 13359                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 13360  011334  0E08               	movlw	8
 13361  011336  0100               	movlb	0	; () banked
 13362  011338  25F2               	addwf	Port_SetType@pInput& (0+255),w,b
 13363  01133A  0100               	movlb	0	; () banked
 13364  01133C  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 13365  01133E  0E00               	movlw	0
 13366  011340  0100               	movlb	0	; () banked
 13367  011342  21F3               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 13368  011344  0100               	movlb	0	; () banked
 13369  011346  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 13370  011348  0E07               	movlw	7
 13371  01134A  0100               	movlb	0	; () banked
 13372  01134C  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 13373  01134E  C0F4  F0CA         	movff	Port_SetType@pType,Word_SetPair@pValue
 13374  011352  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 13375  011356  0012               	return	
 13376  011358                     __end_of_Port_SetType:
 13377                           	opt stack 0
 13378                           tosu	equ	0xFFF
 13379                           tosh	equ	0xFFE
 13380                           tosl	equ	0xFFD
 13381                           pclath	equ	0xFFA
 13382                           tblptru	equ	0xFF8
 13383                           tblptrh	equ	0xFF7
 13384                           tblptrl	equ	0xFF6
 13385                           tablat	equ	0xFF5
 13386                           prodh	equ	0xFF4
 13387                           prodl	equ	0xFF3
 13388                           intcon	equ	0xFF2
 13389                           postinc0	equ	0xFEE
 13390                           plusw0	equ	0xFEB
 13391                           wreg	equ	0xFE8
 13392                           indf1	equ	0xFE7
 13393                           postdec1	equ	0xFE5
 13394                           fsr1h	equ	0xFE2
 13395                           fsr1l	equ	0xFE1
 13396                           indf2	equ	0xFDF
 13397                           postinc2	equ	0xFDE
 13398                           postdec2	equ	0xFDD
 13399                           plusw2	equ	0xFDB
 13400                           fsr2h	equ	0xFDA
 13401                           fsr2l	equ	0xFD9
 13402                           status	equ	0xFD8
 13403                           
 13404 ;; *************** function _Port_CheckPortType *****************
 13405 ;; Defined at:
 13406 ;;		line 138 in file "Library/Port.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 13409 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13410 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13411 ;;  pDrive          1   56[BANK0 ] enum E6469
 13412 ;; Auto vars:     Size  Location     Type
 13413 ;;  Output          1   57[BANK0 ] enum E6475
 13414 ;; Return value:  Size  Location     Type
 13415 ;;                  1    wreg      enum E6475
 13416 ;; Registers used:
 13417 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13418 ;; Tracked objects:
 13419 ;;		On entry : 0/0
 13420 ;;		On exit  : 0/0
 13421 ;;		Unchanged: 0/0
 13422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13423 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13426 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13427 ;;Total ram usage:        4 bytes
 13428 ;; Hardware stack levels used:    1
 13429 ;; Hardware stack levels required when called:   13
 13430 ;; This function calls:
 13431 ;;		_Port_CheckQuadType
 13432 ;; This function is called by:
 13433 ;;		_Port_SetType
 13434 ;; This function uses a non-reentrant model
 13435 ;;
 13436                           
 13437                           	psect	text71
 13438  01425E                     __ptext71:
 13439                           	opt stack 0
 13440  01425E                     _Port_CheckPortType:
 13441                           	opt stack 14
 13442                           
 13443                           ;Port.c: 140: ePinError Output = ePinErrorState;
 13444                           
 13445                           ;incstack = 0
 13446  01425E  0E05               	movlw	5
 13447  014260  0100               	movlb	0	; () banked
 13448  014262  6FF1               	movwf	Port_CheckPortType@Output& (0+255),b
 13449                           
 13450                           ; BSR set to: 0
 13451                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 13452  014264  C0EE  F0E7         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 13453  014268  C0EF  F0E8         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 13454  01426C  0E00               	movlw	0
 13455  01426E  0100               	movlb	0	; () banked
 13456  014270  6FE9               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 13457  014272  C0F0  F0EA         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 13458  014276  ECBE  F09F         	call	_Port_CheckQuadType	;wreg free
 13459  01427A  0100               	movlb	0	; () banked
 13460  01427C  6FF1               	movwf	Port_CheckPortType@Output& (0+255),b
 13461  01427E  0100               	movlb	0	; () banked
 13462  014280  51F1               	movf	Port_CheckPortType@Output& (0+255),w,b
 13463  014282  A4D8               	btfss	status,2,c
 13464  014284  D00D               	goto	l397
 13465                           
 13466                           ; BSR set to: 0
 13467                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 13468  014286  C0EE  F0E7         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 13469  01428A  C0EF  F0E8         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 13470  01428E  0E01               	movlw	1
 13471  014290  0100               	movlb	0	; () banked
 13472  014292  6FE9               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 13473  014294  C0F0  F0EA         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 13474  014298  ECBE  F09F         	call	_Port_CheckQuadType	;wreg free
 13475  01429C  0100               	movlb	0	; () banked
 13476  01429E  6FF1               	movwf	Port_CheckPortType@Output& (0+255),b
 13477  0142A0                     l397:
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;Port.c: 146: return Output;
 13481                           
 13482                           ; BSR set to: 0
 13483  0142A0  0100               	movlb	0	; () banked
 13484  0142A2  51F1               	movf	Port_CheckPortType@Output& (0+255),w,b
 13485  0142A4  0012               	return	
 13486  0142A6                     __end_of_Port_CheckPortType:
 13487                           	opt stack 0
 13488                           tosu	equ	0xFFF
 13489                           tosh	equ	0xFFE
 13490                           tosl	equ	0xFFD
 13491                           pclath	equ	0xFFA
 13492                           tblptru	equ	0xFF8
 13493                           tblptrh	equ	0xFF7
 13494                           tblptrl	equ	0xFF6
 13495                           tablat	equ	0xFF5
 13496                           prodh	equ	0xFF4
 13497                           prodl	equ	0xFF3
 13498                           intcon	equ	0xFF2
 13499                           postinc0	equ	0xFEE
 13500                           plusw0	equ	0xFEB
 13501                           wreg	equ	0xFE8
 13502                           indf1	equ	0xFE7
 13503                           postdec1	equ	0xFE5
 13504                           fsr1h	equ	0xFE2
 13505                           fsr1l	equ	0xFE1
 13506                           indf2	equ	0xFDF
 13507                           postinc2	equ	0xFDE
 13508                           postdec2	equ	0xFDD
 13509                           plusw2	equ	0xFDB
 13510                           fsr2h	equ	0xFDA
 13511                           fsr2l	equ	0xFD9
 13512                           status	equ	0xFD8
 13513                           
 13514 ;; *************** function _Port_Set *****************
 13515 ;; Defined at:
 13516 ;;		line 570 in file "Library/Port.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 13519 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 13520 ;;		 -> PortD(10), PortC(10), PortF(10), 
 13521 ;;  pValue          1   17[BANK0 ] unsigned char 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 13524 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 13525 ;;  Type            1   38[BANK0 ] enum E6795
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13535 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13536 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13537 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13538 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13539 ;;Total ram usage:       24 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:   10
 13542 ;; This function calls:
 13543 ;;		_Byte_SetByte
 13544 ;;		_Word_GetPair
 13545 ;; This function is called by:
 13546 ;;		_Port_Init
 13547 ;;		_Port_Toggle
 13548 ;; This function uses a non-reentrant model
 13549 ;;
 13550                           
 13551                           	psect	text72
 13552  01041E                     __ptext72:
 13553                           	opt stack 0
 13554  01041E                     _Port_Set:
 13555                           	opt stack 17
 13556                           
 13557                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 13558                           
 13559                           ; BSR set to: 0
 13560                           ;incstack = 0
 13561  01041E  0E08               	movlw	8
 13562  010420  0100               	movlb	0	; () banked
 13563  010422  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13564  010424  0100               	movlb	0	; () banked
 13565  010426  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13566  010428  0E00               	movlw	0
 13567  01042A  0100               	movlb	0	; () banked
 13568  01042C  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13569  01042E  0100               	movlb	0	; () banked
 13570  010430  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13571  010432  0E00               	movlw	0
 13572  010434  0100               	movlb	0	; () banked
 13573  010436  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13574  010438  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13575  01043C  0100               	movlb	0	; () banked
 13576  01043E  6FDE               	movwf	Port_Set@Type& (0+255),b
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 13580  010440  0100               	movlb	0	; () banked
 13581  010442  51DE               	movf	Port_Set@Type& (0+255),w,b
 13582  010444  0100               	movlb	0	; () banked
 13583  010446  6FCA               	movwf	??_Port_Set& (0+255),b
 13584  010448  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13585  01044A  0E0E               	movlw	14
 13586  01044C                     u7915:
 13587  01044C  90D8               	bcf	status,0,c
 13588  01044E  0100               	movlb	0	; () banked
 13589  010450  37CA               	rlcf	??_Port_Set& (0+255),f,b
 13590  010452  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13591  010454  2EE8               	decfsz	wreg,f,c
 13592  010456  D7FA               	goto	u7915
 13593  010458  0100               	movlb	0	; () banked
 13594  01045A  51DE               	movf	Port_Set@Type& (0+255),w,b
 13595  01045C  0100               	movlb	0	; () banked
 13596  01045E  6FCC               	movwf	(??_Port_Set+2)& (0+255),b
 13597  010460  6BCD               	clrf	(??_Port_Set+3)& (0+255),b
 13598  010462  0E0C               	movlw	12
 13599  010464                     u7925:
 13600  010464  90D8               	bcf	status,0,c
 13601  010466  0100               	movlb	0	; () banked
 13602  010468  37CC               	rlcf	(??_Port_Set+2)& (0+255),f,b
 13603  01046A  37CD               	rlcf	(??_Port_Set+3)& (0+255),f,b
 13604  01046C  2EE8               	decfsz	wreg,f,c
 13605  01046E  D7FA               	goto	u7925
 13606  010470  0100               	movlb	0	; () banked
 13607  010472  51DE               	movf	Port_Set@Type& (0+255),w,b
 13608  010474  0100               	movlb	0	; () banked
 13609  010476  6FCE               	movwf	(??_Port_Set+4)& (0+255),b
 13610  010478  6BCF               	clrf	(??_Port_Set+5)& (0+255),b
 13611  01047A  0E0A               	movlw	10
 13612  01047C                     u7935:
 13613  01047C  90D8               	bcf	status,0,c
 13614  01047E  0100               	movlb	0	; () banked
 13615  010480  37CE               	rlcf	(??_Port_Set+4)& (0+255),f,b
 13616  010482  37CF               	rlcf	(??_Port_Set+5)& (0+255),f,b
 13617  010484  2EE8               	decfsz	wreg,f,c
 13618  010486  D7FA               	goto	u7935
 13619  010488  0100               	movlb	0	; () banked
 13620  01048A  51DE               	movf	Port_Set@Type& (0+255),w,b
 13621  01048C  0100               	movlb	0	; () banked
 13622  01048E  6FD1               	movwf	(??_Port_Set+7)& (0+255),b
 13623  010490  6BD0               	clrf	(??_Port_Set+6)& (0+255),b
 13624  010492  0100               	movlb	0	; () banked
 13625  010494  51DE               	movf	Port_Set@Type& (0+255),w,b
 13626  010496  0100               	movlb	0	; () banked
 13627  010498  6FD2               	movwf	(??_Port_Set+8)& (0+255),b
 13628  01049A  6BD3               	clrf	(??_Port_Set+9)& (0+255),b
 13629  01049C  0E06               	movlw	6
 13630  01049E                     u7945:
 13631  01049E  90D8               	bcf	status,0,c
 13632  0104A0  0100               	movlb	0	; () banked
 13633  0104A2  37D2               	rlcf	(??_Port_Set+8)& (0+255),f,b
 13634  0104A4  37D3               	rlcf	(??_Port_Set+9)& (0+255),f,b
 13635  0104A6  2EE8               	decfsz	wreg,f,c
 13636  0104A8  D7FA               	goto	u7945
 13637  0104AA  0100               	movlb	0	; () banked
 13638  0104AC  51DE               	movf	Port_Set@Type& (0+255),w,b
 13639  0104AE  0100               	movlb	0	; () banked
 13640  0104B0  6FD4               	movwf	(??_Port_Set+10)& (0+255),b
 13641  0104B2  6BD5               	clrf	(??_Port_Set+11)& (0+255),b
 13642  0104B4  0100               	movlb	0	; () banked
 13643  0104B6  3BD4               	swapf	(??_Port_Set+10)& (0+255),f,b
 13644  0104B8  3BD5               	swapf	(??_Port_Set+11)& (0+255),f,b
 13645  0104BA  0EF0               	movlw	240
 13646  0104BC  17D5               	andwf	(??_Port_Set+11)& (0+255),f,b
 13647  0104BE  51D4               	movf	(??_Port_Set+10)& (0+255),w,b
 13648  0104C0  0B0F               	andlw	15
 13649  0104C2  13D5               	iorwf	(??_Port_Set+11)& (0+255),f,b
 13650  0104C4  0EF0               	movlw	240
 13651  0104C6  17D4               	andwf	(??_Port_Set+10)& (0+255),f,b
 13652  0104C8  0100               	movlb	0	; () banked
 13653  0104CA  51DE               	movf	Port_Set@Type& (0+255),w,b
 13654  0104CC  0100               	movlb	0	; () banked
 13655  0104CE  6FD6               	movwf	(??_Port_Set+12)& (0+255),b
 13656  0104D0  6BD7               	clrf	(??_Port_Set+13)& (0+255),b
 13657  0104D2  0100               	movlb	0	; () banked
 13658  0104D4  90D8               	bcf	status,0,c
 13659  0104D6  37D6               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13660  0104D8  37D7               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13661  0104DA  0100               	movlb	0	; () banked
 13662  0104DC  90D8               	bcf	status,0,c
 13663  0104DE  37D6               	rlcf	(??_Port_Set+12)& (0+255),f,b
 13664  0104E0  37D7               	rlcf	(??_Port_Set+13)& (0+255),f,b
 13665  0104E2  0100               	movlb	0	; () banked
 13666  0104E4  51DE               	movf	Port_Set@Type& (0+255),w,b
 13667  0104E6  0100               	movlb	0	; () banked
 13668  0104E8  6FD8               	movwf	(??_Port_Set+14)& (0+255),b
 13669  0104EA  6BD9               	clrf	(??_Port_Set+15)& (0+255),b
 13670  0104EC  0100               	movlb	0	; () banked
 13671  0104EE  51D6               	movf	(??_Port_Set+12)& (0+255),w,b
 13672  0104F0  0100               	movlb	0	; () banked
 13673  0104F2  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13674  0104F4  0100               	movlb	0	; () banked
 13675  0104F6  51D7               	movf	(??_Port_Set+13)& (0+255),w,b
 13676  0104F8  0100               	movlb	0	; () banked
 13677  0104FA  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13678  0104FC  0100               	movlb	0	; () banked
 13679  0104FE  51D4               	movf	(??_Port_Set+10)& (0+255),w,b
 13680  010500  0100               	movlb	0	; () banked
 13681  010502  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13682  010504  0100               	movlb	0	; () banked
 13683  010506  51D5               	movf	(??_Port_Set+11)& (0+255),w,b
 13684  010508  0100               	movlb	0	; () banked
 13685  01050A  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13686  01050C  0100               	movlb	0	; () banked
 13687  01050E  51D2               	movf	(??_Port_Set+8)& (0+255),w,b
 13688  010510  0100               	movlb	0	; () banked
 13689  010512  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13690  010514  0100               	movlb	0	; () banked
 13691  010516  51D3               	movf	(??_Port_Set+9)& (0+255),w,b
 13692  010518  0100               	movlb	0	; () banked
 13693  01051A  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13694  01051C  0100               	movlb	0	; () banked
 13695  01051E  51D0               	movf	(??_Port_Set+6)& (0+255),w,b
 13696  010520  0100               	movlb	0	; () banked
 13697  010522  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13698  010524  0100               	movlb	0	; () banked
 13699  010526  51D1               	movf	(??_Port_Set+7)& (0+255),w,b
 13700  010528  0100               	movlb	0	; () banked
 13701  01052A  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13702  01052C  0100               	movlb	0	; () banked
 13703  01052E  51CE               	movf	(??_Port_Set+4)& (0+255),w,b
 13704  010530  0100               	movlb	0	; () banked
 13705  010532  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13706  010534  0100               	movlb	0	; () banked
 13707  010536  51CF               	movf	(??_Port_Set+5)& (0+255),w,b
 13708  010538  0100               	movlb	0	; () banked
 13709  01053A  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13710  01053C  0100               	movlb	0	; () banked
 13711  01053E  51CC               	movf	(??_Port_Set+2)& (0+255),w,b
 13712  010540  0100               	movlb	0	; () banked
 13713  010542  13D8               	iorwf	(??_Port_Set+14)& (0+255),f,b
 13714  010544  0100               	movlb	0	; () banked
 13715  010546  51CD               	movf	(??_Port_Set+3)& (0+255),w,b
 13716  010548  0100               	movlb	0	; () banked
 13717  01054A  13D9               	iorwf	(??_Port_Set+15)& (0+255),f,b
 13718  01054C  0100               	movlb	0	; () banked
 13719  01054E  51CA               	movf	??_Port_Set& (0+255),w,b
 13720  010550  0100               	movlb	0	; () banked
 13721  010552  11D8               	iorwf	(??_Port_Set+14)& (0+255),w,b
 13722  010554  0100               	movlb	0	; () banked
 13723  010556  6FDA               	movwf	Port_Set@TypeRequired& (0+255),b
 13724  010558  0100               	movlb	0	; () banked
 13725  01055A  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13726  01055C  0100               	movlb	0	; () banked
 13727  01055E  11D9               	iorwf	(??_Port_Set+15)& (0+255),w,b
 13728  010560  0100               	movlb	0	; () banked
 13729  010562  6FDB               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 13730                           
 13731                           ; BSR set to: 0
 13732                           ;Port.c: 574: UINT16 TypeActual = Type;
 13733  010564  C0DE  F0DC         	movff	Port_Set@Type,Port_Set@TypeActual
 13734  010568  0100               	movlb	0	; () banked
 13735  01056A  6BDD               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 13736                           
 13737                           ; BSR set to: 0
 13738                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 13739  01056C  0E08               	movlw	8
 13740  01056E  0100               	movlb	0	; () banked
 13741  010570  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13742  010572  0100               	movlb	0	; () banked
 13743  010574  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13744  010576  0E00               	movlw	0
 13745  010578  0100               	movlb	0	; () banked
 13746  01057A  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13747  01057C  0100               	movlb	0	; () banked
 13748  01057E  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13749  010580  0E01               	movlw	1
 13750  010582  0100               	movlb	0	; () banked
 13751  010584  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13752  010586  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13753  01058A  0100               	movlb	0	; () banked
 13754  01058C  6FCA               	movwf	??_Port_Set& (0+255),b
 13755  01058E  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13756  010590  0100               	movlb	0	; () banked
 13757  010592  90D8               	bcf	status,0,c
 13758  010594  37CA               	rlcf	??_Port_Set& (0+255),f,b
 13759  010596  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13760  010598  0100               	movlb	0	; () banked
 13761  01059A  90D8               	bcf	status,0,c
 13762  01059C  37CA               	rlcf	??_Port_Set& (0+255),f,b
 13763  01059E  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13764  0105A0  0100               	movlb	0	; () banked
 13765  0105A2  51CA               	movf	??_Port_Set& (0+255),w,b
 13766  0105A4  0100               	movlb	0	; () banked
 13767  0105A6  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13768  0105A8  0100               	movlb	0	; () banked
 13769  0105AA  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13770  0105AC  0100               	movlb	0	; () banked
 13771  0105AE  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13772                           
 13773                           ; BSR set to: 0
 13774                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 13775  0105B0  0E08               	movlw	8
 13776  0105B2  0100               	movlb	0	; () banked
 13777  0105B4  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13778  0105B6  0100               	movlb	0	; () banked
 13779  0105B8  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13780  0105BA  0E00               	movlw	0
 13781  0105BC  0100               	movlb	0	; () banked
 13782  0105BE  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13783  0105C0  0100               	movlb	0	; () banked
 13784  0105C2  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13785  0105C4  0E02               	movlw	2
 13786  0105C6  0100               	movlb	0	; () banked
 13787  0105C8  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13788  0105CA  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13789  0105CE  0100               	movlb	0	; () banked
 13790  0105D0  6FCA               	movwf	??_Port_Set& (0+255),b
 13791  0105D2  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13792  0105D4  0100               	movlb	0	; () banked
 13793  0105D6  3BCA               	swapf	??_Port_Set& (0+255),f,b
 13794  0105D8  3BCB               	swapf	(??_Port_Set+1)& (0+255),f,b
 13795  0105DA  0EF0               	movlw	240
 13796  0105DC  17CB               	andwf	(??_Port_Set+1)& (0+255),f,b
 13797  0105DE  51CA               	movf	??_Port_Set& (0+255),w,b
 13798  0105E0  0B0F               	andlw	15
 13799  0105E2  13CB               	iorwf	(??_Port_Set+1)& (0+255),f,b
 13800  0105E4  0EF0               	movlw	240
 13801  0105E6  17CA               	andwf	??_Port_Set& (0+255),f,b
 13802  0105E8  0100               	movlb	0	; () banked
 13803  0105EA  51CA               	movf	??_Port_Set& (0+255),w,b
 13804  0105EC  0100               	movlb	0	; () banked
 13805  0105EE  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13806  0105F0  0100               	movlb	0	; () banked
 13807  0105F2  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13808  0105F4  0100               	movlb	0	; () banked
 13809  0105F6  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13810                           
 13811                           ; BSR set to: 0
 13812                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 13813  0105F8  0E08               	movlw	8
 13814  0105FA  0100               	movlb	0	; () banked
 13815  0105FC  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13816  0105FE  0100               	movlb	0	; () banked
 13817  010600  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13818  010602  0E00               	movlw	0
 13819  010604  0100               	movlb	0	; () banked
 13820  010606  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13821  010608  0100               	movlb	0	; () banked
 13822  01060A  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13823  01060C  0E03               	movlw	3
 13824  01060E  0100               	movlb	0	; () banked
 13825  010610  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13826  010612  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13827  010616  0100               	movlb	0	; () banked
 13828  010618  6FCA               	movwf	??_Port_Set& (0+255),b
 13829  01061A  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13830  01061C  0E06               	movlw	6
 13831  01061E                     u7955:
 13832  01061E  90D8               	bcf	status,0,c
 13833  010620  0100               	movlb	0	; () banked
 13834  010622  37CA               	rlcf	??_Port_Set& (0+255),f,b
 13835  010624  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13836  010626  2EE8               	decfsz	wreg,f,c
 13837  010628  D7FA               	goto	u7955
 13838  01062A  0100               	movlb	0	; () banked
 13839  01062C  51CA               	movf	??_Port_Set& (0+255),w,b
 13840  01062E  0100               	movlb	0	; () banked
 13841  010630  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13842  010632  0100               	movlb	0	; () banked
 13843  010634  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13844  010636  0100               	movlb	0	; () banked
 13845  010638  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13846                           
 13847                           ; BSR set to: 0
 13848                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 13849  01063A  0E08               	movlw	8
 13850  01063C  0100               	movlb	0	; () banked
 13851  01063E  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13852  010640  0100               	movlb	0	; () banked
 13853  010642  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13854  010644  0E00               	movlw	0
 13855  010646  0100               	movlb	0	; () banked
 13856  010648  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13857  01064A  0100               	movlb	0	; () banked
 13858  01064C  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13859  01064E  0E04               	movlw	4
 13860  010650  0100               	movlb	0	; () banked
 13861  010652  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13862  010654  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13863  010658  0100               	movlb	0	; () banked
 13864  01065A  6FCA               	movwf	??_Port_Set& (0+255),b
 13865  01065C  0100               	movlb	0	; () banked
 13866  01065E  51CA               	movf	??_Port_Set& (0+255),w,b
 13867  010660  0100               	movlb	0	; () banked
 13868  010662  6FCC               	movwf	(??_Port_Set+2)& (0+255),b
 13869  010664  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13870  010666  0100               	movlb	0	; () banked
 13871  010668  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13872  01066A  0100               	movlb	0	; () banked
 13873  01066C  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13874  01066E  0100               	movlb	0	; () banked
 13875  010670  51CC               	movf	(??_Port_Set+2)& (0+255),w,b
 13876  010672  0100               	movlb	0	; () banked
 13877  010674  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13878                           
 13879                           ; BSR set to: 0
 13880                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 13881  010676  0E08               	movlw	8
 13882  010678  0100               	movlb	0	; () banked
 13883  01067A  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13884  01067C  0100               	movlb	0	; () banked
 13885  01067E  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13886  010680  0E00               	movlw	0
 13887  010682  0100               	movlb	0	; () banked
 13888  010684  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13889  010686  0100               	movlb	0	; () banked
 13890  010688  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13891  01068A  0E05               	movlw	5
 13892  01068C  0100               	movlb	0	; () banked
 13893  01068E  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13894  010690  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13895  010694  0100               	movlb	0	; () banked
 13896  010696  6FCA               	movwf	??_Port_Set& (0+255),b
 13897  010698  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13898  01069A  0E0A               	movlw	10
 13899  01069C                     u7965:
 13900  01069C  90D8               	bcf	status,0,c
 13901  01069E  0100               	movlb	0	; () banked
 13902  0106A0  37CA               	rlcf	??_Port_Set& (0+255),f,b
 13903  0106A2  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13904  0106A4  2EE8               	decfsz	wreg,f,c
 13905  0106A6  D7FA               	goto	u7965
 13906  0106A8  0100               	movlb	0	; () banked
 13907  0106AA  51CA               	movf	??_Port_Set& (0+255),w,b
 13908  0106AC  0100               	movlb	0	; () banked
 13909  0106AE  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13910  0106B0  0100               	movlb	0	; () banked
 13911  0106B2  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13912  0106B4  0100               	movlb	0	; () banked
 13913  0106B6  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13914                           
 13915                           ; BSR set to: 0
 13916                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 13917  0106B8  0E08               	movlw	8
 13918  0106BA  0100               	movlb	0	; () banked
 13919  0106BC  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13920  0106BE  0100               	movlb	0	; () banked
 13921  0106C0  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13922  0106C2  0E00               	movlw	0
 13923  0106C4  0100               	movlb	0	; () banked
 13924  0106C6  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13925  0106C8  0100               	movlb	0	; () banked
 13926  0106CA  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13927  0106CC  0E06               	movlw	6
 13928  0106CE  0100               	movlb	0	; () banked
 13929  0106D0  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13930  0106D2  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13931  0106D6  0100               	movlb	0	; () banked
 13932  0106D8  6FCA               	movwf	??_Port_Set& (0+255),b
 13933  0106DA  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13934  0106DC  0E0C               	movlw	12
 13935  0106DE                     u7975:
 13936  0106DE  90D8               	bcf	status,0,c
 13937  0106E0  0100               	movlb	0	; () banked
 13938  0106E2  37CA               	rlcf	??_Port_Set& (0+255),f,b
 13939  0106E4  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13940  0106E6  2EE8               	decfsz	wreg,f,c
 13941  0106E8  D7FA               	goto	u7975
 13942  0106EA  0100               	movlb	0	; () banked
 13943  0106EC  51CA               	movf	??_Port_Set& (0+255),w,b
 13944  0106EE  0100               	movlb	0	; () banked
 13945  0106F0  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13946  0106F2  0100               	movlb	0	; () banked
 13947  0106F4  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13948  0106F6  0100               	movlb	0	; () banked
 13949  0106F8  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13950                           
 13951                           ; BSR set to: 0
 13952                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 13953  0106FA  0E08               	movlw	8
 13954  0106FC  0100               	movlb	0	; () banked
 13955  0106FE  25C7               	addwf	Port_Set@pInput& (0+255),w,b
 13956  010700  0100               	movlb	0	; () banked
 13957  010702  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 13958  010704  0E00               	movlw	0
 13959  010706  0100               	movlb	0	; () banked
 13960  010708  21C8               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 13961  01070A  0100               	movlb	0	; () banked
 13962  01070C  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 13963  01070E  0E07               	movlw	7
 13964  010710  0100               	movlb	0	; () banked
 13965  010712  6FC6               	movwf	Word_GetPair@pPair& (0+255),b
 13966  010714  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 13967  010718  0100               	movlb	0	; () banked
 13968  01071A  6FCA               	movwf	??_Port_Set& (0+255),b
 13969  01071C  6BCB               	clrf	(??_Port_Set+1)& (0+255),b
 13970  01071E  0E0E               	movlw	14
 13971  010720                     u7985:
 13972  010720  90D8               	bcf	status,0,c
 13973  010722  0100               	movlb	0	; () banked
 13974  010724  37CA               	rlcf	??_Port_Set& (0+255),f,b
 13975  010726  37CB               	rlcf	(??_Port_Set+1)& (0+255),f,b
 13976  010728  2EE8               	decfsz	wreg,f,c
 13977  01072A  D7FA               	goto	u7985
 13978  01072C  0100               	movlb	0	; () banked
 13979  01072E  51CA               	movf	??_Port_Set& (0+255),w,b
 13980  010730  0100               	movlb	0	; () banked
 13981  010732  13DC               	iorwf	Port_Set@TypeActual& (0+255),f,b
 13982  010734  0100               	movlb	0	; () banked
 13983  010736  51CB               	movf	(??_Port_Set+1)& (0+255),w,b
 13984  010738  0100               	movlb	0	; () banked
 13985  01073A  13DD               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 13986                           
 13987                           ;Port.c: 584: if (TypeRequired == TypeActual)
 13988  01073C  0100               	movlb	0	; () banked
 13989  01073E  51DC               	movf	Port_Set@TypeActual& (0+255),w,b
 13990  010740  0100               	movlb	0	; () banked
 13991  010742  19DA               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 13992  010744  E148               	bnz	l528
 13993  010746  0100               	movlb	0	; () banked
 13994  010748  51DD               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 13995  01074A  0100               	movlb	0	; () banked
 13996  01074C  19DB               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 13997  01074E  A4D8               	btfss	status,2,c
 13998  010750  0012               	return	
 13999  010752  D032               	goto	l526
 14000  010754                     
 14001                           ; BSR set to: 0
 14002                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 14003                           
 14004                           ; BSR set to: 0
 14005  010754  0100               	movlb	0	; () banked
 14006  010756  EE20 F002          	lfsr	2,2
 14007  01075A  51C7               	movf	Port_Set@pInput& (0+255),w,b
 14008  01075C  26D9               	addwf	fsr2l,f,c
 14009  01075E  51C8               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14010  010760  22DA               	addwfc	fsr2h,f,c
 14011  010762  CFDE F0B8          	movff	postinc2,Byte_SetByte@pInput
 14012  010766  CFDD F0B9          	movff	postdec2,Byte_SetByte@pInput+1
 14013  01076A  C0C9  F0BA         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14014  01076E  ECD7  F0A5         	call	_Byte_SetByte	;wreg free
 14015                           
 14016                           ;Port.c: 594: break;
 14017  010772  0012               	return	
 14018  010774                     
 14019                           ;Port.c: 597: pValue = ~pValue;
 14020  010774  0100               	movlb	0	; () banked
 14021  010776  1FC9               	comf	Port_Set@pValue& (0+255),f,b
 14022                           
 14023                           ; BSR set to: 0
 14024                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 14025  010778  0100               	movlb	0	; () banked
 14026  01077A  EE20 F002          	lfsr	2,2
 14027  01077E  51C7               	movf	Port_Set@pInput& (0+255),w,b
 14028  010780  26D9               	addwf	fsr2l,f,c
 14029  010782  51C8               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14030  010784  22DA               	addwfc	fsr2h,f,c
 14031  010786  CFDE F0B8          	movff	postinc2,Byte_SetByte@pInput
 14032  01078A  CFDD F0B9          	movff	postdec2,Byte_SetByte@pInput+1
 14033  01078E  C0C9  F0BA         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14034  010792  ECD7  F0A5         	call	_Byte_SetByte	;wreg free
 14035                           
 14036                           ;Port.c: 599: break;
 14037  010796  0012               	return	
 14038  010798                     
 14039                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 14040  010798  0100               	movlb	0	; () banked
 14041  01079A  EE20 F004          	lfsr	2,4
 14042  01079E  51C7               	movf	Port_Set@pInput& (0+255),w,b
 14043  0107A0  26D9               	addwf	fsr2l,f,c
 14044  0107A2  51C8               	movf	(Port_Set@pInput+1)& (0+255),w,b
 14045  0107A4  22DA               	addwfc	fsr2h,f,c
 14046  0107A6  CFDE F0B8          	movff	postinc2,Byte_SetByte@pInput
 14047  0107AA  CFDD F0B9          	movff	postdec2,Byte_SetByte@pInput+1
 14048  0107AE  C0C9  F0BA         	movff	Port_Set@pValue,Byte_SetByte@pValue
 14049  0107B2  ECD7  F0A5         	call	_Byte_SetByte	;wreg free
 14050                           
 14051                           ;Port.c: 606: }
 14052                           
 14053                           ;Port.c: 605: break;
 14054                           
 14055                           ;Port.c: 604: default:
 14056                           
 14057                           ;Port.c: 603: break;
 14058  0107B6  0012               	return	
 14059  0107B8                     l526:
 14060  0107B8  0100               	movlb	0	; () banked
 14061  0107BA  51DE               	movf	Port_Set@Type& (0+255),w,b
 14062                           
 14063                           ; Switch size 1, requested type "space"
 14064                           ; Number of cases is 4, Range of values is 0 to 3
 14065                           ; switch strategies available:
 14066                           ; Name         Instructions Cycles
 14067                           ; simple_byte           13     7 (average)
 14068                           ;	Chosen strategy is simple_byte
 14069  0107BC  0A00               	xorlw	0	; case 0
 14070  0107BE  B4D8               	btfsc	status,2,c
 14071  0107C0  0012               	return	
 14072  0107C2  0A01               	xorlw	1	; case 1
 14073  0107C4  B4D8               	btfsc	status,2,c
 14074  0107C6  D7C6               	goto	l529
 14075  0107C8  0A03               	xorlw	3	; case 2
 14076  0107CA  B4D8               	btfsc	status,2,c
 14077  0107CC  D7D3               	goto	l531
 14078  0107CE  0A01               	xorlw	1	; case 3
 14079  0107D0  A4D8               	btfss	status,2,c
 14080                           
 14081                           ; BSR set to: 0
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;Port.c: 607: }
 14085  0107D2  0012               	return	
 14086  0107D4  D7E1               	goto	l532
 14087  0107D6                     l528:
 14088  0107D6  0012               	return		;funcret
 14089  0107D8                     __end_of_Port_Set:
 14090                           	opt stack 0
 14091                           tosu	equ	0xFFF
 14092                           tosh	equ	0xFFE
 14093                           tosl	equ	0xFFD
 14094                           pclath	equ	0xFFA
 14095                           tblptru	equ	0xFF8
 14096                           tblptrh	equ	0xFF7
 14097                           tblptrl	equ	0xFF6
 14098                           tablat	equ	0xFF5
 14099                           prodh	equ	0xFF4
 14100                           prodl	equ	0xFF3
 14101                           intcon	equ	0xFF2
 14102                           postinc0	equ	0xFEE
 14103                           plusw0	equ	0xFEB
 14104                           wreg	equ	0xFE8
 14105                           indf1	equ	0xFE7
 14106                           postdec1	equ	0xFE5
 14107                           fsr1h	equ	0xFE2
 14108                           fsr1l	equ	0xFE1
 14109                           indf2	equ	0xFDF
 14110                           postinc2	equ	0xFDE
 14111                           postdec2	equ	0xFDD
 14112                           plusw2	equ	0xFDB
 14113                           fsr2h	equ	0xFDA
 14114                           fsr2l	equ	0xFD9
 14115                           status	equ	0xFD8
 14116                           
 14117 ;; *************** function _Byte_SetByte *****************
 14118 ;; Defined at:
 14119 ;;		line 110 in file "Library/Types.c"
 14120 ;; Parameters:    Size  Location     Type
 14121 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 14122 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 14123 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 14124 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 14125 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 14126 ;;		 -> NULL(0), 
 14127 ;;  pValue          1    2[BANK0 ] unsigned char 
 14128 ;; Auto vars:     Size  Location     Type
 14129 ;;		None
 14130 ;; Return value:  Size  Location     Type
 14131 ;;                  1    wreg      void 
 14132 ;; Registers used:
 14133 ;;		fsr2l, fsr2h
 14134 ;; Tracked objects:
 14135 ;;		On entry : 0/0
 14136 ;;		On exit  : 0/0
 14137 ;;		Unchanged: 0/0
 14138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14139 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14143 ;;Total ram usage:        3 bytes
 14144 ;; Hardware stack levels used:    1
 14145 ;; Hardware stack levels required when called:    7
 14146 ;; This function calls:
 14147 ;;		Nothing
 14148 ;; This function is called by:
 14149 ;;		_Port_Set
 14150 ;;		_I2C_Init
 14151 ;; This function uses a non-reentrant model
 14152 ;;
 14153                           
 14154                           	psect	text73
 14155  014BAE                     __ptext73:
 14156                           	opt stack 0
 14157  014BAE                     _Byte_SetByte:
 14158                           	opt stack 19
 14159                           
 14160                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 14161                           
 14162                           ;incstack = 0
 14163  014BAE  C0B8  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 14164  014BB2  C0B9  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 14165  014BB6  C0BA  FFDF         	movff	Byte_SetByte@pValue,indf2
 14166  014BBA  0012               	return		;funcret
 14167  014BBC                     __end_of_Byte_SetByte:
 14168                           	opt stack 0
 14169                           tosu	equ	0xFFF
 14170                           tosh	equ	0xFFE
 14171                           tosl	equ	0xFFD
 14172                           pclath	equ	0xFFA
 14173                           tblptru	equ	0xFF8
 14174                           tblptrh	equ	0xFF7
 14175                           tblptrl	equ	0xFF6
 14176                           tablat	equ	0xFF5
 14177                           prodh	equ	0xFF4
 14178                           prodl	equ	0xFF3
 14179                           intcon	equ	0xFF2
 14180                           postinc0	equ	0xFEE
 14181                           plusw0	equ	0xFEB
 14182                           wreg	equ	0xFE8
 14183                           indf1	equ	0xFE7
 14184                           postdec1	equ	0xFE5
 14185                           fsr1h	equ	0xFE2
 14186                           fsr1l	equ	0xFE1
 14187                           indf2	equ	0xFDF
 14188                           postinc2	equ	0xFDE
 14189                           postdec2	equ	0xFDD
 14190                           plusw2	equ	0xFDB
 14191                           fsr2h	equ	0xFDA
 14192                           fsr2l	equ	0xFD9
 14193                           status	equ	0xFD8
 14194                           
 14195 ;; *************** function _GetPortTRIS *****************
 14196 ;; Defined at:
 14197 ;;		line 67 in file "Library/Port.c"
 14198 ;; Parameters:    Size  Location     Type
 14199 ;;  pInput          1    wreg     enum E6786
 14200 ;; Auto vars:     Size  Location     Type
 14201 ;;  pInput          1    2[BANK0 ] enum E6786
 14202 ;; Return value:  Size  Location     Type
 14203 ;;                  2    0[BANK0 ] PTR struct Byte
 14204 ;; Registers used:
 14205 ;;		wreg, status,2, status,0
 14206 ;; Tracked objects:
 14207 ;;		On entry : 0/0
 14208 ;;		On exit  : 0/0
 14209 ;;		Unchanged: 0/0
 14210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14211 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14212 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14215 ;;Total ram usage:        3 bytes
 14216 ;; Hardware stack levels used:    1
 14217 ;; Hardware stack levels required when called:    7
 14218 ;; This function calls:
 14219 ;;		Nothing
 14220 ;; This function is called by:
 14221 ;;		_Port_Init
 14222 ;; This function uses a non-reentrant model
 14223 ;;
 14224                           
 14225                           	psect	text74
 14226  01300A                     __ptext74:
 14227                           	opt stack 0
 14228  01300A                     _GetPortTRIS:
 14229                           	opt stack 20
 14230                           
 14231                           ;incstack = 0
 14232                           ;GetPortTRIS@pInput stored from wreg
 14233  01300A  0100               	movlb	0	; () banked
 14234  01300C  6FBA               	movwf	GetPortTRIS@pInput& (0+255),b
 14235                           
 14236                           ;Port.c: 69: switch (pInput)
 14237  01300E  D038               	goto	l363
 14238  013010                     
 14239                           ;Port.c: 72: return (BytePtr)&TRISA;
 14240  013010  0E92               	movlw	146
 14241  013012  0100               	movlb	0	; () banked
 14242  013014  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14243  013016  0E0F               	movlw	15
 14244  013018  0100               	movlb	0	; () banked
 14245  01301A  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14246                           
 14247                           ; BSR set to: 0
 14248  01301C  0012               	return	
 14249  01301E                     
 14250                           ; BSR set to: 0
 14251                           ;Port.c: 74: return (BytePtr)&TRISB;
 14252                           
 14253                           ; BSR set to: 0
 14254  01301E  0E93               	movlw	147
 14255  013020  0100               	movlb	0	; () banked
 14256  013022  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14257  013024  0E0F               	movlw	15
 14258  013026  0100               	movlb	0	; () banked
 14259  013028  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14260                           
 14261                           ; BSR set to: 0
 14262  01302A  0012               	return	
 14263  01302C                     
 14264                           ; BSR set to: 0
 14265                           ;Port.c: 76: return (BytePtr)&TRISC;
 14266                           
 14267                           ; BSR set to: 0
 14268  01302C  0E94               	movlw	148
 14269  01302E  0100               	movlb	0	; () banked
 14270  013030  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14271  013032  0E0F               	movlw	15
 14272  013034  0100               	movlb	0	; () banked
 14273  013036  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14274                           
 14275                           ; BSR set to: 0
 14276  013038  0012               	return	
 14277  01303A                     
 14278                           ; BSR set to: 0
 14279                           ;Port.c: 78: return (BytePtr)&TRISD;
 14280                           
 14281                           ; BSR set to: 0
 14282  01303A  0E95               	movlw	149
 14283  01303C  0100               	movlb	0	; () banked
 14284  01303E  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14285  013040  0E0F               	movlw	15
 14286  013042  0100               	movlb	0	; () banked
 14287  013044  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14288                           
 14289                           ; BSR set to: 0
 14290  013046  0012               	return	
 14291  013048                     
 14292                           ; BSR set to: 0
 14293                           ;Port.c: 80: return (BytePtr)&TRISE;
 14294                           
 14295                           ; BSR set to: 0
 14296  013048  0E96               	movlw	150
 14297  01304A  0100               	movlb	0	; () banked
 14298  01304C  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14299  01304E  0E0F               	movlw	15
 14300  013050  0100               	movlb	0	; () banked
 14301  013052  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14302                           
 14303                           ; BSR set to: 0
 14304  013054  0012               	return	
 14305  013056                     
 14306                           ; BSR set to: 0
 14307                           ;Port.c: 82: return (BytePtr)&TRISF;
 14308                           
 14309                           ; BSR set to: 0
 14310  013056  0E97               	movlw	151
 14311  013058  0100               	movlb	0	; () banked
 14312  01305A  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14313  01305C  0E0F               	movlw	15
 14314  01305E  0100               	movlb	0	; () banked
 14315  013060  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14316                           
 14317                           ; BSR set to: 0
 14318  013062  0012               	return	
 14319  013064                     
 14320                           ; BSR set to: 0
 14321                           ;Port.c: 84: return (BytePtr)&TRISG;
 14322                           
 14323                           ; BSR set to: 0
 14324  013064  0E98               	movlw	152
 14325  013066  0100               	movlb	0	; () banked
 14326  013068  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14327  01306A  0E0F               	movlw	15
 14328  01306C  0100               	movlb	0	; () banked
 14329  01306E  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14330                           
 14331                           ; BSR set to: 0
 14332  013070  0012               	return	
 14333  013072                     
 14334                           ; BSR set to: 0
 14335                           ;Port.c: 86: return (void*)0;
 14336                           
 14337                           ; BSR set to: 0
 14338  013072  0E00               	movlw	0
 14339  013074  0100               	movlb	0	; () banked
 14340  013076  6FB8               	movwf	?_GetPortTRIS& (0+255),b
 14341  013078  0E00               	movlw	0
 14342  01307A  0100               	movlb	0	; () banked
 14343  01307C  6FB9               	movwf	(?_GetPortTRIS+1)& (0+255),b
 14344                           
 14345                           ; BSR set to: 0
 14346                           ;Port.c: 87: }
 14347                           
 14348                           ; BSR set to: 0
 14349  01307E  0012               	return	
 14350  013080                     l363:
 14351                           
 14352                           ; BSR set to: 0
 14353  013080  0100               	movlb	0	; () banked
 14354  013082  51BA               	movf	GetPortTRIS@pInput& (0+255),w,b
 14355                           
 14356                           ; Switch size 1, requested type "space"
 14357                           ; Number of cases is 7, Range of values is 0 to 6
 14358                           ; switch strategies available:
 14359                           ; Name         Instructions Cycles
 14360                           ; simple_byte           22    12 (average)
 14361                           ;	Chosen strategy is simple_byte
 14362  013084  0A00               	xorlw	0	; case 0
 14363  013086  B4D8               	btfsc	status,2,c
 14364  013088  D7C3               	goto	l364
 14365  01308A  0A01               	xorlw	1	; case 1
 14366  01308C  B4D8               	btfsc	status,2,c
 14367  01308E  D7C7               	goto	l366
 14368  013090  0A03               	xorlw	3	; case 2
 14369  013092  B4D8               	btfsc	status,2,c
 14370  013094  D7CB               	goto	l367
 14371  013096  0A01               	xorlw	1	; case 3
 14372  013098  B4D8               	btfsc	status,2,c
 14373  01309A  D7CF               	goto	l368
 14374  01309C  0A07               	xorlw	7	; case 4
 14375  01309E  B4D8               	btfsc	status,2,c
 14376  0130A0  D7D3               	goto	l369
 14377  0130A2  0A01               	xorlw	1	; case 5
 14378  0130A4  B4D8               	btfsc	status,2,c
 14379  0130A6  D7D7               	goto	l370
 14380  0130A8  0A03               	xorlw	3	; case 6
 14381  0130AA  B4D8               	btfsc	status,2,c
 14382  0130AC  D7DB               	goto	l371
 14383  0130AE  D7E1               	goto	l372
 14384  0130B0                     __end_of_GetPortTRIS:
 14385                           	opt stack 0
 14386                           tosu	equ	0xFFF
 14387                           tosh	equ	0xFFE
 14388                           tosl	equ	0xFFD
 14389                           pclath	equ	0xFFA
 14390                           tblptru	equ	0xFF8
 14391                           tblptrh	equ	0xFF7
 14392                           tblptrl	equ	0xFF6
 14393                           tablat	equ	0xFF5
 14394                           prodh	equ	0xFF4
 14395                           prodl	equ	0xFF3
 14396                           intcon	equ	0xFF2
 14397                           postinc0	equ	0xFEE
 14398                           plusw0	equ	0xFEB
 14399                           wreg	equ	0xFE8
 14400                           indf1	equ	0xFE7
 14401                           postdec1	equ	0xFE5
 14402                           fsr1h	equ	0xFE2
 14403                           fsr1l	equ	0xFE1
 14404                           indf2	equ	0xFDF
 14405                           postinc2	equ	0xFDE
 14406                           postdec2	equ	0xFDD
 14407                           plusw2	equ	0xFDB
 14408                           fsr2h	equ	0xFDA
 14409                           fsr2l	equ	0xFD9
 14410                           status	equ	0xFD8
 14411                           
 14412 ;; *************** function _GetPortProperties *****************
 14413 ;; Defined at:
 14414 ;;		line 21 in file "Library/Port.c"
 14415 ;; Parameters:    Size  Location     Type
 14416 ;;  pInput          1    wreg     enum E6786
 14417 ;; Auto vars:     Size  Location     Type
 14418 ;;  pInput          1    2[BANK0 ] enum E6786
 14419 ;; Return value:  Size  Location     Type
 14420 ;;                  2    0[BANK0 ] PTR struct PortProperty
 14421 ;; Registers used:
 14422 ;;		wreg, status,2, status,0
 14423 ;; Tracked objects:
 14424 ;;		On entry : 0/0
 14425 ;;		On exit  : 0/0
 14426 ;;		Unchanged: 0/0
 14427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14428 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14429 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14431 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14432 ;;Total ram usage:        3 bytes
 14433 ;; Hardware stack levels used:    1
 14434 ;; Hardware stack levels required when called:    7
 14435 ;; This function calls:
 14436 ;;		Nothing
 14437 ;; This function is called by:
 14438 ;;		_Port_Init
 14439 ;; This function uses a non-reentrant model
 14440 ;;
 14441                           
 14442                           	psect	text75
 14443  0130B0                     __ptext75:
 14444                           	opt stack 0
 14445  0130B0                     _GetPortProperties:
 14446                           	opt stack 20
 14447                           
 14448                           ; BSR set to: 0
 14449                           ;incstack = 0
 14450                           ;GetPortProperties@pInput stored from wreg
 14451  0130B0  0100               	movlb	0	; () banked
 14452  0130B2  6FBA               	movwf	GetPortProperties@pInput& (0+255),b
 14453                           
 14454                           ;Port.c: 23: switch (pInput)
 14455  0130B4  D038               	goto	l337
 14456  0130B6                     
 14457                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 14458  0130B6  0E67               	movlw	low _PortA_Property
 14459  0130B8  0100               	movlb	0	; () banked
 14460  0130BA  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14461  0130BC  0EFF               	movlw	high _PortA_Property
 14462  0130BE  0100               	movlb	0	; () banked
 14463  0130C0  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14464                           
 14465                           ; BSR set to: 0
 14466  0130C2  0012               	return	
 14467  0130C4                     
 14468                           ; BSR set to: 0
 14469                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 14470                           
 14471                           ; BSR set to: 0
 14472  0130C4  0E65               	movlw	low _PortB_Property
 14473  0130C6  0100               	movlb	0	; () banked
 14474  0130C8  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14475  0130CA  0EFF               	movlw	high _PortB_Property
 14476  0130CC  0100               	movlb	0	; () banked
 14477  0130CE  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14478                           
 14479                           ; BSR set to: 0
 14480  0130D0  0012               	return	
 14481  0130D2                     
 14482                           ; BSR set to: 0
 14483                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 14484                           
 14485                           ; BSR set to: 0
 14486  0130D2  0E63               	movlw	low _PortC_Property
 14487  0130D4  0100               	movlb	0	; () banked
 14488  0130D6  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14489  0130D8  0EFF               	movlw	high _PortC_Property
 14490  0130DA  0100               	movlb	0	; () banked
 14491  0130DC  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14492                           
 14493                           ; BSR set to: 0
 14494  0130DE  0012               	return	
 14495  0130E0                     
 14496                           ; BSR set to: 0
 14497                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 14498                           
 14499                           ; BSR set to: 0
 14500  0130E0  0E61               	movlw	low _PortD_Property
 14501  0130E2  0100               	movlb	0	; () banked
 14502  0130E4  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14503  0130E6  0EFF               	movlw	high _PortD_Property
 14504  0130E8  0100               	movlb	0	; () banked
 14505  0130EA  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14506                           
 14507                           ; BSR set to: 0
 14508  0130EC  0012               	return	
 14509  0130EE                     
 14510                           ; BSR set to: 0
 14511                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 14512                           
 14513                           ; BSR set to: 0
 14514  0130EE  0E5F               	movlw	low _PortE_Property
 14515  0130F0  0100               	movlb	0	; () banked
 14516  0130F2  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14517  0130F4  0EFF               	movlw	high _PortE_Property
 14518  0130F6  0100               	movlb	0	; () banked
 14519  0130F8  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14520                           
 14521                           ; BSR set to: 0
 14522  0130FA  0012               	return	
 14523  0130FC                     
 14524                           ; BSR set to: 0
 14525                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 14526                           
 14527                           ; BSR set to: 0
 14528  0130FC  0E5D               	movlw	low _PortF_Property
 14529  0130FE  0100               	movlb	0	; () banked
 14530  013100  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14531  013102  0EFF               	movlw	high _PortF_Property
 14532  013104  0100               	movlb	0	; () banked
 14533  013106  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14534                           
 14535                           ; BSR set to: 0
 14536  013108  0012               	return	
 14537  01310A                     
 14538                           ; BSR set to: 0
 14539                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 14540                           
 14541                           ; BSR set to: 0
 14542  01310A  0E5B               	movlw	low _PortG_Property
 14543  01310C  0100               	movlb	0	; () banked
 14544  01310E  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14545  013110  0EFF               	movlw	high _PortG_Property
 14546  013112  0100               	movlb	0	; () banked
 14547  013114  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14548                           
 14549                           ; BSR set to: 0
 14550  013116  0012               	return	
 14551  013118                     
 14552                           ; BSR set to: 0
 14553                           ;Port.c: 40: return (void*)0;
 14554                           
 14555                           ; BSR set to: 0
 14556  013118  0E00               	movlw	0
 14557  01311A  0100               	movlb	0	; () banked
 14558  01311C  6FB8               	movwf	?_GetPortProperties& (0+255),b
 14559  01311E  0E00               	movlw	0
 14560  013120  0100               	movlb	0	; () banked
 14561  013122  6FB9               	movwf	(?_GetPortProperties+1)& (0+255),b
 14562                           
 14563                           ; BSR set to: 0
 14564                           ;Port.c: 41: }
 14565                           
 14566                           ; BSR set to: 0
 14567  013124  0012               	return	
 14568  013126                     l337:
 14569                           
 14570                           ; BSR set to: 0
 14571  013126  0100               	movlb	0	; () banked
 14572  013128  51BA               	movf	GetPortProperties@pInput& (0+255),w,b
 14573                           
 14574                           ; Switch size 1, requested type "space"
 14575                           ; Number of cases is 7, Range of values is 0 to 6
 14576                           ; switch strategies available:
 14577                           ; Name         Instructions Cycles
 14578                           ; simple_byte           22    12 (average)
 14579                           ;	Chosen strategy is simple_byte
 14580  01312A  0A00               	xorlw	0	; case 0
 14581  01312C  B4D8               	btfsc	status,2,c
 14582  01312E  D7C3               	goto	l338
 14583  013130  0A01               	xorlw	1	; case 1
 14584  013132  B4D8               	btfsc	status,2,c
 14585  013134  D7C7               	goto	l340
 14586  013136  0A03               	xorlw	3	; case 2
 14587  013138  B4D8               	btfsc	status,2,c
 14588  01313A  D7CB               	goto	l341
 14589  01313C  0A01               	xorlw	1	; case 3
 14590  01313E  B4D8               	btfsc	status,2,c
 14591  013140  D7CF               	goto	l342
 14592  013142  0A07               	xorlw	7	; case 4
 14593  013144  B4D8               	btfsc	status,2,c
 14594  013146  D7D3               	goto	l343
 14595  013148  0A01               	xorlw	1	; case 5
 14596  01314A  B4D8               	btfsc	status,2,c
 14597  01314C  D7D7               	goto	l344
 14598  01314E  0A03               	xorlw	3	; case 6
 14599  013150  B4D8               	btfsc	status,2,c
 14600  013152  D7DB               	goto	l345
 14601  013154  D7E1               	goto	l346
 14602  013156                     __end_of_GetPortProperties:
 14603                           	opt stack 0
 14604                           tosu	equ	0xFFF
 14605                           tosh	equ	0xFFE
 14606                           tosl	equ	0xFFD
 14607                           pclath	equ	0xFFA
 14608                           tblptru	equ	0xFF8
 14609                           tblptrh	equ	0xFF7
 14610                           tblptrl	equ	0xFF6
 14611                           tablat	equ	0xFF5
 14612                           prodh	equ	0xFF4
 14613                           prodl	equ	0xFF3
 14614                           intcon	equ	0xFF2
 14615                           postinc0	equ	0xFEE
 14616                           plusw0	equ	0xFEB
 14617                           wreg	equ	0xFE8
 14618                           indf1	equ	0xFE7
 14619                           postdec1	equ	0xFE5
 14620                           fsr1h	equ	0xFE2
 14621                           fsr1l	equ	0xFE1
 14622                           indf2	equ	0xFDF
 14623                           postinc2	equ	0xFDE
 14624                           postdec2	equ	0xFDD
 14625                           plusw2	equ	0xFDB
 14626                           fsr2h	equ	0xFDA
 14627                           fsr2l	equ	0xFD9
 14628                           status	equ	0xFD8
 14629                           
 14630 ;; *************** function _GetPortPORT *****************
 14631 ;; Defined at:
 14632 ;;		line 44 in file "Library/Port.c"
 14633 ;; Parameters:    Size  Location     Type
 14634 ;;  pInput          1    wreg     enum E6786
 14635 ;; Auto vars:     Size  Location     Type
 14636 ;;  pInput          1    2[BANK0 ] enum E6786
 14637 ;; Return value:  Size  Location     Type
 14638 ;;                  2    0[BANK0 ] PTR struct Byte
 14639 ;; Registers used:
 14640 ;;		wreg, status,2, status,0
 14641 ;; Tracked objects:
 14642 ;;		On entry : 0/0
 14643 ;;		On exit  : 0/0
 14644 ;;		Unchanged: 0/0
 14645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14646 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14649 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14650 ;;Total ram usage:        3 bytes
 14651 ;; Hardware stack levels used:    1
 14652 ;; Hardware stack levels required when called:    7
 14653 ;; This function calls:
 14654 ;;		Nothing
 14655 ;; This function is called by:
 14656 ;;		_Port_Init
 14657 ;; This function uses a non-reentrant model
 14658 ;;
 14659                           
 14660                           	psect	text76
 14661  013156                     __ptext76:
 14662                           	opt stack 0
 14663  013156                     _GetPortPORT:
 14664                           	opt stack 20
 14665                           
 14666                           ; BSR set to: 0
 14667                           ;incstack = 0
 14668                           ;GetPortPORT@pInput stored from wreg
 14669  013156  0100               	movlb	0	; () banked
 14670  013158  6FBA               	movwf	GetPortPORT@pInput& (0+255),b
 14671                           
 14672                           ;Port.c: 46: switch (pInput)
 14673  01315A  D038               	goto	l350
 14674  01315C                     
 14675                           ;Port.c: 49: return (BytePtr)&PORTA;
 14676  01315C  0E80               	movlw	128
 14677  01315E  0100               	movlb	0	; () banked
 14678  013160  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14679  013162  0E0F               	movlw	15
 14680  013164  0100               	movlb	0	; () banked
 14681  013166  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14682                           
 14683                           ; BSR set to: 0
 14684  013168  0012               	return	
 14685  01316A                     
 14686                           ; BSR set to: 0
 14687                           ;Port.c: 51: return (BytePtr)&PORTB;
 14688                           
 14689                           ; BSR set to: 0
 14690  01316A  0E81               	movlw	129
 14691  01316C  0100               	movlb	0	; () banked
 14692  01316E  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14693  013170  0E0F               	movlw	15
 14694  013172  0100               	movlb	0	; () banked
 14695  013174  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14696                           
 14697                           ; BSR set to: 0
 14698  013176  0012               	return	
 14699  013178                     
 14700                           ; BSR set to: 0
 14701                           ;Port.c: 53: return (BytePtr)&PORTC;
 14702                           
 14703                           ; BSR set to: 0
 14704  013178  0E82               	movlw	130
 14705  01317A  0100               	movlb	0	; () banked
 14706  01317C  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14707  01317E  0E0F               	movlw	15
 14708  013180  0100               	movlb	0	; () banked
 14709  013182  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14710                           
 14711                           ; BSR set to: 0
 14712  013184  0012               	return	
 14713  013186                     
 14714                           ; BSR set to: 0
 14715                           ;Port.c: 55: return (BytePtr)&PORTD;
 14716                           
 14717                           ; BSR set to: 0
 14718  013186  0E83               	movlw	131
 14719  013188  0100               	movlb	0	; () banked
 14720  01318A  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14721  01318C  0E0F               	movlw	15
 14722  01318E  0100               	movlb	0	; () banked
 14723  013190  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14724                           
 14725                           ; BSR set to: 0
 14726  013192  0012               	return	
 14727  013194                     
 14728                           ; BSR set to: 0
 14729                           ;Port.c: 57: return (BytePtr)&PORTE;
 14730                           
 14731                           ; BSR set to: 0
 14732  013194  0E84               	movlw	132
 14733  013196  0100               	movlb	0	; () banked
 14734  013198  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14735  01319A  0E0F               	movlw	15
 14736  01319C  0100               	movlb	0	; () banked
 14737  01319E  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14738                           
 14739                           ; BSR set to: 0
 14740  0131A0  0012               	return	
 14741  0131A2                     
 14742                           ; BSR set to: 0
 14743                           ;Port.c: 59: return (BytePtr)&PORTF;
 14744                           
 14745                           ; BSR set to: 0
 14746  0131A2  0E85               	movlw	133
 14747  0131A4  0100               	movlb	0	; () banked
 14748  0131A6  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14749  0131A8  0E0F               	movlw	15
 14750  0131AA  0100               	movlb	0	; () banked
 14751  0131AC  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14752                           
 14753                           ; BSR set to: 0
 14754  0131AE  0012               	return	
 14755  0131B0                     
 14756                           ; BSR set to: 0
 14757                           ;Port.c: 61: return (BytePtr)&PORTG;
 14758                           
 14759                           ; BSR set to: 0
 14760  0131B0  0E86               	movlw	134
 14761  0131B2  0100               	movlb	0	; () banked
 14762  0131B4  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14763  0131B6  0E0F               	movlw	15
 14764  0131B8  0100               	movlb	0	; () banked
 14765  0131BA  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14766                           
 14767                           ; BSR set to: 0
 14768  0131BC  0012               	return	
 14769  0131BE                     
 14770                           ; BSR set to: 0
 14771                           ;Port.c: 63: return (void*)0;
 14772                           
 14773                           ; BSR set to: 0
 14774  0131BE  0E00               	movlw	0
 14775  0131C0  0100               	movlb	0	; () banked
 14776  0131C2  6FB8               	movwf	?_GetPortPORT& (0+255),b
 14777  0131C4  0E00               	movlw	0
 14778  0131C6  0100               	movlb	0	; () banked
 14779  0131C8  6FB9               	movwf	(?_GetPortPORT+1)& (0+255),b
 14780                           
 14781                           ; BSR set to: 0
 14782                           ;Port.c: 64: }
 14783                           
 14784                           ; BSR set to: 0
 14785  0131CA  0012               	return	
 14786  0131CC                     l350:
 14787                           
 14788                           ; BSR set to: 0
 14789  0131CC  0100               	movlb	0	; () banked
 14790  0131CE  51BA               	movf	GetPortPORT@pInput& (0+255),w,b
 14791                           
 14792                           ; Switch size 1, requested type "space"
 14793                           ; Number of cases is 7, Range of values is 0 to 6
 14794                           ; switch strategies available:
 14795                           ; Name         Instructions Cycles
 14796                           ; simple_byte           22    12 (average)
 14797                           ;	Chosen strategy is simple_byte
 14798  0131D0  0A00               	xorlw	0	; case 0
 14799  0131D2  B4D8               	btfsc	status,2,c
 14800  0131D4  D7C3               	goto	l351
 14801  0131D6  0A01               	xorlw	1	; case 1
 14802  0131D8  B4D8               	btfsc	status,2,c
 14803  0131DA  D7C7               	goto	l353
 14804  0131DC  0A03               	xorlw	3	; case 2
 14805  0131DE  B4D8               	btfsc	status,2,c
 14806  0131E0  D7CB               	goto	l354
 14807  0131E2  0A01               	xorlw	1	; case 3
 14808  0131E4  B4D8               	btfsc	status,2,c
 14809  0131E6  D7CF               	goto	l355
 14810  0131E8  0A07               	xorlw	7	; case 4
 14811  0131EA  B4D8               	btfsc	status,2,c
 14812  0131EC  D7D3               	goto	l356
 14813  0131EE  0A01               	xorlw	1	; case 5
 14814  0131F0  B4D8               	btfsc	status,2,c
 14815  0131F2  D7D7               	goto	l357
 14816  0131F4  0A03               	xorlw	3	; case 6
 14817  0131F6  B4D8               	btfsc	status,2,c
 14818  0131F8  D7DB               	goto	l358
 14819  0131FA  D7E1               	goto	l359
 14820  0131FC                     __end_of_GetPortPORT:
 14821                           	opt stack 0
 14822                           tosu	equ	0xFFF
 14823                           tosh	equ	0xFFE
 14824                           tosl	equ	0xFFD
 14825                           pclath	equ	0xFFA
 14826                           tblptru	equ	0xFF8
 14827                           tblptrh	equ	0xFF7
 14828                           tblptrl	equ	0xFF6
 14829                           tablat	equ	0xFF5
 14830                           prodh	equ	0xFF4
 14831                           prodl	equ	0xFF3
 14832                           intcon	equ	0xFF2
 14833                           postinc0	equ	0xFEE
 14834                           plusw0	equ	0xFEB
 14835                           wreg	equ	0xFE8
 14836                           indf1	equ	0xFE7
 14837                           postdec1	equ	0xFE5
 14838                           fsr1h	equ	0xFE2
 14839                           fsr1l	equ	0xFE1
 14840                           indf2	equ	0xFDF
 14841                           postinc2	equ	0xFDE
 14842                           postdec2	equ	0xFDD
 14843                           plusw2	equ	0xFDB
 14844                           fsr2h	equ	0xFDA
 14845                           fsr2l	equ	0xFD9
 14846                           status	equ	0xFD8
 14847                           
 14848 ;; *************** function _LED_Init *****************
 14849 ;; Defined at:
 14850 ;;		line 15 in file "Library/LED.c"
 14851 ;; Parameters:    Size  Location     Type
 14852 ;;  pLED            1    wreg     enum E6739
 14853 ;; Auto vars:     Size  Location     Type
 14854 ;;  pLED            1   45[BANK0 ] enum E6739
 14855 ;; Return value:  Size  Location     Type
 14856 ;;                  1    wreg      void 
 14857 ;; Registers used:
 14858 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14859 ;; Tracked objects:
 14860 ;;		On entry : 0/0
 14861 ;;		On exit  : 0/0
 14862 ;;		Unchanged: 0/0
 14863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14864 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14865 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14867 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14868 ;;Total ram usage:        1 bytes
 14869 ;; Hardware stack levels used:    1
 14870 ;; Hardware stack levels required when called:   12
 14871 ;; This function calls:
 14872 ;;		_LED_Set
 14873 ;;		_Port_SetPinType
 14874 ;; This function is called by:
 14875 ;;		_MXK_Init
 14876 ;; This function uses a non-reentrant model
 14877 ;;
 14878                           
 14879                           	psect	text77
 14880  013E60                     __ptext77:
 14881                           	opt stack 0
 14882  013E60                     _LED_Init:
 14883                           	opt stack 16
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;incstack = 0
 14887                           ;LED_Init@pLED stored from wreg
 14888  013E60  0100               	movlb	0	; () banked
 14889  013E62  6FE5               	movwf	LED_Init@pLED& (0+255),b
 14890                           
 14891                           ;LED.c: 17: switch (pLED)
 14892  013E64  D01E               	goto	l220
 14893  013E66                     
 14894                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 14895  013E66  0E91               	movlw	low _PortC
 14896  013E68  0100               	movlb	0	; () banked
 14897  013E6A  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 14898  013E6C  0E00               	movlw	high _PortC
 14899  013E6E  0100               	movlb	0	; () banked
 14900  013E70  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14901  013E72  0E00               	movlw	0
 14902  013E74  0100               	movlb	0	; () banked
 14903  013E76  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 14904  013E78  0E03               	movlw	3
 14905  013E7A  0100               	movlb	0	; () banked
 14906  013E7C  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 14907  013E7E  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 14908                           
 14909                           ;LED.c: 21: break;
 14910  013E82  D017               	goto	l222
 14911  013E84                     
 14912                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 14913  013E84  0E91               	movlw	low _PortC
 14914  013E86  0100               	movlb	0	; () banked
 14915  013E88  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 14916  013E8A  0E00               	movlw	high _PortC
 14917  013E8C  0100               	movlb	0	; () banked
 14918  013E8E  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14919  013E90  0E01               	movlw	1
 14920  013E92  0100               	movlb	0	; () banked
 14921  013E94  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 14922  013E96  0E03               	movlw	3
 14923  013E98  0100               	movlb	0	; () banked
 14924  013E9A  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 14925  013E9C  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 14926                           
 14927                           ;LED.c: 25: }
 14928                           
 14929                           ;LED.c: 24: break;
 14930  013EA0  D008               	goto	l222
 14931  013EA2                     l220:
 14932  013EA2  0100               	movlb	0	; () banked
 14933  013EA4  51E5               	movf	LED_Init@pLED& (0+255),w,b
 14934                           
 14935                           ; Switch size 1, requested type "space"
 14936                           ; Number of cases is 2, Range of values is 0 to 1
 14937                           ; switch strategies available:
 14938                           ; Name         Instructions Cycles
 14939                           ; simple_byte            7     4 (average)
 14940                           ;	Chosen strategy is simple_byte
 14941  013EA6  0A00               	xorlw	0	; case 0
 14942  013EA8  B4D8               	btfsc	status,2,c
 14943  013EAA  D7DD               	goto	l221
 14944  013EAC  0A01               	xorlw	1	; case 1
 14945  013EAE  B4D8               	btfsc	status,2,c
 14946  013EB0  D7E9               	goto	l223
 14947  013EB2                     l222:
 14948                           
 14949                           ;LED.c: 26: LED_Set(pLED, 0);
 14950                           
 14951                           ; BSR set to: 0
 14952  013EB2  0E00               	movlw	0
 14953  013EB4  0100               	movlb	0	; () banked
 14954  013EB6  6FCC               	movwf	LED_Set@pValue& (0+255),b
 14955  013EB8  0100               	movlb	0	; () banked
 14956  013EBA  51E5               	movf	LED_Init@pLED& (0+255),w,b
 14957  013EBC  EC94  F0A0         	call	_LED_Set
 14958  013EC0  0012               	return		;funcret
 14959  013EC2                     __end_of_LED_Init:
 14960                           	opt stack 0
 14961                           tosu	equ	0xFFF
 14962                           tosh	equ	0xFFE
 14963                           tosl	equ	0xFFD
 14964                           pclath	equ	0xFFA
 14965                           tblptru	equ	0xFF8
 14966                           tblptrh	equ	0xFF7
 14967                           tblptrl	equ	0xFF6
 14968                           tablat	equ	0xFF5
 14969                           prodh	equ	0xFF4
 14970                           prodl	equ	0xFF3
 14971                           intcon	equ	0xFF2
 14972                           postinc0	equ	0xFEE
 14973                           plusw0	equ	0xFEB
 14974                           wreg	equ	0xFE8
 14975                           indf1	equ	0xFE7
 14976                           postdec1	equ	0xFE5
 14977                           fsr1h	equ	0xFE2
 14978                           fsr1l	equ	0xFE1
 14979                           indf2	equ	0xFDF
 14980                           postinc2	equ	0xFDE
 14981                           postdec2	equ	0xFDD
 14982                           plusw2	equ	0xFDB
 14983                           fsr2h	equ	0xFDA
 14984                           fsr2l	equ	0xFD9
 14985                           status	equ	0xFD8
 14986                           
 14987 ;; *************** function _LED_Set *****************
 14988 ;; Defined at:
 14989 ;;		line 33 in file "Library/LED.c"
 14990 ;; Parameters:    Size  Location     Type
 14991 ;;  pLED            1    wreg     enum E6739
 14992 ;;  pValue          1   20[BANK0 ] unsigned char 
 14993 ;; Auto vars:     Size  Location     Type
 14994 ;;  pLED            1   21[BANK0 ] enum E6739
 14995 ;; Return value:  Size  Location     Type
 14996 ;;                  1    wreg      void 
 14997 ;; Registers used:
 14998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14999 ;; Tracked objects:
 15000 ;;		On entry : 0/0
 15001 ;;		On exit  : 0/0
 15002 ;;		Unchanged: 0/0
 15003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15004 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15007 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15008 ;;Total ram usage:        2 bytes
 15009 ;; Hardware stack levels used:    1
 15010 ;; Hardware stack levels required when called:   11
 15011 ;; This function calls:
 15012 ;;		_Port_SetPin
 15013 ;; This function is called by:
 15014 ;;		_LED_Init
 15015 ;;		_SYSTEM_Initialize
 15016 ;; This function uses a non-reentrant model
 15017 ;;
 15018                           
 15019                           	psect	text78
 15020  014128                     __ptext78:
 15021                           	opt stack 0
 15022  014128                     _LED_Set:
 15023                           	opt stack 16
 15024                           
 15025                           ;incstack = 0
 15026                           ;LED_Set@pLED stored from wreg
 15027  014128  0100               	movlb	0	; () banked
 15028  01412A  6FCD               	movwf	LED_Set@pLED& (0+255),b
 15029                           
 15030                           ;LED.c: 35: switch (pLED)
 15031  01412C  D01C               	goto	l227
 15032  01412E                     
 15033                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 15034  01412E  0E91               	movlw	low _PortC
 15035  014130  0100               	movlb	0	; () banked
 15036  014132  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15037  014134  0E00               	movlw	high _PortC
 15038  014136  0100               	movlb	0	; () banked
 15039  014138  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15040  01413A  0E00               	movlw	0
 15041  01413C  0100               	movlb	0	; () banked
 15042  01413E  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15043  014140  C0CC  F0CA         	movff	LED_Set@pValue,Port_SetPin@pValue
 15044  014144  EC6E  F094         	call	_Port_SetPin	;wreg free
 15045                           
 15046                           ;LED.c: 39: break;
 15047  014148  0012               	return	
 15048  01414A                     
 15049                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 15050  01414A  0E91               	movlw	low _PortC
 15051  01414C  0100               	movlb	0	; () banked
 15052  01414E  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15053  014150  0E00               	movlw	high _PortC
 15054  014152  0100               	movlb	0	; () banked
 15055  014154  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15056  014156  0E01               	movlw	1
 15057  014158  0100               	movlb	0	; () banked
 15058  01415A  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15059  01415C  C0CC  F0CA         	movff	LED_Set@pValue,Port_SetPin@pValue
 15060  014160  EC6E  F094         	call	_Port_SetPin	;wreg free
 15061                           
 15062                           ;LED.c: 43: }
 15063                           
 15064                           ;LED.c: 42: break;
 15065  014164  0012               	return	
 15066  014166                     l227:
 15067  014166  0100               	movlb	0	; () banked
 15068  014168  51CD               	movf	LED_Set@pLED& (0+255),w,b
 15069                           
 15070                           ; Switch size 1, requested type "space"
 15071                           ; Number of cases is 2, Range of values is 0 to 1
 15072                           ; switch strategies available:
 15073                           ; Name         Instructions Cycles
 15074                           ; simple_byte            7     4 (average)
 15075                           ;	Chosen strategy is simple_byte
 15076  01416A  0A00               	xorlw	0	; case 0
 15077  01416C  B4D8               	btfsc	status,2,c
 15078  01416E  D7DF               	goto	l228
 15079  014170  0A01               	xorlw	1	; case 1
 15080  014172  A4D8               	btfss	status,2,c
 15081  014174  0012               	return	
 15082  014176  D7E9               	goto	l230
 15083  014178                     __end_of_LED_Set:
 15084                           	opt stack 0
 15085                           tosu	equ	0xFFF
 15086                           tosh	equ	0xFFE
 15087                           tosl	equ	0xFFD
 15088                           pclath	equ	0xFFA
 15089                           tblptru	equ	0xFF8
 15090                           tblptrh	equ	0xFF7
 15091                           tblptrl	equ	0xFF6
 15092                           tablat	equ	0xFF5
 15093                           prodh	equ	0xFF4
 15094                           prodl	equ	0xFF3
 15095                           intcon	equ	0xFF2
 15096                           postinc0	equ	0xFEE
 15097                           plusw0	equ	0xFEB
 15098                           wreg	equ	0xFE8
 15099                           indf1	equ	0xFE7
 15100                           postdec1	equ	0xFE5
 15101                           fsr1h	equ	0xFE2
 15102                           fsr1l	equ	0xFE1
 15103                           indf2	equ	0xFDF
 15104                           postinc2	equ	0xFDE
 15105                           postdec2	equ	0xFDD
 15106                           plusw2	equ	0xFDB
 15107                           fsr2h	equ	0xFDA
 15108                           fsr2l	equ	0xFD9
 15109                           status	equ	0xFD8
 15110                           
 15111 ;; *************** function _MXK_Dequeue *****************
 15112 ;; Defined at:
 15113 ;;		line 153 in file "Library/MXK.c"
 15114 ;; Parameters:    Size  Location     Type
 15115 ;;		None
 15116 ;; Auto vars:     Size  Location     Type
 15117 ;;		None
 15118 ;; Return value:  Size  Location     Type
 15119 ;;                  1    wreg      void 
 15120 ;; Registers used:
 15121 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15122 ;; Tracked objects:
 15123 ;;		On entry : 0/0
 15124 ;;		On exit  : 0/0
 15125 ;;		Unchanged: 0/0
 15126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15131 ;;Total ram usage:        0 bytes
 15132 ;; Hardware stack levels used:    1
 15133 ;; Hardware stack levels required when called:   12
 15134 ;; This function calls:
 15135 ;;		Absolute function
 15136 ;;		_Motor_Step
 15137 ;; This function is called by:
 15138 ;;		_FunctMotor
 15139 ;;		_initialise
 15140 ;;		_main
 15141 ;; This function uses a non-reentrant model
 15142 ;;
 15143                           
 15144                           	psect	text79
 15145  014480                     __ptext79:
 15146                           	opt stack 0
 15147  014480                     _MXK_Dequeue:
 15148                           	opt stack 15
 15149                           
 15150                           ;MXK.c: 155: if (lQueue)
 15151                           
 15152                           ;incstack = 0
 15153  014480  0100               	movlb	0	; () banked
 15154  014482  5168               	movf	_lQueue& (0+255),w,b	;volatile
 15155  014484  0100               	movlb	0	; () banked
 15156  014486  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 15157  014488  0100               	movlb	0	; () banked
 15158  01448A  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 15159  01448C  B4D8               	btfsc	status,2,c
 15160  01448E  D00D               	goto	u9989
 15161                           
 15162                           ; BSR set to: 0
 15163                           ;MXK.c: 156: lQueue();
 15164  014490  D801               	call	u9988
 15165  014492  D00B               	goto	u9989
 15166  014494                     u9988:
 15167  014494  0005               	push	
 15168  014496  6EFA               	movwf	pclath,c
 15169  014498  0100               	movlb	0	; () banked
 15170  01449A  5168               	movf	_lQueue& (0+255),w,b	;volatile
 15171  01449C  6EFD               	movwf	tosl,c
 15172  01449E  5169               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 15173  0144A0  6EFE               	movwf	tosh,c
 15174  0144A2  516A               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 15175  0144A4  6EFF               	movwf	tosu,c
 15176  0144A6  50FA               	movf	pclath,w,c
 15177  0144A8  0012               	return		;indir
 15178  0144AA                     u9989:
 15179                           
 15180                           ;MXK.c: 157: lQueue = 0;
 15181  0144AA  0E00               	movlw	0
 15182  0144AC  0100               	movlb	0	; () banked
 15183  0144AE  6F68               	movwf	_lQueue& (0+255),b	;volatile
 15184  0144B0  0E00               	movlw	0
 15185  0144B2  0100               	movlb	0	; () banked
 15186  0144B4  6F69               	movwf	(_lQueue+1)& (0+255),b	;volatile
 15187  0144B6  0E00               	movlw	0
 15188  0144B8  0100               	movlb	0	; () banked
 15189  0144BA  6F6A               	movwf	(_lQueue+2)& (0+255),b	;volatile
 15190                           
 15191                           ; BSR set to: 0
 15192  0144BC  0012               	return		;funcret
 15193  0144BE                     __end_of_MXK_Dequeue:
 15194                           	opt stack 0
 15195                           tosu	equ	0xFFF
 15196                           tosh	equ	0xFFE
 15197                           tosl	equ	0xFFD
 15198                           pclath	equ	0xFFA
 15199                           tblptru	equ	0xFF8
 15200                           tblptrh	equ	0xFF7
 15201                           tblptrl	equ	0xFF6
 15202                           tablat	equ	0xFF5
 15203                           prodh	equ	0xFF4
 15204                           prodl	equ	0xFF3
 15205                           intcon	equ	0xFF2
 15206                           postinc0	equ	0xFEE
 15207                           plusw0	equ	0xFEB
 15208                           wreg	equ	0xFE8
 15209                           indf1	equ	0xFE7
 15210                           postdec1	equ	0xFE5
 15211                           fsr1h	equ	0xFE2
 15212                           fsr1l	equ	0xFE1
 15213                           indf2	equ	0xFDF
 15214                           postinc2	equ	0xFDE
 15215                           postdec2	equ	0xFDD
 15216                           plusw2	equ	0xFDB
 15217                           fsr2h	equ	0xFDA
 15218                           fsr2l	equ	0xFD9
 15219                           status	equ	0xFD8
 15220                           
 15221 ;; *************** function _Motor_Step *****************
 15222 ;; Defined at:
 15223 ;;		line 75 in file "Library/Motor.c"
 15224 ;; Parameters:    Size  Location     Type
 15225 ;;		None
 15226 ;; Auto vars:     Size  Location     Type
 15227 ;;		None
 15228 ;; Return value:  Size  Location     Type
 15229 ;;                  1    wreg      void 
 15230 ;; Registers used:
 15231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15232 ;; Tracked objects:
 15233 ;;		On entry : 0/0
 15234 ;;		On exit  : 0/0
 15235 ;;		Unchanged: 0/0
 15236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15240 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15241 ;;Total ram usage:        2 bytes
 15242 ;; Hardware stack levels used:    1
 15243 ;; Hardware stack levels required when called:   11
 15244 ;; This function calls:
 15245 ;;		_MXK_Queue
 15246 ;;		_MXK_Release
 15247 ;;		_MXK_SwitchTo
 15248 ;;		_Port_SetPin
 15249 ;;		_Timer0_Restart
 15250 ;;		_Timer0_Stop
 15251 ;; This function is called by:
 15252 ;;		_Motor_Init
 15253 ;;		_MXK_Dequeue
 15254 ;;		_Timer0_ISR
 15255 ;; This function uses a non-reentrant model
 15256 ;;
 15257                           
 15258                           	psect	text80
 15259  01236A                     __ptext80:
 15260                           	opt stack 0
 15261  01236A                     _Motor_Step:
 15262                           	opt stack 0
 15263                           
 15264                           ; BSR set to: 0
 15265                           ;Skip over the trampoline to the duplicate function for level 2
 15266  01236A  B251               	btfsc	btemp,1,c
 15267  01236C  EF48  F092         	goto	i2_Motor_Step
 15268  012370                     _Motor_Step$intlevel0:
 15269                           	opt stack 15
 15270                           
 15271                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 15272                           
 15273                           ;incstack = 0
 15274  012370  0100               	movlb	0	; () banked
 15275  012372  EE20 F004          	lfsr	2,4
 15276  012376  516F               	movf	_lMotor& (0+255),w,b
 15277  012378  26D9               	addwf	fsr2l,f,c
 15278  01237A  5170               	movf	(_lMotor+1)& (0+255),w,b
 15279  01237C  22DA               	addwfc	fsr2h,f,c
 15280  01237E  50DF               	movf	indf2,w,c
 15281  012380  ECDF  F0A1         	call	_MXK_SwitchTo
 15282  012384  0900               	iorlw	0
 15283  012386  B4D8               	btfsc	status,2,c
 15284  012388  D07A               	goto	l1635
 15285                           
 15286                           ;Motor.c: 78: {
 15287                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 15288  01238A  C06F  FFD9         	movff	_lMotor,fsr2l
 15289  01238E  C070  FFDA         	movff	_lMotor+1,fsr2h
 15290  012392  50DE               	movf	postinc2,w,c
 15291  012394  10DE               	iorwf	postinc2,w,c
 15292  012396  B4D8               	btfsc	status,2,c
 15293  012398  D06D               	goto	l1636
 15294                           
 15295                           ;Motor.c: 80: {
 15296                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 15297  01239A  C06F  FFD9         	movff	_lMotor,fsr2l
 15298  01239E  C070  FFDA         	movff	_lMotor+1,fsr2h
 15299  0123A2  0E01               	movlw	1
 15300  0123A4  BEDB               	btfsc	plusw2,7,c
 15301  0123A6  D026               	goto	l1637
 15302  0123A8  0E01               	movlw	1
 15303  0123AA  50DB               	movf	plusw2,w,c
 15304  0123AC  E103               	bnz	u7750
 15305  0123AE  04DE               	decf	postinc2,w,c
 15306  0123B0  A0D8               	btfss	status,0,c
 15307  0123B2  D020               	goto	l1637
 15308  0123B4                     u7750:
 15309                           
 15310                           ;Motor.c: 83: {
 15311                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 15312  0123B4  C06F  FFD9         	movff	_lMotor,fsr2l
 15313  0123B8  C070  FFDA         	movff	_lMotor+1,fsr2h
 15314  0123BC  28DE               	incf	postinc2,w,c
 15315  0123BE  E104               	bnz	u7760
 15316  0123C0  0E7F               	movlw	127
 15317  0123C2  18DE               	xorwf	postinc2,w,c
 15318  0123C4  B4D8               	btfsc	status,2,c
 15319  0123C6  D007               	goto	l1638
 15320  0123C8                     u7760:
 15321                           
 15322                           ;Motor.c: 85: lMotor->mDelta --;
 15323  0123C8  C06F  FFD9         	movff	_lMotor,fsr2l
 15324  0123CC  C070  FFDA         	movff	_lMotor+1,fsr2h
 15325  0123D0  06DE               	decf	postinc2,f,c
 15326  0123D2  0E00               	movlw	0
 15327  0123D4  5ADD               	subwfb	postdec2,f,c
 15328  0123D6                     l1638:
 15329                           
 15330                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 15331  0123D6  0E7D               	movlw	low _PortE
 15332  0123D8  0100               	movlb	0	; () banked
 15333  0123DA  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15334  0123DC  0E00               	movlw	high _PortE
 15335  0123DE  0100               	movlb	0	; () banked
 15336  0123E0  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15337  0123E2  0E00               	movlw	0
 15338  0123E4  0100               	movlb	0	; () banked
 15339  0123E6  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15340  0123E8  0E01               	movlw	1
 15341  0123EA  0100               	movlb	0	; () banked
 15342  0123EC  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15343  0123EE  EC6E  F094         	call	_Port_SetPin	;wreg free
 15344                           
 15345                           ;Motor.c: 88: }
 15346  0123F2  D01F               	goto	l1639
 15347  0123F4                     l1637:
 15348                           
 15349                           ;Motor.c: 89: else
 15350                           ;Motor.c: 90: {
 15351                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 15352  0123F4  C06F  FFD9         	movff	_lMotor,fsr2l
 15353  0123F8  C070  FFDA         	movff	_lMotor+1,fsr2h
 15354  0123FC  04DE               	decf	postinc2,w,c
 15355  0123FE  E104               	bnz	u7770
 15356  012400  0E80               	movlw	128
 15357  012402  18DE               	xorwf	postinc2,w,c
 15358  012404  B4D8               	btfsc	status,2,c
 15359  012406  D007               	goto	l1640
 15360  012408                     u7770:
 15361                           
 15362                           ;Motor.c: 92: lMotor->mDelta ++;
 15363  012408  C06F  FFD9         	movff	_lMotor,fsr2l
 15364  01240C  C070  FFDA         	movff	_lMotor+1,fsr2h
 15365  012410  2ADE               	incf	postinc2,f,c
 15366  012412  0E00               	movlw	0
 15367  012414  22DD               	addwfc	postdec2,f,c
 15368  012416                     l1640:
 15369                           
 15370                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 15371  012416  0E7D               	movlw	low _PortE
 15372  012418  0100               	movlb	0	; () banked
 15373  01241A  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15374  01241C  0E00               	movlw	high _PortE
 15375  01241E  0100               	movlb	0	; () banked
 15376  012420  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15377  012422  0E00               	movlw	0
 15378  012424  0100               	movlb	0	; () banked
 15379  012426  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15380  012428  0E00               	movlw	0
 15381  01242A  0100               	movlb	0	; () banked
 15382  01242C  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15383  01242E  EC6E  F094         	call	_Port_SetPin	;wreg free
 15384  012432                     l1639:
 15385                           
 15386                           ;Motor.c: 95: }
 15387                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 15388  012432  0E7D               	movlw	low _PortE
 15389  012434  0100               	movlb	0	; () banked
 15390  012436  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15391  012438  0E00               	movlw	high _PortE
 15392  01243A  0100               	movlb	0	; () banked
 15393  01243C  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15394  01243E  0E01               	movlw	1
 15395  012440  0100               	movlb	0	; () banked
 15396  012442  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15397  012444  0E01               	movlw	1
 15398  012446  0100               	movlb	0	; () banked
 15399  012448  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15400  01244A  EC6E  F094         	call	_Port_SetPin	;wreg free
 15401                           
 15402                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 15403  01244E  0E7D               	movlw	low _PortE
 15404  012450  0100               	movlb	0	; () banked
 15405  012452  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 15406  012454  0E00               	movlw	high _PortE
 15407  012456  0100               	movlb	0	; () banked
 15408  012458  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15409  01245A  0E01               	movlw	1
 15410  01245C  0100               	movlb	0	; () banked
 15411  01245E  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 15412  012460  0E00               	movlw	0
 15413  012462  0100               	movlb	0	; () banked
 15414  012464  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 15415  012466  EC6E  F094         	call	_Port_SetPin	;wreg free
 15416                           
 15417                           ;Motor.c: 101: MXK_Release();
 15418  01246A  EC2C  F0A5         	call	_MXK_Release	;wreg free
 15419                           
 15420                           ;Motor.c: 102: Timer0_Restart();
 15421  01246E  ECF2  F0A5         	call	_Timer0_Restart	;wreg free
 15422                           
 15423                           ;Motor.c: 103: return;
 15424  012472  0012               	return	
 15425  012474                     l1636:
 15426                           
 15427                           ;Motor.c: 104: }
 15428                           ;Motor.c: 105: MXK_Release();
 15429  012474  EC2C  F0A5         	call	_MXK_Release	;wreg free
 15430                           
 15431                           ;Motor.c: 106: Timer0_Stop();
 15432  012478  EC1E  F0A6         	call	_Timer0_Stop	;wreg free
 15433                           
 15434                           ;Motor.c: 107: return;
 15435  01247C  0012               	return	
 15436  01247E                     l1635:
 15437                           
 15438                           ;Motor.c: 108: }
 15439                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 15440  01247E  C02C  F0B8         	movff	_lStepFunction,MXK_Queue@pCallback
 15441  012482  C02D  F0B9         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 15442  012486  C02E  F0BA         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 15443  01248A  ECDE  F0A5         	call	_MXK_Queue	;wreg free
 15444  01248E  0012               	return		;funcret
 15445  012490                     __end_of_Motor_Step:
 15446                           	opt stack 0
 15447                           tosu	equ	0xFFF
 15448                           tosh	equ	0xFFE
 15449                           tosl	equ	0xFFD
 15450                           pclath	equ	0xFFA
 15451                           tblptru	equ	0xFF8
 15452                           tblptrh	equ	0xFF7
 15453                           tblptrl	equ	0xFF6
 15454                           tablat	equ	0xFF5
 15455                           prodh	equ	0xFF4
 15456                           prodl	equ	0xFF3
 15457                           intcon	equ	0xFF2
 15458                           postinc0	equ	0xFEE
 15459                           plusw0	equ	0xFEB
 15460                           wreg	equ	0xFE8
 15461                           indf1	equ	0xFE7
 15462                           postdec1	equ	0xFE5
 15463                           fsr1h	equ	0xFE2
 15464                           fsr1l	equ	0xFE1
 15465                           indf2	equ	0xFDF
 15466                           postinc2	equ	0xFDE
 15467                           postdec2	equ	0xFDD
 15468                           plusw2	equ	0xFDB
 15469                           fsr2h	equ	0xFDA
 15470                           fsr2l	equ	0xFD9
 15471                           status	equ	0xFD8
 15472                           
 15473 ;; *************** function _Timer0_Stop *****************
 15474 ;; Defined at:
 15475 ;;		line 89 in file "Library/Timer0.c"
 15476 ;; Parameters:    Size  Location     Type
 15477 ;;		None
 15478 ;; Auto vars:     Size  Location     Type
 15479 ;;		None
 15480 ;; Return value:  Size  Location     Type
 15481 ;;                  1    wreg      void 
 15482 ;; Registers used:
 15483 ;;		None
 15484 ;; Tracked objects:
 15485 ;;		On entry : 0/0
 15486 ;;		On exit  : 0/0
 15487 ;;		Unchanged: 0/0
 15488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15493 ;;Total ram usage:        0 bytes
 15494 ;; Hardware stack levels used:    1
 15495 ;; Hardware stack levels required when called:    7
 15496 ;; This function calls:
 15497 ;;		Nothing
 15498 ;; This function is called by:
 15499 ;;		_Motor_Step
 15500 ;; This function uses a non-reentrant model
 15501 ;;
 15502                           
 15503                           	psect	text81
 15504  014C3C                     __ptext81:
 15505                           	opt stack 0
 15506  014C3C                     _Timer0_Stop:
 15507                           	opt stack 18
 15508                           
 15509                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 15510                           
 15511                           ;incstack = 0
 15512  014C3C  9AF2               	bcf	intcon,5,c	;volatile
 15513                           
 15514                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 15515  014C3E  94F2               	bcf	intcon,2,c	;volatile
 15516  014C40  0012               	return		;funcret
 15517  014C42                     __end_of_Timer0_Stop:
 15518                           	opt stack 0
 15519                           tosu	equ	0xFFF
 15520                           tosh	equ	0xFFE
 15521                           tosl	equ	0xFFD
 15522                           pclath	equ	0xFFA
 15523                           tblptru	equ	0xFF8
 15524                           tblptrh	equ	0xFF7
 15525                           tblptrl	equ	0xFF6
 15526                           tablat	equ	0xFF5
 15527                           prodh	equ	0xFF4
 15528                           prodl	equ	0xFF3
 15529                           intcon	equ	0xFF2
 15530                           postinc0	equ	0xFEE
 15531                           plusw0	equ	0xFEB
 15532                           wreg	equ	0xFE8
 15533                           indf1	equ	0xFE7
 15534                           postdec1	equ	0xFE5
 15535                           fsr1h	equ	0xFE2
 15536                           fsr1l	equ	0xFE1
 15537                           indf2	equ	0xFDF
 15538                           postinc2	equ	0xFDE
 15539                           postdec2	equ	0xFDD
 15540                           plusw2	equ	0xFDB
 15541                           fsr2h	equ	0xFDA
 15542                           fsr2l	equ	0xFD9
 15543                           status	equ	0xFD8
 15544                           
 15545 ;; *************** function _Timer0_Restart *****************
 15546 ;; Defined at:
 15547 ;;		line 83 in file "Library/Timer0.c"
 15548 ;; Parameters:    Size  Location     Type
 15549 ;;		None
 15550 ;; Auto vars:     Size  Location     Type
 15551 ;;		None
 15552 ;; Return value:  Size  Location     Type
 15553 ;;                  1    wreg      void 
 15554 ;; Registers used:
 15555 ;;		None
 15556 ;; Tracked objects:
 15557 ;;		On entry : 0/0
 15558 ;;		On exit  : 0/0
 15559 ;;		Unchanged: 0/0
 15560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15565 ;;Total ram usage:        0 bytes
 15566 ;; Hardware stack levels used:    1
 15567 ;; Hardware stack levels required when called:    7
 15568 ;; This function calls:
 15569 ;;		Nothing
 15570 ;; This function is called by:
 15571 ;;		_Motor_Step
 15572 ;; This function uses a non-reentrant model
 15573 ;;
 15574                           
 15575                           	psect	text82
 15576  014BE4                     __ptext82:
 15577                           	opt stack 0
 15578  014BE4                     _Timer0_Restart:
 15579                           	opt stack 18
 15580                           
 15581                           ;Timer0.c: 85: TMR0 = COUNTER;
 15582                           
 15583                           ;incstack = 0
 15584  014BE4  C031  FFD6         	movff	_COUNTER,4054	;volatile
 15585  014BE8  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 15586                           
 15587                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 15588  014BEC  8AF2               	bsf	intcon,5,c	;volatile
 15589  014BEE  0012               	return		;funcret
 15590  014BF0                     __end_of_Timer0_Restart:
 15591                           	opt stack 0
 15592                           tosu	equ	0xFFF
 15593                           tosh	equ	0xFFE
 15594                           tosl	equ	0xFFD
 15595                           pclath	equ	0xFFA
 15596                           tblptru	equ	0xFF8
 15597                           tblptrh	equ	0xFF7
 15598                           tblptrl	equ	0xFF6
 15599                           tablat	equ	0xFF5
 15600                           prodh	equ	0xFF4
 15601                           prodl	equ	0xFF3
 15602                           intcon	equ	0xFF2
 15603                           postinc0	equ	0xFEE
 15604                           plusw0	equ	0xFEB
 15605                           wreg	equ	0xFE8
 15606                           indf1	equ	0xFE7
 15607                           postdec1	equ	0xFE5
 15608                           fsr1h	equ	0xFE2
 15609                           fsr1l	equ	0xFE1
 15610                           indf2	equ	0xFDF
 15611                           postinc2	equ	0xFDE
 15612                           postdec2	equ	0xFDD
 15613                           plusw2	equ	0xFDB
 15614                           fsr2h	equ	0xFDA
 15615                           fsr2l	equ	0xFD9
 15616                           status	equ	0xFD8
 15617                           
 15618 ;; *************** function _MXK_SwitchTo *****************
 15619 ;; Defined at:
 15620 ;;		line 105 in file "Library/MXK.c"
 15621 ;; Parameters:    Size  Location     Type
 15622 ;;  pModule         1    wreg     enum E6925
 15623 ;; Auto vars:     Size  Location     Type
 15624 ;;  pModule         1    7[BANK0 ] enum E6925
 15625 ;;  CUR             1    6[BANK0 ] unsigned char 
 15626 ;; Return value:  Size  Location     Type
 15627 ;;                  1    wreg      unsigned char 
 15628 ;; Registers used:
 15629 ;;		wreg, status,2, status,0, cstack
 15630 ;; Tracked objects:
 15631 ;;		On entry : 0/0
 15632 ;;		On exit  : 0/0
 15633 ;;		Unchanged: 0/0
 15634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15636 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15639 ;;Total ram usage:        2 bytes
 15640 ;; Hardware stack levels used:    1
 15641 ;; Hardware stack levels required when called:    8
 15642 ;; This function calls:
 15643 ;;		_delay_us
 15644 ;; This function is called by:
 15645 ;;		_Motor_Step
 15646 ;; This function uses a non-reentrant model
 15647 ;;
 15648                           
 15649                           	psect	text83
 15650  0143BE                     __ptext83:
 15651                           	opt stack 0
 15652  0143BE                     _MXK_SwitchTo:
 15653                           	opt stack 17
 15654                           
 15655                           ;incstack = 0
 15656                           ;MXK_SwitchTo@pModule stored from wreg
 15657  0143BE  0100               	movlb	0	; () banked
 15658  0143C0  6FBF               	movwf	MXK_SwitchTo@pModule& (0+255),b
 15659                           
 15660                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 15661  0143C2  5086               	movf	3974,w,c	;volatile
 15662  0143C4  0B0F               	andlw	15
 15663  0143C6  0100               	movlb	0	; () banked
 15664  0143C8  6FBE               	movwf	MXK_SwitchTo@CUR& (0+255),b
 15665                           
 15666                           ; BSR set to: 0
 15667                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 15668  0143CA  504B               	movf	_Bus_State,w,c
 15669  0143CC  A4D8               	btfss	status,2,c
 15670  0143CE  D002               	goto	l1738
 15671                           
 15672                           ; BSR set to: 0
 15673                           ;MXK.c: 110: return 0;
 15674  0143D0  0E00               	movlw	0
 15675                           
 15676                           ; BSR set to: 0
 15677  0143D2  0012               	return	
 15678  0143D4                     l1738:
 15679                           
 15680                           ; BSR set to: 0
 15681                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 15682                           
 15683                           ; BSR set to: 0
 15684  0143D4  0E00               	movlw	0
 15685  0143D6  6E4B               	movwf	_Bus_State,c
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;MXK.c: 114: if (CUR != pModule)
 15689  0143D8  0100               	movlb	0	; () banked
 15690  0143DA  51BF               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15691  0143DC  0100               	movlb	0	; () banked
 15692  0143DE  19BE               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 15693  0143E0  B4D8               	btfsc	status,2,c
 15694  0143E2  D00C               	goto	l1740
 15695                           
 15696                           ; BSR set to: 0
 15697                           ;MXK.c: 115: {
 15698                           ;MXK.c: 116: PORTG &= ~(0xF);
 15699  0143E4  0EF0               	movlw	240
 15700  0143E6  1686               	andwf	3974,f,c	;volatile
 15701                           
 15702                           ;MXK.c: 117: PORTG |= pModule;
 15703  0143E8  0100               	movlb	0	; () banked
 15704  0143EA  51BF               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 15705  0143EC  1286               	iorwf	3974,f,c	;volatile
 15706                           
 15707                           ; BSR set to: 0
 15708                           ;MXK.c: 120: delay_us(10);
 15709  0143EE  0E00               	movlw	0
 15710  0143F0  0100               	movlb	0	; () banked
 15711  0143F2  6FB9               	movwf	(delay_us@us+1)& (0+255),b
 15712  0143F4  0E0A               	movlw	10
 15713  0143F6  6FB8               	movwf	delay_us@us& (0+255),b
 15714  0143F8  EC43  F0A0         	call	_delay_us	;wreg free
 15715  0143FC                     l1740:
 15716                           
 15717                           ;MXK.c: 121: }
 15718                           ;MXK.c: 122: return 1;
 15719  0143FC  0E01               	movlw	1
 15720  0143FE  0012               	return	
 15721  014400                     __end_of_MXK_SwitchTo:
 15722                           	opt stack 0
 15723                           tosu	equ	0xFFF
 15724                           tosh	equ	0xFFE
 15725                           tosl	equ	0xFFD
 15726                           pclath	equ	0xFFA
 15727                           tblptru	equ	0xFF8
 15728                           tblptrh	equ	0xFF7
 15729                           tblptrl	equ	0xFF6
 15730                           tablat	equ	0xFF5
 15731                           prodh	equ	0xFF4
 15732                           prodl	equ	0xFF3
 15733                           intcon	equ	0xFF2
 15734                           postinc0	equ	0xFEE
 15735                           plusw0	equ	0xFEB
 15736                           wreg	equ	0xFE8
 15737                           indf1	equ	0xFE7
 15738                           postdec1	equ	0xFE5
 15739                           fsr1h	equ	0xFE2
 15740                           fsr1l	equ	0xFE1
 15741                           indf2	equ	0xFDF
 15742                           postinc2	equ	0xFDE
 15743                           postdec2	equ	0xFDD
 15744                           plusw2	equ	0xFDB
 15745                           fsr2h	equ	0xFDA
 15746                           fsr2l	equ	0xFD9
 15747                           status	equ	0xFD8
 15748                           
 15749 ;; *************** function _MXK_Release *****************
 15750 ;; Defined at:
 15751 ;;		line 130 in file "Library/MXK.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;		None
 15754 ;; Auto vars:     Size  Location     Type
 15755 ;;		None
 15756 ;; Return value:  Size  Location     Type
 15757 ;;                  1    wreg      unsigned char 
 15758 ;; Registers used:
 15759 ;;		wreg, status,2, status,0
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15769 ;;Total ram usage:        0 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; Hardware stack levels required when called:    7
 15772 ;; This function calls:
 15773 ;;		Nothing
 15774 ;; This function is called by:
 15775 ;;		_Motor_Step
 15776 ;;		_FunctMotor
 15777 ;;		_initialise
 15778 ;;		_main
 15779 ;; This function uses a non-reentrant model
 15780 ;;
 15781                           
 15782                           	psect	text84
 15783  014A58                     __ptext84:
 15784                           	opt stack 0
 15785  014A58                     _MXK_Release:
 15786                           	opt stack 20
 15787                           
 15788                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 15789                           
 15790                           ;incstack = 0
 15791  014A58  0E01               	movlw	1
 15792  014A5A  6E4B               	movwf	_Bus_State,c
 15793                           
 15794                           ;MXK.c: 134: if (lQueue != 0)
 15795  014A5C  0100               	movlb	0	; () banked
 15796  014A5E  5168               	movf	_lQueue& (0+255),w,b	;volatile
 15797  014A60  0100               	movlb	0	; () banked
 15798  014A62  1169               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 15799  014A64  0100               	movlb	0	; () banked
 15800  014A66  116A               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 15801  014A68  B4D8               	btfsc	status,2,c
 15802  014A6A  D002               	goto	l1743
 15803                           
 15804                           ; BSR set to: 0
 15805                           ;MXK.c: 135: return 1;
 15806  014A6C  0E01               	movlw	1
 15807                           
 15808                           ; BSR set to: 0
 15809  014A6E  0012               	return	
 15810  014A70                     l1743:
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;MXK.c: 137: return 0;
 15814                           
 15815                           ; BSR set to: 0
 15816  014A70  0E00               	movlw	0
 15817  014A72  0012               	return	
 15818  014A74                     __end_of_MXK_Release:
 15819                           	opt stack 0
 15820                           tosu	equ	0xFFF
 15821                           tosh	equ	0xFFE
 15822                           tosl	equ	0xFFD
 15823                           pclath	equ	0xFFA
 15824                           tblptru	equ	0xFF8
 15825                           tblptrh	equ	0xFF7
 15826                           tblptrl	equ	0xFF6
 15827                           tablat	equ	0xFF5
 15828                           prodh	equ	0xFF4
 15829                           prodl	equ	0xFF3
 15830                           intcon	equ	0xFF2
 15831                           postinc0	equ	0xFEE
 15832                           plusw0	equ	0xFEB
 15833                           wreg	equ	0xFE8
 15834                           indf1	equ	0xFE7
 15835                           postdec1	equ	0xFE5
 15836                           fsr1h	equ	0xFE2
 15837                           fsr1l	equ	0xFE1
 15838                           indf2	equ	0xFDF
 15839                           postinc2	equ	0xFDE
 15840                           postdec2	equ	0xFDD
 15841                           plusw2	equ	0xFDB
 15842                           fsr2h	equ	0xFDA
 15843                           fsr2l	equ	0xFD9
 15844                           status	equ	0xFD8
 15845                           
 15846 ;; *************** function _MXK_Queue *****************
 15847 ;; Defined at:
 15848 ;;		line 144 in file "Library/MXK.c"
 15849 ;; Parameters:    Size  Location     Type
 15850 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 15851 ;;		 -> Absolute function(1), Motor_Step(1), 
 15852 ;; Auto vars:     Size  Location     Type
 15853 ;;		None
 15854 ;; Return value:  Size  Location     Type
 15855 ;;                  1    wreg      void 
 15856 ;; Registers used:
 15857 ;;		wreg, status,2, status,0
 15858 ;; Tracked objects:
 15859 ;;		On entry : 0/0
 15860 ;;		On exit  : 0/0
 15861 ;;		Unchanged: 0/0
 15862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15863 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15866 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15867 ;;Total ram usage:        3 bytes
 15868 ;; Hardware stack levels used:    1
 15869 ;; Hardware stack levels required when called:    7
 15870 ;; This function calls:
 15871 ;;		Nothing
 15872 ;; This function is called by:
 15873 ;;		_Motor_Step
 15874 ;; This function uses a non-reentrant model
 15875 ;;
 15876                           
 15877                           	psect	text85
 15878  014BBC                     __ptext85:
 15879                           	opt stack 0
 15880  014BBC                     _MXK_Queue:
 15881                           	opt stack 18
 15882                           
 15883                           ;MXK.c: 146: lQueue = pCallback;
 15884                           
 15885                           ; BSR set to: 0
 15886                           ;incstack = 0
 15887  014BBC  C0B8  F068         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 15888  014BC0  C0B9  F069         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 15889  014BC4  C0BA  F06A         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 15890  014BC8  0012               	return		;funcret
 15891  014BCA                     __end_of_MXK_Queue:
 15892                           	opt stack 0
 15893                           tosu	equ	0xFFF
 15894                           tosh	equ	0xFFE
 15895                           tosl	equ	0xFFD
 15896                           pclath	equ	0xFFA
 15897                           tblptru	equ	0xFF8
 15898                           tblptrh	equ	0xFF7
 15899                           tblptrl	equ	0xFF6
 15900                           tablat	equ	0xFF5
 15901                           prodh	equ	0xFF4
 15902                           prodl	equ	0xFF3
 15903                           intcon	equ	0xFF2
 15904                           postinc0	equ	0xFEE
 15905                           plusw0	equ	0xFEB
 15906                           wreg	equ	0xFE8
 15907                           indf1	equ	0xFE7
 15908                           postdec1	equ	0xFE5
 15909                           fsr1h	equ	0xFE2
 15910                           fsr1l	equ	0xFE1
 15911                           indf2	equ	0xFDF
 15912                           postinc2	equ	0xFDE
 15913                           postdec2	equ	0xFDD
 15914                           plusw2	equ	0xFDB
 15915                           fsr2h	equ	0xFDA
 15916                           fsr2l	equ	0xFD9
 15917                           status	equ	0xFD8
 15918                           
 15919 ;; *************** function _MXK_BlockSwitchTo *****************
 15920 ;; Defined at:
 15921 ;;		line 82 in file "Library/MXK.c"
 15922 ;; Parameters:    Size  Location     Type
 15923 ;;  pModule         1    wreg     enum E6925
 15924 ;; Auto vars:     Size  Location     Type
 15925 ;;  pModule         1    7[BANK0 ] enum E6925
 15926 ;;  CUR             1    6[BANK0 ] unsigned char 
 15927 ;; Return value:  Size  Location     Type
 15928 ;;                  1    wreg      unsigned char 
 15929 ;; Registers used:
 15930 ;;		wreg, status,2, status,0, cstack
 15931 ;; Tracked objects:
 15932 ;;		On entry : 0/0
 15933 ;;		On exit  : 0/0
 15934 ;;		Unchanged: 0/0
 15935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15937 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15939 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15940 ;;Total ram usage:        2 bytes
 15941 ;; Hardware stack levels used:    1
 15942 ;; Hardware stack levels required when called:    8
 15943 ;; This function calls:
 15944 ;;		_delay_us
 15945 ;; This function is called by:
 15946 ;;		_FunctMotor
 15947 ;;		_initialise
 15948 ;;		_main
 15949 ;; This function uses a non-reentrant model
 15950 ;;
 15951                           
 15952                           	psect	text86
 15953  0144BE                     __ptext86:
 15954                           	opt stack 0
 15955  0144BE                     _MXK_BlockSwitchTo:
 15956                           	opt stack 19
 15957                           
 15958                           ;incstack = 0
 15959                           ;MXK_BlockSwitchTo@pModule stored from wreg
 15960  0144BE  0100               	movlb	0	; () banked
 15961  0144C0  6FBF               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 15962                           
 15963                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 15964  0144C2  5086               	movf	3974,w,c	;volatile
 15965  0144C4  0B0F               	andlw	15
 15966  0144C6  0100               	movlb	0	; () banked
 15967  0144C8  6FBE               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 15968  0144CA                     
 15969                           ; BSR set to: 0
 15970                           
 15971                           ; BSR set to: 0
 15972  0144CA  504B               	movf	_Bus_State,w,c
 15973  0144CC  B4D8               	btfsc	status,2,c
 15974  0144CE  D7FD               	goto	l1732
 15975                           
 15976                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 15977  0144D0  0E00               	movlw	0
 15978  0144D2  6E4B               	movwf	_Bus_State,c
 15979                           
 15980                           ;MXK.c: 90: if (CUR != pModule)
 15981  0144D4  0100               	movlb	0	; () banked
 15982  0144D6  51BF               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15983  0144D8  0100               	movlb	0	; () banked
 15984  0144DA  19BE               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 15985  0144DC  B4D8               	btfsc	status,2,c
 15986  0144DE  D00C               	goto	l1734
 15987                           
 15988                           ; BSR set to: 0
 15989                           ;MXK.c: 91: {
 15990                           ;MXK.c: 92: PORTG &= ~(0xF);
 15991  0144E0  0EF0               	movlw	240
 15992  0144E2  1686               	andwf	3974,f,c	;volatile
 15993                           
 15994                           ;MXK.c: 93: PORTG |= pModule;
 15995  0144E4  0100               	movlb	0	; () banked
 15996  0144E6  51BF               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 15997  0144E8  1286               	iorwf	3974,f,c	;volatile
 15998                           
 15999                           ; BSR set to: 0
 16000                           ;MXK.c: 96: delay_us(10);
 16001  0144EA  0E00               	movlw	0
 16002  0144EC  0100               	movlb	0	; () banked
 16003  0144EE  6FB9               	movwf	(delay_us@us+1)& (0+255),b
 16004  0144F0  0E0A               	movlw	10
 16005  0144F2  6FB8               	movwf	delay_us@us& (0+255),b
 16006  0144F4  EC43  F0A0         	call	_delay_us	;wreg free
 16007  0144F8                     l1734:
 16008                           
 16009                           ;MXK.c: 97: }
 16010                           ;MXK.c: 98: return 1;
 16011  0144F8  0E01               	movlw	1
 16012  0144FA  0012               	return	
 16013  0144FC                     __end_of_MXK_BlockSwitchTo:
 16014                           	opt stack 0
 16015                           tosu	equ	0xFFF
 16016                           tosh	equ	0xFFE
 16017                           tosl	equ	0xFFD
 16018                           pclath	equ	0xFFA
 16019                           tblptru	equ	0xFF8
 16020                           tblptrh	equ	0xFF7
 16021                           tblptrl	equ	0xFF6
 16022                           tablat	equ	0xFF5
 16023                           prodh	equ	0xFF4
 16024                           prodl	equ	0xFF3
 16025                           intcon	equ	0xFF2
 16026                           postinc0	equ	0xFEE
 16027                           plusw0	equ	0xFEB
 16028                           wreg	equ	0xFE8
 16029                           indf1	equ	0xFE7
 16030                           postdec1	equ	0xFE5
 16031                           fsr1h	equ	0xFE2
 16032                           fsr1l	equ	0xFE1
 16033                           indf2	equ	0xFDF
 16034                           postinc2	equ	0xFDE
 16035                           postdec2	equ	0xFDD
 16036                           plusw2	equ	0xFDB
 16037                           fsr2h	equ	0xFDA
 16038                           fsr2l	equ	0xFD9
 16039                           status	equ	0xFD8
 16040                           
 16041 ;; *************** function _delay_us *****************
 16042 ;; Defined at:
 16043 ;;		line 255 in file "Library/Types.c"
 16044 ;; Parameters:    Size  Location     Type
 16045 ;;  us              2    0[BANK0 ] unsigned short 
 16046 ;; Auto vars:     Size  Location     Type
 16047 ;;  u               4    2[BANK0 ] unsigned long 
 16048 ;; Return value:  Size  Location     Type
 16049 ;;                  1    wreg      void 
 16050 ;; Registers used:
 16051 ;;		wreg, status,2, status,0
 16052 ;; Tracked objects:
 16053 ;;		On entry : 0/0
 16054 ;;		On exit  : 0/0
 16055 ;;		Unchanged: 0/0
 16056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16057 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16058 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16060 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16061 ;;Total ram usage:        6 bytes
 16062 ;; Hardware stack levels used:    1
 16063 ;; Hardware stack levels required when called:    7
 16064 ;; This function calls:
 16065 ;;		Nothing
 16066 ;; This function is called by:
 16067 ;;		_MXK_BlockSwitchTo
 16068 ;;		_MXK_SwitchTo
 16069 ;; This function uses a non-reentrant model
 16070 ;;
 16071                           
 16072                           	psect	text87
 16073  014086                     __ptext87:
 16074                           	opt stack 0
 16075  014086                     _delay_us:
 16076                           	opt stack 17
 16077                           
 16078                           ;Types.c: 256: unsigned long u;
 16079                           ;Types.c: 257: while (us--) {
 16080                           
 16081                           ;incstack = 0
 16082  014086  D01C               	goto	u7280
 16083  014088                     l10757:
 16084                           
 16085                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 16086  014088  0E00               	movlw	0
 16087  01408A  0100               	movlb	0	; () banked
 16088  01408C  6FBA               	movwf	delay_us@u& (0+255),b
 16089  01408E  0E00               	movlw	0
 16090  014090  6FBB               	movwf	(delay_us@u+1)& (0+255),b
 16091  014092  0E00               	movlw	0
 16092  014094  6FBC               	movwf	(delay_us@u+2)& (0+255),b
 16093  014096  0E00               	movlw	0
 16094  014098  6FBD               	movwf	(delay_us@u+3)& (0+255),b
 16095  01409A                     l10759:
 16096                           
 16097                           ; BSR set to: 0
 16098  01409A  0100               	movlb	0	; () banked
 16099  01409C  51BA               	movf	delay_us@u& (0+255),w,b
 16100  01409E  0100               	movlb	0	; () banked
 16101  0140A0  11BB               	iorwf	(delay_us@u+1)& (0+255),w,b
 16102  0140A2  0100               	movlb	0	; () banked
 16103  0140A4  11BC               	iorwf	(delay_us@u+2)& (0+255),w,b
 16104  0140A6  0100               	movlb	0	; () banked
 16105  0140A8  11BD               	iorwf	(delay_us@u+3)& (0+255),w,b
 16106  0140AA  A4D8               	btfss	status,2,c
 16107  0140AC  D009               	goto	u7280
 16108                           
 16109                           ; BSR set to: 0
 16110                           
 16111                           ; BSR set to: 0
 16112  0140AE  F000               	nop		; ;# 
 16113  0140B0  0E01               	movlw	1
 16114  0140B2  0100               	movlb	0	; () banked
 16115  0140B4  27BA               	addwf	delay_us@u& (0+255),f,b
 16116  0140B6  0E00               	movlw	0
 16117  0140B8  23BB               	addwfc	(delay_us@u+1)& (0+255),f,b
 16118  0140BA  23BC               	addwfc	(delay_us@u+2)& (0+255),f,b
 16119  0140BC  23BD               	addwfc	(delay_us@u+3)& (0+255),f,b
 16120  0140BE  D7ED               	goto	l10759
 16121  0140C0                     u7280:
 16122                           
 16123                           ; BSR set to: 0
 16124                           
 16125                           ; BSR set to: 0
 16126  0140C0  0100               	movlb	0	; () banked
 16127  0140C2  07B8               	decf	delay_us@us& (0+255),f,b
 16128  0140C4  A0D8               	btfss	status,0,c
 16129  0140C6  07B9               	decf	(delay_us@us+1)& (0+255),f,b
 16130  0140C8  0100               	movlb	0	; () banked
 16131  0140CA  29B8               	incf	delay_us@us& (0+255),w,b
 16132  0140CC  E1DD               	bnz	l10757
 16133  0140CE  0100               	movlb	0	; () banked
 16134  0140D0  29B9               	incf	(delay_us@us+1)& (0+255),w,b
 16135  0140D2  B4D8               	btfsc	status,2,c
 16136  0140D4  0012               	return	
 16137  0140D6  D7D8               	goto	l832
 16138  0140D8                     __end_of_delay_us:
 16139                           	opt stack 0
 16140                           tosu	equ	0xFFF
 16141                           tosh	equ	0xFFE
 16142                           tosl	equ	0xFFD
 16143                           pclath	equ	0xFFA
 16144                           tblptru	equ	0xFF8
 16145                           tblptrh	equ	0xFF7
 16146                           tblptrl	equ	0xFF6
 16147                           tablat	equ	0xFF5
 16148                           prodh	equ	0xFF4
 16149                           prodl	equ	0xFF3
 16150                           intcon	equ	0xFF2
 16151                           postinc0	equ	0xFEE
 16152                           plusw0	equ	0xFEB
 16153                           wreg	equ	0xFE8
 16154                           indf1	equ	0xFE7
 16155                           postdec1	equ	0xFE5
 16156                           fsr1h	equ	0xFE2
 16157                           fsr1l	equ	0xFE1
 16158                           indf2	equ	0xFDF
 16159                           postinc2	equ	0xFDE
 16160                           postdec2	equ	0xFDD
 16161                           plusw2	equ	0xFDB
 16162                           fsr2h	equ	0xFDA
 16163                           fsr2l	equ	0xFD9
 16164                           status	equ	0xFD8
 16165                           
 16166 ;; *************** function _LCD_Init *****************
 16167 ;; Defined at:
 16168 ;;		line 172 in file "Library/LCD.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;		None
 16171 ;; Auto vars:     Size  Location     Type
 16172 ;;  i               2   55[BANK0 ] unsigned short 
 16173 ;; Return value:  Size  Location     Type
 16174 ;;                  1    wreg      void 
 16175 ;; Registers used:
 16176 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16177 ;; Tracked objects:
 16178 ;;		On entry : 0/0
 16179 ;;		On exit  : 0/0
 16180 ;;		Unchanged: 0/0
 16181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16183 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16184 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16185 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16186 ;;Total ram usage:        4 bytes
 16187 ;; Hardware stack levels used:    1
 16188 ;; Hardware stack levels required when called:   15
 16189 ;; This function calls:
 16190 ;;		_Configure_GPIOs
 16191 ;;		_LCD_Fill
 16192 ;;		_LCD_Write
 16193 ;;		_Set_Rotation
 16194 ;;		_delay_ms
 16195 ;; This function is called by:
 16196 ;;		_initialise
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           	psect	text88
 16201  011DD2                     __ptext88:
 16202                           	opt stack 0
 16203  011DD2                     _LCD_Init:
 16204                           	opt stack 14
 16205                           
 16206                           ;LCD.c: 174: UINT16 i;
 16207                           ;LCD.c: 175: Configure_GPIOs();
 16208                           
 16209                           ; BSR set to: 0
 16210                           ;incstack = 0
 16211  011DD2  EC8C  F09D         	call	_Configure_GPIOs	;wreg free
 16212                           
 16213                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 16214  011DD6  0E00               	movlw	0
 16215  011DD8  0100               	movlb	0	; () banked
 16216  011DDA  6FF0               	movwf	(LCD_Init@i+1)& (0+255),b
 16217  011DDC  0E00               	movlw	0
 16218  011DDE  6FEF               	movwf	LCD_Init@i& (0+255),b
 16219                           
 16220                           ; BSR set to: 0
 16221  011DE0  0100               	movlb	0	; () banked
 16222  011DE2  51F0               	movf	(LCD_Init@i+1)& (0+255),w,b
 16223  011DE4  E106               	bnz	u8290
 16224  011DE6  0E59               	movlw	89
 16225  011DE8  0100               	movlb	0	; () banked
 16226  011DEA  5DEF               	subwf	LCD_Init@i& (0+255),w,b
 16227  011DEC  B0D8               	btfsc	status,0,c
 16228  011DEE  D08B               	goto	u8330
 16229  011DF0  D001               	goto	l85
 16230  011DF2                     u8290:
 16231                           
 16232                           ; BSR set to: 0
 16233  011DF2  D089               	goto	u8330
 16234  011DF4                     l85:
 16235                           
 16236                           ; BSR set to: 0
 16237                           ;LCD.c: 178: {
 16238                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 16239                           
 16240                           ; BSR set to: 0
 16241  011DF4  90D8               	bcf	status,0,c
 16242  011DF6  0100               	movlb	0	; () banked
 16243  011DF8  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 16244  011DFA  6EF6               	movwf	tblptrl,c
 16245  011DFC  0100               	movlb	0	; () banked
 16246  011DFE  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16247  011E00  6EF7               	movwf	tblptrh,c
 16248  011E02  0E6F               	movlw	low _InitList
 16249  011E04  26F6               	addwf	tblptrl,f,c
 16250  011E06  0EFC               	movlw	high _InitList
 16251  011E08  22F7               	addwfc	tblptrh,f,c
 16252  011E0A                     	if	1	;There are 3 active tblptr bytes
 16253  011E0A  6AF8               	clrf	tblptru,c
 16254  011E0C  0E00               	movlw	low (__mediumconst shr (0+16))
 16255  011E0E  22F8               	addwfc	tblptru,f,c
 16256  011E10                     	endif
 16257  011E10  0009               	tblrd		*+
 16258  011E12  0E80               	movlw	128
 16259  011E14  18F5               	xorwf	tablat,w,c
 16260  011E16  0009               	tblrd		*+
 16261  011E18  10F5               	iorwf	tablat,w,c
 16262  011E1A  A4D8               	btfss	status,2,c
 16263  011E1C  D022               	goto	l87
 16264                           
 16265                           ; BSR set to: 0
 16266  011E1E  0100               	movlb	0	; () banked
 16267  011E20  51F0               	movf	(LCD_Init@i+1)& (0+255),w,b
 16268  011E22  E11F               	bnz	l11911
 16269  011E24  0E58               	movlw	88
 16270  011E26  0100               	movlb	0	; () banked
 16271  011E28  5DEF               	subwf	LCD_Init@i& (0+255),w,b
 16272  011E2A  B0D8               	btfsc	status,0,c
 16273  011E2C  D01A               	goto	l87
 16274                           
 16275                           ; BSR set to: 0
 16276                           ;LCD.c: 180: delay_ms(InitList[++i]);
 16277  011E2E  0100               	movlb	0	; () banked
 16278  011E30  4BEF               	infsnz	LCD_Init@i& (0+255),f,b
 16279  011E32  2BF0               	incf	(LCD_Init@i+1)& (0+255),f,b
 16280  011E34  90D8               	bcf	status,0,c
 16281  011E36  0100               	movlb	0	; () banked
 16282  011E38  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 16283  011E3A  6EF6               	movwf	tblptrl,c
 16284  011E3C  0100               	movlb	0	; () banked
 16285  011E3E  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16286  011E40  6EF7               	movwf	tblptrh,c
 16287  011E42  0E6F               	movlw	low _InitList
 16288  011E44  26F6               	addwf	tblptrl,f,c
 16289  011E46  0EFC               	movlw	high _InitList
 16290  011E48  22F7               	addwfc	tblptrh,f,c
 16291  011E4A                     	if	1	;There are 3 active tblptr bytes
 16292  011E4A  6AF8               	clrf	tblptru,c
 16293  011E4C  0E00               	movlw	low (__mediumconst shr (0+16))
 16294  011E4E  22F8               	addwfc	tblptru,f,c
 16295  011E50                     	endif
 16296  011E50  0009               	tblrd		*+
 16297  011E52  CFF5 F0B8          	movff	tablat,delay_ms@ms
 16298  011E56  000A               	tblrd		*-
 16299  011E58  CFF5 F0B9          	movff	tablat,delay_ms@ms+1
 16300  011E5C  EC30  F09E         	call	_delay_ms	;wreg free
 16301  011E60  D04B               	goto	l90
 16302  011E62                     l87:
 16303  011E62                     l11911:
 16304                           
 16305                           ;LCD.c: 181: else
 16306                           ;LCD.c: 182: {
 16307                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 16308  011E62  90D8               	bcf	status,0,c
 16309  011E64  0100               	movlb	0	; () banked
 16310  011E66  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 16311  011E68  6EF6               	movwf	tblptrl,c
 16312  011E6A  0100               	movlb	0	; () banked
 16313  011E6C  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16314  011E6E  6EF7               	movwf	tblptrh,c
 16315  011E70  0E6F               	movlw	low _InitList
 16316  011E72  26F6               	addwf	tblptrl,f,c
 16317  011E74  0EFC               	movlw	high _InitList
 16318  011E76  22F7               	addwfc	tblptrh,f,c
 16319  011E78                     	if	1	;There are 3 active tblptr bytes
 16320  011E78  6AF8               	clrf	tblptru,c
 16321  011E7A  0E00               	movlw	low (__mediumconst shr (0+16))
 16322  011E7C  22F8               	addwfc	tblptru,f,c
 16323  011E7E                     	endif
 16324  011E7E  0009               	tblrd		*+
 16325  011E80  0E00               	movlw	0
 16326  011E82  5EF5               	subwf	tablat,f,c
 16327  011E84  0009               	tblrd		*+
 16328  011E86  0E01               	movlw	1
 16329  011E88  5AF5               	subwfb	tablat,f,c
 16330  011E8A  A0D8               	btfss	status,0,c
 16331  011E8C  D020               	goto	l89
 16332                           
 16333                           ; BSR set to: 0
 16334  011E8E  0E00               	movlw	0
 16335  011E90  0100               	movlb	0	; () banked
 16336  011E92  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16337  011E94  90D8               	bcf	status,0,c
 16338  011E96  0100               	movlb	0	; () banked
 16339  011E98  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 16340  011E9A  6EF6               	movwf	tblptrl,c
 16341  011E9C  0100               	movlb	0	; () banked
 16342  011E9E  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16343  011EA0  6EF7               	movwf	tblptrh,c
 16344  011EA2  0E6F               	movlw	low _InitList
 16345  011EA4  26F6               	addwf	tblptrl,f,c
 16346  011EA6  0EFC               	movlw	high _InitList
 16347  011EA8  22F7               	addwfc	tblptrh,f,c
 16348  011EAA                     	if	1	;There are 3 active tblptr bytes
 16349  011EAA  6AF8               	clrf	tblptru,c
 16350  011EAC  0E00               	movlw	low (__mediumconst shr (0+16))
 16351  011EAE  22F8               	addwfc	tblptru,f,c
 16352  011EB0                     	endif
 16353  011EB0  0009               	tblrd		*+
 16354  011EB2  CFF5 F0ED          	movff	tablat,??_LCD_Init
 16355  011EB6  0009               	tblrd		*+
 16356  011EB8  CFF5 F0EE          	movff	tablat,??_LCD_Init+1
 16357  011EBC  C0EE  F0ED         	movff	??_LCD_Init+1,??_LCD_Init
 16358  011EC0  0100               	movlb	0	; () banked
 16359  011EC2  6BEE               	clrf	(??_LCD_Init+1)& (0+255),b
 16360  011EC4  0100               	movlb	0	; () banked
 16361  011EC6  51ED               	movf	??_LCD_Init& (0+255),w,b
 16362  011EC8  EC80  F0A4         	call	_LCD_Write
 16363  011ECC  D015               	goto	l90
 16364  011ECE                     l89:
 16365                           
 16366                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 16367  011ECE  0E01               	movlw	1
 16368  011ED0  0100               	movlb	0	; () banked
 16369  011ED2  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16370  011ED4  90D8               	bcf	status,0,c
 16371  011ED6  0100               	movlb	0	; () banked
 16372  011ED8  35EF               	rlcf	LCD_Init@i& (0+255),w,b
 16373  011EDA  6EF6               	movwf	tblptrl,c
 16374  011EDC  0100               	movlb	0	; () banked
 16375  011EDE  35F0               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 16376  011EE0  6EF7               	movwf	tblptrh,c
 16377  011EE2  0E6F               	movlw	low _InitList
 16378  011EE4  26F6               	addwf	tblptrl,f,c
 16379  011EE6  0EFC               	movlw	high _InitList
 16380  011EE8  22F7               	addwfc	tblptrh,f,c
 16381  011EEA                     	if	1	;There are 3 active tblptr bytes
 16382  011EEA  6AF8               	clrf	tblptru,c
 16383  011EEC  0E00               	movlw	low (__mediumconst shr (0+16))
 16384  011EEE  22F8               	addwfc	tblptru,f,c
 16385  011EF0                     	endif
 16386  011EF0  0008               	tblrd		*
 16387  011EF2  50F5               	movf	tablat,w,c
 16388  011EF4  EC80  F0A4         	call	_LCD_Write
 16389  011EF8                     l90:
 16390  011EF8  0100               	movlb	0	; () banked
 16391  011EFA  4BEF               	infsnz	LCD_Init@i& (0+255),f,b
 16392  011EFC  2BF0               	incf	(LCD_Init@i+1)& (0+255),f,b
 16393                           
 16394                           ; BSR set to: 0
 16395  011EFE  0100               	movlb	0	; () banked
 16396  011F00  51F0               	movf	(LCD_Init@i+1)& (0+255),w,b
 16397  011F02  E101               	bnz	l11921
 16398  011F04  D770               	goto	L6
 16399  011F06                     u8330:
 16400  011F06                     l11921:
 16401                           
 16402                           ; BSR set to: 0
 16403                           ;LCD.c: 185: }
 16404                           ;LCD.c: 186: }
 16405                           ;LCD.c: 187: delay_ms(100);
 16406  011F06  0E00               	movlw	0
 16407  011F08  0100               	movlb	0	; () banked
 16408  011F0A  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 16409  011F0C  0E64               	movlw	100
 16410  011F0E  6FB8               	movwf	delay_ms@ms& (0+255),b
 16411  011F10  EC30  F09E         	call	_delay_ms	;wreg free
 16412                           
 16413                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 16414  011F14  0E00               	movlw	0
 16415  011F16  0100               	movlb	0	; () banked
 16416  011F18  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16417  011F1A  0E29               	movlw	41
 16418  011F1C  EC80  F0A4         	call	_LCD_Write
 16419                           
 16420                           ;LCD.c: 189: Set_Rotation(1);
 16421  011F20  0E01               	movlw	1
 16422  011F22  EC8B  F09A         	call	_Set_Rotation
 16423                           
 16424                           ;LCD.c: 191: delay_ms(100);
 16425  011F26  0E00               	movlw	0
 16426  011F28  0100               	movlb	0	; () banked
 16427  011F2A  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 16428  011F2C  0E64               	movlw	100
 16429  011F2E  6FB8               	movwf	delay_ms@ms& (0+255),b
 16430  011F30  EC30  F09E         	call	_delay_ms	;wreg free
 16431                           
 16432                           ;LCD.c: 192: LCD_Fill(0x0000);
 16433  011F34  0E00               	movlw	0
 16434  011F36  0100               	movlb	0	; () banked
 16435  011F38  6FC2               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 16436  011F3A  0E00               	movlw	0
 16437  011F3C  6FC1               	movwf	LCD_Fill@pColour& (0+255),b
 16438  011F3E  EC17  F0A0         	call	_LCD_Fill	;wreg free
 16439  011F42  0012               	return		;funcret
 16440  011F44                     __end_of_LCD_Init:
 16441                           	opt stack 0
 16442                           tosu	equ	0xFFF
 16443                           tosh	equ	0xFFE
 16444                           tosl	equ	0xFFD
 16445                           pclath	equ	0xFFA
 16446                           tblptru	equ	0xFF8
 16447                           tblptrh	equ	0xFF7
 16448                           tblptrl	equ	0xFF6
 16449                           tablat	equ	0xFF5
 16450                           prodh	equ	0xFF4
 16451                           prodl	equ	0xFF3
 16452                           intcon	equ	0xFF2
 16453                           postinc0	equ	0xFEE
 16454                           plusw0	equ	0xFEB
 16455                           wreg	equ	0xFE8
 16456                           indf1	equ	0xFE7
 16457                           postdec1	equ	0xFE5
 16458                           fsr1h	equ	0xFE2
 16459                           fsr1l	equ	0xFE1
 16460                           indf2	equ	0xFDF
 16461                           postinc2	equ	0xFDE
 16462                           postdec2	equ	0xFDD
 16463                           plusw2	equ	0xFDB
 16464                           fsr2h	equ	0xFDA
 16465                           fsr2l	equ	0xFD9
 16466                           status	equ	0xFD8
 16467                           
 16468 ;; *************** function _Set_Rotation *****************
 16469 ;; Defined at:
 16470 ;;		line 248 in file "Library/LCD.c"
 16471 ;; Parameters:    Size  Location     Type
 16472 ;;  m               1    wreg     unsigned char 
 16473 ;; Auto vars:     Size  Location     Type
 16474 ;;  m               1    5[BANK0 ] unsigned char 
 16475 ;;  rotation        1    6[BANK0 ] unsigned char 
 16476 ;; Return value:  Size  Location     Type
 16477 ;;                  1    wreg      void 
 16478 ;; Registers used:
 16479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16480 ;; Tracked objects:
 16481 ;;		On entry : 0/0
 16482 ;;		On exit  : 0/0
 16483 ;;		Unchanged: 0/0
 16484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16486 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16488 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16489 ;;Total ram usage:        2 bytes
 16490 ;; Hardware stack levels used:    1
 16491 ;; Hardware stack levels required when called:    9
 16492 ;; This function calls:
 16493 ;;		_LCD_Write
 16494 ;; This function is called by:
 16495 ;;		_LCD_Init
 16496 ;; This function uses a non-reentrant model
 16497 ;;
 16498                           
 16499                           	psect	text89
 16500  013516                     __ptext89:
 16501                           	opt stack 0
 16502  013516                     _Set_Rotation:
 16503                           	opt stack 19
 16504                           
 16505                           ;incstack = 0
 16506                           ;Set_Rotation@m stored from wreg
 16507  013516  0100               	movlb	0	; () banked
 16508  013518  6FBD               	movwf	Set_Rotation@m& (0+255),b
 16509                           
 16510                           ;LCD.c: 250: UINT8 rotation = 0x00;
 16511  01351A  0E00               	movlw	0
 16512  01351C  0100               	movlb	0	; () banked
 16513  01351E  6FBE               	movwf	Set_Rotation@rotation& (0+255),b
 16514                           
 16515                           ; BSR set to: 0
 16516                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 16517  013520  0E00               	movlw	0
 16518  013522  0100               	movlb	0	; () banked
 16519  013524  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16520  013526  0E36               	movlw	54
 16521  013528  EC80  F0A4         	call	_LCD_Write
 16522                           
 16523                           ;LCD.c: 253: rotation = (m % 4);
 16524  01352C  0100               	movlb	0	; () banked
 16525  01352E  51BD               	movf	Set_Rotation@m& (0+255),w,b
 16526  013530  0B03               	andlw	3
 16527  013532  0100               	movlb	0	; () banked
 16528  013534  6FBE               	movwf	Set_Rotation@rotation& (0+255),b
 16529                           
 16530                           ;LCD.c: 255: switch(rotation)
 16531  013536  D02C               	goto	l117
 16532  013538                     
 16533                           ; BSR set to: 0
 16534                           ;LCD.c: 258: {
 16535                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 16536                           
 16537                           ; BSR set to: 0
 16538  013538  0E01               	movlw	1
 16539  01353A  0100               	movlb	0	; () banked
 16540  01353C  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16541  01353E  0EC8               	movlw	200
 16542  013540  EC80  F0A4         	call	_LCD_Write
 16543                           
 16544                           ;LCD.c: 260: w = 128;
 16545  013544  0E80               	movlw	128
 16546  013546  6E50               	movwf	_w,c
 16547                           
 16548                           ;LCD.c: 261: l = 128;
 16549  013548  0E80               	movlw	128
 16550  01354A  6E4F               	movwf	_l,c
 16551                           
 16552                           ;LCD.c: 262: break;
 16553  01354C  0012               	return	
 16554  01354E                     
 16555                           ;LCD.c: 265: {
 16556                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 16557  01354E  0E01               	movlw	1
 16558  013550  0100               	movlb	0	; () banked
 16559  013552  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16560  013554  0EA8               	movlw	168
 16561  013556  EC80  F0A4         	call	_LCD_Write
 16562                           
 16563                           ;LCD.c: 267: w = 128;
 16564  01355A  0E80               	movlw	128
 16565  01355C  6E50               	movwf	_w,c
 16566                           
 16567                           ;LCD.c: 268: l = 128;
 16568  01355E  0E80               	movlw	128
 16569  013560  6E4F               	movwf	_l,c
 16570                           
 16571                           ;LCD.c: 269: break;
 16572  013562  0012               	return	
 16573  013564                     
 16574                           ;LCD.c: 272: {
 16575                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 16576  013564  0E01               	movlw	1
 16577  013566  0100               	movlb	0	; () banked
 16578  013568  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16579  01356A  0E08               	movlw	8
 16580  01356C  EC80  F0A4         	call	_LCD_Write
 16581                           
 16582                           ;LCD.c: 274: w = 128;
 16583  013570  0E80               	movlw	128
 16584  013572  6E50               	movwf	_w,c
 16585                           
 16586                           ;LCD.c: 275: l = 128;
 16587  013574  0E80               	movlw	128
 16588  013576  6E4F               	movwf	_l,c
 16589                           
 16590                           ;LCD.c: 276: break;
 16591  013578  0012               	return	
 16592  01357A                     
 16593                           ;LCD.c: 279: {
 16594                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 16595  01357A  0E01               	movlw	1
 16596  01357C  0100               	movlb	0	; () banked
 16597  01357E  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16598  013580  0E68               	movlw	104
 16599  013582  EC80  F0A4         	call	_LCD_Write
 16600                           
 16601                           ;LCD.c: 281: w = 128;
 16602  013586  0E80               	movlw	128
 16603  013588  6E50               	movwf	_w,c
 16604                           
 16605                           ;LCD.c: 282: l = 128;
 16606  01358A  0E80               	movlw	128
 16607  01358C  6E4F               	movwf	_l,c
 16608                           
 16609                           ;LCD.c: 284: }
 16610                           ;LCD.c: 285: }
 16611                           
 16612                           ;LCD.c: 283: break;
 16613  01358E  0012               	return	
 16614  013590                     l117:
 16615  013590  0100               	movlb	0	; () banked
 16616  013592  51BE               	movf	Set_Rotation@rotation& (0+255),w,b
 16617                           
 16618                           ; Switch size 1, requested type "space"
 16619                           ; Number of cases is 4, Range of values is 0 to 3
 16620                           ; switch strategies available:
 16621                           ; Name         Instructions Cycles
 16622                           ; simple_byte           13     7 (average)
 16623                           ;	Chosen strategy is simple_byte
 16624  013594  0A00               	xorlw	0	; case 0
 16625  013596  B4D8               	btfsc	status,2,c
 16626  013598  D7CF               	goto	l118
 16627  01359A  0A01               	xorlw	1	; case 1
 16628  01359C  B4D8               	btfsc	status,2,c
 16629  01359E  D7D7               	goto	l120
 16630  0135A0  0A03               	xorlw	3	; case 2
 16631  0135A2  B4D8               	btfsc	status,2,c
 16632  0135A4  D7DF               	goto	l121
 16633  0135A6  0A01               	xorlw	1	; case 3
 16634  0135A8  A4D8               	btfss	status,2,c
 16635  0135AA  0012               	return	
 16636  0135AC  D7E6               	goto	l122
 16637  0135AE                     __end_of_Set_Rotation:
 16638                           	opt stack 0
 16639                           tosu	equ	0xFFF
 16640                           tosh	equ	0xFFE
 16641                           tosl	equ	0xFFD
 16642                           pclath	equ	0xFFA
 16643                           tblptru	equ	0xFF8
 16644                           tblptrh	equ	0xFF7
 16645                           tblptrl	equ	0xFF6
 16646                           tablat	equ	0xFF5
 16647                           prodh	equ	0xFF4
 16648                           prodl	equ	0xFF3
 16649                           intcon	equ	0xFF2
 16650                           postinc0	equ	0xFEE
 16651                           plusw0	equ	0xFEB
 16652                           wreg	equ	0xFE8
 16653                           indf1	equ	0xFE7
 16654                           postdec1	equ	0xFE5
 16655                           fsr1h	equ	0xFE2
 16656                           fsr1l	equ	0xFE1
 16657                           indf2	equ	0xFDF
 16658                           postinc2	equ	0xFDE
 16659                           postdec2	equ	0xFDD
 16660                           plusw2	equ	0xFDB
 16661                           fsr2h	equ	0xFDA
 16662                           fsr2l	equ	0xFD9
 16663                           status	equ	0xFD8
 16664                           
 16665 ;; *************** function _LCD_Fill *****************
 16666 ;; Defined at:
 16667 ;;		line 287 in file "Library/LCD.c"
 16668 ;; Parameters:    Size  Location     Type
 16669 ;;  pColour         2    9[BANK0 ] unsigned short 
 16670 ;; Auto vars:     Size  Location     Type
 16671 ;;  j               1   12[BANK0 ] unsigned char 
 16672 ;;  i               1   11[BANK0 ] unsigned char 
 16673 ;; Return value:  Size  Location     Type
 16674 ;;                  1    wreg      void 
 16675 ;; Registers used:
 16676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16677 ;; Tracked objects:
 16678 ;;		On entry : 0/0
 16679 ;;		On exit  : 0/0
 16680 ;;		Unchanged: 0/0
 16681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16682 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16683 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16685 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16686 ;;Total ram usage:        4 bytes
 16687 ;; Hardware stack levels used:    1
 16688 ;; Hardware stack levels required when called:   10
 16689 ;; This function calls:
 16690 ;;		_LCD_Word_Write
 16691 ;;		_Set_Addr_Window
 16692 ;; This function is called by:
 16693 ;;		_LCD_Init
 16694 ;; This function uses a non-reentrant model
 16695 ;;
 16696                           
 16697                           	psect	text90
 16698  01402E                     __ptext90:
 16699                           	opt stack 0
 16700  01402E                     _LCD_Fill:
 16701                           	opt stack 18
 16702                           
 16703                           ;LCD.c: 296: UINT8 i = 0x00;
 16704                           
 16705                           ;incstack = 0
 16706  01402E  0E00               	movlw	0
 16707  014030  0100               	movlb	0	; () banked
 16708  014032  6FC3               	movwf	LCD_Fill@i& (0+255),b
 16709                           
 16710                           ;LCD.c: 297: UINT8 j = 0x00;
 16711  014034  0E00               	movlw	0
 16712  014036  0100               	movlb	0	; () banked
 16713  014038  6FC4               	movwf	LCD_Fill@j& (0+255),b
 16714                           
 16715                           ; BSR set to: 0
 16716                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 16717  01403A  0E00               	movlw	0
 16718  01403C  0100               	movlb	0	; () banked
 16719  01403E  6FBD               	movwf	Set_Addr_Window@ys& (0+255),b
 16720  014040  0450               	decf	_w,w,c
 16721  014042  0100               	movlb	0	; () banked
 16722  014044  6FBE               	movwf	Set_Addr_Window@xe& (0+255),b
 16723  014046  044F               	decf	_l,w,c
 16724  014048  0100               	movlb	0	; () banked
 16725  01404A  6FBF               	movwf	Set_Addr_Window@ye& (0+255),b
 16726  01404C  0E00               	movlw	0
 16727  01404E  EC5B  F097         	call	_Set_Addr_Window
 16728                           
 16729                           ;LCD.c: 299: for (j = l; j > 0; j--)
 16730  014052  C04F  F0C4         	movff	_l,LCD_Fill@j
 16731  014056                     l11801:
 16732  014056  0100               	movlb	0	; () banked
 16733  014058  51C4               	movf	LCD_Fill@j& (0+255),w,b
 16734  01405A  0100               	movlb	0	; () banked
 16735  01405C  B4D8               	btfsc	status,2,c
 16736  01405E  0012               	return	
 16737                           
 16738                           ; BSR set to: 0
 16739                           ;LCD.c: 300: for (i = w; i > 0; i--)
 16740                           
 16741                           ; BSR set to: 0
 16742  014060  C050  F0C3         	movff	_w,LCD_Fill@i
 16743  014064                     l11805:
 16744                           
 16745                           ; BSR set to: 0
 16746  014064  0100               	movlb	0	; () banked
 16747  014066  51C3               	movf	LCD_Fill@i& (0+255),w,b
 16748  014068  0100               	movlb	0	; () banked
 16749  01406A  B4D8               	btfsc	status,2,c
 16750  01406C  D009               	goto	u8210
 16751                           
 16752                           ; BSR set to: 0
 16753                           ;LCD.c: 301: LCD_Word_Write(pColour);
 16754                           
 16755                           ; BSR set to: 0
 16756                           
 16757                           ; BSR set to: 0
 16758  01406E  C0C1  F0BD         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 16759  014072  C0C2  F0BE         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 16760  014076  ECD2  F0A4         	call	_LCD_Word_Write	;wreg free
 16761  01407A  0100               	movlb	0	; () banked
 16762  01407C  07C3               	decf	LCD_Fill@i& (0+255),f,b
 16763  01407E  D7F2               	goto	l11805
 16764  014080                     u8210:
 16765                           
 16766                           ; BSR set to: 0
 16767                           
 16768                           ; BSR set to: 0
 16769  014080  0100               	movlb	0	; () banked
 16770  014082  07C4               	decf	LCD_Fill@j& (0+255),f,b
 16771  014084  D7E8               	goto	l11801
 16772  014086                     __end_of_LCD_Fill:
 16773                           	opt stack 0
 16774                           tosu	equ	0xFFF
 16775                           tosh	equ	0xFFE
 16776                           tosl	equ	0xFFD
 16777                           pclath	equ	0xFFA
 16778                           tblptru	equ	0xFF8
 16779                           tblptrh	equ	0xFF7
 16780                           tblptrl	equ	0xFF6
 16781                           tablat	equ	0xFF5
 16782                           prodh	equ	0xFF4
 16783                           prodl	equ	0xFF3
 16784                           intcon	equ	0xFF2
 16785                           postinc0	equ	0xFEE
 16786                           plusw0	equ	0xFEB
 16787                           wreg	equ	0xFE8
 16788                           indf1	equ	0xFE7
 16789                           postdec1	equ	0xFE5
 16790                           fsr1h	equ	0xFE2
 16791                           fsr1l	equ	0xFE1
 16792                           indf2	equ	0xFDF
 16793                           postinc2	equ	0xFDE
 16794                           postdec2	equ	0xFDD
 16795                           plusw2	equ	0xFDB
 16796                           fsr2h	equ	0xFDA
 16797                           fsr2l	equ	0xFD9
 16798                           status	equ	0xFD8
 16799                           
 16800 ;; *************** function _Set_Addr_Window *****************
 16801 ;; Defined at:
 16802 ;;		line 214 in file "Library/LCD.c"
 16803 ;; Parameters:    Size  Location     Type
 16804 ;;  xs              1    wreg     unsigned char 
 16805 ;;  ys              1    5[BANK0 ] unsigned char 
 16806 ;;  xe              1    6[BANK0 ] unsigned char 
 16807 ;;  ye              1    7[BANK0 ] unsigned char 
 16808 ;; Auto vars:     Size  Location     Type
 16809 ;;  xs              1    8[BANK0 ] unsigned char 
 16810 ;; Return value:  Size  Location     Type
 16811 ;;                  1    wreg      void 
 16812 ;; Registers used:
 16813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16814 ;; Tracked objects:
 16815 ;;		On entry : 0/0
 16816 ;;		On exit  : 0/0
 16817 ;;		Unchanged: 0/0
 16818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16819 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;Total ram usage:        4 bytes
 16824 ;; Hardware stack levels used:    1
 16825 ;; Hardware stack levels required when called:    9
 16826 ;; This function calls:
 16827 ;;		_LCD_Write
 16828 ;; This function is called by:
 16829 ;;		_LCD_Fill
 16830 ;;		_LCD_FillRectangle
 16831 ;;		_LCD_DrawField
 16832 ;;		_RAM_Address_Set
 16833 ;;		_LCD_DrawPixel
 16834 ;; This function uses a non-reentrant model
 16835 ;;
 16836                           
 16837                           	psect	text91
 16838  012EB6                     __ptext91:
 16839                           	opt stack 0
 16840  012EB6                     _Set_Addr_Window:
 16841                           	opt stack 16
 16842                           
 16843                           ; BSR set to: 0
 16844                           ;incstack = 0
 16845                           ;Set_Addr_Window@xs stored from wreg
 16846  012EB6  0100               	movlb	0	; () banked
 16847  012EB8  6FC0               	movwf	Set_Addr_Window@xs& (0+255),b
 16848                           
 16849                           ;LCD.c: 216: ys+=2;
 16850  012EBA  0E02               	movlw	2
 16851  012EBC  0100               	movlb	0	; () banked
 16852  012EBE  27BD               	addwf	Set_Addr_Window@ys& (0+255),f,b
 16853                           
 16854                           ;LCD.c: 217: ye+=2;
 16855  012EC0  0E02               	movlw	2
 16856  012EC2  0100               	movlb	0	; () banked
 16857  012EC4  27BF               	addwf	Set_Addr_Window@ye& (0+255),f,b
 16858                           
 16859                           ;LCD.c: 218: xs+=3;
 16860  012EC6  0E03               	movlw	3
 16861  012EC8  0100               	movlb	0	; () banked
 16862  012ECA  27C0               	addwf	Set_Addr_Window@xs& (0+255),f,b
 16863                           
 16864                           ;LCD.c: 219: xe+=3;
 16865  012ECC  0E03               	movlw	3
 16866  012ECE  0100               	movlb	0	; () banked
 16867  012ED0  27BE               	addwf	Set_Addr_Window@xe& (0+255),f,b
 16868                           
 16869                           ; BSR set to: 0
 16870                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 16871  012ED2  0E00               	movlw	0
 16872  012ED4  0100               	movlb	0	; () banked
 16873  012ED6  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16874  012ED8  0E2A               	movlw	42
 16875  012EDA  EC80  F0A4         	call	_LCD_Write
 16876                           
 16877                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 16878  012EDE  0E01               	movlw	1
 16879  012EE0  0100               	movlb	0	; () banked
 16880  012EE2  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16881  012EE4  0E00               	movlw	0
 16882  012EE6  EC80  F0A4         	call	_LCD_Write
 16883                           
 16884                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 16885  012EEA  0E01               	movlw	1
 16886  012EEC  0100               	movlb	0	; () banked
 16887  012EEE  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16888  012EF0  0100               	movlb	0	; () banked
 16889  012EF2  51C0               	movf	Set_Addr_Window@xs& (0+255),w,b
 16890  012EF4  EC80  F0A4         	call	_LCD_Write
 16891                           
 16892                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 16893  012EF8  0E01               	movlw	1
 16894  012EFA  0100               	movlb	0	; () banked
 16895  012EFC  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16896  012EFE  0E00               	movlw	0
 16897  012F00  EC80  F0A4         	call	_LCD_Write
 16898                           
 16899                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 16900  012F04  0E01               	movlw	1
 16901  012F06  0100               	movlb	0	; () banked
 16902  012F08  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16903  012F0A  0100               	movlb	0	; () banked
 16904  012F0C  51BE               	movf	Set_Addr_Window@xe& (0+255),w,b
 16905  012F0E  EC80  F0A4         	call	_LCD_Write
 16906                           
 16907                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 16908  012F12  0E00               	movlw	0
 16909  012F14  0100               	movlb	0	; () banked
 16910  012F16  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16911  012F18  0E2B               	movlw	43
 16912  012F1A  EC80  F0A4         	call	_LCD_Write
 16913                           
 16914                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 16915  012F1E  0E01               	movlw	1
 16916  012F20  0100               	movlb	0	; () banked
 16917  012F22  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16918  012F24  0E00               	movlw	0
 16919  012F26  EC80  F0A4         	call	_LCD_Write
 16920                           
 16921                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 16922  012F2A  0E01               	movlw	1
 16923  012F2C  0100               	movlb	0	; () banked
 16924  012F2E  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16925  012F30  0100               	movlb	0	; () banked
 16926  012F32  51BD               	movf	Set_Addr_Window@ys& (0+255),w,b
 16927  012F34  EC80  F0A4         	call	_LCD_Write
 16928                           
 16929                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 16930  012F38  0E01               	movlw	1
 16931  012F3A  0100               	movlb	0	; () banked
 16932  012F3C  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16933  012F3E  0E00               	movlw	0
 16934  012F40  EC80  F0A4         	call	_LCD_Write
 16935                           
 16936                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 16937  012F44  0E01               	movlw	1
 16938  012F46  0100               	movlb	0	; () banked
 16939  012F48  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16940  012F4A  0100               	movlb	0	; () banked
 16941  012F4C  51BF               	movf	Set_Addr_Window@ye& (0+255),w,b
 16942  012F4E  EC80  F0A4         	call	_LCD_Write
 16943                           
 16944                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 16945  012F52  0E00               	movlw	0
 16946  012F54  0100               	movlb	0	; () banked
 16947  012F56  6FBB               	movwf	LCD_Write@mode& (0+255),b
 16948  012F58  0E2C               	movlw	44
 16949  012F5A  EC80  F0A4         	call	_LCD_Write
 16950  012F5E  0012               	return		;funcret
 16951  012F60                     __end_of_Set_Addr_Window:
 16952                           	opt stack 0
 16953                           tosu	equ	0xFFF
 16954                           tosh	equ	0xFFE
 16955                           tosl	equ	0xFFD
 16956                           pclath	equ	0xFFA
 16957                           tblptru	equ	0xFF8
 16958                           tblptrh	equ	0xFF7
 16959                           tblptrl	equ	0xFF6
 16960                           tablat	equ	0xFF5
 16961                           prodh	equ	0xFF4
 16962                           prodl	equ	0xFF3
 16963                           intcon	equ	0xFF2
 16964                           postinc0	equ	0xFEE
 16965                           plusw0	equ	0xFEB
 16966                           wreg	equ	0xFE8
 16967                           indf1	equ	0xFE7
 16968                           postdec1	equ	0xFE5
 16969                           fsr1h	equ	0xFE2
 16970                           fsr1l	equ	0xFE1
 16971                           indf2	equ	0xFDF
 16972                           postinc2	equ	0xFDE
 16973                           postdec2	equ	0xFDD
 16974                           plusw2	equ	0xFDB
 16975                           fsr2h	equ	0xFDA
 16976                           fsr2l	equ	0xFD9
 16977                           status	equ	0xFD8
 16978                           
 16979 ;; *************** function _LCD_Word_Write *****************
 16980 ;; Defined at:
 16981 ;;		line 198 in file "Library/LCD.c"
 16982 ;; Parameters:    Size  Location     Type
 16983 ;;  value           2    5[BANK0 ] unsigned short 
 16984 ;; Auto vars:     Size  Location     Type
 16985 ;;		None
 16986 ;; Return value:  Size  Location     Type
 16987 ;;                  1    wreg      void 
 16988 ;; Registers used:
 16989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 16990 ;; Tracked objects:
 16991 ;;		On entry : 0/0
 16992 ;;		On exit  : 0/0
 16993 ;;		Unchanged: 0/0
 16994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16995 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16998 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16999 ;;Total ram usage:        2 bytes
 17000 ;; Hardware stack levels used:    1
 17001 ;; Hardware stack levels required when called:    9
 17002 ;; This function calls:
 17003 ;;		_LCD_Write
 17004 ;; This function is called by:
 17005 ;;		_LCD_Fill
 17006 ;;		_LCD_FillRectangle
 17007 ;;		_LCD_DrawField
 17008 ;;		_LCD_DrawPixel
 17009 ;; This function uses a non-reentrant model
 17010 ;;
 17011                           
 17012                           	psect	text92
 17013  0149A4                     __ptext92:
 17014                           	opt stack 0
 17015  0149A4                     _LCD_Word_Write:
 17016                           	opt stack 16
 17017                           
 17018                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 17019                           
 17020                           ;incstack = 0
 17021  0149A4  0E01               	movlw	1
 17022  0149A6  0100               	movlb	0	; () banked
 17023  0149A8  6FBB               	movwf	LCD_Write@mode& (0+255),b
 17024  0149AA  0100               	movlb	0	; () banked
 17025  0149AC  51BE               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 17026  0149AE  EC80  F0A4         	call	_LCD_Write
 17027                           
 17028                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 17029  0149B2  0E01               	movlw	1
 17030  0149B4  0100               	movlb	0	; () banked
 17031  0149B6  6FBB               	movwf	LCD_Write@mode& (0+255),b
 17032  0149B8  0100               	movlb	0	; () banked
 17033  0149BA  51BD               	movf	LCD_Word_Write@value& (0+255),w,b
 17034  0149BC  EC80  F0A4         	call	_LCD_Write
 17035  0149C0  0012               	return		;funcret
 17036  0149C2                     __end_of_LCD_Word_Write:
 17037                           	opt stack 0
 17038                           tosu	equ	0xFFF
 17039                           tosh	equ	0xFFE
 17040                           tosl	equ	0xFFD
 17041                           pclath	equ	0xFFA
 17042                           tblptru	equ	0xFF8
 17043                           tblptrh	equ	0xFF7
 17044                           tblptrl	equ	0xFF6
 17045                           tablat	equ	0xFF5
 17046                           prodh	equ	0xFF4
 17047                           prodl	equ	0xFF3
 17048                           intcon	equ	0xFF2
 17049                           postinc0	equ	0xFEE
 17050                           plusw0	equ	0xFEB
 17051                           wreg	equ	0xFE8
 17052                           indf1	equ	0xFE7
 17053                           postdec1	equ	0xFE5
 17054                           fsr1h	equ	0xFE2
 17055                           fsr1l	equ	0xFE1
 17056                           indf2	equ	0xFDF
 17057                           postinc2	equ	0xFDE
 17058                           postdec2	equ	0xFDD
 17059                           plusw2	equ	0xFDB
 17060                           fsr2h	equ	0xFDA
 17061                           fsr2l	equ	0xFD9
 17062                           status	equ	0xFD8
 17063                           
 17064 ;; *************** function _LCD_Write *****************
 17065 ;; Defined at:
 17066 ;;		line 67 in file "Library/LCD.c"
 17067 ;; Parameters:    Size  Location     Type
 17068 ;;  value           1    wreg     unsigned char 
 17069 ;;  mode            1    3[BANK0 ] enum E6761
 17070 ;; Auto vars:     Size  Location     Type
 17071 ;;  value           1    4[BANK0 ] unsigned char 
 17072 ;; Return value:  Size  Location     Type
 17073 ;;                  1    wreg      void 
 17074 ;; Registers used:
 17075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17076 ;; Tracked objects:
 17077 ;;		On entry : 0/0
 17078 ;;		On exit  : 0/0
 17079 ;;		Unchanged: 0/0
 17080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17081 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17084 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17085 ;;Total ram usage:        2 bytes
 17086 ;; Hardware stack levels used:    1
 17087 ;; Hardware stack levels required when called:    8
 17088 ;; This function calls:
 17089 ;;		_Mode_Set
 17090 ;;		_SPI_Send
 17091 ;; This function is called by:
 17092 ;;		_LCD_Init
 17093 ;;		_LCD_Word_Write
 17094 ;;		_Set_Addr_Window
 17095 ;;		_Set_Rotation
 17096 ;;		_LCD_WriteCMD
 17097 ;;		_LCD_WriteData
 17098 ;;		_LCD_Data_Write
 17099 ;;		_LCD_Data_Write_4k
 17100 ;;		_Invert_Display
 17101 ;; This function uses a non-reentrant model
 17102 ;;
 17103                           
 17104                           	psect	text93
 17105  014900                     __ptext93:
 17106                           	opt stack 0
 17107  014900                     _LCD_Write:
 17108                           	opt stack 16
 17109                           
 17110                           ;incstack = 0
 17111                           ;LCD_Write@value stored from wreg
 17112  014900  0100               	movlb	0	; () banked
 17113  014902  6FBC               	movwf	LCD_Write@value& (0+255),b
 17114                           
 17115                           ;LCD.c: 89: Mode_Set(mode);
 17116  014904  0100               	movlb	0	; () banked
 17117  014906  51BB               	movf	LCD_Write@mode& (0+255),w,b
 17118  014908  ECC7  F0A5         	call	_Mode_Set
 17119                           
 17120                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 17121  01490C  0E6F               	movlw	low _SPI2
 17122  01490E  0100               	movlb	0	; () banked
 17123  014910  6FB8               	movwf	SPI_Send@pInput& (0+255),b
 17124  014912  0E01               	movlw	high _SPI2
 17125  014914  0100               	movlb	0	; () banked
 17126  014916  6FB9               	movwf	(SPI_Send@pInput+1)& (0+255),b
 17127  014918  C0BC  F0BA         	movff	LCD_Write@value,SPI_Send@pData
 17128  01491C  ECFA  F09D         	call	_SPI_Send	;wreg free
 17129  014920  0012               	return		;funcret
 17130  014922                     __end_of_LCD_Write:
 17131                           	opt stack 0
 17132                           tosu	equ	0xFFF
 17133                           tosh	equ	0xFFE
 17134                           tosl	equ	0xFFD
 17135                           pclath	equ	0xFFA
 17136                           tblptru	equ	0xFF8
 17137                           tblptrh	equ	0xFF7
 17138                           tblptrl	equ	0xFF6
 17139                           tablat	equ	0xFF5
 17140                           prodh	equ	0xFF4
 17141                           prodl	equ	0xFF3
 17142                           intcon	equ	0xFF2
 17143                           postinc0	equ	0xFEE
 17144                           plusw0	equ	0xFEB
 17145                           wreg	equ	0xFE8
 17146                           indf1	equ	0xFE7
 17147                           postdec1	equ	0xFE5
 17148                           fsr1h	equ	0xFE2
 17149                           fsr1l	equ	0xFE1
 17150                           indf2	equ	0xFDF
 17151                           postinc2	equ	0xFDE
 17152                           postdec2	equ	0xFDD
 17153                           plusw2	equ	0xFDB
 17154                           fsr2h	equ	0xFDA
 17155                           fsr2l	equ	0xFD9
 17156                           status	equ	0xFD8
 17157                           
 17158 ;; *************** function _SPI_Send *****************
 17159 ;; Defined at:
 17160 ;;		line 226 in file "Library/SPI.c"
 17161 ;; Parameters:    Size  Location     Type
 17162 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17163 ;;		 -> SPI1(11), SPI2(11), 
 17164 ;;  pData           1    2[BANK0 ] unsigned char 
 17165 ;; Auto vars:     Size  Location     Type
 17166 ;;		None
 17167 ;; Return value:  Size  Location     Type
 17168 ;;                  1    wreg      unsigned char 
 17169 ;; Registers used:
 17170 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17171 ;; Tracked objects:
 17172 ;;		On entry : 0/0
 17173 ;;		On exit  : 0/0
 17174 ;;		Unchanged: 0/0
 17175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17176 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17177 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17179 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17180 ;;Total ram usage:        3 bytes
 17181 ;; Hardware stack levels used:    1
 17182 ;; Hardware stack levels required when called:    7
 17183 ;; This function calls:
 17184 ;;		Nothing
 17185 ;; This function is called by:
 17186 ;;		_LCD_Write
 17187 ;;		_OutSeg
 17188 ;; This function uses a non-reentrant model
 17189 ;;
 17190                           
 17191                           	psect	text94
 17192  013BF4                     __ptext94:
 17193                           	opt stack 0
 17194  013BF4                     _SPI_Send:
 17195                           	opt stack 16
 17196                           
 17197                           ;SPI.c: 253: switch (pInput->mChannel)
 17198                           
 17199                           ;incstack = 0
 17200  013BF4  D026               	goto	l678
 17201  013BF6                     
 17202                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 17203  013BF6  C095  FFD9         	movff	_PortC+4,fsr2l
 17204  013BFA  C096  FFDA         	movff	_PortC+5,fsr2h
 17205  013BFE  0100               	movlb	0	; () banked
 17206  013C00  94DF               	bcf	indf2,2,c
 17207                           
 17208                           ; BSR set to: 0
 17209                           ;SPI.c: 257: SSP1BUF = pData;
 17210  013C02  C0BA  FFC9         	movff	SPI_Send@pData,4041	;volatile
 17211  013C06                     
 17212                           ; BSR set to: 0
 17213  013C06  A0C7               	btfss	4039,0,c	;volatile
 17214  013C08  D7FE               	goto	l681
 17215                           
 17216                           ;SPI.c: 259: pData = SSP1BUF;
 17217  013C0A  CFC9 F0BA          	movff	4041,SPI_Send@pData	;volatile
 17218                           
 17219                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 17220  013C0E  C095  FFD9         	movff	_PortC+4,fsr2l
 17221  013C12  C096  FFDA         	movff	_PortC+5,fsr2h
 17222  013C16  0100               	movlb	0	; () banked
 17223  013C18  84DF               	bsf	indf2,2,c
 17224                           
 17225                           ; BSR set to: 0
 17226                           ;SPI.c: 261: return pData;
 17227                           ;	Return value of _SPI_Send is never used
 17228  013C1A  0012               	return	
 17229  013C1C                     
 17230                           ; BSR set to: 0
 17231                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 17232                           
 17233                           ; BSR set to: 0
 17234  013C1C  C08B  FFD9         	movff	_PortD+4,fsr2l
 17235  013C20  C08C  FFDA         	movff	_PortD+5,fsr2h
 17236  013C24  0100               	movlb	0	; () banked
 17237  013C26  9EDF               	bcf	indf2,7,c
 17238                           
 17239                           ; BSR set to: 0
 17240                           ;SPI.c: 264: SSP2BUF = pData;
 17241  013C28  C0BA  FF6F         	movff	SPI_Send@pData,3951	;volatile
 17242  013C2C                     
 17243                           ; BSR set to: 0
 17244  013C2C  A06D               	btfss	3949,0,c	;volatile
 17245  013C2E  D7FE               	goto	l686
 17246                           
 17247                           ;SPI.c: 266: pData = SSP2BUF;
 17248  013C30  CF6F F0BA          	movff	3951,SPI_Send@pData	;volatile
 17249                           
 17250                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 17251  013C34  C08B  FFD9         	movff	_PortD+4,fsr2l
 17252  013C38  C08C  FFDA         	movff	_PortD+5,fsr2h
 17253  013C3C  0100               	movlb	0	; () banked
 17254  013C3E  8EDF               	bsf	indf2,7,c
 17255                           
 17256                           ; BSR set to: 0
 17257                           ;SPI.c: 269: };
 17258                           
 17259                           ; BSR set to: 0
 17260                           ;SPI.c: 268: return pData;
 17261                           ;	Return value of _SPI_Send is never used
 17262  013C40  0012               	return	
 17263  013C42                     l678:
 17264                           
 17265                           ; BSR set to: 0
 17266  013C42  0100               	movlb	0	; () banked
 17267  013C44  EE20 F002          	lfsr	2,2
 17268  013C48  51B8               	movf	SPI_Send@pInput& (0+255),w,b
 17269  013C4A  26D9               	addwf	fsr2l,f,c
 17270  013C4C  51B9               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 17271  013C4E  22DA               	addwfc	fsr2h,f,c
 17272  013C50  50DF               	movf	indf2,w,c
 17273                           
 17274                           ; Switch size 1, requested type "space"
 17275                           ; Number of cases is 2, Range of values is 0 to 1
 17276                           ; switch strategies available:
 17277                           ; Name         Instructions Cycles
 17278                           ; simple_byte            7     4 (average)
 17279                           ;	Chosen strategy is simple_byte
 17280  013C52  0A00               	xorlw	0	; case 0
 17281  013C54  B4D8               	btfsc	status,2,c
 17282  013C56  D7CF               	goto	l679
 17283  013C58  0A01               	xorlw	1	; case 1
 17284  013C5A  A4D8               	btfss	status,2,c
 17285  013C5C  0012               	return	
 17286  013C5E  D7DE               	goto	l684
 17287  013C60                     __end_of_SPI_Send:
 17288                           	opt stack 0
 17289                           tosu	equ	0xFFF
 17290                           tosh	equ	0xFFE
 17291                           tosl	equ	0xFFD
 17292                           pclath	equ	0xFFA
 17293                           tblptru	equ	0xFF8
 17294                           tblptrh	equ	0xFF7
 17295                           tblptrl	equ	0xFF6
 17296                           tablat	equ	0xFF5
 17297                           prodh	equ	0xFF4
 17298                           prodl	equ	0xFF3
 17299                           intcon	equ	0xFF2
 17300                           postinc0	equ	0xFEE
 17301                           plusw0	equ	0xFEB
 17302                           wreg	equ	0xFE8
 17303                           indf1	equ	0xFE7
 17304                           postdec1	equ	0xFE5
 17305                           fsr1h	equ	0xFE2
 17306                           fsr1l	equ	0xFE1
 17307                           indf2	equ	0xFDF
 17308                           postinc2	equ	0xFDE
 17309                           postdec2	equ	0xFDD
 17310                           plusw2	equ	0xFDB
 17311                           fsr2h	equ	0xFDA
 17312                           fsr2l	equ	0xFD9
 17313                           status	equ	0xFD8
 17314                           
 17315 ;; *************** function _Mode_Set *****************
 17316 ;; Defined at:
 17317 ;;		line 40 in file "Library/LCD.c"
 17318 ;; Parameters:    Size  Location     Type
 17319 ;;  pMode           1    wreg     enum E6761
 17320 ;; Auto vars:     Size  Location     Type
 17321 ;;  pMode           1    0[BANK0 ] enum E6761
 17322 ;; Return value:  Size  Location     Type
 17323 ;;                  1    wreg      void 
 17324 ;; Registers used:
 17325 ;;		wreg
 17326 ;; Tracked objects:
 17327 ;;		On entry : 0/0
 17328 ;;		On exit  : 0/0
 17329 ;;		Unchanged: 0/0
 17330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17334 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17335 ;;Total ram usage:        1 bytes
 17336 ;; Hardware stack levels used:    1
 17337 ;; Hardware stack levels required when called:    7
 17338 ;; This function calls:
 17339 ;;		Nothing
 17340 ;; This function is called by:
 17341 ;;		_LCD_Write
 17342 ;; This function uses a non-reentrant model
 17343 ;;
 17344                           
 17345                           	psect	text95
 17346  014B8E                     __ptext95:
 17347                           	opt stack 0
 17348  014B8E                     _Mode_Set:
 17349                           	opt stack 16
 17350                           
 17351                           ; BSR set to: 0
 17352                           ;incstack = 0
 17353                           ;Mode_Set@pMode stored from wreg
 17354  014B8E  0100               	movlb	0	; () banked
 17355  014B90  6FB8               	movwf	Mode_Set@pMode& (0+255),b
 17356                           
 17357                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 17358  014B92  0100               	movlb	0	; () banked
 17359  014B94  B1B8               	btfsc	Mode_Set@pMode& (0+255),0,b
 17360  014B96  D002               	bra	u7005
 17361  014B98  9E85               	bcf	3973,7,c	;volatile
 17362  014B9A  D001               	bra	u7006
 17363  014B9C                     u7005:
 17364  014B9C  8E85               	bsf	3973,7,c	;volatile
 17365  014B9E                     u7006:
 17366  014B9E  0012               	return		;funcret
 17367  014BA0                     __end_of_Mode_Set:
 17368                           	opt stack 0
 17369                           tosu	equ	0xFFF
 17370                           tosh	equ	0xFFE
 17371                           tosl	equ	0xFFD
 17372                           pclath	equ	0xFFA
 17373                           tblptru	equ	0xFF8
 17374                           tblptrh	equ	0xFF7
 17375                           tblptrl	equ	0xFF6
 17376                           tablat	equ	0xFF5
 17377                           prodh	equ	0xFF4
 17378                           prodl	equ	0xFF3
 17379                           intcon	equ	0xFF2
 17380                           postinc0	equ	0xFEE
 17381                           plusw0	equ	0xFEB
 17382                           wreg	equ	0xFE8
 17383                           indf1	equ	0xFE7
 17384                           postdec1	equ	0xFE5
 17385                           fsr1h	equ	0xFE2
 17386                           fsr1l	equ	0xFE1
 17387                           indf2	equ	0xFDF
 17388                           postinc2	equ	0xFDE
 17389                           postdec2	equ	0xFDD
 17390                           plusw2	equ	0xFDB
 17391                           fsr2h	equ	0xFDA
 17392                           fsr2l	equ	0xFD9
 17393                           status	equ	0xFD8
 17394                           
 17395 ;; *************** function _Configure_GPIOs *****************
 17396 ;; Defined at:
 17397 ;;		line 46 in file "Library/LCD.c"
 17398 ;; Parameters:    Size  Location     Type
 17399 ;;		None
 17400 ;; Auto vars:     Size  Location     Type
 17401 ;;		None
 17402 ;; Return value:  Size  Location     Type
 17403 ;;                  1    wreg      void 
 17404 ;; Registers used:
 17405 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17415 ;;Total ram usage:        0 bytes
 17416 ;; Hardware stack levels used:    1
 17417 ;; Hardware stack levels required when called:   14
 17418 ;; This function calls:
 17419 ;;		_LCD_Reset
 17420 ;;		_Port_SetPinType
 17421 ;;		_SPI_Init
 17422 ;;		_SPI_MaxSpeed
 17423 ;; This function is called by:
 17424 ;;		_LCD_Init
 17425 ;; This function uses a non-reentrant model
 17426 ;;
 17427                           
 17428                           	psect	text96
 17429  013B18                     __ptext96:
 17430                           	opt stack 0
 17431  013B18                     _Configure_GPIOs:
 17432                           	opt stack 14
 17433                           
 17434                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 17435                           
 17436                           ;incstack = 0
 17437  013B18  0EAC               	movlw	low _PortF
 17438  013B1A  0100               	movlb	0	; () banked
 17439  013B1C  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 17440  013B1E  0E01               	movlw	high _PortF
 17441  013B20  0100               	movlb	0	; () banked
 17442  013B22  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17443  013B24  0E07               	movlw	7
 17444  013B26  0100               	movlb	0	; () banked
 17445  013B28  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 17446  013B2A  0E03               	movlw	3
 17447  013B2C  0100               	movlb	0	; () banked
 17448  013B2E  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 17449  013B30  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 17450                           
 17451                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 17452  013B34  0EAC               	movlw	low _PortF
 17453  013B36  0100               	movlb	0	; () banked
 17454  013B38  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 17455  013B3A  0E01               	movlw	high _PortF
 17456  013B3C  0100               	movlb	0	; () banked
 17457  013B3E  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17458  013B40  0E06               	movlw	6
 17459  013B42  0100               	movlb	0	; () banked
 17460  013B44  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 17461  013B46  0E03               	movlw	3
 17462  013B48  0100               	movlb	0	; () banked
 17463  013B4A  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 17464  013B4C  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 17465                           
 17466                           ;LCD.c: 55: LCD_Reset();
 17467  013B50  ECBC  F0A0         	call	_LCD_Reset	;wreg free
 17468                           
 17469                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 17470  013B54  0EC0               	movlw	192
 17471  013B56  0100               	movlb	0	; () banked
 17472  013B58  6FE5               	movwf	SPI_Init@pClock& (0+255),b
 17473  013B5A  0EC6               	movlw	198
 17474  013B5C  6FE6               	movwf	(SPI_Init@pClock+1)& (0+255),b
 17475  013B5E  0E2D               	movlw	45
 17476  013B60  6FE7               	movwf	(SPI_Init@pClock+2)& (0+255),b
 17477  013B62  0E00               	movlw	0
 17478  013B64  6FE8               	movwf	(SPI_Init@pClock+3)& (0+255),b
 17479  013B66  0E01               	movlw	1
 17480  013B68  0100               	movlb	0	; () banked
 17481  013B6A  6FE9               	movwf	SPI_Init@pChannel& (0+255),b
 17482  013B6C  0E01               	movlw	1
 17483  013B6E  0100               	movlb	0	; () banked
 17484  013B70  6FEA               	movwf	SPI_Init@pMode& (0+255),b
 17485  013B72  EC00  F080         	call	_SPI_Init	;wreg free
 17486                           
 17487                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 17488  013B76  0E6F               	movlw	low _SPI2
 17489  013B78  0100               	movlb	0	; () banked
 17490  013B7A  6FC7               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 17491  013B7C  0E01               	movlw	high _SPI2
 17492  013B7E  0100               	movlb	0	; () banked
 17493  013B80  6FC8               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 17494  013B82  ECDF  F09C         	call	_SPI_MaxSpeed	;wreg free
 17495  013B86  0012               	return		;funcret
 17496  013B88                     __end_of_Configure_GPIOs:
 17497                           	opt stack 0
 17498                           tosu	equ	0xFFF
 17499                           tosh	equ	0xFFE
 17500                           tosl	equ	0xFFD
 17501                           pclath	equ	0xFFA
 17502                           tblptru	equ	0xFF8
 17503                           tblptrh	equ	0xFF7
 17504                           tblptrl	equ	0xFF6
 17505                           tablat	equ	0xFF5
 17506                           prodh	equ	0xFF4
 17507                           prodl	equ	0xFF3
 17508                           intcon	equ	0xFF2
 17509                           postinc0	equ	0xFEE
 17510                           plusw0	equ	0xFEB
 17511                           wreg	equ	0xFE8
 17512                           indf1	equ	0xFE7
 17513                           postdec1	equ	0xFE5
 17514                           fsr1h	equ	0xFE2
 17515                           fsr1l	equ	0xFE1
 17516                           indf2	equ	0xFDF
 17517                           postinc2	equ	0xFDE
 17518                           postdec2	equ	0xFDD
 17519                           plusw2	equ	0xFDB
 17520                           fsr2h	equ	0xFDA
 17521                           fsr2l	equ	0xFD9
 17522                           status	equ	0xFD8
 17523                           
 17524 ;; *************** function _SPI_MaxSpeed *****************
 17525 ;; Defined at:
 17526 ;;		line 201 in file "Library/SPI.c"
 17527 ;; Parameters:    Size  Location     Type
 17528 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 17529 ;;		 -> SPI2(11), 
 17530 ;; Auto vars:     Size  Location     Type
 17531 ;;		None
 17532 ;; Return value:  Size  Location     Type
 17533 ;;                  1    wreg      void 
 17534 ;; Registers used:
 17535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17536 ;; Tracked objects:
 17537 ;;		On entry : 0/0
 17538 ;;		On exit  : 0/0
 17539 ;;		Unchanged: 0/0
 17540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17541 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17545 ;;Total ram usage:        2 bytes
 17546 ;; Hardware stack levels used:    1
 17547 ;; Hardware stack levels required when called:    9
 17548 ;; This function calls:
 17549 ;;		_Byte_SetBit
 17550 ;;		_Byte_SetQuad
 17551 ;; This function is called by:
 17552 ;;		_Configure_GPIOs
 17553 ;; This function uses a non-reentrant model
 17554 ;;
 17555                           
 17556                           	psect	text97
 17557  0139BE                     __ptext97:
 17558                           	opt stack 0
 17559  0139BE                     _SPI_MaxSpeed:
 17560                           	opt stack 18
 17561                           
 17562                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 17563                           
 17564                           ;incstack = 0
 17565  0139BE  0100               	movlb	0	; () banked
 17566  0139C0  EE20 F006          	lfsr	2,6
 17567  0139C4  51C7               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17568  0139C6  26D9               	addwf	fsr2l,f,c
 17569  0139C8  51C8               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17570  0139CA  22DA               	addwfc	fsr2h,f,c
 17571  0139CC  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 17572  0139D0  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 17573  0139D4  0E05               	movlw	5
 17574  0139D6  0100               	movlb	0	; () banked
 17575  0139D8  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 17576  0139DA  0E00               	movlw	0
 17577  0139DC  0100               	movlb	0	; () banked
 17578  0139DE  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 17579  0139E0  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 17580                           
 17581                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 17582  0139E4  0100               	movlb	0	; () banked
 17583  0139E6  EE20 F006          	lfsr	2,6
 17584  0139EA  51C7               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17585  0139EC  26D9               	addwf	fsr2l,f,c
 17586  0139EE  51C8               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17587  0139F0  22DA               	addwfc	fsr2h,f,c
 17588  0139F2  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 17589  0139F6  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 17590  0139FA  0E00               	movlw	0
 17591  0139FC  0100               	movlb	0	; () banked
 17592  0139FE  6FC5               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17593  013A00  0E00               	movlw	0
 17594  013A02  0100               	movlb	0	; () banked
 17595  013A04  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 17596  013A06  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 17597                           
 17598                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17599  013A0A  0100               	movlb	0	; () banked
 17600  013A0C  EE20 F006          	lfsr	2,6
 17601  013A10  51C7               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 17602  013A12  26D9               	addwf	fsr2l,f,c
 17603  013A14  51C8               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 17604  013A16  22DA               	addwfc	fsr2h,f,c
 17605  013A18  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 17606  013A1C  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 17607  013A20  0E05               	movlw	5
 17608  013A22  0100               	movlb	0	; () banked
 17609  013A24  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 17610  013A26  0E01               	movlw	1
 17611  013A28  0100               	movlb	0	; () banked
 17612  013A2A  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 17613  013A2C  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 17614  013A30  0012               	return		;funcret
 17615  013A32                     __end_of_SPI_MaxSpeed:
 17616                           	opt stack 0
 17617                           tosu	equ	0xFFF
 17618                           tosh	equ	0xFFE
 17619                           tosl	equ	0xFFD
 17620                           pclath	equ	0xFFA
 17621                           tblptru	equ	0xFF8
 17622                           tblptrh	equ	0xFF7
 17623                           tblptrl	equ	0xFF6
 17624                           tablat	equ	0xFF5
 17625                           prodh	equ	0xFF4
 17626                           prodl	equ	0xFF3
 17627                           intcon	equ	0xFF2
 17628                           postinc0	equ	0xFEE
 17629                           plusw0	equ	0xFEB
 17630                           wreg	equ	0xFE8
 17631                           indf1	equ	0xFE7
 17632                           postdec1	equ	0xFE5
 17633                           fsr1h	equ	0xFE2
 17634                           fsr1l	equ	0xFE1
 17635                           indf2	equ	0xFDF
 17636                           postinc2	equ	0xFDE
 17637                           postdec2	equ	0xFDD
 17638                           plusw2	equ	0xFDB
 17639                           fsr2h	equ	0xFDA
 17640                           fsr2l	equ	0xFD9
 17641                           status	equ	0xFD8
 17642                           
 17643 ;; *************** function _LCD_Reset *****************
 17644 ;; Defined at:
 17645 ;;		line 95 in file "Library/LCD.c"
 17646 ;; Parameters:    Size  Location     Type
 17647 ;;		None
 17648 ;; Auto vars:     Size  Location     Type
 17649 ;;		None
 17650 ;; Return value:  Size  Location     Type
 17651 ;;                  1    wreg      void 
 17652 ;; Registers used:
 17653 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17654 ;; Tracked objects:
 17655 ;;		On entry : 0/0
 17656 ;;		On exit  : 0/0
 17657 ;;		Unchanged: 0/0
 17658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17663 ;;Total ram usage:        0 bytes
 17664 ;; Hardware stack levels used:    1
 17665 ;; Hardware stack levels required when called:   13
 17666 ;; This function calls:
 17667 ;;		_LED_Toggle
 17668 ;;		_Reset_High
 17669 ;;		_Reset_Low
 17670 ;;		_delay_ms
 17671 ;; This function is called by:
 17672 ;;		_Configure_GPIOs
 17673 ;; This function uses a non-reentrant model
 17674 ;;
 17675                           
 17676                           	psect	text98
 17677  014178                     __ptext98:
 17678                           	opt stack 0
 17679  014178                     _LCD_Reset:
 17680                           	opt stack 14
 17681                           
 17682                           ;LCD.c: 97: Reset_High();
 17683                           
 17684                           ;incstack = 0
 17685  014178  ECF0  F0A4         	call	_Reset_High	;wreg free
 17686                           
 17687                           ;LCD.c: 98: LED_Toggle(eLED2);
 17688  01417C  0E01               	movlw	1
 17689  01417E  EC53  F0A1         	call	_LED_Toggle
 17690                           
 17691                           ;LCD.c: 99: delay_ms(0x80);
 17692  014182  0E00               	movlw	0
 17693  014184  0100               	movlb	0	; () banked
 17694  014186  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 17695  014188  0E80               	movlw	128
 17696  01418A  6FB8               	movwf	delay_ms@ms& (0+255),b
 17697  01418C  EC30  F09E         	call	_delay_ms	;wreg free
 17698                           
 17699                           ;LCD.c: 100: LED_Toggle(eLED2);
 17700  014190  0E01               	movlw	1
 17701  014192  EC53  F0A1         	call	_LED_Toggle
 17702                           
 17703                           ;LCD.c: 101: Reset_Low();
 17704  014196  ECE1  F0A4         	call	_Reset_Low	;wreg free
 17705                           
 17706                           ;LCD.c: 102: delay_ms(0x80);
 17707  01419A  0E00               	movlw	0
 17708  01419C  0100               	movlb	0	; () banked
 17709  01419E  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 17710  0141A0  0E80               	movlw	128
 17711  0141A2  6FB8               	movwf	delay_ms@ms& (0+255),b
 17712  0141A4  EC30  F09E         	call	_delay_ms	;wreg free
 17713                           
 17714                           ;LCD.c: 103: LED_Toggle(eLED2);
 17715  0141A8  0E01               	movlw	1
 17716  0141AA  EC53  F0A1         	call	_LED_Toggle
 17717                           
 17718                           ;LCD.c: 104: Reset_High();
 17719  0141AE  ECF0  F0A4         	call	_Reset_High	;wreg free
 17720                           
 17721                           ;LCD.c: 105: delay_ms(0x80);
 17722  0141B2  0E00               	movlw	0
 17723  0141B4  0100               	movlb	0	; () banked
 17724  0141B6  6FB9               	movwf	(delay_ms@ms+1)& (0+255),b
 17725  0141B8  0E80               	movlw	128
 17726  0141BA  6FB8               	movwf	delay_ms@ms& (0+255),b
 17727  0141BC  EC30  F09E         	call	_delay_ms	;wreg free
 17728                           
 17729                           ;LCD.c: 106: LED_Toggle(eLED2);
 17730  0141C0  0E01               	movlw	1
 17731  0141C2  EC53  F0A1         	call	_LED_Toggle
 17732  0141C6  0012               	return		;funcret
 17733  0141C8                     __end_of_LCD_Reset:
 17734                           	opt stack 0
 17735                           tosu	equ	0xFFF
 17736                           tosh	equ	0xFFE
 17737                           tosl	equ	0xFFD
 17738                           pclath	equ	0xFFA
 17739                           tblptru	equ	0xFF8
 17740                           tblptrh	equ	0xFF7
 17741                           tblptrl	equ	0xFF6
 17742                           tablat	equ	0xFF5
 17743                           prodh	equ	0xFF4
 17744                           prodl	equ	0xFF3
 17745                           intcon	equ	0xFF2
 17746                           postinc0	equ	0xFEE
 17747                           plusw0	equ	0xFEB
 17748                           wreg	equ	0xFE8
 17749                           indf1	equ	0xFE7
 17750                           postdec1	equ	0xFE5
 17751                           fsr1h	equ	0xFE2
 17752                           fsr1l	equ	0xFE1
 17753                           indf2	equ	0xFDF
 17754                           postinc2	equ	0xFDE
 17755                           postdec2	equ	0xFDD
 17756                           plusw2	equ	0xFDB
 17757                           fsr2h	equ	0xFDA
 17758                           fsr2l	equ	0xFD9
 17759                           status	equ	0xFD8
 17760                           
 17761 ;; *************** function _delay_ms *****************
 17762 ;; Defined at:
 17763 ;;		line 240 in file "Library/Types.c"
 17764 ;; Parameters:    Size  Location     Type
 17765 ;;  ms              2    0[BANK0 ] unsigned short 
 17766 ;; Auto vars:     Size  Location     Type
 17767 ;;  u               4    2[BANK0 ] volatile unsigned long 
 17768 ;; Return value:  Size  Location     Type
 17769 ;;                  1    wreg      void 
 17770 ;; Registers used:
 17771 ;;		wreg, status,2, status,0
 17772 ;; Tracked objects:
 17773 ;;		On entry : 0/0
 17774 ;;		On exit  : 0/0
 17775 ;;		Unchanged: 0/0
 17776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17777 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17780 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17781 ;;Total ram usage:        6 bytes
 17782 ;; Hardware stack levels used:    1
 17783 ;; Hardware stack levels required when called:    7
 17784 ;; This function calls:
 17785 ;;		Nothing
 17786 ;; This function is called by:
 17787 ;;		_LCD_Reset
 17788 ;;		_LCD_Init
 17789 ;;		_MXK_Init
 17790 ;; This function uses a non-reentrant model
 17791 ;;
 17792                           
 17793                           	psect	text99
 17794  013C60                     __ptext99:
 17795                           	opt stack 0
 17796  013C60                     _delay_ms:
 17797                           	opt stack 21
 17798                           
 17799                           ;Types.c: 242: volatile unsigned long u;
 17800                           ;Types.c: 243: while (ms--)
 17801                           
 17802                           ;incstack = 0
 17803  013C60  D01F               	goto	u7490
 17804  013C62                     l11001:
 17805                           
 17806                           ;Types.c: 244: {
 17807                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 17808  013C62  0E00               	movlw	0
 17809  013C64  0100               	movlb	0	; () banked
 17810  013C66  6FBA               	movwf	delay_ms@u& (0+255),b	;volatile
 17811  013C68  0E00               	movlw	0
 17812  013C6A  6FBB               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17813  013C6C  0E00               	movlw	0
 17814  013C6E  6FBC               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17815  013C70  0E00               	movlw	0
 17816  013C72  6FBD               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17817  013C74                     l11003:
 17818                           
 17819                           ; BSR set to: 0
 17820  013C74  0100               	movlb	0	; () banked
 17821  013C76  51BD               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 17822  013C78  0100               	movlb	0	; () banked
 17823  013C7A  11BC               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 17824  013C7C  E111               	bnz	l11009
 17825  013C7E  0EB0               	movlw	176
 17826  013C80  0100               	movlb	0	; () banked
 17827  013C82  5DBA               	subwf	delay_ms@u& (0+255),w,b	;volatile
 17828  013C84  0E04               	movlw	4
 17829  013C86  0100               	movlb	0	; () banked
 17830  013C88  59BB               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 17831  013C8A  B0D8               	btfsc	status,0,c
 17832  013C8C  D009               	goto	u7490
 17833                           
 17834                           ; BSR set to: 0
 17835                           
 17836                           ; BSR set to: 0
 17837  013C8E  F000               	nop		; ;# 
 17838  013C90  0E01               	movlw	1
 17839  013C92  0100               	movlb	0	; () banked
 17840  013C94  27BA               	addwf	delay_ms@u& (0+255),f,b	;volatile
 17841  013C96  0E00               	movlw	0
 17842  013C98  23BB               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 17843  013C9A  23BC               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 17844  013C9C  23BD               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 17845  013C9E  D7EA               	goto	l11003
 17846  013CA0                     u7490:
 17847  013CA0                     l11009:
 17848  013CA0  0100               	movlb	0	; () banked
 17849  013CA2  07B8               	decf	delay_ms@ms& (0+255),f,b
 17850  013CA4  A0D8               	btfss	status,0,c
 17851  013CA6  07B9               	decf	(delay_ms@ms+1)& (0+255),f,b
 17852  013CA8  0100               	movlb	0	; () banked
 17853  013CAA  29B8               	incf	delay_ms@ms& (0+255),w,b
 17854  013CAC  E1DA               	bnz	l11001
 17855  013CAE  0100               	movlb	0	; () banked
 17856  013CB0  29B9               	incf	(delay_ms@ms+1)& (0+255),w,b
 17857  013CB2  A4D8               	btfss	status,2,c
 17858  013CB4  D7D6               	goto	l824
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;Types.c: 251: }
 17862                           ;Types.c: 252: }
 17863                           ;Types.c: 253: u = 0x8008;
 17864                           
 17865                           ; BSR set to: 0
 17866  013CB6  0E08               	movlw	8
 17867  013CB8  0100               	movlb	0	; () banked
 17868  013CBA  6FBA               	movwf	delay_ms@u& (0+255),b	;volatile
 17869  013CBC  0E80               	movlw	128
 17870  013CBE  6FBB               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 17871  013CC0  0E00               	movlw	0
 17872  013CC2  6FBC               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 17873  013CC4  0E00               	movlw	0
 17874  013CC6  6FBD               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 17875                           
 17876                           ; BSR set to: 0
 17877  013CC8  0012               	return		;funcret
 17878  013CCA                     __end_of_delay_ms:
 17879                           	opt stack 0
 17880                           tosu	equ	0xFFF
 17881                           tosh	equ	0xFFE
 17882                           tosl	equ	0xFFD
 17883                           pclath	equ	0xFFA
 17884                           tblptru	equ	0xFF8
 17885                           tblptrh	equ	0xFF7
 17886                           tblptrl	equ	0xFF6
 17887                           tablat	equ	0xFF5
 17888                           prodh	equ	0xFF4
 17889                           prodl	equ	0xFF3
 17890                           intcon	equ	0xFF2
 17891                           postinc0	equ	0xFEE
 17892                           plusw0	equ	0xFEB
 17893                           wreg	equ	0xFE8
 17894                           indf1	equ	0xFE7
 17895                           postdec1	equ	0xFE5
 17896                           fsr1h	equ	0xFE2
 17897                           fsr1l	equ	0xFE1
 17898                           indf2	equ	0xFDF
 17899                           postinc2	equ	0xFDE
 17900                           postdec2	equ	0xFDD
 17901                           plusw2	equ	0xFDB
 17902                           fsr2h	equ	0xFDA
 17903                           fsr2l	equ	0xFD9
 17904                           status	equ	0xFD8
 17905                           
 17906 ;; *************** function _Reset_Low *****************
 17907 ;; Defined at:
 17908 ;;		line 32 in file "Library/LCD.c"
 17909 ;; Parameters:    Size  Location     Type
 17910 ;;		None
 17911 ;; Auto vars:     Size  Location     Type
 17912 ;;		None
 17913 ;; Return value:  Size  Location     Type
 17914 ;;                  1    wreg      void 
 17915 ;; Registers used:
 17916 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17917 ;; Tracked objects:
 17918 ;;		On entry : 0/0
 17919 ;;		On exit  : 0/0
 17920 ;;		Unchanged: 0/0
 17921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17926 ;;Total ram usage:        0 bytes
 17927 ;; Hardware stack levels used:    1
 17928 ;; Hardware stack levels required when called:   11
 17929 ;; This function calls:
 17930 ;;		_Port_SetPin
 17931 ;; This function is called by:
 17932 ;;		_LCD_Reset
 17933 ;; This function uses a non-reentrant model
 17934 ;;
 17935                           
 17936                           	psect	text100
 17937  0149C2                     __ptext100:
 17938                           	opt stack 0
 17939  0149C2                     _Reset_Low:
 17940                           	opt stack 15
 17941                           
 17942                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;incstack = 0
 17946  0149C2  0EAC               	movlw	low _PortF
 17947  0149C4  0100               	movlb	0	; () banked
 17948  0149C6  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 17949  0149C8  0E01               	movlw	high _PortF
 17950  0149CA  0100               	movlb	0	; () banked
 17951  0149CC  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17952  0149CE  0E06               	movlw	6
 17953  0149D0  0100               	movlb	0	; () banked
 17954  0149D2  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 17955  0149D4  0E01               	movlw	1
 17956  0149D6  0100               	movlb	0	; () banked
 17957  0149D8  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 17958  0149DA  EC6E  F094         	call	_Port_SetPin	;wreg free
 17959  0149DE  0012               	return		;funcret
 17960  0149E0                     __end_of_Reset_Low:
 17961                           	opt stack 0
 17962                           tosu	equ	0xFFF
 17963                           tosh	equ	0xFFE
 17964                           tosl	equ	0xFFD
 17965                           pclath	equ	0xFFA
 17966                           tblptru	equ	0xFF8
 17967                           tblptrh	equ	0xFF7
 17968                           tblptrl	equ	0xFF6
 17969                           tablat	equ	0xFF5
 17970                           prodh	equ	0xFF4
 17971                           prodl	equ	0xFF3
 17972                           intcon	equ	0xFF2
 17973                           postinc0	equ	0xFEE
 17974                           plusw0	equ	0xFEB
 17975                           wreg	equ	0xFE8
 17976                           indf1	equ	0xFE7
 17977                           postdec1	equ	0xFE5
 17978                           fsr1h	equ	0xFE2
 17979                           fsr1l	equ	0xFE1
 17980                           indf2	equ	0xFDF
 17981                           postinc2	equ	0xFDE
 17982                           postdec2	equ	0xFDD
 17983                           plusw2	equ	0xFDB
 17984                           fsr2h	equ	0xFDA
 17985                           fsr2l	equ	0xFD9
 17986                           status	equ	0xFD8
 17987                           
 17988 ;; *************** function _Reset_High *****************
 17989 ;; Defined at:
 17990 ;;		line 36 in file "Library/LCD.c"
 17991 ;; Parameters:    Size  Location     Type
 17992 ;;		None
 17993 ;; Auto vars:     Size  Location     Type
 17994 ;;		None
 17995 ;; Return value:  Size  Location     Type
 17996 ;;                  1    wreg      void 
 17997 ;; Registers used:
 17998 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17999 ;; Tracked objects:
 18000 ;;		On entry : 0/0
 18001 ;;		On exit  : 0/0
 18002 ;;		Unchanged: 0/0
 18003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18008 ;;Total ram usage:        0 bytes
 18009 ;; Hardware stack levels used:    1
 18010 ;; Hardware stack levels required when called:   11
 18011 ;; This function calls:
 18012 ;;		_Port_SetPin
 18013 ;; This function is called by:
 18014 ;;		_LCD_Reset
 18015 ;; This function uses a non-reentrant model
 18016 ;;
 18017                           
 18018                           	psect	text101
 18019  0149E0                     __ptext101:
 18020                           	opt stack 0
 18021  0149E0                     _Reset_High:
 18022                           	opt stack 15
 18023                           
 18024                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 18025                           
 18026                           ;incstack = 0
 18027  0149E0  0EAC               	movlw	low _PortF
 18028  0149E2  0100               	movlb	0	; () banked
 18029  0149E4  6FC7               	movwf	Port_SetPin@pInput& (0+255),b
 18030  0149E6  0E01               	movlw	high _PortF
 18031  0149E8  0100               	movlb	0	; () banked
 18032  0149EA  6FC8               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18033  0149EC  0E06               	movlw	6
 18034  0149EE  0100               	movlb	0	; () banked
 18035  0149F0  6FC9               	movwf	Port_SetPin@pPin& (0+255),b
 18036  0149F2  0E00               	movlw	0
 18037  0149F4  0100               	movlb	0	; () banked
 18038  0149F6  6FCA               	movwf	Port_SetPin@pValue& (0+255),b
 18039  0149F8  EC6E  F094         	call	_Port_SetPin	;wreg free
 18040  0149FC  0012               	return		;funcret
 18041  0149FE                     __end_of_Reset_High:
 18042                           	opt stack 0
 18043                           tosu	equ	0xFFF
 18044                           tosh	equ	0xFFE
 18045                           tosl	equ	0xFFD
 18046                           pclath	equ	0xFFA
 18047                           tblptru	equ	0xFF8
 18048                           tblptrh	equ	0xFF7
 18049                           tblptrl	equ	0xFF6
 18050                           tablat	equ	0xFF5
 18051                           prodh	equ	0xFF4
 18052                           prodl	equ	0xFF3
 18053                           intcon	equ	0xFF2
 18054                           postinc0	equ	0xFEE
 18055                           plusw0	equ	0xFEB
 18056                           wreg	equ	0xFE8
 18057                           indf1	equ	0xFE7
 18058                           postdec1	equ	0xFE5
 18059                           fsr1h	equ	0xFE2
 18060                           fsr1l	equ	0xFE1
 18061                           indf2	equ	0xFDF
 18062                           postinc2	equ	0xFDE
 18063                           postdec2	equ	0xFDD
 18064                           plusw2	equ	0xFDB
 18065                           fsr2h	equ	0xFDA
 18066                           fsr2l	equ	0xFD9
 18067                           status	equ	0xFD8
 18068                           
 18069 ;; *************** function _LED_Toggle *****************
 18070 ;; Defined at:
 18071 ;;		line 50 in file "Library/LED.c"
 18072 ;; Parameters:    Size  Location     Type
 18073 ;;  pLED            1    wreg     enum E6739
 18074 ;; Auto vars:     Size  Location     Type
 18075 ;;  pLED            1   24[BANK0 ] enum E6739
 18076 ;; Return value:  Size  Location     Type
 18077 ;;                  1    wreg      void 
 18078 ;; Registers used:
 18079 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18080 ;; Tracked objects:
 18081 ;;		On entry : 0/0
 18082 ;;		On exit  : 0/0
 18083 ;;		Unchanged: 0/0
 18084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18089 ;;Total ram usage:        1 bytes
 18090 ;; Hardware stack levels used:    1
 18091 ;; Hardware stack levels required when called:   12
 18092 ;; This function calls:
 18093 ;;		_Port_TogglePin
 18094 ;; This function is called by:
 18095 ;;		_LCD_Reset
 18096 ;;		_Event_DIPSwitch
 18097 ;;		_Event_HMI_DIPSwitch
 18098 ;;		_Event_TestButton
 18099 ;;		_Event_HMI_LeftButton
 18100 ;;		_Event_HMI_RightButton
 18101 ;;		_Event_HMI_UpButton
 18102 ;;		_Event_HMI_DownButton
 18103 ;;		_FunctMotor
 18104 ;;		_Event_ADCSequenceComplete
 18105 ;; This function uses a non-reentrant model
 18106 ;;
 18107                           
 18108                           	psect	text102
 18109  0142A6                     __ptext102:
 18110                           	opt stack 0
 18111  0142A6                     _LED_Toggle:
 18112                           	opt stack 10
 18113                           
 18114                           ;incstack = 0
 18115                           ;LED_Toggle@pLED stored from wreg
 18116  0142A6  0100               	movlb	0	; () banked
 18117  0142A8  6FD0               	movwf	LED_Toggle@pLED& (0+255),b
 18118                           
 18119                           ;LED.c: 52: switch (pLED)
 18120  0142AA  D018               	goto	l234
 18121  0142AC                     
 18122                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 18123  0142AC  0E91               	movlw	low _PortC
 18124  0142AE  0100               	movlb	0	; () banked
 18125  0142B0  6FCC               	movwf	Port_TogglePin@pInput& (0+255),b
 18126  0142B2  0E00               	movlw	high _PortC
 18127  0142B4  0100               	movlb	0	; () banked
 18128  0142B6  6FCD               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 18129  0142B8  0E00               	movlw	0
 18130  0142BA  0100               	movlb	0	; () banked
 18131  0142BC  6FCE               	movwf	Port_TogglePin@pPin& (0+255),b
 18132  0142BE  EC93  F0A3         	call	_Port_TogglePin	;wreg free
 18133                           
 18134                           ;LED.c: 56: break;
 18135  0142C2  0012               	return	
 18136  0142C4                     
 18137                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 18138  0142C4  0E91               	movlw	low _PortC
 18139  0142C6  0100               	movlb	0	; () banked
 18140  0142C8  6FCC               	movwf	Port_TogglePin@pInput& (0+255),b
 18141  0142CA  0E00               	movlw	high _PortC
 18142  0142CC  0100               	movlb	0	; () banked
 18143  0142CE  6FCD               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 18144  0142D0  0E01               	movlw	1
 18145  0142D2  0100               	movlb	0	; () banked
 18146  0142D4  6FCE               	movwf	Port_TogglePin@pPin& (0+255),b
 18147  0142D6  EC93  F0A3         	call	_Port_TogglePin	;wreg free
 18148                           
 18149                           ;LED.c: 60: }
 18150                           
 18151                           ;LED.c: 59: break;
 18152  0142DA  0012               	return	
 18153  0142DC                     l234:
 18154  0142DC  0100               	movlb	0	; () banked
 18155  0142DE  51D0               	movf	LED_Toggle@pLED& (0+255),w,b
 18156                           
 18157                           ; Switch size 1, requested type "space"
 18158                           ; Number of cases is 2, Range of values is 0 to 1
 18159                           ; switch strategies available:
 18160                           ; Name         Instructions Cycles
 18161                           ; simple_byte            7     4 (average)
 18162                           ;	Chosen strategy is simple_byte
 18163  0142E0  0A00               	xorlw	0	; case 0
 18164  0142E2  B4D8               	btfsc	status,2,c
 18165  0142E4  D7E3               	goto	l235
 18166  0142E6  0A01               	xorlw	1	; case 1
 18167  0142E8  A4D8               	btfss	status,2,c
 18168  0142EA  0012               	return	
 18169  0142EC  D7EB               	goto	l237
 18170  0142EE                     __end_of_LED_Toggle:
 18171                           	opt stack 0
 18172                           tosu	equ	0xFFF
 18173                           tosh	equ	0xFFE
 18174                           tosl	equ	0xFFD
 18175                           pclath	equ	0xFFA
 18176                           tblptru	equ	0xFF8
 18177                           tblptrh	equ	0xFF7
 18178                           tblptrl	equ	0xFF6
 18179                           tablat	equ	0xFF5
 18180                           prodh	equ	0xFF4
 18181                           prodl	equ	0xFF3
 18182                           intcon	equ	0xFF2
 18183                           postinc0	equ	0xFEE
 18184                           plusw0	equ	0xFEB
 18185                           wreg	equ	0xFE8
 18186                           indf1	equ	0xFE7
 18187                           postdec1	equ	0xFE5
 18188                           fsr1h	equ	0xFE2
 18189                           fsr1l	equ	0xFE1
 18190                           indf2	equ	0xFDF
 18191                           postinc2	equ	0xFDE
 18192                           postdec2	equ	0xFDD
 18193                           plusw2	equ	0xFDB
 18194                           fsr2h	equ	0xFDA
 18195                           fsr2l	equ	0xFD9
 18196                           status	equ	0xFD8
 18197                           
 18198 ;; *************** function _Port_TogglePin *****************
 18199 ;; Defined at:
 18200 ;;		line 278 in file "Library/Port.c"
 18201 ;; Parameters:    Size  Location     Type
 18202 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 18203 ;;		 -> PortC(10), 
 18204 ;;  pPin            1   22[BANK0 ] enum E6750
 18205 ;; Auto vars:     Size  Location     Type
 18206 ;;  Value           1   23[BANK0 ] unsigned char 
 18207 ;; Return value:  Size  Location     Type
 18208 ;;                  1    wreg      void 
 18209 ;; Registers used:
 18210 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18211 ;; Tracked objects:
 18212 ;;		On entry : 0/0
 18213 ;;		On exit  : 0/0
 18214 ;;		Unchanged: 0/0
 18215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18216 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18217 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18219 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18220 ;;Total ram usage:        4 bytes
 18221 ;; Hardware stack levels used:    1
 18222 ;; Hardware stack levels required when called:   11
 18223 ;; This function calls:
 18224 ;;		_Port_GetPin
 18225 ;;		_Port_SetPin
 18226 ;; This function is called by:
 18227 ;;		_LED_Toggle
 18228 ;; This function uses a non-reentrant model
 18229 ;;
 18230                           
 18231                           	psect	text103
 18232  014726                     __ptext103:
 18233                           	opt stack 0
 18234  014726                     _Port_TogglePin:
 18235                           	opt stack 10
 18236                           
 18237                           ;Port.c: 280: UINT8 Value;
 18238                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 18239                           
 18240                           ;incstack = 0
 18241  014726  C0CC  F0B8         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 18242  01472A  C0CD  F0B9         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 18243  01472E  C0CE  F0BA         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 18244  014732  EC77  F0A1         	call	_Port_GetPin	;wreg free
 18245  014736  0100               	movlb	0	; () banked
 18246  014738  6FCF               	movwf	Port_TogglePin@Value& (0+255),b
 18247                           
 18248                           ; BSR set to: 0
 18249                           ;Port.c: 282: Value ^= 0x01;
 18250  01473A  0E01               	movlw	1
 18251  01473C  0100               	movlb	0	; () banked
 18252  01473E  1BCF               	xorwf	Port_TogglePin@Value& (0+255),f,b
 18253                           
 18254                           ; BSR set to: 0
 18255                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 18256  014740  C0CC  F0C7         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 18257  014744  C0CD  F0C8         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 18258  014748  C0CE  F0C9         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 18259  01474C  C0CF  F0CA         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 18260  014750  EC6E  F094         	call	_Port_SetPin	;wreg free
 18261  014754  0012               	return		;funcret
 18262  014756                     __end_of_Port_TogglePin:
 18263                           	opt stack 0
 18264                           tosu	equ	0xFFF
 18265                           tosh	equ	0xFFE
 18266                           tosl	equ	0xFFD
 18267                           pclath	equ	0xFFA
 18268                           tblptru	equ	0xFF8
 18269                           tblptrh	equ	0xFF7
 18270                           tblptrl	equ	0xFF6
 18271                           tablat	equ	0xFF5
 18272                           prodh	equ	0xFF4
 18273                           prodl	equ	0xFF3
 18274                           intcon	equ	0xFF2
 18275                           postinc0	equ	0xFEE
 18276                           plusw0	equ	0xFEB
 18277                           wreg	equ	0xFE8
 18278                           indf1	equ	0xFE7
 18279                           postdec1	equ	0xFE5
 18280                           fsr1h	equ	0xFE2
 18281                           fsr1l	equ	0xFE1
 18282                           indf2	equ	0xFDF
 18283                           postinc2	equ	0xFDE
 18284                           postdec2	equ	0xFDD
 18285                           plusw2	equ	0xFDB
 18286                           fsr2h	equ	0xFDA
 18287                           fsr2l	equ	0xFD9
 18288                           status	equ	0xFD8
 18289                           
 18290 ;; *************** function _Port_SetPin *****************
 18291 ;; Defined at:
 18292 ;;		line 247 in file "Library/Port.c"
 18293 ;; Parameters:    Size  Location     Type
 18294 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 18295 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 18296 ;;  pPin            1   17[BANK0 ] enum E6750
 18297 ;;  pValue          1   18[BANK0 ] unsigned char 
 18298 ;; Auto vars:     Size  Location     Type
 18299 ;;  Type            1   19[BANK0 ] enum E6795
 18300 ;; Return value:  Size  Location     Type
 18301 ;;                  1    wreg      void 
 18302 ;; Registers used:
 18303 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18304 ;; Tracked objects:
 18305 ;;		On entry : 0/0
 18306 ;;		On exit  : 0/0
 18307 ;;		Unchanged: 0/0
 18308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18309 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18312 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18313 ;;Total ram usage:        5 bytes
 18314 ;; Hardware stack levels used:    1
 18315 ;; Hardware stack levels required when called:   10
 18316 ;; This function calls:
 18317 ;;		_Byte_SetBit
 18318 ;;		_Word_GetPair
 18319 ;; This function is called by:
 18320 ;;		_Reset_Low
 18321 ;;		_Reset_High
 18322 ;;		_LED_Set
 18323 ;;		_Port_TogglePin
 18324 ;;		_Motor_Init
 18325 ;;		_Motor_Step
 18326 ;;		_MXK_Init
 18327 ;; This function uses a non-reentrant model
 18328 ;;
 18329                           
 18330                           	psect	text104
 18331  0128DC                     __ptext104:
 18332                           	opt stack 0
 18333  0128DC                     _Port_SetPin:
 18334                           	opt stack 10
 18335                           
 18336                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 18337                           
 18338                           ;incstack = 0
 18339  0128DC  0E08               	movlw	8
 18340  0128DE  0100               	movlb	0	; () banked
 18341  0128E0  25C7               	addwf	Port_SetPin@pInput& (0+255),w,b
 18342  0128E2  0100               	movlb	0	; () banked
 18343  0128E4  6FC4               	movwf	Word_GetPair@pInput& (0+255),b
 18344  0128E6  0E00               	movlw	0
 18345  0128E8  0100               	movlb	0	; () banked
 18346  0128EA  21C8               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 18347  0128EC  0100               	movlb	0	; () banked
 18348  0128EE  6FC5               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 18349  0128F0  C0C9  F0C6         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 18350  0128F4  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 18351  0128F8  0100               	movlb	0	; () banked
 18352  0128FA  6FCB               	movwf	Port_SetPin@Type& (0+255),b
 18353                           
 18354                           ;Port.c: 250: switch (Type)
 18355  0128FC  D042               	goto	l427
 18356  0128FE                     
 18357                           ; BSR set to: 0
 18358                           ;Port.c: 256: pValue &= 1;
 18359                           
 18360                           ; BSR set to: 0
 18361  0128FE  0E01               	movlw	1
 18362  012900  0100               	movlb	0	; () banked
 18363  012902  17CA               	andwf	Port_SetPin@pValue& (0+255),f,b
 18364                           
 18365                           ; BSR set to: 0
 18366                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18367  012904  0100               	movlb	0	; () banked
 18368  012906  EE20 F002          	lfsr	2,2
 18369  01290A  51C7               	movf	Port_SetPin@pInput& (0+255),w,b
 18370  01290C  26D9               	addwf	fsr2l,f,c
 18371  01290E  51C8               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18372  012910  22DA               	addwfc	fsr2h,f,c
 18373  012912  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 18374  012916  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 18375  01291A  C0C9  F0BA         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18376  01291E  C0CA  F0BB         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18377  012922  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 18378                           
 18379                           ;Port.c: 258: break;
 18380  012926  0012               	return	
 18381  012928                     
 18382                           ;Port.c: 261: pValue &= 1;
 18383  012928  0E01               	movlw	1
 18384  01292A  0100               	movlb	0	; () banked
 18385  01292C  17CA               	andwf	Port_SetPin@pValue& (0+255),f,b
 18386                           
 18387                           ;Port.c: 262: pValue ^= 1;
 18388  01292E  0E01               	movlw	1
 18389  012930  0100               	movlb	0	; () banked
 18390  012932  1BCA               	xorwf	Port_SetPin@pValue& (0+255),f,b
 18391                           
 18392                           ; BSR set to: 0
 18393                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 18394  012934  0100               	movlb	0	; () banked
 18395  012936  EE20 F002          	lfsr	2,2
 18396  01293A  51C7               	movf	Port_SetPin@pInput& (0+255),w,b
 18397  01293C  26D9               	addwf	fsr2l,f,c
 18398  01293E  51C8               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18399  012940  22DA               	addwfc	fsr2h,f,c
 18400  012942  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 18401  012946  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 18402  01294A  C0C9  F0BA         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18403  01294E  C0CA  F0BB         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18404  012952  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 18405                           
 18406                           ;Port.c: 264: break;
 18407  012956  0012               	return	
 18408  012958                     
 18409                           ;Port.c: 266: pValue &= 1;
 18410  012958  0E01               	movlw	1
 18411  01295A  0100               	movlb	0	; () banked
 18412  01295C  17CA               	andwf	Port_SetPin@pValue& (0+255),f,b
 18413                           
 18414                           ; BSR set to: 0
 18415                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 18416  01295E  0100               	movlb	0	; () banked
 18417  012960  EE20 F004          	lfsr	2,4
 18418  012964  51C7               	movf	Port_SetPin@pInput& (0+255),w,b
 18419  012966  26D9               	addwf	fsr2l,f,c
 18420  012968  51C8               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 18421  01296A  22DA               	addwfc	fsr2h,f,c
 18422  01296C  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 18423  012970  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 18424  012974  C0C9  F0BA         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 18425  012978  C0CA  F0BB         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 18426  01297C  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 18427                           
 18428                           ;Port.c: 269: }
 18429                           
 18430                           ;Port.c: 268: break;
 18431  012980  0012               	return	
 18432  012982                     l427:
 18433  012982  0100               	movlb	0	; () banked
 18434  012984  51CB               	movf	Port_SetPin@Type& (0+255),w,b
 18435                           
 18436                           ; Switch size 1, requested type "space"
 18437                           ; Number of cases is 4, Range of values is 0 to 3
 18438                           ; switch strategies available:
 18439                           ; Name         Instructions Cycles
 18440                           ; simple_byte           13     7 (average)
 18441                           ;	Chosen strategy is simple_byte
 18442  012986  0A00               	xorlw	0	; case 0
 18443  012988  B4D8               	btfsc	status,2,c
 18444  01298A  0012               	return	
 18445  01298C  0A01               	xorlw	1	; case 1
 18446  01298E  B4D8               	btfsc	status,2,c
 18447  012990  D7B6               	goto	l430
 18448  012992  0A03               	xorlw	3	; case 2
 18449  012994  B4D8               	btfsc	status,2,c
 18450  012996  D7C8               	goto	l432
 18451  012998  0A01               	xorlw	1	; case 3
 18452  01299A  A4D8               	btfss	status,2,c
 18453  01299C  0012               	return	
 18454  01299E  D7DC               	goto	l433
 18455  0129A0                     __end_of_Port_SetPin:
 18456                           	opt stack 0
 18457                           tosu	equ	0xFFF
 18458                           tosh	equ	0xFFE
 18459                           tosl	equ	0xFFD
 18460                           pclath	equ	0xFFA
 18461                           tblptru	equ	0xFF8
 18462                           tblptrh	equ	0xFF7
 18463                           tblptrl	equ	0xFF6
 18464                           tablat	equ	0xFF5
 18465                           prodh	equ	0xFF4
 18466                           prodl	equ	0xFF3
 18467                           intcon	equ	0xFF2
 18468                           postinc0	equ	0xFEE
 18469                           plusw0	equ	0xFEB
 18470                           wreg	equ	0xFE8
 18471                           indf1	equ	0xFE7
 18472                           postdec1	equ	0xFE5
 18473                           fsr1h	equ	0xFE2
 18474                           fsr1l	equ	0xFE1
 18475                           indf2	equ	0xFDF
 18476                           postinc2	equ	0xFDE
 18477                           postdec2	equ	0xFDD
 18478                           plusw2	equ	0xFDB
 18479                           fsr2h	equ	0xFDA
 18480                           fsr2l	equ	0xFD9
 18481                           status	equ	0xFD8
 18482                           
 18483 ;; *************** function _Port_GetPin *****************
 18484 ;; Defined at:
 18485 ;;		line 271 in file "Library/Port.c"
 18486 ;; Parameters:    Size  Location     Type
 18487 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 18488 ;;		 -> PortB(10), PortE(10), PortC(10), 
 18489 ;;  pPin            1    2[BANK0 ] enum E6750
 18490 ;; Auto vars:     Size  Location     Type
 18491 ;;  Output          1    5[BANK0 ] unsigned char 
 18492 ;; Return value:  Size  Location     Type
 18493 ;;                  1    wreg      unsigned char 
 18494 ;; Registers used:
 18495 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18496 ;; Tracked objects:
 18497 ;;		On entry : 0/0
 18498 ;;		On exit  : 0/0
 18499 ;;		Unchanged: 0/0
 18500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18501 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18504 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18505 ;;Total ram usage:        6 bytes
 18506 ;; Hardware stack levels used:    1
 18507 ;; Hardware stack levels required when called:    7
 18508 ;; This function calls:
 18509 ;;		Nothing
 18510 ;; This function is called by:
 18511 ;;		_Port_TogglePin
 18512 ;;		_HMI_LeftSwitch
 18513 ;;		_HMI_RightSwitch
 18514 ;;		_HMI_UpSwitch
 18515 ;;		_HMI_DownSwitch
 18516 ;;		_MXK_TestButton
 18517 ;; This function uses a non-reentrant model
 18518 ;;
 18519                           
 18520                           	psect	text105
 18521  0142EE                     __ptext105:
 18522                           	opt stack 0
 18523  0142EE                     _Port_GetPin:
 18524                           	opt stack 17
 18525                           
 18526                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 18527                           
 18528                           ;incstack = 0
 18529  0142EE  0100               	movlb	0	; () banked
 18530  0142F0  EE20 F006          	lfsr	2,6
 18531  0142F4  51B8               	movf	Port_GetPin@pInput& (0+255),w,b
 18532  0142F6  26D9               	addwf	fsr2l,f,c
 18533  0142F8  51B9               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 18534  0142FA  22DA               	addwfc	fsr2h,f,c
 18535  0142FC  CFDE F0BB          	movff	postinc2,??_Port_GetPin
 18536  014300  CFDD F0BC          	movff	postdec2,??_Port_GetPin+1
 18537  014304  C0BB  FFD9         	movff	??_Port_GetPin,fsr2l
 18538  014308  C0BC  FFDA         	movff	??_Port_GetPin+1,fsr2h
 18539  01430C  50DF               	movf	indf2,w,c
 18540  01430E  0100               	movlb	0	; () banked
 18541  014310  6FBD               	movwf	Port_GetPin@Output& (0+255),b
 18542                           
 18543                           ; BSR set to: 0
 18544                           ;Port.c: 274: Output >>= (UINT8)pPin;
 18545  014312  0100               	movlb	0	; () banked
 18546  014314  29BA               	incf	Port_GetPin@pPin& (0+255),w,b
 18547  014316  0100               	movlb	0	; () banked
 18548  014318  6FBB               	movwf	??_Port_GetPin& (0+255),b
 18549  01431A  D003               	goto	u6650
 18550  01431C                     u6655:
 18551  01431C  0100               	movlb	0	; () banked
 18552  01431E  90D8               	bcf	status,0,c
 18553  014320  33BD               	rrcf	Port_GetPin@Output& (0+255),f,b
 18554  014322                     u6650:
 18555  014322  0100               	movlb	0	; () banked
 18556  014324  2FBB               	decfsz	??_Port_GetPin& (0+255),f,b
 18557  014326  D7FA               	goto	u6655
 18558                           
 18559                           ;Port.c: 275: Output &= 1;
 18560  014328  0E01               	movlw	1
 18561  01432A  0100               	movlb	0	; () banked
 18562  01432C  17BD               	andwf	Port_GetPin@Output& (0+255),f,b
 18563                           
 18564                           ; BSR set to: 0
 18565                           ;Port.c: 276: return Output;
 18566  01432E  0100               	movlb	0	; () banked
 18567  014330  51BD               	movf	Port_GetPin@Output& (0+255),w,b
 18568  014332  0012               	return	
 18569  014334                     __end_of_Port_GetPin:
 18570                           	opt stack 0
 18571                           tosu	equ	0xFFF
 18572                           tosh	equ	0xFFE
 18573                           tosl	equ	0xFFD
 18574                           pclath	equ	0xFFA
 18575                           tblptru	equ	0xFF8
 18576                           tblptrh	equ	0xFF7
 18577                           tblptrl	equ	0xFF6
 18578                           tablat	equ	0xFF5
 18579                           prodh	equ	0xFF4
 18580                           prodl	equ	0xFF3
 18581                           intcon	equ	0xFF2
 18582                           postinc0	equ	0xFEE
 18583                           plusw0	equ	0xFEB
 18584                           wreg	equ	0xFE8
 18585                           indf1	equ	0xFE7
 18586                           postdec1	equ	0xFE5
 18587                           fsr1h	equ	0xFE2
 18588                           fsr1l	equ	0xFE1
 18589                           indf2	equ	0xFDF
 18590                           postinc2	equ	0xFDE
 18591                           postdec2	equ	0xFDD
 18592                           plusw2	equ	0xFDB
 18593                           fsr2h	equ	0xFDA
 18594                           fsr2l	equ	0xFD9
 18595                           status	equ	0xFD8
 18596                           
 18597 ;; *************** function _HMI_Init *****************
 18598 ;; Defined at:
 18599 ;;		line 104 in file "HMI.c"
 18600 ;; Parameters:    Size  Location     Type
 18601 ;;		None
 18602 ;; Auto vars:     Size  Location     Type
 18603 ;;  in              2   59[BANK0 ] unsigned short 
 18604 ;; Return value:  Size  Location     Type
 18605 ;;                  1    wreg      void 
 18606 ;; Registers used:
 18607 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18608 ;; Tracked objects:
 18609 ;;		On entry : 0/0
 18610 ;;		On exit  : 0/0
 18611 ;;		Unchanged: 0/0
 18612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18614 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18616 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18617 ;;Total ram usage:        2 bytes
 18618 ;; Hardware stack levels used:    1
 18619 ;; Hardware stack levels required when called:   16
 18620 ;; This function calls:
 18621 ;;		_Button_Init
 18622 ;;		_SPI_Init
 18623 ;;		_SPI_MinSpeed
 18624 ;; This function is called by:
 18625 ;;		_initialise
 18626 ;; This function uses a non-reentrant model
 18627 ;;
 18628                           
 18629                           	psect	text106
 18630  011568                     __ptext106:
 18631                           	opt stack 0
 18632  011568                     _HMI_Init:
 18633                           	opt stack 13
 18634                           
 18635                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 18636                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_HMI_DIPSwitch);
 18637                           
 18638                           ; BSR set to: 0
 18639                           ;incstack = 0
 18640  011568  0E5A               	movlw	low (_HMIBoard+48)
 18641  01156A  0101               	movlb	1	; () banked
 18642  01156C  6FC2               	movwf	Button_Init@pInput& (0+255),b
 18643  01156E  0E01               	movlw	high (_HMIBoard+48)
 18644  011570  0101               	movlb	1	; () banked
 18645  011572  6FC3               	movwf	(Button_Init@pInput+1)& (0+255),b
 18646  011574  0E00               	movlw	0
 18647  011576  0101               	movlb	1	; () banked
 18648  011578  6FC5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18649  01157A  0E02               	movlw	2
 18650  01157C  6FC4               	movwf	Button_Init@pThreshold& (0+255),b
 18651  01157E  0E4E               	movlw	low _HMI_InitButtons
 18652  011580  0101               	movlb	1	; () banked
 18653  011582  6FC6               	movwf	Button_Init@pInitIO& (0+255),b
 18654  011584  0E4C               	movlw	high _HMI_InitButtons
 18655  011586  0101               	movlb	1	; () banked
 18656  011588  6FC7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18657  01158A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18658  01158C  0101               	movlb	1	; () banked
 18659  01158E  6FC8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18660  011590  0EA6               	movlw	low _HMI_DIPSwitch
 18661  011592  0101               	movlb	1	; () banked
 18662  011594  6FC9               	movwf	Button_Init@pGetState& (0+255),b
 18663  011596  0E4A               	movlw	high _HMI_DIPSwitch
 18664  011598  0101               	movlb	1	; () banked
 18665  01159A  6FCA               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18666  01159C  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 18667  01159E  0101               	movlb	1	; () banked
 18668  0115A0  6FCB               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18669  0115A2  0EE4               	movlw	low _Event_HMI_DIPSwitch
 18670  0115A4  0101               	movlb	1	; () banked
 18671  0115A6  6FCC               	movwf	Button_Init@pFunction& (0+255),b
 18672  0115A8  0E47               	movlw	high _Event_HMI_DIPSwitch
 18673  0115AA  0101               	movlb	1	; () banked
 18674  0115AC  6FCD               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18675  0115AE  0E01               	movlw	low (_Event_HMI_DIPSwitch shr (0+16))
 18676  0115B0  0101               	movlb	1	; () banked
 18677  0115B2  6FCE               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18678  0115B4  EC34  F093         	call	_Button_Init	;wreg free
 18679                           
 18680                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 18681                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_HMI_LeftButton);
 18682  0115B8  0E3C               	movlw	low (_HMIBoard+18)
 18683  0115BA  0101               	movlb	1	; () banked
 18684  0115BC  6FC2               	movwf	Button_Init@pInput& (0+255),b
 18685  0115BE  0E01               	movlw	high (_HMIBoard+18)
 18686  0115C0  0101               	movlb	1	; () banked
 18687  0115C2  6FC3               	movwf	(Button_Init@pInput+1)& (0+255),b
 18688  0115C4  0E00               	movlw	0
 18689  0115C6  0101               	movlb	1	; () banked
 18690  0115C8  6FC5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18691  0115CA  0E02               	movlw	2
 18692  0115CC  6FC4               	movwf	Button_Init@pThreshold& (0+255),b
 18693  0115CE  0E4E               	movlw	low _HMI_InitButtons
 18694  0115D0  0101               	movlb	1	; () banked
 18695  0115D2  6FC6               	movwf	Button_Init@pInitIO& (0+255),b
 18696  0115D4  0E4C               	movlw	high _HMI_InitButtons
 18697  0115D6  0101               	movlb	1	; () banked
 18698  0115D8  6FC7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18699  0115DA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18700  0115DC  0101               	movlb	1	; () banked
 18701  0115DE  6FC8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18702  0115E0  0E06               	movlw	low _HMI_LeftSwitch
 18703  0115E2  0101               	movlb	1	; () banked
 18704  0115E4  6FC9               	movwf	Button_Init@pGetState& (0+255),b
 18705  0115E6  0E4B               	movlw	high _HMI_LeftSwitch
 18706  0115E8  0101               	movlb	1	; () banked
 18707  0115EA  6FCA               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18708  0115EC  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 18709  0115EE  0101               	movlb	1	; () banked
 18710  0115F0  6FCB               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18711  0115F2  0ED6               	movlw	low _Event_HMI_LeftButton
 18712  0115F4  0101               	movlb	1	; () banked
 18713  0115F6  6FCC               	movwf	Button_Init@pFunction& (0+255),b
 18714  0115F8  0E3F               	movlw	high _Event_HMI_LeftButton
 18715  0115FA  0101               	movlb	1	; () banked
 18716  0115FC  6FCD               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18717  0115FE  0E01               	movlw	low (_Event_HMI_LeftButton shr (0+16))
 18718  011600  0101               	movlb	1	; () banked
 18719  011602  6FCE               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18720  011604  EC34  F093         	call	_Button_Init	;wreg free
 18721                           
 18722                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 18723                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_HMI_RightButton);
 18724  011608  0E32               	movlw	low (_HMIBoard+8)
 18725  01160A  0101               	movlb	1	; () banked
 18726  01160C  6FC2               	movwf	Button_Init@pInput& (0+255),b
 18727  01160E  0E01               	movlw	high (_HMIBoard+8)
 18728  011610  0101               	movlb	1	; () banked
 18729  011612  6FC3               	movwf	(Button_Init@pInput+1)& (0+255),b
 18730  011614  0E00               	movlw	0
 18731  011616  0101               	movlb	1	; () banked
 18732  011618  6FC5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18733  01161A  0E02               	movlw	2
 18734  01161C  6FC4               	movwf	Button_Init@pThreshold& (0+255),b
 18735  01161E  0E4E               	movlw	low _HMI_InitButtons
 18736  011620  0101               	movlb	1	; () banked
 18737  011622  6FC6               	movwf	Button_Init@pInitIO& (0+255),b
 18738  011624  0E4C               	movlw	high _HMI_InitButtons
 18739  011626  0101               	movlb	1	; () banked
 18740  011628  6FC7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18741  01162A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18742  01162C  0101               	movlb	1	; () banked
 18743  01162E  6FC8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18744  011630  0EEE               	movlw	low _HMI_RightSwitch
 18745  011632  0101               	movlb	1	; () banked
 18746  011634  6FC9               	movwf	Button_Init@pGetState& (0+255),b
 18747  011636  0E4A               	movlw	high _HMI_RightSwitch
 18748  011638  0101               	movlb	1	; () banked
 18749  01163A  6FCA               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18750  01163C  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 18751  01163E  0101               	movlb	1	; () banked
 18752  011640  6FCB               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18753  011642  0E7A               	movlw	low _Event_HMI_RightButton
 18754  011644  0101               	movlb	1	; () banked
 18755  011646  6FCC               	movwf	Button_Init@pFunction& (0+255),b
 18756  011648  0E43               	movlw	high _Event_HMI_RightButton
 18757  01164A  0101               	movlb	1	; () banked
 18758  01164C  6FCD               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18759  01164E  0E01               	movlw	low (_Event_HMI_RightButton shr (0+16))
 18760  011650  0101               	movlb	1	; () banked
 18761  011652  6FCE               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18762  011654  EC34  F093         	call	_Button_Init	;wreg free
 18763                           
 18764                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 18765                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_HMI_UpButton);
 18766  011658  0E46               	movlw	low (_HMIBoard+28)
 18767  01165A  0101               	movlb	1	; () banked
 18768  01165C  6FC2               	movwf	Button_Init@pInput& (0+255),b
 18769  01165E  0E01               	movlw	high (_HMIBoard+28)
 18770  011660  0101               	movlb	1	; () banked
 18771  011662  6FC3               	movwf	(Button_Init@pInput+1)& (0+255),b
 18772  011664  0E00               	movlw	0
 18773  011666  0101               	movlb	1	; () banked
 18774  011668  6FC5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18775  01166A  0E02               	movlw	2
 18776  01166C  6FC4               	movwf	Button_Init@pThreshold& (0+255),b
 18777  01166E  0E4E               	movlw	low _HMI_InitButtons
 18778  011670  0101               	movlb	1	; () banked
 18779  011672  6FC6               	movwf	Button_Init@pInitIO& (0+255),b
 18780  011674  0E4C               	movlw	high _HMI_InitButtons
 18781  011676  0101               	movlb	1	; () banked
 18782  011678  6FC7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18783  01167A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18784  01167C  0101               	movlb	1	; () banked
 18785  01167E  6FC8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18786  011680  0ED6               	movlw	low _HMI_UpSwitch
 18787  011682  0101               	movlb	1	; () banked
 18788  011684  6FC9               	movwf	Button_Init@pGetState& (0+255),b
 18789  011686  0E4A               	movlw	high _HMI_UpSwitch
 18790  011688  0101               	movlb	1	; () banked
 18791  01168A  6FCA               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18792  01168C  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 18793  01168E  0101               	movlb	1	; () banked
 18794  011690  6FCB               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18795  011692  0EF6               	movlw	low _Event_HMI_UpButton
 18796  011694  0101               	movlb	1	; () banked
 18797  011696  6FCC               	movwf	Button_Init@pFunction& (0+255),b
 18798  011698  0E46               	movlw	high _Event_HMI_UpButton
 18799  01169A  0101               	movlb	1	; () banked
 18800  01169C  6FCD               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18801  01169E  0E01               	movlw	low (_Event_HMI_UpButton shr (0+16))
 18802  0116A0  0101               	movlb	1	; () banked
 18803  0116A2  6FCE               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18804  0116A4  EC34  F093         	call	_Button_Init	;wreg free
 18805                           
 18806                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 18807                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_HMI_DownButton);
 18808  0116A8  0E50               	movlw	low (_HMIBoard+38)
 18809  0116AA  0101               	movlb	1	; () banked
 18810  0116AC  6FC2               	movwf	Button_Init@pInput& (0+255),b
 18811  0116AE  0E01               	movlw	high (_HMIBoard+38)
 18812  0116B0  0101               	movlb	1	; () banked
 18813  0116B2  6FC3               	movwf	(Button_Init@pInput+1)& (0+255),b
 18814  0116B4  0E00               	movlw	0
 18815  0116B6  0101               	movlb	1	; () banked
 18816  0116B8  6FC5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18817  0116BA  0E02               	movlw	2
 18818  0116BC  6FC4               	movwf	Button_Init@pThreshold& (0+255),b
 18819  0116BE  0E4E               	movlw	low _HMI_InitButtons
 18820  0116C0  0101               	movlb	1	; () banked
 18821  0116C2  6FC6               	movwf	Button_Init@pInitIO& (0+255),b
 18822  0116C4  0E4C               	movlw	high _HMI_InitButtons
 18823  0116C6  0101               	movlb	1	; () banked
 18824  0116C8  6FC7               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 18825  0116CA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 18826  0116CC  0101               	movlb	1	; () banked
 18827  0116CE  6FC8               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 18828  0116D0  0EBE               	movlw	low _HMI_DownSwitch
 18829  0116D2  0101               	movlb	1	; () banked
 18830  0116D4  6FC9               	movwf	Button_Init@pGetState& (0+255),b
 18831  0116D6  0E4A               	movlw	high _HMI_DownSwitch
 18832  0116D8  0101               	movlb	1	; () banked
 18833  0116DA  6FCA               	movwf	(Button_Init@pGetState+1)& (0+255),b
 18834  0116DC  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 18835  0116DE  0101               	movlb	1	; () banked
 18836  0116E0  6FCB               	movwf	(Button_Init@pGetState+2)& (0+255),b
 18837  0116E2  0EC4               	movlw	low _Event_HMI_DownButton
 18838  0116E4  0101               	movlb	1	; () banked
 18839  0116E6  6FCC               	movwf	Button_Init@pFunction& (0+255),b
 18840  0116E8  0E46               	movlw	high _Event_HMI_DownButton
 18841  0116EA  0101               	movlb	1	; () banked
 18842  0116EC  6FCD               	movwf	(Button_Init@pFunction+1)& (0+255),b
 18843  0116EE  0E01               	movlw	low (_Event_HMI_DownButton shr (0+16))
 18844  0116F0  0101               	movlb	1	; () banked
 18845  0116F2  6FCE               	movwf	(Button_Init@pFunction+2)& (0+255),b
 18846  0116F4  EC34  F093         	call	_Button_Init	;wreg free
 18847                           
 18848                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 18849  0116F8  0EA0               	movlw	160
 18850  0116FA  0100               	movlb	0	; () banked
 18851  0116FC  6FE5               	movwf	SPI_Init@pClock& (0+255),b
 18852  0116FE  0E86               	movlw	134
 18853  011700  6FE6               	movwf	(SPI_Init@pClock+1)& (0+255),b
 18854  011702  0E01               	movlw	1
 18855  011704  6FE7               	movwf	(SPI_Init@pClock+2)& (0+255),b
 18856  011706  0E00               	movlw	0
 18857  011708  6FE8               	movwf	(SPI_Init@pClock+3)& (0+255),b
 18858  01170A  0E00               	movlw	0
 18859  01170C  0100               	movlb	0	; () banked
 18860  01170E  6FE9               	movwf	SPI_Init@pChannel& (0+255),b
 18861  011710  0E02               	movlw	2
 18862  011712  0100               	movlb	0	; () banked
 18863  011714  6FEA               	movwf	SPI_Init@pMode& (0+255),b
 18864  011716  EC00  F080         	call	_SPI_Init	;wreg free
 18865                           
 18866                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 18867  01171A  0E64               	movlw	low _SPI1
 18868  01171C  0100               	movlb	0	; () banked
 18869  01171E  6FC7               	movwf	SPI_MinSpeed@pInput& (0+255),b
 18870  011720  0E01               	movlw	high _SPI1
 18871  011722  0100               	movlb	0	; () banked
 18872  011724  6FC8               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 18873  011726  EC19  F09D         	call	_SPI_MinSpeed	;wreg free
 18874                           
 18875                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 18876  01172A  0E00               	movlw	0
 18877  01172C  0100               	movlb	0	; () banked
 18878  01172E  6FF4               	movwf	(HMI_Init@in+1)& (0+255),b
 18879  011730  0E00               	movlw	0
 18880  011732  6FF3               	movwf	HMI_Init@in& (0+255),b
 18881  011734                     l11961:
 18882                           
 18883                           ; BSR set to: 0
 18884  011734  0100               	movlb	0	; () banked
 18885  011736  51F4               	movf	(HMI_Init@in+1)& (0+255),w,b
 18886  011738  E113               	bnz	l1161
 18887  01173A  0E08               	movlw	8
 18888  01173C  0100               	movlb	0	; () banked
 18889  01173E  5DF3               	subwf	HMI_Init@in& (0+255),w,b
 18890  011740  B0D8               	btfsc	status,0,c
 18891  011742  0012               	return	
 18892                           
 18893                           ; BSR set to: 0
 18894                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 18895                           
 18896                           ; BSR set to: 0
 18897                           
 18898                           ; BSR set to: 0
 18899  011744  0E2A               	movlw	low _HMIBoard
 18900  011746  0100               	movlb	0	; () banked
 18901  011748  25F3               	addwf	HMI_Init@in& (0+255),w,b
 18902  01174A  6ED9               	movwf	fsr2l,c
 18903  01174C  0E01               	movlw	high _HMIBoard
 18904  01174E  0100               	movlb	0	; () banked
 18905  011750  21F4               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 18906  011752  6EDA               	movwf	fsr2h,c
 18907  011754  0E00               	movlw	0
 18908  011756  6EDF               	movwf	indf2,c
 18909                           
 18910                           ; BSR set to: 0
 18911  011758  0100               	movlb	0	; () banked
 18912  01175A  4BF3               	infsnz	HMI_Init@in& (0+255),f,b
 18913  01175C  2BF4               	incf	(HMI_Init@in+1)& (0+255),f,b
 18914  01175E  D7EA               	goto	l11961
 18915  011760                     l1161:
 18916                           
 18917                           ; BSR set to: 0
 18918  011760  0012               	return		;funcret
 18919  011762                     __end_of_HMI_Init:
 18920                           	opt stack 0
 18921                           tosu	equ	0xFFF
 18922                           tosh	equ	0xFFE
 18923                           tosl	equ	0xFFD
 18924                           pclath	equ	0xFFA
 18925                           tblptru	equ	0xFF8
 18926                           tblptrh	equ	0xFF7
 18927                           tblptrl	equ	0xFF6
 18928                           tablat	equ	0xFF5
 18929                           prodh	equ	0xFF4
 18930                           prodl	equ	0xFF3
 18931                           intcon	equ	0xFF2
 18932                           postinc0	equ	0xFEE
 18933                           plusw0	equ	0xFEB
 18934                           wreg	equ	0xFE8
 18935                           indf1	equ	0xFE7
 18936                           postdec1	equ	0xFE5
 18937                           fsr1h	equ	0xFE2
 18938                           fsr1l	equ	0xFE1
 18939                           indf2	equ	0xFDF
 18940                           postinc2	equ	0xFDE
 18941                           postdec2	equ	0xFDD
 18942                           plusw2	equ	0xFDB
 18943                           fsr2h	equ	0xFDA
 18944                           fsr2l	equ	0xFD9
 18945                           status	equ	0xFD8
 18946                           
 18947 ;; *************** function _SPI_MinSpeed *****************
 18948 ;; Defined at:
 18949 ;;		line 190 in file "Library/SPI.c"
 18950 ;; Parameters:    Size  Location     Type
 18951 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 18952 ;;		 -> SPI1(11), 
 18953 ;; Auto vars:     Size  Location     Type
 18954 ;;		None
 18955 ;; Return value:  Size  Location     Type
 18956 ;;                  1    wreg      void 
 18957 ;; Registers used:
 18958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18959 ;; Tracked objects:
 18960 ;;		On entry : 0/0
 18961 ;;		On exit  : 0/0
 18962 ;;		Unchanged: 0/0
 18963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18964 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18965 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18967 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18968 ;;Total ram usage:        2 bytes
 18969 ;; Hardware stack levels used:    1
 18970 ;; Hardware stack levels required when called:    9
 18971 ;; This function calls:
 18972 ;;		_Byte_SetBit
 18973 ;;		_Byte_SetQuad
 18974 ;; This function is called by:
 18975 ;;		_HMI_Init
 18976 ;; This function uses a non-reentrant model
 18977 ;;
 18978                           
 18979                           	psect	text107
 18980  013A32                     __ptext107:
 18981                           	opt stack 0
 18982  013A32                     _SPI_MinSpeed:
 18983                           	opt stack 19
 18984                           
 18985                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 18986                           
 18987                           ; BSR set to: 0
 18988                           ;incstack = 0
 18989  013A32  0100               	movlb	0	; () banked
 18990  013A34  EE20 F006          	lfsr	2,6
 18991  013A38  51C7               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 18992  013A3A  26D9               	addwf	fsr2l,f,c
 18993  013A3C  51C8               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 18994  013A3E  22DA               	addwfc	fsr2h,f,c
 18995  013A40  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 18996  013A44  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 18997  013A48  0E05               	movlw	5
 18998  013A4A  0100               	movlb	0	; () banked
 18999  013A4C  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19000  013A4E  0E00               	movlw	0
 19001  013A50  0100               	movlb	0	; () banked
 19002  013A52  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19003  013A54  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19004                           
 19005                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 19006  013A58  0100               	movlb	0	; () banked
 19007  013A5A  EE20 F006          	lfsr	2,6
 19008  013A5E  51C7               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19009  013A60  26D9               	addwf	fsr2l,f,c
 19010  013A62  51C8               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19011  013A64  22DA               	addwfc	fsr2h,f,c
 19012  013A66  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 19013  013A6A  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 19014  013A6E  0E00               	movlw	0
 19015  013A70  0100               	movlb	0	; () banked
 19016  013A72  6FC5               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19017  013A74  0E02               	movlw	2
 19018  013A76  0100               	movlb	0	; () banked
 19019  013A78  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 19020  013A7A  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 19021                           
 19022                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19023  013A7E  0100               	movlb	0	; () banked
 19024  013A80  EE20 F006          	lfsr	2,6
 19025  013A84  51C7               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 19026  013A86  26D9               	addwf	fsr2l,f,c
 19027  013A88  51C8               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 19028  013A8A  22DA               	addwfc	fsr2h,f,c
 19029  013A8C  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19030  013A90  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19031  013A94  0E05               	movlw	5
 19032  013A96  0100               	movlb	0	; () banked
 19033  013A98  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19034  013A9A  0E01               	movlw	1
 19035  013A9C  0100               	movlb	0	; () banked
 19036  013A9E  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19037  013AA0  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19038  013AA4  0012               	return		;funcret
 19039  013AA6                     __end_of_SPI_MinSpeed:
 19040                           	opt stack 0
 19041                           tosu	equ	0xFFF
 19042                           tosh	equ	0xFFE
 19043                           tosl	equ	0xFFD
 19044                           pclath	equ	0xFFA
 19045                           tblptru	equ	0xFF8
 19046                           tblptrh	equ	0xFF7
 19047                           tblptrl	equ	0xFF6
 19048                           tablat	equ	0xFF5
 19049                           prodh	equ	0xFF4
 19050                           prodl	equ	0xFF3
 19051                           intcon	equ	0xFF2
 19052                           postinc0	equ	0xFEE
 19053                           plusw0	equ	0xFEB
 19054                           wreg	equ	0xFE8
 19055                           indf1	equ	0xFE7
 19056                           postdec1	equ	0xFE5
 19057                           fsr1h	equ	0xFE2
 19058                           fsr1l	equ	0xFE1
 19059                           indf2	equ	0xFDF
 19060                           postinc2	equ	0xFDE
 19061                           postdec2	equ	0xFDD
 19062                           plusw2	equ	0xFDB
 19063                           fsr2h	equ	0xFDA
 19064                           fsr2l	equ	0xFD9
 19065                           status	equ	0xFD8
 19066                           
 19067 ;; *************** function _SPI_Init *****************
 19068 ;; Defined at:
 19069 ;;		line 12 in file "Library/SPI.c"
 19070 ;; Parameters:    Size  Location     Type
 19071 ;;  pClock          4   45[BANK0 ] unsigned long 
 19072 ;;  pChannel        1   49[BANK0 ] enum E6744
 19073 ;;  pMode           1   50[BANK0 ] enum E6748
 19074 ;; Auto vars:     Size  Location     Type
 19075 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 19076 ;;		 -> SPI1(11), SPI2(11), 
 19077 ;; Return value:  Size  Location     Type
 19078 ;;                  1    wreg      void 
 19079 ;; Registers used:
 19080 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19081 ;; Tracked objects:
 19082 ;;		On entry : 0/0
 19083 ;;		On exit  : 0/0
 19084 ;;		Unchanged: 0/0
 19085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19086 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19087 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19089 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19090 ;;Total ram usage:        8 bytes
 19091 ;; Hardware stack levels used:    1
 19092 ;; Hardware stack levels required when called:   12
 19093 ;; This function calls:
 19094 ;;		_Byte_SetBit
 19095 ;;		_Byte_SetQuad
 19096 ;;		_Port_SetPinType
 19097 ;;		_SPI_DCS
 19098 ;;		_SPI_DisableISR
 19099 ;;		_Timer2_Init
 19100 ;; This function is called by:
 19101 ;;		_Configure_GPIOs
 19102 ;;		_HMI_Init
 19103 ;; This function uses a non-reentrant model
 19104 ;;
 19105                           
 19106                           	psect	text108
 19107  010000                     __ptext108:
 19108                           	opt stack 0
 19109  010000                     _SPI_Init:
 19110                           	opt stack 15
 19111                           
 19112                           ;SPI.c: 14: SPIPtr pInput;
 19113                           ;SPI.c: 16: switch (pChannel)
 19114                           
 19115                           ;incstack = 0
 19116  010000  D00C               	goto	l597
 19117  010002                     
 19118                           ;SPI.c: 19: pInput = &SPI1;
 19119  010002  0E64               	movlw	low _SPI1
 19120  010004  0100               	movlb	0	; () banked
 19121  010006  6FEB               	movwf	SPI_Init@pInput& (0+255),b
 19122  010008  0E01               	movlw	high _SPI1
 19123  01000A  D004               	goto	L7
 19124  01000C                     
 19125                           ; BSR set to: 0
 19126                           ;SPI.c: 22: pInput = &SPI2;
 19127                           
 19128                           ; BSR set to: 0
 19129  01000C  0E6F               	movlw	low _SPI2
 19130  01000E  0100               	movlb	0	; () banked
 19131  010010  6FEB               	movwf	SPI_Init@pInput& (0+255),b
 19132  010012  0E01               	movlw	high _SPI2
 19133  010014                     L7:
 19134  010014  0100               	movlb	0	; () banked
 19135  010016  6FEC               	movwf	(SPI_Init@pInput+1)& (0+255),b
 19136                           
 19137                           ; BSR set to: 0
 19138                           ;SPI.c: 24: };
 19139                           
 19140                           ;SPI.c: 23: break;
 19141  010018  D008               	goto	l599
 19142  01001A                     l597:
 19143                           
 19144                           ; BSR set to: 0
 19145  01001A  0100               	movlb	0	; () banked
 19146  01001C  51E9               	movf	SPI_Init@pChannel& (0+255),w,b
 19147                           
 19148                           ; Switch size 1, requested type "space"
 19149                           ; Number of cases is 2, Range of values is 0 to 1
 19150                           ; switch strategies available:
 19151                           ; Name         Instructions Cycles
 19152                           ; simple_byte            7     4 (average)
 19153                           ;	Chosen strategy is simple_byte
 19154  01001E  0A00               	xorlw	0	; case 0
 19155  010020  B4D8               	btfsc	status,2,c
 19156  010022  D7EF               	goto	l598
 19157  010024  0A01               	xorlw	1	; case 1
 19158  010026  B4D8               	btfsc	status,2,c
 19159  010028  D7F1               	goto	l600
 19160  01002A                     l599:
 19161                           
 19162                           ; BSR set to: 0
 19163                           ;SPI.c: 26: pInput->mChannel = pChannel;
 19164                           
 19165                           ; BSR set to: 0
 19166  01002A  0100               	movlb	0	; () banked
 19167  01002C  EE20 F002          	lfsr	2,2
 19168  010030  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19169  010032  26D9               	addwf	fsr2l,f,c
 19170  010034  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19171  010036  22DA               	addwfc	fsr2h,f,c
 19172  010038  C0E9  FFDF         	movff	SPI_Init@pChannel,indf2
 19173                           
 19174                           ;SPI.c: 35: switch (pChannel)
 19175  01003C  D0B1               	goto	l601
 19176  01003E                     
 19177                           ; BSR set to: 0
 19178                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 19179                           
 19180                           ; BSR set to: 0
 19181  01003E  0E91               	movlw	low _PortC
 19182  010040  0100               	movlb	0	; () banked
 19183  010042  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19184  010044  0E00               	movlw	high _PortC
 19185  010046  0100               	movlb	0	; () banked
 19186  010048  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19187  01004A  0E02               	movlw	2
 19188  01004C  0100               	movlb	0	; () banked
 19189  01004E  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19190  010050  0E03               	movlw	3
 19191  010052  0100               	movlb	0	; () banked
 19192  010054  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19193  010056  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19194                           
 19195                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 19196  01005A  0E91               	movlw	low _PortC
 19197  01005C  0100               	movlb	0	; () banked
 19198  01005E  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19199  010060  0E00               	movlw	high _PortC
 19200  010062  0100               	movlb	0	; () banked
 19201  010064  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19202  010066  0E03               	movlw	3
 19203  010068  0100               	movlb	0	; () banked
 19204  01006A  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19205  01006C  0E03               	movlw	3
 19206  01006E  0100               	movlb	0	; () banked
 19207  010070  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19208  010072  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19209                           
 19210                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 19211  010076  0E91               	movlw	low _PortC
 19212  010078  0100               	movlb	0	; () banked
 19213  01007A  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19214  01007C  0E00               	movlw	high _PortC
 19215  01007E  0100               	movlb	0	; () banked
 19216  010080  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19217  010082  0E05               	movlw	5
 19218  010084  0100               	movlb	0	; () banked
 19219  010086  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19220  010088  0E03               	movlw	3
 19221  01008A  0100               	movlb	0	; () banked
 19222  01008C  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19223  01008E  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19224                           
 19225                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 19226  010092  0E91               	movlw	low _PortC
 19227  010094  0100               	movlb	0	; () banked
 19228  010096  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19229  010098  0E00               	movlw	high _PortC
 19230  01009A  0100               	movlb	0	; () banked
 19231  01009C  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19232  01009E  0E04               	movlw	4
 19233  0100A0  0100               	movlb	0	; () banked
 19234  0100A2  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19235  0100A4  0E00               	movlw	0
 19236  0100A6  0100               	movlb	0	; () banked
 19237  0100A8  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19238  0100AA  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19239                           
 19240                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 19241  0100AE  0100               	movlb	0	; () banked
 19242  0100B0  EE20 F003          	lfsr	2,3
 19243  0100B4  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19244  0100B6  26D9               	addwf	fsr2l,f,c
 19245  0100B8  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19246  0100BA  22DA               	addwfc	fsr2h,f,c
 19247  0100BC  0EC7               	movlw	199
 19248  0100BE  6EDE               	movwf	postinc2,c
 19249  0100C0  0E0F               	movlw	15
 19250  0100C2  6EDD               	movwf	postdec2,c
 19251                           
 19252                           ; BSR set to: 0
 19253                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 19254  0100C4  0100               	movlb	0	; () banked
 19255  0100C6  EE20 F006          	lfsr	2,6
 19256  0100CA  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19257  0100CC  26D9               	addwf	fsr2l,f,c
 19258  0100CE  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19259  0100D0  22DA               	addwfc	fsr2h,f,c
 19260  0100D2  0EC6               	movlw	198
 19261  0100D4  6EDE               	movwf	postinc2,c
 19262  0100D6  0E0F               	movlw	15
 19263  0100D8  6EDD               	movwf	postdec2,c
 19264                           
 19265                           ; BSR set to: 0
 19266                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 19267  0100DA  0100               	movlb	0	; () banked
 19268  0100DC  EE20 F009          	lfsr	2,9
 19269  0100E0  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19270  0100E2  26D9               	addwf	fsr2l,f,c
 19271  0100E4  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19272  0100E6  22DA               	addwfc	fsr2h,f,c
 19273  0100E8  0EC9               	movlw	201
 19274  0100EA  D056               	goto	L8
 19275  0100EC                     
 19276                           ; BSR set to: 0
 19277                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 19278                           
 19279                           ; BSR set to: 0
 19280  0100EC  0E87               	movlw	low _PortD
 19281  0100EE  0100               	movlb	0	; () banked
 19282  0100F0  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19283  0100F2  0E00               	movlw	high _PortD
 19284  0100F4  0100               	movlb	0	; () banked
 19285  0100F6  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19286  0100F8  0E07               	movlw	7
 19287  0100FA  0100               	movlb	0	; () banked
 19288  0100FC  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19289  0100FE  0E03               	movlw	3
 19290  010100  0100               	movlb	0	; () banked
 19291  010102  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19292  010104  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19293                           
 19294                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 19295  010108  0E87               	movlw	low _PortD
 19296  01010A  0100               	movlb	0	; () banked
 19297  01010C  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19298  01010E  0E00               	movlw	high _PortD
 19299  010110  0100               	movlb	0	; () banked
 19300  010112  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19301  010114  0E06               	movlw	6
 19302  010116  0100               	movlb	0	; () banked
 19303  010118  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19304  01011A  0E03               	movlw	3
 19305  01011C  0100               	movlb	0	; () banked
 19306  01011E  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19307  010120  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19308                           
 19309                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 19310  010124  0E87               	movlw	low _PortD
 19311  010126  0100               	movlb	0	; () banked
 19312  010128  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19313  01012A  0E00               	movlw	high _PortD
 19314  01012C  0100               	movlb	0	; () banked
 19315  01012E  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19316  010130  0E04               	movlw	4
 19317  010132  0100               	movlb	0	; () banked
 19318  010134  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19319  010136  0E03               	movlw	3
 19320  010138  0100               	movlb	0	; () banked
 19321  01013A  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19322  01013C  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19323                           
 19324                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 19325  010140  0E87               	movlw	low _PortD
 19326  010142  0100               	movlb	0	; () banked
 19327  010144  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 19328  010146  0E00               	movlw	high _PortD
 19329  010148  0100               	movlb	0	; () banked
 19330  01014A  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19331  01014C  0E05               	movlw	5
 19332  01014E  0100               	movlb	0	; () banked
 19333  010150  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 19334  010152  0E00               	movlw	0
 19335  010154  0100               	movlb	0	; () banked
 19336  010156  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 19337  010158  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 19338                           
 19339                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 19340  01015C  0100               	movlb	0	; () banked
 19341  01015E  EE20 F003          	lfsr	2,3
 19342  010162  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19343  010164  26D9               	addwf	fsr2l,f,c
 19344  010166  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19345  010168  22DA               	addwfc	fsr2h,f,c
 19346  01016A  0E6D               	movlw	109
 19347  01016C  6EDE               	movwf	postinc2,c
 19348  01016E  0E0F               	movlw	15
 19349  010170  6EDD               	movwf	postdec2,c
 19350                           
 19351                           ; BSR set to: 0
 19352                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 19353  010172  0100               	movlb	0	; () banked
 19354  010174  EE20 F006          	lfsr	2,6
 19355  010178  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19356  01017A  26D9               	addwf	fsr2l,f,c
 19357  01017C  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19358  01017E  22DA               	addwfc	fsr2h,f,c
 19359  010180  0E6C               	movlw	108
 19360  010182  6EDE               	movwf	postinc2,c
 19361  010184  0E0F               	movlw	15
 19362  010186  6EDD               	movwf	postdec2,c
 19363                           
 19364                           ; BSR set to: 0
 19365                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 19366  010188  0100               	movlb	0	; () banked
 19367  01018A  EE20 F009          	lfsr	2,9
 19368  01018E  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19369  010190  26D9               	addwf	fsr2l,f,c
 19370  010192  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19371  010194  22DA               	addwfc	fsr2h,f,c
 19372  010196  0E6F               	movlw	111
 19373  010198                     L8:
 19374  010198  6EDE               	movwf	postinc2,c
 19375  01019A  0E0F               	movlw	15
 19376  01019C  6EDD               	movwf	postdec2,c
 19377                           
 19378                           ;SPI.c: 68: break;
 19379  01019E  D009               	goto	l603
 19380  0101A0                     l601:
 19381                           
 19382                           ; BSR set to: 0
 19383                           
 19384                           ; BSR set to: 0
 19385  0101A0  0100               	movlb	0	; () banked
 19386  0101A2  51E9               	movf	SPI_Init@pChannel& (0+255),w,b
 19387                           
 19388                           ; Switch size 1, requested type "space"
 19389                           ; Number of cases is 2, Range of values is 0 to 1
 19390                           ; switch strategies available:
 19391                           ; Name         Instructions Cycles
 19392                           ; simple_byte            7     4 (average)
 19393                           ;	Chosen strategy is simple_byte
 19394  0101A4  0A00               	xorlw	0	; case 0
 19395  0101A6  B4D8               	btfsc	status,2,c
 19396  0101A8  D74A               	goto	l602
 19397  0101AA  0A01               	xorlw	1	; case 1
 19398  0101AC  A4D8               	btfss	status,2,c
 19399  0101AE  0012               	return	
 19400  0101B0  D79D               	goto	l604
 19401  0101B2                     l603:
 19402                           
 19403                           ; BSR set to: 0
 19404                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19405                           
 19406                           ; BSR set to: 0
 19407  0101B2  0100               	movlb	0	; () banked
 19408  0101B4  EE20 F006          	lfsr	2,6
 19409  0101B8  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19410  0101BA  26D9               	addwf	fsr2l,f,c
 19411  0101BC  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19412  0101BE  22DA               	addwfc	fsr2h,f,c
 19413  0101C0  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19414  0101C4  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19415  0101C8  0E05               	movlw	5
 19416  0101CA  0100               	movlb	0	; () banked
 19417  0101CC  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19418  0101CE  0E00               	movlw	0
 19419  0101D0  0100               	movlb	0	; () banked
 19420  0101D2  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19421  0101D4  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19422                           
 19423                           ;SPI.c: 77: switch(pMode)
 19424  0101D8  D09C               	goto	l607
 19425  0101DA                     
 19426                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19427  0101DA  0100               	movlb	0	; () banked
 19428  0101DC  EE20 F006          	lfsr	2,6
 19429  0101E0  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19430  0101E2  26D9               	addwf	fsr2l,f,c
 19431  0101E4  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19432  0101E6  22DA               	addwfc	fsr2h,f,c
 19433  0101E8  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19434  0101EC  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19435  0101F0  0E04               	movlw	4
 19436  0101F2  0100               	movlb	0	; () banked
 19437  0101F4  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19438  0101F6  0E00               	movlw	0
 19439  0101F8  0100               	movlb	0	; () banked
 19440  0101FA  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19441  0101FC  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19442                           
 19443                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19444  010200  0100               	movlb	0	; () banked
 19445  010202  EE20 F003          	lfsr	2,3
 19446  010206  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19447  010208  26D9               	addwf	fsr2l,f,c
 19448  01020A  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19449  01020C  22DA               	addwfc	fsr2h,f,c
 19450  01020E  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19451  010212  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19452  010216  0E06               	movlw	6
 19453  010218  0100               	movlb	0	; () banked
 19454  01021A  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19455  01021C  0E00               	movlw	0
 19456  01021E  0100               	movlb	0	; () banked
 19457  010220  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19458  010222  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19459                           
 19460                           ;SPI.c: 82: break;
 19461  010226  D084               	goto	l609
 19462  010228                     
 19463                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 19464  010228  0100               	movlb	0	; () banked
 19465  01022A  EE20 F006          	lfsr	2,6
 19466  01022E  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19467  010230  26D9               	addwf	fsr2l,f,c
 19468  010232  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19469  010234  22DA               	addwfc	fsr2h,f,c
 19470  010236  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19471  01023A  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19472  01023E  0E04               	movlw	4
 19473  010240  0100               	movlb	0	; () banked
 19474  010242  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19475  010244  0E00               	movlw	0
 19476  010246  0100               	movlb	0	; () banked
 19477  010248  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19478  01024A  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19479                           
 19480                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19481  01024E  0100               	movlb	0	; () banked
 19482  010250  EE20 F003          	lfsr	2,3
 19483  010254  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19484  010256  26D9               	addwf	fsr2l,f,c
 19485  010258  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19486  01025A  22DA               	addwfc	fsr2h,f,c
 19487  01025C  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19488  010260  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19489  010264  0E06               	movlw	6
 19490  010266  0100               	movlb	0	; () banked
 19491  010268  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19492  01026A  0E01               	movlw	1
 19493  01026C  0100               	movlb	0	; () banked
 19494  01026E  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19495  010270  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19496                           
 19497                           ;SPI.c: 86: break;
 19498  010274  D05D               	goto	l609
 19499  010276                     
 19500                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19501  010276  0100               	movlb	0	; () banked
 19502  010278  EE20 F006          	lfsr	2,6
 19503  01027C  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19504  01027E  26D9               	addwf	fsr2l,f,c
 19505  010280  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19506  010282  22DA               	addwfc	fsr2h,f,c
 19507  010284  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19508  010288  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19509  01028C  0E04               	movlw	4
 19510  01028E  0100               	movlb	0	; () banked
 19511  010290  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19512  010292  0E01               	movlw	1
 19513  010294  0100               	movlb	0	; () banked
 19514  010296  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19515  010298  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19516                           
 19517                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 19518  01029C  0100               	movlb	0	; () banked
 19519  01029E  EE20 F003          	lfsr	2,3
 19520  0102A2  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19521  0102A4  26D9               	addwf	fsr2l,f,c
 19522  0102A6  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19523  0102A8  22DA               	addwfc	fsr2h,f,c
 19524  0102AA  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19525  0102AE  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19526  0102B2  0E06               	movlw	6
 19527  0102B4  0100               	movlb	0	; () banked
 19528  0102B6  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19529  0102B8  0E00               	movlw	0
 19530  0102BA  0100               	movlb	0	; () banked
 19531  0102BC  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19532  0102BE  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19533                           
 19534                           ;SPI.c: 90: break;
 19535  0102C2  D036               	goto	l609
 19536  0102C4                     
 19537                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 19538  0102C4  0100               	movlb	0	; () banked
 19539  0102C6  EE20 F006          	lfsr	2,6
 19540  0102CA  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19541  0102CC  26D9               	addwf	fsr2l,f,c
 19542  0102CE  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19543  0102D0  22DA               	addwfc	fsr2h,f,c
 19544  0102D2  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19545  0102D6  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19546  0102DA  0E04               	movlw	4
 19547  0102DC  0100               	movlb	0	; () banked
 19548  0102DE  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19549  0102E0  0E01               	movlw	1
 19550  0102E2  0100               	movlb	0	; () banked
 19551  0102E4  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19552  0102E6  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19553                           
 19554                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 19555  0102EA  0100               	movlb	0	; () banked
 19556  0102EC  EE20 F003          	lfsr	2,3
 19557  0102F0  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19558  0102F2  26D9               	addwf	fsr2l,f,c
 19559  0102F4  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19560  0102F6  22DA               	addwfc	fsr2h,f,c
 19561  0102F8  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19562  0102FC  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19563  010300  0E06               	movlw	6
 19564  010302  0100               	movlb	0	; () banked
 19565  010304  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19566  010306  0E01               	movlw	1
 19567  010308  0100               	movlb	0	; () banked
 19568  01030A  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19569  01030C  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19570                           
 19571                           ;SPI.c: 94: break;
 19572  010310  D00F               	goto	l609
 19573  010312                     l607:
 19574  010312  0100               	movlb	0	; () banked
 19575  010314  51EA               	movf	SPI_Init@pMode& (0+255),w,b
 19576                           
 19577                           ; Switch size 1, requested type "space"
 19578                           ; Number of cases is 4, Range of values is 0 to 3
 19579                           ; switch strategies available:
 19580                           ; Name         Instructions Cycles
 19581                           ; simple_byte           13     7 (average)
 19582                           ;	Chosen strategy is simple_byte
 19583  010316  0A00               	xorlw	0	; case 0
 19584  010318  B4D8               	btfsc	status,2,c
 19585  01031A  D75F               	goto	l608
 19586  01031C  0A01               	xorlw	1	; case 1
 19587  01031E  B4D8               	btfsc	status,2,c
 19588  010320  D783               	goto	l610
 19589  010322  0A03               	xorlw	3	; case 2
 19590  010324  B4D8               	btfsc	status,2,c
 19591  010326  D7A7               	goto	l611
 19592  010328  0A01               	xorlw	1	; case 3
 19593  01032A  A4D8               	btfss	status,2,c
 19594  01032C  0012               	return	
 19595  01032E  D7CA               	goto	l612
 19596  010330                     l609:
 19597                           
 19598                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 19599                           
 19600                           ; BSR set to: 0
 19601  010330  0100               	movlb	0	; () banked
 19602  010332  EE20 F006          	lfsr	2,6
 19603  010336  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19604  010338  26D9               	addwf	fsr2l,f,c
 19605  01033A  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19606  01033C  22DA               	addwfc	fsr2h,f,c
 19607  01033E  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19608  010342  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19609  010346  0E07               	movlw	7
 19610  010348  0100               	movlb	0	; () banked
 19611  01034A  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19612  01034C  0E00               	movlw	0
 19613  01034E  0100               	movlb	0	; () banked
 19614  010350  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19615  010352  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19616                           
 19617                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 19618  010356  0100               	movlb	0	; () banked
 19619  010358  EE20 F006          	lfsr	2,6
 19620  01035C  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19621  01035E  26D9               	addwf	fsr2l,f,c
 19622  010360  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19623  010362  22DA               	addwfc	fsr2h,f,c
 19624  010364  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19625  010368  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19626  01036C  0E06               	movlw	6
 19627  01036E  0100               	movlb	0	; () banked
 19628  010370  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19629  010372  0E00               	movlw	0
 19630  010374  0100               	movlb	0	; () banked
 19631  010376  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19632  010378  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19633                           
 19634                           ;SPI.c: 106: Timer2_Init(pClock);
 19635  01037C  C0E5  F0C5         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 19636  010380  C0E6  F0C6         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 19637  010384  C0E7  F0C7         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 19638  010388  C0E8  F0C8         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 19639  01038C  EC05  F091         	call	_Timer2_Init	;wreg free
 19640                           
 19641                           ;SPI.c: 112: SPI_DisableISR(pInput);
 19642  010390  C0EB  F0B8         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 19643  010394  C0EC  F0B9         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 19644  010398  EC46  F0A4         	call	_SPI_DisableISR	;wreg free
 19645                           
 19646                           ;SPI.c: 116: switch (pChannel)
 19647  01039C  D004               	goto	l614
 19648  01039E                     l615:
 19649                           
 19650                           ; BSR set to: 0
 19651  01039E  869F               	bsf	3999,3,c	;volatile
 19652  0103A0  D00B               	goto	l616
 19653  0103A2                     l617:
 19654                           
 19655                           ; BSR set to: 0
 19656  0103A2  8EA5               	bsf	4005,7,c	;volatile
 19657  0103A4  D009               	goto	l616
 19658  0103A6                     l614:
 19659                           
 19660                           ; BSR set to: 0
 19661  0103A6  0100               	movlb	0	; () banked
 19662  0103A8  51E9               	movf	SPI_Init@pChannel& (0+255),w,b
 19663                           
 19664                           ; Switch size 1, requested type "space"
 19665                           ; Number of cases is 2, Range of values is 0 to 1
 19666                           ; switch strategies available:
 19667                           ; Name         Instructions Cycles
 19668                           ; simple_byte            7     4 (average)
 19669                           ;	Chosen strategy is simple_byte
 19670  0103AA  0A00               	xorlw	0	; case 0
 19671  0103AC  B4D8               	btfsc	status,2,c
 19672  0103AE  D7F7               	goto	l615
 19673  0103B0  0A01               	xorlw	1	; case 1
 19674  0103B2  A4D8               	btfss	status,2,c
 19675  0103B4  0012               	return	
 19676  0103B6  D7F5               	goto	l617
 19677  0103B8                     l616:
 19678                           
 19679                           ; BSR set to: 0
 19680                           ;SPI.c: 124: SPI_DCS(pInput);
 19681                           
 19682                           ; BSR set to: 0
 19683  0103B8  C0EB  F0B8         	movff	SPI_Init@pInput,SPI_DCS@pInput
 19684  0103BC  C0EC  F0B9         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 19685  0103C0  ECAB  F0A3         	call	_SPI_DCS	;wreg free
 19686                           
 19687                           ;SPI.c: 126: pInput->mBusy = 0;
 19688  0103C4  C0EB  FFD9         	movff	SPI_Init@pInput,fsr2l
 19689  0103C8  C0EC  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 19690  0103CC  0E00               	movlw	0
 19691  0103CE  6EDF               	movwf	indf2,c
 19692                           
 19693                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 19694  0103D0  0100               	movlb	0	; () banked
 19695  0103D2  EE20 F006          	lfsr	2,6
 19696  0103D6  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19697  0103D8  26D9               	addwf	fsr2l,f,c
 19698  0103DA  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19699  0103DC  22DA               	addwfc	fsr2h,f,c
 19700  0103DE  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 19701  0103E2  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 19702  0103E6  0E00               	movlw	0
 19703  0103E8  0100               	movlb	0	; () banked
 19704  0103EA  6FC5               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19705  0103EC  0E03               	movlw	3
 19706  0103EE  0100               	movlb	0	; () banked
 19707  0103F0  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 19708  0103F2  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 19709                           
 19710                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19711  0103F6  0100               	movlb	0	; () banked
 19712  0103F8  EE20 F006          	lfsr	2,6
 19713  0103FC  51EB               	movf	SPI_Init@pInput& (0+255),w,b
 19714  0103FE  26D9               	addwf	fsr2l,f,c
 19715  010400  51EC               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 19716  010402  22DA               	addwfc	fsr2h,f,c
 19717  010404  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 19718  010408  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 19719  01040C  0E05               	movlw	5
 19720  01040E  0100               	movlb	0	; () banked
 19721  010410  6FBA               	movwf	Byte_SetBit@pBit& (0+255),b
 19722  010412  0E01               	movlw	1
 19723  010414  0100               	movlb	0	; () banked
 19724  010416  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 19725  010418  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 19726  01041C  0012               	return		;funcret
 19727  01041E                     __end_of_SPI_Init:
 19728                           	opt stack 0
 19729                           tosu	equ	0xFFF
 19730                           tosh	equ	0xFFE
 19731                           tosl	equ	0xFFD
 19732                           pclath	equ	0xFFA
 19733                           tblptru	equ	0xFF8
 19734                           tblptrh	equ	0xFF7
 19735                           tblptrl	equ	0xFF6
 19736                           tablat	equ	0xFF5
 19737                           prodh	equ	0xFF4
 19738                           prodl	equ	0xFF3
 19739                           intcon	equ	0xFF2
 19740                           postinc0	equ	0xFEE
 19741                           plusw0	equ	0xFEB
 19742                           wreg	equ	0xFE8
 19743                           indf1	equ	0xFE7
 19744                           postdec1	equ	0xFE5
 19745                           fsr1h	equ	0xFE2
 19746                           fsr1l	equ	0xFE1
 19747                           indf2	equ	0xFDF
 19748                           postinc2	equ	0xFDE
 19749                           postdec2	equ	0xFDD
 19750                           plusw2	equ	0xFDB
 19751                           fsr2h	equ	0xFDA
 19752                           fsr2l	equ	0xFD9
 19753                           status	equ	0xFD8
 19754                           
 19755 ;; *************** function _Timer2_Init *****************
 19756 ;; Defined at:
 19757 ;;		line 10 in file "Library/Timer2.c"
 19758 ;; Parameters:    Size  Location     Type
 19759 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 19762 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 19763 ;;  RDIV            4   18[BANK0 ] unsigned long 
 19764 ;; Return value:  Size  Location     Type
 19765 ;;                  1    wreg      void 
 19766 ;; Registers used:
 19767 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19768 ;; Tracked objects:
 19769 ;;		On entry : 0/0
 19770 ;;		On exit  : 0/0
 19771 ;;		Unchanged: 0/0
 19772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19773 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19774 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19775 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19776 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19777 ;;Total ram usage:       17 bytes
 19778 ;; Hardware stack levels used:    1
 19779 ;; Hardware stack levels required when called:    8
 19780 ;; This function calls:
 19781 ;;		_Timer2_Clear
 19782 ;;		___lldiv
 19783 ;; This function is called by:
 19784 ;;		_SPI_Init
 19785 ;; This function uses a non-reentrant model
 19786 ;;
 19787                           
 19788                           	psect	text109
 19789  01220A                     __ptext109:
 19790                           	opt stack 0
 19791  01220A                     _Timer2_Init:
 19792                           	opt stack 18
 19793                           
 19794                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 19795                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 19796                           ;Timer2.c: 14: static UINT8 PRE = 0;
 19797                           ;Timer2.c: 15: static UINT32 DIV = 0;
 19798                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 19799                           
 19800                           ;incstack = 0
 19801  01220A  0E00               	movlw	0
 19802  01220C  0100               	movlb	0	; () banked
 19803  01220E  6FCE               	movwf	Timer2_Init@pCPUClock& (0+255),b
 19804  012210  0E6C               	movlw	108
 19805  012212  6FCF               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 19806  012214  0EDC               	movlw	220
 19807  012216  6FD0               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 19808  012218  0E02               	movlw	2
 19809  01221A  6FD1               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 19810                           
 19811                           ; BSR set to: 0
 19812                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 19813                           ;Timer2.c: 20: pFrequency *= 2;
 19814  01221C  0100               	movlb	0	; () banked
 19815  01221E  90D8               	bcf	status,0,c
 19816  012220  37C5               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 19817  012222  37C6               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 19818  012224  37C7               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 19819  012226  37C8               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 19820                           
 19821                           ; BSR set to: 0
 19822                           ;Timer2.c: 23: pCPUClock /= 4;
 19823  012228  0E02               	movlw	2
 19824  01222A  0100               	movlb	0	; () banked
 19825  01222C  6FC9               	movwf	??_Timer2_Init& (0+255),b
 19826  01222E                     u7605:
 19827  01222E  90D8               	bcf	status,0,c
 19828  012230  0100               	movlb	0	; () banked
 19829  012232  33D1               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 19830  012234  33D0               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 19831  012236  33CF               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 19832  012238  33CE               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 19833  01223A  0100               	movlb	0	; () banked
 19834  01223C  2FC9               	decfsz	??_Timer2_Init& (0+255),f,b
 19835  01223E  D7F7               	goto	u7605
 19836                           
 19837                           ; BSR set to: 0
 19838                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 19839  012240  C0CE  F0B8         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 19840  012244  C0CF  F0B9         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 19841  012248  C0D0  F0BA         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 19842  01224C  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 19843  012250  C0C5  F0BC         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 19844  012254  C0C6  F0BD         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 19845  012258  C0C7  F0BE         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 19846  01225C  C0C8  F0BF         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 19847  012260  ECEE  F095         	call	___lldiv	;wreg free
 19848  012264  C0B8  F0D2         	movff	?___lldiv,Timer2_Init@DIVIDE
 19849  012268  C0B9  F0D3         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 19850  01226C  C0BA  F0D4         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 19851  012270  C0BB  F0D5         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 19852                           
 19853                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 19854  012274  D010               	goto	l1836
 19855  012276                     l11099:
 19856                           
 19857                           ;Timer2.c: 28: {
 19858                           ;Timer2.c: 29: RDIV = 0;
 19859  012276  0E00               	movlw	0
 19860  012278  0100               	movlb	0	; () banked
 19861  01227A  6FCA               	movwf	Timer2_Init@RDIV& (0+255),b
 19862  01227C  0E00               	movlw	0
 19863  01227E  6FCB               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 19864  012280  0E00               	movlw	0
 19865  012282  6FCC               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 19866  012284  0E00               	movlw	0
 19867  012286  6FCD               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 19868                           
 19869                           ; BSR set to: 0
 19870                           ;Timer2.c: 30: INDEX ++;
 19871  012288  0100               	movlb	0	; () banked
 19872  01228A  2B77               	incf	Timer2_Init@INDEX& (0+255),f,b
 19873                           
 19874                           ; BSR set to: 0
 19875                           ;Timer2.c: 31: if (INDEX >= 3)
 19876  01228C  0E02               	movlw	2
 19877  01228E  0100               	movlb	0	; () banked
 19878  012290  6577               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 19879  012292  D001               	goto	l1836
 19880  012294  D026               	goto	u7620
 19881  012296                     l1836:
 19882                           
 19883                           ; BSR set to: 0
 19884                           
 19885                           ; BSR set to: 0
 19886  012296  C0D2  F0B8         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 19887  01229A  C0D3  F0B9         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 19888  01229E  C0D4  F0BA         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 19889  0122A2  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 19890  0122A6  0100               	movlb	0	; () banked
 19891  0122A8  5177               	movf	Timer2_Init@INDEX& (0+255),w,b
 19892  0122AA  0D01               	mullw	1
 19893  0122AC  0E76               	movlw	low Timer2_Init@PRESCALE
 19894  0122AE  24F3               	addwf	prodl,w,c
 19895  0122B0  6EF6               	movwf	tblptrl,c
 19896  0122B2  0EFD               	movlw	high Timer2_Init@PRESCALE
 19897  0122B4  20F4               	addwfc	prodh,w,c
 19898  0122B6  6EF7               	movwf	tblptrh,c
 19899  0122B8                     	if	1	;There are 3 active tblptr bytes
 19900  0122B8  6AF8               	clrf	tblptru,c
 19901  0122BA  0E00               	movlw	low (__mediumconst shr (0+16))
 19902  0122BC  22F8               	addwfc	tblptru,f,c
 19903  0122BE                     	endif
 19904  0122BE  0008               	tblrd		*
 19905  0122C0  50F5               	movf	tablat,w,c
 19906  0122C2  0100               	movlb	0	; () banked
 19907  0122C4  6FBC               	movwf	___lldiv@divisor& (0+255),b
 19908  0122C6  6BBD               	clrf	(___lldiv@divisor+1)& (0+255),b
 19909  0122C8  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 19910  0122CA  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 19911  0122CC  ECEE  F095         	call	___lldiv	;wreg free
 19912  0122D0  0100               	movlb	0	; () banked
 19913  0122D2  51BB               	movf	(?___lldiv+3)& (0+255),w,b
 19914  0122D4  0100               	movlb	0	; () banked
 19915  0122D6  11BA               	iorwf	(?___lldiv+2)& (0+255),w,b
 19916  0122D8  E1CE               	bnz	l11099
 19917  0122DA  0100               	movlb	0	; () banked
 19918  0122DC  05B9               	decf	(?___lldiv+1)& (0+255),w,b
 19919  0122DE  B0D8               	btfsc	status,0,c
 19920  0122E0  D7CA               	goto	l1835
 19921  0122E2                     u7620:
 19922                           
 19923                           ; BSR set to: 0
 19924                           ;Timer2.c: 33: }
 19925                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 19926                           
 19927                           ; BSR set to: 0
 19928  0122E2  50CA               	movf	4042,w,c	;volatile
 19929  0122E4  0100               	movlb	0	; () banked
 19930  0122E6  1977               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19931  0122E8  0BFC               	andlw	-4
 19932  0122EA  1977               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 19933  0122EC  6ECA               	movwf	4042,c	;volatile
 19934                           
 19935                           ; BSR set to: 0
 19936                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 19937  0122EE  84CA               	bsf	4042,2,c	;volatile
 19938                           
 19939                           ; BSR set to: 0
 19940                           ;Timer2.c: 44: Timer2_Clear();
 19941  0122F0  EC17  F0A6         	call	_Timer2_Clear	;wreg free
 19942                           
 19943                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 19944  0122F4  0100               	movlb	0	; () banked
 19945  0122F6  5177               	movf	Timer2_Init@INDEX& (0+255),w,b
 19946  0122F8  0D01               	mullw	1
 19947  0122FA  0E76               	movlw	low Timer2_Init@PRESCALE
 19948  0122FC  24F3               	addwf	prodl,w,c
 19949  0122FE  6EF6               	movwf	tblptrl,c
 19950  012300  0EFD               	movlw	high Timer2_Init@PRESCALE
 19951  012302  20F4               	addwfc	prodh,w,c
 19952  012304  6EF7               	movwf	tblptrh,c
 19953  012306                     	if	1	;There are 3 active tblptr bytes
 19954  012306  6AF8               	clrf	tblptru,c
 19955  012308  0E00               	movlw	low (__mediumconst shr (0+16))
 19956  01230A  22F8               	addwfc	tblptru,f,c
 19957  01230C                     	endif
 19958  01230C  0008               	tblrd		*
 19959  01230E  CFF5 F076          	movff	tablat,Timer2_Init@PRE
 19960                           
 19961                           ; BSR set to: 0
 19962                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 19963  012312  0EFF               	movlw	255
 19964  012314  0100               	movlb	0	; () banked
 19965  012316  25D2               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 19966  012318  0100               	movlb	0	; () banked
 19967  01231A  6F60               	movwf	Timer2_Init@DIV& (0+255),b
 19968  01231C  0EFF               	movlw	255
 19969  01231E  0100               	movlb	0	; () banked
 19970  012320  21D3               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 19971  012322  0100               	movlb	0	; () banked
 19972  012324  6F61               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 19973  012326  0EFF               	movlw	255
 19974  012328  0100               	movlb	0	; () banked
 19975  01232A  21D4               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 19976  01232C  0100               	movlb	0	; () banked
 19977  01232E  6F62               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 19978  012330  0EFF               	movlw	255
 19979  012332  0100               	movlb	0	; () banked
 19980  012334  21D5               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 19981  012336  0100               	movlb	0	; () banked
 19982  012338  6F63               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 19983                           
 19984                           ; BSR set to: 0
 19985                           ;Timer2.c: 48: INDEX = DIV/PRE;
 19986  01233A  C060  F0B8         	movff	Timer2_Init@DIV,___lldiv@dividend
 19987  01233E  C061  F0B9         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 19988  012342  C062  F0BA         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 19989  012346  C063  F0BB         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 19990  01234A  0100               	movlb	0	; () banked
 19991  01234C  5176               	movf	Timer2_Init@PRE& (0+255),w,b
 19992  01234E  0100               	movlb	0	; () banked
 19993  012350  6FBC               	movwf	___lldiv@divisor& (0+255),b
 19994  012352  6BBD               	clrf	(___lldiv@divisor+1)& (0+255),b
 19995  012354  6BBE               	clrf	(___lldiv@divisor+2)& (0+255),b
 19996  012356  6BBF               	clrf	(___lldiv@divisor+3)& (0+255),b
 19997  012358  ECEE  F095         	call	___lldiv	;wreg free
 19998  01235C  0100               	movlb	0	; () banked
 19999  01235E  51B8               	movf	?___lldiv& (0+255),w,b
 20000  012360  0100               	movlb	0	; () banked
 20001  012362  6F77               	movwf	Timer2_Init@INDEX& (0+255),b
 20002                           
 20003                           ; BSR set to: 0
 20004                           ;Timer2.c: 49: PR2 = INDEX;
 20005  012364  C077  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 20006                           
 20007                           ; BSR set to: 0
 20008  012368  0012               	return		;funcret
 20009  01236A                     __end_of_Timer2_Init:
 20010                           	opt stack 0
 20011                           tosu	equ	0xFFF
 20012                           tosh	equ	0xFFE
 20013                           tosl	equ	0xFFD
 20014                           pclath	equ	0xFFA
 20015                           tblptru	equ	0xFF8
 20016                           tblptrh	equ	0xFF7
 20017                           tblptrl	equ	0xFF6
 20018                           tablat	equ	0xFF5
 20019                           prodh	equ	0xFF4
 20020                           prodl	equ	0xFF3
 20021                           intcon	equ	0xFF2
 20022                           postinc0	equ	0xFEE
 20023                           plusw0	equ	0xFEB
 20024                           wreg	equ	0xFE8
 20025                           indf1	equ	0xFE7
 20026                           postdec1	equ	0xFE5
 20027                           fsr1h	equ	0xFE2
 20028                           fsr1l	equ	0xFE1
 20029                           indf2	equ	0xFDF
 20030                           postinc2	equ	0xFDE
 20031                           postdec2	equ	0xFDD
 20032                           plusw2	equ	0xFDB
 20033                           fsr2h	equ	0xFDA
 20034                           fsr2l	equ	0xFD9
 20035                           status	equ	0xFD8
 20036                           
 20037 ;; *************** function ___lldiv *****************
 20038 ;; Defined at:
 20039 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 20040 ;; Parameters:    Size  Location     Type
 20041 ;;  dividend        4    0[BANK0 ] unsigned long 
 20042 ;;  divisor         4    4[BANK0 ] unsigned long 
 20043 ;; Auto vars:     Size  Location     Type
 20044 ;;  quotient        4    8[BANK0 ] unsigned long 
 20045 ;;  counter         1   12[BANK0 ] unsigned char 
 20046 ;; Return value:  Size  Location     Type
 20047 ;;                  4    0[BANK0 ] unsigned long 
 20048 ;; Registers used:
 20049 ;;		wreg, status,2, status,0
 20050 ;; Tracked objects:
 20051 ;;		On entry : 0/0
 20052 ;;		On exit  : 0/0
 20053 ;;		Unchanged: 0/0
 20054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20055 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20056 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20058 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20059 ;;Total ram usage:       13 bytes
 20060 ;; Hardware stack levels used:    1
 20061 ;; Hardware stack levels required when called:    7
 20062 ;; This function calls:
 20063 ;;		Nothing
 20064 ;; This function is called by:
 20065 ;;		_Timer0_Init
 20066 ;;		_Timer2_Init
 20067 ;;		_printf
 20068 ;;		_rand_between
 20069 ;;		_I2C_Init
 20070 ;; This function uses a non-reentrant model
 20071 ;;
 20072                           
 20073                           	psect	text110
 20074  012BDC                     __ptext110:
 20075                           	opt stack 0
 20076  012BDC                     ___lldiv:
 20077                           	opt stack 20
 20078                           
 20079                           ; BSR set to: 0
 20080                           ;incstack = 0
 20081  012BDC  0E00               	movlw	0
 20082  012BDE  0100               	movlb	0	; () banked
 20083  012BE0  6FC0               	movwf	___lldiv@quotient& (0+255),b
 20084  012BE2  0E00               	movlw	0
 20085  012BE4  6FC1               	movwf	(___lldiv@quotient+1)& (0+255),b
 20086  012BE6  0E00               	movlw	0
 20087  012BE8  6FC2               	movwf	(___lldiv@quotient+2)& (0+255),b
 20088  012BEA  0E00               	movlw	0
 20089  012BEC  6FC3               	movwf	(___lldiv@quotient+3)& (0+255),b
 20090                           
 20091                           ; BSR set to: 0
 20092  012BEE  0100               	movlb	0	; () banked
 20093  012BF0  51BC               	movf	___lldiv@divisor& (0+255),w,b
 20094  012BF2  0100               	movlb	0	; () banked
 20095  012BF4  11BD               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 20096  012BF6  0100               	movlb	0	; () banked
 20097  012BF8  11BE               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 20098  012BFA  0100               	movlb	0	; () banked
 20099  012BFC  11BF               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 20100  012BFE  B4D8               	btfsc	status,2,c
 20101  012C00  D042               	goto	l2475
 20102                           
 20103                           ; BSR set to: 0
 20104  012C02  0E01               	movlw	1
 20105  012C04  0100               	movlb	0	; () banked
 20106  012C06  6FC4               	movwf	___lldiv@counter& (0+255),b
 20107  012C08  D008               	goto	l2470
 20108  012C0A                     
 20109                           ; BSR set to: 0
 20110                           
 20111                           ; BSR set to: 0
 20112  012C0A  0100               	movlb	0	; () banked
 20113  012C0C  90D8               	bcf	status,0,c
 20114  012C0E  37BC               	rlcf	___lldiv@divisor& (0+255),f,b
 20115  012C10  37BD               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 20116  012C12  37BE               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 20117  012C14  37BF               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 20118  012C16  0100               	movlb	0	; () banked
 20119  012C18  2BC4               	incf	___lldiv@counter& (0+255),f,b
 20120  012C1A                     l2470:
 20121                           
 20122                           ; BSR set to: 0
 20123                           
 20124                           ; BSR set to: 0
 20125  012C1A  0100               	movlb	0	; () banked
 20126  012C1C  AFBF               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 20127  012C1E  D7F5               	goto	l2471
 20128  012C20                     u7400:
 20129                           
 20130                           ; BSR set to: 0
 20131                           
 20132                           ; BSR set to: 0
 20133                           
 20134                           ; BSR set to: 0
 20135  012C20  0100               	movlb	0	; () banked
 20136  012C22  90D8               	bcf	status,0,c
 20137  012C24  37C0               	rlcf	___lldiv@quotient& (0+255),f,b
 20138  012C26  37C1               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 20139  012C28  37C2               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 20140  012C2A  37C3               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 20141                           
 20142                           ; BSR set to: 0
 20143  012C2C  0100               	movlb	0	; () banked
 20144  012C2E  51BC               	movf	___lldiv@divisor& (0+255),w,b
 20145  012C30  0100               	movlb	0	; () banked
 20146  012C32  5DB8               	subwf	___lldiv@dividend& (0+255),w,b
 20147  012C34  0100               	movlb	0	; () banked
 20148  012C36  51BD               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20149  012C38  0100               	movlb	0	; () banked
 20150  012C3A  59B9               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 20151  012C3C  0100               	movlb	0	; () banked
 20152  012C3E  51BE               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20153  012C40  0100               	movlb	0	; () banked
 20154  012C42  59BA               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 20155  012C44  0100               	movlb	0	; () banked
 20156  012C46  51BF               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20157  012C48  0100               	movlb	0	; () banked
 20158  012C4A  59BB               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 20159  012C4C  A0D8               	btfss	status,0,c
 20160  012C4E  D012               	goto	l2474
 20161                           
 20162                           ; BSR set to: 0
 20163  012C50  0100               	movlb	0	; () banked
 20164  012C52  51BC               	movf	___lldiv@divisor& (0+255),w,b
 20165  012C54  0100               	movlb	0	; () banked
 20166  012C56  5FB8               	subwf	___lldiv@dividend& (0+255),f,b
 20167  012C58  0100               	movlb	0	; () banked
 20168  012C5A  51BD               	movf	(___lldiv@divisor+1)& (0+255),w,b
 20169  012C5C  0100               	movlb	0	; () banked
 20170  012C5E  5BB9               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 20171  012C60  0100               	movlb	0	; () banked
 20172  012C62  51BE               	movf	(___lldiv@divisor+2)& (0+255),w,b
 20173  012C64  0100               	movlb	0	; () banked
 20174  012C66  5BBA               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 20175  012C68  0100               	movlb	0	; () banked
 20176  012C6A  51BF               	movf	(___lldiv@divisor+3)& (0+255),w,b
 20177  012C6C  0100               	movlb	0	; () banked
 20178  012C6E  5BBB               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 20179                           
 20180                           ; BSR set to: 0
 20181  012C70  0100               	movlb	0	; () banked
 20182  012C72  81C0               	bsf	___lldiv@quotient& (0+255),0,b
 20183  012C74                     l2474:
 20184                           
 20185                           ; BSR set to: 0
 20186                           
 20187                           ; BSR set to: 0
 20188  012C74  0100               	movlb	0	; () banked
 20189  012C76  90D8               	bcf	status,0,c
 20190  012C78  33BF               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 20191  012C7A  33BE               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 20192  012C7C  33BD               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 20193  012C7E  33BC               	rrcf	___lldiv@divisor& (0+255),f,b
 20194                           
 20195                           ; BSR set to: 0
 20196  012C80  0100               	movlb	0	; () banked
 20197  012C82  2FC4               	decfsz	___lldiv@counter& (0+255),f,b
 20198  012C84  D7CD               	goto	u7400
 20199  012C86                     l2475:
 20200                           
 20201                           ; BSR set to: 0
 20202                           
 20203                           ; BSR set to: 0
 20204  012C86  C0C0  F0B8         	movff	___lldiv@quotient,?___lldiv
 20205  012C8A  C0C1  F0B9         	movff	___lldiv@quotient+1,?___lldiv+1
 20206  012C8E  C0C2  F0BA         	movff	___lldiv@quotient+2,?___lldiv+2
 20207  012C92  C0C3  F0BB         	movff	___lldiv@quotient+3,?___lldiv+3
 20208                           
 20209                           ; BSR set to: 0
 20210  012C96  0012               	return		;funcret
 20211  012C98                     __end_of___lldiv:
 20212                           	opt stack 0
 20213                           tosu	equ	0xFFF
 20214                           tosh	equ	0xFFE
 20215                           tosl	equ	0xFFD
 20216                           pclath	equ	0xFFA
 20217                           tblptru	equ	0xFF8
 20218                           tblptrh	equ	0xFF7
 20219                           tblptrl	equ	0xFF6
 20220                           tablat	equ	0xFF5
 20221                           prodh	equ	0xFF4
 20222                           prodl	equ	0xFF3
 20223                           intcon	equ	0xFF2
 20224                           postinc0	equ	0xFEE
 20225                           plusw0	equ	0xFEB
 20226                           wreg	equ	0xFE8
 20227                           indf1	equ	0xFE7
 20228                           postdec1	equ	0xFE5
 20229                           fsr1h	equ	0xFE2
 20230                           fsr1l	equ	0xFE1
 20231                           indf2	equ	0xFDF
 20232                           postinc2	equ	0xFDE
 20233                           postdec2	equ	0xFDD
 20234                           plusw2	equ	0xFDB
 20235                           fsr2h	equ	0xFDA
 20236                           fsr2l	equ	0xFD9
 20237                           status	equ	0xFD8
 20238                           
 20239 ;; *************** function _Timer2_Clear *****************
 20240 ;; Defined at:
 20241 ;;		line 3 in file "Library/Timer2.c"
 20242 ;; Parameters:    Size  Location     Type
 20243 ;;		None
 20244 ;; Auto vars:     Size  Location     Type
 20245 ;;		None
 20246 ;; Return value:  Size  Location     Type
 20247 ;;                  1    wreg      void 
 20248 ;; Registers used:
 20249 ;;		None
 20250 ;; Tracked objects:
 20251 ;;		On entry : 0/0
 20252 ;;		On exit  : 0/0
 20253 ;;		Unchanged: 0/0
 20254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20258 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20259 ;;Total ram usage:        0 bytes
 20260 ;; Hardware stack levels used:    1
 20261 ;; Hardware stack levels required when called:    7
 20262 ;; This function calls:
 20263 ;;		Nothing
 20264 ;; This function is called by:
 20265 ;;		_Timer2_Init
 20266 ;; This function uses a non-reentrant model
 20267 ;;
 20268                           
 20269                           	psect	text111
 20270  014C2E                     __ptext111:
 20271                           	opt stack 0
 20272  014C2E                     _Timer2_Clear:
 20273                           	opt stack 18
 20274                           
 20275                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 20276                           
 20277                           ; BSR set to: 0
 20278                           ;incstack = 0
 20279  014C2E  929E               	bcf	3998,1,c	;volatile
 20280                           
 20281                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 20282  014C30  929D               	bcf	3997,1,c	;volatile
 20283                           
 20284                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 20285  014C32  929F               	bcf	3999,1,c	;volatile
 20286  014C34  0012               	return		;funcret
 20287  014C36                     __end_of_Timer2_Clear:
 20288                           	opt stack 0
 20289                           tosu	equ	0xFFF
 20290                           tosh	equ	0xFFE
 20291                           tosl	equ	0xFFD
 20292                           pclath	equ	0xFFA
 20293                           tblptru	equ	0xFF8
 20294                           tblptrh	equ	0xFF7
 20295                           tblptrl	equ	0xFF6
 20296                           tablat	equ	0xFF5
 20297                           prodh	equ	0xFF4
 20298                           prodl	equ	0xFF3
 20299                           intcon	equ	0xFF2
 20300                           postinc0	equ	0xFEE
 20301                           plusw0	equ	0xFEB
 20302                           wreg	equ	0xFE8
 20303                           indf1	equ	0xFE7
 20304                           postdec1	equ	0xFE5
 20305                           fsr1h	equ	0xFE2
 20306                           fsr1l	equ	0xFE1
 20307                           indf2	equ	0xFDF
 20308                           postinc2	equ	0xFDE
 20309                           postdec2	equ	0xFDD
 20310                           plusw2	equ	0xFDB
 20311                           fsr2h	equ	0xFDA
 20312                           fsr2l	equ	0xFD9
 20313                           status	equ	0xFD8
 20314                           
 20315 ;; *************** function _SPI_DisableISR *****************
 20316 ;; Defined at:
 20317 ;;		line 181 in file "Library/SPI.c"
 20318 ;; Parameters:    Size  Location     Type
 20319 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20320 ;;		 -> SPI1(11), SPI2(11), 
 20321 ;; Auto vars:     Size  Location     Type
 20322 ;;		None
 20323 ;; Return value:  Size  Location     Type
 20324 ;;                  1    wreg      void 
 20325 ;; Registers used:
 20326 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20327 ;; Tracked objects:
 20328 ;;		On entry : 0/0
 20329 ;;		On exit  : 0/0
 20330 ;;		Unchanged: 0/0
 20331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20332 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;Total ram usage:        2 bytes
 20337 ;; Hardware stack levels used:    1
 20338 ;; Hardware stack levels required when called:    7
 20339 ;; This function calls:
 20340 ;;		Nothing
 20341 ;; This function is called by:
 20342 ;;		_SPI_Init
 20343 ;; This function uses a non-reentrant model
 20344 ;;
 20345                           
 20346                           	psect	text112
 20347  01488C                     __ptext112:
 20348                           	opt stack 0
 20349  01488C                     _SPI_DisableISR:
 20350                           	opt stack 19
 20351                           
 20352                           ;SPI.c: 183: switch (pInput->mChannel)
 20353                           
 20354                           ;incstack = 0
 20355  01488C  D004               	goto	l654
 20356  01488E                     l655:
 20357                           
 20358                           ; BSR set to: 0
 20359  01488E  969D               	bcf	3997,3,c	;volatile
 20360  014890  0012               	return	
 20361  014892                     l657:
 20362                           
 20363                           ; BSR set to: 0
 20364  014892  9EA3               	bcf	4003,7,c	;volatile
 20365                           
 20366                           ; BSR set to: 0
 20367                           ;SPI.c: 188: };
 20368                           
 20369                           ; BSR set to: 0
 20370                           
 20371                           ;SPI.c: 187: default: return;
 20372  014894  0012               	return	
 20373  014896                     l654:
 20374                           
 20375                           ; BSR set to: 0
 20376  014896  0100               	movlb	0	; () banked
 20377  014898  EE20 F002          	lfsr	2,2
 20378  01489C  51B8               	movf	SPI_DisableISR@pInput& (0+255),w,b
 20379  01489E  26D9               	addwf	fsr2l,f,c
 20380  0148A0  51B9               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 20381  0148A2  22DA               	addwfc	fsr2h,f,c
 20382  0148A4  50DF               	movf	indf2,w,c
 20383                           
 20384                           ; Switch size 1, requested type "space"
 20385                           ; Number of cases is 2, Range of values is 0 to 1
 20386                           ; switch strategies available:
 20387                           ; Name         Instructions Cycles
 20388                           ; simple_byte            7     4 (average)
 20389                           ;	Chosen strategy is simple_byte
 20390  0148A6  0A00               	xorlw	0	; case 0
 20391  0148A8  B4D8               	btfsc	status,2,c
 20392  0148AA  D7F1               	goto	l655
 20393  0148AC  0A01               	xorlw	1	; case 1
 20394  0148AE  A4D8               	btfss	status,2,c
 20395  0148B0  0012               	return	
 20396  0148B2  D7EF               	goto	l657
 20397  0148B4                     __end_of_SPI_DisableISR:
 20398                           	opt stack 0
 20399                           tosu	equ	0xFFF
 20400                           tosh	equ	0xFFE
 20401                           tosl	equ	0xFFD
 20402                           pclath	equ	0xFFA
 20403                           tblptru	equ	0xFF8
 20404                           tblptrh	equ	0xFF7
 20405                           tblptrl	equ	0xFF6
 20406                           tablat	equ	0xFF5
 20407                           prodh	equ	0xFF4
 20408                           prodl	equ	0xFF3
 20409                           intcon	equ	0xFF2
 20410                           postinc0	equ	0xFEE
 20411                           plusw0	equ	0xFEB
 20412                           wreg	equ	0xFE8
 20413                           indf1	equ	0xFE7
 20414                           postdec1	equ	0xFE5
 20415                           fsr1h	equ	0xFE2
 20416                           fsr1l	equ	0xFE1
 20417                           indf2	equ	0xFDF
 20418                           postinc2	equ	0xFDE
 20419                           postdec2	equ	0xFDD
 20420                           plusw2	equ	0xFDB
 20421                           fsr2h	equ	0xFDA
 20422                           fsr2l	equ	0xFD9
 20423                           status	equ	0xFD8
 20424                           
 20425 ;; *************** function _SPI_DCS *****************
 20426 ;; Defined at:
 20427 ;;		line 219 in file "Library/SPI.c"
 20428 ;; Parameters:    Size  Location     Type
 20429 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20430 ;;		 -> SPI1(11), SPI2(11), 
 20431 ;; Auto vars:     Size  Location     Type
 20432 ;;		None
 20433 ;; Return value:  Size  Location     Type
 20434 ;;                  1    wreg      void 
 20435 ;; Registers used:
 20436 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20437 ;; Tracked objects:
 20438 ;;		On entry : 0/0
 20439 ;;		On exit  : 0/0
 20440 ;;		Unchanged: 0/0
 20441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20442 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20445 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20446 ;;Total ram usage:        2 bytes
 20447 ;; Hardware stack levels used:    1
 20448 ;; Hardware stack levels required when called:    7
 20449 ;; This function calls:
 20450 ;;		Nothing
 20451 ;; This function is called by:
 20452 ;;		_SPI_Init
 20453 ;; This function uses a non-reentrant model
 20454 ;;
 20455                           
 20456                           	psect	text113
 20457  014756                     __ptext113:
 20458                           	opt stack 0
 20459  014756                     _SPI_DCS:
 20460                           	opt stack 19
 20461                           
 20462                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 20463                           
 20464                           ; BSR set to: 0
 20465                           ;incstack = 0
 20466  014756  0100               	movlb	0	; () banked
 20467  014758  EE20 F002          	lfsr	2,2
 20468  01475C  51B8               	movf	SPI_DCS@pInput& (0+255),w,b
 20469  01475E  26D9               	addwf	fsr2l,f,c
 20470  014760  51B9               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 20471  014762  22DA               	addwfc	fsr2h,f,c
 20472  014764  50DF               	movf	indf2,w,c
 20473  014766  A4D8               	btfss	status,2,c
 20474  014768  D007               	goto	l673
 20475                           
 20476                           ; BSR set to: 0
 20477                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 20478  01476A  C095  FFD9         	movff	_PortC+4,fsr2l
 20479  01476E  C096  FFDA         	movff	_PortC+5,fsr2h
 20480  014772  0100               	movlb	0	; () banked
 20481  014774  84DF               	bsf	indf2,2,c
 20482  014776  0012               	return	
 20483  014778                     l673:
 20484                           
 20485                           ; BSR set to: 0
 20486                           ;SPI.c: 223: else
 20487                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 20488                           
 20489                           ; BSR set to: 0
 20490  014778  C08B  FFD9         	movff	_PortD+4,fsr2l
 20491  01477C  C08C  FFDA         	movff	_PortD+5,fsr2h
 20492  014780  0100               	movlb	0	; () banked
 20493  014782  8EDF               	bsf	indf2,7,c
 20494  014784  0012               	return	
 20495  014786                     __end_of_SPI_DCS:
 20496                           	opt stack 0
 20497                           tosu	equ	0xFFF
 20498                           tosh	equ	0xFFE
 20499                           tosl	equ	0xFFD
 20500                           pclath	equ	0xFFA
 20501                           tblptru	equ	0xFF8
 20502                           tblptrh	equ	0xFF7
 20503                           tblptrl	equ	0xFF6
 20504                           tablat	equ	0xFF5
 20505                           prodh	equ	0xFF4
 20506                           prodl	equ	0xFF3
 20507                           intcon	equ	0xFF2
 20508                           postinc0	equ	0xFEE
 20509                           plusw0	equ	0xFEB
 20510                           wreg	equ	0xFE8
 20511                           indf1	equ	0xFE7
 20512                           postdec1	equ	0xFE5
 20513                           fsr1h	equ	0xFE2
 20514                           fsr1l	equ	0xFE1
 20515                           indf2	equ	0xFDF
 20516                           postinc2	equ	0xFDE
 20517                           postdec2	equ	0xFDD
 20518                           plusw2	equ	0xFDB
 20519                           fsr2h	equ	0xFDA
 20520                           fsr2l	equ	0xFD9
 20521                           status	equ	0xFD8
 20522                           
 20523 ;; *************** function _Button_Init *****************
 20524 ;; Defined at:
 20525 ;;		line 18 in file "Library/Button.c"
 20526 ;; Parameters:    Size  Location     Type
 20527 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 20528 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 20529 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 20530 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 20531 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 20532 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 20533 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 20534 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 20535 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 20536 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_HMI_DownButton(1), Event_HMI_UpButton(1), 
 20537 ;;		 -> Event_HMI_RightButton(1), Event_HMI_LeftButton(1), Event_HMI_DIPSwitch(1), 
 20538 ;; Auto vars:     Size  Location     Type
 20539 ;;		None
 20540 ;; Return value:  Size  Location     Type
 20541 ;;                  1    wreg      void 
 20542 ;; Registers used:
 20543 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20544 ;; Tracked objects:
 20545 ;;		On entry : 0/0
 20546 ;;		On exit  : 0/0
 20547 ;;		Unchanged: 0/0
 20548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20549 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20552 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20553 ;;Total ram usage:       13 bytes
 20554 ;; Hardware stack levels used:    1
 20555 ;; Hardware stack levels required when called:   15
 20556 ;; This function calls:
 20557 ;;		_HMI_InitButtons
 20558 ;;		_MXK_InitDIPSwitch
 20559 ;;		_MXK_InitTestButton
 20560 ;; This function is called by:
 20561 ;;		_HMI_Init
 20562 ;;		_FunctInitButton
 20563 ;; This function uses a non-reentrant model
 20564 ;;
 20565                           
 20566                           	psect	text114
 20567  012668                     __ptext114:
 20568                           	opt stack 0
 20569  012668                     _Button_Init:
 20570                           	opt stack 13
 20571                           
 20572                           ;Button.c: 21: if(pInput==(void*)0)
 20573                           
 20574                           ; BSR set to: 0
 20575                           ;incstack = 0
 20576  012668  0101               	movlb	1	; () banked
 20577  01266A  51C2               	movf	Button_Init@pInput& (0+255),w,b
 20578  01266C  0101               	movlb	1	; () banked
 20579  01266E  11C3               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 20580  012670  B4D8               	btfsc	status,2,c
 20581  012672  0012               	return	
 20582                           
 20583                           ; BSR set to: 1
 20584                           ;Button.c: 23: if(pInitIO==(void*)0)
 20585                           
 20586                           ; BSR set to: 1
 20587                           
 20588                           ; BSR set to: 1
 20589                           ;Button.c: 22: return;
 20590  012674  0101               	movlb	1	; () banked
 20591  012676  51C6               	movf	Button_Init@pInitIO& (0+255),w,b
 20592  012678  0101               	movlb	1	; () banked
 20593  01267A  11C7               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 20594  01267C  0101               	movlb	1	; () banked
 20595  01267E  11C8               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 20596  012680  B4D8               	btfsc	status,2,c
 20597  012682  0012               	return	
 20598                           
 20599                           ; BSR set to: 1
 20600                           ;Button.c: 25: if(pGetState==(void*)0)
 20601                           
 20602                           ; BSR set to: 1
 20603                           
 20604                           ; BSR set to: 1
 20605                           ;Button.c: 24: return;
 20606  012684  0101               	movlb	1	; () banked
 20607  012686  51C9               	movf	Button_Init@pGetState& (0+255),w,b
 20608  012688  0101               	movlb	1	; () banked
 20609  01268A  11CA               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 20610  01268C  0101               	movlb	1	; () banked
 20611  01268E  11CB               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 20612  012690  B4D8               	btfsc	status,2,c
 20613  012692  0012               	return	
 20614                           
 20615                           ; BSR set to: 1
 20616                           ;Button.c: 27: if(pFunction==(void*)0)
 20617                           
 20618                           ; BSR set to: 1
 20619                           
 20620                           ; BSR set to: 1
 20621                           ;Button.c: 26: return;
 20622  012694  0101               	movlb	1	; () banked
 20623  012696  51CC               	movf	Button_Init@pFunction& (0+255),w,b
 20624  012698  0101               	movlb	1	; () banked
 20625  01269A  11CD               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 20626  01269C  0101               	movlb	1	; () banked
 20627  01269E  11CE               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 20628  0126A0  B4D8               	btfsc	status,2,c
 20629  0126A2  0012               	return	
 20630                           
 20631                           ; BSR set to: 1
 20632                           ;Button.c: 30: if(pThreshold == 0)
 20633                           
 20634                           ; BSR set to: 1
 20635                           
 20636                           ; BSR set to: 1
 20637                           ;Button.c: 28: return;
 20638  0126A4  0101               	movlb	1	; () banked
 20639  0126A6  51C4               	movf	Button_Init@pThreshold& (0+255),w,b
 20640  0126A8  0101               	movlb	1	; () banked
 20641  0126AA  11C5               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 20642  0126AC  A4D8               	btfss	status,2,c
 20643  0126AE  D005               	goto	l8
 20644                           
 20645                           ; BSR set to: 1
 20646                           ;Button.c: 31: pThreshold = 1;
 20647  0126B0  0E00               	movlw	0
 20648  0126B2  0101               	movlb	1	; () banked
 20649  0126B4  6FC5               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20650  0126B6  0E01               	movlw	1
 20651  0126B8  6FC4               	movwf	Button_Init@pThreshold& (0+255),b
 20652  0126BA                     l8:
 20653                           
 20654                           ; BSR set to: 1
 20655                           ;Button.c: 34: pInput->mState = 0;
 20656                           
 20657                           ; BSR set to: 1
 20658  0126BA  C1C2  FFD9         	movff	Button_Init@pInput,fsr2l
 20659  0126BE  C1C3  FFDA         	movff	Button_Init@pInput+1,fsr2h
 20660  0126C2  0E00               	movlw	0
 20661  0126C4  6EDF               	movwf	indf2,c
 20662                           
 20663                           ; BSR set to: 1
 20664                           ;Button.c: 35: pInput->mCount = 0;
 20665  0126C6  0101               	movlb	1	; () banked
 20666  0126C8  EE20 F001          	lfsr	2,1
 20667  0126CC  51C2               	movf	Button_Init@pInput& (0+255),w,b
 20668  0126CE  26D9               	addwf	fsr2l,f,c
 20669  0126D0  51C3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20670  0126D2  22DA               	addwfc	fsr2h,f,c
 20671  0126D4  0E00               	movlw	0
 20672  0126D6  6EDF               	movwf	indf2,c
 20673                           
 20674                           ; BSR set to: 1
 20675                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 20676  0126D8  0101               	movlb	1	; () banked
 20677  0126DA  EE20 F002          	lfsr	2,2
 20678  0126DE  51C2               	movf	Button_Init@pInput& (0+255),w,b
 20679  0126E0  26D9               	addwf	fsr2l,f,c
 20680  0126E2  51C3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20681  0126E4  22DA               	addwfc	fsr2h,f,c
 20682  0126E6  C1C4  FFDE         	movff	Button_Init@pThreshold,postinc2
 20683  0126EA  C1C5  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 20684                           
 20685                           ; BSR set to: 1
 20686                           ;Button.c: 37: pInput->mFunction = pFunction;
 20687  0126EE  0101               	movlb	1	; () banked
 20688  0126F0  EE20 F004          	lfsr	2,4
 20689  0126F4  51C2               	movf	Button_Init@pInput& (0+255),w,b
 20690  0126F6  26D9               	addwf	fsr2l,f,c
 20691  0126F8  51C3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20692  0126FA  22DA               	addwfc	fsr2h,f,c
 20693  0126FC  C1CC  FFDE         	movff	Button_Init@pFunction,postinc2
 20694  012700  C1CD  FFDE         	movff	Button_Init@pFunction+1,postinc2
 20695  012704  C1CE  FFDE         	movff	Button_Init@pFunction+2,postinc2
 20696                           
 20697                           ; BSR set to: 1
 20698                           ;Button.c: 38: pInput->mGetState = pGetState;
 20699  012708  0101               	movlb	1	; () banked
 20700  01270A  EE20 F007          	lfsr	2,7
 20701  01270E  51C2               	movf	Button_Init@pInput& (0+255),w,b
 20702  012710  26D9               	addwf	fsr2l,f,c
 20703  012712  51C3               	movf	(Button_Init@pInput+1)& (0+255),w,b
 20704  012714  22DA               	addwfc	fsr2h,f,c
 20705  012716  C1C9  FFDE         	movff	Button_Init@pGetState,postinc2
 20706  01271A  C1CA  FFDE         	movff	Button_Init@pGetState+1,postinc2
 20707  01271E  C1CB  FFDE         	movff	Button_Init@pGetState+2,postinc2
 20708                           
 20709                           ; BSR set to: 1
 20710                           ;Button.c: 41: pInitIO();
 20711  012722  D801               	call	u8188
 20712  012724  0012               	return	
 20713  012726                     u8188:
 20714  012726  0005               	push	
 20715  012728  6EFA               	movwf	pclath,c
 20716  01272A  0101               	movlb	1	; () banked
 20717  01272C  51C6               	movf	Button_Init@pInitIO& (0+255),w,b
 20718  01272E  6EFD               	movwf	tosl,c
 20719  012730  51C7               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 20720  012732  6EFE               	movwf	tosh,c
 20721  012734  51C8               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 20722  012736  6EFF               	movwf	tosu,c
 20723  012738  50FA               	movf	pclath,w,c
 20724  01273A  0012               	return		;indir
 20725  01273C                     __end_of_Button_Init:
 20726                           	opt stack 0
 20727                           tosu	equ	0xFFF
 20728                           tosh	equ	0xFFE
 20729                           tosl	equ	0xFFD
 20730                           pclath	equ	0xFFA
 20731                           tblptru	equ	0xFF8
 20732                           tblptrh	equ	0xFF7
 20733                           tblptrl	equ	0xFF6
 20734                           tablat	equ	0xFF5
 20735                           prodh	equ	0xFF4
 20736                           prodl	equ	0xFF3
 20737                           intcon	equ	0xFF2
 20738                           postinc0	equ	0xFEE
 20739                           plusw0	equ	0xFEB
 20740                           wreg	equ	0xFE8
 20741                           indf1	equ	0xFE7
 20742                           postdec1	equ	0xFE5
 20743                           fsr1h	equ	0xFE2
 20744                           fsr1l	equ	0xFE1
 20745                           indf2	equ	0xFDF
 20746                           postinc2	equ	0xFDE
 20747                           postdec2	equ	0xFDD
 20748                           plusw2	equ	0xFDB
 20749                           fsr2h	equ	0xFDA
 20750                           fsr2l	equ	0xFD9
 20751                           status	equ	0xFD8
 20752                           
 20753 ;; *************** function _MXK_InitDIPSwitch *****************
 20754 ;; Defined at:
 20755 ;;		line 20 in file "Library/MXK.c"
 20756 ;; Parameters:    Size  Location     Type
 20757 ;;		None
 20758 ;; Auto vars:     Size  Location     Type
 20759 ;;		None
 20760 ;; Return value:  Size  Location     Type
 20761 ;;                  1    wreg      void 
 20762 ;; Registers used:
 20763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20764 ;; Tracked objects:
 20765 ;;		On entry : 0/0
 20766 ;;		On exit  : 0/0
 20767 ;;		Unchanged: 0/0
 20768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20773 ;;Total ram usage:        0 bytes
 20774 ;; Hardware stack levels used:    1
 20775 ;; Hardware stack levels required when called:   14
 20776 ;; This function calls:
 20777 ;;		_Port_SetQuadType
 20778 ;; This function is called by:
 20779 ;;		_FunctInitButton
 20780 ;;		_Button_Init
 20781 ;; This function uses a non-reentrant model
 20782 ;;
 20783                           
 20784                           	psect	text115
 20785  0149FE                     __ptext115:
 20786                           	opt stack 0
 20787  0149FE                     _MXK_InitDIPSwitch:
 20788                           	opt stack 13
 20789                           
 20790                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 20791                           
 20792                           ;incstack = 0
 20793  0149FE  0E87               	movlw	low _PortD
 20794  014A00  0100               	movlb	0	; () banked
 20795  014A02  6FEE               	movwf	Port_SetQuadType@pInput& (0+255),b
 20796  014A04  0E00               	movlw	high _PortD
 20797  014A06  0100               	movlb	0	; () banked
 20798  014A08  6FEF               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 20799  014A0A  0E00               	movlw	0
 20800  014A0C  0100               	movlb	0	; () banked
 20801  014A0E  6FF0               	movwf	Port_SetQuadType@pQuad& (0+255),b
 20802  014A10  0E00               	movlw	0
 20803  014A12  0100               	movlb	0	; () banked
 20804  014A14  6FF1               	movwf	Port_SetQuadType@pType& (0+255),b
 20805  014A16  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 20806  014A1A  0012               	return		;funcret
 20807  014A1C                     __end_of_MXK_InitDIPSwitch:
 20808                           	opt stack 0
 20809                           tosu	equ	0xFFF
 20810                           tosh	equ	0xFFE
 20811                           tosl	equ	0xFFD
 20812                           pclath	equ	0xFFA
 20813                           tblptru	equ	0xFF8
 20814                           tblptrh	equ	0xFF7
 20815                           tblptrl	equ	0xFF6
 20816                           tablat	equ	0xFF5
 20817                           prodh	equ	0xFF4
 20818                           prodl	equ	0xFF3
 20819                           intcon	equ	0xFF2
 20820                           postinc0	equ	0xFEE
 20821                           plusw0	equ	0xFEB
 20822                           wreg	equ	0xFE8
 20823                           indf1	equ	0xFE7
 20824                           postdec1	equ	0xFE5
 20825                           fsr1h	equ	0xFE2
 20826                           fsr1l	equ	0xFE1
 20827                           indf2	equ	0xFDF
 20828                           postinc2	equ	0xFDE
 20829                           postdec2	equ	0xFDD
 20830                           plusw2	equ	0xFDB
 20831                           fsr2h	equ	0xFDA
 20832                           fsr2l	equ	0xFD9
 20833                           status	equ	0xFD8
 20834                           
 20835 ;; *************** function _HMI_InitButtons *****************
 20836 ;; Defined at:
 20837 ;;		line 21 in file "HMI.c"
 20838 ;; Parameters:    Size  Location     Type
 20839 ;;		None
 20840 ;; Auto vars:     Size  Location     Type
 20841 ;;		None
 20842 ;; Return value:  Size  Location     Type
 20843 ;;                  1    wreg      void 
 20844 ;; Registers used:
 20845 ;;		None
 20846 ;; Tracked objects:
 20847 ;;		On entry : 0/0
 20848 ;;		On exit  : 0/0
 20849 ;;		Unchanged: 0/0
 20850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20855 ;;Total ram usage:        0 bytes
 20856 ;; Hardware stack levels used:    1
 20857 ;; Hardware stack levels required when called:    7
 20858 ;; This function calls:
 20859 ;;		Nothing
 20860 ;; This function is called by:
 20861 ;;		_HMI_Init
 20862 ;;		_Button_Init
 20863 ;; This function uses a non-reentrant model
 20864 ;;
 20865                           
 20866                           	psect	text116
 20867  014C4E                     __ptext116:
 20868                           	opt stack 0
 20869  014C4E                     _HMI_InitButtons:
 20870                           	opt stack 20
 20871                           
 20872                           ;HMI.c: 23: TRISE = 0xFF;
 20873                           
 20874                           ;incstack = 0
 20875  014C4E  6896               	setf	3990,c	;volatile
 20876  014C50  0012               	return		;funcret
 20877  014C52                     __end_of_HMI_InitButtons:
 20878                           	opt stack 0
 20879                           tosu	equ	0xFFF
 20880                           tosh	equ	0xFFE
 20881                           tosl	equ	0xFFD
 20882                           pclath	equ	0xFFA
 20883                           tblptru	equ	0xFF8
 20884                           tblptrh	equ	0xFF7
 20885                           tblptrl	equ	0xFF6
 20886                           tablat	equ	0xFF5
 20887                           prodh	equ	0xFF4
 20888                           prodl	equ	0xFF3
 20889                           intcon	equ	0xFF2
 20890                           postinc0	equ	0xFEE
 20891                           plusw0	equ	0xFEB
 20892                           wreg	equ	0xFE8
 20893                           indf1	equ	0xFE7
 20894                           postdec1	equ	0xFE5
 20895                           fsr1h	equ	0xFE2
 20896                           fsr1l	equ	0xFE1
 20897                           indf2	equ	0xFDF
 20898                           postinc2	equ	0xFDE
 20899                           postdec2	equ	0xFDD
 20900                           plusw2	equ	0xFDB
 20901                           fsr2h	equ	0xFDA
 20902                           fsr2l	equ	0xFD9
 20903                           status	equ	0xFD8
 20904                           
 20905 ;; *************** function _MXK_InitTestButton *****************
 20906 ;; Defined at:
 20907 ;;		line 10 in file "Library/MXK.c"
 20908 ;; Parameters:    Size  Location     Type
 20909 ;;		None
 20910 ;; Auto vars:     Size  Location     Type
 20911 ;;		None
 20912 ;; Return value:  Size  Location     Type
 20913 ;;                  1    wreg      void 
 20914 ;; Registers used:
 20915 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20916 ;; Tracked objects:
 20917 ;;		On entry : 0/0
 20918 ;;		On exit  : 0/0
 20919 ;;		Unchanged: 0/0
 20920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20925 ;;Total ram usage:        0 bytes
 20926 ;; Hardware stack levels used:    1
 20927 ;; Hardware stack levels required when called:   12
 20928 ;; This function calls:
 20929 ;;		_Port_SetPinType
 20930 ;; This function is called by:
 20931 ;;		_FunctInitButton
 20932 ;;		_Button_Init
 20933 ;; This function uses a non-reentrant model
 20934 ;;
 20935                           
 20936                           	psect	text117
 20937  014A1C                     __ptext117:
 20938                           	opt stack 0
 20939  014A1C                     _MXK_InitTestButton:
 20940                           	opt stack 15
 20941                           
 20942                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 20943                           
 20944                           ;incstack = 0
 20945  014A1C  0E98               	movlw	low _PortB
 20946  014A1E  0100               	movlb	0	; () banked
 20947  014A20  6FDE               	movwf	Port_SetPinType@pInput& (0+255),b
 20948  014A22  0E01               	movlw	high _PortB
 20949  014A24  0100               	movlb	0	; () banked
 20950  014A26  6FDF               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20951  014A28  0E04               	movlw	4
 20952  014A2A  0100               	movlb	0	; () banked
 20953  014A2C  6FE0               	movwf	Port_SetPinType@pPin& (0+255),b
 20954  014A2E  0E00               	movlw	0
 20955  014A30  0100               	movlb	0	; () banked
 20956  014A32  6FE1               	movwf	Port_SetPinType@pType& (0+255),b
 20957  014A34  ECB1  F08B         	call	_Port_SetPinType	;wreg free
 20958  014A38  0012               	return		;funcret
 20959  014A3A                     __end_of_MXK_InitTestButton:
 20960                           	opt stack 0
 20961                           tosu	equ	0xFFF
 20962                           tosh	equ	0xFFE
 20963                           tosl	equ	0xFFD
 20964                           pclath	equ	0xFFA
 20965                           tblptru	equ	0xFF8
 20966                           tblptrh	equ	0xFF7
 20967                           tblptrl	equ	0xFF6
 20968                           tablat	equ	0xFF5
 20969                           prodh	equ	0xFF4
 20970                           prodl	equ	0xFF3
 20971                           intcon	equ	0xFF2
 20972                           postinc0	equ	0xFEE
 20973                           plusw0	equ	0xFEB
 20974                           wreg	equ	0xFE8
 20975                           indf1	equ	0xFE7
 20976                           postdec1	equ	0xFE5
 20977                           fsr1h	equ	0xFE2
 20978                           fsr1l	equ	0xFE1
 20979                           indf2	equ	0xFDF
 20980                           postinc2	equ	0xFDE
 20981                           postdec2	equ	0xFDD
 20982                           plusw2	equ	0xFDB
 20983                           fsr2h	equ	0xFDA
 20984                           fsr2l	equ	0xFD9
 20985                           status	equ	0xFD8
 20986                           
 20987 ;; *************** function _Port_SetPinType *****************
 20988 ;; Defined at:
 20989 ;;		line 189 in file "Library/Port.c"
 20990 ;; Parameters:    Size  Location     Type
 20991 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 20992 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 20993 ;;		 -> PortD(10), PortC(10), PortF(10), 
 20994 ;;  pPin            1   40[BANK0 ] enum E6750
 20995 ;;  pType           1   41[BANK0 ] enum E6795
 20996 ;; Auto vars:     Size  Location     Type
 20997 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 20998 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 20999 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 21000 ;;  Output          1   42[BANK0 ] enum E6475
 21001 ;; Return value:  Size  Location     Type
 21002 ;;                  1    wreg      enum E6475
 21003 ;; Registers used:
 21004 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21005 ;; Tracked objects:
 21006 ;;		On entry : 0/0
 21007 ;;		On exit  : 0/0
 21008 ;;		Unchanged: 0/0
 21009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21010 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21011 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21013 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21014 ;;Total ram usage:        7 bytes
 21015 ;; Hardware stack levels used:    1
 21016 ;; Hardware stack levels required when called:   11
 21017 ;; This function calls:
 21018 ;;		_Byte_SetBit
 21019 ;;		_PortProperty_Valid
 21020 ;;		_Word_SetPair
 21021 ;; This function is called by:
 21022 ;;		_Configure_GPIOs
 21023 ;;		_LED_Init
 21024 ;;		_Port_Init
 21025 ;;		_SPI_Init
 21026 ;;		_Motor_Init
 21027 ;;		_MXK_InitTestButton
 21028 ;;		_MXK_Init
 21029 ;;		_I2C_Init
 21030 ;; This function uses a non-reentrant model
 21031 ;;
 21032                           
 21033                           	psect	text118
 21034  011762                     __ptext118:
 21035                           	opt stack 0
 21036  011762                     _Port_SetPinType:
 21037                           	opt stack 17
 21038                           
 21039                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 21040                           
 21041                           ;incstack = 0
 21042  011762  C0DE  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 21043  011766  C0DF  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 21044  01176A  CFDE F0E3          	movff	postinc2,Port_SetPinType@Props
 21045  01176E  CFDD F0E4          	movff	postdec2,Port_SetPinType@Props+1
 21046                           
 21047                           ;Port.c: 192: ePinError Output = ePinErrorState;
 21048  011772  0E05               	movlw	5
 21049  011774  0100               	movlb	0	; () banked
 21050  011776  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 21051                           
 21052                           ;Port.c: 193: switch (pType)
 21053  011778  D0B5               	goto	l412
 21054  01177A                     
 21055                           ; BSR set to: 0
 21056                           ;Port.c: 197: {
 21057                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 21058                           
 21059                           ; BSR set to: 0
 21060  01177A  0100               	movlb	0	; () banked
 21061  01177C  EE20 F002          	lfsr	2,2
 21062  011780  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 21063  011782  26D9               	addwf	fsr2l,f,c
 21064  011784  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21065  011786  22DA               	addwfc	fsr2h,f,c
 21066  011788  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21067  01178C  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21068  011790  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21069  011794  0E01               	movlw	1
 21070  011796  0100               	movlb	0	; () banked
 21071  011798  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21072  01179A  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 21073                           
 21074                           ;Port.c: 203: break;
 21075  01179E  D0B0               	goto	l414
 21076  0117A0                     
 21077                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 21078  0117A0  C0E3  F0C7         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21079  0117A4  C0E4  F0C8         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21080  0117A8  0E01               	movlw	1
 21081  0117AA  0100               	movlb	0	; () banked
 21082  0117AC  6FC9               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21083  0117AE  C0E0  F0CA         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21084  0117B2  ECF0  F09B         	call	_PortProperty_Valid	;wreg free
 21085  0117B6  0100               	movlb	0	; () banked
 21086  0117B8  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 21087  0117BA  0100               	movlb	0	; () banked
 21088  0117BC  51E2               	movf	Port_SetPinType@Output& (0+255),w,b
 21089  0117BE  A4D8               	btfss	status,2,c
 21090  0117C0  0012               	return	
 21091                           
 21092                           ; BSR set to: 0
 21093                           ;Port.c: 208: {
 21094                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 21095  0117C2  0100               	movlb	0	; () banked
 21096  0117C4  EE20 F002          	lfsr	2,2
 21097  0117C8  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 21098  0117CA  26D9               	addwf	fsr2l,f,c
 21099  0117CC  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21100  0117CE  22DA               	addwfc	fsr2h,f,c
 21101  0117D0  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21102  0117D4  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21103  0117D8  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21104  0117DC  0E00               	movlw	0
 21105  0117DE  0100               	movlb	0	; () banked
 21106  0117E0  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21107  0117E2  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 21108                           
 21109                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 21110  0117E6  0100               	movlb	0	; () banked
 21111  0117E8  EE20 F004          	lfsr	2,4
 21112  0117EC  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 21113  0117EE  26D9               	addwf	fsr2l,f,c
 21114  0117F0  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21115  0117F2  22DA               	addwfc	fsr2h,f,c
 21116  0117F4  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21117  0117F8  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21118  0117FC  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21119  011800  0E00               	movlw	0
 21120  011802  0100               	movlb	0	; () banked
 21121  011804  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21122  011806  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 21123                           
 21124                           ;Port.c: 214: break;
 21125  01180A  D07A               	goto	l414
 21126  01180C                     
 21127                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 21128                           
 21129                           ;Port.c: 218: case eTypeOutputOpenSource:
 21130  01180C  C0E3  F0C7         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21131  011810  C0E4  F0C8         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21132  011814  0E02               	movlw	2
 21133  011816  0100               	movlb	0	; () banked
 21134  011818  6FC9               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21135  01181A  C0E0  F0CA         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21136  01181E  ECF0  F09B         	call	_PortProperty_Valid	;wreg free
 21137  011822  0100               	movlb	0	; () banked
 21138  011824  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 21139  011826  0100               	movlb	0	; () banked
 21140  011828  51E2               	movf	Port_SetPinType@Output& (0+255),w,b
 21141  01182A  A4D8               	btfss	status,2,c
 21142  01182C  0012               	return	
 21143                           
 21144                           ; BSR set to: 0
 21145                           ;Port.c: 220: {
 21146                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 21147  01182E  0100               	movlb	0	; () banked
 21148  011830  EE20 F002          	lfsr	2,2
 21149  011834  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 21150  011836  26D9               	addwf	fsr2l,f,c
 21151  011838  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21152  01183A  22DA               	addwfc	fsr2h,f,c
 21153  01183C  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21154  011840  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21155  011844  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21156  011848  0E01               	movlw	1
 21157  01184A  0100               	movlb	0	; () banked
 21158  01184C  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21159  01184E  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 21160                           
 21161                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 21162  011852  0100               	movlb	0	; () banked
 21163  011854  EE20 F004          	lfsr	2,4
 21164  011858  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 21165  01185A  26D9               	addwf	fsr2l,f,c
 21166  01185C  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21167  01185E  22DA               	addwfc	fsr2h,f,c
 21168  011860  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21169  011864  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21170  011868  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21171  01186C  0E01               	movlw	1
 21172  01186E  0100               	movlb	0	; () banked
 21173  011870  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21174  011872  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 21175                           
 21176                           ;Port.c: 226: break;
 21177  011876  D044               	goto	l414
 21178  011878                     
 21179                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 21180                           
 21181                           ;Port.c: 230: case eTypeOutputPushPull:
 21182  011878  C0E3  F0C7         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 21183  01187C  C0E4  F0C8         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 21184  011880  0E00               	movlw	0
 21185  011882  0100               	movlb	0	; () banked
 21186  011884  6FC9               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 21187  011886  C0E0  F0CA         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 21188  01188A  ECF0  F09B         	call	_PortProperty_Valid	;wreg free
 21189  01188E  0100               	movlb	0	; () banked
 21190  011890  6FE2               	movwf	Port_SetPinType@Output& (0+255),b
 21191  011892  0100               	movlb	0	; () banked
 21192  011894  51E2               	movf	Port_SetPinType@Output& (0+255),w,b
 21193  011896  A4D8               	btfss	status,2,c
 21194  011898  0012               	return	
 21195                           
 21196                           ; BSR set to: 0
 21197                           ;Port.c: 232: {
 21198                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 21199  01189A  0100               	movlb	0	; () banked
 21200  01189C  EE20 F002          	lfsr	2,2
 21201  0118A0  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 21202  0118A2  26D9               	addwf	fsr2l,f,c
 21203  0118A4  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21204  0118A6  22DA               	addwfc	fsr2h,f,c
 21205  0118A8  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21206  0118AC  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21207  0118B0  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21208  0118B4  0E00               	movlw	0
 21209  0118B6  0100               	movlb	0	; () banked
 21210  0118B8  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21211  0118BA  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 21212                           
 21213                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 21214  0118BE  0100               	movlb	0	; () banked
 21215  0118C0  EE20 F004          	lfsr	2,4
 21216  0118C4  51DE               	movf	Port_SetPinType@pInput& (0+255),w,b
 21217  0118C6  26D9               	addwf	fsr2l,f,c
 21218  0118C8  51DF               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 21219  0118CA  22DA               	addwfc	fsr2h,f,c
 21220  0118CC  CFDE F0B8          	movff	postinc2,Byte_SetBit@pInput
 21221  0118D0  CFDD F0B9          	movff	postdec2,Byte_SetBit@pInput+1
 21222  0118D4  C0E0  F0BA         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 21223  0118D8  0E00               	movlw	0
 21224  0118DA  0100               	movlb	0	; () banked
 21225  0118DC  6FBB               	movwf	Byte_SetBit@pValue& (0+255),b
 21226  0118DE  ECCD  F09E         	call	_Byte_SetBit	;wreg free
 21227                           
 21228                           ;Port.c: 239: }
 21229                           
 21230                           ;Port.c: 238: break;
 21231  0118E2  D00E               	goto	l414
 21232  0118E4                     l412:
 21233  0118E4  0100               	movlb	0	; () banked
 21234  0118E6  51E1               	movf	Port_SetPinType@pType& (0+255),w,b
 21235                           
 21236                           ; Switch size 1, requested type "space"
 21237                           ; Number of cases is 4, Range of values is 0 to 3
 21238                           ; switch strategies available:
 21239                           ; Name         Instructions Cycles
 21240                           ; simple_byte           13     7 (average)
 21241                           ;	Chosen strategy is simple_byte
 21242  0118E8  0A00               	xorlw	0	; case 0
 21243  0118EA  B4D8               	btfsc	status,2,c
 21244  0118EC  D746               	goto	l413
 21245  0118EE  0A01               	xorlw	1	; case 1
 21246  0118F0  B4D8               	btfsc	status,2,c
 21247  0118F2  D756               	goto	l415
 21248  0118F4  0A03               	xorlw	3	; case 2
 21249  0118F6  B4D8               	btfsc	status,2,c
 21250  0118F8  D789               	goto	l417
 21251  0118FA  0A01               	xorlw	1	; case 3
 21252  0118FC  B4D8               	btfsc	status,2,c
 21253  0118FE  D7BC               	goto	l421
 21254  011900                     l414:
 21255                           
 21256                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 21257                           
 21258                           ; BSR set to: 0
 21259  011900  0E08               	movlw	8
 21260  011902  0100               	movlb	0	; () banked
 21261  011904  25DE               	addwf	Port_SetPinType@pInput& (0+255),w,b
 21262  011906  0100               	movlb	0	; () banked
 21263  011908  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 21264  01190A  0E00               	movlw	0
 21265  01190C  0100               	movlb	0	; () banked
 21266  01190E  21DF               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 21267  011910  0100               	movlb	0	; () banked
 21268  011912  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21269  011914  C0E0  F0C9         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 21270  011918  C0E1  F0CA         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 21271  01191C  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 21272  011920  0012               	return	
 21273  011922                     __end_of_Port_SetPinType:
 21274                           	opt stack 0
 21275                           tosu	equ	0xFFF
 21276                           tosh	equ	0xFFE
 21277                           tosl	equ	0xFFD
 21278                           pclath	equ	0xFFA
 21279                           tblptru	equ	0xFF8
 21280                           tblptrh	equ	0xFF7
 21281                           tblptrl	equ	0xFF6
 21282                           tablat	equ	0xFF5
 21283                           prodh	equ	0xFF4
 21284                           prodl	equ	0xFF3
 21285                           intcon	equ	0xFF2
 21286                           postinc0	equ	0xFEE
 21287                           plusw0	equ	0xFEB
 21288                           wreg	equ	0xFE8
 21289                           indf1	equ	0xFE7
 21290                           postdec1	equ	0xFE5
 21291                           fsr1h	equ	0xFE2
 21292                           fsr1l	equ	0xFE1
 21293                           indf2	equ	0xFDF
 21294                           postinc2	equ	0xFDE
 21295                           postdec2	equ	0xFDD
 21296                           plusw2	equ	0xFDB
 21297                           fsr2h	equ	0xFDA
 21298                           fsr2l	equ	0xFD9
 21299                           status	equ	0xFD8
 21300                           
 21301 ;; *************** function _Byte_SetBit *****************
 21302 ;; Defined at:
 21303 ;;		line 32 in file "Library/Types.c"
 21304 ;; Parameters:    Size  Location     Type
 21305 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 21306 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 21307 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 21308 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 21309 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 21310 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 21311 ;;		 -> NULL(0), 
 21312 ;;  pBit            1    2[BANK0 ] unsigned char 
 21313 ;;  pValue          1    3[BANK0 ] unsigned char 
 21314 ;; Auto vars:     Size  Location     Type
 21315 ;;		None
 21316 ;; Return value:  Size  Location     Type
 21317 ;;                  1    wreg      void 
 21318 ;; Registers used:
 21319 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21320 ;; Tracked objects:
 21321 ;;		On entry : 0/0
 21322 ;;		On exit  : 0/0
 21323 ;;		Unchanged: 0/0
 21324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21325 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21327 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21328 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21329 ;;Total ram usage:        7 bytes
 21330 ;; Hardware stack levels used:    1
 21331 ;; Hardware stack levels required when called:    7
 21332 ;; This function calls:
 21333 ;;		Nothing
 21334 ;; This function is called by:
 21335 ;;		_Port_SetPinType
 21336 ;;		_Port_SetPin
 21337 ;;		_SPI_Init
 21338 ;;		_SPI_MinSpeed
 21339 ;;		_SPI_MaxSpeed
 21340 ;;		_Word_SetBit
 21341 ;;		_I2C_Init
 21342 ;; This function uses a non-reentrant model
 21343 ;;
 21344                           
 21345                           	psect	text119
 21346  013D9A                     __ptext119:
 21347                           	opt stack 0
 21348  013D9A                     _Byte_SetBit:
 21349                           	opt stack 12
 21350                           
 21351                           ;Types.c: 34: pValue &= 1;
 21352                           
 21353                           ;incstack = 0
 21354  013D9A  0E01               	movlw	1
 21355  013D9C  0100               	movlb	0	; () banked
 21356  013D9E  17BB               	andwf	Byte_SetBit@pValue& (0+255),f,b
 21357                           
 21358                           ; BSR set to: 0
 21359                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 21360  013DA0  C0BA  F0BC         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21361  013DA4  0E01               	movlw	1
 21362  013DA6  0100               	movlb	0	; () banked
 21363  013DA8  6FBD               	movwf	(??_Byte_SetBit+1)& (0+255),b
 21364  013DAA  0100               	movlb	0	; () banked
 21365  013DAC  2BBC               	incf	??_Byte_SetBit& (0+255),f,b
 21366  013DAE  D003               	goto	u6634
 21367  013DB0                     u6635:
 21368  013DB0  0100               	movlb	0	; () banked
 21369  013DB2  90D8               	bcf	status,0,c
 21370  013DB4  37BD               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21371  013DB6                     u6634:
 21372  013DB6  0100               	movlb	0	; () banked
 21373  013DB8  2FBC               	decfsz	??_Byte_SetBit& (0+255),f,b
 21374  013DBA  D7FA               	goto	u6635
 21375  013DBC  0100               	movlb	0	; () banked
 21376  013DBE  51BD               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 21377  013DC0  0AFF               	xorlw	255
 21378  013DC2  0100               	movlb	0	; () banked
 21379  013DC4  6FBE               	movwf	(??_Byte_SetBit+2)& (0+255),b
 21380  013DC6  C0B8  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21381  013DCA  C0B9  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21382  013DCE  0100               	movlb	0	; () banked
 21383  013DD0  51BE               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 21384  013DD2  16DF               	andwf	indf2,f,c
 21385                           
 21386                           ; BSR set to: 0
 21387                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 21388  013DD4  C0BA  F0BC         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 21389  013DD8  C0BB  F0BD         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 21390  013DDC  0100               	movlb	0	; () banked
 21391  013DDE  2BBC               	incf	??_Byte_SetBit& (0+255),f,b
 21392  013DE0  D003               	goto	u6644
 21393  013DE2                     u6645:
 21394  013DE2  0100               	movlb	0	; () banked
 21395  013DE4  90D8               	bcf	status,0,c
 21396  013DE6  37BD               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 21397  013DE8                     u6644:
 21398  013DE8  0100               	movlb	0	; () banked
 21399  013DEA  2FBC               	decfsz	??_Byte_SetBit& (0+255),f,b
 21400  013DEC  D7FA               	goto	u6645
 21401  013DEE  C0B8  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 21402  013DF2  C0B9  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 21403  013DF6  0100               	movlb	0	; () banked
 21404  013DF8  51BD               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 21405  013DFA  12DF               	iorwf	indf2,f,c
 21406                           
 21407                           ; BSR set to: 0
 21408  013DFC  0012               	return		;funcret
 21409  013DFE                     __end_of_Byte_SetBit:
 21410                           	opt stack 0
 21411                           tosu	equ	0xFFF
 21412                           tosh	equ	0xFFE
 21413                           tosl	equ	0xFFD
 21414                           pclath	equ	0xFFA
 21415                           tblptru	equ	0xFF8
 21416                           tblptrh	equ	0xFF7
 21417                           tblptrl	equ	0xFF6
 21418                           tablat	equ	0xFF5
 21419                           prodh	equ	0xFF4
 21420                           prodl	equ	0xFF3
 21421                           intcon	equ	0xFF2
 21422                           postinc0	equ	0xFEE
 21423                           plusw0	equ	0xFEB
 21424                           wreg	equ	0xFE8
 21425                           indf1	equ	0xFE7
 21426                           postdec1	equ	0xFE5
 21427                           fsr1h	equ	0xFE2
 21428                           fsr1l	equ	0xFE1
 21429                           indf2	equ	0xFDF
 21430                           postinc2	equ	0xFDE
 21431                           postdec2	equ	0xFDD
 21432                           plusw2	equ	0xFDB
 21433                           fsr2h	equ	0xFDA
 21434                           fsr2l	equ	0xFD9
 21435                           status	equ	0xFD8
 21436                           
 21437 ;; *************** function _Port_SetQuadType *****************
 21438 ;; Defined at:
 21439 ;;		line 399 in file "Library/Port.c"
 21440 ;; Parameters:    Size  Location     Type
 21441 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 21442 ;;		 -> PortB(10), PortD(10), 
 21443 ;;  pQuad           1   56[BANK0 ] enum E6776
 21444 ;;  pType           1   57[BANK0 ] enum E6795
 21445 ;; Auto vars:     Size  Location     Type
 21446 ;;  Output          1   58[BANK0 ] enum E6475
 21447 ;; Return value:  Size  Location     Type
 21448 ;;                  1    wreg      enum E6475
 21449 ;; Registers used:
 21450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21451 ;; Tracked objects:
 21452 ;;		On entry : 0/0
 21453 ;;		On exit  : 0/0
 21454 ;;		Unchanged: 0/0
 21455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21456 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21459 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21460 ;;Total ram usage:        5 bytes
 21461 ;; Hardware stack levels used:    1
 21462 ;; Hardware stack levels required when called:   13
 21463 ;; This function calls:
 21464 ;;		_Byte_SetQuad
 21465 ;;		_Port_CheckQuadType
 21466 ;;		_Word_SetPair
 21467 ;; This function is called by:
 21468 ;;		_MXK_InitDIPSwitch
 21469 ;;		_MXK_Init
 21470 ;; This function uses a non-reentrant model
 21471 ;;
 21472                           
 21473                           	psect	text120
 21474  010A5C                     __ptext120:
 21475                           	opt stack 0
 21476  010A5C                     _Port_SetQuadType:
 21477                           	opt stack 15
 21478                           
 21479                           ;Port.c: 401: ePinError Output = ePinErrorState;
 21480                           
 21481                           ; BSR set to: 0
 21482                           ;incstack = 0
 21483  010A5C  0E05               	movlw	5
 21484  010A5E  0100               	movlb	0	; () banked
 21485  010A60  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 21486                           
 21487                           ;Port.c: 403: switch (pType)
 21488  010A62  D0C7               	goto	l476
 21489  010A64                     
 21490                           ; BSR set to: 0
 21491                           ;Port.c: 407: {
 21492                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21493                           
 21494                           ; BSR set to: 0
 21495  010A64  0100               	movlb	0	; () banked
 21496  010A66  EE20 F002          	lfsr	2,2
 21497  010A6A  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21498  010A6C  26D9               	addwf	fsr2l,f,c
 21499  010A6E  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21500  010A70  22DA               	addwfc	fsr2h,f,c
 21501  010A72  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21502  010A76  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21503  010A7A  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21504  010A7E  0E0F               	movlw	15
 21505  010A80  0100               	movlb	0	; () banked
 21506  010A82  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21507  010A84  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21508                           
 21509                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21510  010A88  0100               	movlb	0	; () banked
 21511  010A8A  EE20 F004          	lfsr	2,4
 21512  010A8E  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21513  010A90  26D9               	addwf	fsr2l,f,c
 21514  010A92  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21515  010A94  22DA               	addwfc	fsr2h,f,c
 21516  010A96  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21517  010A9A  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21518  010A9E  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21519  010AA2  0E00               	movlw	0
 21520  010AA4  0100               	movlb	0	; () banked
 21521  010AA6  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21522  010AA8  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21523                           
 21524                           ;Port.c: 413: }
 21525                           ;Port.c: 415: break;
 21526  010AAC  D0B0               	goto	l478
 21527  010AAE                     
 21528                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21529  010AAE  C0EE  F0E7         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21530  010AB2  C0EF  F0E8         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21531  010AB6  C0F0  F0E9         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21532  010ABA  0E03               	movlw	3
 21533  010ABC  0100               	movlb	0	; () banked
 21534  010ABE  6FEA               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21535  010AC0  ECBE  F09F         	call	_Port_CheckQuadType	;wreg free
 21536  010AC4  0100               	movlb	0	; () banked
 21537  010AC6  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 21538  010AC8  0100               	movlb	0	; () banked
 21539  010ACA  51F2               	movf	Port_SetQuadType@Output& (0+255),w,b
 21540  010ACC  A4D8               	btfss	status,2,c
 21541  010ACE  0012               	return	
 21542                           
 21543                           ; BSR set to: 0
 21544                           ;Port.c: 418: {
 21545                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21546  010AD0  0100               	movlb	0	; () banked
 21547  010AD2  EE20 F002          	lfsr	2,2
 21548  010AD6  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21549  010AD8  26D9               	addwf	fsr2l,f,c
 21550  010ADA  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21551  010ADC  22DA               	addwfc	fsr2h,f,c
 21552  010ADE  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21553  010AE2  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21554  010AE6  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21555  010AEA  0E00               	movlw	0
 21556  010AEC  0100               	movlb	0	; () banked
 21557  010AEE  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21558  010AF0  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21559                           
 21560                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21561  010AF4  0100               	movlb	0	; () banked
 21562  010AF6  EE20 F004          	lfsr	2,4
 21563  010AFA  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21564  010AFC  26D9               	addwf	fsr2l,f,c
 21565  010AFE  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21566  010B00  22DA               	addwfc	fsr2h,f,c
 21567  010B02  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21568  010B06  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21569  010B0A  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21570  010B0E  0E00               	movlw	0
 21571  010B10  0100               	movlb	0	; () banked
 21572  010B12  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21573  010B14  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21574                           
 21575                           ;Port.c: 424: }
 21576  010B18  D07A               	goto	l478
 21577  010B1A                     
 21578                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21579  010B1A  C0EE  F0E7         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21580  010B1E  C0EF  F0E8         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21581  010B22  C0F0  F0E9         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21582  010B26  0E03               	movlw	3
 21583  010B28  0100               	movlb	0	; () banked
 21584  010B2A  6FEA               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21585  010B2C  ECBE  F09F         	call	_Port_CheckQuadType	;wreg free
 21586  010B30  0100               	movlb	0	; () banked
 21587  010B32  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 21588  010B34  0100               	movlb	0	; () banked
 21589  010B36  51F2               	movf	Port_SetQuadType@Output& (0+255),w,b
 21590  010B38  A4D8               	btfss	status,2,c
 21591  010B3A  0012               	return	
 21592                           
 21593                           ; BSR set to: 0
 21594                           ;Port.c: 429: {
 21595                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 21596  010B3C  0100               	movlb	0	; () banked
 21597  010B3E  EE20 F002          	lfsr	2,2
 21598  010B42  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21599  010B44  26D9               	addwf	fsr2l,f,c
 21600  010B46  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21601  010B48  22DA               	addwfc	fsr2h,f,c
 21602  010B4A  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21603  010B4E  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21604  010B52  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21605  010B56  0E0F               	movlw	15
 21606  010B58  0100               	movlb	0	; () banked
 21607  010B5A  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21608  010B5C  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21609                           
 21610                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 21611  010B60  0100               	movlb	0	; () banked
 21612  010B62  EE20 F004          	lfsr	2,4
 21613  010B66  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21614  010B68  26D9               	addwf	fsr2l,f,c
 21615  010B6A  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21616  010B6C  22DA               	addwfc	fsr2h,f,c
 21617  010B6E  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21618  010B72  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21619  010B76  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21620  010B7A  0E0F               	movlw	15
 21621  010B7C  0100               	movlb	0	; () banked
 21622  010B7E  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21623  010B80  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21624                           
 21625                           ;Port.c: 435: }
 21626  010B84  D044               	goto	l478
 21627  010B86                     
 21628                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 21629  010B86  C0EE  F0E7         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 21630  010B8A  C0EF  F0E8         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 21631  010B8E  C0F0  F0E9         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 21632  010B92  0E03               	movlw	3
 21633  010B94  0100               	movlb	0	; () banked
 21634  010B96  6FEA               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 21635  010B98  ECBE  F09F         	call	_Port_CheckQuadType	;wreg free
 21636  010B9C  0100               	movlb	0	; () banked
 21637  010B9E  6FF2               	movwf	Port_SetQuadType@Output& (0+255),b
 21638  010BA0  0100               	movlb	0	; () banked
 21639  010BA2  51F2               	movf	Port_SetQuadType@Output& (0+255),w,b
 21640  010BA4  A4D8               	btfss	status,2,c
 21641  010BA6  0012               	return	
 21642                           
 21643                           ; BSR set to: 0
 21644                           ;Port.c: 440: {
 21645                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 21646  010BA8  0100               	movlb	0	; () banked
 21647  010BAA  EE20 F002          	lfsr	2,2
 21648  010BAE  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21649  010BB0  26D9               	addwf	fsr2l,f,c
 21650  010BB2  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21651  010BB4  22DA               	addwfc	fsr2h,f,c
 21652  010BB6  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21653  010BBA  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21654  010BBE  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21655  010BC2  0E00               	movlw	0
 21656  010BC4  0100               	movlb	0	; () banked
 21657  010BC6  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21658  010BC8  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21659                           
 21660                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 21661  010BCC  0100               	movlb	0	; () banked
 21662  010BCE  EE20 F004          	lfsr	2,4
 21663  010BD2  51EE               	movf	Port_SetQuadType@pInput& (0+255),w,b
 21664  010BD4  26D9               	addwf	fsr2l,f,c
 21665  010BD6  51EF               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21666  010BD8  22DA               	addwfc	fsr2h,f,c
 21667  010BDA  CFDE F0C3          	movff	postinc2,Byte_SetQuad@pInput
 21668  010BDE  CFDD F0C4          	movff	postdec2,Byte_SetQuad@pInput+1
 21669  010BE2  C0F0  F0C5         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 21670  010BE6  0E00               	movlw	0
 21671  010BE8  0100               	movlb	0	; () banked
 21672  010BEA  6FC6               	movwf	Byte_SetQuad@pValue& (0+255),b
 21673  010BEC  ECA2  F0A4         	call	_Byte_SetQuad	;wreg free
 21674                           
 21675                           ;Port.c: 446: }
 21676  010BF0  D00E               	goto	l478
 21677  010BF2                     l476:
 21678  010BF2  0100               	movlb	0	; () banked
 21679  010BF4  51F1               	movf	Port_SetQuadType@pType& (0+255),w,b
 21680                           
 21681                           ; Switch size 1, requested type "space"
 21682                           ; Number of cases is 4, Range of values is 0 to 3
 21683                           ; switch strategies available:
 21684                           ; Name         Instructions Cycles
 21685                           ; simple_byte           13     7 (average)
 21686                           ;	Chosen strategy is simple_byte
 21687  010BF6  0A00               	xorlw	0	; case 0
 21688  010BF8  B4D8               	btfsc	status,2,c
 21689  010BFA  D734               	goto	l477
 21690  010BFC  0A01               	xorlw	1	; case 1
 21691  010BFE  B4D8               	btfsc	status,2,c
 21692  010C00  D756               	goto	l479
 21693  010C02  0A03               	xorlw	3	; case 2
 21694  010C04  B4D8               	btfsc	status,2,c
 21695  010C06  D789               	goto	l483
 21696  010C08  0A01               	xorlw	1	; case 3
 21697  010C0A  B4D8               	btfsc	status,2,c
 21698  010C0C  D7BC               	goto	l486
 21699  010C0E                     l478:
 21700                           
 21701                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 21702                           
 21703                           ; BSR set to: 0
 21704  010C0E  0E08               	movlw	8
 21705  010C10  0100               	movlb	0	; () banked
 21706  010C12  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21707  010C14  0100               	movlb	0	; () banked
 21708  010C16  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 21709  010C18  0E00               	movlw	0
 21710  010C1A  0100               	movlb	0	; () banked
 21711  010C1C  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21712  010C1E  0100               	movlb	0	; () banked
 21713  010C20  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21714  010C22  0100               	movlb	0	; () banked
 21715  010C24  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21716  010C26  0D04               	mullw	4
 21717  010C28  CFF3 F0C9          	movff	prodl,Word_SetPair@pPair
 21718  010C2C  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21719  010C30  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 21720                           
 21721                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 21722  010C34  0E08               	movlw	8
 21723  010C36  0100               	movlb	0	; () banked
 21724  010C38  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21725  010C3A  0100               	movlb	0	; () banked
 21726  010C3C  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 21727  010C3E  0E00               	movlw	0
 21728  010C40  0100               	movlb	0	; () banked
 21729  010C42  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21730  010C44  0100               	movlb	0	; () banked
 21731  010C46  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21732  010C48  0100               	movlb	0	; () banked
 21733  010C4A  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21734  010C4C  0D04               	mullw	4
 21735  010C4E  28F3               	incf	prodl,w,c
 21736  010C50  0100               	movlb	0	; () banked
 21737  010C52  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 21738  010C54  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21739  010C58  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 21740                           
 21741                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 21742  010C5C  0E08               	movlw	8
 21743  010C5E  0100               	movlb	0	; () banked
 21744  010C60  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21745  010C62  0100               	movlb	0	; () banked
 21746  010C64  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 21747  010C66  0E00               	movlw	0
 21748  010C68  0100               	movlb	0	; () banked
 21749  010C6A  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21750  010C6C  0100               	movlb	0	; () banked
 21751  010C6E  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21752  010C70  0100               	movlb	0	; () banked
 21753  010C72  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21754  010C74  0D04               	mullw	4
 21755  010C76  50F3               	movf	prodl,w,c
 21756  010C78  0F02               	addlw	2
 21757  010C7A  0100               	movlb	0	; () banked
 21758  010C7C  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 21759  010C7E  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21760  010C82  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 21761                           
 21762                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 21763  010C86  0E08               	movlw	8
 21764  010C88  0100               	movlb	0	; () banked
 21765  010C8A  25EE               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 21766  010C8C  0100               	movlb	0	; () banked
 21767  010C8E  6FC7               	movwf	Word_SetPair@pInput& (0+255),b
 21768  010C90  0E00               	movlw	0
 21769  010C92  0100               	movlb	0	; () banked
 21770  010C94  21EF               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 21771  010C96  0100               	movlb	0	; () banked
 21772  010C98  6FC8               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 21773  010C9A  0100               	movlb	0	; () banked
 21774  010C9C  51F0               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 21775  010C9E  0D04               	mullw	4
 21776  010CA0  50F3               	movf	prodl,w,c
 21777  010CA2  0F03               	addlw	3
 21778  010CA4  0100               	movlb	0	; () banked
 21779  010CA6  6FC9               	movwf	Word_SetPair@pPair& (0+255),b
 21780  010CA8  C0F1  F0CA         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 21781  010CAC  EC9A  F0A1         	call	_Word_SetPair	;wreg free
 21782  010CB0  0012               	return	
 21783  010CB2                     __end_of_Port_SetQuadType:
 21784                           	opt stack 0
 21785                           tosu	equ	0xFFF
 21786                           tosh	equ	0xFFE
 21787                           tosl	equ	0xFFD
 21788                           pclath	equ	0xFFA
 21789                           tblptru	equ	0xFF8
 21790                           tblptrh	equ	0xFF7
 21791                           tblptrl	equ	0xFF6
 21792                           tablat	equ	0xFF5
 21793                           prodh	equ	0xFF4
 21794                           prodl	equ	0xFF3
 21795                           intcon	equ	0xFF2
 21796                           postinc0	equ	0xFEE
 21797                           plusw0	equ	0xFEB
 21798                           wreg	equ	0xFE8
 21799                           indf1	equ	0xFE7
 21800                           postdec1	equ	0xFE5
 21801                           fsr1h	equ	0xFE2
 21802                           fsr1l	equ	0xFE1
 21803                           indf2	equ	0xFDF
 21804                           postinc2	equ	0xFDE
 21805                           postdec2	equ	0xFDD
 21806                           plusw2	equ	0xFDB
 21807                           fsr2h	equ	0xFDA
 21808                           fsr2l	equ	0xFD9
 21809                           status	equ	0xFD8
 21810                           
 21811 ;; *************** function _Word_SetPair *****************
 21812 ;; Defined at:
 21813 ;;		line 149 in file "Library/Types.c"
 21814 ;; Parameters:    Size  Location     Type
 21815 ;;  pInput          2   15[BANK0 ] PTR struct Word
 21816 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 21817 ;;		 -> PortD(10), PortC(10), PortF(10), 
 21818 ;;  pPair           1   17[BANK0 ] unsigned char 
 21819 ;;  pValue          1   18[BANK0 ] unsigned char 
 21820 ;; Auto vars:     Size  Location     Type
 21821 ;;		None
 21822 ;; Return value:  Size  Location     Type
 21823 ;;                  1    wreg      void 
 21824 ;; Registers used:
 21825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21826 ;; Tracked objects:
 21827 ;;		On entry : 0/0
 21828 ;;		On exit  : 0/0
 21829 ;;		Unchanged: 0/0
 21830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21831 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21834 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21835 ;;Total ram usage:        4 bytes
 21836 ;; Hardware stack levels used:    1
 21837 ;; Hardware stack levels required when called:    9
 21838 ;; This function calls:
 21839 ;;		_Byte_SetPair
 21840 ;; This function is called by:
 21841 ;;		_Port_SetPinType
 21842 ;;		_Port_SetQuadType
 21843 ;;		_Port_SetType
 21844 ;;		_Port_SetPairType
 21845 ;;		_PortProperty_Init
 21846 ;; This function uses a non-reentrant model
 21847 ;;
 21848                           
 21849                           	psect	text121
 21850  014334                     __ptext121:
 21851                           	opt stack 0
 21852  014334                     _Word_SetPair:
 21853                           	opt stack 18
 21854                           
 21855                           ;Types.c: 151: if (pPair >= 4)
 21856                           
 21857                           ;incstack = 0
 21858  014334  0E03               	movlw	3
 21859  014336  0100               	movlb	0	; () banked
 21860  014338  65C9               	cpfsgt	Word_SetPair@pPair& (0+255),b
 21861  01433A  D014               	goto	l776
 21862                           
 21863                           ; BSR set to: 0
 21864                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 21865  01433C  0E01               	movlw	1
 21866  01433E  0100               	movlb	0	; () banked
 21867  014340  25C7               	addwf	Word_SetPair@pInput& (0+255),w,b
 21868  014342  0100               	movlb	0	; () banked
 21869  014344  6FC3               	movwf	Byte_SetPair@pInput& (0+255),b
 21870  014346  0E00               	movlw	0
 21871  014348  0100               	movlb	0	; () banked
 21872  01434A  21C8               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 21873  01434C  0100               	movlb	0	; () banked
 21874  01434E  6FC4               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 21875  014350  0100               	movlb	0	; () banked
 21876  014352  51C9               	movf	Word_SetPair@pPair& (0+255),w,b
 21877  014354  0FFC               	addlw	252
 21878  014356  0100               	movlb	0	; () banked
 21879  014358  6FC5               	movwf	Byte_SetPair@pPair& (0+255),b
 21880  01435A  C0CA  F0C6         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21881  01435E  EC91  F0A4         	call	_Byte_SetPair	;wreg free
 21882  014362  0012               	return	
 21883  014364                     l776:
 21884                           
 21885                           ;Types.c: 153: else
 21886                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 21887  014364  C0C7  F0C3         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 21888  014368  C0C8  F0C4         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 21889  01436C  C0C9  F0C5         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 21890  014370  C0CA  F0C6         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 21891  014374  EC91  F0A4         	call	_Byte_SetPair	;wreg free
 21892  014378  0012               	return	
 21893  01437A                     __end_of_Word_SetPair:
 21894                           	opt stack 0
 21895                           tosu	equ	0xFFF
 21896                           tosh	equ	0xFFE
 21897                           tosl	equ	0xFFD
 21898                           pclath	equ	0xFFA
 21899                           tblptru	equ	0xFF8
 21900                           tblptrh	equ	0xFF7
 21901                           tblptrl	equ	0xFF6
 21902                           tablat	equ	0xFF5
 21903                           prodh	equ	0xFF4
 21904                           prodl	equ	0xFF3
 21905                           intcon	equ	0xFF2
 21906                           postinc0	equ	0xFEE
 21907                           plusw0	equ	0xFEB
 21908                           wreg	equ	0xFE8
 21909                           indf1	equ	0xFE7
 21910                           postdec1	equ	0xFE5
 21911                           fsr1h	equ	0xFE2
 21912                           fsr1l	equ	0xFE1
 21913                           indf2	equ	0xFDF
 21914                           postinc2	equ	0xFDE
 21915                           postdec2	equ	0xFDD
 21916                           plusw2	equ	0xFDB
 21917                           fsr2h	equ	0xFDA
 21918                           fsr2l	equ	0xFD9
 21919                           status	equ	0xFD8
 21920                           
 21921 ;; *************** function _Byte_SetPair *****************
 21922 ;; Defined at:
 21923 ;;		line 83 in file "Library/Types.c"
 21924 ;; Parameters:    Size  Location     Type
 21925 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 21926 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 21927 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 21928 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 21929 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 21930 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 21931 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 21932 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 21933 ;;		 -> NULL(0), 
 21934 ;;  pPair           1   13[BANK0 ] unsigned char 
 21935 ;;  pValue          1   14[BANK0 ] unsigned char 
 21936 ;; Auto vars:     Size  Location     Type
 21937 ;;		None
 21938 ;; Return value:  Size  Location     Type
 21939 ;;                  1    wreg      void 
 21940 ;; Registers used:
 21941 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21942 ;; Tracked objects:
 21943 ;;		On entry : 0/0
 21944 ;;		On exit  : 0/0
 21945 ;;		Unchanged: 0/0
 21946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21947 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21950 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21951 ;;Total ram usage:        4 bytes
 21952 ;; Hardware stack levels used:    1
 21953 ;; Hardware stack levels required when called:    8
 21954 ;; This function calls:
 21955 ;;		_Byte_SetZone
 21956 ;; This function is called by:
 21957 ;;		_Word_SetPair
 21958 ;;		_Port_SetPairType
 21959 ;;		_Port_SetPair
 21960 ;; This function uses a non-reentrant model
 21961 ;;
 21962                           
 21963                           	psect	text122
 21964  014922                     __ptext122:
 21965                           	opt stack 0
 21966  014922                     _Byte_SetPair:
 21967                           	opt stack 18
 21968                           
 21969                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 21970                           
 21971                           ;incstack = 0
 21972  014922  C0C3  F0B8         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 21973  014926  C0C4  F0B9         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 21974  01492A  0E04               	movlw	4
 21975  01492C  0100               	movlb	0	; () banked
 21976  01492E  6FBA               	movwf	Byte_SetZone@pMax& (0+255),b
 21977  014930  C0C5  F0BB         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 21978  014934  0E02               	movlw	2
 21979  014936  0100               	movlb	0	; () banked
 21980  014938  6FBC               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 21981  01493A  C0C6  F0BD         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 21982  01493E  ECA9  F096         	call	_Byte_SetZone	;wreg free
 21983  014942  0012               	return		;funcret
 21984  014944                     __end_of_Byte_SetPair:
 21985                           	opt stack 0
 21986                           tosu	equ	0xFFF
 21987                           tosh	equ	0xFFE
 21988                           tosl	equ	0xFFD
 21989                           pclath	equ	0xFFA
 21990                           tblptru	equ	0xFF8
 21991                           tblptrh	equ	0xFF7
 21992                           tblptrl	equ	0xFF6
 21993                           tablat	equ	0xFF5
 21994                           prodh	equ	0xFF4
 21995                           prodl	equ	0xFF3
 21996                           intcon	equ	0xFF2
 21997                           postinc0	equ	0xFEE
 21998                           plusw0	equ	0xFEB
 21999                           wreg	equ	0xFE8
 22000                           indf1	equ	0xFE7
 22001                           postdec1	equ	0xFE5
 22002                           fsr1h	equ	0xFE2
 22003                           fsr1l	equ	0xFE1
 22004                           indf2	equ	0xFDF
 22005                           postinc2	equ	0xFDE
 22006                           postdec2	equ	0xFDD
 22007                           plusw2	equ	0xFDB
 22008                           fsr2h	equ	0xFDA
 22009                           fsr2l	equ	0xFD9
 22010                           status	equ	0xFD8
 22011                           
 22012 ;; *************** function _Port_CheckQuadType *****************
 22013 ;; Defined at:
 22014 ;;		line 126 in file "Library/Port.c"
 22015 ;; Parameters:    Size  Location     Type
 22016 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 22017 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22018 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22019 ;;  pQuad           1   49[BANK0 ] enum E6776
 22020 ;;  pDrive          1   50[BANK0 ] enum E6469
 22021 ;; Auto vars:     Size  Location     Type
 22022 ;;  Output          1   53[BANK0 ] enum E6475
 22023 ;;  Pair2           1   52[BANK0 ] enum E6760
 22024 ;;  Pair1           1   51[BANK0 ] enum E6760
 22025 ;; Return value:  Size  Location     Type
 22026 ;;                  1    wreg      enum E6475
 22027 ;; Registers used:
 22028 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22029 ;; Tracked objects:
 22030 ;;		On entry : 0/0
 22031 ;;		On exit  : 0/0
 22032 ;;		Unchanged: 0/0
 22033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22034 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22035 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22037 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22038 ;;Total ram usage:        7 bytes
 22039 ;; Hardware stack levels used:    1
 22040 ;; Hardware stack levels required when called:   12
 22041 ;; This function calls:
 22042 ;;		_Port_CheckPairType
 22043 ;; This function is called by:
 22044 ;;		_Port_CheckPortType
 22045 ;;		_Port_SetQuadType
 22046 ;; This function uses a non-reentrant model
 22047 ;;
 22048                           
 22049                           	psect	text123
 22050  013F7C                     __ptext123:
 22051                           	opt stack 0
 22052  013F7C                     _Port_CheckQuadType:
 22053                           	opt stack 14
 22054                           
 22055                           ;Port.c: 128: ePinError Output = ePinErrorState;
 22056                           
 22057                           ;incstack = 0
 22058  013F7C  0E05               	movlw	5
 22059  013F7E  0100               	movlb	0	; () banked
 22060  013F80  6FED               	movwf	Port_CheckQuadType@Output& (0+255),b
 22061                           
 22062                           ; BSR set to: 0
 22063                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 22064  013F82  0100               	movlb	0	; () banked
 22065  013F84  51E9               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22066  013F86  0D02               	mullw	2
 22067  013F88  CFF3 F0EB          	movff	prodl,Port_CheckQuadType@Pair1
 22068                           
 22069                           ; BSR set to: 0
 22070                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 22071  013F8C  0100               	movlb	0	; () banked
 22072  013F8E  51E9               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 22073  013F90  0D02               	mullw	2
 22074  013F92  28F3               	incf	prodl,w,c
 22075  013F94  0100               	movlb	0	; () banked
 22076  013F96  6FEC               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 22077                           
 22078                           ; BSR set to: 0
 22079                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 22080  013F98  C0E7  F0DE         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22081  013F9C  C0E8  F0DF         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22082  013FA0  C0EB  F0E0         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 22083  013FA4  C0EA  F0E1         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22084  013FA8  EC65  F09E         	call	_Port_CheckPairType	;wreg free
 22085  013FAC  0100               	movlb	0	; () banked
 22086  013FAE  6FED               	movwf	Port_CheckQuadType@Output& (0+255),b
 22087  013FB0  0100               	movlb	0	; () banked
 22088  013FB2  51ED               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22089  013FB4  A4D8               	btfss	status,2,c
 22090  013FB6  D00C               	goto	l393
 22091                           
 22092                           ; BSR set to: 0
 22093                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 22094  013FB8  C0E7  F0DE         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 22095  013FBC  C0E8  F0DF         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 22096  013FC0  C0EC  F0E0         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 22097  013FC4  C0EA  F0E1         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 22098  013FC8  EC65  F09E         	call	_Port_CheckPairType	;wreg free
 22099  013FCC  0100               	movlb	0	; () banked
 22100  013FCE  6FED               	movwf	Port_CheckQuadType@Output& (0+255),b
 22101  013FD0                     l393:
 22102                           
 22103                           ; BSR set to: 0
 22104                           ;Port.c: 136: return Output;
 22105                           
 22106                           ; BSR set to: 0
 22107  013FD0  0100               	movlb	0	; () banked
 22108  013FD2  51ED               	movf	Port_CheckQuadType@Output& (0+255),w,b
 22109  013FD4  0012               	return	
 22110  013FD6                     __end_of_Port_CheckQuadType:
 22111                           	opt stack 0
 22112                           tosu	equ	0xFFF
 22113                           tosh	equ	0xFFE
 22114                           tosl	equ	0xFFD
 22115                           pclath	equ	0xFFA
 22116                           tblptru	equ	0xFF8
 22117                           tblptrh	equ	0xFF7
 22118                           tblptrl	equ	0xFF6
 22119                           tablat	equ	0xFF5
 22120                           prodh	equ	0xFF4
 22121                           prodl	equ	0xFF3
 22122                           intcon	equ	0xFF2
 22123                           postinc0	equ	0xFEE
 22124                           plusw0	equ	0xFEB
 22125                           wreg	equ	0xFE8
 22126                           indf1	equ	0xFE7
 22127                           postdec1	equ	0xFE5
 22128                           fsr1h	equ	0xFE2
 22129                           fsr1l	equ	0xFE1
 22130                           indf2	equ	0xFDF
 22131                           postinc2	equ	0xFDE
 22132                           postdec2	equ	0xFDD
 22133                           plusw2	equ	0xFDB
 22134                           fsr2h	equ	0xFDA
 22135                           fsr2l	equ	0xFD9
 22136                           status	equ	0xFD8
 22137                           
 22138 ;; *************** function _Port_CheckPairType *****************
 22139 ;; Defined at:
 22140 ;;		line 112 in file "Library/Port.c"
 22141 ;; Parameters:    Size  Location     Type
 22142 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22143 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22144 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22145 ;;  pPair           1   40[BANK0 ] enum E6760
 22146 ;;  pDrive          1   41[BANK0 ] enum E6469
 22147 ;; Auto vars:     Size  Location     Type
 22148 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 22149 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22150 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22151 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22152 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22153 ;;  Output          1   44[BANK0 ] enum E6475
 22154 ;;  Pin2            1   43[BANK0 ] enum E6750
 22155 ;;  Pin1            1   42[BANK0 ] enum E6750
 22156 ;; Return value:  Size  Location     Type
 22157 ;;                  1    wreg      enum E6475
 22158 ;; Registers used:
 22159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22160 ;; Tracked objects:
 22161 ;;		On entry : 0/0
 22162 ;;		On exit  : 0/0
 22163 ;;		Unchanged: 0/0
 22164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22165 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22166 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22168 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22169 ;;Total ram usage:        9 bytes
 22170 ;; Hardware stack levels used:    1
 22171 ;; Hardware stack levels required when called:   11
 22172 ;; This function calls:
 22173 ;;		_PortProperty_Valid
 22174 ;; This function is called by:
 22175 ;;		_Port_CheckQuadType
 22176 ;;		_Port_SetPairType
 22177 ;; This function uses a non-reentrant model
 22178 ;;
 22179                           
 22180                           	psect	text124
 22181  013CCA                     __ptext124:
 22182                           	opt stack 0
 22183  013CCA                     _Port_CheckPairType:
 22184                           	opt stack 14
 22185                           
 22186                           ;Port.c: 114: ePinError Output = ePinErrorState;
 22187                           
 22188                           ; BSR set to: 0
 22189                           ;incstack = 0
 22190  013CCA  0E05               	movlw	5
 22191  013CCC  0100               	movlb	0	; () banked
 22192  013CCE  6FE4               	movwf	Port_CheckPairType@Output& (0+255),b
 22193                           
 22194                           ; BSR set to: 0
 22195                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 22196  013CD0  C0DE  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 22197  013CD4  C0DF  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 22198  013CD8  CFDE F0E5          	movff	postinc2,Port_CheckPairType@Props
 22199  013CDC  CFDD F0E6          	movff	postdec2,Port_CheckPairType@Props+1
 22200                           
 22201                           ; BSR set to: 0
 22202                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 22203  013CE0  0100               	movlb	0	; () banked
 22204  013CE2  51E0               	movf	Port_CheckPairType@pPair& (0+255),w,b
 22205  013CE4  0D02               	mullw	2
 22206  013CE6  CFF3 F0E2          	movff	prodl,Port_CheckPairType@Pin1
 22207                           
 22208                           ; BSR set to: 0
 22209                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 22210  013CEA  0100               	movlb	0	; () banked
 22211  013CEC  51E0               	movf	Port_CheckPairType@pPair& (0+255),w,b
 22212  013CEE  0D02               	mullw	2
 22213  013CF0  28F3               	incf	prodl,w,c
 22214  013CF2  0100               	movlb	0	; () banked
 22215  013CF4  6FE3               	movwf	Port_CheckPairType@Pin2& (0+255),b
 22216                           
 22217                           ; BSR set to: 0
 22218                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 22219  013CF6  C0E5  F0C7         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 22220  013CFA  C0E6  F0C8         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 22221  013CFE  C0E1  F0C9         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 22222  013D02  C0E2  F0CA         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 22223  013D06  ECF0  F09B         	call	_PortProperty_Valid	;wreg free
 22224  013D0A  0100               	movlb	0	; () banked
 22225  013D0C  6FE4               	movwf	Port_CheckPairType@Output& (0+255),b
 22226  013D0E  0100               	movlb	0	; () banked
 22227  013D10  51E4               	movf	Port_CheckPairType@Output& (0+255),w,b
 22228  013D12  A4D8               	btfss	status,2,c
 22229  013D14  D00C               	goto	l389
 22230                           
 22231                           ; BSR set to: 0
 22232                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 22233  013D16  C0E5  F0C7         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 22234  013D1A  C0E6  F0C8         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 22235  013D1E  C0E1  F0C9         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 22236  013D22  C0E3  F0CA         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 22237  013D26  ECF0  F09B         	call	_PortProperty_Valid	;wreg free
 22238  013D2A  0100               	movlb	0	; () banked
 22239  013D2C  6FE4               	movwf	Port_CheckPairType@Output& (0+255),b
 22240  013D2E                     l389:
 22241                           
 22242                           ; BSR set to: 0
 22243                           ;Port.c: 124: return Output;
 22244                           
 22245                           ; BSR set to: 0
 22246  013D2E  0100               	movlb	0	; () banked
 22247  013D30  51E4               	movf	Port_CheckPairType@Output& (0+255),w,b
 22248  013D32  0012               	return	
 22249  013D34                     __end_of_Port_CheckPairType:
 22250                           	opt stack 0
 22251                           tosu	equ	0xFFF
 22252                           tosh	equ	0xFFE
 22253                           tosl	equ	0xFFD
 22254                           pclath	equ	0xFFA
 22255                           tblptru	equ	0xFF8
 22256                           tblptrh	equ	0xFF7
 22257                           tblptrl	equ	0xFF6
 22258                           tablat	equ	0xFF5
 22259                           prodh	equ	0xFF4
 22260                           prodl	equ	0xFF3
 22261                           intcon	equ	0xFF2
 22262                           postinc0	equ	0xFEE
 22263                           plusw0	equ	0xFEB
 22264                           wreg	equ	0xFE8
 22265                           indf1	equ	0xFE7
 22266                           postdec1	equ	0xFE5
 22267                           fsr1h	equ	0xFE2
 22268                           fsr1l	equ	0xFE1
 22269                           indf2	equ	0xFDF
 22270                           postinc2	equ	0xFDE
 22271                           postdec2	equ	0xFDD
 22272                           plusw2	equ	0xFDB
 22273                           fsr2h	equ	0xFDA
 22274                           fsr2l	equ	0xFD9
 22275                           status	equ	0xFD8
 22276                           
 22277 ;; *************** function _PortProperty_Valid *****************
 22278 ;; Defined at:
 22279 ;;		line 220 in file "Library/Types.c"
 22280 ;; Parameters:    Size  Location     Type
 22281 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 22282 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22283 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22284 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22285 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22286 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 22287 ;;  pPin            1   18[BANK0 ] unsigned char 
 22288 ;; Auto vars:     Size  Location     Type
 22289 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 22290 ;;  Pair            1   37[BANK0 ] enum E6469
 22291 ;; Return value:  Size  Location     Type
 22292 ;;                  1    wreg      enum E6475
 22293 ;; Registers used:
 22294 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22295 ;; Tracked objects:
 22296 ;;		On entry : 0/0
 22297 ;;		On exit  : 0/0
 22298 ;;		Unchanged: 0/0
 22299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22300 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22301 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22302 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22303 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22304 ;;Total ram usage:       23 bytes
 22305 ;; Hardware stack levels used:    1
 22306 ;; Hardware stack levels required when called:   10
 22307 ;; This function calls:
 22308 ;;		_Word_GetPair
 22309 ;; This function is called by:
 22310 ;;		_Port_CheckPairType
 22311 ;;		_Port_SetPinType
 22312 ;; This function uses a non-reentrant model
 22313 ;;
 22314                           
 22315                           	psect	text125
 22316  0137E0                     __ptext125:
 22317                           	opt stack 0
 22318  0137E0                     _PortProperty_Valid:
 22319                           	opt stack 17
 22320                           
 22321                           ;Types.c: 222: ePinDrive Pair;
 22322                           ;Types.c: 223: const ePinError Errors[4][4] =
 22323                           ;Types.c: 224: {
 22324                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 22325                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 22326                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 22327                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 22328                           ;Types.c: 230: };
 22329                           
 22330                           ; BSR set to: 0
 22331                           ;incstack = 0
 22332  0137E0  0E59               	movlw	low PortProperty_Valid@F6830
 22333  0137E2  6EF6               	movwf	tblptrl,c
 22334  0137E4                     	if	1	;There is more than 1 active tblptr byte
 22335  0137E4  0EFD               	movlw	high PortProperty_Valid@F6830
 22336  0137E6  6EF7               	movwf	tblptrh,c
 22337  0137E8                     	endif
 22338  0137E8                     	if	1	;There are 3 active tblptr bytes
 22339  0137E8  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 22340  0137EA  6EF8               	movwf	tblptru,c
 22341  0137EC                     	endif
 22342  0137EC  EE20  F0CD         	lfsr	2,PortProperty_Valid@Errors
 22343  0137F0  0E0F               	movlw	15
 22344  0137F2                     u7030:
 22345  0137F2  0009               	tblrd		*+
 22346  0137F4  CFF5 FFDE          	movff	tablat,postinc2
 22347  0137F8  06E8               	decf	wreg,f,c
 22348  0137FA  E2FB               	bc	u7030
 22349                           
 22350                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 22351  0137FC  C0C7  F0C4         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 22352  013800  C0C8  F0C5         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 22353  013804  C0CA  F0C6         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 22354  013808  EC7E  F0A2         	call	_Word_GetPair	;wreg free
 22355  01380C  0100               	movlb	0	; () banked
 22356  01380E  6FDD               	movwf	PortProperty_Valid@Pair& (0+255),b
 22357                           
 22358                           ; BSR set to: 0
 22359                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 22360  013810  0E04               	movlw	4
 22361  013812  0100               	movlb	0	; () banked
 22362  013814  61C9               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 22363  013816  D020               	goto	l819
 22364                           
 22365                           ; BSR set to: 0
 22366  013818  0E04               	movlw	4
 22367  01381A  0100               	movlb	0	; () banked
 22368  01381C  61DD               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 22369  01381E  D01C               	goto	l819
 22370                           
 22371                           ; BSR set to: 0
 22372                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 22373  013820  0100               	movlb	0	; () banked
 22374  013822  51C9               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 22375  013824  0D04               	mullw	4
 22376  013826  0ECD               	movlw	low PortProperty_Valid@Errors
 22377  013828  0100               	movlb	0	; () banked
 22378  01382A  6FCB               	movwf	??_PortProperty_Valid& (0+255),b
 22379  01382C  0E00               	movlw	high PortProperty_Valid@Errors
 22380  01382E  0100               	movlb	0	; () banked
 22381  013830  6FCC               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 22382  013832  50F3               	movf	prodl,w,c
 22383  013834  0100               	movlb	0	; () banked
 22384  013836  27CB               	addwf	??_PortProperty_Valid& (0+255),f,b
 22385  013838  50F4               	movf	prodh,w,c
 22386  01383A  0100               	movlb	0	; () banked
 22387  01383C  23CC               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 22388  01383E  0100               	movlb	0	; () banked
 22389  013840  51DD               	movf	PortProperty_Valid@Pair& (0+255),w,b
 22390  013842  0D01               	mullw	1
 22391  013844  50F3               	movf	prodl,w,c
 22392  013846  0100               	movlb	0	; () banked
 22393  013848  25CB               	addwf	??_PortProperty_Valid& (0+255),w,b
 22394  01384A  6ED9               	movwf	fsr2l,c
 22395  01384C  50F4               	movf	prodh,w,c
 22396  01384E  0100               	movlb	0	; () banked
 22397  013850  21CC               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 22398  013852  6EDA               	movwf	fsr2h,c
 22399  013854  50DF               	movf	indf2,w,c
 22400                           
 22401                           ; BSR set to: 0
 22402  013856  0012               	return	
 22403  013858                     l819:
 22404                           
 22405                           ; BSR set to: 0
 22406                           ;Types.c: 237: return ePinErrorState;
 22407                           
 22408                           ; BSR set to: 0
 22409  013858  0E05               	movlw	5
 22410  01385A  0012               	return	
 22411  01385C                     __end_of_PortProperty_Valid:
 22412                           	opt stack 0
 22413                           tosu	equ	0xFFF
 22414                           tosh	equ	0xFFE
 22415                           tosl	equ	0xFFD
 22416                           pclath	equ	0xFFA
 22417                           tblptru	equ	0xFF8
 22418                           tblptrh	equ	0xFF7
 22419                           tblptrl	equ	0xFF6
 22420                           tablat	equ	0xFF5
 22421                           prodh	equ	0xFF4
 22422                           prodl	equ	0xFF3
 22423                           intcon	equ	0xFF2
 22424                           postinc0	equ	0xFEE
 22425                           plusw0	equ	0xFEB
 22426                           wreg	equ	0xFE8
 22427                           indf1	equ	0xFE7
 22428                           postdec1	equ	0xFE5
 22429                           fsr1h	equ	0xFE2
 22430                           fsr1l	equ	0xFE1
 22431                           indf2	equ	0xFDF
 22432                           postinc2	equ	0xFDE
 22433                           postdec2	equ	0xFDD
 22434                           plusw2	equ	0xFDB
 22435                           fsr2h	equ	0xFDA
 22436                           fsr2l	equ	0xFD9
 22437                           status	equ	0xFD8
 22438                           
 22439 ;; *************** function _Word_GetPair *****************
 22440 ;; Defined at:
 22441 ;;		line 156 in file "Library/Types.c"
 22442 ;; Parameters:    Size  Location     Type
 22443 ;;  pInput          2   12[BANK0 ] PTR struct Word
 22444 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22445 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 22446 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 22447 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22448 ;;  pPair           1   14[BANK0 ] unsigned char 
 22449 ;; Auto vars:     Size  Location     Type
 22450 ;;		None
 22451 ;; Return value:  Size  Location     Type
 22452 ;;                  1    wreg      unsigned char 
 22453 ;; Registers used:
 22454 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22455 ;; Tracked objects:
 22456 ;;		On entry : 0/0
 22457 ;;		On exit  : 0/0
 22458 ;;		Unchanged: 0/0
 22459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22460 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22463 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22464 ;;Total ram usage:        3 bytes
 22465 ;; Hardware stack levels used:    1
 22466 ;; Hardware stack levels required when called:    9
 22467 ;; This function calls:
 22468 ;;		_Byte_GetPair
 22469 ;; This function is called by:
 22470 ;;		_Port_Init
 22471 ;;		_Port_SetPin
 22472 ;;		_Port_Set
 22473 ;;		_PortProperty_Valid
 22474 ;;		_Port_SetPair
 22475 ;;		_Port_SetQuad
 22476 ;; This function uses a non-reentrant model
 22477 ;;
 22478                           
 22479                           	psect	text126
 22480  0144FC                     __ptext126:
 22481                           	opt stack 0
 22482  0144FC                     _Word_GetPair:
 22483                           	opt stack 10
 22484                           
 22485                           ;Types.c: 158: if (pPair >= 4)
 22486                           
 22487                           ; BSR set to: 0
 22488                           ;incstack = 0
 22489  0144FC  0E03               	movlw	3
 22490  0144FE  0100               	movlb	0	; () banked
 22491  014500  65C6               	cpfsgt	Word_GetPair@pPair& (0+255),b
 22492  014502  D012               	goto	l781
 22493                           
 22494                           ; BSR set to: 0
 22495                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 22496  014504  0E01               	movlw	1
 22497  014506  0100               	movlb	0	; () banked
 22498  014508  25C4               	addwf	Word_GetPair@pInput& (0+255),w,b
 22499  01450A  0100               	movlb	0	; () banked
 22500  01450C  6FC1               	movwf	Byte_GetPair@pInput& (0+255),b
 22501  01450E  0E00               	movlw	0
 22502  014510  0100               	movlb	0	; () banked
 22503  014512  21C5               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 22504  014514  0100               	movlb	0	; () banked
 22505  014516  6FC2               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 22506  014518  0100               	movlb	0	; () banked
 22507  01451A  51C6               	movf	Word_GetPair@pPair& (0+255),w,b
 22508  01451C  0FFC               	addlw	252
 22509  01451E  0100               	movlb	0	; () banked
 22510  014520  6FC3               	movwf	Byte_GetPair@pPair& (0+255),b
 22511  014522  EC1D  F0A5         	call	_Byte_GetPair	;wreg free
 22512  014526  0012               	return	
 22513  014528                     l781:
 22514                           
 22515                           ;Types.c: 160: else
 22516                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 22517  014528  C0C4  F0C1         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 22518  01452C  C0C5  F0C2         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 22519  014530  C0C6  F0C3         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 22520  014534  EC1D  F0A5         	call	_Byte_GetPair	;wreg free
 22521  014538  0012               	return	
 22522  01453A                     __end_of_Word_GetPair:
 22523                           	opt stack 0
 22524                           tosu	equ	0xFFF
 22525                           tosh	equ	0xFFE
 22526                           tosl	equ	0xFFD
 22527                           pclath	equ	0xFFA
 22528                           tblptru	equ	0xFF8
 22529                           tblptrh	equ	0xFF7
 22530                           tblptrl	equ	0xFF6
 22531                           tablat	equ	0xFF5
 22532                           prodh	equ	0xFF4
 22533                           prodl	equ	0xFF3
 22534                           intcon	equ	0xFF2
 22535                           postinc0	equ	0xFEE
 22536                           plusw0	equ	0xFEB
 22537                           wreg	equ	0xFE8
 22538                           indf1	equ	0xFE7
 22539                           postdec1	equ	0xFE5
 22540                           fsr1h	equ	0xFE2
 22541                           fsr1l	equ	0xFE1
 22542                           indf2	equ	0xFDF
 22543                           postinc2	equ	0xFDE
 22544                           postdec2	equ	0xFDD
 22545                           plusw2	equ	0xFDB
 22546                           fsr2h	equ	0xFDA
 22547                           fsr2l	equ	0xFD9
 22548                           status	equ	0xFD8
 22549                           
 22550 ;; *************** function _Byte_GetPair *****************
 22551 ;; Defined at:
 22552 ;;		line 87 in file "Library/Types.c"
 22553 ;; Parameters:    Size  Location     Type
 22554 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 22555 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22556 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22557 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22558 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22559 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22560 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22561 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22562 ;;		 -> NULL(0), 
 22563 ;;  pPair           1   11[BANK0 ] unsigned char 
 22564 ;; Auto vars:     Size  Location     Type
 22565 ;;		None
 22566 ;; Return value:  Size  Location     Type
 22567 ;;                  1    wreg      unsigned char 
 22568 ;; Registers used:
 22569 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22570 ;; Tracked objects:
 22571 ;;		On entry : 0/0
 22572 ;;		On exit  : 0/0
 22573 ;;		Unchanged: 0/0
 22574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22575 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22578 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22579 ;;Total ram usage:        3 bytes
 22580 ;; Hardware stack levels used:    1
 22581 ;; Hardware stack levels required when called:    8
 22582 ;; This function calls:
 22583 ;;		_Byte_GetZone
 22584 ;; This function is called by:
 22585 ;;		_Word_GetPair
 22586 ;; This function uses a non-reentrant model
 22587 ;;
 22588                           
 22589                           	psect	text127
 22590  014A3A                     __ptext127:
 22591                           	opt stack 0
 22592  014A3A                     _Byte_GetPair:
 22593                           	opt stack 10
 22594                           
 22595                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 22596                           
 22597                           ;incstack = 0
 22598  014A3A  C0C1  F0B8         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 22599  014A3E  C0C2  F0B9         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 22600  014A42  0E04               	movlw	4
 22601  014A44  0100               	movlb	0	; () banked
 22602  014A46  6FBA               	movwf	Byte_GetZone@pMax& (0+255),b
 22603  014A48  C0C3  F0BB         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 22604  014A4C  0E02               	movlw	2
 22605  014A4E  0100               	movlb	0	; () banked
 22606  014A50  6FBC               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 22607  014A52  ECF0  F099         	call	_Byte_GetZone	;wreg free
 22608  014A56  0012               	return	
 22609  014A58                     __end_of_Byte_GetPair:
 22610                           	opt stack 0
 22611                           tosu	equ	0xFFF
 22612                           tosh	equ	0xFFE
 22613                           tosl	equ	0xFFD
 22614                           pclath	equ	0xFFA
 22615                           tblptru	equ	0xFF8
 22616                           tblptrh	equ	0xFF7
 22617                           tblptrl	equ	0xFF6
 22618                           tablat	equ	0xFF5
 22619                           prodh	equ	0xFF4
 22620                           prodl	equ	0xFF3
 22621                           intcon	equ	0xFF2
 22622                           postinc0	equ	0xFEE
 22623                           plusw0	equ	0xFEB
 22624                           wreg	equ	0xFE8
 22625                           indf1	equ	0xFE7
 22626                           postdec1	equ	0xFE5
 22627                           fsr1h	equ	0xFE2
 22628                           fsr1l	equ	0xFE1
 22629                           indf2	equ	0xFDF
 22630                           postinc2	equ	0xFDE
 22631                           postdec2	equ	0xFDD
 22632                           plusw2	equ	0xFDB
 22633                           fsr2h	equ	0xFDA
 22634                           fsr2l	equ	0xFD9
 22635                           status	equ	0xFD8
 22636                           
 22637 ;; *************** function _Byte_GetZone *****************
 22638 ;; Defined at:
 22639 ;;		line 64 in file "Library/Types.c"
 22640 ;; Parameters:    Size  Location     Type
 22641 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22642 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 22643 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 22644 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 22645 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 22646 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 22647 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 22648 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 22649 ;;		 -> NULL(0), 
 22650 ;;  pMax            1    2[BANK0 ] unsigned char 
 22651 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22652 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22653 ;; Auto vars:     Size  Location     Type
 22654 ;;  Output          1    8[BANK0 ] unsigned char 
 22655 ;;  Offset          1    7[BANK0 ] unsigned char 
 22656 ;;  MASK            1    6[BANK0 ] unsigned char 
 22657 ;; Return value:  Size  Location     Type
 22658 ;;                  1    wreg      unsigned char 
 22659 ;; Registers used:
 22660 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22661 ;; Tracked objects:
 22662 ;;		On entry : 0/0
 22663 ;;		On exit  : 0/0
 22664 ;;		Unchanged: 0/0
 22665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22666 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22667 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22668 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22669 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22670 ;;Total ram usage:        9 bytes
 22671 ;; Hardware stack levels used:    1
 22672 ;; Hardware stack levels required when called:    7
 22673 ;; This function calls:
 22674 ;;		Nothing
 22675 ;; This function is called by:
 22676 ;;		_Byte_GetPair
 22677 ;;		_Byte_GetTriple
 22678 ;;		_Byte_GetQuad
 22679 ;; This function uses a non-reentrant model
 22680 ;;
 22681                           
 22682                           	psect	text128
 22683  0133E0                     __ptext128:
 22684                           	opt stack 0
 22685  0133E0                     _Byte_GetZone:
 22686                           	opt stack 10
 22687                           
 22688                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 22689                           
 22690                           ;incstack = 0
 22691  0133E0  C0B8  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 22692  0133E4  C0B9  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 22693  0133E8  0E00               	movlw	low (__mediumconst shr (0+16))
 22694  0133EA  6EF8               	movwf	tblptru,c
 22695  0133EC  0E0F               	movlw	(high __ramtop+-1)
 22696  0133EE  64F7               	cpfsgt	tblptrh,c
 22697  0133F0  D003               	bra	u6597
 22698  0133F2  0008               	tblrd		*
 22699  0133F4  50F5               	movf	tablat,w,c
 22700  0133F6  D005               	bra	u6590
 22701  0133F8                     u6597:
 22702  0133F8  CFF6 FFE9          	movff	tblptrl,fsr0l
 22703  0133FC  CFF7 FFEA          	movff	tblptrh,fsr0h
 22704  013400  50EF               	movf	indf0,w,c
 22705  013402                     u6590:
 22706  013402  0100               	movlb	0	; () banked
 22707  013404  6FC0               	movwf	Byte_GetZone@Output& (0+255),b
 22708                           
 22709                           ; BSR set to: 0
 22710                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 22711  013406  0100               	movlb	0	; () banked
 22712  013408  51BC               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22713  01340A  0D01               	mullw	1
 22714  01340C  0E69               	movlw	low _MASKS
 22715  01340E  24F3               	addwf	prodl,w,c
 22716  013410  6EF6               	movwf	tblptrl,c
 22717  013412  0EFD               	movlw	high _MASKS
 22718  013414  20F4               	addwfc	prodh,w,c
 22719  013416  6EF7               	movwf	tblptrh,c
 22720  013418                     	if	1	;There are 3 active tblptr bytes
 22721  013418  6AF8               	clrf	tblptru,c
 22722  01341A  0E00               	movlw	low (__mediumconst shr (0+16))
 22723  01341C  22F8               	addwfc	tblptru,f,c
 22724  01341E                     	endif
 22725  01341E  0008               	tblrd		*
 22726  013420  CFF5 F0BE          	movff	tablat,Byte_GetZone@MASK
 22727                           
 22728                           ; BSR set to: 0
 22729                           ;Types.c: 68: UINT8 Offset = 0;
 22730  013424  0E00               	movlw	0
 22731  013426  0100               	movlb	0	; () banked
 22732  013428  6FBF               	movwf	Byte_GetZone@Offset& (0+255),b
 22733                           
 22734                           ;Types.c: 70: while (pChunk >= pMax)
 22735  01342A  D006               	goto	l732
 22736  01342C                     
 22737                           ; BSR set to: 0
 22738                           ;Types.c: 71: {
 22739                           ;Types.c: 72: pChunk -= pMax;
 22740                           
 22741                           ; BSR set to: 0
 22742  01342C  0100               	movlb	0	; () banked
 22743  01342E  51BA               	movf	Byte_GetZone@pMax& (0+255),w,b
 22744  013430  0100               	movlb	0	; () banked
 22745  013432  5FBB               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 22746                           
 22747                           ; BSR set to: 0
 22748                           ;Types.c: 73: Offset += 1;
 22749  013434  0100               	movlb	0	; () banked
 22750  013436  2BBF               	incf	Byte_GetZone@Offset& (0+255),f,b
 22751  013438                     l732:
 22752                           
 22753                           ; BSR set to: 0
 22754                           
 22755                           ; BSR set to: 0
 22756  013438  0100               	movlb	0	; () banked
 22757  01343A  51BA               	movf	Byte_GetZone@pMax& (0+255),w,b
 22758  01343C  0100               	movlb	0	; () banked
 22759  01343E  5DBB               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 22760  013440  B0D8               	btfsc	status,0,c
 22761  013442  D7F4               	goto	l733
 22762                           
 22763                           ; BSR set to: 0
 22764                           ;Types.c: 74: }
 22765                           ;Types.c: 75: pChunk *= pChunkSize;
 22766                           
 22767                           ; BSR set to: 0
 22768  013444  0100               	movlb	0	; () banked
 22769  013446  51BC               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 22770  013448  0100               	movlb	0	; () banked
 22771  01344A  03BB               	mulwf	Byte_GetZone@pChunk& (0+255),b
 22772  01344C  50F3               	movf	prodl,w,c
 22773  01344E  6FBB               	movwf	Byte_GetZone@pChunk& (0+255),b
 22774                           
 22775                           ; BSR set to: 0
 22776                           ;Types.c: 76: pChunk += Offset;
 22777  013450  0100               	movlb	0	; () banked
 22778  013452  51BF               	movf	Byte_GetZone@Offset& (0+255),w,b
 22779  013454  0100               	movlb	0	; () banked
 22780  013456  27BB               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 22781                           
 22782                           ; BSR set to: 0
 22783                           ;Types.c: 78: Output >>= pChunk;
 22784  013458  0100               	movlb	0	; () banked
 22785  01345A  29BB               	incf	Byte_GetZone@pChunk& (0+255),w,b
 22786  01345C  0100               	movlb	0	; () banked
 22787  01345E  6FBD               	movwf	??_Byte_GetZone& (0+255),b
 22788  013460  D003               	goto	u6610
 22789  013462                     u6615:
 22790  013462  0100               	movlb	0	; () banked
 22791  013464  90D8               	bcf	status,0,c
 22792  013466  33C0               	rrcf	Byte_GetZone@Output& (0+255),f,b
 22793  013468                     u6610:
 22794  013468  0100               	movlb	0	; () banked
 22795  01346A  2FBD               	decfsz	??_Byte_GetZone& (0+255),f,b
 22796  01346C  D7FA               	goto	u6615
 22797                           
 22798                           ;Types.c: 79: Output &= MASK;
 22799  01346E  0100               	movlb	0	; () banked
 22800  013470  51BE               	movf	Byte_GetZone@MASK& (0+255),w,b
 22801  013472  0100               	movlb	0	; () banked
 22802  013474  17C0               	andwf	Byte_GetZone@Output& (0+255),f,b
 22803                           
 22804                           ; BSR set to: 0
 22805                           ;Types.c: 80: return Output;
 22806  013476  0100               	movlb	0	; () banked
 22807  013478  51C0               	movf	Byte_GetZone@Output& (0+255),w,b
 22808  01347A  0012               	return	
 22809  01347C                     __end_of_Byte_GetZone:
 22810                           	opt stack 0
 22811                           tosu	equ	0xFFF
 22812                           tosh	equ	0xFFE
 22813                           tosl	equ	0xFFD
 22814                           pclath	equ	0xFFA
 22815                           tblptru	equ	0xFF8
 22816                           tblptrh	equ	0xFF7
 22817                           tblptrl	equ	0xFF6
 22818                           tablat	equ	0xFF5
 22819                           prodh	equ	0xFF4
 22820                           prodl	equ	0xFF3
 22821                           intcon	equ	0xFF2
 22822                           indf0	equ	0xFEF
 22823                           postinc0	equ	0xFEE
 22824                           plusw0	equ	0xFEB
 22825                           fsr0h	equ	0xFEA
 22826                           fsr0l	equ	0xFE9
 22827                           wreg	equ	0xFE8
 22828                           indf1	equ	0xFE7
 22829                           postdec1	equ	0xFE5
 22830                           fsr1h	equ	0xFE2
 22831                           fsr1l	equ	0xFE1
 22832                           indf2	equ	0xFDF
 22833                           postinc2	equ	0xFDE
 22834                           postdec2	equ	0xFDD
 22835                           plusw2	equ	0xFDB
 22836                           fsr2h	equ	0xFDA
 22837                           fsr2l	equ	0xFD9
 22838                           status	equ	0xFD8
 22839                           
 22840 ;; *************** function _Byte_SetQuad *****************
 22841 ;; Defined at:
 22842 ;;		line 101 in file "Library/Types.c"
 22843 ;; Parameters:    Size  Location     Type
 22844 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 22845 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 22846 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22847 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22848 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22849 ;;		 -> NULL(0), 
 22850 ;;  pQuad           1   13[BANK0 ] unsigned char 
 22851 ;;  pValue          1   14[BANK0 ] unsigned char 
 22852 ;; Auto vars:     Size  Location     Type
 22853 ;;		None
 22854 ;; Return value:  Size  Location     Type
 22855 ;;                  1    wreg      void 
 22856 ;; Registers used:
 22857 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22858 ;; Tracked objects:
 22859 ;;		On entry : 0/0
 22860 ;;		On exit  : 0/0
 22861 ;;		Unchanged: 0/0
 22862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22863 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22866 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22867 ;;Total ram usage:        4 bytes
 22868 ;; Hardware stack levels used:    1
 22869 ;; Hardware stack levels required when called:    8
 22870 ;; This function calls:
 22871 ;;		_Byte_SetZone
 22872 ;; This function is called by:
 22873 ;;		_Port_SetQuadType
 22874 ;;		_SPI_Init
 22875 ;;		_SPI_MinSpeed
 22876 ;;		_SPI_MaxSpeed
 22877 ;;		_Port_SetQuad
 22878 ;;		_Word_SetQuad
 22879 ;;		_I2C_Init
 22880 ;; This function uses a non-reentrant model
 22881 ;;
 22882                           
 22883                           	psect	text129
 22884  014944                     __ptext129:
 22885                           	opt stack 0
 22886  014944                     _Byte_SetQuad:
 22887                           	opt stack 19
 22888                           
 22889                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 22890                           
 22891                           ; BSR set to: 0
 22892                           ;incstack = 0
 22893  014944  C0C3  F0B8         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 22894  014948  C0C4  F0B9         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 22895  01494C  0E02               	movlw	2
 22896  01494E  0100               	movlb	0	; () banked
 22897  014950  6FBA               	movwf	Byte_SetZone@pMax& (0+255),b
 22898  014952  C0C5  F0BB         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 22899  014956  0E04               	movlw	4
 22900  014958  0100               	movlb	0	; () banked
 22901  01495A  6FBC               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 22902  01495C  C0C6  F0BD         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 22903  014960  ECA9  F096         	call	_Byte_SetZone	;wreg free
 22904  014964  0012               	return		;funcret
 22905  014966                     __end_of_Byte_SetQuad:
 22906                           	opt stack 0
 22907                           tosu	equ	0xFFF
 22908                           tosh	equ	0xFFE
 22909                           tosl	equ	0xFFD
 22910                           pclath	equ	0xFFA
 22911                           tblptru	equ	0xFF8
 22912                           tblptrh	equ	0xFF7
 22913                           tblptrl	equ	0xFF6
 22914                           tablat	equ	0xFF5
 22915                           prodh	equ	0xFF4
 22916                           prodl	equ	0xFF3
 22917                           intcon	equ	0xFF2
 22918                           indf0	equ	0xFEF
 22919                           postinc0	equ	0xFEE
 22920                           plusw0	equ	0xFEB
 22921                           fsr0h	equ	0xFEA
 22922                           fsr0l	equ	0xFE9
 22923                           wreg	equ	0xFE8
 22924                           indf1	equ	0xFE7
 22925                           postdec1	equ	0xFE5
 22926                           fsr1h	equ	0xFE2
 22927                           fsr1l	equ	0xFE1
 22928                           indf2	equ	0xFDF
 22929                           postinc2	equ	0xFDE
 22930                           postdec2	equ	0xFDD
 22931                           plusw2	equ	0xFDB
 22932                           fsr2h	equ	0xFDA
 22933                           fsr2l	equ	0xFD9
 22934                           status	equ	0xFD8
 22935                           
 22936 ;; *************** function _Byte_SetZone *****************
 22937 ;; Defined at:
 22938 ;;		line 47 in file "Library/Types.c"
 22939 ;; Parameters:    Size  Location     Type
 22940 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22941 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 22942 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 22943 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 22944 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 22945 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 22946 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 22947 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 22948 ;;		 -> PortC(10), PortF(10), NULL(0), 
 22949 ;;  pMax            1    2[BANK0 ] unsigned char 
 22950 ;;  pChunk          1    3[BANK0 ] unsigned char 
 22951 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 22952 ;;  pValue          1    5[BANK0 ] unsigned char 
 22953 ;; Auto vars:     Size  Location     Type
 22954 ;;  MASK            1   10[BANK0 ] unsigned char 
 22955 ;;  Offset          1    9[BANK0 ] unsigned char 
 22956 ;; Return value:  Size  Location     Type
 22957 ;;                  1    wreg      void 
 22958 ;; Registers used:
 22959 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 22960 ;; Tracked objects:
 22961 ;;		On entry : 0/0
 22962 ;;		On exit  : 0/0
 22963 ;;		Unchanged: 0/0
 22964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22965 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22967 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22968 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22969 ;;Total ram usage:       11 bytes
 22970 ;; Hardware stack levels used:    1
 22971 ;; Hardware stack levels required when called:    7
 22972 ;; This function calls:
 22973 ;;		Nothing
 22974 ;; This function is called by:
 22975 ;;		_Byte_SetPair
 22976 ;;		_Byte_SetQuad
 22977 ;;		_Byte_SetTriple
 22978 ;; This function uses a non-reentrant model
 22979 ;;
 22980                           
 22981                           	psect	text130
 22982  012D52                     __ptext130:
 22983                           	opt stack 0
 22984  012D52                     _Byte_SetZone:
 22985                           	opt stack 18
 22986                           
 22987                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 22988                           
 22989                           ;incstack = 0
 22990  012D52  0100               	movlb	0	; () banked
 22991  012D54  51BC               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 22992  012D56  0D01               	mullw	1
 22993  012D58  0E69               	movlw	low _MASKS
 22994  012D5A  24F3               	addwf	prodl,w,c
 22995  012D5C  6EF6               	movwf	tblptrl,c
 22996  012D5E  0EFD               	movlw	high _MASKS
 22997  012D60  20F4               	addwfc	prodh,w,c
 22998  012D62  6EF7               	movwf	tblptrh,c
 22999  012D64                     	if	1	;There are 3 active tblptr bytes
 23000  012D64  6AF8               	clrf	tblptru,c
 23001  012D66  0E00               	movlw	low (__mediumconst shr (0+16))
 23002  012D68  22F8               	addwfc	tblptru,f,c
 23003  012D6A                     	endif
 23004  012D6A  0008               	tblrd		*
 23005  012D6C  CFF5 F0C2          	movff	tablat,Byte_SetZone@MASK
 23006                           
 23007                           ; BSR set to: 0
 23008                           ;Types.c: 50: UINT8 Offset = 0;
 23009  012D70  0E00               	movlw	0
 23010  012D72  0100               	movlb	0	; () banked
 23011  012D74  6FC1               	movwf	Byte_SetZone@Offset& (0+255),b
 23012                           
 23013                           ;Types.c: 52: while (pChunk >= pMax)
 23014  012D76  D006               	goto	l726
 23015  012D78                     
 23016                           ; BSR set to: 0
 23017                           ;Types.c: 53: {
 23018                           ;Types.c: 54: pChunk -= pMax;
 23019                           
 23020                           ; BSR set to: 0
 23021  012D78  0100               	movlb	0	; () banked
 23022  012D7A  51BA               	movf	Byte_SetZone@pMax& (0+255),w,b
 23023  012D7C  0100               	movlb	0	; () banked
 23024  012D7E  5FBB               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23025                           
 23026                           ; BSR set to: 0
 23027                           ;Types.c: 55: Offset += 1;
 23028  012D80  0100               	movlb	0	; () banked
 23029  012D82  2BC1               	incf	Byte_SetZone@Offset& (0+255),f,b
 23030  012D84                     l726:
 23031                           
 23032                           ; BSR set to: 0
 23033                           
 23034                           ; BSR set to: 0
 23035  012D84  0100               	movlb	0	; () banked
 23036  012D86  51BA               	movf	Byte_SetZone@pMax& (0+255),w,b
 23037  012D88  0100               	movlb	0	; () banked
 23038  012D8A  5DBB               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23039  012D8C  B0D8               	btfsc	status,0,c
 23040  012D8E  D7F4               	goto	l727
 23041                           
 23042                           ; BSR set to: 0
 23043                           ;Types.c: 56: }
 23044                           ;Types.c: 57: pChunk *= pChunkSize;
 23045                           
 23046                           ; BSR set to: 0
 23047  012D90  0100               	movlb	0	; () banked
 23048  012D92  51BC               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23049  012D94  0100               	movlb	0	; () banked
 23050  012D96  03BB               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23051  012D98  50F3               	movf	prodl,w,c
 23052  012D9A  6FBB               	movwf	Byte_SetZone@pChunk& (0+255),b
 23053                           
 23054                           ; BSR set to: 0
 23055                           ;Types.c: 58: pChunk += Offset;
 23056  012D9C  0100               	movlb	0	; () banked
 23057  012D9E  51C1               	movf	Byte_SetZone@Offset& (0+255),w,b
 23058  012DA0  0100               	movlb	0	; () banked
 23059  012DA2  27BB               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23060                           
 23061                           ; BSR set to: 0
 23062                           ;Types.c: 60: pValue &= MASK;
 23063  012DA4  0100               	movlb	0	; () banked
 23064  012DA6  51C2               	movf	Byte_SetZone@MASK& (0+255),w,b
 23065  012DA8  0100               	movlb	0	; () banked
 23066  012DAA  17BD               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23067                           
 23068                           ; BSR set to: 0
 23069                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23070  012DAC  C0BB  F0BE         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23071  012DB0  C0C2  F0BF         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23072  012DB4  0100               	movlb	0	; () banked
 23073  012DB6  2BBE               	incf	??_Byte_SetZone& (0+255),f,b
 23074  012DB8  D003               	goto	u7074
 23075  012DBA                     u7075:
 23076  012DBA  0100               	movlb	0	; () banked
 23077  012DBC  90D8               	bcf	status,0,c
 23078  012DBE  37BF               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23079  012DC0                     u7074:
 23080  012DC0  0100               	movlb	0	; () banked
 23081  012DC2  2FBE               	decfsz	??_Byte_SetZone& (0+255),f,b
 23082  012DC4  D7FA               	goto	u7075
 23083  012DC6  0100               	movlb	0	; () banked
 23084  012DC8  51BF               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23085  012DCA  0AFF               	xorlw	255
 23086  012DCC  0100               	movlb	0	; () banked
 23087  012DCE  6FC0               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23088  012DD0  C0B8  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23089  012DD4  C0B9  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23090  012DD8  0100               	movlb	0	; () banked
 23091  012DDA  51C0               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23092  012DDC  16DF               	andwf	indf2,f,c
 23093                           
 23094                           ; BSR set to: 0
 23095                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23096  012DDE  C0BB  F0BE         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23097  012DE2  C0BD  F0BF         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23098  012DE6  0100               	movlb	0	; () banked
 23099  012DE8  2BBE               	incf	??_Byte_SetZone& (0+255),f,b
 23100  012DEA  D003               	goto	u7084
 23101  012DEC                     u7085:
 23102  012DEC  0100               	movlb	0	; () banked
 23103  012DEE  90D8               	bcf	status,0,c
 23104  012DF0  37BF               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23105  012DF2                     u7084:
 23106  012DF2  0100               	movlb	0	; () banked
 23107  012DF4  2FBE               	decfsz	??_Byte_SetZone& (0+255),f,b
 23108  012DF6  D7FA               	goto	u7085
 23109  012DF8  C0B8  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23110  012DFC  C0B9  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23111  012E00  0100               	movlb	0	; () banked
 23112  012E02  51BF               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23113  012E04  12DF               	iorwf	indf2,f,c
 23114                           
 23115                           ; BSR set to: 0
 23116  012E06  0012               	return		;funcret
 23117  012E08                     __end_of_Byte_SetZone:
 23118                           	opt stack 0
 23119                           tosu	equ	0xFFF
 23120                           tosh	equ	0xFFE
 23121                           tosl	equ	0xFFD
 23122                           pclath	equ	0xFFA
 23123                           tblptru	equ	0xFF8
 23124                           tblptrh	equ	0xFF7
 23125                           tblptrl	equ	0xFF6
 23126                           tablat	equ	0xFF5
 23127                           prodh	equ	0xFF4
 23128                           prodl	equ	0xFF3
 23129                           intcon	equ	0xFF2
 23130                           indf0	equ	0xFEF
 23131                           postinc0	equ	0xFEE
 23132                           plusw0	equ	0xFEB
 23133                           fsr0h	equ	0xFEA
 23134                           fsr0l	equ	0xFE9
 23135                           wreg	equ	0xFE8
 23136                           indf1	equ	0xFE7
 23137                           postdec1	equ	0xFE5
 23138                           fsr1h	equ	0xFE2
 23139                           fsr1l	equ	0xFE1
 23140                           indf2	equ	0xFDF
 23141                           postinc2	equ	0xFDE
 23142                           postdec2	equ	0xFDD
 23143                           plusw2	equ	0xFDB
 23144                           fsr2h	equ	0xFDA
 23145                           fsr2l	equ	0xFD9
 23146                           status	equ	0xFD8
 23147                           
 23148 ;; *************** function _Console_Init *****************
 23149 ;; Defined at:
 23150 ;;		line 157 in file "Library/Console.c"
 23151 ;; Parameters:    Size  Location     Type
 23152 ;;		None
 23153 ;; Auto vars:     Size  Location     Type
 23154 ;;  y               1    3[BANK0 ] unsigned char 
 23155 ;;  x               1    2[BANK0 ] unsigned char 
 23156 ;; Return value:  Size  Location     Type
 23157 ;;                  1    wreg      void 
 23158 ;; Registers used:
 23159 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23160 ;; Tracked objects:
 23161 ;;		On entry : 0/0
 23162 ;;		On exit  : 0/0
 23163 ;;		Unchanged: 0/0
 23164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23166 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23167 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23168 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23169 ;;Total ram usage:        4 bytes
 23170 ;; Hardware stack levels used:    1
 23171 ;; Hardware stack levels required when called:    7
 23172 ;; This function calls:
 23173 ;;		Nothing
 23174 ;; This function is called by:
 23175 ;;		_initialise
 23176 ;; This function uses a non-reentrant model
 23177 ;;
 23178                           
 23179                           	psect	text131
 23180  013756                     __ptext131:
 23181                           	opt stack 0
 23182  013756                     _Console_Init:
 23183                           	opt stack 22
 23184                           
 23185                           ;Console.c: 160: lBufferX = 0;
 23186                           
 23187                           ; BSR set to: 0
 23188                           ;incstack = 0
 23189  013756  0E00               	movlw	0
 23190  013758  0100               	movlb	0	; () banked
 23191  01375A  6F7B               	movwf	_lBufferX& (0+255),b
 23192                           
 23193                           ;Console.c: 161: lBufferY = 0;
 23194  01375C  0E00               	movlw	0
 23195  01375E  0100               	movlb	0	; () banked
 23196  013760  6F7A               	movwf	_lBufferY& (0+255),b
 23197                           
 23198                           ;Console.c: 163: UINT8 x, y;
 23199                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23200  013762  0E00               	movlw	0
 23201  013764  0100               	movlb	0	; () banked
 23202  013766  6FBA               	movwf	Console_Init@x& (0+255),b
 23203  013768                     l11933:
 23204                           
 23205                           ; BSR set to: 0
 23206  013768  0E13               	movlw	19
 23207  01376A  0100               	movlb	0	; () banked
 23208  01376C  65BA               	cpfsgt	Console_Init@x& (0+255),b
 23209  01376E  D001               	goto	l976
 23210  013770  0012               	return	
 23211  013772                     l976:
 23212                           
 23213                           ; BSR set to: 0
 23214                           ;Console.c: 165: {
 23215                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23216                           
 23217                           ; BSR set to: 0
 23218  013772  0E00               	movlw	0
 23219  013774  0100               	movlb	0	; () banked
 23220  013776  6FBB               	movwf	Console_Init@y& (0+255),b
 23221  013778                     l11939:
 23222                           
 23223                           ; BSR set to: 0
 23224  013778  0E0E               	movlw	14
 23225  01377A  0100               	movlb	0	; () banked
 23226  01377C  65BB               	cpfsgt	Console_Init@y& (0+255),b
 23227  01377E  D001               	goto	l978
 23228  013780  D02C               	goto	u8360
 23229  013782                     l978:
 23230                           
 23231                           ; BSR set to: 0
 23232                           ;Console.c: 167: {
 23233                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23234                           
 23235                           ; BSR set to: 0
 23236  013782  0100               	movlb	0	; () banked
 23237  013784  51BB               	movf	Console_Init@y& (0+255),w,b
 23238  013786  0D14               	mullw	20
 23239  013788  0E46               	movlw	low _lBuffer
 23240  01378A  0100               	movlb	0	; () banked
 23241  01378C  6FB8               	movwf	??_Console_Init& (0+255),b
 23242  01378E  0E02               	movlw	high _lBuffer
 23243  013790  0100               	movlb	0	; () banked
 23244  013792  6FB9               	movwf	(??_Console_Init+1)& (0+255),b
 23245  013794  50F3               	movf	prodl,w,c
 23246  013796  0100               	movlb	0	; () banked
 23247  013798  27B8               	addwf	??_Console_Init& (0+255),f,b
 23248  01379A  50F4               	movf	prodh,w,c
 23249  01379C  0100               	movlb	0	; () banked
 23250  01379E  23B9               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23251  0137A0  0100               	movlb	0	; () banked
 23252  0137A2  51BA               	movf	Console_Init@x& (0+255),w,b
 23253  0137A4  0D01               	mullw	1
 23254  0137A6  50F3               	movf	prodl,w,c
 23255  0137A8  0100               	movlb	0	; () banked
 23256  0137AA  25B8               	addwf	??_Console_Init& (0+255),w,b
 23257  0137AC  6ED9               	movwf	fsr2l,c
 23258  0137AE  50F4               	movf	prodh,w,c
 23259  0137B0  0100               	movlb	0	; () banked
 23260  0137B2  21B9               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23261  0137B4  6EDA               	movwf	fsr2h,c
 23262  0137B6  0E00               	movlw	0
 23263  0137B8  6EDF               	movwf	indf2,c
 23264                           
 23265                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23266  0137BA  0100               	movlb	0	; () banked
 23267  0137BC  51BB               	movf	Console_Init@y& (0+255),w,b
 23268  0137BE  0D02               	mullw	2
 23269  0137C0  0E00               	movlw	low _lCBuffer
 23270  0137C2  24F3               	addwf	prodl,w,c
 23271  0137C4  6ED9               	movwf	fsr2l,c
 23272  0137C6  0E01               	movlw	high _lCBuffer
 23273  0137C8  20F4               	addwfc	prodh,w,c
 23274  0137CA  6EDA               	movwf	fsr2h,c
 23275  0137CC  0EFF               	movlw	255
 23276  0137CE  6EDE               	movwf	postinc2,c
 23277  0137D0  0EFF               	movlw	255
 23278  0137D2  6EDD               	movwf	postdec2,c
 23279                           
 23280                           ; BSR set to: 0
 23281  0137D4  0100               	movlb	0	; () banked
 23282  0137D6  2BBB               	incf	Console_Init@y& (0+255),f,b
 23283  0137D8  D7CF               	goto	l11939
 23284  0137DA                     u8360:
 23285                           
 23286                           ; BSR set to: 0
 23287                           
 23288                           ; BSR set to: 0
 23289  0137DA  0100               	movlb	0	; () banked
 23290  0137DC  2BBA               	incf	Console_Init@x& (0+255),f,b
 23291  0137DE  D7C4               	goto	l11933
 23292  0137E0                     __end_of_Console_Init:
 23293                           	opt stack 0
 23294                           tosu	equ	0xFFF
 23295                           tosh	equ	0xFFE
 23296                           tosl	equ	0xFFD
 23297                           pclath	equ	0xFFA
 23298                           tblptru	equ	0xFF8
 23299                           tblptrh	equ	0xFF7
 23300                           tblptrl	equ	0xFF6
 23301                           tablat	equ	0xFF5
 23302                           prodh	equ	0xFF4
 23303                           prodl	equ	0xFF3
 23304                           intcon	equ	0xFF2
 23305                           indf0	equ	0xFEF
 23306                           postinc0	equ	0xFEE
 23307                           plusw0	equ	0xFEB
 23308                           fsr0h	equ	0xFEA
 23309                           fsr0l	equ	0xFE9
 23310                           wreg	equ	0xFE8
 23311                           indf1	equ	0xFE7
 23312                           postdec1	equ	0xFE5
 23313                           fsr1h	equ	0xFE2
 23314                           fsr1l	equ	0xFE1
 23315                           indf2	equ	0xFDF
 23316                           postinc2	equ	0xFDE
 23317                           postdec2	equ	0xFDD
 23318                           plusw2	equ	0xFDB
 23319                           fsr2h	equ	0xFDA
 23320                           fsr2l	equ	0xFD9
 23321                           status	equ	0xFD8
 23322                           
 23323 ;; *************** function _ISR_Function *****************
 23324 ;; Defined at:
 23325 ;;		line 38 in file "Library/ISR.c"
 23326 ;; Parameters:    Size  Location     Type
 23327 ;;		None
 23328 ;; Auto vars:     Size  Location     Type
 23329 ;;		None
 23330 ;; Return value:  Size  Location     Type
 23331 ;;                  1    wreg      void 
 23332 ;; Registers used:
 23333 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23334 ;; Tracked objects:
 23335 ;;		On entry : 0/0
 23336 ;;		On exit  : 0/0
 23337 ;;		Unchanged: 0/0
 23338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23341 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23342 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23343 ;;Total ram usage:       18 bytes
 23344 ;; Hardware stack levels used:    1
 23345 ;; Hardware stack levels required when called:    6
 23346 ;; This function calls:
 23347 ;;		_Timer0_ISR
 23348 ;; This function is called by:
 23349 ;;		Interrupt level 2
 23350 ;; This function uses a non-reentrant model
 23351 ;;
 23352                           
 23353                           	psect	intcode
 23354  001408                     __pintcode:
 23355                           	opt stack 0
 23356  001408                     _ISR_Function:
 23357                           	opt stack 10
 23358                           
 23359                           ; BSR set to: 0
 23360                           ;incstack = 0
 23361  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 23362  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 23363  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 23364  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 23365  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 23366  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 23367  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 23368  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 23369  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 23370  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 23371  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 23372  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 23373  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 23374  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 23375  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 23376  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 23377  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 23378  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 23379  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 23380                           
 23381                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 23382  001452  92F2               	bcf	intcon,1,c	;volatile
 23383                           
 23384                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 23385  001454  B4F2               	btfsc	intcon,2,c	;volatile
 23386  001456  AAF2               	btfss	intcon,5,c	;volatile
 23387  001458  D002               	goto	i2l1598
 23388                           
 23389                           ;ISR.c: 68: Timer0_ISR();
 23390  00145A  EC6D  F0A4         	call	_Timer0_ISR	;wreg free
 23391  00145E                     i2l1598:
 23392  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 23393  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 23394  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 23395  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 23396  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 23397  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 23398  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 23399  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 23400  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 23401  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 23402  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 23403  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 23404  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 23405  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 23406  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 23407  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 23408  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 23409  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 23410  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 23411  0014A8  0011               	retfie		f
 23412  0014AA                     __end_of_ISR_Function:
 23413                           	opt stack 0
 23414                           tosu	equ	0xFFF
 23415                           tosh	equ	0xFFE
 23416                           tosl	equ	0xFFD
 23417                           pclatu	equ	0xFFB
 23418                           pclath	equ	0xFFA
 23419                           tblptru	equ	0xFF8
 23420                           tblptrh	equ	0xFF7
 23421                           tblptrl	equ	0xFF6
 23422                           tablat	equ	0xFF5
 23423                           prodh	equ	0xFF4
 23424                           prodl	equ	0xFF3
 23425                           intcon	equ	0xFF2
 23426                           indf0	equ	0xFEF
 23427                           postinc0	equ	0xFEE
 23428                           plusw0	equ	0xFEB
 23429                           fsr0h	equ	0xFEA
 23430                           fsr0l	equ	0xFE9
 23431                           wreg	equ	0xFE8
 23432                           indf1	equ	0xFE7
 23433                           postdec1	equ	0xFE5
 23434                           fsr1h	equ	0xFE2
 23435                           fsr1l	equ	0xFE1
 23436                           indf2	equ	0xFDF
 23437                           postinc2	equ	0xFDE
 23438                           postdec2	equ	0xFDD
 23439                           plusw2	equ	0xFDB
 23440                           fsr2h	equ	0xFDA
 23441                           fsr2l	equ	0xFD9
 23442                           status	equ	0xFD8
 23443                           
 23444 ;; *************** function _Timer0_ISR *****************
 23445 ;; Defined at:
 23446 ;;		line 94 in file "Library/Timer0.c"
 23447 ;; Parameters:    Size  Location     Type
 23448 ;;		None
 23449 ;; Auto vars:     Size  Location     Type
 23450 ;;		None
 23451 ;; Return value:  Size  Location     Type
 23452 ;;                  1    wreg      void 
 23453 ;; Registers used:
 23454 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23455 ;; Tracked objects:
 23456 ;;		On entry : 0/0
 23457 ;;		On exit  : 0/0
 23458 ;;		Unchanged: 0/0
 23459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23463 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23464 ;;Total ram usage:        0 bytes
 23465 ;; Hardware stack levels used:    1
 23466 ;; Hardware stack levels required when called:    5
 23467 ;; This function calls:
 23468 ;;		Absolute function
 23469 ;;		i2_Motor_Step
 23470 ;;		i2_Timer0_Stop
 23471 ;; This function is called by:
 23472 ;;		_ISR_Function
 23473 ;; This function uses a non-reentrant model
 23474 ;;
 23475                           
 23476                           	psect	text133
 23477  0148DA                     __ptext133:
 23478                           	opt stack 0
 23479  0148DA                     _Timer0_ISR:
 23480                           	opt stack 10
 23481                           
 23482                           ;Timer0.c: 96: Timer0_Stop();
 23483                           
 23484                           ;incstack = 0
 23485  0148DA  EC21  F0A6         	call	i2_Timer0_Stop	;wreg free
 23486                           
 23487                           ;Timer0.c: 99: if (gISR != 0)
 23488  0148DE  5029               	movf	_gISR,w,c
 23489  0148E0  102A               	iorwf	_gISR+1,w,c
 23490  0148E2  102B               	iorwf	_gISR+2,w,c
 23491  0148E4  B4D8               	btfsc	status,2,c
 23492  0148E6  0012               	return	
 23493                           
 23494                           ;Timer0.c: 100: gISR();
 23495  0148E8  D801               	call	i2u1027_48
 23496  0148EA  0012               	return	
 23497  0148EC                     i2u1027_48:
 23498  0148EC  0005               	push	
 23499  0148EE  6EFA               	movwf	pclath,c
 23500  0148F0  5029               	movf	_gISR,w,c
 23501  0148F2  6EFD               	movwf	tosl,c
 23502  0148F4  502A               	movf	_gISR+1,w,c
 23503  0148F6  6EFE               	movwf	tosh,c
 23504  0148F8  502B               	movf	_gISR+2,w,c
 23505  0148FA  6EFF               	movwf	tosu,c
 23506  0148FC  50FA               	movf	pclath,w,c
 23507  0148FE  0012               	return		;indir
 23508  014900                     __end_of_Timer0_ISR:
 23509                           	opt stack 0
 23510                           tosu	equ	0xFFF
 23511                           tosh	equ	0xFFE
 23512                           tosl	equ	0xFFD
 23513                           pclatu	equ	0xFFB
 23514                           pclath	equ	0xFFA
 23515                           tblptru	equ	0xFF8
 23516                           tblptrh	equ	0xFF7
 23517                           tblptrl	equ	0xFF6
 23518                           tablat	equ	0xFF5
 23519                           prodh	equ	0xFF4
 23520                           prodl	equ	0xFF3
 23521                           intcon	equ	0xFF2
 23522                           indf0	equ	0xFEF
 23523                           postinc0	equ	0xFEE
 23524                           plusw0	equ	0xFEB
 23525                           fsr0h	equ	0xFEA
 23526                           fsr0l	equ	0xFE9
 23527                           wreg	equ	0xFE8
 23528                           indf1	equ	0xFE7
 23529                           postdec1	equ	0xFE5
 23530                           fsr1h	equ	0xFE2
 23531                           fsr1l	equ	0xFE1
 23532                           indf2	equ	0xFDF
 23533                           postinc2	equ	0xFDE
 23534                           postdec2	equ	0xFDD
 23535                           plusw2	equ	0xFDB
 23536                           fsr2h	equ	0xFDA
 23537                           fsr2l	equ	0xFD9
 23538                           status	equ	0xFD8
 23539                           
 23540 ;; *************** function i2_Motor_Step *****************
 23541 ;; Defined at:
 23542 ;;		line 75 in file "Library/Motor.c"
 23543 ;; Parameters:    Size  Location     Type
 23544 ;;		None
 23545 ;; Auto vars:     Size  Location     Type
 23546 ;;		None
 23547 ;; Return value:  Size  Location     Type
 23548 ;;                  1    wreg      void 
 23549 ;; Registers used:
 23550 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23551 ;; Tracked objects:
 23552 ;;		On entry : 0/0
 23553 ;;		On exit  : 0/0
 23554 ;;		Unchanged: 0/0
 23555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23558 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23559 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23560 ;;Total ram usage:        2 bytes
 23561 ;; Hardware stack levels used:    1
 23562 ;; Hardware stack levels required when called:    4
 23563 ;; This function calls:
 23564 ;;		i2_MXK_Queue
 23565 ;;		i2_MXK_Release
 23566 ;;		i2_MXK_SwitchTo
 23567 ;;		i2_Port_SetPin
 23568 ;;		i2_Timer0_Restart
 23569 ;;		i2_Timer0_Stop
 23570 ;; This function is called by:
 23571 ;; This function uses a non-reentrant model
 23572 ;;
 23573                           
 23574                           	psect	text134
 23575  012490                     __ptext134:
 23576                           	opt stack 0
 23577  012490                     i2_Motor_Step:
 23578                           	opt stack 10
 23579                           
 23580                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 23581                           
 23582                           ;incstack = 0
 23583  012490  0100               	movlb	0	; () banked
 23584  012492  EE20 F004          	lfsr	2,4
 23585  012496  516F               	movf	_lMotor& (0+255),w,b
 23586  012498  26D9               	addwf	fsr2l,f,c
 23587  01249A  5170               	movf	(_lMotor+1)& (0+255),w,b
 23588  01249C  22DA               	addwfc	fsr2h,f,c
 23589  01249E  50DF               	movf	indf2,w,c
 23590  0124A0  EC2D  F0A3         	call	i2_MXK_SwitchTo
 23591  0124A4  0900               	iorlw	0
 23592  0124A6  B4D8               	btfsc	status,2,c
 23593  0124A8  D06A               	goto	i2l1635
 23594                           
 23595                           ;Motor.c: 78: {
 23596                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 23597  0124AA  C06F  FFD9         	movff	_lMotor,fsr2l
 23598  0124AE  C070  FFDA         	movff	_lMotor+1,fsr2h
 23599  0124B2  50DE               	movf	postinc2,w,c
 23600  0124B4  10DE               	iorwf	postinc2,w,c
 23601  0124B6  B4D8               	btfsc	status,2,c
 23602  0124B8  D05D               	goto	i2l1636
 23603                           
 23604                           ;Motor.c: 80: {
 23605                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 23606  0124BA  C06F  FFD9         	movff	_lMotor,fsr2l
 23607  0124BE  C070  FFDA         	movff	_lMotor+1,fsr2h
 23608  0124C2  0E01               	movlw	1
 23609  0124C4  BEDB               	btfsc	plusw2,7,c
 23610  0124C6  D022               	goto	i2l1637
 23611  0124C8  0E01               	movlw	1
 23612  0124CA  50DB               	movf	plusw2,w,c
 23613  0124CC  E103               	bnz	i2u561_40
 23614  0124CE  04DE               	decf	postinc2,w,c
 23615  0124D0  A0D8               	btfss	status,0,c
 23616  0124D2  D01C               	goto	i2l1637
 23617  0124D4                     i2u561_40:
 23618                           
 23619                           ;Motor.c: 83: {
 23620                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 23621  0124D4  C06F  FFD9         	movff	_lMotor,fsr2l
 23622  0124D8  C070  FFDA         	movff	_lMotor+1,fsr2h
 23623  0124DC  28DE               	incf	postinc2,w,c
 23624  0124DE  E104               	bnz	i2u562_40
 23625  0124E0  0E7F               	movlw	127
 23626  0124E2  18DE               	xorwf	postinc2,w,c
 23627  0124E4  B4D8               	btfsc	status,2,c
 23628  0124E6  D007               	goto	i2l1638
 23629  0124E8                     i2u562_40:
 23630                           
 23631                           ;Motor.c: 85: lMotor->mDelta --;
 23632  0124E8  C06F  FFD9         	movff	_lMotor,fsr2l
 23633  0124EC  C070  FFDA         	movff	_lMotor+1,fsr2h
 23634  0124F0  06DE               	decf	postinc2,f,c
 23635  0124F2  0E00               	movlw	0
 23636  0124F4  5ADD               	subwfb	postdec2,f,c
 23637  0124F6                     i2l1638:
 23638                           
 23639                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 23640  0124F6  0E7D               	movlw	low _PortE
 23641  0124F8  6E10               	movwf	i2Port_SetPin@pInput,c
 23642  0124FA  0E00               	movlw	high _PortE
 23643  0124FC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23644  0124FE  0E00               	movlw	0
 23645  012500  6E12               	movwf	i2Port_SetPin@pPin,c
 23646  012502  0E01               	movlw	1
 23647  012504  6E13               	movwf	i2Port_SetPin@pValue,c
 23648  012506  ECB0  F097         	call	i2_Port_SetPin	;wreg free
 23649                           
 23650                           ;Motor.c: 88: }
 23651  01250A  D01B               	goto	i2l1639
 23652  01250C                     i2l1637:
 23653                           
 23654                           ;Motor.c: 89: else
 23655                           ;Motor.c: 90: {
 23656                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 23657  01250C  C06F  FFD9         	movff	_lMotor,fsr2l
 23658  012510  C070  FFDA         	movff	_lMotor+1,fsr2h
 23659  012514  04DE               	decf	postinc2,w,c
 23660  012516  E104               	bnz	i2u563_40
 23661  012518  0E80               	movlw	128
 23662  01251A  18DE               	xorwf	postinc2,w,c
 23663  01251C  B4D8               	btfsc	status,2,c
 23664  01251E  D007               	goto	i2l1640
 23665  012520                     i2u563_40:
 23666                           
 23667                           ;Motor.c: 92: lMotor->mDelta ++;
 23668  012520  C06F  FFD9         	movff	_lMotor,fsr2l
 23669  012524  C070  FFDA         	movff	_lMotor+1,fsr2h
 23670  012528  2ADE               	incf	postinc2,f,c
 23671  01252A  0E00               	movlw	0
 23672  01252C  22DD               	addwfc	postdec2,f,c
 23673  01252E                     i2l1640:
 23674                           
 23675                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 23676  01252E  0E7D               	movlw	low _PortE
 23677  012530  6E10               	movwf	i2Port_SetPin@pInput,c
 23678  012532  0E00               	movlw	high _PortE
 23679  012534  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23680  012536  0E00               	movlw	0
 23681  012538  6E12               	movwf	i2Port_SetPin@pPin,c
 23682  01253A  0E00               	movlw	0
 23683  01253C  6E13               	movwf	i2Port_SetPin@pValue,c
 23684  01253E  ECB0  F097         	call	i2_Port_SetPin	;wreg free
 23685  012542                     i2l1639:
 23686                           
 23687                           ;Motor.c: 95: }
 23688                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 23689  012542  0E7D               	movlw	low _PortE
 23690  012544  6E10               	movwf	i2Port_SetPin@pInput,c
 23691  012546  0E00               	movlw	high _PortE
 23692  012548  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23693  01254A  0E01               	movlw	1
 23694  01254C  6E12               	movwf	i2Port_SetPin@pPin,c
 23695  01254E  0E01               	movlw	1
 23696  012550  6E13               	movwf	i2Port_SetPin@pValue,c
 23697  012552  ECB0  F097         	call	i2_Port_SetPin	;wreg free
 23698                           
 23699                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 23700  012556  0E7D               	movlw	low _PortE
 23701  012558  6E10               	movwf	i2Port_SetPin@pInput,c
 23702  01255A  0E00               	movlw	high _PortE
 23703  01255C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 23704  01255E  0E01               	movlw	1
 23705  012560  6E12               	movwf	i2Port_SetPin@pPin,c
 23706  012562  0E00               	movlw	0
 23707  012564  6E13               	movwf	i2Port_SetPin@pValue,c
 23708  012566  ECB0  F097         	call	i2_Port_SetPin	;wreg free
 23709                           
 23710                           ;Motor.c: 101: MXK_Release();
 23711  01256A  EC24  F0A6         	call	i2_MXK_Release	;wreg free
 23712                           
 23713                           ;Motor.c: 102: Timer0_Restart();
 23714  01256E  ECF8  F0A5         	call	i2_Timer0_Restart	;wreg free
 23715                           
 23716                           ;Motor.c: 103: return;
 23717  012572  0012               	return	
 23718  012574                     i2l1636:
 23719                           
 23720                           ;Motor.c: 104: }
 23721                           ;Motor.c: 105: MXK_Release();
 23722  012574  EC24  F0A6         	call	i2_MXK_Release	;wreg free
 23723                           
 23724                           ;Motor.c: 106: Timer0_Stop();
 23725  012578  EC21  F0A6         	call	i2_Timer0_Stop	;wreg free
 23726                           
 23727                           ;Motor.c: 107: return;
 23728  01257C  0012               	return	
 23729  01257E                     i2l1635:
 23730                           
 23731                           ;Motor.c: 108: }
 23732                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 23733  01257E  C02C  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 23734  012582  C02D  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 23735  012586  C02E  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 23736  01258A  ECE5  F0A5         	call	i2_MXK_Queue	;wreg free
 23737  01258E  0012               	return		;funcret
 23738  012590                     __end_ofi2_Motor_Step:
 23739                           	opt stack 0
 23740                           tosu	equ	0xFFF
 23741                           tosh	equ	0xFFE
 23742                           tosl	equ	0xFFD
 23743                           pclatu	equ	0xFFB
 23744                           pclath	equ	0xFFA
 23745                           tblptru	equ	0xFF8
 23746                           tblptrh	equ	0xFF7
 23747                           tblptrl	equ	0xFF6
 23748                           tablat	equ	0xFF5
 23749                           prodh	equ	0xFF4
 23750                           prodl	equ	0xFF3
 23751                           intcon	equ	0xFF2
 23752                           indf0	equ	0xFEF
 23753                           postinc0	equ	0xFEE
 23754                           plusw0	equ	0xFEB
 23755                           fsr0h	equ	0xFEA
 23756                           fsr0l	equ	0xFE9
 23757                           wreg	equ	0xFE8
 23758                           indf1	equ	0xFE7
 23759                           postdec1	equ	0xFE5
 23760                           fsr1h	equ	0xFE2
 23761                           fsr1l	equ	0xFE1
 23762                           indf2	equ	0xFDF
 23763                           postinc2	equ	0xFDE
 23764                           postdec2	equ	0xFDD
 23765                           plusw2	equ	0xFDB
 23766                           fsr2h	equ	0xFDA
 23767                           fsr2l	equ	0xFD9
 23768                           status	equ	0xFD8
 23769                           
 23770 ;; *************** function i2_Timer0_Stop *****************
 23771 ;; Defined at:
 23772 ;;		line 89 in file "Library/Timer0.c"
 23773 ;; Parameters:    Size  Location     Type
 23774 ;;		None
 23775 ;; Auto vars:     Size  Location     Type
 23776 ;;		None
 23777 ;; Return value:  Size  Location     Type
 23778 ;;                  1    wreg      void 
 23779 ;; Registers used:
 23780 ;;		None
 23781 ;; Tracked objects:
 23782 ;;		On entry : 0/0
 23783 ;;		On exit  : 0/0
 23784 ;;		Unchanged: 0/0
 23785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23788 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23789 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23790 ;;Total ram usage:        0 bytes
 23791 ;; Hardware stack levels used:    1
 23792 ;; This function calls:
 23793 ;;		Nothing
 23794 ;; This function is called by:
 23795 ;;		_Timer0_ISR
 23796 ;;		i2_Motor_Step
 23797 ;; This function uses a non-reentrant model
 23798 ;;
 23799                           
 23800                           	psect	text135
 23801  014C42                     __ptext135:
 23802                           	opt stack 0
 23803  014C42                     i2_Timer0_Stop:
 23804                           	opt stack 14
 23805                           
 23806                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 23807                           
 23808                           ;incstack = 0
 23809  014C42  9AF2               	bcf	intcon,5,c	;volatile
 23810                           
 23811                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 23812  014C44  94F2               	bcf	intcon,2,c	;volatile
 23813  014C46  0012               	return		;funcret
 23814  014C48                     __end_ofi2_Timer0_Stop:
 23815                           	opt stack 0
 23816                           tosu	equ	0xFFF
 23817                           tosh	equ	0xFFE
 23818                           tosl	equ	0xFFD
 23819                           pclatu	equ	0xFFB
 23820                           pclath	equ	0xFFA
 23821                           tblptru	equ	0xFF8
 23822                           tblptrh	equ	0xFF7
 23823                           tblptrl	equ	0xFF6
 23824                           tablat	equ	0xFF5
 23825                           prodh	equ	0xFF4
 23826                           prodl	equ	0xFF3
 23827                           intcon	equ	0xFF2
 23828                           indf0	equ	0xFEF
 23829                           postinc0	equ	0xFEE
 23830                           plusw0	equ	0xFEB
 23831                           fsr0h	equ	0xFEA
 23832                           fsr0l	equ	0xFE9
 23833                           wreg	equ	0xFE8
 23834                           indf1	equ	0xFE7
 23835                           postdec1	equ	0xFE5
 23836                           fsr1h	equ	0xFE2
 23837                           fsr1l	equ	0xFE1
 23838                           indf2	equ	0xFDF
 23839                           postinc2	equ	0xFDE
 23840                           postdec2	equ	0xFDD
 23841                           plusw2	equ	0xFDB
 23842                           fsr2h	equ	0xFDA
 23843                           fsr2l	equ	0xFD9
 23844                           status	equ	0xFD8
 23845                           
 23846 ;; *************** function i2_Timer0_Restart *****************
 23847 ;; Defined at:
 23848 ;;		line 83 in file "Library/Timer0.c"
 23849 ;; Parameters:    Size  Location     Type
 23850 ;;		None
 23851 ;; Auto vars:     Size  Location     Type
 23852 ;;		None
 23853 ;; Return value:  Size  Location     Type
 23854 ;;                  1    wreg      void 
 23855 ;; Registers used:
 23856 ;;		None
 23857 ;; Tracked objects:
 23858 ;;		On entry : 0/0
 23859 ;;		On exit  : 0/0
 23860 ;;		Unchanged: 0/0
 23861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23866 ;;Total ram usage:        0 bytes
 23867 ;; Hardware stack levels used:    1
 23868 ;; This function calls:
 23869 ;;		Nothing
 23870 ;; This function is called by:
 23871 ;;		i2_Motor_Step
 23872 ;; This function uses a non-reentrant model
 23873 ;;
 23874                           
 23875                           	psect	text136
 23876  014BF0                     __ptext136:
 23877                           	opt stack 0
 23878  014BF0                     i2_Timer0_Restart:
 23879                           	opt stack 13
 23880                           
 23881                           ;Timer0.c: 85: TMR0 = COUNTER;
 23882                           
 23883                           ;incstack = 0
 23884  014BF0  C031  FFD6         	movff	_COUNTER,4054	;volatile
 23885  014BF4  C032  FFD7         	movff	_COUNTER+1,4055	;volatile
 23886                           
 23887                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 23888  014BF8  8AF2               	bsf	intcon,5,c	;volatile
 23889  014BFA  0012               	return		;funcret
 23890  014BFC                     __end_ofi2_Timer0_Restart:
 23891                           	opt stack 0
 23892                           tosu	equ	0xFFF
 23893                           tosh	equ	0xFFE
 23894                           tosl	equ	0xFFD
 23895                           pclatu	equ	0xFFB
 23896                           pclath	equ	0xFFA
 23897                           tblptru	equ	0xFF8
 23898                           tblptrh	equ	0xFF7
 23899                           tblptrl	equ	0xFF6
 23900                           tablat	equ	0xFF5
 23901                           prodh	equ	0xFF4
 23902                           prodl	equ	0xFF3
 23903                           intcon	equ	0xFF2
 23904                           indf0	equ	0xFEF
 23905                           postinc0	equ	0xFEE
 23906                           plusw0	equ	0xFEB
 23907                           fsr0h	equ	0xFEA
 23908                           fsr0l	equ	0xFE9
 23909                           wreg	equ	0xFE8
 23910                           indf1	equ	0xFE7
 23911                           postdec1	equ	0xFE5
 23912                           fsr1h	equ	0xFE2
 23913                           fsr1l	equ	0xFE1
 23914                           indf2	equ	0xFDF
 23915                           postinc2	equ	0xFDE
 23916                           postdec2	equ	0xFDD
 23917                           plusw2	equ	0xFDB
 23918                           fsr2h	equ	0xFDA
 23919                           fsr2l	equ	0xFD9
 23920                           status	equ	0xFD8
 23921                           
 23922 ;; *************** function i2_Port_SetPin *****************
 23923 ;; Defined at:
 23924 ;;		line 247 in file "Library/Port.c"
 23925 ;; Parameters:    Size  Location     Type
 23926 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23927 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23928 ;;  pPin            1   17[COMRAM] enum E6750
 23929 ;;  pValue          1   18[COMRAM] unsigned char 
 23930 ;; Auto vars:     Size  Location     Type
 23931 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23932 ;; Return value:  Size  Location     Type
 23933 ;;                  1    wreg      void 
 23934 ;; Registers used:
 23935 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23936 ;; Tracked objects:
 23937 ;;		On entry : 0/0
 23938 ;;		On exit  : 0/0
 23939 ;;		Unchanged: 0/0
 23940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23941 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23942 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23943 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23944 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23945 ;;Total ram usage:        5 bytes
 23946 ;; Hardware stack levels used:    1
 23947 ;; Hardware stack levels required when called:    3
 23948 ;; This function calls:
 23949 ;;		i2_Byte_SetBit
 23950 ;;		i2_Word_GetPair
 23951 ;; This function is called by:
 23952 ;;		i2_Motor_Step
 23953 ;; This function uses a non-reentrant model
 23954 ;;
 23955                           
 23956                           	psect	text137
 23957  012F60                     __ptext137:
 23958                           	opt stack 0
 23959  012F60                     i2_Port_SetPin:
 23960                           	opt stack 10
 23961                           
 23962                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23963                           
 23964                           ;incstack = 0
 23965  012F60  0E08               	movlw	8
 23966  012F62  2410               	addwf	i2Port_SetPin@pInput,w,c
 23967  012F64  6E0D               	movwf	i2Word_GetPair@pInput,c
 23968  012F66  0E00               	movlw	0
 23969  012F68  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 23970  012F6A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 23971  012F6C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23972  012F70  ECC3  F0A3         	call	i2_Word_GetPair	;wreg free
 23973  012F74  6E14               	movwf	i2Port_SetPin@Type,c
 23974                           
 23975                           ;Port.c: 250: switch (Type)
 23976  012F76  D03B               	goto	i2l427
 23977  012F78                     
 23978                           ;Port.c: 256: pValue &= 1;
 23979  012F78  0E01               	movlw	1
 23980  012F7A  1613               	andwf	i2Port_SetPin@pValue,f,c
 23981                           
 23982                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23983  012F7C  EE20 F002          	lfsr	2,2
 23984  012F80  5010               	movf	i2Port_SetPin@pInput,w,c
 23985  012F82  26D9               	addwf	fsr2l,f,c
 23986  012F84  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23987  012F86  22DA               	addwfc	fsr2h,f,c
 23988  012F88  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23989  012F8C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23990  012F90  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23991  012F94  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23992  012F98  ECE4  F0A0         	call	i2_Byte_SetBit	;wreg free
 23993                           
 23994                           ;Port.c: 258: break;
 23995  012F9C  0012               	return	
 23996  012F9E                     
 23997                           ;Port.c: 261: pValue &= 1;
 23998  012F9E  0E01               	movlw	1
 23999  012FA0  1613               	andwf	i2Port_SetPin@pValue,f,c
 24000                           
 24001                           ;Port.c: 262: pValue ^= 1;
 24002  012FA2  0E01               	movlw	1
 24003  012FA4  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 24004                           
 24005                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 24006  012FA6  EE20 F002          	lfsr	2,2
 24007  012FAA  5010               	movf	i2Port_SetPin@pInput,w,c
 24008  012FAC  26D9               	addwf	fsr2l,f,c
 24009  012FAE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 24010  012FB0  22DA               	addwfc	fsr2h,f,c
 24011  012FB2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 24012  012FB6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 24013  012FBA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 24014  012FBE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 24015  012FC2  ECE4  F0A0         	call	i2_Byte_SetBit	;wreg free
 24016                           
 24017                           ;Port.c: 264: break;
 24018  012FC6  0012               	return	
 24019  012FC8                     
 24020                           ;Port.c: 266: pValue &= 1;
 24021  012FC8  0E01               	movlw	1
 24022  012FCA  1613               	andwf	i2Port_SetPin@pValue,f,c
 24023                           
 24024                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 24025  012FCC  EE20 F004          	lfsr	2,4
 24026  012FD0  5010               	movf	i2Port_SetPin@pInput,w,c
 24027  012FD2  26D9               	addwf	fsr2l,f,c
 24028  012FD4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 24029  012FD6  22DA               	addwfc	fsr2h,f,c
 24030  012FD8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 24031  012FDC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 24032  012FE0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 24033  012FE4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 24034  012FE8  ECE4  F0A0         	call	i2_Byte_SetBit	;wreg free
 24035                           
 24036                           ;Port.c: 269: }
 24037                           
 24038                           ;Port.c: 268: break;
 24039  012FEC  0012               	return	
 24040  012FEE                     i2l427:
 24041  012FEE  5014               	movf	i2Port_SetPin@Type,w,c
 24042                           
 24043                           ; Switch size 1, requested type "space"
 24044                           ; Number of cases is 4, Range of values is 0 to 3
 24045                           ; switch strategies available:
 24046                           ; Name         Instructions Cycles
 24047                           ; simple_byte           13     7 (average)
 24048                           ;	Chosen strategy is simple_byte
 24049  012FF0  0A00               	xorlw	0	; case 0
 24050  012FF2  B4D8               	btfsc	status,2,c
 24051  012FF4  0012               	return	
 24052  012FF6  0A01               	xorlw	1	; case 1
 24053  012FF8  B4D8               	btfsc	status,2,c
 24054  012FFA  D7BE               	goto	i2l430
 24055  012FFC  0A03               	xorlw	3	; case 2
 24056  012FFE  B4D8               	btfsc	status,2,c
 24057  013000  D7CE               	goto	i2l432
 24058  013002  0A01               	xorlw	1	; case 3
 24059  013004  A4D8               	btfss	status,2,c
 24060  013006  0012               	return	
 24061  013008  D7DF               	goto	i2l433
 24062  01300A                     __end_ofi2_Port_SetPin:
 24063                           	opt stack 0
 24064                           tosu	equ	0xFFF
 24065                           tosh	equ	0xFFE
 24066                           tosl	equ	0xFFD
 24067                           pclatu	equ	0xFFB
 24068                           pclath	equ	0xFFA
 24069                           tblptru	equ	0xFF8
 24070                           tblptrh	equ	0xFF7
 24071                           tblptrl	equ	0xFF6
 24072                           tablat	equ	0xFF5
 24073                           prodh	equ	0xFF4
 24074                           prodl	equ	0xFF3
 24075                           intcon	equ	0xFF2
 24076                           indf0	equ	0xFEF
 24077                           postinc0	equ	0xFEE
 24078                           plusw0	equ	0xFEB
 24079                           fsr0h	equ	0xFEA
 24080                           fsr0l	equ	0xFE9
 24081                           wreg	equ	0xFE8
 24082                           indf1	equ	0xFE7
 24083                           postdec1	equ	0xFE5
 24084                           fsr1h	equ	0xFE2
 24085                           fsr1l	equ	0xFE1
 24086                           indf2	equ	0xFDF
 24087                           postinc2	equ	0xFDE
 24088                           postdec2	equ	0xFDD
 24089                           plusw2	equ	0xFDB
 24090                           fsr2h	equ	0xFDA
 24091                           fsr2l	equ	0xFD9
 24092                           status	equ	0xFD8
 24093                           
 24094 ;; *************** function i2_Word_GetPair *****************
 24095 ;; Defined at:
 24096 ;;		line 156 in file "Library/Types.c"
 24097 ;; Parameters:    Size  Location     Type
 24098 ;;  pInput          2   12[COMRAM] PTR struct Word
 24099 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24100 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 24101 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 24102 ;;		 -> PortC(10), PortF(10), NULL(0), 
 24103 ;;  pPair           1   14[COMRAM] unsigned char 
 24104 ;; Auto vars:     Size  Location     Type
 24105 ;;		None
 24106 ;; Return value:  Size  Location     Type
 24107 ;;                  1    wreg      unsigned char 
 24108 ;; Registers used:
 24109 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24110 ;; Tracked objects:
 24111 ;;		On entry : 0/0
 24112 ;;		On exit  : 0/0
 24113 ;;		Unchanged: 0/0
 24114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24115 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24118 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24119 ;;Total ram usage:        3 bytes
 24120 ;; Hardware stack levels used:    1
 24121 ;; Hardware stack levels required when called:    2
 24122 ;; This function calls:
 24123 ;;		i2_Byte_GetPair
 24124 ;; This function is called by:
 24125 ;;		i2_Port_SetPin
 24126 ;; This function uses a non-reentrant model
 24127 ;;
 24128                           
 24129                           	psect	text138
 24130  014786                     __ptext138:
 24131                           	opt stack 0
 24132  014786                     i2_Word_GetPair:
 24133                           	opt stack 10
 24134                           
 24135                           ;Types.c: 158: if (pPair >= 4)
 24136                           
 24137                           ;incstack = 0
 24138  014786  0E03               	movlw	3
 24139  014788  640F               	cpfsgt	i2Word_GetPair@pPair,c
 24140  01478A  D00C               	goto	i2l781
 24141                           
 24142                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 24143  01478C  0E01               	movlw	1
 24144  01478E  240D               	addwf	i2Word_GetPair@pInput,w,c
 24145  014790  6E0A               	movwf	i2Byte_GetPair@pInput,c
 24146  014792  0E00               	movlw	0
 24147  014794  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 24148  014796  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 24149  014798  500F               	movf	i2Word_GetPair@pPair,w,c
 24150  01479A  0FFC               	addlw	252
 24151  01479C  6E0C               	movwf	i2Byte_GetPair@pPair,c
 24152  01479E  EC3A  F0A5         	call	i2_Byte_GetPair	;wreg free
 24153  0147A2  0012               	return	
 24154  0147A4                     i2l781:
 24155                           
 24156                           ;Types.c: 160: else
 24157                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 24158  0147A4  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 24159  0147A8  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 24160  0147AC  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 24161  0147B0  EC3A  F0A5         	call	i2_Byte_GetPair	;wreg free
 24162  0147B4  0012               	return	
 24163  0147B6                     __end_ofi2_Word_GetPair:
 24164                           	opt stack 0
 24165                           tosu	equ	0xFFF
 24166                           tosh	equ	0xFFE
 24167                           tosl	equ	0xFFD
 24168                           pclatu	equ	0xFFB
 24169                           pclath	equ	0xFFA
 24170                           tblptru	equ	0xFF8
 24171                           tblptrh	equ	0xFF7
 24172                           tblptrl	equ	0xFF6
 24173                           tablat	equ	0xFF5
 24174                           prodh	equ	0xFF4
 24175                           prodl	equ	0xFF3
 24176                           intcon	equ	0xFF2
 24177                           indf0	equ	0xFEF
 24178                           postinc0	equ	0xFEE
 24179                           plusw0	equ	0xFEB
 24180                           fsr0h	equ	0xFEA
 24181                           fsr0l	equ	0xFE9
 24182                           wreg	equ	0xFE8
 24183                           indf1	equ	0xFE7
 24184                           postdec1	equ	0xFE5
 24185                           fsr1h	equ	0xFE2
 24186                           fsr1l	equ	0xFE1
 24187                           indf2	equ	0xFDF
 24188                           postinc2	equ	0xFDE
 24189                           postdec2	equ	0xFDD
 24190                           plusw2	equ	0xFDB
 24191                           fsr2h	equ	0xFDA
 24192                           fsr2l	equ	0xFD9
 24193                           status	equ	0xFD8
 24194                           
 24195 ;; *************** function i2_Byte_GetPair *****************
 24196 ;; Defined at:
 24197 ;;		line 87 in file "Library/Types.c"
 24198 ;; Parameters:    Size  Location     Type
 24199 ;;  pInput          2    9[COMRAM] PTR struct Byte
 24200 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 24201 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 24202 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 24203 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 24204 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 24205 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 24206 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 24207 ;;		 -> NULL(0), 
 24208 ;;  pPair           1   11[COMRAM] unsigned char 
 24209 ;; Auto vars:     Size  Location     Type
 24210 ;;		None
 24211 ;; Return value:  Size  Location     Type
 24212 ;;                  1    wreg      unsigned char 
 24213 ;; Registers used:
 24214 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24215 ;; Tracked objects:
 24216 ;;		On entry : 0/0
 24217 ;;		On exit  : 0/0
 24218 ;;		Unchanged: 0/0
 24219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24220 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24223 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24224 ;;Total ram usage:        3 bytes
 24225 ;; Hardware stack levels used:    1
 24226 ;; Hardware stack levels required when called:    1
 24227 ;; This function calls:
 24228 ;;		i2_Byte_GetZone
 24229 ;; This function is called by:
 24230 ;;		i2_Word_GetPair
 24231 ;; This function uses a non-reentrant model
 24232 ;;
 24233                           
 24234                           	psect	text139
 24235  014A74                     __ptext139:
 24236                           	opt stack 0
 24237  014A74                     i2_Byte_GetPair:
 24238                           	opt stack 10
 24239                           
 24240                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 24241                           
 24242                           ;incstack = 0
 24243  014A74  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 24244  014A78  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 24245  014A7C  0E04               	movlw	4
 24246  014A7E  6E03               	movwf	i2Byte_GetZone@pMax,c
 24247  014A80  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 24248  014A84  0E02               	movlw	2
 24249  014A86  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 24250  014A88  EC6A  F09C         	call	i2_Byte_GetZone	;wreg free
 24251  014A8C  0012               	return	
 24252  014A8E                     __end_ofi2_Byte_GetPair:
 24253                           	opt stack 0
 24254                           tosu	equ	0xFFF
 24255                           tosh	equ	0xFFE
 24256                           tosl	equ	0xFFD
 24257                           pclatu	equ	0xFFB
 24258                           pclath	equ	0xFFA
 24259                           tblptru	equ	0xFF8
 24260                           tblptrh	equ	0xFF7
 24261                           tblptrl	equ	0xFF6
 24262                           tablat	equ	0xFF5
 24263                           prodh	equ	0xFF4
 24264                           prodl	equ	0xFF3
 24265                           intcon	equ	0xFF2
 24266                           indf0	equ	0xFEF
 24267                           postinc0	equ	0xFEE
 24268                           plusw0	equ	0xFEB
 24269                           fsr0h	equ	0xFEA
 24270                           fsr0l	equ	0xFE9
 24271                           wreg	equ	0xFE8
 24272                           indf1	equ	0xFE7
 24273                           postdec1	equ	0xFE5
 24274                           fsr1h	equ	0xFE2
 24275                           fsr1l	equ	0xFE1
 24276                           indf2	equ	0xFDF
 24277                           postinc2	equ	0xFDE
 24278                           postdec2	equ	0xFDD
 24279                           plusw2	equ	0xFDB
 24280                           fsr2h	equ	0xFDA
 24281                           fsr2l	equ	0xFD9
 24282                           status	equ	0xFD8
 24283                           
 24284 ;; *************** function i2_Byte_GetZone *****************
 24285 ;; Defined at:
 24286 ;;		line 64 in file "Library/Types.c"
 24287 ;; Parameters:    Size  Location     Type
 24288 ;;  pInput          2    0[COMRAM] PTR struct Byte
 24289 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 24290 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 24291 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 24292 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 24293 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 24294 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 24295 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 24296 ;;		 -> NULL(0), 
 24297 ;;  pMax            1    2[COMRAM] unsigned char 
 24298 ;;  pChunk          1    3[COMRAM] unsigned char 
 24299 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 24300 ;; Auto vars:     Size  Location     Type
 24301 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 24302 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 24303 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 24304 ;; Return value:  Size  Location     Type
 24305 ;;                  1    wreg      unsigned char 
 24306 ;; Registers used:
 24307 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 24308 ;; Tracked objects:
 24309 ;;		On entry : 0/0
 24310 ;;		On exit  : 0/0
 24311 ;;		Unchanged: 0/0
 24312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24313 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24314 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24316 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24317 ;;Total ram usage:        9 bytes
 24318 ;; Hardware stack levels used:    1
 24319 ;; This function calls:
 24320 ;;		Nothing
 24321 ;; This function is called by:
 24322 ;;		i2_Byte_GetPair
 24323 ;; This function uses a non-reentrant model
 24324 ;;
 24325                           
 24326                           	psect	text140
 24327  0138D4                     __ptext140:
 24328                           	opt stack 0
 24329  0138D4                     i2_Byte_GetZone:
 24330                           	opt stack 10
 24331                           
 24332                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 24333                           
 24334                           ;incstack = 0
 24335  0138D4  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 24336  0138D8  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 24337  0138DC  0E00               	movlw	low (__mediumconst shr (0+16))
 24338  0138DE  6EF8               	movwf	tblptru,c
 24339  0138E0  0E0F               	movlw	(high __ramtop+-1)
 24340  0138E2  64F7               	cpfsgt	tblptrh,c
 24341  0138E4  D003               	bra	i2u420_47
 24342  0138E6  0008               	tblrd		*
 24343  0138E8  50F5               	movf	tablat,w,c
 24344  0138EA  D005               	bra	i2u420_40
 24345  0138EC                     i2u420_47:
 24346  0138EC  CFF6 FFE9          	movff	tblptrl,fsr0l
 24347  0138F0  CFF7 FFEA          	movff	tblptrh,fsr0h
 24348  0138F4  50EF               	movf	indf0,w,c
 24349  0138F6                     i2u420_40:
 24350  0138F6  6E09               	movwf	i2Byte_GetZone@Output,c
 24351                           
 24352                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 24353  0138F8  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 24354  0138FA  0D01               	mullw	1
 24355  0138FC  0E69               	movlw	low _MASKS
 24356  0138FE  24F3               	addwf	prodl,w,c
 24357  013900  6EF6               	movwf	tblptrl,c
 24358  013902  0EFD               	movlw	high _MASKS
 24359  013904  20F4               	addwfc	prodh,w,c
 24360  013906  6EF7               	movwf	tblptrh,c
 24361  013908                     	if	1	;There are 3 active tblptr bytes
 24362  013908  6AF8               	clrf	tblptru,c
 24363  01390A  0E00               	movlw	low (__mediumconst shr (0+16))
 24364  01390C  22F8               	addwfc	tblptru,f,c
 24365  01390E                     	endif
 24366  01390E  0008               	tblrd		*
 24367  013910  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 24368                           
 24369                           ;Types.c: 68: UINT8 Offset = 0;
 24370  013914  0E00               	movlw	0
 24371  013916  6E08               	movwf	i2Byte_GetZone@Offset,c
 24372                           
 24373                           ;Types.c: 70: while (pChunk >= pMax)
 24374  013918  D003               	goto	i2l732
 24375  01391A                     
 24376                           ;Types.c: 71: {
 24377                           ;Types.c: 72: pChunk -= pMax;
 24378  01391A  5003               	movf	i2Byte_GetZone@pMax,w,c
 24379  01391C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 24380                           
 24381                           ;Types.c: 73: Offset += 1;
 24382  01391E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 24383  013920                     i2l732:
 24384  013920  5003               	movf	i2Byte_GetZone@pMax,w,c
 24385  013922  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 24386  013924  B0D8               	btfsc	status,0,c
 24387  013926  D7F9               	goto	i2l733
 24388                           
 24389                           ;Types.c: 74: }
 24390                           ;Types.c: 75: pChunk *= pChunkSize;
 24391  013928  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 24392  01392A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 24393  01392C  50F3               	movf	prodl,w,c
 24394  01392E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 24395                           
 24396                           ;Types.c: 76: pChunk += Offset;
 24397  013930  5008               	movf	i2Byte_GetZone@Offset,w,c
 24398  013932  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 24399                           
 24400                           ;Types.c: 78: Output >>= pChunk;
 24401  013934  2804               	incf	i2Byte_GetZone@pChunk,w,c
 24402  013936  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 24403  013938  D002               	goto	i2u422_40
 24404  01393A                     i2u422_45:
 24405  01393A  90D8               	bcf	status,0,c
 24406  01393C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 24407  01393E                     i2u422_40:
 24408  01393E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 24409  013940  D7FC               	goto	i2u422_45
 24410                           
 24411                           ;Types.c: 79: Output &= MASK;
 24412  013942  5007               	movf	i2Byte_GetZone@MASK,w,c
 24413  013944  1609               	andwf	i2Byte_GetZone@Output,f,c
 24414                           
 24415                           ;Types.c: 80: return Output;
 24416  013946  5009               	movf	i2Byte_GetZone@Output,w,c
 24417  013948  0012               	return	
 24418  01394A                     __end_ofi2_Byte_GetZone:
 24419                           	opt stack 0
 24420                           tosu	equ	0xFFF
 24421                           tosh	equ	0xFFE
 24422                           tosl	equ	0xFFD
 24423                           pclatu	equ	0xFFB
 24424                           pclath	equ	0xFFA
 24425                           tblptru	equ	0xFF8
 24426                           tblptrh	equ	0xFF7
 24427                           tblptrl	equ	0xFF6
 24428                           tablat	equ	0xFF5
 24429                           prodh	equ	0xFF4
 24430                           prodl	equ	0xFF3
 24431                           intcon	equ	0xFF2
 24432                           indf0	equ	0xFEF
 24433                           postinc0	equ	0xFEE
 24434                           plusw0	equ	0xFEB
 24435                           fsr0h	equ	0xFEA
 24436                           fsr0l	equ	0xFE9
 24437                           wreg	equ	0xFE8
 24438                           indf1	equ	0xFE7
 24439                           postdec1	equ	0xFE5
 24440                           fsr1h	equ	0xFE2
 24441                           fsr1l	equ	0xFE1
 24442                           indf2	equ	0xFDF
 24443                           postinc2	equ	0xFDE
 24444                           postdec2	equ	0xFDD
 24445                           plusw2	equ	0xFDB
 24446                           fsr2h	equ	0xFDA
 24447                           fsr2l	equ	0xFD9
 24448                           status	equ	0xFD8
 24449                           
 24450 ;; *************** function i2_Byte_SetBit *****************
 24451 ;; Defined at:
 24452 ;;		line 32 in file "Library/Types.c"
 24453 ;; Parameters:    Size  Location     Type
 24454 ;;  pInput          2    0[COMRAM] PTR struct Byte
 24455 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24456 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24457 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24458 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24459 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24460 ;;		 -> NULL(0), 
 24461 ;;  pBit            1    2[COMRAM] unsigned char 
 24462 ;;  pValue          1    3[COMRAM] unsigned char 
 24463 ;; Auto vars:     Size  Location     Type
 24464 ;;		None
 24465 ;; Return value:  Size  Location     Type
 24466 ;;                  1    wreg      void 
 24467 ;; Registers used:
 24468 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24469 ;; Tracked objects:
 24470 ;;		On entry : 0/0
 24471 ;;		On exit  : 0/0
 24472 ;;		Unchanged: 0/0
 24473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24474 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24476 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24477 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24478 ;;Total ram usage:        7 bytes
 24479 ;; Hardware stack levels used:    1
 24480 ;; This function calls:
 24481 ;;		Nothing
 24482 ;; This function is called by:
 24483 ;;		i2_Port_SetPin
 24484 ;; This function uses a non-reentrant model
 24485 ;;
 24486                           
 24487                           	psect	text141
 24488  0141C8                     __ptext141:
 24489                           	opt stack 0
 24490  0141C8                     i2_Byte_SetBit:
 24491                           	opt stack 12
 24492                           
 24493                           ;Types.c: 34: pValue &= 1;
 24494                           
 24495                           ;incstack = 0
 24496  0141C8  0E01               	movlw	1
 24497  0141CA  1604               	andwf	i2Byte_SetBit@pValue,f,c
 24498                           
 24499                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 24500  0141CC  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 24501  0141D0  0E01               	movlw	1
 24502  0141D2  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 24503  0141D4  2A05               	incf	??i2_Byte_SetBit,f,c
 24504  0141D6  D002               	goto	i2u491_44
 24505  0141D8                     i2u491_45:
 24506  0141D8  90D8               	bcf	status,0,c
 24507  0141DA  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 24508  0141DC                     i2u491_44:
 24509  0141DC  2E05               	decfsz	??i2_Byte_SetBit,f,c
 24510  0141DE  D7FC               	goto	i2u491_45
 24511  0141E0  5006               	movf	??i2_Byte_SetBit+1,w,c
 24512  0141E2  0AFF               	xorlw	255
 24513  0141E4  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 24514  0141E6  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 24515  0141EA  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 24516  0141EE  5007               	movf	??i2_Byte_SetBit+2,w,c
 24517  0141F0  16DF               	andwf	indf2,f,c
 24518                           
 24519                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 24520  0141F2  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 24521  0141F6  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 24522  0141FA  2A05               	incf	??i2_Byte_SetBit,f,c
 24523  0141FC  D002               	goto	i2u492_44
 24524  0141FE                     i2u492_45:
 24525  0141FE  90D8               	bcf	status,0,c
 24526  014200  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 24527  014202                     i2u492_44:
 24528  014202  2E05               	decfsz	??i2_Byte_SetBit,f,c
 24529  014204  D7FC               	goto	i2u492_45
 24530  014206  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 24531  01420A  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 24532  01420E  5006               	movf	??i2_Byte_SetBit+1,w,c
 24533  014210  12DF               	iorwf	indf2,f,c
 24534  014212  0012               	return		;funcret
 24535  014214                     __end_ofi2_Byte_SetBit:
 24536                           	opt stack 0
 24537                           tosu	equ	0xFFF
 24538                           tosh	equ	0xFFE
 24539                           tosl	equ	0xFFD
 24540                           pclatu	equ	0xFFB
 24541                           pclath	equ	0xFFA
 24542                           tblptru	equ	0xFF8
 24543                           tblptrh	equ	0xFF7
 24544                           tblptrl	equ	0xFF6
 24545                           tablat	equ	0xFF5
 24546                           prodh	equ	0xFF4
 24547                           prodl	equ	0xFF3
 24548                           intcon	equ	0xFF2
 24549                           indf0	equ	0xFEF
 24550                           postinc0	equ	0xFEE
 24551                           plusw0	equ	0xFEB
 24552                           fsr0h	equ	0xFEA
 24553                           fsr0l	equ	0xFE9
 24554                           wreg	equ	0xFE8
 24555                           indf1	equ	0xFE7
 24556                           postdec1	equ	0xFE5
 24557                           fsr1h	equ	0xFE2
 24558                           fsr1l	equ	0xFE1
 24559                           indf2	equ	0xFDF
 24560                           postinc2	equ	0xFDE
 24561                           postdec2	equ	0xFDD
 24562                           plusw2	equ	0xFDB
 24563                           fsr2h	equ	0xFDA
 24564                           fsr2l	equ	0xFD9
 24565                           status	equ	0xFD8
 24566                           
 24567 ;; *************** function i2_MXK_SwitchTo *****************
 24568 ;; Defined at:
 24569 ;;		line 105 in file "Library/MXK.c"
 24570 ;; Parameters:    Size  Location     Type
 24571 ;;  pModule         1    wreg     enum E6925
 24572 ;; Auto vars:     Size  Location     Type
 24573 ;;  pModule         1    7[COMRAM] enum E6925
 24574 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 24575 ;; Return value:  Size  Location     Type
 24576 ;;                  1    wreg      unsigned char 
 24577 ;; Registers used:
 24578 ;;		wreg, status,2, status,0, cstack
 24579 ;; Tracked objects:
 24580 ;;		On entry : 0/0
 24581 ;;		On exit  : 0/0
 24582 ;;		Unchanged: 0/0
 24583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24585 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24587 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24588 ;;Total ram usage:        2 bytes
 24589 ;; Hardware stack levels used:    1
 24590 ;; Hardware stack levels required when called:    1
 24591 ;; This function calls:
 24592 ;;		i2_delay_us
 24593 ;; This function is called by:
 24594 ;;		i2_Motor_Step
 24595 ;; This function uses a non-reentrant model
 24596 ;;
 24597                           
 24598                           	psect	text142
 24599  01465A                     __ptext142:
 24600                           	opt stack 0
 24601  01465A                     i2_MXK_SwitchTo:
 24602                           	opt stack 12
 24603                           
 24604                           ;incstack = 0
 24605                           ;i2MXK_SwitchTo@pModule stored from wreg
 24606  01465A  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 24607                           
 24608                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 24609  01465C  5086               	movf	3974,w,c	;volatile
 24610  01465E  0B0F               	andlw	15
 24611  014660  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 24612                           
 24613                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 24614  014662  504B               	movf	_Bus_State,w,c
 24615  014664  A4D8               	btfss	status,2,c
 24616  014666  D002               	goto	i2l1738
 24617                           
 24618                           ;MXK.c: 110: return 0;
 24619  014668  0E00               	movlw	0
 24620  01466A  0012               	return	
 24621  01466C                     i2l1738:
 24622                           
 24623                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 24624  01466C  0E00               	movlw	0
 24625  01466E  6E4B               	movwf	_Bus_State,c
 24626                           
 24627                           ;MXK.c: 114: if (CUR != pModule)
 24628  014670  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24629  014672  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 24630  014674  B4D8               	btfsc	status,2,c
 24631  014676  D00A               	goto	i2l1740
 24632                           
 24633                           ;MXK.c: 115: {
 24634                           ;MXK.c: 116: PORTG &= ~(0xF);
 24635  014678  0EF0               	movlw	240
 24636  01467A  1686               	andwf	3974,f,c	;volatile
 24637                           
 24638                           ;MXK.c: 117: PORTG |= pModule;
 24639  01467C  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 24640  01467E  1286               	iorwf	3974,f,c	;volatile
 24641                           
 24642                           ;MXK.c: 120: delay_us(10);
 24643  014680  0E00               	movlw	0
 24644  014682  6E02               	movwf	i2delay_us@us+1,c
 24645  014684  0E0A               	movlw	10
 24646  014686  6E01               	movwf	i2delay_us@us,c
 24647  014688  EC20  F0A2         	call	i2_delay_us	;wreg free
 24648  01468C                     i2l1740:
 24649                           
 24650                           ;MXK.c: 121: }
 24651                           ;MXK.c: 122: return 1;
 24652  01468C  0E01               	movlw	1
 24653  01468E  0012               	return	
 24654  014690                     __end_ofi2_MXK_SwitchTo:
 24655                           	opt stack 0
 24656                           tosu	equ	0xFFF
 24657                           tosh	equ	0xFFE
 24658                           tosl	equ	0xFFD
 24659                           pclatu	equ	0xFFB
 24660                           pclath	equ	0xFFA
 24661                           tblptru	equ	0xFF8
 24662                           tblptrh	equ	0xFF7
 24663                           tblptrl	equ	0xFF6
 24664                           tablat	equ	0xFF5
 24665                           prodh	equ	0xFF4
 24666                           prodl	equ	0xFF3
 24667                           intcon	equ	0xFF2
 24668                           indf0	equ	0xFEF
 24669                           postinc0	equ	0xFEE
 24670                           plusw0	equ	0xFEB
 24671                           fsr0h	equ	0xFEA
 24672                           fsr0l	equ	0xFE9
 24673                           wreg	equ	0xFE8
 24674                           indf1	equ	0xFE7
 24675                           postdec1	equ	0xFE5
 24676                           fsr1h	equ	0xFE2
 24677                           fsr1l	equ	0xFE1
 24678                           indf2	equ	0xFDF
 24679                           postinc2	equ	0xFDE
 24680                           postdec2	equ	0xFDD
 24681                           plusw2	equ	0xFDB
 24682                           fsr2h	equ	0xFDA
 24683                           fsr2l	equ	0xFD9
 24684                           status	equ	0xFD8
 24685                           
 24686 ;; *************** function i2_delay_us *****************
 24687 ;; Defined at:
 24688 ;;		line 255 in file "Library/Types.c"
 24689 ;; Parameters:    Size  Location     Type
 24690 ;;  us              2    0[COMRAM] unsigned short 
 24691 ;; Auto vars:     Size  Location     Type
 24692 ;;  delay_us        4    2[COMRAM] unsigned long 
 24693 ;; Return value:  Size  Location     Type
 24694 ;;                  1    wreg      void 
 24695 ;; Registers used:
 24696 ;;		wreg, status,2, status,0
 24697 ;; Tracked objects:
 24698 ;;		On entry : 0/0
 24699 ;;		On exit  : 0/0
 24700 ;;		Unchanged: 0/0
 24701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24702 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24703 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24705 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24706 ;;Total ram usage:        6 bytes
 24707 ;; Hardware stack levels used:    1
 24708 ;; This function calls:
 24709 ;;		Nothing
 24710 ;; This function is called by:
 24711 ;;		i2_MXK_SwitchTo
 24712 ;; This function uses a non-reentrant model
 24713 ;;
 24714                           
 24715                           	psect	text143
 24716  014440                     __ptext143:
 24717                           	opt stack 0
 24718  014440                     i2_delay_us:
 24719                           	opt stack 12
 24720                           
 24721                           ;Types.c: 256: unsigned long u;
 24722                           ;Types.c: 257: while (us--) {
 24723                           
 24724                           ;incstack = 0
 24725  014440  D016               	goto	i2u495_40
 24726  014442                     i2l8307:
 24727                           
 24728                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 24729  014442  0E00               	movlw	0
 24730  014444  6E03               	movwf	i2delay_us@u,c
 24731  014446  0E00               	movlw	0
 24732  014448  6E04               	movwf	i2delay_us@u+1,c
 24733  01444A  0E00               	movlw	0
 24734  01444C  6E05               	movwf	i2delay_us@u+2,c
 24735  01444E  0E00               	movlw	0
 24736  014450  6E06               	movwf	i2delay_us@u+3,c
 24737  014452                     i2l8309:
 24738  014452  5003               	movf	i2delay_us@u,w,c
 24739  014454  1004               	iorwf	i2delay_us@u+1,w,c
 24740  014456  1005               	iorwf	i2delay_us@u+2,w,c
 24741  014458  1006               	iorwf	i2delay_us@u+3,w,c
 24742  01445A  A4D8               	btfss	status,2,c
 24743  01445C  D008               	goto	i2u495_40
 24744  01445E  F000               	nop		; ;# 
 24745  014460  0E01               	movlw	1
 24746  014462  2603               	addwf	i2delay_us@u,f,c
 24747  014464  0E00               	movlw	0
 24748  014466  2204               	addwfc	i2delay_us@u+1,f,c
 24749  014468  2205               	addwfc	i2delay_us@u+2,f,c
 24750  01446A  2206               	addwfc	i2delay_us@u+3,f,c
 24751  01446C  D7F2               	goto	i2l8309
 24752  01446E                     i2u495_40:
 24753  01446E  0601               	decf	i2delay_us@us,f,c
 24754  014470  A0D8               	btfss	status,0,c
 24755  014472  0602               	decf	i2delay_us@us+1,f,c
 24756  014474  2801               	incf	i2delay_us@us,w,c
 24757  014476  E1E5               	bnz	i2l8307
 24758  014478  2802               	incf	i2delay_us@us+1,w,c
 24759  01447A  B4D8               	btfsc	status,2,c
 24760  01447C  0012               	return	
 24761  01447E  D7E1               	goto	i2l832
 24762  014480                     __end_ofi2_delay_us:
 24763                           	opt stack 0
 24764                           tosu	equ	0xFFF
 24765                           tosh	equ	0xFFE
 24766                           tosl	equ	0xFFD
 24767                           pclatu	equ	0xFFB
 24768                           pclath	equ	0xFFA
 24769                           tblptru	equ	0xFF8
 24770                           tblptrh	equ	0xFF7
 24771                           tblptrl	equ	0xFF6
 24772                           tablat	equ	0xFF5
 24773                           prodh	equ	0xFF4
 24774                           prodl	equ	0xFF3
 24775                           intcon	equ	0xFF2
 24776                           indf0	equ	0xFEF
 24777                           postinc0	equ	0xFEE
 24778                           plusw0	equ	0xFEB
 24779                           fsr0h	equ	0xFEA
 24780                           fsr0l	equ	0xFE9
 24781                           wreg	equ	0xFE8
 24782                           indf1	equ	0xFE7
 24783                           postdec1	equ	0xFE5
 24784                           fsr1h	equ	0xFE2
 24785                           fsr1l	equ	0xFE1
 24786                           indf2	equ	0xFDF
 24787                           postinc2	equ	0xFDE
 24788                           postdec2	equ	0xFDD
 24789                           plusw2	equ	0xFDB
 24790                           fsr2h	equ	0xFDA
 24791                           fsr2l	equ	0xFD9
 24792                           status	equ	0xFD8
 24793                           
 24794 ;; *************** function i2_MXK_Release *****************
 24795 ;; Defined at:
 24796 ;;		line 130 in file "Library/MXK.c"
 24797 ;; Parameters:    Size  Location     Type
 24798 ;;		None
 24799 ;; Auto vars:     Size  Location     Type
 24800 ;;		None
 24801 ;; Return value:  Size  Location     Type
 24802 ;;                  1    wreg      unsigned char 
 24803 ;; Registers used:
 24804 ;;		wreg, status,2, status,0
 24805 ;; Tracked objects:
 24806 ;;		On entry : 0/0
 24807 ;;		On exit  : 0/0
 24808 ;;		Unchanged: 0/0
 24809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24811 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24813 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24814 ;;Total ram usage:        0 bytes
 24815 ;; Hardware stack levels used:    1
 24816 ;; This function calls:
 24817 ;;		Nothing
 24818 ;; This function is called by:
 24819 ;;		i2_Motor_Step
 24820 ;; This function uses a non-reentrant model
 24821 ;;
 24822                           
 24823                           	psect	text144
 24824  014C48                     __ptext144:
 24825                           	opt stack 0
 24826  014C48                     i2_MXK_Release:
 24827                           	opt stack 13
 24828                           
 24829                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 24830                           
 24831                           ;incstack = 0
 24832  014C48  0E01               	movlw	1
 24833  014C4A  6E4B               	movwf	_Bus_State,c
 24834                           
 24835                           ;MXK.c: 135: return 1;
 24836                           ;	Return value of i2_MXK_Release is never used
 24837  014C4C  0012               	return	
 24838  014C4E                     __end_ofi2_MXK_Release:
 24839                           	opt stack 0
 24840                           tosu	equ	0xFFF
 24841                           tosh	equ	0xFFE
 24842                           tosl	equ	0xFFD
 24843                           pclatu	equ	0xFFB
 24844                           pclath	equ	0xFFA
 24845                           tblptru	equ	0xFF8
 24846                           tblptrh	equ	0xFF7
 24847                           tblptrl	equ	0xFF6
 24848                           tablat	equ	0xFF5
 24849                           prodh	equ	0xFF4
 24850                           prodl	equ	0xFF3
 24851                           intcon	equ	0xFF2
 24852                           indf0	equ	0xFEF
 24853                           postinc0	equ	0xFEE
 24854                           plusw0	equ	0xFEB
 24855                           fsr0h	equ	0xFEA
 24856                           fsr0l	equ	0xFE9
 24857                           wreg	equ	0xFE8
 24858                           indf1	equ	0xFE7
 24859                           postdec1	equ	0xFE5
 24860                           fsr1h	equ	0xFE2
 24861                           fsr1l	equ	0xFE1
 24862                           indf2	equ	0xFDF
 24863                           postinc2	equ	0xFDE
 24864                           postdec2	equ	0xFDD
 24865                           plusw2	equ	0xFDB
 24866                           fsr2h	equ	0xFDA
 24867                           fsr2l	equ	0xFD9
 24868                           status	equ	0xFD8
 24869                           
 24870 ;; *************** function i2_MXK_Queue *****************
 24871 ;; Defined at:
 24872 ;;		line 144 in file "Library/MXK.c"
 24873 ;; Parameters:    Size  Location     Type
 24874 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 24875 ;;		 -> Absolute function(1), Motor_Step(1), 
 24876 ;; Auto vars:     Size  Location     Type
 24877 ;;		None
 24878 ;; Return value:  Size  Location     Type
 24879 ;;                  1    wreg      void 
 24880 ;; Registers used:
 24881 ;;		wreg, status,2, status,0
 24882 ;; Tracked objects:
 24883 ;;		On entry : 0/0
 24884 ;;		On exit  : 0/0
 24885 ;;		Unchanged: 0/0
 24886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24887 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24890 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24891 ;;Total ram usage:        3 bytes
 24892 ;; Hardware stack levels used:    1
 24893 ;; This function calls:
 24894 ;;		Nothing
 24895 ;; This function is called by:
 24896 ;;		i2_Motor_Step
 24897 ;; This function uses a non-reentrant model
 24898 ;;
 24899                           
 24900                           	psect	text145
 24901  014BCA                     __ptext145:
 24902                           	opt stack 0
 24903  014BCA                     i2_MXK_Queue:
 24904                           	opt stack 13
 24905                           
 24906                           ;MXK.c: 146: lQueue = pCallback;
 24907                           
 24908                           ;incstack = 0
 24909  014BCA  C001  F068         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 24910  014BCE  C002  F069         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 24911  014BD2  C003  F06A         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 24912  014BD6  0012               	return		;funcret
 24913  014BD8                     __end_ofi2_MXK_Queue:
 24914                           	opt stack 0
 24915                           tosu	equ	0xFFF
 24916                           tosh	equ	0xFFE
 24917                           tosl	equ	0xFFD
 24918                           pclatu	equ	0xFFB
 24919                           pclath	equ	0xFFA
 24920                           tblptru	equ	0xFF8
 24921                           tblptrh	equ	0xFF7
 24922                           tblptrl	equ	0xFF6
 24923                           tablat	equ	0xFF5
 24924                           prodh	equ	0xFF4
 24925                           prodl	equ	0xFF3
 24926                           intcon	equ	0xFF2
 24927                           indf0	equ	0xFEF
 24928                           postinc0	equ	0xFEE
 24929                           plusw0	equ	0xFEB
 24930                           fsr0h	equ	0xFEA
 24931                           fsr0l	equ	0xFE9
 24932                           wreg	equ	0xFE8
 24933                           indf1	equ	0xFE7
 24934                           postdec1	equ	0xFE5
 24935                           fsr1h	equ	0xFE2
 24936                           fsr1l	equ	0xFE1
 24937                           indf2	equ	0xFDF
 24938                           postinc2	equ	0xFDE
 24939                           postdec2	equ	0xFDD
 24940                           plusw2	equ	0xFDB
 24941                           fsr2h	equ	0xFDA
 24942                           fsr2l	equ	0xFD9
 24943                           status	equ	0xFD8
 24944                           tosu	equ	0xFFF
 24945                           tosh	equ	0xFFE
 24946                           tosl	equ	0xFFD
 24947                           pclatu	equ	0xFFB
 24948                           pclath	equ	0xFFA
 24949                           tblptru	equ	0xFF8
 24950                           tblptrh	equ	0xFF7
 24951                           tblptrl	equ	0xFF6
 24952                           tablat	equ	0xFF5
 24953                           prodh	equ	0xFF4
 24954                           prodl	equ	0xFF3
 24955                           intcon	equ	0xFF2
 24956                           indf0	equ	0xFEF
 24957                           postinc0	equ	0xFEE
 24958                           plusw0	equ	0xFEB
 24959                           fsr0h	equ	0xFEA
 24960                           fsr0l	equ	0xFE9
 24961                           wreg	equ	0xFE8
 24962                           indf1	equ	0xFE7
 24963                           postdec1	equ	0xFE5
 24964                           fsr1h	equ	0xFE2
 24965                           fsr1l	equ	0xFE1
 24966                           indf2	equ	0xFDF
 24967                           postinc2	equ	0xFDE
 24968                           postdec2	equ	0xFDD
 24969                           plusw2	equ	0xFDB
 24970                           fsr2h	equ	0xFDA
 24971                           fsr2l	equ	0xFD9
 24972                           status	equ	0xFD8
 24973                           
 24974                           	psect	text146
 24975  000000                     __ptext146:
 24976                           	opt stack 0
 24977                           tosu	equ	0xFFF
 24978                           tosh	equ	0xFFE
 24979                           tosl	equ	0xFFD
 24980                           pclatu	equ	0xFFB
 24981                           pclath	equ	0xFFA
 24982                           tblptru	equ	0xFF8
 24983                           tblptrh	equ	0xFF7
 24984                           tblptrl	equ	0xFF6
 24985                           tablat	equ	0xFF5
 24986                           prodh	equ	0xFF4
 24987                           prodl	equ	0xFF3
 24988                           intcon	equ	0xFF2
 24989                           indf0	equ	0xFEF
 24990                           postinc0	equ	0xFEE
 24991                           plusw0	equ	0xFEB
 24992                           fsr0h	equ	0xFEA
 24993                           fsr0l	equ	0xFE9
 24994                           wreg	equ	0xFE8
 24995                           indf1	equ	0xFE7
 24996                           postdec1	equ	0xFE5
 24997                           fsr1h	equ	0xFE2
 24998                           fsr1l	equ	0xFE1
 24999                           indf2	equ	0xFDF
 25000                           postinc2	equ	0xFDE
 25001                           postdec2	equ	0xFDD
 25002                           plusw2	equ	0xFDB
 25003                           fsr2h	equ	0xFDA
 25004                           fsr2l	equ	0xFD9
 25005                           status	equ	0xFD8
 25006                           
 25007                           	psect	rparam
 25008  0000                     tosu	equ	0xFFF
 25009                           tosh	equ	0xFFE
 25010                           tosl	equ	0xFFD
 25011                           pclatu	equ	0xFFB
 25012                           pclath	equ	0xFFA
 25013                           tblptru	equ	0xFF8
 25014                           tblptrh	equ	0xFF7
 25015                           tblptrl	equ	0xFF6
 25016                           tablat	equ	0xFF5
 25017                           prodh	equ	0xFF4
 25018                           prodl	equ	0xFF3
 25019                           intcon	equ	0xFF2
 25020                           indf0	equ	0xFEF
 25021                           postinc0	equ	0xFEE
 25022                           plusw0	equ	0xFEB
 25023                           fsr0h	equ	0xFEA
 25024                           fsr0l	equ	0xFE9
 25025                           wreg	equ	0xFE8
 25026                           indf1	equ	0xFE7
 25027                           postdec1	equ	0xFE5
 25028                           fsr1h	equ	0xFE2
 25029                           fsr1l	equ	0xFE1
 25030                           indf2	equ	0xFDF
 25031                           postinc2	equ	0xFDE
 25032                           postdec2	equ	0xFDD
 25033                           plusw2	equ	0xFDB
 25034                           fsr2h	equ	0xFDA
 25035                           fsr2l	equ	0xFD9
 25036                           status	equ	0xFD8
 25037                           
 25038                           	psect	temp
 25039  000051                     btemp:
 25040                           	opt stack 0
 25041  000051                     	ds	1
 25042  0000                     int$flags	set	btemp
 25043  0000                     wtemp6	set	btemp+1
 25044                           tosu	equ	0xFFF
 25045                           tosh	equ	0xFFE
 25046                           tosl	equ	0xFFD
 25047                           pclatu	equ	0xFFB
 25048                           pclath	equ	0xFFA
 25049                           tblptru	equ	0xFF8
 25050                           tblptrh	equ	0xFF7
 25051                           tblptrl	equ	0xFF6
 25052                           tablat	equ	0xFF5
 25053                           prodh	equ	0xFF4
 25054                           prodl	equ	0xFF3
 25055                           intcon	equ	0xFF2
 25056                           indf0	equ	0xFEF
 25057                           postinc0	equ	0xFEE
 25058                           plusw0	equ	0xFEB
 25059                           fsr0h	equ	0xFEA
 25060                           fsr0l	equ	0xFE9
 25061                           wreg	equ	0xFE8
 25062                           indf1	equ	0xFE7
 25063                           postdec1	equ	0xFE5
 25064                           fsr1h	equ	0xFE2
 25065                           fsr1l	equ	0xFE1
 25066                           indf2	equ	0xFDF
 25067                           postinc2	equ	0xFDE
 25068                           postdec2	equ	0xFDD
 25069                           plusw2	equ	0xFDB
 25070                           fsr2h	equ	0xFDA
 25071                           fsr2l	equ	0xFD9
 25072                           status	equ	0xFD8


Data Sizes:
    Strings     150
    Constant    762
    Data        29
    BSS         682
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     61     160
    BANK1           256     13     215
    BANK2           256      0      70
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_13(CODE[24]), STR_12(CODE[24]), STR_11(CODE[24]), STR_10(CODE[13]), 
		 -> STR_9(CODE[15]), STR_8(CODE[11]), STR_7(CODE[13]), STR_6(CODE[14]), 
		 -> STR_5(CODE[8]), STR_4(CODE[12]), STR_3(CODE[15]), STR_2(CODE[3]), 
		 -> STR_1(CODE[22]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11820I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    S11502ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK1[5]), ADC_AN2(BANK0[5]), ADC_AN1(BANK0[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK1[8]), HMIBoard(BANK1[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK1[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK1[2]), 
		 -> PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), PortA(BANK1[10]), 
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK1[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK1[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK1[2]), PortA..(BANK1[2]), PortG..(BANK1[2]), PortG(BANK1[10]), 
		 -> PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK1[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK1[11]), SPI2(BANK1[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK1[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK1[10]), PortA(BANK1[10]), PortB(BANK1[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK1[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK2[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_HMI_DownButton(), Event_HMI_UpButton(), 
		 -> Event_HMI_RightButton(), Event_HMI_LeftButton(), Event_HMI_DIPSwitch(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK1[10]), TestButton(BANK1[10]), HMIBoard(BANK1[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _setMode->_continuousMode
    _displayText->_displayMode
    _displaySID->_printf
    _displayMode->_getMode
    _printf->___llmod
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___llmod->___lldiv
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Button_Poll->_Event_HMI_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _Event_HMI_UpButton->_LED_Toggle
    _Event_HMI_RightButton->_LED_Toggle
    _Event_HMI_LeftButton->_LED_Toggle
    _Event_HMI_DownButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwdiv
    _itos->_reverse
    _HMI_SetSegments->_ToSegment
    _Event_HMI_DIPSwitch->_LED_Toggle
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _FunctMotor->_Motor_Speed
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _initialise->_HMI_Init
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0 2967111
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                        _displayText
                         _initialise
                            _setMode
 ---------------------------------------------------------------------------------
 (1) _setMode                                             10     4      6 1615577
                                             52 BANK0      8     2      6
                                              0 BANK1      2     2      0
                     _continuousMode
                            _getMode
                           _nullMode
                       _positionMode
                           _stepMode
 ---------------------------------------------------------------------------------
 (2) _stepMode                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _positionMode                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _nullMode                                             0     0      0  372508
                     _Console_Render
                        _displayText
                             _printf
 ---------------------------------------------------------------------------------
 (2) _continuousMode                                       6     6      0  976006
                                             46 BANK0      6     6      0
                     _Console_Render
              _Console_SetForecolour
                         _FunctMotor
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
                        _displayText
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _displayText                                          0     0      0  328714
                     _Console_Render
                        _displayMode
                         _displaySID
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displaySID                                           0     0      0    8954
              _Console_SetForecolour
                             _printf
 ---------------------------------------------------------------------------------
 (4) _displayMode                                          4     4      0  275966
                                             42 BANK0      4     4      0
              _Console_SetForecolour
                            _getMode
                             _printf
 ---------------------------------------------------------------------------------
 (3) _printf                                              27    21      6    8467
                                             22 BANK0     18    12      6
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (5) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (6) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (7) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (8) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (8) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (7) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     840
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (5) _getMode                                              6     4      2  266978
                                             36 BANK0      6     4      2
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _HMI_Poll                                             0     0      0  255286
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (7) _Button_Poll                                          9     6      3  255286
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                _Event_HMI_DIPSwitch *
               _Event_HMI_DownButton *
               _Event_HMI_LeftButton *
              _Event_HMI_RightButton *
                 _Event_HMI_UpButton *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (6) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (6) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (8) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (7) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (8) _Event_TestButton                                     1     1      0   36429
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_UpButton                                   1     1      0   36284
                                             25 BANK0      1     1      0
                      _HMI_SetNumber
                          _HMI_SetUp
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetUp                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_RightButton                                1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                       _HMI_SetRight
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetRight                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_LeftButton                                 1     1      0   32981
                                             25 BANK0      1     1      0
                         _HMI_SetBar
                        _HMI_SetLeft
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetLeft                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DownButton                                 1     1      0   36284
                                             25 BANK0      1     1      0
                        _HMI_SetDown
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetNumber                                        2     0      2    3334
                                             17 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (10) _itos                                               10     6      4    2401
                                              7 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (11) _reverse                                             7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (11) ___lwmod                                             5     1      4     536
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (11) ___lwdiv                                             7     3      4     545
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) _HMI_SetSegments                                     5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (11) _ToSegment                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_SetDown                                          1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (8) _Event_HMI_DIPSwitch                                  2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (8) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (9) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (9) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_SetForecolour                                2     0      2     487
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (5) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (5) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (6) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _FunctMotor                                           2     2      0   68619
                                             31 BANK0      2     2      0
                         _LED_Toggle
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                        _MXK_Release
                         _Motor_Move
                        _Motor_Speed
 ---------------------------------------------------------------------------------
 (4) _Motor_Speed                                          4     0      4    3839
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Motor_Move                                           6     2      4     611
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (5) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _initialise                                           0     0      0  991508
                       _Console_Init
                           _HMI_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88782
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (5) _Timer0_Init                                         14    10      4    3442
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (6) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362160
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              3 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      3     0      3
                                              0 BANK1      3     3      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (5) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (6) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (7) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (6) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (7) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (8) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (8) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261965
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94285
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1166
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (9) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (10) _Port_TogglePin                                      4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (11) _Port_SetPin                                         5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  218205
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86443
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    3268
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2977
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (12) _Byte_SetBit                                         7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (12) _Word_GetPair                                        3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (13) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (14) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (15) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (16) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (17) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (19) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (20) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (21) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (19) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (18) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (19) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (18) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (17) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 21
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _displayText
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _displayMode
       _Console_SetForecolour
       _getMode
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _displaySID
       _Console_SetForecolour
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _printf
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
   _initialise
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
   _setMode
     _continuousMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _Console_SetForecolour
       _FunctMotor
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _MXK_BlockSwitchTo
           _delay_us
         _MXK_Dequeue
           Absolute function(Fake) *
           _Motor_Step *
             _MXK_Queue
             _MXK_Release
             _MXK_SwitchTo
               _delay_us
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Timer0_Restart
             _Timer0_Stop
         _MXK_Release
         _Motor_Move
           _Timer0_Start
         _Motor_Speed
           _Timer0_Init
             _Timer0_Clear
             ___lldiv
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
       _displayText *
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _getMode *
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_Poll *
           _Button_Poll
             _Event_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DIPSwitch *
               _HMI_GetBar
               _HMI_SetBar
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_DownButton *
               _HMI_SetDown
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_LeftButton *
               _HMI_SetBar
               _HMI_SetLeft
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_RightButton *
               _HMI_SetBar
               _HMI_SetRight
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_HMI_UpButton *
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _HMI_SetUp
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _Event_TestButton *
               _HMI_SetButton
               _HMI_SetNumber
                 _HMI_SetSegments
                   _ToSegment
                 _itos
                   ___lwdiv
                   ___lwmod
                   _reverse
               _LED_Toggle
                 _Port_TogglePin
                   _Port_GetPin
                   _Port_SetPin
                     _Byte_SetBit
                     _Word_GetPair
                       _Byte_GetPair
                         _Byte_GetZone
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
       _printf *
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _getMode
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_Poll *
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_DownButton *
             _HMI_SetDown
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_LeftButton *
             _HMI_SetBar
             _HMI_SetLeft
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_RightButton *
             _HMI_SetBar
             _HMI_SetRight
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_HMI_UpButton *
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _HMI_SetUp
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
     _nullMode
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _displayText
         _Console_Render
           _Console_MakeField
             _Byte_GetBit
           _LCD_DrawField
             _Console_MakeField (ARG)
               _Byte_GetBit
             _LCD_Word_Write (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window (ARG)
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             ___wmul (ARG)
           _LCD_FillRectangle
             _LCD_Word_Write
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
             _Set_Addr_Window
               _LCD_Write
                 _Mode_Set
                 _SPI_Send
         _displayMode
           _Console_SetForecolour
           _getMode
             _HMI_DIPSwitch *
               _Port_GetQuad
             _HMI_DownSwitch *
               _Port_GetPin
             _HMI_LeftSwitch *
               _Port_GetPin
             _HMI_Poll *
               _Button_Poll
                 _Event_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DIPSwitch *
                   _HMI_GetBar
                   _HMI_SetBar
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_DownButton *
                   _HMI_SetDown
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_LeftButton *
                   _HMI_SetBar
                   _HMI_SetLeft
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_RightButton *
                   _HMI_SetBar
                   _HMI_SetRight
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_HMI_UpButton *
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _HMI_SetUp
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _Event_TestButton *
                   _HMI_SetButton
                   _HMI_SetNumber
                     _HMI_SetSegments
                       _ToSegment
                     _itos
                       ___lwdiv
                       ___lwmod
                       _reverse
                   _LED_Toggle
                     _Port_TogglePin
                       _Port_GetPin
                       _Port_SetPin
                         _Byte_SetBit
                         _Word_GetPair
                           _Byte_GetPair
                             _Byte_GetZone
                 _HMI_DIPSwitch *
                   _Port_GetQuad
                 _HMI_DownSwitch *
                   _Port_GetPin
                 _HMI_LeftSwitch *
                   _Port_GetPin
                 _HMI_RightSwitch *
                   _Port_GetPin
                 _HMI_UpSwitch *
                   _Port_GetPin
                 _MXK_DIPSwitch *
                   _Port_GetQuad
                 _MXK_TestButton *
                   _Port_GetPin
             _HMI_RightSwitch *
               _Port_GetPin
             _HMI_UpSwitch *
               _Port_GetPin
             _MXK_DIPSwitch *
               _Port_GetQuad
             _MXK_TestButton *
               _Port_GetPin
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _displaySID
           _Console_SetForecolour
           _printf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             _putch
               _Console_PrintChar
                 _Console_Backspace
                   _Console_ClearCursor
                 _Console_FormFeed
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 _Console_NewLine
                 _Console_ResetCursor
                 _Console_Tab
                   _Console_ClearCursor
                   _Console_IncrementCursor
                     _Console_FormFeed
                     _Console_NewLine
                   ___awdiv
         _printf
           ___lldiv
           ___llmod
             ___lldiv (ARG)
           _putch
             _Console_PrintChar
               _Console_Backspace
                 _Console_ClearCursor
               _Console_FormFeed
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               _Console_NewLine
               _Console_ResetCursor
               _Console_Tab
                 _Console_ClearCursor
                 _Console_IncrementCursor
                   _Console_FormFeed
                   _Console_NewLine
                 ___awdiv
       _printf
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _positionMode
     _stepMode

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0      46       9       27.3%
BITBANK1           100      0       0       6        0.0%
BANK1              100      D      D7       7       84.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3D      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     20D      12        0.0%
DATA                 0      0     339       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Aug 11 13:30:40 2017

                   i2_Timer0_Stop 4C42                  SPI_Init@pChannel 00E9  
      __size_of_MXK_BlockSwitchTo 003E                      i2_Motor_Step 2490  
                               _A 004C                                 l8 26BA  
                               _a 004D                                 _i 003A  
                               _j 0039                                 _k 0037  
                               _l 004F                                 _u 0038  
                               _w 0050                      ?_displayMode 0001  
                    ?_displayText 0001                                l11 1FC2  
                              l12 1FAC                                l90 1EF8  
                              l85 1DF4                                l87 1E62  
                              l89 1ECE                                _Hz 00FB  
                    ___awdiv@sign 00BD               ___wmul@multiplicand 00BA  
                   _HMI_DIPSwitch 4AA6                LCD_DrawField@pSize 00D0  
              LCD_DrawField@count 00D6                 ?_Event_TestButton 0001  
                i2_Timer0_Restart 4BF0                               l120 354E  
                             l121 3564                               l122 357A  
                             l220 3EA2                               l117 3590  
                             l221 3E66                               l118 3538  
                             l230 414A                               l222 3EB2  
                             l223 3E84                       ?_LED_Toggle 0001  
                             l234 42DC                               l235 42AC  
                             l227 4166                               l403 1C08  
                             l412 18E4                               l228 412E  
                             l340 30C4                               l404 1BA8  
                             l421 1878                               l413 177A  
                             l237 42C4                               l341 30D2  
                             l405 1C38                     ??_Console_Tab 00C0  
                             l414 1900                               l430 28FE  
                             l350 31CC                               l342 30E0  
                             l510 1136                               l406 1BC0  
                             l415 17A0                               l351 315C  
                             l343 30EE                               l511 1246  
                             l407 1BD8                               l183 3280  
                             l600 000C                               l432 2928  
                             l344 30FC                               l512 1158  
                             l408 1BF0                               l184 325A  
                             l417 180C                               l601 01A0  
                             l433 2958                               l353 316A  
                             l337 3126                               l345 310A  
                             l610 0228                               l602 003E  
                             l354 3178                               l346 3118  
                             l338 30B6                               l370 3056  
                             l611 0276                               l603 01B2  
                             l427 2982                               l355 3186  
                             l363 3080                               l371 3064  
                             l531 0774                       ?_HMI_GetBar 0001  
                             l612 02C4                               l604 00EC  
                             l356 3194                               l372 3072  
                             l364 3010                               l532 0798  
                             l516 11A0                               l357 31A2  
                             l509 122A                               l614 03A6  
                             l358 31B0                               l366 301E  
                             l526 07B8                               l615 039E  
                             l607 0312                               l359 31BE  
                             l367 302C                               l519 11E8  
                             l616 03B8                               l608 01DA  
                             l368 303A                               l528 07D6  
                             l393 3FD0                               l617 03A2  
                             l609 0330                               l369 3048  
                             l529 0754                               l483 0B1A  
                             l732 3438                               l476 0BF2  
                             l900 0892                               l733 342C  
                             l389 3D2E                               l477 0A64  
                             l397 42A0                               l901 0896  
                             l726 2D84                               l478 0C0E  
                             l486 0B86                               l654 4896  
                             l910 08BA                               l902 089A  
                             l727 2D78                               l479 0AAE  
                             l655 488E                               l911 08BE  
                             l903 089E                               l824 3C62  
                             l832 4088                               l912 08C2  
                             l904 08A2                               l673 4778  
                             l657 4892                               l681 3C06  
                             l913 08C6                               l905 08A6  
                             l921 3BD6                               l914 08CA  
                             l906 08AA                               l922 3BA2  
                             l930 25CE                               l819 3858  
                             l915 08CE                               l907 08AE  
                             l684 3C1C                               l916 08D2  
                             l908 08B2                               l860 07F2  
                             l781 4528                               l597 001A  
                             l853 08DA                               l917 08D6  
                             l909 08B6                               l861 07F6  
                             l598 0002                               l678 3C42  
                             l686 3C2C                               l870 081A  
                             l862 07FA                               l854 07DE  
                             l599 002A                               l679 3BF6  
                             l871 081E                               l863 07FE  
                             l776 4364                               l880 0842  
                             l872 0822                               l864 0802  
                             l856 07E2                               l928 264E  
                             l881 0846                               l873 0826  
                             l865 0806                               l857 07E6  
                             l929 261E                               l890 086A  
                             l882 084A                               l874 082A  
                             l866 080A                               l858 07EA  
                             l891 086E                               l883 084E  
                             l875 082E                               l867 080E  
                             l859 07EE                               l892 0872  
                             l884 0852                               l876 0832  
                             l868 0812                               l893 0876  
                             l885 0856                               l877 0836  
                             l869 0816                               l894 087A  
                             l886 085A                               l878 083A  
                             l990 365A                               l895 087E  
                             l887 085E                               l879 083E  
                             l983 331E                               l976 3772  
                             l896 0882                               l888 0862  
                             l992 366A                               l984 32A2  
                             l897 0886                               l889 0866  
                             l985 331A                               l978 3782  
                             l898 088A                               l899 088E  
                             l997 3F36                               l999 3F5A  
                             _PR2 000FCB                               _val 006D  
                     ?_HMI_SetBar 0001                ??_Event_TestButton 00D1  
                    _Word_GetPair 44FC                               prod 000FF3  
             MXK_SwitchTo@pModule 00BF                               tosl 000FFD  
                             wreg 000FE8                Console_MakeField@x 00C8  
              Console_MakeField@y 00C9                      Console_Tab@c 00C7  
                    Console_Tab@i 00C6               LCD_DrawField@pField 00CA  
                    Console_Tab@t 00C5      __end_of_Event_HMI_LeftButton 402E  
                      i2_delay_us 4440              Port_Set@TypeRequired 00DA  
               Console_FormFeed@x 00BA                 Console_FormFeed@y 00BB  
             LCD_DrawField@pPoint 00CC      __end_of_Event_HMI_DownButton 46F6  
                  ?_LCD_DrawField 00CA             Port_SetPinType@Output 00E2  
                 Port_SetPin@Type 00CB                   Port_SetPin@pPin 00C9  
                   ?_Byte_GetPair 00C1                   __end_of_LED_Set 4178  
         __size_ofi2_Word_GetPair 0030                     i2_Port_SetPin 2F60  
                    _Word_SetPair 4334                              l1000 3F76  
                            l1010 29F2                              l1004 3D68  
                   ?_Byte_GetZone 00B8                              l1005 3D96  
                            l1040 192E                              l1009 29FE  
                            l1041 1934                              l1210 2D14  
                            l1042 193A                              l1043 1940  
                            l1212 2D3E                              l1036 1A8A  
                            l1044 1946                              l1213 2D24  
                            l1045 194C                              l1037 1928  
                            l2014 3EEA                              l1062 14F2  
                            l2030 3714                              l2110 0FF0  
                            l2102 0F26                              l2007 2BCC  
                            l1063 1520                              l1215 2D50  
                            l2031 3720                              l1047 19F2  
                            l2008 2B8C                              l1056 1382  
                            l1208 2CA4                              l2040 33A4  
                            l1161 1760                              l1057 1548  
                            l1209 2CF8                              l2105 0F8A  
                            l1082 27A8                              l1058 138A  
                            l2026 372C                              l2114 1056  
                            l2106 0F2C                              l2050 0DD8  
                            l1059 13B4                              l2027 36FC  
                            l2115 10F6                              l2107 0F44  
                            l2035 33B6                              l1084 27B0  
                            l2116 1066                              l2108 0FAC  
                            l2036 336E                              l2044 0EDE  
                            l1077 2778                              l2029 3708  
                            l2045 0CD4                              l2038 3380  
                            l2054 0E26                              l2046 0D56  
                            l2070 40E6                              l1079 2788  
                            l2039 3392                              l2055 0E70  
                            l2072 40EC                              l2080 457A  
                            l2073 40F2                              l2074 40F8  
                            l2069 40FE                              l1640 2416  
                            l2096 0F0A                              l2097 0F1E  
                            l2290 2ABE                              l1635 247E  
                            l2523 3886                              l2291 2AB2  
                            l2099 0F4E                              l1732 44CA  
                            l1740 43FC                              l1636 2474  
                            l2524 387A                              l1900 46EE  
                            l1637 23F4                              l2533 3E1E  
                            l2470 2C1A                              l1734 44F8  
                            l1638 23D6                              l2534 3E12  
                            l2294 2AF4                              l2471 2C0A  
                            l1743 4A70                              l1639 2432  
                            l2527 38BC                              l2295 2B02  
                            l2287 2A7E                              l2528 38CA  
                            l2480 34A8                              l2296 2B16  
                            l2288 2A94                              l2537 3E48  
                            l2481 3498                              l2474 2C74  
                            l1738 43D4                              l2538 3E56  
                            l2475 2C86                              l1835 2276  
                            l1836 2296                              l2484 34F2  
                            l2485 3504                              l1792 2110  
                            l1793 211E                              l1795 2128  
                            l1891 43B6                              l1884 4026  
                            l1892 43A6                              l1885 400C  
                            l1878 456E                              l1887 401E  
                            l1896 471E                    ??_Console_Init 00B8  
           Port_SetPinType@pInput 00DE                              STR_1 FF81  
                            STR_2 FFFC                              STR_3 FF97  
                            STR_4 FFDD                              STR_5 FFF4  
                            STR_6 FFB5                              STR_7 FFC3  
                            STR_8 FFE9                              STR_9 FFA6  
                            _DIST 00F9                              _LATA 000F89  
                            _LATB 000F8A                              _LATC 000F8B  
                            _LATD 000F8C                              _LATE 000F8D  
                            _LATF 000F8E       __size_of_MXK_InitTestButton 001E  
                            _LATG 000F8F               __end_of_GetPortPORT 31FC  
                            u7005 4B9C                              u7030 37F2  
                            u7006 4B9E                              u7400 2C20  
                            u7208 1F56                              u7209 1F6A  
                            _PIR1 000F9E                              u7074 2DC0  
                            u6610 3468                              u8210 4080  
                            u8050 1530                              _PIR2 000FA1  
                            u7075 2DBA                              _PIR3 000FA4  
                            u7084 2DF2                              u7085 2DEC  
                            u7350 46B2                              u6710 3E24  
                            u7430 34AE                              u6615 3462  
                            u7280 40C0               __end_of_GetPortTRIS 30B0  
                            u8240 1C3E                              u6800 36AE  
                            u6634 3DB6                              u6650 4322  
                            u8330 1F06                              u7530 39B8  
                            u7258 2092                              u6810 36B4  
                            u6635 3DB0                              u7355 46AC  
                            u6644 3DE8                              u7620 22E2  
                            u6645 3DE2                              u7605 222E  
                            u6590 3402                              u6750 263A  
                            u6655 431C                              u8360 37DA  
                            u7720 217C                              u6680 388C  
                            u6905 4B5C                              u7490 3CA0  
                            u8290 1DF2                              u6906 4B60  
                            u6915 4B46                              u8188 2726  
                            u6916 4B4A                              u6860 424C  
                            u6597 33F8                              u6925 4B88  
                            u7750 23B4                              u7670 27F2  
                            u6926 4B8C                              u6934 360A  
                            u6870 3D64                              u7830 1042  
                            u6935 3604                              u7760 23C8  
                            u7680 27FE                              u6880 3D8E  
                            u6865 4246                              u7770 2408  
                            u6970 2AC4                              u7850 110C  
                            u7915 044C                              u7925 0464  
                            u7935 047C                              u6895 4B72  
                            u6896 4B76                              u7945 049E  
                            u7955 061E                              _SPI1 0164  
                            _SPI2 016F                              u7965 069C  
                            u7878 36D8                              u7975 06DE  
                            u7879 36EC                              u7985 0720  
                            _TMR0 000FD6                              u9988 4494  
                            u9989 44AA                              _gISR 0029  
              Event_DIPSwitch@Bar 00D2                     ??_Byte_GetBit 00BB  
              SPI_MaxSpeed@pInput 00C7                     ?_Byte_SetByte 00B8  
                   ?_Byte_SetPair 00C3                   __end_of_SPI_DCS 4786  
                            _main 4576                   ??i2_Byte_SetBit 0005  
                   ?_Byte_SetQuad 00C3                              _itos 2590  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            indf0 000FEF                              fsr2h 000FDA  
                            fsr0l 000FE9                              indf1 000FE7  
                            indf2 000FDF                              fsr1l 000FE1  
                            fsr2l 000FD9                     ?_Byte_SetZone 00B8  
                            btemp 0051                              _zero 004E  
                   ??_Byte_SetBit 00BC                      ?_HMI_SetLeft 0001  
              __size_of_LCD_Reset 0050                      ?_HMI_SetDown 0001  
                            prodh 000FF4                              prodl 000FF3  
                Motor_Move@pDelta 00BD                              start 14AA  
              __size_of_LCD_Write 0022                     __CFG_IESO$OFF 000000  
               Timer0_Init@DIVIDE 00CF                   ?_SPI_DisableISR 00B8  
                Motor_Move@pMotor 00BB               HMI_SetButton@pValue 00BE  
                   Console_Init@x 00BA                     Console_Init@y 00BB  
                  ?i2_Timer0_Stop 0001                __size_of_HMI_SetUp 0016  
               i2Byte_SetBit@pBit 0003                      ___param_bank 000000  
                 __end_of_Font5x7 FF5B              Set_Rotation@rotation 00BE  
          __size_of_HMI_SetButton 0090            __size_of_HMI_SetNumber 002A  
    __size_of_Console_ClearCursor 0040                  __end_of_LCD_Fill 4086  
                __end_of_LCD_Init 1F44                   getMode@dipState 00E0  
                  ?_HMI_DIPSwitch 0001                     __CFG_PLLDIV$3 000000  
                __end_of_LED_Init 3EC2                     ??_Button_Init 00F3  
         GetPortProperties@pInput 00BA                     ??_Button_Poll 00D6  
                           l11001 3C62                             l11003 3C74  
                __end_of_HMI_Init 1762                             l11023 399C  
                           l11009 3CA0                             l11019 398E  
                           l10309 263A                             l10341 3660  
                           l11151 277E                             l10335 3650  
                           l11303 1066                             l11145 276E  
                           l11183 2110                             l10383 2D3E  
                           l11099 2276                             l11285 0FF6  
                           l10671 401E                             l11801 4056  
                           l13145 0DAE                             l13137 0D56  
                           l11619 13AA                             l11805 4064  
                           l10757 4088                             l11911 1E62  
                           l10759 409A                             l11921 1F06  
                           l11841 1B9E                             l11933 3768  
                           l11961 1734                             l11939 3778  
                __end_of_HMI_Poll 3B18                             _I2C1T 0040  
                           _I2C2T 01B6                             ?_main 0001  
                 __end_of___awdiv 2B20                             ?_itos 00BF  
                           STR_10 FFD0                             STR_11 FF69  
                           STR_12 FF69                             STR_13 FF69  
                 _Event_DIPSwitch 47B6                   __end_of___lldiv 2C98  
                           u10140 0DAE                             u10108 0D5E  
                           u10109 0D72                             u10070 0D2E  
                           u10038 0CDC                             u10039 0CF0  
                           u10128 0D80                             u10129 0D94  
                           u10218 0E2E                             u10058 0CFE  
                           u10219 0E42                             u10059 0D12  
                           u10238 0E50                             u10158 0DB6  
                           u10239 0E64                             u10159 0DCA  
                           u10351 4594                             u10088 0D36  
                           u10089 0D4A                             u10178 0DE0  
                           u10179 0DF4           __size_of_HMI_LeftSwitch 0018  
                 ___awdiv@divisor 00BA                             u10198 0E02  
                           u10199 0E16                   __end_of___llmod 3516  
                           _INDEX 0079                   __end_of___lwdiv 38D4  
                           _MASKS FD69                   __end_of___lwmod 3E60  
                           i2l430 2F78                             i2l432 2F9E  
                           i2l433 2FC8                             i2l427 2FEE  
                           i2l732 3920                             i2l733 391A  
                           i2l832 4442                             i2l781 47A4  
                 ___awdiv@counter 00BC                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTD 000F83                             _PORTE 000F84  
                           _PORTF 000F85                             _PORTG 000F86  
         __size_of_HMI_DownSwitch 0018                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TRISF 000F97                             _TRISG 000F98  
                ??i2_Byte_GetPair 000D                             _HzInc FD79  
                           _HzOld 002F                  ??i2_Byte_GetZone 0006  
              Port_TogglePin@pPin 00CE                   __end_of_getMode 3756  
                  __CFG_FCMEN$OFF 000000                             _PortA 01A2  
                           _PortB 0198                             _PortC 0091  
                           _PortD 0087                             _PortE 007D  
                           _PortF 01AC                             _PortG 018E  
         __end_of_Port_SetPinType 1922                   _ADC_Initialised 003C  
                  ??_Byte_GetPair 00C4                    ?i2_Port_SetPin 0010  
                     LED_Set@pLED 00CD                   __end_of_dpowers FD49  
                  ??_Byte_GetZone 00BD                    Button_Poll@Pin 00DB  
        __size_of_Set_Addr_Window 00AA               __end_of_Console_Tab 2A62  
                __end_of_MXK_Init 1DD2              i2Byte_GetPair@pInput 000A  
                           _putch 4BA0                  __end_of_SPI_Init 041E  
                __end_of_SPI_Send 3C60                   __end_of_setMode 4128  
           __end_ofi2_MXK_Release 4C4E                             pclath 000FFA  
                           tablat 000FF5                   __end_of_reverse 3BF4  
              __size_of_MXK_Queue 000E                    ??_Byte_SetByte 00BB  
                  ??_Byte_SetPair 00C7                    ??_Byte_SetQuad 00C7  
                           plusw0 000FEB                             plusw2 000FDB  
                  ??_Byte_SetZone 00BE                     ?_HMI_SetRight 0001  
                           status 000FD8                             wtemp6 0052  
                 _Configure_GPIOs 3B18              i2MXK_Queue@pCallback 0001  
                     i2delay_us@u 0003                    _LCD_Word_Write 49A4  
             __size_of_LED_Toggle 0048               __size_of_HMI_GetBar 0006  
                   ?_HMI_UpSwitch 0001       __size_of_Port_CheckPairType 006A  
             __size_of_HMI_SetBar 000A                   __initialization 2E08  
             __end_of_Byte_GetBit 46C4                      __end_of_main 45B0  
                    __end_of_itos 2668              HMI_SetButton@reindex 00BA  
                    SPI_Send9@dat 0035               __end_of_Byte_SetBit 3DFE  
                __end_of_InitList FD21                        _FunctMotor 2B20  
     __size_of_Port_CheckQuadType 005A                  __end_of_Mode_Set 4BA0  
     __size_of_Port_CheckPortType 0048                            ??_main 00F5  
                          ??_itos 00C3           _Console_MakeField$10974 00C6  
                   __activetblptr 000003                 Port_SetPin@pInput 00C7  
               __end_of_LCD_Reset 41C8                 Port_SetPin@pValue 00CA  
                       ??_LED_Set 00CD                 _MXK_InitDIPSwitch 49FE  
               GetPortPORT@pInput 00BA            Port_CheckPairType@Pin1 00E2  
          Port_CheckPairType@Pin2 00E3                 __end_of_LCD_Write 4922  
                     _GetPortPORT 3156                      ?i2_MXK_Queue 0001  
                     _GetPortTRIS 300A                   ??_LCD_DrawField 00D4  
      __end_of_PortProperty_Valid 385C                  __end_of_Port_Set 07D8  
                     ?i2_delay_us 0001  __size_of_Console_IncrementCursor 0066  
             __end_of_Button_Init 273C               __end_of_Button_Poll 20AA  
               Word_GetPair@pPair 00C6           LCD_FillRectangle@pPoint 00C3  
               __end_of_HMI_SetUp 4B4C                ?_MXK_InitDIPSwitch 0001  
                   _HMI_SetButton 35AE                         ??_SPI_DCS 00BA  
                ___llmod@dividend 00C5                            _ADRESH 000FC4  
                          _ADRESL 000FC3                     _HMI_SetNumber 4810  
          Port_SetQuadType@Output 00F2                            _ANCON0 000FC1  
                ___awdiv@dividend 00B8                    _continuousMode 0CB2  
                          ?_putch 0001                  ??_Console_Render 00DB  
                   ToSegment@pCHR 00B8             _Console_SetForecolour 4C1C  
                _Console_FormFeed 363E            Port_SetQuadType@pInput 00EE  
                          i2l1640 252E                            i2l1635 257E  
                          i2l1740 468C                            i2l1636 2574  
                          i2l1637 250C                            i2l1638 24F6  
                  __CFG_WDTEN$OFF 000000                            i2l1639 2542  
                          i2l1738 466C                            i2l1598 145E  
                          i2l8307 4442                            i2l8309 4452  
                  ??_HMI_SetRight 00B8            __end_of_LCD_Word_Write 49C2  
                  _Timer0_Restart 4BE4               ??_MXK_InitDIPSwitch 00F3  
                  i2_MXK_SwitchTo 465A                   Byte_GetBit@pBit 00BA  
    Console_SetForecolour@pColour 00B8                        _Reset_High 49E0  
              Console_Render@temp 00DD                    ??_HMI_UpSwitch 00BE  
                 ??i2_Timer0_Stop 0001               Port_TogglePin@Value 00CF  
                __end_of_delay_ms 3CCA                      LED_Init@pLED 00E5  
                __end_of_delay_us 40D8                     ??_Timer0_Init 00C9  
                   ??_Timer2_Init 00C9                     ??_Timer0_Stop 00B8  
                      _Timer0_ISR 48DA          __size_of_Console_NewLine 00A2  
               Timer2_Init@DIVIDE 00D2                    __CFG_XINST$OFF 000000  
        __size_of_HMI_InitButtons 0004                        _Motor_Init 280C  
     __size_of_Event_HMI_UpButton 0030                        _Motor_Move 45EA  
                   ??_Motor_Speed 00D7                        _Motor_Step 236A  
            _Event_HMI_LeftButton 3FD6           __end_of_Event_DIPSwitch 47E4  
  __size_of_Event_HMI_RightButton 0044                            ___wmul 4624  
                 ??_HMI_DIPSwitch 00BE                         ??___awdiv 00BC  
                  __CFG_STVREN$ON 000000                            _change 00FF  
   __end_of_Event_HMI_RightButton 43BE                            _lMotor 006F  
                       ??___lldiv 00C0                            _lQueue 0068  
                      _TestButton 0184              _Event_HMI_DownButton 46C4  
                       ??___llmod 00CD                         ??___lwdiv 00BC  
              __size_of_ToSegment 0284                         ??___lwmod 00BC  
        __end_of_Port_SetQuadType 0CB2          i2Byte_GetZone@pChunkSize 0005  
                    HMI_GRender@a 0033              __end_of_Console_Init 37E0  
               GetPortTRIS@pInput 00BA                __size_of_Reset_Low 001E  
                          clear_0 2E70                            clear_1 2E82  
                          clear_2 2E8E                            clear_3 2E9A  
                          clear_4 2EA6                  ___awdiv@quotient 00BE  
                      Port_Init@i 01CA                 __end_of_MXK_Queue 4BCA  
      __end_ofHMI_SetButton@F7211 FD76                         ??_getMode 00DE  
                          _printf 0EFC              __size_of_displayMode 009E  
            __size_of_displayText 0028         __end_of_MXK_InitDIPSwitch 4A1C  
                  HMI_SetButton@v 00BF            HMI_SetSegments@pString 00B9  
                     _Console_Tab 29A0               LCD_Word_Write@value 00BD  
                    __pdataCOMRAM 0047                __size_of_Port_Init 0192  
                   ??_Port_GetPin 00BB          Port_CheckPortType@Output 00F1  
                __end_of_nullMode 45EA                   ??i2_Port_SetPin 0014  
                       ??_setMode 00F2                      __mediumconst FC6E  
     __end_ofTimer2_Init@PRESCALE FD79          Port_CheckPortType@pDrive 00F0  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                      ?_MXK_Dequeue 0001  
                  ?_HMI_SetButton 0001          Port_CheckPortType@pInput 00EE  
                   ??_Port_SetPin 00CB                         ??_reverse 00BC  
          __end_of_continuousMode 0EFC                  __end_of_stepMode 1406  
           Console_MakeField@Fill 0200                  ?_Port_SetPinType 00DE  
                          putch@c 00CC                 Motor_Speed@pMotor 00D3  
                  ?_HMI_SetNumber 00C9                    i2_Word_GetPair 4786  
         __end_of_Configure_GPIOs 3B88                  ??_MXK_TestButton 00BE  
          __end_of_Timer0_Restart 4BF0                     Set_Rotation@m 00BD  
         continuousMode@direction 00E8                      ?_MXK_Release 0001  
    __size_of_Event_HMI_DIPSwitch 002C                   __CFG_FOSC$HSPLL 000000  
          __end_ofi2_MXK_SwitchTo 4690                      i2delay_us@us 0001  
       Event_HMI_DIPSwitch@pState 00D1                   ?_LCD_Word_Write 00BD  
                      __accesstop 0060           __end_of__initialization 2EAC  
                       ?_LCD_Fill 00C1                         ?_LCD_Init 0001  
                   SPI_Init@pMode 00EA                       _Byte_GetBit 4690  
                       ?_LED_Init 0001          __end_ofi2_Timer0_Restart 4BFC  
                       ?_HMI_Init 0001                 ??_Set_Addr_Window 00C0  
                       ?_HMI_Poll 0001                     ___rparam_used 000001  
              continuousMode@mode 00E6                       _Byte_SetBit 3D9A  
                   __end_of_MASKS FD72                    _PortA_Property FF67  
                       LCD_Fill@i 00C3                         LCD_Fill@j 00C4  
                       LCD_Init@i 00EF                     __end_of_HzInc FD7B  
            __size_of_HMI_SetLeft 0016              __size_of_HMI_SetDown 0016  
           ?_Event_HMI_LeftButton 0001                    __pcstackCOMRAM 0001  
                  _PortB_Property FF65               __size_ofi2_delay_us 0040  
                    __pidataBANK0 4BFC                      __pidataBANK1 4C26  
           ?_Event_HMI_DownButton 0001               i2Byte_SetBit@pInput 0001  
            __end_of_Byte_GetPair 4A58                   Console_Render@x 00E2  
                 Console_Render@y 00E3               i2Byte_SetBit@pValue 0004  
                   ?_Set_Rotation 0001               Timer0_Init@PRESCALE FD49  
            __end_of_Byte_GetZone 347C       Event_HMI_RightButton@pState 00D1  
                     ?_FunctMotor 0001                    _PortC_Property FF63  
             __end_of_Timer0_Init 220A                     __end_of_putch 4BAE  
                       ?_MXK_Init 0001               __end_of_Timer2_Init 236A  
             __end_of_Timer0_Stop 4C42                         ?_SPI_Init 00E5  
                       ?_SPI_Send 00B8                       _Button_Init 2668  
               Port_SetType@pType 00F4                       _Button_Poll 1F44  
            __end_of_Byte_SetByte 4BBC              __end_of_Byte_SetPair 4944  
                  _HMI_LeftSwitch 4B06                    _PortD_Property FF61  
            __end_of_Byte_SetQuad 4966                      ??_LED_Toggle 00D0  
                    ??_HMI_GetBar 00B8              __end_of_Byte_SetZone 2E08  
             __end_of_Motor_Speed 4864                    _HMI_DownSwitch 4ABE  
                   SPI_Send@pData 00BA             __end_of_MXK_DIPSwitch 4AA6  
                    ??_HMI_SetBar 00B8                    _PortE_Property FF5F  
        __size_of_HMI_SetSegments 00BA            __end_ofi2_Word_GetPair 47B6  
                 ?_continuousMode 0001                    _PortF_Property FF5D  
         Port_CheckQuadType@Pair1 00EB           Port_CheckQuadType@Pair2 00EC  
        MXK_BlockSwitchTo@pModule 00BF            ?_Console_SetForecolour 00B8  
               _Console_Backspace 3F20                   ?_Timer0_Restart 0001  
                         ??_putch 00CC          __size_of_HMI_RightSwitch 0018  
             _Console_ClearCursor 4400                 __end_of_ToSegment 0A5C  
                  _PortG_Property FF5B                        __pbssBANK0 0060  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
             __end_of_Port_GetPin 4334           Port_CheckQuadType@pQuad 00E9  
                 reverse@iterator 00BD                  ??_SPI_DisableISR 00BA  
                 ?i2_MXK_SwitchTo 0001                ?_Console_Backspace 0001  
               __end_of_Reset_Low 49E0         __size_of_Event_TestButton 003C  
         __size_of_Port_TogglePin 0030                        ??_LCD_Fill 00C3  
                      ??_LCD_Init 00ED               __end_of_Port_SetPin 29A0  
          __end_of_PortA_Property FF69                         ?_Mode_Set 0001  
              Byte_SetByte@pInput 00B8                        ??_LED_Init 00E5  
              Byte_SetByte@pValue 00BA                     ?_ISR_Function 0001  
                     ?_Reset_High 0001                     ?_Timer0_Clear 0001  
                      ??_HMI_Init 00F3                        ??_HMI_Poll 00DC  
                   ?_Timer2_Clear 0001           Port_CheckPairType@Props 00E5  
          __end_of_PortB_Property FF67                     ?_Timer0_Start 00B8  
               __end_of_Port_Init 1C52                       ?_Timer0_ISR 0001  
         Port_CheckPairType@pPair 00E0                __end_of_LED_Toggle 42EE  
              __end_of_HMI_GetBar 4C3C          LCD_FillRectangle@pColour 00C1  
             ??_Console_Backspace 00BA                 Set_Addr_Window@xe 00BE  
               Set_Addr_Window@ye 00BF                 Set_Addr_Window@xs 00C0  
               Set_Addr_Window@ys 00BD                       ?_Motor_Init 00E5  
              Byte_SetPair@pInput 00C3                       ?_Motor_Move 00BB  
                     ?_Motor_Step 0001                Byte_SetPair@pValue 00C6  
              __end_of_HMI_SetBar 4C1C            __end_of_PortC_Property FF65  
              Word_GetPair@pInput 00C4                    ??_Set_Rotation 00BD  
                       ?_Port_Set 00C7                           ?___wmul 00B8  
                ?_Event_DIPSwitch 0001                 Port_GetPin@Output 00BD  
    __size_of_Console_ResetCursor 001E              ?_Console_ClearCursor 0001  
          __end_of_HMI_LeftSwitch 4B1E            __end_of_PortD_Property FF63  
                         _ADC_AN0 00AB                           _ADC_AN1 00A6  
                         _ADC_AN2 00A1                           _ADC_AN3 01BD  
      Event_HMI_DownButton@pState 00D1                        ??_MXK_Init 00F5  
               Port_GetPin@pInput 00B8                 _Console_MakeField 273C  
               ??_Console_NewLine 00B8            __end_of_HMI_DownSwitch 4AD6  
                      ??_SPI_Init 00EB            Event_TestButton@pState 00D1  
                     setMode@mode 01C2                        ??_SPI_Send 00BB  
            __end_of_HMI_SetRight 4B62                           ?_printf 00CE  
               ??_HMI_InitButtons 00B8        __size_of_MXK_InitDIPSwitch 001E  
          __end_of_PortE_Property FF61               Console_Render@F6956 01CF  
              ?_Console_MakeField 00BD                           _COUNTER 0031  
                 ??_HMI_SetButton 00B8              __end_of_HMI_UpSwitch 4AEE  
                         _LED_Set 4128           _Console_IncrementCursor 3D34  
          __end_of_PortF_Property FF5F                       _gBackcolour 0073  
                 ??_HMI_SetNumber 00CB                         _I2C1_Done 0127  
                 ?i2_Word_GetPair 000D                         _I2C2_Done 0124  
                       _I2C1_More 0121                         _I2C2_More 011E  
                       ?_delay_ms 00B8         __end_of_Console_Backspace 3F7C  
                       ?_delay_us 00B8        __end_of_MXK_InitTestButton 4A3A  
                         _SSP1ADD 000FC8                        _displaySID 4966  
                         _SSP1BUF 000FC9                           _SSP2BUF 000F6F  
          __end_of_PortG_Property FF5D               ??_Console_MakeField 00BF  
                         _SPI_DCS 4756              __size_ofi2_MXK_Queue 000E  
                ?_Configure_GPIOs 0001              i2Byte_GetZone@Offset 0008  
             __size_of_FunctMotor 00BC                    ??_ISR_Function 0017  
            i2Byte_GetZone@Output 0009                    ??_Timer0_Clear 00B8  
               Event_TestButton@j 0075                        ??_Mode_Set 00B8  
                  ??_Timer2_Clear 00B8                           _Font5x7 FD7B  
            i2Byte_GetZone@pChunk 0004              i2Byte_GetZone@pInput 0001  
                  ??_Timer0_Start 00BB              SPI_DisableISR@pInput 00B8  
                   ?_Port_GetQuad 00B8                   Byte_SetBit@pBit 00BA  
            Port_TogglePin@pInput 00CC             __end_ofi2_Byte_SetBit 4214  
          ??_Event_HMI_LeftButton 00D1                           __Hparam 0000  
               Port_GetQuad@pQuad 00BA                       _Timer0_Init 20AA  
                     _Timer2_Init 220A                           __Lparam 0000  
                     _Timer0_Stop 4C3C             __size_of_Console_Init 008A  
                         OutSeg@a 003D   __end_ofPortProperty_Valid@F6830 FD69  
          ??_Event_HMI_DownButton 00D1                     LCD_Write@mode 00BB  
                       ?_nullMode 0001                        ??_Port_Set 00CA  
       __end_of_Console_MakeField 280C                 _Console_PrintChar 1922  
                     _Motor_Speed 483A                           _Stepper 009B  
                   ?_Port_SetType 00F2                           _gCursor 0047  
                         ___awdiv 2A62             ??_Console_ClearCursor 00B8  
                         _lBuffer 0246                           ___lldiv 2BDC  
                 __size_of___wmul 0036                         ?_stepMode 0001  
                         ___llmod 347C                           ___lwdiv 385C  
                         ___lwmod 3DFE                   ?_HMI_LeftSwitch 0001  
        __end_of_Console_FormFeed 36CC                ?_Console_PrintChar 0001  
                         __pcinit 2E08                   ?_HMI_DownSwitch 0001  
                         __ramtop 1000                        _initialise 3EC2  
                         _getMode 36CC                           __ptext0 4576  
                         __ptext1 40D8                           __ptext2 1404  
                         __ptext3 4C52                           __ptext4 45B0  
                         __ptext5 0CB2                           __ptext6 4864  
                         __ptext7 4966                           __ptext8 3342  
                         __ptext9 0EFC                   __size_of_printf 0232  
                       _T0CONbits 000FD5                 i2MXK_SwitchTo@CUR 0007  
                         _dpowers FD21                         _T2CONbits 000FCA  
                   LED_Set@pValue 00CC               __size_of_Reset_High 001E  
           Event_DIPSwitch@pState 00D1                      ?_GetPortPORT 00B8  
                    ?_GetPortTRIS 00B8               ??_Console_PrintChar 00C8  
                     _Port_GetPin 42EE                           _setMode 40D8  
               __CFG_MSSPMSK$MSK5 000000               LCD_DrawRectangle@p2 00B4  
             LCD_DrawRectangle@p4 00B0                      ??i2_delay_us 0003  
                      ??_delay_ms 00BA                        ??_delay_us 00BA  
                         _reverse 3B88                         _DIPSwitch 017A  
             __size_of_Timer0_ISR 0026                       _Port_SetPin 28DC  
                  LCD_DrawField@i 00DA                         _LCD_Reset 4178  
             __size_of_Motor_Init 00D0               __size_of_Motor_Move 003A  
             __size_of_Motor_Step 0126                         _LCD_Write 4900  
            __size_of_MXK_Dequeue 003E                        delay_ms@ms 00B8  
            end_of_initialization 2EAC                        delay_us@us 00B8  
               ??_HMI_SetSegments 00BB           Console_PrintChar@pInput 00CB  
                       _HMI_SetUp 4B36                      _Console_Init 3756  
                 HMI_SetUp@pValue 00B8              __size_of_MXK_Release 001C  
      __end_of_Port_CheckPairType 3D34                           itos@Out 00C7  
                  ??_Port_GetQuad 00BB                         i2u1027_48 48EC  
              _PortProperty_Valid 37E0                Byte_SetQuad@pInput 00C3  
              SPI_MinSpeed@pInput 00C7                Byte_SetQuad@pValue 00C6  
           __size_of_Byte_GetPair 001E                   ___lldiv@divisor 00BC  
           __size_of_Byte_GetZone 009C                 ??_HMI_RightSwitch 00BE  
                 ___lldiv@counter 00C4         __end_of_Console_PrintChar 1AC0  
                      ??_nullMode 00E6                    ??_Port_SetType 01C2  
      __end_of_Port_CheckQuadType 3FD6                           printf@c 00DF  
                         printf@f 00CE                    Port_Init@pPort 01C7  
                         postdec1 000FE5                           postdec2 000FDD  
           __size_of_Byte_SetByte 000E             __size_of_Byte_SetPair 0022  
          Console_MakeField@Index 00C1                           postinc0 000FEE  
                         postinc2 000FDE               ?_PortProperty_Valid 00C7  
           __size_of_Byte_SetQuad 0022        __end_of_Port_CheckPortType 42A6  
           __size_of_Byte_SetZone 00B6                __end_ofi2_delay_us 4480  
                      ??_stepMode 00B8                Button_Init@pInitIO 01C6  
           Timer0_Init@pFrequency 00C5               _Event_HMI_DIPSwitch 47E4  
               ?_Port_SetQuadType 00EE                       _gForecolour 00FD  
       ??_Console_IncrementCursor 00BC            __size_ofi2_MXK_Release 0006  
                       _PORTFbits 000F85                ??_Port_SetQuadType 00F2  
                    ?_Console_Tab 0001                  Byte_GetZone@MASK 00BE  
           Console_Render@lCursor 00DE                         _MXK_Queue 4BBC  
                __CFG_CPUDIV$OSC1 000000                  Byte_GetZone@pMax 00BA  
      __size_of_Console_Backspace 005C                   _Set_Addr_Window 2EB6  
                  SPI_Init@pClock 00E5                  ??_LCD_Word_Write 00BF  
                     ?_displaySID 0001             __end_of_LCD_DrawField 32A0  
                  Port_Set@pInput 00C7                    SPI_Init@pInput 00EB  
            ??_PortProperty_Valid 00CB                    Port_Set@pValue 00C9  
                      ?_LCD_Reset 0001              __end_of_Set_Rotation 35AE  
                      ?_LCD_Write 00BB                      _Byte_GetPair 4A3A  
              HMI_SetButton@F7211 FD72                      _Byte_GetZone 33E0  
                   ?_MXK_SwitchTo 0001                 LCD_DrawField@xmax 00D8  
               LCD_DrawField@ymax 00D9              ?_Event_HMI_DIPSwitch 0001  
                  _Port_TogglePin 4726                        ?_HMI_SetUp 0001  
                _Event_TestButton 453A              Port_SetPinType@Props 00E3  
             continuousMode@speed 00EA                      ?_Byte_GetBit 00B8  
         __size_ofi2_Byte_GetPair 001A                     ?_positionMode 0001  
                    _Byte_SetByte 4BAE                      _Byte_SetPair 4922  
                    _Byte_SetQuad 4944           __size_ofi2_Byte_GetZone 0076  
                    _Byte_SetZone 2D52              Port_SetPinType@pType 00E1  
               ?i2_Timer0_Restart 0001                      ?_Byte_SetBit 00B8  
      __end_of_Event_HMI_UpButton 4726                     ?_SPI_MaxSpeed 00C7  
               __size_of_LCD_Fill 0058                 __size_of_LCD_Init 0172  
               __size_of_LED_Init 0062                     ?_SPI_MinSpeed 00C7  
           __end_ofi2_Timer0_Stop 4C48                ??i2_Timer0_Restart 0001  
               __size_of_HMI_Init 01FA                 __size_of_HMI_Poll 0072  
                   ?i2_Motor_Step 0001             __size_of_HMI_SetRight 0016  
      __size_of_Console_MakeField 00D0                     ??_displayMode 00E2  
                   ??_displayText 00E6                      ??_FunctMotor 00D7  
           __size_of_HMI_UpSwitch 0018                    __end_of___wmul 465A  
           __end_of_HMI_DIPSwitch 4ABE                     __pidataCOMRAM 4C07  
                     ?_initialise 0001             _Event_HMI_RightButton 437A  
                    ?_Button_Init 01C2                      ?_Button_Poll 00D3  
                       _Bus_State 004B                  ??_continuousMode 00E6  
             i2Byte_GetPair@pPair 000C              __end_of_ISR_Function 14AA  
            __end_of_Timer0_Clear 4BE4                 __size_of_MXK_Init 0180  
            __end_of_Timer2_Clear 4C36                    __end_of_printf 112E  
               __size_of_SPI_Init 041E                 __size_of_SPI_Send 006C  
                   ?_Word_GetPair 00C4                  ??_Timer0_Restart 00B8  
            __end_of_Timer0_Start 48DA           ??_Console_SetForecolour 00BA  
              Port_SetType@Output 01C4               start_initialization 2E08  
                      ?_MXK_Queue 00B8          PortProperty_Valid@Errors 00CD  
                ??i2_MXK_SwitchTo 0007                 _LCD_FillRectangle 394A  
              Port_SetType@pInput 00F2                        HMI_Init@in 00F3  
             HMI_SetNumber@pInput 00C9             __end_ofi2_Port_SetPin 300A  
          __end_of_Port_TogglePin 4756                     ?_Word_SetPair 00C7  
               Byte_SetBit@pInput 00B8                    ??_MXK_SwitchTo 00BE  
               Byte_SetBit@pValue 00BB                ?_LCD_FillRectangle 00C1  
           ??_Event_HMI_DIPSwitch 00D1               _Console_ResetCursor 4986  
     PortProperty_Valid@pPinDrive 00C9              MXK_BlockSwitchTo@CUR 00BE  
        PortProperty_Valid@pInput 00C7                     i2_MXK_Release 4C48  
                  ??_positionMode 00B8            LCD_FillRectangle@pSize 00C7  
                  SPI_Send@pInput 00B8                __end_of_FunctMotor 2BDC  
                    _HMI_SetRight 4B4C                      ??_Reset_High 00CC  
                 ___llmod@divisor 00C9          __size_of_Port_SetPinType 01C0  
                   ??_HMI_SetLeft 00B8                     ??_HMI_SetDown 00B8  
                  ??_SPI_MaxSpeed 00C9             Port_SetQuadType@pQuad 00F0  
                 ___llmod@counter 00CD                         _ToSegment 07D8  
             ??_LCD_FillRectangle 00CB             Port_SetQuadType@pType 00F1  
                 _Console_NewLine 32A0                    ??_SPI_MinSpeed 00C9  
                    _HMI_UpSwitch 4AD6                         _Reset_Low 49C2  
                    ??_Timer0_ISR 0017                   _HMI_InitButtons 4C4E  
               __size_of_Mode_Set 0012        __size_of_Console_PrintChar 019E  
                       _gCharSize 00F5                  Timer2_Init@INDEX 0077  
                       OutSeg@cur 003F                    ??i2_Motor_Step 0015  
                    ??_Motor_Init 00E9           __size_of_Console_Render 0210  
                    ??_Motor_Move 00BF                      ??_Motor_Step 00CC  
              Byte_SetZone@Offset 00C1                          ??___wmul 00BC  
             __size_of_displaySID 0020              ?_Console_ResetCursor 0001  
                       _Port_Init 1AC0                       __pdataBANK0 00F5  
                     __pdataBANK1 01CF                 __size_of_Port_Set 03BA  
              Byte_SetZone@pChunk 00BB                  ??i2_Word_GetPair 0010  
              Byte_SetZone@pInput 00B8                Byte_SetZone@pValue 00BD  
                   Mode_Set@pMode 00B8                          ??_printf 00D4  
         __end_of_Set_Addr_Window 2F60          Port_CheckQuadType@Output 00ED  
                       _gLineSize 01D3          Port_CheckQuadType@pDrive 00EA  
                  ??_Word_GetPair 00C7          Port_CheckQuadType@pInput 00E7  
             __end_of_displayMode 33E0              __end_of_Port_GetQuad 425E  
       __end_of_LCD_FillRectangle 39BE                       __pbssBIGRAM 0246  
             __end_of_displayText 488C                          ?_LED_Set 00CC  
                     __pbssCOMRAM 0029                __end_of_Reset_High 49FE  
                   __pcstackBANK0 00B8                     __pcstackBANK1 01C2  
                      itos@Length 00C5                    ??_Word_SetPair 00CB  
              __end_of_Timer0_ISR 4900              __size_of_GetPortPORT 00A6  
                     ??_LCD_Reset 00D1              __size_of_GetPortTRIS 00A6  
            __end_of_Port_SetType 1358                          ?_SPI_DCS 00B8  
                 ?_Port_TogglePin 00CC                       ??_LCD_Write 00BC  
               __size_of_delay_ms 006A                 __size_of_delay_us 0052  
              __end_of_Motor_Init 28DC               __CFG_CCP2MX$DEFAULT 000000  
              __end_of_Motor_Move 4624                __end_of_Motor_Step 2490  
           Timer2_Init@pFrequency 00C5                    ?i2_MXK_Release 0001  
                     ??_HMI_SetUp 00B8               __size_of_initialise 005E  
        Port_CheckPairType@Output 00E4                        ?_ToSegment 0001  
        Port_CheckPairType@pDrive 00E1          Port_CheckPairType@pInput 00DE  
                  reverse@tempVar 00BC                _MXK_InitTestButton 4A1C  
                      ?_Reset_Low 0001                      ?_Timer0_Init 00C5  
          __size_of_MXK_DIPSwitch 0018                      ?_Timer2_Init 00C5  
                ??_HMI_LeftSwitch 00BE                      ?_Timer0_Stop 0001  
                ___lwdiv@dividend 00B8                     _lStepFunction 002C  
         __size_of_MXK_TestButton 0018                 Byte_SetPair@pPair 00C5  
                ??_HMI_DownSwitch 00BE                         __pintcode 1408  
                   __pmediumconst FC6E                      ?_Motor_Speed 00D3  
           ??_Console_ResetCursor 00B8                          ?___awdiv 00B8  
                       __ptext100 49C2                         __ptext101 49E0  
                       __ptext110 2BDC                         __ptext102 42A6  
                       __ptext111 4C2E                         __ptext103 4726  
                       __ptext120 0A5C                         __ptext112 488C  
                       __ptext104 28DC                         __ptext121 4334  
                       __ptext113 4756                         __ptext105 42EE  
                       __ptext130 2D52                         __ptext122 4922  
                       __ptext114 2668                         __ptext106 1568  
                       __ptext131 3756                         __ptext123 3F7C  
                       __ptext115 49FE                         __ptext107 3A32  
                       __ptext140 38D4                         __ptext124 3CCA  
                       __ptext116 4C4E                         __ptext108 0000  
                       __ptext141 41C8                         __ptext133 48DA  
                       __ptext125 37E0                         __ptext117 4A1C  
                       __ptext109 220A                         __ptext142 465A  
                       __ptext134 2490                         __ptext126 44FC  
                       __ptext118 1762                         __ptext143 4440  
                       __ptext135 4C42                         __ptext127 4A3A  
                       __ptext119 3D9A                         __ptext144 4C48  
                       __ptext136 4BF0                         __ptext128 33E0  
                       __ptext145 4BCA                         __ptext137 2F60  
                       __ptext129 4944                         __ptext146 0000  
                       __ptext138 4786                         __ptext139 4A74  
                       _pShiftVal 006B               __end_of_HMI_SetLeft 4B78  
             __end_of_HMI_SetDown 4B8E                          ?___lldiv 00B8  
                      ?_Port_Init 01C5                          ?___llmod 00C5  
            Timer0_Init@pCPUClock 00CB                          ?___lwdiv 00B8  
                        ?___lwmod 00B8            ?_Event_HMI_RightButton 0001  
             ?_MXK_InitTestButton 0001                 __size_of_nullMode 003A  
               ?_Console_FormFeed 0001                 _GetPortProperties 30B0  
               __size_of_stepMode 0002                          ?_getMode 00DC  
     __end_ofTimer0_Init@PRESCALE FD59                ??_Console_FormFeed 00B8  
                 _HMI_SetSegments 2C98                ?_GetPortProperties 00B8  
              HMI_SetRight@pValue 00B8          __size_of_Event_DIPSwitch 002E  
           __size_of_Set_Rotation 0098                     ??i2_MXK_Queue 0004  
                     ??_MXK_Queue 00BB                      ?_Port_GetPin 00B8  
                        ?_setMode 00EC                 HMI_SetLeft@pValue 00B8  
           __end_of_HMI_SetButton 363E              __size_of_Console_Tab 00C2  
                        ?_reverse 00B8                      ?_Port_SetPin 00C7  
           __end_of_HMI_SetNumber 483A                  ___lwdiv@quotient 00BD  
                 _HMI_RightSwitch 4AEE                 HMI_SetDown@pValue 00B8  
             ??_GetPortProperties 00BA           __end_of_Console_NewLine 3342  
            ??_MXK_InitTestButton 00E5                Byte_GetPair@pInput 00C1  
                  __size_of_putch 000E           __end_of_HMI_InitButtons 4C52  
               i2Port_SetPin@Type 0014                 i2Port_SetPin@pPin 0012  
                  i2_Byte_GetPair 4A74                          _LCD_Fill 402E  
                        _LCD_Init 1DD2                    ___wmul@product 00BC  
                        _HMIBoard 012A                    i2_Byte_GetZone 38D4  
                        _LED_Init 3E60                         delay_ms@u 00BA  
              Button_Poll@pButton 00D3                         delay_us@u 00BA  
                        _HMI_Init 1568                          _HMI_Poll 3AA6  
              MXK_Queue@pCallback 00B8                          _IPR1bits 000F9F  
                        _IPR3bits 000FA5                          _PIE1bits 000F9D  
                        _PIE3bits 000FA3       __end_of_Console_ClearCursor 4440  
        __size_of_Configure_GPIOs 0070              __size_of_Byte_GetBit 0034  
               Byte_SetQuad@pQuad 00C5                          i2u420_40 38F6  
                        i2u420_47 38EC                          i2u422_40 393E  
                        i2u422_45 393A                          _PIR1bits 000F9E  
                        _PIR3bits 000FA4                          i2u561_40 24D4  
                        i2u562_40 24E8                          i2u563_40 2520  
                        i2u491_44 41DC                          i2u491_45 41D8  
                        i2u492_44 4202                          i2u492_45 41FE  
                        i2u495_40 446E              __size_of_Byte_SetBit 0064  
                        _RCONbits 000FD0              i2Word_GetPair@pInput 000D  
                __CFG_WDTPS$32768 000000     __size_of_Event_HMI_LeftButton 0058  
                HMI_SetBar@pValue 00B8                 Button_Init@pInput 01C2  
         __size_of_SPI_DisableISR 0028                          _SSP1CON1 000FC6  
               ??_Port_SetPinType 00E2                          _SSP1CON2 000FC5  
                        _SSP2CON1 000F6C                          _SSP2CON2 000F6B  
           __size_of_ISR_Function 00A2     __size_of_Event_HMI_DownButton 0032  
           __size_of_Timer0_Clear 000C                          _SSP1STAT 000FC7  
       __end_of_GetPortProperties 3156                          _SSP2STAT 000F6D  
                     _displayMode 3342                      _Set_Rotation 3516  
           __size_of_Timer2_Clear 0008                       _displayText 4864  
            __end_of_MXK_SwitchTo 4400                _Port_CheckPairType 3CCA  
                        _MXK_Init 1C52             __size_of_Timer0_Start 0026  
                 MXK_SwitchTo@CUR 00BE                          _SPI_Init 0000  
        __end_of_Event_TestButton 4576                          _SPI_Send 3BF4  
                      _ADCON0bits 000FC2                        _ADCON1bits 000FC1  
                ?_Set_Addr_Window 00BD                 ___wmul@multiplier 00B8  
            __end_of_positionMode 4C54                 Byte_GetBit@Output 00BC  
                      printf@flag 00D8              Timer2_Init@pCPUClock 00CE  
      __size_of_LCD_FillRectangle 0074              __size_of_Button_Init 00D4  
            __end_of_SPI_MaxSpeed 3A32                        printf@prec 00D6  
           Motor_Speed@pFrequency 00D5                 Byte_GetBit@pInput 00B8  
             Port_SetPinType@pPin 00E0              __size_of_Button_Poll 0166  
              _Port_CheckQuadType 3F7C                     _MXK_DIPSwitch 4A8E  
             ?_Port_CheckPairType 00DE              __end_of_SPI_MinSpeed 3AA6  
                   ??_MXK_Dequeue 00CE                  __size_of_LED_Set 0050  
          __size_ofi2_Byte_SetBit 004C                _Port_CheckPortType 425E  
           Button_Poll@pIncrement 00D5                      ??_displaySID 00E0  
         PortProperty_Valid@F6830 FD59              __end_ofi2_Motor_Step 2590  
                 ??i2_MXK_Release 0001                         copy_data0 2E1C  
                       copy_data1 2E3C                         copy_data2 2E5C  
                   ??_MXK_Release 00B8            __end_ofi2_Byte_GetPair 4A8E  
       __size_of_Port_SetQuadType 0256                  __size_of_SPI_DCS 0030  
             ?_Port_CheckQuadType 00E7            __end_ofi2_Byte_GetZone 394A  
             __end_ofi2_MXK_Queue 4BD8               ?_Port_CheckPortType 00EE  
                 itos@destination 00C1                          _InitList FC6F  
            _Motor_Step$intlevel0 2370                          _Mode_Set 4B8E  
              Port_GetQuad@Output 00BD                       ??_ToSegment 00B8  
                    _ISR_Function 1408                      _Timer0_Clear 4BD8  
                     _HMI_SetLeft 4B62                       _HMI_SetDown 4B78  
              Port_GetQuad@pInput 00B8                      _Timer2_Clear 4C2E  
            __end_of_Word_GetPair 453A                          _lCBuffer 0100  
            ??_Port_CheckPairType 00E2                       ??_Reset_Low 00CC  
                        __Hrparam 0000                      _Timer0_Start 48B4  
                  _Console_Render 1358                          __Lrparam 0000  
                 Timer2_Init@RDIV 00CA        Event_HMI_LeftButton@pState 00D1  
                  LCD_Write@value 00BC                          _Port_Set 041E  
                    OutSeg@segset 003E                         rand@screw 003B  
            __end_of_Word_SetPair 437A                       ??_Port_Init 01C8  
         __end_of_HMI_SetSegments 2D52              ??_Port_CheckQuadType 00EB  
              __end_of_displaySID 4986             __size_of_Port_GetQuad 004A  
                __size_of___awdiv 00BE                  __size_of___lldiv 00BC  
               _MXK_BlockSwitchTo 44BE                  __size_of___llmod 009A  
                __size_of___lwdiv 0078              ??_Port_CheckPortType 00F1  
                __size_of___lwmod 0062                      ??_initialise 00F5  
                        _lBufferX 007B                          _lBufferY 007A  
             Timer2_Init@PRESCALE FD76                _Event_HMI_UpButton 46F6  
                 LCD_Fill@pColour 00C1                ?_MXK_BlockSwitchTo 0001  
       __size_ofi2_Timer0_Restart 000C                          _lCurrent 0071  
                __size_of_getMode 008A           __end_of_HMI_RightSwitch 4B06  
          Byte_GetZone@pChunkSize 00BC                    ?_MXK_DIPSwitch 0001  
          Byte_SetZone@pChunkSize 00BC             __size_of_Port_SetType 022A  
                   reverse@length 00BA                         itos@input 00BF  
           i2MXK_SwitchTo@pModule 0008                Motor_Init@pAddress 00E7  
                        _delay_ms 3C60                          _delay_us 4086  
                        _clearall 007C                   ___lwdiv@divisor 00BA  
  __size_of_Console_SetForecolour 000A               ?_Event_HMI_UpButton 0001  
                __size_of_setMode 0050                   ___lwdiv@counter 00BC  
   __end_of_Console_SetForecolour 4C26                   Port_GetPin@pPin 00BA  
                        __ptext10 4BA0                          __ptext11 1922  
                        __ptext20 347C                          __ptext12 29A0  
                        __ptext21 36CC                          __ptext13 2A62  
                        __ptext30 4B1E                          __ptext22 3AA6  
                        __ptext14 3D34                          __ptext31 4214  
                        __ptext23 1F44                          __ptext15 32A0  
                        __ptext40 4B36                          __ptext32 47B6  
                        __ptext24 4A8E                          __ptext16 363E  
                        __ptext41 4B4C                          __ptext33 46C4  
                        __ptext25 4AA6                          __ptext17 4986  
                        __ptext50 4B78                          __ptext42 4B62  
                        __ptext34 46F6                          __ptext26 4ABE  
                        __ptext18 3F20                          __ptext51 4C12  
                        __ptext43 4810                          __ptext35 437A  
                        __ptext27 4AD6                          __ptext19 4400  
                        __ptext60 2B20                          __ptext52 4C36  
                        __ptext44 2590                          __ptext36 3FD6  
                        __ptext28 4AEE                          __ptext61 483A  
                        __ptext53 4C1C                          __ptext45 3B88  
                        __ptext37 47E4                          __ptext29 4B06  
                        __ptext70 112E                          __ptext62 45EA  
                        __ptext54 1358                          __ptext46 3DFE  
                        __ptext38 453A                          __ptext71 425E  
                        __ptext63 48B4                          __ptext55 394A  
                        __ptext47 385C                          __ptext39 35AE  
             ??_MXK_BlockSwitchTo 00BE                          __ptext80 236A  
                        __ptext72 041E                          __ptext64 3EC2  
                        __ptext56 31FC                          __ptext48 2C98  
                        __ptext81 4C3C                          __ptext73 4BAE  
                        __ptext65 280C                          __ptext57 4624  
                        __ptext49 07D8                          __ptext90 402E  
                        __ptext82 4BE4                          __ptext74 300A  
                        __ptext66 20AA                          __ptext58 273C  
                        __ptext91 2EB6                          __ptext83 43BE  
                        __ptext75 30B0                          __ptext67 4BD8  
                        __ptext59 4690                          __ptext92 49A4  
                        __ptext84 4A58                          __ptext76 3156  
                        __ptext68 1C52                          __ptext93 4900  
                        __ptext85 4BBC                          __ptext77 3E60  
                        __ptext69 1AC0                          __ptext94 3BF4  
                        __ptext86 44BE                          __ptext78 4128  
                        __ptext95 4B8E                          __ptext87 4086  
                        __ptext79 4480                          __ptext96 3B18  
                        __ptext88 1DD2                          __ptext97 39BE  
                        __ptext89 3516                          __ptext98 4178  
                        __ptext99 3C60                      _SSP1CON1bits 000FC6  
                __size_of_reverse 006C                      _SSP1CON2bits 000FC5  
     __size_of_PortProperty_Valid 007C                i2Byte_GetZone@MASK 0007  
                    _SSP2CON1bits 000F6C                      _SSP2CON2bits 000F6B  
                 ?i2_Byte_GetPair 000A                  ?_Console_NewLine 0001  
               ??_Event_DIPSwitch 00D1                   ?i2_Byte_GetZone 0001  
              i2Byte_GetZone@pMax 0003                  ?_HMI_InitButtons 0001  
             __end_of_MXK_Dequeue 44BE                 HMI_SetSegments@in 00BC  
           Button_Init@pThreshold 01C4                   displayMode@mode 00E4  
                   __size_of_main 003A                     __size_of_itos 00D8  
               Byte_GetPair@pPair 00C3            __end_of_Console_Render 1568  
              __end_of_initialise 3F20               i2Port_SetPin@pInput 0010  
             i2Port_SetPin@pValue 0013                      _Port_GetQuad 4214  
             __end_of_MXK_Release 4A74                    _MXK_TestButton 4B1E  
                   i2_Byte_SetBit 41C8              ??_Event_HMI_UpButton 00D1  
             i2Word_GetPair@pPair 000F                          _nullMode 45B0  
       __end_of_MXK_BlockSwitchTo 44FC          ?_Console_IncrementCursor 0001  
            __size_of_Timer0_Init 0160              __size_of_Timer2_Init 0160  
                        int$flags 0051              __size_of_Timer0_Stop 0006  
                    _Port_SetType 112E                      Port_Set@Type 00DE  
                        _stepMode 1404        __size_of_GetPortProperties 00A6  
          __size_of_LCD_DrawField 00A4                 ??_Configure_GPIOs 00ED  
                       printf@val 00DB                      _SSP1STATbits 000FC7  
            __size_of_Motor_Speed 002A                    Timer0_Init@DIV 0064  
                  Timer0_Init@PRE 0078                      _SSP2STATbits 000F6D  
                      _LED_Toggle 42A6                        _HMI_GetBar 4C36  
            Button_Init@pGetState 01C9            PortProperty_Valid@Pair 00DD  
                ??_Port_TogglePin 00CF                       _OSCTUNEbits 000F9B  
                      _INTCONbits 000FF2       __end_of_Event_HMI_DIPSwitch 4810  
          PortProperty_Valid@pPin 00CA                        _HMI_SetBar 4C12  
                Byte_SetZone@MASK 00C2                       i2_MXK_Queue 4BCA  
                  Timer2_Init@DIV 0060                    Timer2_Init@PRE 0076  
                Byte_SetZone@pMax 00BA            __size_ofi2_Timer0_Stop 0006  
            __size_of_Port_GetPin 0046              Button_Init@pFunction 01CC  
                        itos@Data 00C3                LCD_FillRectangle@i 00CD  
              LCD_FillRectangle@j 00CE              __size_of_Port_SetPin 00C4  
                        intlevel2 0000                      reverse@input 00B8  
          __size_of_HMI_DIPSwitch 0018                  ___lwmod@dividend 00B8  
                ___lldiv@dividend 00B8            __end_of_MXK_TestButton 4B36  
                 ?_Console_Render 0001           __size_of_LCD_Word_Write 001E  
                  ?i2_Byte_SetBit 0001             __size_of_MXK_SwitchTo 0042  
         ??_Event_HMI_RightButton 00D1                    _SPI_DisableISR 488C  
                 Port_Init@pInput 01C5                          printf@ap 00D9  
           __size_of_positionMode 0002          Event_HMI_UpButton@pState 00D1  
          __size_ofi2_Port_SetPin 00AA                  ?_HMI_SetSegments 00B9  
         Console_MakeField@Column 00C4             __size_of_SPI_MaxSpeed 0074  
                   SPI_DCS@pInput 00B8             __size_of_SPI_MinSpeed 0074  
                 ??_MXK_DIPSwitch 00BE            Event_HMI_DIPSwitch@Bar 00D2  
           __size_ofi2_Motor_Step 0100           Console_MakeField@pInput 00C3  
                ?_HMI_RightSwitch 0001                  ___lldiv@quotient 00C0  
                   ??_GetPortPORT 00BA                   ___lwmod@divisor 00BA  
                   ??_GetPortTRIS 00BA             Timer0_Start@pFunction 00B8  
              Word_SetPair@pInput 00C7                   ___lwmod@counter 00BC  
              Word_SetPair@pValue 00CA                  Motor_Init@pMotor 00E5  
                     _MXK_Dequeue 4480                    LED_Toggle@pLED 00D0  
                   _LCD_DrawField 31FC                  _Port_SetQuadType 0A5C  
         __size_of_continuousMode 024A                       _MXK_Release 4A58  
       __size_of_Console_FormFeed 008E                      _MXK_SwitchTo 43BE  
           __size_of_Word_GetPair 003E                Byte_GetZone@Offset 00BF  
                   ?_Console_Init 0001                 Word_SetPair@pPair 00C9  
                 _Port_SetPinType 1762           __size_of_Timer0_Restart 000C  
              Byte_GetZone@Output 00C0                Byte_GetZone@pChunk 00BB  
                    _positionMode 4C52                   ?_MXK_TestButton 0001  
     __end_of_Console_ResetCursor 49A4                Byte_GetZone@pInput 00B8  
         __size_ofi2_MXK_SwitchTo 0036   __end_of_Console_IncrementCursor 3D9A  
           __size_of_Word_SetPair 0046            __end_of_SPI_DisableISR 48B4  
                    _SPI_MaxSpeed 39BE                      _SPI_MinSpeed 3A32  
              Port_Set@TypeActual 00DC  
